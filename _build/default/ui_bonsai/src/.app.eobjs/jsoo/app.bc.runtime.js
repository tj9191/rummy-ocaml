// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=runtime, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Assert_failure, Division_by_zero, End_of_file, Failure, Invalid_argument, Match_failure, Not_found, Out_of_memory, Stack_overflow, Sys_blocked_io, Sys_error, Undefined_recursive_module
//# unitInfo: Primitives: %caml_format_int_special, %direct_int_div, %direct_int_mod, %direct_int_mul, %direct_obj_tag, %identity, %int_add, %int_and, %int_asr, %int_div, %int_lsl, %int_lsr, %int_mod, %int_mul, %int_neg, %int_or, %int_sub, %int_xor, Base_am_testing, Base_caml_exn_is_most_recent_exn, Base_clear_caml_backtrace_pos, Base_hash_double, Base_hash_string, Base_int_math_int32_clz, Base_int_math_int32_ctz, Base_int_math_int64_clz, Base_int_math_int64_ctz, Base_int_math_int64_pow_stub, Base_int_math_int_clz, Base_int_math_int_ctz, Base_int_math_int_popcount, Base_int_math_int_pow_stub, Base_int_math_nativeint_clz, Base_int_math_nativeint_ctz, Base_internalhash_fold_float, Base_internalhash_fold_int, Base_internalhash_fold_int64, Base_internalhash_fold_string, Base_internalhash_get_hash_value, Base_unsafe_create_local_bytes, BigStringReader, MlBytes, MlFakeDevice, MlFakeFd, MlFakeFd_out, MlFakeFile, MlFile, MlInt64, MlMutex, MlNat, MlNodeDevice, MlNodeFd, MlObjectTable, MlStringReader, Ml_Bigarray, Ml_Bigarray_c_1_1, UInt8ArrayReader, add_nat, bigstring_alloc_v2, bigstring_blit_bigstring_bytes_stub, bigstring_blit_bytes_bigstring_stub, bigstring_blit_string_bigstring_stub, bigstring_blit_stub, bigstring_destroy_stub, bigstring_find, bigstring_is_mmapped_stub, bigstring_memcmp_bytes_stub, bigstring_memcmp_stub, bigstring_memmem_bytecode, bigstring_memset_stub, bigstring_of_array_buffer, bigstring_of_typed_array, bigstring_realloc, bigstring_to_array_buffer, bigstring_to_typed_array, bigstringaf_blit_from_bytes, bigstringaf_blit_to_bigstring, bigstringaf_blit_to_bytes, bigstringaf_memchr, bigstringaf_memcmp_bigstring, bigstringaf_memcmp_string, bin_prot_blit_buf_bytes_stub, bin_prot_blit_buf_float_array_stub, bin_prot_blit_buf_stub, bin_prot_blit_bytes_buf_stub, bin_prot_blit_float_array_buf_stub, bin_prot_blit_string_buf_stub, blit_nat, caml_MD5Final, caml_MD5Init, caml_MD5Transform, caml_MD5Update, caml_abs_float, caml_acos_float, caml_acosh_float, caml_add_float, caml_alloc_dummy, caml_alloc_dummy_float, caml_alloc_dummy_infix, caml_alloc_stack, caml_argv, caml_array_append, caml_array_blit, caml_array_bound_error, caml_array_concat, caml_array_fill, caml_array_get, caml_array_get_addr, caml_array_get_float, caml_array_of_bytes, caml_array_of_string, caml_array_set, caml_array_set_addr, caml_array_set_float, caml_array_sub, caml_array_unsafe_get, caml_array_unsafe_get_float, caml_array_unsafe_set, caml_array_unsafe_set_float, caml_asin_float, caml_asinh_float, caml_atan2_float, caml_atan_float, caml_atanh_float, caml_atomic_cas, caml_atomic_exchange, caml_atomic_fetch_add, caml_atomic_load, caml_atomic_make_contended, caml_ba_blit, caml_ba_change_layout, caml_ba_compare, caml_ba_create, caml_ba_create_buffer, caml_ba_create_from, caml_ba_create_unsafe, caml_ba_custom_name, caml_ba_deserialize, caml_ba_dim, caml_ba_dim_1, caml_ba_dim_2, caml_ba_dim_3, caml_ba_fill, caml_ba_from_typed_array, caml_ba_get_1, caml_ba_get_2, caml_ba_get_3, caml_ba_get_generic, caml_ba_get_size, caml_ba_get_size_per_element, caml_ba_hash, caml_ba_init, caml_ba_kind, caml_ba_kind_of_typed_array, caml_ba_layout, caml_ba_map_file, caml_ba_map_file_bytecode, caml_ba_num_dims, caml_ba_reshape, caml_ba_serialize, caml_ba_set_1, caml_ba_set_2, caml_ba_set_3, caml_ba_set_generic, caml_ba_slice, caml_ba_sub, caml_ba_to_typed_array, caml_ba_uint8_get16, caml_ba_uint8_get32, caml_ba_uint8_get64, caml_ba_uint8_set16, caml_ba_uint8_set32, caml_ba_uint8_set64, caml_backtrace_status, caml_bigstring_blit_ba_to_ba, caml_bigstring_blit_ba_to_bytes, caml_bigstring_blit_bytes_to_ba, caml_bigstring_blit_string_to_ba, caml_bigstring_memcmp, caml_blit_bytes, caml_blit_string, caml_bswap16, caml_build_symbols, caml_bytes_bound_error, caml_bytes_compare, caml_bytes_equal, caml_bytes_get, caml_bytes_get16, caml_bytes_get32, caml_bytes_get64, caml_bytes_greaterequal, caml_bytes_greaterthan, caml_bytes_lessequal, caml_bytes_lessthan, caml_bytes_notequal, caml_bytes_of_array, caml_bytes_of_jsbytes, caml_bytes_of_string, caml_bytes_of_utf16_jsstring, caml_bytes_set, caml_bytes_set16, caml_bytes_set32, caml_bytes_set64, caml_bytes_unsafe_get, caml_bytes_unsafe_set, caml_call_gen, caml_callback, caml_cbrt_float, caml_ceil_float, caml_channel_descriptor, caml_check_bound, caml_check_bound_bigstring, caml_classify_float, caml_compare, caml_compare_val, caml_compare_val_get_custom, caml_compare_val_number_custom, caml_compare_val_tag, caml_continuation_use_and_update_handler_noexc, caml_continuation_use_noexc, caml_convert_bytes_to_array, caml_convert_raw_backtrace, caml_convert_raw_backtrace_slot, caml_convert_string_to_bytes, caml_copysign_float, caml_cos_float, caml_cosh_float, caml_create_bytes, caml_create_file, caml_create_string, caml_csel_value, caml_current_dir, caml_custom_event_index, caml_custom_ops, caml_decompress_input, caml_div, caml_div_float, caml_domain_dls, caml_domain_dls_get, caml_domain_dls_set, caml_domain_id, caml_domain_spawn, caml_dummy_obj_is_stack, caml_ensure_stack_capacity, caml_ephe_blit_data, caml_ephe_blit_key, caml_ephe_check_data, caml_ephe_check_key, caml_ephe_create, caml_ephe_data_offset, caml_ephe_get_data, caml_ephe_get_data_copy, caml_ephe_get_key, caml_ephe_get_key_copy, caml_ephe_key_offset, caml_ephe_set_data, caml_ephe_set_key, caml_ephe_unset_data, caml_ephe_unset_key, caml_eq_float, caml_equal, caml_erf_float, caml_erfc_float, caml_eventlog_pause, caml_eventlog_resume, caml_executable_name, caml_exn_with_js_backtrace, caml_exp2_float, caml_exp_float, caml_expm1_float, caml_failwith, caml_fatal_uncaught_exception, caml_fill_bytes, caml_fill_string, caml_final_register, caml_final_register_called_without_value, caml_final_release, caml_finish_formatting, caml_float_compare, caml_float_of_bytes, caml_float_of_int, caml_float_of_string, caml_floatarray_blit, caml_floatarray_create, caml_floatarray_get, caml_floatarray_set, caml_floatarray_unsafe_get, caml_floatarray_unsafe_set, caml_floor_float, caml_fma_float, caml_fmod_float, caml_format_exception, caml_format_float, caml_format_int, caml_fresh_oo_id, caml_frexp_float, caml_fs_init, caml_gc_compaction, caml_gc_counters, caml_gc_full_major, caml_gc_get, caml_gc_huge_fallback_count, caml_gc_major, caml_gc_major_slice, caml_gc_minor, caml_gc_minor_words, caml_gc_quick_stat, caml_gc_set, caml_gc_stat, caml_ge_float, caml_get_continuation_callstack, caml_get_current_callstack, caml_get_exception_backtrace, caml_get_exception_raw_backtrace, caml_get_global_data, caml_get_major_bucket, caml_get_major_credit, caml_get_minor_free, caml_get_public_method, caml_get_root, caml_global_data, caml_gr_arc_aux, caml_gr_blit_image, caml_gr_clear_graph, caml_gr_close_graph, caml_gr_close_subwindow, caml_gr_create_image, caml_gr_current_x, caml_gr_current_y, caml_gr_display_mode, caml_gr_doc_of_state, caml_gr_draw_arc, caml_gr_draw_char, caml_gr_draw_image, caml_gr_draw_rect, caml_gr_draw_str, caml_gr_draw_string, caml_gr_dump_image, caml_gr_fill_arc, caml_gr_fill_poly, caml_gr_fill_rect, caml_gr_lineto, caml_gr_make_image, caml_gr_moveto, caml_gr_open_graph, caml_gr_open_subwindow, caml_gr_plot, caml_gr_point_color, caml_gr_remember_mode, caml_gr_resize_window, caml_gr_set_color, caml_gr_set_font, caml_gr_set_line_width, caml_gr_set_text_size, caml_gr_set_window_title, caml_gr_sigio_handler, caml_gr_sigio_signal, caml_gr_size_x, caml_gr_size_y, caml_gr_state, caml_gr_state_create, caml_gr_state_get, caml_gr_state_init, caml_gr_state_set, caml_gr_synchronize, caml_gr_text_size, caml_gr_wait_event, caml_gr_window_id, caml_greaterequal, caml_greaterthan, caml_gt_float, caml_hash, caml_hash_mix_bigstring, caml_hash_mix_bytes, caml_hash_mix_bytes_arr, caml_hash_mix_final, caml_hash_mix_float, caml_hash_mix_int, caml_hash_mix_int64, caml_hash_mix_jsbytes, caml_hash_mix_string, caml_hash_nat, caml_hexstring_of_float, caml_hypot_float, caml_input_value, caml_input_value_from_bytes, caml_input_value_from_reader, caml_input_value_from_string, caml_input_value_to_outside_heap, caml_install_signal_handler, caml_int32_add, caml_int32_and, caml_int32_bits_of_float, caml_int32_bswap, caml_int32_compare, caml_int32_div, caml_int32_float_of_bits, caml_int32_format, caml_int32_mod, caml_int32_mul, caml_int32_neg, caml_int32_of_float, caml_int32_of_int, caml_int32_of_string, caml_int32_or, caml_int32_shift_left, caml_int32_shift_right, caml_int32_shift_right_unsigned, caml_int32_sub, caml_int32_to_float, caml_int32_to_int, caml_int32_unmarshal, caml_int32_xor, caml_int64_add, caml_int64_and, caml_int64_bits_of_float, caml_int64_bswap, caml_int64_compare, caml_int64_create_lo_hi, caml_int64_create_lo_mi_hi, caml_int64_div, caml_int64_float_of_bits, caml_int64_format, caml_int64_hash, caml_int64_hi32, caml_int64_is_negative, caml_int64_is_zero, caml_int64_lo32, caml_int64_marshal, caml_int64_mod, caml_int64_mul, caml_int64_neg, caml_int64_of_bytes, caml_int64_of_float, caml_int64_of_int, caml_int64_of_int32, caml_int64_of_nativeint, caml_int64_of_string, caml_int64_offset, caml_int64_or, caml_int64_shift_left, caml_int64_shift_right, caml_int64_shift_right_unsigned, caml_int64_sub, caml_int64_to_bytes, caml_int64_to_float, caml_int64_to_int, caml_int64_to_int32, caml_int64_to_nativeint, caml_int64_ult, caml_int64_unmarshal, caml_int64_xor, caml_int_compare, caml_int_of_float, caml_int_of_string, caml_invalid_argument, caml_is_continuation_tag, caml_is_js, caml_is_ml_bytes, caml_is_ml_string, caml_is_printable, caml_is_special_exception, caml_js_call, caml_js_delete, caml_js_equals, caml_js_error_of_exception, caml_js_error_option_of_exception, caml_js_eval_string, caml_js_expr, caml_js_from_array, caml_js_from_bool, caml_js_from_float, caml_js_from_int32, caml_js_from_nativeint, caml_js_from_string, caml_js_fun_call, caml_js_function_arity, caml_js_get, caml_js_get_console, caml_js_html_entities, caml_js_html_escape, caml_js_instanceof, caml_js_meth_call, caml_js_new, caml_js_object, caml_js_on_ie, caml_js_pure_expr, caml_js_set, caml_js_strict_equals, caml_js_to_array, caml_js_to_bool, caml_js_to_byte_string, caml_js_to_float, caml_js_to_int32, caml_js_to_nativeint, caml_js_to_string, caml_js_typeof, caml_js_var, caml_js_wrap_callback, caml_js_wrap_callback_arguments, caml_js_wrap_callback_strict, caml_js_wrap_callback_unsafe, caml_js_wrap_meth_callback, caml_js_wrap_meth_callback_arguments, caml_js_wrap_meth_callback_strict, caml_js_wrap_meth_callback_unsafe, caml_jsbytes_of_string, caml_jsoo_flags_effects, caml_jsoo_flags_use_js_string, caml_jsstring_of_string, caml_lazy_make_forward, caml_lazy_read_result, caml_lazy_reset_to_lazy, caml_lazy_update_to_forcing, caml_lazy_update_to_forward, caml_ldexp_float, caml_le_float, caml_lessequal, caml_lessthan, caml_lex_array, caml_lex_engine, caml_list_mount_point, caml_list_of_js_array, caml_list_to_js_array, caml_log10_float, caml_log1p_float, caml_log2_float, caml_log_float, caml_lt_float, caml_lxm_next, caml_make_array, caml_make_float_vect, caml_make_local_vect, caml_make_path, caml_make_vect, caml_marshal_constants, caml_marshal_data_size, caml_marshal_header_size, caml_maybe_attach_backtrace, caml_maybe_print_stats, caml_md5_bytes, caml_md5_chan, caml_md5_string, caml_memprof_discard, caml_memprof_set, caml_memprof_start, caml_memprof_stop, caml_ml_bytes_content, caml_ml_bytes_length, caml_ml_channel_size, caml_ml_channel_size_64, caml_ml_channels, caml_ml_close_channel, caml_ml_condition_broadcast, caml_ml_condition_new, caml_ml_condition_signal, caml_ml_condition_wait, caml_ml_debug_info_status, caml_ml_domain_cpu_relax, caml_ml_domain_id, caml_ml_domain_set_name, caml_ml_domain_unique_token, caml_ml_enable_runtime_warnings, caml_ml_flush, caml_ml_input, caml_ml_input_bigarray, caml_ml_input_block, caml_ml_input_char, caml_ml_input_int, caml_ml_input_scan_line, caml_ml_is_buffered, caml_ml_mutex_lock, caml_ml_mutex_new, caml_ml_mutex_try_lock, caml_ml_mutex_unlock, caml_ml_open_descriptor_in, caml_ml_open_descriptor_in_with_flags, caml_ml_open_descriptor_out, caml_ml_open_descriptor_out_with_flags, caml_ml_out_channels_list, caml_ml_output, caml_ml_output_bigarray, caml_ml_output_bytes, caml_ml_output_char, caml_ml_output_int, caml_ml_output_ta, caml_ml_pos_in, caml_ml_pos_in_64, caml_ml_pos_out, caml_ml_pos_out_64, caml_ml_runtime_warnings_enabled, caml_ml_seek_in, caml_ml_seek_in_64, caml_ml_seek_out, caml_ml_seek_out_64, caml_ml_set_binary_mode, caml_ml_set_buffered, caml_ml_set_channel_name, caml_ml_set_channel_output, caml_ml_set_channel_refill, caml_ml_string_length, caml_mod, caml_modf_float, caml_mount_autoload, caml_mul, caml_mul_float, caml_named_value, caml_named_values, caml_nativeint_add, caml_nativeint_and, caml_nativeint_bswap, caml_nativeint_compare, caml_nativeint_div, caml_nativeint_format, caml_nativeint_mod, caml_nativeint_mul, caml_nativeint_neg, caml_nativeint_of_float, caml_nativeint_of_int, caml_nativeint_of_int32, caml_nativeint_of_string, caml_nativeint_or, caml_nativeint_shift_left, caml_nativeint_shift_right, caml_nativeint_shift_right_unsigned, caml_nativeint_sub, caml_nativeint_to_float, caml_nativeint_to_int, caml_nativeint_to_int32, caml_nativeint_unmarshal, caml_nativeint_xor, caml_neg_float, caml_neq_float, caml_new_lex_engine, caml_new_string, caml_nextafter_float, caml_notequal, caml_obj_add_offset, caml_obj_block, caml_obj_compare_and_swap, caml_obj_dup, caml_obj_is_block, caml_obj_is_shared, caml_obj_make_forward, caml_obj_raw_field, caml_obj_reachable_words, caml_obj_set_raw_field, caml_obj_set_tag, caml_obj_tag, caml_obj_truncate, caml_obj_update_tag, caml_obj_with_tag, caml_ojs_new_arr, caml_oo_last_id, caml_output_val, caml_output_value, caml_output_value_to_buffer, caml_output_value_to_bytes, caml_output_value_to_string, caml_parse_digit, caml_parse_engine, caml_parse_format, caml_parse_sign_and_base, caml_parser_trace, caml_pos_in, caml_pos_out, caml_power_float, caml_pure_js_expr, caml_raise_constant, caml_raise_end_of_file, caml_raise_no_such_file, caml_raise_not_a_dir, caml_raise_not_found, caml_raise_sys_error, caml_raise_with_arg, caml_raise_with_args, caml_raise_with_string, caml_raise_zero_divide, caml_raw_backtrace_length, caml_raw_backtrace_next_slot, caml_raw_backtrace_slot, caml_read_file_content, caml_recommended_domain_count, caml_record_backtrace, caml_record_backtrace_flag, caml_refill, caml_register_channel_for_spacetime, caml_register_global, caml_register_named_value, caml_restore_raw_backtrace, caml_root, caml_round_float, caml_runtime_events_create_cursor, caml_runtime_events_free_cursor, caml_runtime_events_pause, caml_runtime_events_read_poll, caml_runtime_events_resume, caml_runtime_events_start, caml_runtime_events_user_register, caml_runtime_events_user_resolve, caml_runtime_events_user_write, caml_runtime_parameters, caml_runtime_variant, caml_runtime_warnings, caml_seek_in, caml_seek_out, caml_set_oo_id, caml_set_parser_trace, caml_set_static_env, caml_signbit_float, caml_sin_float, caml_sinh_float, caml_spacetime_enabled, caml_spacetime_only_works_for_native_code, caml_sqrt_float, caml_sse2_float64_max_bytecode, caml_sse2_float64_min_bytecode, caml_str_initialize, caml_str_repeat, caml_string_bound_error, caml_string_compare, caml_string_equal, caml_string_get, caml_string_get16, caml_string_get32, caml_string_get64, caml_string_greaterequal, caml_string_greaterthan, caml_string_hash, caml_string_lessequal, caml_string_lessthan, caml_string_notequal, caml_string_of_array, caml_string_of_bytes, caml_string_of_jsbytes, caml_string_of_jsstring, caml_string_set, caml_string_set16, caml_string_set32, caml_string_set64, caml_string_unsafe_get, caml_string_unsafe_set, caml_sub_float, caml_subarray_to_jsbytes, caml_sys_argv, caml_sys_chdir, caml_sys_close, caml_sys_const_backend_type, caml_sys_const_big_endian, caml_sys_const_int_size, caml_sys_const_max_wosize, caml_sys_const_naked_pointers_checked, caml_sys_const_ostype_cygwin, caml_sys_const_ostype_unix, caml_sys_const_ostype_win32, caml_sys_const_word_size, caml_sys_executable_name, caml_sys_exit, caml_sys_fds, caml_sys_file_exists, caml_sys_get_argv, caml_sys_get_config, caml_sys_getcwd, caml_sys_getenv, caml_sys_is_directory, caml_sys_is_regular_file, caml_sys_isatty, caml_sys_mkdir, caml_sys_modify_argv, caml_sys_open, caml_sys_open_for_node, caml_sys_random_seed, caml_sys_read_directory, caml_sys_remove, caml_sys_rename, caml_sys_rmdir, caml_sys_system_command, caml_sys_time, caml_sys_time_include_children, caml_sys_unsafe_getenv, caml_tan_float, caml_tanh_float, caml_to_js_string, caml_trailing_slash, caml_trampoline, caml_trampoline_return, caml_trunc_float, caml_uint8_array_of_bytes, caml_uint8_array_of_string, caml_unix_cleanup, caml_unix_closedir, caml_unix_filedescr_of_fd, caml_unix_findclose, caml_unix_findfirst, caml_unix_findnext, caml_unix_getpwuid, caml_unix_gettimeofday, caml_unix_getuid, caml_unix_gmtime, caml_unix_has_symlink, caml_unix_inet_addr_of_string, caml_unix_isatty, caml_unix_localtime, caml_unix_lstat, caml_unix_lstat_64, caml_unix_mkdir, caml_unix_mktime, caml_unix_opendir, caml_unix_readdir, caml_unix_readlink, caml_unix_rewinddir, caml_unix_rmdir, caml_unix_startup, caml_unix_stat, caml_unix_stat_64, caml_unix_symlink, caml_unix_time, caml_unix_unlink, caml_unmount, caml_update_dummy, caml_utf16_of_utf8, caml_utf8_of_utf16, caml_weak_blit, caml_weak_check, caml_weak_create, caml_weak_get, caml_weak_get_copy, caml_weak_set, caml_wrap_exception, caml_xmlhttprequest_create, caml_zstd_initialize, compare_digits_nat, compare_nat, compare_nat_real, complement_nat, core_array_unsafe_float_blit, core_array_unsafe_int_blit, core_gc_compactions, core_gc_heap_chunks, core_gc_heap_words, core_gc_major_collections, core_gc_major_plus_minor_words, core_gc_major_words, core_gc_minor_collections, core_gc_minor_words, core_gc_promoted_words, core_gc_run_memprof_callbacks, core_gc_top_heap_words, core_heap_block_is_heap_block, core_md5_digest_subbigstring, core_md5_fd, core_time_ns_format, create_nat, decr_nat, deserialize_nat, div_digit_nat, div_helper, div_nat, fs_node_supported, incr_nat, initialize_nat, internalhash_fold_bigstring, is_digit_int, is_digit_odd, is_digit_zero, jsoo_create_file, jsoo_create_file_extern, jsoo_effect_not_supported, jsoo_floor_log2, jsoo_is_ascii, jsoo_mount_point, jsoo_sys_getenv, land_digit_nat, length_nat, lor_digit_nat, lxor_digit_nat, make_unix_err_args, ms_float_to_ns_int64, mult_digit_nat, mult_nat, nat_of_array, nth_digit_nat, nth_digit_nat_native, num_digits_nat, num_leading_zero_bits_in_digit, os_type, path_is_absolute, ppx_expect_runtime_after_test, ppx_expect_runtime_before_test, ppx_expect_runtime_flush_stubs_streams, ppx_expect_runtime_out_channel_position, ppx_expect_runtime_saved_stderr, ppx_expect_runtime_saved_stdout, re_match, re_partial_match, re_replacement_text, re_search_backward, re_search_forward, re_string_match, resolve_fs_device, serialize_nat, set_digit_nat, set_digit_nat_native, set_to_zero_nat, shift_left_nat, shift_right_nat, should_use_timezone_js_loader, square_nat, sub_nat, time_now_nanosecond_counter_for_timing, time_now_nanoseconds_since_unix_epoch_or_zero, timezone_js_loader_compare_instants, timezone_js_loader_create_zone, timezone_js_loader_disable_for_testing, timezone_js_loader_enable_for_testing, timezone_js_loader_epoch_seconds, timezone_js_loader_from_epoch_seconds, timezone_js_loader_get_next_transition_or_this_time_if_none, timezone_js_loader_get_offset_nanos_for, timezone_js_loader_instant_plus_hours, timezone_js_loader_now, unix_closedir, unix_getpwuid, unix_gettimeofday, unix_getuid, unix_gmtime, unix_has_symlink, unix_inet_addr_of_string, unix_isatty, unix_localtime, unix_lstat, unix_lstat_64, unix_mkdir, unix_mktime, unix_opendir, unix_readdir, unix_readlink, unix_rewinddir, unix_rmdir, unix_stat, unix_stat_64, unix_symlink, unix_time, unix_unlink, win_cleanup, win_filedescr_of_channel, win_findclose, win_findfirst, win_findnext, win_handle_fd, win_startup, zstd_decompress
//# unitInfo: Force_link: true
(function
  (Object){
   typeof globalThis !== "object"
   &&
    (this
      ? get()
      : (Object.defineProperty
         (Object.prototype, "_T_", {configurable: true, get: get}),
        _T_));
   function get(){
    var global = this || self;
    global.globalThis = global;
    delete Object.prototype._T_;
   }
  }
  (Object));
(function(globalThis){
   var joo_global_object = globalThis;
   (function(){
      var
       DefaultLocale =
         {days:
          ["Sunday",
           "Monday",
           "Tuesday",
           "Wednesday",
           "Thursday",
           "Friday",
           "Saturday"],
          shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
          months:
          ["January",
           "February",
           "March",
           "April",
           "May",
           "June",
           "July",
           "August",
           "September",
           "October",
           "November",
           "December"],
          shortMonths:
          ["Jan",
           "Feb",
           "Mar",
           "Apr",
           "May",
           "Jun",
           "Jul",
           "Aug",
           "Sep",
           "Oct",
           "Nov",
           "Dec"],
          AM: "AM",
          PM: "PM",
          am: "am",
          pm: "pm",
          formats:
          {D: "%m/%d/%y",
           F: "%Y-%m-%d",
           R: "%H:%M",
           T: "%H:%M:%S",
           X: "%T",
           c: "%a %b %d %X %Y",
           r: "%I:%M:%S %p",
           v: "%e-%b-%Y",
           x: "%D"}},
       defaultStrftime = new Strftime(DefaultLocale, 0, false),
       isCommonJS = typeof module !== "undefined",
       namespace;
      if(isCommonJS){
       namespace = module.exports = adaptedStrftime;
       namespace.strftime = deprecatedStrftime;
       if(joo_global_object) joo_global_object.strftime = adaptedStrftime;
      }
      else{
       namespace =
        joo_global_object || function(){return this || (1, eval)("this");}();
       namespace.strftime = adaptedStrftime;
      }
      var
       _require = isCommonJS ? "require('strftime')" : "strftime",
       _deprecationWarnings = {};
      function deprecationWarning(name, instead){
       if(! _deprecationWarnings[name]){
        if
         (typeof console !== "undefined" && typeof console.warn == "function")
         console.warn
          ("[WARNING] " + name
           +
            " is deprecated and will be removed in version 1.0. Instead, use `"
           + instead
           + "`.");
        _deprecationWarnings[name] = true;
       }
      }
      namespace.strftimeTZ = deprecatedStrftimeTZ;
      namespace.strftimeUTC = deprecatedStrftimeUTC;
      namespace.localizedStrftime = deprecatedStrftimeLocalized;
      function adaptForwards(fn){
       fn.localize = defaultStrftime.localize.bind(defaultStrftime);
       fn.timezone = defaultStrftime.timezone.bind(defaultStrftime);
       fn.utc = defaultStrftime.utc.bind(defaultStrftime);
      }
      adaptForwards(adaptedStrftime);
      function adaptedStrftime(fmt, d, locale){
       if(d && d.days){locale = d; d = undefined;}
       if(locale)
        deprecationWarning
         ("`" + _require + "(format, [date], [locale])`",
          "var s = " + _require + ".localize(locale); s(format, [date])");
       var
        strftime = locale ? defaultStrftime.localize(locale) : defaultStrftime;
       return strftime(fmt, d);
      }
      adaptForwards(deprecatedStrftime);
      function deprecatedStrftime(fmt, d, locale){
       if(locale)
        deprecationWarning
         ("`" + _require + ".strftime(format, [date], [locale])`",
          "var s = " + _require + ".localize(locale); s(format, [date])");
       else
        deprecationWarning
         ("`" + _require + ".strftime(format, [date])`",
          _require + "(format, [date])");
       var
        strftime = locale ? defaultStrftime.localize(locale) : defaultStrftime;
       return strftime(fmt, d);
      }
      function deprecatedStrftimeTZ(fmt, d, locale, timezone){
       if
        ((typeof locale == "number" || typeof locale == "string")
         && timezone == null){
        timezone = locale;
        locale = undefined;
       }
       if(locale)
        deprecationWarning
         ("`" + _require + ".strftimeTZ(format, date, locale, tz)`",
          "var s = " + _require
          + ".localize(locale).timezone(tz); s(format, [date])` or `var s = "
          + _require
          + ".localize(locale); s.timezone(tz)(format, [date])");
       else
        deprecationWarning
         ("`" + _require + ".strftimeTZ(format, date, tz)`",
          "var s = " + _require + ".timezone(tz); s(format, [date])` or `"
          + _require
          + ".timezone(tz)(format, [date])");
       var
        strftime =
          (locale ? defaultStrftime.localize(locale) : defaultStrftime).timezone
           (timezone);
       return strftime(fmt, d);
      }
      var utcStrftime = defaultStrftime.utc();
      function deprecatedStrftimeUTC(fmt, d, locale){
       if(locale)
        deprecationWarning
         ("`" + _require + ".strftimeUTC(format, date, locale)`",
          "var s = " + _require + ".localize(locale).utc(); s(format, [date])");
       else
        deprecationWarning
         ("`" + _require + ".strftimeUTC(format, [date])`",
          "var s = " + _require + ".utc(); s(format, [date])");
       var strftime = locale ? utcStrftime.localize(locale) : utcStrftime;
       return strftime(fmt, d);
      }
      function deprecatedStrftimeLocalized(locale){
       deprecationWarning
        ("`" + _require + ".localizedStrftime(locale)`",
         _require + ".localize(locale)");
       return defaultStrftime.localize(locale);
      }
      if(typeof Date.now !== "function")
       Date.now = function(){return + new Date();};
      function Strftime(locale, customTimezoneOffset, useUtcTimezone){
       var
        _locale = locale || DefaultLocale,
        _customTimezoneOffset = customTimezoneOffset || 0,
        _useUtcBasedDate = useUtcTimezone || false,
        _cachedDateTimestamp = 0,
        _cachedDate;
       function _strftime(format, date){
        var timestamp;
        if(! date){
         var currentTimestamp = Date.now();
         if(currentTimestamp > _cachedDateTimestamp){
          _cachedDateTimestamp = currentTimestamp;
          _cachedDate = new Date(_cachedDateTimestamp);
          timestamp = _cachedDateTimestamp;
          if(_useUtcBasedDate)
           _cachedDate =
            new
             Date
             (_cachedDateTimestamp + getTimestampToUtcOffsetFor(_cachedDate)
              + _customTimezoneOffset);
         }
         date = _cachedDate;
        }
        else{
         timestamp = date.getTime();
         if(_useUtcBasedDate)
          date =
           new
            Date
            (date.getTime() + getTimestampToUtcOffsetFor(date)
             + _customTimezoneOffset);
        }
        return _processFormat(format, date, _locale, timestamp);
       }
       function _processFormat(format, date, locale, timestamp){
        var
         resultString = "",
         padding = null,
         isInScope = false,
         length = format.length,
         extendedTZ = false;
        for(var i = 0; i < length; i++){
         var currentCharCode = format.charCodeAt(i);
         if(isInScope === true){
          if(currentCharCode === 45){padding = ""; continue;}
          else if(currentCharCode === 95){padding = " "; continue;}
          else if(currentCharCode === 48){padding = "0"; continue;}
          else if(currentCharCode === 58){
           if(extendedTZ)
            if
             (typeof console !== "undefined"
              && typeof console.warn == "function")
             console.warn
              ("[WARNING] detected use of unsupported %:: or %::: modifiers to strftime");
           extendedTZ = true;
           continue;
          }
          switch(currentCharCode){
            case 65:
             resultString += locale.days[date.getDay()]; break;
            case 66:
             resultString += locale.months[date.getMonth()]; break;
            case 67:
             resultString +=
              padTill2(Math.floor(date.getFullYear() / 100), padding);
             break;
            case 68:
             resultString +=
              _processFormat(locale.formats.D, date, locale, timestamp);
             break;
            case 70:
             resultString +=
              _processFormat(locale.formats.F, date, locale, timestamp);
             break;
            case 72:
             resultString += padTill2(date.getHours(), padding); break;
            case 73:
             resultString += padTill2(hours12(date.getHours()), padding);
             break;
            case 76:
             resultString += padTill3(Math.floor(timestamp % 1000)); break;
            case 77:
             resultString += padTill2(date.getMinutes(), padding); break;
            case 80:
             resultString += date.getHours() < 12 ? locale.am : locale.pm;
             break;
            case 82:
             resultString +=
              _processFormat(locale.formats.R, date, locale, timestamp);
             break;
            case 83:
             resultString += padTill2(date.getSeconds(), padding); break;
            case 84:
             resultString +=
              _processFormat(locale.formats.T, date, locale, timestamp);
             break;
            case 85:
             resultString += padTill2(weekNumber(date, "sunday"), padding);
             break;
            case 87:
             resultString += padTill2(weekNumber(date, "monday"), padding);
             break;
            case 88:
             resultString +=
              _processFormat(locale.formats.X, date, locale, timestamp);
             break;
            case 89:
             resultString += date.getFullYear(); break;
            case 90:
             if(_useUtcBasedDate && _customTimezoneOffset === 0)
              resultString += "GMT";
             else{
              var tzString = date.toString().match(/\(([\w\s]+)\)/);
              resultString += tzString && tzString[1] || "";
             }
             break;
            case 97:
             resultString += locale.shortDays[date.getDay()]; break;
            case 98:
             resultString += locale.shortMonths[date.getMonth()]; break;
            case 99:
             resultString +=
              _processFormat(locale.formats.c, date, locale, timestamp);
             break;
            case 100:
             resultString += padTill2(date.getDate(), padding); break;
            case 101:
             resultString +=
              padTill2(date.getDate(), padding == null ? " " : padding);
             break;
            case 104:
             resultString += locale.shortMonths[date.getMonth()]; break;
            case 106:
             var
              y = new Date(date.getFullYear(), 0, 1),
              day =
                Math.ceil
                 ((date.getTime() - y.getTime()) / (1000 * 60 * 60 * 24));
             resultString += padTill3(day);
             break;
            case 107:
             resultString +=
              padTill2(date.getHours(), padding == null ? " " : padding);
             break;
            case 108:
             resultString +=
              padTill2
               (hours12(date.getHours()), padding == null ? " " : padding);
             break;
            case 109:
             resultString += padTill2(date.getMonth() + 1, padding); break;
            case 110:
             resultString += "\n"; break;
            case 111:
             resultString += String(date.getDate()) + ordinal(date.getDate());
             break;
            case 112:
             resultString += date.getHours() < 12 ? locale.AM : locale.PM;
             break;
            case 114:
             resultString +=
              _processFormat(locale.formats.r, date, locale, timestamp);
             break;
            case 115:
             resultString += Math.floor(timestamp / 1000); break;
            case 116:
             resultString += "\t"; break;
            case 117:
             var day = date.getDay();
             resultString += day === 0 ? 7 : day;
             break;
            case 118:
             resultString +=
              _processFormat(locale.formats.v, date, locale, timestamp);
             break;
            case 119:
             resultString += date.getDay(); break;
            case 120:
             resultString +=
              _processFormat(locale.formats.x, date, locale, timestamp);
             break;
            case 121:
             resultString += ("" + date.getFullYear()).slice(2); break;
            case 122:
             if(_useUtcBasedDate && _customTimezoneOffset === 0)
              resultString += extendedTZ ? "+00:00" : "+0000";
             else{
              var off;
              if(_customTimezoneOffset !== 0)
               off = _customTimezoneOffset / (60 * 1000);
              else
               off = - date.getTimezoneOffset();
              var
               sign = off < 0 ? "-" : "+",
               sep = extendedTZ ? ":" : "",
               hours = Math.floor(Math.abs(off / 60)),
               mins = Math.abs(off % 60);
              resultString += sign + padTill2(hours) + sep + padTill2(mins);
             }
             break;
            default: resultString += format[i]; break;
          }
          padding = null;
          isInScope = false;
          continue;
         }
         if(currentCharCode === 37){isInScope = true; continue;}
         resultString += format[i];
        }
        return resultString;
       }
       var strftime = _strftime;
       strftime.localize =
        function(locale){
         return new
                 Strftime
                 (locale || _locale, _customTimezoneOffset, _useUtcBasedDate);
        };
       strftime.timezone =
        function(timezone){
         var
          customTimezoneOffset = _customTimezoneOffset,
          useUtcBasedDate = _useUtcBasedDate,
          timezoneType = typeof timezone;
         if(timezoneType === "number" || timezoneType === "string"){
          useUtcBasedDate = true;
          if(timezoneType === "string"){
           var
            sign = timezone[0] === "-" ? - 1 : 1,
            hours = parseInt(timezone.slice(1, 3), 10),
            minutes = parseInt(timezone.slice(3, 5), 10);
           customTimezoneOffset = sign * (60 * hours + minutes) * 60 * 1000;
          }
          else if(timezoneType === "number")
           customTimezoneOffset = timezone * 60 * 1000;
         }
         return new Strftime(_locale, customTimezoneOffset, useUtcBasedDate);
        };
       strftime.utc =
        function(){return new Strftime(_locale, _customTimezoneOffset, true);};
       return strftime;
      }
      function padTill2(numberToPad, paddingChar){
       if(paddingChar === "" || numberToPad > 9) return numberToPad;
       if(paddingChar == null) paddingChar = "0";
       return paddingChar + numberToPad;
      }
      function padTill3(numberToPad){
       if(numberToPad > 99) return numberToPad;
       if(numberToPad > 9) return "0" + numberToPad;
       return "00" + numberToPad;
      }
      function hours12(hour){
       if(hour === 0) return 12; else if(hour > 12) return hour - 12;
       return hour;
      }
      function weekNumber(date, firstWeekday){
       firstWeekday = firstWeekday || "sunday";
       var weekday = date.getDay();
       if(firstWeekday === "monday")
        if(weekday === 0) weekday = 6; else weekday--;
       var
        firstDayOfYearUtc = Date.UTC(date.getFullYear(), 0, 1),
        dateUtc =
          Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()),
        yday = Math.floor((dateUtc - firstDayOfYearUtc) / 86400000),
        weekNum = (yday + 7 - weekday) / 7;
       return Math.floor(weekNum);
      }
      function ordinal(number){
       var i = number % 10, ii = number % 100;
       if(ii >= 11 && ii <= 13 || i === 0 || i >= 4) return "th";
       switch(i){case 1: return "st";case 2: return "nd";case 3: return "rd";
       }
      }
      function getTimestampToUtcOffsetFor(date){
       return (date.getTimezoneOffset() || 0) * 60000;
      }
     }
     ());
  }
  (globalThis));
(function(globalThis){
   function _iterableToArrayLimit(r, l){
    var
     t =
       null == r
        ? null
        : "undefined"
         != typeof Symbol
         && r[Symbol.iterator]
         || r["@@iterator"];
    if(null != t){
     var e, n, i, u, a = [], f = ! 0, o = ! 1;
     try{
      if(i = (t = t.call(r)).next, 0 === l){if(Object(t) !== t) return; f = ! 1;
      }
      else
       for
       (;
        ! (f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l);
        f = ! 0)
        ;
     }
     catch(r){o = ! 0, n = r;}
     finally{
      try{
       if(! f && null != t.return && (u = t.return(), Object(u) !== u))
        return;
      }
      finally{if(o) throw n;}
     }
     return a;
    }
   }
   function ownKeys(e, r){
    var t = Object.keys(e);
    if(Object.getOwnPropertySymbols){
     var o = Object.getOwnPropertySymbols(e);
     r
     &&
      (o =
       o.filter
        (function(r){return Object.getOwnPropertyDescriptor(e, r).enumerable;})),
     t.push.apply(t, o);
    }
    return t;
   }
   function _objectSpread2(e){
    for(var r = 1; r < arguments.length; r++){
     var t = null != arguments[r] ? arguments[r] : {};
     r % 2
      ? ownKeys
         (Object(t), ! 0).forEach
        (function(r){_defineProperty(e, r, t[r]);})
      : Object.getOwnPropertyDescriptors
        ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t))
        : ownKeys
           (Object(t)).forEach
          (function(r){
            Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));
           });
    }
    return e;
   }
   function _toPrimitive(t, r){
    if("object" != typeof t || ! t) return t;
    var e = t[Symbol.toPrimitive];
    if(void 0 !== e){
     var i = e.call(t, r || "default");
     if("object" != typeof i) return i;
     throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r ? String : Number)(t);
   }
   function _toPropertyKey(t){
    var i = _toPrimitive(t, "string");
    return "symbol" == typeof i ? i : String(i);
   }
   function _typeof(o){
    "@babel/helpers - typeof";
    return _typeof =
            "function" == typeof Symbol && "symbol" == typeof Symbol.iterator
             ? function(o){return typeof o;}
             : function
              (o){
               return o && "function" == typeof Symbol
                       && o.constructor === Symbol
                       && o !== Symbol.prototype
                       ? "symbol"
                       : typeof o;
              },
           _typeof(o);
   }
   function _classCallCheck(instance, Constructor){
    if(! (instance instanceof Constructor))
     throw new TypeError("Cannot call a class as a function");
   }
   function _defineProperties(target, props){
    for(var i = 0; i < props.length; i++){
     var descriptor = props[i];
     descriptor.enumerable = descriptor.enumerable || false;
     descriptor.configurable = true;
     if("value" in descriptor) descriptor.writable = true;
     Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
    }
   }
   function _createClass(Constructor, protoProps, staticProps){
    if(protoProps) _defineProperties(Constructor.prototype, protoProps);
    if(staticProps) _defineProperties(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", {writable: false});
    return Constructor;
   }
   function _defineProperty(obj, key, value){
    key = _toPropertyKey(key);
    if(key in obj)
     Object.defineProperty
      (obj,
       key,
       {value: value, enumerable: true, configurable: true, writable: true});
    else
     obj[key] = value;
    return obj;
   }
   function _inherits(subClass, superClass){
    if(typeof superClass !== "function" && superClass !== null)
     throw new TypeError("Super expression must either be null or a function");
    subClass.prototype =
     Object.create
      (superClass && superClass.prototype,
       {constructor: {value: subClass, writable: true, configurable: true}});
    Object.defineProperty(subClass, "prototype", {writable: false});
    if(superClass) _setPrototypeOf(subClass, superClass);
   }
   function _getPrototypeOf(o){
    _getPrototypeOf =
     Object.setPrototypeOf
      ? Object.getPrototypeOf.bind()
      : function(o){return o.__proto__ || Object.getPrototypeOf(o);};
    return _getPrototypeOf(o);
   }
   function _setPrototypeOf(o, p){
    _setPrototypeOf =
     Object.setPrototypeOf
      ? Object.setPrototypeOf.bind()
      : function(o, p){o.__proto__ = p; return o;};
    return _setPrototypeOf(o, p);
   }
   function _isNativeReflectConstruct(){
    if(typeof Reflect === "undefined" || ! Reflect.construct) return false;
    if(Reflect.construct.sham) return false;
    if(typeof Proxy === "function") return true;
    try{
     Boolean.prototype.valueOf.call
      (Reflect.construct(Boolean, [], function(){}));
     return true;
    }
    catch(e){return false;}
   }
   function _assertThisInitialized(self){
    if(self === void 0)
     throw new
            ReferenceError
            ("this hasn't been initialised - super() hasn't been called");
    return self;
   }
   function _possibleConstructorReturn(self, call){
    if(call && (typeof call === "object" || typeof call === "function"))
     return call;
    else if(call !== void 0)
     throw new
            TypeError
            ("Derived constructors may only return object or undefined");
    return _assertThisInitialized(self);
   }
   function _createSuper(Derived){
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function(){
     var Super = _getPrototypeOf(Derived), result;
     if(hasNativeReflectConstruct){
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
     }
     else
      result = Super.apply(this, arguments);
     return _possibleConstructorReturn(this, result);};
   }
   function _superPropBase(object, property){
    while(! Object.prototype.hasOwnProperty.call(object, property)){object = _getPrototypeOf(object); if(object === null) break;}
    return object;
   }
   function _get(){
    if(typeof Reflect !== "undefined" && Reflect.get)
     _get = Reflect.get.bind();
    else
     _get =
      function(target, property, receiver){
       var base = _superPropBase(target, property);
       if(! base) return;
       var desc = Object.getOwnPropertyDescriptor(base, property);
       if(desc.get)
        return desc.get.call(arguments.length < 3 ? target : receiver);
       return desc.value;
      };
    return _get.apply(this, arguments);
   }
   function _slicedToArray(arr, i){
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i)
           || _unsupportedIterableToArray(arr, i)
           || _nonIterableRest();
   }
   function _toConsumableArray(arr){
    return _arrayWithoutHoles(arr) || _iterableToArray(arr)
           || _unsupportedIterableToArray(arr)
           || _nonIterableSpread();
   }
   function _arrayWithoutHoles(arr){
    if(Array.isArray(arr)) return _arrayLikeToArray(arr);
   }
   function _arrayWithHoles(arr){if(Array.isArray(arr)) return arr;}
   function _iterableToArray(iter){
    if
     (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null
      || iter["@@iterator"] != null)
     return Array.from(iter);
   }
   function _unsupportedIterableToArray(o, minLen){
    if(! o) return;
    if(typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, - 1);
    if(n === "Object" && o.constructor) n = o.constructor.name;
    if(n === "Map" || n === "Set") return Array.from(o);
    if
     (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
     return _arrayLikeToArray(o, minLen);
   }
   function _arrayLikeToArray(arr, len){
    if(len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
    return arr2;
   }
   function _nonIterableSpread(){
    throw new
           TypeError
           ("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
   }
   function _nonIterableRest(){
    throw new
           TypeError
           ("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
   }
   function _createForOfIteratorHelper(o, allowArrayLike){
    var
     it =
       typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
    if(! it){
     if
      (Array.isArray(o) || (it = _unsupportedIterableToArray(o))
       || allowArrayLike && o && typeof o.length === "number"){
      if(it) o = it;
      var i = 0, F = function(){};
      return {s: F,
              n:
              function(){
               if(i >= o.length) return {done: true};
               return {done: false, value: o[i++]};
              },
              e: function(e){throw e;},
              f: F};
     }
     throw new
            TypeError
            ("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var normalCompletion = true, didErr = false, err;
    return {s: function(){it = it.call(o);},
            n:
            function(){
             var step = it.next();
             normalCompletion = step.done;
             return step;
            },
            e: function(e){didErr = true; err = e;},
            f:
            function(){
             try{if(! normalCompletion && it.return != null) it.return();}
             finally{if(didErr) throw err;}
            }};
   }
   var t = {};
   function MakeIntrinsicClass(e, t){
    Object.defineProperty
     (e.prototype,
      Symbol.toStringTag,
      {value: t, writable: ! 1, enumerable: ! 1, configurable: ! 0});
    var
     _iterator = _createForOfIteratorHelper(Object.getOwnPropertyNames(e)),
     _step;
    try{
     for(_iterator.s(); ! (_step = _iterator.n()).done;){
      var _t = _step.value, _r = Object.getOwnPropertyDescriptor(e, _t);
      _r.configurable && _r.enumerable
      && (_r.enumerable = ! 1, Object.defineProperty(e, _t, _r));
     }
    }
    catch(err){_iterator.e(err);}
    finally{_iterator.f();}
    var
     _iterator2 =
       _createForOfIteratorHelper(Object.getOwnPropertyNames(e.prototype)),
     _step2;
    try{
     for(_iterator2.s(); ! (_step2 = _iterator2.n()).done;){
      var
       _t2 = _step2.value,
       _r2 = Object.getOwnPropertyDescriptor(e.prototype, _t2);
      _r2.configurable && _r2.enumerable
      && (_r2.enumerable = ! 1, Object.defineProperty(e.prototype, _t2, _r2));
     }
    }
    catch(err){_iterator2.e(err);}
    finally{_iterator2.f();}
    DefineIntrinsic(t, e),
    DefineIntrinsic("".concat(t, ".prototype"), e.prototype);
   }
   function DefineIntrinsic(e, r){
    var o = "%".concat(e, "%");
    if(void 0 !== t[o])
     throw new Error("intrinsic ".concat(e, " already exists"));
    t[o] = r;
   }
   function GetIntrinsic(e){return t[e];}
   var
    r,
    o,
    n = "slot-epochNanoSeconds",
    a = "slot-timezone-identifier",
    i = "slot-year",
    s = "slot-month",
    l = "slot-day",
    d = "slot-hour",
    m = "slot-minute",
    c = "slot-second",
    h = "slot-millisecond",
    u = "slot-microsecond",
    T = "slot-nanosecond",
    p = "slot-calendar",
    f = "slot-date-brand",
    y = "slot-year-month-brand",
    I = "slot-month-day-brand",
    S = "slot-cached-instant",
    g = "slot-time-zone",
    w = "slot-years",
    D = "slot-months",
    G = "slot-weeks",
    v = "slot-days",
    C = "slot-hours",
    O = "slot-minutes",
    b = "slot-seconds",
    E = "slot-milliseconds",
    M = "slot-microseconds",
    R = "slot-nanoseconds",
    F = "slot-calendar-identifier",
    Y = new WeakMap(),
    P = Symbol["for"]("@@Temporal__GetSlots");
   (r = globalThis)[P] || (r[P] = function(e){return Y.get(e);});
   var Z = globalThis[P], B = Symbol["for"]("@@Temporal__CreateSlots");
   (o = globalThis)[B] || (o[B] = function(e){Y.set(e, Object.create(null));});
   var N = globalThis[B];
   function HasSlot(e){
    if(! e || "object" != _typeof(e)) return ! 1;
    var r = Z(e);
    for
    (var
      _len = arguments.length,
      t = new Array(_len > 1 ? _len - 1 : 0),
      _key = 1;
     _key < _len;
     _key++)
     t[_key - 1] = arguments[_key];
    return ! ! r && t.every(function(e){return e in r;});
   }
   function GetSlot(e, t){
    var _Z, r = (_Z = Z(e)) === null || _Z === void 0 ? void 0 : _Z[t];
    if(void 0 === r) throw new TypeError("Missing internal slot ".concat(t));
    return r;
   }
   function SetSlot(e, t, r){
    var o = Z(e);
    if(void 0 === o)
     throw new TypeError("Missing slots for the given container");
    if(o[t]) throw new TypeError("".concat(t, " already has set"));
    o[t] = r;
   }
   var
    j =
      /\.[-A-Za-z_]|\.\.[-A-Za-z._]{1,12}|\.[-A-Za-z_][-A-Za-z._]{0,12}|[A-Za-z_][-A-Za-z._]{0,13}/,
    $ =
      new
       RegExp
       ("(?:"
        +
         ["(?:".concat(j.source, ")(?:\\/(?:").concat(j.source, "))*"),
           "Etc/GMT(?:0|[-+]\\d{1,2})",
           "GMT[-+]?0",
           "EST5EDT",
           "CST6CDT",
           "MST7MDT",
           "PST8PDT",
           /(?:[+\u2212-][0-2][0-9](?::?[0-5][0-9](?::?[0-5][0-9](?:[.,]\d{1,9})?)?)?)/.source].join
          ("|")
        + ")"),
    k = /(?:[+\u2212-]\d{6}|\d{4})/,
    U = /(?:0[1-9]|1[0-2])/,
    A = /(?:0[1-9]|[12]\d|3[01])/,
    L =
      new
       RegExp
       ("(".concat(k.source, ")(?:-(").concat(U.source, ")-(").concat
           (A.source, ")|(").concat
          (U.source, ")(").concat
         (A.source, "))")),
    x =
      /(\d{2})(?::(\d{2})(?::(\d{2})(?:[.,](\d{1,9}))?)?|(\d{2})(?:(\d{2})(?:[.,](\d{1,9}))?)?)?/,
    W =
      /([+\u2212-])([01][0-9]|2[0-3])(?::?([0-5][0-9])(?::?([0-5][0-9])(?:[.,](\d{1,9}))?)?)?/,
    q = new RegExp("([zZ])|".concat(W.source, "?")),
    H = /\[(!)?([a-z_][a-z0-9_-]*)=([A-Za-z0-9]+(?:-[A-Za-z0-9]+)*)\]/g,
    V =
      new
       RegExp
       (["^".concat(L.source),
          "(?:(?:T|\\s+)".concat(x.source, "(?:").concat(q.source, ")?)?"),
          "(?:\\[!?(".concat($.source, ")\\])?"),
          "((?:".concat(H.source, ")*)$")].join
         (""),
        "i"),
    z =
      new
       RegExp
       (["^T?".concat(x.source),
          "(?:".concat(q.source, ")?"),
          "(?:\\[!?".concat($.source, "\\])?"),
          "((?:".concat(H.source, ")*)$")].join
         (""),
        "i"),
    _ =
      new
       RegExp
       ("^(".concat(k.source, ")-?(").concat(U.source, ")(?:\\[!?").concat
          ($.source, "\\])?((?:").concat
         (H.source, ")*)$")),
    J =
      new
       RegExp
       ("^(?:--)?(".concat(U.source, ")-?(").concat(A.source, ")(?:\\[!?").concat
          ($.source, "\\])?((?:").concat
         (H.source, ")*)$")),
    K = /(\d+)(?:[.,](\d{1,9}))?/,
    X =
      new
       RegExp
       ("(?:".concat(K.source, "H)?(?:").concat(K.source, "M)?(?:").concat
         (K.source, "S)?")),
    Q =
      new
       RegExp
       ("^([+\u2212-])?P".concat
          (/(?:(\d+)Y)?(?:(\d+)M)?(?:(\d+)W)?(?:(\d+)D)?/.source, "(?:T(?!$)").concat
         (X.source, ")?$"),
        "i"),
    ee = Array.prototype.includes,
    te = Array.prototype.push,
    re = globalThis.Intl.DateTimeFormat,
    oe = Math.min,
    ne = Math.max,
    ae = Math.abs,
    ie = Math.floor,
    se = Math.sign,
    le = Math.trunc,
    de = Number.isNaN,
    me = Number.isFinite,
    ce = Number,
    he = String,
    ue = Number.MAX_SAFE_INTEGER,
    Te = Object.create,
    pe = Object.getOwnPropertyDescriptor,
    fe = Reflect.apply,
    ye = Reflect.ownKeys,
    Ie = 0n,
    Se = 1n,
    ge = 60n,
    we = 24n,
    De = 1000n,
    Ge = 1000000n,
    ve = 1000000000n,
    Ce = BigInt(- 1),
    Oe = 3600n * ve,
    be = ge * ve,
    Ee = Oe * we,
    Me = BigInt(- 86400) * 100000000000000000n,
    Re = 86400n * 100000000000000000n,
    Fe = - 271821,
    Ye = 275760,
    Pe = BigInt(- 388152) * 10000000000000n,
    Ze = Ee * 3660n,
    Be = Ee * 366n,
    Ne = Ee * 14n,
    je =
      ["iso8601",
       "hebrew",
       "islamic",
       "islamic-umalqura",
       "islamic-tbla",
       "islamic-civil",
       "islamic-rgsa",
       "islamicc",
       "persian",
       "ethiopic",
       "ethioaa",
       "coptic",
       "chinese",
       "dangi",
       "roc",
       "indian",
       "buddhist",
       "japanese",
       "gregory"];
   function isZero(t){return t === Ie;}
   function GetMethod(e, t){var r = e[t]; if(void 0 !== r) return r;}
   function Call(e, t, r){
    var o = arguments.length > 2 ? r : [];
    return fe(e, t, o);
   }
   function IsObject(e){
    return "object" == _typeof(e) && null !== e || "function" == typeof e;
   }
   function ToNumber(e){
    if("bigint" == typeof e)
     throw new TypeError("Cannot convert BigInt to number");
    return ce(e);
   }
   function ToIntegerOrInfinity(e){
    var t = ToNumber(e);
    if(de(t) || 0 === t) return 0;
    if(! me(t)) return t;
    var r = ie(ae(t));
    return 0 === r ? 0 : se(t) * r;
   }
   function IsIntegralNumber(e){
    if("number" != typeof e || de(e) || ! me(e)) return ! 1;
    var t = ae(e);
    return ie(t) === t;
   }
   function ToString(e){
    if("symbol" == _typeof(e))
     throw new TypeError("Cannot convert a Symbol value to a String");
    return he(e);
   }
   function ToIntegerWithTruncation(e){
    var t = ToNumber(e);
    if(0 === t) return 0;
    if(de(t) || ! me(t)) throw new RangeError("invalid number value");
    var r = le(t);
    return 0 === r ? 0 : r;
   }
   function ToPositiveIntegerWithTruncation(e, t){
    var r = ToIntegerWithTruncation(e);
    if(r <= 0){
     if(void 0 !== t)
      throw new
             RangeError
             ("property '".concat(t, "' cannot be a a number less than one"));
     throw new
            RangeError
            ("Cannot convert a number less than one to a positive integer");
    }
    return r;
   }
   function ToIntegerIfIntegral(e){
    var t = ToNumber(e);
    if(! me(t)) throw new RangeError("infinity is out of range");
    if(! IsIntegralNumber(t))
     throw new RangeError("unsupported fractional value ".concat(e));
    return 0 === t ? 0 : t;
   }
   function divmod(t, r){return {quotient: t / r, remainder: t % r};}
   function isNegativeJSBI(t){return t < Ie;}
   function signJSBI(e){return isZero(e) ? 0 : isNegativeJSBI(e) ? - 1 : 1;}
   function abs(t){return t < Ie ? t * Ce : t;}
   var
    $e =
      new
       Map
       ([["year", ToIntegerWithTruncation],
         ["month", ToPositiveIntegerWithTruncation],
         ["monthCode", ToString],
         ["day", ToPositiveIntegerWithTruncation],
         ["hour", ToIntegerWithTruncation],
         ["minute", ToIntegerWithTruncation],
         ["second", ToIntegerWithTruncation],
         ["millisecond", ToIntegerWithTruncation],
         ["microsecond", ToIntegerWithTruncation],
         ["nanosecond", ToIntegerWithTruncation],
         ["years", ToIntegerIfIntegral],
         ["months", ToIntegerIfIntegral],
         ["weeks", ToIntegerIfIntegral],
         ["days", ToIntegerIfIntegral],
         ["hours", ToIntegerIfIntegral],
         ["minutes", ToIntegerIfIntegral],
         ["seconds", ToIntegerIfIntegral],
         ["milliseconds", ToIntegerIfIntegral],
         ["microseconds", ToIntegerIfIntegral],
         ["nanoseconds", ToIntegerIfIntegral],
         ["era", ToString],
         ["eraYear", ToIntegerOrInfinity],
         ["offset", ToString]]),
    ke =
      new
       Map
       ([["hour", 0],
         ["minute", 0],
         ["second", 0],
         ["millisecond", 0],
         ["microsecond", 0],
         ["nanosecond", 0]]),
    Ue =
      [["years", "year", "date"],
       ["months", "month", "date"],
       ["weeks", "week", "date"],
       ["days", "day", "date"],
       ["hours", "hour", "time"],
       ["minutes", "minute", "time"],
       ["seconds", "second", "time"],
       ["milliseconds", "millisecond", "time"],
       ["microseconds", "microsecond", "time"],
       ["nanoseconds", "nanosecond", "time"]],
    Ae = new Map(Ue.map(function(e){return [e[0], e[1]];})),
    Le =
      new
       Map
       (Ue.map
         (function(_ref){
           var _ref2 = _slicedToArray(_ref, 2), e = _ref2[0], t = _ref2[1];
           return [t, e];
          })),
    xe =
      Ue.map
       (function(_ref3){
         var _ref4 = _slicedToArray(_ref3, 2), e = _ref4[1];
         return e;
        }),
    We = Array.from(Ae.keys()).sort(),
    qe = new Map();
   function getIntlDateTimeFormatEnUsForTimeZone(e){
    var t = qe.get(e);
    return void 0 === t
           &&
            (t =
              new
               re
               ("en-us",
                {timeZone: he(e),
                 hour12: ! 1,
                 era: "short",
                 year: "numeric",
                 month: "numeric",
                 day: "numeric",
                 hour: "numeric",
                 minute: "numeric",
                 second: "numeric"}),
             qe.set(e, t)),
           t;
   }
   function ToObject(e){
    if(null == e) throw new TypeError("Expected object not ".concat(e));
    return Object(e);
   }
   function CopyDataProperties(e, t, r, o){
    if(null == t) return;
    var n = ye(t), _iterator3 = _createForOfIteratorHelper(n), _step3;
    try{
     var
      _loop =
        function(){
         var a = _step3.value;
         if
          (!
           r.some(function(e){return Object.is(e, a);})
           && Object.prototype.propertyIsEnumerable.call(t, a)){
          var _r3 = t[a];
          if(o && o.some(function(e){return Object.is(e, _r3);})) return 1;
          e[a] = _r3;
         }
        };
     for(_iterator3.s(); ! (_step3 = _iterator3.n()).done;)
      if(_loop()) continue;
    }
    catch(err){_iterator3.e(err);}
    finally{_iterator3.f();}
   }
   function IsTemporalInstant(e){return HasSlot(e, n) && ! HasSlot(e, g, p);}
   function IsTemporalTimeZone(e){return HasSlot(e, a);}
   function IsTemporalCalendar(e){return HasSlot(e, F);}
   function IsTemporalDuration(e){
    return HasSlot(e, w, D, v, C, O, b, E, M, R);
   }
   function IsTemporalDate(e){return HasSlot(e, f);}
   function IsTemporalTime(e){
    return HasSlot(e, d, m, c, h, u, T) && ! HasSlot(e, i, s, l);
   }
   function IsTemporalDateTime(e){
    return HasSlot(e, i, s, l, d, m, c, h, u, T);
   }
   function IsTemporalYearMonth(e){return HasSlot(e, y);}
   function IsTemporalMonthDay(e){return HasSlot(e, I);}
   function IsTemporalZonedDateTime(e){return HasSlot(e, n, g, p);}
   function RejectTemporalLikeObject(e){
    if(HasSlot(e, p) || HasSlot(e, g))
     throw new
            TypeError
            ("with() does not support a calendar or timeZone property");
    if(IsTemporalTime(e))
     throw new
            TypeError
            ("with() does not accept Temporal.PlainTime, use withPlainTime() instead");
    if(void 0 !== e.calendar)
     throw new TypeError("with() does not support a calendar property");
    if(void 0 !== e.timeZone)
     throw new TypeError("with() does not support a timeZone property");
   }
   function ParseTemporalTimeZone(e){
    var
     _ParseTemporalTimeZon =
       function(e){
         if(new RegExp("^".concat($.source, "$"), "i").test(e))
          return {ianaName: e};
         try{
          var _t3 = ParseISODateTime(e);
          if(_t3.z || _t3.offset || _t3.ianaName) return _t3;
         }
         catch(_unused){}
         throw new RangeError("Invalid time zone: ".concat(e));
        }
        (e),
     t = _ParseTemporalTimeZon.ianaName,
     r = _ParseTemporalTimeZon.offset,
     o = _ParseTemporalTimeZon.z;
    if(t) return GetCanonicalTimeZoneIdentifier(t);
    if(o) return "UTC";
    return FormatTimeZoneOffsetString(ParseTimeZoneOffsetString(r));
   }
   function MaybeFormatCalendarAnnotation(e, t){
    return "never" === t
            ? ""
            : FormatCalendarAnnotation(ToTemporalCalendarIdentifier(e), t);
   }
   function FormatCalendarAnnotation(e, t){
    if("never" === t) return "";
    if("auto" === t && "iso8601" === e) return "";
    return "[".concat("critical" === t ? "!" : "", "u-ca=").concat(e, "]");
   }
   function ParseISODateTime(e){
    var t = V.exec(e);
    if(! t) throw new RangeError("invalid ISO 8601 string: ".concat(e));
    var r = t[1];
    if("−" === r[0] && (r = "-".concat(r.slice(1))), "-000000" === r)
     throw new RangeError("invalid ISO 8601 string: ".concat(e));
    var
     o = ToIntegerOrInfinity(r),
     n = ToIntegerOrInfinity(t[2] || t[4]),
     a = ToIntegerOrInfinity(t[3] || t[5]),
     i = ToIntegerOrInfinity(t[6]),
     s = void 0 !== t[6],
     l = ToIntegerOrInfinity(t[7] || t[10]),
     d = ToIntegerOrInfinity(t[8] || t[11]);
    60 === d && (d = 59);
    var
     m = (t[9] || t[12]) + "000000000",
     c = ToIntegerOrInfinity(m.slice(0, 3)),
     h = ToIntegerOrInfinity(m.slice(3, 6)),
     u = ToIntegerOrInfinity(m.slice(6, 9)),
     T,
     p = ! 1;
    if(t[13])
     T = void 0, p = ! 0;
    else if(t[14] && t[15]){
     var
      _e2 = "-" === t[14] || "−" === t[14] ? "-" : "+",
      _r4 = t[15] || "00",
      _o = t[16] || "00",
      _n = t[17] || "00",
      _a = t[18] || "0";
     if(T = "".concat(_e2).concat(_r4, ":").concat(_o), + _a){
      for(; _a.endsWith("0");) _a = _a.slice(0, - 1);
      T += ":".concat(_n, ".").concat(_a);
     }
     else
      + _n && (T += ":".concat(_n));
     "-00:00" === T && (T = "+00:00");
    }
    var
     f = t[19],
     y = t[20],
     I,
     _iterator4 = _createForOfIteratorHelper(y.matchAll(H)),
     _step4;
    try{
     for(_iterator4.s(); ! (_step4 = _iterator4.n()).done;){
      var
       _step4$value = _slicedToArray(_step4.value, 4),
       _e3 = _step4$value[1],
       _t4 = _step4$value[2],
       _r5 = _step4$value[3];
      if("u-ca" === _t4)
       void 0 === I && (I = _r5);
      else if("!" === _e3)
       throw new
              RangeError
              ("Unrecognized annotation: !".concat(_t4, "=").concat(_r5));
     }
    }
    catch(err){_iterator4.e(err);}
    finally{_iterator4.f();}
    return RejectDateTime(o, n, a, i, l, d, c, h, u),
           {year: o,
            month: n,
            day: a,
            hasTime: s,
            hour: i,
            minute: l,
            second: d,
            millisecond: c,
            microsecond: h,
            nanosecond: u,
            ianaName: f,
            offset: T,
            z: p,
            calendar: I};
   }
   function ParseTemporalYearMonthString(e){
    var t = _.exec(e), r, o, n, a;
    if(t){
     var _a2 = t[1];
     if
      ("−" === _a2[0] && (_a2 = "-".concat(_a2.slice(1))),
       "-000000" === _a2)
      throw new RangeError("invalid ISO 8601 string: ".concat(e));
     r = ToIntegerOrInfinity(_a2), o = ToIntegerOrInfinity(t[2]);
     var
      _i = t[3],
      _iterator5 = _createForOfIteratorHelper(_i.matchAll(H)),
      _step5;
     try{
      for(_iterator5.s(); ! (_step5 = _iterator5.n()).done;){
       var
        _step5$value = _slicedToArray(_step5.value, 4),
        _e4 = _step5$value[1],
        _t5 = _step5$value[2],
        _r6 = _step5$value[3];
       if("u-ca" === _t5)
        void 0 === n && (n = _r6);
       else if("!" === _e4)
        throw new
               RangeError
               ("Unrecognized annotation: !".concat(_t5, "=").concat(_r6));
      }
     }
     catch(err){_iterator5.e(err);}
     finally{_iterator5.f();}
     if(void 0 !== n && "iso8601" !== n)
      throw new
             RangeError
             ("YYYY-MM format is only valid with iso8601 calendar");
    }
    else{
     var _ParseISODateTime, _t6;
     if
      (_ParseISODateTime = ParseISODateTime(e),
       r = _ParseISODateTime.year,
       o = _ParseISODateTime.month,
       n = _ParseISODateTime.calendar,
       a = _ParseISODateTime.day,
       _t6 = _ParseISODateTime.z,
       _t6)
      throw new RangeError("Z designator not supported for PlainYearMonth");
    }
    return {year: r, month: o, calendar: n, referenceISODay: a};
   }
   function ParseTemporalMonthDayString(e){
    var t = J.exec(e), r, o, n, a;
    if(t){
     r = ToIntegerOrInfinity(t[1]), o = ToIntegerOrInfinity(t[2]);
     var
      _e5 = t[3],
      _iterator6 = _createForOfIteratorHelper(_e5.matchAll(H)),
      _step6;
     try{
      for(_iterator6.s(); ! (_step6 = _iterator6.n()).done;){
       var
        _step6$value = _slicedToArray(_step6.value, 4),
        _t7 = _step6$value[1],
        _r7 = _step6$value[2],
        _o2 = _step6$value[3];
       if("u-ca" === _r7)
        void 0 === n && (n = _o2);
       else if("!" === _t7)
        throw new
               RangeError
               ("Unrecognized annotation: !".concat(_r7, "=").concat(_o2));
      }
     }
     catch(err){_iterator6.e(err);}
     finally{_iterator6.f();}
     if(void 0 !== n && "iso8601" !== n)
      throw new RangeError("MM-DD format is only valid with iso8601 calendar");
    }
    else{
     var _ParseISODateTime2, _t8;
     if
      (_ParseISODateTime2 = ParseISODateTime(e),
       r = _ParseISODateTime2.month,
       o = _ParseISODateTime2.day,
       n = _ParseISODateTime2.calendar,
       a = _ParseISODateTime2.year,
       _t8 = _ParseISODateTime2.z,
       _t8)
      throw new RangeError("Z designator not supported for PlainMonthDay");
    }
    return {month: r, day: o, calendar: n, referenceISOYear: a};
   }
   function ParseTemporalInstant(e){
    var
     _ParseTemporalInstant =
       function(e){
         var t = ParseISODateTime(e);
         if(! t.z && ! t.offset)
          throw new RangeError("Temporal.Instant requires a time zone offset");
         return t;
        }
        (e),
     t = _ParseTemporalInstant.year,
     r = _ParseTemporalInstant.month,
     o = _ParseTemporalInstant.day,
     n = _ParseTemporalInstant.hour,
     a = _ParseTemporalInstant.minute,
     i = _ParseTemporalInstant.second,
     s = _ParseTemporalInstant.millisecond,
     l = _ParseTemporalInstant.microsecond,
     d = _ParseTemporalInstant.nanosecond,
     m = _ParseTemporalInstant.offset,
     c = _ParseTemporalInstant.z;
    if(! c && ! m)
     throw new RangeError("Temporal.Instant requires a time zone offset");
    var
     h = c ? 0 : ParseTimeZoneOffsetString(m),
     _BalanceISODateTime = BalanceISODateTime(t, r, o, n, a, i, s, l, d - h);
    t = _BalanceISODateTime.year;
    r = _BalanceISODateTime.month;
    o = _BalanceISODateTime.day;
    n = _BalanceISODateTime.hour;
    a = _BalanceISODateTime.minute;
    i = _BalanceISODateTime.second;
    s = _BalanceISODateTime.millisecond;
    l = _BalanceISODateTime.microsecond;
    d = _BalanceISODateTime.nanosecond;
    var u = GetUTCEpochNanoseconds(t, r, o, n, a, i, s, l, d);
    if(null === u)
     throw new RangeError("DateTime outside of supported range");
    return u;
   }
   function RegulateISODate(e, t, r, o){
    var n = e, a = t, i = r;
    switch(o){
      case "reject":
       RejectISODate(n, a, i); break;
      case "constrain":
       var _ConstrainISODate = ConstrainISODate(n, a, i);
       n = _ConstrainISODate.year;
       a = _ConstrainISODate.month;
       i = _ConstrainISODate.day;
    }
    return {year: n, month: a, day: i};
   }
   function RegulateTime(e, t, r, o, n, a, i){
    var s = e, l = t, d = r, m = o, c = n, h = a;
    switch(i){
      case "reject":
       RejectTime(s, l, d, m, c, h); break;
      case "constrain":
       var
        _ConstrainTime =
          function(e, t, r, o, n, a){
            var
             i = ConstrainToRange(e, 0, 23),
             s = ConstrainToRange(t, 0, 59),
             l = ConstrainToRange(r, 0, 59),
             d = ConstrainToRange(o, 0, 999),
             m = ConstrainToRange(n, 0, 999),
             c = ConstrainToRange(a, 0, 999);
            return {hour: i,
                    minute: s,
                    second: l,
                    millisecond: d,
                    microsecond: m,
                    nanosecond: c};
           }
           (s, l, d, m, c, h);
       s = _ConstrainTime.hour;
       l = _ConstrainTime.minute;
       d = _ConstrainTime.second;
       m = _ConstrainTime.millisecond;
       c = _ConstrainTime.microsecond;
       h = _ConstrainTime.nanosecond;
    }
    return {hour: s,
            minute: l,
            second: d,
            millisecond: m,
            microsecond: c,
            nanosecond: h};
   }
   function ToTemporalDurationRecord(e){
    if(! IsObject(e))
     return function(e){
              var t = Q.exec(e);
              if(! t) throw new RangeError("invalid duration: ".concat(e));
              if(t.slice(2).every(function(e){return void 0 === e;}))
               throw new RangeError("invalid duration: ".concat(e));
              var
               r = "-" === t[1] || "−" === t[1] ? - 1 : 1,
               o = void 0 === t[2] ? 0 : ToIntegerWithTruncation(t[2]) * r,
               n = void 0 === t[3] ? 0 : ToIntegerWithTruncation(t[3]) * r,
               a = void 0 === t[4] ? 0 : ToIntegerWithTruncation(t[4]) * r,
               i = void 0 === t[5] ? 0 : ToIntegerWithTruncation(t[5]) * r,
               s = void 0 === t[6] ? 0 : ToIntegerWithTruncation(t[6]) * r,
               l = t[7],
               d = t[8],
               m = t[9],
               c = t[10],
               h = t[11],
               u = 0,
               T = 0,
               p = 0;
              if(void 0 !== l){
               var _ref5, _ref6;
               if
                ((_ref5 =
                   (_ref6 = d !== null && d !== void 0 ? d : m) !== null
                    && _ref6 !== void 0
                    ? _ref6
                    : c)
                  !== null
                  && _ref5 !== void 0
                  ? _ref5
                  : h)
                throw new
                       RangeError
                       ("only the smallest unit can be fractional");
               p =
                3600 * ToIntegerOrInfinity((l + "000000000").slice(0, 9)) * r;
              }
              else if
               (u = void 0 === d ? 0 : ToIntegerWithTruncation(d) * r,
                void 0 !== m){
               if(c !== null && c !== void 0 ? c : h)
                throw new
                       RangeError
                       ("only the smallest unit can be fractional");
               p = 60 * ToIntegerOrInfinity((m + "000000000").slice(0, 9)) * r;
              }
              else
               T = void 0 === c ? 0 : ToIntegerWithTruncation(c) * r,
               void 0 !== h
               && (p = ToIntegerOrInfinity((h + "000000000").slice(0, 9)) * r);
              var f = p % 1e3, y = le(p / 1e3) % 1e3, I = le(p / 1e6) % 1e3;
              return T += le(p / 1e9) % 60,
                     u += le(p / 6e10),
                     RejectDuration(o, n, a, i, s, u, T, I, y, f),
                     {years: o,
                      months: n,
                      weeks: a,
                      days: i,
                      hours: s,
                      minutes: u,
                      seconds: T,
                      milliseconds: I,
                      microseconds: y,
                      nanoseconds: f};
             }
             (ToString(e));
    if(IsTemporalDuration(e))
     return {years: GetSlot(e, w),
             months: GetSlot(e, D),
             weeks: GetSlot(e, G),
             days: GetSlot(e, v),
             hours: GetSlot(e, C),
             minutes: GetSlot(e, O),
             seconds: GetSlot(e, b),
             milliseconds: GetSlot(e, E),
             microseconds: GetSlot(e, M),
             nanoseconds: GetSlot(e, R)};
    var
     t =
       {years: 0,
        months: 0,
        weeks: 0,
        days: 0,
        hours: 0,
        minutes: 0,
        seconds: 0,
        milliseconds: 0,
        microseconds: 0,
        nanoseconds: 0},
     r =
       function(e){
         if(! IsObject(e)) throw new TypeError("invalid duration-like");
         var
          t =
            {years: void 0,
             months: void 0,
             weeks: void 0,
             days: void 0,
             hours: void 0,
             minutes: void 0,
             seconds: void 0,
             milliseconds: void 0,
             microseconds: void 0,
             nanoseconds: void 0},
          r = ! 1,
          _iterator7 = _createForOfIteratorHelper(We),
          _step7;
         try{
          for(_iterator7.s(); ! (_step7 = _iterator7.n()).done;){
           var _o3 = _step7.value, _n2 = e[_o3];
           void 0 !== _n2 && (r = ! 0, t[_o3] = ToIntegerIfIntegral(_n2));
          }
         }
         catch(err){_iterator7.e(err);}
         finally{_iterator7.f();}
         if(! r) throw new TypeError("invalid duration-like");
         return t;
        }
        (e),
     _iterator8 = _createForOfIteratorHelper(We),
     _step8;
    try{
     for(_iterator8.s(); ! (_step8 = _iterator8.n()).done;){
      var _e6 = _step8.value, _o4 = r[_e6];
      void 0 !== _o4 && (t[_e6] = _o4);
     }
    }
    catch(err){_iterator8.e(err);}
    finally{_iterator8.f();}
    var
     o = t.years,
     n = t.months,
     a = t.weeks,
     i = t.days,
     s = t.hours,
     l = t.minutes,
     d = t.seconds,
     m = t.milliseconds,
     c = t.microseconds,
     h = t.nanoseconds;
    return RejectDuration(o, n, a, i, s, l, d, m, c, h),
           {years: o,
            months: n,
            weeks: a,
            days: i,
            hours: s,
            minutes: l,
            seconds: d,
            milliseconds: m,
            microseconds: c,
            nanoseconds: h};
   }
   function ToTemporalOverflow(e){
    return void 0 === e
            ? "constrain"
            : GetOption(e, "overflow", ["constrain", "reject"], "constrain");
   }
   function ToTemporalDisambiguation(e){
    return void 0 === e
            ? "compatible"
            : GetOption
              (e,
               "disambiguation",
               ["compatible", "earlier", "later", "reject"],
               "compatible");
   }
   function ToTemporalRoundingMode(e, t){
    return GetOption
            (e,
             "roundingMode",
             ["ceil",
              "floor",
              "expand",
              "trunc",
              "halfCeil",
              "halfFloor",
              "halfExpand",
              "halfTrunc",
              "halfEven"],
             t);
   }
   function ToTemporalOffset(e, t){
    return void 0 === e
            ? t
            : GetOption(e, "offset", ["prefer", "use", "ignore", "reject"], t);
   }
   function ToCalendarNameOption(e){
    return GetOption
            (e,
             "calendarName",
             ["auto", "always", "never", "critical"],
             "auto");
   }
   function ToTemporalRoundingIncrement(e){
    var t = e.roundingIncrement;
    if(void 0 === t) return 1;
    if(t = ToNumber(t), ! me(t))
     throw new RangeError("roundingIncrement must be finite");
    var r = le(t);
    if(r < 1 || r > 1e9)
     throw new
            RangeError
            ("roundingIncrement must be at least 1 and at most 1e9, not ".concat
              (t));
    return r;
   }
   function ValidateTemporalRoundingIncrement(e, t, r){
    var o = r ? t : t - 1;
    if(e > o)
     throw new
            RangeError
            ("roundingIncrement must be at least 1 and less than ".concat
               (o, ", not ").concat
              (e));
    if(t % e != 0)
     throw new
            RangeError
            ("Rounding increment must divide evenly into ".concat(t));
   }
   function ToFractionalSecondDigits(e){
    var t = e.fractionalSecondDigits;
    if(void 0 === t) return "auto";
    if("number" != typeof t){
     if("auto" !== ToString(t))
      throw new
             RangeError
             ("fractionalSecondDigits must be 'auto' or 0 through 9, not ".concat
               (t));
     return "auto";
    }
    var r = ie(t);
    if(! me(r) || r < 0 || r > 9)
     throw new
            RangeError
            ("fractionalSecondDigits must be 'auto' or 0 through 9, not ".concat
              (t));
    return r;
   }
   function ToSecondsStringPrecisionRecord(e, t){
    switch(e){
      case "minute":
       return {precision: "minute", unit: "minute", increment: 1};
      case "second":
       return {precision: 0, unit: "second", increment: 1};
      case "millisecond":
       return {precision: 3, unit: "millisecond", increment: 1};
      case "microsecond":
       return {precision: 6, unit: "microsecond", increment: 1};
      case "nanosecond":
       return {precision: 9, unit: "nanosecond", increment: 1};
    }
    switch(t){
      case "auto":
       return {precision: t, unit: "nanosecond", increment: 1};
      case 0:
       return {precision: t, unit: "second", increment: 1};
      case 1:
      case 2:
      case 3:
       return {precision: t,
               unit: "millisecond",
               increment: Math.pow(10, 3 - t)};
      case 4:
      case 5:
      case 6:
       return {precision: t,
               unit: "microsecond",
               increment: Math.pow(10, 6 - t)};
      case 7:
      case 8:
      case 9:
       return {precision: t,
               unit: "nanosecond",
               increment: Math.pow(10, 9 - t)};
      default:
       throw new
              RangeError
              ("fractionalSecondDigits must be 'auto' or 0 through 9, not ".concat
                (t));
    }
   }
   var He = Symbol("~required~");
   function GetTemporalUnit(e, t, r, o){
    var
     n =
       arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [],
     a = [];
    for(var _i2 = 0, _Ue = Ue; _i2 < _Ue.length; _i2++){
     var
      _Ue$_i = _slicedToArray(_Ue[_i2], 3),
      _e7 = _Ue$_i[1],
      _t9 = _Ue$_i[2];
     "datetime" !== r && r !== _t9 || a.push(_e7);
    }
    a.push.apply(a, _toConsumableArray(n));
    var i = o;
    i === He ? i = void 0 : void 0 !== i && a.push(i);
    var s = [].concat(a);
    for(var _i3 = 0, _a3 = a; _i3 < _a3.length; _i3++){
     var _e8 = _a3[_i3], _t10 = Le.get(_e8);
     void 0 !== _t10 && s.push(_t10);
    }
    var l = GetOption(e, t, s, i);
    if(void 0 === l && o === He)
     throw new RangeError("".concat(t, " is required"));
    return Ae.has(l) ? Ae.get(l) : l;
   }
   function ToRelativeTemporalObject(e){
    var t = e.relativeTo;
    if(void 0 === t) return t;
    var r, o, n, a, i, s, l, d, m, c, h, u, T = "option", p = ! 1;
    if(IsObject(t)){
     var _InterpretTemporalDat;
     if(IsTemporalZonedDateTime(t) || IsTemporalDate(t)) return t;
     if(IsTemporalDateTime(t)) return TemporalDateTimeToDate(t);
     c = GetTemporalCalendarSlotValueWithISODefault(t);
     var
      _e9 =
        CalendarFields
         (c,
          ["day",
           "hour",
           "microsecond",
           "millisecond",
           "minute",
           "month",
           "monthCode",
           "nanosecond",
           "second",
           "year"]);
     _e9.push("timeZone", "offset");
     var _p = PrepareTemporalFields(t, _e9, []), _f = Te(null);
     _f.overflow = "constrain",
     _InterpretTemporalDat = InterpretTemporalDateTimeFields(c, _p, _f),
     r = _InterpretTemporalDat.year,
     o = _InterpretTemporalDat.month,
     n = _InterpretTemporalDat.day,
     a = _InterpretTemporalDat.hour,
     i = _InterpretTemporalDat.minute,
     s = _InterpretTemporalDat.second,
     l = _InterpretTemporalDat.millisecond,
     d = _InterpretTemporalDat.microsecond,
     m = _InterpretTemporalDat.nanosecond,
     u = _p.offset,
     void 0 === u && (T = "wall"),
     h = _p.timeZone,
     void 0 !== h && (h = ToTemporalTimeZoneSlotValue(h));
    }
    else{
     var _ParseISODateTime3, _e10, _f2;
     if
      (_ParseISODateTime3 = ParseISODateTime(ToString(t)),
       r = _ParseISODateTime3.year,
       o = _ParseISODateTime3.month,
       n = _ParseISODateTime3.day,
       a = _ParseISODateTime3.hour,
       i = _ParseISODateTime3.minute,
       s = _ParseISODateTime3.second,
       l = _ParseISODateTime3.millisecond,
       d = _ParseISODateTime3.microsecond,
       m = _ParseISODateTime3.nanosecond,
       c = _ParseISODateTime3.calendar,
       _e10 = _ParseISODateTime3.ianaName,
       u = _ParseISODateTime3.offset,
       _f2 = _ParseISODateTime3.z,
       _e10)
      h = ToTemporalTimeZoneSlotValue(_e10),
      _f2 ? T = "exact" : u || (T = "wall"),
      p = ! 0;
     else if(_f2)
      throw new
             RangeError
             ("Z designator not supported for PlainDate relativeTo; either remove the Z or add a bracketed time zone");
     if(c || (c = "iso8601"), ! IsBuiltinCalendar(c))
      throw new RangeError("invalid calendar identifier ".concat(c));
     c = ASCIILowercase(c);
    }
    if(void 0 === h) return CreateTemporalDate(r, o, n, c);
    return CreateTemporalZonedDateTime
            (InterpretISODateTimeOffset
              (r,
               o,
               n,
               a,
               i,
               s,
               l,
               d,
               m,
               T,
               "option" === T ? ParseTimeZoneOffsetString(u) : 0,
               h,
               "compatible",
               "reject",
               p),
             h,
             c);
   }
   function DefaultTemporalLargestUnit(e, t, r, o, n, a, i, s, l, d){
    for
    (var
      _i4 = 0,
      _arr =
        [["years", e],
         ["months", t],
         ["weeks", r],
         ["days", o],
         ["hours", n],
         ["minutes", a],
         ["seconds", i],
         ["milliseconds", s],
         ["microseconds", l],
         ["nanoseconds", d]];
     _i4 < _arr.length;
     _i4++){
     var
      _arr$_i = _slicedToArray(_arr[_i4], 2),
      _m = _arr$_i[0],
      _c = _arr$_i[1];
     if(0 !== _c) return Ae.get(_m);
    }
    return "nanosecond";
   }
   function LargerOfTwoTemporalUnits(e, t){
    return xe.indexOf(e) > xe.indexOf(t) ? t : e;
   }
   function PrepareTemporalFields(e, t, r){
    var
     _ref7 =
       arguments.length > 3 && arguments[3] !== undefined
        ? arguments[3]
        : {emptySourceErrorMessage: "no supported properties found"},
     o = _ref7.emptySourceErrorMessage,
     n = Te(null),
     a = ! 1;
    t.sort();
    var _iterator9 = _createForOfIteratorHelper(t), _step9;
    try{
     for(_iterator9.s(); ! (_step9 = _iterator9.n()).done;){
      var _o5 = _step9.value, _t11 = e[_o5];
      if(void 0 !== _t11)
       a = ! 0, $e.has(_o5) && (_t11 = $e.get(_o5)(_t11)), n[_o5] = _t11;
      else if("partial" !== r){
       if(ee.call(r, _o5))
        throw new
               TypeError
               ("required property '".concat(_o5, "' missing or undefined"));
       _t11 = ke.get(_o5), n[_o5] = _t11;
      }
     }
    }
    catch(err){_iterator9.e(err);}
    finally{_iterator9.f();}
    if("partial" === r && ! a) throw new TypeError(o);
    return n;
   }
   function ToTemporalTimeRecord(e){
    var
     t =
       arguments.length > 1 && arguments[1] !== undefined
        ? arguments[1]
        : "complete",
     r =
       ["hour",
        "microsecond",
        "millisecond",
        "minute",
        "nanosecond",
        "second"],
     o =
       PrepareTemporalFields
        (e, r, "partial", {emptySourceErrorMessage: "invalid time-like"}),
     n = {};
    for(var _i5 = 0, _r8 = r; _i5 < _r8.length; _i5++){
     var _e11 = _r8[_i5], _r9 = pe(o, _e11);
     void 0 !== _r9 ? n[_e11] = _r9.value : "complete" === t && (n[_e11] = 0);
    }
    return n;
   }
   function ToTemporalDate(e, t){
    var r = e;
    if(IsObject(r)){
     if(IsTemporalDate(r)) return r;
     if
      (IsTemporalZonedDateTime(r)
       &&
        (ToTemporalOverflow(t),
         r = GetPlainDateTimeFor(GetSlot(r, g), GetSlot(r, S), GetSlot(r, p))),
       IsTemporalDateTime(r))
      return ToTemporalOverflow(t),
             CreateTemporalDate
              (GetSlot(r, i), GetSlot(r, s), GetSlot(r, l), GetSlot(r, p));
     var _e12 = GetTemporalCalendarSlotValueWithISODefault(r);
     return CalendarDateFromFields
             (_e12,
              PrepareTemporalFields
               (r,
                CalendarFields(_e12, ["day", "month", "monthCode", "year"]),
                []),
              t);
    }
    ToTemporalOverflow(t);
    var
     _ParseTemporalDateStr =
       function(e){return ParseISODateTime(e);}(ToString(r)),
     o = _ParseTemporalDateStr.year,
     n = _ParseTemporalDateStr.month,
     a = _ParseTemporalDateStr.day,
     d = _ParseTemporalDateStr.calendar,
     m = _ParseTemporalDateStr.z;
    if(m) throw new RangeError("Z designator not supported for PlainDate");
    if(d || (d = "iso8601"), ! IsBuiltinCalendar(d))
     throw new RangeError("invalid calendar identifier ".concat(d));
    return d = ASCIILowercase(d), CreateTemporalDate(o, n, a, d);
   }
   function InterpretTemporalDateTimeFields(e, t, r){
    var
     _RegulateTime,
     _ToTemporalTimeRecord = ToTemporalTimeRecord(t),
     o = _ToTemporalTimeRecord.hour,
     n = _ToTemporalTimeRecord.minute,
     a = _ToTemporalTimeRecord.second,
     d = _ToTemporalTimeRecord.millisecond,
     m = _ToTemporalTimeRecord.microsecond,
     c = _ToTemporalTimeRecord.nanosecond,
     h = ToTemporalOverflow(r),
     u = CalendarDateFromFields(e, t, r),
     T = GetSlot(u, i),
     p = GetSlot(u, s),
     f = GetSlot(u, l);
    return _RegulateTime = RegulateTime(o, n, a, d, m, c, h),
           o = _RegulateTime.hour,
           n = _RegulateTime.minute,
           a = _RegulateTime.second,
           d = _RegulateTime.millisecond,
           m = _RegulateTime.microsecond,
           c = _RegulateTime.nanosecond,
           {year: T,
            month: p,
            day: f,
            hour: o,
            minute: n,
            second: a,
            millisecond: d,
            microsecond: m,
            nanosecond: c};
   }
   function ToTemporalDateTime(e, t){
    var r, o, n, a, d, m, c, h, u, T;
    if(IsObject(e)){
     if(IsTemporalDateTime(e)) return e;
     if(IsTemporalZonedDateTime(e))
      return ToTemporalOverflow(t),
             GetPlainDateTimeFor(GetSlot(e, g), GetSlot(e, S), GetSlot(e, p));
     if(IsTemporalDate(e))
      return ToTemporalOverflow(t),
             CreateTemporalDateTime
              (GetSlot(e, i),
               GetSlot(e, s),
               GetSlot(e, l),
               0,
               0,
               0,
               0,
               0,
               0,
               GetSlot(e, p));
     T = GetTemporalCalendarSlotValueWithISODefault(e);
     var
      _f3 =
        PrepareTemporalFields
         (e,
          CalendarFields
           (T,
            ["day",
             "hour",
             "microsecond",
             "millisecond",
             "minute",
             "month",
             "monthCode",
             "nanosecond",
             "second",
             "year"]),
          []),
      _InterpretTemporalDat2 = InterpretTemporalDateTimeFields(T, _f3, t);
     r = _InterpretTemporalDat2.year;
     o = _InterpretTemporalDat2.month;
     n = _InterpretTemporalDat2.day;
     a = _InterpretTemporalDat2.hour;
     d = _InterpretTemporalDat2.minute;
     m = _InterpretTemporalDat2.second;
     c = _InterpretTemporalDat2.millisecond;
     h = _InterpretTemporalDat2.microsecond;
     u = _InterpretTemporalDat2.nanosecond;
    }
    else{
     var _ParseTemporalDateTim, _i6;
     if
      (ToTemporalOverflow(t),
       _ParseTemporalDateTim =
        function(e){return ParseISODateTime(e);}(ToString(e)),
       r = _ParseTemporalDateTim.year,
       o = _ParseTemporalDateTim.month,
       n = _ParseTemporalDateTim.day,
       a = _ParseTemporalDateTim.hour,
       d = _ParseTemporalDateTim.minute,
       m = _ParseTemporalDateTim.second,
       c = _ParseTemporalDateTim.millisecond,
       h = _ParseTemporalDateTim.microsecond,
       u = _ParseTemporalDateTim.nanosecond,
       T = _ParseTemporalDateTim.calendar,
       _i6 = _ParseTemporalDateTim.z,
       _i6)
      throw new RangeError("Z designator not supported for PlainDateTime");
     if
      (RejectDateTime(r, o, n, a, d, m, c, h, u),
       T || (T = "iso8601"),
       !
       IsBuiltinCalendar(T))
      throw new RangeError("invalid calendar identifier ".concat(T));
     T = ASCIILowercase(T);
    }
    return CreateTemporalDateTime(r, o, n, a, d, m, c, h, u, T);
   }
   function ToTemporalDuration(e){
    if(IsTemporalDuration(e)) return e;
    var
     _ToTemporalDurationRe = ToTemporalDurationRecord(e),
     t = _ToTemporalDurationRe.years,
     r = _ToTemporalDurationRe.months,
     o = _ToTemporalDurationRe.weeks,
     n = _ToTemporalDurationRe.days,
     a = _ToTemporalDurationRe.hours,
     i = _ToTemporalDurationRe.minutes,
     s = _ToTemporalDurationRe.seconds,
     l = _ToTemporalDurationRe.milliseconds,
     d = _ToTemporalDurationRe.microseconds,
     m = _ToTemporalDurationRe.nanoseconds;
    return new
            (GetIntrinsic("%Temporal.Duration%"))
            (t, r, o, n, a, i, s, l, d, m);
   }
   function ToTemporalInstant(e){
    if(IsTemporalInstant(e)) return e;
    if(IsTemporalZonedDateTime(e))
     return new (GetIntrinsic("%Temporal.Instant%"))(GetSlot(e, n));
    var t = ParseTemporalInstant(ToString(e));
    return new (GetIntrinsic("%Temporal.Instant%"))(t);
   }
   function ToTemporalMonthDay(e, t){
    var r = e;
    if(IsObject(r)){
     if(IsTemporalMonthDay(r)) return r;
     var _e13, _o6;
     if(HasSlot(r, p))
      _e13 = GetSlot(r, p), _o6 = ! 1;
     else{
      var _t12 = r.calendar;
      _o6 = void 0 === _t12,
      void 0 === _t12 && (_t12 = "iso8601"),
      _e13 = ToTemporalCalendarSlotValue(_t12);
     }
     var
      _n3 =
        PrepareTemporalFields
         (r, CalendarFields(_e13, ["day", "month", "monthCode", "year"]), []);
     return _o6 && void 0 !== _n3.month && void 0 === _n3.monthCode
            && void 0 === _n3.year
            && (_n3.year = 1972),
            CalendarMonthDayFromFields(_e13, _n3, t);
    }
    ToTemporalOverflow(t);
    var
     _ParseTemporalMonthDa = ParseTemporalMonthDayString(ToString(r)),
     o = _ParseTemporalMonthDa.month,
     n = _ParseTemporalMonthDa.day,
     a = _ParseTemporalMonthDa.referenceISOYear,
     i = _ParseTemporalMonthDa.calendar;
    if(void 0 === i && (i = "iso8601"), ! IsBuiltinCalendar(i))
     throw new RangeError("invalid calendar identifier ".concat(i));
    if(i = ASCIILowercase(i), void 0 === a)
     return RejectISODate(1972, o, n), CreateTemporalMonthDay(o, n, i);
    return CalendarMonthDayFromFields(i, CreateTemporalMonthDay(o, n, i, a));
   }
   function ToTemporalTime(e){
    var
     _ParseTemporalTimeStr,
     t =
       arguments.length > 1 && arguments[1] !== undefined
        ? arguments[1]
        : "constrain",
     r,
     o,
     n,
     a,
     i,
     s,
     l = e;
    if(IsObject(l)){
     var _ToTemporalTimeRecord2, _RegulateTime2;
     if(IsTemporalTime(l)) return l;
     if
      (IsTemporalZonedDateTime(l)
       &&
        (l = GetPlainDateTimeFor(GetSlot(l, g), GetSlot(l, S), GetSlot(l, p))),
       IsTemporalDateTime(l))
      return new
              (GetIntrinsic("%Temporal.PlainTime%"))
              (GetSlot(l, d),
               GetSlot(l, m),
               GetSlot(l, c),
               GetSlot(l, h),
               GetSlot(l, u),
               GetSlot(l, T));
     _ToTemporalTimeRecord2 = ToTemporalTimeRecord(l),
     r = _ToTemporalTimeRecord2.hour,
     o = _ToTemporalTimeRecord2.minute,
     n = _ToTemporalTimeRecord2.second,
     a = _ToTemporalTimeRecord2.millisecond,
     i = _ToTemporalTimeRecord2.microsecond,
     s = _ToTemporalTimeRecord2.nanosecond,
     _RegulateTime2 = RegulateTime(r, o, n, a, i, s, t),
     r = _RegulateTime2.hour,
     o = _RegulateTime2.minute,
     n = _RegulateTime2.second,
     a = _RegulateTime2.millisecond,
     i = _RegulateTime2.microsecond,
     s = _RegulateTime2.nanosecond;
    }
    else
     _ParseTemporalTimeStr =
      function(e){
        var t = z.exec(e), r, o, n, a, i, s, l;
        if(t){
         r = ToIntegerOrInfinity(t[1]),
         o = ToIntegerOrInfinity(t[2] || t[5]),
         n = ToIntegerOrInfinity(t[3] || t[6]),
         60 === n && (n = 59);
         var _e14 = (t[4] || t[7]) + "000000000";
         a = ToIntegerOrInfinity(_e14.slice(0, 3)),
         i = ToIntegerOrInfinity(_e14.slice(3, 6)),
         s = ToIntegerOrInfinity(_e14.slice(6, 9)),
         l = t[14];
         var _iterator10 = _createForOfIteratorHelper(l.matchAll(H)), _step10;
         try{
          for(_iterator10.s(); ! (_step10 = _iterator10.n()).done;){
           var
            _step10$value = _slicedToArray(_step10.value, 4),
            _e15 = _step10$value[1],
            _t13 = _step10$value[2],
            _r10 = _step10$value[3];
           if("u-ca" !== _t13 && "!" === _e15)
            throw new
                   RangeError
                   ("Unrecognized annotation: !".concat(_t13, "=").concat(_r10));
          }
         }
         catch(err){_iterator10.e(err);}
         finally{_iterator10.f();}
         if(t[8])
          throw new RangeError("Z designator not supported for PlainTime");
        }
        else{
         var _ParseISODateTime4, _t14, _l;
         if
          (_ParseISODateTime4 = ParseISODateTime(e),
           _l = _ParseISODateTime4.hasTime,
           r = _ParseISODateTime4.hour,
           o = _ParseISODateTime4.minute,
           n = _ParseISODateTime4.second,
           a = _ParseISODateTime4.millisecond,
           i = _ParseISODateTime4.microsecond,
           s = _ParseISODateTime4.nanosecond,
           _t14 = _ParseISODateTime4.z,
           !
           _l)
          throw new RangeError("time is missing in string: ".concat(e));
         if(_t14)
          throw new RangeError("Z designator not supported for PlainTime");
        }
        if(/[tT ][0-9][0-9]/.test(e))
         return {hour: r,
                 minute: o,
                 second: n,
                 millisecond: a,
                 microsecond: i,
                 nanosecond: s};
        try{
         var
          _ParseTemporalMonthDa2 = ParseTemporalMonthDayString(e),
          _t15 = _ParseTemporalMonthDa2.month,
          _r11 = _ParseTemporalMonthDa2.day;
         RejectISODate(1972, _t15, _r11);
        }
        catch(_unused2){
         try{
          var
           _ParseTemporalYearMon = ParseTemporalYearMonthString(e),
           _t16 = _ParseTemporalYearMon.year,
           _r12 = _ParseTemporalYearMon.month;
          RejectISODate(_t16, _r12, 1);
         }
         catch(_unused3){
          return {hour: r,
                  minute: o,
                  second: n,
                  millisecond: a,
                  microsecond: i,
                  nanosecond: s};
         }
        }
        throw new
               RangeError
               ("invalid ISO 8601 time-only string ".concat
                 (e, "; may need a T prefix"));
       }
       (ToString(l)),
     r = _ParseTemporalTimeStr.hour,
     o = _ParseTemporalTimeStr.minute,
     n = _ParseTemporalTimeStr.second,
     a = _ParseTemporalTimeStr.millisecond,
     i = _ParseTemporalTimeStr.microsecond,
     s = _ParseTemporalTimeStr.nanosecond,
     RejectTime(r, o, n, a, i, s);
    return new (GetIntrinsic("%Temporal.PlainTime%"))(r, o, n, a, i, s);
   }
   function ToTemporalYearMonth(e, t){
    if(IsObject(e)){
     if(IsTemporalYearMonth(e)) return e;
     var _r13 = GetTemporalCalendarSlotValueWithISODefault(e);
     return CalendarYearMonthFromFields
             (_r13,
              PrepareTemporalFields
               (e, CalendarFields(_r13, ["month", "monthCode", "year"]), []),
              t);
    }
    ToTemporalOverflow(t);
    var
     _ParseTemporalYearMon2 = ParseTemporalYearMonthString(ToString(e)),
     r = _ParseTemporalYearMon2.year,
     o = _ParseTemporalYearMon2.month,
     n = _ParseTemporalYearMon2.referenceISODay,
     a = _ParseTemporalYearMon2.calendar;
    if(void 0 === a && (a = "iso8601"), ! IsBuiltinCalendar(a))
     throw new RangeError("invalid calendar identifier ".concat(a));
    if(a = ASCIILowercase(a), void 0 === n)
     return RejectISODate(r, o, 1), CreateTemporalYearMonth(r, o, a);
    return CalendarYearMonthFromFields(a, CreateTemporalYearMonth(r, o, a, n));
   }
   function InterpretISODateTimeOffset
   (t, r, o, i, s, l, d, m, c, h, u, T, p, f, y){
    var
     I =
       new
        (GetIntrinsic("%Temporal.PlainDateTime%"))
        (t, r, o, i, s, l, d, m, c);
    if("wall" === h || "ignore" === f)
     return GetSlot(GetInstantFor(T, I, p), n);
    if("exact" === h || "use" === f){
     var _n4 = GetUTCEpochNanoseconds(t, r, o, i, s, l, d, m, c);
     if(null === _n4)
      throw new RangeError("ZonedDateTime outside of supported range");
     return _n4 - BigInt(u);
    }
    var
     S = GetPossibleInstantsFor(T, I),
     _iterator11 = _createForOfIteratorHelper(S),
     _step11;
    try{
     for(_iterator11.s(); ! (_step11 = _iterator11.n()).done;){
      var
       _t18 = _step11.value,
       _r14 = GetOffsetNanosecondsFor(T, _t18),
       _o7 = Number(RoundNumberToIncrement(BigInt(_r14), be, "halfExpand"));
      if(_r14 === u || y && _o7 === u) return GetSlot(_t18, n);
     }
    }
    catch(err){_iterator11.e(err);}
    finally{_iterator11.f();}
    if("reject" === f){
     var
      _e16 = FormatTimeZoneOffsetString(u),
      _t17 = IsTemporalTimeZone(T) ? GetSlot(T, a) : "time zone";
     throw new
            RangeError
            ("Offset ".concat(_e16, " is invalid for ").concat
               (I.toString(), " in ").concat
              (_t17));
    }
    return GetSlot(DisambiguatePossibleInstants(S, T, I, p), n);
   }
   function ToTemporalZonedDateTime(e, t){
    var r, o, n, a, i, s, l, d, m, c, h, u, T, p, f = ! 1, y = "option";
    if(IsObject(e)){
     var _InterpretTemporalDat3;
     if(IsTemporalZonedDateTime(e)) return e;
     u = GetTemporalCalendarSlotValueWithISODefault(e);
     var
      _f4 =
        CalendarFields
         (u,
          ["day",
           "hour",
           "microsecond",
           "millisecond",
           "minute",
           "month",
           "monthCode",
           "nanosecond",
           "second",
           "year"]);
     _f4.push("timeZone", "offset");
     var _I = PrepareTemporalFields(e, _f4, ["timeZone"]);
     c = ToTemporalTimeZoneSlotValue(_I.timeZone),
     h = _I.offset,
     void 0 === h && (y = "wall"),
     T = ToTemporalDisambiguation(t),
     p = ToTemporalOffset(t, "reject"),
     _InterpretTemporalDat3 = InterpretTemporalDateTimeFields(u, _I, t),
     r = _InterpretTemporalDat3.year,
     o = _InterpretTemporalDat3.month,
     n = _InterpretTemporalDat3.day,
     a = _InterpretTemporalDat3.hour,
     i = _InterpretTemporalDat3.minute,
     s = _InterpretTemporalDat3.second,
     l = _InterpretTemporalDat3.millisecond,
     d = _InterpretTemporalDat3.microsecond,
     m = _InterpretTemporalDat3.nanosecond;
    }
    else{
     var _ParseTemporalZonedDa, _I2, _S;
     if
      (_ParseTemporalZonedDa =
        function(e){
          var t = ParseISODateTime(e);
          if(! t.ianaName)
           throw new
                  RangeError
                  ("Temporal.ZonedDateTime requires a time zone ID in brackets");
          return t;
         }
         (ToString(e)),
       r = _ParseTemporalZonedDa.year,
       o = _ParseTemporalZonedDa.month,
       n = _ParseTemporalZonedDa.day,
       a = _ParseTemporalZonedDa.hour,
       i = _ParseTemporalZonedDa.minute,
       s = _ParseTemporalZonedDa.second,
       l = _ParseTemporalZonedDa.millisecond,
       d = _ParseTemporalZonedDa.microsecond,
       m = _ParseTemporalZonedDa.nanosecond,
       _I2 = _ParseTemporalZonedDa.ianaName,
       h = _ParseTemporalZonedDa.offset,
       _S = _ParseTemporalZonedDa.z,
       u = _ParseTemporalZonedDa.calendar,
       c = ToTemporalTimeZoneSlotValue(_I2),
       _S ? y = "exact" : h || (y = "wall"),
       u || (u = "iso8601"),
       !
       IsBuiltinCalendar(u))
      throw new RangeError("invalid calendar identifier ".concat(u));
     u = ASCIILowercase(u),
     f = ! 0,
     T = ToTemporalDisambiguation(t),
     p = ToTemporalOffset(t, "reject"),
     ToTemporalOverflow(t);
    }
    var I = 0;
    "option" === y && (I = ParseTimeZoneOffsetString(h));
    return CreateTemporalZonedDateTime
            (InterpretISODateTimeOffset
              (r, o, n, a, i, s, l, d, m, y, I, c, T, p, f),
             c,
             u);
   }
   function CreateTemporalDateSlots(e, t, r, o, n){
    RejectISODate(t, r, o),
    RejectDateRange(t, r, o),
    N(e),
    SetSlot(e, i, t),
    SetSlot(e, s, r),
    SetSlot(e, l, o),
    SetSlot(e, p, n),
    SetSlot(e, f, ! 0);
   }
   function CreateTemporalDate(e, t, r){
    var
     o =
       arguments.length > 3 && arguments[3] !== undefined
        ? arguments[3]
        : "iso8601",
     n = GetIntrinsic("%Temporal.PlainDate%"),
     a = Te(n.prototype);
    return CreateTemporalDateSlots(a, e, t, r, o), a;
   }
   function CreateTemporalDateTimeSlots(e, t, r, o, n, a, f, y, I, S, g){
    RejectDateTime(t, r, o, n, a, f, y, I, S),
    RejectDateTimeRange(t, r, o, n, a, f, y, I, S),
    N(e),
    SetSlot(e, i, t),
    SetSlot(e, s, r),
    SetSlot(e, l, o),
    SetSlot(e, d, n),
    SetSlot(e, m, a),
    SetSlot(e, c, f),
    SetSlot(e, h, y),
    SetSlot(e, u, I),
    SetSlot(e, T, S),
    SetSlot(e, p, g);
   }
   function CreateTemporalDateTime(e, t, r, o, n, a, i, s, l){
    var
     d =
       arguments.length > 9 && arguments[9] !== undefined
        ? arguments[9]
        : "iso8601",
     m = GetIntrinsic("%Temporal.PlainDateTime%"),
     c = Te(m.prototype);
    return CreateTemporalDateTimeSlots(c, e, t, r, o, n, a, i, s, l, d), c;
   }
   function CreateTemporalMonthDaySlots(e, t, r, o, n){
    RejectISODate(n, t, r),
    RejectDateRange(n, t, r),
    N(e),
    SetSlot(e, s, t),
    SetSlot(e, l, r),
    SetSlot(e, i, n),
    SetSlot(e, p, o),
    SetSlot(e, I, ! 0);
   }
   function CreateTemporalMonthDay(e, t){
    var
     r =
       arguments.length > 2 && arguments[2] !== undefined
        ? arguments[2]
        : "iso8601",
     o =
       arguments.length > 3 && arguments[3] !== undefined
        ? arguments[3]
        : 1972,
     n = GetIntrinsic("%Temporal.PlainMonthDay%"),
     a = Te(n.prototype);
    return CreateTemporalMonthDaySlots(a, e, t, r, o), a;
   }
   function CreateTemporalYearMonthSlots(e, t, r, o, n){
    RejectISODate(t, r, n),
    function(e, t){
      RejectToRange(e, Fe, Ye),
      e === Fe ? RejectToRange(t, 4, 12) : e === Ye && RejectToRange(t, 1, 9);
     }
     (t, r),
    N(e),
    SetSlot(e, i, t),
    SetSlot(e, s, r),
    SetSlot(e, l, n),
    SetSlot(e, p, o),
    SetSlot(e, y, ! 0);
   }
   function CreateTemporalYearMonth(e, t){
    var
     r =
       arguments.length > 2 && arguments[2] !== undefined
        ? arguments[2]
        : "iso8601",
     o = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1,
     n = GetIntrinsic("%Temporal.PlainYearMonth%"),
     a = Te(n.prototype);
    return CreateTemporalYearMonthSlots(a, e, t, r, o), a;
   }
   function CreateTemporalZonedDateTimeSlots(e, t, r, o){
    ValidateEpochNanoseconds(t),
    N(e),
    SetSlot(e, n, t),
    SetSlot(e, g, r),
    SetSlot(e, p, o);
    var a = new (GetIntrinsic("%Temporal.Instant%"))(GetSlot(e, n));
    SetSlot(e, S, a);
   }
   function CreateTemporalZonedDateTime(e, t){
    var
     r =
       arguments.length > 2 && arguments[2] !== undefined
        ? arguments[2]
        : "iso8601",
     o = GetIntrinsic("%Temporal.ZonedDateTime%"),
     n = Te(o.prototype);
    return CreateTemporalZonedDateTimeSlots(n, e, t, r), n;
   }
   function CalendarFields(e, t){
    if("string" == typeof e){
     var _r15 = new (GetIntrinsic("%Temporal.Calendar%"))(e);
     return Call
             (GetIntrinsic("%Temporal.Calendar.prototype.fields%"), _r15, [t]);
    }
    var
     r = Call(GetMethod(e, "fields"), e, [t]),
     o = [],
     _iterator12 = _createForOfIteratorHelper(r),
     _step12;
    try{
     for(_iterator12.s(); ! (_step12 = _iterator12.n()).done;){
      var _e17 = _step12.value;
      if("string" != typeof _e17)
       throw new TypeError("bad return from calendar.fields()");
      te.call(o, _e17);
     }
    }
    catch(err){_iterator12.e(err);}
    finally{_iterator12.f();}
    return o;
   }
   function CalendarMergeFields(e, t, r){
    if("string" == typeof e){
     var _o8 = new (GetIntrinsic("%Temporal.Calendar%"))(e);
     return Call
             (GetIntrinsic("%Temporal.Calendar.prototype.mergeFields%"),
              _o8,
              [t, r]);
    }
    var o = Call(GetMethod(e, "mergeFields"), e, [t, r]);
    if(! IsObject(o))
     throw new TypeError("bad return from calendar.mergeFields()");
    return o;
   }
   function CalendarDateAdd(e, t, r, o, n){
    var a = n;
    if("string" == typeof e){
     var _n5 = new (GetIntrinsic("%Temporal.Calendar%"))(e);
     return Call
             (GetIntrinsic("%Temporal.Calendar.prototype.dateAdd%"),
              _n5,
              [t, r, o]);
    }
    void 0 === a && (a = GetMethod(e, "dateAdd"));
    var i = fe(a, e, [t, r, o]);
    if(! IsTemporalDate(i)) throw new TypeError("invalid result");
    return i;
   }
   function CalendarDateUntil(e, t, r, o, n){
    var a = n;
    if("string" == typeof e){
     var _n6 = new (GetIntrinsic("%Temporal.Calendar%"))(e);
     return Call
             (GetIntrinsic("%Temporal.Calendar.prototype.dateUntil%"),
              _n6,
              [t, r, o]);
    }
    void 0 === a && (a = GetMethod(e, "dateUntil"));
    var i = fe(a, e, [t, r, o]);
    if(! IsTemporalDuration(i)) throw new TypeError("invalid result");
    return i;
   }
   function CalendarYear(e, t){
    if("string" == typeof e){
     var _r16 = new (GetIntrinsic("%Temporal.Calendar%"))(e);
     return Call
             (GetIntrinsic("%Temporal.Calendar.prototype.year%"), _r16, [t]);
    }
    var r = Call(GetMethod(e, "year"), e, [t]);
    if("number" != typeof r)
     throw new TypeError("calendar year result must be an integer");
    if(! IsIntegralNumber(r))
     throw new RangeError("calendar year result must be an integer");
    return r;
   }
   function CalendarMonth(e, t){
    if("string" == typeof e){
     var _r17 = new (GetIntrinsic("%Temporal.Calendar%"))(e);
     return Call
             (GetIntrinsic("%Temporal.Calendar.prototype.month%"), _r17, [t]);
    }
    var r = Call(GetMethod(e, "month"), e, [t]);
    if("number" != typeof r)
     throw new TypeError("calendar month result must be a positive integer");
    if(! IsIntegralNumber(r) || r < 1)
     throw new RangeError("calendar month result must be a positive integer");
    return r;
   }
   function CalendarMonthCode(e, t){
    if("string" == typeof e){
     var _r18 = new (GetIntrinsic("%Temporal.Calendar%"))(e);
     return Call
             (GetIntrinsic("%Temporal.Calendar.prototype.monthCode%"),
              _r18,
              [t]);
    }
    var r = Call(GetMethod(e, "monthCode"), e, [t]);
    if("string" != typeof r)
     throw new TypeError("calendar monthCode result must be a string");
    return r;
   }
   function CalendarDay(e, t){
    if("string" == typeof e){
     var _r19 = new (GetIntrinsic("%Temporal.Calendar%"))(e);
     return Call(GetIntrinsic("%Temporal.Calendar.prototype.day%"), _r19, [t]);
    }
    var r = Call(GetMethod(e, "day"), e, [t]);
    if("number" != typeof r)
     throw new TypeError("calendar day result must be a positive integer");
    if(! IsIntegralNumber(r) || r < 1)
     throw new RangeError("calendar day result must be a positive integer");
    return r;
   }
   function CalendarEra(e, t){
    if("string" == typeof e){
     var _r20 = new (GetIntrinsic("%Temporal.Calendar%"))(e);
     return Call(GetIntrinsic("%Temporal.Calendar.prototype.era%"), _r20, [t]);
    }
    var r = Call(GetMethod(e, "era"), e, [t]);
    if(void 0 === r) return r;
    if("string" != typeof r)
     throw new TypeError("calendar era result must be a string or undefined");
    return r;
   }
   function CalendarEraYear(e, t){
    if("string" == typeof e){
     var _r21 = new (GetIntrinsic("%Temporal.Calendar%"))(e);
     return Call
             (GetIntrinsic("%Temporal.Calendar.prototype.eraYear%"),
              _r21,
              [t]);
    }
    var r = Call(GetMethod(e, "eraYear"), e, [t]);
    if(void 0 === r) return r;
    if("number" != typeof r)
     throw new
            TypeError
            ("calendar eraYear result must be an integer or undefined");
    if(! IsIntegralNumber(r))
     throw new
            RangeError
            ("calendar eraYear result must be an integer or undefined");
    return r;
   }
   function CalendarDayOfWeek(e, t){
    if("string" == typeof e){
     var _r22 = new (GetIntrinsic("%Temporal.Calendar%"))(e);
     return Call
             (GetIntrinsic("%Temporal.Calendar.prototype.dayOfWeek%"),
              _r22,
              [t]);
    }
    var r = Call(GetMethod(e, "dayOfWeek"), e, [t]);
    if("number" != typeof r)
     throw new
            TypeError
            ("calendar dayOfWeek result must be a positive integer");
    if(! IsIntegralNumber(r) || r < 1)
     throw new
            RangeError
            ("calendar dayOfWeek result must be a positive integer");
    return r;
   }
   function CalendarDayOfYear(e, t){
    if("string" == typeof e){
     var _r23 = new (GetIntrinsic("%Temporal.Calendar%"))(e);
     return Call
             (GetIntrinsic("%Temporal.Calendar.prototype.dayOfYear%"),
              _r23,
              [t]);
    }
    var r = Call(GetMethod(e, "dayOfYear"), e, [t]);
    if("number" != typeof r)
     throw new
            TypeError
            ("calendar dayOfYear result must be a positive integer");
    if(! IsIntegralNumber(r) || r < 1)
     throw new
            RangeError
            ("calendar dayOfYear result must be a positive integer");
    return r;
   }
   function CalendarWeekOfYear(e, t){
    if("string" == typeof e){
     var _r24 = new (GetIntrinsic("%Temporal.Calendar%"))(e);
     return Call
             (GetIntrinsic("%Temporal.Calendar.prototype.weekOfYear%"),
              _r24,
              [t]);
    }
    var r = Call(GetMethod(e, "weekOfYear"), e, [t]);
    if("number" != typeof r)
     throw new
            TypeError
            ("calendar weekOfYear result must be a positive integer");
    if(! IsIntegralNumber(r) || r < 1)
     throw new
            RangeError
            ("calendar weekOfYear result must be a positive integer");
    return r;
   }
   function CalendarYearOfWeek(e, t){
    if("string" == typeof e){
     var _r25 = new (GetIntrinsic("%Temporal.Calendar%"))(e);
     return Call
             (GetIntrinsic("%Temporal.Calendar.prototype.yearOfWeek%"),
              _r25,
              [t]);
    }
    var r = Call(GetMethod(e, "yearOfWeek"), e, [t]);
    if("number" != typeof r)
     throw new TypeError("calendar yearOfWeek result must be an integer");
    if(! IsIntegralNumber(r))
     throw new RangeError("calendar yearOfWeek result must be an integer");
    return r;
   }
   function CalendarDaysInWeek(e, t){
    if("string" == typeof e){
     var _r26 = new (GetIntrinsic("%Temporal.Calendar%"))(e);
     return Call
             (GetIntrinsic("%Temporal.Calendar.prototype.daysInWeek%"),
              _r26,
              [t]);
    }
    var r = Call(GetMethod(e, "daysInWeek"), e, [t]);
    if("number" != typeof r)
     throw new
            TypeError
            ("calendar daysInWeek result must be a positive integer");
    if(! IsIntegralNumber(r) || r < 1)
     throw new
            RangeError
            ("calendar daysInWeek result must be a positive integer");
    return r;
   }
   function CalendarDaysInMonth(e, t){
    if("string" == typeof e){
     var _r27 = new (GetIntrinsic("%Temporal.Calendar%"))(e);
     return Call
             (GetIntrinsic("%Temporal.Calendar.prototype.daysInMonth%"),
              _r27,
              [t]);
    }
    var r = Call(GetMethod(e, "daysInMonth"), e, [t]);
    if("number" != typeof r)
     throw new
            TypeError
            ("calendar daysInMonth result must be a positive integer");
    if(! IsIntegralNumber(r) || r < 1)
     throw new
            RangeError
            ("calendar daysInMonth result must be a positive integer");
    return r;
   }
   function CalendarDaysInYear(e, t){
    if("string" == typeof e){
     var _r28 = new (GetIntrinsic("%Temporal.Calendar%"))(e);
     return Call
             (GetIntrinsic("%Temporal.Calendar.prototype.daysInYear%"),
              _r28,
              [t]);
    }
    var r = Call(GetMethod(e, "daysInYear"), e, [t]);
    if("number" != typeof r)
     throw new
            TypeError
            ("calendar daysInYear result must be a positive integer");
    if(! IsIntegralNumber(r) || r < 1)
     throw new
            RangeError
            ("calendar daysInYear result must be a positive integer");
    return r;
   }
   function CalendarMonthsInYear(e, t){
    if("string" == typeof e){
     var _r29 = new (GetIntrinsic("%Temporal.Calendar%"))(e);
     return Call
             (GetIntrinsic("%Temporal.Calendar.prototype.monthsInYear%"),
              _r29,
              [t]);
    }
    var r = Call(GetMethod(e, "monthsInYear"), e, [t]);
    if("number" != typeof r)
     throw new
            TypeError
            ("calendar monthsInYear result must be a positive integer");
    if(! IsIntegralNumber(r) || r < 1)
     throw new
            RangeError
            ("calendar monthsInYear result must be a positive integer");
    return r;
   }
   function CalendarInLeapYear(e, t){
    if("string" == typeof e){
     var _r30 = new (GetIntrinsic("%Temporal.Calendar%"))(e);
     return Call
             (GetIntrinsic("%Temporal.Calendar.prototype.inLeapYear%"),
              _r30,
              [t]);
    }
    var r = Call(GetMethod(e, "inLeapYear"), e, [t]);
    if("boolean" != typeof r)
     throw new TypeError("calendar inLeapYear result must be a boolean");
    return r;
   }
   function ToTemporalCalendarSlotValue(e){
    if(IsObject(e)){
     if(HasSlot(e, p)) return GetSlot(e, p);
     if
      (!
       function(e){
         return !
                !
                IsTemporalCalendar(e)
                ||
                 "dateAdd" in e && "dateFromFields" in e && "dateUntil" in e
                 && "day" in e
                 && "dayOfWeek" in e
                 && "dayOfYear" in e
                 && "daysInMonth" in e
                 && "daysInWeek" in e
                 && "daysInYear" in e
                 && "fields" in e
                 && "id" in e
                 && "inLeapYear" in e
                 && "mergeFields" in e
                 && "month" in e
                 && "monthCode" in e
                 && "monthDayFromFields" in e
                 && "monthsInYear" in e
                 && "weekOfYear" in e
                 && "year" in e
                 && "yearMonthFromFields" in e
                 && "yearOfWeek" in e;
        }
        (e))
      throw new
             TypeError
             ("expected a Temporal.Calendar or object implementing the Temporal.Calendar protocol");
     return e;
    }
    var t = ToString(e);
    if(IsBuiltinCalendar(t)) return ASCIILowercase(t);
    var r;
    try{
     var _ParseISODateTime5 = ParseISODateTime(t);
     r = _ParseISODateTime5.calendar;
    }
    catch(_unused4){
     try{
      var _ParseTemporalYearMon3 = ParseTemporalYearMonthString(t);
      r = _ParseTemporalYearMon3.calendar;
     }
     catch(_unused5){
      var _ParseTemporalMonthDa3 = ParseTemporalMonthDayString(t);
      r = _ParseTemporalMonthDa3.calendar;
     }
    }
    if(r || (r = "iso8601"), ! IsBuiltinCalendar(r))
     throw new RangeError("invalid calendar identifier ".concat(r));
    return ASCIILowercase(r);
   }
   function GetTemporalCalendarSlotValueWithISODefault(e){
    if(HasSlot(e, p)) return GetSlot(e, p);
    var t = e.calendar;
    return void 0 === t ? "iso8601" : ToTemporalCalendarSlotValue(t);
   }
   function ToTemporalCalendarIdentifier(e){
    if("string" == typeof e) return e;
    var t = e.id;
    if("string" != typeof t)
     throw new TypeError("calendar.id should be a string");
    return t;
   }
   function ToTemporalCalendarObject(e){
    if(IsObject(e)) return e;
    return new (GetIntrinsic("%Temporal.Calendar%"))(e);
   }
   function CalendarEquals(e, t){
    if(e === t) return ! 0;
    return ToTemporalCalendarIdentifier(e) === ToTemporalCalendarIdentifier(t);
   }
   function ThrowIfCalendarsNotEqual(e, t, r){
    if(e === t) return;
    var
     o = ToTemporalCalendarIdentifier(e),
     n = ToTemporalCalendarIdentifier(t);
    if(o !== n)
     throw new
            RangeError
            ("cannot ".concat(r, " of ").concat(o, " and ").concat
              (n, " calendars"));
   }
   function ConsolidateCalendars(e, t){
    if(e === t) return t;
    var
     r = ToTemporalCalendarIdentifier(e),
     o = ToTemporalCalendarIdentifier(t);
    if(r === o || "iso8601" === r) return t;
    if("iso8601" === o) return e;
    throw new RangeError("irreconcilable calendars");
   }
   function CalendarDateFromFields(e, t, r, o){
    if("string" == typeof e){
     var _o9 = new (GetIntrinsic("%Temporal.Calendar%"))(e);
     return Call
             (GetIntrinsic("%Temporal.Calendar.prototype.dateFromFields%"),
              _o9,
              [t, r]);
    }
    var
     n =
       Call
        (o !== null && o !== void 0 ? o : GetMethod(e, "dateFromFields"),
         e,
         [t, r]);
    if(! IsTemporalDate(n)) throw new TypeError("invalid result");
    return n;
   }
   function CalendarYearMonthFromFields(e, t, r){
    if("string" == typeof e){
     var _o10 = new (GetIntrinsic("%Temporal.Calendar%"))(e);
     return Call
             (GetIntrinsic
               ("%Temporal.Calendar.prototype.yearMonthFromFields%"),
              _o10,
              [t, r]);
    }
    var o = Call(GetMethod(e, "yearMonthFromFields"), e, [t, r]);
    if(! IsTemporalYearMonth(o)) throw new TypeError("invalid result");
    return o;
   }
   function CalendarMonthDayFromFields(e, t, r){
    if("string" == typeof e){
     var _o11 = new (GetIntrinsic("%Temporal.Calendar%"))(e);
     return Call
             (GetIntrinsic("%Temporal.Calendar.prototype.monthDayFromFields%"),
              _o11,
              [t, r]);
    }
    var o = Call(GetMethod(e, "monthDayFromFields"), e, [t, r]);
    if(! IsTemporalMonthDay(o)) throw new TypeError("invalid result");
    return o;
   }
   function ToTemporalTimeZoneSlotValue(e){
    if(IsObject(e)){
     if(IsTemporalZonedDateTime(e)) return GetSlot(e, g);
     if
      (!
       function(e){
         return !
                !
                IsTemporalTimeZone(e)
                ||
                 "getOffsetNanosecondsFor" in e
                 && "getPossibleInstantsFor" in e
                 && "id" in e;
        }
        (e))
      throw new
             TypeError
             ("expected a Temporal.TimeZone or object implementing the Temporal.TimeZone protocol");
     return e;
    }
    return ParseTemporalTimeZone(ToString(e));
   }
   function ToTemporalTimeZoneIdentifier(e){
    if("string" == typeof e) return e;
    var t = e.id;
    if("string" != typeof t)
     throw new TypeError("timeZone.id should be a string");
    return t;
   }
   function ToTemporalTimeZoneObject(e){
    if(IsObject(e)) return e;
    return new (GetIntrinsic("%Temporal.TimeZone%"))(e);
   }
   function TimeZoneEquals(e, t){
    if(e === t) return ! 0;
    return ToTemporalTimeZoneIdentifier(e) === ToTemporalTimeZoneIdentifier(t);
   }
   function TemporalDateTimeToDate(e){
    return CreateTemporalDate
            (GetSlot(e, i), GetSlot(e, s), GetSlot(e, l), GetSlot(e, p));
   }
   function TemporalDateTimeToTime(e){
    return new
            (GetIntrinsic("%Temporal.PlainTime%"))
            (GetSlot(e, d),
             GetSlot(e, m),
             GetSlot(e, c),
             GetSlot(e, h),
             GetSlot(e, u),
             GetSlot(e, T));
   }
   function GetOffsetNanosecondsFor(e, t, r){
    if("string" == typeof e){
     var _r31 = new (GetIntrinsic("%Temporal.TimeZone%"))(e);
     return Call
             (GetIntrinsic
               ("%Temporal.TimeZone.prototype.getOffsetNanosecondsFor%"),
              _r31,
              [t]);
    }
    var
     o =
       Call
        (r !== null && r !== void 0
          ? r
          : GetMethod(e, "getOffsetNanosecondsFor"),
         e,
         [t]);
    if("number" != typeof o)
     throw new TypeError("bad return from getOffsetNanosecondsFor");
    if(! IsIntegralNumber(o) || ae(o) >= 864e11)
     throw new RangeError("out-of-range return from getOffsetNanosecondsFor");
    return o;
   }
   function GetOffsetStringFor(e, t){
    return FormatTimeZoneOffsetString(GetOffsetNanosecondsFor(e, t));
   }
   function GetPlainDateTimeFor(e, t, r){
    var
     _BalanceISODateTime2,
     o = GetSlot(t, n),
     a = GetOffsetNanosecondsFor(e, t),
     _GetISOPartsFromEpoch = GetISOPartsFromEpoch(o),
     i = _GetISOPartsFromEpoch.year,
     s = _GetISOPartsFromEpoch.month,
     l = _GetISOPartsFromEpoch.day,
     d = _GetISOPartsFromEpoch.hour,
     m = _GetISOPartsFromEpoch.minute,
     c = _GetISOPartsFromEpoch.second,
     h = _GetISOPartsFromEpoch.millisecond,
     u = _GetISOPartsFromEpoch.microsecond,
     T = _GetISOPartsFromEpoch.nanosecond;
    return _BalanceISODateTime2 =
            BalanceISODateTime(i, s, l, d, m, c, h, u, T + a),
           i = _BalanceISODateTime2.year,
           s = _BalanceISODateTime2.month,
           l = _BalanceISODateTime2.day,
           d = _BalanceISODateTime2.hour,
           m = _BalanceISODateTime2.minute,
           c = _BalanceISODateTime2.second,
           h = _BalanceISODateTime2.millisecond,
           u = _BalanceISODateTime2.microsecond,
           T = _BalanceISODateTime2.nanosecond,
           CreateTemporalDateTime(i, s, l, d, m, c, h, u, T, r);
   }
   function GetInstantFor(e, t, r){
    return DisambiguatePossibleInstants(GetPossibleInstantsFor(e, t), e, t, r);
   }
   function DisambiguatePossibleInstants(t, r, o, n){
    var a = GetIntrinsic("%Temporal.Instant%"), f = t.length;
    if(1 === f) return t[0];
    if(f)
     switch(n){
       case "compatible":
       case "earlier": return t[0];
       case "later":
        return t[f - 1];
       case "reject":
        throw new RangeError("multiple instants found");
     }
    var
     y = GetSlot(o, i),
     I = GetSlot(o, s),
     S = GetSlot(o, l),
     g = GetSlot(o, d),
     w = GetSlot(o, m),
     D = GetSlot(o, c),
     G = GetSlot(o, h),
     v = GetSlot(o, u),
     C = GetSlot(o, T),
     O = GetUTCEpochNanoseconds(y, I, S, g, w, D, G, v, C);
    if(null === O)
     throw new RangeError("DateTime outside of supported range");
    var
     b = new a(O - Ee),
     E = new a(O + Ee),
     M = GetOffsetNanosecondsFor(r, b),
     R = GetOffsetNanosecondsFor(r, E) - M;
    switch(n){
      case "earlier":
       {
        var
         _e18 = GetSlot(o, p),
         _t19 = GetIntrinsic("%Temporal.PlainDateTime%"),
         _n7 =
           AddDateTime
            (y,
             I,
             S,
             g,
             w,
             D,
             G,
             v,
             C,
             _e18,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             - R,
             void 0);
        return GetPossibleInstantsFor
                 (r,
                  new
                   _t19
                   (_n7.year,
                    _n7.month,
                    _n7.day,
                    _n7.hour,
                    _n7.minute,
                    _n7.second,
                    _n7.millisecond,
                    _n7.microsecond,
                    _n7.nanosecond,
                    _e18))
                [0];
       }
      case "compatible":
      case "later":
       {
        var
         _e19 = GetSlot(o, p),
         _t20 = GetIntrinsic("%Temporal.PlainDateTime%"),
         _n8 =
           AddDateTime
            (y,
             I,
             S,
             g,
             w,
             D,
             G,
             v,
             C,
             _e19,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             R,
             void 0),
         _a4 =
           GetPossibleInstantsFor
            (r,
             new
              _t20
              (_n8.year,
               _n8.month,
               _n8.day,
               _n8.hour,
               _n8.minute,
               _n8.second,
               _n8.millisecond,
               _n8.microsecond,
               _n8.nanosecond,
               _e19));
        return _a4[_a4.length - 1];
       }
      case "reject":
       throw new RangeError("no such instant found");
    }
   }
   function GetPossibleInstantsFor(e, t, r){
    if("string" == typeof e){
     var _r32 = new (GetIntrinsic("%Temporal.TimeZone%"))(e);
     return Call
             (GetIntrinsic
               ("%Temporal.TimeZone.prototype.getPossibleInstantsFor%"),
              _r32,
              [t]);
    }
    var
     o =
       Call
        (r !== null && r !== void 0
          ? r
          : GetMethod(e, "getPossibleInstantsFor"),
         e,
         [t]),
     n = [],
     _iterator13 = _createForOfIteratorHelper(o),
     _step13;
    try{
     for(_iterator13.s(); ! (_step13 = _iterator13.n()).done;){
      var _e20 = _step13.value;
      if(! IsTemporalInstant(_e20))
       throw new TypeError("bad return from getPossibleInstantsFor");
      te.call(n, _e20);
     }
    }
    catch(err){_iterator13.e(err);}
    finally{_iterator13.f();}
    return n;
   }
   function ISOYearString(e){
    var t;
    if(e < 0 || e > 9999)
     t = (e < 0 ? "-" : "+") + "000000".concat(ae(e)).slice(- 6);
    else
     t = "0000".concat(e).slice(- 4);
    return t;
   }
   function ISODateTimePartString(e){return "00".concat(e).slice(- 2);}
   function FormatSecondsStringPart(e, t, r, o, n){
    if("minute" === n) return "";
    var
     a = ":".concat(ISODateTimePartString(e)),
     i,
     s = 1e6 * t + 1e3 * r + o;
    if("auto" === n){
     if(0 === s) return a;
     for(i = "".concat(s).padStart(9, "0"); "0" === i[i.length - 1];)
      i = i.slice(0, - 1);
    }
    else{if(0 === n) return a; i = "".concat(s).padStart(9, "0").slice(0, n);}
    return "".concat(a, ".").concat(i);
   }
   function TemporalInstantToString(e, t, r){
    var o = t;
    void 0 === o && (o = "UTC");
    var
     n = GetPlainDateTimeFor(o, e, "iso8601"),
     a = ISOYearString(GetSlot(n, i)),
     p = ISODateTimePartString(GetSlot(n, s)),
     f = ISODateTimePartString(GetSlot(n, l)),
     y = ISODateTimePartString(GetSlot(n, d)),
     I = ISODateTimePartString(GetSlot(n, m)),
     S =
       FormatSecondsStringPart
        (GetSlot(n, c), GetSlot(n, h), GetSlot(n, u), GetSlot(n, T), r),
     g = "Z";
    if(void 0 !== t)
     g = FormatISOTimeZoneOffsetString(GetOffsetNanosecondsFor(o, e));
    return "".concat(a, "-").concat(p, "-").concat(f, "T").concat(y, ":").concat
              (I).concat
             (S).concat
            (g);
   }
   function TemporalDurationToString(t){
    var
     _divmod,
     _divmod2,
     _divmod3,
     r =
       arguments.length > 1 && arguments[1] !== undefined
        ? arguments[1]
        : "auto",
     o = arguments.length > 2 ? arguments[2] : undefined;
    function formatNumber(t){
     return t <= ue ? t.toString(10) : BigInt(t).toString(10);
    }
    var
     n = GetSlot(t, w),
     a = GetSlot(t, D),
     i = GetSlot(t, G),
     s = GetSlot(t, v),
     l = GetSlot(t, C),
     d = GetSlot(t, O),
     m = GetSlot(t, b),
     c = GetSlot(t, E),
     h = GetSlot(t, M),
     u = GetSlot(t, R),
     T = DurationSign(n, a, i, s, l, d, m, c, h, u);
    if(o){
     var
      _e21 = o.unit,
      _t21 = o.increment,
      _r33 = o.roundingMode,
      _RoundDuration =
        RoundDuration(0, 0, 0, 0, 0, 0, m, c, h, u, _t21, _e21, _r33);
     m = _RoundDuration.seconds;
     c = _RoundDuration.milliseconds;
     h = _RoundDuration.microseconds;
     u = _RoundDuration.nanoseconds;
    }
    var p = [];
    n && p.push("".concat(formatNumber(ae(n)), "Y")),
    a && p.push("".concat(formatNumber(ae(a)), "M")),
    i && p.push("".concat(formatNumber(ae(i)), "W")),
    s && p.push("".concat(formatNumber(ae(s)), "D"));
    var f = [];
    l && f.push("".concat(formatNumber(ae(l)), "H")),
    d && f.push("".concat(formatNumber(ae(d)), "M"));
    var
     y = [],
     I,
     S,
     g,
     F,
     Y = TotalDurationNanoseconds(0, 0, 0, m, c, h, u, 0);
    _divmod = divmod(Y, De),
    Y = _divmod.quotient,
    I = _divmod.remainder,
    _divmod2 = divmod(Y, De),
    Y = _divmod2.quotient,
    S = _divmod2.remainder,
    _divmod3 = divmod(Y, De),
    F = _divmod3.quotient,
    g = _divmod3.remainder;
    var P = 1e6 * ae(Number(g)) + 1e3 * ae(Number(S)) + ae(Number(I)), Z;
    if("auto" === r){
     if(0 !== P)
      for(Z = "".concat(P).padStart(9, "0"); "0" === Z[Z.length - 1];)
       Z = Z.slice(0, - 1);
    }
    else
     0 !== r && (Z = "".concat(P).padStart(9, "0").slice(0, r));
    return Z && y.unshift(".", Z),
           F === Ie && ! y.length && "auto" === r
           || y.unshift(abs(F).toString()),
           y.length && f.push("".concat(y.join(""), "S")),
           f.length && f.unshift("T"),
           p.length || f.length
            ? "".concat
                (T < 0 ? "-" : "", "P").concat
               (p.join("")).concat
              (f.join(""))
            : "PT0S";
   }
   function TemporalDateToString(e){
    var
     t =
       arguments.length > 1 && arguments[1] !== undefined
        ? arguments[1]
        : "auto";
    return "".concat(ISOYearString(GetSlot(e, i)), "-").concat
              (ISODateTimePartString(GetSlot(e, s)), "-").concat
             (ISODateTimePartString(GetSlot(e, l))).concat
            (MaybeFormatCalendarAnnotation(GetSlot(e, p), t));
   }
   function TemporalDateTimeToString(e, t){
    var
     r =
       arguments.length > 2 && arguments[2] !== undefined
        ? arguments[2]
        : "auto",
     o = arguments.length > 3 ? arguments[3] : undefined,
     n = GetSlot(e, i),
     a = GetSlot(e, s),
     f = GetSlot(e, l),
     y = GetSlot(e, d),
     I = GetSlot(e, m),
     S = GetSlot(e, c),
     g = GetSlot(e, h),
     w = GetSlot(e, u),
     D = GetSlot(e, T);
    if(o){
     var
      _e22 = o.unit,
      _t22 = o.increment,
      _r34 = o.roundingMode,
      _RoundISODateTime =
        RoundISODateTime(n, a, f, y, I, S, g, w, D, _t22, _e22, _r34);
     n = _RoundISODateTime.year;
     a = _RoundISODateTime.month;
     f = _RoundISODateTime.day;
     y = _RoundISODateTime.hour;
     I = _RoundISODateTime.minute;
     S = _RoundISODateTime.second;
     g = _RoundISODateTime.millisecond;
     w = _RoundISODateTime.microsecond;
     D = _RoundISODateTime.nanosecond;
    }
    return "".concat(ISOYearString(n), "-").concat
                 (ISODateTimePartString(a), "-").concat
                (ISODateTimePartString(f), "T").concat
               (ISODateTimePartString(y), ":").concat
              (ISODateTimePartString(I)).concat
             (FormatSecondsStringPart(S, g, w, D, t)).concat
            (MaybeFormatCalendarAnnotation(GetSlot(e, p), r));
   }
   function TemporalMonthDayToString(e){
    var
     t =
       arguments.length > 1 && arguments[1] !== undefined
        ? arguments[1]
        : "auto",
     r =
       "".concat(ISODateTimePartString(GetSlot(e, s)), "-").concat
        (ISODateTimePartString(GetSlot(e, l))),
     o = ToTemporalCalendarIdentifier(GetSlot(e, p));
    if("always" === t || "critical" === t || "iso8601" !== o)
     r = "".concat(ISOYearString(GetSlot(e, i)), "-").concat(r);
    var n = FormatCalendarAnnotation(o, t);
    return n && (r += n), r;
   }
   function TemporalYearMonthToString(e){
    var
     t =
       arguments.length > 1 && arguments[1] !== undefined
        ? arguments[1]
        : "auto",
     r =
       "".concat(ISOYearString(GetSlot(e, i)), "-").concat
        (ISODateTimePartString(GetSlot(e, s))),
     o = ToTemporalCalendarIdentifier(GetSlot(e, p));
    if("always" === t || "critical" === t || "iso8601" !== o)
     r += "-".concat(ISODateTimePartString(GetSlot(e, l)));
    var n = FormatCalendarAnnotation(o, t);
    return n && (r += n), r;
   }
   function TemporalZonedDateTimeToString(e, t){
    var
     r =
       arguments.length > 2 && arguments[2] !== undefined
        ? arguments[2]
        : "auto",
     o =
       arguments.length > 3 && arguments[3] !== undefined
        ? arguments[3]
        : "auto",
     a =
       arguments.length > 4 && arguments[4] !== undefined
        ? arguments[4]
        : "auto",
     f = arguments.length > 5 ? arguments[5] : undefined,
     y = GetSlot(e, S);
    if(f){
     var
      _t23 = f.unit,
      _r35 = f.increment,
      _o12 = f.roundingMode,
      _a5 = RoundInstant(GetSlot(e, n), _r35, _t23, _o12);
     y = new (GetIntrinsic("%Temporal.Instant%"))(_a5);
    }
    var
     I = GetSlot(e, g),
     w = GetPlainDateTimeFor(I, y, "iso8601"),
     D =
       "".concat(ISOYearString(GetSlot(w, i)), "-").concat
            (ISODateTimePartString(GetSlot(w, s)), "-").concat
           (ISODateTimePartString(GetSlot(w, l)), "T").concat
          (ISODateTimePartString(GetSlot(w, d)), ":").concat
         (ISODateTimePartString(GetSlot(w, m))).concat
        (FormatSecondsStringPart
          (GetSlot(w, c), GetSlot(w, h), GetSlot(w, u), GetSlot(w, T), t));
    if("never" !== a)
     D += FormatISOTimeZoneOffsetString(GetOffsetNanosecondsFor(I, y));
    if("never" !== o)
     D +=
      "[".concat("critical" === o ? "!" : "").concat
       (ToTemporalTimeZoneIdentifier(I), "]");
    return D += MaybeFormatCalendarAnnotation(GetSlot(e, p), r), D;
   }
   function IsTimeZoneOffsetString(e){return ze.test(he(e));}
   function ParseTimeZoneOffsetString(e){
    var t = ze.exec(he(e));
    if(! t) throw new RangeError("invalid time zone offset: ".concat(e));
    return ("-" === t[1] || "−" === t[1] ? - 1 : 1)
           *
            (1e9 * (60 * (60 * + t[2] + + (t[3] || 0)) + + (t[4] || 0))
            + + ((t[5] || 0) + "000000000").slice(0, 9));
   }
   function GetCanonicalTimeZoneIdentifier(e){
    if(IsTimeZoneOffsetString(e))
     return FormatTimeZoneOffsetString(ParseTimeZoneOffsetString(e));
    return getIntlDateTimeFormatEnUsForTimeZone(he(e)).resolvedOptions().timeZone;
   }
   function GetNamedTimeZoneOffsetNanoseconds(t, r){
    var
     _GetNamedTimeZoneDate = GetNamedTimeZoneDateTimeParts(t, r),
     o = _GetNamedTimeZoneDate.year,
     n = _GetNamedTimeZoneDate.month,
     a = _GetNamedTimeZoneDate.day,
     i = _GetNamedTimeZoneDate.hour,
     s = _GetNamedTimeZoneDate.minute,
     l = _GetNamedTimeZoneDate.second,
     d = _GetNamedTimeZoneDate.millisecond,
     m = _GetNamedTimeZoneDate.microsecond,
     c = _GetNamedTimeZoneDate.nanosecond,
     h = o % 400,
     u = (o - h) / 400,
     T = 146097n * Ee,
     p = GetUTCEpochNanoseconds(h, n, a, i, s, l, d, m, c),
     f = p + T * BigInt(u);
    return Number(f - r);
   }
   function FormatTimeZoneOffsetString(e){
    var
     t = e < 0 ? "-" : "+",
     r = ae(e),
     o = r % 1e9,
     n = ie(r / 1e9) % 60,
     a = ie(r / 6e10) % 60,
     i = ISODateTimePartString(ie(r / 36e11)),
     s = ISODateTimePartString(a),
     l = ISODateTimePartString(n),
     d = "";
    if(o){
     var _e23 = "".concat(o).padStart(9, "0");
     for(; "0" === _e23[_e23.length - 1];) _e23 = _e23.slice(0, - 1);
     d = ":".concat(l, ".").concat(_e23);
    }
    else
     n && (d = ":".concat(l));
    return "".concat(t).concat(i, ":").concat(s).concat(d);
   }
   function FormatISOTimeZoneOffsetString(t){
    var
     r = Number(RoundNumberToIncrement(BigInt(t), be, "halfExpand")),
     o = r < 0 ? "-" : "+";
    r = ae(r);
    var n = r / 6e10 % 60;
    return "".concat(o).concat(ISODateTimePartString(ie(r / 36e11)), ":").concat
            (ISODateTimePartString(n));
   }
   function GetUTCEpochNanoseconds(t, r, o, n, a, i, s, l, d){
    var m = new Date();
    m.setUTCHours(n, a, i, s), m.setUTCFullYear(t, r - 1, o);
    var c = m.getTime();
    if(de(c)) return null;
    var h = BigInt(c) * Ge;
    return h = h + BigInt(l) * De,
           h = h + BigInt(d),
           h < Me || h > Re ? null : h;
   }
   function GetISOPartsFromEpoch(t){
    var
     _divmod4 = divmod(t, Ge),
     r = _divmod4.quotient,
     o = _divmod4.remainder,
     n = Number(r),
     a = Number(o);
    a < 0 && (a += 1e6, n -= 1);
    var i = ie(a / 1e3) % 1e3, s = a % 1e3, l = new Date(n);
    return {epochMilliseconds: n,
            year: l.getUTCFullYear(),
            month: l.getUTCMonth() + 1,
            day: l.getUTCDate(),
            hour: l.getUTCHours(),
            minute: l.getUTCMinutes(),
            second: l.getUTCSeconds(),
            millisecond: l.getUTCMilliseconds(),
            microsecond: i,
            nanosecond: s};
   }
   function GetNamedTimeZoneDateTimeParts(e, t){
    var
     _GetISOPartsFromEpoch2 = GetISOPartsFromEpoch(t),
     r = _GetISOPartsFromEpoch2.epochMilliseconds,
     o = _GetISOPartsFromEpoch2.millisecond,
     n = _GetISOPartsFromEpoch2.microsecond,
     a = _GetISOPartsFromEpoch2.nanosecond,
     _GetFormatterParts =
       function(e, t){
         var r = getIntlDateTimeFormatEnUsForTimeZone(e).format(new Date(t));
         return function(e){
                  var t = e.split(/[^\w]+/);
                  if(7 !== t.length)
                   throw new RangeError('expected 7 parts in "'.concat(e));
                  var
                   r = + t[0],
                   o = + t[1],
                   n = + t[2],
                   a = t[3].toUpperCase();
                  if("B" === a || "BC" === a)
                   n = 1 - n;
                  else if("A" !== a && "AD" !== a)
                   throw new
                          RangeError
                          ("Unknown era ".concat(a, ' in "').concat(e));
                  var i = + t[4];
                  24 === i && (i = 0);
                  var s = + t[5], l = + t[6];
                  if(! (me(n) && me(r) && me(o) && me(i) && me(s) && me(l)))
                   throw new RangeError('Invalid number in "'.concat(e));
                  return {year: n,
                          month: r,
                          day: o,
                          hour: i,
                          minute: s,
                          second: l};
                 }
                 (r);
        }
        (e, r),
     i = _GetFormatterParts.year,
     s = _GetFormatterParts.month,
     l = _GetFormatterParts.day,
     d = _GetFormatterParts.hour,
     m = _GetFormatterParts.minute,
     c = _GetFormatterParts.second;
    return BalanceISODateTime(i, s, l, d, m, c, o, n, a);
   }
   function maxJSBI(t, r){return t < r ? r : t;}
   function afterLatestPossibleTzdbRuleChange(){return Ve() + Ze;}
   function GetNamedTimeZoneNextTransition(t, r){
    if(r < Pe) return GetNamedTimeZoneNextTransition(t, Pe);
    var
     o = r + Be,
     n = maxJSBI(afterLatestPossibleTzdbRuleChange(), o),
     a = maxJSBI(Pe, r),
     i = GetNamedTimeZoneOffsetNanoseconds(t, a),
     s = a,
     l = i;
    for(; i === l && BigInt(a) < n;){
     if(s = a + Ne, s > Re) return null;
     l = GetNamedTimeZoneOffsetNanoseconds(t, s), i === l && (a = s);
    }
    if(i === l) return null;
    return bisect
            (function(e){return GetNamedTimeZoneOffsetNanoseconds(t, e);},
             a,
             s,
             i,
             l);
   }
   function GetNamedTimeZonePreviousTransition(t, r){
    var
     o = afterLatestPossibleTzdbRuleChange(),
     a = r > o,
     i = a ? r - Be : Pe;
    if("Africa/Casablanca" === t || "Africa/El_Aaiun" === t){
     var _o13 = GetSlot(ToTemporalInstant("2088-01-01T00Z"), n);
     if(_o13 < r) return GetNamedTimeZonePreviousTransition(t, _o13);
    }
    var s = r - Se;
    if(s < Pe) return null;
    var l = GetNamedTimeZoneOffsetNanoseconds(t, s), d = s, m = l;
    for(; l === m && s > i;){
     if(d = s - Ne, d < Pe) return null;
     m = GetNamedTimeZoneOffsetNanoseconds(t, d), l === m && (s = d);
    }
    if(l === m){
     if(a){
      var _r36 = o - Ee;
      return GetNamedTimeZonePreviousTransition(t, _r36);
     }
     return null;
    }
    return bisect
            (function(e){return GetNamedTimeZoneOffsetNanoseconds(t, e);},
             d,
             s,
             m,
             l);
   }
   function LeapYear(e){
    if(void 0 === e) return ! 1;
    return e % 4 == 0 && (! (e % 100 == 0) || e % 400 == 0);
   }
   function ISODaysInMonth(e, t){
    return {standard: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],
              leapyear: [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]}
             [LeapYear(e) ? "leapyear" : "standard"]
            [t - 1];
   }
   function DayOfWeek(e, t, r){
    var
     o = t + (t < 3 ? 10 : - 2),
     n = e - (t < 3 ? 1 : 0),
     a = ie(n / 100),
     i = n - 100 * a,
     s = (r + ie(2.6 * o - .2) + (i + ie(i / 4)) + (ie(a / 4) - 2 * a)) % 7;
    return s + (s <= 0 ? 7 : 0);
   }
   function DayOfYear(e, t, r){
    var o = r;
    for(var _r37 = t - 1; _r37 > 0; _r37--) o += ISODaysInMonth(e, _r37);
    return o;
   }
   function WeekOfYear(e, t, r){
    var
     o = DayOfYear(e, t, r),
     n = DayOfWeek(e, t, r) || 7,
     a = DayOfWeek(e, 1, 1),
     i = ie((o - n + 10) / 7);
    return i < 1
            ? 5
              === a
              || 6 === a && LeapYear(e - 1)
              ? {week: 53, year: e - 1}
              : {week: 52, year: e - 1}
            : 53
              === i
              && (LeapYear(e) ? 366 : 365) - o < 4 - n
              ? {week: 1, year: e + 1}
              : {week: i, year: e};
   }
   function DurationSign(e, t, r, o, n, a, i, s, l, d){
    for
    (var _i7 = 0, _arr2 = [e, t, r, o, n, a, i, s, l, d];
     _i7 < _arr2.length;
     _i7++){var _m2 = _arr2[_i7]; if(0 !== _m2) return _m2 < 0 ? - 1 : 1;}
    return 0;
   }
   function BalanceISOYearMonth(e, t){
    var r = e, o = t;
    if(! me(r) || ! me(o)) throw new RangeError("infinity is out of range");
    return o -= 1,
           r += ie(o / 12),
           o %= 12,
           o < 0 && (o += 12),
           o += 1,
           {year: r, month: o};
   }
   function BalanceISODate(e, t, r){
    var o = e, n = t, a = r;
    if(! me(a)) throw new RangeError("infinity is out of range");
    var _BalanceISOYearMonth = BalanceISOYearMonth(o, n);
    o = _BalanceISOYearMonth.year;
    n = _BalanceISOYearMonth.month;
    var i = 146097;
    if(ae(a) > i){var _e24 = le(a / i); o += 400 * _e24, a -= _e24 * i;}
    var s = 0, l = n > 2 ? o : o - 1;
    for(; s = LeapYear(l) ? 366 : 365, a < - s;) o -= 1, l -= 1, a += s;
    for(l += 1; s = LeapYear(l) ? 366 : 365, a > s;) o += 1, l += 1, a -= s;
    for(; a < 1;){
     var _BalanceISOYearMonth2;
     _BalanceISOYearMonth2 = BalanceISOYearMonth(o, n - 1),
     o = _BalanceISOYearMonth2.year,
     n = _BalanceISOYearMonth2.month,
     a += ISODaysInMonth(o, n);
    }
    for(; a > ISODaysInMonth(o, n);){
     var _BalanceISOYearMonth3;
     a -= ISODaysInMonth(o, n),
     _BalanceISOYearMonth3 = BalanceISOYearMonth(o, n + 1),
     o = _BalanceISOYearMonth3.year,
     n = _BalanceISOYearMonth3.month;
    }
    return {year: o, month: n, day: a};
   }
   function BalanceISODateTime(e, t, r, o, n, a, i, s, l){
    var
     _BalanceTime = BalanceTime(o, n, a, i, s, l),
     d = _BalanceTime.deltaDays,
     m = _BalanceTime.hour,
     c = _BalanceTime.minute,
     h = _BalanceTime.second,
     u = _BalanceTime.millisecond,
     T = _BalanceTime.microsecond,
     p = _BalanceTime.nanosecond,
     _BalanceISODate = BalanceISODate(e, t, r + d),
     f = _BalanceISODate.year,
     y = _BalanceISODate.month,
     I = _BalanceISODate.day;
    return {year: f,
            month: y,
            day: I,
            hour: m,
            minute: c,
            second: h,
            millisecond: u,
            microsecond: T,
            nanosecond: p};
   }
   function BalanceTime(t, r, o, n, a, i){
    var
     _NonNegativeBigIntDiv,
     _NonNegativeBigIntDiv2,
     _NonNegativeBigIntDiv3,
     _NonNegativeBigIntDiv4,
     _NonNegativeBigIntDiv5,
     _NonNegativeBigIntDiv6,
     s,
     l = BigInt(t),
     d = BigInt(r),
     m = BigInt(o),
     c = BigInt(n),
     h = BigInt(a),
     u = BigInt(i);
    return _NonNegativeBigIntDiv = NonNegativeBigIntDivmod(u, De),
           s = _NonNegativeBigIntDiv.quotient,
           u = _NonNegativeBigIntDiv.remainder,
           h = h + s,
           _NonNegativeBigIntDiv2 = NonNegativeBigIntDivmod(h, De),
           s = _NonNegativeBigIntDiv2.quotient,
           h = _NonNegativeBigIntDiv2.remainder,
           c = c + s,
           _NonNegativeBigIntDiv3 = NonNegativeBigIntDivmod(c, De),
           s = _NonNegativeBigIntDiv3.quotient,
           c = _NonNegativeBigIntDiv3.remainder,
           m = m + s,
           _NonNegativeBigIntDiv4 = NonNegativeBigIntDivmod(m, ge),
           s = _NonNegativeBigIntDiv4.quotient,
           m = _NonNegativeBigIntDiv4.remainder,
           d = d + s,
           _NonNegativeBigIntDiv5 = NonNegativeBigIntDivmod(d, ge),
           s = _NonNegativeBigIntDiv5.quotient,
           d = _NonNegativeBigIntDiv5.remainder,
           l = l + s,
           _NonNegativeBigIntDiv6 = NonNegativeBigIntDivmod(l, we),
           s = _NonNegativeBigIntDiv6.quotient,
           l = _NonNegativeBigIntDiv6.remainder,
           {deltaDays: Number(s),
            hour: Number(l),
            minute: Number(d),
            second: Number(m),
            millisecond: Number(c),
            microsecond: Number(h),
            nanosecond: Number(u)};
   }
   function TotalDurationNanoseconds(t, r, o, n, a, i, s, l){
    var d = BigInt(t), m = BigInt(s);
    0 !== t && (m = BigInt(s) - BigInt(l));
    var
     c = BigInt(r) + d * 24n,
     h = BigInt(o) + c * ge,
     u = BigInt(n) + h * ge,
     T = BigInt(a) + u * De,
     p = BigInt(i) + T * De;
    return BigInt(m) + p * De;
   }
   function NanosecondsToDays(t, r){
    var
     o = GetIntrinsic("%Temporal.Instant%"),
     a = se(Number(t)),
     f = BigInt(t),
     y = 864e11;
    if(0 === a) return {days: 0, nanoseconds: Ie, dayLengthNs: y};
    if(! IsTemporalZonedDateTime(r)){
     var _divmod5, _t24;
     return _divmod5 = divmod(f, BigInt(y)),
            _t24 = _divmod5.quotient,
            f = _divmod5.remainder,
            {days: Number(_t24), nanoseconds: f, dayLengthNs: y};
    }
    var
     I = GetSlot(r, n),
     w = GetSlot(r, S),
     D = I + f,
     G = new o(D),
     v = GetSlot(r, g),
     C = GetSlot(r, p),
     O = GetPlainDateTimeFor(v, w, C),
     b = GetPlainDateTimeFor(v, G, C),
     _DifferenceISODateTim =
       DifferenceISODateTime
        (GetSlot(O, i),
         GetSlot(O, s),
         GetSlot(O, l),
         GetSlot(O, d),
         GetSlot(O, m),
         GetSlot(O, c),
         GetSlot(O, h),
         GetSlot(O, u),
         GetSlot(O, T),
         GetSlot(b, i),
         GetSlot(b, s),
         GetSlot(b, l),
         GetSlot(b, d),
         GetSlot(b, m),
         GetSlot(b, c),
         GetSlot(b, h),
         GetSlot(b, u),
         GetSlot(b, T),
         C,
         "day",
         Te(null)),
     E = _DifferenceISODateTim.days,
     M = AddZonedDateTime(w, v, C, 0, 0, 0, E, 0, 0, 0, 0, 0, 0),
     R = BigInt(E);
    if(1 === a)
     for(; R > Ie && M > D;)
      R = R - Se,
      M = AddZonedDateTime(w, v, C, 0, 0, 0, Number(R), 0, 0, 0, 0, 0, 0);
    f = D - M;
    var F = ! 1, Y = new o(M);
    do{
     var
      _t25 = AddZonedDateTime(Y, v, C, 0, 0, 0, a, 0, 0, 0, 0, 0, 0),
      _r38 = GetSlot(Y, n);
     y = Number(_t25 - _r38),
     F = (f - BigInt(y)) * BigInt(a) >= Ie,
     F && (f = f - BigInt(y), Y = new o(_t25), R = R + BigInt(a));
    }
    while
     (F);
    if(! isZero(R) && signJSBI(R) !== a)
     throw new
            RangeError
            ("Time zone or calendar converted nanoseconds into a number of days with the opposite sign");
    if(! isZero(f) && signJSBI(f) !== a){
     if(isNegativeJSBI(f) && 1 === a) throw new Error("assert not reached");
     throw new
            RangeError
            ("Time zone or calendar ended up with a remainder of nanoseconds with the opposite sign");
    }
    if(abs(f) >= abs(BigInt(y))) throw new Error("assert not reached");
    return {days: Number(R), nanoseconds: f, dayLengthNs: ae(y)};
   }
   function BalanceDuration(e, t, r, o, n, a, i, s, l){
    var d = BalancePossiblyInfiniteDuration(e, t, r, o, n, a, i, s, l);
    if("positive overflow" === d || "negative overflow" === d)
     throw new RangeError("Duration out of range");
    return d;
   }
   function BalancePossiblyInfiniteDuration(t, r, o, a, i, s, l, d, m){
    var
     _NanosecondsToDays,
     _divmod6,
     _divmod7,
     _divmod8,
     _divmod9,
     _divmod10,
     _divmod11,
     _divmod12,
     _divmod13,
     _divmod14,
     _divmod15,
     _divmod16,
     _divmod17,
     _divmod18,
     _divmod19,
     c,
     h,
     u,
     T,
     f,
     y,
     I = t;
    if(IsTemporalZonedDateTime(m)){
     var
      _t26 =
        AddZonedDateTime
         (GetSlot(m, S),
          GetSlot(m, g),
          GetSlot(m, p),
          0,
          0,
          0,
          I,
          r,
          o,
          a,
          i,
          s,
          l),
      _d = GetSlot(m, n);
     c = _t26 - _d;
    }
    else
     c = TotalDurationNanoseconds(I, r, o, a, i, s, l, 0);
    "year" === d || "month" === d || "week" === d || "day" === d
     ? (_NanosecondsToDays
       = NanosecondsToDays(c, m),
       I = _NanosecondsToDays.days,
       c = _NanosecondsToDays.nanoseconds,
       _NanosecondsToDays)
     : I = 0;
    var w = c < Ie ? - 1 : 1;
    switch(c = abs(c), h = u = T = f = y = Ie, d){
      case "year":
      case "month":
      case "week":
      case "day":
      case "hour":
       _divmod6 = divmod(c, De),
       h = _divmod6.quotient,
       c = _divmod6.remainder,
       _divmod7 = divmod(h, De),
       u = _divmod7.quotient,
       h = _divmod7.remainder,
       _divmod8 = divmod(u, De),
       T = _divmod8.quotient,
       u = _divmod8.remainder,
       _divmod9 = divmod(T, ge),
       f = _divmod9.quotient,
       T = _divmod9.remainder,
       _divmod10 = divmod(f, ge),
       y = _divmod10.quotient,
       f = _divmod10.remainder;
       break;
      case "minute":
       _divmod11 = divmod(c, De),
       h = _divmod11.quotient,
       c = _divmod11.remainder,
       _divmod12 = divmod(h, De),
       u = _divmod12.quotient,
       h = _divmod12.remainder,
       _divmod13 = divmod(u, De),
       T = _divmod13.quotient,
       u = _divmod13.remainder,
       _divmod14 = divmod(T, ge),
       f = _divmod14.quotient,
       T = _divmod14.remainder;
       break;
      case "second":
       _divmod15 = divmod(c, De),
       h = _divmod15.quotient,
       c = _divmod15.remainder,
       _divmod16 = divmod(h, De),
       u = _divmod16.quotient,
       h = _divmod16.remainder,
       _divmod17 = divmod(u, De),
       T = _divmod17.quotient,
       u = _divmod17.remainder;
       break;
      case "millisecond":
       _divmod18 = divmod(c, De),
       h = _divmod18.quotient,
       c = _divmod18.remainder,
       _divmod19 = divmod(h, De),
       u = _divmod19.quotient,
       h = _divmod19.remainder;
       break;
      case "microsecond":
       var _divmod20 = divmod(c, De);
       h = _divmod20.quotient;
       c = _divmod20.remainder;
       break;
      case "nanosecond": break;
      default: throw new Error("assert not reached");
    }
    var
     D = Number(y) * w,
     G = Number(f) * w,
     v = Number(T) * w,
     C = Number(u) * w,
     O = Number(h) * w,
     b = Number(c) * w;
    for(var _i8 = 0, _arr3 = [I, D, G, v, C, O, b]; _i8 < _arr3.length; _i8++){
     var _e25 = _arr3[_i8];
     if(! me(_e25))
      return 1 === w ? "positive overflow" : "negative overflow";
    }
    return {days: I,
            hours: D,
            minutes: G,
            seconds: v,
            milliseconds: C,
            microseconds: O,
            nanoseconds: b};
   }
   function UnbalanceDurationRelative(t, r, o, n, a, i){
    var
     s = GetIntrinsic("%Temporal.Duration%"),
     l = DurationSign(t, r, o, n, 0, 0, 0, 0, 0, 0);
    if(0 === l) return {years: t, months: r, weeks: o, days: n};
    var
     d = BigInt(l),
     m,
     c,
     h = BigInt(t),
     u = BigInt(r),
     T = BigInt(o),
     f = BigInt(n);
    i && (c = ToTemporalDate(i), m = GetSlot(c, p));
    var y = new s(l), I = new s(0, l), S = new s(0, 0, l);
    switch(a){
      case "year": break;
      case "month":
       {
        if(! m)
         throw new
                RangeError
                ("a starting point is required for months balancing");
        var _t27, _r39;
        for
        ("string" != typeof m
         && (_t27 = GetMethod(m, "dateAdd"), _r39 = GetMethod(m, "dateUntil"));
         !
         isZero(h);){
         var _o14 = CalendarDateAdd(m, c, y, void 0, _t27), _n9 = Te(null);
         _n9.largestUnit = "month";
         var
          _a6 = CalendarDateUntil(m, c, _o14, _n9, _r39),
          _i9 = BigInt(GetSlot(_a6, D));
         c = _o14, u = u + _i9, h = h - d;
        }
       }
       break;
      case "week":
       {
        if(! m)
         throw new
                RangeError
                ("a starting point is required for weeks balancing");
        var _t28 = "string" != typeof m ? GetMethod(m, "dateAdd") : void 0;
        for(; ! isZero(h);){
         var _MoveRelativeDate, _r40 = void 0;
         _MoveRelativeDate = MoveRelativeDate(m, c, y, _t28),
         c = _MoveRelativeDate.relativeTo,
         _r40 = _MoveRelativeDate.days,
         f = f + BigInt(_r40),
         h = h - d;
        }
        for(; ! isZero(u);){
         var _MoveRelativeDate2, _r41 = void 0;
         _MoveRelativeDate2 = MoveRelativeDate(m, c, I, _t28),
         c = _MoveRelativeDate2.relativeTo,
         _r41 = _MoveRelativeDate2.days,
         f = f + BigInt(_r41),
         u = u - d;
        }
        break;
       }
      default:
       {
        if(isZero(h) && isZero(u) && isZero(T)) break;
        if(! m)
         throw new
                RangeError
                ("a starting point is required for balancing calendar units");
        var _t29 = "string" != typeof m ? GetMethod(m, "dateAdd") : void 0;
        for(; ! isZero(h);){
         var _MoveRelativeDate3, _r42 = void 0;
         _MoveRelativeDate3 = MoveRelativeDate(m, c, y, _t29),
         c = _MoveRelativeDate3.relativeTo,
         _r42 = _MoveRelativeDate3.days,
         f = f + BigInt(_r42),
         h = h - d;
        }
        for(; ! isZero(u);){
         var _MoveRelativeDate4, _r43 = void 0;
         _MoveRelativeDate4 = MoveRelativeDate(m, c, I, _t29),
         c = _MoveRelativeDate4.relativeTo,
         _r43 = _MoveRelativeDate4.days,
         f = f + BigInt(_r43),
         u = u - d;
        }
        for(; ! isZero(T);){
         var _MoveRelativeDate5, _r44 = void 0;
         _MoveRelativeDate5 = MoveRelativeDate(m, c, S, _t29),
         c = _MoveRelativeDate5.relativeTo,
         _r44 = _MoveRelativeDate5.days,
         f = f + BigInt(_r44),
         T = T - d;
        }
        break;
       }
    }
    return {years: Number(h),
            months: Number(u),
            weeks: Number(T),
            days: Number(f)};
   }
   function CalculateOffsetShift(e, t, r, o, n){
    if(IsTemporalZonedDateTime(e)){
     var
      _a7 = GetSlot(e, S),
      _i10 = GetSlot(e, g),
      _s = GetSlot(e, p),
      _l2 = GetOffsetNanosecondsFor(_i10, _a7),
      _d2 = AddZonedDateTime(_a7, _i10, _s, t, r, o, n, 0, 0, 0, 0, 0, 0);
     return GetOffsetNanosecondsFor
             (_i10, new (GetIntrinsic("%Temporal.Instant%"))(_d2))
            - _l2;
    }
    return 0;
   }
   function CreateNegatedTemporalDuration(e){
    return new
            (GetIntrinsic("%Temporal.Duration%"))
            (- GetSlot(e, w),
             - GetSlot(e, D),
             - GetSlot(e, G),
             - GetSlot(e, v),
             - GetSlot(e, C),
             - GetSlot(e, O),
             - GetSlot(e, b),
             - GetSlot(e, E),
             - GetSlot(e, M),
             - GetSlot(e, R));
   }
   function ConstrainToRange(e, t, r){return oe(r, ne(t, e));}
   function ConstrainISODate(e, t, r){
    var o = ConstrainToRange(t, 1, 12);
    return {year: e,
            month: o,
            day: ConstrainToRange(r, 1, ISODaysInMonth(e, o))};
   }
   function RejectToRange(e, t, r){
    if(e < t || e > r)
     throw new
            RangeError
            ("value out of range: ".concat(t, " <= ").concat(e, " <= ").concat
              (r));
   }
   function RejectISODate(e, t, r){
    RejectToRange(t, 1, 12), RejectToRange(r, 1, ISODaysInMonth(e, t));
   }
   function RejectDateRange(e, t, r){
    RejectDateTimeRange(e, t, r, 12, 0, 0, 0, 0, 0);
   }
   function RejectTime(e, t, r, o, n, a){
    RejectToRange(e, 0, 23),
    RejectToRange(t, 0, 59),
    RejectToRange(r, 0, 59),
    RejectToRange(o, 0, 999),
    RejectToRange(n, 0, 999),
    RejectToRange(a, 0, 999);
   }
   function RejectDateTime(e, t, r, o, n, a, i, s, l){
    RejectISODate(e, t, r), RejectTime(o, n, a, i, s, l);
   }
   function RejectDateTimeRange(e, t, r, o, n, a, i, s, l){
    if
     (RejectToRange(e, Fe, Ye),
      e === Fe
      && null == GetUTCEpochNanoseconds(e, t, r + 1, o, n, a, i, s, l - 1)
      ||
       e === Ye
       && null == GetUTCEpochNanoseconds(e, t, r - 1, o, n, a, i, s, l + 1))
     throw new RangeError("DateTime outside of supported range");
   }
   function ValidateEpochNanoseconds(t){
    if(t < Me || t > Re)
     throw new RangeError("Instant outside of supported range");
   }
   function RejectDuration(e, t, r, o, n, a, i, s, l, d){
    var m = DurationSign(e, t, r, o, n, a, i, s, l, d);
    for
    (var _i11 = 0, _arr4 = [e, t, r, o, n, a, i, s, l, d];
     _i11 < _arr4.length;
     _i11++){
     var _c2 = _arr4[_i11];
     if(! me(_c2))
      throw new RangeError("infinite values not allowed as duration fields");
     var _e26 = se(_c2);
     if(0 !== _e26 && _e26 !== m)
      throw new RangeError("mixed-sign values not allowed as duration fields");
    }
   }
   function DifferenceISODate(e, t, r, o, n, a, i){
    switch(i){
      case "year":
      case "month":
       {
        var _s2 = - CompareISODate(e, t, r, o, n, a);
        if(0 === _s2) return {years: 0, months: 0, weeks: 0, days: 0};
        var
         _l3 = {year: e, month: t, day: r},
         _d3 = {year: o, month: n, day: a},
         _m3 = _d3.year - _l3.year,
         _c3 = AddISODate(e, t, r, _m3, 0, 0, 0, "constrain"),
         _h = - CompareISODate(_c3.year, _c3.month, _c3.day, o, n, a);
        if(0 === _h)
         return "year" === i
                 ? {years: _m3, months: 0, weeks: 0, days: 0}
                 : {years: 0, months: 12 * _m3, weeks: 0, days: 0};
        var _u = _d3.month - _l3.month;
        if
         (_h !== _s2 && (_m3 -= _s2, _u += 12 * _s2),
          _c3 = AddISODate(e, t, r, _m3, _u, 0, 0, "constrain"),
          _h = - CompareISODate(_c3.year, _c3.month, _c3.day, o, n, a),
          0 === _h)
         return "year" === i
                 ? {years: _m3, months: _u, weeks: 0, days: 0}
                 : {years: 0, months: _u + 12 * _m3, weeks: 0, days: 0};
        _h !== _s2
        &&
         (_u -= _s2,
          _u === - _s2 && (_m3 -= _s2, _u = 11 * _s2),
          _c3 = AddISODate(e, t, r, _m3, _u, 0, 0, "constrain"));
        var _T = 0;
        return _T =
                _c3.month === _d3.month
                 ? _d3.day - _c3.day
                 : _s2
                   < 0
                   ? -
                    _c3.day
                    - (ISODaysInMonth(_d3.year, _d3.month) - _d3.day)
                   : _d3.day + (ISODaysInMonth(_c3.year, _c3.month) - _c3.day),
               "month" === i && (_u += 12 * _m3, _m3 = 0),
               {years: _m3, months: _u, weeks: 0, days: _T};
       }
      case "week":
      case "day":
       {
        var _s3, _l4, _d4;
        CompareISODate(e, t, r, o, n, a) < 0
         ? (_l4
           = {year: e, month: t, day: r},
           _s3 = {year: o, month: n, day: a},
           _d4 = 1)
         : (_l4
           = {year: o, month: n, day: a},
           _s3 = {year: e, month: t, day: r},
           _d4 = - 1);
        var
         _m4 =
           DayOfYear(_s3.year, _s3.month, _s3.day)
           - DayOfYear(_l4.year, _l4.month, _l4.day);
        for(var _e27 = _l4.year; _e27 < _s3.year; ++_e27)
         _m4 += LeapYear(_e27) ? 366 : 365;
        var _c4 = 0;
        return "week" === i && (_c4 = ie(_m4 / 7), _m4 %= 7),
               _c4 *= _d4,
               _m4 *= _d4,
               {years: 0, months: 0, weeks: _c4, days: _m4};
       }
      default: throw new Error("assert not reached");
    }
   }
   function DifferenceTime(e, t, r, o, n, a, i, s, l, d, m, c){
    var
     _BalanceTime2,
     h = i - e,
     u = s - t,
     T = l - r,
     p = d - o,
     f = m - n,
     y = c - a,
     I = DurationSign(0, 0, 0, 0, h, u, T, p, f, y);
    h *= I, u *= I, T *= I, p *= I, f *= I, y *= I;
    var S = 0;
    if
     (_BalanceTime2 = BalanceTime(h, u, T, p, f, y),
      S = _BalanceTime2.deltaDays,
      h = _BalanceTime2.hour,
      u = _BalanceTime2.minute,
      T = _BalanceTime2.second,
      p = _BalanceTime2.millisecond,
      f = _BalanceTime2.microsecond,
      y = _BalanceTime2.nanosecond,
      0 != S)
     throw new
            Error
            ("assertion failure in DifferenceTime: _bt_.[[Days]] should be 0");
    return h *= I,
           u *= I,
           T *= I,
           p *= I,
           f *= I,
           y *= I,
           {hours: h,
            minutes: u,
            seconds: T,
            milliseconds: p,
            microseconds: f,
            nanoseconds: y};
   }
   function DifferenceInstant(t, r, o, n, a, i){
    var
     _RoundDuration2,
     s = r - t,
     l = 0,
     d = 0,
     m = Number(s % De),
     c = Number(s / De % De),
     h = Number(s / Ge % De),
     u = Number(s / ve);
    return _RoundDuration2 =
            RoundDuration(0, 0, 0, 0, 0, 0, u, h, c, m, o, n, i),
           l = _RoundDuration2.hours,
           d = _RoundDuration2.minutes,
           u = _RoundDuration2.seconds,
           h = _RoundDuration2.milliseconds,
           c = _RoundDuration2.microseconds,
           m = _RoundDuration2.nanoseconds,
           BalanceDuration(0, l, d, u, h, c, m, a);
   }
   function DifferenceISODateTime
   (e, t, r, o, n, a, i, s, l, d, m, c, h, u, T, p, f, y, I, S, g){
    var
     _BalanceISODate2,
     _BalanceDuration,
     _BalanceDuration2,
     w = e,
     D = t,
     G = r,
     _DifferenceTime = DifferenceTime(o, n, a, i, s, l, h, u, T, p, f, y),
     v = _DifferenceTime.hours,
     C = _DifferenceTime.minutes,
     O = _DifferenceTime.seconds,
     b = _DifferenceTime.milliseconds,
     E = _DifferenceTime.microseconds,
     M = _DifferenceTime.nanoseconds,
     R = DurationSign(0, 0, 0, 0, v, C, O, b, E, M);
    CompareISODate(d, m, c, w, D, G) === - R
    &&
     (_BalanceISODate2 = BalanceISODate(w, D, G - R),
      w = _BalanceISODate2.year,
      D = _BalanceISODate2.month,
      G = _BalanceISODate2.day,
      _BalanceDuration = BalanceDuration(- R, v, C, O, b, E, M, S),
      v = _BalanceDuration.hours,
      C = _BalanceDuration.minutes,
      O = _BalanceDuration.seconds,
      b = _BalanceDuration.milliseconds,
      E = _BalanceDuration.microseconds,
      M = _BalanceDuration.nanoseconds);
    var
     F = CreateTemporalDate(w, D, G, I),
     Y = CreateTemporalDate(d, m, c, I),
     P = LargerOfTwoTemporalUnits("day", S),
     Z = CopyOptions(g);
    Z.largestUnit = P;
    var
     _CalendarDateUntil = CalendarDateUntil(I, F, Y, Z),
     B = _CalendarDateUntil.years,
     N = _CalendarDateUntil.months,
     j = _CalendarDateUntil.weeks,
     $ = _CalendarDateUntil.days;
    return _BalanceDuration2 = BalanceDuration($, v, C, O, b, E, M, S),
           $ = _BalanceDuration2.days,
           v = _BalanceDuration2.hours,
           C = _BalanceDuration2.minutes,
           O = _BalanceDuration2.seconds,
           b = _BalanceDuration2.milliseconds,
           E = _BalanceDuration2.microseconds,
           M = _BalanceDuration2.nanoseconds,
           {years: B,
            months: N,
            weeks: j,
            days: $,
            hours: v,
            minutes: C,
            seconds: O,
            milliseconds: b,
            microseconds: E,
            nanoseconds: M};
   }
   function DifferenceZonedDateTime(t, r, o, n, a, p){
    var f = r - t;
    if(f === Ie)
     return {years: 0,
             months: 0,
             weeks: 0,
             days: 0,
             hours: 0,
             minutes: 0,
             seconds: 0,
             milliseconds: 0,
             microseconds: 0,
             nanoseconds: 0};
    var
     y = GetIntrinsic("%Temporal.Instant%"),
     I = new y(t),
     S = new y(r),
     g = GetPlainDateTimeFor(o, I, n),
     w = GetPlainDateTimeFor(o, S, n),
     _DifferenceISODateTim2 =
       DifferenceISODateTime
        (GetSlot(g, i),
         GetSlot(g, s),
         GetSlot(g, l),
         GetSlot(g, d),
         GetSlot(g, m),
         GetSlot(g, c),
         GetSlot(g, h),
         GetSlot(g, u),
         GetSlot(g, T),
         GetSlot(w, i),
         GetSlot(w, s),
         GetSlot(w, l),
         GetSlot(w, d),
         GetSlot(w, m),
         GetSlot(w, c),
         GetSlot(w, h),
         GetSlot(w, u),
         GetSlot(w, T),
         n,
         a,
         p),
     D = _DifferenceISODateTim2.years,
     G = _DifferenceISODateTim2.months,
     v = _DifferenceISODateTim2.weeks,
     C = _DifferenceISODateTim2.days,
     O = AddZonedDateTime(I, o, n, D, G, v, 0, 0, 0, 0, 0, 0, 0),
     b = r - O,
     E = CreateTemporalZonedDateTime(O, o, n),
     _NanosecondsToDays2 = NanosecondsToDays(b, E);
    b = _NanosecondsToDays2.nanoseconds;
    C = _NanosecondsToDays2.days;
    var
     _BalanceDuration3 = BalanceDuration(0, 0, 0, 0, 0, 0, Number(b), "hour"),
     M = _BalanceDuration3.hours,
     R = _BalanceDuration3.minutes,
     F = _BalanceDuration3.seconds,
     Y = _BalanceDuration3.milliseconds,
     P = _BalanceDuration3.microseconds,
     Z = _BalanceDuration3.nanoseconds;
    return {years: D,
            months: G,
            weeks: v,
            days: C,
            hours: M,
            minutes: R,
            seconds: F,
            milliseconds: Y,
            microseconds: P,
            nanoseconds: Z};
   }
   function GetDifferenceSettings(e, t, r, o, n, a){
    var
     i =
       Ue.reduce
        (function(e, t){
          var n = t[0], a = t[1], i = t[2];
          return "datetime" !== r && i !== r || o.includes(a) || e.push(a, n),
                 e;
         },
         []),
     s = GetTemporalUnit(t, "largestUnit", r, "auto");
    if(o.includes(s))
     throw new
            RangeError
            ("largestUnit must be one of ".concat(i.join(", "), ", not ").concat
              (s));
    var
     l = ToTemporalRoundingIncrement(t),
     d = ToTemporalRoundingMode(t, "trunc");
    "since" === e
    &&
     (d =
      function(e){
        switch(e){
          case "ceil":
           return "floor";
          case "floor":
           return "ceil";
          case "halfCeil":
           return "halfFloor";
          case "halfFloor":
           return "halfCeil";
          default: return e;
        }
       }
       (d));
    var m = GetTemporalUnit(t, "smallestUnit", r, n);
    if(o.includes(m))
     throw new
            RangeError
            ("smallestUnit must be one of ".concat(i.join(", "), ", not ").concat
              (m));
    var c = LargerOfTwoTemporalUnits(a, m);
    if("auto" === s && (s = c), LargerOfTwoTemporalUnits(s, m) !== s)
     throw new
            RangeError
            ("largestUnit ".concat(s, " cannot be smaller than smallestUnit ").concat
              (m));
    var
     h =
       {hour: 24,
         minute: 60,
         second: 60,
         millisecond: 1e3,
         microsecond: 1e3,
         nanosecond: 1e3}
        [m];
    return void 0 !== h && ValidateTemporalRoundingIncrement(l, h, ! 1),
           {largestUnit: s,
            roundingIncrement: l,
            roundingMode: d,
            smallestUnit: m};
   }
   function DifferenceTemporalInstant(e, t, r, o){
    var
     a = "since" === e ? - 1 : 1,
     i = ToTemporalInstant(r),
     s =
       GetDifferenceSettings
        (e, CopyOptions(o), "time", [], "nanosecond", "second"),
     l = GetSlot(t, n),
     d = GetSlot(i, n),
     _DifferenceInstant =
       DifferenceInstant
        (l,
         d,
         s.roundingIncrement,
         s.smallestUnit,
         s.largestUnit,
         s.roundingMode),
     m = _DifferenceInstant.hours,
     c = _DifferenceInstant.minutes,
     h = _DifferenceInstant.seconds,
     u = _DifferenceInstant.milliseconds,
     T = _DifferenceInstant.microseconds,
     p = _DifferenceInstant.nanoseconds;
    return new
            (GetIntrinsic("%Temporal.Duration%"))
            (0, 0, 0, 0, a * m, a * c, a * h, a * u, a * T, a * p);
   }
   function DifferenceTemporalPlainDate(e, t, r, o){
    var
     _RoundDuration3,
     n = "since" === e ? - 1 : 1,
     a = ToTemporalDate(r),
     i = GetSlot(t, p);
    ThrowIfCalendarsNotEqual
     (i, GetSlot(a, p), "compute difference between dates");
    var
     s = CopyOptions(o),
     l = GetDifferenceSettings(e, s, "date", [], "day", "day");
    s.largestUnit = l.largestUnit;
    var
     _CalendarDateUntil2 = CalendarDateUntil(i, t, a, s),
     d = _CalendarDateUntil2.years,
     m = _CalendarDateUntil2.months,
     c = _CalendarDateUntil2.weeks,
     h = _CalendarDateUntil2.days;
    "day" === l.smallestUnit && 1 === l.roundingIncrement
    ||
     (_RoundDuration3 =
       RoundDuration
        (d,
         m,
         c,
         h,
         0,
         0,
         0,
         0,
         0,
         0,
         l.roundingIncrement,
         l.smallestUnit,
         l.roundingMode,
         t),
      d = _RoundDuration3.years,
      m = _RoundDuration3.months,
      c = _RoundDuration3.weeks,
      h = _RoundDuration3.days,
      _RoundDuration3);
    return new
            (GetIntrinsic("%Temporal.Duration%"))
            (n * d, n * m, n * c, n * h, 0, 0, 0, 0, 0, 0);
   }
   function DifferenceTemporalPlainDateTime(e, t, r, o){
    var
     _RoundDuration4,
     _BalanceDuration4,
     n = "since" === e ? - 1 : 1,
     a = ToTemporalDateTime(r),
     f = GetSlot(t, p);
    ThrowIfCalendarsNotEqual
     (f, GetSlot(a, p), "compute difference between dates");
    var
     y = CopyOptions(o),
     I = GetDifferenceSettings(e, y, "datetime", [], "nanosecond", "day"),
     _DifferenceISODateTim3 =
       DifferenceISODateTime
        (GetSlot(t, i),
         GetSlot(t, s),
         GetSlot(t, l),
         GetSlot(t, d),
         GetSlot(t, m),
         GetSlot(t, c),
         GetSlot(t, h),
         GetSlot(t, u),
         GetSlot(t, T),
         GetSlot(a, i),
         GetSlot(a, s),
         GetSlot(a, l),
         GetSlot(a, d),
         GetSlot(a, m),
         GetSlot(a, c),
         GetSlot(a, h),
         GetSlot(a, u),
         GetSlot(a, T),
         f,
         I.largestUnit,
         y),
     S = _DifferenceISODateTim3.years,
     g = _DifferenceISODateTim3.months,
     w = _DifferenceISODateTim3.weeks,
     D = _DifferenceISODateTim3.days,
     G = _DifferenceISODateTim3.hours,
     v = _DifferenceISODateTim3.minutes,
     C = _DifferenceISODateTim3.seconds,
     O = _DifferenceISODateTim3.milliseconds,
     b = _DifferenceISODateTim3.microseconds,
     E = _DifferenceISODateTim3.nanoseconds,
     M = TemporalDateTimeToDate(t);
    _RoundDuration4 =
     RoundDuration
      (S,
       g,
       w,
       D,
       G,
       v,
       C,
       O,
       b,
       E,
       I.roundingIncrement,
       I.smallestUnit,
       I.roundingMode,
       M),
    S = _RoundDuration4.years,
    g = _RoundDuration4.months,
    w = _RoundDuration4.weeks,
    D = _RoundDuration4.days,
    G = _RoundDuration4.hours,
    v = _RoundDuration4.minutes,
    C = _RoundDuration4.seconds,
    O = _RoundDuration4.milliseconds,
    b = _RoundDuration4.microseconds,
    E = _RoundDuration4.nanoseconds,
    _BalanceDuration4 = BalanceDuration(D, G, v, C, O, b, E, I.largestUnit),
    D = _BalanceDuration4.days,
    G = _BalanceDuration4.hours,
    v = _BalanceDuration4.minutes,
    C = _BalanceDuration4.seconds,
    O = _BalanceDuration4.milliseconds,
    b = _BalanceDuration4.microseconds,
    E = _BalanceDuration4.nanoseconds;
    return new
            (GetIntrinsic("%Temporal.Duration%"))
            (n * S,
             n * g,
             n * w,
             n * D,
             n * G,
             n * v,
             n * C,
             n * O,
             n * b,
             n * E);
   }
   function DifferenceTemporalPlainTime(e, t, r, o){
    var
     _RoundDuration5,
     _BalanceDuration5,
     n = "since" === e ? - 1 : 1,
     a = ToTemporalTime(r),
     i =
       GetDifferenceSettings
        (e, CopyOptions(o), "time", [], "nanosecond", "hour"),
     _DifferenceTime2 =
       DifferenceTime
        (GetSlot(t, d),
         GetSlot(t, m),
         GetSlot(t, c),
         GetSlot(t, h),
         GetSlot(t, u),
         GetSlot(t, T),
         GetSlot(a, d),
         GetSlot(a, m),
         GetSlot(a, c),
         GetSlot(a, h),
         GetSlot(a, u),
         GetSlot(a, T)),
     s = _DifferenceTime2.hours,
     l = _DifferenceTime2.minutes,
     p = _DifferenceTime2.seconds,
     f = _DifferenceTime2.milliseconds,
     y = _DifferenceTime2.microseconds,
     I = _DifferenceTime2.nanoseconds;
    _RoundDuration5 =
     RoundDuration
      (0,
       0,
       0,
       0,
       s,
       l,
       p,
       f,
       y,
       I,
       i.roundingIncrement,
       i.smallestUnit,
       i.roundingMode),
    s = _RoundDuration5.hours,
    l = _RoundDuration5.minutes,
    p = _RoundDuration5.seconds,
    f = _RoundDuration5.milliseconds,
    y = _RoundDuration5.microseconds,
    I = _RoundDuration5.nanoseconds,
    _BalanceDuration5 = BalanceDuration(0, s, l, p, f, y, I, i.largestUnit),
    s = _BalanceDuration5.hours,
    l = _BalanceDuration5.minutes,
    p = _BalanceDuration5.seconds,
    f = _BalanceDuration5.milliseconds,
    y = _BalanceDuration5.microseconds,
    I = _BalanceDuration5.nanoseconds;
    return new
            (GetIntrinsic("%Temporal.Duration%"))
            (0, 0, 0, 0, n * s, n * l, n * p, n * f, n * y, n * I);
   }
   function DifferenceTemporalPlainYearMonth(e, t, r, o){
    var
     _RoundDuration6,
     n = "since" === e ? - 1 : 1,
     a = ToTemporalYearMonth(r),
     i = GetSlot(t, p);
    ThrowIfCalendarsNotEqual
     (i, GetSlot(a, p), "compute difference between months");
    var
     s = CopyOptions(o),
     l = GetDifferenceSettings(e, s, "date", ["week", "day"], "month", "year");
    s.largestUnit = l.largestUnit;
    var
     d = CalendarFields(i, ["monthCode", "year"]),
     m = PrepareTemporalFields(t, d, []);
    m.day = 1;
    var c = CalendarDateFromFields(i, m), h = PrepareTemporalFields(a, d, []);
    h.day = 1;
    var
     u = CalendarDateFromFields(i, h),
     _CalendarDateUntil3 = CalendarDateUntil(i, c, u, s),
     T = _CalendarDateUntil3.years,
     f = _CalendarDateUntil3.months;
    "month" === l.smallestUnit && 1 === l.roundingIncrement
    ||
     (_RoundDuration6 =
       RoundDuration
        (T,
         f,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         l.roundingIncrement,
         l.smallestUnit,
         l.roundingMode,
         c),
      T = _RoundDuration6.years,
      f = _RoundDuration6.months,
      _RoundDuration6);
    return new
            (GetIntrinsic("%Temporal.Duration%"))
            (n * T, n * f, 0, 0, 0, 0, 0, 0, 0, 0);
   }
   function DifferenceTemporalZonedDateTime(e, t, r, o){
    var
     _DifferenceInstant2,
     a = "since" === e ? - 1 : 1,
     i = ToTemporalZonedDateTime(r),
     s = GetSlot(t, p);
    ThrowIfCalendarsNotEqual
     (s, GetSlot(i, p), "compute difference between dates");
    var
     l = CopyOptions(o),
     d = GetDifferenceSettings(e, l, "datetime", [], "nanosecond", "hour");
    l.largestUnit = d.largestUnit;
    var m = GetSlot(t, n), c = GetSlot(i, n), h, u, T, f, y, I, S, w, D, G;
    if
     ("year" !== d.largestUnit && "month" !== d.largestUnit
      && "week" !== d.largestUnit
      && "day" !== d.largestUnit)
     h = 0,
     u = 0,
     T = 0,
     f = 0,
     _DifferenceInstant2 =
      DifferenceInstant
       (m,
        c,
        d.roundingIncrement,
        d.smallestUnit,
        d.largestUnit,
        d.roundingMode),
     y = _DifferenceInstant2.hours,
     I = _DifferenceInstant2.minutes,
     S = _DifferenceInstant2.seconds,
     w = _DifferenceInstant2.milliseconds,
     D = _DifferenceInstant2.microseconds,
     G = _DifferenceInstant2.nanoseconds;
    else{
     var
      _DifferenceZonedDateT,
      _RoundDuration7,
      _AdjustRoundedDuratio,
      _e28 = GetSlot(t, g);
     if(! TimeZoneEquals(_e28, GetSlot(i, g)))
      throw new
             RangeError
             ("When calculating difference between time zones, largestUnit must be 'hours' or smaller because day lengths can vary between time zones due to DST or time zone offset changes.");
     _DifferenceZonedDateT =
      DifferenceZonedDateTime(m, c, _e28, s, d.largestUnit, l),
     h = _DifferenceZonedDateT.years,
     u = _DifferenceZonedDateT.months,
     T = _DifferenceZonedDateT.weeks,
     f = _DifferenceZonedDateT.days,
     y = _DifferenceZonedDateT.hours,
     I = _DifferenceZonedDateT.minutes,
     S = _DifferenceZonedDateT.seconds,
     w = _DifferenceZonedDateT.milliseconds,
     D = _DifferenceZonedDateT.microseconds,
     G = _DifferenceZonedDateT.nanoseconds,
     _RoundDuration7 =
      RoundDuration
       (h,
        u,
        T,
        f,
        y,
        I,
        S,
        w,
        D,
        G,
        d.roundingIncrement,
        d.smallestUnit,
        d.roundingMode,
        t),
     h = _RoundDuration7.years,
     u = _RoundDuration7.months,
     T = _RoundDuration7.weeks,
     f = _RoundDuration7.days,
     y = _RoundDuration7.hours,
     I = _RoundDuration7.minutes,
     S = _RoundDuration7.seconds,
     w = _RoundDuration7.milliseconds,
     D = _RoundDuration7.microseconds,
     G = _RoundDuration7.nanoseconds,
     _AdjustRoundedDuratio =
      AdjustRoundedDurationDays
       (h,
        u,
        T,
        f,
        y,
        I,
        S,
        w,
        D,
        G,
        d.roundingIncrement,
        d.smallestUnit,
        d.roundingMode,
        t),
     h = _AdjustRoundedDuratio.years,
     u = _AdjustRoundedDuratio.months,
     T = _AdjustRoundedDuratio.weeks,
     f = _AdjustRoundedDuratio.days,
     y = _AdjustRoundedDuratio.hours,
     I = _AdjustRoundedDuratio.minutes,
     S = _AdjustRoundedDuratio.seconds,
     w = _AdjustRoundedDuratio.milliseconds,
     D = _AdjustRoundedDuratio.microseconds,
     G = _AdjustRoundedDuratio.nanoseconds;
    }
    return new
            (GetIntrinsic("%Temporal.Duration%"))
            (a * h,
             a * u,
             a * T,
             a * f,
             a * y,
             a * I,
             a * S,
             a * w,
             a * D,
             a * G);
   }
   function AddISODate(e, t, r, o, n, a, i, s){
    var
     _BalanceISOYearMonth4,
     _RegulateISODate,
     _BalanceISODate3,
     l = e,
     d = t,
     m = r,
     c = a,
     h = i;
    return l += o,
           d += n,
           _BalanceISOYearMonth4 = BalanceISOYearMonth(l, d),
           l = _BalanceISOYearMonth4.year,
           d = _BalanceISOYearMonth4.month,
           _RegulateISODate = RegulateISODate(l, d, m, s),
           l = _RegulateISODate.year,
           d = _RegulateISODate.month,
           m = _RegulateISODate.day,
           h += 7 * c,
           m += h,
           _BalanceISODate3 = BalanceISODate(l, d, m),
           l = _BalanceISODate3.year,
           d = _BalanceISODate3.month,
           m = _BalanceISODate3.day,
           {year: l, month: d, day: m};
   }
   function AddTime(e, t, r, o, n, a, i, s, l, d, m, c){
    var _BalanceTime3, h = e, u = t, T = r, p = o, f = n, y = a;
    h += i, u += s, T += l, p += d, f += m, y += c;
    var I = 0;
    return _BalanceTime3 = BalanceTime(h, u, T, p, f, y),
           I = _BalanceTime3.deltaDays,
           h = _BalanceTime3.hour,
           u = _BalanceTime3.minute,
           T = _BalanceTime3.second,
           p = _BalanceTime3.millisecond,
           f = _BalanceTime3.microsecond,
           y = _BalanceTime3.nanosecond,
           {deltaDays: I,
            hour: h,
            minute: u,
            second: T,
            millisecond: p,
            microsecond: f,
            nanosecond: y};
   }
   function AddDuration
   (t, r, o, a, i, s, l, d, m, c, h, u, T, f, y, I, w, D, G, v, C){
    var
     O =
       LargerOfTwoTemporalUnits
        (DefaultTemporalLargestUnit(t, r, o, a, i, s, l, d, m, c),
         DefaultTemporalLargestUnit(h, u, T, f, y, I, w, D, G, v)),
     b,
     E,
     M,
     R,
     F,
     Y,
     P,
     Z,
     B,
     N;
    if(C)
     if(IsTemporalDate(C)){
      var
       _CalendarDateUntil4,
       _BalanceDuration6,
       _n10 = GetIntrinsic("%Temporal.Duration%"),
       _S2 = GetSlot(C, p),
       _g = new _n10(t, r, o, a, 0, 0, 0, 0, 0, 0),
       _j = new _n10(h, u, T, f, 0, 0, 0, 0, 0, 0),
       _$ = "string" != typeof _S2 ? GetMethod(_S2, "dateAdd") : void 0,
       _k = CalendarDateAdd(_S2, C, _g, void 0, _$),
       _U = CalendarDateAdd(_S2, _k, _j, void 0, _$),
       _A = LargerOfTwoTemporalUnits("day", O),
       _L = Te(null);
      _L.largestUnit = _A,
      _CalendarDateUntil4 = CalendarDateUntil(_S2, C, _U, _L),
      b = _CalendarDateUntil4.years,
      E = _CalendarDateUntil4.months,
      M = _CalendarDateUntil4.weeks,
      R = _CalendarDateUntil4.days,
      _BalanceDuration6 =
       BalanceDuration
        (R,
         BigInt(i) + BigInt(y),
         BigInt(s) + BigInt(I),
         BigInt(l) + BigInt(w),
         BigInt(d) + BigInt(D),
         BigInt(m) + BigInt(G),
         BigInt(c) + BigInt(v),
         O),
      R = _BalanceDuration6.days,
      F = _BalanceDuration6.hours,
      Y = _BalanceDuration6.minutes,
      P = _BalanceDuration6.seconds,
      Z = _BalanceDuration6.milliseconds,
      B = _BalanceDuration6.microseconds,
      N = _BalanceDuration6.nanoseconds;
     }
     else{
      var
       _DifferenceInstant3,
       _DifferenceZonedDateT2,
       _e29 = GetIntrinsic("%Temporal.Instant%"),
       _j2 = GetSlot(C, g),
       _$2 = GetSlot(C, p),
       _k2 =
         AddZonedDateTime
          (GetSlot(C, S), _j2, _$2, t, r, o, a, i, s, l, d, m, c),
       _U2 =
         AddZonedDateTime
          (new _e29(_k2), _j2, _$2, h, u, T, f, y, I, w, D, G, v);
      "year" !== O && "month" !== O && "week" !== O && "day" !== O
       ? (b
         = 0,
         E = 0,
         M = 0,
         R = 0,
         _DifferenceInstant3 =
          DifferenceInstant
           (GetSlot(C, n), _U2, 1, "nanosecond", O, "halfExpand"),
         F = _DifferenceInstant3.hours,
         Y = _DifferenceInstant3.minutes,
         P = _DifferenceInstant3.seconds,
         Z = _DifferenceInstant3.milliseconds,
         B = _DifferenceInstant3.microseconds,
         N = _DifferenceInstant3.nanoseconds)
       : (_DifferenceZonedDateT2
         = DifferenceZonedDateTime(GetSlot(C, n), _U2, _j2, _$2, O, Te(null)),
         b = _DifferenceZonedDateT2.years,
         E = _DifferenceZonedDateT2.months,
         M = _DifferenceZonedDateT2.weeks,
         R = _DifferenceZonedDateT2.days,
         F = _DifferenceZonedDateT2.hours,
         Y = _DifferenceZonedDateT2.minutes,
         P = _DifferenceZonedDateT2.seconds,
         Z = _DifferenceZonedDateT2.milliseconds,
         B = _DifferenceZonedDateT2.microseconds,
         N = _DifferenceZonedDateT2.nanoseconds,
         _DifferenceZonedDateT2);
     }
    else{
     var _BalanceDuration7;
     if("year" === O || "month" === O || "week" === O)
      throw new
             RangeError
             ("relativeTo is required for years, months, or weeks arithmetic");
     b = E = M = 0,
     _BalanceDuration7 =
      BalanceDuration
       (a + f,
        BigInt(i) + BigInt(y),
        BigInt(s) + BigInt(I),
        BigInt(l) + BigInt(w),
        BigInt(d) + BigInt(D),
        BigInt(m) + BigInt(G),
        BigInt(c) + BigInt(v),
        O),
     R = _BalanceDuration7.days,
     F = _BalanceDuration7.hours,
     Y = _BalanceDuration7.minutes,
     P = _BalanceDuration7.seconds,
     Z = _BalanceDuration7.milliseconds,
     B = _BalanceDuration7.microseconds,
     N = _BalanceDuration7.nanoseconds;
    }
    return RejectDuration(b, E, M, R, F, Y, P, Z, B, N),
           {years: b,
            months: E,
            weeks: M,
            days: R,
            hours: F,
            minutes: Y,
            seconds: P,
            milliseconds: Z,
            microseconds: B,
            nanoseconds: N};
   }
   function AddInstant(t, r, o, n, a, i, s){
    var l = Ie;
    l = l + BigInt(s),
    l = l + BigInt(i) * De,
    l = l + BigInt(a) * Ge,
    l = l + BigInt(n) * ve,
    l = l + BigInt(o) * 60000000000n,
    l = l + BigInt(r) * 3600000000000n;
    var d = t + l;
    return ValidateEpochNanoseconds(d), d;
   }
   function AddDateTime
   (e, t, r, o, n, a, d, m, c, h, u, T, p, f, y, I, S, g, w, D, G){
    var
     v = f,
     _AddTime = AddTime(o, n, a, d, m, c, y, I, S, g, w, D),
     C = _AddTime.deltaDays,
     O = _AddTime.hour,
     b = _AddTime.minute,
     E = _AddTime.second,
     M = _AddTime.millisecond,
     R = _AddTime.microsecond,
     F = _AddTime.nanosecond;
    v += C;
    var
     Y = GetIntrinsic("%Temporal.Duration%"),
     P =
       CalendarDateAdd
        (h,
         CreateTemporalDate(e, t, r, h),
         new Y(u, T, p, v, 0, 0, 0, 0, 0, 0),
         G);
    return {year: GetSlot(P, i),
            month: GetSlot(P, s),
            day: GetSlot(P, l),
            hour: O,
            minute: b,
            second: E,
            millisecond: M,
            microsecond: R,
            nanosecond: F};
   }
   function AddZonedDateTime(e, t, r, o, a, p, f, y, I, S, g, w, D, G){
    var v = GetIntrinsic("%Temporal.Duration%");
    if(0 === DurationSign(o, a, p, f, 0, 0, 0, 0, 0, 0))
     return AddInstant(GetSlot(e, n), y, I, S, g, w, D);
    var
     C = GetPlainDateTimeFor(t, e, r),
     O =
       CalendarDateAdd
        (r,
         CreateTemporalDate(GetSlot(C, i), GetSlot(C, s), GetSlot(C, l), r),
         new v(o, a, p, f, 0, 0, 0, 0, 0, 0),
         G),
     b =
       CreateTemporalDateTime
        (GetSlot(O, i),
         GetSlot(O, s),
         GetSlot(O, l),
         GetSlot(C, d),
         GetSlot(C, m),
         GetSlot(C, c),
         GetSlot(C, h),
         GetSlot(C, u),
         GetSlot(C, T),
         r);
    return AddInstant
            (GetSlot(GetInstantFor(t, b, "compatible"), n), y, I, S, g, w, D);
   }
   function AddDurationToOrSubtractDurationFromDuration(e, t, r, o){
    var
     n = "subtract" === e ? - 1 : 1,
     _ToTemporalDurationRe2 = ToTemporalDurationRecord(r),
     a = _ToTemporalDurationRe2.years,
     i = _ToTemporalDurationRe2.months,
     s = _ToTemporalDurationRe2.weeks,
     l = _ToTemporalDurationRe2.days,
     d = _ToTemporalDurationRe2.hours,
     m = _ToTemporalDurationRe2.minutes,
     c = _ToTemporalDurationRe2.seconds,
     h = _ToTemporalDurationRe2.milliseconds,
     u = _ToTemporalDurationRe2.microseconds,
     T = _ToTemporalDurationRe2.nanoseconds,
     p = ToRelativeTemporalObject(GetOptionsObject(o)),
     _AddDuration =
       AddDuration
        (GetSlot(t, w),
         GetSlot(t, D),
         GetSlot(t, G),
         GetSlot(t, v),
         GetSlot(t, C),
         GetSlot(t, O),
         GetSlot(t, b),
         GetSlot(t, E),
         GetSlot(t, M),
         GetSlot(t, R),
         n * a,
         n * i,
         n * s,
         n * l,
         n * d,
         n * m,
         n * c,
         n * h,
         n * u,
         n * T,
         p);
    a = _AddDuration.years;
    i = _AddDuration.months;
    s = _AddDuration.weeks;
    l = _AddDuration.days;
    d = _AddDuration.hours;
    m = _AddDuration.minutes;
    c = _AddDuration.seconds;
    h = _AddDuration.milliseconds;
    u = _AddDuration.microseconds;
    T = _AddDuration.nanoseconds;
    return new
            (GetIntrinsic("%Temporal.Duration%"))
            (a, i, s, l, d, m, c, h, u, T);
   }
   function AddDurationToOrSubtractDurationFromInstant(e, t, r){
    var
     o = "subtract" === e ? - 1 : 1,
     _ToLimitedTemporalDur =
       function(e, t){
         var
          r = ToTemporalDurationRecord(e),
          _iterator14 = _createForOfIteratorHelper(t),
          _step14;
         try{
          for(_iterator14.s(); ! (_step14 = _iterator14.n()).done;){
           var _e30 = _step14.value;
           if(0 !== r[_e30])
            throw new
                   RangeError
                   ("Duration field ".concat
                     (_e30,
                      " not supported by Temporal.Instant. Try Temporal.ZonedDateTime instead."));
          }
         }
         catch(err){_iterator14.e(err);}
         finally{_iterator14.f();}
         return r;
        }
        (r, ["years", "months", "weeks", "days"]),
     a = _ToLimitedTemporalDur.hours,
     i = _ToLimitedTemporalDur.minutes,
     s = _ToLimitedTemporalDur.seconds,
     l = _ToLimitedTemporalDur.milliseconds,
     d = _ToLimitedTemporalDur.microseconds,
     m = _ToLimitedTemporalDur.nanoseconds,
     c = AddInstant(GetSlot(t, n), o * a, o * i, o * s, o * l, o * d, o * m);
    return new (GetIntrinsic("%Temporal.Instant%"))(c);
   }
   function AddDurationToOrSubtractDurationFromPlainDateTime(e, t, r, o){
    var
     n = "subtract" === e ? - 1 : 1,
     _ToTemporalDurationRe3 = ToTemporalDurationRecord(r),
     a = _ToTemporalDurationRe3.years,
     f = _ToTemporalDurationRe3.months,
     y = _ToTemporalDurationRe3.weeks,
     I = _ToTemporalDurationRe3.days,
     S = _ToTemporalDurationRe3.hours,
     g = _ToTemporalDurationRe3.minutes,
     w = _ToTemporalDurationRe3.seconds,
     D = _ToTemporalDurationRe3.milliseconds,
     G = _ToTemporalDurationRe3.microseconds,
     v = _ToTemporalDurationRe3.nanoseconds,
     C = GetOptionsObject(o),
     O = GetSlot(t, p),
     _AddDateTime =
       AddDateTime
        (GetSlot(t, i),
         GetSlot(t, s),
         GetSlot(t, l),
         GetSlot(t, d),
         GetSlot(t, m),
         GetSlot(t, c),
         GetSlot(t, h),
         GetSlot(t, u),
         GetSlot(t, T),
         O,
         n * a,
         n * f,
         n * y,
         n * I,
         n * S,
         n * g,
         n * w,
         n * D,
         n * G,
         n * v,
         C),
     b = _AddDateTime.year,
     E = _AddDateTime.month,
     M = _AddDateTime.day,
     R = _AddDateTime.hour,
     F = _AddDateTime.minute,
     Y = _AddDateTime.second,
     P = _AddDateTime.millisecond,
     Z = _AddDateTime.microsecond,
     B = _AddDateTime.nanosecond;
    return CreateTemporalDateTime(b, E, M, R, F, Y, P, Z, B, O);
   }
   function AddDurationToOrSubtractDurationFromPlainTime(e, t, r){
    var
     o = "subtract" === e ? - 1 : 1,
     _ToTemporalDurationRe4 = ToTemporalDurationRecord(r),
     n = _ToTemporalDurationRe4.hours,
     a = _ToTemporalDurationRe4.minutes,
     i = _ToTemporalDurationRe4.seconds,
     s = _ToTemporalDurationRe4.milliseconds,
     l = _ToTemporalDurationRe4.microseconds,
     p = _ToTemporalDurationRe4.nanoseconds,
     _AddTime2 =
       AddTime
        (GetSlot(t, d),
         GetSlot(t, m),
         GetSlot(t, c),
         GetSlot(t, h),
         GetSlot(t, u),
         GetSlot(t, T),
         o * n,
         o * a,
         o * i,
         o * s,
         o * l,
         o * p),
     f = _AddTime2.hour,
     y = _AddTime2.minute,
     I = _AddTime2.second,
     S = _AddTime2.millisecond,
     g = _AddTime2.microsecond,
     w = _AddTime2.nanosecond,
     _RegulateTime3 = RegulateTime(f, y, I, S, g, w, "reject");
    f = _RegulateTime3.hour;
    y = _RegulateTime3.minute;
    I = _RegulateTime3.second;
    S = _RegulateTime3.millisecond;
    g = _RegulateTime3.microsecond;
    w = _RegulateTime3.nanosecond;
    return new (GetIntrinsic("%Temporal.PlainTime%"))(f, y, I, S, g, w);
   }
   function AddDurationToOrSubtractDurationFromPlainYearMonth(e, t, r, o){
    var n = ToTemporalDurationRecord(r);
    "subtract" === e
    &&
     (n =
      {years: - n.years,
       months: - n.months,
       weeks: - n.weeks,
       days: - n.days,
       hours: - n.hours,
       minutes: - n.minutes,
       seconds: - n.seconds,
       milliseconds: - n.milliseconds,
       microseconds: - n.microseconds,
       nanoseconds: - n.nanoseconds});
    var
     _n11 = n,
     a = _n11.years,
     i = _n11.months,
     s = _n11.weeks,
     l = _n11.days,
     d = _n11.hours,
     m = _n11.minutes,
     c = _n11.seconds,
     h = _n11.milliseconds,
     u = _n11.microseconds,
     T = _n11.nanoseconds,
     _BalanceDuration8 = BalanceDuration(l, d, m, c, h, u, T, "day");
    l = _BalanceDuration8.days;
    var
     f = GetOptionsObject(o),
     y = GetSlot(t, p),
     I = CalendarFields(y, ["monthCode", "year"]),
     S = PrepareTemporalFields(t, I, []),
     g = Te(null);
    CopyDataProperties(g, S, []), S.day = 1;
    var
     w = CalendarDateFromFields(y, S),
     D = DurationSign(a, i, s, l, 0, 0, 0, 0, 0, 0),
     G = GetMethod(y, "dateAdd"),
     v = GetIntrinsic("%Temporal.Duration%");
    if(D < 0){
     var
      _e31 =
        CalendarDateAdd(y, w, new v(0, 1, 0, 0, 0, 0, 0, 0, 0, 0), void 0, G),
      _t30 =
        CalendarDateAdd
         (y, _e31, new v(0, 0, 0, - 1, 0, 0, 0, 0, 0, 0), void 0, G);
     g.day = CalendarDay(y, _t30), w = CalendarDateFromFields(y, g);
    }
    var C = new v(a, i, s, l, 0, 0, 0, 0, 0, 0), O = CopyOptions(f);
    return CalendarYearMonthFromFields
            (y,
             PrepareTemporalFields(CalendarDateAdd(y, w, C, f, G), I, []),
             O);
   }
   function AddDurationToOrSubtractDurationFromZonedDateTime(e, t, r, o){
    var
     n = "subtract" === e ? - 1 : 1,
     _ToTemporalDurationRe5 = ToTemporalDurationRecord(r),
     a = _ToTemporalDurationRe5.years,
     i = _ToTemporalDurationRe5.months,
     s = _ToTemporalDurationRe5.weeks,
     l = _ToTemporalDurationRe5.days,
     d = _ToTemporalDurationRe5.hours,
     m = _ToTemporalDurationRe5.minutes,
     c = _ToTemporalDurationRe5.seconds,
     h = _ToTemporalDurationRe5.milliseconds,
     u = _ToTemporalDurationRe5.microseconds,
     T = _ToTemporalDurationRe5.nanoseconds,
     f = GetOptionsObject(o),
     y = GetSlot(t, g),
     I = GetSlot(t, p);
    return CreateTemporalZonedDateTime
            (AddZonedDateTime
              (GetSlot(t, S),
               y,
               I,
               n * a,
               n * i,
               n * s,
               n * l,
               n * d,
               n * m,
               n * c,
               n * h,
               n * u,
               n * T,
               f),
             y,
             I);
   }
   function RoundNumberToIncrement(t, r, o){
    if(r === Se) return t;
    var
     _divmod21 = divmod(t, r),
     n = _divmod21.quotient,
     a = _divmod21.remainder;
    if(a === Ie) return t;
    var i = a < Ie ? - 1 : 1, s = abs(a * 2n), l = s === r, d = s > r;
    switch(o){
      case "ceil":
       i > 0 && (n = n + BigInt(i)); break;
      case "floor":
       i < 0 && (n = n + BigInt(i)); break;
      case "expand":
       n = n + BigInt(i); break;
      case "trunc": break;
      case "halfCeil":
       (d || l && i > 0) && (n = n + BigInt(i)); break;
      case "halfFloor":
       (d || l && i < 0) && (n = n + BigInt(i)); break;
      case "halfExpand":
       (d || l) && (n = n + BigInt(i)); break;
      case "halfTrunc":
       d && (n = n + BigInt(i)); break;
      case "halfEven":
       (d || l && 1 === Number(abs(n) % 2n)) && (n = n + BigInt(i));
    }
    return n * r;
   }
   function RoundInstant(t, r, o, n){
    var
     _NonNegativeBigIntDiv7 = NonNegativeBigIntDivmod(t, Ee),
     a = _NonNegativeBigIntDiv7.remainder,
     i = t - a,
     s = RoundNumberToIncrement(a, BigInt(_e[o] * r), n);
    return i + s;
   }
   function RoundISODateTime(e, t, r, o, n, a, i, s, l, d, m, c){
    var
     h =
       arguments.length > 12 && arguments[12] !== undefined
        ? arguments[12]
        : 864e11,
     _RoundTime = RoundTime(o, n, a, i, s, l, d, m, c, h),
     u = _RoundTime.deltaDays,
     T = _RoundTime.hour,
     p = _RoundTime.minute,
     f = _RoundTime.second,
     y = _RoundTime.millisecond,
     I = _RoundTime.microsecond,
     S = _RoundTime.nanosecond,
     _BalanceISODate4 = BalanceISODate(e, t, r + u),
     g = _BalanceISODate4.year,
     w = _BalanceISODate4.month,
     D = _BalanceISODate4.day;
    return {year: g,
            month: w,
            day: D,
            hour: T,
            minute: p,
            second: f,
            millisecond: y,
            microsecond: I,
            nanosecond: S};
   }
   function RoundTime(t, r, o, n, a, i, s, l, d){
    var
     m =
       arguments.length > 9 && arguments[9] !== undefined
        ? arguments[9]
        : 864e11,
     c = Ie;
    switch(l){
      case "day":
      case "hour":
       c = BigInt(t);
      case "minute":
       c = c * ge + BigInt(r);
      case "second":
       c = c * ge + BigInt(o);
      case "millisecond":
       c = c * De + BigInt(n);
      case "microsecond":
       c = c * De + BigInt(a);
      case "nanosecond":
       c = c * De + BigInt(i);
    }
    var
     h = "day" === l ? m : _e[l],
     u = RoundNumberToIncrement(c, BigInt(h * s), d),
     T = Number(u / BigInt(h));
    switch(l){
      case "day":
       return {deltaDays: T,
               hour: 0,
               minute: 0,
               second: 0,
               millisecond: 0,
               microsecond: 0,
               nanosecond: 0};
      case "hour":
       return BalanceTime(T, 0, 0, 0, 0, 0);
      case "minute":
       return BalanceTime(t, T, 0, 0, 0, 0);
      case "second":
       return BalanceTime(t, r, T, 0, 0, 0);
      case "millisecond":
       return BalanceTime(t, r, o, T, 0, 0);
      case "microsecond":
       return BalanceTime(t, r, o, n, T, 0);
      case "nanosecond":
       return BalanceTime(t, r, o, n, a, T);
      default: throw new Error("Invalid unit ".concat(l));
    }
   }
   function DaysUntil(e, t){
    return DifferenceISODate
            (GetSlot(e, i),
             GetSlot(e, s),
             GetSlot(e, l),
             GetSlot(t, i),
             GetSlot(t, s),
             GetSlot(t, l),
             "day").days;
   }
   function MoveRelativeDate(e, t, r, o){
    var n = CalendarDateAdd(e, t, r, void 0, o);
    return {relativeTo: n, days: DaysUntil(t, n)};
   }
   function MoveRelativeZonedDateTime(e, t, r, o, n){
    var a = GetSlot(e, g), i = GetSlot(e, p);
    return CreateTemporalZonedDateTime
            (AddZonedDateTime
              (GetSlot(e, S), a, i, t, r, o, n, 0, 0, 0, 0, 0, 0),
             a,
             i);
   }
   function AdjustRoundedDurationDays
   (t, r, o, n, a, i, s, l, d, m, c, h, u, T){
    var
     _AddDuration2,
     _BalanceDuration9,
     f = t,
     y = r,
     I = o,
     w = n,
     D = a,
     G = i,
     v = s,
     C = l,
     O = d,
     b = m;
    if
     (! IsTemporalZonedDateTime(T) || "year" === h || "month" === h
      || "week" === h
      || "day" === h
      || "nanosecond" === h && 1 === c)
     return {years: f,
             months: y,
             weeks: I,
             days: w,
             hours: D,
             minutes: G,
             seconds: v,
             milliseconds: C,
             microseconds: O,
             nanoseconds: b};
    var
     E = TotalDurationNanoseconds(0, D, G, v, C, O, b, 0),
     M = se(Number(E)),
     R = GetSlot(T, g),
     F = GetSlot(T, p),
     Y = AddZonedDateTime(GetSlot(T, S), R, F, f, y, I, w, 0, 0, 0, 0, 0, 0),
     P =
       AddZonedDateTime
        (new (GetIntrinsic("%Temporal.Instant%"))(Y),
         R,
         F,
         0,
         0,
         0,
         M,
         0,
         0,
         0,
         0,
         0,
         0),
     Z = P - Y;
    return (E - Z) * BigInt(M) >= Ie
           &&
            (_AddDuration2 =
              AddDuration
               (f, y, I, w, 0, 0, 0, 0, 0, 0, 0, 0, 0, M, 0, 0, 0, 0, 0, 0, T),
             f = _AddDuration2.years,
             y = _AddDuration2.months,
             I = _AddDuration2.weeks,
             w = _AddDuration2.days,
             E = RoundInstant(E - Z, c, h, u),
             _BalanceDuration9 =
              BalanceDuration(0, 0, 0, 0, 0, 0, Number(E), "hour"),
             D = _BalanceDuration9.hours,
             G = _BalanceDuration9.minutes,
             v = _BalanceDuration9.seconds,
             C = _BalanceDuration9.milliseconds,
             O = _BalanceDuration9.microseconds,
             b = _BalanceDuration9.nanoseconds),
           {years: f,
            months: y,
            weeks: I,
            days: w,
            hours: D,
            minutes: G,
            seconds: v,
            milliseconds: C,
            microseconds: O,
            nanoseconds: b};
   }
   function RoundDuration(t, r, o, n, a, i, s, l, d, m, c, h, u, T){
    var
     f = t,
     y = r,
     I = o,
     S = n,
     g = a,
     w = i,
     D = s,
     G = l,
     v = d,
     C = BigInt(m),
     O = GetIntrinsic("%Temporal.Duration%"),
     b,
     E,
     M,
     R,
     F = T;
    if(F){
     if(IsTemporalZonedDateTime(F))
      E = F, F = ToTemporalDate(F);
     else if(! IsTemporalDate(F))
      throw new TypeError("starting point must be PlainDate or ZonedDateTime");
     b = GetSlot(F, p);
    }
    if("year" === h || "month" === h || "week" === h || "day" === h){
     var _NanosecondsToDays3, _t31, _r45, _o15;
     C = TotalDurationNanoseconds(0, g, w, D, G, v, m, 0),
     E && (_t31 = MoveRelativeZonedDateTime(E, f, y, I, S)),
     _NanosecondsToDays3 = NanosecondsToDays(C, _t31),
     _r45 = _NanosecondsToDays3.days,
     C = _NanosecondsToDays3.nanoseconds,
     _o15 = _NanosecondsToDays3.dayLengthNs,
     M = BigInt(_o15),
     S += _r45,
     g = w = D = G = v = 0;
    }
    switch(h){
      case "year":
       {
        if(! b)
         throw new
                RangeError
                ("A starting point is required for years rounding");
        var
         _t32 = new O(f),
         _r46 = "string" != typeof b ? GetMethod(b, "dateAdd") : void 0,
         _o16 = CalendarDateAdd(b, F, _t32, void 0, _r46),
         _n12 = CalendarDateAdd(b, F, new O(f, y, I), void 0, _r46);
        F = _o16, S += DaysUntil(_o16, _n12);
        var
         _a8 = CalendarDateAdd(b, F, new O(0, 0, 0, S), void 0, _r46),
         _i12 = Te(null);
        _i12.largestUnit = "year";
        var _s4 = CalendarDateUntil(b, F, _a8, _i12).years;
        f += _s4;
        var _l5 = F;
        F = CalendarDateAdd(b, F, new O(_s4), void 0, _r46);
        S -= DaysUntil(_l5, F);
        var
         _d5 = new O(S < 0 ? - 1 : 1),
         _MoveRelativeDate6 = MoveRelativeDate(b, F, _d5, _r46),
         _m5 = _MoveRelativeDate6.days;
        _m5 = ae(_m5);
        var _h2 = BigInt(_m5) * M;
        C = _h2 * BigInt(f) + BigInt(S) * M + C;
        var _T2 = RoundNumberToIncrement(C, _h2 * BigInt(c), u);
        R = BigIntDivideToNumber(C, _h2),
        f = Number(_T2 / _h2),
        C = Ie,
        y = I = S = 0;
        break;
       }
      case "month":
       {
        if(! b)
         throw new
                RangeError
                ("A starting point is required for months rounding");
        var
         _t33 = new O(f, y),
         _r47 = "string" != typeof b ? GetMethod(b, "dateAdd") : void 0,
         _o17 = CalendarDateAdd(b, F, _t33, void 0, _r47),
         _n13 = CalendarDateAdd(b, F, new O(f, y, I), void 0, _r47);
        F = _o17, S += DaysUntil(_o17, _n13);
        var _a9 = se(S), _i13 = new O(0, S < 0 ? - 1 : 1), _s5;
        for
        (_MoveRelativeDate7 = MoveRelativeDate(b, F, _i13, _r47),
         F = _MoveRelativeDate7.relativeTo,
         _s5 = _MoveRelativeDate7.days,
         _MoveRelativeDate7;
         ae(S) >= ae(_s5);){
         var _MoveRelativeDate7, _MoveRelativeDate8;
         y += _a9,
         S -= _s5,
         _MoveRelativeDate8 = MoveRelativeDate(b, F, _i13, _r47),
         F = _MoveRelativeDate8.relativeTo,
         _s5 = _MoveRelativeDate8.days;
        }
        _s5 = ae(_s5);
        var _l6 = BigInt(_s5) * M;
        C = _l6 * BigInt(y) + BigInt(S) * M + C;
        var _d6 = RoundNumberToIncrement(C, _l6 * BigInt(c), u);
        R = BigIntDivideToNumber(C, _l6),
        y = Number(_d6 / _l6),
        C = Ie,
        I = S = 0;
        break;
       }
      case "week":
       {
        if(! b)
         throw new
                RangeError
                ("A starting point is required for weeks rounding");
        var
         _t34 = se(S),
         _r48 = new O(0, 0, S < 0 ? - 1 : 1),
         _o18 = "string" != typeof b ? GetMethod(b, "dateAdd") : void 0,
         _n14;
        for
        (_MoveRelativeDate9 = MoveRelativeDate(b, F, _r48, _o18),
         F = _MoveRelativeDate9.relativeTo,
         _n14 = _MoveRelativeDate9.days,
         _MoveRelativeDate9;
         ae(S) >= ae(_n14);){
         var _MoveRelativeDate9, _MoveRelativeDate10;
         I += _t34,
         S -= _n14,
         _MoveRelativeDate10 = MoveRelativeDate(b, F, _r48, _o18),
         F = _MoveRelativeDate10.relativeTo,
         _n14 = _MoveRelativeDate10.days;
        }
        _n14 = ae(_n14);
        var _a10 = BigInt(_n14) * M;
        C = _a10 * BigInt(I) + BigInt(S) * M + C;
        var _i14 = RoundNumberToIncrement(C, _a10 * BigInt(c), u);
        R = BigIntDivideToNumber(C, _a10),
        I = Number(_i14 / _a10),
        C = Ie,
        S = 0;
        break;
       }
      case "day":
       {
        var _t35 = M;
        C = _t35 * BigInt(S) + C;
        var _r49 = RoundNumberToIncrement(C, _t35 * BigInt(c), u);
        R = BigIntDivideToNumber(C, _t35), S = Number(_r49 / _t35), C = Ie;
        break;
       }
      case "hour":
       {
        var _t36 = 36e11, _r50 = BigInt(g) * 3600000000000n;
        _r50 = _r50 + BigInt(w) * 60000000000n,
        _r50 = _r50 + BigInt(D) * ve,
        _r50 = _r50 + BigInt(G) * Ge,
        _r50 = _r50 + BigInt(v) * De,
        _r50 = _r50 + C,
        R = BigIntDivideToNumber(_r50, BigInt(_t36));
        var _o19 = RoundNumberToIncrement(_r50, BigInt(_t36 * c), u);
        g = Number(_o19 / BigInt(_t36)), C = Ie, w = D = G = v = 0;
        break;
       }
      case "minute":
       {
        var _t37 = 6e10, _r51 = BigInt(w) * 60000000000n;
        _r51 = _r51 + BigInt(D) * ve,
        _r51 = _r51 + BigInt(G) * Ge,
        _r51 = _r51 + BigInt(v) * De,
        _r51 = _r51 + C,
        R = BigIntDivideToNumber(_r51, BigInt(_t37));
        var _o20 = RoundNumberToIncrement(_r51, BigInt(_t37 * c), u);
        w = Number(_o20 / BigInt(_t37)), C = Ie, D = G = v = 0;
        break;
       }
      case "second":
       {
        var _t38 = 1e9, _r52 = BigInt(D) * ve;
        _r52 = _r52 + BigInt(G) * Ge,
        _r52 = _r52 + BigInt(v) * De,
        _r52 = _r52 + C,
        R = BigIntDivideToNumber(_r52, BigInt(_t38));
        var _o21 = RoundNumberToIncrement(_r52, BigInt(_t38 * c), u);
        D = Number(_o21 / BigInt(_t38)), C = Ie, G = v = 0;
        break;
       }
      case "millisecond":
       {
        var _t39 = 1e6, _r53 = BigInt(G) * Ge;
        _r53 = _r53 + BigInt(v) * De,
        _r53 = _r53 + C,
        R = BigIntDivideToNumber(_r53, BigInt(_t39));
        var _o22 = RoundNumberToIncrement(_r53, BigInt(_t39 * c), u);
        G = Number(_o22 / BigInt(_t39)), C = Ie, v = 0;
        break;
       }
      case "microsecond":
       {
        var _t40 = 1e3, _r54 = BigInt(v) * De;
        _r54 = _r54 + C, R = BigIntDivideToNumber(_r54, BigInt(_t40));
        var _o23 = RoundNumberToIncrement(_r54, BigInt(_t40 * c), u);
        v = Number(_o23 / BigInt(_t40)), C = Ie;
        break;
       }
      case "nanosecond":
       R = Number(C), C = RoundNumberToIncrement(BigInt(C), BigInt(c), u);
    }
    return {years: f,
            months: y,
            weeks: I,
            days: S,
            hours: g,
            minutes: w,
            seconds: D,
            milliseconds: G,
            microseconds: v,
            nanoseconds: Number(C),
            total: R};
   }
   function CompareISODate(e, t, r, o, n, a){
    for
    (var _i15 = 0, _arr5 = [[e, o], [t, n], [r, a]];
     _i15 < _arr5.length;
     _i15++){
     var
      _arr5$_i = _slicedToArray(_arr5[_i15], 2),
      _i16 = _arr5$_i[0],
      _s6 = _arr5$_i[1];
     if(_i16 !== _s6) return ComparisonResult(_i16 - _s6);
    }
    return 0;
   }
   function NonNegativeBigIntDivmod(t, r){
    var
     _divmod22 = divmod(t, r),
     o = _divmod22.quotient,
     n = _divmod22.remainder;
    return n < Ie && (o = o - Se, n = n + r), {quotient: o, remainder: n};
   }
   function BigIntFloorDiv(t, r){
    var
     _divmod23 = divmod(t, r),
     o = _divmod23.quotient,
     n = _divmod23.remainder;
    return isZero(n) || ! isNegativeJSBI(t) == ! isNegativeJSBI(r)
            ? o
            : o - Se;
   }
   function BigIntDivideToNumber(t, r){
    var
     _divmod24 = divmod(t, r),
     o = _divmod24.quotient,
     n = _divmod24.remainder;
    return Number(o) + Number(n) / Number(r);
   }
   function ToBigIntExternal(e){
    var t = ToBigInt(e);
    return void 0 !== globalThis.BigInt
            ? globalThis.BigInt(t.toString(10))
            : t;
   }
   function ToBigInt(t){
    var r = t;
    if("object" == _typeof(t)){
     var _e32 = t[Symbol.toPrimitive];
     _e32 && "function" == typeof _e32 && (r = fe(_e32, t, ["number"]));
    }
    if("number" == typeof r)
     throw new TypeError("cannot convert number to bigint");
    return "bigint" == typeof r ? BigInt(r.toString(10)) : BigInt(r);
   }
   var
    Ve =
      function(){
        var t = BigInt(Date.now() % 1e6);
        return function(){
         var r = BigInt(Date.now()), o = r * Ge + t;
         return t = r % Ge, o > Re ? Re : o < Me ? Me : o;};
       }
       ();
   function DefaultTimeZone(){return new re().resolvedOptions().timeZone;}
   function ComparisonResult(e){return e < 0 ? - 1 : e > 0 ? 1 : e;}
   function GetOptionsObject(e){
    if(void 0 === e) return Te(null);
    if(IsObject(e) && null !== e) return e;
    throw new
           TypeError
           ("Options parameter must be an object, not "
            + (null === e ? "null" : "" + _typeof(e)));
   }
   function CreateOnePropObject(e, t){var r = Te(null); return r[e] = t, r;}
   function CopyOptions(e){
    var t = Te(null);
    return CopyDataProperties(t, GetOptionsObject(e), []), t;
   }
   function GetOption(e, t, r, o){
    var n = e[t];
    if(void 0 !== n){
     if(n = ToString(n), ! r.includes(n))
      throw new
             RangeError
             ("".concat(t, " must be one of ").concat(r.join(", "), ", not ").concat
               (n));
     return n;
    }
    return o;
   }
   function IsBuiltinCalendar(e){return je.includes(ASCIILowercase(e));}
   function ASCIILowercase(e){
    return e.replace
            (/[A-Z]/g,
             function(e){
              var t = e.charCodeAt(0);
              return String.fromCharCode(t + 32);
             });
   }
   var ze = new RegExp("^".concat(W.source, "$"));
   function bisect(t, r, o){
    var
     n =
       arguments.length > 3 && arguments[3] !== undefined
        ? arguments[3]
        : t(r),
     a =
       arguments.length > 4 && arguments[4] !== undefined
        ? arguments[4]
        : t(o),
     i = BigInt(r),
     s = BigInt(o),
     l = n,
     d = a;
    for(; s - i > Se;){
     var _r55 = (i + s) / 2n, _o24 = t(_r55);
     if(_o24 === l)
      i = _r55, l = _o24;
     else{
      if(_o24 !== d)
       throw new
              Error
              ("invalid state in bisection ".concat(l, " - ").concat
                 (_o24, " - ").concat
                (d));
      s = _r55, d = _o24;
     }
    }
    return s;
   }
   var
    _e =
      {hour: 36e11,
       minute: 6e10,
       second: 1e9,
       millisecond: 1e6,
       microsecond: 1e3,
       nanosecond: 1},
    Je = Symbol("date"),
    Ke = Symbol("ym"),
    Xe = Symbol("md"),
    Qe = Symbol("time"),
    et = Symbol("datetime"),
    tt = Symbol("instant"),
    rt = Symbol("original"),
    ot = Symbol("timezone"),
    nt = Symbol("calendar-id"),
    at = Symbol("locale"),
    it = Symbol("options"),
    descriptor =
      function(e){
       return {value: e, enumerable: ! 0, writable: ! 1, configurable: ! 0};
      },
    st = globalThis.Intl.DateTimeFormat,
    lt = Object.assign,
    dt = Object.prototype.hasOwnProperty,
    mt = Reflect.apply;
   function getPropLazy(e, t){
    var r = e[t];
    return "function" == typeof r && (r = new st(e[at], r(e[it])), e[t] = r),
           r;
   }
   function DateTimeFormatImpl(e){
    var
     t =
       arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    if(! (this instanceof DateTimeFormatImpl))
     return new DateTimeFormatImpl(e, t);
    var
     r = void 0 !== t,
     o = r ? lt({}, t) : {},
     n = new st(e, o),
     a = n.resolvedOptions();
    if(r){
     var _e33 = lt({}, a);
     for(var _t41 in _e33) mt(dt, o, [_t41]) || delete _e33[_t41];
     this[it] = _e33;
    }
    else
     this[it] = o;
    this[at] = a.locale,
    this[rt] = n,
    this[ot] = a.timeZone,
    this[nt] = a.calendar,
    this[Je] = dateAmend,
    this[Ke] = yearMonthAmend,
    this[Xe] = monthDayAmend,
    this[Qe] = timeAmend,
    this[et] = datetimeAmend,
    this[tt] = instantAmend;
   }
   Object.defineProperty
    (DateTimeFormatImpl, "name", {writable: ! 0, value: "DateTimeFormat"}),
   DateTimeFormatImpl.supportedLocalesOf =
    function(e, t){return st.supportedLocalesOf(e, t);};
   var
    ct =
      {resolvedOptions:
       descriptor(function(){return this[rt].resolvedOptions();}),
       format:
       descriptor
        (function(e){
          var
           _this$rt,
           _extractOverrides = extractOverrides(e, this),
           r = _extractOverrides.instant,
           o = _extractOverrides.formatter;
          if(r && o) return o.format(r.epochMilliseconds);
          for
          (var
            _len2 = arguments.length,
            t = new Array(_len2 > 1 ? _len2 - 1 : 0),
            _key2 = 1;
           _key2 < _len2;
           _key2++)
           t[_key2 - 1] = arguments[_key2];
          return (_this$rt = this[rt]).format.apply(_this$rt, [e].concat(t));
         }),
       formatRange:
       descriptor
        (function(e, t){
          if(isTemporalObject(e) || isTemporalObject(t)){
           if(! sameTemporalType(e, t))
            throw new
                   TypeError
                   ("Intl.DateTimeFormat.formatRange accepts two values of the same type");
           var
            _extractOverrides2 = extractOverrides(e, this),
            _r56 = _extractOverrides2.instant,
            _o25 = _extractOverrides2.formatter,
            _extractOverrides3 = extractOverrides(t, this),
            _n15 = _extractOverrides3.instant,
            _a11 = _extractOverrides3.formatter;
           if(_r56 && _n15 && _o25 && _a11 && _o25 === _a11)
            return _o25.formatRange
                    (_r56.epochMilliseconds, _n15.epochMilliseconds);
          }
          return this[rt].formatRange(e, t);
         })};
   "formatToParts" in st.prototype
   &&
    (ct.formatToParts =
     descriptor
      (function(e){
        var
         _this$rt2,
         _extractOverrides4 = extractOverrides(e, this),
         r = _extractOverrides4.instant,
         o = _extractOverrides4.formatter;
        if(r && o) return o.formatToParts(r.epochMilliseconds);
        for
        (var
          _len3 = arguments.length,
          t = new Array(_len3 > 1 ? _len3 - 1 : 0),
          _key3 = 1;
         _key3 < _len3;
         _key3++)
         t[_key3 - 1] = arguments[_key3];
        return (_this$rt2 = this[rt]).formatToParts.apply
                (_this$rt2, [e].concat(t));
       })),
   "formatRangeToParts" in st.prototype
   &&
    (ct.formatRangeToParts =
     descriptor
      (function(e, t){
        if(isTemporalObject(e) || isTemporalObject(t)){
         if(! sameTemporalType(e, t))
          throw new
                 TypeError
                 ("Intl.DateTimeFormat.formatRangeToParts accepts two values of the same type");
         var
          _extractOverrides5 = extractOverrides(e, this),
          _r57 = _extractOverrides5.instant,
          _o26 = _extractOverrides5.formatter,
          _extractOverrides6 = extractOverrides(t, this),
          _n16 = _extractOverrides6.instant,
          _a12 = _extractOverrides6.formatter;
         if(_r57 && _n16 && _o26 && _a12 && _o26 === _a12)
          return _o26.formatRangeToParts
                  (_r57.epochMilliseconds, _n16.epochMilliseconds);
        }
        return this[rt].formatRangeToParts(e, t);
       })),
   DateTimeFormatImpl.prototype = Object.create(st.prototype, ct),
   Object.defineProperty
    (DateTimeFormatImpl,
     "prototype",
     {writable: ! 1, enumerable: ! 1, configurable: ! 1});
   var ht = DateTimeFormatImpl;
   function amend(){
    var
     e =
       arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
     t =
       arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
     r = lt({}, e);
    for
    (var
      _i17 = 0,
      _arr6 =
        ["year",
         "month",
         "day",
         "hour",
         "minute",
         "second",
         "weekday",
         "dayPeriod",
         "timeZoneName",
         "dateStyle",
         "timeStyle"];
     _i17 < _arr6.length;
     _i17++){
     var _e34 = _arr6[_i17];
     r[_e34] = _e34 in t ? t[_e34] : r[_e34],
     ! 1 !== r[_e34] && void 0 !== r[_e34] || delete r[_e34];
    }
    return r;
   }
   function timeAmend(e){
    var
     t =
       amend
        (e,
         {year: ! 1,
          month: ! 1,
          day: ! 1,
          weekday: ! 1,
          timeZoneName: ! 1,
          dateStyle: ! 1});
    return hasTimeOptions(t)
           ||
            (t =
             lt
              ({}, t, {hour: "numeric", minute: "numeric", second: "numeric"})),
           t;
   }
   function yearMonthAmend(e){
    var
     t =
       amend
        (e,
         {day: ! 1,
          hour: ! 1,
          minute: ! 1,
          second: ! 1,
          weekday: ! 1,
          dayPeriod: ! 1,
          timeZoneName: ! 1,
          dateStyle: ! 1,
          timeStyle: ! 1});
    return "year" in t || "month" in t
           || (t = lt(t, {year: "numeric", month: "numeric"})),
           t;
   }
   function monthDayAmend(e){
    var
     t =
       amend
        (e,
         {year: ! 1,
          hour: ! 1,
          minute: ! 1,
          second: ! 1,
          weekday: ! 1,
          dayPeriod: ! 1,
          timeZoneName: ! 1,
          dateStyle: ! 1,
          timeStyle: ! 1});
    return "month" in t || "day" in t
           || (t = lt({}, t, {month: "numeric", day: "numeric"})),
           t;
   }
   function dateAmend(e){
    var
     t =
       amend
        (e,
         {hour: ! 1,
          minute: ! 1,
          second: ! 1,
          dayPeriod: ! 1,
          timeZoneName: ! 1,
          timeStyle: ! 1});
    return hasDateOptions(t)
           ||
            (t =
             lt({}, t, {year: "numeric", month: "numeric", day: "numeric"})),
           t;
   }
   function datetimeAmend(e){
    var t = amend(e, {timeZoneName: ! 1});
    return hasTimeOptions(t) || hasDateOptions(t)
           ||
            (t =
             lt
              ({},
               t,
               {year: "numeric",
                month: "numeric",
                day: "numeric",
                hour: "numeric",
                minute: "numeric",
                second: "numeric"})),
           t;
   }
   function instantAmend(e){
    var t = e;
    return hasTimeOptions(t) || hasDateOptions(t)
           ||
            (t =
             lt
              ({},
               t,
               {year: "numeric",
                month: "numeric",
                day: "numeric",
                hour: "numeric",
                minute: "numeric",
                second: "numeric"})),
           t;
   }
   function hasDateOptions(e){
    return "year" in e || "month" in e || "day" in e || "weekday" in e
           || "dateStyle" in e;
   }
   function hasTimeOptions(e){
    return "hour" in e || "minute" in e || "second" in e || "timeStyle" in e
           || "dayPeriod" in e;
   }
   function isTemporalObject(e){
    return IsTemporalDate(e) || IsTemporalTime(e) || IsTemporalDateTime(e)
           || IsTemporalZonedDateTime(e)
           || IsTemporalYearMonth(e)
           || IsTemporalMonthDay(e)
           || IsTemporalInstant(e);
   }
   function sameTemporalType(e, t){
    return !
           (! isTemporalObject(e) || ! isTemporalObject(t))
           && ! (IsTemporalTime(e) && ! IsTemporalTime(t))
           && ! (IsTemporalDate(e) && ! IsTemporalDate(t))
           && ! (IsTemporalDateTime(e) && ! IsTemporalDateTime(t))
           && ! (IsTemporalZonedDateTime(e) && ! IsTemporalZonedDateTime(t))
           && ! (IsTemporalYearMonth(e) && ! IsTemporalYearMonth(t))
           && ! (IsTemporalMonthDay(e) && ! IsTemporalMonthDay(t))
           && ! (IsTemporalInstant(e) && ! IsTemporalInstant(t));
   }
   function extractOverrides(e, t){
    var r = GetIntrinsic("%Temporal.PlainDateTime%");
    if(IsTemporalTime(e)){
     var
      _o27 =
        new
         r
         (1970,
          1,
          1,
          GetSlot(e, d),
          GetSlot(e, m),
          GetSlot(e, c),
          GetSlot(e, h),
          GetSlot(e, u),
          GetSlot(e, T),
          t[nt]);
     return {instant: GetInstantFor(t[ot], _o27, "compatible"),
             formatter: getPropLazy(t, Qe)};
    }
    if(IsTemporalYearMonth(e)){
     var
      _o28 = GetSlot(e, i),
      _n17 = GetSlot(e, s),
      _a13 = GetSlot(e, l),
      _d7 = ToTemporalCalendarIdentifier(GetSlot(e, p));
     if(_d7 !== t[nt])
      throw new
             RangeError
             ("cannot format PlainYearMonth with calendar ".concat
                (_d7, " in locale with calendar ").concat
               (t[nt]));
     var _m6 = new r(_o28, _n17, _a13, 12, 0, 0, 0, 0, 0, _d7);
     return {instant: GetInstantFor(t[ot], _m6, "compatible"),
             formatter: getPropLazy(t, Ke)};
    }
    if(IsTemporalMonthDay(e)){
     var
      _o29 = GetSlot(e, i),
      _n18 = GetSlot(e, s),
      _a14 = GetSlot(e, l),
      _d8 = ToTemporalCalendarIdentifier(GetSlot(e, p));
     if(_d8 !== t[nt])
      throw new
             RangeError
             ("cannot format PlainMonthDay with calendar ".concat
                (_d8, " in locale with calendar ").concat
               (t[nt]));
     var _m7 = new r(_o29, _n18, _a14, 12, 0, 0, 0, 0, 0, _d8);
     return {instant: GetInstantFor(t[ot], _m7, "compatible"),
             formatter: getPropLazy(t, Xe)};
    }
    if(IsTemporalDate(e)){
     var
      _o30 = GetSlot(e, i),
      _n19 = GetSlot(e, s),
      _a15 = GetSlot(e, l),
      _d9 = ToTemporalCalendarIdentifier(GetSlot(e, p));
     if("iso8601" !== _d9 && _d9 !== t[nt])
      throw new
             RangeError
             ("cannot format PlainDate with calendar ".concat
                (_d9, " in locale with calendar ").concat
               (t[nt]));
     var _m8 = new r(_o30, _n19, _a15, 12, 0, 0, 0, 0, 0, t[nt]);
     return {instant: GetInstantFor(t[ot], _m8, "compatible"),
             formatter: getPropLazy(t, Je)};
    }
    if(IsTemporalDateTime(e)){
     var
      _o31 = GetSlot(e, i),
      _n20 = GetSlot(e, s),
      _a16 = GetSlot(e, l),
      _f5 = GetSlot(e, d),
      _y = GetSlot(e, m),
      _I3 = GetSlot(e, c),
      _S3 = GetSlot(e, h),
      _g2 = GetSlot(e, u),
      _w = GetSlot(e, T),
      _D = ToTemporalCalendarIdentifier(GetSlot(e, p));
     if("iso8601" !== _D && _D !== t[nt])
      throw new
             RangeError
             ("cannot format PlainDateTime with calendar ".concat
                (_D, " in locale with calendar ").concat
               (t[nt]));
     var _G = e;
     return "iso8601" === _D
            &&
             (_G = new r(_o31, _n20, _a16, _f5, _y, _I3, _S3, _g2, _w, t[nt])),
            {instant: GetInstantFor(t[ot], _G, "compatible"),
             formatter: getPropLazy(t, et)};
    }
    if(IsTemporalZonedDateTime(e))
     throw new
            TypeError
            ("Temporal.ZonedDateTime not supported in DateTimeFormat methods. Use toLocaleString() instead.");
    return IsTemporalInstant(e)
            ? {instant: e, formatter: getPropLazy(t, tt)}
            : {};
   }
   var
    ut = Object.freeze({__proto__: null, DateTimeFormat: ht}),
    Instant =
      function(){
        function Instant(e){
         _classCallCheck(this, Instant);
         if(arguments.length < 1)
          throw new
                 TypeError
                 ("missing argument: epochNanoseconds is required");
         var t = ToBigInt(e);
         ValidateEpochNanoseconds(t), N(this), SetSlot(this, n, t);
        }
        _createClass
         (Instant,
          [{key: "epochSeconds",
            get:
            function(){
             if(! IsTemporalInstant(this))
              throw new TypeError("invalid receiver");
             var t = GetSlot(this, n);
             return Number(BigIntFloorDiv(t, ve));
            }},
           {key: "epochMilliseconds",
            get:
            function(){
             if(! IsTemporalInstant(this))
              throw new TypeError("invalid receiver");
             var t = BigInt(GetSlot(this, n));
             return Number(BigIntFloorDiv(t, Ge));
            }},
           {key: "epochMicroseconds",
            get:
            function(){
             if(! IsTemporalInstant(this))
              throw new TypeError("invalid receiver");
             return ToBigIntExternal
                     (BigIntFloorDiv(BigInt(GetSlot(this, n)), De));
            }},
           {key: "epochNanoseconds",
            get:
            function(){
             if(! IsTemporalInstant(this))
              throw new TypeError("invalid receiver");
             return ToBigIntExternal(BigInt(GetSlot(this, n)));
            }},
           {key: "add",
            value:
            function(e){
             if(! IsTemporalInstant(this))
              throw new TypeError("invalid receiver");
             return AddDurationToOrSubtractDurationFromInstant("add", this, e);
            }},
           {key: "subtract",
            value:
            function(e){
             if(! IsTemporalInstant(this))
              throw new TypeError("invalid receiver");
             return AddDurationToOrSubtractDurationFromInstant
                     ("subtract", this, e);
            }},
           {key: "until",
            value:
            function(e, t){
             if(! IsTemporalInstant(this))
              throw new TypeError("invalid receiver");
             return DifferenceTemporalInstant("until", this, e, t);
            }},
           {key: "since",
            value:
            function(e, t){
             if(! IsTemporalInstant(this))
              throw new TypeError("invalid receiver");
             return DifferenceTemporalInstant("since", this, e, t);
            }},
           {key: "round",
            value:
            function(e){
             if(! IsTemporalInstant(this))
              throw new TypeError("invalid receiver");
             if(void 0 === e)
              throw new TypeError("options parameter is required");
             var
              t =
                "string" == typeof e
                 ? CreateOnePropObject("smallestUnit", e)
                 : GetOptionsObject(e),
              r = ToTemporalRoundingIncrement(t),
              o = ToTemporalRoundingMode(t, "halfExpand"),
              a = GetTemporalUnit(t, "smallestUnit", "time", He);
             ValidateTemporalRoundingIncrement
              (r,
               {hour: 24,
                 minute: 1440,
                 second: 86400,
                 millisecond: 864e5,
                 microsecond: 864e8,
                 nanosecond: 864e11}
                [a],
               ! 0);
             var i = RoundInstant(GetSlot(this, n), r, a, o);
             return new Instant(i);
            }},
           {key: "equals",
            value:
            function(t){
             if(! IsTemporalInstant(this))
              throw new TypeError("invalid receiver");
             var
              r = ToTemporalInstant(t),
              o = GetSlot(this, n),
              a = GetSlot(r, n);
             return BigInt(o) === BigInt(a);
            }},
           {key: "toString",
            value:
            function(e){
             if(! IsTemporalInstant(this))
              throw new TypeError("invalid receiver");
             var
              t = GetOptionsObject(e),
              r = ToFractionalSecondDigits(t),
              o = ToTemporalRoundingMode(t, "trunc"),
              a = GetTemporalUnit(t, "smallestUnit", "time", void 0);
             if("hour" === a)
              throw new
                     RangeError
                     ('smallestUnit must be a time unit other than "hour"');
             var i = t.timeZone;
             void 0 !== i && (i = ToTemporalTimeZoneSlotValue(i));
             var
              _ToSecondsStringPreci = ToSecondsStringPrecisionRecord(a, r),
              s = _ToSecondsStringPreci.precision,
              l = _ToSecondsStringPreci.unit,
              d = _ToSecondsStringPreci.increment,
              m = RoundInstant(GetSlot(this, n), d, l, o);
             return TemporalInstantToString(new Instant(m), i, s);
            }},
           {key: "toJSON",
            value:
            function(){
             if(! IsTemporalInstant(this))
              throw new TypeError("invalid receiver");
             return TemporalInstantToString(this, void 0, "auto");
            }},
           {key: "toLocaleString",
            value:
            function(e, t){
             if(! IsTemporalInstant(this))
              throw new TypeError("invalid receiver");
             return new ht(e, t).format(this);
            }},
           {key: "valueOf",
            value:
            function(){
             throw new
                    TypeError
                    ("use compare() or equals() to compare Temporal.Instant");
            }},
           {key: "toZonedDateTime",
            value:
            function(e){
             if(! IsTemporalInstant(this))
              throw new TypeError("invalid receiver");
             if(! IsObject(e))
              throw new TypeError("invalid argument in toZonedDateTime");
             var t = e.calendar;
             if(void 0 === t)
              throw new
                     TypeError
                     ("missing calendar property in toZonedDateTime");
             var r = ToTemporalCalendarSlotValue(t), o = e.timeZone;
             if(void 0 === o)
              throw new
                     TypeError
                     ("missing timeZone property in toZonedDateTime");
             var a = ToTemporalTimeZoneSlotValue(o);
             return CreateTemporalZonedDateTime(GetSlot(this, n), a, r);
            }},
           {key: "toZonedDateTimeISO",
            value:
            function(e){
             if(! IsTemporalInstant(this))
              throw new TypeError("invalid receiver");
             var t = ToTemporalTimeZoneSlotValue(e);
             return CreateTemporalZonedDateTime
                     (GetSlot(this, n), t, "iso8601");
            }}],
          [{key: "fromEpochSeconds",
            value:
            function(t){
             var r = ToNumber(t), o = BigInt(r) * ve;
             return ValidateEpochNanoseconds(o), new Instant(o);
            }},
           {key: "fromEpochMilliseconds",
            value:
            function(t){
             var r = ToNumber(t), o = BigInt(r) * Ge;
             return ValidateEpochNanoseconds(o), new Instant(o);
            }},
           {key: "fromEpochMicroseconds",
            value:
            function(t){
             var r = ToBigInt(t), o = r * De;
             return ValidateEpochNanoseconds(o), new Instant(o);
            }},
           {key: "fromEpochNanoseconds",
            value:
            function(e){
             var t = ToBigInt(e);
             return ValidateEpochNanoseconds(t), new Instant(t);
            }},
           {key: "from",
            value:
            function(e){
             return IsTemporalInstant(e)
                     ? new Instant(GetSlot(e, n))
                     : ToTemporalInstant(e);
            }},
           {key: "compare",
            value:
            function(t, r){
             var
              o = ToTemporalInstant(t),
              a = ToTemporalInstant(r),
              i = GetSlot(o, n),
              s = GetSlot(a, n);
             return i < s ? - 1 : i > s ? 1 : 0;
            }}]);
        return Instant;
       }
       ();
   MakeIntrinsicClass(Instant, "Temporal.Instant");
   var
    Tt = Array.prototype.includes,
    pt = Array.prototype.push,
    ft = globalThis.Intl.DateTimeFormat,
    yt = Array.prototype.sort,
    It = Math.abs,
    St = Math.floor,
    gt = Object.create,
    wt = Object.entries,
    Dt = Set,
    Gt = Reflect.ownKeys,
    vt = Set.prototype.add,
    Ct = Set.prototype.values,
    Ot = {},
    Calendar =
      function(){
        function Calendar(e){
         _classCallCheck(this, Calendar);
         if(arguments.length < 1)
          throw new RangeError("missing argument: id is required");
         var t = ToString(e);
         if(! IsBuiltinCalendar(t))
          throw new RangeError("invalid calendar identifier ".concat(t));
         N(this), SetSlot(this, F, ASCIILowercase(t));
        }
        _createClass
         (Calendar,
          [{key: "id",
            get:
            function(){
             if(! IsTemporalCalendar(this))
              throw new TypeError("invalid receiver");
             return GetSlot(this, F);
            }},
           {key: "dateFromFields",
            value:
            function(e, t){
             if(! IsTemporalCalendar(this))
              throw new TypeError("invalid receiver");
             if(! IsObject(e)) throw new TypeError("invalid fields");
             var r = GetOptionsObject(t), o = GetSlot(this, F);
             return Ot[o].dateFromFields(e, r, o);
            }},
           {key: "yearMonthFromFields",
            value:
            function(e, t){
             if(! IsTemporalCalendar(this))
              throw new TypeError("invalid receiver");
             if(! IsObject(e)) throw new TypeError("invalid fields");
             var r = GetOptionsObject(t), o = GetSlot(this, F);
             return Ot[o].yearMonthFromFields(e, r, o);
            }},
           {key: "monthDayFromFields",
            value:
            function(e, t){
             if(! IsTemporalCalendar(this))
              throw new TypeError("invalid receiver");
             if(! IsObject(e)) throw new TypeError("invalid fields");
             var r = GetOptionsObject(t), o = GetSlot(this, F);
             return Ot[o].monthDayFromFields(e, r, o);
            }},
           {key: "fields",
            value:
            function(e){
             if(! IsTemporalCalendar(this))
              throw new TypeError("invalid receiver");
             var
              t = [],
              r =
                new
                 Set
                 (["year",
                   "month",
                   "monthCode",
                   "day",
                   "hour",
                   "minute",
                   "second",
                   "millisecond",
                   "microsecond",
                   "nanosecond"]),
              _iterator15 = _createForOfIteratorHelper(e),
              _step15;
             try{
              for(_iterator15.s(); ! (_step15 = _iterator15.n()).done;){
               var _o32 = _step15.value;
               if("string" != typeof _o32)
                throw new TypeError("invalid fields");
               if(! r.has(_o32))
                throw new RangeError("invalid field name ".concat(_o32));
               r["delete"](_o32), pt.call(t, _o32);
              }
             }
             catch(err){_iterator15.e(err);}
             finally{_iterator15.f();}
             return Ot[GetSlot(this, F)].fields(t);
            }},
           {key: "mergeFields",
            value:
            function(e, t){
             if(! IsTemporalCalendar(this))
              throw new TypeError("invalid receiver");
             var r = ToObject(e), o = gt(null);
             CopyDataProperties(o, r, [], [void 0]);
             var n = ToObject(t), a = gt(null);
             CopyDataProperties(a, n, [], [void 0]);
             var
              i = Gt(a),
              s = Ot[GetSlot(this, F)].fieldKeysToIgnore(i),
              l = gt(null),
              d = Gt(o),
              _iterator16 = _createForOfIteratorHelper(d),
              _step16;
             try{
              for(_iterator16.s(); ! (_step16 = _iterator16.n()).done;){
               var _e35 = _step16.value, _t42 = void 0;
               _t42 = Call(Tt, s, [_e35]) ? a[_e35] : o[_e35],
               void 0 !== _t42 && (l[_e35] = _t42);
              }
             }
             catch(err){_iterator16.e(err);}
             finally{_iterator16.f();}
             return CopyDataProperties(l, a, []), l;
            }},
           {key: "dateAdd",
            value:
            function(e, t, r){
             if(! IsTemporalCalendar(this))
              throw new TypeError("invalid receiver");
             var
              o = ToTemporalDate(e),
              n = ToTemporalDuration(t),
              a = ToTemporalOverflow(GetOptionsObject(r)),
              _BalanceDuration10 =
                BalanceDuration
                 (GetSlot(n, v),
                  GetSlot(n, C),
                  GetSlot(n, O),
                  GetSlot(n, b),
                  GetSlot(n, E),
                  GetSlot(n, M),
                  GetSlot(n, R),
                  "day"),
              i = _BalanceDuration10.days,
              s = GetSlot(this, F);
             return Ot[s].dateAdd
                     (o, GetSlot(n, w), GetSlot(n, D), GetSlot(n, G), i, a, s);
            }},
           {key: "dateUntil",
            value:
            function(e, t, r){
             if(! IsTemporalCalendar(this))
              throw new TypeError("invalid receiver");
             var
              o = ToTemporalDate(e),
              n = ToTemporalDate(t),
              a =
                GetTemporalUnit
                 (GetOptionsObject(r), "largestUnit", "date", "auto");
             "auto" === a && (a = "day");
             var
              _Ot$GetSlot$dateUntil = Ot[GetSlot(this, F)].dateUntil(o, n, a),
              i = _Ot$GetSlot$dateUntil.years,
              s = _Ot$GetSlot$dateUntil.months,
              l = _Ot$GetSlot$dateUntil.weeks,
              d = _Ot$GetSlot$dateUntil.days;
             return new
                     (GetIntrinsic("%Temporal.Duration%"))
                     (i, s, l, d, 0, 0, 0, 0, 0, 0);
            }},
           {key: "year",
            value:
            function(e){
             var t = e;
             if(! IsTemporalCalendar(this))
              throw new TypeError("invalid receiver");
             return IsTemporalYearMonth(t) || (t = ToTemporalDate(t)),
                    Ot[GetSlot(this, F)].year(t);
            }},
           {key: "month",
            value:
            function(e){
             var t = e;
             if(! IsTemporalCalendar(this))
              throw new TypeError("invalid receiver");
             if(IsTemporalMonthDay(t))
              throw new TypeError("use monthCode on PlainMonthDay instead");
             return IsTemporalYearMonth(t) || (t = ToTemporalDate(t)),
                    Ot[GetSlot(this, F)].month(t);
            }},
           {key: "monthCode",
            value:
            function(e){
             var t = e;
             if(! IsTemporalCalendar(this))
              throw new TypeError("invalid receiver");
             return IsTemporalYearMonth(t) || IsTemporalMonthDay(t)
                    || (t = ToTemporalDate(t)),
                    Ot[GetSlot(this, F)].monthCode(t);
            }},
           {key: "day",
            value:
            function(e){
             var t = e;
             if(! IsTemporalCalendar(this))
              throw new TypeError("invalid receiver");
             return IsTemporalMonthDay(t) || (t = ToTemporalDate(t)),
                    Ot[GetSlot(this, F)].day(t);
            }},
           {key: "era",
            value:
            function(e){
             var t = e;
             if(! IsTemporalCalendar(this))
              throw new TypeError("invalid receiver");
             return IsTemporalYearMonth(t) || (t = ToTemporalDate(t)),
                    Ot[GetSlot(this, F)].era(t);
            }},
           {key: "eraYear",
            value:
            function(e){
             var t = e;
             if(! IsTemporalCalendar(this))
              throw new TypeError("invalid receiver");
             return IsTemporalYearMonth(t) || (t = ToTemporalDate(t)),
                    Ot[GetSlot(this, F)].eraYear(t);
            }},
           {key: "dayOfWeek",
            value:
            function(e){
             if(! IsTemporalCalendar(this))
              throw new TypeError("invalid receiver");
             var t = ToTemporalDate(e);
             return Ot[GetSlot(this, F)].dayOfWeek(t);
            }},
           {key: "dayOfYear",
            value:
            function(e){
             if(! IsTemporalCalendar(this))
              throw new TypeError("invalid receiver");
             var t = ToTemporalDate(e);
             return Ot[GetSlot(this, F)].dayOfYear(t);
            }},
           {key: "weekOfYear",
            value:
            function(e){
             if(! IsTemporalCalendar(this))
              throw new TypeError("invalid receiver");
             var t = ToTemporalDate(e);
             return Ot[GetSlot(this, F)].weekOfYear(t);
            }},
           {key: "yearOfWeek",
            value:
            function(e){
             if(! IsTemporalCalendar(this))
              throw new TypeError("invalid receiver");
             var t = ToTemporalDate(e);
             return Ot[GetSlot(this, F)].yearOfWeek(t);
            }},
           {key: "daysInWeek",
            value:
            function(e){
             if(! IsTemporalCalendar(this))
              throw new TypeError("invalid receiver");
             var t = ToTemporalDate(e);
             return Ot[GetSlot(this, F)].daysInWeek(t);
            }},
           {key: "daysInMonth",
            value:
            function(e){
             var t = e;
             if(! IsTemporalCalendar(this))
              throw new TypeError("invalid receiver");
             return IsTemporalYearMonth(t) || (t = ToTemporalDate(t)),
                    Ot[GetSlot(this, F)].daysInMonth(t);
            }},
           {key: "daysInYear",
            value:
            function(e){
             var t = e;
             if(! IsTemporalCalendar(this))
              throw new TypeError("invalid receiver");
             return IsTemporalYearMonth(t) || (t = ToTemporalDate(t)),
                    Ot[GetSlot(this, F)].daysInYear(t);
            }},
           {key: "monthsInYear",
            value:
            function(e){
             var t = e;
             if(! IsTemporalCalendar(this))
              throw new TypeError("invalid receiver");
             return IsTemporalYearMonth(t) || (t = ToTemporalDate(t)),
                    Ot[GetSlot(this, F)].monthsInYear(t);
            }},
           {key: "inLeapYear",
            value:
            function(e){
             var t = e;
             if(! IsTemporalCalendar(this))
              throw new TypeError("invalid receiver");
             return IsTemporalYearMonth(t) || (t = ToTemporalDate(t)),
                    Ot[GetSlot(this, F)].inLeapYear(t);
            }},
           {key: "toString",
            value:
            function(){
             if(! IsTemporalCalendar(this))
              throw new TypeError("invalid receiver");
             return GetSlot(this, F);
            }},
           {key: "toJSON",
            value:
            function(){
             if(! IsTemporalCalendar(this))
              throw new TypeError("invalid receiver");
             return GetSlot(this, F);
            }}],
          [{key: "from",
            value:
            function(e){
             return ToTemporalCalendarObject(ToTemporalCalendarSlotValue(e));
            }}]);
        return Calendar;
       }
       ();
   function monthCodeNumberPart(e){
    if(! e.startsWith("M"))
     throw new
            RangeError
            ("Invalid month code: ".concat
              (e, ".  Month codes must start with M."));
    var t = + e.slice(1);
    if(isNaN(t)) throw new RangeError("Invalid month code: ".concat(e));
    return t;
   }
   function buildMonthCode(e){
    var
     t =
       arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ! 1;
    return "M".concat(e.toString().padStart(2, "0")).concat(t ? "L" : "");
   }
   function resolveNonLunisolarMonth(e, t){
    var
     r =
       arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 12,
     o = e.month,
     n = e.monthCode;
    if(void 0 === n){
     if(void 0 === o)
      throw new TypeError("Either month or monthCode are required");
     "reject" === t && RejectToRange(o, 1, r),
     "constrain" === t && (o = ConstrainToRange(o, 1, r)),
     n = buildMonthCode(o);
    }
    else{
     var _e36 = monthCodeNumberPart(n);
     if(void 0 !== o && o !== _e36)
      throw new
             RangeError
             ("monthCode ".concat(n, " and month ").concat
               (o, " must match if both are present"));
     if(n !== buildMonthCode(_e36))
      throw new RangeError("Invalid month code: ".concat(n));
     if(o = _e36, o < 1 || o > r)
      throw new RangeError("Invalid monthCode: ".concat(n));
    }
    return _objectSpread2(_objectSpread2({}, e), {}, {month: o, monthCode: n});
   }
   MakeIntrinsicClass(Calendar, "Temporal.Calendar"),
   DefineIntrinsic("Temporal.Calendar.from", Calendar.from),
   DefineIntrinsic
    ("Temporal.Calendar.prototype.dateAdd", Calendar.prototype.dateAdd),
   DefineIntrinsic
    ("Temporal.Calendar.prototype.dateFromFields",
     Calendar.prototype.dateFromFields),
   DefineIntrinsic
    ("Temporal.Calendar.prototype.dateUntil", Calendar.prototype.dateUntil),
   DefineIntrinsic("Temporal.Calendar.prototype.day", Calendar.prototype.day),
   DefineIntrinsic
    ("Temporal.Calendar.prototype.dayOfWeek", Calendar.prototype.dayOfWeek),
   DefineIntrinsic
    ("Temporal.Calendar.prototype.dayOfYear", Calendar.prototype.dayOfYear),
   DefineIntrinsic
    ("Temporal.Calendar.prototype.daysInMonth",
     Calendar.prototype.daysInMonth),
   DefineIntrinsic
    ("Temporal.Calendar.prototype.daysInWeek", Calendar.prototype.daysInWeek),
   DefineIntrinsic
    ("Temporal.Calendar.prototype.daysInYear", Calendar.prototype.daysInYear),
   DefineIntrinsic("Temporal.Calendar.prototype.era", Calendar.prototype.era),
   DefineIntrinsic
    ("Temporal.Calendar.prototype.eraYear", Calendar.prototype.eraYear),
   DefineIntrinsic
    ("Temporal.Calendar.prototype.fields", Calendar.prototype.fields),
   DefineIntrinsic
    ("Temporal.Calendar.prototype.inLeapYear", Calendar.prototype.inLeapYear),
   DefineIntrinsic
    ("Temporal.Calendar.prototype.mergeFields",
     Calendar.prototype.mergeFields),
   DefineIntrinsic
    ("Temporal.Calendar.prototype.month", Calendar.prototype.month),
   DefineIntrinsic
    ("Temporal.Calendar.prototype.monthCode", Calendar.prototype.monthCode),
   DefineIntrinsic
    ("Temporal.Calendar.prototype.monthDayFromFields",
     Calendar.prototype.monthDayFromFields),
   DefineIntrinsic
    ("Temporal.Calendar.prototype.monthsInYear",
     Calendar.prototype.monthsInYear),
   DefineIntrinsic
    ("Temporal.Calendar.prototype.weekOfYear", Calendar.prototype.weekOfYear),
   DefineIntrinsic
    ("Temporal.Calendar.prototype.year", Calendar.prototype.year),
   DefineIntrinsic
    ("Temporal.Calendar.prototype.yearMonthFromFields",
     Calendar.prototype.yearMonthFromFields),
   DefineIntrinsic
    ("Temporal.Calendar.prototype.yearOfWeek", Calendar.prototype.yearOfWeek),
   Ot.iso8601 =
    {dateFromFields:
     function(e, t, r){
      var
       _RegulateISODate2,
       o =
         PrepareTemporalFields
          (e, ["day", "month", "monthCode", "year"], ["year", "day"]),
       n = ToTemporalOverflow(t);
      o = resolveNonLunisolarMonth(o);
      var _o33 = o, a = _o33.year, i = _o33.month, s = _o33.day;
      return _RegulateISODate2 = RegulateISODate(a, i, s, n),
             a = _RegulateISODate2.year,
             i = _RegulateISODate2.month,
             s = _RegulateISODate2.day,
             CreateTemporalDate(a, i, s, r);
     },
     yearMonthFromFields:
     function(e, t, r){
      var
       _RegulateISOYearMonth,
       o = PrepareTemporalFields(e, ["month", "monthCode", "year"], ["year"]),
       n = ToTemporalOverflow(t);
      o = resolveNonLunisolarMonth(o);
      var _o34 = o, a = _o34.year, i = _o34.month;
      return _RegulateISOYearMonth =
              function(e, t, r){
                var o = e, n = t;
                switch(r){
                  case "reject":
                   RejectISODate(o, n, 1); break;
                  case "constrain":
                   var _ConstrainISODate2 = ConstrainISODate(o, n);
                   o = _ConstrainISODate2.year;
                   n = _ConstrainISODate2.month;
                }
                return {year: o, month: n};
               }
               (a, i, n),
             a = _RegulateISOYearMonth.year,
             i = _RegulateISOYearMonth.month,
             CreateTemporalYearMonth(a, i, r, 1);
     },
     monthDayFromFields:
     function(e, t, r){
      var
       _RegulateISODate3,
       o =
         PrepareTemporalFields
          (e, ["day", "month", "monthCode", "year"], ["day"]),
       n = ToTemporalOverflow(t);
      if(void 0 !== o.month && void 0 === o.year && void 0 === o.monthCode)
       throw new TypeError("either year or monthCode required with month");
      var a = void 0 === o.monthCode;
      o = resolveNonLunisolarMonth(o);
      var _o35 = o, i = _o35.month, s = _o35.day, l = _o35.year;
      return _RegulateISODate3 = RegulateISODate(a ? l : 1972, i, s, n),
             i = _RegulateISODate3.month,
             s = _RegulateISODate3.day,
             CreateTemporalMonthDay(i, s, r, 1972);
     },
     fields: function(e){return e;},
     fieldKeysToIgnore:
     function(e){
      var t = new Dt();
      for(var _r58 = 0; _r58 < e.length; _r58++){
       var _o36 = e[_r58];
       Call(vt, t, [_o36]),
       "month" === _o36
        ? Call(vt, t, ["monthCode"])
        : "monthCode" === _o36 && Call(vt, t, ["month"]);
      }
      return _toConsumableArray(Call(Ct, t, []));
     },
     dateAdd:
     function(e, t, r, o, n, a, d){
      var
       _AddISODate,
       m = GetSlot(e, i),
       c = GetSlot(e, s),
       h = GetSlot(e, l);
      return _AddISODate = AddISODate(m, c, h, t, r, o, n, a),
             m = _AddISODate.year,
             c = _AddISODate.month,
             h = _AddISODate.day,
             CreateTemporalDate(m, c, h, d);
     },
     dateUntil:
     function(e, t, r){
      return DifferenceISODate
              (GetSlot(e, i),
               GetSlot(e, s),
               GetSlot(e, l),
               GetSlot(t, i),
               GetSlot(t, s),
               GetSlot(t, l),
               r);
     },
     year: function(e){return GetSlot(e, i);},
     era: function(){},
     eraYear: function(){},
     month: function(e){return GetSlot(e, s);},
     monthCode: function(e){return buildMonthCode(GetSlot(e, s));},
     day: function(e){return GetSlot(e, l);},
     dayOfWeek:
     function(e){
      return DayOfWeek(GetSlot(e, i), GetSlot(e, s), GetSlot(e, l));
     },
     dayOfYear:
     function(e){
      return DayOfYear(GetSlot(e, i), GetSlot(e, s), GetSlot(e, l));
     },
     weekOfYear:
     function(e){
      return WeekOfYear(GetSlot(e, i), GetSlot(e, s), GetSlot(e, l)).week;
     },
     yearOfWeek:
     function(e){
      return WeekOfYear(GetSlot(e, i), GetSlot(e, s), GetSlot(e, l)).year;
     },
     daysInWeek: function(){return 7;},
     daysInMonth:
     function(e){return ISODaysInMonth(GetSlot(e, i), GetSlot(e, s));},
     daysInYear:
     function(e){
      var t = e;
      return HasSlot(t, i) || (t = ToTemporalDate(t)),
             LeapYear(GetSlot(t, i)) ? 366 : 365;
     },
     monthsInYear: function(){return 12;},
     inLeapYear:
     function(e){
      var t = e;
      return HasSlot(t, i) || (t = ToTemporalDate(t)),
             LeapYear(GetSlot(t, i));
     }};
   var
    OneObjectCache =
      function(){
        function OneObjectCache(e){
         _classCallCheck(this, OneObjectCache);
         if
          (this.map = new Map(),
           this.calls = 0,
           this.hits = 0,
           this.misses = 0,
           this.now =
            globalThis.performance ? globalThis.performance.now() : Date.now(),
           void 0 !== e){
          var
           _t43 = 0,
           _iterator17 = _createForOfIteratorHelper(e.map.entries()),
           _step17;
          try{
           for(_iterator17.s(); ! (_step17 = _iterator17.n()).done;){
            var _this$map, _r59 = _step17.value;
            if(++_t43 > OneObjectCache.MAX_CACHE_ENTRIES) break;
            (_this$map = this.map).set.apply
             (_this$map, _toConsumableArray(_r59));
           }
          }
          catch(err){_iterator17.e(err);}
          finally{_iterator17.f();}
         }
        }
        _createClass
         (OneObjectCache,
          [{key: "get",
            value:
            function(e){
             var t = this.map.get(e);
             return t && (this.hits++, this.report()), this.calls++, t;
            }},
           {key: "set",
            value:
            function(e, t){this.map.set(e, t), this.misses++, this.report();}},
           {key: "report", value: function(){}},
           {key: "setObject",
            value:
            function(e){
             if(OneObjectCache.objectMap.get(e))
              throw new RangeError("object already cached");
             OneObjectCache.objectMap.set(e, this), this.report();
            }}],
          [{key: "getCacheForObject",
            value:
            function(e){
             var t = OneObjectCache.objectMap.get(e);
             return t
                    ||
                     (t = new OneObjectCache(),
                      OneObjectCache.objectMap.set(e, t)),
                    t;
            }}]);
        return OneObjectCache;
       }
       ();
   function toUtcIsoDateString(_ref8){
    var e = _ref8.isoYear, t = _ref8.isoMonth, r = _ref8.isoDay;
    return "".concat(ISOYearString(e), "-").concat
             (ISODateTimePartString(t), "-").concat
            (ISODateTimePartString(r), "T00:00Z");
   }
   function simpleDateDiff(e, t){
    return {years: e.year - t.year,
            months: e.month - t.month,
            days: e.day - t.day};
   }
   OneObjectCache.objectMap = new WeakMap(),
   OneObjectCache.MAX_CACHE_ENTRIES = 1e3;
   var
    HelperBase =
      function(){
        function HelperBase(){
         _classCallCheck(this, HelperBase);
         this.eraLength = "short",
         this.hasEra = ! 0,
         this.erasBeginMidYear = ! 1;
        }
        _createClass
         (HelperBase,
          [{key: "getFormatter",
            value:
            function(){
             return void 0 === this.formatter
                    &&
                     (this.formatter =
                      new
                       ft
                       ("en-US-u-ca-".concat(this.id),
                        {day: "numeric",
                         month: "numeric",
                         year: "numeric",
                         era: this.eraLength,
                         timeZone: "UTC"})),
                    this.formatter;
            }},
           {key: "isoToCalendarDate",
            value:
            function(e, t){
             var
              _this = this,
              r = e.year,
              o = e.month,
              n = e.day,
              a =
                JSON.stringify
                 ({func: "isoToCalendarDate",
                   isoYear: r,
                   isoMonth: o,
                   isoDay: n,
                   id: this.id}),
              i = t.get(a);
             if(i) return i;
             var s = this.getFormatter(), l, d;
             try{
              d = toUtcIsoDateString({isoYear: r, isoMonth: o, isoDay: n}),
              l = s.formatToParts(new Date(d));
             }
             catch(e){
              throw new
                     RangeError
                     ("Invalid ISO date: ".concat
                       (JSON.stringify({isoYear: r, isoMonth: o, isoDay: n})));
             }
             var m = {}, _iterator18 = _createForOfIteratorHelper(l), _step18;
             try{
              for(_iterator18.s(); ! (_step18 = _iterator18.n()).done;){
               var
                _step18$value = _step18.value,
                _e37 = _step18$value.type,
                _t45 = _step18$value.value;
               if
                ("year" === _e37 && (m.eraYear = + _t45),
                 "relatedYear" === _e37 && (m.eraYear = + _t45),
                 "month" === _e37){
                var _e38 = /^([0-9]*)(.*?)$/.exec(_t45);
                if(! _e38 || 3 != _e38.length || ! _e38[1] && ! _e38[2])
                 throw new RangeError("Unexpected month: ".concat(_t45));
                if(m.month = _e38[1] ? + _e38[1] : 1, m.month < 1)
                 throw new
                        RangeError
                        ("Invalid month ".concat(_t45, " from ").concat(d, "[u-ca-").concat
                          (this.id,
                           "] (probably due to https://bugs.chromium.org/p/v8/issues/detail?id=10527)"));
                if(m.month > 13)
                 throw new
                        RangeError
                        ("Invalid month ".concat(_t45, " from ").concat(d, "[u-ca-").concat
                          (this.id,
                           "] (probably due to https://bugs.chromium.org/p/v8/issues/detail?id=10529)"));
                _e38[2] && (m.monthExtra = _e38[2]);
               }
               "day" === _e37 && (m.day = + _t45),
               this.hasEra && "era" === _e37 && null != _t45 && "" !== _t45
               &&
                (_t45 = _t45.split(" (")[0],
                 m.era =
                  _t45.normalize("NFD").replace
                     (/(?:[\0-\x1F!-,\.\/:-@\[-`\{-\xA9\xAB-\xB4\xB6-\xB9\xBB-\xBF\xD7\xF7\u02C2-\u02C5\u02D2-\u02DF\u02E5-\u02EB\u02ED\u02EF-\u036F\u0375\u0378\u0379\u037E\u0380-\u0385\u0387\u038B\u038D\u03A2\u03F6\u0482-\u0489\u0530\u0557\u0558\u055A-\u055F\u0589-\u05CF\u05EB-\u05EE\u05F3-\u061F\u064B-\u066D\u0670\u06D4\u06D6-\u06E4\u06E7-\u06ED\u06F0-\u06F9\u06FD\u06FE\u0700-\u070F\u0711\u0730-\u074C\u07A6-\u07B0\u07B2-\u07C9\u07EB-\u07F3\u07F6-\u07F9\u07FB-\u07FF\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u083F\u0859-\u085F\u086B-\u086F\u0888\u088F-\u089F\u08CA-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962-\u0970\u0981-\u0984\u098D\u098E\u0991\u0992\u09A9\u09B1\u09B3-\u09B5\u09BA-\u09BC\u09BE-\u09CD\u09CF-\u09DB\u09DE\u09E2-\u09EF\u09F2-\u09FB\u09FD-\u0A04\u0A0B-\u0A0E\u0A11\u0A12\u0A29\u0A31\u0A34\u0A37\u0A3A-\u0A58\u0A5D\u0A5F-\u0A71\u0A75-\u0A84\u0A8E\u0A92\u0AA9\u0AB1\u0AB4\u0ABA-\u0ABC\u0ABE-\u0ACF\u0AD1-\u0ADF\u0AE2-\u0AF8\u0AFA-\u0B04\u0B0D\u0B0E\u0B11\u0B12\u0B29\u0B31\u0B34\u0B3A-\u0B3C\u0B3E-\u0B5B\u0B5E\u0B62-\u0B70\u0B72-\u0B82\u0B84\u0B8B-\u0B8D\u0B91\u0B96-\u0B98\u0B9B\u0B9D\u0BA0-\u0BA2\u0BA5-\u0BA7\u0BAB-\u0BAD\u0BBA-\u0BCF\u0BD1-\u0C04\u0C0D\u0C11\u0C29\u0C3A-\u0C3C\u0C3E-\u0C57\u0C5B\u0C5C\u0C5E\u0C5F\u0C62-\u0C7F\u0C81-\u0C84\u0C8D\u0C91\u0CA9\u0CB4\u0CBA-\u0CBC\u0CBE-\u0CDC\u0CDF\u0CE2-\u0CF0\u0CF3-\u0D03\u0D0D\u0D11\u0D3B\u0D3C\u0D3E-\u0D4D\u0D4F-\u0D53\u0D57-\u0D5E\u0D62-\u0D79\u0D80-\u0D84\u0D97-\u0D99\u0DB2\u0DBC\u0DBE\u0DBF\u0DC7-\u0E00\u0E31\u0E34-\u0E3F\u0E47-\u0E80\u0E83\u0E85\u0E8B\u0EA4\u0EA6\u0EB1\u0EB4-\u0EBC\u0EBE\u0EBF\u0EC5\u0EC7-\u0EDB\u0EE0-\u0EFF\u0F01-\u0F3F\u0F48\u0F6D-\u0F87\u0F8D-\u0FFF\u102B-\u103E\u1040-\u104F\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F-\u109F\u10C6\u10C8-\u10CC\u10CE\u10CF\u10FB\u1249\u124E\u124F\u1257\u1259\u125E\u125F\u1289\u128E\u128F\u12B1\u12B6\u12B7\u12BF\u12C1\u12C6\u12C7\u12D7\u1311\u1316\u1317\u135B-\u137F\u1390-\u139F\u13F6\u13F7\u13FE-\u1400\u166D\u166E\u1680\u169B-\u169F\u16EB-\u16F0\u16F9-\u16FF\u1712-\u171E\u1732-\u173F\u1752-\u175F\u176D\u1771-\u177F\u17B4-\u17D6\u17D8-\u17DB\u17DD-\u181F\u1879-\u187F\u1885\u1886\u18A9\u18AB-\u18AF\u18F6-\u18FF\u191F-\u194F\u196E\u196F\u1975-\u197F\u19AC-\u19AF\u19CA-\u19FF\u1A17-\u1A1F\u1A55-\u1AA6\u1AA8-\u1B04\u1B34-\u1B44\u1B4D-\u1B82\u1BA1-\u1BAD\u1BB0-\u1BB9\u1BE6-\u1BFF\u1C24-\u1C4C\u1C50-\u1C59\u1C7E\u1C7F\u1C89-\u1C8F\u1CBB\u1CBC\u1CC0-\u1CE8\u1CED\u1CF4\u1CF7-\u1CF9\u1CFB-\u1CFF\u1DC0-\u1DFF\u1F16\u1F17\u1F1E\u1F1F\u1F46\u1F47\u1F4E\u1F4F\u1F58\u1F5A\u1F5C\u1F5E\u1F7E\u1F7F\u1FB5\u1FBD\u1FBF-\u1FC1\u1FC5\u1FCD-\u1FCF\u1FD4\u1FD5\u1FDC-\u1FDF\u1FED-\u1FF1\u1FF5\u1FFD-\u2070\u2072-\u207E\u2080-\u208F\u209D-\u2101\u2103-\u2106\u2108\u2109\u2114\u2116-\u2118\u211E-\u2123\u2125\u2127\u2129\u212E\u213A\u213B\u2140-\u2144\u214A-\u214D\u214F-\u2182\u2185-\u2BFF\u2CE5-\u2CEA\u2CEF-\u2CF1\u2CF4-\u2CFF\u2D26\u2D28-\u2D2C\u2D2E\u2D2F\u2D68-\u2D6E\u2D70-\u2D7F\u2D97-\u2D9F\u2DA7\u2DAF\u2DB7\u2DBF\u2DC7\u2DCF\u2DD7\u2DDF-\u2E2E\u2E30-\u3004\u3007-\u3030\u3036-\u303A\u303D-\u3040\u3097-\u309C\u30A0\u30FB\u3100-\u3104\u3130\u318F-\u319F\u31C0-\u31EF\u3200-\u33FF\u4DC0-\u4DFF\uA48D-\uA4CF\uA4FE\uA4FF\uA60D-\uA60F\uA620-\uA629\uA62C-\uA63F\uA66F-\uA67E\uA69E\uA69F\uA6E6-\uA716\uA720\uA721\uA789\uA78A\uA7CB-\uA7CF\uA7D2\uA7D4\uA7DA-\uA7F1\uA802\uA806\uA80B\uA823-\uA83F\uA874-\uA881\uA8B4-\uA8F1\uA8F8-\uA8FA\uA8FC\uA8FF-\uA909\uA926-\uA92F\uA947-\uA95F\uA97D-\uA983\uA9B3-\uA9CE\uA9D0-\uA9DF\uA9E5\uA9F0-\uA9F9\uA9FF\uAA29-\uAA3F\uAA43\uAA4C-\uAA5F\uAA77-\uAA79\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAC3-\uAADA\uAADE\uAADF\uAAEB-\uAAF1\uAAF5-\uAB00\uAB07\uAB08\uAB0F\uAB10\uAB17-\uAB1F\uAB27\uAB2F\uAB5B\uAB6A-\uAB6F\uABE3-\uABFF\uD7A4-\uD7AF\uD7C7-\uD7CA\uD7FC-\uD7FF\uE000-\uF8FF\uFA6E\uFA6F\uFADA-\uFAFF\uFB07-\uFB12\uFB18-\uFB1C\uFB1E\uFB29\uFB37\uFB3D\uFB3F\uFB42\uFB45\uFBB2-\uFBD2\uFD3E-\uFD4F\uFD90\uFD91\uFDC8-\uFDEF\uFDFC-\uFE6F\uFE75\uFEFD-\uFF20\uFF3B-\uFF40\uFF5B-\uFF65\uFFBF-\uFFC1\uFFC8\uFFC9\uFFD0\uFFD1\uFFD8\uFFD9\uFFDD-\uFFFF]|\uD800[\uDC0C\uDC27\uDC3B\uDC3E\uDC4E\uDC4F\uDC5E-\uDC7F\uDCFB-\uDE7F\uDE9D-\uDE9F\uDED1-\uDEFF\uDF20-\uDF2C\uDF41\uDF4A-\uDF4F\uDF76-\uDF7F\uDF9E\uDF9F\uDFC4-\uDFC7\uDFD0-\uDFFF]|\uD801[\uDC9E-\uDCAF\uDCD4-\uDCD7\uDCFC-\uDCFF\uDD28-\uDD2F\uDD64-\uDD6F\uDD7B\uDD8B\uDD93\uDD96\uDDA2\uDDB2\uDDBA\uDDBD-\uDDFF\uDF37-\uDF3F\uDF56-\uDF5F\uDF68-\uDF7F\uDF86\uDFB1\uDFBB-\uDFFF]|\uD802[\uDC06\uDC07\uDC09\uDC36\uDC39-\uDC3B\uDC3D\uDC3E\uDC56-\uDC5F\uDC77-\uDC7F\uDC9F-\uDCDF\uDCF3\uDCF6-\uDCFF\uDD16-\uDD1F\uDD3A-\uDD7F\uDDB8-\uDDBD\uDDC0-\uDDFF\uDE01-\uDE0F\uDE14\uDE18\uDE36-\uDE5F\uDE7D-\uDE7F\uDE9D-\uDEBF\uDEC8\uDEE5-\uDEFF\uDF36-\uDF3F\uDF56-\uDF5F\uDF73-\uDF7F\uDF92-\uDFFF]|\uD803[\uDC49-\uDC7F\uDCB3-\uDCBF\uDCF3-\uDCFF\uDD24-\uDE7F\uDEAA-\uDEAF\uDEB2-\uDEFF\uDF1D-\uDF26\uDF28-\uDF2F\uDF46-\uDF6F\uDF82-\uDFAF\uDFC5-\uDFDF\uDFF7-\uDFFF]|\uD804[\uDC00-\uDC02\uDC38-\uDC70\uDC73\uDC74\uDC76-\uDC82\uDCB0-\uDCCF\uDCE9-\uDD02\uDD27-\uDD43\uDD45\uDD46\uDD48-\uDD4F\uDD73-\uDD75\uDD77-\uDD82\uDDB3-\uDDC0\uDDC5-\uDDD9\uDDDB\uDDDD-\uDDFF\uDE12\uDE2C-\uDE3E\uDE41-\uDE7F\uDE87\uDE89\uDE8E\uDE9E\uDEA9-\uDEAF\uDEDF-\uDF04\uDF0D\uDF0E\uDF11\uDF12\uDF29\uDF31\uDF34\uDF3A-\uDF3C\uDF3E-\uDF4F\uDF51-\uDF5C\uDF62-\uDFFF]|\uD805[\uDC35-\uDC46\uDC4B-\uDC5E\uDC62-\uDC7F\uDCB0-\uDCC3\uDCC6\uDCC8-\uDD7F\uDDAF-\uDDD7\uDDDC-\uDDFF\uDE30-\uDE43\uDE45-\uDE7F\uDEAB-\uDEB7\uDEB9-\uDEFF\uDF1B-\uDF3F\uDF47-\uDFFF]|\uD806[\uDC2C-\uDC9F\uDCE0-\uDCFE\uDD07\uDD08\uDD0A\uDD0B\uDD14\uDD17\uDD30-\uDD3E\uDD40\uDD42-\uDD9F\uDDA8\uDDA9\uDDD1-\uDDE0\uDDE2\uDDE4-\uDDFF\uDE01-\uDE0A\uDE33-\uDE39\uDE3B-\uDE4F\uDE51-\uDE5B\uDE8A-\uDE9C\uDE9E-\uDEAF\uDEF9-\uDFFF]|\uD807[\uDC09\uDC2F-\uDC3F\uDC41-\uDC71\uDC90-\uDCFF\uDD07\uDD0A\uDD31-\uDD45\uDD47-\uDD5F\uDD66\uDD69\uDD8A-\uDD97\uDD99-\uDEDF\uDEF3-\uDF01\uDF03\uDF11\uDF34-\uDFAF\uDFB1-\uDFFF]|\uD808[\uDF9A-\uDFFF]|\uD809[\uDC00-\uDC7F\uDD44-\uDFFF]|[\uD80A\uD80E-\uD810\uD812-\uD819\uD824-\uD82A\uD82D\uD82E\uD830-\uD834\uD836\uD83C-\uD83F\uD87C\uD87D\uD87F\uD889-\uDBFF][\uDC00-\uDFFF]|\uD80B[\uDC00-\uDF8F\uDFF1-\uDFFF]|\uD80D[\uDC30-\uDC40\uDC47-\uDFFF]|\uD811[\uDE47-\uDFFF]|\uD81A[\uDE39-\uDE3F\uDE5F-\uDE6F\uDEBF-\uDECF\uDEEE-\uDEFF\uDF30-\uDF3F\uDF44-\uDF62\uDF78-\uDF7C\uDF90-\uDFFF]|\uD81B[\uDC00-\uDE3F\uDE80-\uDEFF\uDF4B-\uDF4F\uDF51-\uDF92\uDFA0-\uDFDF\uDFE2\uDFE4-\uDFFF]|\uD821[\uDFF8-\uDFFF]|\uD823[\uDCD6-\uDCFF\uDD09-\uDFFF]|\uD82B[\uDC00-\uDFEF\uDFF4\uDFFC\uDFFF]|\uD82C[\uDD23-\uDD31\uDD33-\uDD4F\uDD53\uDD54\uDD56-\uDD63\uDD68-\uDD6F\uDEFC-\uDFFF]|\uD82F[\uDC6B-\uDC6F\uDC7D-\uDC7F\uDC89-\uDC8F\uDC9A-\uDFFF]|\uD835[\uDC55\uDC9D\uDCA0\uDCA1\uDCA3\uDCA4\uDCA7\uDCA8\uDCAD\uDCBA\uDCBC\uDCC4\uDD06\uDD0B\uDD0C\uDD15\uDD1D\uDD3A\uDD3F\uDD45\uDD47-\uDD49\uDD51\uDEA6\uDEA7\uDEC1\uDEDB\uDEFB\uDF15\uDF35\uDF4F\uDF6F\uDF89\uDFA9\uDFC3\uDFCC-\uDFFF]|\uD837[\uDC00-\uDEFF\uDF1F-\uDF24\uDF2B-\uDFFF]|\uD838[\uDC00-\uDC2F\uDC6E-\uDCFF\uDD2D-\uDD36\uDD3E-\uDD4D\uDD4F-\uDE8F\uDEAE-\uDEBF\uDEEC-\uDFFF]|\uD839[\uDC00-\uDCCF\uDCEC-\uDFDF\uDFE7\uDFEC\uDFEF\uDFFF]|\uD83A[\uDCC5-\uDCFF\uDD44-\uDD4A\uDD4C-\uDFFF]|\uD83B[\uDC00-\uDDFF\uDE04\uDE20\uDE23\uDE25\uDE26\uDE28\uDE33\uDE38\uDE3A\uDE3C-\uDE41\uDE43-\uDE46\uDE48\uDE4A\uDE4C\uDE50\uDE53\uDE55\uDE56\uDE58\uDE5A\uDE5C\uDE5E\uDE60\uDE63\uDE65\uDE66\uDE6B\uDE73\uDE78\uDE7D\uDE7F\uDE8A\uDE9C-\uDEA0\uDEA4\uDEAA\uDEBC-\uDFFF]|\uD869[\uDEE0-\uDEFF]|\uD86D[\uDF3A-\uDF3F]|\uD86E[\uDC1E\uDC1F]|\uD873[\uDEA2-\uDEAF]|\uD87A[\uDFE1-\uDFEF]|\uD87B[\uDE5E-\uDFFF]|\uD87E[\uDE1E-\uDFFF]|\uD884[\uDF4B-\uDF4F]|\uD888[\uDFB0-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/g,
                      "").replace
                    (" ", "-").toLowerCase
                   ());
              }
             }
             catch(err){_iterator18.e(err);}
             finally{_iterator18.f();}
             if(void 0 === m.eraYear)
              throw new
                     RangeError
                     ("Intl.DateTimeFormat.formatToParts lacks relatedYear in ".concat
                       (this.id, " calendar. Try Node 14+ or modern browsers."));
             if(this.reviseIntlEra){
              var
               _this$reviseIntlEra = this.reviseIntlEra(m, e),
               _t44 = _this$reviseIntlEra.era,
               _r60 = _this$reviseIntlEra.eraYear;
              m.era = _t44, m.eraYear = _r60;
             }
             this.checkIcuBugs && this.checkIcuBugs(e);
             var c = this.adjustCalendarDate(m, t, "constrain", ! 0);
             if(void 0 === c.year)
              throw new
                     RangeError
                     ("Missing year converting ".concat(JSON.stringify(e)));
             if(void 0 === c.month)
              throw new
                     RangeError
                     ("Missing month converting ".concat(JSON.stringify(e)));
             if(void 0 === c.day)
              throw new
                     RangeError
                     ("Missing day converting ".concat(JSON.stringify(e)));
             return t.set(a, c),
                    ["constrain", "reject"].forEach
                     (function(r){
                       var
                        o =
                          JSON.stringify
                           ({func: "calendarToIsoDate",
                             year: c.year,
                             month: c.month,
                             day: c.day,
                             overflow: r,
                             id: _this.id});
                       t.set(o, e);
                      }),
                    c;
            }},
           {key: "validateCalendarDate",
            value:
            function(e){
             var
              t = e.era,
              r = e.month,
              o = e.year,
              n = e.day,
              a = e.eraYear,
              i = e.monthCode,
              s = e.monthExtra;
             if(void 0 !== s)
              throw new RangeError("Unexpected `monthExtra` value");
             if(void 0 === o && void 0 === a)
              throw new TypeError("year or eraYear is required");
             if(void 0 === r && void 0 === i)
              throw new TypeError("month or monthCode is required");
             if(void 0 === n) throw new RangeError("Missing day");
             if(void 0 !== i){
              if("string" != typeof i)
               throw new
                      RangeError
                      ("monthCode must be a string, not " + _typeof(i));
              if(! /^M([01]?\d)(L?)$/.test(i))
               throw new RangeError("Invalid monthCode: ".concat(i));
             }
             if(this.constantEra){
              if(void 0 !== t && t !== this.constantEra)
               throw new
                      RangeError
                      ("era must be ".concat(this.constantEra, ", not ").concat(t));
              if(void 0 !== a && void 0 !== o && a !== o)
               throw new
                      RangeError
                      ("eraYear ".concat(a, " does not match year ").concat(o));
             }
             if(this.hasEra && void 0 === e.era != (void 0 === e.eraYear))
              throw new
                     RangeError
                     ("properties 'era' and 'eraYear' must be provided together");
            }},
           {key: "adjustCalendarDate",
            value:
            function(e, t){
             var
              _resolveNonLunisolarM,
              r =
                arguments.length > 2 && arguments[2] !== undefined
                 ? arguments[2]
                 : "constrain";
             if("lunisolar" === this.calendarType)
              throw new
                     RangeError
                     ("Override required for lunisolar calendars");
             var n = e;
             if(this.validateCalendarDate(n), this.constantEra){
              var _n21 = n, _e39 = _n21.year, _t46 = _n21.eraYear;
              n =
               _objectSpread2
                (_objectSpread2({}, n),
                 {},
                 {era: this.constantEra,
                  year: void 0 !== _e39 ? _e39 : _t46,
                  eraYear: void 0 !== _t46 ? _t46 : _e39});
             }
             var
              a = this.monthsInYear(n, t),
              _n22 = n,
              i = _n22.month,
              s = _n22.monthCode;
             return _resolveNonLunisolarM = resolveNonLunisolarMonth(n, r, a),
                    i = _resolveNonLunisolarM.month,
                    s = _resolveNonLunisolarM.monthCode,
                    _objectSpread2
                     (_objectSpread2({}, n), {}, {month: i, monthCode: s});
            }},
           {key: "regulateMonthDayNaive",
            value:
            function(e, t, r){
             var o = this.monthsInYear(e, r), n = e.month, a = e.day;
             return "reject" === t
                     ? (RejectToRange
                        (n, 1, o),
                       RejectToRange(a, 1, this.maximumMonthLength(e)))
                     : (n
                       = ConstrainToRange(n, 1, o),
                       a =
                        ConstrainToRange
                         (a,
                          1,
                          this.maximumMonthLength
                           (_objectSpread2(_objectSpread2({}, e), {}, {month: n})))),
                    _objectSpread2
                     (_objectSpread2({}, e), {}, {month: n, day: a});
            }},
           {key: "calendarToIsoDate",
            value:
            function(e){
             var
              _this2 = this,
              t =
                arguments.length > 1 && arguments[1] !== undefined
                 ? arguments[1]
                 : "constrain",
              r = arguments.length > 2 ? arguments[2] : undefined,
              o = e,
              n = this.adjustCalendarDate(e, r, t, ! 1);
             n = this.regulateMonthDayNaive(n, t, r);
             var
              _n23 = n,
              a = _n23.year,
              i = _n23.month,
              s = _n23.day,
              l =
                JSON.stringify
                 ({func: "calendarToIsoDate",
                   year: a,
                   month: i,
                   day: s,
                   overflow: t,
                   id: this.id}),
              d,
              m = r.get(l);
             if(m) return m;
             if
              (void 0 !== o.year && void 0 !== o.month && void 0 !== o.day
               &&
                (o.year !== n.year || o.month !== n.month || o.day !== n.day)
               &&
                (d =
                  JSON.stringify
                   ({func: "calendarToIsoDate",
                     year: o.year,
                     month: o.month,
                     day: o.day,
                     overflow: t,
                     id: this.id}),
                 m = r.get(d),
                 m))
              return m;
             var
              c = this.estimateIsoDate({year: a, month: i, day: s}),
              calculateSameMonthResult =
                function(e){
                 var o = _this2.addDaysIso(c, e);
                 if(n.day > _this2.minimumMonthLength(n)){
                  var _e40 = _this2.isoToCalendarDate(o, r);
                  for(; _e40.month !== i || _e40.year !== a;){
                   if("reject" === t)
                    throw new
                           RangeError
                           ("day ".concat(s, " does not exist in month ").concat
                              (i, " of year ").concat
                             (a));
                   o = _this2.addDaysIso(o, - 1),
                   _e40 = _this2.isoToCalendarDate(o, r);
                  }
                 }
                 return o;
                },
              h = 0,
              u = this.isoToCalendarDate(c, r),
              T = simpleDateDiff(n, u);
             if(0 !== T.years || 0 !== T.months || 0 !== T.days){
              var _e41 = 365 * T.years + 30 * T.months + T.days;
              c = this.addDaysIso(c, _e41),
              u = this.isoToCalendarDate(c, r),
              T = simpleDateDiff(n, u),
              0 === T.years && 0 === T.months
               ? c = calculateSameMonthResult(T.days)
               : h = this.compareCalendarDates(n, u);
             }
             var p = 8;
             for(; h;){
              c = this.addDaysIso(c, h * p);
              var _e42 = u;
              u = this.isoToCalendarDate(c, r);
              var _a17 = h;
              if(h = this.compareCalendarDates(n, u), h)
               if(T = simpleDateDiff(n, u), 0 === T.years && 0 === T.months)
                c = calculateSameMonthResult(T.days), h = 0;
               else if(_a17 && h !== _a17)
                if(p > 1)
                 p /= 2;
                else{
                 if("reject" === t)
                  throw new
                         RangeError
                         ("Can't find ISO date from calendar date: ".concat
                           (JSON.stringify(_objectSpread2({}, o))));
                 this.compareCalendarDates(u, _e42) > 0
                 && (c = this.addDaysIso(c, - 1)),
                 h = 0;
                }
             }
             if
              (r.set(l, c),
               d && r.set(d, c),
               void 0 === n.year || void 0 === n.month || void 0 === n.day
               || void 0 === n.monthCode
               || this.hasEra && (void 0 === n.era || void 0 === n.eraYear))
              throw new RangeError("Unexpected missing property");
             return c;
            }},
           {key: "temporalToCalendarDate",
            value:
            function(e, t){
             var
              r =
                {year: GetSlot(e, i),
                 month: GetSlot(e, s),
                 day: GetSlot(e, l)};
             return this.isoToCalendarDate(r, t);
            }},
           {key: "compareCalendarDates",
            value:
            function(e, t){
             var
              r =
                PrepareTemporalFields
                 (e, ["day", "month", "year"], ["day", "month", "year"]),
              o =
                PrepareTemporalFields
                 (t, ["day", "month", "year"], ["day", "month", "year"]);
             return r.year !== o.year
                     ? ComparisonResult(r.year - o.year)
                     : r.month
                       !== o.month
                       ? ComparisonResult(r.month - o.month)
                       : r.day !== o.day ? ComparisonResult(r.day - o.day) : 0;
            }},
           {key: "regulateDate",
            value:
            function(e){
             var
              t =
                arguments.length > 1 && arguments[1] !== undefined
                 ? arguments[1]
                 : "constrain",
              r = arguments.length > 2 ? arguments[2] : undefined,
              o = this.calendarToIsoDate(e, t, r);
             return this.isoToCalendarDate(o, r);
            }},
           {key: "addDaysIso",
            value:
            function(e, t){
             return AddISODate
                     (e.year, e.month, e.day, 0, 0, 0, t, "constrain");
            }},
           {key: "addDaysCalendar",
            value:
            function(e, t, r){
             var
              o = this.calendarToIsoDate(e, "constrain", r),
              n = this.addDaysIso(o, t);
             return this.isoToCalendarDate(n, r);
            }},
           {key: "addMonthsCalendar",
            value:
            function(e, t, r, o){
             var n = e, _n24 = n, a = _n24.day;
             for(var _e43 = 0, _r61 = It(t); _e43 < _r61; _e43++){
              var
               _n25 = n,
               _e44 = _n25.month,
               _r62 = n,
               _i18 =
                 t < 0
                  ? - Math.max(a, this.daysInPreviousMonth(n, o))
                  : this.daysInMonth(n, o),
               _s7 = this.calendarToIsoDate(n, "constrain", o),
               _l7 = this.addDaysIso(_s7, _i18);
              if(n = this.isoToCalendarDate(_l7, o), t > 0){
               var _t47 = this.monthsInYear(_r62, o);
               for(; n.month - 1 != _e44 % _t47;)
                _l7 = this.addDaysIso(_l7, - 1),
                n = this.isoToCalendarDate(_l7, o);
              }
              n.day !== a
              &&
               (n =
                this.regulateDate
                 (_objectSpread2(_objectSpread2({}, n), {}, {day: a}),
                  "constrain",
                  o));
             }
             if("reject" === r && n.day !== a)
              throw new
                     RangeError
                     ("Day ".concat
                       (a, " does not exist in resulting calendar month"));
             return n;
            }},
           {key: "addCalendar",
            value:
            function(e, _ref9, a, i){
             var
              _ref9$years = _ref9.years,
              t = _ref9$years === void 0 ? 0 : _ref9$years,
              _ref9$months = _ref9.months,
              r = _ref9$months === void 0 ? 0 : _ref9$months,
              _ref9$weeks = _ref9.weeks,
              o = _ref9$weeks === void 0 ? 0 : _ref9$weeks,
              _ref9$days = _ref9.days,
              n = _ref9$days === void 0 ? 0 : _ref9$days,
              s = e.year,
              l = e.day,
              d = e.monthCode,
              m =
                this.adjustCalendarDate
                 ({year: s + t, monthCode: d, day: l}, i),
              c = this.addMonthsCalendar(m, r, a, i),
              h = n + 7 * o;
             return this.addDaysCalendar(c, h, i);
            }},
           {key: "untilCalendar",
            value:
            function(e, t, r, o){
             var n = 0, a = 0, i = 0, s = 0;
             switch(r){
               case "day":
                n = this.calendarDaysUntil(e, t, o); break;
               case "week":
                {
                 var _r63 = this.calendarDaysUntil(e, t, o);
                 n = _r63 % 7, a = (_r63 - n) / 7;
                 break;
                }
               case "month":
               case "year":
                {
                 var _a18 = this.compareCalendarDates(t, e);
                 if(! _a18) return {years: 0, months: 0, weeks: 0, days: 0};
                 var _l8 = t.year - e.year, _d10 = t.day - e.day;
                 if("year" === r && _l8){
                  var _r64 = 0;
                  t.monthCode > e.monthCode && (_r64 = 1),
                  t.monthCode < e.monthCode && (_r64 = - 1),
                  _r64 || (_r64 = Math.sign(_d10));
                  s = _r64 * _a18 < 0 ? _l8 - _a18 : _l8;
                 }
                 var
                  _m9,
                  _c5 =
                    s ? this.addCalendar(e, {years: s}, "constrain", o) : e;
                 do
                  i += _a18,
                  _m9 = _c5,
                  _c5 = this.addMonthsCalendar(_m9, _a18, "constrain", o),
                  _c5.day !== e.day
                  &&
                   (_c5 =
                    this.regulateDate
                     (_objectSpread2(_objectSpread2({}, _c5), {}, {day: e.day}),
                      "constrain",
                      o));
                 while
                  (this.compareCalendarDates(t, _c5) * _a18 >= 0);
                 i -= _a18;
                 n = this.calendarDaysUntil(_m9, t, o);
                 break;
                }
             }
             return {years: s, months: i, weeks: a, days: n};
            }},
           {key: "daysInMonth",
            value:
            function(e, t){
             var
              r = e.day,
              o = this.maximumMonthLength(e),
              n = this.minimumMonthLength(e);
             if(n === o) return n;
             var
              a = r <= o - n ? o : n,
              i = this.calendarToIsoDate(e, "constrain", t),
              s = this.addDaysIso(i, a),
              l = this.isoToCalendarDate(s, t),
              d = this.addDaysIso(s, - l.day);
             return this.isoToCalendarDate(d, t).day;
            }},
           {key: "daysInPreviousMonth",
            value:
            function(e, t){
             var
              r = e.day,
              o = e.month,
              n = e.year,
              a = {year: o > 1 ? n : n - 1, month: o, day: 1},
              i = o > 1 ? o - 1 : this.monthsInYear(a, t);
             a = _objectSpread2(_objectSpread2({}, a), {}, {month: i});
             var
              s = this.minimumMonthLength(a),
              l = this.maximumMonthLength(a);
             if(s === l) return l;
             var
              d = this.calendarToIsoDate(e, "constrain", t),
              m = this.addDaysIso(d, - r);
             return this.isoToCalendarDate(m, t).day;
            }},
           {key: "startOfCalendarYear",
            value:
            function(e){
             return {year: e.year, month: 1, monthCode: "M01", day: 1};
            }},
           {key: "startOfCalendarMonth",
            value: function(e){return {year: e.year, month: e.month, day: 1};}},
           {key: "calendarDaysUntil",
            value:
            function(e, t, r){
             var
              o = this.calendarToIsoDate(e, "constrain", r),
              n = this.calendarToIsoDate(t, "constrain", r);
             return this.isoDaysUntil(o, n);
            }},
           {key: "isoDaysUntil",
            value:
            function(e, t){
             return DifferenceISODate
                     (e.year, e.month, e.day, t.year, t.month, t.day, "day").days;
            }},
           {key: "monthDayFromFields",
            value:
            function(e, t, r){
             var o, n, a, i, s, l = e.monthCode, d = e.day;
             if(void 0 === l){
              var _o37 = e.year, _n26 = e.era, _a19 = e.eraYear;
              if(void 0 === _o37 && (void 0 === _n26 || void 0 === _a19))
               throw new
                      TypeError
                      ("when `monthCode` is omitted, `year` (or `era` and `eraYear`) and `month` are required");
              var
               _this$isoToCalendarDa =
                 this.isoToCalendarDate(this.calendarToIsoDate(e, t, r), r);
              l = _this$isoToCalendarDa.monthCode;
              d = _this$isoToCalendarDa.day;
             }
             var
              m = this.isoToCalendarDate({year: 1972, month: 12, day: 31}, r),
              c =
                m.monthCode > l || m.monthCode === l && m.day >= d
                 ? m.year
                 : m.year - 1;
             for(var _e45 = 0; _e45 < 100; _e45++){
              var
               _m10 =
                 this.adjustCalendarDate
                  ({day: d, monthCode: l, year: c - _e45}, r),
               _h3 = this.calendarToIsoDate(_m10, "constrain", r),
               _u2 = this.isoToCalendarDate(_h3, r);
              if
               (o = _h3.year,
                n = _h3.month,
                a = _h3.day,
                _u2.monthCode === l && _u2.day === d)
               return {month: n, day: a, year: o};
              "constrain" === t
              &&
               (void 0 === i
               || _u2.monthCode === i.monthCode && _u2.day > i.day)
              && (i = _u2, s = _h3);
             }
             if("constrain" === t && void 0 !== s) return s;
             throw new
                    RangeError
                    ("No recent ".concat(this.id, " year with monthCode ").concat
                       (l, " and day ").concat
                      (d));
            }}]);
        return HelperBase;
       }
       (),
    HebrewHelper =
      function(_HelperBase){
        _inherits(HebrewHelper, _HelperBase);
        var _super = _createSuper(HebrewHelper);
        function HebrewHelper(){
         var _this3;
         _classCallCheck(this, HebrewHelper);
         _this3 = _super.apply(this, arguments),
         _this3.id = "hebrew",
         _this3.calendarType = "lunisolar",
         _this3.months =
          {Tishri: {leap: 1, regular: 1, monthCode: "M01", days: 30},
           Heshvan:
           {leap: 2, regular: 2, monthCode: "M02", days: {min: 29, max: 30}},
           Kislev:
           {leap: 3, regular: 3, monthCode: "M03", days: {min: 29, max: 30}},
           Tevet: {leap: 4, regular: 4, monthCode: "M04", days: 29},
           Shevat: {leap: 5, regular: 5, monthCode: "M05", days: 30},
           Adar: {leap: void 0, regular: 6, monthCode: "M06", days: 29},
           "Adar I": {leap: 6, regular: void 0, monthCode: "M05L", days: 30},
           "Adar II": {leap: 7, regular: void 0, monthCode: "M06", days: 29},
           Nisan: {leap: 8, regular: 7, monthCode: "M07", days: 30},
           Iyar: {leap: 9, regular: 8, monthCode: "M08", days: 29},
           Sivan: {leap: 10, regular: 9, monthCode: "M09", days: 30},
           Tamuz: {leap: 11, regular: 10, monthCode: "M10", days: 29},
           Av: {leap: 12, regular: 11, monthCode: "M11", days: 30},
           Elul: {leap: 13, regular: 12, monthCode: "M12", days: 29}},
         _this3.hasEra = ! 1;
         return _this3;
        }
        _createClass
         (HebrewHelper,
          [{key: "inLeapYear",
            value: function(e){var t = e.year; return (7 * t + 1) % 19 < 7;}},
           {key: "monthsInYear",
            value: function(e){return this.inLeapYear(e) ? 13 : 12;}},
           {key: "minimumMonthLength",
            value: function(e){return this.minMaxMonthLength(e, "min");}},
           {key: "maximumMonthLength",
            value: function(e){return this.minMaxMonthLength(e, "max");}},
           {key: "minMaxMonthLength",
            value:
            function(e, t){
             var
              r = e.month,
              o = e.year,
              n = this.getMonthCode(o, r),
              a =
                wt(this.months).find
                 (function(e){return e[1].monthCode === n;});
             if(void 0 === a)
              throw new RangeError("unmatched Hebrew month: ".concat(r));
             var i = a[1].days;
             return "number" == typeof i ? i : i[t];
            }},
           {key: "estimateIsoDate",
            value:
            function(e){
             var t = e.year;
             return {year: t - 3760, month: 1, day: 1};
            }},
           {key: "getMonthCode",
            value:
            function(e, t){
             return this.inLeapYear({year: e})
                     ? 6
                       === t
                       ? buildMonthCode(5, ! 0)
                       : buildMonthCode(t < 6 ? t : t - 1)
                     : buildMonthCode(t);
            }},
           {key: "adjustCalendarDate",
            value:
            function(e, t){
             var
              r =
                arguments.length > 2 && arguments[2] !== undefined
                 ? arguments[2]
                 : "constrain",
              o =
                arguments.length > 3 && arguments[3] !== undefined
                 ? arguments[3]
                 : ! 1,
              n = e.year,
              a = e.eraYear,
              i = e.month,
              s = e.monthCode,
              l = e.day,
              d = e.monthExtra;
             if
              (void 0 === n && void 0 !== a && (n = a),
               void 0 === a && void 0 !== n && (a = n),
               o){
              if(d){
               var _e46 = this.months[d];
               if(! _e46)
                throw new
                       RangeError
                       ("Unrecognized month from formatToParts: ".concat(d));
               i = this.inLeapYear({year: n}) ? _e46.leap : _e46.regular;
              }
              s = this.getMonthCode(n, i);
              return {year: n,
                      month: i,
                      day: l,
                      era: void 0,
                      eraYear: a,
                      monthCode: s};
             }
             if(this.validateCalendarDate(e), void 0 === i)
              if(s.endsWith("L")){
               if("M05L" !== s)
                throw new
                       RangeError
                       ("Hebrew leap month must have monthCode M05L, not ".concat
                         (s));
               if(i = 6, ! this.inLeapYear({year: n})){
                if("reject" === r)
                 throw new
                        RangeError
                        ("Hebrew monthCode M05L is invalid in year ".concat
                          (n, " which is not a leap year"));
                i = 6, s = "M06";
               }
              }
              else{
               i = monthCodeNumberPart(s),
               this.inLeapYear({year: n}) && i >= 6 && i++;
               var _e47 = this.monthsInYear({year: n});
               if(i < 1 || i > _e47)
                throw new RangeError("Invalid monthCode: ".concat(s));
              }
             else if
              ("reject" === r
                ? (RejectToRange
                   (i, 1, this.monthsInYear({year: n})),
                  RejectToRange
                   (l, 1, this.maximumMonthLength({year: n, month: i})))
                : (i
                  = ConstrainToRange(i, 1, this.monthsInYear({year: n})),
                  l =
                   ConstrainToRange
                    (l, 1, this.maximumMonthLength({year: n, month: i}))),
               void 0 === s)
              s = this.getMonthCode(n, i);
             else if(this.getMonthCode(n, i) !== s)
              throw new
                     RangeError
                     ("monthCode ".concat(s, " doesn't correspond to month ").concat
                        (i, " in Hebrew year ").concat
                       (n));
             return _objectSpread2
                     (_objectSpread2({}, e),
                      {},
                      {day: l, month: i, monthCode: s, year: n, eraYear: a});
            }}]);
        return HebrewHelper;
       }
       (HelperBase),
    IslamicBaseHelper =
      function(_HelperBase2){
        _inherits(IslamicBaseHelper, _HelperBase2);
        var _super2 = _createSuper(IslamicBaseHelper);
        function IslamicBaseHelper(){
         var _this4;
         _classCallCheck(this, IslamicBaseHelper);
         _this4 = _super2.apply(this, arguments),
         _this4.calendarType = "lunar",
         _this4.DAYS_PER_ISLAMIC_YEAR = 354 + 11 / 30,
         _this4.DAYS_PER_ISO_YEAR = 365.2425,
         _this4.constantEra = "ah";
         return _this4;
        }
        _createClass
         (IslamicBaseHelper,
          [{key: "inLeapYear",
            value:
            function(e, t){
             return 30
                    === this.daysInMonth({year: e.year, month: 12, day: 1}, t);
            }},
           {key: "monthsInYear", value: function(){return 12;}},
           {key: "minimumMonthLength", value: function(){return 29;}},
           {key: "maximumMonthLength", value: function(){return 30;}},
           {key: "estimateIsoDate",
            value:
            function(e){
             var
              _this$adjustCalendarD = this.adjustCalendarDate(e),
              t = _this$adjustCalendarD.year;
             return {year:
                     St(t * this.DAYS_PER_ISLAMIC_YEAR / this.DAYS_PER_ISO_YEAR)
                     + 622,
                     month: 1,
                     day: 1};
            }}]);
        return IslamicBaseHelper;
       }
       (HelperBase),
    IslamicHelper =
      function(_IslamicBaseHelper){
        _inherits(IslamicHelper, _IslamicBaseHelper);
        var _super3 = _createSuper(IslamicHelper);
        function IslamicHelper(){
         var _this5;
         _classCallCheck(this, IslamicHelper);
         _this5 = _super3.apply(this, arguments), _this5.id = "islamic";
         return _this5;
        }
        return _createClass(IslamicHelper);
       }
       (IslamicBaseHelper),
    IslamicUmalquraHelper =
      function(_IslamicBaseHelper2){
        _inherits(IslamicUmalquraHelper, _IslamicBaseHelper2);
        var _super4 = _createSuper(IslamicUmalquraHelper);
        function IslamicUmalquraHelper(){
         var _this6;
         _classCallCheck(this, IslamicUmalquraHelper);
         _this6 = _super4.apply(this, arguments),
         _this6.id = "islamic-umalqura";
         return _this6;
        }
        return _createClass(IslamicUmalquraHelper);
       }
       (IslamicBaseHelper),
    IslamicTblaHelper =
      function(_IslamicBaseHelper3){
        _inherits(IslamicTblaHelper, _IslamicBaseHelper3);
        var _super5 = _createSuper(IslamicTblaHelper);
        function IslamicTblaHelper(){
         var _this7;
         _classCallCheck(this, IslamicTblaHelper);
         _this7 = _super5.apply(this, arguments), _this7.id = "islamic-tbla";
         return _this7;
        }
        return _createClass(IslamicTblaHelper);
       }
       (IslamicBaseHelper),
    IslamicCivilHelper =
      function(_IslamicBaseHelper4){
        _inherits(IslamicCivilHelper, _IslamicBaseHelper4);
        var _super6 = _createSuper(IslamicCivilHelper);
        function IslamicCivilHelper(){
         var _this8;
         _classCallCheck(this, IslamicCivilHelper);
         _this8 = _super6.apply(this, arguments), _this8.id = "islamic-civil";
         return _this8;
        }
        return _createClass(IslamicCivilHelper);
       }
       (IslamicBaseHelper),
    IslamicRgsaHelper =
      function(_IslamicBaseHelper5){
        _inherits(IslamicRgsaHelper, _IslamicBaseHelper5);
        var _super7 = _createSuper(IslamicRgsaHelper);
        function IslamicRgsaHelper(){
         var _this9;
         _classCallCheck(this, IslamicRgsaHelper);
         _this9 = _super7.apply(this, arguments), _this9.id = "islamic-rgsa";
         return _this9;
        }
        return _createClass(IslamicRgsaHelper);
       }
       (IslamicBaseHelper),
    IslamicCcHelper =
      function(_IslamicBaseHelper6){
        _inherits(IslamicCcHelper, _IslamicBaseHelper6);
        var _super8 = _createSuper(IslamicCcHelper);
        function IslamicCcHelper(){
         var _this10;
         _classCallCheck(this, IslamicCcHelper);
         _this10 = _super8.apply(this, arguments), _this10.id = "islamicc";
         return _this10;
        }
        return _createClass(IslamicCcHelper);
       }
       (IslamicBaseHelper),
    PersianHelper =
      function(_HelperBase3){
        _inherits(PersianHelper, _HelperBase3);
        var _super9 = _createSuper(PersianHelper);
        function PersianHelper(){
         var _this11;
         _classCallCheck(this, PersianHelper);
         _this11 = _super9.apply(this, arguments),
         _this11.id = "persian",
         _this11.calendarType = "solar",
         _this11.constantEra = "ap";
         return _this11;
        }
        _createClass
         (PersianHelper,
          [{key: "inLeapYear",
            value:
            function(e, t){
             return IslamicHelper.prototype.inLeapYear.call(this, e, t);
            }},
           {key: "monthsInYear", value: function(){return 12;}},
           {key: "minimumMonthLength",
            value:
            function(e){
             var t = e.month;
             return 12 === t ? 29 : t <= 6 ? 31 : 30;
            }},
           {key: "maximumMonthLength",
            value:
            function(e){
             var t = e.month;
             return 12 === t ? 30 : t <= 6 ? 31 : 30;
            }},
           {key: "estimateIsoDate",
            value:
            function(e){
             var
              _this$adjustCalendarD2 = this.adjustCalendarDate(e),
              t = _this$adjustCalendarD2.year;
             return {year: t + 621, month: 1, day: 1};
            }}]);
        return PersianHelper;
       }
       (HelperBase),
    IndianHelper =
      function(_HelperBase4){
        _inherits(IndianHelper, _HelperBase4);
        var _super10 = _createSuper(IndianHelper);
        function IndianHelper(){
         var _this12;
         _classCallCheck(this, IndianHelper);
         _this12 = _super10.apply(this, arguments),
         _this12.id = "indian",
         _this12.calendarType = "solar",
         _this12.constantEra = "saka",
         _this12.months =
          {1:
           {length: 30,
            month: 3,
            day: 22,
            leap: {length: 31, month: 3, day: 21}},
           2: {length: 31, month: 4, day: 21},
           3: {length: 31, month: 5, day: 22},
           4: {length: 31, month: 6, day: 22},
           5: {length: 31, month: 7, day: 23},
           6: {length: 31, month: 8, day: 23},
           7: {length: 30, month: 9, day: 23},
           8: {length: 30, month: 10, day: 23},
           9: {length: 30, month: 11, day: 22},
           10: {length: 30, month: 12, day: 22},
           11: {length: 30, month: 1, nextYear: ! 0, day: 21},
           12: {length: 30, month: 2, nextYear: ! 0, day: 20}},
         _this12.vulnerableToBceBug =
          "10/11/-79 Saka"
          !==
           new Date("0000-01-01T00:00Z").toLocaleDateString
            ("en-US-u-ca-indian", {timeZone: "UTC"});
         return _this12;
        }
        _createClass
         (IndianHelper,
          [{key: "inLeapYear",
            value: function(e){return isGregorianLeapYear(e.year + 78);}},
           {key: "monthsInYear", value: function(){return 12;}},
           {key: "minimumMonthLength",
            value: function(e){return this.getMonthInfo(e).length;}},
           {key: "maximumMonthLength",
            value: function(e){return this.getMonthInfo(e).length;}},
           {key: "getMonthInfo",
            value:
            function(e){
             var t = e.month, r = this.months[t];
             if(void 0 === r)
              throw new RangeError("Invalid month: ".concat(t));
             return this.inLeapYear(e) && r.leap && (r = r.leap), r;
            }},
           {key: "estimateIsoDate",
            value:
            function(e){
             var t = this.adjustCalendarDate(e), r = this.getMonthInfo(t);
             return AddISODate
                     (t.year + 78 + (r.nextYear ? 1 : 0),
                      r.month,
                      r.day,
                      0,
                      0,
                      0,
                      t.day - 1,
                      "constrain");
            }},
           {key: "checkIcuBugs",
            value:
            function(e){
             if(this.vulnerableToBceBug && e.year < 1)
              throw new
                     RangeError
                     ("calendar '".concat
                       (this.id,
                        "' is broken for ISO dates before 0001-01-01 (see https://bugs.chromium.org/p/v8/issues/detail?id=10529)"));
            }}]);
        return IndianHelper;
       }
       (HelperBase);
   function isGregorianLeapYear(e){
    return e % 4 == 0 && (e % 100 != 0 || e % 400 == 0);
   }
   var
    GregorianBaseHelper =
      function(_HelperBase5){
        _inherits(GregorianBaseHelper, _HelperBase5);
        var _super11 = _createSuper(GregorianBaseHelper);
        function GregorianBaseHelper(e, t){
         var _this13;
         _classCallCheck(this, GregorianBaseHelper);
         _this13 = _super11.call(this),
         _this13.calendarType = "solar",
         _this13.v8IsVulnerableToJulianBug =
          new Date("+001001-01-01T00:00Z").toLocaleDateString
            ("en-US-u-ca-japanese", {timeZone: "UTC"}).startsWith
           ("12"),
         _this13.calendarIsVulnerableToJulianBug = ! 1,
         _this13.id = e;
         var
          _adjustEras =
            function(e){
              var t, r = e;
              if(0 === r.length)
               throw new RangeError("Invalid era data: eras are required");
              if(1 === r.length && r[0].reverseOf)
               throw new
                      RangeError
                      ("Invalid era data: anchor era cannot count years backwards");
              if(1 === r.length && ! r[0].name)
               throw new
                      RangeError
                      ("Invalid era data: at least one named era is required");
              if
               (r.filter(function(e){return null != e.reverseOf;}).length > 1)
               throw new
                      RangeError
                      ("Invalid era data: only one era can count years backwards");
              r.forEach
               (function(e){
                 if(e.isAnchor || ! e.anchorEpoch && ! e.reverseOf){
                  if(t)
                   throw new
                          RangeError
                          ("Invalid era data: cannot have multiple anchor eras");
                  t = e, e.anchorEpoch = {year: e.hasYearZero ? 0 : 1};
                 }
                 else if(! e.name)
                  throw new
                         RangeError
                         ("If era name is blank, it must be the anchor era");
                }),
              r = r.filter(function(e){return e.name;}),
              r.forEach
               (function(e){
                 var t = e.reverseOf;
                 if(t){
                  var _o38 = r.find(function(e){return e.name === t;});
                  if(void 0 === _o38)
                   throw new
                          RangeError
                          ("Invalid era data: unmatched reverseOf era: ".concat(t));
                  e.reverseOf = _o38,
                  e.anchorEpoch = _o38.anchorEpoch,
                  e.isoEpoch = _o38.isoEpoch;
                 }
                 void 0 === e.anchorEpoch.month && (e.anchorEpoch.month = 1),
                 void 0 === e.anchorEpoch.day && (e.anchorEpoch.day = 1);
                }),
              yt.call
               (r,
                function(e, t){
                 if(e.reverseOf) return 1;
                 if(t.reverseOf) return - 1;
                 if(! e.isoEpoch || ! t.isoEpoch)
                  throw new RangeError("Invalid era data: missing ISO epoch");
                 return t.isoEpoch.year - e.isoEpoch.year;
                });
              var o = r[r.length - 1].reverseOf;
              if(o && o !== r[r.length - 2])
               throw new
                      RangeError
                      ("Invalid era data: invalid reverse-sign era");
              return r.forEach
                      (function(e, t){e.genericName = "era" + (r.length - 1 - t);}),
                     {eras: r, anchorEra: t || r[0]};
             }
             (t),
          r = _adjustEras.eras,
          o = _adjustEras.anchorEra;
         _this13.anchorEra = o, _this13.eras = r;
         return _this13;
        }
        _createClass
         (GregorianBaseHelper,
          [{key: "inLeapYear",
            value:
            function(e){
             var
              _this$estimateIsoDate =
                this.estimateIsoDate({month: 1, day: 1, year: e.year}),
              t = _this$estimateIsoDate.year;
             return isGregorianLeapYear(t);
            }},
           {key: "monthsInYear", value: function(){return 12;}},
           {key: "minimumMonthLength",
            value:
            function(e){
             var t = e.month;
             return 2 === t
                     ? this.inLeapYear(e) ? 29 : 28
                     : [4, 6, 9, 11].indexOf(t) >= 0 ? 30 : 31;
            }},
           {key: "maximumMonthLength",
            value: function(e){return this.minimumMonthLength(e);}},
           {key: "completeEraYear",
            value:
            function(e){
             var
              _this14 = this,
              _eraFromYear,
              checkField =
                function(t, r){
                 var o = e[t];
                 if(null != o && o != r)
                  throw new
                         RangeError
                         ("Input ".concat(t, " ").concat
                            (o, " doesn't match calculated value ").concat
                           (r));
                },
              eraFromYear =
                function(t){
                 var
                  r,
                  o = _objectSpread2(_objectSpread2({}, e), {}, {year: t}),
                  n =
                    _this14.eras.find
                     (function(e, n){
                       if(n === _this14.eras.length - 1){
                        if(e.reverseOf){
                         if(t > 0)
                          throw new
                                 RangeError
                                 ("Signed year ".concat(t, " is invalid for era ").concat
                                   (e.name));
                         return r = e.anchorEpoch.year - t, ! 0;
                        }
                        return r = t - e.anchorEpoch.year + (e.hasYearZero ? 0 : 1),
                               !
                               0;
                       }
                       return _this14.compareCalendarDates(o, e.anchorEpoch) >= 0
                              &&
                               (r = t - e.anchorEpoch.year + (e.hasYearZero ? 0 : 1), ! 0);
                      });
                 if(! n)
                  throw new
                         RangeError
                         ("Year ".concat(t, " was not matched by any era"));
                 return {eraYear: r, era: n.name};
                },
              t = e.year,
              r = e.eraYear,
              o = e.era;
             if(null != t)
              _eraFromYear = eraFromYear(t),
              r = _eraFromYear.eraYear,
              o = _eraFromYear.era,
              checkField("era", o),
              checkField("eraYear", r);
             else{
              if(null == r)
               throw new
                      RangeError
                      ("Either `year` or `eraYear` and `era` are required");
              {
               var
                _eraFromYear2,
                _e48 =
                  void 0 === o
                   ? void 0
                   : this.eras.find
                     (function(e){return e.name === o || e.genericName === o;});
               if(! _e48)
                throw new
                       RangeError
                       ("Era ".concat(o, " (ISO year ").concat
                         (r, ") was not matched by any era"));
               if(r < 1 && _e48.reverseOf)
                throw new
                       RangeError
                       ("Years in ".concat(o, " era must be positive, not ").concat
                         (t));
               t =
                _e48.reverseOf
                 ? _e48.anchorEpoch.year - r
                 : r + _e48.anchorEpoch.year - (_e48.hasYearZero ? 0 : 1),
               checkField("year", t),
               _eraFromYear2 = eraFromYear(t),
               r = _eraFromYear2.eraYear,
               o = _eraFromYear2.era;
              }
             }
             return _objectSpread2
                     (_objectSpread2({}, e), {}, {year: t, eraYear: r, era: o});
            }},
           {key: "adjustCalendarDate",
            value:
            function(e, t){
             var
              r =
                arguments.length > 2 && arguments[2] !== undefined
                 ? arguments[2]
                 : "constrain",
              o = e,
              _o39 = o,
              n = _o39.month,
              a = _o39.monthCode;
             return void 0 === n
                    &&
                     (o =
                      _objectSpread2
                       (_objectSpread2({}, o), {}, {month: monthCodeNumberPart(a)})),
                    this.validateCalendarDate(o),
                    o = this.completeEraYear(o),
                    _get
                      (_getPrototypeOf(GregorianBaseHelper.prototype),
                       "adjustCalendarDate",
                       this).call
                     (this, o, t, r);
            }},
           {key: "estimateIsoDate",
            value:
            function(e){
             var
              t = this.adjustCalendarDate(e),
              r = t.year,
              o = t.month,
              n = t.day,
              a = this.anchorEra;
             return RegulateISODate
                     (r + a.isoEpoch.year - (a.hasYearZero ? 0 : 1),
                      o,
                      n,
                      "constrain");
            }},
           {key: "checkIcuBugs",
            value:
            function(e){
             if
              (this.calendarIsVulnerableToJulianBug
               && this.v8IsVulnerableToJulianBug)
              if(CompareISODate(e.year, e.month, e.day, 1582, 10, 15) < 0)
               throw new
                      RangeError
                      ("calendar '".concat
                        (this.id,
                         "' is broken for ISO dates before 1582-10-15 (see https://bugs.chromium.org/p/chromium/issues/detail?id=1173158)"));
            }}]);
        return GregorianBaseHelper;
       }
       (HelperBase),
    OrthodoxBaseHelper =
      function(_GregorianBaseHelper){
        _inherits(OrthodoxBaseHelper, _GregorianBaseHelper);
        var _super12 = _createSuper(OrthodoxBaseHelper);
        function OrthodoxBaseHelper(e, t){
         _classCallCheck(this, OrthodoxBaseHelper);
         return _super12.call(this, e, t);
        }
        _createClass
         (OrthodoxBaseHelper,
          [{key: "inLeapYear",
            value: function(e){var t = e.year; return (t + 1) % 4 == 0;}},
           {key: "monthsInYear", value: function(){return 13;}},
           {key: "minimumMonthLength",
            value:
            function(e){
             var t = e.month;
             return 13 === t ? this.inLeapYear(e) ? 6 : 5 : 30;
            }},
           {key: "maximumMonthLength",
            value: function(e){return this.minimumMonthLength(e);}}]);
        return OrthodoxBaseHelper;
       }
       (GregorianBaseHelper),
    EthioaaHelper =
      function(_OrthodoxBaseHelper){
        _inherits(EthioaaHelper, _OrthodoxBaseHelper);
        var _super13 = _createSuper(EthioaaHelper);
        function EthioaaHelper(){
         _classCallCheck(this, EthioaaHelper);
         return _super13.call
                 (this,
                  "ethioaa",
                  [{name: "era0", isoEpoch: {year: - 5492, month: 7, day: 17}}]);
        }
        return _createClass(EthioaaHelper);
       }
       (OrthodoxBaseHelper),
    CopticHelper =
      function(_OrthodoxBaseHelper2){
        _inherits(CopticHelper, _OrthodoxBaseHelper2);
        var _super14 = _createSuper(CopticHelper);
        function CopticHelper(){
         _classCallCheck(this, CopticHelper);
         return _super14.call
                 (this,
                  "coptic",
                  [{name: "era1", isoEpoch: {year: 284, month: 8, day: 29}},
                   {name: "era0", reverseOf: "era1"}]);
        }
        return _createClass(CopticHelper);
       }
       (OrthodoxBaseHelper),
    EthiopicHelper =
      function(_OrthodoxBaseHelper3){
        _inherits(EthiopicHelper, _OrthodoxBaseHelper3);
        var _super15 = _createSuper(EthiopicHelper);
        function EthiopicHelper(){
         _classCallCheck(this, EthiopicHelper);
         return _super15.call
                 (this,
                  "ethiopic",
                  [{name: "era0", isoEpoch: {year: - 5492, month: 7, day: 17}},
                   {name: "era1",
                    isoEpoch: {year: 8, month: 8, day: 27},
                    anchorEpoch: {year: 5501}}]);
        }
        return _createClass(EthiopicHelper);
       }
       (OrthodoxBaseHelper),
    RocHelper =
      function(_GregorianBaseHelper2){
        _inherits(RocHelper, _GregorianBaseHelper2);
        var _super16 = _createSuper(RocHelper);
        function RocHelper(){
         var _this15;
         _classCallCheck(this, RocHelper);
         _this15 =
          _super16.call
           (this,
            "roc",
            [{name: "minguo", isoEpoch: {year: 1912, month: 1, day: 1}},
             {name: "before-roc", reverseOf: "minguo"}]),
         _this15.calendarIsVulnerableToJulianBug = ! 0;
         return _this15;
        }
        return _createClass(RocHelper);
       }
       (GregorianBaseHelper),
    BuddhistHelper =
      function(_GregorianBaseHelper3){
        _inherits(BuddhistHelper, _GregorianBaseHelper3);
        var _super17 = _createSuper(BuddhistHelper);
        function BuddhistHelper(){
         var _this16;
         _classCallCheck(this, BuddhistHelper);
         _this16 =
          _super17.call
           (this,
            "buddhist",
            [{name: "be",
              hasYearZero: ! 0,
              isoEpoch: {year: - 543, month: 1, day: 1}}]),
         _this16.calendarIsVulnerableToJulianBug = ! 0;
         return _this16;
        }
        return _createClass(BuddhistHelper);
       }
       (GregorianBaseHelper),
    GregoryHelper =
      function(_GregorianBaseHelper4){
        _inherits(GregoryHelper, _GregorianBaseHelper4);
        var _super18 = _createSuper(GregoryHelper);
        function GregoryHelper(){
         _classCallCheck(this, GregoryHelper);
         return _super18.call
                 (this,
                  "gregory",
                  [{name: "ce", isoEpoch: {year: 1, month: 1, day: 1}},
                   {name: "bce", reverseOf: "ce"}]);
        }
        _createClass
         (GregoryHelper,
          [{key: "reviseIntlEra",
            value:
            function(e){
             var t = e.era, r = e.eraYear;
             return "bc" !== t && "b" !== t || (t = "bce"),
                    "ad" !== t && "a" !== t || (t = "ce"),
                    {era: t, eraYear: r};
            }}]);
        return GregoryHelper;
       }
       (GregorianBaseHelper),
    JapaneseHelper =
      function(_GregorianBaseHelper5){
        _inherits(JapaneseHelper, _GregorianBaseHelper5);
        var _super19 = _createSuper(JapaneseHelper);
        function JapaneseHelper(){
         var _this17;
         _classCallCheck(this, JapaneseHelper);
         _this17 =
          _super19.call
           (this,
            "japanese",
            [{name: "reiwa",
              isoEpoch: {year: 2019, month: 5, day: 1},
              anchorEpoch: {year: 2019, month: 5, day: 1}},
             {name: "heisei",
              isoEpoch: {year: 1989, month: 1, day: 8},
              anchorEpoch: {year: 1989, month: 1, day: 8}},
             {name: "showa",
              isoEpoch: {year: 1926, month: 12, day: 25},
              anchorEpoch: {year: 1926, month: 12, day: 25}},
             {name: "taisho",
              isoEpoch: {year: 1912, month: 7, day: 30},
              anchorEpoch: {year: 1912, month: 7, day: 30}},
             {name: "meiji",
              isoEpoch: {year: 1868, month: 9, day: 8},
              anchorEpoch: {year: 1868, month: 9, day: 8}},
             {name: "ce", isoEpoch: {year: 1, month: 1, day: 1}},
             {name: "bce", reverseOf: "ce"}]),
         _this17.calendarIsVulnerableToJulianBug = ! 0,
         _this17.eraLength = "long",
         _this17.erasBeginMidYear = ! 0;
         return _this17;
        }
        _createClass
         (JapaneseHelper,
          [{key: "reviseIntlEra",
            value:
            function(e, t){
             var r = e.era, o = e.eraYear, n = t.year;
             return this.eras.find(function(e){return e.name === r;})
                     ? {era: r, eraYear: o}
                     : n
                       < 1
                       ? {era: "bce", eraYear: 1 - n}
                       : {era: "ce", eraYear: n};
            }}]);
        return JapaneseHelper;
       }
       (GregorianBaseHelper),
    ChineseBaseHelper =
      function(_HelperBase6){
        _inherits(ChineseBaseHelper, _HelperBase6);
        var _super20 = _createSuper(ChineseBaseHelper);
        function ChineseBaseHelper(){
         var _this18;
         _classCallCheck(this, ChineseBaseHelper);
         _this18 = _super20.apply(this, arguments),
         _this18.calendarType = "lunisolar",
         _this18.hasEra = ! 1;
         return _this18;
        }
        _createClass
         (ChineseBaseHelper,
          [{key: "inLeapYear",
            value:
            function(e, t){
             var r = this.getMonthList(e.year, t);
             return 13 === wt(r).length;
            }},
           {key: "monthsInYear",
            value: function(e, t){return this.inLeapYear(e, t) ? 13 : 12;}},
           {key: "minimumMonthLength", value: function(){return 29;}},
           {key: "maximumMonthLength", value: function(){return 30;}},
           {key: "getMonthList",
            value:
            function(e, t){
             var _this19 = this, _getCalendarDate2;
             if(void 0 === e) throw new TypeError("Missing year");
             var
              r =
                JSON.stringify
                 ({func: "getMonthList", calendarYear: e, id: this.id}),
              o = t.get(r);
             if(o) return o;
             var
              n = this.getFormatter(),
              getCalendarDate =
                function(e, t){
                 var
                  r = toUtcIsoDateString({isoYear: e, isoMonth: 2, isoDay: 1}),
                  o = new Date(r);
                 o.setUTCDate(t + 1);
                 var
                  a = n.formatToParts(o),
                  i = a.find(function(e){return "month" === e.type;}).value,
                  s = + a.find(function(e){return "day" === e.type;}).value,
                  l = a.find(function(e){return "relatedYear" === e.type;});
                 if(void 0 === l)
                  throw new
                         RangeError
                         ("Intl.DateTimeFormat.formatToParts lacks relatedYear in ".concat
                           (_this19.id, " calendar. Try Node 14+ or modern browsers."));
                 return l = + l.value,
                        {calendarMonthString: i,
                         calendarDay: s,
                         calendarYearToVerify: l};
                },
              a = 17,
              _getCalendarDate = getCalendarDate(e, a),
              i = _getCalendarDate.calendarMonthString,
              s = _getCalendarDate.calendarDay,
              l = _getCalendarDate.calendarYearToVerify;
             "1" !== i
             &&
              (a += 29,
               _getCalendarDate2 = getCalendarDate(e, a),
               i = _getCalendarDate2.calendarMonthString,
               s = _getCalendarDate2.calendarDay),
             a -= s - 5;
             var d = {}, m, c, h = 1, u = ! 1;
             do{
              var _getCalendarDate3;
              _getCalendarDate3 = getCalendarDate(e, a),
              i = _getCalendarDate3.calendarMonthString,
              s = _getCalendarDate3.calendarDay,
              l = _getCalendarDate3.calendarYearToVerify,
              m && (d[c].daysInMonth = m + 30 - s),
              l !== e ? u = ! 0 : (d[i] = {monthIndex: h++}, a += 30),
              m = s,
              c = i;
             }
             while
              (! u);
             return d[c].daysInMonth = m + 30 - s, t.set(r, d), d;
            }},
           {key: "estimateIsoDate",
            value:
            function(e){
             var t = e.year, r = e.month;
             return {year: t, month: r >= 12 ? 12 : r + 1, day: 1};
            }},
           {key: "adjustCalendarDate",
            value:
            function(e, t){
             var
              r =
                arguments.length > 2 && arguments[2] !== undefined
                 ? arguments[2]
                 : "constrain",
              o =
                arguments.length > 3 && arguments[3] !== undefined
                 ? arguments[3]
                 : ! 1,
              n = e.year,
              a = e.month,
              i = e.monthExtra,
              s = e.day,
              l = e.monthCode,
              d = e.eraYear;
             if(o){
              if(n = d, i && "bis" !== i)
               throw new
                      RangeError
                      ("Unexpected leap month suffix: ".concat(i));
              var
               _e49 = buildMonthCode(a, void 0 !== i),
               _r65 = "".concat(a).concat(i || ""),
               _o40 = this.getMonthList(n, t)[_r65];
              if(void 0 === _o40)
               throw new
                      RangeError
                      ("Unmatched month ".concat(_r65, " in Chinese year ").concat
                        (n));
              return a = _o40.monthIndex,
                     {year: n,
                      month: a,
                      day: s,
                      era: void 0,
                      eraYear: d,
                      monthCode: _e49};
             }
             if
              (this.validateCalendarDate(e),
               void 0 === n && (n = d),
               void 0 === d && (d = n),
               void 0 === a){
              var
               _e50 = this.getMonthList(n, t),
               _o41 = l.replace("L", "bis").slice(1);
              "0" === _o41[0] && (_o41 = _o41.slice(1));
              var _i19 = _e50[_o41];
              if
               (a = _i19 && _i19.monthIndex,
                void 0 === a && l.endsWith("L") && "M13L" != l
                && "constrain" === r){
               var _t48 = l.slice(1, - 1);
               "0" === _t48[0] && (_t48 = _t48.slice(1)),
               _i19 = _e50[_t48],
               _i19 && (a = _i19.monthIndex, l = buildMonthCode(_t48));
              }
              if(void 0 === a)
               throw new
                      RangeError
                      ("Unmatched month ".concat(l, " in Chinese year ").concat(n));
             }
             else if(void 0 === l){
              var
               _e51 = this.getMonthList(n, t),
               _o42 = wt(_e51),
               _i20 = _o42.length;
              "reject" === r
               ? (RejectToRange
                  (a, 1, _i20),
                 RejectToRange(s, 1, this.maximumMonthLength()))
               : (a
                 = ConstrainToRange(a, 1, _i20),
                 s = ConstrainToRange(s, 1, this.maximumMonthLength()));
              var
               _d11 =
                 _o42.find
                  (function(_ref10){
                    var _ref11 = _slicedToArray(_ref10, 2), e = _ref11[1];
                    return e.monthIndex === a;
                   });
              if(void 0 === _d11)
               throw new
                      RangeError
                      ("Invalid month ".concat(a, " in Chinese year ").concat(n));
              l =
               buildMonthCode
                (_d11[0].replace("bis", ""), - 1 !== _d11[0].indexOf("bis"));
             }
             else{
              var
               _e52 = this.getMonthList(n, t),
               _r66 = l.replace("L", "bis").slice(1);
              "0" === _r66[0] && (_r66 = _r66.slice(1));
              var _o43 = _e52[_r66];
              if(! _o43)
               throw new
                      RangeError
                      ("Unmatched monthCode ".concat(l, " in Chinese year ").concat
                        (n));
              if(a !== _o43.monthIndex)
               throw new
                      RangeError
                      ("monthCode ".concat(l, " doesn't correspond to month ").concat
                         (a, " in Chinese year ").concat
                        (n));
             }
             return _objectSpread2
                     (_objectSpread2({}, e),
                      {},
                      {year: n, eraYear: d, month: a, monthCode: l, day: s});
            }}]);
        return ChineseBaseHelper;
       }
       (HelperBase),
    ChineseHelper =
      function(_ChineseBaseHelper){
        _inherits(ChineseHelper, _ChineseBaseHelper);
        var _super21 = _createSuper(ChineseHelper);
        function ChineseHelper(){
         var _this20;
         _classCallCheck(this, ChineseHelper);
         _this20 = _super21.apply(this, arguments), _this20.id = "chinese";
         return _this20;
        }
        return _createClass(ChineseHelper);
       }
       (ChineseBaseHelper),
    DangiHelper =
      function(_ChineseBaseHelper2){
        _inherits(DangiHelper, _ChineseBaseHelper2);
        var _super22 = _createSuper(DangiHelper);
        function DangiHelper(){
         var _this21;
         _classCallCheck(this, DangiHelper);
         _this21 = _super22.apply(this, arguments), _this21.id = "dangi";
         return _this21;
        }
        return _createClass(DangiHelper);
       }
       (ChineseBaseHelper),
    NonIsoCalendar =
      function(){
        function NonIsoCalendar(e){
         _classCallCheck(this, NonIsoCalendar);
         this.helper = e;
        }
        _createClass
         (NonIsoCalendar,
          [{key: "dateFromFields",
            value:
            function(e, t, r){
             var
              o = new OneObjectCache(),
              n =
                PrepareTemporalFields
                 (e, this.fields(["day", "month", "monthCode", "year"]), []),
              a = ToTemporalOverflow(t),
              _this$helper$calendar = this.helper.calendarToIsoDate(n, a, o),
              i = _this$helper$calendar.year,
              s = _this$helper$calendar.month,
              l = _this$helper$calendar.day,
              d = CreateTemporalDate(i, s, l, r);
             return o.setObject(d), d;
            }},
           {key: "yearMonthFromFields",
            value:
            function(e, t, r){
             var
              o = new OneObjectCache(),
              n =
                PrepareTemporalFields
                 (e, this.fields(["month", "monthCode", "year"]), []),
              a = ToTemporalOverflow(t),
              _this$helper$calendar2 =
                this.helper.calendarToIsoDate
                 (_objectSpread2(_objectSpread2({}, n), {}, {day: 1}), a, o),
              i = _this$helper$calendar2.year,
              s = _this$helper$calendar2.month,
              l = _this$helper$calendar2.day,
              d = CreateTemporalYearMonth(i, s, r, l);
             return o.setObject(d), d;
            }},
           {key: "monthDayFromFields",
            value:
            function(e, t, r){
             var
              o = new OneObjectCache(),
              n =
                PrepareTemporalFields
                 (e, this.fields(["day", "month", "monthCode", "year"]), []),
              a = ToTemporalOverflow(t),
              _this$helper$monthDay = this.helper.monthDayFromFields(n, a, o),
              i = _this$helper$monthDay.year,
              s = _this$helper$monthDay.month,
              l = _this$helper$monthDay.day,
              d = CreateTemporalMonthDay(s, l, r, i);
             return o.setObject(d), d;
            }},
           {key: "fields",
            value:
            function(e){
             var t = e;
             return Tt.call(t, "year")
                    &&
                     (t = [].concat(_toConsumableArray(t), ["era", "eraYear"])),
                    t;
            }},
           {key: "fieldKeysToIgnore",
            value:
            function(e){
             var t = new Dt();
             for(var _r67 = 0; _r67 < e.length; _r67++){
              var _o44 = e[_r67];
              switch(Call(vt, t, [_o44]), _o44){
                case "era":
                 Call(vt, t, ["eraYear"]), Call(vt, t, ["year"]); break;
                case "eraYear":
                 Call(vt, t, ["era"]), Call(vt, t, ["year"]); break;
                case "year":
                 Call(vt, t, ["era"]), Call(vt, t, ["eraYear"]); break;
                case "month":
                 Call(vt, t, ["monthCode"]),
                 this.helper.erasBeginMidYear
                 && (Call(vt, t, ["era"]), Call(vt, t, ["eraYear"]));
                 break;
                case "monthCode":
                 Call(vt, t, ["month"]),
                 this.helper.erasBeginMidYear
                 && (Call(vt, t, ["era"]), Call(vt, t, ["eraYear"]));
                 break;
                case "day":
                 this.helper.erasBeginMidYear
                 && (Call(vt, t, ["era"]), Call(vt, t, ["eraYear"]));
              }
             }
             return _toConsumableArray(Call(Ct, t, []));
            }},
           {key: "dateAdd",
            value:
            function(e, t, r, o, n, a, i){
             var
              s = OneObjectCache.getCacheForObject(e),
              l = this.helper.temporalToCalendarDate(e, s),
              d =
                this.helper.addCalendar
                 (l, {years: t, months: r, weeks: o, days: n}, a, s),
              m = this.helper.calendarToIsoDate(d, "constrain", s),
              c = m.year,
              h = m.month,
              u = m.day,
              T = CreateTemporalDate(c, h, u, i);
             return new OneObjectCache(s).setObject(T), T;
            }},
           {key: "dateUntil",
            value:
            function(e, t, r){
             var
              o = OneObjectCache.getCacheForObject(e),
              n = OneObjectCache.getCacheForObject(t),
              a = this.helper.temporalToCalendarDate(e, o),
              i = this.helper.temporalToCalendarDate(t, n);
             return this.helper.untilCalendar(a, i, r, o);
            }},
           {key: "year",
            value:
            function(e){
             var t = OneObjectCache.getCacheForObject(e);
             return this.helper.temporalToCalendarDate(e, t).year;
            }},
           {key: "month",
            value:
            function(e){
             var t = OneObjectCache.getCacheForObject(e);
             return this.helper.temporalToCalendarDate(e, t).month;
            }},
           {key: "day",
            value:
            function(e){
             var t = OneObjectCache.getCacheForObject(e);
             return this.helper.temporalToCalendarDate(e, t).day;
            }},
           {key: "era",
            value:
            function(e){
             if(! this.helper.hasEra) return;
             var t = OneObjectCache.getCacheForObject(e);
             return this.helper.temporalToCalendarDate(e, t).era;
            }},
           {key: "eraYear",
            value:
            function(e){
             if(! this.helper.hasEra) return;
             var t = OneObjectCache.getCacheForObject(e);
             return this.helper.temporalToCalendarDate(e, t).eraYear;
            }},
           {key: "monthCode",
            value:
            function(e){
             var t = OneObjectCache.getCacheForObject(e);
             return this.helper.temporalToCalendarDate(e, t).monthCode;
            }},
           {key: "dayOfWeek",
            value: function(e){return Ot.iso8601.dayOfWeek(e);}},
           {key: "dayOfYear",
            value:
            function(e){
             var
              t = OneObjectCache.getCacheForObject(e),
              r = this.helper.isoToCalendarDate(e, t),
              o = this.helper.startOfCalendarYear(r);
             return this.helper.calendarDaysUntil(o, r, t) + 1;
            }},
           {key: "weekOfYear",
            value: function(e){return Ot.iso8601.weekOfYear(e);}},
           {key: "yearOfWeek",
            value: function(e){return Ot.iso8601.yearOfWeek(e);}},
           {key: "daysInWeek",
            value: function(e){return Ot.iso8601.daysInWeek(e);}},
           {key: "daysInMonth",
            value:
            function(e){
             var
              t = OneObjectCache.getCacheForObject(e),
              r = this.helper.temporalToCalendarDate(e, t),
              o = this.helper.maximumMonthLength(r);
             if(o === this.helper.minimumMonthLength(r)) return o;
             var
              n = this.helper.startOfCalendarMonth(r),
              a = this.helper.addMonthsCalendar(n, 1, "constrain", t);
             return this.helper.calendarDaysUntil(n, a, t);
            }},
           {key: "daysInYear",
            value:
            function(e){
             var t = e;
             HasSlot(t, i) || (t = ToTemporalDate(t));
             var
              r = OneObjectCache.getCacheForObject(t),
              o = this.helper.temporalToCalendarDate(t, r),
              n = this.helper.startOfCalendarYear(o),
              a = this.helper.addCalendar(n, {years: 1}, "constrain", r);
             return this.helper.calendarDaysUntil(n, a, r);
            }},
           {key: "monthsInYear",
            value:
            function(e){
             var
              t = OneObjectCache.getCacheForObject(e),
              r = this.helper.temporalToCalendarDate(e, t);
             return this.helper.monthsInYear(r, t);
            }},
           {key: "inLeapYear",
            value:
            function(e){
             var t = e;
             HasSlot(t, i) || (t = ToTemporalDate(t));
             var
              r = OneObjectCache.getCacheForObject(t),
              o = this.helper.temporalToCalendarDate(t, r);
             return this.helper.inLeapYear(o, r);
            }}]);
        return NonIsoCalendar;
       }
       ();
   for
   (var
     _i21 = 0,
     _arr7 =
       [HebrewHelper,
        PersianHelper,
        EthiopicHelper,
        EthioaaHelper,
        CopticHelper,
        ChineseHelper,
        DangiHelper,
        RocHelper,
        IndianHelper,
        BuddhistHelper,
        GregoryHelper,
        JapaneseHelper,
        IslamicHelper,
        IslamicUmalquraHelper,
        IslamicTblaHelper,
        IslamicCivilHelper,
        IslamicRgsaHelper,
        IslamicCcHelper];
    _i21 < _arr7.length;
    _i21++){
    var _e53 = _arr7[_i21], _t49 = new _e53();
    Ot[_t49.id] = new NonIsoCalendar(_t49);
   }
   var
    PlainDate =
      function(){
        function PlainDate(e, t, r){
         var
          o =
            arguments.length > 3 && arguments[3] !== undefined
             ? arguments[3]
             : "iso8601";
         _classCallCheck(this, PlainDate);
         CreateTemporalDateSlots
          (this,
           ToIntegerWithTruncation(e),
           ToIntegerWithTruncation(t),
           ToIntegerWithTruncation(r),
           ToTemporalCalendarSlotValue(o));
        }
        _createClass
         (PlainDate,
          [{key: "calendarId",
            get:
            function(){
             if(! IsTemporalDate(this))
              throw new TypeError("invalid receiver");
             return ToTemporalCalendarIdentifier(GetSlot(this, p));
            }},
           {key: "era",
            get:
            function(){
             if(! IsTemporalDate(this))
              throw new TypeError("invalid receiver");
             return CalendarEra(GetSlot(this, p), this);
            }},
           {key: "eraYear",
            get:
            function(){
             if(! IsTemporalDate(this))
              throw new TypeError("invalid receiver");
             return CalendarEraYear(GetSlot(this, p), this);
            }},
           {key: "year",
            get:
            function(){
             if(! IsTemporalDate(this))
              throw new TypeError("invalid receiver");
             return CalendarYear(GetSlot(this, p), this);
            }},
           {key: "month",
            get:
            function(){
             if(! IsTemporalDate(this))
              throw new TypeError("invalid receiver");
             return CalendarMonth(GetSlot(this, p), this);
            }},
           {key: "monthCode",
            get:
            function(){
             if(! IsTemporalDate(this))
              throw new TypeError("invalid receiver");
             return CalendarMonthCode(GetSlot(this, p), this);
            }},
           {key: "day",
            get:
            function(){
             if(! IsTemporalDate(this))
              throw new TypeError("invalid receiver");
             return CalendarDay(GetSlot(this, p), this);
            }},
           {key: "dayOfWeek",
            get:
            function(){
             if(! IsTemporalDate(this))
              throw new TypeError("invalid receiver");
             return CalendarDayOfWeek(GetSlot(this, p), this);
            }},
           {key: "dayOfYear",
            get:
            function(){
             if(! IsTemporalDate(this))
              throw new TypeError("invalid receiver");
             return CalendarDayOfYear(GetSlot(this, p), this);
            }},
           {key: "weekOfYear",
            get:
            function(){
             if(! IsTemporalDate(this))
              throw new TypeError("invalid receiver");
             return CalendarWeekOfYear(GetSlot(this, p), this);
            }},
           {key: "yearOfWeek",
            get:
            function(){
             if(! IsTemporalDate(this))
              throw new TypeError("invalid receiver");
             return CalendarYearOfWeek(GetSlot(this, p), this);
            }},
           {key: "daysInWeek",
            get:
            function(){
             if(! IsTemporalDate(this))
              throw new TypeError("invalid receiver");
             return CalendarDaysInWeek(GetSlot(this, p), this);
            }},
           {key: "daysInMonth",
            get:
            function(){
             if(! IsTemporalDate(this))
              throw new TypeError("invalid receiver");
             return CalendarDaysInMonth(GetSlot(this, p), this);
            }},
           {key: "daysInYear",
            get:
            function(){
             if(! IsTemporalDate(this))
              throw new TypeError("invalid receiver");
             return CalendarDaysInYear(GetSlot(this, p), this);
            }},
           {key: "monthsInYear",
            get:
            function(){
             if(! IsTemporalDate(this))
              throw new TypeError("invalid receiver");
             return CalendarMonthsInYear(GetSlot(this, p), this);
            }},
           {key: "inLeapYear",
            get:
            function(){
             if(! IsTemporalDate(this))
              throw new TypeError("invalid receiver");
             return CalendarInLeapYear(GetSlot(this, p), this);
            }},
           {key: "with",
            value:
            function(e, t){
             if(! IsTemporalDate(this))
              throw new TypeError("invalid receiver");
             if(! IsObject(e)) throw new TypeError("invalid argument");
             RejectTemporalLikeObject(e);
             var
              r = GetOptionsObject(t),
              o = GetSlot(this, p),
              n = CalendarFields(o, ["day", "month", "monthCode", "year"]),
              a = PrepareTemporalFields(this, n, []);
             return a =
                     CalendarMergeFields
                      (o, a, PrepareTemporalFields(e, n, "partial")),
                    a = PrepareTemporalFields(a, n, []),
                    CalendarDateFromFields(o, a, r);
            }},
           {key: "withCalendar",
            value:
            function(e){
             if(! IsTemporalDate(this))
              throw new TypeError("invalid receiver");
             var t = ToTemporalCalendarSlotValue(e);
             return new
                     PlainDate
                     (GetSlot(this, i), GetSlot(this, s), GetSlot(this, l), t);
            }},
           {key: "add",
            value:
            function(e, t){
             if(! IsTemporalDate(this))
              throw new TypeError("invalid receiver");
             var r = ToTemporalDuration(e), o = GetOptionsObject(t);
             return CalendarDateAdd(GetSlot(this, p), this, r, o);
            }},
           {key: "subtract",
            value:
            function(e, t){
             if(! IsTemporalDate(this))
              throw new TypeError("invalid receiver");
             var
              r = CreateNegatedTemporalDuration(ToTemporalDuration(e)),
              o = GetOptionsObject(t);
             return CalendarDateAdd(GetSlot(this, p), this, r, o);
            }},
           {key: "until",
            value:
            function(e, t){
             if(! IsTemporalDate(this))
              throw new TypeError("invalid receiver");
             return DifferenceTemporalPlainDate("until", this, e, t);
            }},
           {key: "since",
            value:
            function(e, t){
             if(! IsTemporalDate(this))
              throw new TypeError("invalid receiver");
             return DifferenceTemporalPlainDate("since", this, e, t);
            }},
           {key: "equals",
            value:
            function(e){
             if(! IsTemporalDate(this))
              throw new TypeError("invalid receiver");
             var t = ToTemporalDate(e);
             for(var _i22 = 0, _arr8 = [i, s, l]; _i22 < _arr8.length; _i22++){
              var _e54 = _arr8[_i22];
              if(GetSlot(this, _e54) !== GetSlot(t, _e54)) return ! 1;
             }
             return CalendarEquals(GetSlot(this, p), GetSlot(t, p));
            }},
           {key: "toString",
            value:
            function(e){
             if(! IsTemporalDate(this))
              throw new TypeError("invalid receiver");
             return TemporalDateToString
                     (this, ToCalendarNameOption(GetOptionsObject(e)));
            }},
           {key: "toJSON",
            value:
            function(){
             if(! IsTemporalDate(this))
              throw new TypeError("invalid receiver");
             return TemporalDateToString(this);
            }},
           {key: "toLocaleString",
            value:
            function(e, t){
             if(! IsTemporalDate(this))
              throw new TypeError("invalid receiver");
             return new ht(e, t).format(this);
            }},
           {key: "valueOf",
            value:
            function(){
             throw new
                    TypeError
                    ("use compare() or equals() to compare Temporal.PlainDate");
            }},
           {key: "toPlainDateTime",
            value:
            function(e){
             if(! IsTemporalDate(this))
              throw new TypeError("invalid receiver");
             var
              t = GetSlot(this, i),
              r = GetSlot(this, s),
              o = GetSlot(this, l),
              n = GetSlot(this, p);
             if(void 0 === e)
              return CreateTemporalDateTime(t, r, o, 0, 0, 0, 0, 0, 0, n);
             var a = ToTemporalTime(e);
             return CreateTemporalDateTime
                     (t,
                      r,
                      o,
                      GetSlot(a, d),
                      GetSlot(a, m),
                      GetSlot(a, c),
                      GetSlot(a, h),
                      GetSlot(a, u),
                      GetSlot(a, T),
                      n);
            }},
           {key: "toZonedDateTime",
            value:
            function(e){
             if(! IsTemporalDate(this))
              throw new TypeError("invalid receiver");
             var t, r;
             if(IsObject(e))
              if(IsTemporalTimeZone(e))
               t = e;
              else{
               var _o45 = e.timeZone;
               void 0 === _o45
                ? t = ToTemporalTimeZoneSlotValue(e)
                : (t = ToTemporalTimeZoneSlotValue(_o45), r = e.plainTime);
              }
             else
              t = ToTemporalTimeZoneSlotValue(e);
             var
              o = GetSlot(this, i),
              a = GetSlot(this, s),
              f = GetSlot(this, l),
              y = GetSlot(this, p),
              I = 0,
              S = 0,
              g = 0,
              w = 0,
              D = 0,
              G = 0;
             void 0 !== r
             &&
              (r = ToTemporalTime(r),
               I = GetSlot(r, d),
               S = GetSlot(r, m),
               g = GetSlot(r, c),
               w = GetSlot(r, h),
               D = GetSlot(r, u),
               G = GetSlot(r, T));
             return CreateTemporalZonedDateTime
                     (GetSlot
                       (GetInstantFor
                         (t,
                          CreateTemporalDateTime(o, a, f, I, S, g, w, D, G, y),
                          "compatible"),
                        n),
                      t,
                      y);
            }},
           {key: "toPlainYearMonth",
            value:
            function(){
             if(! IsTemporalDate(this))
              throw new TypeError("invalid receiver");
             var e = GetSlot(this, p);
             return CalendarYearMonthFromFields
                     (e,
                      PrepareTemporalFields
                       (this, CalendarFields(e, ["monthCode", "year"]), []));
            }},
           {key: "toPlainMonthDay",
            value:
            function(){
             if(! IsTemporalDate(this))
              throw new TypeError("invalid receiver");
             var e = GetSlot(this, p);
             return CalendarMonthDayFromFields
                     (e,
                      PrepareTemporalFields
                       (this, CalendarFields(e, ["day", "monthCode"]), []));
            }},
           {key: "getISOFields",
            value:
            function(){
             if(! IsTemporalDate(this))
              throw new TypeError("invalid receiver");
             return {calendar: GetSlot(this, p),
                     isoDay: GetSlot(this, l),
                     isoMonth: GetSlot(this, s),
                     isoYear: GetSlot(this, i)};
            }},
           {key: "getCalendar",
            value:
            function(){
             if(! IsTemporalDate(this))
              throw new TypeError("invalid receiver");
             return ToTemporalCalendarObject(GetSlot(this, p));
            }}],
          [{key: "from",
            value:
            function(e, t){
             var r = GetOptionsObject(t);
             return IsTemporalDate(e)
                     ? (ToTemporalOverflow
                        (r),
                       CreateTemporalDate
                        (GetSlot(e, i), GetSlot(e, s), GetSlot(e, l), GetSlot(e, p)))
                     : ToTemporalDate(e, r);
            }},
           {key: "compare",
            value:
            function(e, t){
             var r = ToTemporalDate(e), o = ToTemporalDate(t);
             return CompareISODate
                     (GetSlot(r, i),
                      GetSlot(r, s),
                      GetSlot(r, l),
                      GetSlot(o, i),
                      GetSlot(o, s),
                      GetSlot(o, l));
            }}]);
        return PlainDate;
       }
       ();
   MakeIntrinsicClass(PlainDate, "Temporal.PlainDate");
   var
    PlainDateTime =
      function(){
        function PlainDateTime(e, t, r){
         var
          o =
            arguments.length > 3 && arguments[3] !== undefined
             ? arguments[3]
             : 0,
          n =
            arguments.length > 4 && arguments[4] !== undefined
             ? arguments[4]
             : 0,
          a =
            arguments.length > 5 && arguments[5] !== undefined
             ? arguments[5]
             : 0,
          i =
            arguments.length > 6 && arguments[6] !== undefined
             ? arguments[6]
             : 0,
          s =
            arguments.length > 7 && arguments[7] !== undefined
             ? arguments[7]
             : 0,
          l =
            arguments.length > 8 && arguments[8] !== undefined
             ? arguments[8]
             : 0,
          d =
            arguments.length > 9 && arguments[9] !== undefined
             ? arguments[9]
             : "iso8601";
         _classCallCheck(this, PlainDateTime);
         CreateTemporalDateTimeSlots
          (this,
           ToIntegerWithTruncation(e),
           ToIntegerWithTruncation(t),
           ToIntegerWithTruncation(r),
           void 0 === o ? 0 : ToIntegerWithTruncation(o),
           void 0 === n ? 0 : ToIntegerWithTruncation(n),
           void 0 === a ? 0 : ToIntegerWithTruncation(a),
           void 0 === i ? 0 : ToIntegerWithTruncation(i),
           void 0 === s ? 0 : ToIntegerWithTruncation(s),
           void 0 === l ? 0 : ToIntegerWithTruncation(l),
           ToTemporalCalendarSlotValue(d));
        }
        _createClass
         (PlainDateTime,
          [{key: "calendarId",
            get:
            function(){
             if(! IsTemporalDateTime(this))
              throw new TypeError("invalid receiver");
             return ToTemporalCalendarIdentifier(GetSlot(this, p));
            }},
           {key: "year",
            get:
            function(){
             if(! IsTemporalDateTime(this))
              throw new TypeError("invalid receiver");
             return CalendarYear(GetSlot(this, p), this);
            }},
           {key: "month",
            get:
            function(){
             if(! IsTemporalDateTime(this))
              throw new TypeError("invalid receiver");
             return CalendarMonth(GetSlot(this, p), this);
            }},
           {key: "monthCode",
            get:
            function(){
             if(! IsTemporalDateTime(this))
              throw new TypeError("invalid receiver");
             return CalendarMonthCode(GetSlot(this, p), this);
            }},
           {key: "day",
            get:
            function(){
             if(! IsTemporalDateTime(this))
              throw new TypeError("invalid receiver");
             return CalendarDay(GetSlot(this, p), this);
            }},
           {key: "hour",
            get:
            function(){
             if(! IsTemporalDateTime(this))
              throw new TypeError("invalid receiver");
             return GetSlot(this, d);
            }},
           {key: "minute",
            get:
            function(){
             if(! IsTemporalDateTime(this))
              throw new TypeError("invalid receiver");
             return GetSlot(this, m);
            }},
           {key: "second",
            get:
            function(){
             if(! IsTemporalDateTime(this))
              throw new TypeError("invalid receiver");
             return GetSlot(this, c);
            }},
           {key: "millisecond",
            get:
            function(){
             if(! IsTemporalDateTime(this))
              throw new TypeError("invalid receiver");
             return GetSlot(this, h);
            }},
           {key: "microsecond",
            get:
            function(){
             if(! IsTemporalDateTime(this))
              throw new TypeError("invalid receiver");
             return GetSlot(this, u);
            }},
           {key: "nanosecond",
            get:
            function(){
             if(! IsTemporalDateTime(this))
              throw new TypeError("invalid receiver");
             return GetSlot(this, T);
            }},
           {key: "era",
            get:
            function(){
             if(! IsTemporalDateTime(this))
              throw new TypeError("invalid receiver");
             return CalendarEra(GetSlot(this, p), this);
            }},
           {key: "eraYear",
            get:
            function(){
             if(! IsTemporalDateTime(this))
              throw new TypeError("invalid receiver");
             return CalendarEraYear(GetSlot(this, p), this);
            }},
           {key: "dayOfWeek",
            get:
            function(){
             if(! IsTemporalDateTime(this))
              throw new TypeError("invalid receiver");
             return CalendarDayOfWeek(GetSlot(this, p), this);
            }},
           {key: "dayOfYear",
            get:
            function(){
             if(! IsTemporalDateTime(this))
              throw new TypeError("invalid receiver");
             return CalendarDayOfYear(GetSlot(this, p), this);
            }},
           {key: "weekOfYear",
            get:
            function(){
             if(! IsTemporalDateTime(this))
              throw new TypeError("invalid receiver");
             return CalendarWeekOfYear(GetSlot(this, p), this);
            }},
           {key: "yearOfWeek",
            get:
            function(){
             if(! IsTemporalDateTime(this))
              throw new TypeError("invalid receiver");
             return CalendarYearOfWeek(GetSlot(this, p), this);
            }},
           {key: "daysInWeek",
            get:
            function(){
             if(! IsTemporalDateTime(this))
              throw new TypeError("invalid receiver");
             return CalendarDaysInWeek(GetSlot(this, p), this);
            }},
           {key: "daysInYear",
            get:
            function(){
             if(! IsTemporalDateTime(this))
              throw new TypeError("invalid receiver");
             return CalendarDaysInYear(GetSlot(this, p), this);
            }},
           {key: "daysInMonth",
            get:
            function(){
             if(! IsTemporalDateTime(this))
              throw new TypeError("invalid receiver");
             return CalendarDaysInMonth(GetSlot(this, p), this);
            }},
           {key: "monthsInYear",
            get:
            function(){
             if(! IsTemporalDateTime(this))
              throw new TypeError("invalid receiver");
             return CalendarMonthsInYear(GetSlot(this, p), this);
            }},
           {key: "inLeapYear",
            get:
            function(){
             if(! IsTemporalDateTime(this))
              throw new TypeError("invalid receiver");
             return CalendarInLeapYear(GetSlot(this, p), this);
            }},
           {key: "with",
            value:
            function(e, t){
             if(! IsTemporalDateTime(this))
              throw new TypeError("invalid receiver");
             if(! IsObject(e)) throw new TypeError("invalid argument");
             RejectTemporalLikeObject(e);
             var
              r = GetOptionsObject(t),
              o = GetSlot(this, p),
              n =
                CalendarFields
                 (o,
                  ["day",
                   "hour",
                   "microsecond",
                   "millisecond",
                   "minute",
                   "month",
                   "monthCode",
                   "nanosecond",
                   "second",
                   "year"]),
              a = PrepareTemporalFields(this, n, []);
             a =
              CalendarMergeFields
               (o, a, PrepareTemporalFields(e, n, "partial")),
             a = PrepareTemporalFields(a, n, []);
             var
              _InterpretTemporalDat4 =
                InterpretTemporalDateTimeFields(o, a, r),
              i = _InterpretTemporalDat4.year,
              s = _InterpretTemporalDat4.month,
              l = _InterpretTemporalDat4.day,
              d = _InterpretTemporalDat4.hour,
              m = _InterpretTemporalDat4.minute,
              c = _InterpretTemporalDat4.second,
              h = _InterpretTemporalDat4.millisecond,
              u = _InterpretTemporalDat4.microsecond,
              T = _InterpretTemporalDat4.nanosecond;
             return CreateTemporalDateTime(i, s, l, d, m, c, h, u, T, o);
            }},
           {key: "withPlainTime",
            value:
            function(e){
             if(! IsTemporalDateTime(this))
              throw new TypeError("invalid receiver");
             var
              t = GetSlot(this, i),
              r = GetSlot(this, s),
              o = GetSlot(this, l),
              n = GetSlot(this, p);
             if(void 0 === e)
              return CreateTemporalDateTime(t, r, o, 0, 0, 0, 0, 0, 0, n);
             var a = ToTemporalTime(e);
             return CreateTemporalDateTime
                     (t,
                      r,
                      o,
                      GetSlot(a, d),
                      GetSlot(a, m),
                      GetSlot(a, c),
                      GetSlot(a, h),
                      GetSlot(a, u),
                      GetSlot(a, T),
                      n);
            }},
           {key: "withPlainDate",
            value:
            function(e){
             if(! IsTemporalDateTime(this))
              throw new TypeError("invalid receiver");
             var
              t = ToTemporalDate(e),
              r = GetSlot(t, i),
              o = GetSlot(t, s),
              n = GetSlot(t, l),
              a = GetSlot(t, p),
              f = GetSlot(this, d),
              y = GetSlot(this, m),
              I = GetSlot(this, c),
              S = GetSlot(this, h),
              g = GetSlot(this, u),
              w = GetSlot(this, T);
             return a = ConsolidateCalendars(GetSlot(this, p), a),
                    CreateTemporalDateTime(r, o, n, f, y, I, S, g, w, a);
            }},
           {key: "withCalendar",
            value:
            function(e){
             if(! IsTemporalDateTime(this))
              throw new TypeError("invalid receiver");
             var t = ToTemporalCalendarSlotValue(e);
             return new
                     PlainDateTime
                     (GetSlot(this, i),
                      GetSlot(this, s),
                      GetSlot(this, l),
                      GetSlot(this, d),
                      GetSlot(this, m),
                      GetSlot(this, c),
                      GetSlot(this, h),
                      GetSlot(this, u),
                      GetSlot(this, T),
                      t);
            }},
           {key: "add",
            value:
            function(e, t){
             if(! IsTemporalDateTime(this))
              throw new TypeError("invalid receiver");
             return AddDurationToOrSubtractDurationFromPlainDateTime
                     ("add", this, e, t);
            }},
           {key: "subtract",
            value:
            function(e, t){
             if(! IsTemporalDateTime(this))
              throw new TypeError("invalid receiver");
             return AddDurationToOrSubtractDurationFromPlainDateTime
                     ("subtract", this, e, t);
            }},
           {key: "until",
            value:
            function(e, t){
             if(! IsTemporalDateTime(this))
              throw new TypeError("invalid receiver");
             return DifferenceTemporalPlainDateTime("until", this, e, t);
            }},
           {key: "since",
            value:
            function(e, t){
             if(! IsTemporalDateTime(this))
              throw new TypeError("invalid receiver");
             return DifferenceTemporalPlainDateTime("since", this, e, t);
            }},
           {key: "round",
            value:
            function(e){
             var _RoundISODateTime2;
             if(! IsTemporalDateTime(this))
              throw new TypeError("invalid receiver");
             if(void 0 === e)
              throw new TypeError("options parameter is required");
             var
              t =
                "string" == typeof e
                 ? CreateOnePropObject("smallestUnit", e)
                 : GetOptionsObject(e),
              r = ToTemporalRoundingIncrement(t),
              o = ToTemporalRoundingMode(t, "halfExpand"),
              n = GetTemporalUnit(t, "smallestUnit", "time", He, ["day"]),
              a =
                {day: 1,
                  hour: 24,
                  minute: 60,
                  second: 60,
                  millisecond: 1e3,
                  microsecond: 1e3,
                  nanosecond: 1e3}
                 [n];
             ValidateTemporalRoundingIncrement(r, a, 1 === a);
             var
              f = GetSlot(this, i),
              y = GetSlot(this, s),
              I = GetSlot(this, l),
              S = GetSlot(this, d),
              g = GetSlot(this, m),
              w = GetSlot(this, c),
              D = GetSlot(this, h),
              G = GetSlot(this, u),
              v = GetSlot(this, T);
             return _RoundISODateTime2 =
                     RoundISODateTime(f, y, I, S, g, w, D, G, v, r, n, o),
                    f = _RoundISODateTime2.year,
                    y = _RoundISODateTime2.month,
                    I = _RoundISODateTime2.day,
                    S = _RoundISODateTime2.hour,
                    g = _RoundISODateTime2.minute,
                    w = _RoundISODateTime2.second,
                    D = _RoundISODateTime2.millisecond,
                    G = _RoundISODateTime2.microsecond,
                    v = _RoundISODateTime2.nanosecond,
                    CreateTemporalDateTime
                     (f, y, I, S, g, w, D, G, v, GetSlot(this, p));
            }},
           {key: "equals",
            value:
            function(e){
             if(! IsTemporalDateTime(this))
              throw new TypeError("invalid receiver");
             var t = ToTemporalDateTime(e);
             for
             (var _i23 = 0, _arr9 = [i, s, l, d, m, c, h, u, T];
              _i23 < _arr9.length;
              _i23++){
              var _e55 = _arr9[_i23];
              if(GetSlot(this, _e55) !== GetSlot(t, _e55)) return ! 1;
             }
             return CalendarEquals(GetSlot(this, p), GetSlot(t, p));
            }},
           {key: "toString",
            value:
            function(e){
             if(! IsTemporalDateTime(this))
              throw new TypeError("invalid receiver");
             var
              t = GetOptionsObject(e),
              r = ToCalendarNameOption(t),
              o = ToFractionalSecondDigits(t),
              n = ToTemporalRoundingMode(t, "trunc"),
              a = GetTemporalUnit(t, "smallestUnit", "time", void 0);
             if("hour" === a)
              throw new
                     RangeError
                     ('smallestUnit must be a time unit other than "hour"');
             var
              _ToSecondsStringPreci2 = ToSecondsStringPrecisionRecord(a, o),
              i = _ToSecondsStringPreci2.precision,
              s = _ToSecondsStringPreci2.unit,
              l = _ToSecondsStringPreci2.increment;
             return TemporalDateTimeToString
                     (this, i, r, {unit: s, increment: l, roundingMode: n});
            }},
           {key: "toJSON",
            value:
            function(){
             if(! IsTemporalDateTime(this))
              throw new TypeError("invalid receiver");
             return TemporalDateTimeToString(this, "auto");
            }},
           {key: "toLocaleString",
            value:
            function(e, t){
             if(! IsTemporalDateTime(this))
              throw new TypeError("invalid receiver");
             return new ht(e, t).format(this);
            }},
           {key: "valueOf",
            value:
            function(){
             throw new
                    TypeError
                    ("use compare() or equals() to compare Temporal.PlainDateTime");
            }},
           {key: "toZonedDateTime",
            value:
            function(e, t){
             if(! IsTemporalDateTime(this))
              throw new TypeError("invalid receiver");
             var r = ToTemporalTimeZoneSlotValue(e);
             return CreateTemporalZonedDateTime
                     (GetSlot
                       (GetInstantFor
                         (r, this, ToTemporalDisambiguation(GetOptionsObject(t))),
                        n),
                      r,
                      GetSlot(this, p));
            }},
           {key: "toPlainDate",
            value:
            function(){
             if(! IsTemporalDateTime(this))
              throw new TypeError("invalid receiver");
             return TemporalDateTimeToDate(this);
            }},
           {key: "toPlainYearMonth",
            value:
            function(){
             if(! IsTemporalDateTime(this))
              throw new TypeError("invalid receiver");
             var e = GetSlot(this, p);
             return CalendarYearMonthFromFields
                     (e,
                      PrepareTemporalFields
                       (this, CalendarFields(e, ["monthCode", "year"]), []));
            }},
           {key: "toPlainMonthDay",
            value:
            function(){
             if(! IsTemporalDateTime(this))
              throw new TypeError("invalid receiver");
             var e = GetSlot(this, p);
             return CalendarMonthDayFromFields
                     (e,
                      PrepareTemporalFields
                       (this, CalendarFields(e, ["day", "monthCode"]), []));
            }},
           {key: "toPlainTime",
            value:
            function(){
             if(! IsTemporalDateTime(this))
              throw new TypeError("invalid receiver");
             return TemporalDateTimeToTime(this);
            }},
           {key: "getISOFields",
            value:
            function(){
             if(! IsTemporalDateTime(this))
              throw new TypeError("invalid receiver");
             return {calendar: GetSlot(this, p),
                     isoDay: GetSlot(this, l),
                     isoHour: GetSlot(this, d),
                     isoMicrosecond: GetSlot(this, u),
                     isoMillisecond: GetSlot(this, h),
                     isoMinute: GetSlot(this, m),
                     isoMonth: GetSlot(this, s),
                     isoNanosecond: GetSlot(this, T),
                     isoSecond: GetSlot(this, c),
                     isoYear: GetSlot(this, i)};
            }},
           {key: "getCalendar",
            value:
            function(){
             if(! IsTemporalDateTime(this))
              throw new TypeError("invalid receiver");
             return ToTemporalCalendarObject(GetSlot(this, p));
            }}],
          [{key: "from",
            value:
            function(e, t){
             var r = GetOptionsObject(t);
             return IsTemporalDateTime(e)
                     ? (ToTemporalOverflow
                        (r),
                       CreateTemporalDateTime
                        (GetSlot(e, i),
                         GetSlot(e, s),
                         GetSlot(e, l),
                         GetSlot(e, d),
                         GetSlot(e, m),
                         GetSlot(e, c),
                         GetSlot(e, h),
                         GetSlot(e, u),
                         GetSlot(e, T),
                         GetSlot(e, p)))
                     : ToTemporalDateTime(e, r);
            }},
           {key: "compare",
            value:
            function(e, t){
             var r = ToTemporalDateTime(e), o = ToTemporalDateTime(t);
             for
             (var _i24 = 0, _arr10 = [i, s, l, d, m, c, h, u, T];
              _i24 < _arr10.length;
              _i24++){
              var
               _e56 = _arr10[_i24],
               _t50 = GetSlot(r, _e56),
               _n27 = GetSlot(o, _e56);
              if(_t50 !== _n27) return ComparisonResult(_t50 - _n27);
             }
             return 0;
            }}]);
        return PlainDateTime;
       }
       ();
   MakeIntrinsicClass(PlainDateTime, "Temporal.PlainDateTime");
   var
    Duration =
      function(){
        function Duration(){
         var
          e =
            arguments.length > 0 && arguments[0] !== undefined
             ? arguments[0]
             : 0,
          t =
            arguments.length > 1 && arguments[1] !== undefined
             ? arguments[1]
             : 0,
          r =
            arguments.length > 2 && arguments[2] !== undefined
             ? arguments[2]
             : 0,
          o =
            arguments.length > 3 && arguments[3] !== undefined
             ? arguments[3]
             : 0,
          n =
            arguments.length > 4 && arguments[4] !== undefined
             ? arguments[4]
             : 0,
          a =
            arguments.length > 5 && arguments[5] !== undefined
             ? arguments[5]
             : 0,
          i =
            arguments.length > 6 && arguments[6] !== undefined
             ? arguments[6]
             : 0,
          s =
            arguments.length > 7 && arguments[7] !== undefined
             ? arguments[7]
             : 0,
          l =
            arguments.length > 8 && arguments[8] !== undefined
             ? arguments[8]
             : 0,
          d =
            arguments.length > 9 && arguments[9] !== undefined
             ? arguments[9]
             : 0;
         _classCallCheck(this, Duration);
         var
          m = void 0 === e ? 0 : ToIntegerIfIntegral(e),
          c = void 0 === t ? 0 : ToIntegerIfIntegral(t),
          h = void 0 === r ? 0 : ToIntegerIfIntegral(r),
          u = void 0 === o ? 0 : ToIntegerIfIntegral(o),
          T = void 0 === n ? 0 : ToIntegerIfIntegral(n),
          p = void 0 === a ? 0 : ToIntegerIfIntegral(a),
          f = void 0 === i ? 0 : ToIntegerIfIntegral(i),
          y = void 0 === s ? 0 : ToIntegerIfIntegral(s),
          I = void 0 === l ? 0 : ToIntegerIfIntegral(l),
          S = void 0 === d ? 0 : ToIntegerIfIntegral(d);
         RejectDuration(m, c, h, u, T, p, f, y, I, S),
         N(this),
         SetSlot(this, w, m),
         SetSlot(this, D, c),
         SetSlot(this, G, h),
         SetSlot(this, v, u),
         SetSlot(this, C, T),
         SetSlot(this, O, p),
         SetSlot(this, b, f),
         SetSlot(this, E, y),
         SetSlot(this, M, I),
         SetSlot(this, R, S);
        }
        _createClass
         (Duration,
          [{key: "years",
            get:
            function(){
             if(! IsTemporalDuration(this))
              throw new TypeError("invalid receiver");
             return GetSlot(this, w);
            }},
           {key: "months",
            get:
            function(){
             if(! IsTemporalDuration(this))
              throw new TypeError("invalid receiver");
             return GetSlot(this, D);
            }},
           {key: "weeks",
            get:
            function(){
             if(! IsTemporalDuration(this))
              throw new TypeError("invalid receiver");
             return GetSlot(this, G);
            }},
           {key: "days",
            get:
            function(){
             if(! IsTemporalDuration(this))
              throw new TypeError("invalid receiver");
             return GetSlot(this, v);
            }},
           {key: "hours",
            get:
            function(){
             if(! IsTemporalDuration(this))
              throw new TypeError("invalid receiver");
             return GetSlot(this, C);
            }},
           {key: "minutes",
            get:
            function(){
             if(! IsTemporalDuration(this))
              throw new TypeError("invalid receiver");
             return GetSlot(this, O);
            }},
           {key: "seconds",
            get:
            function(){
             if(! IsTemporalDuration(this))
              throw new TypeError("invalid receiver");
             return GetSlot(this, b);
            }},
           {key: "milliseconds",
            get:
            function(){
             if(! IsTemporalDuration(this))
              throw new TypeError("invalid receiver");
             return GetSlot(this, E);
            }},
           {key: "microseconds",
            get:
            function(){
             if(! IsTemporalDuration(this))
              throw new TypeError("invalid receiver");
             return GetSlot(this, M);
            }},
           {key: "nanoseconds",
            get:
            function(){
             if(! IsTemporalDuration(this))
              throw new TypeError("invalid receiver");
             return GetSlot(this, R);
            }},
           {key: "sign",
            get:
            function(){
             if(! IsTemporalDuration(this))
              throw new TypeError("invalid receiver");
             return DurationSign
                     (GetSlot(this, w),
                      GetSlot(this, D),
                      GetSlot(this, G),
                      GetSlot(this, v),
                      GetSlot(this, C),
                      GetSlot(this, O),
                      GetSlot(this, b),
                      GetSlot(this, E),
                      GetSlot(this, M),
                      GetSlot(this, R));
            }},
           {key: "blank",
            get:
            function(){
             if(! IsTemporalDuration(this))
              throw new TypeError("invalid receiver");
             return 0
                    ===
                     DurationSign
                      (GetSlot(this, w),
                       GetSlot(this, D),
                       GetSlot(this, G),
                       GetSlot(this, v),
                       GetSlot(this, C),
                       GetSlot(this, O),
                       GetSlot(this, b),
                       GetSlot(this, E),
                       GetSlot(this, M),
                       GetSlot(this, R));
            }},
           {key: "with",
            value:
            function(e){
             if(! IsTemporalDuration(this))
              throw new TypeError("invalid receiver");
             var
              t =
                PrepareTemporalFields
                 (e,
                  ["days",
                   "hours",
                   "microseconds",
                   "milliseconds",
                   "minutes",
                   "months",
                   "nanoseconds",
                   "seconds",
                   "weeks",
                   "years"],
                  "partial"),
              _t$years = t.years,
              r = _t$years === void 0 ? GetSlot(this, w) : _t$years,
              _t$months = t.months,
              o = _t$months === void 0 ? GetSlot(this, D) : _t$months,
              _t$weeks = t.weeks,
              n = _t$weeks === void 0 ? GetSlot(this, G) : _t$weeks,
              _t$days = t.days,
              a = _t$days === void 0 ? GetSlot(this, v) : _t$days,
              _t$hours = t.hours,
              i = _t$hours === void 0 ? GetSlot(this, C) : _t$hours,
              _t$minutes = t.minutes,
              s = _t$minutes === void 0 ? GetSlot(this, O) : _t$minutes,
              _t$seconds = t.seconds,
              l = _t$seconds === void 0 ? GetSlot(this, b) : _t$seconds,
              _t$milliseconds = t.milliseconds,
              d =
                _t$milliseconds === void 0
                 ? GetSlot(this, E)
                 : _t$milliseconds,
              _t$microseconds = t.microseconds,
              m =
                _t$microseconds === void 0
                 ? GetSlot(this, M)
                 : _t$microseconds,
              _t$nanoseconds = t.nanoseconds,
              c =
                _t$nanoseconds === void 0 ? GetSlot(this, R) : _t$nanoseconds;
             return new Duration(r, o, n, a, i, s, l, d, m, c);
            }},
           {key: "negated",
            value:
            function(){
             if(! IsTemporalDuration(this))
              throw new TypeError("invalid receiver");
             return CreateNegatedTemporalDuration(this);
            }},
           {key: "abs",
            value:
            function(){
             if(! IsTemporalDuration(this))
              throw new TypeError("invalid receiver");
             return new
                     Duration
                     (Math.abs(GetSlot(this, w)),
                      Math.abs(GetSlot(this, D)),
                      Math.abs(GetSlot(this, G)),
                      Math.abs(GetSlot(this, v)),
                      Math.abs(GetSlot(this, C)),
                      Math.abs(GetSlot(this, O)),
                      Math.abs(GetSlot(this, b)),
                      Math.abs(GetSlot(this, E)),
                      Math.abs(GetSlot(this, M)),
                      Math.abs(GetSlot(this, R)));
            }},
           {key: "add",
            value:
            function(e, t){
             if(! IsTemporalDuration(this))
              throw new TypeError("invalid receiver");
             return AddDurationToOrSubtractDurationFromDuration
                     ("add", this, e, t);
            }},
           {key: "subtract",
            value:
            function(e, t){
             if(! IsTemporalDuration(this))
              throw new TypeError("invalid receiver");
             return AddDurationToOrSubtractDurationFromDuration
                     ("subtract", this, e, t);
            }},
           {key: "round",
            value:
            function(t){
             var
              _UnbalanceDurationRel,
              _RoundDuration8,
              _AdjustRoundedDuratio2,
              _BalanceDuration11,
              _BalanceDurationRelat;
             if(! IsTemporalDuration(this))
              throw new TypeError("invalid receiver");
             if(void 0 === t)
              throw new TypeError("options parameter is required");
             var
              r = GetSlot(this, w),
              o = GetSlot(this, D),
              n = GetSlot(this, G),
              a = GetSlot(this, v),
              i = GetSlot(this, C),
              s = GetSlot(this, O),
              l = GetSlot(this, b),
              d = GetSlot(this, E),
              m = GetSlot(this, M),
              c = GetSlot(this, R),
              h = DefaultTemporalLargestUnit(r, o, n, a, i, s, l, d, m, c),
              u =
                "string" == typeof t
                 ? CreateOnePropObject("smallestUnit", t)
                 : GetOptionsObject(t),
              T =
                GetTemporalUnit
                 (u, "largestUnit", "datetime", void 0, ["auto"]),
              f = ToRelativeTemporalObject(u),
              y = ToTemporalRoundingIncrement(u),
              I = ToTemporalRoundingMode(u, "halfExpand"),
              S = GetTemporalUnit(u, "smallestUnit", "datetime", void 0),
              g = ! 0;
             S || (g = ! 1, S = "nanosecond"),
             h = LargerOfTwoTemporalUnits(h, S);
             var F = ! 0;
             if(T || (F = ! 1, T = h), "auto" === T && (T = h), ! g && ! F)
              throw new
                     RangeError
                     ("at least one of smallestUnit or largestUnit is required");
             if(LargerOfTwoTemporalUnits(T, S) !== T)
              throw new
                     RangeError
                     ("largestUnit ".concat
                        (T, " cannot be smaller than smallestUnit ").concat
                       (S));
             var
              Y =
                {hour: 24,
                  minute: 60,
                  second: 60,
                  millisecond: 1e3,
                  microsecond: 1e3,
                  nanosecond: 1e3}
                 [S];
             return void 0 !== Y
                    && ValidateTemporalRoundingIncrement(y, Y, ! 1),
                    _UnbalanceDurationRel =
                     UnbalanceDurationRelative(r, o, n, a, T, f),
                    r = _UnbalanceDurationRel.years,
                    o = _UnbalanceDurationRel.months,
                    n = _UnbalanceDurationRel.weeks,
                    a = _UnbalanceDurationRel.days,
                    _RoundDuration8 =
                     RoundDuration(r, o, n, a, i, s, l, d, m, c, y, S, I, f),
                    r = _RoundDuration8.years,
                    o = _RoundDuration8.months,
                    n = _RoundDuration8.weeks,
                    a = _RoundDuration8.days,
                    i = _RoundDuration8.hours,
                    s = _RoundDuration8.minutes,
                    l = _RoundDuration8.seconds,
                    d = _RoundDuration8.milliseconds,
                    m = _RoundDuration8.microseconds,
                    c = _RoundDuration8.nanoseconds,
                    _AdjustRoundedDuratio2 =
                     AdjustRoundedDurationDays
                      (r, o, n, a, i, s, l, d, m, c, y, S, I, f),
                    r = _AdjustRoundedDuratio2.years,
                    o = _AdjustRoundedDuratio2.months,
                    n = _AdjustRoundedDuratio2.weeks,
                    a = _AdjustRoundedDuratio2.days,
                    i = _AdjustRoundedDuratio2.hours,
                    s = _AdjustRoundedDuratio2.minutes,
                    l = _AdjustRoundedDuratio2.seconds,
                    d = _AdjustRoundedDuratio2.milliseconds,
                    m = _AdjustRoundedDuratio2.microseconds,
                    c = _AdjustRoundedDuratio2.nanoseconds,
                    _BalanceDuration11 =
                     BalanceDuration(a, i, s, l, d, m, c, T, f),
                    a = _BalanceDuration11.days,
                    i = _BalanceDuration11.hours,
                    s = _BalanceDuration11.minutes,
                    l = _BalanceDuration11.seconds,
                    d = _BalanceDuration11.milliseconds,
                    m = _BalanceDuration11.microseconds,
                    c = _BalanceDuration11.nanoseconds,
                    _BalanceDurationRelat =
                     function(t, r, o, n, a, i){
                       var
                        s = GetIntrinsic("%Temporal.Duration%"),
                        l = DurationSign(t, r, o, n, 0, 0, 0, 0, 0, 0);
                       if(0 === l) return {years: t, months: r, weeks: o, days: n};
                       var
                        d = BigInt(l),
                        m,
                        c,
                        h = BigInt(t),
                        u = BigInt(r),
                        T = BigInt(o),
                        f = BigInt(n);
                       i && (c = ToTemporalDate(i), m = GetSlot(c, p));
                       var y = new s(l), I = new s(0, l), S = new s(0, 0, l);
                       switch(a){
                         case "year":
                          {
                           if(! m)
                            throw new
                                   RangeError
                                   ("a starting point is required for years balancing");
                           var
                            _t51 =
                              "string" != typeof m ? GetMethod(m, "dateAdd") : void 0,
                            _r68,
                            _o46,
                            _n28;
                           for
                           (_MoveRelativeDate11 = MoveRelativeDate(m, c, y, _t51),
                            _r68 = _MoveRelativeDate11.relativeTo,
                            _o46 = _MoveRelativeDate11.days,
                            _MoveRelativeDate11;
                            abs(f) >= BigInt(ae(_o46));){
                            var _MoveRelativeDate11, _MoveRelativeDate12;
                            f = f - BigInt(_o46),
                            h = h + d,
                            c = _r68,
                            _MoveRelativeDate12 = MoveRelativeDate(m, c, y, _t51),
                            _r68 = _MoveRelativeDate12.relativeTo,
                            _o46 = _MoveRelativeDate12.days;
                           }
                           for
                           (_MoveRelativeDate13 = MoveRelativeDate(m, c, I, _t51),
                            _r68 = _MoveRelativeDate13.relativeTo,
                            _n28 = _MoveRelativeDate13.days,
                            _MoveRelativeDate13;
                            abs(f) >= BigInt(ae(_n28));){
                            var _MoveRelativeDate13, _MoveRelativeDate14;
                            f = f - BigInt(_n28),
                            u = u + d,
                            c = _r68,
                            _MoveRelativeDate14 = MoveRelativeDate(m, c, I, _t51),
                            _r68 = _MoveRelativeDate14.relativeTo,
                            _n28 = _MoveRelativeDate14.days;
                           }
                           _r68 = CalendarDateAdd(m, c, y, void 0, _t51);
                           var
                            _a20 =
                              "string" != typeof m ? GetMethod(m, "dateUntil") : void 0,
                            _i25 = Te(null);
                           _i25.largestUnit = "month";
                           var
                            _s8 = CalendarDateUntil(m, c, _r68, _i25, _a20),
                            _l9 = GetSlot(_s8, D);
                           for(; abs(u) >= BigInt(ae(_l9));){
                            u = u - BigInt(_l9),
                            h = h + d,
                            c = _r68,
                            _r68 = CalendarDateAdd(m, c, y, void 0, _t51);
                            var _o47 = Te(null);
                            _o47.largestUnit = "month",
                            _s8 = CalendarDateUntil(m, c, _r68, _o47, _a20),
                            _l9 = GetSlot(_s8, D);
                           }
                           break;
                          }
                         case "month":
                          {
                           if(! m)
                            throw new
                                   RangeError
                                   ("a starting point is required for months balancing");
                           var
                            _t52 =
                              "string" != typeof m ? GetMethod(m, "dateAdd") : void 0,
                            _r69,
                            _o48;
                           for
                           (_MoveRelativeDate15 = MoveRelativeDate(m, c, I, _t52),
                            _r69 = _MoveRelativeDate15.relativeTo,
                            _o48 = _MoveRelativeDate15.days,
                            _MoveRelativeDate15;
                            abs(f) >= BigInt(ae(_o48));){
                            var _MoveRelativeDate15, _MoveRelativeDate16;
                            f = f - BigInt(_o48),
                            u = u + d,
                            c = _r69,
                            _MoveRelativeDate16 = MoveRelativeDate(m, c, I, _t52),
                            _r69 = _MoveRelativeDate16.relativeTo,
                            _o48 = _MoveRelativeDate16.days;
                           }
                           break;
                          }
                         case "week":
                          {
                           if(! m)
                            throw new
                                   RangeError
                                   ("a starting point is required for weeks balancing");
                           var
                            _t53 =
                              "string" != typeof m ? GetMethod(m, "dateAdd") : void 0,
                            _r70,
                            _o49;
                           for
                           (_MoveRelativeDate17 = MoveRelativeDate(m, c, S, _t53),
                            _r70 = _MoveRelativeDate17.relativeTo,
                            _o49 = _MoveRelativeDate17.days,
                            _MoveRelativeDate17;
                            abs(f) >= BigInt(ae(_o49));){
                            var _MoveRelativeDate17, _MoveRelativeDate18;
                            f = f - BigInt(_o49),
                            T = T + d,
                            c = _r70,
                            _MoveRelativeDate18 = MoveRelativeDate(m, c, S, _t53),
                            _r70 = _MoveRelativeDate18.relativeTo,
                            _o49 = _MoveRelativeDate18.days;
                           }
                           break;
                          }
                       }
                       return {years: Number(h),
                               months: Number(u),
                               weeks: Number(T),
                               days: Number(f)};
                      }
                      (r, o, n, a, T, f),
                    r = _BalanceDurationRelat.years,
                    o = _BalanceDurationRelat.months,
                    n = _BalanceDurationRelat.weeks,
                    a = _BalanceDurationRelat.days,
                    new Duration(r, o, n, a, i, s, l, d, m, c);
            }},
           {key: "total",
            value:
            function(e){
             var _UnbalanceDurationRel2;
             if(! IsTemporalDuration(this))
              throw new TypeError("invalid receiver");
             var
              t = GetSlot(this, w),
              r = GetSlot(this, D),
              o = GetSlot(this, G),
              n = GetSlot(this, v),
              a = GetSlot(this, C),
              i = GetSlot(this, O),
              s = GetSlot(this, b),
              l = GetSlot(this, E),
              d = GetSlot(this, M),
              m = GetSlot(this, R);
             if(void 0 === e)
              throw new TypeError("options argument is required");
             var
              c =
                "string" == typeof e
                 ? CreateOnePropObject("unit", e)
                 : GetOptionsObject(e),
              h = ToRelativeTemporalObject(c),
              u = GetTemporalUnit(c, "unit", "datetime", He),
              T;
             _UnbalanceDurationRel2 =
              UnbalanceDurationRelative(t, r, o, n, u, h),
             t = _UnbalanceDurationRel2.years,
             r = _UnbalanceDurationRel2.months,
             o = _UnbalanceDurationRel2.weeks,
             n = _UnbalanceDurationRel2.days,
             IsTemporalZonedDateTime(h)
             && (T = MoveRelativeZonedDateTime(h, t, r, o, 0));
             var
              p = BalancePossiblyInfiniteDuration(n, a, i, s, l, d, m, u, T);
             if("positive overflow" === p) return 1 / 0;
             if("negative overflow" === p) return - (1 / 0);
             n = p.days;
             a = p.hours;
             i = p.minutes;
             s = p.seconds;
             l = p.milliseconds;
             d = p.microseconds;
             m = p.nanoseconds;
             var
              _RoundDuration9 =
                RoundDuration(t, r, o, n, a, i, s, l, d, m, 1, u, "trunc", h),
              f = _RoundDuration9.total;
             return f;
            }},
           {key: "toString",
            value:
            function(e){
             if(! IsTemporalDuration(this))
              throw new TypeError("invalid receiver");
             var
              t = GetOptionsObject(e),
              r = ToFractionalSecondDigits(t),
              o = ToTemporalRoundingMode(t, "trunc"),
              n = GetTemporalUnit(t, "smallestUnit", "time", void 0);
             if("hour" === n || "minute" === n)
              throw new
                     RangeError
                     ('smallestUnit must be a time unit other than "hours" or "minutes"');
             var
              _ToSecondsStringPreci3 = ToSecondsStringPrecisionRecord(n, r),
              a = _ToSecondsStringPreci3.precision,
              i = _ToSecondsStringPreci3.unit,
              s = _ToSecondsStringPreci3.increment;
             return TemporalDurationToString
                     (this, a, {unit: i, increment: s, roundingMode: o});
            }},
           {key: "toJSON",
            value:
            function(){
             if(! IsTemporalDuration(this))
              throw new TypeError("invalid receiver");
             return TemporalDurationToString(this);
            }},
           {key: "toLocaleString",
            value:
            function(e, t){
             if(! IsTemporalDuration(this))
              throw new TypeError("invalid receiver");
             return "undefined" != typeof Intl
                     && void 0 !== Intl.DurationFormat
                     ? new Intl.DurationFormat(e, t).format(this)
                     : (console.warn
                        ("Temporal.Duration.prototype.toLocaleString() requires Intl.DurationFormat."),
                       TemporalDurationToString(this));
            }},
           {key: "valueOf",
            value:
            function(){
             throw new TypeError("use compare() to compare Temporal.Duration");
            }}],
          [{key: "from",
            value:
            function(e){
             return IsTemporalDuration(e)
                     ? new
                       Duration
                       (GetSlot(e, w),
                        GetSlot(e, D),
                        GetSlot(e, G),
                        GetSlot(e, v),
                        GetSlot(e, C),
                        GetSlot(e, O),
                        GetSlot(e, b),
                        GetSlot(e, E),
                        GetSlot(e, M),
                        GetSlot(e, R))
                     : ToTemporalDuration(e);
            }},
           {key: "compare",
            value:
            function(t, r, o){
             var
              _UnbalanceDurationRel3,
              _UnbalanceDurationRel4,
              n = ToTemporalDuration(t),
              a = ToTemporalDuration(r),
              i = ToRelativeTemporalObject(GetOptionsObject(o)),
              s = GetSlot(n, w),
              l = GetSlot(n, D),
              d = GetSlot(n, G),
              m = GetSlot(n, v),
              c = GetSlot(n, C),
              h = GetSlot(n, O),
              u = GetSlot(n, b),
              T = GetSlot(n, E),
              p = GetSlot(n, M),
              f = GetSlot(n, R),
              y = GetSlot(a, w),
              I = GetSlot(a, D),
              S = GetSlot(a, G),
              g = GetSlot(a, v),
              F = GetSlot(a, C),
              Y = GetSlot(a, O),
              P = GetSlot(a, b),
              Z = GetSlot(a, E),
              B = GetSlot(a, M),
              N = GetSlot(a, R),
              j = CalculateOffsetShift(i, s, l, d, m),
              $ = CalculateOffsetShift(i, y, I, S, g);
             0 === s && 0 === y && 0 === l && 0 === I && 0 === d && 0 === S
             ||
              (_UnbalanceDurationRel3 =
                UnbalanceDurationRelative(s, l, d, m, "day", i),
               m = _UnbalanceDurationRel3.days,
               _UnbalanceDurationRel4 =
                UnbalanceDurationRelative(y, I, S, g, "day", i),
               g = _UnbalanceDurationRel4.days);
             var
              k = TotalDurationNanoseconds(m, c, h, u, T, p, f, j),
              U = TotalDurationNanoseconds(g, F, Y, P, Z, B, N, $);
             return ComparisonResult(Number(k - U));
            }}]);
        return Duration;
       }
       ();
   MakeIntrinsicClass(Duration, "Temporal.Duration");
   var
    bt = Object.create,
    PlainMonthDay =
      function(){
        function PlainMonthDay(e, t){
         var
          r =
            arguments.length > 2 && arguments[2] !== undefined
             ? arguments[2]
             : "iso8601",
          o =
            arguments.length > 3 && arguments[3] !== undefined
             ? arguments[3]
             : 1972;
         _classCallCheck(this, PlainMonthDay);
         CreateTemporalMonthDaySlots
          (this,
           ToIntegerWithTruncation(e),
           ToIntegerWithTruncation(t),
           ToTemporalCalendarSlotValue(r),
           ToIntegerWithTruncation(o));
        }
        _createClass
         (PlainMonthDay,
          [{key: "monthCode",
            get:
            function(){
             if(! IsTemporalMonthDay(this))
              throw new TypeError("invalid receiver");
             return CalendarMonthCode(GetSlot(this, p), this);
            }},
           {key: "day",
            get:
            function(){
             if(! IsTemporalMonthDay(this))
              throw new TypeError("invalid receiver");
             return CalendarDay(GetSlot(this, p), this);
            }},
           {key: "calendarId",
            get:
            function(){
             if(! IsTemporalMonthDay(this))
              throw new TypeError("invalid receiver");
             return ToTemporalCalendarIdentifier(GetSlot(this, p));
            }},
           {key: "with",
            value:
            function(e, t){
             if(! IsTemporalMonthDay(this))
              throw new TypeError("invalid receiver");
             if(! IsObject(e)) throw new TypeError("invalid argument");
             RejectTemporalLikeObject(e);
             var
              r = GetOptionsObject(t),
              o = GetSlot(this, p),
              n = CalendarFields(o, ["day", "month", "monthCode", "year"]),
              a = PrepareTemporalFields(this, n, []);
             return a =
                     CalendarMergeFields
                      (o, a, PrepareTemporalFields(e, n, "partial")),
                    a = PrepareTemporalFields(a, n, []),
                    CalendarMonthDayFromFields(o, a, r);
            }},
           {key: "equals",
            value:
            function(e){
             if(! IsTemporalMonthDay(this))
              throw new TypeError("invalid receiver");
             var t = ToTemporalMonthDay(e);
             for
             (var _i26 = 0, _arr11 = [s, l, i]; _i26 < _arr11.length; _i26++){
              var _e57 = _arr11[_i26];
              if(GetSlot(this, _e57) !== GetSlot(t, _e57)) return ! 1;
             }
             return CalendarEquals(GetSlot(this, p), GetSlot(t, p));
            }},
           {key: "toString",
            value:
            function(e){
             if(! IsTemporalMonthDay(this))
              throw new TypeError("invalid receiver");
             return TemporalMonthDayToString
                     (this, ToCalendarNameOption(GetOptionsObject(e)));
            }},
           {key: "toJSON",
            value:
            function(){
             if(! IsTemporalMonthDay(this))
              throw new TypeError("invalid receiver");
             return TemporalMonthDayToString(this);
            }},
           {key: "toLocaleString",
            value:
            function(e, t){
             if(! IsTemporalMonthDay(this))
              throw new TypeError("invalid receiver");
             return new ht(e, t).format(this);
            }},
           {key: "valueOf",
            value:
            function(){
             throw new
                    TypeError
                    ("use equals() to compare Temporal.PlainMonthDay");
            }},
           {key: "toPlainDate",
            value:
            function(e){
             if(! IsTemporalMonthDay(this))
              throw new TypeError("invalid receiver");
             if(! IsObject(e))
              throw new TypeError("argument should be an object");
             var
              t = GetSlot(this, p),
              r = CalendarFields(t, ["day", "monthCode"]),
              o = PrepareTemporalFields(this, r, []),
              n = CalendarFields(t, ["year"]),
              a = CalendarMergeFields(t, o, PrepareTemporalFields(e, n, []));
             a =
              PrepareTemporalFields
               (a,
                _toConsumableArray
                 (new
                   Set
                   ([].concat(_toConsumableArray(r), _toConsumableArray(n)))),
                []);
             var i = bt(null);
             return i.overflow = "reject", CalendarDateFromFields(t, a, i);
            }},
           {key: "getISOFields",
            value:
            function(){
             if(! IsTemporalMonthDay(this))
              throw new TypeError("invalid receiver");
             return {calendar: GetSlot(this, p),
                     isoDay: GetSlot(this, l),
                     isoMonth: GetSlot(this, s),
                     isoYear: GetSlot(this, i)};
            }},
           {key: "getCalendar",
            value:
            function(){
             if(! IsTemporalMonthDay(this))
              throw new TypeError("invalid receiver");
             return ToTemporalCalendarObject(GetSlot(this, p));
            }}],
          [{key: "from",
            value:
            function(e, t){
             var r = GetOptionsObject(t);
             return IsTemporalMonthDay(e)
                     ? (ToTemporalOverflow
                        (r),
                       CreateTemporalMonthDay
                        (GetSlot(e, s), GetSlot(e, l), GetSlot(e, p), GetSlot(e, i)))
                     : ToTemporalMonthDay(e, r);
            }}]);
        return PlainMonthDay;
       }
       ();
   MakeIntrinsicClass(PlainMonthDay, "Temporal.PlainMonthDay");
   var
    instant =
      function(){return new (GetIntrinsic("%Temporal.Instant%"))(Ve());},
    plainDateTime =
      function(e){
       var
        t =
          arguments.length > 1 && arguments[1] !== undefined
           ? arguments[1]
           : DefaultTimeZone(),
        r = ToTemporalTimeZoneSlotValue(t),
        o = ToTemporalCalendarSlotValue(e);
       return GetPlainDateTimeFor(r, instant(), o);
      },
    plainDateTimeISO =
      function(){
       var
        e =
          arguments.length > 0 && arguments[0] !== undefined
           ? arguments[0]
           : DefaultTimeZone();
       return GetPlainDateTimeFor
               (ToTemporalTimeZoneSlotValue(e), instant(), "iso8601");
      },
    zonedDateTime =
      function(e){
       var
        t =
          arguments.length > 1 && arguments[1] !== undefined
           ? arguments[1]
           : DefaultTimeZone(),
        r = ToTemporalTimeZoneSlotValue(t),
        o = ToTemporalCalendarSlotValue(e);
       return CreateTemporalZonedDateTime(Ve(), r, o);
      },
    Et =
      _defineProperty
       ({instant: instant,
         plainDateTime: plainDateTime,
         plainDateTimeISO: plainDateTimeISO,
         plainDate:
         function(e){
          var
           t =
             arguments.length > 1 && arguments[1] !== undefined
              ? arguments[1]
              : DefaultTimeZone();
          return TemporalDateTimeToDate(plainDateTime(e, t));
         },
         plainDateISO:
         function(){
          var
           e =
             arguments.length > 0 && arguments[0] !== undefined
              ? arguments[0]
              : DefaultTimeZone();
          return TemporalDateTimeToDate(plainDateTimeISO(e));
         },
         plainTimeISO:
         function(){
          var
           e =
             arguments.length > 0 && arguments[0] !== undefined
              ? arguments[0]
              : DefaultTimeZone();
          return TemporalDateTimeToTime(plainDateTimeISO(e));
         },
         timeZoneId: function(){return DefaultTimeZone();},
         zonedDateTime: zonedDateTime,
         zonedDateTimeISO:
         function(){
          var
           e =
             arguments.length > 0 && arguments[0] !== undefined
              ? arguments[0]
              : DefaultTimeZone();
          return zonedDateTime("iso8601", e);
         }},
        Symbol.toStringTag,
        "Temporal.Now");
   Object.defineProperty
    (Et,
     Symbol.toStringTag,
     {value: "Temporal.Now",
      writable: ! 1,
      enumerable: ! 1,
      configurable: ! 0});
   var Mt = Object.assign;
   function TemporalTimeToString(e, t, r){
    var
     o = GetSlot(e, d),
     n = GetSlot(e, m),
     a = GetSlot(e, c),
     i = GetSlot(e, h),
     s = GetSlot(e, u),
     l = GetSlot(e, T);
    if(r){
     var
      _e58 = r.unit,
      _t54 = r.increment,
      _d12 = r.roundingMode,
      _RoundTime2 = RoundTime(o, n, a, i, s, l, _t54, _e58, _d12);
     o = _RoundTime2.hour;
     n = _RoundTime2.minute;
     a = _RoundTime2.second;
     i = _RoundTime2.millisecond;
     s = _RoundTime2.microsecond;
     l = _RoundTime2.nanosecond;
    }
    return "".concat(ISODateTimePartString(o), ":").concat
             (ISODateTimePartString(n)).concat
            (FormatSecondsStringPart(a, i, s, l, t));
   }
   var
    PlainTime =
      function(){
        function PlainTime(){
         var
          e =
            arguments.length > 0 && arguments[0] !== undefined
             ? arguments[0]
             : 0,
          t =
            arguments.length > 1 && arguments[1] !== undefined
             ? arguments[1]
             : 0,
          r =
            arguments.length > 2 && arguments[2] !== undefined
             ? arguments[2]
             : 0,
          o =
            arguments.length > 3 && arguments[3] !== undefined
             ? arguments[3]
             : 0,
          n =
            arguments.length > 4 && arguments[4] !== undefined
             ? arguments[4]
             : 0,
          a =
            arguments.length > 5 && arguments[5] !== undefined
             ? arguments[5]
             : 0;
         _classCallCheck(this, PlainTime);
         var
          i = void 0 === e ? 0 : ToIntegerWithTruncation(e),
          s = void 0 === t ? 0 : ToIntegerWithTruncation(t),
          l = void 0 === r ? 0 : ToIntegerWithTruncation(r),
          p = void 0 === o ? 0 : ToIntegerWithTruncation(o),
          f = void 0 === n ? 0 : ToIntegerWithTruncation(n),
          y = void 0 === a ? 0 : ToIntegerWithTruncation(a);
         RejectTime(i, s, l, p, f, y),
         N(this),
         SetSlot(this, d, i),
         SetSlot(this, m, s),
         SetSlot(this, c, l),
         SetSlot(this, h, p),
         SetSlot(this, u, f),
         SetSlot(this, T, y);
        }
        _createClass
         (PlainTime,
          [{key: "hour",
            get:
            function(){
             if(! IsTemporalTime(this))
              throw new TypeError("invalid receiver");
             return GetSlot(this, d);
            }},
           {key: "minute",
            get:
            function(){
             if(! IsTemporalTime(this))
              throw new TypeError("invalid receiver");
             return GetSlot(this, m);
            }},
           {key: "second",
            get:
            function(){
             if(! IsTemporalTime(this))
              throw new TypeError("invalid receiver");
             return GetSlot(this, c);
            }},
           {key: "millisecond",
            get:
            function(){
             if(! IsTemporalTime(this))
              throw new TypeError("invalid receiver");
             return GetSlot(this, h);
            }},
           {key: "microsecond",
            get:
            function(){
             if(! IsTemporalTime(this))
              throw new TypeError("invalid receiver");
             return GetSlot(this, u);
            }},
           {key: "nanosecond",
            get:
            function(){
             if(! IsTemporalTime(this))
              throw new TypeError("invalid receiver");
             return GetSlot(this, T);
            }},
           {key: "with",
            value:
            function(e, t){
             var _RegulateTime4;
             if(! IsTemporalTime(this))
              throw new TypeError("invalid receiver");
             if(! IsObject(e)) throw new TypeError("invalid argument");
             RejectTemporalLikeObject(e);
             var
              r = ToTemporalOverflow(GetOptionsObject(t)),
              o = ToTemporalTimeRecord(e, "partial"),
              n = ToTemporalTimeRecord(this),
              _Mt = Mt(n, o),
              a = _Mt.hour,
              i = _Mt.minute,
              s = _Mt.second,
              l = _Mt.millisecond,
              d = _Mt.microsecond,
              m = _Mt.nanosecond;
             return _RegulateTime4 = RegulateTime(a, i, s, l, d, m, r),
                    a = _RegulateTime4.hour,
                    i = _RegulateTime4.minute,
                    s = _RegulateTime4.second,
                    l = _RegulateTime4.millisecond,
                    d = _RegulateTime4.microsecond,
                    m = _RegulateTime4.nanosecond,
                    new PlainTime(a, i, s, l, d, m);
            }},
           {key: "add",
            value:
            function(e){
             if(! IsTemporalTime(this))
              throw new TypeError("invalid receiver");
             return AddDurationToOrSubtractDurationFromPlainTime
                     ("add", this, e);
            }},
           {key: "subtract",
            value:
            function(e){
             if(! IsTemporalTime(this))
              throw new TypeError("invalid receiver");
             return AddDurationToOrSubtractDurationFromPlainTime
                     ("subtract", this, e);
            }},
           {key: "until",
            value:
            function(e, t){
             if(! IsTemporalTime(this))
              throw new TypeError("invalid receiver");
             return DifferenceTemporalPlainTime("until", this, e, t);
            }},
           {key: "since",
            value:
            function(e, t){
             if(! IsTemporalTime(this))
              throw new TypeError("invalid receiver");
             return DifferenceTemporalPlainTime("since", this, e, t);
            }},
           {key: "round",
            value:
            function(e){
             var _RoundTime3;
             if(! IsTemporalTime(this))
              throw new TypeError("invalid receiver");
             if(void 0 === e)
              throw new TypeError("options parameter is required");
             var
              t =
                "string" == typeof e
                 ? CreateOnePropObject("smallestUnit", e)
                 : GetOptionsObject(e),
              r = ToTemporalRoundingIncrement(t),
              o = ToTemporalRoundingMode(t, "halfExpand"),
              n = GetTemporalUnit(t, "smallestUnit", "time", He);
             ValidateTemporalRoundingIncrement
              (r,
               {hour: 24,
                 minute: 60,
                 second: 60,
                 millisecond: 1e3,
                 microsecond: 1e3,
                 nanosecond: 1e3}
                [n],
               ! 1);
             var
              a = GetSlot(this, d),
              i = GetSlot(this, m),
              s = GetSlot(this, c),
              l = GetSlot(this, h),
              p = GetSlot(this, u),
              f = GetSlot(this, T);
             return _RoundTime3 = RoundTime(a, i, s, l, p, f, r, n, o),
                    a = _RoundTime3.hour,
                    i = _RoundTime3.minute,
                    s = _RoundTime3.second,
                    l = _RoundTime3.millisecond,
                    p = _RoundTime3.microsecond,
                    f = _RoundTime3.nanosecond,
                    new PlainTime(a, i, s, l, p, f);
            }},
           {key: "equals",
            value:
            function(e){
             if(! IsTemporalTime(this))
              throw new TypeError("invalid receiver");
             var t = ToTemporalTime(e);
             for
             (var _i27 = 0, _arr12 = [d, m, c, h, u, T];
              _i27 < _arr12.length;
              _i27++){
              var _e59 = _arr12[_i27];
              if(GetSlot(this, _e59) !== GetSlot(t, _e59)) return ! 1;
             }
             return ! 0;
            }},
           {key: "toString",
            value:
            function(e){
             if(! IsTemporalTime(this))
              throw new TypeError("invalid receiver");
             var
              t = GetOptionsObject(e),
              r = ToFractionalSecondDigits(t),
              o = ToTemporalRoundingMode(t, "trunc"),
              n = GetTemporalUnit(t, "smallestUnit", "time", void 0);
             if("hour" === n)
              throw new
                     RangeError
                     ('smallestUnit must be a time unit other than "hour"');
             var
              _ToSecondsStringPreci4 = ToSecondsStringPrecisionRecord(n, r),
              a = _ToSecondsStringPreci4.precision,
              i = _ToSecondsStringPreci4.unit,
              s = _ToSecondsStringPreci4.increment;
             return TemporalTimeToString
                     (this, a, {unit: i, increment: s, roundingMode: o});
            }},
           {key: "toJSON",
            value:
            function(){
             if(! IsTemporalTime(this))
              throw new TypeError("invalid receiver");
             return TemporalTimeToString(this, "auto");
            }},
           {key: "toLocaleString",
            value:
            function(e, t){
             if(! IsTemporalTime(this))
              throw new TypeError("invalid receiver");
             return new ht(e, t).format(this);
            }},
           {key: "valueOf",
            value:
            function(){
             throw new
                    TypeError
                    ("use compare() or equals() to compare Temporal.PlainTime");
            }},
           {key: "toPlainDateTime",
            value:
            function(e){
             if(! IsTemporalTime(this))
              throw new TypeError("invalid receiver");
             var
              t = ToTemporalDate(e),
              r = GetSlot(t, i),
              o = GetSlot(t, s),
              n = GetSlot(t, l),
              a = GetSlot(t, p);
             return CreateTemporalDateTime
                     (r,
                      o,
                      n,
                      GetSlot(this, d),
                      GetSlot(this, m),
                      GetSlot(this, c),
                      GetSlot(this, h),
                      GetSlot(this, u),
                      GetSlot(this, T),
                      a);
            }},
           {key: "toZonedDateTime",
            value:
            function(e){
             if(! IsTemporalTime(this))
              throw new TypeError("invalid receiver");
             if(! IsObject(e)) throw new TypeError("invalid argument");
             var t = e.plainDate;
             if(void 0 === t) throw new TypeError("missing date property");
             var r = ToTemporalDate(t), o = e.timeZone;
             if(void 0 === o)
              throw new TypeError("missing timeZone property");
             var
              a = ToTemporalTimeZoneSlotValue(o),
              f = GetSlot(r, i),
              y = GetSlot(r, s),
              I = GetSlot(r, l),
              S = GetSlot(r, p),
              g = GetSlot(this, d),
              w = GetSlot(this, m),
              D = GetSlot(this, c),
              G = GetSlot(this, h),
              v = GetSlot(this, u),
              C = GetSlot(this, T);
             return CreateTemporalZonedDateTime
                     (GetSlot
                       (GetInstantFor
                         (a,
                          new
                           (GetIntrinsic("%Temporal.PlainDateTime%"))
                           (f, y, I, g, w, D, G, v, C, S),
                          "compatible"),
                        n),
                      a,
                      S);
            }},
           {key: "getISOFields",
            value:
            function(){
             if(! IsTemporalTime(this))
              throw new TypeError("invalid receiver");
             return {isoHour: GetSlot(this, d),
                     isoMicrosecond: GetSlot(this, u),
                     isoMillisecond: GetSlot(this, h),
                     isoMinute: GetSlot(this, m),
                     isoNanosecond: GetSlot(this, T),
                     isoSecond: GetSlot(this, c)};
            }}],
          [{key: "from",
            value:
            function(e, t){
             var r = ToTemporalOverflow(GetOptionsObject(t));
             return IsTemporalTime(e)
                     ? new
                       PlainTime
                       (GetSlot(e, d),
                        GetSlot(e, m),
                        GetSlot(e, c),
                        GetSlot(e, h),
                        GetSlot(e, u),
                        GetSlot(e, T))
                     : ToTemporalTime(e, r);
            }},
           {key: "compare",
            value:
            function(e, t){
             var r = ToTemporalTime(e), o = ToTemporalTime(t);
             for
             (var _i28 = 0, _arr13 = [d, m, c, h, u, T];
              _i28 < _arr13.length;
              _i28++){
              var
               _e60 = _arr13[_i28],
               _t55 = GetSlot(r, _e60),
               _n29 = GetSlot(o, _e60);
              if(_t55 !== _n29) return ComparisonResult(_t55 - _n29);
             }
             return 0;
            }}]);
        return PlainTime;
       }
       ();
   MakeIntrinsicClass(PlainTime, "Temporal.PlainTime");
   var
    TimeZone =
      function(){
        function TimeZone(e){
         _classCallCheck(this, TimeZone);
         if(arguments.length < 1)
          throw new RangeError("missing argument: identifier is required");
         var t = GetCanonicalTimeZoneIdentifier(e);
         N(this), SetSlot(this, a, t);
        }
        _createClass
         (TimeZone,
          [{key: "id",
            get:
            function(){
             if(! IsTemporalTimeZone(this))
              throw new TypeError("invalid receiver");
             return GetSlot(this, a);
            }},
           {key: "getOffsetNanosecondsFor",
            value:
            function(e){
             if(! IsTemporalTimeZone(this))
              throw new TypeError("invalid receiver");
             var t = ToTemporalInstant(e), r = GetSlot(this, a);
             return IsTimeZoneOffsetString(r)
                     ? ParseTimeZoneOffsetString(r)
                     : GetNamedTimeZoneOffsetNanoseconds(r, GetSlot(t, n));
            }},
           {key: "getOffsetStringFor",
            value:
            function(e){
             if(! IsTemporalTimeZone(this))
              throw new TypeError("invalid receiver");
             return GetOffsetStringFor(this, ToTemporalInstant(e));
            }},
           {key: "getPlainDateTimeFor",
            value:
            function(e){
             var
              t =
                arguments.length > 1 && arguments[1] !== undefined
                 ? arguments[1]
                 : "iso8601";
             if(! IsTemporalTimeZone(this))
              throw new TypeError("invalid receiver");
             return GetPlainDateTimeFor
                     (this, ToTemporalInstant(e), ToTemporalCalendarSlotValue(t));
            }},
           {key: "getInstantFor",
            value:
            function(e, t){
             if(! IsTemporalTimeZone(this))
              throw new TypeError("invalid receiver");
             return GetInstantFor
                     (this,
                      ToTemporalDateTime(e),
                      ToTemporalDisambiguation(GetOptionsObject(t)));
            }},
           {key: "getPossibleInstantsFor",
            value:
            function(t){
             if(! IsTemporalTimeZone(this))
              throw new TypeError("invalid receiver");
             var
              r = ToTemporalDateTime(t),
              o = GetIntrinsic("%Temporal.Instant%"),
              n = GetSlot(this, a);
             if(IsTimeZoneOffsetString(n)){
              var
               _t56 =
                 GetUTCEpochNanoseconds
                  (GetSlot(r, i),
                   GetSlot(r, s),
                   GetSlot(r, l),
                   GetSlot(r, d),
                   GetSlot(r, m),
                   GetSlot(r, c),
                   GetSlot(r, h),
                   GetSlot(r, u),
                   GetSlot(r, T));
              if(null === _t56)
               throw new RangeError("DateTime outside of supported range");
              var _a21 = ParseTimeZoneOffsetString(n);
              return [new o(_t56 - BigInt(_a21))];
             }
             var
              p =
                function(t, r, o, n, a, i, s, l, d, m){
                  var c = GetUTCEpochNanoseconds(r, o, n, a, i, s, l, d, m);
                  if(null === c)
                   throw new RangeError("DateTime outside of supported range");
                  var h = c - Ee;
                  h < Me && (h = c);
                  var u = c + Ee;
                  u > Re && (u = c);
                  var
                   T = GetNamedTimeZoneOffsetNanoseconds(t, h),
                   p = GetNamedTimeZoneOffsetNanoseconds(t, u);
                  return (T === p ? [T] : [T, p]).map
                           (function(h){
                             var
                              u = c - BigInt(h),
                              T = GetNamedTimeZoneDateTimeParts(t, u);
                             if
                              (r === T.year && o === T.month && n === T.day
                               && a === T.hour
                               && i === T.minute
                               && s === T.second
                               && l === T.millisecond
                               && d === T.microsecond
                               && m === T.nanosecond)
                              return u;
                            }).filter
                          (function(e){return void 0 !== e;});
                 }
                 (n,
                  GetSlot(r, i),
                  GetSlot(r, s),
                  GetSlot(r, l),
                  GetSlot(r, d),
                  GetSlot(r, m),
                  GetSlot(r, c),
                  GetSlot(r, h),
                  GetSlot(r, u),
                  GetSlot(r, T));
             return p.map(function(e){return new o(e);});
            }},
           {key: "getNextTransition",
            value:
            function(e){
             if(! IsTemporalTimeZone(this))
              throw new TypeError("invalid receiver");
             var t = ToTemporalInstant(e), r = GetSlot(this, a);
             if(IsTimeZoneOffsetString(r) || "UTC" === r) return null;
             var o = GetSlot(t, n), i = GetIntrinsic("%Temporal.Instant%");
             return o = GetNamedTimeZoneNextTransition(r, o),
                    null === o ? null : new i(o);
            }},
           {key: "getPreviousTransition",
            value:
            function(e){
             if(! IsTemporalTimeZone(this))
              throw new TypeError("invalid receiver");
             var t = ToTemporalInstant(e), r = GetSlot(this, a);
             if(IsTimeZoneOffsetString(r) || "UTC" === r) return null;
             var o = GetSlot(t, n), i = GetIntrinsic("%Temporal.Instant%");
             return o = GetNamedTimeZonePreviousTransition(r, o),
                    null === o ? null : new i(o);
            }},
           {key: "toString",
            value:
            function(){
             if(! IsTemporalTimeZone(this))
              throw new TypeError("invalid receiver");
             return GetSlot(this, a);
            }},
           {key: "toJSON",
            value:
            function(){
             if(! IsTemporalTimeZone(this))
              throw new TypeError("invalid receiver");
             return GetSlot(this, a);
            }}],
          [{key: "from",
            value:
            function(e){
             return ToTemporalTimeZoneObject(ToTemporalTimeZoneSlotValue(e));
            }}]);
        return TimeZone;
       }
       ();
   MakeIntrinsicClass(TimeZone, "Temporal.TimeZone"),
   DefineIntrinsic
    ("Temporal.TimeZone.prototype.getOffsetNanosecondsFor",
     TimeZone.prototype.getOffsetNanosecondsFor),
   DefineIntrinsic
    ("Temporal.TimeZone.prototype.getPossibleInstantsFor",
     TimeZone.prototype.getPossibleInstantsFor);
   var
    Rt = Object.create,
    PlainYearMonth =
      function(){
        function PlainYearMonth(e, t){
         var
          r =
            arguments.length > 2 && arguments[2] !== undefined
             ? arguments[2]
             : "iso8601",
          o =
            arguments.length > 3 && arguments[3] !== undefined
             ? arguments[3]
             : 1;
         _classCallCheck(this, PlainYearMonth);
         CreateTemporalYearMonthSlots
          (this,
           ToIntegerWithTruncation(e),
           ToIntegerWithTruncation(t),
           ToTemporalCalendarSlotValue(r),
           ToIntegerWithTruncation(o));
        }
        _createClass
         (PlainYearMonth,
          [{key: "year",
            get:
            function(){
             if(! IsTemporalYearMonth(this))
              throw new TypeError("invalid receiver");
             return CalendarYear(GetSlot(this, p), this);
            }},
           {key: "month",
            get:
            function(){
             if(! IsTemporalYearMonth(this))
              throw new TypeError("invalid receiver");
             return CalendarMonth(GetSlot(this, p), this);
            }},
           {key: "monthCode",
            get:
            function(){
             if(! IsTemporalYearMonth(this))
              throw new TypeError("invalid receiver");
             return CalendarMonthCode(GetSlot(this, p), this);
            }},
           {key: "calendarId",
            get:
            function(){
             if(! IsTemporalYearMonth(this))
              throw new TypeError("invalid receiver");
             return ToTemporalCalendarIdentifier(GetSlot(this, p));
            }},
           {key: "era",
            get:
            function(){
             if(! IsTemporalYearMonth(this))
              throw new TypeError("invalid receiver");
             return CalendarEra(GetSlot(this, p), this);
            }},
           {key: "eraYear",
            get:
            function(){
             if(! IsTemporalYearMonth(this))
              throw new TypeError("invalid receiver");
             return CalendarEraYear(GetSlot(this, p), this);
            }},
           {key: "daysInMonth",
            get:
            function(){
             if(! IsTemporalYearMonth(this))
              throw new TypeError("invalid receiver");
             return CalendarDaysInMonth(GetSlot(this, p), this);
            }},
           {key: "daysInYear",
            get:
            function(){
             if(! IsTemporalYearMonth(this))
              throw new TypeError("invalid receiver");
             return CalendarDaysInYear(GetSlot(this, p), this);
            }},
           {key: "monthsInYear",
            get:
            function(){
             if(! IsTemporalYearMonth(this))
              throw new TypeError("invalid receiver");
             return CalendarMonthsInYear(GetSlot(this, p), this);
            }},
           {key: "inLeapYear",
            get:
            function(){
             if(! IsTemporalYearMonth(this))
              throw new TypeError("invalid receiver");
             return CalendarInLeapYear(GetSlot(this, p), this);
            }},
           {key: "with",
            value:
            function(e, t){
             if(! IsTemporalYearMonth(this))
              throw new TypeError("invalid receiver");
             if(! IsObject(e)) throw new TypeError("invalid argument");
             RejectTemporalLikeObject(e);
             var
              r = GetOptionsObject(t),
              o = GetSlot(this, p),
              n = CalendarFields(o, ["month", "monthCode", "year"]),
              a = PrepareTemporalFields(this, n, []);
             return a =
                     CalendarMergeFields
                      (o, a, PrepareTemporalFields(e, n, "partial")),
                    a = PrepareTemporalFields(a, n, []),
                    CalendarYearMonthFromFields(o, a, r);
            }},
           {key: "add",
            value:
            function(e, t){
             if(! IsTemporalYearMonth(this))
              throw new TypeError("invalid receiver");
             return AddDurationToOrSubtractDurationFromPlainYearMonth
                     ("add", this, e, t);
            }},
           {key: "subtract",
            value:
            function(e, t){
             if(! IsTemporalYearMonth(this))
              throw new TypeError("invalid receiver");
             return AddDurationToOrSubtractDurationFromPlainYearMonth
                     ("subtract", this, e, t);
            }},
           {key: "until",
            value:
            function(e, t){
             if(! IsTemporalYearMonth(this))
              throw new TypeError("invalid receiver");
             return DifferenceTemporalPlainYearMonth("until", this, e, t);
            }},
           {key: "since",
            value:
            function(e, t){
             if(! IsTemporalYearMonth(this))
              throw new TypeError("invalid receiver");
             return DifferenceTemporalPlainYearMonth("since", this, e, t);
            }},
           {key: "equals",
            value:
            function(e){
             if(! IsTemporalYearMonth(this))
              throw new TypeError("invalid receiver");
             var t = ToTemporalYearMonth(e);
             for
             (var _i29 = 0, _arr14 = [i, s, l]; _i29 < _arr14.length; _i29++){
              var _e61 = _arr14[_i29];
              if(GetSlot(this, _e61) !== GetSlot(t, _e61)) return ! 1;
             }
             return CalendarEquals(GetSlot(this, p), GetSlot(t, p));
            }},
           {key: "toString",
            value:
            function(e){
             if(! IsTemporalYearMonth(this))
              throw new TypeError("invalid receiver");
             return TemporalYearMonthToString
                     (this, ToCalendarNameOption(GetOptionsObject(e)));
            }},
           {key: "toJSON",
            value:
            function(){
             if(! IsTemporalYearMonth(this))
              throw new TypeError("invalid receiver");
             return TemporalYearMonthToString(this);
            }},
           {key: "toLocaleString",
            value:
            function(e, t){
             if(! IsTemporalYearMonth(this))
              throw new TypeError("invalid receiver");
             return new ht(e, t).format(this);
            }},
           {key: "valueOf",
            value:
            function(){
             throw new
                    TypeError
                    ("use compare() or equals() to compare Temporal.PlainYearMonth");
            }},
           {key: "toPlainDate",
            value:
            function(e){
             if(! IsTemporalYearMonth(this))
              throw new TypeError("invalid receiver");
             if(! IsObject(e))
              throw new TypeError("argument should be an object");
             var
              t = GetSlot(this, p),
              r = CalendarFields(t, ["monthCode", "year"]),
              o = PrepareTemporalFields(this, r, []),
              n = CalendarFields(t, ["day"]),
              a = CalendarMergeFields(t, o, PrepareTemporalFields(e, n, []));
             a =
              PrepareTemporalFields
               (a,
                _toConsumableArray
                 (new
                   Set
                   ([].concat(_toConsumableArray(r), _toConsumableArray(n)))),
                []);
             var i = Rt(null);
             return i.overflow = "reject", CalendarDateFromFields(t, a, i);
            }},
           {key: "getISOFields",
            value:
            function(){
             if(! IsTemporalYearMonth(this))
              throw new TypeError("invalid receiver");
             return {calendar: GetSlot(this, p),
                     isoDay: GetSlot(this, l),
                     isoMonth: GetSlot(this, s),
                     isoYear: GetSlot(this, i)};
            }},
           {key: "getCalendar",
            value:
            function(){
             if(! IsTemporalYearMonth(this))
              throw new TypeError("invalid receiver");
             return ToTemporalCalendarObject(GetSlot(this, p));
            }}],
          [{key: "from",
            value:
            function(e, t){
             var r = GetOptionsObject(t);
             return IsTemporalYearMonth(e)
                     ? (ToTemporalOverflow
                        (r),
                       CreateTemporalYearMonth
                        (GetSlot(e, i), GetSlot(e, s), GetSlot(e, p), GetSlot(e, l)))
                     : ToTemporalYearMonth(e, r);
            }},
           {key: "compare",
            value:
            function(e, t){
             var r = ToTemporalYearMonth(e), o = ToTemporalYearMonth(t);
             return CompareISODate
                     (GetSlot(r, i),
                      GetSlot(r, s),
                      GetSlot(r, l),
                      GetSlot(o, i),
                      GetSlot(o, s),
                      GetSlot(o, l));
            }}]);
        return PlainYearMonth;
       }
       ();
   MakeIntrinsicClass(PlainYearMonth, "Temporal.PlainYearMonth");
   var
    Ft = ht.prototype.resolvedOptions,
    Yt = Object.create,
    ZonedDateTime =
      function(){
        function ZonedDateTime(e, t){
         var
          r =
            arguments.length > 2 && arguments[2] !== undefined
             ? arguments[2]
             : "iso8601";
         _classCallCheck(this, ZonedDateTime);
         if(arguments.length < 1)
          throw new
                 TypeError
                 ("missing argument: epochNanoseconds is required");
         CreateTemporalZonedDateTimeSlots
          (this,
           ToBigInt(e),
           ToTemporalTimeZoneSlotValue(t),
           ToTemporalCalendarSlotValue(r));
        }
        _createClass
         (ZonedDateTime,
          [{key: "calendarId",
            get:
            function(){
             if(! IsTemporalZonedDateTime(this))
              throw new TypeError("invalid receiver");
             return ToTemporalCalendarIdentifier(GetSlot(this, p));
            }},
           {key: "timeZoneId",
            get:
            function(){
             if(! IsTemporalZonedDateTime(this))
              throw new TypeError("invalid receiver");
             return ToTemporalTimeZoneIdentifier(GetSlot(this, g));
            }},
           {key: "year",
            get:
            function(){
             if(! IsTemporalZonedDateTime(this))
              throw new TypeError("invalid receiver");
             return CalendarYear(GetSlot(this, p), dateTime(this));
            }},
           {key: "month",
            get:
            function(){
             if(! IsTemporalZonedDateTime(this))
              throw new TypeError("invalid receiver");
             return CalendarMonth(GetSlot(this, p), dateTime(this));
            }},
           {key: "monthCode",
            get:
            function(){
             if(! IsTemporalZonedDateTime(this))
              throw new TypeError("invalid receiver");
             return CalendarMonthCode(GetSlot(this, p), dateTime(this));
            }},
           {key: "day",
            get:
            function(){
             if(! IsTemporalZonedDateTime(this))
              throw new TypeError("invalid receiver");
             return CalendarDay(GetSlot(this, p), dateTime(this));
            }},
           {key: "hour",
            get:
            function(){
             if(! IsTemporalZonedDateTime(this))
              throw new TypeError("invalid receiver");
             return GetSlot(dateTime(this), d);
            }},
           {key: "minute",
            get:
            function(){
             if(! IsTemporalZonedDateTime(this))
              throw new TypeError("invalid receiver");
             return GetSlot(dateTime(this), m);
            }},
           {key: "second",
            get:
            function(){
             if(! IsTemporalZonedDateTime(this))
              throw new TypeError("invalid receiver");
             return GetSlot(dateTime(this), c);
            }},
           {key: "millisecond",
            get:
            function(){
             if(! IsTemporalZonedDateTime(this))
              throw new TypeError("invalid receiver");
             return GetSlot(dateTime(this), h);
            }},
           {key: "microsecond",
            get:
            function(){
             if(! IsTemporalZonedDateTime(this))
              throw new TypeError("invalid receiver");
             return GetSlot(dateTime(this), u);
            }},
           {key: "nanosecond",
            get:
            function(){
             if(! IsTemporalZonedDateTime(this))
              throw new TypeError("invalid receiver");
             return GetSlot(dateTime(this), T);
            }},
           {key: "era",
            get:
            function(){
             if(! IsTemporalZonedDateTime(this))
              throw new TypeError("invalid receiver");
             return CalendarEra(GetSlot(this, p), dateTime(this));
            }},
           {key: "eraYear",
            get:
            function(){
             if(! IsTemporalZonedDateTime(this))
              throw new TypeError("invalid receiver");
             return CalendarEraYear(GetSlot(this, p), dateTime(this));
            }},
           {key: "epochSeconds",
            get:
            function(){
             if(! IsTemporalZonedDateTime(this))
              throw new TypeError("invalid receiver");
             var t = GetSlot(this, n);
             return Number(BigIntFloorDiv(t, ve));
            }},
           {key: "epochMilliseconds",
            get:
            function(){
             if(! IsTemporalZonedDateTime(this))
              throw new TypeError("invalid receiver");
             var t = GetSlot(this, n);
             return Number(BigIntFloorDiv(t, Ge));
            }},
           {key: "epochMicroseconds",
            get:
            function(){
             if(! IsTemporalZonedDateTime(this))
              throw new TypeError("invalid receiver");
             return ToBigIntExternal(BigIntFloorDiv(GetSlot(this, n), De));
            }},
           {key: "epochNanoseconds",
            get:
            function(){
             if(! IsTemporalZonedDateTime(this))
              throw new TypeError("invalid receiver");
             return ToBigIntExternal(GetSlot(this, n));
            }},
           {key: "dayOfWeek",
            get:
            function(){
             if(! IsTemporalZonedDateTime(this))
              throw new TypeError("invalid receiver");
             return CalendarDayOfWeek(GetSlot(this, p), dateTime(this));
            }},
           {key: "dayOfYear",
            get:
            function(){
             if(! IsTemporalZonedDateTime(this))
              throw new TypeError("invalid receiver");
             return CalendarDayOfYear(GetSlot(this, p), dateTime(this));
            }},
           {key: "weekOfYear",
            get:
            function(){
             if(! IsTemporalZonedDateTime(this))
              throw new TypeError("invalid receiver");
             return CalendarWeekOfYear(GetSlot(this, p), dateTime(this));
            }},
           {key: "yearOfWeek",
            get:
            function(){
             if(! IsTemporalZonedDateTime(this))
              throw new TypeError("invalid receiver");
             return CalendarYearOfWeek(GetSlot(this, p), dateTime(this));
            }},
           {key: "hoursInDay",
            get:
            function(){
             if(! IsTemporalZonedDateTime(this))
              throw new TypeError("invalid receiver");
             var
              t = dateTime(this),
              r = GetIntrinsic("%Temporal.PlainDateTime%"),
              o = GetSlot(t, i),
              a = GetSlot(t, s),
              d = GetSlot(t, l),
              m = new r(o, a, d, 0, 0, 0, 0, 0, 0),
              c = AddISODate(o, a, d, 0, 0, 0, 1, "reject"),
              h = new r(c.year, c.month, c.day, 0, 0, 0, 0, 0, 0),
              u = GetSlot(this, g),
              T = GetSlot(GetInstantFor(u, m, "compatible"), n),
              p = GetSlot(GetInstantFor(u, h, "compatible"), n);
             return BigIntDivideToNumber(p - T, Oe);
            }},
           {key: "daysInWeek",
            get:
            function(){
             if(! IsTemporalZonedDateTime(this))
              throw new TypeError("invalid receiver");
             return CalendarDaysInWeek(GetSlot(this, p), dateTime(this));
            }},
           {key: "daysInMonth",
            get:
            function(){
             if(! IsTemporalZonedDateTime(this))
              throw new TypeError("invalid receiver");
             return CalendarDaysInMonth(GetSlot(this, p), dateTime(this));
            }},
           {key: "daysInYear",
            get:
            function(){
             if(! IsTemporalZonedDateTime(this))
              throw new TypeError("invalid receiver");
             return CalendarDaysInYear(GetSlot(this, p), dateTime(this));
            }},
           {key: "monthsInYear",
            get:
            function(){
             if(! IsTemporalZonedDateTime(this))
              throw new TypeError("invalid receiver");
             return CalendarMonthsInYear(GetSlot(this, p), dateTime(this));
            }},
           {key: "inLeapYear",
            get:
            function(){
             if(! IsTemporalZonedDateTime(this))
              throw new TypeError("invalid receiver");
             return CalendarInLeapYear(GetSlot(this, p), dateTime(this));
            }},
           {key: "offset",
            get:
            function(){
             if(! IsTemporalZonedDateTime(this))
              throw new TypeError("invalid receiver");
             return GetOffsetStringFor(GetSlot(this, g), GetSlot(this, S));
            }},
           {key: "offsetNanoseconds",
            get:
            function(){
             if(! IsTemporalZonedDateTime(this))
              throw new TypeError("invalid receiver");
             return GetOffsetNanosecondsFor
                     (GetSlot(this, g), GetSlot(this, S));
            }},
           {key: "with",
            value:
            function(e, t){
             if(! IsTemporalZonedDateTime(this))
              throw new TypeError("invalid receiver");
             if(! IsObject(e))
              throw new TypeError("invalid zoned-date-time-like");
             RejectTemporalLikeObject(e);
             var
              r = GetOptionsObject(t),
              o = GetSlot(this, p),
              n =
                CalendarFields
                 (o,
                  ["day",
                   "hour",
                   "microsecond",
                   "millisecond",
                   "minute",
                   "month",
                   "monthCode",
                   "nanosecond",
                   "second",
                   "year"]);
             n.push("offset");
             var a = PrepareTemporalFields(this, n, ["offset"]);
             a =
              CalendarMergeFields
               (o, a, PrepareTemporalFields(e, n, "partial")),
             a = PrepareTemporalFields(a, n, ["offset"]);
             var
              i = ToTemporalDisambiguation(r),
              s = ToTemporalOffset(r, "prefer"),
              _InterpretTemporalDat5 =
                InterpretTemporalDateTimeFields(o, a, r),
              l = _InterpretTemporalDat5.year,
              d = _InterpretTemporalDat5.month,
              m = _InterpretTemporalDat5.day,
              c = _InterpretTemporalDat5.hour,
              h = _InterpretTemporalDat5.minute,
              u = _InterpretTemporalDat5.second,
              T = _InterpretTemporalDat5.millisecond,
              f = _InterpretTemporalDat5.microsecond,
              y = _InterpretTemporalDat5.nanosecond,
              I = ParseTimeZoneOffsetString(a.offset),
              S = GetSlot(this, g);
             return CreateTemporalZonedDateTime
                     (InterpretISODateTimeOffset
                       (l, d, m, c, h, u, T, f, y, "option", I, S, i, s, ! 1),
                      S,
                      o);
            }},
           {key: "withPlainDate",
            value:
            function(e){
             if(! IsTemporalZonedDateTime(this))
              throw new TypeError("invalid receiver");
             var
              t = ToTemporalDate(e),
              r = GetSlot(t, i),
              o = GetSlot(t, s),
              a = GetSlot(t, l),
              f = GetSlot(t, p),
              y = dateTime(this),
              I = GetSlot(y, d),
              S = GetSlot(y, m),
              w = GetSlot(y, c),
              D = GetSlot(y, h),
              G = GetSlot(y, u),
              v = GetSlot(y, T);
             f = ConsolidateCalendars(GetSlot(this, p), f);
             var C = GetSlot(this, g);
             return CreateTemporalZonedDateTime
                     (GetSlot
                       (GetInstantFor
                         (C,
                          new
                           (GetIntrinsic("%Temporal.PlainDateTime%"))
                           (r, o, a, I, S, w, D, G, v, f),
                          "compatible"),
                        n),
                      C,
                      f);
            }},
           {key: "withPlainTime",
            value:
            function(e){
             if(! IsTemporalZonedDateTime(this))
              throw new TypeError("invalid receiver");
             var
              t = GetIntrinsic("%Temporal.PlainTime%"),
              r = void 0 === e ? new t() : ToTemporalTime(e),
              o = dateTime(this),
              a = GetSlot(o, i),
              f = GetSlot(o, s),
              y = GetSlot(o, l),
              I = GetSlot(this, p),
              S = GetSlot(r, d),
              w = GetSlot(r, m),
              D = GetSlot(r, c),
              G = GetSlot(r, h),
              v = GetSlot(r, u),
              C = GetSlot(r, T),
              O = GetSlot(this, g);
             return CreateTemporalZonedDateTime
                     (GetSlot
                       (GetInstantFor
                         (O,
                          new
                           (GetIntrinsic("%Temporal.PlainDateTime%"))
                           (a, f, y, S, w, D, G, v, C, I),
                          "compatible"),
                        n),
                      O,
                      I);
            }},
           {key: "withTimeZone",
            value:
            function(e){
             if(! IsTemporalZonedDateTime(this))
              throw new TypeError("invalid receiver");
             var t = ToTemporalTimeZoneSlotValue(e);
             return CreateTemporalZonedDateTime
                     (GetSlot(this, n), t, GetSlot(this, p));
            }},
           {key: "withCalendar",
            value:
            function(e){
             if(! IsTemporalZonedDateTime(this))
              throw new TypeError("invalid receiver");
             var t = ToTemporalCalendarSlotValue(e);
             return CreateTemporalZonedDateTime
                     (GetSlot(this, n), GetSlot(this, g), t);
            }},
           {key: "add",
            value:
            function(e, t){
             if(! IsTemporalZonedDateTime(this))
              throw new TypeError("invalid receiver");
             return AddDurationToOrSubtractDurationFromZonedDateTime
                     ("add", this, e, t);
            }},
           {key: "subtract",
            value:
            function(e, t){
             if(! IsTemporalZonedDateTime(this))
              throw new TypeError("invalid receiver");
             return AddDurationToOrSubtractDurationFromZonedDateTime
                     ("subtract", this, e, t);
            }},
           {key: "until",
            value:
            function(e, t){
             if(! IsTemporalZonedDateTime(this))
              throw new TypeError("invalid receiver");
             return DifferenceTemporalZonedDateTime("until", this, e, t);
            }},
           {key: "since",
            value:
            function(e, t){
             if(! IsTemporalZonedDateTime(this))
              throw new TypeError("invalid receiver");
             return DifferenceTemporalZonedDateTime("since", this, e, t);
            }},
           {key: "round",
            value:
            function(t){
             if(! IsTemporalZonedDateTime(this))
              throw new TypeError("invalid receiver");
             if(void 0 === t)
              throw new TypeError("options parameter is required");
             var
              r =
                "string" == typeof t
                 ? CreateOnePropObject("smallestUnit", t)
                 : GetOptionsObject(t),
              o = ToTemporalRoundingIncrement(r),
              a = ToTemporalRoundingMode(r, "halfExpand"),
              f = GetTemporalUnit(r, "smallestUnit", "time", He, ["day"]),
              y =
                {day: 1,
                  hour: 24,
                  minute: 60,
                  second: 60,
                  millisecond: 1e3,
                  microsecond: 1e3,
                  nanosecond: 1e3}
                 [f];
             ValidateTemporalRoundingIncrement(o, y, 1 === y);
             var
              I = dateTime(this),
              w = GetSlot(I, i),
              D = GetSlot(I, s),
              G = GetSlot(I, l),
              v = GetSlot(I, d),
              C = GetSlot(I, m),
              O = GetSlot(I, c),
              b = GetSlot(I, h),
              E = GetSlot(I, u),
              M = GetSlot(I, T),
              R = GetIntrinsic("%Temporal.PlainDateTime%"),
              F = GetSlot(this, g),
              Y = GetSlot(this, p),
              P =
                GetInstantFor
                 (F,
                  new
                   R
                   (GetSlot(I, i),
                    GetSlot(I, s),
                    GetSlot(I, l),
                    0,
                    0,
                    0,
                    0,
                    0,
                    0),
                  "compatible"),
              Z = AddZonedDateTime(P, F, Y, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0),
              B = Z - BigInt(GetSlot(P, n));
             if(B <= Ie)
              throw new
                     RangeError
                     ("cannot round a ZonedDateTime in a calendar with zero or negative length days");
             var
              _RoundISODateTime3 =
                RoundISODateTime
                 (w, D, G, v, C, O, b, E, M, o, f, a, Number(B));
             w = _RoundISODateTime3.year;
             D = _RoundISODateTime3.month;
             G = _RoundISODateTime3.day;
             v = _RoundISODateTime3.hour;
             C = _RoundISODateTime3.minute;
             O = _RoundISODateTime3.second;
             b = _RoundISODateTime3.millisecond;
             E = _RoundISODateTime3.microsecond;
             M = _RoundISODateTime3.nanosecond;
             return CreateTemporalZonedDateTime
                     (InterpretISODateTimeOffset
                       (w,
                        D,
                        G,
                        v,
                        C,
                        O,
                        b,
                        E,
                        M,
                        "option",
                        GetOffsetNanosecondsFor(F, GetSlot(this, S)),
                        F,
                        "compatible",
                        "prefer",
                        ! 1),
                      F,
                      GetSlot(this, p));
            }},
           {key: "equals",
            value:
            function(t){
             if(! IsTemporalZonedDateTime(this))
              throw new TypeError("invalid receiver");
             var
              r = ToTemporalZonedDateTime(t),
              o = GetSlot(this, n),
              a = GetSlot(r, n);
             return !
                    !
                    (BigInt(o) === BigInt(a))
                    && ! ! TimeZoneEquals(GetSlot(this, g), GetSlot(r, g))
                    && CalendarEquals(GetSlot(this, p), GetSlot(r, p));
            }},
           {key: "toString",
            value:
            function(e){
             if(! IsTemporalZonedDateTime(this))
              throw new TypeError("invalid receiver");
             var
              t = GetOptionsObject(e),
              r = ToCalendarNameOption(t),
              o = ToFractionalSecondDigits(t),
              n =
                function(e){
                  return GetOption(e, "offset", ["auto", "never"], "auto");
                 }
                 (t),
              a = ToTemporalRoundingMode(t, "trunc"),
              i = GetTemporalUnit(t, "smallestUnit", "time", void 0);
             if("hour" === i)
              throw new
                     RangeError
                     ('smallestUnit must be a time unit other than "hour"');
             var
              s =
                function(e){
                  return GetOption
                          (e, "timeZoneName", ["auto", "never", "critical"], "auto");
                 }
                 (t),
              _ToSecondsStringPreci5 = ToSecondsStringPrecisionRecord(i, o),
              l = _ToSecondsStringPreci5.precision,
              d = _ToSecondsStringPreci5.unit,
              m = _ToSecondsStringPreci5.increment;
             return TemporalZonedDateTimeToString
                     (this, l, r, s, n, {unit: d, increment: m, roundingMode: a});
            }},
           {key: "toLocaleString",
            value:
            function(e, t){
             if(! IsTemporalZonedDateTime(this))
              throw new TypeError("invalid receiver");
             var r = GetOptionsObject(t), o = Yt(null);
             if(CopyDataProperties(o, r, ["timeZone"]), void 0 !== r.timeZone)
              throw new
                     TypeError
                     ("ZonedDateTime toLocaleString does not accept a timeZone option");
             void 0 === o.year && void 0 === o.month && void 0 === o.day
             && void 0 === o.weekday
             && void 0 === o.dateStyle
             && void 0 === o.hour
             && void 0 === o.minute
             && void 0 === o.second
             && void 0 === o.timeStyle
             && void 0 === o.dayPeriod
             && void 0 === o.timeZoneName
             && (o.timeZoneName = "short");
             var n = ToTemporalTimeZoneIdentifier(GetSlot(this, g));
             if(IsTimeZoneOffsetString(n))
              throw new
                     RangeError
                     ("toLocaleString does not support offset string time zones");
             n = GetCanonicalTimeZoneIdentifier(n), o.timeZone = n;
             var
              a = new ht(e, o),
              i = Call(Ft, a, []).calendar,
              s = ToTemporalCalendarIdentifier(GetSlot(this, p));
             if("iso8601" !== s && "iso8601" !== i && i !== s)
              throw new
                     RangeError
                     ("cannot format ZonedDateTime with calendar ".concat
                        (s, " in locale with calendar ").concat
                       (i));
             return a.format(GetSlot(this, S));
            }},
           {key: "toJSON",
            value:
            function(){
             if(! IsTemporalZonedDateTime(this))
              throw new TypeError("invalid receiver");
             return TemporalZonedDateTimeToString(this, "auto");
            }},
           {key: "valueOf",
            value:
            function(){
             throw new
                    TypeError
                    ("use compare() or equals() to compare Temporal.ZonedDateTime");
            }},
           {key: "startOfDay",
            value:
            function(){
             if(! IsTemporalZonedDateTime(this))
              throw new TypeError("invalid receiver");
             var
              e = dateTime(this),
              t = GetIntrinsic("%Temporal.PlainDateTime%"),
              r = GetSlot(this, p),
              o =
                new
                 t
                 (GetSlot(e, i),
                  GetSlot(e, s),
                  GetSlot(e, l),
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  r),
              a = GetSlot(this, g);
             return CreateTemporalZonedDateTime
                     (GetSlot(GetInstantFor(a, o, "compatible"), n), a, r);
            }},
           {key: "toInstant",
            value:
            function(){
             if(! IsTemporalZonedDateTime(this))
              throw new TypeError("invalid receiver");
             return new (GetIntrinsic("%Temporal.Instant%"))(GetSlot(this, n));
            }},
           {key: "toPlainDate",
            value:
            function(){
             if(! IsTemporalZonedDateTime(this))
              throw new TypeError("invalid receiver");
             return TemporalDateTimeToDate(dateTime(this));
            }},
           {key: "toPlainTime",
            value:
            function(){
             if(! IsTemporalZonedDateTime(this))
              throw new TypeError("invalid receiver");
             return TemporalDateTimeToTime(dateTime(this));
            }},
           {key: "toPlainDateTime",
            value:
            function(){
             if(! IsTemporalZonedDateTime(this))
              throw new TypeError("invalid receiver");
             return dateTime(this);
            }},
           {key: "toPlainYearMonth",
            value:
            function(){
             if(! IsTemporalZonedDateTime(this))
              throw new TypeError("invalid receiver");
             var e = GetSlot(this, p);
             return CalendarYearMonthFromFields
                     (e,
                      PrepareTemporalFields
                       (this, CalendarFields(e, ["monthCode", "year"]), []));
            }},
           {key: "toPlainMonthDay",
            value:
            function(){
             if(! IsTemporalZonedDateTime(this))
              throw new TypeError("invalid receiver");
             var e = GetSlot(this, p);
             return CalendarMonthDayFromFields
                     (e,
                      PrepareTemporalFields
                       (this, CalendarFields(e, ["day", "monthCode"]), []));
            }},
           {key: "getISOFields",
            value:
            function(){
             if(! IsTemporalZonedDateTime(this))
              throw new TypeError("invalid receiver");
             var e = dateTime(this), t = GetSlot(this, g);
             return {calendar: GetSlot(this, p),
                     isoDay: GetSlot(e, l),
                     isoHour: GetSlot(e, d),
                     isoMicrosecond: GetSlot(e, u),
                     isoMillisecond: GetSlot(e, h),
                     isoMinute: GetSlot(e, m),
                     isoMonth: GetSlot(e, s),
                     isoNanosecond: GetSlot(e, T),
                     isoSecond: GetSlot(e, c),
                     isoYear: GetSlot(e, i),
                     offset: GetOffsetStringFor(t, GetSlot(this, S)),
                     timeZone: t};
            }},
           {key: "getCalendar",
            value:
            function(){
             if(! IsTemporalZonedDateTime(this))
              throw new TypeError("invalid receiver");
             return ToTemporalCalendarObject(GetSlot(this, p));
            }},
           {key: "getTimeZone",
            value:
            function(){
             if(! IsTemporalZonedDateTime(this))
              throw new TypeError("invalid receiver");
             return ToTemporalTimeZoneObject(GetSlot(this, g));
            }}],
          [{key: "from",
            value:
            function(e, t){
             var r = GetOptionsObject(t);
             return IsTemporalZonedDateTime(e)
                     ? (ToTemporalDisambiguation
                        (r),
                       ToTemporalOffset(r, "reject"),
                       ToTemporalOverflow(r),
                       CreateTemporalZonedDateTime
                        (GetSlot(e, n), GetSlot(e, g), GetSlot(e, p)))
                     : ToTemporalZonedDateTime(e, r);
            }},
           {key: "compare",
            value:
            function(t, r){
             var
              o = ToTemporalZonedDateTime(t),
              a = ToTemporalZonedDateTime(r),
              i = GetSlot(o, n),
              s = GetSlot(a, n);
             return BigInt(i) < BigInt(s)
                     ? - 1
                     : BigInt(i) > BigInt(s) ? 1 : 0;
            }}]);
        return ZonedDateTime;
       }
       ();
   function dateTime(e){
    return GetPlainDateTimeFor(GetSlot(e, g), GetSlot(e, S), GetSlot(e, p));
   }
   MakeIntrinsicClass(ZonedDateTime, "Temporal.ZonedDateTime");
   var
    Pt =
      Object.freeze
       ({__proto__: null,
         Calendar: Calendar,
         Duration: Duration,
         Instant: Instant,
         Now: Et,
         PlainDate: PlainDate,
         PlainDateTime: PlainDateTime,
         PlainMonthDay: PlainMonthDay,
         PlainTime: PlainTime,
         PlainYearMonth: PlainYearMonth,
         TimeZone: TimeZone,
         ZonedDateTime: ZonedDateTime});
   function toTemporalInstant(){
    var t = BigInt(+ this) * Ge;
    return new Instant(t);
   }
   var
    Zt =
      [Instant,
       Calendar,
       PlainDate,
       PlainDateTime,
       Duration,
       PlainMonthDay,
       PlainTime,
       TimeZone,
       PlainYearMonth,
       ZonedDateTime];
   for(var _i30 = 0, _Zt = Zt; _i30 < _Zt.length; _i30++){
    var
     _e62 = _Zt[_i30],
     _t57 = Object.getOwnPropertyDescriptor(_e62, "prototype");
    (_t57.configurable || _t57.enumerable || _t57.writable)
    &&
     (_t57.configurable = ! 1,
      _t57.enumerable = ! 1,
      _t57.writable = ! 1,
      Object.defineProperty(_e62, "prototype", _t57));
   }
   var
    TemporalPolyfill =
      Object.freeze
       ({__proto__: null,
         Intl: ut,
         Temporal: Pt,
         toTemporalInstant: toTemporalInstant});
   globalThis.TemporalPolyfill = TemporalPolyfill;
  }
  (globalThis));
(function(globalThis){
   (function(f){
      if(typeof exports === "object" && typeof module !== "undefined")
       module.exports = f();
      else if(typeof define === "function" && define.amd)
       define([], f);
      else{
       var g;
       if(typeof window !== "undefined")
        g = window;
       else if(typeof global !== "undefined")
        g = global;
       else if(typeof self !== "undefined") g = self; else g = this;
       g.VirtualDom = f();
      }
     }
     (function(){
       var define, module, exports;
       return function(){
                  function r(e, n, t){
                   function o(i, f){
                    if(! n[i]){
                     if(! e[i]){
                      var c = "function" == typeof require && require;
                      if(! f && c) return c(i, ! 0);
                      if(u) return u(i, ! 0);
                      var a = new Error("Cannot find module '" + i + "'");
                      throw a.code = "MODULE_NOT_FOUND", a;
                     }
                     var p = n[i] = {exports: {}};
                     e[i][0].call
                      (p.exports,
                       function(r){var n = e[i][1][r]; return o(n || r);},
                       p,
                       p.exports,
                       r,
                       e,
                       n,
                       t);
                    }
                    return n[i].exports;
                   }
                   for
                   (var u = "function" == typeof require && require, i = 0;
                    i < t.length;
                    i++)
                    o(t[i]);
                   return o;
                  }
                  return r;
                 }
                 ()
                ({1: [function(require, module, exports){}, {}],
                  2:
                  [function(require, module, exports){
                    module.exports =
                     function(undef){
                       var
                        nativeSplit = String.prototype.split,
                        compliantExecNpcg = /()??/.exec("")[1] === undef,
                        self;
                       self =
                        function(str, separator, limit){
                         if
                          (Object.prototype.toString.call(separator)
                           !== "[object RegExp]")
                          return nativeSplit.call(str, separator, limit);
                         var
                          output = [],
                          flags =
                            (separator.ignoreCase ? "i" : "")
                            + (separator.multiline ? "m" : "")
                            + (separator.extended ? "x" : "")
                            + (separator.sticky ? "y" : ""),
                          lastLastIndex = 0,
                          separator = new RegExp(separator.source, flags + "g"),
                          separator2,
                          match,
                          lastIndex,
                          lastLength;
                         str += "";
                         if(! compliantExecNpcg)
                          separator2 =
                           new RegExp("^" + separator.source + "$(?!\\s)", flags);
                         limit = limit === undef ? - 1 >>> 0 : limit >>> 0;
                         while(match = separator.exec(str)){
                          lastIndex = match.index + match[0].length;
                          if(lastIndex > lastLastIndex){
                           output.push(str.slice(lastLastIndex, match.index));
                           if(! compliantExecNpcg && match.length > 1)
                            match[0].replace
                             (separator2,
                              function(){
                               for(var i = 1; i < arguments.length - 2; i++)
                                if(arguments[i] === undef) match[i] = undef;
                              });
                           if(match.length > 1 && match.index < str.length)
                            Array.prototype.push.apply(output, match.slice(1));
                           lastLength = match[0].length;
                           lastLastIndex = lastIndex;
                           if(output.length >= limit) break;
                          }
                          if(separator.lastIndex === match.index)
                           separator.lastIndex++;
                         }
                         if(lastLastIndex === str.length){
                          if(lastLength || ! separator.test("")) output.push("");
                         }
                         else
                          output.push(str.slice(lastLastIndex));
                         return output.length > limit
                                 ? output.slice(0, limit)
                                 : output;
                        };
                       return self;
                      }
                      ();
                   },
                   {}],
                  3:
                  [function(require, module, exports){
                    "use strict";
                    var
                     OneVersionConstraint = require("individual/one-version"),
                     MY_VERSION = "7";
                    OneVersionConstraint("ev-store", MY_VERSION);
                    var hashKey = "__EV_STORE_KEY@" + MY_VERSION;
                    module.exports = EvStore;
                    function EvStore(elem){
                     var hash = elem[hashKey];
                     if(! hash) hash = elem[hashKey] = {};
                     return hash;
                    }
                   },
                   {"individual/one-version": 6}],
                  4:
                  [function(require, module, exports){
                    (function(global){
                       (function(){
                          var
                           topLevel =
                             typeof global !== "undefined"
                              ? global
                              : typeof window !== "undefined" ? window : {},
                           minDoc = require("min-document"),
                           doccy;
                          if(typeof document !== "undefined")
                           doccy = document;
                          else{
                           doccy = topLevel["__GLOBAL_DOCUMENT_CACHE@4"];
                           if(! doccy)
                            doccy = topLevel["__GLOBAL_DOCUMENT_CACHE@4"] = minDoc;
                          }
                          module.exports = doccy;
                         }.call
                         (this));
                      }.call
                      (this,
                       typeof global !== "undefined"
                        ? global
                        : typeof
                          self
                          !== "undefined"
                          ? self
                          : typeof window !== "undefined" ? window : {}));
                   },
                   {"min-document": 1}],
                  5:
                  [function(require, module, exports){
                    (function(global){
                       (function(){
                          "use strict";
                          var
                           root =
                             typeof window !== "undefined"
                              ? window
                              : typeof global !== "undefined" ? global : {};
                          module.exports = Individual;
                          function Individual(key, value){
                           if(key in root) return root[key];
                           root[key] = value;
                           return value;
                          }
                         }.call
                         (this));
                      }.call
                      (this,
                       typeof global !== "undefined"
                        ? global
                        : typeof
                          self
                          !== "undefined"
                          ? self
                          : typeof window !== "undefined" ? window : {}));
                   },
                   {}],
                  6:
                  [function(require, module, exports){
                    "use strict";
                    var Individual = require("./index.js");
                    module.exports = OneVersion;
                    function OneVersion(moduleName, version, defaultValue){
                     var
                      key = "__INDIVIDUAL_ONE_VERSION_" + moduleName,
                      enforceKey = key + "_ENFORCE_SINGLETON",
                      versionValue = Individual(enforceKey, version);
                     if(versionValue !== version)
                      throw new
                             Error
                             ("Can only have one copy of " + moduleName + ".\n"
                              + "You already have version "
                              + versionValue
                              + " installed.\n"
                              + "This means you cannot install version "
                              + version);
                     return Individual(key, defaultValue);
                    }
                   },
                   {"./index.js": 5}],
                  7:
                  [function(require, module, exports){
                    "use strict";
                    module.exports =
                     function(x){return typeof x === "object" && x !== null;};
                   },
                   {}],
                  8:
                  [function(require, module, exports){
                    var
                     nativeIsArray = Array.isArray,
                     toString = Object.prototype.toString;
                    module.exports = nativeIsArray || isArray;
                    function isArray(obj){
                     return toString.call(obj) === "[object Array]";
                    }
                   },
                   {}],
                  9:
                  [function(require, module, exports){
                    var createElement = require("./vdom/create-element.js");
                    module.exports = createElement;
                   },
                   {"./vdom/create-element.js": 13}],
                  10:
                  [function(require, module, exports){
                    var diff = require("./vtree/diff.js");
                    module.exports = diff;
                   },
                   {"./vtree/diff.js": 36}],
                  11:
                  [function(require, module, exports){
                    var patch = require("./vdom/patch.js");
                    module.exports = patch;
                   },
                   {"./vdom/patch.js": 16}],
                  12:
                  [function(require, module, exports){
                    var
                     isObject = require("is-object"),
                     isHook = require("../vnode/is-vhook.js");
                    module.exports = applyProperties;
                    function applyProperties(node, props, previous){
                     for(var propName in props){
                      var propValue = props[propName];
                      if(propValue === undefined)
                       removeProperty(node, propName, propValue, previous);
                      else if(isHook(propValue)){
                       removeProperty(node, propName, propValue, previous);
                       if(propValue.hook)
                        propValue.hook
                         (node, propName, previous ? previous[propName] : undefined);
                      }
                      else if(isObject(propValue))
                       patchObject(node, props, previous, propName, propValue);
                      else
                       node[propName] = propValue;
                     }
                    }
                    function removeProperty(node, propName, propValue, previous){
                     if(previous){
                      var previousValue = previous[propName];
                      if(! isHook(previousValue))
                       if(propName === "attributes")
                        for(var attrName in previousValue)
                         node.removeAttribute(attrName);
                       else if(propName === "style")
                        for(var i in previousValue) node.style[i] = "";
                       else if(typeof previousValue === "string")
                        node[propName] = "";
                       else
                        node[propName] = null;
                      else if(previousValue.unhook)
                       previousValue.unhook(node, propName, propValue);
                     }
                    }
                    function patchObject
                    (node, props, previous, propName, propValue){
                     var
                      previousValue = previous ? previous[propName] : undefined;
                     if(propName === "attributes"){
                      for(var attrName in propValue){
                       var attrValue = propValue[attrName];
                       if(attrValue === undefined)
                        node.removeAttribute(attrName);
                       else
                        node.setAttribute(attrName, attrValue);
                      }
                      return;
                     }
                     if
                      (previousValue && isObject(previousValue)
                       && getPrototype(previousValue) !== getPrototype(propValue)){node[propName] = propValue; return;}
                     if(! isObject(node[propName])) node[propName] = {};
                     var replacer = propName === "style" ? "" : undefined;
                     for(var k in propValue){
                      var value = propValue[k];
                      node[propName][k] = value === undefined ? replacer : value;
                     }
                    }
                    function getPrototype(value){
                     if(Object.getPrototypeOf)
                      return Object.getPrototypeOf(value);
                     else if(value.__proto__)
                      return value.__proto__;
                     else if(value.constructor)
                      return value.constructor.prototype;
                    }
                   },
                   {"../vnode/is-vhook.js": 27, "is-object": 7}],
                  13:
                  [function(require, module, exports){
                    var
                     document = require("global/document"),
                     applyProperties = require("./apply-properties"),
                     isVNode = require("../vnode/is-vnode.js"),
                     isVText = require("../vnode/is-vtext.js"),
                     isWidget = require("../vnode/is-widget.js"),
                     handleThunk = require("../vnode/handle-thunk.js");
                    module.exports = createElement;
                    function createElement(vnode, opts){
                     var
                      doc = opts ? opts.document || document : document,
                      warn = opts ? opts.warn : null;
                     vnode = handleThunk(vnode).a;
                     if(isWidget(vnode))
                      return vnode.init();
                     else if(isVText(vnode))
                      return doc.createTextNode(vnode.text);
                     else if(! isVNode(vnode)){
                      if(warn)
                       warn("Item is not a valid virtual dom node", vnode);
                      return null;
                     }
                     var
                      node =
                        vnode.namespace === null
                         ? doc.createElement(vnode.tagName)
                         : doc.createElementNS(vnode.namespace, vnode.tagName),
                      props = vnode.properties;
                     applyProperties(node, props);
                     var children = vnode.children;
                     for(var i = 0; i < children.length; i++){
                      var childNode = createElement(children[i], opts);
                      if(childNode) node.appendChild(childNode);
                     }
                     return node;
                    }
                   },
                   {"../vnode/handle-thunk.js": 25,
                    "../vnode/is-vnode.js": 28,
                    "../vnode/is-vtext.js": 29,
                    "../vnode/is-widget.js": 30,
                    "./apply-properties": 12,
                    "global/document": 4}],
                  14:
                  [function(require, module, exports){
                    var noChild = {};
                    module.exports = domIndex;
                    function domIndex(rootNode, tree, indices, nodes){
                     if(! indices || indices.length === 0)
                      return {};
                     else{
                      indices.sort(ascending);
                      return recurse(rootNode, tree, indices, nodes, 0);
                     }
                    }
                    function recurse(rootNode, tree, indices, nodes, rootIndex){
                     nodes = nodes || {};
                     if(rootNode){
                      if(indexInRange(indices, rootIndex, rootIndex))
                       nodes[rootIndex] = rootNode;
                      var vChildren = tree.children;
                      if(vChildren){
                       var childNodes = rootNode.childNodes;
                       for(var i = 0; i < tree.children.length; i++){
                        rootIndex += 1;
                        var
                         vChild = vChildren[i] || noChild,
                         nextIndex = rootIndex + (vChild.count || 0);
                        if(indexInRange(indices, rootIndex, nextIndex))
                         recurse(childNodes[i], vChild, indices, nodes, rootIndex);
                        rootIndex = nextIndex;
                       }
                      }
                     }
                     return nodes;
                    }
                    function indexInRange(indices, left, right){
                     if(indices.length === 0) return false;
                     var
                      minIndex = 0,
                      maxIndex = indices.length - 1,
                      currentIndex,
                      currentItem;
                     while(minIndex <= maxIndex){
                      currentIndex = (maxIndex + minIndex) / 2 >> 0;
                      currentItem = indices[currentIndex];
                      if(minIndex === maxIndex)
                       return currentItem >= left && currentItem <= right;
                      else if(currentItem < left)
                       minIndex = currentIndex + 1;
                      else if(currentItem > right)
                       maxIndex = currentIndex - 1;
                      else
                       return true;
                     }
                     return false;
                    }
                    function ascending(a, b){return a > b ? 1 : - 1;}
                   },
                   {}],
                  15:
                  [function(require, module, exports){
                    var
                     applyProperties = require("./apply-properties"),
                     isWidget = require("../vnode/is-widget.js"),
                     VPatch = require("../vnode/vpatch.js"),
                     updateWidget = require("./update-widget");
                    module.exports = applyPatch;
                    function applyPatch(vpatch, domNode, renderOptions){
                     var
                      type = vpatch.type,
                      vNode = vpatch.vNode,
                      patch = vpatch.patch;
                     switch(type){
                       case VPatch.REMOVE:
                        return removeNode(domNode, vNode);
                       case VPatch.INSERT:
                        return insertNode(domNode, patch, renderOptions);
                       case VPatch.VTEXT:
                        return stringPatch(domNode, vNode, patch, renderOptions);
                       case VPatch.WIDGET:
                        return widgetPatch(domNode, vNode, patch, renderOptions);
                       case VPatch.VNODE:
                        return vNodePatch(domNode, vNode, patch, renderOptions);
                       case VPatch.ORDER:
                        reorderChildren(domNode, patch); return domNode;
                       case VPatch.PROPS:
                        applyProperties(domNode, patch, vNode.properties);
                        return domNode;
                       case VPatch.THUNK:
                        return replaceRoot
                                (domNode,
                                 renderOptions.patch(domNode, patch, renderOptions));
                       default: return domNode;
                     }
                    }
                    function removeNode(domNode, vNode){
                     var parentNode = domNode.parentNode;
                     if(parentNode) parentNode.removeChild(domNode);
                     destroyWidget(domNode, vNode);
                     return null;
                    }
                    function insertNode(parentNode, vNode, renderOptions){
                     var newNode = renderOptions.render(vNode, renderOptions);
                     if(parentNode) parentNode.appendChild(newNode);
                     return parentNode;
                    }
                    function stringPatch
                    (domNode, leftVNode, vText, renderOptions){
                     var newNode;
                     if(domNode.nodeType === 3){
                      domNode.nodeValue = vText.text;
                      newNode = domNode;
                     }
                     else{
                      var parentNode = domNode.parentNode;
                      newNode = renderOptions.render(vText, renderOptions);
                      if(parentNode && newNode !== domNode)
                       parentNode.replaceChild(newNode, domNode);
                     }
                     return newNode;
                    }
                    function widgetPatch
                    (domNode, leftVNode, widget, renderOptions){
                     var updating = updateWidget(leftVNode, widget), newNode;
                     if(updating)
                      newNode = widget.update(leftVNode, domNode) || domNode;
                     else
                      newNode = renderOptions.render(widget, renderOptions);
                     var parentNode = domNode.parentNode;
                     if(parentNode && newNode !== domNode)
                      parentNode.replaceChild(newNode, domNode);
                     if(! updating) destroyWidget(domNode, leftVNode);
                     return newNode;
                    }
                    function vNodePatch
                    (domNode, leftVNode, vNode, renderOptions){
                     var
                      parentNode = domNode.parentNode,
                      newNode = renderOptions.render(vNode, renderOptions);
                     if(parentNode && newNode !== domNode)
                      parentNode.replaceChild(newNode, domNode);
                     return newNode;
                    }
                    function destroyWidget(domNode, w){
                     if(typeof w.destroy === "function" && isWidget(w))
                      w.destroy(domNode);
                    }
                    function reorderChildren(domNode, moves){
                     var
                      childNodes = domNode.childNodes,
                      keyMap = {},
                      node,
                      remove,
                      insert;
                     for(var i = 0; i < moves.removes.length; i++){
                      remove = moves.removes[i];
                      node = childNodes[remove.from];
                      if(remove.key) keyMap[remove.key] = node;
                      domNode.removeChild(node);
                     }
                     var length = childNodes.length;
                     for(var j = 0; j < moves.inserts.length; j++){
                      insert = moves.inserts[j];
                      node = keyMap[insert.key];
                      domNode.insertBefore
                       (node, insert.to >= length++ ? null : childNodes[insert.to]);
                     }
                    }
                    function replaceRoot(oldRoot, newRoot){
                     if
                      (oldRoot && newRoot && oldRoot !== newRoot
                       && oldRoot.parentNode)
                      oldRoot.parentNode.replaceChild(newRoot, oldRoot);
                     return newRoot;
                    }
                   },
                   {"../vnode/is-widget.js": 30,
                    "../vnode/vpatch.js": 33,
                    "./apply-properties": 12,
                    "./update-widget": 17}],
                  16:
                  [function(require, module, exports){
                    var
                     document = require("global/document"),
                     isArray = require("x-is-array"),
                     render = require("./create-element"),
                     domIndex = require("./dom-index"),
                     patchOp = require("./patch-op");
                    module.exports = patch;
                    function patch(rootNode, patches, renderOptions){
                     renderOptions = renderOptions || {};
                     renderOptions.patch =
                      renderOptions.patch && renderOptions.patch !== patch
                       ? renderOptions.patch
                       : patchRecursive;
                     renderOptions.render = renderOptions.render || render;
                     return renderOptions.patch(rootNode, patches, renderOptions);
                    }
                    function patchRecursive(rootNode, patches, renderOptions){
                     var indices = patchIndices(patches);
                     if(indices.length === 0) return rootNode;
                     var
                      index = domIndex(rootNode, patches.a, indices),
                      ownerDocument = rootNode.ownerDocument;
                     if(! renderOptions.document && ownerDocument !== document)
                      renderOptions.document = ownerDocument;
                     for(var i = 0; i < indices.length; i++){
                      var nodeIndex = indices[i];
                      rootNode =
                       applyPatch
                        (rootNode,
                         index[nodeIndex],
                         patches[nodeIndex],
                         renderOptions);
                     }
                     return rootNode;
                    }
                    function applyPatch
                    (rootNode, domNode, patchList, renderOptions){
                     if(! domNode) return rootNode;
                     var newNode;
                     if(isArray(patchList))
                      for(var i = 0; i < patchList.length; i++){
                       newNode = patchOp(patchList[i], domNode, renderOptions);
                       if(domNode === rootNode) rootNode = newNode;
                      }
                     else{
                      newNode = patchOp(patchList, domNode, renderOptions);
                      if(domNode === rootNode) rootNode = newNode;
                     }
                     return rootNode;
                    }
                    function patchIndices(patches){
                     var indices = [];
                     for(var key in patches)
                      if(key !== "a") indices.push(Number(key));
                     return indices;
                    }
                   },
                   {"./create-element": 13,
                    "./dom-index": 14,
                    "./patch-op": 15,
                    "global/document": 4,
                    "x-is-array": 8}],
                  17:
                  [function(require, module, exports){
                    var isWidget = require("../vnode/is-widget.js");
                    module.exports = updateWidget;
                    function updateWidget(a, b){
                     if(isWidget(a) && isWidget(b))
                      return "name" in a && "name" in b
                              ? a.id === b.id
                              : a.init === b.init;
                     return false;
                    }
                   },
                   {"../vnode/is-widget.js": 30}],
                  18:
                  [function(require, module, exports){
                    "use strict";
                    module.exports = AttributeHook;
                    function AttributeHook(namespace, value){
                     if(! (this instanceof AttributeHook))
                      return new AttributeHook(namespace, value);
                     this.namespace = namespace;
                     this.value = value;
                    }
                    AttributeHook.prototype.hook =
                     function(node, prop, prev){
                      if
                       (prev && prev.type === "AttributeHook"
                        && prev.value === this.value
                        && prev.namespace === this.namespace)
                       return;
                      node.setAttributeNS(this.namespace, prop, this.value);
                     };
                    AttributeHook.prototype.unhook =
                     function(node, prop, next){
                      if
                       (next && next.type === "AttributeHook"
                        && next.namespace === this.namespace)
                       return;
                      var
                       colonPosition = prop.indexOf(":"),
                       localName =
                         colonPosition > - 1 ? prop.substr(colonPosition + 1) : prop;
                      node.removeAttributeNS(this.namespace, localName);
                     };
                    AttributeHook.prototype.type = "AttributeHook";
                   },
                   {}],
                  19:
                  [function(require, module, exports){
                    "use strict";
                    var EvStore = require("ev-store");
                    module.exports = EvHook;
                    function EvHook(value){
                     if(! (this instanceof EvHook)) return new EvHook(value);
                     this.value = value;
                    }
                    EvHook.prototype.hook =
                     function(node, propertyName){
                      var es = EvStore(node), propName = propertyName.substr(3);
                      es[propName] = this.value;
                     };
                    EvHook.prototype.unhook =
                     function(node, propertyName){
                      var es = EvStore(node), propName = propertyName.substr(3);
                      es[propName] = undefined;
                     };
                   },
                   {"ev-store": 3}],
                  20:
                  [function(require, module, exports){
                    "use strict";
                    module.exports = SoftSetHook;
                    function SoftSetHook(value){
                     if(! (this instanceof SoftSetHook))
                      return new SoftSetHook(value);
                     this.value = value;
                    }
                    SoftSetHook.prototype.hook =
                     function(node, propertyName){
                      if(node[propertyName] !== this.value)
                       node[propertyName] = this.value;
                     };
                   },
                   {}],
                  21:
                  [function(require, module, exports){
                    "use strict";
                    var
                     isArray = require("x-is-array"),
                     VNode = require("../vnode/vnode.js"),
                     VText = require("../vnode/vtext.js"),
                     isVNode = require("../vnode/is-vnode"),
                     isVText = require("../vnode/is-vtext"),
                     isWidget = require("../vnode/is-widget"),
                     isHook = require("../vnode/is-vhook"),
                     isVThunk = require("../vnode/is-thunk"),
                     parseTag = require("./parse-tag.js"),
                     softSetHook = require("./hooks/soft-set-hook.js"),
                     evHook = require("./hooks/ev-hook.js");
                    module.exports = h;
                    function h(tagName, properties, children){
                     var childNodes = [], tag, props, key, namespace;
                     if(! children && isChildren(properties)){children = properties; props = {};}
                     props = props || properties || {};
                     tag = parseTag(tagName, props);
                     if(props.hasOwnProperty("key")){
                      key = props.key;
                      props.key = undefined;
                     }
                     if(props.hasOwnProperty("namespace")){
                      namespace = props.namespace;
                      props.namespace = undefined;
                     }
                     if
                      (tag === "INPUT" && ! namespace
                       && props.hasOwnProperty("value")
                       && props.value !== undefined
                       && ! isHook(props.value))
                      props.value = softSetHook(props.value);
                     transformProperties(props);
                     if(children !== undefined && children !== null)
                      addChild(children, childNodes, tag, props);
                     return new VNode(tag, props, childNodes, key, namespace);
                    }
                    function addChild(c, childNodes, tag, props){
                     if(typeof c === "string")
                      childNodes.push(new VText(c));
                     else if(typeof c === "number")
                      childNodes.push(new VText(String(c)));
                     else if(isChild(c))
                      childNodes.push(c);
                     else if(isArray(c))
                      for(var i = 0; i < c.length; i++)
                       addChild(c[i], childNodes, tag, props);
                     else if(c === null || c === undefined)
                      return;
                     else
                      throw UnexpectedVirtualElement
                             ({foreignObject: c,
                               parentVnode: {tagName: tag, properties: props}});
                    }
                    function transformProperties(props){
                     for(var propName in props)
                      if(props.hasOwnProperty(propName)){
                       var value = props[propName];
                       if(isHook(value)) continue;
                       if(propName.substr(0, 3) === "ev-")
                        props[propName] = evHook(value);
                      }
                    }
                    function isChild(x){
                     return isVNode(x) || isVText(x) || isWidget(x)
                            || isVThunk(x);
                    }
                    function isChildren(x){
                     return typeof x === "string" || isArray(x) || isChild(x);
                    }
                    function UnexpectedVirtualElement(data){
                     var err = new Error();
                     err.type = "virtual-hyperscript.unexpected.virtual-element";
                     err.message =
                      "Unexpected virtual child passed to h().\n"
                      + "Expected a VNode / Vthunk / VWidget / string but:\n"
                      + "got:\n"
                      + errorString(data.foreignObject)
                      + ".\n"
                      + "The parent vnode is:\n"
                      + errorString(data.parentVnode);
                     "\n"
                     + "Suggested fix: change your `h(..., [ ... ])` callsite.";
                     err.foreignObject = data.foreignObject;
                     err.parentVnode = data.parentVnode;
                     return err;
                    }
                    function UnsupportedValueType(data){
                     var err = new Error();
                     err.type = "virtual-hyperscript.unsupported.value-type";
                     err.message =
                      "Unexpected value type for input passed to h().\n"
                      + "Expected a "
                      + errorString(data.expected)
                      + " but got:\n"
                      + errorString(data.received)
                      + ".\n"
                      + "The vnode is:\n"
                      + errorString(data.Vnode);
                     "\n"
                     +
                      "Suggested fix: Cast the value passed to h() to a string using String(value).";
                     err.Vnode = data.Vnode;
                     return err;
                    }
                    function errorString(obj){
                     try{return JSON.stringify(obj, null, "    ");}
                     catch(e){return String(obj);}
                    }
                   },
                   {"../vnode/is-thunk": 26,
                    "../vnode/is-vhook": 27,
                    "../vnode/is-vnode": 28,
                    "../vnode/is-vtext": 29,
                    "../vnode/is-widget": 30,
                    "../vnode/vnode.js": 32,
                    "../vnode/vtext.js": 34,
                    "./hooks/ev-hook.js": 19,
                    "./hooks/soft-set-hook.js": 20,
                    "./parse-tag.js": 22,
                    "x-is-array": 8}],
                  22:
                  [function(require, module, exports){
                    "use strict";
                    var
                     split = require("browser-split"),
                     classIdSplit = /([\.#]?[a-zA-Z0-9\u007F-\uFFFF_:-]+)/,
                     notClassId = /^\.|#/;
                    module.exports = parseTag;
                    function parseTag(tag, props){
                     if(! tag) return "DIV";
                     var
                      noId = ! props.hasOwnProperty("id"),
                      tagParts = split(tag, classIdSplit),
                      tagName = null;
                     if(notClassId.test(tagParts[1])) tagName = "DIV";
                     var classes, part, type, i;
                     for(i = 0; i < tagParts.length; i++){
                      part = tagParts[i];
                      if(! part) continue;
                      type = part.charAt(0);
                      if(! tagName)
                       tagName = part;
                      else if(type === "."){
                       classes = classes || [];
                       classes.push(part.substring(1, part.length));
                      }
                      else if(type === "#" && noId)
                       props.id = part.substring(1, part.length);
                     }
                     if(classes){
                      if(props.className) classes.push(props.className);
                      props.className = classes.join(" ");
                     }
                     return props.namespace ? tagName : tagName.toUpperCase();
                    }
                   },
                   {"browser-split": 2}],
                  23:
                  [function(require, module, exports){
                    "use strict";
                    var
                     DEFAULT_NAMESPACE = null,
                     EV_NAMESPACE = "http://www.w3.org/2001/xml-events",
                     XLINK_NAMESPACE = "http://www.w3.org/1999/xlink",
                     XML_NAMESPACE = "http://www.w3.org/XML/1998/namespace",
                     SVG_PROPERTIES =
                       {about: DEFAULT_NAMESPACE,
                        "accent-height": DEFAULT_NAMESPACE,
                        accumulate: DEFAULT_NAMESPACE,
                        additive: DEFAULT_NAMESPACE,
                        "alignment-baseline": DEFAULT_NAMESPACE,
                        alphabetic: DEFAULT_NAMESPACE,
                        amplitude: DEFAULT_NAMESPACE,
                        "arabic-form": DEFAULT_NAMESPACE,
                        ascent: DEFAULT_NAMESPACE,
                        attributeName: DEFAULT_NAMESPACE,
                        attributeType: DEFAULT_NAMESPACE,
                        azimuth: DEFAULT_NAMESPACE,
                        bandwidth: DEFAULT_NAMESPACE,
                        baseFrequency: DEFAULT_NAMESPACE,
                        baseProfile: DEFAULT_NAMESPACE,
                        "baseline-shift": DEFAULT_NAMESPACE,
                        bbox: DEFAULT_NAMESPACE,
                        begin: DEFAULT_NAMESPACE,
                        bias: DEFAULT_NAMESPACE,
                        by: DEFAULT_NAMESPACE,
                        calcMode: DEFAULT_NAMESPACE,
                        "cap-height": DEFAULT_NAMESPACE,
                        class: DEFAULT_NAMESPACE,
                        clip: DEFAULT_NAMESPACE,
                        "clip-path": DEFAULT_NAMESPACE,
                        "clip-rule": DEFAULT_NAMESPACE,
                        clipPathUnits: DEFAULT_NAMESPACE,
                        color: DEFAULT_NAMESPACE,
                        "color-interpolation": DEFAULT_NAMESPACE,
                        "color-interpolation-filters": DEFAULT_NAMESPACE,
                        "color-profile": DEFAULT_NAMESPACE,
                        "color-rendering": DEFAULT_NAMESPACE,
                        content: DEFAULT_NAMESPACE,
                        contentScriptType: DEFAULT_NAMESPACE,
                        contentStyleType: DEFAULT_NAMESPACE,
                        cursor: DEFAULT_NAMESPACE,
                        cx: DEFAULT_NAMESPACE,
                        cy: DEFAULT_NAMESPACE,
                        d: DEFAULT_NAMESPACE,
                        datatype: DEFAULT_NAMESPACE,
                        defaultAction: DEFAULT_NAMESPACE,
                        descent: DEFAULT_NAMESPACE,
                        diffuseConstant: DEFAULT_NAMESPACE,
                        direction: DEFAULT_NAMESPACE,
                        display: DEFAULT_NAMESPACE,
                        divisor: DEFAULT_NAMESPACE,
                        "dominant-baseline": DEFAULT_NAMESPACE,
                        dur: DEFAULT_NAMESPACE,
                        dx: DEFAULT_NAMESPACE,
                        dy: DEFAULT_NAMESPACE,
                        edgeMode: DEFAULT_NAMESPACE,
                        editable: DEFAULT_NAMESPACE,
                        elevation: DEFAULT_NAMESPACE,
                        "enable-background": DEFAULT_NAMESPACE,
                        end: DEFAULT_NAMESPACE,
                        "ev:event": EV_NAMESPACE,
                        event: DEFAULT_NAMESPACE,
                        exponent: DEFAULT_NAMESPACE,
                        externalResourcesRequired: DEFAULT_NAMESPACE,
                        fill: DEFAULT_NAMESPACE,
                        "fill-opacity": DEFAULT_NAMESPACE,
                        "fill-rule": DEFAULT_NAMESPACE,
                        filter: DEFAULT_NAMESPACE,
                        filterRes: DEFAULT_NAMESPACE,
                        filterUnits: DEFAULT_NAMESPACE,
                        "flood-color": DEFAULT_NAMESPACE,
                        "flood-opacity": DEFAULT_NAMESPACE,
                        focusHighlight: DEFAULT_NAMESPACE,
                        focusable: DEFAULT_NAMESPACE,
                        "font-family": DEFAULT_NAMESPACE,
                        "font-size": DEFAULT_NAMESPACE,
                        "font-size-adjust": DEFAULT_NAMESPACE,
                        "font-stretch": DEFAULT_NAMESPACE,
                        "font-style": DEFAULT_NAMESPACE,
                        "font-variant": DEFAULT_NAMESPACE,
                        "font-weight": DEFAULT_NAMESPACE,
                        format: DEFAULT_NAMESPACE,
                        from: DEFAULT_NAMESPACE,
                        fx: DEFAULT_NAMESPACE,
                        fy: DEFAULT_NAMESPACE,
                        g1: DEFAULT_NAMESPACE,
                        g2: DEFAULT_NAMESPACE,
                        "glyph-name": DEFAULT_NAMESPACE,
                        "glyph-orientation-horizontal": DEFAULT_NAMESPACE,
                        "glyph-orientation-vertical": DEFAULT_NAMESPACE,
                        glyphRef: DEFAULT_NAMESPACE,
                        gradientTransform: DEFAULT_NAMESPACE,
                        gradientUnits: DEFAULT_NAMESPACE,
                        handler: DEFAULT_NAMESPACE,
                        hanging: DEFAULT_NAMESPACE,
                        height: DEFAULT_NAMESPACE,
                        "horiz-adv-x": DEFAULT_NAMESPACE,
                        "horiz-origin-x": DEFAULT_NAMESPACE,
                        "horiz-origin-y": DEFAULT_NAMESPACE,
                        id: DEFAULT_NAMESPACE,
                        ideographic: DEFAULT_NAMESPACE,
                        "image-rendering": DEFAULT_NAMESPACE,
                        in: DEFAULT_NAMESPACE,
                        in2: DEFAULT_NAMESPACE,
                        initialVisibility: DEFAULT_NAMESPACE,
                        intercept: DEFAULT_NAMESPACE,
                        k: DEFAULT_NAMESPACE,
                        k1: DEFAULT_NAMESPACE,
                        k2: DEFAULT_NAMESPACE,
                        k3: DEFAULT_NAMESPACE,
                        k4: DEFAULT_NAMESPACE,
                        kernelMatrix: DEFAULT_NAMESPACE,
                        kernelUnitLength: DEFAULT_NAMESPACE,
                        kerning: DEFAULT_NAMESPACE,
                        keyPoints: DEFAULT_NAMESPACE,
                        keySplines: DEFAULT_NAMESPACE,
                        keyTimes: DEFAULT_NAMESPACE,
                        lang: DEFAULT_NAMESPACE,
                        lengthAdjust: DEFAULT_NAMESPACE,
                        "letter-spacing": DEFAULT_NAMESPACE,
                        "lighting-color": DEFAULT_NAMESPACE,
                        limitingConeAngle: DEFAULT_NAMESPACE,
                        local: DEFAULT_NAMESPACE,
                        "marker-end": DEFAULT_NAMESPACE,
                        "marker-mid": DEFAULT_NAMESPACE,
                        "marker-start": DEFAULT_NAMESPACE,
                        markerHeight: DEFAULT_NAMESPACE,
                        markerUnits: DEFAULT_NAMESPACE,
                        markerWidth: DEFAULT_NAMESPACE,
                        mask: DEFAULT_NAMESPACE,
                        maskContentUnits: DEFAULT_NAMESPACE,
                        maskUnits: DEFAULT_NAMESPACE,
                        mathematical: DEFAULT_NAMESPACE,
                        max: DEFAULT_NAMESPACE,
                        media: DEFAULT_NAMESPACE,
                        mediaCharacterEncoding: DEFAULT_NAMESPACE,
                        mediaContentEncodings: DEFAULT_NAMESPACE,
                        mediaSize: DEFAULT_NAMESPACE,
                        mediaTime: DEFAULT_NAMESPACE,
                        method: DEFAULT_NAMESPACE,
                        min: DEFAULT_NAMESPACE,
                        mode: DEFAULT_NAMESPACE,
                        name: DEFAULT_NAMESPACE,
                        "nav-down": DEFAULT_NAMESPACE,
                        "nav-down-left": DEFAULT_NAMESPACE,
                        "nav-down-right": DEFAULT_NAMESPACE,
                        "nav-left": DEFAULT_NAMESPACE,
                        "nav-next": DEFAULT_NAMESPACE,
                        "nav-prev": DEFAULT_NAMESPACE,
                        "nav-right": DEFAULT_NAMESPACE,
                        "nav-up": DEFAULT_NAMESPACE,
                        "nav-up-left": DEFAULT_NAMESPACE,
                        "nav-up-right": DEFAULT_NAMESPACE,
                        numOctaves: DEFAULT_NAMESPACE,
                        observer: DEFAULT_NAMESPACE,
                        offset: DEFAULT_NAMESPACE,
                        opacity: DEFAULT_NAMESPACE,
                        operator: DEFAULT_NAMESPACE,
                        order: DEFAULT_NAMESPACE,
                        orient: DEFAULT_NAMESPACE,
                        orientation: DEFAULT_NAMESPACE,
                        origin: DEFAULT_NAMESPACE,
                        overflow: DEFAULT_NAMESPACE,
                        overlay: DEFAULT_NAMESPACE,
                        "overline-position": DEFAULT_NAMESPACE,
                        "overline-thickness": DEFAULT_NAMESPACE,
                        "panose-1": DEFAULT_NAMESPACE,
                        path: DEFAULT_NAMESPACE,
                        pathLength: DEFAULT_NAMESPACE,
                        patternContentUnits: DEFAULT_NAMESPACE,
                        patternTransform: DEFAULT_NAMESPACE,
                        patternUnits: DEFAULT_NAMESPACE,
                        phase: DEFAULT_NAMESPACE,
                        playbackOrder: DEFAULT_NAMESPACE,
                        "pointer-events": DEFAULT_NAMESPACE,
                        points: DEFAULT_NAMESPACE,
                        pointsAtX: DEFAULT_NAMESPACE,
                        pointsAtY: DEFAULT_NAMESPACE,
                        pointsAtZ: DEFAULT_NAMESPACE,
                        preserveAlpha: DEFAULT_NAMESPACE,
                        preserveAspectRatio: DEFAULT_NAMESPACE,
                        primitiveUnits: DEFAULT_NAMESPACE,
                        propagate: DEFAULT_NAMESPACE,
                        property: DEFAULT_NAMESPACE,
                        r: DEFAULT_NAMESPACE,
                        radius: DEFAULT_NAMESPACE,
                        refX: DEFAULT_NAMESPACE,
                        refY: DEFAULT_NAMESPACE,
                        rel: DEFAULT_NAMESPACE,
                        "rendering-intent": DEFAULT_NAMESPACE,
                        repeatCount: DEFAULT_NAMESPACE,
                        repeatDur: DEFAULT_NAMESPACE,
                        requiredExtensions: DEFAULT_NAMESPACE,
                        requiredFeatures: DEFAULT_NAMESPACE,
                        requiredFonts: DEFAULT_NAMESPACE,
                        requiredFormats: DEFAULT_NAMESPACE,
                        resource: DEFAULT_NAMESPACE,
                        restart: DEFAULT_NAMESPACE,
                        result: DEFAULT_NAMESPACE,
                        rev: DEFAULT_NAMESPACE,
                        role: DEFAULT_NAMESPACE,
                        rotate: DEFAULT_NAMESPACE,
                        rx: DEFAULT_NAMESPACE,
                        ry: DEFAULT_NAMESPACE,
                        scale: DEFAULT_NAMESPACE,
                        seed: DEFAULT_NAMESPACE,
                        "shape-rendering": DEFAULT_NAMESPACE,
                        slope: DEFAULT_NAMESPACE,
                        snapshotTime: DEFAULT_NAMESPACE,
                        spacing: DEFAULT_NAMESPACE,
                        specularConstant: DEFAULT_NAMESPACE,
                        specularExponent: DEFAULT_NAMESPACE,
                        spreadMethod: DEFAULT_NAMESPACE,
                        startOffset: DEFAULT_NAMESPACE,
                        stdDeviation: DEFAULT_NAMESPACE,
                        stemh: DEFAULT_NAMESPACE,
                        stemv: DEFAULT_NAMESPACE,
                        stitchTiles: DEFAULT_NAMESPACE,
                        "stop-color": DEFAULT_NAMESPACE,
                        "stop-opacity": DEFAULT_NAMESPACE,
                        "strikethrough-position": DEFAULT_NAMESPACE,
                        "strikethrough-thickness": DEFAULT_NAMESPACE,
                        string: DEFAULT_NAMESPACE,
                        stroke: DEFAULT_NAMESPACE,
                        "stroke-dasharray": DEFAULT_NAMESPACE,
                        "stroke-dashoffset": DEFAULT_NAMESPACE,
                        "stroke-linecap": DEFAULT_NAMESPACE,
                        "stroke-linejoin": DEFAULT_NAMESPACE,
                        "stroke-miterlimit": DEFAULT_NAMESPACE,
                        "stroke-opacity": DEFAULT_NAMESPACE,
                        "stroke-width": DEFAULT_NAMESPACE,
                        surfaceScale: DEFAULT_NAMESPACE,
                        syncBehavior: DEFAULT_NAMESPACE,
                        syncBehaviorDefault: DEFAULT_NAMESPACE,
                        syncMaster: DEFAULT_NAMESPACE,
                        syncTolerance: DEFAULT_NAMESPACE,
                        syncToleranceDefault: DEFAULT_NAMESPACE,
                        systemLanguage: DEFAULT_NAMESPACE,
                        tableValues: DEFAULT_NAMESPACE,
                        target: DEFAULT_NAMESPACE,
                        targetX: DEFAULT_NAMESPACE,
                        targetY: DEFAULT_NAMESPACE,
                        "text-anchor": DEFAULT_NAMESPACE,
                        "text-decoration": DEFAULT_NAMESPACE,
                        "text-rendering": DEFAULT_NAMESPACE,
                        textLength: DEFAULT_NAMESPACE,
                        timelineBegin: DEFAULT_NAMESPACE,
                        title: DEFAULT_NAMESPACE,
                        to: DEFAULT_NAMESPACE,
                        transform: DEFAULT_NAMESPACE,
                        transformBehavior: DEFAULT_NAMESPACE,
                        type: DEFAULT_NAMESPACE,
                        typeof: DEFAULT_NAMESPACE,
                        u1: DEFAULT_NAMESPACE,
                        u2: DEFAULT_NAMESPACE,
                        "underline-position": DEFAULT_NAMESPACE,
                        "underline-thickness": DEFAULT_NAMESPACE,
                        unicode: DEFAULT_NAMESPACE,
                        "unicode-bidi": DEFAULT_NAMESPACE,
                        "unicode-range": DEFAULT_NAMESPACE,
                        "units-per-em": DEFAULT_NAMESPACE,
                        "v-alphabetic": DEFAULT_NAMESPACE,
                        "v-hanging": DEFAULT_NAMESPACE,
                        "v-ideographic": DEFAULT_NAMESPACE,
                        "v-mathematical": DEFAULT_NAMESPACE,
                        values: DEFAULT_NAMESPACE,
                        version: DEFAULT_NAMESPACE,
                        "vert-adv-y": DEFAULT_NAMESPACE,
                        "vert-origin-x": DEFAULT_NAMESPACE,
                        "vert-origin-y": DEFAULT_NAMESPACE,
                        viewBox: DEFAULT_NAMESPACE,
                        viewTarget: DEFAULT_NAMESPACE,
                        visibility: DEFAULT_NAMESPACE,
                        width: DEFAULT_NAMESPACE,
                        widths: DEFAULT_NAMESPACE,
                        "word-spacing": DEFAULT_NAMESPACE,
                        "writing-mode": DEFAULT_NAMESPACE,
                        x: DEFAULT_NAMESPACE,
                        "x-height": DEFAULT_NAMESPACE,
                        x1: DEFAULT_NAMESPACE,
                        x2: DEFAULT_NAMESPACE,
                        xChannelSelector: DEFAULT_NAMESPACE,
                        "xlink:actuate": XLINK_NAMESPACE,
                        "xlink:arcrole": XLINK_NAMESPACE,
                        "xlink:href": XLINK_NAMESPACE,
                        "xlink:role": XLINK_NAMESPACE,
                        "xlink:show": XLINK_NAMESPACE,
                        "xlink:title": XLINK_NAMESPACE,
                        "xlink:type": XLINK_NAMESPACE,
                        "xml:base": XML_NAMESPACE,
                        "xml:id": XML_NAMESPACE,
                        "xml:lang": XML_NAMESPACE,
                        "xml:space": XML_NAMESPACE,
                        y: DEFAULT_NAMESPACE,
                        y1: DEFAULT_NAMESPACE,
                        y2: DEFAULT_NAMESPACE,
                        yChannelSelector: DEFAULT_NAMESPACE,
                        z: DEFAULT_NAMESPACE,
                        zoomAndPan: DEFAULT_NAMESPACE};
                    module.exports = SVGAttributeNamespace;
                    function SVGAttributeNamespace(value){
                     if(SVG_PROPERTIES.hasOwnProperty(value))
                      return SVG_PROPERTIES[value];
                    }
                   },
                   {}],
                  24:
                  [function(require, module, exports){
                    "use strict";
                    var
                     isArray = require("x-is-array"),
                     h = require("./index.js"),
                     SVGAttributeNamespace = require("./svg-attribute-namespace"),
                     attributeHook = require("./hooks/attribute-hook"),
                     SVG_NAMESPACE = "http://www.w3.org/2000/svg";
                    module.exports = svg;
                    function svg(tagName, properties, children){
                     if(! children && isChildren(properties)){children = properties; properties = {};
                     }
                     properties = properties || {};
                     properties.namespace = SVG_NAMESPACE;
                     var
                      attributes =
                        properties.attributes || (properties.attributes = {});
                     for(var key in properties){
                      if(! properties.hasOwnProperty(key)) continue;
                      var namespace = SVGAttributeNamespace(key);
                      if(namespace === undefined) continue;
                      var value = properties[key];
                      if
                       (typeof value !== "string" && typeof value !== "number"
                        && typeof value !== "boolean")
                       continue;
                      if(namespace !== null){
                       properties[key] = attributeHook(namespace, value);
                       continue;
                      }
                      attributes[key] = value;
                      properties[key] = undefined;
                     }
                     return h(tagName, properties, children);
                    }
                    function isChildren(x){
                     return typeof x === "string" || isArray(x);
                    }
                   },
                   {"./hooks/attribute-hook": 18,
                    "./index.js": 21,
                    "./svg-attribute-namespace": 23,
                    "x-is-array": 8}],
                  25:
                  [function(require, module, exports){
                    var
                     isVNode = require("./is-vnode"),
                     isVText = require("./is-vtext"),
                     isWidget = require("./is-widget"),
                     isThunk = require("./is-thunk");
                    module.exports = handleThunk;
                    function handleThunk(a, b){
                     var renderedA = a, renderedB = b;
                     if(isThunk(b)) renderedB = renderThunk(b, a);
                     if(isThunk(a)) renderedA = renderThunk(a, null);
                     return {a: renderedA, b: renderedB};
                    }
                    function renderThunk(thunk, previous){
                     var renderedThunk = thunk.vnode;
                     if(! renderedThunk)
                      renderedThunk = thunk.vnode = thunk.render(previous);
                     if
                      (!
                       (isVNode(renderedThunk) || isVText(renderedThunk)
                       || isWidget(renderedThunk)))
                      throw new Error("thunk did not return a valid node");
                     return renderedThunk;
                    }
                   },
                   {"./is-thunk": 26,
                    "./is-vnode": 28,
                    "./is-vtext": 29,
                    "./is-widget": 30}],
                  26:
                  [function(require, module, exports){
                    module.exports = isThunk;
                    function isThunk(t){return t && t.type === "Thunk";}
                   },
                   {}],
                  27:
                  [function(require, module, exports){
                    module.exports = isHook;
                    function isHook(hook){
                     return hook
                            &&
                             (typeof hook.hook === "function"
                             && ! hook.hasOwnProperty("hook")
                             ||
                              typeof hook.unhook === "function"
                              && ! hook.hasOwnProperty("unhook"));
                    }
                   },
                   {}],
                  28:
                  [function(require, module, exports){
                    var version = require("./version");
                    module.exports = isVirtualNode;
                    function isVirtualNode(x){
                     return x && x.type === "VirtualNode"
                            && x.version === version;
                    }
                   },
                   {"./version": 31}],
                  29:
                  [function(require, module, exports){
                    var version = require("./version");
                    module.exports = isVirtualText;
                    function isVirtualText(x){
                     return x && x.type === "VirtualText"
                            && x.version === version;
                    }
                   },
                   {"./version": 31}],
                  30:
                  [function(require, module, exports){
                    module.exports = isWidget;
                    function isWidget(w){return w && w.type === "Widget";}
                   },
                   {}],
                  31:
                  [function(require, module, exports){module.exports = "2";},
                   {}],
                  32:
                  [function(require, module, exports){
                    var
                     version = require("./version"),
                     isVNode = require("./is-vnode"),
                     isWidget = require("./is-widget"),
                     isThunk = require("./is-thunk"),
                     isVHook = require("./is-vhook");
                    module.exports = VirtualNode;
                    var noProperties = {}, noChildren = [];
                    function VirtualNode
                    (tagName, properties, children, key, namespace){
                     this.tagName = tagName;
                     this.properties = properties || noProperties;
                     this.children = children || noChildren;
                     this.key = key != null ? String(key) : undefined;
                     this.namespace =
                      typeof namespace === "string" ? namespace : null;
                     var
                      count = children && children.length || 0,
                      descendants = 0,
                      hasWidgets = false,
                      hasThunks = false,
                      descendantHooks = false,
                      hooks;
                     for(var propName in properties)
                      if(properties.hasOwnProperty(propName)){
                       var property = properties[propName];
                       if(isVHook(property) && property.unhook){
                        if(! hooks) hooks = {};
                        hooks[propName] = property;
                       }
                      }
                     for(var i = 0; i < count; i++){
                      var child = children[i];
                      if(isVNode(child)){
                       descendants += child.count || 0;
                       if(! hasWidgets && child.hasWidgets) hasWidgets = true;
                       if(! hasThunks && child.hasThunks) hasThunks = true;
                       if
                        (! descendantHooks && (child.hooks || child.descendantHooks))
                        descendantHooks = true;
                      }
                      else
                       if(! hasWidgets && isWidget(child)){
                        if(typeof child.destroy === "function") hasWidgets = true;
                       }
                       else if(! hasThunks && isThunk(child)) hasThunks = true;
                     }
                     this.count = count + descendants;
                     this.hasWidgets = hasWidgets;
                     this.hasThunks = hasThunks;
                     this.hooks = hooks;
                     this.descendantHooks = descendantHooks;
                    }
                    VirtualNode.prototype.version = version;
                    VirtualNode.prototype.type = "VirtualNode";
                   },
                   {"./is-thunk": 26,
                    "./is-vhook": 27,
                    "./is-vnode": 28,
                    "./is-widget": 30,
                    "./version": 31}],
                  33:
                  [function(require, module, exports){
                    var version = require("./version");
                    VirtualPatch.NONE = 0;
                    VirtualPatch.VTEXT = 1;
                    VirtualPatch.VNODE = 2;
                    VirtualPatch.WIDGET = 3;
                    VirtualPatch.PROPS = 4;
                    VirtualPatch.ORDER = 5;
                    VirtualPatch.INSERT = 6;
                    VirtualPatch.REMOVE = 7;
                    VirtualPatch.THUNK = 8;
                    module.exports = VirtualPatch;
                    function VirtualPatch(type, vNode, patch){
                     this.type = Number(type);
                     this.vNode = vNode;
                     this.patch = patch;
                    }
                    VirtualPatch.prototype.version = version;
                    VirtualPatch.prototype.type = "VirtualPatch";
                   },
                   {"./version": 31}],
                  34:
                  [function(require, module, exports){
                    var version = require("./version");
                    module.exports = VirtualText;
                    function VirtualText(text){this.text = String(text);}
                    VirtualText.prototype.version = version;
                    VirtualText.prototype.type = "VirtualText";
                   },
                   {"./version": 31}],
                  35:
                  [function(require, module, exports){
                    var
                     isObject = require("is-object"),
                     isHook = require("../vnode/is-vhook");
                    module.exports = diffProps;
                    function diffProps(a, b){
                     var diff;
                     for(var aKey in a){
                      if(! (aKey in b)){
                       diff = diff || {};
                       diff[aKey] = undefined;
                      }
                      var aValue = a[aKey], bValue = b[aKey];
                      if(aValue === bValue)
                       continue;
                      else if(isObject(aValue) && isObject(bValue))
                       if(getPrototype(bValue) !== getPrototype(aValue)){diff = diff || {}; diff[aKey] = bValue;}
                       else if(isHook(bValue)){
                        diff = diff || {};
                        diff[aKey] = bValue;
                       }
                       else{
                        var objectDiff = diffProps(aValue, bValue);
                        if(objectDiff){diff = diff || {}; diff[aKey] = objectDiff;}
                       }
                      else{diff = diff || {}; diff[aKey] = bValue;}
                     }
                     for(var bKey in b)
                      if(! (bKey in a)){diff = diff || {}; diff[bKey] = b[bKey];}
                     return diff;
                    }
                    function getPrototype(value){
                     if(Object.getPrototypeOf)
                      return Object.getPrototypeOf(value);
                     else if(value.__proto__)
                      return value.__proto__;
                     else if(value.constructor)
                      return value.constructor.prototype;
                    }
                   },
                   {"../vnode/is-vhook": 27, "is-object": 7}],
                  36:
                  [function(require, module, exports){
                    var
                     isArray = require("x-is-array"),
                     VPatch = require("../vnode/vpatch"),
                     isVNode = require("../vnode/is-vnode"),
                     isVText = require("../vnode/is-vtext"),
                     isWidget = require("../vnode/is-widget"),
                     isThunk = require("../vnode/is-thunk"),
                     handleThunk = require("../vnode/handle-thunk"),
                     diffProps = require("./diff-props");
                    module.exports = diff;
                    function diff(a, b){
                     var patch = {a: a};
                     walk(a, b, patch, 0);
                     return patch;
                    }
                    function walk(a, b, patch, index){
                     if(a === b) return;
                     var apply = patch[index], applyClear = false;
                     if(isThunk(a) || isThunk(b))
                      thunks(a, b, patch, index);
                     else if(b == null){
                      if(! isWidget(a)){
                       clearState(a, patch, index);
                       apply = patch[index];
                      }
                      apply = appendPatch(apply, new VPatch(VPatch.REMOVE, a, b));
                     }
                     else if(isVNode(b))
                      if(isVNode(a))
                       if
                        (a.tagName === b.tagName && a.namespace === b.namespace
                         && a.key === b.key){
                        var propsPatch = diffProps(a.properties, b.properties);
                        if(propsPatch)
                         apply =
                          appendPatch(apply, new VPatch(VPatch.PROPS, a, propsPatch));
                        apply = diffChildren(a, b, patch, apply, index);
                       }
                       else{
                        apply = appendPatch(apply, new VPatch(VPatch.VNODE, a, b));
                        applyClear = true;
                       }
                      else{
                       apply = appendPatch(apply, new VPatch(VPatch.VNODE, a, b));
                       applyClear = true;
                      }
                     else
                      if(isVText(b)){
                       if(! isVText(a)){
                        apply = appendPatch(apply, new VPatch(VPatch.VTEXT, a, b));
                        applyClear = true;
                       }
                       else if(a.text !== b.text)
                        apply = appendPatch(apply, new VPatch(VPatch.VTEXT, a, b));
                      }
                      else if(isWidget(b)){
                       if(! isWidget(a)) applyClear = true;
                       apply = appendPatch(apply, new VPatch(VPatch.WIDGET, a, b));
                      }
                     if(apply) patch[index] = apply;
                     if(applyClear) clearState(a, patch, index);
                    }
                    function diffChildren(a, b, patch, apply, index){
                     var
                      aChildren = a.children,
                      orderedSet = reorder(aChildren, b.children),
                      bChildren = orderedSet.children,
                      aLen = aChildren.length,
                      bLen = bChildren.length,
                      len = aLen > bLen ? aLen : bLen;
                     for(var i = 0; i < len; i++){
                      var leftNode = aChildren[i], rightNode = bChildren[i];
                      index += 1;
                      if(! leftNode){
                       if(rightNode)
                        apply =
                         appendPatch
                          (apply, new VPatch(VPatch.INSERT, null, rightNode));
                      }
                      else
                       walk(leftNode, rightNode, patch, index);
                      if(isVNode(leftNode) && leftNode.count)
                       index += leftNode.count;
                     }
                     if(orderedSet.moves)
                      apply =
                       appendPatch
                        (apply, new VPatch(VPatch.ORDER, a, orderedSet.moves));
                     return apply;
                    }
                    function clearState(vNode, patch, index){
                     unhook(vNode, patch, index);
                     destroyWidgets(vNode, patch, index);
                    }
                    function destroyWidgets(vNode, patch, index){
                     if(isWidget(vNode)){
                      if(typeof vNode.destroy === "function")
                       patch[index] =
                        appendPatch
                         (patch[index], new VPatch(VPatch.REMOVE, vNode, null));
                     }
                     else if
                      (isVNode(vNode) && (vNode.hasWidgets || vNode.hasThunks)){
                      var children = vNode.children, len = children.length;
                      for(var i = 0; i < len; i++){
                       var child = children[i];
                       index += 1;
                       destroyWidgets(child, patch, index);
                       if(isVNode(child) && child.count) index += child.count;
                      }
                     }
                     else if(isThunk(vNode)) thunks(vNode, null, patch, index);
                    }
                    function thunks(a, b, patch, index){
                     var
                      nodes = handleThunk(a, b),
                      thunkPatch = diff(nodes.a, nodes.b);
                     if(hasPatches(thunkPatch))
                      patch[index] = new VPatch(VPatch.THUNK, null, thunkPatch);
                    }
                    function hasPatches(patch){
                     for(var index in patch) if(index !== "a") return true;
                     return false;
                    }
                    function unhook(vNode, patch, index){
                     if(isVNode(vNode)){
                      if(vNode.hooks)
                       patch[index] =
                        appendPatch
                         (patch[index],
                          new VPatch(VPatch.PROPS, vNode, undefinedKeys(vNode.hooks)));
                      if(vNode.descendantHooks || vNode.hasThunks){
                       var children = vNode.children, len = children.length;
                       for(var i = 0; i < len; i++){
                        var child = children[i];
                        index += 1;
                        unhook(child, patch, index);
                        if(isVNode(child) && child.count) index += child.count;
                       }
                      }
                     }
                     else if(isThunk(vNode)) thunks(vNode, null, patch, index);
                    }
                    function undefinedKeys(obj){
                     var result = {};
                     for(var key in obj) result[key] = undefined;
                     return result;
                    }
                    function reorder(aChildren, bChildren){
                     var
                      bChildIndex = keyIndex(bChildren),
                      bKeys = bChildIndex.keys,
                      bFree = bChildIndex.free;
                     if(bFree.length === bChildren.length)
                      return {children: bChildren, moves: null};
                     var
                      aChildIndex = keyIndex(aChildren),
                      aKeys = aChildIndex.keys,
                      aFree = aChildIndex.free;
                     if(aFree.length === aChildren.length)
                      return {children: bChildren, moves: null};
                     var
                      newChildren = [],
                      freeIndex = 0,
                      freeCount = bFree.length,
                      deletedItems = 0;
                     for(var i = 0; i < aChildren.length; i++){
                      var aItem = aChildren[i], itemIndex;
                      if(aItem.key)
                       if(bKeys.hasOwnProperty(aItem.key)){
                        itemIndex = bKeys[aItem.key];
                        newChildren.push(bChildren[itemIndex]);
                       }
                       else{itemIndex = i - deletedItems++; newChildren.push(null);
                       }
                      else if(freeIndex < freeCount){
                       itemIndex = bFree[freeIndex++];
                       newChildren.push(bChildren[itemIndex]);
                      }
                      else{itemIndex = i - deletedItems++; newChildren.push(null);
                      }
                     }
                     var
                      lastFreeIndex =
                        freeIndex >= bFree.length
                         ? bChildren.length
                         : bFree[freeIndex];
                     for(var j = 0; j < bChildren.length; j++){
                      var newItem = bChildren[j];
                      if(newItem.key){
                       if(! aKeys.hasOwnProperty(newItem.key))
                        newChildren.push(newItem);
                      }
                      else if(j >= lastFreeIndex) newChildren.push(newItem);
                     }
                     var
                      simulate = newChildren.slice(),
                      simulateIndex = 0,
                      removes = [],
                      inserts = [],
                      simulateItem;
                     for(var k = 0; k < bChildren.length;){
                      var wantedItem = bChildren[k];
                      simulateItem = simulate[simulateIndex];
                      while(simulateItem === null && simulate.length){
                       removes.push(remove(simulate, simulateIndex, null));
                       simulateItem = simulate[simulateIndex];
                      }
                      if(! simulateItem || simulateItem.key !== wantedItem.key){
                       if(wantedItem.key){
                        if(simulateItem && simulateItem.key)
                         if(bKeys[simulateItem.key] !== k + 1){
                          removes.push
                           (remove(simulate, simulateIndex, simulateItem.key));
                          simulateItem = simulate[simulateIndex];
                          if(! simulateItem || simulateItem.key !== wantedItem.key)
                           inserts.push({key: wantedItem.key, to: k});
                          else
                           simulateIndex++;
                         }
                         else
                          inserts.push({key: wantedItem.key, to: k});
                        else
                         inserts.push({key: wantedItem.key, to: k});
                        k++;
                       }
                       else if(simulateItem && simulateItem.key)
                        removes.push
                         (remove(simulate, simulateIndex, simulateItem.key));
                      }
                      else{simulateIndex++; k++;}
                     }
                     while(simulateIndex < simulate.length){
                      simulateItem = simulate[simulateIndex];
                      removes.push
                       (remove
                         (simulate, simulateIndex, simulateItem && simulateItem.key));
                     }
                     if(removes.length === deletedItems && ! inserts.length)
                      return {children: newChildren, moves: null};
                     return {children: newChildren,
                             moves: {removes: removes, inserts: inserts}};
                    }
                    function remove(arr, index, key){
                     arr.splice(index, 1);
                     return {from: index, key: key};
                    }
                    function keyIndex(children){
                     var keys = {}, free = [], length = children.length;
                     for(var i = 0; i < length; i++){
                      var child = children[i];
                      if(child.key) keys[child.key] = i; else free.push(i);
                     }
                     return {keys: keys, free: free};
                    }
                    function appendPatch(apply, patch){
                     if(apply){
                      if(isArray(apply))
                       apply.push(patch);
                      else
                       apply = [apply, patch];
                      return apply;
                     }
                     else
                      return patch;
                    }
                   },
                   {"../vnode/handle-thunk": 25,
                    "../vnode/is-thunk": 26,
                    "../vnode/is-vnode": 28,
                    "../vnode/is-vtext": 29,
                    "../vnode/is-widget": 30,
                    "../vnode/vpatch": 33,
                    "./diff-props": 35,
                    "x-is-array": 8}],
                  37:
                  [function(require, module, exports){
                    (function(global){
                       (function(){
                          var
                           vdom =
                             {VNode: require("./vendor/vnode/vnode.js"),
                              VText: require("./vendor/vnode/vtext.js"),
                              diff: require("./vendor/diff.js"),
                              patch: require("./vendor/patch.js"),
                              createElement: require("./vendor/create-element.js"),
                              svg: require("./vendor/virtual-hyperscript/svg.js")};
                          global.VirtualDom = vdom;
                          module.exports = vdom;
                         }.call
                         (this));
                      }.call
                      (this,
                       typeof global !== "undefined"
                        ? global
                        : typeof
                          self
                          !== "undefined"
                          ? self
                          : typeof window !== "undefined" ? window : {}));
                   },
                   {"./vendor/create-element.js": 9,
                    "./vendor/diff.js": 10,
                    "./vendor/patch.js": 11,
                    "./vendor/virtual-hyperscript/svg.js": 24,
                    "./vendor/vnode/vnode.js": 32,
                    "./vendor/vnode/vtext.js": 34}]},
                 {},
                 [37])
               (37);
      }));
  }
  (globalThis));
(function(globalThis){
   var joo_global_object = globalThis;
   function VdomThunk(fn, args, key){
    if(! (this instanceof VdomThunk)) return new VdomThunk(fn, args, key);
    if(key) this.key = key;
    this.fn = fn;
    this.args = args;
   }
   joo_global_object.VdomThunk = VdomThunk;
   VdomThunk.prototype.type = "Thunk";
   VdomThunk.prototype.render =
    function(prev){
     if(prev && this.args === prev.args && this.fn === prev.fn)
      return prev.vnode;
     return this.fn(this.args);
    };
  }
  (globalThis));
(function(globalThis){
   var joo_global_object = globalThis;
   joo_global_object.SoftSetHook =
    function(value){
     if(! (this instanceof SoftSetHook)) return new SoftSetHook(value);
     this.value = value;
    };
   joo_global_object.SoftSetHook.prototype.hook =
    function(node, propertyName){
     if(node[propertyName] !== this.value) node[propertyName] = this.value;
    };
   function GenericHook(init, update, destroy, id, extra){
    if(! (this instanceof GenericHook))
     return new GenericHook(init, update, destroy, id, extra);
    this.init = init;
    this.update = update;
    this.destroy = destroy;
    this.id = id;
    this.extra = extra;
   }
   var hook_state_key = "vdom_hook_state_key";
   if(this.Symbol) hook_state_key = Symbol(hook_state_key);
   GenericHook.write_state =
    function(node, propName, state){
     if(! node[hook_state_key]) node[hook_state_key] = {};
     node[hook_state_key][propName] = state;
    };
   GenericHook.read_state =
    function(node, propName){return node[hook_state_key][propName];};
   GenericHook.remove_state =
    function(node, propName){delete node[hook_state_key][propName];};
   GenericHook.canTransition =
    function(from, to){
     return from instanceof this && to instanceof this && from.id === to.id
            && to.update;
    };
   GenericHook.prototype.hook =
    function(node, propName, prev){
     if(GenericHook.canTransition(prev, this)){
      var state = GenericHook.read_state(node, propName);
      state = this.update(state, node);
      GenericHook.write_state(node, propName, state);
     }
     else{
      var state = this.init(node);
      GenericHook.write_state(node, propName, state);
     }
    };
   GenericHook.prototype.unhook =
    function(node, propName, next){
     if(GenericHook.canTransition(this, next))
      ;
     else{
      var state = GenericHook.read_state(node, propName);
      this.destroy(state, node);
      GenericHook.remove_state(node, propName);
     }
    };
   joo_global_object.GenericHook = GenericHook;
  }
  (globalThis));
(function(globalThis){
   "use strict";
   var joo_global_object = globalThis;
   function caml_int64_is_zero(x){return + x.isZero();}
   function caml_str_repeat(n, s){
    if(n == 0) return "";
    if(s.repeat) return s.repeat(n);
    var r = "", l = 0;
    for(;;){
     if(n & 1) r += s;
     n >>= 1;
     if(n == 0) return r;
     s += s;
     l++;
     if(l == 9) s.slice(0, 1);
    }
   }
   var caml_int64_offset = Math.pow(2, - 24);
   function caml_raise_constant(tag){throw tag;}
   var caml_global_data = [0];
   function caml_raise_zero_divide(){
    caml_raise_constant(caml_global_data.Division_by_zero);
   }
   function MlInt64(lo, mi, hi){
    this.lo = lo & 0xffffff;
    this.mi = mi & 0xffffff;
    this.hi = hi & 0xffff;
   }
   MlInt64.prototype.caml_custom = "_j";
   MlInt64.prototype.copy =
    function(){return new MlInt64(this.lo, this.mi, this.hi);};
   MlInt64.prototype.ucompare =
    function(x){
     if(this.hi > x.hi) return 1;
     if(this.hi < x.hi) return - 1;
     if(this.mi > x.mi) return 1;
     if(this.mi < x.mi) return - 1;
     if(this.lo > x.lo) return 1;
     if(this.lo < x.lo) return - 1;
     return 0;
    };
   MlInt64.prototype.compare =
    function(x){
     var hi = this.hi << 16, xhi = x.hi << 16;
     if(hi > xhi) return 1;
     if(hi < xhi) return - 1;
     if(this.mi > x.mi) return 1;
     if(this.mi < x.mi) return - 1;
     if(this.lo > x.lo) return 1;
     if(this.lo < x.lo) return - 1;
     return 0;
    };
   MlInt64.prototype.neg =
    function(){
     var
      lo = - this.lo,
      mi = - this.mi + (lo >> 24),
      hi = - this.hi + (mi >> 24);
     return new MlInt64(lo, mi, hi);
    };
   MlInt64.prototype.add =
    function(x){
     var
      lo = this.lo + x.lo,
      mi = this.mi + x.mi + (lo >> 24),
      hi = this.hi + x.hi + (mi >> 24);
     return new MlInt64(lo, mi, hi);
    };
   MlInt64.prototype.sub =
    function(x){
     var
      lo = this.lo - x.lo,
      mi = this.mi - x.mi + (lo >> 24),
      hi = this.hi - x.hi + (mi >> 24);
     return new MlInt64(lo, mi, hi);
    };
   MlInt64.prototype.mul =
    function(x){
     var
      lo = this.lo * x.lo,
      mi = (lo * caml_int64_offset | 0) + this.mi * x.lo + this.lo * x.mi,
      hi =
        (mi * caml_int64_offset | 0) + this.hi * x.lo + this.mi * x.mi
        + this.lo * x.hi;
     return new MlInt64(lo, mi, hi);
    };
   MlInt64.prototype.isZero =
    function(){return (this.lo | this.mi | this.hi) == 0;};
   MlInt64.prototype.isNeg = function(){return this.hi << 16 < 0;};
   MlInt64.prototype.and =
    function(x){
     return new MlInt64(this.lo & x.lo, this.mi & x.mi, this.hi & x.hi);
    };
   MlInt64.prototype.or =
    function(x){
     return new MlInt64(this.lo | x.lo, this.mi | x.mi, this.hi | x.hi);
    };
   MlInt64.prototype.xor =
    function(x){
     return new MlInt64(this.lo ^ x.lo, this.mi ^ x.mi, this.hi ^ x.hi);
    };
   MlInt64.prototype.shift_left =
    function(s){
     s = s & 63;
     if(s == 0) return this;
     if(s < 24)
      return new
              MlInt64
              (this.lo << s,
               this.mi << s | this.lo >> 24 - s,
               this.hi << s | this.mi >> 24 - s);
     if(s < 48)
      return new
              MlInt64
              (0, this.lo << s - 24, this.mi << s - 24 | this.lo >> 48 - s);
     return new MlInt64(0, 0, this.lo << s - 48);
    };
   MlInt64.prototype.shift_right_unsigned =
    function(s){
     s = s & 63;
     if(s == 0) return this;
     if(s < 24)
      return new
              MlInt64
              (this.lo >> s | this.mi << 24 - s,
               this.mi >> s | this.hi << 24 - s,
               this.hi >> s);
     if(s < 48)
      return new
              MlInt64
              (this.mi >> s - 24 | this.hi << 48 - s, this.hi >> s - 24, 0);
     return new MlInt64(this.hi >> s - 48, 0, 0);
    };
   MlInt64.prototype.shift_right =
    function(s){
     s = s & 63;
     if(s == 0) return this;
     var h = this.hi << 16 >> 16;
     if(s < 24)
      return new
              MlInt64
              (this.lo >> s | this.mi << 24 - s,
               this.mi >> s | h << 24 - s,
               this.hi << 16 >> s >>> 16);
     var sign = this.hi << 16 >> 31;
     if(s < 48)
      return new
              MlInt64
              (this.mi >> s - 24 | this.hi << 48 - s,
               this.hi << 16 >> s - 24 >> 16,
               sign & 0xffff);
     return new MlInt64(this.hi << 16 >> s - 32, sign, sign);
    };
   MlInt64.prototype.lsl1 =
    function(){
     this.hi = this.hi << 1 | this.mi >> 23;
     this.mi = (this.mi << 1 | this.lo >> 23) & 0xffffff;
     this.lo = this.lo << 1 & 0xffffff;
    };
   MlInt64.prototype.lsr1 =
    function(){
     this.lo = (this.lo >>> 1 | this.mi << 23) & 0xffffff;
     this.mi = (this.mi >>> 1 | this.hi << 23) & 0xffffff;
     this.hi = this.hi >>> 1;
    };
   MlInt64.prototype.udivmod =
    function(x){
     var
      offset = 0,
      modulus = this.copy(),
      divisor = x.copy(),
      quotient = new MlInt64(0, 0, 0);
     while(modulus.ucompare(divisor) > 0){offset++; divisor.lsl1();}
     while(offset >= 0){
      offset--;
      quotient.lsl1();
      if(modulus.ucompare(divisor) >= 0){
       quotient.lo++;
       modulus = modulus.sub(divisor);
      }
      divisor.lsr1();
     }
     return {quotient: quotient, modulus: modulus};
    };
   MlInt64.prototype.div =
    function(y){
     var x = this;
     if(y.isZero()) caml_raise_zero_divide();
     var sign = x.hi ^ y.hi;
     if(x.hi & 0x8000) x = x.neg();
     if(y.hi & 0x8000) y = y.neg();
     var q = x.udivmod(y).quotient;
     if(sign & 0x8000) q = q.neg();
     return q;
    };
   MlInt64.prototype.mod =
    function(y){
     var x = this;
     if(y.isZero()) caml_raise_zero_divide();
     var sign = x.hi;
     if(x.hi & 0x8000) x = x.neg();
     if(y.hi & 0x8000) y = y.neg();
     var r = x.udivmod(y).modulus;
     if(sign & 0x8000) r = r.neg();
     return r;
    };
   MlInt64.prototype.toInt = function(){return this.lo | this.mi << 24;};
   MlInt64.prototype.toFloat =
    function(){
     return (this.hi << 16) * Math.pow(2, 32) + this.mi * Math.pow(2, 24)
            + this.lo;
    };
   MlInt64.prototype.toArray =
    function(){
     return [this.hi >> 8,
             this.hi & 0xff,
             this.mi >> 16,
             this.mi >> 8 & 0xff,
             this.mi & 0xff,
             this.lo >> 16,
             this.lo >> 8 & 0xff,
             this.lo & 0xff];
    };
   MlInt64.prototype.lo32 =
    function(){return this.lo | (this.mi & 0xff) << 24;};
   MlInt64.prototype.hi32 =
    function(){return this.mi >>> 8 & 0xffff | this.hi << 16;};
   function caml_int64_of_int32(x){
    return new MlInt64(x & 0xffffff, x >> 24 & 0xffffff, x >> 31 & 0xffff);
   }
   function caml_int64_to_int32(x){return x.toInt();}
   function caml_int64_is_negative(x){return + x.isNeg();}
   function caml_int64_neg(x){return x.neg();}
   function caml_jsbytes_of_string(x){return x;}
   function jsoo_sys_getenv(n){
    var process = globalThis.process;
    if(process && process.env && process.env[n] != undefined)
     return process.env[n];
    if(globalThis.jsoo_static_env && globalThis.jsoo_static_env[n])
     return globalThis.jsoo_static_env[n];
   }
   var caml_record_backtrace_flag = 0;
   (function(){
      var r = jsoo_sys_getenv("OCAMLRUNPARAM");
      if(r !== undefined){
       var l = r.split(",");
       for(var i = 0; i < l.length; i++)
        if(l[i] == "b"){
         caml_record_backtrace_flag = 1;
         break;
        }
        else if(l[i].startsWith("b="))
         caml_record_backtrace_flag = + l[i].slice(2);
        else
         continue;
      }
     }
     ());
   function caml_exn_with_js_backtrace(exn, force){
    if(! exn.js_error || force || exn[0] == 248)
     exn.js_error = new globalThis.Error("Js exception containing backtrace");
    return exn;
   }
   function caml_maybe_attach_backtrace(exn, force){
    return caml_record_backtrace_flag
            ? caml_exn_with_js_backtrace(exn, force)
            : exn;
   }
   function caml_raise_with_arg(tag, arg){
    throw caml_maybe_attach_backtrace([0, tag, arg]);
   }
   function caml_string_of_jsbytes(x){return x;}
   function caml_raise_with_string(tag, msg){
    caml_raise_with_arg(tag, caml_string_of_jsbytes(msg));
   }
   function caml_invalid_argument(msg){
    caml_raise_with_string(caml_global_data.Invalid_argument, msg);
   }
   function caml_parse_format(fmt){
    fmt = caml_jsbytes_of_string(fmt);
    var len = fmt.length;
    if(len > 31) caml_invalid_argument("format_int: format too long");
    var
     f =
       {justify: "+",
        signstyle: "-",
        filler: " ",
        alternate: false,
        base: 0,
        signedconv: false,
        width: 0,
        uppercase: false,
        sign: 1,
        prec: - 1,
        conv: "f"};
    for(var i = 0; i < len; i++){
     var c = fmt.charAt(i);
     switch(c){
       case "-":
        f.justify = "-"; break;
       case "+":
       case " ":
        f.signstyle = c; break;
       case "0":
        f.filler = "0"; break;
       case "#":
        f.alternate = true; break;
       case "1":
       case "2":
       case "3":
       case "4":
       case "5":
       case "6":
       case "7":
       case "8":
       case "9":
        f.width = 0;
        while(c = fmt.charCodeAt(i) - 48, c >= 0 && c <= 9){f.width = f.width * 10 + c; i++;}
        i--;
        break;
       case ".":
        f.prec = 0;
        i++;
        while(c = fmt.charCodeAt(i) - 48, c >= 0 && c <= 9){f.prec = f.prec * 10 + c; i++;}
        i--;
       case "d":
       case "i":
        f.signedconv = true;
       case "u":
        f.base = 10; break;
       case "x":
        f.base = 16; break;
       case "X":
        f.base = 16; f.uppercase = true; break;
       case "o":
        f.base = 8; break;
       case "e":
       case "f":
       case "g":
        f.signedconv = true; f.conv = c; break;
       case "E":
       case "F":
       case "G":
        f.signedconv = true;
        f.uppercase = true;
        f.conv = c.toLowerCase();
        break;
     }
    }
    return f;
   }
   function caml_finish_formatting(f, rawbuffer){
    if(f.uppercase) rawbuffer = rawbuffer.toUpperCase();
    var len = rawbuffer.length;
    if(f.signedconv && (f.sign < 0 || f.signstyle != "-")) len++;
    if(f.alternate){if(f.base == 8) len += 1; if(f.base == 16) len += 2;}
    var buffer = "";
    if(f.justify == "+" && f.filler == " ")
     for(var i = len; i < f.width; i++) buffer += " ";
    if(f.signedconv)
     if(f.sign < 0)
      buffer += "-";
     else if(f.signstyle != "-") buffer += f.signstyle;
    if(f.alternate && f.base == 8) buffer += "0";
    if(f.alternate && f.base == 16) buffer += f.uppercase ? "0X" : "0x";
    if(f.justify == "+" && f.filler == "0")
     for(var i = len; i < f.width; i++) buffer += "0";
    buffer += rawbuffer;
    if(f.justify == "-") for(var i = len; i < f.width; i++) buffer += " ";
    return caml_string_of_jsbytes(buffer);
   }
   function caml_int64_format(fmt, x){
    var f = caml_parse_format(fmt);
    if(f.signedconv && caml_int64_is_negative(x)){f.sign = - 1; x = caml_int64_neg(x);}
    var
     buffer = "",
     wbase = caml_int64_of_int32(f.base),
     cvtbl = "0123456789abcdef";
    do{
     var p = x.udivmod(wbase);
     x = p.quotient;
     buffer = cvtbl.charAt(caml_int64_to_int32(p.modulus)) + buffer;
    }
    while
     (! caml_int64_is_zero(x));
    if(f.prec >= 0){
     f.filler = " ";
     var n = f.prec - buffer.length;
     if(n > 0) buffer = caml_str_repeat(n, "0") + buffer;
    }
    return caml_finish_formatting(f, buffer);
   }
   function caml_expm1_float(x){return Math.expm1(x);}
   function caml_ml_condition_broadcast(t){return 0;}
   function jsoo_is_ascii(s){
    if(s.length < 24){
     for(var i = 0; i < s.length; i++) if(s.charCodeAt(i) > 127) return false;
     return true;
    }
    else
     return ! /[^\x00-\x7f]/.test(s);
   }
   function caml_utf16_of_utf8(s){
    for(var b = "", t = "", c, c1, c2, v, i = 0, l = s.length; i < l; i++){
     c1 = s.charCodeAt(i);
     if(c1 < 0x80){
      for(var j = i + 1; j < l && (c1 = s.charCodeAt(j)) < 0x80; j++) ;
      if(j - i > 512){
       t.substr(0, 1);
       b += t;
       t = "";
       b += s.slice(i, j);
      }
      else
       t += s.slice(i, j);
      if(j == l) break;
      i = j;
     }
     v = 1;
     if(++i < l && ((c2 = s.charCodeAt(i)) & - 64) == 128){
      c = c2 + (c1 << 6);
      if(c1 < 0xe0){
       v = c - 0x3080;
       if(v < 0x80) v = 1;
      }
      else{
       v = 2;
       if(++i < l && ((c2 = s.charCodeAt(i)) & - 64) == 128){
        c = c2 + (c << 6);
        if(c1 < 0xf0){
         v = c - 0xe2080;
         if(v < 0x800 || v >= 0xd7ff && v < 0xe000) v = 2;
        }
        else{
         v = 3;
         if(++i < l && ((c2 = s.charCodeAt(i)) & - 64) == 128 && c1 < 0xf5){
          v = c2 - 0x3c82080 + (c << 6);
          if(v < 0x10000 || v > 0x10ffff) v = 3;
         }
        }
       }
      }
     }
     if(v < 4){
      i -= v;
      t += "\ufffd";
     }
     else if(v > 0xffff)
      t += String.fromCharCode(0xd7c0 + (v >> 10), 0xdc00 + (v & 0x3FF));
     else
      t += String.fromCharCode(v);
     if(t.length > 1024){t.substr(0, 1); b += t; t = "";}
    }
    return b + t;
   }
   function caml_jsstring_of_string(s){
    if(jsoo_is_ascii(s)) return s;
    return caml_utf16_of_utf8(s);
   }
   function fs_node_supported(){
    return typeof globalThis.process !== "undefined"
           && typeof globalThis.process.versions !== "undefined"
           && typeof globalThis.process.versions.node !== "undefined";
   }
   function make_path_is_absolute(){
    function posix(path){
     if(path.charAt(0) === "/") return ["", path.substring(1)];
     return;
    }
    function win32(path){
     var
      splitDeviceRe =
        /^([a-zA-Z]:|[\\/]{2}[^\\/]+[\\/]+[^\\/]+)?([\\/])?([\s\S]*?)$/,
      result = splitDeviceRe.exec(path),
      device = result[1] || "",
      isUnc = Boolean(device && device.charAt(1) !== ":");
     if(Boolean(result[2] || isUnc)){
      var root = result[1] || "", sep = result[2] || "";
      return [root, path.substring(root.length + sep.length)];
     }
     return;
    }
    return fs_node_supported() && globalThis.process
            && globalThis.process.platform
            ? globalThis.process.platform === "win32" ? win32 : posix
            : posix;
   }
   var path_is_absolute = make_path_is_absolute();
   function caml_trailing_slash(name){
    return name.slice(- 1) !== "/" ? name + "/" : name;
   }
   if(fs_node_supported() && globalThis.process && globalThis.process.cwd)
    var caml_current_dir = globalThis.process.cwd().replace(/\\/g, "/");
   else
    var caml_current_dir = "/static";
   caml_current_dir = caml_trailing_slash(caml_current_dir);
   function caml_make_path(name){
    name = caml_jsstring_of_string(name);
    if(! path_is_absolute(name)) name = caml_current_dir + name;
    var
     comp0 = path_is_absolute(name),
     comp = comp0[1].split("/"),
     ncomp = [];
    for(var i = 0; i < comp.length; i++)
     switch(comp[i]){
       case "..":
        if(ncomp.length > 1) ncomp.pop(); break;
       case ".": break;
       case "": break;
       default: ncomp.push(comp[i]); break;
     }
    ncomp.unshift(comp0[0]);
    ncomp.orig = name;
    return ncomp;
   }
   function caml_utf8_of_utf16(s){
    for(var b = "", t = b, c, d, i = 0, l = s.length; i < l; i++){
     c = s.charCodeAt(i);
     if(c < 0x80){
      for(var j = i + 1; j < l && (c = s.charCodeAt(j)) < 0x80; j++) ;
      if(j - i > 512){
       t.substr(0, 1);
       b += t;
       t = "";
       b += s.slice(i, j);
      }
      else
       t += s.slice(i, j);
      if(j == l) break;
      i = j;
     }
     if(c < 0x800){
      t += String.fromCharCode(0xc0 | c >> 6);
      t += String.fromCharCode(0x80 | c & 0x3f);
     }
     else if(c < 0xd800 || c >= 0xdfff)
      t +=
       String.fromCharCode
        (0xe0 | c >> 12, 0x80 | c >> 6 & 0x3f, 0x80 | c & 0x3f);
     else if
      (c >= 0xdbff || i + 1 == l || (d = s.charCodeAt(i + 1)) < 0xdc00
       || d > 0xdfff)
      t += "\xef\xbf\xbd";
     else{
      i++;
      c = (c << 10) + d - 0x35fdc00;
      t +=
       String.fromCharCode
        (0xf0 | c >> 18,
         0x80 | c >> 12 & 0x3f,
         0x80 | c >> 6 & 0x3f,
         0x80 | c & 0x3f);
     }
     if(t.length > 1024){t.substr(0, 1); b += t; t = "";}
    }
    return b + t;
   }
   function caml_string_of_jsstring(s){
    return jsoo_is_ascii(s)
            ? caml_string_of_jsbytes(s)
            : caml_string_of_jsbytes(caml_utf8_of_utf16(s));
   }
   var
    unix_error =
      ["E2BIG",
       "EACCES",
       "EAGAIN",
       "EBADF",
       "EBUSY",
       "ECHILD",
       "EDEADLK",
       "EDOM",
       "EEXIST",
       "EFAULT",
       "EFBIG",
       "EINTR",
       "EINVAL",
       "EIO",
       "EISDIR",
       "EMFILE",
       "EMLINK",
       "ENAMETOOLONG",
       "ENFILE",
       "ENODEV",
       "ENOENT",
       "ENOEXEC",
       "ENOLCK",
       "ENOMEM",
       "ENOSPC",
       "ENOSYS",
       "ENOTDIR",
       "ENOTEMPTY",
       "ENOTTY",
       "ENXIO",
       "EPERM",
       "EPIPE",
       "ERANGE",
       "EROFS",
       "ESPIPE",
       "ESRCH",
       "EXDEV",
       "EWOULDBLOCK",
       "EINPROGRESS",
       "EALREADY",
       "ENOTSOCK",
       "EDESTADDRREQ",
       "EMSGSIZE",
       "EPROTOTYPE",
       "ENOPROTOOPT",
       "EPROTONOSUPPORT",
       "ESOCKTNOSUPPORT",
       "EOPNOTSUPP",
       "EPFNOSUPPORT",
       "EAFNOSUPPORT",
       "EADDRINUSE",
       "EADDRNOTAVAIL",
       "ENETDOWN",
       "ENETUNREACH",
       "ENETRESET",
       "ECONNABORTED",
       "ECONNRESET",
       "ENOBUFS",
       "EISCONN",
       "ENOTCONN",
       "ESHUTDOWN",
       "ETOOMANYREFS",
       "ETIMEDOUT",
       "ECONNREFUSED",
       "EHOSTDOWN",
       "EHOSTUNREACH",
       "ELOOP",
       "EOVERFLOW"];
   function make_unix_err_args(code, syscall, path, errno){
    var variant = unix_error.indexOf(code);
    if(variant < 0){if(errno == null) errno = - 9999; variant = [0, errno];}
    var
     args =
       [variant,
        caml_string_of_jsstring(syscall || ""),
        caml_string_of_jsstring(path || "")];
    return args;
   }
   var caml_named_values = {};
   function caml_named_value(nm){return caml_named_values[nm];}
   function caml_raise_with_args(tag, args){
    throw caml_maybe_attach_backtrace([0, tag].concat(args));
   }
   function caml_subarray_to_jsbytes(a, i, len){
    var f = String.fromCharCode;
    if(i == 0 && len <= 4096 && len == a.length) return f.apply(null, a);
    var s = "";
    for(; 0 < len; i += 1024, len -= 1024)
     s += f.apply(null, a.slice(i, i + Math.min(len, 1024)));
    return s;
   }
   function caml_convert_string_to_bytes(s){
    if(s.t == 2)
     s.c += caml_str_repeat(s.l - s.c.length, "\0");
    else
     s.c = caml_subarray_to_jsbytes(s.c, 0, s.c.length);
    s.t = 0;
   }
   function MlBytes(tag, contents, length){
    this.t = tag;
    this.c = contents;
    this.l = length;
   }
   MlBytes.prototype.toString =
    function(){
     switch(this.t){
       case 9:
        return this.c;
       default: caml_convert_string_to_bytes(this);
       case 0:
        if(jsoo_is_ascii(this.c)){this.t = 9; return this.c;} this.t = 8;
       case 8:
        return this.c;
     }
    };
   MlBytes.prototype.toUtf16 =
    function(){
     var r = this.toString();
     if(this.t == 9) return r;
     return caml_utf16_of_utf8(r);
    };
   MlBytes.prototype.slice =
    function(){
     var content = this.t == 4 ? this.c.slice() : this.c;
     return new MlBytes(this.t, content, this.l);
    };
   function caml_is_ml_bytes(s){return s instanceof MlBytes;}
   function caml_is_ml_string(s){
    return typeof s === "string" && ! /[^\x00-\xff]/.test(s);
   }
   function caml_bytes_of_array(a){
    if(! (a instanceof Uint8Array)) a = new Uint8Array(a);
    return new MlBytes(4, a, a.length);
   }
   function caml_bytes_of_jsbytes(s){return new MlBytes(0, s, s.length);}
   function caml_bytes_of_string(s){
    return caml_bytes_of_jsbytes(caml_jsbytes_of_string(s));
   }
   function caml_raise_sys_error(msg){
    caml_raise_with_string(caml_global_data.Sys_error, msg);
   }
   function caml_raise_no_such_file(name){
    caml_raise_sys_error(name + ": No such file or directory");
   }
   function caml_convert_bytes_to_array(s){
    var a = new Uint8Array(s.l), b = s.c, l = b.length, i = 0;
    for(; i < l; i++) a[i] = b.charCodeAt(i);
    for(l = s.l; i < l; i++) a[i] = 0;
    s.c = a;
    s.t = 4;
    return a;
   }
   function caml_uint8_array_of_bytes(s){
    if(s.t != 4) caml_convert_bytes_to_array(s);
    return s.c;
   }
   function caml_create_bytes(len){
    if(len < 0) caml_invalid_argument("Bytes.create");
    return new MlBytes(len ? 2 : 9, "", len);
   }
   function caml_ml_bytes_length(s){return s.l;}
   function caml_blit_bytes(s1, i1, s2, i2, len){
    if(len == 0) return 0;
    if(i2 == 0 && (len >= s2.l || s2.t == 2 && len >= s2.c.length)){
     s2.c =
      s1.t == 4
       ? caml_subarray_to_jsbytes(s1.c, i1, len)
       : i1 == 0 && s1.c.length == len ? s1.c : s1.c.substr(i1, len);
     s2.t = s2.c.length == s2.l ? 0 : 2;
    }
    else if(s2.t == 2 && i2 == s2.c.length){
     s2.c +=
      s1.t == 4
       ? caml_subarray_to_jsbytes(s1.c, i1, len)
       : i1 == 0 && s1.c.length == len ? s1.c : s1.c.substr(i1, len);
     s2.t = s2.c.length == s2.l ? 0 : 2;
    }
    else{
     if(s2.t != 4) caml_convert_bytes_to_array(s2);
     var c1 = s1.c, c2 = s2.c;
     if(s1.t == 4)
      if(i2 <= i1)
       for(var i = 0; i < len; i++) c2[i2 + i] = c1[i1 + i];
      else
       for(var i = len - 1; i >= 0; i--) c2[i2 + i] = c1[i1 + i];
     else{
      var l = Math.min(len, c1.length - i1);
      for(var i = 0; i < l; i++) c2[i2 + i] = c1.charCodeAt(i1 + i);
      for(; i < len; i++) c2[i2 + i] = 0;
     }
    }
    return 0;
   }
   function MlFile(){}
   function MlFakeFile(content){this.data = content;}
   MlFakeFile.prototype = new MlFile();
   MlFakeFile.prototype.constructor = MlFakeFile;
   MlFakeFile.prototype.truncate =
    function(len){
     var old = this.data;
     this.data = caml_create_bytes(len | 0);
     caml_blit_bytes(old, 0, this.data, 0, len);
    };
   MlFakeFile.prototype.length =
    function(){return caml_ml_bytes_length(this.data);};
   MlFakeFile.prototype.write =
    function(offset, buf, pos, len){
     var clen = this.length();
     if(offset + len >= clen){
      var new_str = caml_create_bytes(offset + len), old_data = this.data;
      this.data = new_str;
      caml_blit_bytes(old_data, 0, this.data, 0, clen);
     }
     caml_blit_bytes(caml_bytes_of_array(buf), pos, this.data, offset, len);
     return 0;
    };
   MlFakeFile.prototype.read =
    function(offset, buf, pos, len){
     var clen = this.length();
     if(offset + len >= clen) len = clen - offset;
     if(len){
      var data = caml_create_bytes(len | 0);
      caml_blit_bytes(this.data, offset, data, 0, len);
      buf.set(caml_uint8_array_of_bytes(data), pos);
     }
     return len;
    };
   function MlFakeFd(name, file, flags){
    this.file = file;
    this.name = name;
    this.flags = flags;
   }
   MlFakeFd.prototype.err_closed =
    function(){
     caml_raise_sys_error(this.name + ": file descriptor already closed");
    };
   MlFakeFd.prototype.length =
    function(){if(this.file) return this.file.length(); this.err_closed();};
   MlFakeFd.prototype.write =
    function(offset, buf, pos, len){
     if(this.file) return this.file.write(offset, buf, pos, len);
     this.err_closed();
    };
   MlFakeFd.prototype.read =
    function(offset, buf, pos, len){
     if(this.file) return this.file.read(offset, buf, pos, len);
     this.err_closed();
    };
   MlFakeFd.prototype.close = function(){this.file = undefined;};
   function MlFakeDevice(root, f){
    this.content = {};
    this.root = root;
    this.lookupFun = f;
   }
   MlFakeDevice.prototype.nm = function(name){return this.root + name;};
   MlFakeDevice.prototype.create_dir_if_needed =
    function(name){
     var comp = name.split("/"), res = "";
     for(var i = 0; i < comp.length - 1; i++){
      res += comp[i] + "/";
      if(this.content[res]) continue;
      this.content[res] = Symbol("directory");
     }
    };
   MlFakeDevice.prototype.slash =
    function(name){return /\/$/.test(name) ? name : name + "/";};
   MlFakeDevice.prototype.lookup =
    function(name){
     if(! this.content[name] && this.lookupFun){
      var
       res =
         this.lookupFun
          (caml_string_of_jsbytes(this.root), caml_string_of_jsbytes(name));
      if(res !== 0){
       this.create_dir_if_needed(name);
       this.content[name] = new MlFakeFile(caml_bytes_of_string(res[1]));
      }
     }
    };
   MlFakeDevice.prototype.exists =
    function(name){
     if(name == "") return 1;
     var name_slash = this.slash(name);
     if(this.content[name_slash]) return 1;
     this.lookup(name);
     return this.content[name] ? 1 : 0;
    };
   MlFakeDevice.prototype.isFile =
    function(name){return this.exists(name) && ! this.is_dir(name) ? 1 : 0;};
   MlFakeDevice.prototype.mkdir =
    function(name, mode, raise_unix){
     var unix_error = raise_unix && caml_named_value("Unix.Unix_error");
     if(this.exists(name))
      if(unix_error)
       caml_raise_with_args
        (unix_error, make_unix_err_args("EEXIST", "mkdir", this.nm(name)));
      else
       caml_raise_sys_error(name + ": File exists");
     var parent = /^(.*)\/[^/]+/.exec(name);
     parent = parent && parent[1] || "";
     if(! this.exists(parent))
      if(unix_error)
       caml_raise_with_args
        (unix_error, make_unix_err_args("ENOENT", "mkdir", this.nm(parent)));
      else
       caml_raise_sys_error(parent + ": No such file or directory");
     if(! this.is_dir(parent))
      if(unix_error)
       caml_raise_with_args
        (unix_error, make_unix_err_args("ENOTDIR", "mkdir", this.nm(parent)));
      else
       caml_raise_sys_error(parent + ": Not a directory");
     this.create_dir_if_needed(this.slash(name));
    };
   MlFakeDevice.prototype.rmdir =
    function(name, raise_unix){
     var
      unix_error = raise_unix && caml_named_value("Unix.Unix_error"),
      name_slash = name == "" ? "" : this.slash(name),
      r = new RegExp("^" + name_slash + "([^/]+)");
     if(! this.exists(name))
      if(unix_error)
       caml_raise_with_args
        (unix_error, make_unix_err_args("ENOENT", "rmdir", this.nm(name)));
      else
       caml_raise_sys_error(name + ": No such file or directory");
     if(! this.is_dir(name))
      if(unix_error)
       caml_raise_with_args
        (unix_error, make_unix_err_args("ENOTDIR", "rmdir", this.nm(name)));
      else
       caml_raise_sys_error(name + ": Not a directory");
     for(var n in this.content)
      if(n.match(r))
       if(unix_error)
        caml_raise_with_args
         (unix_error, make_unix_err_args("ENOTEMPTY", "rmdir", this.nm(name)));
       else
        caml_raise_sys_error(this.nm(name) + ": Directory not empty");
     delete this.content[name_slash];
    };
   MlFakeDevice.prototype.readdir =
    function(name){
     var name_slash = name == "" ? "" : this.slash(name);
     if(! this.exists(name))
      caml_raise_sys_error(name + ": No such file or directory");
     if(! this.is_dir(name)) caml_raise_sys_error(name + ": Not a directory");
     var r = new RegExp("^" + name_slash + "([^/]+)"), seen = {}, a = [];
     for(var n in this.content){
      var m = n.match(r);
      if(m && ! seen[m[1]]){seen[m[1]] = true; a.push(m[1]);}
     }
     return a;
    };
   MlFakeDevice.prototype.opendir =
    function(name, raise_unix){
     var
      unix_error = raise_unix && caml_named_value("Unix.Unix_error"),
      a = this.readdir(name),
      c = false,
      i = 0;
     return {readSync:
             function(){
              if(c)
               if(unix_error)
                caml_raise_with_args
                 (unix_error,
                  make_unix_err_args("EBADF", "closedir", this.nm(name)));
               else
                caml_raise_sys_error(name + ": closedir failed");
              if(i == a.length) return null;
              var entry = a[i];
              i++;
              return {name: entry};
             },
             closeSync:
             function(){
              if(c)
               if(unix_error)
                caml_raise_with_args
                 (unix_error,
                  make_unix_err_args("EBADF", "closedir", this.nm(name)));
               else
                caml_raise_sys_error(name + ": closedir failed");
              c = true;
              a = [];
             }};
    };
   MlFakeDevice.prototype.is_dir =
    function(name){
     if(name == "") return true;
     var name_slash = this.slash(name);
     return this.content[name_slash] ? 1 : 0;
    };
   MlFakeDevice.prototype.unlink =
    function(name){
     var ok = this.content[name] ? true : false;
     delete this.content[name];
     return ok;
    };
   MlFakeDevice.prototype.open =
    function(name, f){
     var file;
     if(f.rdonly && f.wronly)
      caml_raise_sys_error
       (this.nm(name)
        + " : flags Open_rdonly and Open_wronly are not compatible");
     if(f.text && f.binary)
      caml_raise_sys_error
       (this.nm(name)
        + " : flags Open_text and Open_binary are not compatible");
     this.lookup(name);
     if(this.content[name]){
      if(this.is_dir(name))
       caml_raise_sys_error(this.nm(name) + " : is a directory");
      if(f.create && f.excl)
       caml_raise_sys_error(this.nm(name) + " : file already exists");
      file = this.content[name];
      if(f.truncate) file.truncate();
     }
     else if(f.create){
      this.create_dir_if_needed(name);
      this.content[name] = new MlFakeFile(caml_create_bytes(0));
      file = this.content[name];
     }
     else
      caml_raise_no_such_file(this.nm(name));
     return new MlFakeFd(this.nm(name), file, f);
    };
   MlFakeDevice.prototype.open =
    function(name, f){
     var file;
     if(f.rdonly && f.wronly)
      caml_raise_sys_error
       (this.nm(name)
        + " : flags Open_rdonly and Open_wronly are not compatible");
     if(f.text && f.binary)
      caml_raise_sys_error
       (this.nm(name)
        + " : flags Open_text and Open_binary are not compatible");
     this.lookup(name);
     if(this.content[name]){
      if(this.is_dir(name))
       caml_raise_sys_error(this.nm(name) + " : is a directory");
      if(f.create && f.excl)
       caml_raise_sys_error(this.nm(name) + " : file already exists");
      file = this.content[name];
      if(f.truncate) file.truncate();
     }
     else if(f.create){
      this.create_dir_if_needed(name);
      this.content[name] = new MlFakeFile(caml_create_bytes(0));
      file = this.content[name];
     }
     else
      caml_raise_no_such_file(this.nm(name));
     return new MlFakeFd(this.nm(name), file, f);
    };
   MlFakeDevice.prototype.register =
    function(name, content){
     var file;
     if(this.content[name])
      caml_raise_sys_error(this.nm(name) + " : file already exists");
     if(caml_is_ml_bytes(content)) file = new MlFakeFile(content);
     if(caml_is_ml_string(content))
      file = new MlFakeFile(caml_bytes_of_string(content));
     else if(content instanceof Array)
      file = new MlFakeFile(caml_bytes_of_array(content));
     else if(typeof content === "string")
      file = new MlFakeFile(caml_bytes_of_jsbytes(content));
     else if(content.toString){
      var
       bytes =
         caml_bytes_of_string(caml_string_of_jsstring(content.toString()));
      file = new MlFakeFile(bytes);
     }
     if(file){
      this.create_dir_if_needed(name);
      this.content[name] = file;
     }
     else
      caml_raise_sys_error
       (this.nm(name) + " : registering file with invalid content type");
    };
   MlFakeDevice.prototype.constructor = MlFakeDevice;
   function caml_ml_string_length(s){return s.length;}
   function caml_string_unsafe_get(s, i){return s.charCodeAt(i);}
   function caml_uint8_array_of_string(s){
    var l = caml_ml_string_length(s), a = new Array(l), i = 0;
    for(; i < l; i++) a[i] = caml_string_unsafe_get(s, i);
    return a;
   }
   function caml_bytes_bound_error(){
    caml_invalid_argument("index out of bounds");
   }
   function caml_bytes_unsafe_set(s, i, c){
    c &= 0xff;
    if(s.t != 4){
     if(i == s.c.length){
      s.c += String.fromCharCode(c);
      if(i + 1 == s.l) s.t = 0;
      return 0;
     }
     caml_convert_bytes_to_array(s);
    }
    s.c[i] = c;
    return 0;
   }
   function caml_bytes_set(s, i, c){
    if(i >>> 0 >= s.l) caml_bytes_bound_error();
    return caml_bytes_unsafe_set(s, i, c);
   }
   function MlNodeFd(fd, flags){
    this.fs = require("fs");
    this.fd = fd;
    this.flags = flags;
   }
   MlNodeFd.prototype = new MlFile();
   MlNodeFd.prototype.constructor = MlNodeFd;
   MlNodeFd.prototype.truncate =
    function(len){
     try{this.fs.ftruncateSync(this.fd, len | 0);}
     catch(err){caml_raise_sys_error(err.toString());}
    };
   MlNodeFd.prototype.length =
    function(){
     try{return this.fs.fstatSync(this.fd).size;}
     catch(err){caml_raise_sys_error(err.toString());}
    };
   MlNodeFd.prototype.write =
    function(offset, buf, buf_offset, len){
     try{
      if(this.flags.isCharacterDevice)
       this.fs.writeSync(this.fd, buf, buf_offset, len);
      else
       this.fs.writeSync(this.fd, buf, buf_offset, len, offset);
     }
     catch(err){caml_raise_sys_error(err.toString());}
     return 0;
    };
   MlNodeFd.prototype.read =
    function(offset, a, buf_offset, len){
     try{
      if(this.flags.isCharacterDevice)
       var read = this.fs.readSync(this.fd, a, buf_offset, len);
      else
       var read = this.fs.readSync(this.fd, a, buf_offset, len, offset);
      return read;
     }
     catch(err){caml_raise_sys_error(err.toString());}
    };
   MlNodeFd.prototype.close =
    function(){
     try{this.fs.closeSync(this.fd); return 0;}
     catch(err){caml_raise_sys_error(err.toString());}
    };
   function MlNodeDevice(root){this.fs = require("fs"); this.root = root;}
   MlNodeDevice.prototype.nm = function(name){return this.root + name;};
   MlNodeDevice.prototype.exists =
    function(name){
     try{return this.fs.existsSync(this.nm(name)) ? 1 : 0;}
     catch(err){return 0;}
    };
   MlNodeDevice.prototype.isFile =
    function(name){
     try{return this.fs.statSync(this.nm(name)).isFile() ? 1 : 0;}
     catch(err){caml_raise_sys_error(err.toString());}
    };
   MlNodeDevice.prototype.mkdir =
    function(name, mode, raise_unix){
     try{this.fs.mkdirSync(this.nm(name), {mode: mode}); return 0;}
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.rmdir =
    function(name, raise_unix){
     try{this.fs.rmdirSync(this.nm(name)); return 0;}
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.readdir =
    function(name, raise_unix){
     try{return this.fs.readdirSync(this.nm(name));}
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.is_dir =
    function(name){
     try{return this.fs.statSync(this.nm(name)).isDirectory() ? 1 : 0;}
     catch(err){caml_raise_sys_error(err.toString());}
    };
   MlNodeDevice.prototype.unlink =
    function(name, raise_unix){
     try{
      var b = this.fs.existsSync(this.nm(name)) ? 1 : 0;
      this.fs.unlinkSync(this.nm(name));
      return b;
     }
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.open =
    function(name, f, raise_unix){
     var consts = require("constants"), res = 0;
     for(var key in f)
      switch(key){
        case "rdonly":
         res |= consts.O_RDONLY; break;
        case "wronly":
         res |= consts.O_WRONLY; break;
        case "append":
         res |= consts.O_WRONLY | consts.O_APPEND; break;
        case "create":
         res |= consts.O_CREAT; break;
        case "truncate":
         res |= consts.O_TRUNC; break;
        case "excl":
         res |= consts.O_EXCL; break;
        case "binary":
         res |= consts.O_BINARY; break;
        case "text":
         res |= consts.O_TEXT; break;
        case "nonblock":
         res |= consts.O_NONBLOCK; break;
      }
     try{
      var
       fd = this.fs.openSync(this.nm(name), res),
       isCharacterDevice =
         this.fs.lstatSync(this.nm(name)).isCharacterDevice();
      f.isCharacterDevice = isCharacterDevice;
      return new MlNodeFd(fd, f);
     }
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.rename =
    function(o, n, raise_unix){
     try{this.fs.renameSync(this.nm(o), this.nm(n));}
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.stat =
    function(name, raise_unix){
     try{
      var js_stats = this.fs.statSync(this.nm(name));
      return this.stats_from_js(js_stats);
     }
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.lstat =
    function(name, raise_unix){
     try{
      var js_stats = this.fs.lstatSync(this.nm(name));
      return this.stats_from_js(js_stats);
     }
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.symlink =
    function(to_dir, target, path, raise_unix){
     try{
      this.fs.symlinkSync
       (this.nm(target), this.nm(path), to_dir ? "dir" : "file");
      return 0;
     }
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.readlink =
    function(name, raise_unix){
     try{
      var link = this.fs.readlinkSync(this.nm(name), "utf8");
      return caml_string_of_jsstring(link);
     }
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.opendir =
    function(name, raise_unix){
     try{return this.fs.opendirSync(this.nm(name));}
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.raise_nodejs_error =
    function(err, raise_unix){
     var unix_error = caml_named_value("Unix.Unix_error");
     if(raise_unix && unix_error){
      var
       args = make_unix_err_args(err.code, err.syscall, err.path, err.errno);
      caml_raise_with_args(unix_error, args);
     }
     else
      caml_raise_sys_error(err.toString());
    };
   MlNodeDevice.prototype.stats_from_js =
    function(js_stats){
     var file_kind;
     if(js_stats.isFile())
      file_kind = 0;
     else if(js_stats.isDirectory())
      file_kind = 1;
     else if(js_stats.isCharacterDevice())
      file_kind = 2;
     else if(js_stats.isBlockDevice())
      file_kind = 3;
     else if(js_stats.isSymbolicLink())
      file_kind = 4;
     else if(js_stats.isFIFO())
      file_kind = 5;
     else if(js_stats.isSocket()) file_kind = 6;
     return [0,
             js_stats.dev,
             js_stats.ino,
             file_kind,
             js_stats.mode,
             js_stats.nlink,
             js_stats.uid,
             js_stats.gid,
             js_stats.rdev,
             js_stats.size,
             js_stats.atimeMs,
             js_stats.mtimeMs,
             js_stats.ctimeMs];
    };
   MlNodeDevice.prototype.constructor = MlNodeDevice;
   function caml_get_root(path){
    var x = path_is_absolute(path);
    if(! x) return;
    return x[0] + "/";
   }
   function caml_failwith(msg){
    if(! caml_global_data.Failure)
     caml_global_data.Failure = [248, caml_string_of_jsbytes("Failure"), - 3];
    caml_raise_with_string(caml_global_data.Failure, msg);
   }
   var
    caml_root =
      caml_get_root(caml_current_dir)
      || caml_failwith("unable to compute caml_root"),
    jsoo_mount_point = [];
   if(fs_node_supported())
    jsoo_mount_point.push
     ({path: caml_root, device: new MlNodeDevice(caml_root)});
   else
    jsoo_mount_point.push
     ({path: caml_root, device: new MlFakeDevice(caml_root)});
   jsoo_mount_point.push
    ({path: "/static/", device: new MlFakeDevice("/static/")});
   function resolve_fs_device(name){
    var
     path = caml_make_path(name),
     name = path.join("/"),
     name_slash = caml_trailing_slash(name),
     res;
    for(var i = 0; i < jsoo_mount_point.length; i++){
     var m = jsoo_mount_point[i];
     if
      (name_slash.search(m.path) == 0
       && (! res || res.path.length < m.path.length))
      res =
       {path: m.path,
        device: m.device,
        rest: name.substring(m.path.length, name.length)};
    }
    if(! res && fs_node_supported()){
     var root = caml_get_root(name);
     if(root && root.match(/^[a-zA-Z]:\/$/)){
      var m = {path: root, device: new MlNodeDevice(root)};
      jsoo_mount_point.push(m);
      res =
       {path: m.path,
        device: m.device,
        rest: name.substring(m.path.length, name.length)};
     }
    }
    if(res) return res;
    caml_raise_sys_error("no device found for " + name_slash);
   }
   function caml_sys_is_directory(name){
    var root = resolve_fs_device(name), a = root.device.is_dir(root.rest);
    return a ? 1 : 0;
   }
   function caml_raise_not_found(){
    caml_raise_constant(caml_global_data.Not_found);
   }
   function caml_sys_getenv(name){
    var r = jsoo_sys_getenv(caml_jsstring_of_string(name));
    if(r === undefined) caml_raise_not_found();
    return caml_string_of_jsstring(r);
   }
   function shift_right_nat(nat1, ofs1, len1, nat2, ofs2, nbits){
    if(nbits == 0){nat2.data[ofs2] = 0; return 0;}
    var wrap = 0;
    for(var i = len1 - 1; i >= 0; i--){
     var a = nat1.data[ofs1 + i] >>> 0;
     nat1.data[ofs1 + i] = a >>> nbits | wrap;
     wrap = a << 32 - nbits;
    }
    nat2.data[ofs2] = wrap;
    return 0;
   }
   var caml_gr_state;
   function caml_gr_state_get(){
    if(caml_gr_state) return caml_gr_state;
    throw caml_maybe_attach_backtrace
           ([0,
             caml_named_value("Graphics.Graphic_failure"),
             caml_string_of_jsbytes("Not initialized")]);
   }
   function caml_gr_point_color(x, y){
    var
     s = caml_gr_state_get(),
     im = s.context.getImageData(x, s.height - y, 1, 1),
     d = im.data;
    return (d[0] << 16) + (d[1] << 8) + d[2];
   }
   function caml_runtime_events_user_resolve(){return 0;}
   var MlObjectTable;
   if(typeof globalThis.Map === "undefined")
    MlObjectTable =
     function(){
       function NaiveLookup(objs){this.objs = objs;}
       NaiveLookup.prototype.get =
        function(v){
         for(var i = 0; i < this.objs.length; i++)
          if(this.objs[i] === v) return i;
        };
       NaiveLookup.prototype.set = function(){};
       return function(){
        this.objs = [];
        this.lookup = new NaiveLookup(this.objs);};
      }
      ();
   else
    MlObjectTable =
     function(){this.objs = []; this.lookup = new globalThis.Map();};
   MlObjectTable.prototype.store =
    function(v){this.lookup.set(v, this.objs.length); this.objs.push(v);};
   MlObjectTable.prototype.recall =
    function(v){
     var i = this.lookup.get(v);
     return i === undefined ? undefined : this.objs.length - i;
    };
   function caml_sys_rename(o, n){
    var o_root = resolve_fs_device(o), n_root = resolve_fs_device(n);
    if(o_root.device != n_root.device)
     caml_failwith("caml_sys_rename: cannot move file between two filesystem");
    if(! o_root.device.rename)
     caml_failwith("caml_sys_rename: no implemented");
    o_root.device.rename(o_root.rest, n_root.rest);
   }
   function caml_log10_float(x){return Math.log10(x);}
   var caml_runtime_warnings = 0;
   function caml_ml_enable_runtime_warnings(bool){caml_runtime_warnings = bool; return 0;
   }
   function caml_classify_float(x){
    if(isFinite(x)){
     if(Math.abs(x) >= 2.2250738585072014e-308) return 0;
     if(x != 0) return 1;
     return 2;
    }
    return isNaN(x) ? 4 : 3;
   }
   var caml_ml_channels = new Array();
   function caml_refill(chan){
    if(chan.refill != null){
     var str = chan.refill(), str_a = caml_uint8_array_of_string(str);
     if(str_a.length == 0)
      chan.refill = null;
     else{
      if(chan.buffer.length < chan.buffer_max + str_a.length){
       var b = new Uint8Array(chan.buffer_max + str_a.length);
       b.set(chan.buffer);
       chan.buffer = b;
      }
      chan.buffer.set(str_a, chan.buffer_max);
      chan.offset += str_a.length;
      chan.buffer_max += str_a.length;
     }
    }
    else{
     var
      nread =
        chan.file.read
         (chan.offset,
          chan.buffer,
          chan.buffer_max,
          chan.buffer.length - chan.buffer_max);
     chan.offset += nread;
     chan.buffer_max += nread;
    }
   }
   function caml_array_bound_error(){
    caml_invalid_argument("index out of bounds");
   }
   function caml_ml_input_scan_line(chanid){
    var chan = caml_ml_channels[chanid], p = chan.buffer_curr;
    do
     if(p >= chan.buffer_max){
      if(chan.buffer_curr > 0){
       chan.buffer.set(chan.buffer.subarray(chan.buffer_curr), 0);
       p -= chan.buffer_curr;
       chan.buffer_max -= chan.buffer_curr;
       chan.buffer_curr = 0;
      }
      if(chan.buffer_max >= chan.buffer.length) return - chan.buffer_max | 0;
      var prev_max = chan.buffer_max;
      caml_refill(chan);
      if(prev_max == chan.buffer_max) return - chan.buffer_max | 0;
     }
    while
     (chan.buffer[p++] != 10);
    return p - chan.buffer_curr | 0;
   }
   function caml_gc_minor(unit){
    if(typeof globalThis.gc == "function") globalThis.gc(true);
    return 0;
   }
   function core_gc_heap_chunks(){return 0;}
   function caml_sse2_float64_max_bytecode(x, y){return x > y ? x : y;}
   function caml_ml_condition_new(unit){return {condition: 1};}
   function caml_ba_to_typed_array(ba){return ba.data;}
   function caml_ml_input_block(chanid, ba, i, l){
    var
     chan = caml_ml_channels[chanid],
     n = l,
     avail = chan.buffer_max - chan.buffer_curr;
    if(l <= avail){
     ba.set(chan.buffer.subarray(chan.buffer_curr, chan.buffer_curr + l), i);
     chan.buffer_curr += l;
    }
    else if(avail > 0){
     ba.set
      (chan.buffer.subarray(chan.buffer_curr, chan.buffer_curr + avail), i);
     chan.buffer_curr += avail;
     n = avail;
    }
    else{
     chan.buffer_curr = 0;
     chan.buffer_max = 0;
     caml_refill(chan);
     var avail = chan.buffer_max - chan.buffer_curr;
     if(n > avail) n = avail;
     ba.set(chan.buffer.subarray(chan.buffer_curr, chan.buffer_curr + n), i);
     chan.buffer_curr += n;
    }
    return n | 0;
   }
   function caml_ml_input_bigarray(chanid, b, i, l){
    var ba = caml_ba_to_typed_array(b);
    return caml_ml_input_block(chanid, ba, i, l);
   }
   function caml_int64_of_bytes(a){
    return new
            MlInt64
            (a[7] << 0 | a[6] << 8 | a[5] << 16,
             a[4] << 0 | a[3] << 8 | a[2] << 16,
             a[1] << 0 | a[0] << 8);
   }
   function caml_ba_uint8_get64(ba, i0){
    var ofs = ba.offset(i0);
    if(ofs + 7 >= ba.data.length) caml_array_bound_error();
    var
     b1 = ba.get(ofs + 0),
     b2 = ba.get(ofs + 1),
     b3 = ba.get(ofs + 2),
     b4 = ba.get(ofs + 3),
     b5 = ba.get(ofs + 4),
     b6 = ba.get(ofs + 5),
     b7 = ba.get(ofs + 6),
     b8 = ba.get(ofs + 7);
    return caml_int64_of_bytes([b8, b7, b6, b5, b4, b3, b2, b1]);
   }
   function caml_int64_to_bytes(x){return x.toArray();}
   function caml_int64_marshal(writer, v, sizes){
    var b = caml_int64_to_bytes(v);
    for(var i = 0; i < 8; i++) writer.write(8, b[i]);
    sizes[0] = 8;
    sizes[1] = 8;
   }
   function caml_ba_num_dims(ba){return ba.dims.length;}
   function caml_ba_get_1(ba, i0){return ba.get(ba.offset(i0));}
   function caml_int_compare(a, b){
    if(a < b) return - 1;
    if(a == b) return 0;
    return 1;
   }
   function bigstringaf_memcmp_bigstring(ba1, ba1_off, ba2, ba2_off, len){
    for(var i = 0; i < len; i++){
     var
      c =
        caml_int_compare
         (caml_ba_get_1(ba1, ba1_off + i), caml_ba_get_1(ba2, ba2_off + i));
     if(c != 0) return c;
    }
    return 0;
   }
   function caml_bigstring_blit_ba_to_bytes(ba1, pos1, bytes2, pos2, len){
    if(12 != ba1.kind)
     caml_invalid_argument("caml_bigstring_blit_string_to_ba: kind mismatch");
    if(len == 0) return 0;
    var ofs1 = ba1.offset(pos1);
    if(ofs1 + len > ba1.data.length) caml_array_bound_error();
    if(pos2 + len > caml_ml_bytes_length(bytes2)) caml_array_bound_error();
    var slice = ba1.data.slice(ofs1, ofs1 + len);
    caml_blit_bytes(caml_bytes_of_array(slice), 0, bytes2, pos2, len);
    return 0;
   }
   function bigstring_blit_bigstring_bytes_stub
   (src, src_pos, dst, dst_pos, len){
    return caml_bigstring_blit_ba_to_bytes(src, src_pos, dst, dst_pos, len);
   }
   function caml_wrap_exception(e){
    {
     if(e instanceof Array) return e;
     var exn;
     if
      (globalThis.RangeError && e instanceof globalThis.RangeError
       && e.message
       && e.message.match(/maximum call stack/i))
      exn = caml_global_data.Stack_overflow;
     else if
      (globalThis.InternalError && e instanceof globalThis.InternalError
       && e.message
       && e.message.match(/too much recursion/i))
      exn = caml_global_data.Stack_overflow;
     else if(e instanceof globalThis.Error && caml_named_value("jsError"))
      exn = [0, caml_named_value("jsError"), e];
     else
      exn = [0, caml_global_data.Failure, caml_string_of_jsstring(String(e))];
     if(e instanceof globalThis.Error) exn.js_error = e;
     return exn;
    }
   }
   function caml_create_file(name, content){
    var root = resolve_fs_device(name);
    if(! root.device.register) caml_failwith("cannot register file");
    root.device.register(root.rest, content);
    return 0;
   }
   function jsoo_create_file(name, content){
    var
     name = caml_string_of_jsbytes(name),
     content = caml_string_of_jsbytes(content);
    return caml_create_file(name, content);
   }
   function caml_fs_init(){
    var tmp = globalThis.caml_fs_tmp;
    if(tmp)
     for(var i = 0; i < tmp.length; i++)
      jsoo_create_file(tmp[i].name, tmp[i].content);
    globalThis.jsoo_create_file = jsoo_create_file;
    globalThis.caml_fs_tmp = [];
    return 0;
   }
   function caml_mul(a, b){return Math.imul(a, b);}
   function caml_hash_mix_int(h, d){
    d = caml_mul(d, 0xcc9e2d51 | 0);
    d = d << 15 | d >>> 32 - 15;
    d = caml_mul(d, 0x1b873593);
    h ^= d;
    h = h << 13 | h >>> 32 - 13;
    return (h + (h << 2) | 0) + (0xe6546b64 | 0) | 0;
   }
   function caml_hash_mix_jsbytes(h, s){
    var len = s.length, i, w;
    for(i = 0; i + 4 <= len; i += 4){
     w =
      s.charCodeAt(i) | s.charCodeAt(i + 1) << 8 | s.charCodeAt(i + 2) << 16
      | s.charCodeAt(i + 3) << 24;
     h = caml_hash_mix_int(h, w);
    }
    w = 0;
    switch(len & 3){
      case 3:
       w = s.charCodeAt(i + 2) << 16;
      case 2:
       w |= s.charCodeAt(i + 1) << 8;
      case 1:
       w |= s.charCodeAt(i); h = caml_hash_mix_int(h, w);
    }
    h ^= len;
    return h;
   }
   function caml_hash_mix_string(h, v){
    return caml_hash_mix_jsbytes(h, caml_jsbytes_of_string(v));
   }
   var Base_internalhash_fold_string = caml_hash_mix_string;
   function caml_get_continuation_callstack(){return [0];}
   var caml_parser_trace = 0;
   function caml_set_parser_trace(bool){
    var oldflag = caml_parser_trace;
    caml_parser_trace = bool;
    return oldflag;
   }
   function caml_list_of_js_array(a){
    var l = 0;
    for(var i = a.length - 1; i >= 0; i--){var e = a[i]; l = [0, e, l];}
    return l;
   }
   function caml_int64_of_float(x){
    if(x < 0) x = Math.ceil(x);
    return new
            MlInt64
            (x & 0xffffff,
             Math.floor(x * caml_int64_offset) & 0xffffff,
             Math.floor(x * caml_int64_offset * caml_int64_offset) & 0xffff);
   }
   function timezone_js_loader_get_offset_nanos_for(zone, instant){
    return caml_int64_of_float(zone.getOffsetNanosecondsFor(instant));
   }
   function num_digits_nat(nat, ofs, len){
    for(var i = len - 1; i >= 0; i--) if(nat.data[ofs + i] != 0) return i + 1;
    return 1;
   }
   function caml_hash_nat(x){
    var len = num_digits_nat(x, 0, x.data.length), h = 0;
    for(var i = 0; i < len; i++) h = caml_hash_mix_int(h, x.data[i]);
    return h;
   }
   function caml_call_gen(f, args){
    var
     n = f.l >= 0 ? f.l : f.l = f.length,
     argsLen = args.length,
     d = n - argsLen;
    if(d == 0)
     return f.apply(null, args);
    else if(d < 0){
     var g = f.apply(null, args.slice(0, n));
     if(typeof g !== "function") return g;
     return caml_call_gen(g, args.slice(n));
    }
    else{
     switch(d){
       case 1:
        {
         var
          g =
            function(x){
             var nargs = new Array(argsLen + 1);
             for(var i = 0; i < argsLen; i++) nargs[i] = args[i];
             nargs[argsLen] = x;
             return f.apply(null, nargs);
            };
         break;
        }
       case 2:
        {
         var
          g =
            function(x, y){
             var nargs = new Array(argsLen + 2);
             for(var i = 0; i < argsLen; i++) nargs[i] = args[i];
             nargs[argsLen] = x;
             nargs[argsLen + 1] = y;
             return f.apply(null, nargs);
            };
         break;
        }
       default:
        var
         g =
           function(){
            var
             extra_args = arguments.length == 0 ? 1 : arguments.length,
             nargs = new Array(args.length + extra_args);
            for(var i = 0; i < args.length; i++) nargs[i] = args[i];
            for(var i = 0; i < arguments.length; i++)
             nargs[args.length + i] = arguments[i];
            return caml_call_gen(f, nargs);
           };
     }
     g.l = d;
     return g;
    }
   }
   var caml_callback = caml_call_gen;
   function caml_js_wrap_callback_arguments(f){
    return function(){
     var len = arguments.length, args = new Array(len);
     for(var i = 0; i < len; i++) args[i] = arguments[i];
     return caml_callback(f, [args]);};
   }
   function caml_sys_chdir(dir){
    var root = resolve_fs_device(dir);
    if(root.device.exists(root.rest)){
     if(root.rest)
      caml_current_dir = caml_trailing_slash(root.path + root.rest);
     else
      caml_current_dir = root.path;
     return 0;
    }
    else
     caml_raise_no_such_file(caml_jsbytes_of_string(dir));
   }
   function caml_obj_update_tag(b, o, n){
    if(b[0] == o){b[0] = n; return 1;}
    return 0;
   }
   function caml_lazy_update_to_forcing(o){
    return o instanceof Array && o[0] == o[0] >>> 0
            && caml_obj_update_tag(o, 246, 244)
            ? 0
            : 1;
   }
   function caml_gc_counters(){return [254, 0, 0, 0];}
   function caml_gr_synchronize(){
    caml_failwith("caml_gr_synchronize not Implemented");
   }
   function caml_bigstring_blit_string_to_ba(str1, pos1, ba2, pos2, len){
    if(12 != ba2.kind)
     caml_invalid_argument("caml_bigstring_blit_string_to_ba: kind mismatch");
    if(len == 0) return 0;
    var ofs2 = ba2.offset(pos2);
    if(pos1 + len > caml_ml_string_length(str1)) caml_array_bound_error();
    if(ofs2 + len > ba2.data.length) caml_array_bound_error();
    var slice = caml_uint8_array_of_string(str1).slice(pos1, pos1 + len);
    ba2.data.set(slice, ofs2);
    return 0;
   }
   function bigstringaf_blit_from_bytes(src, src_off, dst, dst_off, len){
    return caml_bigstring_blit_string_to_ba(src, src_off, dst, dst_off, len);
   }
   function caml_unix_closedir(dir_handle){
    try{dir_handle.pointer.closeSync();}
    catch(e){
     var unix_error = caml_named_value("Unix.Unix_error");
     caml_raise_with_args
      (unix_error, make_unix_err_args("EBADF", "closedir", dir_handle.path));
    }
   }
   function caml_unix_opendir(path){
    var root = resolve_fs_device(path);
    if(! root.device.opendir)
     caml_failwith("caml_unix_opendir: not implemented");
    var dir_handle = root.device.opendir(root.rest, true);
    return {pointer: dir_handle, path: path};
   }
   function caml_unix_rewinddir(dir_handle){
    caml_unix_closedir(dir_handle);
    var new_dir_handle = caml_unix_opendir(dir_handle.path);
    dir_handle.pointer = new_dir_handle.pointer;
    return 0;
   }
   function caml_raise_end_of_file(){
    caml_raise_constant(caml_global_data.End_of_file);
   }
   function caml_unix_readdir(dir_handle){
    var entry;
    try{entry = dir_handle.pointer.readSync();}
    catch(e){
     var unix_error = caml_named_value("Unix.Unix_error");
     caml_raise_with_args
      (unix_error, make_unix_err_args("EBADF", "readdir", dir_handle.path));
    }
    if(entry === null)
     caml_raise_end_of_file();
    else
     return caml_string_of_jsstring(entry.name);
   }
   function caml_unix_findfirst(path){
    var path_js = caml_jsstring_of_string(path);
    path_js = path_js.replace(/(^|[\\\/])\*\.\*$/, "");
    path = caml_string_of_jsstring(path_js);
    var
     dir_handle = caml_unix_opendir(path),
     first_entry = caml_unix_readdir(dir_handle);
    return [0, first_entry, dir_handle];
   }
   function caml_is_continuation_tag(t){return t == 245 ? 1 : 0;}
   var log2_ok = Math.log2 && Math.log2(1.1235582092889474E+307) == 1020;
   function jsoo_floor_log2(x){
    if(log2_ok) return Math.floor(Math.log2(x));
    var i = 0;
    if(x == 0) return - Infinity;
    if(x >= 1) while(x >= 2){x /= 2; i++;} else while(x < 1){x *= 2; i--;}
    return i;
   }
   function caml_int32_bits_of_float(x){
    var float32a = new Float32Array(1);
    float32a[0] = x;
    var int32a = new Int32Array(float32a.buffer);
    return int32a[0] | 0;
   }
   function caml_int64_create_lo_mi_hi(lo, mi, hi){return new MlInt64(lo, mi, hi);
   }
   function caml_int64_bits_of_float(x){
    if(! isFinite(x)){
     if(isNaN(x)) return caml_int64_create_lo_mi_hi(1, 0, 0x7ff0);
     return x > 0
             ? caml_int64_create_lo_mi_hi(0, 0, 0x7ff0)
             : caml_int64_create_lo_mi_hi(0, 0, 0xfff0);
    }
    var sign = x == 0 && 1 / x == - Infinity ? 0x8000 : x >= 0 ? 0 : 0x8000;
    if(sign) x = - x;
    var exp = jsoo_floor_log2(x) + 1023;
    if(exp <= 0){
     exp = 0;
     x /= Math.pow(2, - 1026);
    }
    else{
     x /= Math.pow(2, exp - 1027);
     if(x < 16){x *= 2; exp -= 1;}
     if(exp == 0) x /= 2;
    }
    var k = Math.pow(2, 24), r3 = x | 0;
    x = (x - r3) * k;
    var r2 = x | 0;
    x = (x - r2) * k;
    var r1 = x | 0;
    r3 = r3 & 0xf | sign | exp << 4;
    return caml_int64_create_lo_mi_hi(r1, r2, r3);
   }
   function caml_ba_serialize(writer, ba, sz){
    writer.write(32, ba.dims.length);
    writer.write(32, ba.kind | ba.layout << 8);
    if(ba.caml_custom == "_bigarr02")
     for(var i = 0; i < ba.dims.length; i++)
      if(ba.dims[i] < 0xffff)
       writer.write(16, ba.dims[i]);
      else{
       writer.write(16, 0xffff);
       writer.write(32, 0);
       writer.write(32, ba.dims[i]);
      }
    else
     for(var i = 0; i < ba.dims.length; i++) writer.write(32, ba.dims[i]);
    switch(ba.kind){
      case 2:
      case 3:
      case 12:
       for(var i = 0; i < ba.data.length; i++) writer.write(8, ba.data[i]);
       break;
      case 4:
      case 5:
       for(var i = 0; i < ba.data.length; i++) writer.write(16, ba.data[i]);
       break;
      case 6:
       for(var i = 0; i < ba.data.length; i++) writer.write(32, ba.data[i]);
       break;
      case 8:
      case 9:
       writer.write(8, 0);
       for(var i = 0; i < ba.data.length; i++) writer.write(32, ba.data[i]);
       break;
      case 7:
       for(var i = 0; i < ba.data.length / 2; i++){
        var b = caml_int64_to_bytes(ba.get(i));
        for(var j = 0; j < 8; j++) writer.write(8, b[j]);
       }
       break;
      case 1:
       for(var i = 0; i < ba.data.length; i++){
        var b = caml_int64_to_bytes(caml_int64_bits_of_float(ba.get(i)));
        for(var j = 0; j < 8; j++) writer.write(8, b[j]);
       }
       break;
      case 0:
       for(var i = 0; i < ba.data.length; i++){
        var b = caml_int32_bits_of_float(ba.get(i));
        writer.write(32, b);
       }
       break;
      case 10:
       for(var i = 0; i < ba.data.length / 2; i++){
        var j = ba.get(i);
        writer.write(32, caml_int32_bits_of_float(j[1]));
        writer.write(32, caml_int32_bits_of_float(j[2]));
       }
       break;
      case 11:
       for(var i = 0; i < ba.data.length / 2; i++){
        var
         complex = ba.get(i),
         b = caml_int64_to_bytes(caml_int64_bits_of_float(complex[1]));
        for(var j = 0; j < 8; j++) writer.write(8, b[j]);
        var b = caml_int64_to_bytes(caml_int64_bits_of_float(complex[2]));
        for(var j = 0; j < 8; j++) writer.write(8, b[j]);
       }
       break;
    }
    sz[0] = (4 + ba.dims.length) * 4;
    sz[1] = (4 + ba.dims.length) * 8;
   }
   function caml_ba_get_size_per_element(kind){
    switch(kind){case 7:case 10:case 11: return 2;default: return 1;
    }
   }
   function caml_ba_create_buffer(kind, size){
    var view;
    switch(kind){
      case 0:
       view = Float32Array; break;
      case 1:
       view = Float64Array; break;
      case 2:
       view = Int8Array; break;
      case 3:
       view = Uint8Array; break;
      case 4:
       view = Int16Array; break;
      case 5:
       view = Uint16Array; break;
      case 6:
       view = Int32Array; break;
      case 7:
       view = Int32Array; break;
      case 8:
       view = Int32Array; break;
      case 9:
       view = Int32Array; break;
      case 10:
       view = Float32Array; break;
      case 11:
       view = Float64Array; break;
      case 12:
       view = Uint8Array; break;
    }
    if(! view) caml_invalid_argument("Bigarray.create: unsupported kind");
    var data = new view(size * caml_ba_get_size_per_element(kind));
    return data;
   }
   function caml_int32_float_of_bits(x){
    var int32a = new Int32Array(1);
    int32a[0] = x;
    var float32a = new Float32Array(int32a.buffer);
    return float32a[0];
   }
   function caml_int64_float_of_bits(x){
    var lo = x.lo, mi = x.mi, hi = x.hi, exp = (hi & 0x7fff) >> 4;
    if(exp == 2047)
     return (lo | mi | hi & 0xf) == 0
             ? hi & 0x8000 ? - Infinity : Infinity
             : NaN;
    var k = Math.pow(2, - 24), res = (lo * k + mi) * k + (hi & 0xf);
    if(exp > 0){
     res += 16;
     res *= Math.pow(2, exp - 1027);
    }
    else
     res *= Math.pow(2, - 1026);
    if(hi & 0x8000) res = - res;
    return res;
   }
   function caml_ba_get_size(dims){
    var n_dims = dims.length, size = 1;
    for(var i = 0; i < n_dims; i++){
     if(dims[i] < 0)
      caml_invalid_argument("Bigarray.create: negative dimension");
     size = size * dims[i];
    }
    return size;
   }
   function caml_int64_create_lo_hi(lo, hi){
    return new
            MlInt64
            (lo & 0xffffff,
             lo >>> 24 & 0xff | (hi & 0xffff) << 8,
             hi >>> 16 & 0xffff);
   }
   function caml_int64_hi32(v){return v.hi32();}
   function caml_int64_lo32(v){return v.lo32();}
   var caml_ba_custom_name = "_bigarr02";
   function Ml_Bigarray(kind, layout, dims, buffer){
    this.kind = kind;
    this.layout = layout;
    this.dims = dims;
    this.data = buffer;
   }
   Ml_Bigarray.prototype.caml_custom = caml_ba_custom_name;
   Ml_Bigarray.prototype.offset =
    function(arg){
     var ofs = 0;
     if(typeof arg === "number") arg = [arg];
     if(! (arg instanceof Array))
      caml_invalid_argument("bigarray.js: invalid offset");
     if(this.dims.length != arg.length)
      caml_invalid_argument("Bigarray.get/set: bad number of dimensions");
     if(this.layout == 0)
      for(var i = 0; i < this.dims.length; i++){
       if(arg[i] < 0 || arg[i] >= this.dims[i]) caml_array_bound_error();
       ofs = ofs * this.dims[i] + arg[i];
      }
     else
      for(var i = this.dims.length - 1; i >= 0; i--){
       if(arg[i] < 1 || arg[i] > this.dims[i]) caml_array_bound_error();
       ofs = ofs * this.dims[i] + (arg[i] - 1);
      }
     return ofs;
    };
   Ml_Bigarray.prototype.get =
    function(ofs){
     switch(this.kind){
       case 7:
        var l = this.data[ofs * 2 + 0], h = this.data[ofs * 2 + 1];
        return caml_int64_create_lo_hi(l, h);
       case 10:
       case 11:
        var r = this.data[ofs * 2 + 0], i = this.data[ofs * 2 + 1];
        return [254, r, i];
       default: return this.data[ofs];
     }
    };
   Ml_Bigarray.prototype.set =
    function(ofs, v){
     switch(this.kind){
       case 7:
        this.data[ofs * 2 + 0] = caml_int64_lo32(v);
        this.data[ofs * 2 + 1] = caml_int64_hi32(v);
        break;
       case 10:
       case 11:
        this.data[ofs * 2 + 0] = v[1]; this.data[ofs * 2 + 1] = v[2]; break;
       default: this.data[ofs] = v; break;
     }
     return 0;
    };
   Ml_Bigarray.prototype.fill =
    function(v){
     switch(this.kind){
       case 7:
        var a = caml_int64_lo32(v), b = caml_int64_hi32(v);
        if(a == b)
         this.data.fill(a);
        else
         for(var i = 0; i < this.data.length; i++)
          this.data[i] = i % 2 == 0 ? a : b;
        break;
       case 10:
       case 11:
        var im = v[1], re = v[2];
        if(im == re)
         this.data.fill(im);
        else
         for(var i = 0; i < this.data.length; i++)
          this.data[i] = i % 2 == 0 ? im : re;
        break;
       default: this.data.fill(v); break;
     }
    };
   Ml_Bigarray.prototype.compare =
    function(b, total){
     if(this.layout != b.layout || this.kind != b.kind){
      var k1 = this.kind | this.layout << 8, k2 = b.kind | b.layout << 8;
      return k2 - k1;
     }
     if(this.dims.length != b.dims.length)
      return b.dims.length - this.dims.length;
     for(var i = 0; i < this.dims.length; i++)
      if(this.dims[i] != b.dims[i]) return this.dims[i] < b.dims[i] ? - 1 : 1;
     switch(this.kind){
       case 0:
       case 1:
       case 10:
       case 11:
        var x, y;
        for(var i = 0; i < this.data.length; i++){
         x = this.data[i];
         y = b.data[i];
         if(x < y) return - 1;
         if(x > y) return 1;
         if(x != y){
          if(! total) return NaN;
          if(x == x) return 1;
          if(y == y) return - 1;
         }
        }
        break;
       case 7:
        for(var i = 0; i < this.data.length; i += 2){
         if(this.data[i + 1] < b.data[i + 1]) return - 1;
         if(this.data[i + 1] > b.data[i + 1]) return 1;
         if(this.data[i] >>> 0 < b.data[i] >>> 0) return - 1;
         if(this.data[i] >>> 0 > b.data[i] >>> 0) return 1;
        }
        break;
       case 2:
       case 3:
       case 4:
       case 5:
       case 6:
       case 8:
       case 9:
       case 12:
        for(var i = 0; i < this.data.length; i++){
         if(this.data[i] < b.data[i]) return - 1;
         if(this.data[i] > b.data[i]) return 1;
        }
        break;
     }
     return 0;
    };
   function Ml_Bigarray_c_1_1(kind, layout, dims, buffer){
    this.kind = kind;
    this.layout = layout;
    this.dims = dims;
    this.data = buffer;
   }
   Ml_Bigarray_c_1_1.prototype = new Ml_Bigarray();
   Ml_Bigarray_c_1_1.prototype.offset =
    function(arg){
     if(typeof arg !== "number")
      if(arg instanceof Array && arg.length == 1)
       arg = arg[0];
      else
       caml_invalid_argument("Ml_Bigarray_c_1_1.offset");
     if(arg < 0 || arg >= this.dims[0]) caml_array_bound_error();
     return arg;
    };
   Ml_Bigarray_c_1_1.prototype.get = function(ofs){return this.data[ofs];};
   Ml_Bigarray_c_1_1.prototype.set =
    function(ofs, v){this.data[ofs] = v; return 0;};
   Ml_Bigarray_c_1_1.prototype.fill =
    function(v){this.data.fill(v); return 0;};
   function caml_ba_create_unsafe(kind, layout, dims, data){
    var size_per_element = caml_ba_get_size_per_element(kind);
    if(caml_ba_get_size(dims) * size_per_element != data.length)
     caml_invalid_argument("length doesn't match dims");
    if(layout == 0 && dims.length == 1 && size_per_element == 1)
     return new Ml_Bigarray_c_1_1(kind, layout, dims, data);
    return new Ml_Bigarray(kind, layout, dims, data);
   }
   function caml_ba_deserialize(reader, sz, name){
    var num_dims = reader.read32s();
    if(num_dims < 0 || num_dims > 16)
     caml_failwith("input_value: wrong number of bigarray dimensions");
    var
     tag = reader.read32s(),
     kind = tag & 0xff,
     layout = tag >> 8 & 1,
     dims = [];
    if(name == "_bigarr02")
     for(var i = 0; i < num_dims; i++){
      var size_dim = reader.read16u();
      if(size_dim == 0xffff){
       var size_dim_hi = reader.read32u(), size_dim_lo = reader.read32u();
       if(size_dim_hi != 0)
        caml_failwith("input_value: bigarray dimension overflow in 32bit");
       size_dim = size_dim_lo;
      }
      dims.push(size_dim);
     }
    else
     for(var i = 0; i < num_dims; i++) dims.push(reader.read32u());
    var
     size = caml_ba_get_size(dims),
     data = caml_ba_create_buffer(kind, size),
     ba = caml_ba_create_unsafe(kind, layout, dims, data);
    switch(kind){
      case 2:
       for(var i = 0; i < size; i++) data[i] = reader.read8s(); break;
      case 3:
      case 12:
       for(var i = 0; i < size; i++) data[i] = reader.read8u(); break;
      case 4:
       for(var i = 0; i < size; i++) data[i] = reader.read16s(); break;
      case 5:
       for(var i = 0; i < size; i++) data[i] = reader.read16u(); break;
      case 6:
       for(var i = 0; i < size; i++) data[i] = reader.read32s(); break;
      case 8:
      case 9:
       var sixty = reader.read8u();
       if(sixty)
        caml_failwith
         ("input_value: cannot read bigarray with 64-bit OCaml ints");
       for(var i = 0; i < size; i++) data[i] = reader.read32s();
       break;
      case 7:
       var t = new Array(8);
       for(var i = 0; i < size; i++){
        for(var j = 0; j < 8; j++) t[j] = reader.read8u();
        var int64 = caml_int64_of_bytes(t);
        ba.set(i, int64);
       }
       break;
      case 1:
       var t = new Array(8);
       for(var i = 0; i < size; i++){
        for(var j = 0; j < 8; j++) t[j] = reader.read8u();
        var f = caml_int64_float_of_bits(caml_int64_of_bytes(t));
        ba.set(i, f);
       }
       break;
      case 0:
       for(var i = 0; i < size; i++){
        var f = caml_int32_float_of_bits(reader.read32s());
        ba.set(i, f);
       }
       break;
      case 10:
       for(var i = 0; i < size; i++){
        var
         re = caml_int32_float_of_bits(reader.read32s()),
         im = caml_int32_float_of_bits(reader.read32s());
        ba.set(i, [254, re, im]);
       }
       break;
      case 11:
       var t = new Array(8);
       for(var i = 0; i < size; i++){
        for(var j = 0; j < 8; j++) t[j] = reader.read8u();
        var re = caml_int64_float_of_bits(caml_int64_of_bytes(t));
        for(var j = 0; j < 8; j++) t[j] = reader.read8u();
        var im = caml_int64_float_of_bits(caml_int64_of_bytes(t));
        ba.set(i, [254, re, im]);
       }
       break;
    }
    sz[0] = (4 + num_dims) * 4;
    return caml_ba_create_unsafe(kind, layout, dims, data);
   }
   function caml_ba_compare(a, b, total){return a.compare(b, total);}
   function caml_hash_mix_int64(h, v){
    h = caml_hash_mix_int(h, caml_int64_lo32(v));
    h = caml_hash_mix_int(h, caml_int64_hi32(v));
    return h;
   }
   function caml_hash_mix_float(h, v0){
    return caml_hash_mix_int64(h, caml_int64_bits_of_float(v0));
   }
   function caml_ba_hash(ba){
    var num_elts = caml_ba_get_size(ba.dims), h = 0;
    switch(ba.kind){
      case 2:
      case 3:
      case 12:
       if(num_elts > 256) num_elts = 256;
       var w = 0, i = 0;
       for(i = 0; i + 4 <= ba.data.length; i += 4){
        w =
         ba.data[i + 0] | ba.data[i + 1] << 8 | ba.data[i + 2] << 16
         | ba.data[i + 3] << 24;
        h = caml_hash_mix_int(h, w);
       }
       w = 0;
       switch(num_elts & 3){
         case 3:
          w = ba.data[i + 2] << 16;
         case 2:
          w |= ba.data[i + 1] << 8;
         case 1:
          w |= ba.data[i + 0]; h = caml_hash_mix_int(h, w);
       }
       break;
      case 4:
      case 5:
       if(num_elts > 128) num_elts = 128;
       var w = 0, i = 0;
       for(i = 0; i + 2 <= ba.data.length; i += 2){
        w = ba.data[i + 0] | ba.data[i + 1] << 16;
        h = caml_hash_mix_int(h, w);
       }
       if((num_elts & 1) != 0) h = caml_hash_mix_int(h, ba.data[i]);
       break;
      case 6:
       if(num_elts > 64) num_elts = 64;
       for(var i = 0; i < num_elts; i++) h = caml_hash_mix_int(h, ba.data[i]);
       break;
      case 8:
      case 9:
       if(num_elts > 64) num_elts = 64;
       for(var i = 0; i < num_elts; i++) h = caml_hash_mix_int(h, ba.data[i]);
       break;
      case 7:
       if(num_elts > 32) num_elts = 32;
       num_elts *= 2;
       for(var i = 0; i < num_elts; i++) h = caml_hash_mix_int(h, ba.data[i]);
       break;
      case 10:
       num_elts *= 2;
      case 0:
       if(num_elts > 64) num_elts = 64;
       for(var i = 0; i < num_elts; i++)
        h = caml_hash_mix_float(h, ba.data[i]);
       break;
      case 11:
       num_elts *= 2;
      case 1:
       if(num_elts > 32) num_elts = 32;
       for(var i = 0; i < num_elts; i++)
        h = caml_hash_mix_float(h, ba.data[i]);
       break;
    }
    return h;
   }
   function caml_int32_unmarshal(reader, size){size[0] = 4; return reader.read32s();
   }
   function caml_nativeint_unmarshal(reader, size){
    switch(reader.read8u()){
      case 1:
       size[0] = 4; return reader.read32s();
      case 2:
       caml_failwith("input_value: native integer value too large");
      default: caml_failwith("input_value: ill-formed native integer");
    }
   }
   function caml_int64_unmarshal(reader, size){
    var t = new Array(8);
    for(var j = 0; j < 8; j++) t[j] = reader.read8u();
    size[0] = 8;
    return caml_int64_of_bytes(t);
   }
   function caml_int64_compare(x, y, total){return x.compare(y);}
   function caml_int64_hash(v){return v.lo32() ^ v.hi32();}
   var
    caml_custom_ops =
      {"_j":
       {deserialize: caml_int64_unmarshal,
        serialize: caml_int64_marshal,
        fixed_length: 8,
        compare: caml_int64_compare,
        hash: caml_int64_hash},
       "_i": {deserialize: caml_int32_unmarshal, fixed_length: 4},
       "_n": {deserialize: caml_nativeint_unmarshal, fixed_length: 4},
       "_bigarray":
       {deserialize:
        function(reader, sz){
         return caml_ba_deserialize(reader, sz, "_bigarray");
        },
        serialize: caml_ba_serialize,
        compare: caml_ba_compare,
        hash: caml_ba_hash},
       "_bigarr02":
       {deserialize:
        function(reader, sz){
         return caml_ba_deserialize(reader, sz, "_bigarr02");
        },
        serialize: caml_ba_serialize,
        compare: caml_ba_compare,
        hash: caml_ba_hash}};
   function caml_compare_val_get_custom(a){
    return caml_custom_ops[a.caml_custom]
           && caml_custom_ops[a.caml_custom].compare;
   }
   function caml_compare_val_number_custom(num, custom, swap, total){
    var comp = caml_compare_val_get_custom(custom);
    if(comp){
     var x = swap > 0 ? comp(custom, num, total) : comp(num, custom, total);
     if(total && x != x) return swap;
     if(+ x != + x) return + x;
     if((x | 0) != 0) return x | 0;
    }
    return swap;
   }
   function caml_compare_val_tag(a){
    if(typeof a === "number")
     return 1000;
    else if(caml_is_ml_bytes(a))
     return 252;
    else if(caml_is_ml_string(a))
     return 1252;
    else if(a instanceof Array && a[0] === a[0] >>> 0 && a[0] <= 255){var tag = a[0] | 0; return tag == 254 ? 0 : tag;}
    else if(a instanceof String)
     return 12520;
    else if(typeof a == "string")
     return 12520;
    else if(a instanceof Number)
     return 1000;
    else if(a && a.caml_custom)
     return 1255;
    else if(a && a.compare)
     return 1256;
    else if(typeof a == "function")
     return 1247;
    else if(typeof a == "symbol") return 1251;
    return 1001;
   }
   function caml_string_compare(s1, s2){
    return s1 < s2 ? - 1 : s1 > s2 ? 1 : 0;
   }
   function caml_bytes_compare(s1, s2){
    s1.t & 6 && caml_convert_string_to_bytes(s1);
    s2.t & 6 && caml_convert_string_to_bytes(s2);
    return s1.c < s2.c ? - 1 : s1.c > s2.c ? 1 : 0;
   }
   function caml_compare_val(a, b, total){
    var stack = [];
    for(;;){
     if(! (total && a === b)){
      var tag_a = caml_compare_val_tag(a);
      if(tag_a == 250){a = a[1]; continue;}
      var tag_b = caml_compare_val_tag(b);
      if(tag_b == 250){b = b[1]; continue;}
      if(tag_a !== tag_b){
       if(tag_a == 1000){
        if(tag_b == 1255)
         return caml_compare_val_number_custom(a, b, - 1, total);
        return - 1;
       }
       if(tag_b == 1000){
        if(tag_a == 1255)
         return caml_compare_val_number_custom(b, a, 1, total);
        return 1;
       }
       return tag_a < tag_b ? - 1 : 1;
      }
      switch(tag_a){
        case 247:
         caml_invalid_argument("compare: functional value"); break;
        case 248:
         var x = caml_int_compare(a[2], b[2]); if(x != 0) return x | 0; break;
        case 249:
         caml_invalid_argument("compare: functional value"); break;
        case 250:
         caml_invalid_argument("equal: got Forward_tag, should not happen");
         break;
        case 251:
         caml_invalid_argument("equal: abstract value"); break;
        case 252:
         if(a !== b){
          var x = caml_bytes_compare(a, b);
          if(x != 0) return x | 0;
         }
         break;
        case 253:
         caml_invalid_argument("equal: got Double_tag, should not happen");
         break;
        case 254:
         caml_invalid_argument
          ("equal: got Double_array_tag, should not happen");
         break;
        case 255:
         caml_invalid_argument("equal: got Custom_tag, should not happen");
         break;
        case 1247:
         caml_invalid_argument("compare: functional value"); break;
        case 1255:
         var comp = caml_compare_val_get_custom(a);
         if(comp != caml_compare_val_get_custom(b))
          return a.caml_custom < b.caml_custom ? - 1 : 1;
         if(! comp) caml_invalid_argument("compare: abstract value");
         var x = comp(a, b, total);
         if(x != x) return total ? - 1 : x;
         if(x !== (x | 0)) return - 1;
         if(x != 0) return x | 0;
         break;
        case 1256:
         var x = a.compare(b, total);
         if(x != x) return total ? - 1 : x;
         if(x !== (x | 0)) return - 1;
         if(x != 0) return x | 0;
         break;
        case 1000:
         a = + a;
         b = + b;
         if(a < b) return - 1;
         if(a > b) return 1;
         if(a != b){
          if(! total) return NaN;
          if(a == a) return 1;
          if(b == b) return - 1;
         }
         break;
        case 1001:
         if(a < b) return - 1;
         if(a > b) return 1;
         if(a != b){
          if(! total) return NaN;
          if(a == a) return 1;
          if(b == b) return - 1;
         }
         break;
        case 1251:
         if(a !== b){if(! total) return NaN; return 1;} break;
        case 1252:
         var a = caml_jsbytes_of_string(a), b = caml_jsbytes_of_string(b);
         if(a !== b){if(a < b) return - 1; if(a > b) return 1;}
         break;
        case 12520:
         var a = a.toString(), b = b.toString();
         if(a !== b){if(a < b) return - 1; if(a > b) return 1;}
         break;
        case 246:
        case 254:
        default:
         if(caml_is_continuation_tag(tag_a)){
          caml_invalid_argument("compare: continuation value");
          break;
         }
         if(a.length != b.length) return a.length < b.length ? - 1 : 1;
         if(a.length > 1) stack.push(a, b, 1);
         break;
      }
     }
     if(stack.length == 0) return 0;
     var i = stack.pop();
     b = stack.pop();
     a = stack.pop();
     if(i + 1 < a.length) stack.push(a, b, i + 1);
     a = a[i];
     b = b[i];
    }
   }
   function caml_greaterthan(x, y){
    return + (caml_compare_val(x, y, false) > 0);
   }
   function div_helper(a, b, c){
    var
     x = a * 65536 + (b >>> 16),
     y = Math.floor(x / c) * 65536,
     z = x % c * 65536,
     w = z + (b & 0x0000FFFF);
    return [y + Math.floor(w / c), w % c];
   }
   function div_digit_nat(natq, ofsq, natr, ofsr, nat1, ofs1, len, nat2, ofs2){
    var rem = nat1.data[ofs1 + len - 1] >>> 0;
    for(var i = len - 2; i >= 0; i--){
     var
      x = div_helper(rem, nat1.data[ofs1 + i] >>> 0, nat2.data[ofs2] >>> 0);
     natq.data[ofsq + i] = x[0];
     rem = x[1];
    }
    natr.data[ofsr] = rem;
    return 0;
   }
   function num_leading_zero_bits_in_digit(nat, ofs){
    var a = nat.data[ofs], b = 0;
    if(a & 0xFFFF0000){b += 16; a >>>= 16;}
    if(a & 0xFF00){b += 8; a >>>= 8;}
    if(a & 0xF0){b += 4; a >>>= 4;}
    if(a & 12){b += 2; a >>>= 2;}
    if(a & 2){b += 1; a >>>= 1;}
    if(a & 1) b += 1;
    return 32 - b;
   }
   function shift_left_nat(nat1, ofs1, len1, nat2, ofs2, nbits){
    if(nbits == 0){nat2.data[ofs2] = 0; return 0;}
    var wrap = 0;
    for(var i = 0; i < len1; i++){
     var a = nat1.data[ofs1 + i] >>> 0;
     nat1.data[ofs1 + i] = a << nbits | wrap;
     wrap = a >>> 32 - nbits;
    }
    nat2.data[ofs2] = wrap;
    return 0;
   }
   function MlNat(x){
    this.data = new Int32Array(x);
    this.length = this.data.length + 2;
   }
   MlNat.prototype.caml_custom = "_nat";
   function create_nat(size){
    var arr = new MlNat(size);
    for(var i = 0; i < size; i++) arr.data[i] = - 1;
    return arr;
   }
   function set_to_zero_nat(nat, ofs, len){
    for(var i = 0; i < len; i++) nat.data[ofs + i] = 0;
    return 0;
   }
   function incr_nat(nat, ofs, len, carry_in){
    var carry = carry_in;
    for(var i = 0; i < len; i++){
     var x = (nat.data[ofs + i] >>> 0) + carry;
     nat.data[ofs + i] = x | 0;
     if(x == x >>> 0){carry = 0; break;} else carry = 1;
    }
    return carry;
   }
   function add_nat(nat1, ofs1, len1, nat2, ofs2, len2, carry_in){
    var carry = carry_in;
    for(var i = 0; i < len2; i++){
     var
      x = (nat1.data[ofs1 + i] >>> 0) + (nat2.data[ofs2 + i] >>> 0) + carry;
     nat1.data[ofs1 + i] = x;
     if(x == x >>> 0) carry = 0; else carry = 1;
    }
    return incr_nat(nat1, ofs1 + len2, len1 - len2, carry);
   }
   function nat_of_array(l){return new MlNat(l);}
   function mult_digit_nat(nat1, ofs1, len1, nat2, ofs2, len2, nat3, ofs3){
    var carry = 0, a = nat3.data[ofs3] >>> 0;
    for(var i = 0; i < len2; i++){
     var
      x1 =
        (nat1.data[ofs1 + i] >>> 0)
        + (nat2.data[ofs2 + i] >>> 0) * (a & 0x0000FFFF)
        + carry,
      x2 = (nat2.data[ofs2 + i] >>> 0) * (a >>> 16);
     carry = Math.floor(x2 / 65536);
     var x3 = x1 + x2 % 65536 * 65536;
     nat1.data[ofs1 + i] = x3;
     carry += Math.floor(x3 / 4294967296);
    }
    return len2 < len1 && carry
            ? add_nat
              (nat1, ofs1 + len2, len1 - len2, nat_of_array([carry]), 0, 1, 0)
            : carry;
   }
   function decr_nat(nat, ofs, len, carry_in){
    var borrow = carry_in == 1 ? 0 : 1;
    for(var i = 0; i < len; i++){
     var x = (nat.data[ofs + i] >>> 0) - borrow;
     nat.data[ofs + i] = x;
     if(x >= 0){borrow = 0; break;} else borrow = 1;
    }
    return borrow == 1 ? 0 : 1;
   }
   function sub_nat(nat1, ofs1, len1, nat2, ofs2, len2, carry_in){
    var borrow = carry_in == 1 ? 0 : 1;
    for(var i = 0; i < len2; i++){
     var
      x = (nat1.data[ofs1 + i] >>> 0) - (nat2.data[ofs2 + i] >>> 0) - borrow;
     nat1.data[ofs1 + i] = x;
     if(x >= 0) borrow = 0; else borrow = 1;
    }
    return decr_nat(nat1, ofs1 + len2, len1 - len2, borrow == 1 ? 0 : 1);
   }
   function compare_nat(nat1, ofs1, len1, nat2, ofs2, len2){
    var
     a = num_digits_nat(nat1, ofs1, len1),
     b = num_digits_nat(nat2, ofs2, len2);
    if(a > b) return 1;
    if(a < b) return - 1;
    for(var i = len1 - 1; i >= 0; i--){
     if(nat1.data[ofs1 + i] >>> 0 > nat2.data[ofs2 + i] >>> 0) return 1;
     if(nat1.data[ofs1 + i] >>> 0 < nat2.data[ofs2 + i] >>> 0) return - 1;
    }
    return 0;
   }
   function div_nat(nat1, ofs1, len1, nat2, ofs2, len2){
    if(len2 == 1){
     div_digit_nat(nat1, ofs1 + 1, nat1, ofs1, nat1, ofs1, len1, nat2, ofs2);
     return 0;
    }
    var s = num_leading_zero_bits_in_digit(nat2, ofs2 + len2 - 1);
    shift_left_nat(nat2, ofs2, len2, nat_of_array([0]), 0, s);
    shift_left_nat(nat1, ofs1, len1, nat_of_array([0]), 0, s);
    var d = (nat2.data[ofs2 + len2 - 1] >>> 0) + 1, a = create_nat(len2 + 1);
    for(var i = len1 - 1; i >= len2; i--){
     var
      quo =
        d == 4294967296
         ? nat1.data[ofs1 + i] >>> 0
         : div_helper
            (nat1.data[ofs1 + i] >>> 0, nat1.data[ofs1 + i - 1] >>> 0, d)
           [0];
     set_to_zero_nat(a, 0, len2 + 1);
     mult_digit_nat(a, 0, len2 + 1, nat2, ofs2, len2, nat_of_array([quo]), 0);
     sub_nat(nat1, ofs1 + i - len2, len2 + 1, a, 0, len2 + 1, 1);
     while
     (nat1.data[ofs1 + i] != 0
      || compare_nat(nat1, ofs1 + i - len2, len2, nat2, ofs2, len2) >= 0){
      quo = quo + 1;
      sub_nat(nat1, ofs1 + i - len2, len2 + 1, nat2, ofs2, len2, 1);
     }
     nat1.data[ofs1 + i] = quo;
    }
    shift_right_nat(nat1, ofs1, len2, nat_of_array([0]), 0, s);
    shift_right_nat(nat2, ofs2, len2, nat_of_array([0]), 0, s);
    return 0;
   }
   function caml_ba_blit(src, dst){
    if(dst.dims.length != src.dims.length)
     caml_invalid_argument("Bigarray.blit: dimension mismatch");
    for(var i = 0; i < dst.dims.length; i++)
     if(dst.dims[i] != src.dims[i])
      caml_invalid_argument("Bigarray.blit: dimension mismatch");
    dst.data.set(src.data);
    return 0;
   }
   function is_digit_int(nat, ofs){if(nat.data[ofs] >= 0) return 1; return 0;}
   function caml_int64_div(x, y){return x.div(y);}
   function bigstring_find(bs, chr, pos, len){
    while(len > 0){
     if(caml_ba_get_1(bs, pos) == chr) return pos;
     pos++;
     len--;
    }
    return - 1;
   }
   function caml_js_html_entities(s){
    var entity = /^&#?[0-9a-zA-Z]+;$/;
    if(s.match(entity)){
     var str, temp = document.createElement("p");
     temp.innerHTML = s;
     str = temp.textContent || temp.innerText;
     temp = null;
     return str;
    }
    else
     caml_failwith("Invalid entity " + s);
   }
   function caml_string_unsafe_set(s, i, c){
    caml_failwith("caml_string_unsafe_set");
   }
   function caml_ml_channel_size_64(chanid){
    var chan = caml_ml_channels[chanid];
    return caml_int64_of_float(chan.file.length());
   }
   function caml_ba_set_2(ba, i0, i1, v){
    ba.set(ba.offset([i0, i1]), v);
    return 0;
   }
   var
    caml_argv =
      function(){
        var process = globalThis.process, main = "a.out", args = [];
        if(process && process.argv && process.argv.length > 1){
         var argv = process.argv;
         main = argv[1];
         args = argv.slice(2);
        }
        var p = caml_string_of_jsstring(main), args2 = [0, p];
        for(var i = 0; i < args.length; i++)
         args2.push(caml_string_of_jsstring(args[i]));
        return args2;
       }
       (),
    caml_executable_name = caml_argv[1];
   function caml_js_eval_string(s){return eval(caml_jsstring_of_string(s));}
   function serialize_nat(writer, nat, sz){
    var len = nat.data.length;
    writer.write(32, len);
    for(var i = 0; i < len; i++) writer.write(32, nat.data[i]);
    sz[0] = len * 4;
    sz[1] = len * 8;
   }
   function caml_memprof_set(_control){return 0;}
   function caml_sys_exit(code){
    if(globalThis.quit) globalThis.quit(code);
    if(globalThis.process && globalThis.process.exit)
     globalThis.process.exit(code);
    caml_invalid_argument("Function 'exit' not implemented");
   }
   function caml_channel_descriptor(chanid){
    var chan = caml_ml_channels[chanid];
    return chan.fd;
   }
   function caml_js_from_array(a){return a.slice(1);}
   function caml_ba_reshape(ba, vind){
    vind = caml_js_from_array(vind);
    var new_dim = [], num_dims = vind.length;
    if(num_dims < 0 || num_dims > 16)
     caml_invalid_argument("Bigarray.reshape: bad number of dimensions");
    var num_elts = 1;
    for(var i = 0; i < num_dims; i++){
     new_dim[i] = vind[i];
     if(new_dim[i] < 0)
      caml_invalid_argument("Bigarray.reshape: negative dimension");
     num_elts = num_elts * new_dim[i];
    }
    var size = caml_ba_get_size(ba.dims);
    if(num_elts != size)
     caml_invalid_argument("Bigarray.reshape: size mismatch");
    return caml_ba_create_unsafe(ba.kind, ba.layout, new_dim, ba.data);
   }
   var caml_oo_last_id = 0;
   function caml_set_oo_id(b){b[2] = caml_oo_last_id++; return b;}
   function caml_gr_fill_rect(x, y, w, h){
    var s = caml_gr_state_get();
    s.context.fillRect(x, s.height - y, w, - h);
    return 0;
   }
   function caml_gr_set_window_title(name){
    var s = caml_gr_state_get();
    s.title = name;
    var jsname = caml_jsstring_of_string(name);
    if(s.set_title) s.set_title(jsname);
    return 0;
   }
   function caml_get_global_data(){return caml_global_data;}
   function caml_int64_shift_right_unsigned(x, s){return x.shift_right_unsigned(s);
   }
   function caml_ba_uint8_get16(ba, i0){
    var ofs = ba.offset(i0);
    if(ofs + 1 >= ba.data.length) caml_array_bound_error();
    var b1 = ba.get(ofs), b2 = ba.get(ofs + 1);
    return b1 | b2 << 8;
   }
   function bigstring_is_mmapped_stub(x){return 0;}
   function caml_check_bound(array, index){
    if(index >>> 0 >= array.length - 1) caml_array_bound_error();
    return array;
   }
   function caml_check_bound_bigstring(bigstring, i){
    if(i >>> 0 >= bigstring.data.length) caml_array_bound_error();
   }
   function bin_prot_blit_buf_float_array_stub
   (src_pos, src, dst_pos, dst, len){
    if(len == 0) return 0;
    caml_check_bound(dst, dst_pos);
    caml_check_bound(dst, dst_pos + len - 1);
    caml_check_bound_bigstring(src, src_pos);
    caml_check_bound_bigstring(src, src_pos + len * 8 - 1);
    var
     view = new joo_global_object.Float64Array(len),
     buffer = new joo_global_object.Uint8Array(view.buffer);
    buffer.set(src.data.subarray(src_pos, src_pos + len * 8));
    for(var i = 0; i < len; i++) dst[dst_pos + i + 1] = view[i];
    return 0;
   }
   function caml_compare(a, b){return caml_compare_val(a, b, true);}
   var
    caml_MD5Transform =
      function(){
        function add(x, y){return x + y | 0;}
        function xx(q, a, b, x, s, t){
         a = add(add(a, q), add(x, t));
         return add(a << s | a >>> 32 - s, b);
        }
        function ff(a, b, c, d, x, s, t){
         return xx(b & c | ~ b & d, a, b, x, s, t);
        }
        function gg(a, b, c, d, x, s, t){
         return xx(b & d | c & ~ d, a, b, x, s, t);
        }
        function hh(a, b, c, d, x, s, t){return xx(b ^ c ^ d, a, b, x, s, t);}
        function ii(a, b, c, d, x, s, t){
         return xx(c ^ (b | ~ d), a, b, x, s, t);
        }
        return function(w, buffer){
         var a = w[0], b = w[1], c = w[2], d = w[3];
         a = ff(a, b, c, d, buffer[0], 7, 0xD76AA478);
         d = ff(d, a, b, c, buffer[1], 12, 0xE8C7B756);
         c = ff(c, d, a, b, buffer[2], 17, 0x242070DB);
         b = ff(b, c, d, a, buffer[3], 22, 0xC1BDCEEE);
         a = ff(a, b, c, d, buffer[4], 7, 0xF57C0FAF);
         d = ff(d, a, b, c, buffer[5], 12, 0x4787C62A);
         c = ff(c, d, a, b, buffer[6], 17, 0xA8304613);
         b = ff(b, c, d, a, buffer[7], 22, 0xFD469501);
         a = ff(a, b, c, d, buffer[8], 7, 0x698098D8);
         d = ff(d, a, b, c, buffer[9], 12, 0x8B44F7AF);
         c = ff(c, d, a, b, buffer[10], 17, 0xFFFF5BB1);
         b = ff(b, c, d, a, buffer[11], 22, 0x895CD7BE);
         a = ff(a, b, c, d, buffer[12], 7, 0x6B901122);
         d = ff(d, a, b, c, buffer[13], 12, 0xFD987193);
         c = ff(c, d, a, b, buffer[14], 17, 0xA679438E);
         b = ff(b, c, d, a, buffer[15], 22, 0x49B40821);
         a = gg(a, b, c, d, buffer[1], 5, 0xF61E2562);
         d = gg(d, a, b, c, buffer[6], 9, 0xC040B340);
         c = gg(c, d, a, b, buffer[11], 14, 0x265E5A51);
         b = gg(b, c, d, a, buffer[0], 20, 0xE9B6C7AA);
         a = gg(a, b, c, d, buffer[5], 5, 0xD62F105D);
         d = gg(d, a, b, c, buffer[10], 9, 0x02441453);
         c = gg(c, d, a, b, buffer[15], 14, 0xD8A1E681);
         b = gg(b, c, d, a, buffer[4], 20, 0xE7D3FBC8);
         a = gg(a, b, c, d, buffer[9], 5, 0x21E1CDE6);
         d = gg(d, a, b, c, buffer[14], 9, 0xC33707D6);
         c = gg(c, d, a, b, buffer[3], 14, 0xF4D50D87);
         b = gg(b, c, d, a, buffer[8], 20, 0x455A14ED);
         a = gg(a, b, c, d, buffer[13], 5, 0xA9E3E905);
         d = gg(d, a, b, c, buffer[2], 9, 0xFCEFA3F8);
         c = gg(c, d, a, b, buffer[7], 14, 0x676F02D9);
         b = gg(b, c, d, a, buffer[12], 20, 0x8D2A4C8A);
         a = hh(a, b, c, d, buffer[5], 4, 0xFFFA3942);
         d = hh(d, a, b, c, buffer[8], 11, 0x8771F681);
         c = hh(c, d, a, b, buffer[11], 16, 0x6D9D6122);
         b = hh(b, c, d, a, buffer[14], 23, 0xFDE5380C);
         a = hh(a, b, c, d, buffer[1], 4, 0xA4BEEA44);
         d = hh(d, a, b, c, buffer[4], 11, 0x4BDECFA9);
         c = hh(c, d, a, b, buffer[7], 16, 0xF6BB4B60);
         b = hh(b, c, d, a, buffer[10], 23, 0xBEBFBC70);
         a = hh(a, b, c, d, buffer[13], 4, 0x289B7EC6);
         d = hh(d, a, b, c, buffer[0], 11, 0xEAA127FA);
         c = hh(c, d, a, b, buffer[3], 16, 0xD4EF3085);
         b = hh(b, c, d, a, buffer[6], 23, 0x04881D05);
         a = hh(a, b, c, d, buffer[9], 4, 0xD9D4D039);
         d = hh(d, a, b, c, buffer[12], 11, 0xE6DB99E5);
         c = hh(c, d, a, b, buffer[15], 16, 0x1FA27CF8);
         b = hh(b, c, d, a, buffer[2], 23, 0xC4AC5665);
         a = ii(a, b, c, d, buffer[0], 6, 0xF4292244);
         d = ii(d, a, b, c, buffer[7], 10, 0x432AFF97);
         c = ii(c, d, a, b, buffer[14], 15, 0xAB9423A7);
         b = ii(b, c, d, a, buffer[5], 21, 0xFC93A039);
         a = ii(a, b, c, d, buffer[12], 6, 0x655B59C3);
         d = ii(d, a, b, c, buffer[3], 10, 0x8F0CCC92);
         c = ii(c, d, a, b, buffer[10], 15, 0xFFEFF47D);
         b = ii(b, c, d, a, buffer[1], 21, 0x85845DD1);
         a = ii(a, b, c, d, buffer[8], 6, 0x6FA87E4F);
         d = ii(d, a, b, c, buffer[15], 10, 0xFE2CE6E0);
         c = ii(c, d, a, b, buffer[6], 15, 0xA3014314);
         b = ii(b, c, d, a, buffer[13], 21, 0x4E0811A1);
         a = ii(a, b, c, d, buffer[4], 6, 0xF7537E82);
         d = ii(d, a, b, c, buffer[11], 10, 0xBD3AF235);
         c = ii(c, d, a, b, buffer[2], 15, 0x2AD7D2BB);
         b = ii(b, c, d, a, buffer[9], 21, 0xEB86D391);
         w[0] = add(a, w[0]);
         w[1] = add(b, w[1]);
         w[2] = add(c, w[2]);
         w[3] = add(d, w[3]);};
       }
       ();
   function caml_MD5Update(ctx, input, input_len){
    var in_buf = ctx.len & 0x3f, input_pos = 0;
    ctx.len += input_len;
    if(in_buf){
     var missing = 64 - in_buf;
     if(input_len < missing){
      ctx.b8.set(input.subarray(0, input_len), in_buf);
      return;
     }
     ctx.b8.set(input.subarray(0, missing), in_buf);
     caml_MD5Transform(ctx.w, ctx.b32);
     input_len -= missing;
     input_pos += missing;
    }
    while(input_len >= 64){
     ctx.b8.set(input.subarray(input_pos, input_pos + 64), 0);
     caml_MD5Transform(ctx.w, ctx.b32);
     input_len -= 64;
     input_pos += 64;
    }
    if(input_len)
     ctx.b8.set(input.subarray(input_pos, input_pos + input_len), 0);
   }
   function caml_runtime_events_read_poll(cursor, callbacks, num){return 0;}
   function caml_fresh_oo_id(){return caml_oo_last_id++;}
   function caml_int64_to_float(x){return x.toFloat();}
   var ppx_expect_runtime_saved_stderr, ppx_expect_runtime_saved_stdout;
   function ppx_expect_runtime_before_test(voutput, vstdout, vstderr){
    ppx_expect_runtime_saved_stderr = caml_ml_channels[vstderr];
    ppx_expect_runtime_saved_stdout = caml_ml_channels[vstdout];
    var output = caml_ml_channels[voutput];
    caml_ml_channels[vstdout] = output;
    caml_ml_channels[vstderr] = output;
    return 0;
   }
   function caml_bigstring_memcmp(s1, pos1, s2, pos2, len){
    for(var i = 0; i < len; i++){
     var a = caml_ba_get_1(s1, pos1 + i), b = caml_ba_get_1(s2, pos2 + i);
     if(a < b) return - 1;
     if(a > b) return 1;
    }
    return 0;
   }
   function caml_new_string(s){return caml_string_of_jsbytes(s);}
   function caml_erf_float(x){
    var
     a1 = 0.254829592,
     a2 = - 0.284496736,
     a3 = 1.421413741,
     a4 = - 1.453152027,
     a5 = 1.061405429,
     p = 0.3275911,
     sign = 1;
    if(x < 0) sign = - 1;
    x = Math.abs(x);
    var
     t = 1.0 / (1.0 + p * x),
     y =
       1.0
       -
        ((((a5 * t + a4) * t + a3) * t + a2) * t + a1) * t
        * Math.exp(- (x * x));
    return sign * y;
   }
   function caml_ba_uint8_get32(ba, i0){
    var ofs = ba.offset(i0);
    if(ofs + 3 >= ba.data.length) caml_array_bound_error();
    var
     b1 = ba.get(ofs + 0),
     b2 = ba.get(ofs + 1),
     b3 = ba.get(ofs + 2),
     b4 = ba.get(ofs + 3);
    return b1 << 0 | b2 << 8 | b3 << 16 | b4 << 24;
   }
   function caml_raw_backtrace_length(){return 0;}
   function caml_str_initialize(unit){return 0;}
   function caml_obj_block(tag, size){
    var o = new Array(size + 1);
    o[0] = tag;
    for(var i = 1; i <= size; i++) o[i] = 0;
    return o;
   }
   function caml_gr_clear_graph(){
    var s = caml_gr_state_get();
    s.canvas.width = s.width;
    s.canvas.height = s.height;
    return 0;
   }
   function bigstring_to_array_buffer(bs){return bs.data.buffer;}
   function caml_sys_const_naked_pointers_checked(_unit){return 0;}
   function lxor_digit_nat(nat1, ofs1, nat2, ofs2){nat1.data[ofs1] ^= nat2.data[ofs2]; return 0;
   }
   function caml_obj_add_offset(v, offset){
    caml_failwith("Obj.add_offset is not supported");
   }
   function caml_final_release(){return 0;}
   var caml_marshal_header_size = 16;
   function caml_js_to_array(a){
    var len = a.length, b = new Array(len + 1);
    b[0] = 0;
    for(var i = 0; i < len; i++) b[i + 1] = a[i];
    return b;
   }
   function caml_sys_is_regular_file(name){
    var root = resolve_fs_device(name);
    return root.device.isFile(root.rest);
   }
   function caml_gr_plot(x, y){
    var
     s = caml_gr_state_get(),
     im = s.context.createImageData(1, 1),
     d = im.data,
     color = s.color;
    d[0] = color >> 16 & 0xff;
    d[1] = color >> 8 & 0xff, d[2] = color >> 0 & 0xff;
    d[3] = 0xFF;
    s.x = x;
    s.y = y;
    s.context.putImageData(im, x, s.height - y);
    return 0;
   }
   function caml_bytes_set64(s, i, i64){
    if(i >>> 0 >= s.l - 7) caml_bytes_bound_error();
    var a = caml_int64_to_bytes(i64);
    for(var j = 0; j < 8; j++) caml_bytes_unsafe_set(s, i + 7 - j, a[j]);
    return 0;
   }
   function caml_string_set16(s, i, i16){caml_failwith("caml_string_set16");}
   function caml_int64_bswap(x){
    var y = caml_int64_to_bytes(x);
    return caml_int64_of_bytes
            ([y[7], y[6], y[5], y[4], y[3], y[2], y[1], y[0]]);
   }
   function caml_gc_major(unit){
    if(typeof globalThis.gc == "function") globalThis.gc();
    return 0;
   }
   function caml_lex_array(s){
    s = caml_jsbytes_of_string(s);
    var l = s.length / 2, a = new Array(l);
    for(var i = 0; i < l; i++)
     a[i] = (s.charCodeAt(2 * i) | s.charCodeAt(2 * i + 1) << 8) << 16 >> 16;
    return a;
   }
   function caml_lex_engine(tbl, start_state, lexbuf){
    var
     lex_buffer = 2,
     lex_buffer_len = 3,
     lex_start_pos = 5,
     lex_curr_pos = 6,
     lex_last_pos = 7,
     lex_last_action = 8,
     lex_eof_reached = 9,
     lex_base = 1,
     lex_backtrk = 2,
     lex_default = 3,
     lex_trans = 4,
     lex_check = 5;
    if(! tbl.lex_default){
     tbl.lex_base = caml_lex_array(tbl[lex_base]);
     tbl.lex_backtrk = caml_lex_array(tbl[lex_backtrk]);
     tbl.lex_check = caml_lex_array(tbl[lex_check]);
     tbl.lex_trans = caml_lex_array(tbl[lex_trans]);
     tbl.lex_default = caml_lex_array(tbl[lex_default]);
    }
    var
     c,
     state = start_state,
     buffer = caml_uint8_array_of_bytes(lexbuf[lex_buffer]);
    if(state >= 0){
     lexbuf[lex_last_pos] = lexbuf[lex_start_pos] = lexbuf[lex_curr_pos];
     lexbuf[lex_last_action] = - 1;
    }
    else
     state = - state - 1;
    for(;;){
     var base = tbl.lex_base[state];
     if(base < 0) return - base - 1;
     var backtrk = tbl.lex_backtrk[state];
     if(backtrk >= 0){
      lexbuf[lex_last_pos] = lexbuf[lex_curr_pos];
      lexbuf[lex_last_action] = backtrk;
     }
     if(lexbuf[lex_curr_pos] >= lexbuf[lex_buffer_len])
      if(lexbuf[lex_eof_reached] == 0) return - state - 1; else c = 256;
     else{c = buffer[lexbuf[lex_curr_pos]]; lexbuf[lex_curr_pos]++;}
     if(tbl.lex_check[base + c] == state)
      state = tbl.lex_trans[base + c];
     else
      state = tbl.lex_default[state];
     if(state < 0){
      lexbuf[lex_curr_pos] = lexbuf[lex_last_pos];
      if(lexbuf[lex_last_action] == - 1)
       caml_failwith("lexing: empty token");
      else
       return lexbuf[lex_last_action];
     }
     else if(c == 256) lexbuf[lex_eof_reached] = 0;
    }
   }
   function caml_sys_file_exists(name){
    var root = resolve_fs_device(name);
    return root.device.exists(root.rest);
   }
   function caml_convert_raw_backtrace_slot(){
    caml_failwith("caml_convert_raw_backtrace_slot");
   }
   function caml_array_sub(a, i, len){
    var a2 = new Array(len + 1);
    a2[0] = 0;
    for(var i2 = 1, i1 = i + 1; i2 <= len; i2++, i1++) a2[i2] = a[i1];
    return a2;
   }
   function caml_bytes_equal(s1, s2){
    if(s1 === s2) return 1;
    s1.t & 6 && caml_convert_string_to_bytes(s1);
    s2.t & 6 && caml_convert_string_to_bytes(s2);
    return s1.c == s2.c ? 1 : 0;
   }
   function caml_gr_size_x(){var s = caml_gr_state_get(); return s.width;}
   function Base_int_math_int32_clz(x){
    var n = 32, y;
    y = x >> 16;
    if(y != 0){n = n - 16; x = y;}
    y = x >> 8;
    if(y != 0){n = n - 8; x = y;}
    y = x >> 4;
    if(y != 0){n = n - 4; x = y;}
    y = x >> 2;
    if(y != 0){n = n - 2; x = y;}
    y = x >> 1;
    if(y != 0) return n - 2;
    return n - x;
   }
   function caml_ml_debug_info_status(){return 0;}
   function should_use_timezone_js_loader
   (yes, _platform_not_supported, disabled){
    return globalThis.DISABLE_TIMEZONE_JS_LOADER === undefined
            ? yes
            : disabled;
   }
   function caml_atomic_fetch_add(ref, i){
    var old = ref[1];
    ref[1] += i;
    return old;
   }
   var
    os_type =
      globalThis.process && globalThis.process.platform
       && globalThis.process.platform == "win32"
       ? "Cygwin"
       : "Unix";
   function caml_sys_const_ostype_cygwin(){return os_type == "Cygwin" ? 1 : 0;
   }
   function caml_cosh_float(x){return Math.cosh(x);}
   function MlMutex(){this.locked = false;}
   function caml_ml_mutex_new(unit){return new MlMutex();}
   var caml_ephe_key_offset = 3;
   function caml_ephe_check_key(x, i){
    var weak = x[caml_ephe_key_offset + i];
    if(globalThis.WeakRef && weak instanceof globalThis.WeakRef)
     weak = weak.deref();
    return weak === undefined ? 0 : 1;
   }
   function caml_hash_mix_final(h){
    h ^= h >>> 16;
    h = caml_mul(h, 0x85ebca6b | 0);
    h ^= h >>> 13;
    h = caml_mul(h, 0xc2b2ae35 | 0);
    h ^= h >>> 16;
    return h;
   }
   function caml_gr_text_size(txt){
    var
     s = caml_gr_state_get(),
     w = s.context.measureText(caml_jsstring_of_string(txt)).width;
    return [0, w, s.text_size];
   }
   function caml_lex_run_mem(s, i, mem, curr_pos){
    for(;;){
     var dst = s.charCodeAt(i);
     i++;
     if(dst == 0xff) return;
     var src = s.charCodeAt(i);
     i++;
     if(src == 0xff)
      mem[dst + 1] = curr_pos;
     else
      mem[dst + 1] = mem[src + 1];
    }
   }
   function caml_lex_run_tag(s, i, mem){
    for(;;){
     var dst = s.charCodeAt(i);
     i++;
     if(dst == 0xff) return;
     var src = s.charCodeAt(i);
     i++;
     if(src == 0xff) mem[dst + 1] = - 1; else mem[dst + 1] = mem[src + 1];
    }
   }
   function caml_new_lex_engine(tbl, start_state, lexbuf){
    var
     lex_buffer = 2,
     lex_buffer_len = 3,
     lex_start_pos = 5,
     lex_curr_pos = 6,
     lex_last_pos = 7,
     lex_last_action = 8,
     lex_eof_reached = 9,
     lex_mem = 10,
     lex_base = 1,
     lex_backtrk = 2,
     lex_default = 3,
     lex_trans = 4,
     lex_check = 5,
     lex_base_code = 6,
     lex_backtrk_code = 7,
     lex_default_code = 8,
     lex_trans_code = 9,
     lex_check_code = 10,
     lex_code = 11;
    if(! tbl.lex_default){
     tbl.lex_base = caml_lex_array(tbl[lex_base]);
     tbl.lex_backtrk = caml_lex_array(tbl[lex_backtrk]);
     tbl.lex_check = caml_lex_array(tbl[lex_check]);
     tbl.lex_trans = caml_lex_array(tbl[lex_trans]);
     tbl.lex_default = caml_lex_array(tbl[lex_default]);
    }
    if(! tbl.lex_default_code){
     tbl.lex_base_code = caml_lex_array(tbl[lex_base_code]);
     tbl.lex_backtrk_code = caml_lex_array(tbl[lex_backtrk_code]);
     tbl.lex_check_code = caml_lex_array(tbl[lex_check_code]);
     tbl.lex_trans_code = caml_lex_array(tbl[lex_trans_code]);
     tbl.lex_default_code = caml_lex_array(tbl[lex_default_code]);
    }
    if(tbl.lex_code == null)
     tbl.lex_code = caml_jsbytes_of_string(tbl[lex_code]);
    var
     c,
     state = start_state,
     buffer = caml_uint8_array_of_bytes(lexbuf[lex_buffer]);
    if(state >= 0){
     lexbuf[lex_last_pos] = lexbuf[lex_start_pos] = lexbuf[lex_curr_pos];
     lexbuf[lex_last_action] = - 1;
    }
    else
     state = - state - 1;
    for(;;){
     var base = tbl.lex_base[state];
     if(base < 0){
      var pc_off = tbl.lex_base_code[state];
      caml_lex_run_tag(tbl.lex_code, pc_off, lexbuf[lex_mem]);
      return - base - 1;
     }
     var backtrk = tbl.lex_backtrk[state];
     if(backtrk >= 0){
      var pc_off = tbl.lex_backtrk_code[state];
      caml_lex_run_tag(tbl.lex_code, pc_off, lexbuf[lex_mem]);
      lexbuf[lex_last_pos] = lexbuf[lex_curr_pos];
      lexbuf[lex_last_action] = backtrk;
     }
     if(lexbuf[lex_curr_pos] >= lexbuf[lex_buffer_len])
      if(lexbuf[lex_eof_reached] == 0) return - state - 1; else c = 256;
     else{c = buffer[lexbuf[lex_curr_pos]]; lexbuf[lex_curr_pos]++;}
     var pstate = state;
     if(tbl.lex_check[base + c] == state)
      state = tbl.lex_trans[base + c];
     else
      state = tbl.lex_default[state];
     if(state < 0){
      lexbuf[lex_curr_pos] = lexbuf[lex_last_pos];
      if(lexbuf[lex_last_action] == - 1)
       caml_failwith("lexing: empty token");
      else
       return lexbuf[lex_last_action];
     }
     else{
      var base_code = tbl.lex_base_code[pstate], pc_off;
      if(tbl.lex_check_code[base_code + c] == pstate)
       pc_off = tbl.lex_trans_code[base_code + c];
      else
       pc_off = tbl.lex_default_code[pstate];
      if(pc_off > 0)
       caml_lex_run_mem
        (tbl.lex_code, pc_off, lexbuf[lex_mem], lexbuf[lex_curr_pos]);
      if(c == 256) lexbuf[lex_eof_reached] = 0;
     }
    }
   }
   function caml_ba_uint8_set64(ba, i0, v){
    var ofs = ba.offset(i0);
    if(ofs + 7 >= ba.data.length) caml_array_bound_error();
    var v = caml_int64_to_bytes(v);
    for(var i = 0; i < 8; i++) ba.set(ofs + i, v[7 - i]);
    return 0;
   }
   function caml_sys_executable_name(a){return caml_executable_name;}
   function caml_lessequal(x, y){
    return + (caml_compare_val(x, y, false) <= 0);
   }
   function caml_acosh_float(x){return Math.acosh(x);}
   function caml_MD5Init(){
    var
     buffer = new ArrayBuffer(64),
     b32 = new Uint32Array(buffer),
     b8 = new Uint8Array(buffer);
    return {len: 0,
            w:
            new Uint32Array([0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476]),
            b32: b32,
            b8: b8};
   }
   function caml_ml_flush(chanid){
    var chan = caml_ml_channels[chanid];
    if(! chan.opened) caml_raise_sys_error("Cannot flush a closed channel");
    if(! chan.buffer || chan.buffer_curr == 0) return 0;
    if(chan.output)
     chan.output(caml_subarray_to_jsbytes(chan.buffer, 0, chan.buffer_curr));
    else
     chan.file.write(chan.offset, chan.buffer, 0, chan.buffer_curr);
    chan.offset += chan.buffer_curr;
    chan.buffer_curr = 0;
    return 0;
   }
   function caml_seek_out(chanid, pos){
    caml_ml_flush(chanid);
    var chan = caml_ml_channels[chanid];
    chan.offset = pos;
    return 0;
   }
   function caml_ml_seek_out_64(chanid, pos){
    var pos = caml_int64_to_float(pos);
    return caml_seek_out(chanid, pos);
   }
   function compare_nat_real(nat1, nat2){
    return compare_nat(nat1, 0, nat1.data.length, nat2, 0, nat2.data.length);
   }
   function caml_gc_set(_control){return 0;}
   function caml_js_get(o, f){return o[f];}
   function caml_unix_isatty(fileDescriptor){
    if(fs_node_supported()){
     var tty = require("tty");
     return tty.isatty(fileDescriptor) ? 1 : 0;
    }
    else
     return 0;
   }
   function caml_ml_set_buffered(chanid, v){
    caml_ml_channels[chanid].buffered = v;
    if(! v) caml_ml_flush(chanid);
    return 0;
   }
   function caml_hash_mix_bytes_arr(h, s){
    var len = s.length, i, w;
    for(i = 0; i + 4 <= len; i += 4){
     w = s[i] | s[i + 1] << 8 | s[i + 2] << 16 | s[i + 3] << 24;
     h = caml_hash_mix_int(h, w);
    }
    w = 0;
    switch(len & 3){
      case 3:
       w = s[i + 2] << 16;
      case 2:
       w |= s[i + 1] << 8;
      case 1:
       w |= s[i]; h = caml_hash_mix_int(h, w);
    }
    h ^= len;
    return h;
   }
   function caml_ml_bytes_content(s){
    switch(s.t & 6){
      default: caml_convert_string_to_bytes(s);
      case 0:
       return s.c;
      case 4:
       return s.c;
    }
   }
   function caml_hash_mix_bytes(h, v){
    var content = caml_ml_bytes_content(v);
    return typeof content === "string"
            ? caml_hash_mix_jsbytes(h, content)
            : caml_hash_mix_bytes_arr(h, content);
   }
   function caml_hash(count, limit, seed, obj){
    var queue, rd, wr, sz, num, h, v, i, len;
    sz = limit;
    if(sz < 0 || sz > 256) sz = 256;
    num = count;
    h = seed;
    queue = [obj];
    rd = 0;
    wr = 1;
    while(rd < wr && num > 0){
     v = queue[rd++];
     if(v && v.caml_custom){
      if
       (caml_custom_ops[v.caml_custom] && caml_custom_ops[v.caml_custom].hash){
       var hh = caml_custom_ops[v.caml_custom].hash(v);
       h = caml_hash_mix_int(h, hh);
       num--;
      }
     }
     else if(v instanceof Array && v[0] === (v[0] | 0))
      switch(v[0]){
        case 248:
         h = caml_hash_mix_int(h, v[2]); num--; break;
        case 250:
         queue[--rd] = v[1]; break;
        default:
         if(caml_is_continuation_tag(v[0])) break;
         var tag = v.length - 1 << 10 | v[0];
         h = caml_hash_mix_int(h, tag);
         for(i = 1, len = v.length; i < len; i++){if(wr >= sz) break; queue[wr++] = v[i];
         }
         break;
      }
     else if(caml_is_ml_bytes(v)){
      h = caml_hash_mix_bytes(h, v);
      num--;
     }
     else if(caml_is_ml_string(v)){
      h = caml_hash_mix_string(h, v);
      num--;
     }
     else if(typeof v === "string"){
      h = caml_hash_mix_jsbytes(h, v);
      num--;
     }
     else if(v === (v | 0)){
      h = caml_hash_mix_int(h, v + v + 1);
      num--;
     }
     else if(typeof v === "number"){h = caml_hash_mix_float(h, v); num--;}
    }
    h = caml_hash_mix_final(h);
    return h & 0x3FFFFFFF;
   }
   function Base_hash_string(s){return caml_hash(1, 1, 0, s);}
   function caml_gc_compaction(){return 0;}
   function bin_prot_blit_float_array_buf_stub
   (src_pos, src, dst_pos, dst, len){
    if(len == 0) return 0;
    caml_check_bound(src, src_pos);
    caml_check_bound(src, src_pos + len - 1);
    caml_check_bound_bigstring(dst, dst_pos);
    caml_check_bound_bigstring(dst, dst_pos + len * 8 - 1);
    src_pos = src_pos + 1;
    var
     float64 =
       new joo_global_object.Float64Array(src.slice(src_pos, src_pos + len)),
     float64_uint8 = new joo_global_object.Uint8Array(float64.buffer),
     view = dst.data.subarray(dst_pos, dst_pos + len * 8);
    view.set(float64_uint8);
    return 0;
   }
   function caml_sys_open_for_node(fd, flags){
    if(flags.name)
     try{
      var fs = require("fs"), fd2 = fs.openSync(flags.name, "rs");
      return new MlNodeFd(fd2, flags);
     }
     catch(e){}
    return new MlNodeFd(fd, flags);
   }
   var caml_sys_fds = new Array(3);
   function MlFakeFd_out(fd, flags){
    MlFakeFile.call(this, caml_create_bytes(0));
    this.log = function(s){return 0;};
    if(fd == 1 && typeof console.log == "function")
     this.log = console.log;
    else if(fd == 2 && typeof console.error == "function")
     this.log = console.error;
    else if(typeof console.log == "function") this.log = console.log;
    this.flags = flags;
   }
   MlFakeFd_out.prototype.length = function(){return 0;};
   MlFakeFd_out.prototype.write =
    function(offset, buf, pos, len){
     if(this.log){
      if
       (len > 0 && pos >= 0 && pos + len <= buf.length
        && buf[pos + len - 1] == 10)
       len--;
      var src = caml_create_bytes(len);
      caml_blit_bytes(caml_bytes_of_array(buf), pos, src, 0, len);
      this.log(src.toUtf16());
      return 0;
     }
     caml_raise_sys_error(this.fd + ": file descriptor already closed");
    };
   MlFakeFd_out.prototype.read =
    function(offset, buf, pos, len){
     caml_raise_sys_error(this.fd + ": file descriptor is write only");
    };
   MlFakeFd_out.prototype.close = function(){this.log = undefined;};
   function caml_sys_open_internal(file, idx){
    if(idx == undefined) idx = caml_sys_fds.length;
    caml_sys_fds[idx] = file;
    return idx | 0;
   }
   function caml_sys_open(name, flags, _perms){
    var f = {};
    while(flags){
     switch(flags[1]){
       case 0:
        f.rdonly = 1; break;
       case 1:
        f.wronly = 1; break;
       case 2:
        f.append = 1; break;
       case 3:
        f.create = 1; break;
       case 4:
        f.truncate = 1; break;
       case 5:
        f.excl = 1; break;
       case 6:
        f.binary = 1; break;
       case 7:
        f.text = 1; break;
       case 8:
        f.nonblock = 1; break;
     }
     flags = flags[2];
    }
    if(f.rdonly && f.wronly)
     caml_raise_sys_error
      (caml_jsbytes_of_string(name)
       + " : flags Open_rdonly and Open_wronly are not compatible");
    if(f.text && f.binary)
     caml_raise_sys_error
      (caml_jsbytes_of_string(name)
       + " : flags Open_text and Open_binary are not compatible");
    var root = resolve_fs_device(name), file = root.device.open(root.rest, f);
    return caml_sys_open_internal(file, undefined);
   }
   (function(){
      function file(fd, flags){
       return fs_node_supported()
               ? caml_sys_open_for_node(fd, flags)
               : new MlFakeFd_out(fd, flags);
      }
      caml_sys_open_internal
       (file(0, {rdonly: 1, altname: "/dev/stdin", isCharacterDevice: true}),
        0);
      caml_sys_open_internal
       (file(1, {buffered: 2, wronly: 1, isCharacterDevice: true}), 1);
      caml_sys_open_internal
       (file(2, {buffered: 2, wronly: 1, isCharacterDevice: true}), 2);
     }
     ());
   function caml_ml_open_descriptor_in(fd){
    var file = caml_sys_fds[fd];
    if(file.flags.wronly) caml_raise_sys_error("fd " + fd + " is writeonly");
    var
     refill = null,
     channel =
       {file: file,
        offset: file.flags.append ? file.length() : 0,
        fd: fd,
        opened: true,
        out: false,
        buffer_curr: 0,
        buffer_max: 0,
        buffer: new Uint8Array(65536),
        refill: refill};
    caml_ml_channels[channel.fd] = channel;
    return channel.fd;
   }
   function caml_MD5Final(ctx){
    var in_buf = ctx.len & 0x3f;
    ctx.b8[in_buf] = 0x80;
    in_buf++;
    if(in_buf > 56){
     for(var j = in_buf; j < 64; j++) ctx.b8[j] = 0;
     caml_MD5Transform(ctx.w, ctx.b32);
     for(var j = 0; j < 56; j++) ctx.b8[j] = 0;
    }
    else
     for(var j = in_buf; j < 56; j++) ctx.b8[j] = 0;
    ctx.b32[14] = ctx.len << 3;
    ctx.b32[15] = ctx.len >> 29 & 0x1FFFFFFF;
    caml_MD5Transform(ctx.w, ctx.b32);
    var t = new Uint8Array(16);
    for(var i = 0; i < 4; i++)
     for(var j = 0; j < 4; j++) t[i * 4 + j] = ctx.w[i] >> 8 * j & 0xFF;
    return t;
   }
   function caml_string_of_array(a){
    return caml_string_of_jsbytes(caml_subarray_to_jsbytes(a, 0, a.length));
   }
   function caml_md5_chan(chanid, toread){
    var ctx = caml_MD5Init(), buffer = new Uint8Array(4096);
    if(toread < 0)
     while(true){
      var read = caml_ml_input_block(chanid, buffer, 0, buffer.length);
      if(read == 0) break;
      caml_MD5Update(ctx, buffer.subarray(0, read), read);
     }
    else
     while(toread > 0){
      var
       read =
         caml_ml_input_block
          (chanid, buffer, 0, toread > buffer.length ? buffer.length : toread);
      if(read == 0) caml_raise_end_of_file();
      caml_MD5Update(ctx, buffer.subarray(0, read), read);
      toread -= read;
     }
    return caml_string_of_array(caml_MD5Final(ctx));
   }
   function caml_sys_close(fd){
    var file = caml_sys_fds[fd];
    if(file) file.close();
    delete caml_sys_fds[fd];
    return 0;
   }
   function caml_ml_close_channel(chanid){
    var chan = caml_ml_channels[chanid];
    chan.opened = false;
    caml_sys_close(chan.fd);
    return 0;
   }
   function core_md5_fd(fd){
    var ic = caml_ml_open_descriptor_in(fd);
    try{return caml_md5_chan(ic, - 1);}finally{caml_ml_close_channel(ic);}
   }
   function caml_ephe_get_key(x, i){
    if(i < 0 || caml_ephe_key_offset + i >= x.length)
     caml_invalid_argument("Weak.get_key");
    var weak = x[caml_ephe_key_offset + i];
    if(globalThis.WeakRef && weak instanceof globalThis.WeakRef)
     weak = weak.deref();
    return weak === undefined ? 0 : [0, weak];
   }
   function caml_unix_localtime(t){
    var
     d = new Date(t * 1000),
     d_num = d.getTime(),
     januaryfirst = new Date(d.getFullYear(), 0, 1).getTime(),
     doy = Math.floor((d_num - januaryfirst) / 86400000),
     jan = new Date(d.getFullYear(), 0, 1),
     jul = new Date(d.getFullYear(), 6, 1),
     stdTimezoneOffset =
       Math.max(jan.getTimezoneOffset(), jul.getTimezoneOffset());
    return [0,
            d.getSeconds(),
            d.getMinutes(),
            d.getHours(),
            d.getDate(),
            d.getMonth(),
            d.getFullYear() - 1900,
            d.getDay(),
            doy,
            d.getTimezoneOffset() < stdTimezoneOffset | 0];
   }
   function caml_unix_mktime(tm){
    var
     d = new Date(tm[6] + 1900, tm[5], tm[4], tm[3], tm[2], tm[1]).getTime(),
     t = Math.floor(d / 1000),
     tm2 = caml_unix_localtime(t);
    return [0, t, tm2];
   }
   function ppx_expect_runtime_out_channel_position(chan){
    var info = caml_ml_channels[chan];
    return info.offset;
   }
   function caml_bigstring_blit_bytes_to_ba(str1, pos1, ba2, pos2, len){
    if(12 != ba2.kind)
     caml_invalid_argument("caml_bigstring_blit_string_to_ba: kind mismatch");
    if(len == 0) return 0;
    var ofs2 = ba2.offset(pos2);
    if(pos1 + len > caml_ml_bytes_length(str1)) caml_array_bound_error();
    if(ofs2 + len > ba2.data.length) caml_array_bound_error();
    var slice = caml_uint8_array_of_bytes(str1).slice(pos1, pos1 + len);
    ba2.data.set(slice, ofs2);
    return 0;
   }
   function Base_int_math_int_pow_stub(base, exponent){
    var one = 1, mul = [one, base, one, one], res = one;
    while(! exponent == 0){
     mul[1] = mul[1] * mul[3] | 0;
     mul[2] = mul[1] * mul[1] | 0;
     mul[3] = mul[2] * mul[1] | 0;
     res = res * mul[exponent & 3] | 0;
     exponent = exponent >> 2;
    }
    return res;
   }
   function caml_atomic_exchange(ref, v){
    var r = ref[1];
    ref[1] = v;
    return r;
   }
   function caml_sys_isatty(_chan){return 0;}
   function is_digit_zero(nat, ofs){
    if(nat.data[ofs] == 0) return 1;
    return 0;
   }
   function caml_unix_lstat(name){
    var root = resolve_fs_device(name);
    if(! root.device.lstat) caml_failwith("caml_unix_lstat: not implemented");
    return root.device.lstat(root.rest, true);
   }
   function caml_unix_lstat_64(name){
    var r = caml_unix_lstat(name);
    r[9] = caml_int64_of_int32(r[9]);
    return r;
   }
   function caml_js_set(o, f, v){o[f] = v; return 0;}
   function caml_array_get(array, index){
    if(index < 0 || index >= array.length - 1) caml_array_bound_error();
    return array[index + 1];
   }
   function caml_continuation_use_noexc(cont){
    var stack = cont[1];
    cont[1] = 0;
    return stack;
   }
   function caml_unix_rmdir(name){
    var root = resolve_fs_device(name);
    if(! root.device.rmdir) caml_failwith("caml_unix_rmdir: not implemented");
    return root.device.rmdir(root.rest, true);
   }
   function caml_log2_float(x){return Math.log2(x);}
   function caml_gc_huge_fallback_count(unit){return 0;}
   function caml_runtime_events_resume(){return 0;}
   function bin_prot_blit_bytes_buf_stub(src_pos, src, dst_pos, dst, len){
    return caml_bigstring_blit_string_to_ba(src, src_pos, dst, dst_pos, len);
   }
   function caml_spacetime_only_works_for_native_code(){
    caml_failwith("Spacetime profiling only works for native code");
   }
   function caml_int64_sub(x, y){return x.sub(y);}
   function caml_bigstring_blit_ba_to_ba(ba1, pos1, ba2, pos2, len){
    if(12 != ba1.kind)
     caml_invalid_argument("caml_bigstring_blit_ba_to_ba: kind mismatch");
    if(12 != ba2.kind)
     caml_invalid_argument("caml_bigstring_blit_ba_to_ba: kind mismatch");
    if(len == 0) return 0;
    var ofs1 = ba1.offset(pos1), ofs2 = ba2.offset(pos2);
    if(ofs1 + len > ba1.data.length) caml_array_bound_error();
    if(ofs2 + len > ba2.data.length) caml_array_bound_error();
    var slice = ba1.data.subarray(ofs1, ofs1 + len);
    ba2.data.set(slice, pos2);
    return 0;
   }
   function bigstring_of_typed_array(ba){
    var
     ta =
       new
        Uint8Array
        (ba.buffer, ba.byteOffset, ba.length * ba.BYTES_PER_ELEMENT);
    return caml_ba_create_unsafe(12, 0, [ta.length], ta);
   }
   function bin_prot_blit_buf_stub(src_pos, src, dst_pos, dst, len){
    if(src.kind != 12) src = bigstring_of_typed_array(src.data);
    if(dst.kind != 12) dst = bigstring_of_typed_array(dst.data);
    return caml_bigstring_blit_ba_to_ba(src, src_pos, dst, dst_pos, len);
   }
   function caml_seek_in(chanid, pos){
    var chan = caml_ml_channels[chanid];
    if(chan.refill != null) caml_raise_sys_error("Illegal seek");
    if
     (pos >= chan.offset - chan.buffer_max && pos <= chan.offset
      && chan.file.flags.binary)
     chan.buffer_curr = chan.buffer_max - (chan.offset - pos);
    else{chan.offset = pos; chan.buffer_curr = 0; chan.buffer_max = 0;}
    return 0;
   }
   function caml_ml_seek_in_64(chanid, pos){
    var pos = caml_int64_to_float(pos);
    return caml_seek_in(chanid, pos);
   }
   var caml_domain_id = 0;
   function caml_ml_mutex_unlock(t){t.locked = false; return 0;}
   var caml_domain_latest_idx = 1;
   function caml_domain_spawn(f, mutex){
    var id = caml_domain_latest_idx++, old = caml_domain_id;
    caml_domain_id = id;
    var res = caml_callback(f, [0]);
    caml_domain_id = old;
    caml_ml_mutex_unlock(mutex);
    return id;
   }
   function caml_unix_mkdir(name, perm){
    var root = resolve_fs_device(name);
    if(! root.device.mkdir) caml_failwith("caml_unix_mkdir: not implemented");
    return root.device.mkdir(root.rest, perm, true);
   }
   function caml_int64_shift_left(x, s){return x.shift_left(s);}
   function caml_notequal(x, y){
    return + (caml_compare_val(x, y, false) != 0);
   }
   function caml_sys_const_int_size(){return 32;}
   function caml_js_wrap_callback(f){
    return function(){
     var len = arguments.length;
     if(len > 0){
      var args = new Array(len);
      for(var i = 0; i < len; i++) args[i] = arguments[i];
     }
     else
      args = [undefined];
     var res = caml_callback(f, args);
     return res instanceof Function ? caml_js_wrap_callback(res) : res;};
   }
   function caml_js_wrap_meth_callback(f){
    return function(){
     var len = arguments.length, args = new Array(len + 1);
     args[0] = this;
     for(var i = 0; i < len; i++) args[i + 1] = arguments[i];
     var res = caml_callback(f, args);
     return res instanceof Function ? caml_js_wrap_callback(res) : res;};
   }
   function caml_is_js(){return 1;}
   function caml_sse2_float64_min_bytecode(x, y){return x < y ? x : y;}
   var Base_internalhash_fold_float = caml_hash_mix_float;
   function caml_lazy_update_to_forward(o){
    caml_obj_update_tag(o, 244, 250);
    return 0;
   }
   function caml_ba_dim(ba, i){
    if(i < 0 || i >= ba.dims.length) caml_invalid_argument("Bigarray.dim");
    return ba.dims[i];
   }
   function caml_ba_dim_1(ba){return caml_ba_dim(ba, 0);}
   function caml_js_meth_call(o, f, args){
    return o[caml_jsstring_of_string(f)].apply(o, caml_js_from_array(args));
   }
   var caml_ephe_data_offset = 2;
   function caml_weak_create(n){
    if(n < 0) caml_invalid_argument("Weak.create");
    var x = [251, "caml_ephe_list_head"];
    x.length = caml_ephe_key_offset + n;
    return x;
   }
   function caml_ephe_create(n){var x = caml_weak_create(n); return x;}
   function bigstring_destroy_stub(v_bstr){
    if(v_bstr.hasOwnProperty("__is_deallocated"))
     caml_invalid_argument
      ("bigstring_destroy: bigstring is already deallocated");
    v_bstr.__is_deallocated = true;
    v_bstr.data = new v_bstr.data.__proto__.constructor(0);
    v_bstr.dims = [0];
    return 0;
   }
   function bigstring_realloc(bigstring, size){
    if(bigstring.hasOwnProperty("__is_deallocated"))
     caml_invalid_argument
      ("bigstring_realloc: bigstring is already deallocated");
    var new_data = new bigstring.data.__proto__.constructor(size);
    new_data.set(bigstring.data.slice(0, size));
    var
     new_bigstring =
       caml_ba_create_unsafe
        (bigstring.kind, bigstring.layout, [size], new_data);
    bigstring_destroy_stub(bigstring);
    return new_bigstring;
   }
   function ppx_expect_runtime_flush_stubs_streams(vunit){return 0;}
   function caml_js_to_byte_string(s){return caml_string_of_jsbytes(s);}
   function Base_unsafe_create_local_bytes(v_len){return caml_create_bytes(v_len);
   }
   function caml_trampoline(res){
    var c = 1;
    while(res && res.joo_tramp){
     res = res.joo_tramp.apply(null, res.joo_args);
     c++;
    }
    return res;
   }
   function caml_maybe_print_stats(unit){return 0;}
   function caml_bytes_unsafe_get(s, i){
    switch(s.t & 6){
      default: if(i >= s.c.length) return 0;
      case 0:
       return s.c.charCodeAt(i);
      case 4:
       return s.c[i];
    }
   }
   function caml_bytes_get64(s, i){
    if(i >>> 0 >= s.l - 7) caml_bytes_bound_error();
    var a = new Array(8);
    for(var j = 0; j < 8; j++) a[7 - j] = caml_bytes_unsafe_get(s, i + j);
    return caml_int64_of_bytes(a);
   }
   var caml_custom_event_index = 0;
   function caml_runtime_events_user_register
   (event_name, event_tag, event_type){
    caml_custom_event_index += 1;
    return [0, caml_custom_event_index, event_name, event_type, event_tag];
   }
   function caml_unix_has_symlink(unit){return fs_node_supported() ? 1 : 0;}
   function caml_ephe_set_key(x, i, v){
    if(i < 0 || caml_ephe_key_offset + i >= x.length)
     caml_invalid_argument("Weak.set");
    if(v instanceof Object && globalThis.WeakRef){
     if(x[1].register) x[1].register(v, undefined, v);
     x[caml_ephe_key_offset + i] = new globalThis.WeakRef(v);
    }
    else
     x[caml_ephe_key_offset + i] = v;
    return 0;
   }
   function caml_ephe_unset_key(x, i){
    if(i < 0 || caml_ephe_key_offset + i >= x.length)
     caml_invalid_argument("Weak.set");
    if
     (globalThis.WeakRef
      && x[caml_ephe_key_offset + i] instanceof globalThis.WeakRef
      && x[1].unregister){
     var old = x[caml_ephe_key_offset + i].deref();
     if(old !== undefined){
      var count = 0;
      for(var j = caml_ephe_key_offset; j < x.length; j++){
       var key = x[j];
       if(key instanceof globalThis.WeakRef){
        key = key.deref();
        if(key === old) count++;
       }
      }
      if(count == 1) x[1].unregister(old);
     }
    }
    x[caml_ephe_key_offset + i] = undefined;
    return 0;
   }
   function caml_weak_set(x, i, v){
    if(v == 0) caml_ephe_unset_key(x, i); else caml_ephe_set_key(x, i, v[1]);
    return 0;
   }
   function caml_sys_remove(name){
    var root = resolve_fs_device(name), ok = root.device.unlink(root.rest);
    if(ok == 0) caml_raise_no_such_file(caml_jsbytes_of_string(name));
    return 0;
   }
   function caml_string_bound_error(){
    caml_invalid_argument("index out of bounds");
   }
   function caml_string_get32(s, i){
    if(i >>> 0 >= caml_ml_string_length(s) - 3) caml_string_bound_error();
    var
     b1 = caml_string_unsafe_get(s, i),
     b2 = caml_string_unsafe_get(s, i + 1),
     b3 = caml_string_unsafe_get(s, i + 2),
     b4 = caml_string_unsafe_get(s, i + 3);
    return b4 << 24 | b3 << 16 | b2 << 8 | b1;
   }
   function caml_bytes_get(s, i){
    if(i >>> 0 >= s.l) caml_bytes_bound_error();
    return caml_bytes_unsafe_get(s, i);
   }
   function caml_hypot_float(x, y){return Math.hypot(x, y);}
   function caml_js_call(f, o, args){
    return f.apply(o, caml_js_from_array(args));
   }
   function caml_sys_const_max_wosize(){return 0x7FFFFFFF / 4 | 0;}
   function caml_unix_inet_addr_of_string(){return 0;}
   function ms_float_to_ns_int64(ms){
    return caml_int64_of_float(ms * (1000.0 * 1000.0));
   }
   function Base_am_testing(x){return 0;}
   function caml_bytes_lessthan(s1, s2){
    s1.t & 6 && caml_convert_string_to_bytes(s1);
    s2.t & 6 && caml_convert_string_to_bytes(s2);
    return s1.c < s2.c ? 1 : 0;
   }
   function bigstringaf_blit_to_bytes(src, src_off, dst, dst_off, len){
    return caml_bigstring_blit_ba_to_bytes(src, src_off, dst, dst_off, len);
   }
   function caml_erfc_float(x){return 1 - caml_erf_float(x);}
   function caml_gr_fill_poly(ar){
    var s = caml_gr_state_get();
    s.context.beginPath();
    s.context.moveTo(ar[1][1], s.height - ar[1][2]);
    for(var i = 2; i < ar.length; i++)
     s.context.lineTo(ar[i][1], s.height - ar[i][2]);
    s.context.lineTo(ar[1][1], s.height - ar[1][2]);
    s.context.fill();
    return 0;
   }
   function caml_gc_quick_stat(){
    return [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
   }
   function caml_ml_input_char(chanid){
    var chan = caml_ml_channels[chanid];
    if(chan.buffer_curr >= chan.buffer_max){
     chan.buffer_curr = 0;
     chan.buffer_max = 0;
     caml_refill(chan);
    }
    if(chan.buffer_curr >= chan.buffer_max) caml_raise_end_of_file();
    var res = chan.buffer[chan.buffer_curr];
    chan.buffer_curr++;
    return res;
   }
   function caml_ml_input_int(chanid){
    var chan = caml_ml_channels[chanid], res = 0;
    for(var i = 0; i < 4; i++)
     res = (res << 8) + caml_ml_input_char(chanid) | 0;
    return res | 0;
   }
   function caml_gr_display_mode(){
    caml_failwith("caml_gr_display_mode not Implemented");
   }
   function caml_obj_reachable_words(o){return 0;}
   function nth_digit_nat(nat, ofs){return nat.data[ofs];}
   function caml_array_blit(a1, i1, a2, i2, len){
    if(i2 <= i1)
     for(var j = 1; j <= len; j++) a2[i2 + j] = a1[i1 + j];
    else
     for(var j = len; j >= 1; j--) a2[i2 + j] = a1[i1 + j];
    return 0;
   }
   function caml_float_of_string(s){
    var res;
    s = caml_jsbytes_of_string(s);
    res = + s;
    if(s.length > 0 && res === res) return res;
    s = s.replace(/_/g, "");
    res = + s;
    if(s.length > 0 && res === res || /^[+-]?nan$/i.test(s)) return res;
    var m = /^ *([+-]?)0x([0-9a-f]+)\.?([0-9a-f]*)(p([+-]?[0-9]+))?/i.exec(s);
    if(m){
     var
      m3 = m[3].replace(/0+$/, ""),
      mantissa = parseInt(m[1] + m[2] + m3, 16),
      exponent = (m[5] | 0) - 4 * m3.length;
     res = mantissa * Math.pow(2, exponent);
     return res;
    }
    if(/^\+?inf(inity)?$/i.test(s)) return Infinity;
    if(/^-inf(inity)?$/i.test(s)) return - Infinity;
    caml_failwith("float_of_string");
   }
   function caml_sys_getcwd(){
    return caml_string_of_jsbytes(caml_current_dir);
   }
   function caml_int64_add(x, y){return x.add(y);}
   function caml_int64_mul(x, y){return x.mul(y);}
   function caml_int64_ult(x, y){return x.ucompare(y) < 0;}
   function caml_parse_sign_and_base(s){
    var i = 0, len = caml_ml_string_length(s), base = 10, sign = 1;
    if(len > 0)
     switch(caml_string_unsafe_get(s, i)){
       case 45:
        i++; sign = - 1; break;
       case 43:
        i++; sign = 1; break;
     }
    if(i + 1 < len && caml_string_unsafe_get(s, i) == 48)
     switch(caml_string_unsafe_get(s, i + 1)){
       case 120:
       case 88:
        base = 16; i += 2; break;
       case 111:
       case 79:
        base = 8; i += 2; break;
       case 98:
       case 66:
        base = 2; i += 2; break;
       case 117:
       case 85:
        i += 2; break;
     }
    return [i, sign, base];
   }
   function caml_parse_digit(c){
    if(c >= 48 && c <= 57) return c - 48;
    if(c >= 65 && c <= 90) return c - 55;
    if(c >= 97 && c <= 122) return c - 87;
    return - 1;
   }
   function caml_int64_of_string(s){
    var
     r = caml_parse_sign_and_base(s),
     i = r[0],
     sign = r[1],
     base = r[2],
     base64 = caml_int64_of_int32(base),
     threshold =
       new MlInt64(0xffffff, 0xfffffff, 0xffff).udivmod(base64).quotient,
     c = caml_string_unsafe_get(s, i),
     d = caml_parse_digit(c);
    if(d < 0 || d >= base) caml_failwith("int_of_string");
    var res = caml_int64_of_int32(d);
    for(;;){
     i++;
     c = caml_string_unsafe_get(s, i);
     if(c == 95) continue;
     d = caml_parse_digit(c);
     if(d < 0 || d >= base) break;
     if(caml_int64_ult(threshold, res)) caml_failwith("int_of_string");
     d = caml_int64_of_int32(d);
     res = caml_int64_add(caml_int64_mul(base64, res), d);
     if(caml_int64_ult(res, d)) caml_failwith("int_of_string");
    }
    if(i != caml_ml_string_length(s)) caml_failwith("int_of_string");
    if(base == 10 && caml_int64_ult(new MlInt64(0, 0, 0x8000), res))
     caml_failwith("int_of_string");
    if(sign < 0) res = caml_int64_neg(res);
    return res;
   }
   function caml_ba_set_1(ba, i0, v){ba.set(ba.offset(i0), v); return 0;}
   function caml_int64_xor(x, y){return x.xor(y);}
   function caml_int64_or(x, y){return x.or(y);}
   function caml_lxm_next(v){
    function shift_l(x, k){return caml_int64_shift_left(x, k);}
    function shift_r(x, k){return caml_int64_shift_right_unsigned(x, k);}
    function or(a, b){return caml_int64_or(a, b);}
    function xor(a, b){return caml_int64_xor(a, b);}
    function add(a, b){return caml_int64_add(a, b);}
    function mul(a, b){return caml_int64_mul(a, b);}
    function rotl(x, k){return or(shift_l(x, k), shift_r(x, 64 - k));}
    function get(a, i){return caml_ba_get_1(a, i);}
    function set(a, i, x){return caml_ba_set_1(a, i, x);}
    var
     M = caml_int64_of_string(caml_new_string("0xd1342543de82ef95")),
     daba = caml_int64_of_string(caml_new_string("0xdaba0b6eb09322e3")),
     z,
     q0,
     q1,
     st = v,
     a = get(st, 0),
     s = get(st, 1),
     x0 = get(st, 2),
     x1 = get(st, 3);
    z = add(s, x0);
    z = mul(xor(z, shift_r(z, 32)), daba);
    z = mul(xor(z, shift_r(z, 32)), daba);
    z = xor(z, shift_r(z, 32));
    set(st, 1, add(mul(s, M), a));
    var q0 = x0, q1 = x1;
    q1 = xor(q1, q0);
    q0 = rotl(q0, 24);
    q0 = xor(xor(q0, q1), shift_l(q1, 16));
    q1 = rotl(q1, 37);
    set(st, 2, q0);
    set(st, 3, q1);
    return z;
   }
   function caml_sys_const_big_endian(){return 0;}
   function caml_list_to_js_array(l){
    var a = [];
    for(; l !== 0; l = l[2]) a.push(l[1]);
    return a;
   }
   var
    caml_output_val =
      function(){
        function Writer(){this.chunk = [];}
        Writer.prototype =
         {chunk_idx: 20,
          block_len: 0,
          obj_counter: 0,
          size_32: 0,
          size_64: 0,
          write:
          function(size, value){
           for(var i = size - 8; i >= 0; i -= 8)
            this.chunk[this.chunk_idx++] = value >> i & 0xFF;
          },
          write_at:
          function(pos, size, value){
           var pos = pos;
           for(var i = size - 8; i >= 0; i -= 8)
            this.chunk[pos++] = value >> i & 0xFF;
          },
          write_code:
          function(size, code, value){
           this.chunk[this.chunk_idx++] = code;
           for(var i = size - 8; i >= 0; i -= 8)
            this.chunk[this.chunk_idx++] = value >> i & 0xFF;
          },
          write_shared:
          function(offset){
           if(offset < 1 << 8)
            this.write_code(8, 0x04, offset);
           else if(offset < 1 << 16)
            this.write_code(16, 0x05, offset);
           else
            this.write_code(32, 0x06, offset);
          },
          pos: function(){return this.chunk_idx;},
          finalize:
          function(){
           this.block_len = this.chunk_idx - 20;
           this.chunk_idx = 0;
           this.write(32, 0x8495A6BE);
           this.write(32, this.block_len);
           this.write(32, this.obj_counter);
           this.write(32, this.size_32);
           this.write(32, this.size_64);
           return this.chunk;
          }};
        return function(v, flags){
         flags = caml_list_to_js_array(flags);
         var
          no_sharing = flags.indexOf(0) !== - 1,
          closures = flags.indexOf(1) !== - 1;
         if(closures)
          console.warn
           ("in caml_output_val: flag Marshal.Closures is not supported.");
         var
          writer = new Writer(),
          stack = [],
          intern_obj_table = no_sharing ? null : new MlObjectTable();
         function memo(v){
          if(no_sharing) return false;
          var existing_offset = intern_obj_table.recall(v);
          if(existing_offset){
           writer.write_shared(existing_offset);
           return true;
          }
          else{intern_obj_table.store(v); return false;}
         }
         function extern_rec(v){
          if(v.caml_custom){
           if(memo(v)) return;
           var
            name = v.caml_custom,
            ops = caml_custom_ops[name],
            sz_32_64 = [0, 0];
           if(! ops.serialize)
            caml_invalid_argument("output_value: abstract value (Custom)");
           if(ops.fixed_length == undefined){
            writer.write(8, 0x18);
            for(var i = 0; i < name.length; i++)
             writer.write(8, name.charCodeAt(i));
            writer.write(8, 0);
            var header_pos = writer.pos();
            for(var i = 0; i < 12; i++) writer.write(8, 0);
            ops.serialize(writer, v, sz_32_64);
            writer.write_at(header_pos, 32, sz_32_64[0]);
            writer.write_at(header_pos + 4, 32, 0);
            writer.write_at(header_pos + 8, 32, sz_32_64[1]);
           }
           else{
            writer.write(8, 0x19);
            for(var i = 0; i < name.length; i++)
             writer.write(8, name.charCodeAt(i));
            writer.write(8, 0);
            var old_pos = writer.pos();
            ops.serialize(writer, v, sz_32_64);
            if(ops.fixed_length != writer.pos() - old_pos)
             caml_failwith
              ("output_value: incorrect fixed sizes specified by " + name);
           }
           writer.size_32 += 2 + (sz_32_64[0] + 3 >> 2);
           writer.size_64 += 2 + (sz_32_64[1] + 7 >> 3);
          }
          else if(v instanceof Array && v[0] === (v[0] | 0)){
           if(v[0] == 251)
            caml_failwith("output_value: abstract value (Abstract)");
           if(caml_is_continuation_tag(v[0]))
            caml_invalid_argument("output_value: continuation value");
           if(v.length > 1 && memo(v)) return;
           if(v[0] < 16 && v.length - 1 < 8)
            writer.write(8, 0x80 + v[0] + (v.length - 1 << 4));
           else
            writer.write_code(32, 0x08, v.length - 1 << 10 | v[0]);
           writer.size_32 += v.length;
           writer.size_64 += v.length;
           if(v.length > 1) stack.push(v, 1);
          }
          else if(caml_is_ml_bytes(v)){
           if(! caml_is_ml_bytes(caml_string_of_jsbytes("")))
            caml_failwith
             ("output_value: [Bytes.t] cannot safely be marshaled with [--enable use-js-string]");
           if(memo(v)) return;
           var len = caml_ml_bytes_length(v);
           if(len < 0x20)
            writer.write(8, 0x20 + len);
           else if(len < 0x100)
            writer.write_code(8, 0x09, len);
           else
            writer.write_code(32, 0x0A, len);
           for(var i = 0; i < len; i++)
            writer.write(8, caml_bytes_unsafe_get(v, i));
           writer.size_32 += 1 + ((len + 4) / 4 | 0);
           writer.size_64 += 1 + ((len + 8) / 8 | 0);
          }
          else if(caml_is_ml_string(v)){
           if(memo(v)) return;
           var len = caml_ml_string_length(v);
           if(len < 0x20)
            writer.write(8, 0x20 + len);
           else if(len < 0x100)
            writer.write_code(8, 0x09, len);
           else
            writer.write_code(32, 0x0A, len);
           for(var i = 0; i < len; i++)
            writer.write(8, caml_string_unsafe_get(v, i));
           writer.size_32 += 1 + ((len + 4) / 4 | 0);
           writer.size_64 += 1 + ((len + 8) / 8 | 0);
          }
          else if(v != (v | 0)){
           var type_of_v = typeof v;
           caml_failwith("output_value: abstract value (" + type_of_v + ")");
          }
          else if(v >= 0 && v < 0x40)
           writer.write(8, 0X40 + v);
          else if(v >= - (1 << 7) && v < 1 << 7)
           writer.write_code(8, 0x00, v);
          else if(v >= - (1 << 15) && v < 1 << 15)
           writer.write_code(16, 0x01, v);
          else
           writer.write_code(32, 0x02, v);
         }
         extern_rec(v);
         while(stack.length > 0){
          var i = stack.pop(), v = stack.pop();
          if(i + 1 < v.length) stack.push(v, i + 1);
          extern_rec(v[i]);
         }
         if(intern_obj_table)
          writer.obj_counter = intern_obj_table.objs.length;
         writer.finalize();
         return writer.chunk;};
       }
       ();
   function caml_output_value_to_string(v, flags){
    return caml_string_of_array(caml_output_val(v, flags));
   }
   function caml_raise_not_a_dir(name){
    caml_raise_sys_error(name + ": Not a directory");
   }
   function caml_sys_system_command(cmd){
    var cmd = caml_jsstring_of_string(cmd);
    if(typeof require != "undefined"){
     var child_process = require("child_process");
     if(child_process && child_process.execSync)
      try{child_process.execSync(cmd, {stdio: "inherit"}); return 0;}
      catch(e){return 1;}
    }
    else
     return 127;
   }
   function caml_js_error_of_exception(exn){
    if(exn.js_error) return exn.js_error;
    return null;
   }
   function caml_unix_getuid(unit){
    if(globalThis.process && globalThis.process.getuid)
     return globalThis.process.getuid();
    caml_raise_not_found();
   }
   function deserialize_nat(reader, sz){
    var len = reader.read32s(), nat = new MlNat(len);
    for(var i = 0; i < len; i++) nat.data[i] = reader.read32s();
    sz[0] = len * 4;
    return nat;
   }
   function initialize_nat(){
    caml_custom_ops["_nat"] =
     {deserialize: deserialize_nat,
      serialize: serialize_nat,
      hash: caml_hash_nat};
   }
   function caml_bytes_of_utf16_jsstring(s){
    var tag = 9;
    if(! jsoo_is_ascii(s)) tag = 8, s = caml_utf8_of_utf16(s);
    return new MlBytes(tag, s, s.length);
   }
   function bigstring_memcmp_stub(v_s1, v_s1_pos, v_s2, v_s2_pos, v_len){
    for(var i = 0; i < v_len; i++){
     var
      a = caml_ba_get_1(v_s1, v_s1_pos + i),
      b = caml_ba_get_1(v_s2, v_s2_pos + i);
     if(a < b) return - 1;
     if(a > b) return 1;
    }
    return 0;
   }
   function caml_gr_open_subwindow(a, b, c, d){
    caml_failwith("caml_gr_open_subwindow not Implemented");
   }
   function UInt8ArrayReader(s, i){this.s = s; this.i = i;}
   UInt8ArrayReader.prototype =
    {read8u: function(){return this.s[this.i++];},
     read8s: function(){return this.s[this.i++] << 24 >> 24;},
     read16u:
     function(){
      var s = this.s, i = this.i;
      this.i = i + 2;
      return s[i] << 8 | s[i + 1];
     },
     read16s:
     function(){
      var s = this.s, i = this.i;
      this.i = i + 2;
      return s[i] << 24 >> 16 | s[i + 1];
     },
     read32u:
     function(){
      var s = this.s, i = this.i;
      this.i = i + 4;
      return (s[i] << 24 | s[i + 1] << 16 | s[i + 2] << 8 | s[i + 3]) >>> 0;
     },
     read32s:
     function(){
      var s = this.s, i = this.i;
      this.i = i + 4;
      return s[i] << 24 | s[i + 1] << 16 | s[i + 2] << 8 | s[i + 3];
     },
     readstr:
     function(len){
      var i = this.i;
      this.i = i + len;
      return caml_string_of_array(this.s.subarray(i, i + len));
     },
     readuint8array:
     function(len){
      var i = this.i;
      this.i = i + len;
      return this.s.subarray(i, i + len);
     }};
   function caml_marshal_data_size(s, ofs){
    var r = new UInt8ArrayReader(caml_uint8_array_of_bytes(s), ofs);
    function readvlq(overflow){
     var c = r.read8u(), n = c & 0x7F;
     while((c & 0x80) != 0){
      c = r.read8u();
      var n7 = n << 7;
      if(n != n7 >> 7) overflow[0] = true;
      n = n7 | c & 0x7F;
     }
     return n;
    }
    switch(r.read32u()){
      case 0x8495A6BE:
       var header_len = 20, data_len = r.read32u(); break;
      case 0x8495A6BD:
       var
        header_len = r.read8u() & 0x3F,
        overflow = [false],
        data_len = readvlq(overflow);
       if(overflow[0])
        caml_failwith
         ("Marshal.data_size: object too large to be read back on this platform");
       break;
      case 0x8495A6BF:
      default: caml_failwith("Marshal.data_size: bad object"); break;
    }
    return header_len - caml_marshal_header_size + data_len;
   }
   function MlStringReader(s, i){
    this.s = caml_jsbytes_of_string(s);
    this.i = i;
   }
   MlStringReader.prototype =
    {read8u: function(){return this.s.charCodeAt(this.i++);},
     read8s: function(){return this.s.charCodeAt(this.i++) << 24 >> 24;},
     read16u:
     function(){
      var s = this.s, i = this.i;
      this.i = i + 2;
      return s.charCodeAt(i) << 8 | s.charCodeAt(i + 1);
     },
     read16s:
     function(){
      var s = this.s, i = this.i;
      this.i = i + 2;
      return s.charCodeAt(i) << 24 >> 16 | s.charCodeAt(i + 1);
     },
     read32u:
     function(){
      var s = this.s, i = this.i;
      this.i = i + 4;
      return (s.charCodeAt(i) << 24 | s.charCodeAt(i + 1) << 16
             | s.charCodeAt(i + 2) << 8
             | s.charCodeAt(i + 3))
             >>> 0;
     },
     read32s:
     function(){
      var s = this.s, i = this.i;
      this.i = i + 4;
      return s.charCodeAt(i) << 24 | s.charCodeAt(i + 1) << 16
             | s.charCodeAt(i + 2) << 8
             | s.charCodeAt(i + 3);
     },
     readstr:
     function(len){
      var i = this.i;
      this.i = i + len;
      return caml_string_of_jsbytes(this.s.substring(i, i + len));
     },
     readuint8array:
     function(len){
      var b = new Uint8Array(len), s = this.s, i = this.i;
      for(var j = 0; j < len; j++) b[j] = s.charCodeAt(i + j);
      this.i = i + len;
      return b;
     }};
   var caml_decompress_input = null;
   function caml_float_of_bytes(a){
    return caml_int64_float_of_bits(caml_int64_of_bytes(a));
   }
   function caml_input_value_from_reader(reader, ofs){
    function readvlq(overflow){
     var c = reader.read8u(), n = c & 0x7F;
     while((c & 0x80) != 0){
      c = reader.read8u();
      var n7 = n << 7;
      if(n != n7 >> 7) overflow[0] = true;
      n = n7 | c & 0x7F;
     }
     return n;
    }
    var magic = reader.read32u();
    switch(magic){
      case 0x8495A6BE:
       var
        header_len = 20,
        compressed = 0,
        data_len = reader.read32u(),
        uncompressed_data_len = data_len,
        num_objects = reader.read32u(),
        _size_32 = reader.read32u(),
        _size_64 = reader.read32u();
       break;
      case 0x8495A6BD:
       var
        header_len = reader.read8u() & 0x3F,
        compressed = 1,
        overflow = [false],
        data_len = readvlq(overflow),
        uncompressed_data_len = readvlq(overflow),
        num_objects = readvlq(overflow),
        _size_32 = readvlq(overflow),
        _size_64 = readvlq(overflow);
       if(overflow[0])
        caml_failwith
         ("caml_input_value_from_reader: object too large to be read back on this platform");
       break;
      case 0x8495A6BF:
       caml_failwith
        ("caml_input_value_from_reader: object too large to be read back on a 32-bit platform");
       break;
      default:
       caml_failwith("caml_input_value_from_reader: bad object"); break;
    }
    var
     stack = [],
     intern_obj_table = num_objects > 0 ? [] : null,
     obj_counter = 0;
    function intern_rec(reader){
     var code = reader.read8u();
     if(code >= 0x40)
      if(code >= 0x80){
       var tag = code & 0xF, size = code >> 4 & 0x7, v = [tag];
       if(size == 0) return v;
       if(intern_obj_table) intern_obj_table[obj_counter++] = v;
       stack.push(v, size);
       return v;
      }
      else
       return code & 0x3F;
     else if(code >= 0x20){
      var len = code & 0x1F, v = reader.readstr(len);
      if(intern_obj_table) intern_obj_table[obj_counter++] = v;
      return v;
     }
     else
      switch(code){
        case 0x00:
         return reader.read8s();
        case 0x01:
         return reader.read16s();
        case 0x02:
         return reader.read32s();
        case 0x03:
         caml_failwith("input_value: integer too large"); break;
        case 0x04:
         var offset = reader.read8u();
         if(compressed == 0) offset = obj_counter - offset;
         return intern_obj_table[offset];
        case 0x05:
         var offset = reader.read16u();
         if(compressed == 0) offset = obj_counter - offset;
         return intern_obj_table[offset];
        case 0x06:
         var offset = reader.read32u();
         if(compressed == 0) offset = obj_counter - offset;
         return intern_obj_table[offset];
        case 0x08:
         var
          header = reader.read32u(),
          tag = header & 0xFF,
          size = header >> 10,
          v = [tag];
         if(size == 0) return v;
         if(intern_obj_table) intern_obj_table[obj_counter++] = v;
         stack.push(v, size);
         return v;
        case 0x13:
         caml_failwith("input_value: data block too large"); break;
        case 0x09:
         var len = reader.read8u(), v = reader.readstr(len);
         if(intern_obj_table) intern_obj_table[obj_counter++] = v;
         return v;
        case 0x0A:
         var len = reader.read32u(), v = reader.readstr(len);
         if(intern_obj_table) intern_obj_table[obj_counter++] = v;
         return v;
        case 0x0C:
         var t = new Array(8);
         for(var i = 0; i < 8; i++) t[7 - i] = reader.read8u();
         var v = caml_float_of_bytes(t);
         if(intern_obj_table) intern_obj_table[obj_counter++] = v;
         return v;
        case 0x0B:
         var t = new Array(8);
         for(var i = 0; i < 8; i++) t[i] = reader.read8u();
         var v = caml_float_of_bytes(t);
         if(intern_obj_table) intern_obj_table[obj_counter++] = v;
         return v;
        case 0x0E:
         var len = reader.read8u(), v = new Array(len + 1);
         v[0] = 254;
         var t = new Array(8);
         if(intern_obj_table) intern_obj_table[obj_counter++] = v;
         for(var i = 1; i <= len; i++){
          for(var j = 0; j < 8; j++) t[7 - j] = reader.read8u();
          v[i] = caml_float_of_bytes(t);
         }
         return v;
        case 0x0D:
         var len = reader.read8u(), v = new Array(len + 1);
         v[0] = 254;
         var t = new Array(8);
         if(intern_obj_table) intern_obj_table[obj_counter++] = v;
         for(var i = 1; i <= len; i++){
          for(var j = 0; j < 8; j++) t[j] = reader.read8u();
          v[i] = caml_float_of_bytes(t);
         }
         return v;
        case 0x07:
         var len = reader.read32u(), v = new Array(len + 1);
         v[0] = 254;
         if(intern_obj_table) intern_obj_table[obj_counter++] = v;
         var t = new Array(8);
         for(var i = 1; i <= len; i++){
          for(var j = 0; j < 8; j++) t[7 - j] = reader.read8u();
          v[i] = caml_float_of_bytes(t);
         }
         return v;
        case 0x0F:
         var len = reader.read32u(), v = new Array(len + 1);
         v[0] = 254;
         var t = new Array(8);
         for(var i = 1; i <= len; i++){
          for(var j = 0; j < 8; j++) t[j] = reader.read8u();
          v[i] = caml_float_of_bytes(t);
         }
         return v;
        case 0x10:
        case 0x11:
         caml_failwith("input_value: code pointer"); break;
        case 0x12:
        case 0x18:
        case 0x19:
         var c, s = "";
         while((c = reader.read8u()) != 0) s += String.fromCharCode(c);
         var ops = caml_custom_ops[s], expected_size;
         if(! ops)
          caml_failwith("input_value: unknown custom block identifier");
         switch(code){
           case 0x12: break;
           case 0x19:
            if(! ops.fixed_length)
             caml_failwith("input_value: expected a fixed-size custom block");
            expected_size = ops.fixed_length;
            break;
           case 0x18:
            expected_size = reader.read32u();
            reader.read32s();
            reader.read32s();
            break;
         }
         var
          old_pos = reader.i,
          size = [0],
          v = ops.deserialize(reader, size);
         if(expected_size != undefined)
          if(expected_size != size[0])
           caml_failwith
            ("input_value: incorrect length of serialized custom block");
         if(intern_obj_table) intern_obj_table[obj_counter++] = v;
         return v;
        default: caml_failwith("input_value: ill-formed message");
      }
    }
    if(compressed)
     if(caml_decompress_input)
      var
       data = reader.readuint8array(data_len),
       res = new Uint8Array(uncompressed_data_len),
       res = caml_decompress_input(data, res),
       reader = new UInt8ArrayReader(res, 0);
     else
      caml_failwith("input_value: compressed object, cannot decompress");
    var res = intern_rec(reader);
    while(stack.length > 0){
     var size = stack.pop(), v = stack.pop(), d = v.length;
     if(d < size) stack.push(v, size);
     v[d] = intern_rec(reader);
    }
    if(typeof ofs != "number") ofs[0] = reader.i;
    return res;
   }
   function caml_string_of_bytes(s){
    s.t & 6 && caml_convert_string_to_bytes(s);
    return caml_string_of_jsbytes(s.c);
   }
   function caml_input_value_from_bytes(s, ofs){
    var
     reader =
       new
        MlStringReader
        (caml_string_of_bytes(s), typeof ofs == "number" ? ofs : ofs[0]);
    return caml_input_value_from_reader(reader, ofs);
   }
   function caml_input_value(chanid){
    var
     chan = caml_ml_channels[chanid],
     header = new Uint8Array(caml_marshal_header_size);
    function block(buffer, offset, n){
     var r = 0;
     while(r < n){
      if(chan.buffer_curr >= chan.buffer_max){
       chan.buffer_curr = 0;
       chan.buffer_max = 0;
       caml_refill(chan);
      }
      if(chan.buffer_curr >= chan.buffer_max) break;
      buffer[offset + r] = chan.buffer[chan.buffer_curr];
      chan.buffer_curr++;
      r++;
     }
     return r;
    }
    var r = block(header, 0, caml_marshal_header_size);
    if(r == 0)
     caml_raise_end_of_file();
    else if(r < caml_marshal_header_size)
     caml_failwith("input_value: truncated object");
    var
     len = caml_marshal_data_size(caml_bytes_of_array(header), 0),
     buf = new Uint8Array(len + caml_marshal_header_size);
    buf.set(header, 0);
    var r = block(buf, caml_marshal_header_size, len);
    if(r < len)
     caml_failwith("input_value: truncated object " + r + "  " + len);
    var
     offset = [0],
     res = caml_input_value_from_bytes(caml_bytes_of_array(buf), offset);
    chan.offset = chan.offset + offset[0];
    return res;
   }
   function caml_input_value_to_outside_heap(c){return caml_input_value(c);}
   function caml_atomic_cas(ref, o, n){
    if(ref[1] === o){ref[1] = n; return 1;}
    return 0;
   }
   function caml_copysign_float(x, y){
    if(y == 0) y = 1 / y;
    x = Math.abs(x);
    return y < 0 ? - x : x;
   }
   function caml_gr_set_text_size(size){
    var s = caml_gr_state_get();
    s.text_size = size;
    s.context.font = s.text_size + "px " + caml_jsstring_of_string(s.font);
    return 0;
   }
   function caml_atomic_load(ref){return ref[1];}
   function caml_md5_bytes(s, ofs, len){
    var ctx = caml_MD5Init(), a = caml_uint8_array_of_bytes(s);
    caml_MD5Update(ctx, a.subarray(ofs, ofs + len), len);
    return caml_string_of_array(caml_MD5Final(ctx));
   }
   function caml_ba_set_generic(ba, i, v){
    ba.set(ba.offset(caml_js_from_array(i)), v);
    return 0;
   }
   function caml_ml_condition_wait(t, mutext){return 0;}
   function caml_string_lessequal(s1, s2){return s1 <= s2 ? 1 : 0;}
   function caml_string_greaterequal(s1, s2){return caml_string_lessequal(s2, s1);
   }
   function caml_nextafter_float(x, y){
    if(isNaN(x) || isNaN(y)) return NaN;
    if(x == y) return y;
    if(x == 0) return y < 0 ? - Math.pow(2, - 1074) : Math.pow(2, - 1074);
    var bits = caml_int64_bits_of_float(x), one = caml_int64_of_int32(1);
    if(x < y == x > 0)
     bits = caml_int64_add(bits, one);
    else
     bits = caml_int64_sub(bits, one);
    return caml_int64_float_of_bits(bits);
   }
   function caml_gr_size_y(){var s = caml_gr_state_get(); return s.height;}
   function core_gc_minor_collections(){return 0;}
   function caml_pos_in(chanid){
    var chan = caml_ml_channels[chanid];
    return chan.offset - (chan.buffer_max - chan.buffer_curr) | 0;
   }
   function caml_ml_pos_in(chanid){return caml_pos_in(chanid);}
   function caml_int64_and(x, y){return x.and(y);}
   function Base_int_math_int64_pow_stub(base, exponent){
    var
     one = caml_int64_create_lo_hi(1, 0),
     mul = [one, base, one, one],
     res = one;
    while(! caml_int64_is_zero(exponent)){
     mul[1] = caml_int64_mul(mul[1], mul[3]);
     mul[2] = caml_int64_mul(mul[1], mul[1]);
     mul[3] = caml_int64_mul(mul[2], mul[1]);
     res = caml_int64_mul(res, mul[caml_int64_lo32(exponent) & 3]);
     exponent = caml_int64_shift_right_unsigned(exponent, 2);
    }
    return res;
   }
   function caml_sys_const_word_size(){return 32;}
   function caml_runtime_events_pause(){return 0;}
   function caml_unix_unlink(name){
    var root = resolve_fs_device(name);
    if(! root.device.unlink)
     caml_failwith("caml_unix_unlink: not implemented");
    return root.device.unlink(root.rest, true);
   }
   function caml_string_get(s, i){
    if(i >>> 0 >= caml_ml_string_length(s)) caml_string_bound_error();
    return caml_string_unsafe_get(s, i);
   }
   var
    re_match =
      function(){
        var
         re_word_letters =
           [0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0xFF,
            0x03,
            0xFE,
            0xFF,
            0xFF,
            0x87,
            0xFE,
            0xFF,
            0xFF,
            0x07,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0xFF,
            0xFF,
            0x7F,
            0xFF,
            0xFF,
            0xFF,
            0x7F,
            0xFF],
         opcodes =
           {CHAR: 0,
            CHARNORM: 1,
            STRING: 2,
            STRINGNORM: 3,
            CHARCLASS: 4,
            BOL: 5,
            EOL: 6,
            WORDBOUNDARY: 7,
            BEGGROUP: 8,
            ENDGROUP: 9,
            REFGROUP: 10,
            ACCEPT: 11,
            SIMPLEOPT: 12,
            SIMPLESTAR: 13,
            SIMPLEPLUS: 14,
            GOTO: 15,
            PUSHBACK: 16,
            SETMARK: 17,
            CHECKPROGRESS: 18};
        function is_word_letter(c){
         return re_word_letters[c >> 3] >> (c & 7) & 1;
        }
        function in_bitset(s, i){
         return caml_string_get(s, i >> 3) >> (i & 7) & 1;
        }
        function re_match_impl(re, s, pos, partial){
         var
          prog = caml_js_from_array(re[1]),
          cpool = caml_js_from_array(re[2]),
          normtable = caml_jsbytes_of_string(re[3]),
          numgroups = re[4] | 0,
          numregisters = re[5] | 0,
          startchars = re[6] | 0,
          s = caml_uint8_array_of_string(s),
          pc = 0,
          quit = false,
          stack = [],
          groups = new Array(numgroups),
          re_register = new Array(numregisters);
         for(var i = 0; i < groups.length; i++)
          groups[i] = {start: - 1, end: - 1};
         groups[0].start = pos;
         function backtrack(){
          while(stack.length){
           var item = stack.pop();
           if(item.undo)
            item.undo.obj[item.undo.prop] = item.undo.value;
           else if(item.pos){pc = item.pos.pc; pos = item.pos.txt; return;}
          }
          quit = true;
         }
         function push(item){stack.push(item);}
         function accept(){
          groups[0].end = pos;
          var result = new Array(1 + groups.length * 2);
          result[0] = 0;
          for(var i = 0; i < groups.length; i++){
           var g = groups[i];
           if(g.start < 0 || g.end < 0) g.start = g.end = - 1;
           result[2 * i + 1] = g.start;
           result[2 * i + 1 + 1] = g.end;
          }
          return result;
         }
         function prefix_match(){
          if(partial) return accept(); else backtrack();
         }
         while(! quit){
          var
           op = prog[pc] & 0xff,
           sarg = prog[pc] >> 8,
           uarg = sarg & 0xff,
           c = s[pos],
           group;
          pc++;
          switch(op){
            case opcodes.CHAR:
             if(pos === s.length){prefix_match(); break;}
             if(c === uarg) pos++; else backtrack();
             break;
            case opcodes.CHARNORM:
             if(pos === s.length){prefix_match(); break;}
             if(normtable.charCodeAt(c) === uarg) pos++; else backtrack();
             break;
            case opcodes.STRING:
             for
             (var arg = caml_jsbytes_of_string(cpool[uarg]), i = 0;
              i < arg.length;
              i++){
              if(pos === s.length){prefix_match(); break;}
              if(c === arg.charCodeAt(i))
               c = s[++pos];
              else{backtrack(); break;}
             }
             break;
            case opcodes.STRINGNORM:
             for
             (var arg = caml_jsbytes_of_string(cpool[uarg]), i = 0;
              i < arg.length;
              i++){
              if(pos === s.length){prefix_match(); break;}
              if(normtable.charCodeAt(c) === arg.charCodeAt(i))
               c = s[++pos];
              else{backtrack(); break;}
             }
             break;
            case opcodes.CHARCLASS:
             if(pos === s.length){prefix_match(); break;}
             if(in_bitset(cpool[uarg], c)) pos++; else backtrack();
             break;
            case opcodes.BOL:
             if(pos > 0 && s[pos - 1] != 10) backtrack(); break;
            case opcodes.EOL:
             if(pos < s.length && s[pos] != 10) backtrack(); break;
            case opcodes.WORDBOUNDARY:
             if(pos == 0){
              if(pos === s.length){prefix_match(); break;}
              if(is_word_letter(s[0])) break;
              backtrack();
             }
             else if(pos === s.length){
              if(is_word_letter(s[pos - 1])) break;
              backtrack();
             }
             else{
              if(is_word_letter(s[pos - 1]) != is_word_letter(s[pos])) break;
              backtrack();
             }
             break;
            case opcodes.BEGGROUP:
             group = groups[uarg];
             push({undo: {obj: group, prop: "start", value: group.start}});
             group.start = pos;
             break;
            case opcodes.ENDGROUP:
             group = groups[uarg];
             push({undo: {obj: group, prop: "end", value: group.end}});
             group.end = pos;
             break;
            case opcodes.REFGROUP:
             group = groups[uarg];
             if(group.start < 0 || group.end < 0){backtrack(); break;}
             for(var i = group.start; i < group.end; i++){
              if(pos === s.length){prefix_match(); break;}
              if(s[i] != s[pos]){backtrack(); break;}
              pos++;
             }
             break;
            case opcodes.SIMPLEOPT:
             if(in_bitset(cpool[uarg], c)) pos++; break;
            case opcodes.SIMPLESTAR:
             while(in_bitset(cpool[uarg], c)) c = s[++pos]; break;
            case opcodes.SIMPLEPLUS:
             if(pos === s.length){prefix_match(); break;}
             if(in_bitset(cpool[uarg], c))
              do c = s[++pos];while(in_bitset(cpool[uarg], c));
             else
              backtrack();
             break;
            case opcodes.ACCEPT: return accept();
            case opcodes.GOTO:
             pc = pc + sarg; break;
            case opcodes.PUSHBACK:
             push({pos: {pc: pc + sarg, txt: pos}}); break;
            case opcodes.SETMARK:
             push
              ({undo: {obj: re_register, prop: uarg, value: re_register[uarg]}});
             re_register[uarg] = pos;
             break;
            case opcodes.CHECKPROGRESS:
             if(re_register[uarg] === pos) backtrack(); break;
            default: throw new Error("Invalid bytecode");
          }
         }
         return 0;
        }
        return re_match_impl;
       }
       ();
   function re_search_backward(re, s, pos){
    if(pos < 0 || pos > caml_ml_string_length(s))
     caml_invalid_argument("Str.search_backward");
    while(pos >= 0){
     var res = re_match(re, s, pos, 0);
     if(res) return res;
     pos--;
    }
    return [0];
   }
   function caml_js_from_string(s){return caml_jsstring_of_string(s);}
   function caml_ml_output_ta(chanid, buffer, offset, len){
    var chan = caml_ml_channels[chanid];
    if(! chan.opened)
     caml_raise_sys_error("Cannot output to a closed channel");
    buffer = buffer.subarray(offset, offset + len);
    if(chan.buffer_curr + buffer.length > chan.buffer.length){
     var b = new Uint8Array(chan.buffer_curr + buffer.length);
     b.set(chan.buffer);
     chan.buffer = b;
    }
    switch(chan.buffered){
      case 0:
       chan.buffer.set(buffer, chan.buffer_curr);
       chan.buffer_curr += buffer.length;
       caml_ml_flush(chanid);
       break;
      case 1:
       chan.buffer.set(buffer, chan.buffer_curr);
       chan.buffer_curr += buffer.length;
       if(chan.buffer_curr >= chan.buffer.length) caml_ml_flush(chanid);
       break;
      case 2:
       var id = buffer.lastIndexOf(10);
       if(id < 0){
        chan.buffer.set(buffer, chan.buffer_curr);
        chan.buffer_curr += buffer.length;
        if(chan.buffer_curr >= chan.buffer.length) caml_ml_flush(chanid);
       }
       else{
        chan.buffer.set(buffer.subarray(0, id + 1), chan.buffer_curr);
        chan.buffer_curr += id + 1;
        caml_ml_flush(chanid);
        chan.buffer.set(buffer.subarray(id + 1), chan.buffer_curr);
        chan.buffer_curr += buffer.length - id - 1;
       }
       break;
    }
    return 0;
   }
   function caml_ba_sub(ba, ofs, len){
    var changed_dim, mul = 1;
    if(ba.layout == 0){
     for(var i = 1; i < ba.dims.length; i++) mul = mul * ba.dims[i];
     changed_dim = 0;
    }
    else{
     for(var i = 0; i < ba.dims.length - 1; i++) mul = mul * ba.dims[i];
     changed_dim = ba.dims.length - 1;
     ofs = ofs - 1;
    }
    if(ofs < 0 || len < 0 || ofs + len > ba.dims[changed_dim])
     caml_invalid_argument("Bigarray.sub: bad sub-array");
    var new_dims = [];
    for(var i = 0; i < ba.dims.length; i++) new_dims[i] = ba.dims[i];
    new_dims[changed_dim] = len;
    mul *= caml_ba_get_size_per_element(ba.kind);
    var new_data = ba.data.subarray(ofs * mul, (ofs + len) * mul);
    return caml_ba_create_unsafe(ba.kind, ba.layout, new_dims, new_data);
   }
   function core_gc_compactions(){return 0;}
   function caml_gc_full_major(unit){
    if(typeof globalThis.gc == "function") globalThis.gc();
    return 0;
   }
   function caml_ml_mutex_try_lock(t){
    if(! t.locked){t.locked = true; return 1;}
    return 0;
   }
   function caml_bytes_set32(s, i, i32){
    if(i >>> 0 >= s.l - 3) caml_bytes_bound_error();
    var
     b4 = 0xFF & i32 >> 24,
     b3 = 0xFF & i32 >> 16,
     b2 = 0xFF & i32 >> 8,
     b1 = 0xFF & i32;
    caml_bytes_unsafe_set(s, i + 0, b1);
    caml_bytes_unsafe_set(s, i + 1, b2);
    caml_bytes_unsafe_set(s, i + 2, b3);
    caml_bytes_unsafe_set(s, i + 3, b4);
    return 0;
   }
   function caml_gr_sigio_signal(){return 0;}
   function caml_ba_uint8_set32(ba, i0, v){
    var ofs = ba.offset(i0);
    if(ofs + 3 >= ba.data.length) caml_array_bound_error();
    ba.set(ofs + 0, v & 0xff);
    ba.set(ofs + 1, v >>> 8 & 0xff);
    ba.set(ofs + 2, v >>> 16 & 0xff);
    ba.set(ofs + 3, v >>> 24 & 0xff);
    return 0;
   }
   function caml_sys_const_ostype_unix(){return os_type == "Unix" ? 1 : 0;}
   function caml_unix_gmtime(t){
    var
     d = new Date(t * 1000),
     d_num = d.getTime(),
     januaryfirst = new Date(Date.UTC(d.getUTCFullYear(), 0, 1)).getTime(),
     doy = Math.floor((d_num - januaryfirst) / 86400000);
    return [0,
            d.getUTCSeconds(),
            d.getUTCMinutes(),
            d.getUTCHours(),
            d.getUTCDate(),
            d.getUTCMonth(),
            d.getUTCFullYear() - 1900,
            d.getUTCDay(),
            doy,
            false | 0];
   }
   function caml_signbit_float(x){if(x == 0) x = 1 / x; return x < 0 ? 1 : 0;}
   function caml_gr_current_x(){var s = caml_gr_state_get(); return s.x;}
   function caml_gr_set_line_width(w){
    var s = caml_gr_state_get();
    s.line_width = w;
    s.context.lineWidth = w;
    return 0;
   }
   function caml_gr_set_font(f){
    var s = caml_gr_state_get();
    s.font = f;
    s.context.font = s.text_size + "px " + caml_jsstring_of_string(s.font);
    return 0;
   }
   function caml_gr_set_color(color){
    var s = caml_gr_state_get();
    function convert(number){
     var str = "" + number.toString(16);
     while(str.length < 2) str = "0" + str;
     return str;
    }
    var r = color >> 16 & 0xff, g = color >> 8 & 0xff, b = color >> 0 & 0xff;
    s.color = color;
    var c_str = "#" + convert(r) + convert(g) + convert(b);
    s.context.fillStyle = c_str;
    s.context.strokeStyle = c_str;
    return 0;
   }
   function caml_gr_moveto(x, y){
    var s = caml_gr_state_get();
    s.x = x;
    s.y = y;
    return 0;
   }
   function caml_gr_resize_window(w, h){
    var s = caml_gr_state_get();
    s.width = w;
    s.height = h;
    s.canvas.width = w;
    s.canvas.height = h;
    return 0;
   }
   function caml_gr_state_init(){
    caml_gr_moveto(caml_gr_state.x, caml_gr_state.y);
    caml_gr_resize_window(caml_gr_state.width, caml_gr_state.height);
    caml_gr_set_line_width(caml_gr_state.line_width);
    caml_gr_set_text_size(caml_gr_state.text_size);
    caml_gr_set_font(caml_gr_state.font);
    caml_gr_set_color(caml_gr_state.color);
    caml_gr_set_window_title(caml_gr_state.title);
    caml_gr_state.context.textBaseline = "bottom";
   }
   function caml_ba_kind_of_typed_array(ta){
    var kind;
    if(ta instanceof Float32Array)
     kind = 0;
    else if(ta instanceof Float64Array)
     kind = 1;
    else if(ta instanceof Int8Array)
     kind = 2;
    else if(ta instanceof Uint8Array)
     kind = 3;
    else if(ta instanceof Uint8ClampedArray)
     kind = 3;
    else if(ta instanceof Int16Array)
     kind = 4;
    else if(ta instanceof Uint16Array)
     kind = 5;
    else if(ta instanceof Int32Array)
     kind = 6;
    else if(ta instanceof Uint32Array)
     kind = 6;
    else
     caml_invalid_argument("caml_ba_kind_of_typed_array: unsupported kind");
    return kind;
   }
   function caml_ba_from_typed_array(ta){
    var
     kind = caml_ba_kind_of_typed_array(ta),
     ta =
       ta instanceof Uint32Array
        ? new Int32Array(ta.buffer, ta.byteOffset, ta.length)
        : ta;
    return caml_ba_create_unsafe(kind, 0, [ta.length], ta);
   }
   function time_now_nanosecond_counter_for_timing(){
    var
     ms_since_program_started = performance.now(),
     ns_since_program_started = ms_float_to_ns_int64(ms_since_program_started);
    return caml_int64_shift_left(ns_since_program_started, 1);
   }
   function caml_ml_seek_out(chanid, pos){return caml_seek_out(chanid, pos);}
   function caml_js_typeof(o){return typeof o;}
   function caml_string_hash(h, v){
    var h = caml_hash_mix_string(h, v), h = caml_hash_mix_final(h);
    return h & 0x3FFFFFFF;
   }
   function caml_restore_raw_backtrace(exn, bt){return 0;}
   function Base_int_math_int32_ctz(x){
    if(x === 0) return 32;
    var n = 1;
    if((x & 0x0000FFFF) === 0){n = n + 16; x = x >> 16;}
    if((x & 0x000000FF) === 0){n = n + 8; x = x >> 8;}
    if((x & 0x0000000F) === 0){n = n + 4; x = x >> 4;}
    if((x & 0x00000003) === 0){n = n + 2; x = x >> 2;}
    return n - (x & 1);
   }
   function Base_int_math_nativeint_ctz(x){return Base_int_math_int32_ctz(x);}
   function caml_gr_lineto(x, y){
    var s = caml_gr_state_get();
    s.context.beginPath();
    s.context.moveTo(s.x, s.height - s.y);
    s.context.lineTo(x, s.height - y);
    s.context.stroke();
    s.x = x;
    s.y = y;
    return 0;
   }
   function caml_js_function_arity(f){return f.l >= 0 ? f.l : f.l = f.length;}
   function caml_js_wrap_meth_callback_unsafe(f){
    return function(){
     var len = caml_js_function_arity(f) - 1, args = new Array(len + 1);
     args[0] = this;
     for(var i = 0; i < len; i++) args[i + 1] = arguments[i];
     return caml_callback(f, args);};
   }
   function caml_ba_dim_3(ba){return caml_ba_dim(ba, 2);}
   function ppx_expect_runtime_after_test(vstdout, vstderr){
    caml_ml_channels[vstdout] = ppx_expect_runtime_saved_stdout;
    caml_ml_channels[vstderr] = ppx_expect_runtime_saved_stderr;
    return 0;
   }
   function caml_is_special_exception(exn){
    switch(exn[2]){case - 8:case - 11:case - 12: return 1;default: return 0;
    }
   }
   function caml_format_exception(exn){
    var r = "";
    if(exn[0] == 0){
     r += exn[1][1];
     if
      (exn.length == 3 && exn[2][0] == 0 && caml_is_special_exception(exn[1]))
      var bucket = exn[2], start = 1;
     else
      var start = 2, bucket = exn;
     r += "(";
     for(var i = start; i < bucket.length; i++){
      if(i > start) r += ", ";
      var v = bucket[i];
      if(typeof v == "number")
       r += v.toString();
      else if(v instanceof MlBytes)
       r += '"' + v.toString() + '"';
      else if(typeof v == "string")
       r += '"' + v.toString() + '"';
      else
       r += "_";
     }
     r += ")";
    }
    else if(exn[0] == 248) r += exn[1];
    return r;
   }
   function caml_fatal_uncaught_exception(err){
    if(err instanceof Array && (err[0] == 0 || err[0] == 248)){
     var handler = caml_named_value("Printexc.handle_uncaught_exception");
     if(handler)
      caml_callback(handler, [err, false]);
     else{
      var
       msg = caml_format_exception(err),
       at_exit = caml_named_value("Pervasives.do_at_exit");
      if(at_exit) caml_callback(at_exit, [0]);
      console.error("Fatal error: exception " + msg);
      if(err.js_error) throw err.js_error;
     }
    }
    else
     throw err;
   }
   function caml_ephe_check_data(x){
    return x[caml_ephe_data_offset] === undefined ? 0 : 1;
   }
   function caml_bytes_get16(s, i){
    if(i >>> 0 >= s.l - 1) caml_bytes_bound_error();
    var
     b1 = caml_bytes_unsafe_get(s, i),
     b2 = caml_bytes_unsafe_get(s, i + 1);
    return b2 << 8 | b1;
   }
   function caml_obj_make_forward(b, v){b[0] = 250; b[1] = v; return 0;}
   function caml_js_from_bool(x){return ! ! x;}
   function caml_ml_set_channel_name(chanid, name){
    var chan = caml_ml_channels[chanid];
    chan.name = name;
    return 0;
   }
   function caml_exp2_float(x){return Math.pow(2, x);}
   function caml_gr_close_graph(){
    var s = caml_gr_state_get();
    s.canvas.width = 0;
    s.canvas.height = 0;
    return 0;
   }
   function bigstring_memcmp_bytes_stub(v_s1, v_s1_pos, v_s2, v_s2_pos, v_len){
    for(var i = 0; i < v_len; i++){
     var
      a = caml_ba_get_1(v_s1, v_s1_pos + i),
      b = caml_bytes_get(v_s2, v_s2_pos + i);
     if(a < b) return - 1;
     if(a > b) return 1;
    }
    return 0;
   }
   var Base_internalhash_fold_int = caml_hash_mix_int;
   function caml_ml_domain_cpu_relax(unit){return 0;}
   function caml_create_string(len){caml_invalid_argument("String.create");}
   function Base_int_math_nativeint_clz(x){return Base_int_math_int32_clz(x);}
   function bigstring_memset_stub(bigstring, v_pos, v_len, v_char){
    for(var i = 0; i < v_len; i++)
     caml_ba_set_1(bigstring, v_pos + i, v_char);
   }
   function caml_atanh_float(x){return Math.atanh(x);}
   function caml_ml_condition_signal(t){return 0;}
   function caml_unix_findnext(dir_handle){return caml_unix_readdir(dir_handle);
   }
   function caml_ml_output_bytes(chanid, buffer, offset, len){
    var buffer = caml_uint8_array_of_bytes(buffer);
    return caml_ml_output_ta(chanid, buffer, offset, len);
   }
   function caml_ml_output(chanid, buffer, offset, len){
    return caml_ml_output_bytes
            (chanid, caml_bytes_of_string(buffer), offset, len);
   }
   function caml_ml_domain_id(unit){return caml_domain_id;}
   function caml_ephe_get_data(x){
    return x[caml_ephe_data_offset] === undefined
            ? 0
            : [0, x[caml_ephe_data_offset]];
   }
   function caml_xmlhttprequest_create(unit){
    if(typeof globalThis.XMLHttpRequest !== "undefined")
     try{return new globalThis.XMLHttpRequest;}catch(e){}
    if(typeof globalThis.activeXObject !== "undefined"){
     try{return new globalThis.activeXObject("Msxml2.XMLHTTP");}catch(e){}
     try{return new globalThis.activeXObject("Msxml3.XMLHTTP");}catch(e){}
     try{return new globalThis.activeXObject("Microsoft.XMLHTTP");}catch(e){}
    }
    caml_failwith("Cannot create a XMLHttpRequest");
   }
   function caml_trampoline_return(f, args){return {joo_tramp: f, joo_args: args};
   }
   function caml_ml_is_buffered(chanid){
    return caml_ml_channels[chanid].buffered ? 1 : 0;
   }
   function caml_hash_mix_bigstring(h, bs){
    return caml_hash_mix_bytes_arr(h, bs.data);
   }
   var internalhash_fold_bigstring = caml_hash_mix_bigstring;
   function Base_int_math_int64_clz(x){
    var n = 64, y;
    y = caml_int64_shift_right_unsigned(x, 32);
    if(! caml_int64_is_zero(y)){n = n - 32; x = y;}
    y = caml_int64_shift_right_unsigned(x, 16);
    if(! caml_int64_is_zero(y)){n = n - 16; x = y;}
    y = caml_int64_shift_right_unsigned(x, 8);
    if(! caml_int64_is_zero(y)){n = n - 8; x = y;}
    y = caml_int64_shift_right_unsigned(x, 4);
    if(! caml_int64_is_zero(y)){n = n - 4; x = y;}
    y = caml_int64_shift_right_unsigned(x, 2);
    if(! caml_int64_is_zero(y)){n = n - 2; x = y;}
    y = caml_int64_shift_right_unsigned(x, 1);
    if(! caml_int64_is_zero(y)) return n - 2;
    return n - caml_int64_to_int32(x);
   }
   function caml_array_append(a1, a2){
    var l1 = a1.length, l2 = a2.length, l = l1 + l2 - 1, a = new Array(l);
    a[0] = 0;
    var i = 1, j = 1;
    for(; i < l1; i++) a[i] = a1[i];
    for(; i < l; i++, j++) a[i] = a2[j];
    return a;
   }
   function caml_unix_gettimeofday(){return new Date().getTime() / 1000;}
   function caml_unix_time(){return Math.floor(caml_unix_gettimeofday());}
   function timezone_js_loader_get_next_transition_or_this_time_if_none
   (zone, instant){
    var ret = zone.getNextTransition(instant);
    return ret ? ret : instant;
   }
   function caml_ml_set_channel_refill(chanid, f){
    caml_ml_channels[chanid].refill = f;
    return 0;
   }
   function caml_runtime_events_create_cursor(target){return {};}
   function caml_fill_bytes(s, i, l, c){
    if(l > 0)
     if(i == 0 && (l >= s.l || s.t == 2 && l >= s.c.length))
      if(c == 0){
       s.c = "";
       s.t = 2;
      }
      else{
       s.c = caml_str_repeat(l, String.fromCharCode(c));
       s.t = l == s.l ? 0 : 2;
      }
     else{
      if(s.t != 4) caml_convert_bytes_to_array(s);
      for(l += i; i < l; i++) s.c[i] = c;
     }
    return 0;
   }
   function caml_js_expr(s){
    console.error("caml_js_expr: fallback to runtime evaluation\n");
    return eval(caml_jsstring_of_string(s));
   }
   function caml_ml_runtime_warnings_enabled(_unit){return caml_runtime_warnings;
   }
   function core_gc_run_memprof_callbacks(){return 0;}
   function caml_output_value_to_bytes(v, flags){
    return caml_bytes_of_array(caml_output_val(v, flags));
   }
   function caml_eventlog_resume(unit){return 0;}
   function caml_md5_string(s, ofs, len){
    return caml_md5_bytes(caml_bytes_of_string(s), ofs, len);
   }
   function caml_array_of_string(x){return caml_uint8_array_of_string(x);}
   function caml_string_equal(s1, s2){if(s1 === s2) return 1; return 0;}
   function caml_jsoo_flags_use_js_string(unit){return 1;}
   var
    zstd_decompress =
      function(){
        "use strict";
        var
         ab = ArrayBuffer,
         u8 = Uint8Array,
         u16 = Uint16Array,
         i16 = Int16Array,
         u32 = Uint32Array,
         i32 = Int32Array;
        function slc(v, s, e){
         if(u8.prototype.slice) return u8.prototype.slice.call(v, s, e);
         if(s == null || s < 0) s = 0;
         if(e == null || e > v.length) e = v.length;
         var n = new u8(e - s);
         n.set(v.subarray(s, e));
         return n;
        }
        function fill(v, n, s, e){
         if(u8.prototype.fill) return u8.prototype.fill.call(v, n, s, e);
         if(s == null || s < 0) s = 0;
         if(e == null || e > v.length) e = v.length;
         for(; s < e; ++s) v[s] = n;
         return v;
        }
        function cpw(v, t, s, e){
         if(u8.prototype.copyWithin)
          return u8.prototype.copyWithin.call(v, t, s, e);
         if(s == null || s < 0) s = 0;
         if(e == null || e > v.length) e = v.length;
         while(s < e) v[t++] = v[s++];
        }
        var
         ec =
           ["invalid zstd data",
            "window size too large (>2046MB)",
            "invalid block type",
            "FSE accuracy too high",
            "match distance too far back",
            "unexpected EOF"];
        function err(ind, msg, nt){
         var e = new Error(msg || ec[ind]);
         e.code = ind;
         if(! nt) throw e;
         return e;
        }
        function rb(d, b, n){
         var i = 0, o = 0;
         for(; i < n; ++i) o |= d[b++] << (i << 3);
         return o;
        }
        function b4(d, b){
         return (d[b] | d[b + 1] << 8 | d[b + 2] << 16 | d[b + 3] << 24) >>> 0;
        }
        function rzfh(dat, w){
         var n3 = dat[0] | dat[1] << 8 | dat[2] << 16;
         if(n3 == 0x2FB528 && dat[3] == 253){
          var
           flg = dat[4],
           ss = flg >> 5 & 1,
           cc = flg >> 2 & 1,
           df = flg & 3,
           fcf = flg >> 6;
          if(flg & 8) err(0);
          var bt = 6 - ss, db = df == 3 ? 4 : df, di = rb(dat, bt, db);
          bt += db;
          var
           fsb = fcf ? 1 << fcf : ss,
           fss = rb(dat, bt, fsb) + (fcf == 1 && 256),
           ws = fss;
          if(! ss){
           var wb = 1 << 10 + (dat[5] >> 3);
           ws = wb + (wb >> 3) * (dat[5] & 7);
          }
          if(ws > 2145386496) err(1);
          var buf = new u8((w == 1 ? fss || ws : w ? 0 : ws) + 12);
          buf[0] = 1, buf[4] = 4, buf[8] = 8;
          return {b: bt + fsb,
                  y: 0,
                  l: 0,
                  d: di,
                  w: w && w != 1 ? w : buf.subarray(12),
                  e: ws,
                  o: new i32(buf.buffer, 0, 3),
                  u: fss,
                  c: cc,
                  m: Math.min(131072, ws)};
         }
         else if((n3 >> 4 | dat[3] << 20) == 0x184D2A5) return b4(dat, 4) + 8;
         err(0);
        }
        function msb(val){
         var bits = 0;
         for(; 1 << bits <= val; ++bits) ;
         return bits - 1;
        }
        function rfse(dat, bt, mal){
         var tpos = (bt << 3) + 4, al = (dat[bt] & 15) + 5;
         if(al > mal) err(3);
         var
          sz = 1 << al,
          probs = sz,
          sym = - 1,
          re = - 1,
          i = - 1,
          ht = sz,
          buf = new ab(512 + (sz << 2)),
          freq = new i16(buf, 0, 256),
          dstate = new u16(buf, 0, 256),
          nstate = new u16(buf, 512, sz),
          bb1 = 512 + (sz << 1),
          syms = new u8(buf, bb1, sz),
          nbits = new u8(buf, bb1 + sz);
         while(sym < 255 && probs > 0){
          var
           bits = msb(probs + 1),
           cbt = tpos >> 3,
           msk = (1 << bits + 1) - 1,
           val =
             (dat[cbt] | dat[cbt + 1] << 8 | dat[cbt + 2] << 16) >> (tpos & 7)
             & msk,
           msk1fb = (1 << bits) - 1,
           msv = msk - probs - 1,
           sval = val & msk1fb;
          if(sval < msv)
           tpos += bits, val = sval;
          else{tpos += bits + 1; if(val > msk1fb) val -= msv;}
          freq[++sym] = --val;
          if(val == - 1){probs += val; syms[--ht] = sym;} else probs -= val;
          if(! val)
           do{
            var rbt = tpos >> 3;
            re = (dat[rbt] | dat[rbt + 1] << 8) >> (tpos & 7) & 3;
            tpos += 2;
            sym += re;
           }
           while
            (re == 3);
         }
         if(sym > 255 || probs) err(0);
         var sympos = 0, sstep = (sz >> 1) + (sz >> 3) + 3, smask = sz - 1;
         for(var s = 0; s <= sym; ++s){
          var sf = freq[s];
          if(sf < 1){dstate[s] = - sf; continue;}
          for(i = 0; i < sf; ++i){
           syms[sympos] = s;
           do sympos = sympos + sstep & smask;while(sympos >= ht);
          }
         }
         if(sympos) err(0);
         for(i = 0; i < sz; ++i){
          var ns = dstate[syms[i]]++, nb = nbits[i] = al - msb(ns);
          nstate[i] = (ns << nb) - sz;
         }
         return [tpos + 7 >> 3, {b: al, s: syms, n: nbits, t: nstate}];
        }
        function rhu(dat, bt){
         var
          i = 0,
          wc = - 1,
          buf = new u8(292),
          hb = dat[bt],
          hw = buf.subarray(0, 256),
          rc = buf.subarray(256, 268),
          ri = new u16(buf.buffer, 268);
         if(hb < 128){
          var _a = rfse(dat, bt + 1, 6), ebt = _a[0], fdt = _a[1];
          bt += hb;
          var epos = ebt << 3, lb = dat[bt];
          if(! lb) err(0);
          var
           st1 = 0,
           st2 = 0,
           btr1 = fdt.b,
           btr2 = btr1,
           fpos = (++bt << 3) - 8 + msb(lb);
          for(;;){
           fpos -= btr1;
           if(fpos < epos) break;
           var cbt = fpos >> 3;
           st1 +=
            (dat[cbt] | dat[cbt + 1] << 8) >> (fpos & 7) & (1 << btr1) - 1;
           hw[++wc] = fdt.s[st1];
           fpos -= btr2;
           if(fpos < epos) break;
           cbt = fpos >> 3;
           st2 +=
            (dat[cbt] | dat[cbt + 1] << 8) >> (fpos & 7) & (1 << btr2) - 1;
           hw[++wc] = fdt.s[st2];
           btr1 = fdt.n[st1];
           st1 = fdt.t[st1];
           btr2 = fdt.n[st2];
           st2 = fdt.t[st2];
          }
          if(++wc > 255) err(0);
         }
         else{
          wc = hb - 127;
          for(; i < wc; i += 2){
           var byte = dat[++bt];
           hw[i] = byte >> 4;
           hw[i + 1] = byte & 15;
          }
          ++bt;
         }
         var wes = 0;
         for(i = 0; i < wc; ++i){
          var wt = hw[i];
          if(wt > 11) err(0);
          wes += wt && 1 << wt - 1;
         }
         var mb = msb(wes) + 1, ts = 1 << mb, rem = ts - wes;
         if(rem & rem - 1) err(0);
         hw[wc++] = msb(rem) + 1;
         for(i = 0; i < wc; ++i){
          var wt = hw[i];
          ++rc[hw[i] = wt && mb + 1 - wt];
         }
         var
          hbuf = new u8(ts << 1),
          syms = hbuf.subarray(0, ts),
          nb = hbuf.subarray(ts);
         ri[mb] = 0;
         for(i = mb; i > 0; --i){
          var pv = ri[i];
          fill(nb, i, pv, ri[i - 1] = pv + rc[i] * (1 << mb - i));
         }
         if(ri[0] != ts) err(0);
         for(i = 0; i < wc; ++i){
          var bits = hw[i];
          if(bits){
           var code = ri[bits];
           fill(syms, i, code, ri[bits] = code + (1 << mb - bits));
          }
         }
         return [bt, {n: nb, b: mb, s: syms}];
        }
        var
         dllt =
           rfse
             (new
               u8
               ([81,
                 16,
                 99,
                 140,
                 49,
                 198,
                 24,
                 99,
                 12,
                 33,
                 196,
                 24,
                 99,
                 102,
                 102,
                 134,
                 70,
                 146,
                 4]),
              0,
              6)
            [1],
         dmlt =
           rfse
             (new
               u8
               ([33,
                 20,
                 196,
                 24,
                 99,
                 140,
                 33,
                 132,
                 16,
                 66,
                 8,
                 33,
                 132,
                 16,
                 66,
                 8,
                 33,
                 68,
                 68,
                 68,
                 68,
                 68,
                 68,
                 68,
                 68,
                 36,
                 9]),
              0,
              6)
            [1],
         doct =
           rfse
             (new u8([32, 132, 16, 66, 102, 70, 68, 68, 68, 68, 36, 73, 2]),
              0,
              5)
            [1];
        function b2bl(b, s){
         var len = b.length, bl = new i32(len);
         for(var i = 0; i < len; ++i){bl[i] = s; s += 1 << b[i];}
         return bl;
        }
        var
         llb =
           new
            u8
            (new
              i32
              ([0,
                0,
                0,
                0,
                16843009,
                50528770,
                134678020,
                202050057,
                269422093]).buffer,
             0,
             36),
         llbl = b2bl(llb, 0),
         mlb =
           new
            u8
            (new
              i32
              ([0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                16843009,
                50528770,
                117769220,
                185207048,
                252579084,
                16]).buffer,
             0,
             53),
         mlbl = b2bl(mlb, 3);
        function dhu(dat, out, hu){
         var
          len = dat.length,
          ss = out.length,
          lb = dat[len - 1],
          msk = (1 << hu.b) - 1,
          eb = - hu.b;
         if(! lb) err(0);
         var
          st = 0,
          btr = hu.b,
          pos = (len << 3) - 8 + msb(lb) - btr,
          i = - 1;
         for(; pos > eb && i < ss;){
          var
           cbt = pos >> 3,
           val =
             (dat[cbt] | dat[cbt + 1] << 8 | dat[cbt + 2] << 16) >> (pos & 7);
          st = (st << btr | val) & msk;
          out[++i] = hu.s[st];
          pos -= btr = hu.n[st];
         }
         if(pos != eb || i + 1 != ss) err(0);
        }
        function dhu4(dat, out, hu){
         var
          bt = 6,
          ss = out.length,
          sz1 = ss + 3 >> 2,
          sz2 = sz1 << 1,
          sz3 = sz1 + sz2;
         dhu
          (dat.subarray(bt, bt += dat[0] | dat[1] << 8),
           out.subarray(0, sz1),
           hu);
         dhu
          (dat.subarray(bt, bt += dat[2] | dat[3] << 8),
           out.subarray(sz1, sz2),
           hu);
         dhu
          (dat.subarray(bt, bt += dat[4] | dat[5] << 8),
           out.subarray(sz2, sz3),
           hu);
         dhu(dat.subarray(bt), out.subarray(sz3), hu);
        }
        function rzb(dat, st, out){
         var _a, bt = st.b, b0 = dat[bt], btype = b0 >> 1 & 3;
         st.l = b0 & 1;
         var
          sz = b0 >> 3 | dat[bt + 1] << 5 | dat[bt + 2] << 13,
          ebt = (bt += 3) + sz;
         if(btype == 1){
          if(bt >= dat.length) return;
          st.b = bt + 1;
          if(out){fill(out, dat[bt], st.y, st.y += sz); return out;}
          return fill(new u8(sz), dat[bt]);
         }
         if(ebt > dat.length) return;
         if(btype == 0){
          st.b = ebt;
          if(out){
           out.set(dat.subarray(bt, ebt), st.y);
           st.y += sz;
           return out;
          }
          return slc(dat, bt, ebt);
         }
         if(btype == 2){
          var
           b3 = dat[bt],
           lbt = b3 & 3,
           sf = b3 >> 2 & 3,
           lss = b3 >> 4,
           lcs = 0,
           s4 = 0;
          if(lbt < 2)
           if(sf & 1)
            lss |= dat[++bt] << 4 | (sf & 2 && dat[++bt] << 12);
           else
            lss = b3 >> 3;
          else{
           s4 = sf;
           if(sf < 2)
            lss |= (dat[++bt] & 63) << 4, lcs = dat[bt] >> 6 | dat[++bt] << 2;
           else if(sf == 2)
            lss |= dat[++bt] << 4 | (dat[++bt] & 3) << 12,
            lcs = dat[bt] >> 2 | dat[++bt] << 6;
           else
            lss |= dat[++bt] << 4 | (dat[++bt] & 63) << 12,
            lcs = dat[bt] >> 6 | dat[++bt] << 2 | dat[++bt] << 10;
          }
          ++bt;
          var
           buf = out ? out.subarray(st.y, st.y + st.m) : new u8(st.m),
           spl = buf.length - lss;
          if(lbt == 0)
           buf.set(dat.subarray(bt, bt += lss), spl);
          else if(lbt == 1)
           fill(buf, dat[bt++], spl);
          else{
           var hu = st.h;
           if(lbt == 2){
            var hud = rhu(dat, bt);
            lcs += bt - (bt = hud[0]);
            st.h = hu = hud[1];
           }
           else if(! hu) err(0);
           (s4 ? dhu4 : dhu)
            (dat.subarray(bt, bt += lcs), buf.subarray(spl), hu);
          }
          var ns = dat[bt++];
          if(ns){
           if(ns == 255)
            ns = (dat[bt++] | dat[bt++] << 8) + 0x7F00;
           else if(ns > 127) ns = ns - 128 << 8 | dat[bt++];
           var scm = dat[bt++];
           if(scm & 3) err(0);
           var dts = [dmlt, doct, dllt];
           for(var i = 2; i > - 1; --i){
            var md = scm >> (i << 1) + 2 & 3;
            if(md == 1){
             var rbuf = new u8([0, 0, dat[bt++]]);
             dts[i] =
              {s: rbuf.subarray(2, 3),
               n: rbuf.subarray(0, 1),
               t: new u16(rbuf.buffer, 0, 1),
               b: 0};
            }
            else if(md == 2)
             _a = rfse(dat, bt, 9 - (i & 1)), bt = _a[0], dts[i] = _a[1];
            else if(md == 3){if(! st.t) err(0); dts[i] = st.t[i];}
           }
           var
            _b = st.t = dts,
            mlt = _b[0],
            oct = _b[1],
            llt = _b[2],
            lb = dat[ebt - 1];
           if(! lb) err(0);
           var
            spos = (ebt << 3) - 8 + msb(lb) - llt.b,
            cbt = spos >> 3,
            oubt = 0,
            lst =
              (dat[cbt] | dat[cbt + 1] << 8) >> (spos & 7) & (1 << llt.b) - 1;
           cbt = (spos -= oct.b) >> 3;
           var
            ost =
              (dat[cbt] | dat[cbt + 1] << 8) >> (spos & 7) & (1 << oct.b) - 1;
           cbt = (spos -= mlt.b) >> 3;
           var
            mst =
              (dat[cbt] | dat[cbt + 1] << 8) >> (spos & 7) & (1 << mlt.b) - 1;
           for(++ns; --ns;){
            var
             llc = llt.s[lst],
             lbtr = llt.n[lst],
             mlc = mlt.s[mst],
             mbtr = mlt.n[mst],
             ofc = oct.s[ost],
             obtr = oct.n[ost];
            cbt = (spos -= ofc) >> 3;
            var
             ofp = 1 << ofc,
             off =
               ofp
               +
                ((dat[cbt] | dat[cbt + 1] << 8 | dat[cbt + 2] << 16
                | dat[cbt + 3] << 24)
                >>> (spos & 7)
                & ofp - 1);
            cbt = (spos -= mlb[mlc]) >> 3;
            var
             ml =
               mlbl[mlc]
               +
                ((dat[cbt] | dat[cbt + 1] << 8 | dat[cbt + 2] << 16)
                >> (spos & 7)
                & (1 << mlb[mlc]) - 1);
            cbt = (spos -= llb[llc]) >> 3;
            var
             ll =
               llbl[llc]
               +
                ((dat[cbt] | dat[cbt + 1] << 8 | dat[cbt + 2] << 16)
                >> (spos & 7)
                & (1 << llb[llc]) - 1);
            cbt = (spos -= lbtr) >> 3;
            lst =
             llt.t[lst]
             +
              ((dat[cbt] | dat[cbt + 1] << 8) >> (spos & 7) & (1 << lbtr) - 1);
            cbt = (spos -= mbtr) >> 3;
            mst =
             mlt.t[mst]
             +
              ((dat[cbt] | dat[cbt + 1] << 8) >> (spos & 7) & (1 << mbtr) - 1);
            cbt = (spos -= obtr) >> 3;
            ost =
             oct.t[ost]
             +
              ((dat[cbt] | dat[cbt + 1] << 8) >> (spos & 7) & (1 << obtr) - 1);
            if(off > 3){
             st.o[2] = st.o[1];
             st.o[1] = st.o[0];
             st.o[0] = off -= 3;
            }
            else{
             var idx = off - (ll != 0);
             if(idx){
              off = idx == 3 ? st.o[0] - 1 : st.o[idx];
              if(idx > 1) st.o[2] = st.o[1];
              st.o[1] = st.o[0];
              st.o[0] = off;
             }
             else
              off = st.o[0];
            }
            for(var i = 0; i < ll; ++i) buf[oubt + i] = buf[spl + i];
            oubt += ll, spl += ll;
            var stin = oubt - off;
            if(stin < 0){
             var len = - stin, bs = st.e + stin;
             if(len > ml) len = ml;
             for(var i = 0; i < len; ++i) buf[oubt + i] = st.w[bs + i];
             oubt += len, ml -= len, stin = 0;
            }
            for(var i = 0; i < ml; ++i) buf[oubt + i] = buf[stin + i];
            oubt += ml;
           }
           if(oubt != spl)
            while(spl < buf.length) buf[oubt++] = buf[spl++];
           else
            oubt = buf.length;
           if(out) st.y += oubt; else buf = slc(buf, 0, oubt);
          }
          else if(out){
           st.y += lss;
           if(spl) for(var i = 0; i < lss; ++i) buf[i] = buf[spl + i];
          }
          else if(spl) buf = slc(buf, spl);
          st.b = ebt;
          return buf;
         }
         err(2);
        }
        function cct(bufs, ol){
         if(bufs.length == 1) return bufs[0];
         var buf = new u8(ol);
         for(var i = 0, b = 0; i < bufs.length; ++i){
          var chk = bufs[i];
          buf.set(chk, b);
          b += chk.length;
         }
         return buf;
        }
        return function(dat, buf){
         var bt = 0, bufs = [], nb = + ! buf, ol = 0;
         for(; dat.length;){
          var st = rzfh(dat, nb || buf);
          if(typeof st == "object"){
           if(nb){
            buf = null;
            if(st.w.length == st.u){bufs.push(buf = st.w); ol += st.u;}
           }
           else{bufs.push(buf); st.e = 0;}
           for(; ! st.l;){
            var blk = rzb(dat, st, buf);
            if(! blk) err(5);
            if(buf)
             st.e = st.y;
            else{
             bufs.push(blk);
             ol += blk.length;
             cpw(st.w, 0, blk.length);
             st.w.set(blk, st.w.length - blk.length);
            }
           }
           bt = st.b + st.c * 4;
          }
          else
           bt = st;
          dat = dat.subarray(bt);
         }
         return cct(bufs, ol);};
       }
       ();
   function caml_zstd_initialize(unit){
    caml_decompress_input = zstd_decompress;
    return 1;
   }
   function caml_output_value_to_buffer(s, ofs, len, v, flags){
    var t = caml_output_val(v, flags);
    if(t.length > len) caml_failwith("Marshal.to_buffer: buffer overflow");
    caml_blit_bytes(t, 0, s, ofs, t.length);
    return 0;
   }
   function re_replacement_text(repl, groups, orig){
    var
     repl = caml_jsbytes_of_string(repl),
     len = repl.length,
     orig = caml_jsbytes_of_string(orig),
     res = "",
     n = 0,
     cur,
     start,
     end,
     c;
    while(n < len){
     cur = repl.charAt(n++);
     if(cur != "\\")
      res += cur;
     else{
      if(n == len) caml_failwith("Str.replace: illegal backslash sequence");
      cur = repl.charAt(n++);
      switch(cur){
        case "\\":
         res += cur; break;
        case "0":
        case "1":
        case "2":
        case "3":
        case "4":
        case "5":
        case "6":
        case "7":
        case "8":
        case "9":
         c = + cur;
         if(c * 2 >= groups.length - 1)
          caml_failwith("Str.replace: reference to unmatched group");
         start = caml_array_get(groups, c * 2);
         end = caml_array_get(groups, c * 2 + 1);
         if(start == - 1)
          caml_failwith("Str.replace: reference to unmatched group");
         res += orig.slice(start, end);
         break;
        default: res += "\\" + cur;
      }
     }
    }
    return caml_string_of_jsbytes(res);
   }
   function caml_pure_js_expr(s){
    console.error("caml_pure_js_expr: fallback to runtime evaluation\n");
    return eval(caml_jsstring_of_string(s));
   }
   function caml_blit_string(a, b, c, d, e){
    caml_blit_bytes(caml_bytes_of_string(a), b, c, d, e);
    return 0;
   }
   function blit_nat(nat1, ofs1, nat2, ofs2, len){
    for(var i = 0; i < len; i++) nat1.data[ofs1 + i] = nat2.data[ofs2 + i];
    return 0;
   }
   function core_gc_top_heap_words(){return 0;}
   function caml_unix_stat(name){
    var root = resolve_fs_device(name);
    if(! root.device.stat) caml_failwith("caml_unix_stat: not implemented");
    return root.device.stat(root.rest, true);
   }
   function caml_register_named_value(nm, v){
    caml_named_values[caml_jsbytes_of_string(nm)] = v;
    return 0;
   }
   function jsoo_create_file_extern(name, content){
    if(globalThis.jsoo_create_file)
     globalThis.jsoo_create_file(name, content);
    else{
     if(! globalThis.caml_fs_tmp) globalThis.caml_fs_tmp = [];
     globalThis.caml_fs_tmp.push({name: name, content: content});
    }
    return 0;
   }
   function caml_unix_stat_64(name){
    var r = caml_unix_stat(name);
    r[9] = caml_int64_of_int32(r[9]);
    return r;
   }
   function caml_to_js_string(s){return caml_jsstring_of_string(s);}
   function caml_ml_mutex_lock(t){
    if(t.locked)
     caml_failwith("Mutex.lock: mutex already locked. Cannot wait.");
    else
     t.locked = true;
    return 0;
   }
   function re_search_forward(re, s, pos){
    if(pos < 0 || pos > caml_ml_string_length(s))
     caml_invalid_argument("Str.search_forward");
    while(pos <= caml_ml_string_length(s)){
     var res = re_match(re, s, pos, 0);
     if(res) return res;
     pos++;
    }
    return [0];
   }
   function caml_make_vect(len, init){
    if(len < 0) caml_array_bound_error();
    var len = len + 1 | 0, b = new Array(len);
    b[0] = 0;
    for(var i = 1; i < len; i++) b[i] = init;
    return b;
   }
   function caml_ml_seek_in(chanid, pos){return caml_seek_in(chanid, pos);}
   function caml_sys_read_directory(name){
    var
     root = resolve_fs_device(name),
     a = root.device.readdir(root.rest),
     l = new Array(a.length + 1);
    l[0] = 0;
    for(var i = 0; i < a.length; i++) l[i + 1] = caml_string_of_jsbytes(a[i]);
    return l;
   }
   function caml_ml_output_char(chanid, c){
    var s = caml_string_of_jsbytes(String.fromCharCode(c));
    caml_ml_output(chanid, s, 0, 1);
    return 0;
   }
   function caml_sys_const_ostype_win32(){return os_type == "Win32" ? 1 : 0;}
   function caml_obj_is_block(x){return + (x instanceof Array);}
   function caml_obj_set_raw_field(o, i, v){return o[i + 1] = v;}
   function caml_js_var(x){
    var x = caml_jsstring_of_string(x);
    if(! x.match(/^[a-zA-Z_$][a-zA-Z_$0-9]*(\.[a-zA-Z_$][a-zA-Z_$0-9]*)*$/))
     console.error
      ('caml_js_var: "' + x
       + '" is not a valid JavaScript variable. continuing ..');
    return eval(x);
   }
   function caml_trunc_float(x){return Math.trunc(x);}
   function caml_ephe_unset_data(x){
    if(globalThis.FinalizationRegistry && globalThis.WeakRef)
     if(x[1] instanceof globalThis.FinalizationRegistry)
      for(var j = caml_ephe_key_offset; j < x.length; j++){
       var key = x[j];
       if(key instanceof globalThis.WeakRef){
        key = key.deref();
        if(key) x[1].unregister(key);
       }
      }
    x[caml_ephe_data_offset] = undefined;
    return 0;
   }
   function caml_ephe_set_data(x, data){
    if(globalThis.FinalizationRegistry && globalThis.WeakRef)
     if(! (x[1] instanceof globalThis.FinalizationRegistry)){
      x[1] =
       new
        globalThis.FinalizationRegistry
        (function(){caml_ephe_unset_data(x);});
      for(var j = caml_ephe_key_offset; j < x.length; j++){
       var key = x[j];
       if(key instanceof globalThis.WeakRef){
        key = key.deref();
        if(key) x[1].register(key, undefined, key);
       }
      }
     }
    x[caml_ephe_data_offset] = data;
    return 0;
   }
   function caml_ephe_blit_data(src, dst){
    var n = src[caml_ephe_data_offset];
    if(n === undefined)
     caml_ephe_unset_data(dst);
    else
     caml_ephe_set_data(dst, n);
    return 0;
   }
   function timezone_js_loader_instant_plus_hours(instant, hours){
    hours = caml_int64_to_float(hours);
    var
     duration =
       globalThis.TemporalPolyfill.Temporal.Duration.from({hours: hours});
    return instant.add(duration);
   }
   function length_nat(x){return x.data.length;}
   var Base_internalhash_fold_int64 = caml_hash_mix_int64;
   function caml_is_printable(c){return + (c > 31 && c < 127);}
   function caml_bytes_lessequal(s1, s2){
    s1.t & 6 && caml_convert_string_to_bytes(s1);
    s2.t & 6 && caml_convert_string_to_bytes(s2);
    return s1.c <= s2.c ? 1 : 0;
   }
   function caml_array_of_bytes(x){return caml_uint8_array_of_bytes(x);}
   function caml_equal(x, y){return + (caml_compare_val(x, y, false) == 0);}
   function re_partial_match(re, s, pos){
    if(pos < 0 || pos > caml_ml_string_length(s))
     caml_invalid_argument("Str.partial_match");
    var res = re_match(re, s, pos, 1);
    return res ? res : [0];
   }
   function caml_sys_random_seed(){
    if(globalThis.crypto)
     if(globalThis.crypto.getRandomValues){
      var a = globalThis.crypto.getRandomValues(new Int32Array(4));
      return [0, a[0], a[1], a[2], a[3]];
     }
     else if(globalThis.crypto.randomBytes){
      var a = new Int32Array(globalThis.crypto.randomBytes(16).buffer);
      return [0, a[0], a[1], a[2], a[3]];
     }
    var now = new Date().getTime(), x = now ^ 0xffffffff * Math.random();
    return [0, x];
   }
   var all_finalizers = new globalThis.Set();
   function caml_final_register_called_without_value(cb, a){
    if(globalThis.FinalizationRegistry && a instanceof Object){
     var
      x =
        new
         globalThis.FinalizationRegistry
         (function(x){all_finalizers.delete(x); cb(0); return;});
     x.register(a, x);
     all_finalizers.add(x);
    }
    return 0;
   }
   function caml_csel_value(v_cond, v_true, v_false){return v_cond ? v_true : v_false;
   }
   function caml_ba_get_2(ba, i0, i1){return ba.get(ba.offset([i0, i1]));}
   function caml_ba_uint8_set16(ba, i0, v){
    var ofs = ba.offset(i0);
    if(ofs + 1 >= ba.data.length) caml_array_bound_error();
    ba.set(ofs + 0, v & 0xff);
    ba.set(ofs + 1, v >>> 8 & 0xff);
    return 0;
   }
   function caml_lazy_reset_to_lazy(o){
    caml_obj_update_tag(o, 244, 246);
    return 0;
   }
   function timezone_js_loader_enable_for_testing(){
    globalThis.DISABLE_TIMEZONE_JS_LOADER = undefined;
   }
   function caml_js_delete(o, f){delete o[f]; return 0;}
   function caml_int_of_string(s){
    var
     r = caml_parse_sign_and_base(s),
     i = r[0],
     sign = r[1],
     base = r[2],
     len = caml_ml_string_length(s),
     threshold = - 1 >>> 0,
     c = i < len ? caml_string_unsafe_get(s, i) : 0,
     d = caml_parse_digit(c);
    if(d < 0 || d >= base) caml_failwith("int_of_string");
    var res = d;
    for(i++; i < len; i++){
     c = caml_string_unsafe_get(s, i);
     if(c == 95) continue;
     d = caml_parse_digit(c);
     if(d < 0 || d >= base) break;
     res = base * res + d;
     if(res > threshold) caml_failwith("int_of_string");
    }
    if(i != len) caml_failwith("int_of_string");
    res = sign * res;
    if(base == 10 && (res | 0) != res) caml_failwith("int_of_string");
    return res | 0;
   }
   function caml_list_mount_point(){
    var prev = 0;
    for(var i = 0; i < jsoo_mount_point.length; i++){
     var old = prev;
     prev = [0, caml_string_of_jsbytes(jsoo_mount_point[i].path), old];
    }
    return prev;
   }
   var
    caml_marshal_constants =
      {PREFIX_SMALL_BLOCK: 0x80,
       PREFIX_SMALL_INT: 0x40,
       PREFIX_SMALL_STRING: 0x20,
       CODE_INT8: 0x00,
       CODE_INT16: 0x01,
       CODE_INT32: 0x02,
       CODE_INT64: 0x03,
       CODE_SHARED8: 0x04,
       CODE_SHARED16: 0x05,
       CODE_SHARED32: 0x06,
       CODE_BLOCK32: 0x08,
       CODE_BLOCK64: 0x13,
       CODE_STRING8: 0x09,
       CODE_STRING32: 0x0A,
       CODE_DOUBLE_BIG: 0x0B,
       CODE_DOUBLE_LITTLE: 0x0C,
       CODE_DOUBLE_ARRAY8_BIG: 0x0D,
       CODE_DOUBLE_ARRAY8_LITTLE: 0x0E,
       CODE_DOUBLE_ARRAY32_BIG: 0x0F,
       CODE_DOUBLE_ARRAY32_LITTLE: 0x07,
       CODE_CODEPOINTER: 0x10,
       CODE_INFIXPOINTER: 0x11,
       CODE_CUSTOM: 0x12,
       CODE_CUSTOM_LEN: 0x18,
       CODE_CUSTOM_FIXED: 0x19};
   function caml_obj_raw_field(o, i){return o[i + 1];}
   function caml_js_equals(x, y){return + (x == y);}
   function caml_obj_compare_and_swap(x, i, old, n){
    if(x[i + 1] == old){x[i + 1] = n; return 1;}
    return 0;
   }
   function bigstring_to_typed_array(bs){return bs.data;}
   function caml_gr_arc_aux(ctx, cx, cy, ry, rx, a1, a2){
    while(a1 > a2) a2 += 360;
    a1 /= 180;
    a2 /= 180;
    var
     rot = 0,
     xPos,
     yPos,
     xPos_prev,
     yPos_prev,
     space = 2,
     num = (a2 - a1) * Math.PI * ((rx + ry) / 2) / space | 0,
     delta = (a2 - a1) * Math.PI / num,
     i = a1 * Math.PI;
    for(var j = 0; j <= num; j++){
     xPos =
      cx - rx * Math.sin(i) * Math.sin(rot * Math.PI)
      + ry * Math.cos(i) * Math.cos(rot * Math.PI);
     xPos = xPos.toFixed(2);
     yPos =
      cy + ry * Math.cos(i) * Math.sin(rot * Math.PI)
      + rx * Math.sin(i) * Math.cos(rot * Math.PI);
     yPos = yPos.toFixed(2);
     if(j == 0)
      ctx.moveTo(xPos, yPos);
     else if(xPos_prev != xPos || yPos_prev != yPos) ctx.lineTo(xPos, yPos);
     xPos_prev = xPos;
     yPos_prev = yPos;
     i -= delta;
    }
    return 0;
   }
   function caml_gr_fill_arc(x, y, rx, ry, a1, a2){
    var s = caml_gr_state_get();
    s.context.beginPath();
    caml_gr_arc_aux(s.context, x, s.height - y, rx, ry, a1, a2);
    s.context.fill();
    return 0;
   }
   function caml_ba_slice(ba, vind){
    vind = caml_js_from_array(vind);
    var num_inds = vind.length, index = [], sub_dims = [], ofs;
    if(num_inds > ba.dims.length)
     caml_invalid_argument("Bigarray.slice: too many indices");
    if(ba.layout == 0){
     for(var i = 0; i < num_inds; i++) index[i] = vind[i];
     for(; i < ba.dims.length; i++) index[i] = 0;
     sub_dims = ba.dims.slice(num_inds);
    }
    else{
     for(var i = 0; i < num_inds; i++)
      index[ba.dims.length - num_inds + i] = vind[i];
     for(var i = 0; i < ba.dims.length - num_inds; i++) index[i] = 1;
     sub_dims = ba.dims.slice(0, ba.dims.length - num_inds);
    }
    ofs = ba.offset(index);
    var
     size = caml_ba_get_size(sub_dims),
     size_per_element = caml_ba_get_size_per_element(ba.kind),
     new_data =
       ba.data.subarray
        (ofs * size_per_element, (ofs + size) * size_per_element);
    return caml_ba_create_unsafe(ba.kind, ba.layout, sub_dims, new_data);
   }
   function caml_js_wrap_callback_unsafe(f){
    return function(){
     var len = caml_js_function_arity(f), args = new Array(len);
     for(var i = 0; i < len; i++) args[i] = arguments[i];
     return caml_callback(f, args);};
   }
   function caml_ba_kind(ba){return ba.kind;}
   function timezone_js_loader_disable_for_testing(){globalThis.DISABLE_TIMEZONE_JS_LOADER = true;
   }
   function caml_alloc_dummy_infix(){
    return function f(x){return caml_call_gen(f.fun, [x]);};
   }
   function caml_js_strict_equals(x, y){return + (x === y);}
   function caml_js_fun_call(f, a){
    switch(a.length){
      case 1:
       return f();
      case 2:
       return f(a[1]);
      case 3:
       return f(a[1], a[2]);
      case 4:
       return f(a[1], a[2], a[3]);
      case 5:
       return f(a[1], a[2], a[3], a[4]);
      case 6:
       return f(a[1], a[2], a[3], a[4], a[5]);
      case 7:
       return f(a[1], a[2], a[3], a[4], a[5], a[6]);
      case 8:
       return f(a[1], a[2], a[3], a[4], a[5], a[6], a[7]);
    }
    return f.apply(null, caml_js_from_array(a));
   }
   function caml_gc_major_slice(work){return 0;}
   function caml_js_pure_expr(f){return caml_callback(f, [0]);}
   var core_array_unsafe_int_blit = caml_array_blit;
   function compare_digits_nat(nat1, ofs1, nat2, ofs2){
    if(nat1.data[ofs1] > nat2.data[ofs2]) return 1;
    if(nat1.data[ofs1] < nat2.data[ofs2]) return - 1;
    return 0;
   }
   function caml_ml_input(chanid, b, i, l){
    var ba = caml_uint8_array_of_bytes(b);
    return caml_ml_input_block(chanid, ba, i, l);
   }
   function caml_gr_wait_event(_evl){
    caml_failwith
     ("caml_gr_wait_event not Implemented: use Graphics_js instead");
   }
   function caml_gr_sigio_handler(){return 0;}
   function caml_memprof_discard(t){return 0;}
   function caml_record_backtrace(b){
    caml_record_backtrace_flag = b;
    return 0;
   }
   function caml_unix_cleanup(){}
   function caml_sys_get_config(){
    return [0, caml_string_of_jsbytes(os_type), 32, 0];
   }
   function caml_sys_const_backend_type(){
    return [0, caml_string_of_jsbytes("js_of_ocaml")];
   }
   function core_heap_block_is_heap_block(x){return + (x instanceof Array);}
   function caml_obj_is_shared(x){return 1;}
   function core_gc_promoted_words(){return 0;}
   function caml_dummy_obj_is_stack(x){
    throw new
           Error
           (`BUG: this function should be unreachable; please report to compiler or base devs.`);
   }
   function caml_ml_out_channels_list(){
    var l = 0;
    for(var c = 0; c < caml_ml_channels.length; c++)
     if
      (caml_ml_channels[c] && caml_ml_channels[c].opened
       && caml_ml_channels[c].out)
      l = [0, caml_ml_channels[c].fd, l];
    return l;
   }
   function caml_asinh_float(x){return Math.asinh(x);}
   function caml_pos_out(chanid){
    var chan = caml_ml_channels[chanid];
    return chan.offset + chan.buffer_curr;
   }
   function bigstring_of_array_buffer(ab){
    var ta = new Uint8Array(ab);
    return caml_ba_create_unsafe(12, 0, [ta.length], ta);
   }
   function caml_mod(x, y){if(y == 0) caml_raise_zero_divide(); return x % y;}
   function caml_ba_init(){return 0;}
   function caml_unix_filedescr_of_fd(x){return x;}
   function re_string_match(re, s, pos){
    if(pos < 0 || pos > caml_ml_string_length(s))
     caml_invalid_argument("Str.string_match");
    var res = re_match(re, s, pos, 0);
    return res ? res : [0];
   }
   function BigStringReader(bs, i){this.s = bs; this.i = i;}
   BigStringReader.prototype =
    {read8u: function(){return caml_ba_get_1(this.s, this.i++);},
     read8s: function(){return caml_ba_get_1(this.s, this.i++) << 24 >> 24;},
     read16u:
     function(){
      var s = this.s, i = this.i;
      this.i = i + 2;
      return caml_ba_get_1(s, i) << 8 | caml_ba_get_1(s, i + 1);
     },
     read16s:
     function(){
      var s = this.s, i = this.i;
      this.i = i + 2;
      return caml_ba_get_1(s, i) << 24 >> 16 | caml_ba_get_1(s, i + 1);
     },
     read32u:
     function(){
      var s = this.s, i = this.i;
      this.i = i + 4;
      return (caml_ba_get_1(s, i) << 24 | caml_ba_get_1(s, i + 1) << 16
             | caml_ba_get_1(s, i + 2) << 8
             | caml_ba_get_1(s, i + 3))
             >>> 0;
     },
     read32s:
     function(){
      var s = this.s, i = this.i;
      this.i = i + 4;
      return caml_ba_get_1(s, i) << 24 | caml_ba_get_1(s, i + 1) << 16
             | caml_ba_get_1(s, i + 2) << 8
             | caml_ba_get_1(s, i + 3);
     },
     readstr:
     function(len){
      var i = this.i, arr = new Array(len);
      for(var j = 0; j < len; j++) arr[j] = caml_ba_get_1(this.s, i + j);
      this.i = i + len;
      return caml_string_of_array(arr);
     },
     readuint8array:
     function(len){
      var i = this.i, offset = this.offset(i);
      this.i = i + len;
      return this.s.data.subarray(offset, offset + len);
     }};
   function caml_gr_dump_image(im){
    var data = [0];
    for(var i = 0; i < im.height; i++){
     data[i + 1] = [0];
     for(var j = 0; j < im.width; j++){
      var
       o = i * (im.width * 4) + j * 4,
       r = im.data[o + 0],
       g = im.data[o + 1],
       b = im.data[o + 2];
      data[i + 1][j + 1] = (r << 16) + (g << 8) + b;
     }
    }
    return data;
   }
   function caml_ba_get_generic(ba, i){
    var ofs = ba.offset(caml_js_from_array(i));
    return ba.get(ofs);
   }
   function caml_unix_startup(){}
   function caml_get_exception_backtrace(){return 0;}
   function caml_format_float(fmt, x){
    function toFixed(x, dp){
     if(Math.abs(x) < 1.0)
      return x.toFixed(dp);
     else{
      var e = parseInt(x.toString().split("+")[1]);
      if(e > 20){
       e -= 20;
       x /= Math.pow(10, e);
       x += new Array(e + 1).join("0");
       if(dp > 0) x = x + "." + new Array(dp + 1).join("0");
       return x;
      }
      else
       return x.toFixed(dp);
     }
    }
    var s, f = caml_parse_format(fmt), prec = f.prec < 0 ? 6 : f.prec;
    if(x < 0 || x == 0 && 1 / x == - Infinity){f.sign = - 1; x = - x;}
    if(isNaN(x)){
     s = "nan";
     f.filler = " ";
    }
    else if(! isFinite(x)){
     s = "inf";
     f.filler = " ";
    }
    else
     switch(f.conv){
       case "e":
        var s = x.toExponential(prec), i = s.length;
        if(s.charAt(i - 3) == "e")
         s = s.slice(0, i - 1) + "0" + s.slice(i - 1);
        break;
       case "f":
        s = toFixed(x, prec); break;
       case "g":
        prec = prec ? prec : 1;
        s = x.toExponential(prec - 1);
        var j = s.indexOf("e"), exp = + s.slice(j + 1);
        if(exp < - 4 || x >= 1e21 || x.toFixed(0).length > prec){
         var i = j - 1;
         while(s.charAt(i) == "0") i--;
         if(s.charAt(i) == ".") i--;
         s = s.slice(0, i + 1) + s.slice(j);
         i = s.length;
         if(s.charAt(i - 3) == "e")
          s = s.slice(0, i - 1) + "0" + s.slice(i - 1);
         break;
        }
        else{
         var p = prec;
         if(exp < 0){
          p -= exp + 1;
          s = x.toFixed(p);
         }
         else
          while(s = x.toFixed(p), s.length > prec + 1) p--;
         if(p){
          var i = s.length - 1;
          while(s.charAt(i) == "0") i--;
          if(s.charAt(i) == ".") i--;
          s = s.slice(0, i + 1);
         }
        }
        break;
     }
    return caml_finish_formatting(f, s);
   }
   function caml_mount_autoload(name, f){
    var
     path = caml_make_path(name),
     name = caml_trailing_slash(path.join("/"));
    jsoo_mount_point.push({path: name, device: new MlFakeDevice(name, f)});
    return 0;
   }
   function Base_int_math_int_clz(x){return Base_int_math_int32_clz(x);}
   function caml_string_lessthan(s1, s2){return s1 < s2 ? 1 : 0;}
   function caml_string_greaterthan(s1, s2){return caml_string_lessthan(s2, s1);
   }
   function caml_div(x, y){
    if(y == 0) caml_raise_zero_divide();
    return x / y | 0;
   }
   function caml_obj_dup(x){
    var l = x.length, a = new Array(l);
    for(var i = 0; i < l; i++) a[i] = x[i];
    return a;
   }
   function caml_ephe_get_data_copy(x){
    return x[caml_ephe_data_offset] === undefined
            ? 0
            : [0, caml_obj_dup(x[caml_ephe_data_offset])];
   }
   function caml_memprof_start(rate, stack_size, tracker){return 0;}
   function caml_sys_get_argv(a){return [0, caml_argv[1], caml_argv];}
   function caml_ml_domain_set_name(_name){return 0;}
   function caml_js_to_bool(x){return + x;}
   function caml_gr_create_image(x, y){
    var s = caml_gr_state_get();
    return s.context.createImageData(x, y);
   }
   function caml_ephe_get_key_copy(x, i){
    if(i < 0 || caml_ephe_key_offset + i >= x.length)
     caml_invalid_argument("Weak.get_copy");
    var y = caml_ephe_get_key(x, i);
    if(y === 0) return y;
    var z = y[1];
    if(z instanceof Array) return [0, caml_obj_dup(z)];
    return y;
   }
   function caml_lessthan(x, y){return + (caml_compare_val(x, y, false) < 0);}
   function caml_raw_backtrace_next_slot(){return 0;}
   function bigstringaf_memcmp_string(ba, ba_off, str, str_off, len){
    for(var i = 0; i < len; i++){
     var
      c =
        caml_int_compare
         (caml_ba_get_1(ba, ba_off + i),
          caml_string_unsafe_get(str, str_off + i));
     if(c != 0) return c;
    }
    return 0;
   }
   function timezone_js_loader_compare_instants(a, b){
    return globalThis.TemporalPolyfill.Temporal.Instant.compare(a, b);
   }
   function caml_build_symbols(toc){
    var symb;
    while(toc)
     if(caml_jsstring_of_string(toc[1][1]) == "SYJS"){symb = toc[1][2]; break;}
     else
      toc = toc[2];
    var r = {};
    if(symb)
     for(var i = 1; i < symb.length; i++)
      r[caml_jsstring_of_string(symb[i][1])] = symb[i][2];
    return r;
   }
   function caml_register_global(n, v, name_opt){
    if(name_opt){
     var name = name_opt;
     if(globalThis.toplevelReloc)
      n = caml_callback(globalThis.toplevelReloc, [name]);
     else if(caml_global_data.toc){
      if(! caml_global_data.symbols)
       caml_global_data.symbols = caml_build_symbols(caml_global_data.toc);
      var nid = caml_global_data.symbols[name];
      if(nid >= 0)
       n = nid;
      else
       caml_failwith("caml_register_global: cannot locate " + name);
     }
    }
    caml_global_data[n + 1] = v;
    if(name_opt) caml_global_data[name_opt] = v;
   }
   function mult_nat(nat1, ofs1, len1, nat2, ofs2, len2, nat3, ofs3, len3){
    var carry = 0;
    for(var i = 0; i < len3; i++)
     carry +=
      mult_digit_nat
       (nat1, ofs1 + i, len1 - i, nat2, ofs2, len2, nat3, ofs3 + i);
    return carry;
   }
   function square_nat(nat1, ofs1, len1, nat2, ofs2, len2){
    var carry = 0;
    carry += add_nat(nat1, ofs1, len1, nat1, ofs1, len1, 0);
    carry += mult_nat(nat1, ofs1, len1, nat2, ofs2, len2, nat2, ofs2, len2);
    return carry;
   }
   function core_md5_digest_subbigstring(buf, ofs, len, res){
    var bytes = caml_create_bytes(len);
    bigstring_blit_bigstring_bytes_stub(buf, ofs, bytes, 0, len);
    var res2 = caml_md5_string(caml_string_of_bytes(bytes), 0, len);
    caml_blit_string(res2, 0, res, 0, 16);
    return 0;
   }
   function bigstring_memmem_bytecode
   (haystack, needle, haystack_pos, haystack_len, needle_pos, needle_len){
    var i = 0, lim = haystack_len - needle_len;
    for(var i = 0; i <= lim; ++i){
     var matches = true;
     for(var j = 0; j < needle_len; ++j)
      if
       (caml_ba_get_1(haystack, haystack_pos + i + j)
        != caml_ba_get_1(needle, needle_pos + j)){matches = false; break;}
     if(matches) return haystack_pos + i;
    }
    return - 1;
   }
   function caml_js_from_float(x){return x;}
   function caml_floatarray_create(len){
    if(len < 0) caml_array_bound_error();
    var len = len + 1 | 0, b = new Array(len);
    b[0] = 254;
    for(var i = 1; i < len; i++) b[i] = 0;
    return b;
   }
   function caml_gc_stat(){
    return [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
   }
   function caml_get_major_credit(n){return 0;}
   function caml_ml_open_descriptor_in_with_flags(fd, flags){return caml_ml_open_descriptor_in(fd);
   }
   function bigstringaf_memchr(ba, ba_off, chr, len){
    for(var i = 0; i < len; i++)
     if(caml_ba_get_1(ba, ba_off + i) == chr) return ba_off + i;
    return - 1;
   }
   function caml_sys_modify_argv(arg){caml_argv = arg; return 0;}
   var caml_method_cache = [];
   function caml_get_public_method(obj, tag, cacheid){
    var meths = obj[1], ofs = caml_method_cache[cacheid];
    if(ofs === undefined)
     for(var i = caml_method_cache.length; i < cacheid; i++)
      caml_method_cache[i] = 0;
    else if(meths[ofs] === tag) return meths[ofs - 1];
    var li = 3, hi = meths[1] * 2 + 1, mi;
    while(li < hi){
     mi = li + hi >> 1 | 1;
     if(tag < meths[mi + 1]) hi = mi - 2; else li = mi;
    }
    caml_method_cache[cacheid] = li + 1;
    return tag == meths[li + 1] ? meths[li] : 0;
   }
   function bin_prot_blit_buf_bytes_stub(src_pos, src, dst_pos, dst, len){
    return caml_bigstring_blit_ba_to_bytes(src, src_pos, dst, dst_pos, len);
   }
   function caml_js_get_console(){
    var
     c = console,
     m =
       ["log",
        "debug",
        "info",
        "warn",
        "error",
        "assert",
        "dir",
        "dirxml",
        "trace",
        "group",
        "groupCollapsed",
        "groupEnd",
        "time",
        "timeEnd"];
    function f(){}
    for(var i = 0; i < m.length; i++) if(! c[m[i]]) c[m[i]] = f;
    return c;
   }
   function caml_sys_unsafe_getenv(name){return caml_sys_getenv(name);}
   function caml_round_float(x){
    if(x >= 0){
     var y = Math.floor(x);
     return x - y >= 0.5 ? y + 1 : y;
    }
    else{var y = Math.ceil(x); return y - x >= 0.5 ? y - 1 : y;}
   }
   function caml_ojs_new_arr(c, a){
    switch(a.length){
      case 0:
       return new c;
      case 1:
       return new c(a[0]);
      case 2:
       return new c(a[0], a[1]);
      case 3:
       return new c(a[0], a[1], a[2]);
      case 4:
       return new c(a[0], a[1], a[2], a[3]);
      case 5:
       return new c(a[0], a[1], a[2], a[3], a[4]);
      case 6:
       return new c(a[0], a[1], a[2], a[3], a[4], a[5]);
      case 7:
       return new c(a[0], a[1], a[2], a[3], a[4], a[5], a[6]);
    }
    function F(){return c.apply(this, a);}
    F.prototype = c.prototype;
    return new F;
   }
   function complement_nat(nat, ofs, len){
    for(var i = 0; i < len; i++)
     nat.data[ofs + i] = (- 1 >>> 0) - (nat.data[ofs + i] >>> 0);
   }
   var caml_domain_dls = [0];
   function caml_domain_dls_set(a){caml_domain_dls = a;}
   function caml_obj_tag(x){
    if(x instanceof Array && x[0] == x[0] >>> 0)
     return x[0];
    else if(caml_is_ml_bytes(x))
     return 252;
    else if(caml_is_ml_string(x))
     return 252;
    else if(x instanceof Function || typeof x == "function")
     return 247;
    else if(x && x.caml_custom) return 255; else return 1000;
   }
   function caml_lazy_read_result(o){
    return caml_obj_tag(o) == 250 ? o[1] : o;
   }
   var caml_js_regexps = {amp: /&/g, lt: /</g, quot: /\"/g, all: /[&<\"]/};
   function caml_js_html_escape(s){
    if(! caml_js_regexps.all.test(s)) return s;
    return s.replace(caml_js_regexps.amp, "&amp;").replace
             (caml_js_regexps.lt, "&lt;").replace
            (caml_js_regexps.quot, "&quot;");
   }
   function caml_ba_dim_2(ba){return caml_ba_dim(ba, 1);}
   function caml_js_wrap_meth_callback_arguments(f){
    return function(){
     var len = arguments.length, args = new Array(len);
     for(var i = 0; i < len; i++) args[i] = arguments[i];
     return caml_callback(f, [this, args]);};
   }
   function caml_sinh_float(x){return Math.sinh(x);}
   function core_gc_major_plus_minor_words(){return 0;}
   function caml_ldexp_float(x, exp){
    exp |= 0;
    if(exp > 1023){
     exp -= 1023;
     x *= Math.pow(2, 1023);
     if(exp > 1023){exp -= 1023; x *= Math.pow(2, 1023);}
    }
    if(exp < - 1023){exp += 1023; x *= Math.pow(2, - 1023);}
    x *= Math.pow(2, exp);
    return x;
   }
   function caml_gr_state_set(ctx){
    caml_gr_state = ctx;
    caml_gr_state_init();
    return 0;
   }
   function caml_js_wrap_callback_strict(arity, f){
    return function(){
     var
      n = arguments.length,
      args = new Array(arity),
      len = Math.min(arguments.length, arity);
     for(var i = 0; i < len; i++) args[i] = arguments[i];
     return caml_callback(f, args);};
   }
   function caml_gc_minor_words(unit){return 0;}
   function caml_get_current_callstack(){return [0];}
   function land_digit_nat(nat1, ofs1, nat2, ofs2){nat1.data[ofs1] &= nat2.data[ofs2]; return 0;
   }
   function caml_int64_mod(x, y){return x.mod(y);}
   function caml_obj_set_tag(x, tag){x[0] = tag; return 0;}
   function caml_int32_bswap(x){
    return (x & 0x000000FF) << 24 | (x & 0x0000FF00) << 8
           | (x & 0x00FF0000) >>> 8
           | (x & 0xFF000000) >>> 24;
   }
   function caml_ba_set_3(ba, i0, i1, i2, v){
    ba.set(ba.offset([i0, i1, i2]), v);
    return 0;
   }
   function caml_js_instanceof(o, c){return o instanceof c ? 1 : 0;}
   function caml_get_major_bucket(n){return 0;}
   function nth_digit_nat_native(nat, ofs){return nat.data[ofs];}
   function set_digit_nat_native(nat, ofs, digit){nat.data[ofs] = digit; return 0;
   }
   function caml_string_set64(s, i, i64){caml_failwith("caml_string_set64");}
   function caml_gr_state_create(canvas, w, h){
    var context = canvas.getContext("2d");
    return {context: context,
            canvas: canvas,
            x: 0,
            y: 0,
            width: w,
            height: h,
            line_width: 1,
            font: caml_string_of_jsbytes("fixed"),
            text_size: 26,
            color: 0x000000,
            title: caml_string_of_jsbytes("")};
   }
   function caml_gr_draw_arc(x, y, rx, ry, a1, a2){
    var s = caml_gr_state_get();
    s.context.beginPath();
    caml_gr_arc_aux(s.context, x, s.height - y, rx, ry, a1, a2);
    s.context.stroke();
    return 0;
   }
   function caml_ba_map_file(vfd, kind, layout, shared, dims, pos){caml_failwith("caml_ba_map_file not implemented");
   }
   function caml_ba_map_file_bytecode(argv, argn){
    return caml_ba_map_file
            (argv[0], argv[1], argv[2], argv[3], argv[4], argv[5]);
   }
   function caml_ba_create_from(data1, data2, jstyp, kind, layout, dims){
    if(data2 || caml_ba_get_size_per_element(kind) == 2)
     caml_invalid_argument
      ("caml_ba_create_from: use return caml_ba_create_unsafe");
    return caml_ba_create_unsafe(kind, layout, dims, data1);
   }
   function caml_tanh_float(x){return Math.tanh(x);}
   function Base_int_math_int_ctz(x){return Base_int_math_int32_ctz(x);}
   function bigstring_blit_string_bigstring_stub
   (src, src_pos, dst, dst_pos, len){
    return caml_bigstring_blit_string_to_ba(src, src_pos, dst, dst_pos, len);
   }
   function caml_runtime_events_start(){return 0;}
   function caml_gr_draw_str(str){
    var s = caml_gr_state_get(), m = s.context.measureText(str), dx = m.width;
    s.context.fillText(str, s.x, s.height - s.y);
    s.x += dx | 0;
    return 0;
   }
   function caml_gr_draw_string(str){
    caml_gr_draw_str(caml_jsstring_of_string(str));
    return 0;
   }
   function caml_gr_draw_char(c){
    caml_gr_draw_str(String.fromCharCode(c));
    return 0;
   }
   function caml_unmount(name){
    var
     path = caml_make_path(name),
     name = caml_trailing_slash(path.join("/")),
     idx = - 1;
    for(var i = 0; i < jsoo_mount_point.length; i++)
     if(jsoo_mount_point[i].path == name) idx = i;
    if(idx > - 1) jsoo_mount_point.splice(idx, 1);
    return 0;
   }
   function caml_input_value_from_string(s, ofs){
    var reader = new MlStringReader(s, typeof ofs == "number" ? ofs : ofs[0]);
    return caml_input_value_from_reader(reader, ofs);
   }
   function caml_ml_pos_in_64(chanid){
    return caml_int64_of_float(caml_pos_in(chanid));
   }
   function caml_gr_draw_image(im, x, y){
    var s = caml_gr_state_get();
    if(! im.image){
     var canvas = document.createElement("canvas");
     canvas.width = s.width;
     canvas.height = s.height;
     canvas.getContext("2d").putImageData(im, 0, 0);
     var image = new globalThis.Image();
     image.onload =
      function(){
       s.context.drawImage(image, x, s.height - im.height - y);
       im.image = image;
      };
     image.src = canvas.toDataURL("image/png");
    }
    else
     s.context.drawImage(im.image, x, s.height - im.height - y);
    return 0;
   }
   function caml_register_channel_for_spacetime(_channel){return 0;}
   function caml_string_set(s, i, c){caml_failwith("caml_string_set");}
   function caml_sys_rmdir(name){
    var root = resolve_fs_device(name);
    root.device.rmdir(root.rest);
    return 0;
   }
   function timezone_js_loader_from_epoch_seconds(seconds){
    return globalThis.TemporalPolyfill.Temporal.Instant.fromEpochSeconds
            (caml_int64_to_float(seconds));
   }
   function caml_unix_symlink(to_dir, src, dst){
    var src_root = resolve_fs_device(src), dst_root = resolve_fs_device(dst);
    if(src_root.device != dst_root.device)
     caml_failwith
      ("caml_unix_symlink: cannot symlink between two filesystems");
    if(! src_root.device.symlink)
     caml_failwith("caml_unix_symlink: not implemented");
    return src_root.device.symlink(to_dir, src_root.rest, dst_root.rest, true);
   }
   function Base_int_math_int64_ctz(x){
    if(caml_int64_is_zero(x)) return 64;
    var n = 1;
    function is_zero(x){return caml_int64_is_zero(x);}
    function land(x, y){return caml_int64_and(x, y);}
    function small_int64(x){return caml_int64_create_lo_mi_hi(x, 0, 0);}
    if
     (is_zero(land(x, caml_int64_create_lo_mi_hi(0xFFFFFF, 0x0000FF, 0x0000)))){n = n + 32; x = caml_int64_shift_right_unsigned(x, 32);}
    if(is_zero(land(x, small_int64(0x00FFFF)))){
     n = n + 16;
     x = caml_int64_shift_right_unsigned(x, 16);
    }
    if(is_zero(land(x, small_int64(0x0000FF)))){
     n = n + 8;
     x = caml_int64_shift_right_unsigned(x, 8);
    }
    if(is_zero(land(x, small_int64(0x00000F)))){
     n = n + 4;
     x = caml_int64_shift_right_unsigned(x, 4);
    }
    if(is_zero(land(x, small_int64(0x000003)))){
     n = n + 2;
     x = caml_int64_shift_right_unsigned(x, 2);
    }
    return n - caml_int64_to_int32(caml_int64_and(x, small_int64(0x000001)));
   }
   function caml_ml_pos_out(chanid){return caml_pos_out(chanid);}
   var core_array_unsafe_float_blit = caml_array_blit;
   function Base_caml_exn_is_most_recent_exn(x){return 1;}
   function caml_spacetime_enabled(_unit){return 0;}
   function caml_bytes_notequal(s1, s2){return 1 - caml_bytes_equal(s1, s2);}
   function caml_runtime_parameters(_unit){return caml_string_of_jsbytes("");}
   function caml_js_object(a){
    var o = {};
    for(var i = 1; i < a.length; i++){
     var p = a[i];
     o[caml_jsstring_of_string(p[1])] = p[2];
    }
    return o;
   }
   function caml_ba_create(kind, layout, dims_ml){
    var
     dims = caml_js_from_array(dims_ml),
     data = caml_ba_create_buffer(kind, caml_ba_get_size(dims));
    return caml_ba_create_unsafe(kind, layout, dims, data);
   }
   function caml_gr_remember_mode(){
    caml_failwith("caml_gr_remember_mode not Implemented");
   }
   function Base_internalhash_get_hash_value(seed){
    var h = caml_hash_mix_final(seed);
    return h & 0x3FFFFFFF;
   }
   function caml_fma_float(x, y, z){
    var
     SPLIT = Math.pow(2, 27) + 1,
     MIN_VALUE = Math.pow(2, - 1022),
     EPSILON = Math.pow(2, - 52),
     C = 416,
     A = Math.pow(2, + C),
     B = Math.pow(2, - C);
    function multiply(a, b){
     var
      at = SPLIT * a,
      ahi = at - (at - a),
      alo = a - ahi,
      bt = SPLIT * b,
      bhi = bt - (bt - b),
      blo = b - bhi,
      p = a * b,
      e = ahi * bhi - p + ahi * blo + alo * bhi + alo * blo;
     return {p: p, e: e};
    }
    function add(a, b){
     var s = a + b, v = s - a, e = a - (s - v) + (b - v);
     return {s: s, e: e};
    }
    function adjust(x, y){
     return x !== 0 && y !== 0 && SPLIT * x - (SPLIT * x - x) === x
             ? x * (1 + (x < 0 ? - 1 : + 1) * (y < 0 ? - 1 : + 1) * EPSILON)
             : x;
    }
    if
     (x === 0 || x !== x || x === + (1 / 0) || x === - (1 / 0) || y === 0
      || y !== y
      || y === + (1 / 0)
      || y === - (1 / 0))
     return x * y + z;
    if(z === 0) return x * y;
    if(z !== z || z === + (1 / 0) || z === - (1 / 0)) return z;
    var scale = 1;
    while(Math.abs(x) > A){scale *= A; x *= B;}
    while(Math.abs(y) > A){scale *= A; y *= B;}
    if(scale === 1 / 0) return x * y * scale;
    while(Math.abs(x) < B){scale *= B; x *= A;}
    while(Math.abs(y) < B){scale *= B; y *= A;}
    if(scale === 0) return z;
    var xs = x, ys = y, zs = z / scale;
    if(Math.abs(zs) > Math.abs(xs * ys) * 4 / EPSILON) return z;
    if(Math.abs(zs) < Math.abs(xs * ys) * EPSILON / 4 * EPSILON / 4)
     zs = (z < 0 ? - 1 : + 1) * MIN_VALUE;
    var
     xy = multiply(xs, ys),
     s = add(xy.p, zs),
     u = add(xy.e, s.e),
     i = add(s.s, u.s),
     f = i.s + adjust(i.e, u.e);
    if(f === 0) return f;
    var fs = f * scale;
    if(Math.abs(fs) > MIN_VALUE) return fs;
    return fs + adjust(f - fs / scale, i.e) * scale;
   }
   function caml_recommended_domain_count(unit){return 1;}
   function caml_bswap16(x){return (x & 0x00FF) << 8 | (x & 0xFF00) >> 8;}
   function caml_ml_set_binary_mode(chanid, mode){
    var chan = caml_ml_channels[chanid];
    chan.file.flags.text = ! mode;
    chan.file.flags.binary = mode;
    return 0;
   }
   function caml_final_register(){return 0;}
   function caml_gr_draw_rect(x, y, w, h){
    var s = caml_gr_state_get();
    s.context.strokeRect(x, s.height - y, w, - h);
    return 0;
   }
   function caml_string_get16(s, i){
    if(i >>> 0 >= caml_ml_string_length(s) - 1) caml_string_bound_error();
    var
     b1 = caml_string_unsafe_get(s, i),
     b2 = caml_string_unsafe_get(s, i + 1);
    return b2 << 8 | b1;
   }
   function timezone_js_loader_now(){
    return globalThis.TemporalPolyfill.Temporal.Now.instant();
   }
   function core_gc_major_collections(){return 0;}
   function caml_js_to_int32(x){return x | 0;}
   function caml_output_value(chanid, v, flags){
    var s = caml_output_value_to_string(v, flags);
    caml_ml_output(chanid, s, 0, caml_ml_string_length(s));
    return 0;
   }
   function caml_ml_output_bigarray(chanid, buffer, offset, len){
    var buffer = caml_ba_to_typed_array(buffer);
    return caml_ml_output_ta(chanid, buffer, offset, len);
   }
   function caml_ba_get_3(ba, i0, i1, i2){
    return ba.get(ba.offset([i0, i1, i2]));
   }
   function caml_ephe_blit_key(a1, i1, a2, i2, len){
    caml_array_blit
     (a1,
      caml_ephe_key_offset + i1 - 1,
      a2,
      caml_ephe_key_offset + i2 - 1,
      len);
    return 0;
   }
   var caml_initial_time = new Date().getTime() * 0.001;
   function caml_sys_time(){
    var now = new Date().getTime();
    return now * 0.001 - caml_initial_time;
   }
   function caml_sys_time_include_children(b){return caml_sys_time();}
   function Base_clear_caml_backtrace_pos(x){return 0;}
   function caml_unix_getpwuid(unit){caml_raise_not_found();}
   function timezone_js_loader_epoch_seconds(instant){return caml_int64_of_float(instant.epochSeconds);
   }
   function caml_domain_dls_get(unit){return caml_domain_dls;}
   function caml_bytes_get32(s, i){
    if(i >>> 0 >= s.l - 3) caml_bytes_bound_error();
    var
     b1 = caml_bytes_unsafe_get(s, i),
     b2 = caml_bytes_unsafe_get(s, i + 1),
     b3 = caml_bytes_unsafe_get(s, i + 2),
     b4 = caml_bytes_unsafe_get(s, i + 3);
    return b4 << 24 | b3 << 16 | b2 << 8 | b1;
   }
   function caml_frexp_float(x){
    if(x == 0 || ! isFinite(x)) return [0, x, 0];
    var neg = x < 0;
    if(neg) x = - x;
    var exp = Math.max(- 1023, jsoo_floor_log2(x) + 1);
    x *= Math.pow(2, - exp);
    while(x < 0.5){x *= 2; exp--;}
    while(x >= 1){x *= 0.5; exp++;}
    if(neg) x = - x;
    return [0, x, exp];
   }
   function bigstring_blit_bytes_bigstring_stub
   (src, src_pos, dst, dst_pos, len){
    return caml_bigstring_blit_bytes_to_ba(src, src_pos, dst, dst_pos, len);
   }
   function core_time_ns_format(time, format){
    var
     d = new Date(time * 1000),
     formatjs = caml_jsbytes_of_string(format),
     jstring = joo_global_object.strftime(formatjs, d);
    return caml_string_of_jsbytes(jstring);
   }
   function caml_string_get64(s, i){
    if(i >>> 0 >= caml_ml_string_length(s) - 7) caml_string_bound_error();
    var a = new Array(8);
    for(var j = 0; j < 8; j++) a[7 - j] = caml_string_unsafe_get(s, i + j);
    return caml_int64_of_bytes(a);
   }
   function caml_js_error_option_of_exception(exn){
    if(exn.js_error) return [0, exn.js_error];
    return 0;
   }
   function caml_ml_pos_out_64(chanid){
    return caml_int64_of_float(caml_pos_out(chanid));
   }
   function caml_unix_findclose(dir_handle){return caml_unix_closedir(dir_handle);
   }
   function caml_gr_close_subwindow(a){
    caml_failwith("caml_gr_close_subwindow not Implemented");
   }
   function caml_floatarray_blit(a1, i1, a2, i2, len){
    if(i2 <= i1)
     for(var j = 1; j <= len; j++) a2[i2 + j] = a1[i1 + j];
    else
     for(var j = len; j >= 1; j--) a2[i2 + j] = a1[i1 + j];
    return 0;
   }
   function caml_get_minor_free(unit){return 0;}
   function caml_set_static_env(k, v){
    if(! globalThis.jsoo_static_env) globalThis.jsoo_static_env = {};
    globalThis.jsoo_static_env[k] = v;
    return 0;
   }
   function caml_ba_change_layout(ba, layout){
    if(ba.layout == layout) return ba;
    var new_dims = [];
    for(var i = 0; i < ba.dims.length; i++)
     new_dims[i] = ba.dims[ba.dims.length - i - 1];
    return caml_ba_create_unsafe(ba.kind, layout, new_dims, ba.data);
   }
   function Base_hash_double(d){return caml_hash(1, 1, 0, d);}
   function caml_js_new(c, a){
    switch(a.length){
      case 1:
       return new c;
      case 2:
       return new c(a[1]);
      case 3:
       return new c(a[1], a[2]);
      case 4:
       return new c(a[1], a[2], a[3]);
      case 5:
       return new c(a[1], a[2], a[3], a[4]);
      case 6:
       return new c(a[1], a[2], a[3], a[4], a[5]);
      case 7:
       return new c(a[1], a[2], a[3], a[4], a[5], a[6]);
      case 8:
       return new c(a[1], a[2], a[3], a[4], a[5], a[6], a[7]);
    }
    function F(){return c.apply(this, caml_js_from_array(a));}
    F.prototype = c.prototype;
    return new F;
   }
   function caml_ml_open_descriptor_out(fd){
    var file = caml_sys_fds[fd];
    if(file.flags.rdonly) caml_raise_sys_error("fd " + fd + " is readonly");
    var
     buffered = file.flags.buffered !== undefined ? file.flags.buffered : 1,
     channel =
       {file: file,
        offset: file.flags.append ? file.length() : 0,
        fd: fd,
        opened: true,
        out: true,
        buffer_curr: 0,
        buffer: new Uint8Array(65536),
        buffered: buffered};
    caml_ml_channels[channel.fd] = channel;
    return channel.fd;
   }
   function caml_ml_open_descriptor_out_with_flags(fd, flags){return caml_ml_open_descriptor_out(fd);
   }
   function bigstring_alloc_v2(size){return caml_ba_create(12, 0, [0, size]);}
   function caml_gr_current_y(){var s = caml_gr_state_get(); return s.y;}
   function caml_format_int(fmt, i){
    if(caml_jsbytes_of_string(fmt) == "%d")
     return caml_string_of_jsbytes("" + i);
    var f = caml_parse_format(fmt);
    if(i < 0) if(f.signedconv){f.sign = - 1; i = - i;} else i >>>= 0;
    var s = i.toString(f.base);
    if(f.prec >= 0){
     f.filler = " ";
     var n = f.prec - s.length;
     if(n > 0) s = caml_str_repeat(n, "0") + s;
    }
    return caml_finish_formatting(f, s);
   }
   function core_gc_heap_words(){return 0;}
   function jsoo_effect_not_supported(){
    caml_failwith("Effect handlers are not supported");
   }
   var caml_ml_domain_unique_token_ = [0];
   function caml_ml_domain_unique_token(unit){return caml_ml_domain_unique_token_;
   }
   function caml_continuation_use_and_update_handler_noexc
   (cont, hval, hexn, heff){
    var stack = caml_continuation_use_noexc(cont);
    stack[3] = [0, hval, hexn, heff];
    return stack;
   }
   function caml_obj_truncate(x, s){
    if(s <= 0 || s + 1 > x.length) caml_invalid_argument("Obj.truncate");
    if(x.length != s + 1) x.length = s + 1;
    return 0;
   }
   function caml_js_to_string(s){return caml_string_of_jsstring(s);}
   function core_gc_minor_words(){return 0;}
   function is_digit_odd(nat, ofs){if(nat.data[ofs] & 1) return 1; return 0;}
   function caml_runtime_variant(_unit){return caml_string_of_jsbytes("");}
   function caml_array_concat(l){
    var a = [0];
    while(l !== 0){
     var b = l[1];
     for(var i = 1; i < b.length; i++) a.push(b[i]);
     l = l[2];
    }
    return a;
   }
   function caml_gr_open_graph(info){
    var info = caml_jsstring_of_string(info);
    function get(name){
     var res = info.match("(^|,) *" + name + " *= *([a-zA-Z0-9_]+) *(,|$)");
     if(res) return res[2];
    }
    var specs = [];
    if(! (info == "")) specs.push(info);
    var target = get("target");
    if(! target) target = "";
    var status = get("status");
    if(! status) specs.push("status=1");
    var w = get("width");
    w = w ? parseInt(w) : 200;
    specs.push("width=" + w);
    var h = get("height");
    h = h ? parseInt(h) : 200;
    specs.push("height=" + h);
    var win = globalThis.open("about:blank", target, specs.join(","));
    if(! win) caml_failwith("Graphics.open_graph: cannot open the window");
    var doc = win.document, canvas = doc.createElement("canvas");
    canvas.width = w;
    canvas.height = h;
    var ctx = caml_gr_state_create(canvas, w, h);
    ctx.set_title = function(title){doc.title = title;};
    caml_gr_state_set(ctx);
    var body = doc.body;
    body.style.margin = "0px";
    body.appendChild(canvas);
    return 0;
   }
   function caml_make_float_vect(len){
    if(len < 0) caml_array_bound_error();
    var len = len + 1 | 0, b = new Array(len);
    b[0] = 254;
    for(var i = 1; i < len; i++) b[i] = 0;
    return b;
   }
   function caml_cbrt_float(x){return Math.cbrt(x);}
   function caml_eventlog_pause(unit){return 0;}
   function caml_memprof_stop(unit){return 0;}
   function caml_greaterequal(x, y){
    return + (caml_compare_val(x, y, false) >= 0);
   }
   function caml_make_local_vect(v_len, v_elt){return caml_make_vect(v_len, v_elt);
   }
   function caml_get_exception_raw_backtrace(){return [0];}
   function caml_log1p_float(x){return Math.log1p(x);}
   function bigstringaf_blit_to_bigstring(src, src_off, dst, dst_off, len){return caml_bigstring_blit_ba_to_ba(src, src_off, dst, dst_off, len);
   }
   var ms_to_nano = caml_int64_of_int32(1000 * 1000);
   function time_now_nanoseconds_since_unix_epoch_or_zero(){
    var ms = Date.now(), ms_i63 = caml_int64_of_float(ms * 2);
    return caml_int64_mul(ms_i63, ms_to_nano);
   }
   function caml_runtime_events_free_cursor(cursor){return 0;}
   function caml_lazy_make_forward(v){return [250, v];}
   function lor_digit_nat(nat1, ofs1, nat2, ofs2){nat1.data[ofs1] |= nat2.data[ofs2]; return 0;
   }
   function caml_gr_blit_image(im, x, y){
    var
     s = caml_gr_state_get(),
     im2 =
       s.context.getImageData
        (x, s.height - im.height - y, im.width, im.height);
    for(var i = 0; i < im2.data.length; i += 4){
     im.data[i] = im2.data[i];
     im.data[i + 1] = im2.data[i + 1];
     im.data[i + 2] = im2.data[i + 2];
     im.data[i + 3] = im2.data[i + 3];
    }
    return 0;
   }
   function caml_gr_window_id(a){
    caml_failwith("caml_gr_window_id not Implemented");
   }
   function caml_atomic_make_contended(a){return [0, a];}
   function caml_js_on_ie(){
    var
     ua =
       globalThis.navigator && globalThis.navigator.userAgent
        ? globalThis.navigator.userAgent
        : "";
    return ua.indexOf("MSIE") != - 1 && ua.indexOf("Opera") != 0;
   }
   function caml_int64_shift_right(x, s){return x.shift_right(s);}
   function caml_ba_layout(ba){return ba.layout;}
   function caml_convert_raw_backtrace(){return [0];}
   function caml_array_set(array, index, newval){
    if(index < 0 || index >= array.length - 1) caml_array_bound_error();
    array[index + 1] = newval;
    return 0;
   }
   function caml_alloc_stack(hv, hx, hf){return 0;}
   function caml_bytes_greaterequal(s1, s2){return caml_bytes_lessequal(s2, s1);
   }
   function set_digit_nat(nat, ofs, digit){nat.data[ofs] = digit; return 0;}
   function caml_bytes_set16(s, i, i16){
    if(i >>> 0 >= s.l - 1) caml_bytes_bound_error();
    var b2 = 0xFF & i16 >> 8, b1 = 0xFF & i16;
    caml_bytes_unsafe_set(s, i + 0, b1);
    caml_bytes_unsafe_set(s, i + 1, b2);
    return 0;
   }
   function caml_gr_doc_of_state(state){
    if(state.canvas.ownerDocument) return state.canvas.ownerDocument;
   }
   function caml_ml_output_int(chanid, i){
    var
     arr = [i >> 24 & 0xFF, i >> 16 & 0xFF, i >> 8 & 0xFF, i & 0xFF],
     s = caml_string_of_array(arr);
    caml_ml_output(chanid, s, 0, 4);
    return 0;
   }
   function caml_obj_with_tag(tag, x){
    var l = x.length, a = new Array(l);
    a[0] = tag;
    for(var i = 1; i < l; i++) a[i] = x[i];
    return a;
   }
   function caml_ml_channel_size(chanid){
    var chan = caml_ml_channels[chanid];
    return chan.file.length();
   }
   function bin_prot_blit_string_buf_stub(src_pos, src, dst_pos, dst, len){
    return caml_bigstring_blit_string_to_ba(src, src_pos, dst, dst_pos, len);
   }
   function caml_raw_backtrace_slot(){
    caml_invalid_argument
     ("Printexc.get_raw_backtrace_slot: index out of bounds");
   }
   function caml_hexstring_of_float(x, prec, style){
    if(! isFinite(x)){
     if(isNaN(x)) return caml_string_of_jsstring("nan");
     return caml_string_of_jsstring(x > 0 ? "infinity" : "-infinity");
    }
    var sign = x == 0 && 1 / x == - Infinity ? 1 : x >= 0 ? 0 : 1;
    if(sign) x = - x;
    var exp = 0;
    if(x == 0)
     ;
    else if(x < 1)
     while(x < 1 && exp > - 1022){x *= 2; exp--;}
    else
     while(x >= 2){x /= 2; exp++;}
    var exp_sign = exp < 0 ? "" : "+", sign_str = "";
    if(sign)
     sign_str = "-";
    else
     switch(style){
       case 43:
        sign_str = "+"; break;
       case 32:
        sign_str = " "; break;
       default: break;
     }
    if(prec >= 0 && prec < 13){
     var cst = Math.pow(2, prec * 4);
     x = Math.round(x * cst) / cst;
    }
    var x_str = x.toString(16);
    if(prec >= 0){
     var idx = x_str.indexOf(".");
     if(idx < 0)
      x_str += "." + caml_str_repeat(prec, "0");
     else{
      var size = idx + 1 + prec;
      if(x_str.length < size)
       x_str += caml_str_repeat(size - x_str.length, "0");
      else
       x_str = x_str.substr(0, size);
     }
    }
    return caml_string_of_jsstring
            (sign_str + "0x" + x_str + "p" + exp_sign + exp.toString(10));
   }
   function caml_runtime_events_user_write(event, event_content){return 0;}
   function caml_js_wrap_meth_callback_strict(arity, f){
    return function(){
     var args = new Array(arity + 1), len = Math.min(arguments.length, arity);
     args[0] = this;
     for(var i = 0; i < len; i++) args[i + 1] = arguments[i];
     return caml_callback(f, args);};
   }
   function caml_unix_readlink(name){
    var root = resolve_fs_device(name);
    if(! root.device.readlink)
     caml_failwith("caml_unix_readlink: not implemented");
    return root.device.readlink(root.rest, true);
   }
   function caml_backtrace_status(_unit){
    return caml_record_backtrace_flag ? 1 : 0;
   }
   function caml_install_signal_handler(){return 0;}
   function caml_sys_argv(a){return caml_argv;}
   function caml_ba_fill(ba, v){ba.fill(v); return 0;}
   function caml_modf_float(x){
    if(isFinite(x)){
     var neg = 1 / x < 0;
     x = Math.abs(x);
     var i = Math.floor(x), f = x - i;
     if(neg){i = - i; f = - f;}
     return [0, f, i];
    }
    if(isNaN(x)) return [0, NaN, NaN];
    return [0, 1 / x, x];
   }
   function caml_gc_get(){return [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];}
   function caml_float_compare(x, y){
    if(x === y) return 0;
    if(x < y) return - 1;
    if(x > y) return 1;
    if(x === x) return 1;
    if(y === y) return - 1;
    return 0;
   }
   function caml_string_set32(s, i, i32){caml_failwith("caml_string_set32");}
   function caml_parse_engine(tables, env, cmd, arg){
    var
     ERRCODE = 256,
     loop = 6,
     testshift = 7,
     shift = 8,
     shift_recover = 9,
     reduce = 10,
     READ_TOKEN = 0,
     RAISE_PARSE_ERROR = 1,
     GROW_STACKS_1 = 2,
     GROW_STACKS_2 = 3,
     COMPUTE_SEMANTIC_ACTION = 4,
     CALL_ERROR_FUNCTION = 5,
     env_s_stack = 1,
     env_v_stack = 2,
     env_symb_start_stack = 3,
     env_symb_end_stack = 4,
     env_stacksize = 5,
     env_stackbase = 6,
     env_curr_char = 7,
     env_lval = 8,
     env_symb_start = 9,
     env_symb_end = 10,
     env_asp = 11,
     env_rule_len = 12,
     env_rule_number = 13,
     env_sp = 14,
     env_state = 15,
     env_errflag = 16,
     tbl_transl_const = 2,
     tbl_transl_block = 3,
     tbl_lhs = 4,
     tbl_len = 5,
     tbl_defred = 6,
     tbl_dgoto = 7,
     tbl_sindex = 8,
     tbl_rindex = 9,
     tbl_gindex = 10,
     tbl_tablesize = 11,
     tbl_table = 12,
     tbl_check = 13,
     tbl_names_const = 15,
     tbl_names_block = 16;
    function log(x){
     var s = caml_string_of_jsbytes(x + "\n");
     caml_ml_output(2, s, 0, caml_ml_string_length(s));
    }
    function token_name(names, number){
     var str = caml_jsstring_of_string(names);
     if(str[0] == "\x00") return "<unknown token>";
     return str.split("\x00")[number];
    }
    function print_token(state, tok){
     var token, kind;
     if(tok instanceof Array){
      token = token_name(tables[tbl_names_block], tok[0]);
      if(typeof tok[1] == "number")
       kind = "" + tok[1];
      else if(typeof tok[1] == "string")
       kind = tok[1];
      else if(tok[1] instanceof MlBytes)
       kind = caml_jsbytes_of_string(tok[1]);
      else
       kind = "_";
      log("State " + state + ": read token " + token + "(" + kind + ")");
     }
     else{
      token = token_name(tables[tbl_names_const], tok);
      log("State " + state + ": read token " + token);
     }
    }
    if(! tables.dgoto){
     tables.defred = caml_lex_array(tables[tbl_defred]);
     tables.sindex = caml_lex_array(tables[tbl_sindex]);
     tables.check = caml_lex_array(tables[tbl_check]);
     tables.rindex = caml_lex_array(tables[tbl_rindex]);
     tables.table = caml_lex_array(tables[tbl_table]);
     tables.len = caml_lex_array(tables[tbl_len]);
     tables.lhs = caml_lex_array(tables[tbl_lhs]);
     tables.gindex = caml_lex_array(tables[tbl_gindex]);
     tables.dgoto = caml_lex_array(tables[tbl_dgoto]);
    }
    var
     res = 0,
     n,
     n1,
     n2,
     state1,
     sp = env[env_sp],
     state = env[env_state],
     errflag = env[env_errflag];
    exit:
    for(;;)
     next:
     switch(cmd){
       case 0:
        state = 0; errflag = 0;
       case 6:
        n = tables.defred[state];
        if(n != 0){cmd = reduce; break;}
        if(env[env_curr_char] >= 0){cmd = testshift; break;}
        res = READ_TOKEN;
        break exit;
       case 1:
        if(arg instanceof Array){
         env[env_curr_char] = tables[tbl_transl_block][arg[0] + 1];
         env[env_lval] = arg[1];
        }
        else{
         env[env_curr_char] = tables[tbl_transl_const][arg + 1];
         env[env_lval] = 0;
        }
        if(caml_parser_trace) print_token(state, arg);
       case 7:
        n1 = tables.sindex[state];
        n2 = n1 + env[env_curr_char];
        if
         (n1 != 0 && n2 >= 0 && n2 <= tables[tbl_tablesize]
          && tables.check[n2] == env[env_curr_char]){cmd = shift; break;}
        n1 = tables.rindex[state];
        n2 = n1 + env[env_curr_char];
        if
         (n1 != 0 && n2 >= 0 && n2 <= tables[tbl_tablesize]
          && tables.check[n2] == env[env_curr_char]){
         n = tables.table[n2];
         cmd = reduce;
         break;
        }
        if(errflag <= 0){res = CALL_ERROR_FUNCTION; break exit;}
       case 5:
        if(errflag < 3){
         errflag = 3;
         for(;;){
          state1 = env[env_s_stack][sp + 1];
          n1 = tables.sindex[state1];
          n2 = n1 + ERRCODE;
          if
           (n1 != 0 && n2 >= 0 && n2 <= tables[tbl_tablesize]
            && tables.check[n2] == ERRCODE){
           if(caml_parser_trace) log("Recovering in state " + state1);
           cmd = shift_recover;
           break next;
          }
          else{
           if(caml_parser_trace) log("Discarding state " + state1);
           if(sp <= env[env_stackbase]){
            if(caml_parser_trace) log("No more states to discard");
            return RAISE_PARSE_ERROR;
           }
           sp--;
          }
         }
        }
        else{
         if(env[env_curr_char] == 0) return RAISE_PARSE_ERROR;
         if(caml_parser_trace) log("Discarding last token read");
         env[env_curr_char] = - 1;
         cmd = loop;
         break;
        }
       case 8:
        env[env_curr_char] = - 1; if(errflag > 0) errflag--;
       case 9:
        if(caml_parser_trace)
         log("State " + state + ": shift to state " + tables.table[n2]);
        state = tables.table[n2];
        sp++;
        if(sp >= env[env_stacksize]){res = GROW_STACKS_1; break exit;}
       case 2:
        env[env_s_stack][sp + 1] = state;
        env[env_v_stack][sp + 1] = env[env_lval];
        env[env_symb_start_stack][sp + 1] = env[env_symb_start];
        env[env_symb_end_stack][sp + 1] = env[env_symb_end];
        cmd = loop;
        break;
       case 10:
        if(caml_parser_trace) log("State " + state + ": reduce by rule " + n);
        var m = tables.len[n];
        env[env_asp] = sp;
        env[env_rule_number] = n;
        env[env_rule_len] = m;
        sp = sp - m + 1;
        m = tables.lhs[n];
        state1 = env[env_s_stack][sp];
        n1 = tables.gindex[m];
        n2 = n1 + state1;
        if
         (n1 != 0 && n2 >= 0 && n2 <= tables[tbl_tablesize]
          && tables.check[n2] == state1)
         state = tables.table[n2];
        else
         state = tables.dgoto[m];
        if(sp >= env[env_stacksize]){res = GROW_STACKS_2; break exit;}
       case 3:
        res = COMPUTE_SEMANTIC_ACTION; break exit;
       case 4:
        env[env_s_stack][sp + 1] = state;
        env[env_v_stack][sp + 1] = arg;
        var asp = env[env_asp];
        env[env_symb_end_stack][sp + 1] = env[env_symb_end_stack][asp + 1];
        if(sp > asp)
         env[env_symb_start_stack][sp + 1] = env[env_symb_end_stack][asp + 1];
        cmd = loop;
        break;
       default: return RAISE_PARSE_ERROR;
     }
    env[env_sp] = sp;
    env[env_state] = state;
    env[env_errflag] = errflag;
    return res;
   }
   function caml_jsoo_flags_effects(unit){return 0;}
   function core_gc_major_words(){return 0;}
   function caml_update_dummy(x, y){
    if(y.fun){x.fun = y.fun; return 0;}
    if(typeof y === "function"){x.fun = y; return 0;}
    var i = y.length;
    while(i--) x[i] = y[i];
    return 0;
   }
   function caml_array_fill(array, ofs, len, v){
    for(var i = 0; i < len; i++) array[ofs + i + 1] = v;
    return 0;
   }
   function timezone_js_loader_create_zone(zone_name){
    zone_name = caml_jsstring_of_string(zone_name);
    return new globalThis.TemporalPolyfill.Temporal.TimeZone(zone_name);
   }
   function caml_sys_mkdir(name, perm){
    var root = resolve_fs_device(name);
    root.device.mkdir(root.rest, perm);
    return 0;
   }
   function bigstring_blit_stub(s1, i1, s2, i2, len){
    return caml_bigstring_blit_ba_to_ba(s1, i1, s2, i2, len);
   }
   function caml_string_notequal(s1, s2){
    return 1 - caml_string_equal(s1, s2);
   }
   function caml_bytes_greaterthan(s1, s2){return caml_bytes_lessthan(s2, s1);
   }
   function caml_gr_make_image(arr){
    var
     s = caml_gr_state_get(),
     h = arr.length - 1,
     w = arr[1].length - 1,
     im = s.context.createImageData(w, h);
    for(var i = 0; i < h; i++)
     for(var j = 0; j < w; j++){
      var c = arr[i + 1][j + 1], o = i * (w * 4) + j * 4;
      if(c == - 1){
       im.data[o + 0] = 0;
       im.data[o + 1] = 0;
       im.data[o + 2] = 0;
       im.data[o + 3] = 0;
      }
      else{
       im.data[o + 0] = c >> 16 & 0xff;
       im.data[o + 1] = c >> 8 & 0xff;
       im.data[o + 2] = c >> 0 & 0Xff;
       im.data[o + 3] = 0xff;
      }
     }
    return im;
   }
   function Base_int_math_int_popcount(v){
    v = v - (v >>> 1 & 0x55555555);
    v = (v & 0x33333333) + (v >>> 2 & 0x33333333);
    return (v + (v >>> 4) & 0xF0F0F0F) * 0x1010101 >>> 24;
   }
   function caml_ml_set_channel_output(chanid, f){
    var chan = caml_ml_channels[chanid];
    chan.output = function(s){f(s);};
    return 0;
   }
   function caml_read_file_content(name){
    var
     name = typeof name == "string" ? caml_string_of_jsbytes(name) : name,
     root = resolve_fs_device(name);
    if(root.device.exists(root.rest)){
     var
      file = root.device.open(root.rest, {rdonly: 1}),
      len = file.length(),
      buf = new Uint8Array(len);
     file.read(0, buf, 0, len);
     return caml_string_of_array(buf);
    }
    caml_raise_no_such_file(caml_jsbytes_of_string(name));
   }
   function caml_js_to_float(x){return x;}
   function caml_setup_uncaught_exception_handler(){
    var process = globalThis.process;
    if(process && process.on)
     process.on
      ("uncaughtException",
       function(err, origin){
        caml_fatal_uncaught_exception(err);
        process.exit(2);
       });
    else if(globalThis.addEventListener)
     globalThis.addEventListener
      ("error",
       function(event){
        if(event.error) caml_fatal_uncaught_exception(event.error);
       });
   }
   caml_setup_uncaught_exception_handler();
   globalThis.jsoo_runtime =
    {bigstringaf_memchr: bigstringaf_memchr,
     bigstringaf_memcmp_string: bigstringaf_memcmp_string,
     bigstringaf_memcmp_bigstring: bigstringaf_memcmp_bigstring,
     bigstringaf_blit_from_bytes: bigstringaf_blit_from_bytes,
     bigstringaf_blit_to_bigstring: bigstringaf_blit_to_bigstring,
     bigstringaf_blit_to_bytes: bigstringaf_blit_to_bytes,
     timezone_js_loader_get_offset_nanos_for:
     timezone_js_loader_get_offset_nanos_for,
     timezone_js_loader_instant_plus_hours:
     timezone_js_loader_instant_plus_hours,
     timezone_js_loader_now: timezone_js_loader_now,
     timezone_js_loader_epoch_seconds: timezone_js_loader_epoch_seconds,
     timezone_js_loader_compare_instants: timezone_js_loader_compare_instants,
     timezone_js_loader_from_epoch_seconds:
     timezone_js_loader_from_epoch_seconds,
     timezone_js_loader_get_next_transition_or_this_time_if_none:
     timezone_js_loader_get_next_transition_or_this_time_if_none,
     timezone_js_loader_create_zone: timezone_js_loader_create_zone,
     timezone_js_loader_enable_for_testing:
     timezone_js_loader_enable_for_testing,
     timezone_js_loader_disable_for_testing:
     timezone_js_loader_disable_for_testing,
     should_use_timezone_js_loader: should_use_timezone_js_loader,
     bigstring_realloc: bigstring_realloc,
     bigstring_destroy_stub: bigstring_destroy_stub,
     core_md5_digest_subbigstring: core_md5_digest_subbigstring,
     core_md5_fd: core_md5_fd,
     core_gc_run_memprof_callbacks: core_gc_run_memprof_callbacks,
     core_gc_top_heap_words: core_gc_top_heap_words,
     core_gc_promoted_words: core_gc_promoted_words,
     core_gc_minor_words: core_gc_minor_words,
     core_gc_minor_collections: core_gc_minor_collections,
     core_gc_major_words: core_gc_major_words,
     core_gc_major_plus_minor_words: core_gc_major_plus_minor_words,
     core_gc_major_collections: core_gc_major_collections,
     core_gc_heap_words: core_gc_heap_words,
     core_gc_heap_chunks: core_gc_heap_chunks,
     core_gc_compactions: core_gc_compactions,
     core_time_ns_format: core_time_ns_format,
     core_array_unsafe_float_blit: core_array_unsafe_float_blit,
     core_array_unsafe_int_blit: core_array_unsafe_int_blit,
     core_heap_block_is_heap_block: core_heap_block_is_heap_block,
     bigstring_memmem_bytecode: bigstring_memmem_bytecode,
     bigstring_find: bigstring_find,
     internalhash_fold_bigstring: internalhash_fold_bigstring,
     bigstring_memcmp_bytes_stub: bigstring_memcmp_bytes_stub,
     bigstring_memcmp_stub: bigstring_memcmp_stub,
     bigstring_memset_stub: bigstring_memset_stub,
     bigstring_blit_string_bigstring_stub:
     bigstring_blit_string_bigstring_stub,
     bigstring_blit_bigstring_bytes_stub: bigstring_blit_bigstring_bytes_stub,
     bigstring_blit_bytes_bigstring_stub: bigstring_blit_bytes_bigstring_stub,
     bigstring_blit_stub: bigstring_blit_stub,
     bigstring_is_mmapped_stub: bigstring_is_mmapped_stub,
     bigstring_alloc_v2: bigstring_alloc_v2,
     ppx_expect_runtime_flush_stubs_streams:
     ppx_expect_runtime_flush_stubs_streams,
     ppx_expect_runtime_out_channel_position:
     ppx_expect_runtime_out_channel_position,
     ppx_expect_runtime_after_test: ppx_expect_runtime_after_test,
     ppx_expect_runtime_before_test: ppx_expect_runtime_before_test,
     ppx_expect_runtime_saved_stderr: ppx_expect_runtime_saved_stderr,
     ppx_expect_runtime_saved_stdout: ppx_expect_runtime_saved_stdout,
     time_now_nanosecond_counter_for_timing:
     time_now_nanosecond_counter_for_timing,
     ms_float_to_ns_int64: ms_float_to_ns_int64,
     time_now_nanoseconds_since_unix_epoch_or_zero:
     time_now_nanoseconds_since_unix_epoch_or_zero,
     bin_prot_blit_buf_stub: bin_prot_blit_buf_stub,
     bin_prot_blit_bytes_buf_stub: bin_prot_blit_bytes_buf_stub,
     bin_prot_blit_string_buf_stub: bin_prot_blit_string_buf_stub,
     bin_prot_blit_float_array_buf_stub: bin_prot_blit_float_array_buf_stub,
     bin_prot_blit_buf_bytes_stub: bin_prot_blit_buf_bytes_stub,
     bin_prot_blit_buf_float_array_stub: bin_prot_blit_buf_float_array_stub,
     caml_check_bound_bigstring: caml_check_bound_bigstring,
     caml_dummy_obj_is_stack: caml_dummy_obj_is_stack,
     caml_make_local_vect: caml_make_local_vect,
     Base_unsafe_create_local_bytes: Base_unsafe_create_local_bytes,
     Base_am_testing: Base_am_testing,
     Base_hash_double: Base_hash_double,
     Base_hash_string: Base_hash_string,
     Base_int_math_int64_pow_stub: Base_int_math_int64_pow_stub,
     Base_int_math_int_pow_stub: Base_int_math_int_pow_stub,
     Base_int_math_int64_ctz: Base_int_math_int64_ctz,
     Base_int_math_nativeint_ctz: Base_int_math_nativeint_ctz,
     Base_int_math_int_ctz: Base_int_math_int_ctz,
     Base_int_math_int32_ctz: Base_int_math_int32_ctz,
     Base_int_math_int64_clz: Base_int_math_int64_clz,
     Base_int_math_nativeint_clz: Base_int_math_nativeint_clz,
     Base_int_math_int_clz: Base_int_math_int_clz,
     Base_int_math_int32_clz: Base_int_math_int32_clz,
     Base_caml_exn_is_most_recent_exn: Base_caml_exn_is_most_recent_exn,
     Base_clear_caml_backtrace_pos: Base_clear_caml_backtrace_pos,
     Base_int_math_int_popcount: Base_int_math_int_popcount,
     caml_sse2_float64_max_bytecode: caml_sse2_float64_max_bytecode,
     caml_sse2_float64_min_bytecode: caml_sse2_float64_min_bytecode,
     caml_csel_value: caml_csel_value,
     Base_internalhash_get_hash_value: Base_internalhash_get_hash_value,
     Base_internalhash_fold_string: Base_internalhash_fold_string,
     Base_internalhash_fold_float: Base_internalhash_fold_float,
     Base_internalhash_fold_int: Base_internalhash_fold_int,
     Base_internalhash_fold_int64: Base_internalhash_fold_int64,
     caml_runtime_events_read_poll: caml_runtime_events_read_poll,
     caml_runtime_events_free_cursor: caml_runtime_events_free_cursor,
     caml_runtime_events_create_cursor: caml_runtime_events_create_cursor,
     caml_runtime_events_resume: caml_runtime_events_resume,
     caml_runtime_events_pause: caml_runtime_events_pause,
     caml_runtime_events_start: caml_runtime_events_start,
     caml_runtime_events_user_resolve: caml_runtime_events_user_resolve,
     caml_runtime_events_user_write: caml_runtime_events_user_write,
     caml_runtime_events_user_register: caml_runtime_events_user_register,
     caml_custom_event_index: caml_custom_event_index,
     caml_zstd_initialize: caml_zstd_initialize,
     caml_decompress_input: caml_decompress_input,
     zstd_decompress: zstd_decompress,
     jsoo_effect_not_supported: jsoo_effect_not_supported,
     caml_ml_condition_signal: caml_ml_condition_signal,
     caml_ml_condition_broadcast: caml_ml_condition_broadcast,
     caml_ml_condition_wait: caml_ml_condition_wait,
     caml_ml_condition_new: caml_ml_condition_new,
     caml_get_continuation_callstack: caml_get_continuation_callstack,
     caml_continuation_use_and_update_handler_noexc:
     caml_continuation_use_and_update_handler_noexc,
     caml_continuation_use_noexc: caml_continuation_use_noexc,
     caml_alloc_stack: caml_alloc_stack,
     caml_ml_mutex_unlock: caml_ml_mutex_unlock,
     caml_ml_mutex_try_lock: caml_ml_mutex_try_lock,
     caml_ml_mutex_lock: caml_ml_mutex_lock,
     caml_ml_mutex_new: caml_ml_mutex_new,
     MlMutex: MlMutex,
     caml_lxm_next: caml_lxm_next,
     caml_ml_domain_cpu_relax: caml_ml_domain_cpu_relax,
     caml_ml_domain_id: caml_ml_domain_id,
     caml_domain_spawn: caml_domain_spawn,
     caml_domain_id: caml_domain_id,
     caml_recommended_domain_count: caml_recommended_domain_count,
     caml_ml_domain_set_name: caml_ml_domain_set_name,
     caml_ml_domain_unique_token: caml_ml_domain_unique_token,
     caml_atomic_make_contended: caml_atomic_make_contended,
     caml_atomic_exchange: caml_atomic_exchange,
     caml_atomic_fetch_add: caml_atomic_fetch_add,
     caml_atomic_cas: caml_atomic_cas,
     caml_atomic_load: caml_atomic_load,
     caml_domain_dls_get: caml_domain_dls_get,
     caml_domain_dls_set: caml_domain_dls_set,
     caml_domain_dls: caml_domain_dls,
     caml_ephe_check_data: caml_ephe_check_data,
     caml_ephe_unset_data: caml_ephe_unset_data,
     caml_ephe_set_data: caml_ephe_set_data,
     caml_ephe_get_data_copy: caml_ephe_get_data_copy,
     caml_ephe_get_data: caml_ephe_get_data,
     caml_ephe_blit_data: caml_ephe_blit_data,
     caml_ephe_blit_key: caml_ephe_blit_key,
     caml_ephe_check_key: caml_ephe_check_key,
     caml_ephe_get_key_copy: caml_ephe_get_key_copy,
     caml_ephe_get_key: caml_ephe_get_key,
     caml_weak_set: caml_weak_set,
     caml_weak_create: caml_weak_create,
     caml_ephe_create: caml_ephe_create,
     caml_ephe_unset_key: caml_ephe_unset_key,
     caml_ephe_set_key: caml_ephe_set_key,
     caml_ephe_data_offset: caml_ephe_data_offset,
     caml_ephe_key_offset: caml_ephe_key_offset,
     caml_unix_inet_addr_of_string: caml_unix_inet_addr_of_string,
     caml_unix_findclose: caml_unix_findclose,
     caml_unix_findnext: caml_unix_findnext,
     caml_unix_findfirst: caml_unix_findfirst,
     caml_unix_rewinddir: caml_unix_rewinddir,
     caml_unix_closedir: caml_unix_closedir,
     caml_unix_readdir: caml_unix_readdir,
     caml_unix_opendir: caml_unix_opendir,
     caml_unix_has_symlink: caml_unix_has_symlink,
     caml_unix_getpwuid: caml_unix_getpwuid,
     caml_unix_getuid: caml_unix_getuid,
     caml_unix_unlink: caml_unix_unlink,
     caml_unix_readlink: caml_unix_readlink,
     caml_unix_symlink: caml_unix_symlink,
     caml_unix_rmdir: caml_unix_rmdir,
     caml_unix_mkdir: caml_unix_mkdir,
     caml_unix_lstat_64: caml_unix_lstat_64,
     caml_unix_lstat: caml_unix_lstat,
     caml_unix_stat_64: caml_unix_stat_64,
     caml_unix_stat: caml_unix_stat,
     make_unix_err_args: make_unix_err_args,
     caml_unix_isatty: caml_unix_isatty,
     caml_unix_filedescr_of_fd: caml_unix_filedescr_of_fd,
     caml_unix_cleanup: caml_unix_cleanup,
     caml_unix_startup: caml_unix_startup,
     caml_unix_mktime: caml_unix_mktime,
     caml_unix_localtime: caml_unix_localtime,
     caml_unix_gmtime: caml_unix_gmtime,
     caml_unix_time: caml_unix_time,
     caml_unix_gettimeofday: caml_unix_gettimeofday,
     caml_str_initialize: caml_str_initialize,
     re_replacement_text: re_replacement_text,
     re_partial_match: re_partial_match,
     re_string_match: re_string_match,
     re_search_backward: re_search_backward,
     re_search_forward: re_search_forward,
     re_match: re_match,
     caml_sys_is_regular_file: caml_sys_is_regular_file,
     caml_spacetime_only_works_for_native_code:
     caml_spacetime_only_works_for_native_code,
     caml_register_channel_for_spacetime: caml_register_channel_for_spacetime,
     caml_sys_const_naked_pointers_checked:
     caml_sys_const_naked_pointers_checked,
     caml_spacetime_enabled: caml_spacetime_enabled,
     caml_ml_runtime_warnings_enabled: caml_ml_runtime_warnings_enabled,
     caml_ml_enable_runtime_warnings: caml_ml_enable_runtime_warnings,
     caml_runtime_warnings: caml_runtime_warnings,
     caml_install_signal_handler: caml_install_signal_handler,
     caml_runtime_parameters: caml_runtime_parameters,
     caml_runtime_variant: caml_runtime_variant,
     caml_sys_isatty: caml_sys_isatty,
     caml_sys_get_config: caml_sys_get_config,
     os_type: os_type,
     caml_sys_const_backend_type: caml_sys_const_backend_type,
     caml_sys_const_ostype_cygwin: caml_sys_const_ostype_cygwin,
     caml_sys_const_ostype_win32: caml_sys_const_ostype_win32,
     caml_sys_const_ostype_unix: caml_sys_const_ostype_unix,
     caml_sys_const_max_wosize: caml_sys_const_max_wosize,
     caml_sys_const_int_size: caml_sys_const_int_size,
     caml_sys_const_word_size: caml_sys_const_word_size,
     caml_sys_const_big_endian: caml_sys_const_big_endian,
     caml_sys_random_seed: caml_sys_random_seed,
     caml_sys_time_include_children: caml_sys_time_include_children,
     caml_sys_time: caml_sys_time,
     caml_sys_system_command: caml_sys_system_command,
     caml_sys_executable_name: caml_sys_executable_name,
     caml_sys_modify_argv: caml_sys_modify_argv,
     caml_sys_argv: caml_sys_argv,
     caml_sys_get_argv: caml_sys_get_argv,
     caml_executable_name: caml_executable_name,
     caml_argv: caml_argv,
     caml_sys_unsafe_getenv: caml_sys_unsafe_getenv,
     caml_sys_getenv: caml_sys_getenv,
     jsoo_sys_getenv: jsoo_sys_getenv,
     caml_set_static_env: caml_set_static_env,
     caml_fatal_uncaught_exception: caml_fatal_uncaught_exception,
     caml_format_exception: caml_format_exception,
     caml_is_special_exception: caml_is_special_exception,
     caml_sys_exit: caml_sys_exit,
     caml_raise_sys_error: caml_raise_sys_error,
     caml_maybe_print_stats: caml_maybe_print_stats,
     caml_is_printable: caml_is_printable,
     caml_get_global_data: caml_get_global_data,
     caml_register_global: caml_register_global,
     caml_build_symbols: caml_build_symbols,
     caml_global_data: caml_global_data,
     caml_named_value: caml_named_value,
     caml_register_named_value: caml_register_named_value,
     caml_named_values: caml_named_values,
     caml_call_gen: caml_call_gen,
     caml_set_parser_trace: caml_set_parser_trace,
     caml_parse_engine: caml_parse_engine,
     caml_parser_trace: caml_parser_trace,
     caml_is_continuation_tag: caml_is_continuation_tag,
     caml_lazy_read_result: caml_lazy_read_result,
     caml_lazy_reset_to_lazy: caml_lazy_reset_to_lazy,
     caml_lazy_update_to_forward: caml_lazy_update_to_forward,
     caml_lazy_update_to_forcing: caml_lazy_update_to_forcing,
     caml_obj_update_tag: caml_obj_update_tag,
     caml_obj_add_offset: caml_obj_add_offset,
     caml_obj_reachable_words: caml_obj_reachable_words,
     caml_obj_set_raw_field: caml_obj_set_raw_field,
     caml_obj_raw_field: caml_obj_raw_field,
     caml_fresh_oo_id: caml_fresh_oo_id,
     caml_set_oo_id: caml_set_oo_id,
     caml_oo_last_id: caml_oo_last_id,
     caml_get_public_method: caml_get_public_method,
     caml_lazy_make_forward: caml_lazy_make_forward,
     caml_obj_is_shared: caml_obj_is_shared,
     caml_obj_compare_and_swap: caml_obj_compare_and_swap,
     caml_obj_make_forward: caml_obj_make_forward,
     caml_obj_truncate: caml_obj_truncate,
     caml_obj_dup: caml_obj_dup,
     caml_obj_with_tag: caml_obj_with_tag,
     caml_obj_block: caml_obj_block,
     caml_obj_set_tag: caml_obj_set_tag,
     caml_obj_tag: caml_obj_tag,
     caml_obj_is_block: caml_obj_is_block,
     caml_alloc_dummy_infix: caml_alloc_dummy_infix,
     caml_update_dummy: caml_update_dummy,
     deserialize_nat: deserialize_nat,
     serialize_nat: serialize_nat,
     lxor_digit_nat: lxor_digit_nat,
     lor_digit_nat: lor_digit_nat,
     land_digit_nat: land_digit_nat,
     compare_nat_real: compare_nat_real,
     compare_nat: compare_nat,
     compare_digits_nat: compare_digits_nat,
     shift_right_nat: shift_right_nat,
     div_nat: div_nat,
     div_digit_nat: div_digit_nat,
     div_helper: div_helper,
     shift_left_nat: shift_left_nat,
     square_nat: square_nat,
     mult_nat: mult_nat,
     mult_digit_nat: mult_digit_nat,
     sub_nat: sub_nat,
     decr_nat: decr_nat,
     complement_nat: complement_nat,
     add_nat: add_nat,
     incr_nat: incr_nat,
     is_digit_odd: is_digit_odd,
     is_digit_zero: is_digit_zero,
     is_digit_int: is_digit_int,
     num_leading_zero_bits_in_digit: num_leading_zero_bits_in_digit,
     num_digits_nat: num_digits_nat,
     nth_digit_nat_native: nth_digit_nat_native,
     set_digit_nat_native: set_digit_nat_native,
     nth_digit_nat: nth_digit_nat,
     set_digit_nat: set_digit_nat,
     blit_nat: blit_nat,
     set_to_zero_nat: set_to_zero_nat,
     create_nat: create_nat,
     nat_of_array: nat_of_array,
     length_nat: length_nat,
     caml_hash_nat: caml_hash_nat,
     MlNat: MlNat,
     initialize_nat: initialize_nat,
     caml_array_of_bytes: caml_array_of_bytes,
     caml_array_of_string: caml_array_of_string,
     caml_js_to_string: caml_js_to_string,
     caml_to_js_string: caml_to_js_string,
     caml_js_from_string: caml_js_from_string,
     caml_new_string: caml_new_string,
     caml_js_to_byte_string: caml_js_to_byte_string,
     caml_is_ml_string: caml_is_ml_string,
     caml_ml_bytes_content: caml_ml_bytes_content,
     caml_is_ml_bytes: caml_is_ml_bytes,
     caml_bytes_of_jsbytes: caml_bytes_of_jsbytes,
     caml_string_of_jsstring: caml_string_of_jsstring,
     caml_jsstring_of_string: caml_jsstring_of_string,
     caml_jsbytes_of_string: caml_jsbytes_of_string,
     caml_string_of_jsbytes: caml_string_of_jsbytes,
     caml_bytes_of_string: caml_bytes_of_string,
     caml_string_of_bytes: caml_string_of_bytes,
     caml_string_lessthan: caml_string_lessthan,
     caml_string_lessequal: caml_string_lessequal,
     caml_string_equal: caml_string_equal,
     caml_string_compare: caml_string_compare,
     caml_ml_string_length: caml_ml_string_length,
     caml_string_unsafe_set: caml_string_unsafe_set,
     caml_string_unsafe_get: caml_string_unsafe_get,
     caml_ml_bytes_length: caml_ml_bytes_length,
     caml_blit_string: caml_blit_string,
     caml_blit_bytes: caml_blit_bytes,
     caml_fill_bytes: caml_fill_bytes,
     caml_bytes_greaterthan: caml_bytes_greaterthan,
     caml_string_greaterthan: caml_string_greaterthan,
     caml_bytes_greaterequal: caml_bytes_greaterequal,
     caml_string_greaterequal: caml_string_greaterequal,
     caml_bytes_lessthan: caml_bytes_lessthan,
     caml_bytes_lessequal: caml_bytes_lessequal,
     caml_bytes_notequal: caml_bytes_notequal,
     caml_string_notequal: caml_string_notequal,
     caml_bytes_equal: caml_bytes_equal,
     caml_bytes_compare: caml_bytes_compare,
     caml_bytes_of_array: caml_bytes_of_array,
     caml_string_of_array: caml_string_of_array,
     caml_create_bytes: caml_create_bytes,
     caml_create_string: caml_create_string,
     caml_uint8_array_of_string: caml_uint8_array_of_string,
     caml_uint8_array_of_bytes: caml_uint8_array_of_bytes,
     caml_convert_bytes_to_array: caml_convert_bytes_to_array,
     caml_convert_string_to_bytes: caml_convert_string_to_bytes,
     MlBytes: MlBytes,
     caml_bytes_of_utf16_jsstring: caml_bytes_of_utf16_jsstring,
     caml_bytes_set: caml_bytes_set,
     caml_string_set64: caml_string_set64,
     caml_bytes_set64: caml_bytes_set64,
     caml_string_set32: caml_string_set32,
     caml_bytes_set32: caml_bytes_set32,
     caml_string_set16: caml_string_set16,
     caml_bytes_set16: caml_bytes_set16,
     caml_string_set: caml_string_set,
     caml_bytes_get: caml_bytes_get,
     caml_bytes_get64: caml_bytes_get64,
     caml_string_get64: caml_string_get64,
     caml_bytes_get32: caml_bytes_get32,
     caml_string_get32: caml_string_get32,
     caml_bytes_get16: caml_bytes_get16,
     caml_string_get16: caml_string_get16,
     caml_string_get: caml_string_get,
     caml_bytes_bound_error: caml_bytes_bound_error,
     caml_string_bound_error: caml_string_bound_error,
     caml_bytes_unsafe_set: caml_bytes_unsafe_set,
     caml_bytes_unsafe_get: caml_bytes_unsafe_get,
     jsoo_is_ascii: jsoo_is_ascii,
     caml_utf16_of_utf8: caml_utf16_of_utf8,
     caml_utf8_of_utf16: caml_utf8_of_utf16,
     caml_subarray_to_jsbytes: caml_subarray_to_jsbytes,
     caml_str_repeat: caml_str_repeat,
     caml_md5_bytes: caml_md5_bytes,
     caml_MD5Final: caml_MD5Final,
     caml_MD5Update: caml_MD5Update,
     caml_MD5Init: caml_MD5Init,
     caml_MD5Transform: caml_MD5Transform,
     caml_md5_string: caml_md5_string,
     caml_md5_chan: caml_md5_chan,
     caml_output_value_to_buffer: caml_output_value_to_buffer,
     caml_output_value_to_bytes: caml_output_value_to_bytes,
     caml_output_value_to_string: caml_output_value_to_string,
     caml_output_val: caml_output_val,
     MlObjectTable: MlObjectTable,
     caml_marshal_data_size: caml_marshal_data_size,
     caml_marshal_header_size: caml_marshal_header_size,
     caml_input_value_from_reader: caml_input_value_from_reader,
     caml_custom_ops: caml_custom_ops,
     caml_nativeint_unmarshal: caml_nativeint_unmarshal,
     caml_int32_unmarshal: caml_int32_unmarshal,
     caml_int64_marshal: caml_int64_marshal,
     caml_int64_unmarshal: caml_int64_unmarshal,
     caml_input_value_from_bytes: caml_input_value_from_bytes,
     caml_input_value_from_string: caml_input_value_from_string,
     caml_float_of_bytes: caml_float_of_bytes,
     BigStringReader: BigStringReader,
     MlStringReader: MlStringReader,
     UInt8ArrayReader: UInt8ArrayReader,
     caml_marshal_constants: caml_marshal_constants,
     caml_new_lex_engine: caml_new_lex_engine,
     caml_lex_engine: caml_lex_engine,
     caml_lex_array: caml_lex_array,
     caml_js_error_of_exception: caml_js_error_of_exception,
     caml_xmlhttprequest_create: caml_xmlhttprequest_create,
     caml_js_get_console: caml_js_get_console,
     caml_js_html_entities: caml_js_html_entities,
     caml_js_html_escape: caml_js_html_escape,
     caml_js_on_ie: caml_js_on_ie,
     caml_js_object: caml_js_object,
     caml_pure_js_expr: caml_pure_js_expr,
     caml_js_expr: caml_js_expr,
     caml_js_eval_string: caml_js_eval_string,
     caml_js_strict_equals: caml_js_strict_equals,
     caml_js_equals: caml_js_equals,
     caml_js_function_arity: caml_js_function_arity,
     caml_js_wrap_meth_callback_unsafe: caml_js_wrap_meth_callback_unsafe,
     caml_js_wrap_meth_callback_strict: caml_js_wrap_meth_callback_strict,
     caml_js_wrap_meth_callback_arguments:
     caml_js_wrap_meth_callback_arguments,
     caml_js_wrap_meth_callback: caml_js_wrap_meth_callback,
     caml_js_wrap_callback_unsafe: caml_js_wrap_callback_unsafe,
     caml_js_wrap_callback_strict: caml_js_wrap_callback_strict,
     caml_js_wrap_callback_arguments: caml_js_wrap_callback_arguments,
     caml_js_wrap_callback: caml_js_wrap_callback,
     caml_ojs_new_arr: caml_ojs_new_arr,
     caml_js_new: caml_js_new,
     caml_js_meth_call: caml_js_meth_call,
     caml_js_fun_call: caml_js_fun_call,
     caml_js_call: caml_js_call,
     caml_js_var: caml_js_var,
     caml_list_to_js_array: caml_list_to_js_array,
     caml_list_of_js_array: caml_list_of_js_array,
     caml_js_to_array: caml_js_to_array,
     caml_js_from_array: caml_js_from_array,
     caml_js_to_int32: caml_js_to_int32,
     caml_js_to_float: caml_js_to_float,
     caml_js_from_float: caml_js_from_float,
     caml_js_to_bool: caml_js_to_bool,
     caml_js_from_bool: caml_js_from_bool,
     caml_js_error_option_of_exception: caml_js_error_option_of_exception,
     caml_exn_with_js_backtrace: caml_exn_with_js_backtrace,
     caml_maybe_attach_backtrace: caml_maybe_attach_backtrace,
     caml_wrap_exception: caml_wrap_exception,
     caml_jsoo_flags_effects: caml_jsoo_flags_effects,
     caml_jsoo_flags_use_js_string: caml_jsoo_flags_use_js_string,
     caml_is_js: caml_is_js,
     caml_callback: caml_callback,
     caml_trampoline_return: caml_trampoline_return,
     caml_trampoline: caml_trampoline,
     caml_js_typeof: caml_js_typeof,
     caml_js_instanceof: caml_js_instanceof,
     caml_js_delete: caml_js_delete,
     caml_js_get: caml_js_get,
     caml_js_set: caml_js_set,
     caml_js_pure_expr: caml_js_pure_expr,
     caml_ml_set_buffered: caml_ml_set_buffered,
     caml_ml_is_buffered: caml_ml_is_buffered,
     caml_ml_output_int: caml_ml_output_int,
     caml_ml_pos_out_64: caml_ml_pos_out_64,
     caml_ml_pos_out: caml_ml_pos_out,
     caml_pos_out: caml_pos_out,
     caml_ml_seek_out_64: caml_ml_seek_out_64,
     caml_ml_seek_out: caml_ml_seek_out,
     caml_seek_out: caml_seek_out,
     caml_output_value: caml_output_value,
     caml_ml_output_char: caml_ml_output_char,
     caml_ml_output: caml_ml_output,
     caml_ml_output_bigarray: caml_ml_output_bigarray,
     caml_ml_output_bytes: caml_ml_output_bytes,
     caml_ml_output_ta: caml_ml_output_ta,
     caml_ml_flush: caml_ml_flush,
     caml_ml_input_scan_line: caml_ml_input_scan_line,
     caml_ml_pos_in_64: caml_ml_pos_in_64,
     caml_ml_pos_in: caml_ml_pos_in,
     caml_pos_in: caml_pos_in,
     caml_ml_seek_in_64: caml_ml_seek_in_64,
     caml_ml_seek_in: caml_ml_seek_in,
     caml_seek_in: caml_seek_in,
     caml_ml_input_int: caml_ml_input_int,
     caml_ml_input_char: caml_ml_input_char,
     caml_input_value_to_outside_heap: caml_input_value_to_outside_heap,
     caml_input_value: caml_input_value,
     caml_ml_input_block: caml_ml_input_block,
     caml_ml_input_bigarray: caml_ml_input_bigarray,
     caml_ml_input: caml_ml_input,
     caml_refill: caml_refill,
     caml_ml_set_channel_refill: caml_ml_set_channel_refill,
     caml_ml_set_channel_output: caml_ml_set_channel_output,
     caml_ml_channel_size_64: caml_ml_channel_size_64,
     caml_ml_channel_size: caml_ml_channel_size,
     caml_ml_close_channel: caml_ml_close_channel,
     caml_ml_set_binary_mode: caml_ml_set_binary_mode,
     caml_channel_descriptor: caml_channel_descriptor,
     caml_ml_open_descriptor_out_with_flags:
     caml_ml_open_descriptor_out_with_flags,
     caml_ml_open_descriptor_in_with_flags:
     caml_ml_open_descriptor_in_with_flags,
     caml_ml_open_descriptor_in: caml_ml_open_descriptor_in,
     caml_ml_open_descriptor_out: caml_ml_open_descriptor_out,
     caml_ml_out_channels_list: caml_ml_out_channels_list,
     caml_ml_channels: caml_ml_channels,
     caml_ml_set_channel_name: caml_ml_set_channel_name,
     caml_sys_open: caml_sys_open,
     caml_sys_close: caml_sys_close,
     caml_sys_fds: caml_sys_fds,
     caml_int64_bswap: caml_int64_bswap,
     caml_int32_bswap: caml_int32_bswap,
     caml_bswap16: caml_bswap16,
     caml_mod: caml_mod,
     caml_div: caml_div,
     caml_mul: caml_mul,
     caml_int_of_string: caml_int_of_string,
     caml_parse_digit: caml_parse_digit,
     caml_parse_sign_and_base: caml_parse_sign_and_base,
     caml_format_int: caml_format_int,
     caml_int64_hash: caml_int64_hash,
     caml_int64_to_bytes: caml_int64_to_bytes,
     caml_int64_of_bytes: caml_int64_of_bytes,
     caml_int64_hi32: caml_int64_hi32,
     caml_int64_lo32: caml_int64_lo32,
     caml_int64_create_lo_hi: caml_int64_create_lo_hi,
     caml_int64_create_lo_mi_hi: caml_int64_create_lo_mi_hi,
     caml_int64_of_string: caml_int64_of_string,
     caml_int64_format: caml_int64_format,
     caml_int64_of_float: caml_int64_of_float,
     caml_int64_to_float: caml_int64_to_float,
     caml_int64_to_int32: caml_int64_to_int32,
     caml_int64_of_int32: caml_int64_of_int32,
     caml_int64_mod: caml_int64_mod,
     caml_int64_div: caml_int64_div,
     caml_int64_shift_right: caml_int64_shift_right,
     caml_int64_shift_right_unsigned: caml_int64_shift_right_unsigned,
     caml_int64_shift_left: caml_int64_shift_left,
     caml_int64_xor: caml_int64_xor,
     caml_int64_or: caml_int64_or,
     caml_int64_and: caml_int64_and,
     caml_int64_is_negative: caml_int64_is_negative,
     caml_int64_is_zero: caml_int64_is_zero,
     caml_int64_mul: caml_int64_mul,
     caml_int64_sub: caml_int64_sub,
     caml_int64_add: caml_int64_add,
     caml_int64_neg: caml_int64_neg,
     caml_int64_compare: caml_int64_compare,
     caml_int64_ult: caml_int64_ult,
     MlInt64: MlInt64,
     caml_int64_offset: caml_int64_offset,
     caml_float_of_string: caml_float_of_string,
     caml_format_float: caml_format_float,
     caml_fma_float: caml_fma_float,
     caml_erfc_float: caml_erfc_float,
     caml_erf_float: caml_erf_float,
     caml_cbrt_float: caml_cbrt_float,
     caml_round_float: caml_round_float,
     caml_atanh_float: caml_atanh_float,
     caml_tanh_float: caml_tanh_float,
     caml_asinh_float: caml_asinh_float,
     caml_sinh_float: caml_sinh_float,
     caml_acosh_float: caml_acosh_float,
     caml_cosh_float: caml_cosh_float,
     caml_log10_float: caml_log10_float,
     caml_hypot_float: caml_hypot_float,
     caml_log2_float: caml_log2_float,
     caml_log1p_float: caml_log1p_float,
     caml_exp2_float: caml_exp2_float,
     caml_expm1_float: caml_expm1_float,
     caml_signbit_float: caml_signbit_float,
     caml_copysign_float: caml_copysign_float,
     caml_float_compare: caml_float_compare,
     caml_frexp_float: caml_frexp_float,
     caml_ldexp_float: caml_ldexp_float,
     caml_modf_float: caml_modf_float,
     caml_classify_float: caml_classify_float,
     caml_int32_float_of_bits: caml_int32_float_of_bits,
     caml_trunc_float: caml_trunc_float,
     caml_nextafter_float: caml_nextafter_float,
     caml_int64_float_of_bits: caml_int64_float_of_bits,
     caml_hexstring_of_float: caml_hexstring_of_float,
     caml_int32_bits_of_float: caml_int32_bits_of_float,
     caml_int64_bits_of_float: caml_int64_bits_of_float,
     jsoo_floor_log2: jsoo_floor_log2,
     caml_string_hash: caml_string_hash,
     caml_hash: caml_hash,
     caml_hash_mix_string: caml_hash_mix_string,
     caml_hash_mix_bytes: caml_hash_mix_bytes,
     caml_hash_mix_bytes_arr: caml_hash_mix_bytes_arr,
     caml_hash_mix_jsbytes: caml_hash_mix_jsbytes,
     caml_hash_mix_int64: caml_hash_mix_int64,
     caml_hash_mix_float: caml_hash_mix_float,
     caml_hash_mix_final: caml_hash_mix_final,
     caml_hash_mix_int: caml_hash_mix_int,
     caml_gr_close_subwindow: caml_gr_close_subwindow,
     caml_gr_open_subwindow: caml_gr_open_subwindow,
     caml_gr_window_id: caml_gr_window_id,
     caml_gr_display_mode: caml_gr_display_mode,
     caml_gr_remember_mode: caml_gr_remember_mode,
     caml_gr_synchronize: caml_gr_synchronize,
     caml_gr_wait_event: caml_gr_wait_event,
     caml_gr_sigio_signal: caml_gr_sigio_signal,
     caml_gr_sigio_handler: caml_gr_sigio_handler,
     caml_gr_blit_image: caml_gr_blit_image,
     caml_gr_create_image: caml_gr_create_image,
     caml_gr_draw_image: caml_gr_draw_image,
     caml_gr_dump_image: caml_gr_dump_image,
     caml_gr_make_image: caml_gr_make_image,
     caml_gr_text_size: caml_gr_text_size,
     caml_gr_set_text_size: caml_gr_set_text_size,
     caml_gr_set_font: caml_gr_set_font,
     caml_gr_draw_string: caml_gr_draw_string,
     caml_gr_draw_char: caml_gr_draw_char,
     caml_gr_draw_str: caml_gr_draw_str,
     caml_gr_fill_arc: caml_gr_fill_arc,
     caml_gr_fill_poly: caml_gr_fill_poly,
     caml_gr_fill_rect: caml_gr_fill_rect,
     caml_gr_set_line_width: caml_gr_set_line_width,
     caml_gr_draw_arc: caml_gr_draw_arc,
     caml_gr_arc_aux: caml_gr_arc_aux,
     caml_gr_draw_rect: caml_gr_draw_rect,
     caml_gr_lineto: caml_gr_lineto,
     caml_gr_current_y: caml_gr_current_y,
     caml_gr_current_x: caml_gr_current_x,
     caml_gr_moveto: caml_gr_moveto,
     caml_gr_point_color: caml_gr_point_color,
     caml_gr_plot: caml_gr_plot,
     caml_gr_set_color: caml_gr_set_color,
     caml_gr_size_y: caml_gr_size_y,
     caml_gr_size_x: caml_gr_size_x,
     caml_gr_clear_graph: caml_gr_clear_graph,
     caml_gr_resize_window: caml_gr_resize_window,
     caml_gr_set_window_title: caml_gr_set_window_title,
     caml_gr_close_graph: caml_gr_close_graph,
     caml_gr_doc_of_state: caml_gr_doc_of_state,
     caml_gr_state_create: caml_gr_state_create,
     caml_gr_state_init: caml_gr_state_init,
     caml_gr_open_graph: caml_gr_open_graph,
     caml_gr_state_set: caml_gr_state_set,
     caml_gr_state_get: caml_gr_state_get,
     caml_gr_state: caml_gr_state,
     caml_get_major_credit: caml_get_major_credit,
     caml_get_major_bucket: caml_get_major_bucket,
     caml_get_minor_free: caml_get_minor_free,
     caml_gc_minor_words: caml_gc_minor_words,
     caml_gc_major_slice: caml_gc_major_slice,
     caml_gc_huge_fallback_count: caml_gc_huge_fallback_count,
     caml_eventlog_pause: caml_eventlog_pause,
     caml_eventlog_resume: caml_eventlog_resume,
     caml_memprof_discard: caml_memprof_discard,
     caml_memprof_stop: caml_memprof_stop,
     caml_memprof_start: caml_memprof_start,
     caml_final_release: caml_final_release,
     caml_final_register_called_without_value:
     caml_final_register_called_without_value,
     caml_final_register: caml_final_register,
     caml_memprof_set: caml_memprof_set,
     caml_gc_get: caml_gc_get,
     caml_gc_set: caml_gc_set,
     caml_gc_stat: caml_gc_stat,
     caml_gc_quick_stat: caml_gc_quick_stat,
     caml_gc_counters: caml_gc_counters,
     caml_gc_compaction: caml_gc_compaction,
     caml_gc_full_major: caml_gc_full_major,
     caml_gc_major: caml_gc_major,
     caml_gc_minor: caml_gc_minor,
     caml_sys_open_for_node: caml_sys_open_for_node,
     MlNodeFd: MlNodeFd,
     MlNodeDevice: MlNodeDevice,
     fs_node_supported: fs_node_supported,
     MlFakeFd: MlFakeFd,
     MlFakeFd_out: MlFakeFd_out,
     MlFakeFile: MlFakeFile,
     MlFakeDevice: MlFakeDevice,
     caml_read_file_content: caml_read_file_content,
     jsoo_create_file: jsoo_create_file,
     caml_create_file: caml_create_file,
     caml_fs_init: caml_fs_init,
     jsoo_create_file_extern: jsoo_create_file_extern,
     caml_ba_map_file_bytecode: caml_ba_map_file_bytecode,
     caml_ba_map_file: caml_ba_map_file,
     caml_sys_rmdir: caml_sys_rmdir,
     caml_sys_mkdir: caml_sys_mkdir,
     caml_sys_rename: caml_sys_rename,
     caml_sys_is_directory: caml_sys_is_directory,
     caml_sys_remove: caml_sys_remove,
     caml_sys_read_directory: caml_sys_read_directory,
     caml_sys_file_exists: caml_sys_file_exists,
     caml_raise_not_a_dir: caml_raise_not_a_dir,
     caml_raise_no_such_file: caml_raise_no_such_file,
     caml_sys_chdir: caml_sys_chdir,
     caml_sys_getcwd: caml_sys_getcwd,
     caml_unmount: caml_unmount,
     caml_mount_autoload: caml_mount_autoload,
     resolve_fs_device: resolve_fs_device,
     caml_list_mount_point: caml_list_mount_point,
     jsoo_mount_point: jsoo_mount_point,
     caml_make_path: caml_make_path,
     path_is_absolute: path_is_absolute,
     MlFile: MlFile,
     caml_root: caml_root,
     caml_get_root: caml_get_root,
     caml_current_dir: caml_current_dir,
     caml_trailing_slash: caml_trailing_slash,
     caml_finish_formatting: caml_finish_formatting,
     caml_parse_format: caml_parse_format,
     caml_array_bound_error: caml_array_bound_error,
     caml_raise_not_found: caml_raise_not_found,
     caml_raise_zero_divide: caml_raise_zero_divide,
     caml_raise_end_of_file: caml_raise_end_of_file,
     caml_invalid_argument: caml_invalid_argument,
     caml_failwith: caml_failwith,
     caml_raise_with_string: caml_raise_with_string,
     caml_raise_with_args: caml_raise_with_args,
     caml_raise_with_arg: caml_raise_with_arg,
     caml_raise_constant: caml_raise_constant,
     caml_lessthan: caml_lessthan,
     caml_lessequal: caml_lessequal,
     caml_greaterthan: caml_greaterthan,
     caml_greaterequal: caml_greaterequal,
     caml_notequal: caml_notequal,
     caml_equal: caml_equal,
     caml_int_compare: caml_int_compare,
     caml_compare: caml_compare,
     caml_compare_val: caml_compare_val,
     caml_compare_val_number_custom: caml_compare_val_number_custom,
     caml_compare_val_get_custom: caml_compare_val_get_custom,
     caml_compare_val_tag: caml_compare_val_tag,
     caml_bigstring_blit_ba_to_bytes: caml_bigstring_blit_ba_to_bytes,
     caml_bigstring_blit_bytes_to_ba: caml_bigstring_blit_bytes_to_ba,
     caml_bigstring_blit_string_to_ba: caml_bigstring_blit_string_to_ba,
     caml_bigstring_blit_ba_to_ba: caml_bigstring_blit_ba_to_ba,
     caml_bigstring_memcmp: caml_bigstring_memcmp,
     bigstring_of_typed_array: bigstring_of_typed_array,
     bigstring_of_array_buffer: bigstring_of_array_buffer,
     bigstring_to_typed_array: bigstring_to_typed_array,
     bigstring_to_array_buffer: bigstring_to_array_buffer,
     caml_hash_mix_bigstring: caml_hash_mix_bigstring,
     caml_ba_from_typed_array: caml_ba_from_typed_array,
     caml_ba_kind_of_typed_array: caml_ba_kind_of_typed_array,
     caml_ba_to_typed_array: caml_ba_to_typed_array,
     caml_ba_hash: caml_ba_hash,
     caml_ba_create_from: caml_ba_create_from,
     caml_ba_deserialize: caml_ba_deserialize,
     caml_ba_serialize: caml_ba_serialize,
     caml_ba_reshape: caml_ba_reshape,
     caml_ba_slice: caml_ba_slice,
     caml_ba_sub: caml_ba_sub,
     caml_ba_blit: caml_ba_blit,
     caml_ba_fill: caml_ba_fill,
     caml_ba_set_3: caml_ba_set_3,
     caml_ba_set_2: caml_ba_set_2,
     caml_ba_set_1: caml_ba_set_1,
     caml_ba_uint8_set64: caml_ba_uint8_set64,
     caml_ba_uint8_set32: caml_ba_uint8_set32,
     caml_ba_uint8_set16: caml_ba_uint8_set16,
     caml_ba_set_generic: caml_ba_set_generic,
     caml_ba_get_3: caml_ba_get_3,
     caml_ba_get_2: caml_ba_get_2,
     caml_ba_get_1: caml_ba_get_1,
     caml_ba_uint8_get64: caml_ba_uint8_get64,
     caml_ba_uint8_get32: caml_ba_uint8_get32,
     caml_ba_uint8_get16: caml_ba_uint8_get16,
     caml_ba_get_generic: caml_ba_get_generic,
     caml_ba_dim_3: caml_ba_dim_3,
     caml_ba_dim_2: caml_ba_dim_2,
     caml_ba_dim_1: caml_ba_dim_1,
     caml_ba_dim: caml_ba_dim,
     caml_ba_num_dims: caml_ba_num_dims,
     caml_ba_layout: caml_ba_layout,
     caml_ba_kind: caml_ba_kind,
     caml_ba_change_layout: caml_ba_change_layout,
     caml_ba_create: caml_ba_create,
     caml_ba_create_unsafe: caml_ba_create_unsafe,
     caml_ba_compare: caml_ba_compare,
     Ml_Bigarray_c_1_1: Ml_Bigarray_c_1_1,
     Ml_Bigarray: Ml_Bigarray,
     caml_ba_custom_name: caml_ba_custom_name,
     caml_ba_create_buffer: caml_ba_create_buffer,
     caml_ba_get_size_per_element: caml_ba_get_size_per_element,
     caml_ba_get_size: caml_ba_get_size,
     caml_ba_init: caml_ba_init,
     caml_convert_raw_backtrace_slot: caml_convert_raw_backtrace_slot,
     caml_get_current_callstack: caml_get_current_callstack,
     caml_restore_raw_backtrace: caml_restore_raw_backtrace,
     caml_raw_backtrace_slot: caml_raw_backtrace_slot,
     caml_raw_backtrace_next_slot: caml_raw_backtrace_next_slot,
     caml_raw_backtrace_length: caml_raw_backtrace_length,
     caml_convert_raw_backtrace: caml_convert_raw_backtrace,
     caml_record_backtrace: caml_record_backtrace,
     caml_get_exception_raw_backtrace: caml_get_exception_raw_backtrace,
     caml_get_exception_backtrace: caml_get_exception_backtrace,
     caml_backtrace_status: caml_backtrace_status,
     caml_ml_debug_info_status: caml_ml_debug_info_status,
     caml_record_backtrace_flag: caml_record_backtrace_flag,
     caml_floatarray_create: caml_floatarray_create,
     caml_make_float_vect: caml_make_float_vect,
     caml_make_vect: caml_make_vect,
     caml_check_bound: caml_check_bound,
     caml_array_fill: caml_array_fill,
     caml_array_get: caml_array_get,
     caml_array_set: caml_array_set,
     caml_floatarray_blit: caml_floatarray_blit,
     caml_array_blit: caml_array_blit,
     caml_array_concat: caml_array_concat,
     caml_array_append: caml_array_append,
     caml_array_sub: caml_array_sub};
   var
    cst_Assert_failure = "Assert_failure",
    cst_Division_by_zero = "Division_by_zero",
    cst_End_of_file = "End_of_file",
    cst_Failure = "Failure",
    cst_Invalid_argument = "Invalid_argument",
    cst_Match_failure = "Match_failure",
    cst_Not_found = "Not_found",
    cst_Out_of_memory = "Out_of_memory",
    cst_Stack_overflow = "Stack_overflow",
    cst_Sys_blocked_io = "Sys_blocked_io",
    cst_Sys_error = "Sys_error",
    cst_Undefined_recursive_module = "Undefined_recursive_module";
   caml_fs_init();
   caml_register_global(0, [248, cst_Out_of_memory, -1], cst_Out_of_memory);
   caml_register_global(1, [248, cst_Sys_error, -2], cst_Sys_error);
   caml_register_global(2, [248, cst_Failure, -3], cst_Failure);
   caml_register_global
    (3, [248, cst_Invalid_argument, -4], cst_Invalid_argument);
   caml_register_global(4, [248, cst_End_of_file, -5], cst_End_of_file);
   caml_register_global
    (5, [248, cst_Division_by_zero, -6], cst_Division_by_zero);
   caml_register_global(6, [248, cst_Not_found, -7], cst_Not_found);
   caml_register_global(7, [248, cst_Match_failure, -8], cst_Match_failure);
   caml_register_global(8, [248, cst_Stack_overflow, -9], cst_Stack_overflow);
   caml_register_global(9, [248, cst_Sys_blocked_io, -10], cst_Sys_blocked_io);
   caml_register_global
    (10, [248, cst_Assert_failure, -11], cst_Assert_failure);
   caml_register_global
    (11,
     [248, cst_Undefined_recursive_module, -12],
     cst_Undefined_recursive_module);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
