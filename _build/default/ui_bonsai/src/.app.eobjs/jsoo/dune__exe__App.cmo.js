// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cmo, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Dune__exe__App
//# unitInfo: Requires: Base__Random, Bonsai, Bonsai_web__Start, Core, Core__Array, Core__Fn, Core__Int, Core__List, Core__Option, Core__Printf, Core__String, Css_gen, Ppx_module_timer_runtime, Rummy_engine__Ai, Rummy_engine__Engine, Rummy_engine__Setup, Rummy_engine__Types, Ui_effect, Virtual_dom__Node, Virtual_dom__Vdom
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$30 = "",
    cst_d_s = "%d) %s",
    cst$31 = ") ",
    cst_Discard$1 = "Discard",
    cst_Dune_exe_App$1 = "Dune__exe__App",
    cst_Melds_on_table$1 = "Melds on table",
    cst_Please_pass_your_device_to$1 =
      "Please pass your device to the next player.",
    caml_check_bound = runtime.caml_check_bound;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$24 = cst$30,
    cst$25 = cst$30,
    cst$26 = cst$30,
    cst$27 = cst$30,
    cst$28 = cst$30,
    cst$29 = cst$30,
    cst$18 = cst$30,
    cst$19 = cst$30,
    cst$20 = cst$30,
    cst$21 = cst$30,
    cst$22 = cst$30,
    cst$23 = cst$30,
    cst$11 = cst$30,
    cst$12 = cst$30,
    cst$13 = cst$30,
    cst$14 = cst$30,
    cst$15 = cst$30,
    cst$16 = cst$30,
    cst$5 = cst$30,
    cst$6 = cst$30,
    cst$7 = cst$30,
    cst$8 = cst$30,
    cst$9 = cst$30,
    cst$10 = cst$30,
    cst$17 = cst$30,
    cst = cst$30,
    cst$0 = cst$30,
    cst$1 = cst$30,
    cst$2 = cst$30,
    cst$3 = cst$30,
    cst$4 = cst$30,
    Ui_effect = global_data.Ui_effect,
    Core_String = global_data.Core__String,
    Core_Int = global_data.Core__Int,
    Core = global_data.Core,
    Rummy_engine_Engine = global_data.Rummy_engine__Engine,
    Rummy_engine_Ai = global_data.Rummy_engine__Ai,
    Virtual_dom_Node = global_data.Virtual_dom__Node,
    Css_gen = global_data.Css_gen,
    Virtual_dom_Vdom = global_data.Virtual_dom__Vdom,
    Core_List = global_data.Core__List,
    Core_Printf = global_data.Core__Printf,
    Base_Random = global_data.Base__Random,
    Bonsai = global_data.Bonsai,
    Core_Option = global_data.Core__Option,
    Core_Fn = global_data.Core__Fn,
    Rummy_engine_Setup = global_data.Rummy_engine__Setup,
    Core_Array = global_data.Core__Array,
    Rummy_engine_Types = global_data.Rummy_engine__Types,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Bonsai_web_Start = global_data.Bonsai_web__Start,
    cst_Draw_N_from_discard = "Draw N from discard",
    _g_ = [0, 17960, 8],
    _h_ = [0, 17960, 80],
    cst_N = "N",
    cst_number = "number",
    cst_Draw_top_of_discard = "Draw top of discard",
    _i_ = [0, 17960, 8],
    cst_Draw_from_deck = "Draw from deck",
    cst_Draw_phase = "Draw phase",
    cst_Skip_to_Discard = "Skip to Discard",
    _m_ = [0, 17960, 8],
    cst_Layoff_card_on_meld = "Layoff card on meld",
    _n_ = [0, 17960, 8],
    _o_ = [0, 17960, 6],
    _p_ = [0, 17960, 140],
    cst_on_meld_index = "on meld index",
    _q_ = [0, 17960, 140],
    cst_layoff_card_index = "layoff: card index",
    cst_Make_run = "Make run",
    _r_ = [0, 17960, 8],
    _s_ = [0, 17960, 240],
    cst_run_indices_e_g_2_3_4 = "run: indices e.g. 2 3 4",
    cst_Make_set = "Make set",
    _t_ = [0, 17960, 8],
    _u_ = [0, 17960, 240],
    cst_set_indices_e_g_1_3_5 = "set: indices e.g. 1 3 5",
    cst_Play_phase = "Play phase",
    cst_Discard$0 = cst_Discard$1,
    _v_ = [0, 17960, 8],
    _w_ = [0, 17960, 160],
    cst_discard_card_index = "discard: card index",
    cst_Discard_phase = "Discard phase",
    cst_Please_pass_your_device_to$0 = cst_Please_pass_your_device_to$1,
    _x_ = [0, 869834347, "red"],
    cst_Continue_End_check = "Continue / End check",
    cst_End_of_turn_checks = "End-of-turn checks",
    cst_Back = "\xe2\xac\x85 Back",
    _j_ = [0, 17960, 10],
    cst_Please_pass_your_device_to = cst_Please_pass_your_device_to$1,
    cst_s_hand = "'s hand",
    _k_ =
      [0,
       [11, "Deck: ", [4, 0, 0, 0, [11, "   Discard: ", [4, 0, 0, 0, 0]]]],
       "Deck: %d   Discard: %d"],
    _l_ =
      [0,
       [11, "Current: ", [2, 0, [11, " (phase: ", [2, 0, [12, 41, 0]]]]],
       "Current: %s (phase: %s)"],
    cst_Play_vs_Computer = "Play vs Computer",
    _y_ = [0, 17960, 10],
    cst_Pass_Play = "Pass & Play",
    cst_Choose_a_mode_to_begin = "Choose a mode to begin:",
    cst_Welcome_to_Rummy = "Welcome to Rummy!",
    cst_Player_1 = "Player 1",
    cst_Computer = "Computer",
    cst_Player_2 = "Player 2",
    _f_ = [0, 0],
    cst_Run = "Run",
    cst_Set = "Set",
    _d_ = [0, ", "],
    _e_ =
      [0,
       [4, 0, 0, 0, [11, cst$31, [2, 0, [11, ": ", [2, 0, 0]]]]],
       "%d) %s: %s"],
    cst_none_yet = "(none yet)",
    cst_Melds_on_table = cst_Melds_on_table$1,
    cst_Melds_on_table$0 = cst_Melds_on_table$1,
    _b_ = [0, [11, "top: ", [2, 0, 0]], "top: %s"],
    _c_ = [0, [4, 0, 0, 0, [11, cst$31, [2, 0, 0]]], cst_d_s],
    cst_Discard_pile_top_bottom = "Discard pile (top \xe2\x86\x92 bottom)",
    _a_ = [0, [4, 0, 0, 0, [11, cst$31, [2, 0, 0]]], cst_d_s],
    cst_Draw = "Draw",
    cst_Play = "Play",
    cst_Discard = cst_Discard$1,
    cst_EndCheck = "EndCheck",
    cst_Dune_exe_App = cst_Dune_exe_App$1,
    _z_ = [0, "app"],
    cst_Dune_exe_App$0 = cst_Dune_exe_App$1;
   caml_call1(Ppx_module_timer_runtime[4], cst_Dune_exe_App);
   function h(r){return [0, 0, r];}
   function s(r){return [0, 1, r];}
   function d(r){return [0, 2, r];}
   function c(r){return [0, 3, r];}
   function string_of_card(c){return caml_call1(Rummy_engine_Types[3], c);}
   function string_of_phase(param){
    switch(param){
      case 0:
       return cst_Draw;
      case 1:
       return cst_Play;
      case 2:
       return cst_Discard;
      default: return cst_EndCheck;
    }
   }
   function view_cards(cards){
    function _cZ_(i, c){
     var
      _c1_ = string_of_card(c),
      label = caml_call3(Core_Printf[2], _a_, i + 1 | 0, _c1_),
      _c2_ = [0, caml_call1(Virtual_dom_Node[6], label), 0];
     return caml_call3(Virtual_dom_Node[38], 0, 0, _c2_);
    }
    var _c0_ = caml_call2(Core_List[41], cards, _cZ_);
    return caml_call3(Virtual_dom_Node[54], 0, 0, _c0_);
   }
   function view_discard(discard){
    function _cS_(i, c){
     if(caml_call2(Core[90], i, 0))
      var
       _cW_ = string_of_card(c),
       label = caml_call2(Core_Printf[2], _b_, _cW_);
     else
      var
       _cY_ = string_of_card(c),
       label = caml_call3(Core_Printf[2], _c_, i, _cY_);
     var _cX_ = [0, caml_call1(Virtual_dom_Node[6], label), 0];
     return caml_call3(Virtual_dom_Node[38], 0, 0, _cX_);
    }
    var
     items = caml_call2(Core_List[41], discard, _cS_),
     _cT_ = [0, caml_call3(Virtual_dom_Node[54], 0, 0, items), 0],
     _cU_ =
       [0, caml_call1(Virtual_dom_Node[6], cst_Discard_pile_top_bottom), 0],
     _cV_ = [0, caml_call3(Virtual_dom_Node[24], 0, 0, _cU_), _cT_];
    return caml_call3(Virtual_dom_Node[17], 0, 0, _cV_);
   }
   function view_melds(melds){
    if(caml_call1(Core_List[18], melds)){
     var
      _cH_ = [0, caml_call1(Virtual_dom_Node[6], cst_none_yet), 0],
      _cI_ = [0, caml_call3(Virtual_dom_Node[39], 0, 0, _cH_), 0],
      _cJ_ = [0, caml_call1(Virtual_dom_Node[6], cst_Melds_on_table), 0],
      _cK_ = [0, caml_call3(Virtual_dom_Node[24], 0, 0, _cJ_), _cI_];
     return caml_call3(Virtual_dom_Node[17], 0, 0, _cK_);
    }
    function _cL_(i, m){
     var
      kind_str = m[1] ? cst_Run : cst_Set,
      _cP_ = caml_call2(Core_List[51], m[2], string_of_card),
      cards_str = caml_call2(Core_String[46], _d_, _cP_),
      _cQ_ = caml_call4(Core_Printf[2], _e_, i + 1 | 0, kind_str, cards_str),
      _cR_ = [0, caml_call1(Virtual_dom_Node[6], _cQ_), 0];
     return caml_call3(Virtual_dom_Node[38], 0, 0, _cR_);
    }
    var
     meld_nodes = caml_call2(Core_List[41], melds, _cL_),
     _cM_ = [0, caml_call3(Virtual_dom_Node[54], 0, 0, meld_nodes), 0],
     _cN_ = [0, caml_call1(Virtual_dom_Node[6], cst_Melds_on_table$0), 0],
     _cO_ = [0, caml_call3(Virtual_dom_Node[24], 0, 0, _cN_), _cM_];
    return caml_call3(Virtual_dom_Node[17], 0, 0, _cO_);
   }
   function initial_state(vs_computer, param){
    var
     _cq_ = [0, c(1), 0],
     _cr_ = [0, d(1), _cq_],
     _cs_ = [0, s(12), _cr_],
     _ct_ = [0, d(11), _cs_],
     _cu_ = [0, c(7), _ct_],
     _cv_ = [0, h(6), _cu_],
     p0 = [0, 0, cst_Player_1, [0, h(5), _cv_]],
     p1_name = vs_computer ? cst_Computer : cst_Player_2,
     _cw_ = [0, s(9), 0],
     _cx_ = [0, d(7), _cw_],
     _cy_ = [0, s(0), _cx_],
     _cz_ = [0, d(10), _cy_],
     _cA_ = [0, h(10), _cz_],
     _cB_ = [0, c(4), _cA_],
     p1 = [0, 1, p1_name, [0, c(3), _cB_]],
     used_cards = caml_call2(Core[156], p0[3], p1[3]);
    function card_equal(a, b){
     var
      _cF_ = a[1] === b[1] ? 1 : 0,
      _cG_ = _cF_ ? a[2] === b[2] ? 1 : 0 : _cF_;
     return _cG_;
    }
    function _cC_(c){
     function _cE_(u){return card_equal(u, c);}
     return 1 - caml_call2(Core_List[23], used_cards, _cE_);
    }
    var
     _cD_ = caml_call2(Core_List[12], Rummy_engine_Setup[1], _cC_),
     deck_remaining = caml_call1(Rummy_engine_Setup[2], _cD_);
    return [0,
            deck_remaining,
            0,
            0,
            [0, p0, p1],
            0,
            0,
            0,
            _f_,
            0,
            caml_call2(Core_Array[63], 2, 0)];
   }
   function parse_indices(s){
    function _cj_(k){return k - 1 | 0;}
    function _ck_(t){
     function _cp_(param){return caml_call1(Core_Int[78], t);}
     return caml_call1(Core_Option[56], _cp_);
    }
    var
     _cl_ = caml_call1(Core_Fn[2], Core_String[14]),
     _cm_ = caml_call2(Core_String[78], s, 32),
     _cn_ = caml_call2(Core_List[12], _cm_, _cl_),
     _co_ = caml_call2(Core_List[13], _cn_, _ck_);
    return caml_call2(Core_List[51], _co_, _cj_);
   }
   function nth(i, xs){
    function go(k, param){
     var k$0 = k, param$0 = param;
     for(;;){
      if(! param$0) return 0;
      var tl = param$0[2], x = param$0[1];
      if(caml_call2(Core[90], k$0, 0)) return [0, x];
      var k$1 = k$0 - 1 | 0, k$0 = k$1, param$0 = tl;
     }
    }
    return caml_call2(Core[92], i, 0) ? 0 : go(i, xs);
   }
   function cards_by_indices(hand, idxs0){
    function gather(acc, param){
     var acc$0 = acc, param$0 = param;
     for(;;){
      if(! param$0) return [0, caml_call1(Core_List[59], acc$0)];
      var is = param$0[2], i = param$0[1], match = nth(i, hand);
      if(! match) return 0;
      var c = match[1], acc$1 = [0, c, acc$0], acc$0 = acc$1, param$0 = is;
     }
    }
    return gather(0, idxs0);
   }
   function component(graph){
    var
     rng = caml_call1(Base_Random[19][2], [0, 12648430]),
     _A_ =
       [0,
        -783402420,
        0,
        initial_state(0, 0),
        cst$4,
        cst$3,
        cst$2,
        cst$1,
        cst$0,
        cst,
        0],
     state = caml_call5(Bonsai[11], 0, 0, 0, _A_, graph);
    function _B_(param){
     var
      set_all = param[2],
      match = param[1],
      hist = match[10],
      disc_i = match[9],
      lay_m = match[8],
      lay_c = match[7],
      run_s = match[6],
      set_s = match[5],
      drawN = match[4],
      st = match[3],
      vs_comp = match[2],
      screen = match[1];
     function set_all_full
     (screen, vs_comp, st, drawN, set_s, run_s, lay_c, lay_m, disc_i, hist){
      return caml_call1
              (set_all,
               [0,
                screen,
                vs_comp,
                st,
                drawN,
                set_s,
                run_s,
                lay_c,
                lay_m,
                disc_i,
                hist]);
     }
     function set_drawN(s){
      return caml_call1
              (set_all,
               [0,
                screen,
                vs_comp,
                st,
                s,
                set_s,
                run_s,
                lay_c,
                lay_m,
                disc_i,
                hist]);
     }
     function set_set_s(s){
      return caml_call1
              (set_all,
               [0,
                screen,
                vs_comp,
                st,
                drawN,
                s,
                run_s,
                lay_c,
                lay_m,
                disc_i,
                hist]);
     }
     function set_run_s(s){
      return caml_call1
              (set_all,
               [0,
                screen,
                vs_comp,
                st,
                drawN,
                set_s,
                s,
                lay_c,
                lay_m,
                disc_i,
                hist]);
     }
     function set_lay_c(s){
      return caml_call1
              (set_all,
               [0,
                screen,
                vs_comp,
                st,
                drawN,
                set_s,
                run_s,
                s,
                lay_m,
                disc_i,
                hist]);
     }
     function set_lay_m(s){
      return caml_call1
              (set_all,
               [0,
                screen,
                vs_comp,
                st,
                drawN,
                set_s,
                run_s,
                lay_c,
                s,
                disc_i,
                hist]);
     }
     function set_disc_i(s){
      return caml_call1
              (set_all,
               [0,
                screen,
                vs_comp,
                st,
                drawN,
                set_s,
                run_s,
                lay_c,
                lay_m,
                s,
                hist]);
     }
     function set_vs(b){
      return caml_call1
              (set_all,
               [0,
                screen,
                b,
                st,
                drawN,
                set_s,
                run_s,
                lay_c,
                lay_m,
                disc_i,
                hist]);
     }
     function advance_ai_turn(st_start){
      var max_steps = 20;
      function loop(steps, st_ai){
       var steps$0 = steps, st_ai$0 = st_ai;
       for(;;){
        if(caml_call2(Core[90], st_ai$0[5], 0)) return st_ai$0;
        if(caml_call2(Core[89], steps$0, 0))
         return [0,
                 st_ai$0[1],
                 st_ai$0[2],
                 st_ai$0[3],
                 st_ai$0[4],
                 0,
                 0,
                 st_ai$0[7],
                 st_ai$0[8],
                 st_ai$0[9],
                 st_ai$0[10]];
        if(3 <= st_ai$0[6]){
         var match = caml_call1(Rummy_engine_Engine[17], st_ai$0);
         if(2 === match[0])
          return [0,
                  st_ai$0[1],
                  st_ai$0[2],
                  st_ai$0[3],
                  st_ai$0[4],
                  0,
                  0,
                  st_ai$0[7],
                  st_ai$0[8],
                  st_ai$0[9],
                  st_ai$0[10]];
         var st_ai$1 = match[1];
         if(caml_call2(Core[90], st_ai$1[5], 0)) return st_ai$1;
         var steps$1 = steps$0 - 1 | 0, steps$0 = steps$1, st_ai$0 = st_ai$1;
        }
        else{
         var match$0 = caml_call2(Rummy_engine_Ai[14], rng, st_ai$0);
         if(match$0){
          var st_ai$2 = match$0[1];
          if(caml_call2(Core[90], st_ai$2[5], 0)) return st_ai$2;
          var steps$2 = steps$0 - 1 | 0, steps$0 = steps$2, st_ai$0 = st_ai$2;
         }
         else{
          var match$1 = caml_call1(Rummy_engine_Engine[17], st_ai$0);
          if(2 === match$1[0])
           return [0,
                   st_ai$0[1],
                   st_ai$0[2],
                   st_ai$0[3],
                   st_ai$0[4],
                   0,
                   0,
                   st_ai$0[7],
                   st_ai$0[8],
                   st_ai$0[9],
                   st_ai$0[10]];
          var st_ai$3 = match$1[1];
          if(caml_call2(Core[90], st_ai$3[5], 0)) return st_ai$3;
          var steps$3 = steps$0 - 1 | 0, steps$0 = steps$3, st_ai$0 = st_ai$3;
         }
        }
       }
      }
      return loop(max_steps, st_start);
     }
     function apply_and_maybe_ai(st_after){
      var hist$0 = [0, st, hist];
      a:
      {
       if(vs_comp && caml_call2(Core[90], st_after[5], 1)){
        var final_state = advance_ai_turn(st_after);
        break a;
       }
       var final_state = st_after;
      }
      return set_all_full
              (screen,
               vs_comp,
               final_state,
               cst$10,
               cst$9,
               cst$8,
               cst$7,
               cst$6,
               cst$5,
               hist$0);
     }
     function on_back(ev){
      if(! hist) return Ui_effect[1];
      var rest = hist[2], prev = hist[1];
      return set_all_full
              (screen,
               vs_comp,
               prev,
               cst$16,
               cst$15,
               cst$14,
               cst$13,
               cst$12,
               cst$11,
               rest);
     }
     if(-680970418 > screen){
      var
       start_pass_and_play =
         function(ev){
          var
           _ch_ =
             [0,
              set_all_full
               (-680970418,
                0,
                initial_state(0, 0),
                cst$23,
                cst$22,
                cst$21,
                cst$20,
                cst$19,
                cst$18,
                0),
              0],
           _ci_ = [0, set_vs(0), _ch_];
          return [0, Ui_effect[2], _ci_];
         },
       start_vs_computer =
         function(ev){
          var
           _cf_ =
             [0,
              set_all_full
               (-680970418,
                1,
                initial_state(1, 0),
                cst$29,
                cst$28,
                cst$27,
                cst$26,
                cst$25,
                cst$24,
                0),
              0],
           _cg_ = [0, set_vs(1), _cf_];
          return [0, Ui_effect[2], _cg_];
         },
       _bX_ = [0, caml_call1(Virtual_dom_Node[6], cst_Play_vs_Computer), 0],
       _bY_ = caml_call1(Css_gen[77], _y_),
       _bZ_ = [0, caml_call1(Virtual_dom_Vdom[1][32], _bY_), 0],
       _b0_ =
         [0,
          [0, caml_call1(Virtual_dom_Vdom[1][61], start_vs_computer), _bZ_]],
       _b1_ = [0, caml_call3(Virtual_dom_Node[12], 0, _b0_, _bX_), 0],
       _b2_ = [0, caml_call1(Virtual_dom_Node[6], cst_Pass_Play), 0],
       _b3_ =
         [0, [0, caml_call1(Virtual_dom_Vdom[1][61], start_pass_and_play), 0]],
       _b4_ = [0, caml_call3(Virtual_dom_Node[12], 0, _b3_, _b2_), _b1_],
       _b5_ = [0, caml_call3(Virtual_dom_Node[17], 0, 0, _b4_), 0],
       _b6_ =
         [0, caml_call1(Virtual_dom_Node[6], cst_Choose_a_mode_to_begin), 0],
       _b7_ = [0, caml_call3(Virtual_dom_Node[39], 0, 0, _b6_), _b5_],
       _b8_ = [0, caml_call1(Virtual_dom_Node[6], cst_Welcome_to_Rummy), 0],
       _b9_ = [0, caml_call3(Virtual_dom_Node[22], 0, 0, _b8_), _b7_];
      return caml_call3(Virtual_dom_Node[17], 0, 0, _b9_);
     }
     function on_end_check(ev){
      var match = caml_call1(Rummy_engine_Engine[17], st);
      if(2 === match[0]) return Ui_effect[1];
      var st$0 = match[1];
      return apply_and_maybe_ai(st$0);
     }
     switch(st[6]){
       case 0:
        var
         on_draw_deck =
           function(param){
            var match = caml_call2(Rummy_engine_Engine[14], 0, st);
            if(2 === match[0]) return Ui_effect[1];
            var st$0 = match[1];
            return apply_and_maybe_ai(st$0);
           },
         on_draw_discard_top =
           function(param){
            var match = caml_call2(Rummy_engine_Engine[14], 1, st);
            if(2 === match[0]) return Ui_effect[1];
            var st$0 = match[1];
            return apply_and_maybe_ai(st$0);
           },
         on_draw_discard_n =
           function(param){
            var
             _ce_ = caml_call2(Core_String[85], 0, drawN),
             match = caml_call1(Core_Int[15], _ce_);
            a:
            {
             if(match){
              var k = match[1];
              if(caml_call2(Core[91], k, 0)){var n = k; break a;}
             }
             var n = 1;
            }
            var match$0 = caml_call2(Rummy_engine_Engine[14], [0, n], st);
            if(2 === match$0[0]) return Ui_effect[1];
            var st$0 = match$0[1];
            return apply_and_maybe_ai(st$0);
           },
         _D_ =
           [0, caml_call1(Virtual_dom_Node[6], cst_Draw_N_from_discard), 0],
         _E_ = caml_call1(Css_gen[77], _g_),
         _F_ = [0, caml_call1(Virtual_dom_Vdom[1][32], _E_), 0],
         _G_ =
           [0,
            [0, caml_call1(Virtual_dom_Vdom[1][61], on_draw_discard_n), _F_]],
         _H_ = [0, caml_call3(Virtual_dom_Node[12], 0, _G_, _D_), 0],
         _J_ = caml_call1(Css_gen[61], _h_),
         _C_ = 0,
         _I_ = 0,
         _K_ = [0, caml_call1(Virtual_dom_Vdom[1][32], _J_), 0],
         _L_ = function(ev, s){return set_drawN(s);},
         _M_ = [0, caml_call1(Virtual_dom_Vdom[1][57], _L_), _K_],
         _N_ = [0, caml_call1(Virtual_dom_Vdom[1][33], 1.), _M_],
         _O_ = [0, caml_call1(Virtual_dom_Vdom[1][44], drawN), _N_],
         _P_ = [0, caml_call1(Virtual_dom_Vdom[1][27], cst_N), _O_],
         _Q_ = [0, [0, caml_call1(Virtual_dom_Vdom[1][43], cst_number), _P_]],
         _R_ = [0, caml_call3(Virtual_dom_Node[30], 0, _Q_, _I_), _H_],
         _S_ = [0, caml_call3(Virtual_dom_Node[17], 0, 0, _R_), _C_],
         _T_ =
           [0, caml_call1(Virtual_dom_Node[6], cst_Draw_top_of_discard), 0],
         _U_ = caml_call1(Css_gen[77], _i_),
         _V_ = [0, caml_call1(Virtual_dom_Vdom[1][32], _U_), 0],
         _W_ =
           [0,
            [0, caml_call1(Virtual_dom_Vdom[1][61], on_draw_discard_top), _V_]],
         _X_ = [0, caml_call3(Virtual_dom_Node[12], 0, _W_, _T_), 0],
         _Y_ = [0, caml_call1(Virtual_dom_Node[6], cst_Draw_from_deck), 0],
         _Z_ = [0, [0, caml_call1(Virtual_dom_Vdom[1][61], on_draw_deck), 0]],
         ___ = [0, caml_call3(Virtual_dom_Node[12], 0, _Z_, _Y_), _X_],
         _$_ = [0, caml_call3(Virtual_dom_Node[17], 0, 0, ___), _S_],
         _aa_ = [0, caml_call1(Virtual_dom_Node[6], cst_Draw_phase), 0],
         controls = [0, caml_call3(Virtual_dom_Node[24], 0, 0, _aa_), _$_];
        break;
       case 1:
        var
         _aE_ = st[5],
         p$0 = caml_check_bound(st[4], _aE_)[1 + _aE_],
         on_make_set =
           function(param){
            var
             _cd_ = parse_indices(set_s),
             match = cards_by_indices(p$0[3], _cd_);
            if(! match) return Ui_effect[1];
            var
             cs = match[1],
             match$0 = caml_call2(Rummy_engine_Engine[15], [0, cs], st);
            if(2 === match$0[0]) return Ui_effect[1];
            var st$0 = match$0[1];
            return apply_and_maybe_ai(st$0);
           },
         on_make_run =
           function(param){
            var
             _cc_ = parse_indices(run_s),
             match = cards_by_indices(p$0[3], _cc_);
            if(! match) return Ui_effect[1];
            var
             cs = match[1],
             match$0 = caml_call2(Rummy_engine_Engine[15], [1, cs], st);
            if(2 === match$0[0]) return Ui_effect[1];
            var st$0 = match$0[1];
            return apply_and_maybe_ai(st$0);
           },
         on_layoff =
           function(param){
            var
             _ca_ = caml_call2(Core_String[85], 0, lay_c),
             ci_opt = caml_call1(Core_Int[15], _ca_),
             _cb_ = caml_call2(Core_String[85], 0, lay_m),
             mi_opt = caml_call1(Core_Int[15], _cb_);
            if(ci_opt && mi_opt){
             var
              mi1 = mi_opt[1],
              ci1 = ci_opt[1],
              ci0 = ci1 - 1 | 0,
              mi0 = mi1 - 1 | 0,
              match = nth(ci0, p$0[3]);
             if(! match) return Ui_effect[1];
             var
              card = match[1],
              match$0 =
                caml_call2(Rummy_engine_Engine[15], [2, card, mi0], st);
             if(2 === match$0[0]) return Ui_effect[1];
             var st$0 = match$0[1];
             return apply_and_maybe_ai(st$0);
            }
            return Ui_effect[1];
           },
         on_skip =
           function(param){
            var match = caml_call2(Rummy_engine_Engine[15], 0, st);
            if(2 === match[0]) return Ui_effect[1];
            var st$0 = match[1];
            return apply_and_maybe_ai(st$0);
           },
         _aF_ = [0, caml_call1(Virtual_dom_Node[6], cst_Skip_to_Discard), 0],
         _aG_ = caml_call1(Css_gen[75], _m_),
         _aH_ = [0, caml_call1(Virtual_dom_Vdom[1][32], _aG_), 0],
         _aI_ = [0, [0, caml_call1(Virtual_dom_Vdom[1][61], on_skip), _aH_]],
         _aJ_ = [0, caml_call3(Virtual_dom_Node[12], 0, _aI_, _aF_), 0],
         _aK_ =
           [0, caml_call1(Virtual_dom_Node[6], cst_Layoff_card_on_meld), 0],
         _aL_ = caml_call1(Css_gen[77], _n_),
         _aM_ = [0, caml_call1(Virtual_dom_Vdom[1][32], _aL_), 0],
         _aN_ = [0, [0, caml_call1(Virtual_dom_Vdom[1][61], on_layoff), _aM_]],
         _aO_ = [0, caml_call3(Virtual_dom_Node[12], 0, _aN_, _aK_), 0],
         _aQ_ = [0, caml_call1(Css_gen[77], _o_), 0],
         _aR_ = [0, caml_call1(Css_gen[61], _p_), _aQ_],
         _aS_ = caml_call1(Css_gen[31], _aR_),
         _aP_ = 0,
         _aT_ = [0, caml_call1(Virtual_dom_Vdom[1][32], _aS_), 0],
         _aU_ = function(ev, s){return set_lay_m(s);},
         _aV_ = [0, caml_call1(Virtual_dom_Vdom[1][57], _aU_), _aT_],
         _aW_ = [0, caml_call1(Virtual_dom_Vdom[1][44], lay_m), _aV_],
         _aX_ =
           [0,
            [0, caml_call1(Virtual_dom_Vdom[1][27], cst_on_meld_index), _aW_]],
         _aY_ = [0, caml_call3(Virtual_dom_Node[30], 0, _aX_, _aP_), _aO_],
         _a0_ = caml_call1(Css_gen[61], _q_),
         _aZ_ = 0,
         _a1_ = [0, caml_call1(Virtual_dom_Vdom[1][32], _a0_), 0],
         _a2_ = function(ev, s){return set_lay_c(s);},
         _a3_ = [0, caml_call1(Virtual_dom_Vdom[1][57], _a2_), _a1_],
         _a4_ = [0, caml_call1(Virtual_dom_Vdom[1][44], lay_c), _a3_],
         _a5_ =
           [0,
            [0,
             caml_call1(Virtual_dom_Vdom[1][27], cst_layoff_card_index),
             _a4_]],
         _a6_ = [0, caml_call3(Virtual_dom_Node[30], 0, _a5_, _aZ_), _aY_],
         _a7_ = [0, caml_call3(Virtual_dom_Node[17], 0, 0, _a6_), _aJ_],
         _a8_ = [0, caml_call1(Virtual_dom_Node[6], cst_Make_run), 0],
         _a9_ = caml_call1(Css_gen[77], _r_),
         _a__ = [0, caml_call1(Virtual_dom_Vdom[1][32], _a9_), 0],
         _a$_ =
           [0, [0, caml_call1(Virtual_dom_Vdom[1][61], on_make_run), _a__]],
         _ba_ = [0, caml_call3(Virtual_dom_Node[12], 0, _a$_, _a8_), 0],
         _bc_ = caml_call1(Css_gen[61], _s_),
         _bb_ = 0,
         _bd_ = [0, caml_call1(Virtual_dom_Vdom[1][32], _bc_), 0],
         _be_ = function(ev, s){return set_run_s(s);},
         _bf_ = [0, caml_call1(Virtual_dom_Vdom[1][57], _be_), _bd_],
         _bg_ = [0, caml_call1(Virtual_dom_Vdom[1][44], run_s), _bf_],
         _bh_ =
           [0,
            [0,
             caml_call1(Virtual_dom_Vdom[1][27], cst_run_indices_e_g_2_3_4),
             _bg_]],
         _bi_ = [0, caml_call3(Virtual_dom_Node[30], 0, _bh_, _bb_), _ba_],
         _bj_ = [0, caml_call3(Virtual_dom_Node[17], 0, 0, _bi_), _a7_],
         _bk_ = [0, caml_call1(Virtual_dom_Node[6], cst_Make_set), 0],
         _bl_ = caml_call1(Css_gen[77], _t_),
         _bm_ = [0, caml_call1(Virtual_dom_Vdom[1][32], _bl_), 0],
         _bn_ =
           [0, [0, caml_call1(Virtual_dom_Vdom[1][61], on_make_set), _bm_]],
         _bo_ = [0, caml_call3(Virtual_dom_Node[12], 0, _bn_, _bk_), 0],
         _bq_ = caml_call1(Css_gen[61], _u_),
         _bp_ = 0,
         _br_ = [0, caml_call1(Virtual_dom_Vdom[1][32], _bq_), 0],
         _bs_ = function(ev, s){return set_set_s(s);},
         _bt_ = [0, caml_call1(Virtual_dom_Vdom[1][57], _bs_), _br_],
         _bu_ = [0, caml_call1(Virtual_dom_Vdom[1][44], set_s), _bt_],
         _bv_ =
           [0,
            [0,
             caml_call1(Virtual_dom_Vdom[1][27], cst_set_indices_e_g_1_3_5),
             _bu_]],
         _bw_ = [0, caml_call3(Virtual_dom_Node[30], 0, _bv_, _bp_), _bo_],
         _bx_ = [0, caml_call3(Virtual_dom_Node[17], 0, 0, _bw_), _bj_],
         _by_ = [0, caml_call1(Virtual_dom_Node[6], cst_Play_phase), 0],
         controls = [0, caml_call3(Virtual_dom_Node[24], 0, 0, _by_), _bx_];
        break;
       case 2:
        var
         _bz_ = st[5],
         p$1 = caml_check_bound(st[4], _bz_)[1 + _bz_],
         on_discard_click =
           function(param){
            var
             _b__ = caml_call2(Core_String[85], 0, disc_i),
             match = caml_call1(Core_Int[15], _b__);
            a:
            {
             if(match){
              var k = match[1];
              if(caml_call2(Core[88], k, 1)){
               var _b$_ = k - 1 | 0, idx0 = _b$_;
               break a;
              }
             }
             var idx0 = 0;
            }
            var match$0 = nth(idx0, p$1[3]);
            if(! match$0) return Ui_effect[1];
            var
             card = match$0[1],
             match$1 = caml_call2(Rummy_engine_Engine[16], [0, card], st);
            if(2 === match$1[0]) return Ui_effect[1];
            var st$0 = match$1[1];
            return apply_and_maybe_ai(st$0);
           },
         _bB_ = [0, caml_call1(Virtual_dom_Node[6], cst_Discard$0), 0],
         _bC_ = caml_call1(Css_gen[77], _v_),
         _bD_ = [0, caml_call1(Virtual_dom_Vdom[1][32], _bC_), 0],
         _bE_ =
           [0,
            [0, caml_call1(Virtual_dom_Vdom[1][61], on_discard_click), _bD_]],
         _bF_ = [0, caml_call3(Virtual_dom_Node[12], 0, _bE_, _bB_), 0],
         _bH_ = caml_call1(Css_gen[61], _w_),
         _bA_ = 0,
         _bG_ = 0,
         _bI_ = [0, caml_call1(Virtual_dom_Vdom[1][32], _bH_), 0],
         _bJ_ = function(ev, s){return set_disc_i(s);},
         _bK_ = [0, caml_call1(Virtual_dom_Vdom[1][57], _bJ_), _bI_],
         _bL_ = [0, caml_call1(Virtual_dom_Vdom[1][44], disc_i), _bK_],
         _bM_ =
           [0,
            [0,
             caml_call1(Virtual_dom_Vdom[1][27], cst_discard_card_index),
             _bL_]],
         _bN_ = [0, caml_call3(Virtual_dom_Node[30], 0, _bM_, _bG_), _bF_],
         _bO_ = [0, caml_call3(Virtual_dom_Node[17], 0, 0, _bN_), _bA_],
         _bP_ = [0, caml_call1(Virtual_dom_Node[6], cst_Discard_phase), 0],
         controls = [0, caml_call3(Virtual_dom_Node[24], 0, 0, _bP_), _bO_];
        break;
       default:
        if(vs_comp)
         var pass_message = Virtual_dom_Node[4];
        else
         var
          _bU_ =
            [0,
             caml_call1(Virtual_dom_Node[6], cst_Please_pass_your_device_to$0),
             0],
          _bV_ = caml_call1(Css_gen[51], _x_),
          _bW_ = [0, [0, caml_call1(Virtual_dom_Vdom[1][32], _bV_), 0]],
          pass_message = caml_call3(Virtual_dom_Node[39], 0, _bW_, _bU_);
        var
         _bQ_ =
           [0, caml_call1(Virtual_dom_Node[6], cst_Continue_End_check), 0],
         _bR_ = [0, [0, caml_call1(Virtual_dom_Vdom[1][61], on_end_check), 0]],
         _bS_ =
           [0,
            pass_message,
            [0, caml_call3(Virtual_dom_Node[12], 0, _bR_, _bQ_), 0]],
         _bT_ =
           [0, caml_call1(Virtual_dom_Node[6], cst_End_of_turn_checks), 0],
         controls = [0, caml_call3(Virtual_dom_Node[24], 0, 0, _bT_), _bS_];
     }
     var _ab_ = st[5], p = caml_check_bound(st[4], _ab_)[1 + _ab_], _ac_ = 0;
     if(hist)
      var
       _ad_ = [0, caml_call1(Virtual_dom_Node[6], cst_Back), 0],
       _ae_ = caml_call1(Css_gen[75], _j_),
       _af_ = [0, caml_call1(Virtual_dom_Vdom[1][32], _ae_), 0],
       _ag_ = [0, [0, caml_call1(Virtual_dom_Vdom[1][61], on_back), _af_]],
       _ah_ = caml_call3(Virtual_dom_Node[12], 0, _ag_, _ad_);
     else
      var _ah_ = Virtual_dom_Node[4];
     var
      _ai_ =
        [0, caml_call3(Virtual_dom_Node[17], 0, 0, controls), [0, _ah_, _ac_]],
      _aj_ = [0, caml_call3(Virtual_dom_Node[57], 0, 0, 0), _ai_],
      _ak_ = [0, view_melds(st[3]), _aj_],
      _al_ = [0, view_discard(st[2]), _ak_];
     if(3 === st[6])
      var
       _am_ =
         [0,
          caml_call1(Virtual_dom_Node[6], cst_Please_pass_your_device_to),
          0],
       _an_ = [0, caml_call3(Virtual_dom_Node[24], 0, 0, _am_), 0],
       _ao_ = caml_call3(Virtual_dom_Node[17], 0, 0, _an_);
     else
      var
       _aA_ = [0, view_cards(p[3]), 0],
       _aB_ = caml_call2(Core[18], p[2], cst_s_hand),
       _aC_ = [0, caml_call1(Virtual_dom_Node[6], _aB_), 0],
       _aD_ = [0, caml_call3(Virtual_dom_Node[24], 0, 0, _aC_), _aA_],
       _ao_ = caml_call3(Virtual_dom_Node[17], 0, 0, _aD_);
     var
      _ap_ = caml_call1(Core_List[45], st[2]),
      _aq_ = caml_call1(Core_List[45], st[1]),
      _ar_ = caml_call3(Core_Printf[2], _k_, _aq_, _ap_),
      _as_ = [0, caml_call1(Virtual_dom_Node[6], _ar_), 0],
      _at_ =
        [0, caml_call3(Virtual_dom_Node[39], 0, 0, _as_), [0, _ao_, _al_]],
      _au_ = string_of_phase(st[6]),
      _av_ = caml_call3(Core_Printf[2], _l_, p[2], _au_),
      _aw_ = [0, caml_call1(Virtual_dom_Node[6], _av_), 0],
      _ax_ = [0, caml_call3(Virtual_dom_Node[39], 0, 0, _aw_), _at_],
      _ay_ = [0, caml_call1(Virtual_dom_Node[6], cst$17), 0],
      _az_ = [0, caml_call3(Virtual_dom_Node[22], 0, 0, _ay_), _ax_];
     return caml_call3(Virtual_dom_Node[17], 0, 0, _az_);
    }
    return caml_call2(Bonsai[2][2], state, _B_);
   }
   caml_call4(Bonsai_web_Start[2][3], 0, _z_, 0, component);
   caml_call1(Ppx_module_timer_runtime[5], cst_Dune_exe_App$0);
   var Dune_exe_App = [0];
   runtime.caml_register_global(125, Dune_exe_App, cst_Dune_exe_App$1);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
