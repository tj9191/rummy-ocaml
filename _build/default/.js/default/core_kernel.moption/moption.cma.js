// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Moption__
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Moption = [0],
    Moption$0 = [0, Moption];
   runtime.caml_register_global(0, Moption$0, "Moption__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Moption__Import
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Moption_Import = "Moption__Import",
    cst_moption = "moption";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Moption_Import);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_moption);
   caml_call1(Ppx_expect_runtime[1][1], "moption/src/import.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_moption, "import.ml");
   caml_call1(Ppx_inline_test_lib[7], cst_moption);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Moption_Import);
   var Moption_Import = [0];
   runtime.caml_register_global(11, Moption_Import, cst_Moption_Import);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Moption
//# unitInfo: Requires: Base__Invariant, Bin_prot__Common, Bin_prot__Shape, Bin_prot__Utils, Bin_shape, Core, Core__Option, Core__Sexpable, Core__Stable, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Stable_witness, Stdlib__Obj
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Moption$1 = "Moption",
    cst_moption$0 = "moption",
    cst_moption_src_moption_ml = "moption/src/moption.ml";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Core_Option = global_data.Core__Option,
    Base_Invariant = global_data.Base__Invariant,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Core = global_data.Core,
    Bin_prot_Common = global_data.Bin_prot__Common,
    Core_Stable = global_data.Core__Stable,
    Bin_shape = global_data.Bin_shape,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Stable_witness = global_data.Stable_witness,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Stdlib_Obj = global_data.Stdlib__Obj,
    Core_Sexpable = global_data.Core__Sexpable,
    Bin_prot_Utils = global_data.Bin_prot__Utils;
   caml_call1(Ppx_module_timer_runtime[4], cst_Moption$1);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_moption$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_moption_src_moption_ml);
   caml_call2(Ppx_inline_test_lib[6], cst_moption$0, "moption.ml");
   var
    none = runtime.caml_obj_block(Stdlib_Obj[14], 1),
    _b_ = [0, "_"],
    _c_ = [0, cst_moption_src_moption_ml, 107, 2789, 2811],
    cst_Moption_get_some_exn = "Moption.get_some_exn",
    cst_Moption = cst_Moption$1,
    cst_afef8a9c_daba_11ed_a4e5_aa = "afef8a9c-daba-11ed-a4e5-aa777790ac98",
    cst_moption = cst_moption$0,
    cst_Moption$0 = cst_Moption$1;
   function create(param){return [0, none];}
   function is_none(x){return x[1] === none ? 1 : 0;}
   function to_sexpable(t){return is_none(t) ? 0 : [0, t[1]];}
   function unsafe_get(t){return t[1];}
   var
    Optional_syntax = [0, is_none, unsafe_get],
    Optional_syntax$0 = [0, Optional_syntax];
   function stable_witness(a_stable_witness){return Stable_witness[6];}
   function of_sexpable(param){
    if(! param) return create(0);
    var v = param[1];
    return [0, v];
   }
   var
    _a_ = Core_Option[68][1],
    include =
      caml_call1
       (caml_call1(Core_Sexpable[2][2][1], [0, _a_[14], _a_[15]]),
        [0, to_sexpable, of_sexpable]),
    t_of_sexp = include[1],
    sexp_of_t = include[2];
   function bin_shape_t(bin_shape_a){
    var _k_ = caml_call1(Bin_shape[5][1], cst_afef8a9c_daba_11ed_a4e5_aa);
    return caml_call2(Bin_prot_Shape[12], _k_, [0, bin_shape_a, 0]);
   }
   function bin_size_t(bin_size_a, ppx_optional_e_0){
    if(caml_call1(Optional_syntax$0[1][1], ppx_optional_e_0))
     return caml_call1(Core_Stable[2], 0);
    var
     a = caml_call1(Optional_syntax$0[1][2], ppx_optional_e_0),
     _j_ = caml_call1(bin_size_a, a);
    return caml_call1(Core_Stable[2], 1) + _j_ | 0;
   }
   function bin_write_t(bin_write_a, buf, pos, ppx_optional_e_0){
    if(caml_call1(Optional_syntax$0[1][1], ppx_optional_e_0))
     return caml_call3(Core_Stable[93], buf, pos, 0);
    var
     a = caml_call1(Optional_syntax$0[1][2], ppx_optional_e_0),
     pos$0 = caml_call3(Core_Stable[93], buf, pos, 1);
    return caml_call3(bin_write_a, buf, pos$0, a);
   }
   function bin_read_t(bin_read_a, buf, pos_ref){
    return caml_call2(Core_Stable[96], buf, pos_ref)
            ? [0, caml_call2(bin_read_a, buf, pos_ref)]
            : create(0);
   }
   function bin_read_t$0(param, _i_, pos_ref, _h_){
    return caml_call2(Bin_prot_Common[19], cst_Moption, pos_ref[1]);
   }
   var
    Minimal_bin_io =
      [0, bin_shape_t, bin_size_t, bin_write_t, bin_read_t, bin_read_t$0],
    include$0 = caml_call1(Bin_prot_Utils[7], Minimal_bin_io),
    bin_shape_t$0 = include$0[1],
    bin_size_t$0 = include$0[2],
    bin_write_t$0 = include$0[3],
    bin_read_t$1 = include$0[4],
    bin_read_t$2 = include$0[5],
    bin_writer_t = include$0[6],
    bin_reader_t = include$0[7],
    bin_t = include$0[8];
   function is_some(x){return 1 - is_none(x);}
   function get_some_exn(x){
    if(! is_none(x)) return x[1];
    var _g_ = caml_call1(Sexplib0_Sexp_conv[7], cst_Moption_get_some_exn);
    return caml_call1(Core[261], _g_);
   }
   function set_some(t, v){t[1] = v; return 0;}
   function set_none(t){t[1] = none; return 0;}
   function set(t, v){
    if(! v) return set_none(t);
    var v$0 = v[1];
    return set_some(t, v$0);
   }
   function invariant(invariant_a, t){
    function _d_(param){
     var _f_ = to_sexpable(t);
     return caml_call2(Core_Option[46], _f_, invariant_a);
    }
    function _e_(x_001){
     return caml_call2(sexp_of_t, function(param){return _b_;}, x_001);
    }
    return caml_call4(Base_Invariant[1], _c_, t, _e_, _d_);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_moption);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Moption$0);
   var
    Moption =
      [0,
       bin_shape_t$0,
       bin_size_t$0,
       bin_write_t$0,
       bin_read_t$1,
       bin_read_t$2,
       bin_writer_t,
       bin_reader_t,
       bin_t,
       t_of_sexp,
       sexp_of_t,
       invariant,
       Optional_syntax$0,
       create,
       is_none,
       is_some,
       to_sexpable,
       get_some_exn,
       unsafe_get,
       set,
       set_none,
       set_some,
       [0,
        [0,
         bin_shape_t$0,
         bin_size_t$0,
         bin_write_t$0,
         bin_read_t$1,
         bin_read_t$2,
         bin_writer_t,
         bin_reader_t,
         bin_t,
         t_of_sexp,
         sexp_of_t,
         stable_witness]]];
   runtime.caml_register_global(28, Moption, cst_Moption$1);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLjAsImZpbGUiOiJtb3B0aW9uLmNtYS5qcyIsInNvdXJjZVJvb3QiOiIiLCJuYW1lcyI6WyJub25lIiwiY3JlYXRlIiwiaXNfbm9uZSIsIngiLCJ0b19zZXhwYWJsZSIsInQiLCJ1bnNhZmVfZ2V0Iiwic3RhYmxlX3dpdG5lc3MiLCJhX3N0YWJsZV93aXRuZXNzIiwib2Zfc2V4cGFibGUiLCJ2IiwiYmluX3NoYXBlX3QiLCJiaW5fc2hhcGVfYSIsImJpbl9zaXplX3QiLCJiaW5fc2l6ZV9hIiwicHB4X29wdGlvbmFsX2VfMCIsImEiLCJiaW5fd3JpdGVfdCIsImJpbl93cml0ZV9hIiwiYnVmIiwicG9zIiwicG9zJDAiLCJiaW5fcmVhZF90IiwiYmluX3JlYWRfYSIsInBvc19yZWYiLCJiaW5fcmVhZF90JDAiLCJpc19zb21lIiwiZ2V0X3NvbWVfZXhuIiwic2V0X3NvbWUiLCJzZXRfbm9uZSIsInNldCIsInYkMCIsImludmFyaWFudCIsImludmFyaWFudF9hIiwieF8wMDEiXSwic291cmNlcyI6WyIvVXNlcnMvdHlsYW5tb3Jhbi8ub3BhbS81LjEuMS9saWIvY29yZV9rZXJuZWwvbW9wdGlvbi9tb3B0aW9uX18ubWwiLCIvVXNlcnMvdHlsYW5tb3Jhbi8ub3BhbS81LjEuMS9saWIvY29yZV9rZXJuZWwvbW9wdGlvbi9tb3B0aW9uLm1sIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0dBS21COztJQUFBOzs7O0U7Ozs7Ozs7Ozs7OztHOzs7OztHOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztFOzs7Ozs7Ozs7Ozs7O0c7Ozs7O0c7Ozs7O0c7Ozs7O0c7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0NJRTtJQUFmQSxPQUFlOzs7Ozs7OztZQUNmQyxjQUFZLFdBRFpELE1BQ29CO1lBQ3BCRSxRQUFRQyxHQUFJLE9BQUpBLFNBRlJILGFBRThCO1lBQzlCSSxZQUFJQyxHQUFJLE9BRFJILFFBQ0lHLGFBQUFBLE1BQXVDO1lBQzNDQyxXQUFXRCxHQUFJLE9BQUpBLEtBQU07R0FHTTtJQUFBLHNCQUx2QkgsU0FFQUk7SUFFcUI7R0FhdkIsU0FBUUMsZUFBSEMsa0I7WUFVS0M7SUFBYyxZQUNOLE9BN0JoQlI7UUE4QmFTO0lBQUssV0FBTEE7R0FBVTs7Ozs7O1lBNUJ2Qk4sYUEwQlFLOzs7WUFXSkUsWUFBWUM7SUFFWixVQUFBO0lBQ0EsT0FBQSx3Q0FIWUE7R0FHRztZQUdmQyxXQUFXQyxZQUNFQztJLHVDQUFBQTtLQUNMLE9BQUE7SUFDdUI7S0FBMUJDLHdDQUZRRDtLQUVrQixNQUFBLFdBSHBCRCxZQUdORTtJQUFLLE9BQUE7O1lBR1ZDLFlBQVlDLGFBQVlDLEtBQUtDLEtBQ2hCTDtJLHVDQUFBQTtLQUNMLE9BQUEsNEJBRmdCSSxLQUFLQztJQUluQjtLQURMSix3Q0FGUUQ7S0FHVE0sUUFBTSw0QkFKY0YsS0FBS0M7SUFLN0IsT0FBQSxXQUxZRixhQUFZQyxLQUlwQkUsT0FEQ0w7O1lBS0xNLFdBQVdDLFlBQVdKLEtBQUtLO0lBQzdCLE9BQU0sNEJBRGtCTCxLQUFLSztrQkFHZixXQUhERCxZQUFXSixLQUFLSztjQTNEL0J2QjtHQThEeUM7WUFHckN3Qix5QkFHREQ7SUFHRCxvREFIQ0E7R0FHMEQ7R0FuQ3ZDO0lBQUE7VUFHbEJiLGFBTUFFLFlBTUFJLGFBUUFLLFlBTUFHOzs7Ozs7Ozs7O1lBbUJOQyxRQUFRdkIsR0FBSSxXQW5GVkQsUUFtRk1DLEdBQW1CO1lBQzNCd0IsYUFBYXhCO0lBQUksS0FwRmZELFFBb0ZXQyxXQUFBQTs7O0dBQXVFO1lBQ3BGeUIsU0FBU3ZCLEdBQUVLLEdBQUZMLE9BQUVLLFlBQVU7WUFDckJtQixTQUFTeEIsR0FBQUEsT0F4RlBMLGVBd0ZvQjtZQUV0QjhCLElBQUl6QixHQUFFSztJQUNSLEtBRFFBLEdBRUUsT0FKUm1CLFNBRUl4QjtRQUdDMEIsTUFIQ3JCO0lBR0ksT0FOVmtCLFNBR0l2QixHQUdDMEI7R0FBaUI7WUFHdEJDLFVBQVVDLGFBQVk1Qjs7S0FFVixVQS9GVkQsWUE2Rm9CQztLQUVWLE9BQUEsaUNBRkY0QjtJQUV3QjtpQkFES0M7Syw2QyxjQUFBQTs7SUFBSyxPQUFBLG1DQUR0QjdCO0dBRWE7Ozs7Ozs7Ozs7Ozs7Ozs7OztPQUZuQzJCOztPQS9GRS9CO09BQ0FDO09BbUZGd0I7T0FsRkV0QjtPQW1GRnVCO09BbEZFckI7T0FzRkZ3QjtPQUZBRDtPQURBRDs7Ozs7Ozs7Ozs7OztTQXBFUXJCOzs7RSIsInNvdXJjZXNDb250ZW50IjpbIigqIGdlbmVyYXRlZCBieSBkdW5lICopXG5cbigqKiBAY2Fub25pY2FsIE1vcHRpb24uSW1wb3J0ICopXG5tb2R1bGUgSW1wb3J0ID0gTW9wdGlvbl9fSW1wb3J0XG5cbm1vZHVsZSBNb3B0aW9uX18gPSBzdHJ1Y3QgZW5kXG5bQEBkZXByZWNhdGVkIFwidGhpcyBtb2R1bGUgaXMgc2hhZG93ZWRcIl1cbiIsIm1vZHVsZSBFeHBvc2VkX2Zvcl91c2VfaW5fc3RhYmxlID0gc3RydWN0XG4gIG9wZW4hIENvcmVcbiAgb3BlbiEgSW1wb3J0XG5cbiAgKCogQmVpbmcgYSBwb2ludGVyLCBubyBvbmUgb3V0c2lkZSB0aGlzIG1vZHVsZSBjYW4gY29uc3RydWN0IGEgdmFsdWUgdGhhdCBpc1xuICAgICBbcGh5c19zYW1lXSBhcyB0aGlzIG9uZS5cblxuICAgICB0aGlzIGNvZGUgaXMgZHVwbGljYXRlZCBpbiBPcHRpb25fYXJyYXkuQ2hlYXBfb3B0aW9uLCBhbmQgaWYgd2UgZmluZCB5ZXQgYW5vdGhlclxuICAgICBwbGFjZSB3aGVyZSB3ZSB3YW50IGl0IHdlIHNob3VsZCByZWNvbnNpZGVyIG1ha2luZyBpdCBzaGFyZWQuICopXG4gIGxldCBub25lID0gT2JqLm9iaiAoT2JqLm5ld19ibG9jayBPYmouYWJzdHJhY3RfdGFnIDEpXG4gIGxldCBjcmVhdGUgKCkgPSByZWYgbm9uZVxuICBsZXQgaXNfbm9uZSB4ID0gcGh5c19lcXVhbCAheCBub25lXG4gIGxldCBnZXQgdCA9IGlmIGlzX25vbmUgdCB0aGVuIE5vbmUgZWxzZSBTb21lICF0XG4gIGxldCB1bnNhZmVfZ2V0IHQgPSAhdFxuXG4gIG1vZHVsZSBPcHRpb25hbF9zeW50YXggPSBzdHJ1Y3RcbiAgICBtb2R1bGUgT3B0aW9uYWxfc3ludGF4ID0gc3RydWN0XG4gICAgICBsZXQgaXNfbm9uZSA9IGlzX25vbmVcbiAgICAgIGxldCB1bnNhZmVfdmFsdWUgPSB1bnNhZmVfZ2V0XG4gICAgZW5kXG4gIGVuZFxuZW5kXG5cbm1vZHVsZSBTdGFibGUgPSBzdHJ1Y3RcbiAgb3BlbiEgQ29yZS5Db3JlX3N0YWJsZVxuICBvcGVuIEV4cG9zZWRfZm9yX3VzZV9pbl9zdGFibGVcblxuICBtb2R1bGUgVjEgPSBzdHJ1Y3RcbiAgICB0eXBlICdhIHQgPSAnYSByZWYgW0BAZGVyaXZpbmcgc3RhYmxlX3dpdG5lc3NdXG5cbiAgICBpbmNsdWRlXG4gICAgICBTZXhwYWJsZS5PZl9zZXhwYWJsZTEuVjFcbiAgICAgICAgKE9wdGlvbi5WMSlcbiAgICAgICAgKHN0cnVjdFxuICAgICAgICAgIHR5cGUgbm9ucmVjICdhIHQgPSAnYSB0XG5cbiAgICAgICAgICBsZXQgdG9fc2V4cGFibGUgPSBnZXRcblxuICAgICAgICAgIGxldCBvZl9zZXhwYWJsZSA9IGZ1bmN0aW9uXG4gICAgICAgICAgICB8IE5vbmUgLT4gY3JlYXRlICgpXG4gICAgICAgICAgICB8IFNvbWUgdiAtPiByZWYgdlxuICAgICAgICAgIDs7XG4gICAgICAgIGVuZClcblxuICAgICgqIE4uYi4gdGhpcyBbYmluX2lvXSBpbXBsZW1lbnRhdGlvbiBpcyBoYW5kLXJvbGxlZCByYXRoZXIgdGhhbiB1c2luZyBlLmcuXG4gICAgICAgW0JpbmFibGUuT2ZfYmluYWJsZTEuVjIgKE9wdGlvbi5WMSldIGluIG9yZGVyIHRvIGF2b2lkIGFsbG9jYXRpbmcgdGhlIG9wdGlvbi4gKilcbiAgICBtb2R1bGUgTWluaW1hbF9iaW5faW8gPSBzdHJ1Y3RcbiAgICAgIHR5cGUgbm9ucmVjICdhIHQgPSAnYSB0XG5cbiAgICAgIGxldCBiaW5fc2hhcGVfdCBiaW5fc2hhcGVfYSA9XG4gICAgICAgIEJpbl9wcm90LlNoYXBlLmJhc2V0eXBlXG4gICAgICAgICAgKEJpbl9wcm90LlNoYXBlLlV1aWQub2Zfc3RyaW5nIFwiYWZlZjhhOWMtZGFiYS0xMWVkLWE0ZTUtYWE3Nzc3OTBhYzk4XCIpXG4gICAgICAgICAgWyBiaW5fc2hhcGVfYSBdXG4gICAgICA7O1xuXG4gICAgICBsZXQgYmluX3NpemVfdCBiaW5fc2l6ZV9hIHQgPVxuICAgICAgICBtYXRjaCVvcHRpb25hbCAodCA6IF8gdCkgd2l0aFxuICAgICAgICB8IE5vbmUgLT4gYmluX3NpemVfYm9vbCBmYWxzZVxuICAgICAgICB8IFNvbWUgYSAtPiBiaW5fc2l6ZV9ib29sIHRydWUgKyBiaW5fc2l6ZV9hIGFcbiAgICAgIDs7XG5cbiAgICAgIGxldCBiaW5fd3JpdGVfdCBiaW5fd3JpdGVfYSBidWYgfnBvcyB0ID1cbiAgICAgICAgbWF0Y2glb3B0aW9uYWwgKHQgOiBfIHQpIHdpdGhcbiAgICAgICAgfCBOb25lIC0+IGJpbl93cml0ZV9ib29sIGJ1ZiB+cG9zIGZhbHNlXG4gICAgICAgIHwgU29tZSBhIC0+XG4gICAgICAgICAgbGV0IHBvcyA9IGJpbl93cml0ZV9ib29sIGJ1ZiB+cG9zIHRydWUgaW5cbiAgICAgICAgICBiaW5fd3JpdGVfYSBidWYgfnBvcyBhXG4gICAgICA7O1xuXG4gICAgICBsZXQgYmluX3JlYWRfdCBiaW5fcmVhZF9hIGJ1ZiB+cG9zX3JlZiA9XG4gICAgICAgIG1hdGNoIGJpbl9yZWFkX2Jvb2wgYnVmIH5wb3NfcmVmIHdpdGhcbiAgICAgICAgfCBmYWxzZSAtPiBjcmVhdGUgKClcbiAgICAgICAgfCB0cnVlIC0+IHJlZiAoYmluX3JlYWRfYSBidWYgfnBvc19yZWYpXG4gICAgICA7O1xuXG4gICAgICBsZXQgX19iaW5fcmVhZF90X19cbiAgICAgICAgKF8gOiBfIEJpbl9wcm90LlJlYWQucmVhZGVyKVxuICAgICAgICAoXyA6IEJpZ3N0cmluZy5WMS50KVxuICAgICAgICB+cG9zX3JlZlxuICAgICAgICAoXyA6IGludClcbiAgICAgICAgPVxuICAgICAgICBCaW5fcHJvdC5Db21tb24ucmFpc2VfdmFyaWFudF93cm9uZ190eXBlIFwiTW9wdGlvblwiICFwb3NfcmVmXG4gICAgICA7O1xuICAgIGVuZFxuXG4gICAgaW5jbHVkZSBCaW5fcHJvdC5VdGlscy5PZl9taW5pbWFsMSAoTWluaW1hbF9iaW5faW8pXG4gIGVuZFxuZW5kXG5cbm9wZW4hIENvcmVcbm9wZW4hIEltcG9ydFxuaW5jbHVkZSBTdGFibGUuVjFcbmluY2x1ZGUgRXhwb3NlZF9mb3JfdXNlX2luX3N0YWJsZVxuXG5sZXQgaXNfc29tZSB4ID0gbm90IChpc19ub25lIHgpXG5sZXQgZ2V0X3NvbWVfZXhuIHggPSBpZiBpc19ub25lIHggdGhlbiByYWlzZV9zIFslbWVzc2FnZSBcIk1vcHRpb24uZ2V0X3NvbWVfZXhuXCJdIGVsc2UgIXhcbmxldCBzZXRfc29tZSB0IHYgPSB0IDo9IHZcbmxldCBzZXRfbm9uZSB0ID0gdCA6PSBub25lXG5cbmxldCBzZXQgdCB2ID1cbiAgbWF0Y2ggdiB3aXRoXG4gIHwgTm9uZSAtPiBzZXRfbm9uZSB0XG4gIHwgU29tZSB2IC0+IHNldF9zb21lIHQgdlxuOztcblxubGV0IGludmFyaWFudCBpbnZhcmlhbnRfYSB0ID1cbiAgSW52YXJpYW50LmludmFyaWFudCBbJWhlcmVdIHQgWyVzZXhwX29mOiBfIHRdIChmdW4gKCkgLT5cbiAgICBPcHRpb24uaXRlciAoZ2V0IHQpIH5mOmludmFyaWFudF9hKVxuOztcbiJdfQ==
