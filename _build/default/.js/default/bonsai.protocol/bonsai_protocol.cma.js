// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Bonsai_protocol
//# unitInfo: Requires: Bin_prot__Common, Bin_prot__Read, Bin_prot__Shape, Bin_prot__Write, Bin_shape, Bonsai__Graph_info, Bonsai__Node_path, Core, Core__Stable, Expect_test_config, Inline_test_config, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_expect_runtime__Test_block, Ppx_expect_runtime__Test_node, Ppx_expect_runtime__Types, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv_error, Sexplib0__Sexp_conv_record, Stdlib, Uuid
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst = "",
    cst_b17892a0948ebd34a0b7162784 = " b17892a0948ebd34a0b716278484df52 ",
    cst_Bonsai$0 = "Bonsai",
    cst_Bonsai_protocol$0 = "Bonsai_protocol",
    cst_Graph_info$3 = "Graph_info",
    cst_Message$1 = "Message",
    cst_Other$0 = "Other",
    cst_Performance_measure$3 = "Performance_measure",
    cst_Uuid$1 = "Uuid",
    cst_V1$0 = "V1",
    cst_V2$0 = "V2",
    cst_V3$0 = "V3",
    cst_V4$0 = "V4",
    cst_bonsai_protocol$0 = "bonsai_protocol",
    cst_duration$2 = "duration",
    cst_entry_type$2 = "entry_type",
    cst_graph_info = "graph_info",
    cst_label$2 = "label",
    cst_message = "message",
    cst_performance_measure = "performance_measure",
    cst_src_protocol_bonsai_protoc$34 = "src/protocol/bonsai_protocol.ml",
    cst_src_protocol_bonsai_protoc$26 =
      "src/protocol/bonsai_protocol.ml.Entry.t",
    cst_src_protocol_bonsai_protoc$25 =
      "src/protocol/bonsai_protocol.ml.Message.t",
    cst_src_protocol_bonsai_protoc$33 =
      "src/protocol/bonsai_protocol.ml.Stable.Entry.V1.t",
    cst_src_protocol_bonsai_protoc$32 =
      "src/protocol/bonsai_protocol.ml.Stable.Message.V1.t",
    cst_src_protocol_bonsai_protoc$31 =
      "src/protocol/bonsai_protocol.ml.Stable.Message.V2.t",
    cst_src_protocol_bonsai_protoc$30 =
      "src/protocol/bonsai_protocol.ml.Stable.Message.V3.t",
    cst_src_protocol_bonsai_protoc$29 =
      "src/protocol/bonsai_protocol.ml.Stable.Worker_message.V1.t",
    cst_src_protocol_bonsai_protoc$28 =
      "src/protocol/bonsai_protocol.ml.Stable.Worker_message.V2.t",
    cst_src_protocol_bonsai_protoc$27 =
      "src/protocol/bonsai_protocol.ml.Versioned_message.t",
    cst_start_time$2 = "start_time",
    cst_t$15 = "t",
    cst_uuid = "uuid",
    cst_v1 = "v1",
    cst_v2 = "v2",
    cst_v3 = "v3",
    cst_v4 = "v4",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_string_notequal = runtime.caml_string_notequal,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call14
   (f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13){
    return (f.l >= 0 ? f.l : f.l = f.length) == 14
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13)
            : runtime.caml_call_gen
              (f,
               [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    error_source_002 = cst_src_protocol_bonsai_protoc$33,
    error_source_029 = cst_src_protocol_bonsai_protoc$32,
    error_source_047 = cst_src_protocol_bonsai_protoc$31,
    error_source_065 = cst_src_protocol_bonsai_protoc$30,
    error_source_083 = cst_src_protocol_bonsai_protoc$29,
    error_source_101 = cst_src_protocol_bonsai_protoc$28,
    error_source_119 = cst_src_protocol_bonsai_protoc$27,
    error_source_150 = cst_src_protocol_bonsai_protoc$26,
    error_source_177 = cst_src_protocol_bonsai_protoc$25,
    Bonsai_Graph_info = global_data.Bonsai__Graph_info,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Bin_prot_Read = global_data.Bin_prot__Read,
    Bin_prot_Common = global_data.Bin_prot__Common,
    Bin_prot_Write = global_data.Bin_prot__Write,
    Core = global_data.Core,
    Bonsai_Node_path = global_data.Bonsai__Node_path,
    Sexplib0_Sexp_conv_record = global_data.Sexplib0__Sexp_conv_record,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Bin_shape = global_data.Bin_shape,
    Stdlib = global_data.Stdlib,
    Ppx_expect_runtime_Types = global_data.Ppx_expect_runtime__Types,
    Uuid = global_data.Uuid,
    Core_Stable = global_data.Core__Stable,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Expect_test_config = global_data.Expect_test_config,
    Ppx_expect_runtime_Test_block = global_data.Ppx_expect_runtime__Test_block,
    Ppx_expect_runtime_Test_node = global_data.Ppx_expect_runtime__Test_node,
    Inline_test_config = global_data.Inline_test_config;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_protocol$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai_protocol$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_protocol_bonsai_protoc$34);
   caml_call2
    (Ppx_inline_test_lib[6], cst_bonsai_protocol$0, "bonsai_protocol.ml");
   var
    _a_ =
      [0,
       [0, cst_entry_type$2, Core_Stable[99]],
       [0,
        [0, cst_start_time$2, Core_Stable[131]],
        [0, [0, cst_duration$2, Core_Stable[131]], 0]]],
    _b_ =
      [0, caml_call2(Bin_prot_Shape[6], cst_Other$0, [0, Core_Stable[99]]), 0],
    _c_ =
      [0,
       caml_call2
        (Bin_prot_Shape[6], cst_Bonsai$0, [0, Bonsai_Node_path[39][1][5]]),
       _b_],
    _d_ = caml_call1(Bin_shape[4][1], "src/protocol/bonsai_protocol.ml:8:18"),
    _e_ = [0, [0, cst_label$2, caml_call2(Bin_prot_Shape[8], _d_, _c_)], _a_],
    _f_ = caml_call1(Bin_prot_Shape[4], _e_),
    _g_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$15), 0, _f_], 0],
    _h_ = caml_call1(Bin_shape[4][1], "src/protocol/bonsai_protocol.ml:7:6"),
    group = caml_call2(Bin_prot_Shape[2], _h_, _g_),
    _i_ = caml_call1(Bin_shape[2][1], cst_t$15),
    bin_shape_t = caml_call1(caml_call2(Bin_prot_Shape[10], group, _i_), 0),
    _aD_ = [0, cst_Graph_info$3],
    _aE_ = [0, cst_Performance_measure$3],
    _aC_ = [1, cst_src_protocol_bonsai_protoc$25],
    cst_src_protocol_bonsai_protoc$18 = cst_src_protocol_bonsai_protoc$25,
    _as_ = [0, cst_duration$2],
    _at_ = [0, cst_start_time$2],
    _au_ = [0, cst_entry_type$2],
    _av_ = [0, cst_Bonsai$0],
    _ax_ = [0, cst_Other$0],
    _aw_ = [0, cst_label$2],
    cst_duration$1 = cst_duration$2,
    cst_start_time$1 = cst_start_time$2,
    cst_entry_type$1 = cst_entry_type$2,
    cst_label$1 = cst_label$2,
    cst_src_protocol_bonsai_protoc$16 = cst_src_protocol_bonsai_protoc$26,
    cst_src_protocol_bonsai_protoc$15 = cst_src_protocol_bonsai_protoc$26,
    _ai_ = [1, cst_src_protocol_bonsai_protoc$27],
    cst_src_protocol_bonsai_protoc$12 = cst_src_protocol_bonsai_protoc$27,
    _Y_ = [0, cst_V1$0],
    _Z_ = [0, cst_V2$0],
    ___ = [0, cst_V3$0],
    _$_ = [0, cst_V4$0],
    _W_ = [0, cst_Uuid$1],
    _X_ = [0, cst_Message$1],
    _V_ = [1, cst_src_protocol_bonsai_protoc$28],
    cst_src_protocol_bonsai_protoc$10 = cst_src_protocol_bonsai_protoc$28,
    _P_ = [0, cst_Uuid$1],
    _Q_ = [0, cst_Message$1],
    _O_ = [1, cst_src_protocol_bonsai_protoc$29],
    cst_src_protocol_bonsai_protoc$8 = cst_src_protocol_bonsai_protoc$29,
    _I_ = [0, cst_Graph_info$3],
    _J_ = [0, cst_Performance_measure$3],
    _H_ = [1, cst_src_protocol_bonsai_protoc$30],
    cst_src_protocol_bonsai_protoc$6 = cst_src_protocol_bonsai_protoc$30,
    _B_ = [0, cst_Graph_info$3],
    _C_ = [0, cst_Performance_measure$3],
    _A_ = [1, cst_src_protocol_bonsai_protoc$31],
    cst_src_protocol_bonsai_protoc$4 = cst_src_protocol_bonsai_protoc$31,
    _u_ = [0, cst_Graph_info$3],
    _v_ = [0, cst_Performance_measure$3],
    _t_ = [1, cst_src_protocol_bonsai_protoc$32],
    cst_src_protocol_bonsai_protoc$2 = cst_src_protocol_bonsai_protoc$32,
    _j_ = [0, cst_duration$2],
    _k_ = [0, cst_start_time$2],
    _l_ = [0, cst_entry_type$2],
    _m_ = [0, cst_Bonsai$0],
    _o_ = [0, cst_Other$0],
    _n_ = [0, cst_label$2],
    cst_duration = cst_duration$2,
    cst_start_time = cst_start_time$2,
    cst_entry_type = cst_entry_type$2,
    cst_label = cst_label$2,
    cst_src_protocol_bonsai_protoc$0 = cst_src_protocol_bonsai_protoc$33,
    cst_src_protocol_bonsai_protoc = cst_src_protocol_bonsai_protoc$33,
    _bs_ =
      [0,
       [0,
        [0, " 06de0862e532730a58840545d773281d ", [0, cst]],
        [0, 402, 419, 457]]],
    _bt_ = [0, 402, 410, 458],
    _by_ = [0, 336, 342, 458],
    _bz_ = [0, 402, 458, 458],
    _bA_ = [0, 336, 342, 458],
    cst_src_protocol_bonsai_protoc$24 = cst_src_protocol_bonsai_protoc$34,
    cst_Performance_measure = cst_Performance_measure$3,
    cst_Graph_info = cst_Graph_info$3,
    cst_t = cst_t$15,
    cst_src_protocol_bonsai_protoc$1 = "src/protocol/bonsai_protocol.ml:24:6",
    cst_t$0 = cst_t$15,
    _bi_ =
      [0,
       [0, [0, cst_b17892a0948ebd34a0b7162784, [0, cst]], [0, 746, 763, 801]]],
    _bj_ = [0, 746, 754, 802],
    _bo_ = [0, 680, 686, 802],
    _bp_ = [0, 746, 802, 802],
    _bq_ = [0, 680, 686, 802],
    cst_src_protocol_bonsai_protoc$23 = cst_src_protocol_bonsai_protoc$34,
    cst_Performance_measure$0 = cst_Performance_measure$3,
    cst_Graph_info$0 = cst_Graph_info$3,
    cst_t$1 = cst_t$15,
    cst_src_protocol_bonsai_protoc$3 = "src/protocol/bonsai_protocol.ml:36:6",
    cst_t$2 = cst_t$15,
    _a__ =
      [0,
       [0,
        [0, " acf03a1188bfb7efeb8af957c2f31a09 ", [0, cst]],
        [0, 1095, 1112, 1150]]],
    _a$_ = [0, 1095, 1103, 1151],
    _be_ = [0, 1029, 1035, 1151],
    _bf_ = [0, 1095, 1151, 1151],
    _bg_ = [0, 1029, 1035, 1151],
    cst_src_protocol_bonsai_protoc$22 = cst_src_protocol_bonsai_protoc$34,
    cst_Performance_measure$1 = cst_Performance_measure$3,
    cst_Graph_info$1 = cst_Graph_info$3,
    cst_t$3 = cst_t$15,
    cst_src_protocol_bonsai_protoc$5 = "src/protocol/bonsai_protocol.ml:53:6",
    cst_t$4 = cst_t$15,
    _a0_ =
      [0,
       [0,
        [0, cst_b17892a0948ebd34a0b7162784, [0, cst]],
        [0, 1585, 1602, 1640]]],
    _a1_ = [0, 1585, 1593, 1641],
    _a6_ = [0, 1519, 1525, 1641],
    _a7_ = [0, 1585, 1641, 1641],
    _a8_ = [0, 1519, 1525, 1641],
    cst_src_protocol_bonsai_protoc$21 = cst_src_protocol_bonsai_protoc$34,
    cst_Message = cst_Message$1,
    cst_Uuid = cst_Uuid$1,
    cst_t$5 = cst_t$15,
    cst_src_protocol_bonsai_protoc$7 = "src/protocol/bonsai_protocol.ml:72:6",
    cst_t$6 = cst_t$15,
    _aQ_ =
      [0,
       [0,
        [0, " e1ff8318743ebd1c14eea6875eed5155 ", [0, cst]],
        [0, 2062, 2079, 2117]]],
    _aR_ = [0, 2062, 2070, 2118],
    _aW_ = [0, 1996, 2002, 2118],
    _aX_ = [0, 2062, 2118, 2118],
    _aY_ = [0, 1996, 2002, 2118],
    cst_src_protocol_bonsai_protoc$20 = cst_src_protocol_bonsai_protoc$34,
    cst_Message$0 = cst_Message$1,
    cst_Uuid$0 = cst_Uuid$1,
    cst_t$7 = cst_t$15,
    cst_src_protocol_bonsai_protoc$9 = "src/protocol/bonsai_protocol.ml:84:6",
    cst_t$8 = cst_t$15,
    _aG_ =
      [0,
       [0,
        [0, " ba4653bfa208be82da09737f35e150dc ", [0, cst]],
        [0, 2509, 2526, 2564]]],
    _aH_ = [0, 2509, 2517, 2565],
    _aM_ = [0, 2443, 2449, 2565],
    _aN_ = [0, 2509, 2565, 2565],
    _aO_ = [0, 2443, 2449, 2565],
    cst_src_protocol_bonsai_protoc$19 = cst_src_protocol_bonsai_protoc$34,
    cst_V4 = cst_V4$0,
    cst_V3 = cst_V3$0,
    cst_V2 = cst_V2$0,
    cst_V1 = cst_V1$0,
    cst_t$9 = cst_t$15,
    cst_src_protocol_bonsai_protoc$11 =
      "src/protocol/bonsai_protocol.ml:106:2",
    cst_t$10 = cst_t$15,
    cst_duration$0 = cst_duration$2,
    cst_start_time$0 = cst_start_time$2,
    cst_entry_type$0 = cst_entry_type$2,
    cst_Other = cst_Other$0,
    cst_Bonsai = cst_Bonsai$0,
    cst_src_protocol_bonsai_protoc$13 =
      "src/protocol/bonsai_protocol.ml:116:14",
    cst_label$0 = cst_label$2,
    cst_t$11 = cst_t$15,
    cst_src_protocol_bonsai_protoc$14 =
      "src/protocol/bonsai_protocol.ml:115:2",
    cst_t$12 = cst_t$15,
    cst_Performance_measure$2 = cst_Performance_measure$3,
    cst_Graph_info$2 = cst_Graph_info$3,
    cst_t$13 = cst_t$15,
    cst_src_protocol_bonsai_protoc$17 =
      "src/protocol/bonsai_protocol.ml:125:2",
    cst_t$14 = cst_t$15,
    cst_bonsai_protocol = cst_bonsai_protocol$0,
    cst_Bonsai_protocol = cst_Bonsai_protocol$0;
   function bin_size_t(param){
    var v4 = param[4], v3 = param[3], v2 = param[2], v1 = param[1], size = 0;
    if(370492634 <= v1[1])
     var
      args = v1[2],
      size_args = caml_call1(Bonsai_Node_path[39][1][1], args),
      _c__ = caml_call2(Bin_prot_Common[23], size_args, 4);
    else
     var
      args$0 = v1[2],
      size_args$0 = caml_call1(Core_Stable[3], args$0),
      _c__ = caml_call2(Bin_prot_Common[23], size_args$0, 4);
    var
     size$0 = caml_call2(Bin_prot_Common[23], size, _c__),
     _c$_ = caml_call1(Core_Stable[3], v2),
     size$1 = caml_call2(Bin_prot_Common[23], size$0, _c$_),
     _da_ = caml_call1(Core_Stable[7], v3),
     size$2 = caml_call2(Bin_prot_Common[23], size$1, _da_),
     _db_ = caml_call1(Core_Stable[7], v4);
    return caml_call2(Bin_prot_Common[23], size$2, _db_);
   }
   function bin_write_t(buf, pos, param){
    var v4 = param[4], v3 = param[3], v2 = param[2], v1 = param[1];
    if(370492634 <= v1[1])
     var
      args = v1[2],
      pos$0 = caml_call3(Bin_prot_Write[29], buf, pos, 370492634),
      pos$1 = caml_call3(Bonsai_Node_path[39][1][2], buf, pos$0, args);
    else
     var
      args$0 = v1[2],
      pos$4 = caml_call3(Bin_prot_Write[29], buf, pos, -912009552),
      pos$1 = caml_call3(Core_Stable[101], buf, pos$4, args$0);
    var
     pos$2 = caml_call3(Core_Stable[101], buf, pos$1, v2),
     pos$3 = caml_call3(Core_Stable[133], buf, pos$2, v3);
    return caml_call3(Core_Stable[133], buf, pos$3, v4);
   }
   var bin_writer_t = [0, bin_size_t, bin_write_t];
   function bin_read_t(buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19], cst_src_protocol_bonsai_protoc, pos_ref[1]);
   }
   function bin_read_t$0(buf, pos_ref){
    var vint = caml_call2(Bin_prot_Read[28], buf, pos_ref);
    try{
     if(-912009552 === vint)
      var
       arg_1 = caml_call2(Core_Stable[104], buf, pos_ref),
       _c8_ = [0, -912009552, arg_1];
     else{
      if(370492634 !== vint)
       throw caml_maybe_attach_backtrace(Bin_prot_Common[13], 1);
      var
       arg_1$0 = caml_call2(Bonsai_Node_path[39][1][3], buf, pos_ref),
       _c8_ = [0, 370492634, arg_1$0];
     }
     var v_label = _c8_;
    }
    catch(_c9_){
     var _c7_ = caml_wrap_exception(_c9_);
     if(_c7_ !== Bin_prot_Common[13])
      throw caml_maybe_attach_backtrace(_c7_, 0);
     var
      v_label =
        caml_call2
         (Bin_prot_Common[19], cst_src_protocol_bonsai_protoc$0, pos_ref[1]);
    }
    var
     v_entry_type = caml_call2(Core_Stable[104], buf, pos_ref),
     v_start_time = caml_call2(Core_Stable[136], buf, pos_ref),
     v_duration = caml_call2(Core_Stable[136], buf, pos_ref);
    return [0, v_label, v_entry_type, v_start_time, v_duration];
   }
   var
    bin_reader_t = [0, bin_read_t$0, bin_read_t],
    bin_t = [0, bin_shape_t, bin_writer_t, bin_reader_t];
   function t_of_sexp(x_015){
    function _cQ_(param){
     var
      _c5_ = param[2],
      _c6_ = _c5_[2],
      duration = _c6_[2][1],
      start_time = _c6_[1],
      entry_type = _c5_[1],
      label = param[1];
     return [0, label, entry_type, start_time, duration];
    }
    var _cR_ = 0;
    function _cS_(param){
     return caml_string_notequal(param, cst_duration$2)
             ? caml_string_notequal
                (param, cst_entry_type$2)
               ? caml_string_notequal
                  (param, cst_label$2)
                 ? caml_string_notequal(param, cst_start_time$2) ? -1 : 2
                 : 0
               : 1
             : 3;
    }
    var
     _cT_ =
       [0,
        cst_entry_type,
        1,
        Core_Stable[355],
        [0,
         cst_start_time,
         1,
         Core_Stable[331],
         [0, cst_duration, 1, Core_Stable[331], 0]]],
     _cU_ =
       [0,
        cst_label,
        1,
        function(sexp_014){
         try{
          if(0 === sexp_014[0])
           var
            atom_004 = sexp_014[1],
            _cW_ =
              caml_string_notequal(atom_004, cst_Bonsai$0)
               ? caml_string_notequal
                  (atom_004, cst_Other$0)
                 ? caml_call1(Sexplib0_Sexp_conv_error[23], 0)
                 : caml_call2
                   (Sexplib0_Sexp_conv_error[27], error_source_002, sexp_014)
               : caml_call2
                 (Sexplib0_Sexp_conv_error[27], error_source_002, sexp_014),
            _cX_ = _cW_;
          else{
           var _cY_ = sexp_014[1];
           if(_cY_){
            var match = _cY_[1];
            if(0 === match[0]){
             var sexp_args_007 = _cY_[2], atom_004$0 = match[1];
             if(caml_string_notequal(atom_004$0, cst_Bonsai$0))
              if(caml_string_notequal(atom_004$0, cst_Other$0))
               var _cZ_ = caml_call1(Sexplib0_Sexp_conv_error[23], 0);
              else{
               a:
               {
                if(sexp_args_007 && ! sexp_args_007[2]){
                 var
                  arg0_009 = sexp_args_007[1],
                  res0_010 = caml_call1(Core_Stable[355], arg0_009),
                  _c2_ = [0, -912009552, res0_010];
                 break a;
                }
                var
                 _c2_ =
                   caml_call3
                    (Sexplib0_Sexp_conv_error[26],
                     error_source_002,
                     atom_004$0,
                     sexp_014);
               }
               var _cZ_ = _c2_;
              }
             else{
              a:
              {
               if(sexp_args_007 && ! sexp_args_007[2]){
                var
                 arg0_012 = sexp_args_007[1],
                 res0_013 = caml_call1(Bonsai_Node_path[39][1][10], arg0_012),
                 _c3_ = [0, 370492634, res0_013];
                break a;
               }
               var
                _c3_ =
                  caml_call3
                   (Sexplib0_Sexp_conv_error[26],
                    error_source_002,
                    atom_004$0,
                    sexp_014);
              }
              var _cZ_ = _c3_;
             }
             var _c0_ = _cZ_;
            }
            else
             var
              _c0_ =
                caml_call2
                 (Sexplib0_Sexp_conv_error[28], error_source_002, sexp_014);
            var _c1_ = _c0_;
           }
           else
            var
             _c1_ =
               caml_call2
                (Sexplib0_Sexp_conv_error[29], error_source_002, sexp_014);
           var _cX_ = _c1_;
          }
          return _cX_;
         }
         catch(_c4_){
          var _cV_ = caml_wrap_exception(_c4_);
          if(_cV_ === Sexplib0_Sexp_conv_error[22])
           return caml_call2
                   (Sexplib0_Sexp_conv_error[24], error_source_002, sexp_014);
          throw caml_maybe_attach_backtrace(_cV_, 0);
         }
        },
        _cT_];
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_002,
             _cU_,
             _cS_,
             _cR_,
             _cQ_,
             x_015);
   }
   function sexp_of_t(param){
    var
     duration_025 = param[4],
     start_time_023 = param[3],
     entry_type_021 = param[2],
     label_017 = param[1],
     arg_026 = caml_call1(Core_Stable[330], duration_025),
     bnds_016 = [0, [1, [0, _j_, [0, arg_026, 0]]], 0],
     arg_024 = caml_call1(Core_Stable[330], start_time_023),
     bnds_016$0 = [0, [1, [0, _k_, [0, arg_024, 0]]], bnds_016],
     arg_022 = caml_call1(Core_Stable[354], entry_type_021),
     bnds_016$1 = [0, [1, [0, _l_, [0, arg_022, 0]]], bnds_016$0];
    if(370492634 <= label_017[1])
     var
      v_019 = label_017[2],
      arg_018 =
        [1, [0, _m_, [0, caml_call1(Bonsai_Node_path[39][1][11], v_019), 0]]];
    else
     var
      v_020 = label_017[2],
      arg_018 = [1, [0, _o_, [0, caml_call1(Core_Stable[354], v_020), 0]]];
    var bnds_016$2 = [0, [1, [0, _n_, [0, arg_018, 0]]], bnds_016$1];
    return [1, bnds_016$2];
   }
   if(typeof Ppx_inline_test_lib[3] !== "number"){
    var
     Ppx_expect_test_block$4 =
       caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
     _br_ =
       function(param){
        var
         _cN_ = caml_call1(Bin_prot_Shape[15], bin_shape_t),
         _cO_ = caml_call1(Bin_shape[19][4], _cN_);
        caml_call1(Stdlib[46], _cO_);
        var _cP_ = caml_call1(Ppx_expect_runtime_Types[4][1], 0);
        return caml_call1(Ppx_expect_test_block$4[2], _cP_);
       },
     _bu_ =
       caml_call3
        (Ppx_expect_runtime_Test_node[1][1],
         [0, Ppx_expect_runtime_Types[1][1]],
         _bt_,
         _bs_),
     _bv_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 0), _bu_], 0],
     _bw_ = caml_call1(Ppx_expect_runtime_Types[4][1], 2),
     _bx_ = caml_call1(Ppx_expect_runtime_Types[4][1], 1);
    caml_call14
     (Ppx_expect_test_block$4[3],
      cst_src_protocol_bonsai_protoc$24,
      15,
      _bA_,
      _bz_,
      _by_,
      [0, Ppx_expect_runtime_Types[1][1]],
      0,
      _bx_,
      _bw_,
      0,
      0,
      Inline_test_config,
      _bv_,
      _br_);
   }
   var
    _p_ =
      caml_call1
       (Bin_prot_Shape[5],
        [0,
         [0, cst_Graph_info, [0, Bonsai_Graph_info[15][2][7], 0]],
         [0, [0, cst_Performance_measure, [0, bin_shape_t, 0]], 0]]),
    _q_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t), 0, _p_], 0],
    _r_ = caml_call1(Bin_shape[4][1], cst_src_protocol_bonsai_protoc$1),
    group$0 = caml_call2(Bin_prot_Shape[2], _r_, _q_),
    _s_ = caml_call1(Bin_shape[2][1], cst_t$0),
    bin_shape_t$0 =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$0, _s_), 0);
   function bin_size_t$0(param){
    if(0 === param[0]){
     var v1 = param[1], _cL_ = caml_call1(Bonsai_Graph_info[15][2][3], v1);
     return caml_call2(Bin_prot_Common[23], 1, _cL_);
    }
    var v1$0 = param[1], _cM_ = bin_size_t(v1$0);
    return caml_call2(Bin_prot_Common[23], 1, _cM_);
   }
   function bin_write_t$0(buf, pos, param){
    if(0 === param[0]){
     var v1 = param[1], pos$0 = caml_call3(Bin_prot_Write[30], buf, pos, 0);
     return caml_call3(Bonsai_Graph_info[15][2][4], buf, pos$0, v1);
    }
    var v1$0 = param[1], pos$1 = caml_call3(Bin_prot_Write[30], buf, pos, 1);
    return bin_write_t(buf, pos$1, v1$0);
   }
   var bin_writer_t$0 = [0, bin_size_t$0, bin_write_t$0];
   function bin_read_t$1(buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19],
             cst_src_protocol_bonsai_protoc$2,
             pos_ref[1]);
   }
   function bin_read_t$2(buf, pos_ref){
    var match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
    if(0 === match){
     var arg_1 = caml_call2(Bonsai_Graph_info[15][2][5], buf, pos_ref);
     return [0, arg_1];
    }
    if(1 !== match) return caml_call2(Bin_prot_Common[18], _t_, pos_ref[1]);
    var arg_1$0 = bin_read_t$0(buf, pos_ref);
    return [1, arg_1$0];
   }
   var
    bin_reader_t$0 = [0, bin_read_t$2, bin_read_t$1],
    bin_t$0 = [0, bin_shape_t$0, bin_writer_t$0, bin_reader_t$0];
   function t_of_sexp$0(sexp_031){
    a:
    {
     if(0 === sexp_031[0]){
      var _cI_ = sexp_031[1];
      b:
      if(caml_string_notequal(_cI_, cst_Graph_info$3)){
       if(caml_string_notequal(_cI_, cst_Performance_measure$3)){
        if(! caml_string_notequal(_cI_, cst_graph_info)) break b;
        if(caml_string_notequal(_cI_, cst_performance_measure)) break a;
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[9], error_source_029, sexp_031);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[9], error_source_029, sexp_031);
     }
     var _cJ_ = sexp_031[1];
     if(! _cJ_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_029, sexp_031);
     var _cK_ = _cJ_[1];
     if(0 !== _cK_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_029, sexp_031);
     var tag_032 = _cK_[1];
     b:
     if(caml_string_notequal(tag_032, cst_Graph_info$3)){
      if(caml_string_notequal(tag_032, cst_Performance_measure$3)){
       if(! caml_string_notequal(tag_032, cst_graph_info)) break b;
       if(caml_string_notequal(tag_032, cst_performance_measure)) break a;
      }
      var sexp_args_038 = _cJ_[2];
      if(sexp_args_038 && ! sexp_args_038[2]){
       var arg0_039 = sexp_args_038[1], res0_040 = t_of_sexp(arg0_039);
       return [1, res0_040];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[8],
               error_source_029,
               tag_032,
               sexp_031);
     }
     var sexp_args_033 = _cJ_[2];
     if(sexp_args_033 && ! sexp_args_033[2]){
      var
       arg0_034 = sexp_args_033[1],
       res0_035 = caml_call1(Bonsai_Graph_info[15][2][1], arg0_034);
      return [0, res0_035];
     }
     return caml_call3
             (Sexplib0_Sexp_conv_error[8],
              error_source_029,
              tag_032,
              sexp_031);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_029, sexp_031);
   }
   function sexp_of_t$0(param){
    if(0 === param[0]){
     var
      arg0_041 = param[1],
      res0_042 = caml_call1(Bonsai_Graph_info[15][2][2], arg0_041);
     return [1, [0, _u_, [0, res0_042, 0]]];
    }
    var arg0_043 = param[1], res0_044 = sexp_of_t(arg0_043);
    return [1, [0, _v_, [0, res0_044, 0]]];
   }
   if(typeof Ppx_inline_test_lib[3] !== "number"){
    var
     Ppx_expect_test_block$3 =
       caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
     _bh_ =
       function(param){
        var
         _cF_ = caml_call1(Bin_prot_Shape[15], bin_shape_t$0),
         _cG_ = caml_call1(Bin_shape[19][4], _cF_);
        caml_call1(Stdlib[46], _cG_);
        var _cH_ = caml_call1(Ppx_expect_runtime_Types[4][1], 3);
        return caml_call1(Ppx_expect_test_block$3[2], _cH_);
       },
     _bk_ =
       caml_call3
        (Ppx_expect_runtime_Test_node[1][1],
         [0, Ppx_expect_runtime_Types[1][1]],
         _bj_,
         _bi_),
     _bl_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 3), _bk_], 0],
     _bm_ = caml_call1(Ppx_expect_runtime_Types[4][1], 5),
     _bn_ = caml_call1(Ppx_expect_runtime_Types[4][1], 4);
    caml_call14
     (Ppx_expect_test_block$3[3],
      cst_src_protocol_bonsai_protoc$23,
      29,
      _bq_,
      _bp_,
      _bo_,
      [0, Ppx_expect_runtime_Types[1][1]],
      0,
      _bn_,
      _bm_,
      0,
      0,
      Inline_test_config,
      _bl_,
      _bh_);
   }
   var
    _w_ =
      caml_call1
       (Bin_prot_Shape[5],
        [0,
         [0, cst_Graph_info$0, [0, Bonsai_Graph_info[15][3][5], 0]],
         [0, [0, cst_Performance_measure$0, [0, bin_shape_t, 0]], 0]]),
    _x_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$1), 0, _w_], 0],
    _y_ = caml_call1(Bin_shape[4][1], cst_src_protocol_bonsai_protoc$3),
    group$1 = caml_call2(Bin_prot_Shape[2], _y_, _x_),
    _z_ = caml_call1(Bin_shape[2][1], cst_t$2),
    bin_shape_t$1 =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$1, _z_), 0);
   function bin_size_t$1(param){
    if(0 === param[0]){
     var v1 = param[1], _cD_ = caml_call1(Bonsai_Graph_info[15][3][1], v1);
     return caml_call2(Bin_prot_Common[23], 1, _cD_);
    }
    var v1$0 = param[1], _cE_ = bin_size_t(v1$0);
    return caml_call2(Bin_prot_Common[23], 1, _cE_);
   }
   function bin_write_t$1(buf, pos, param){
    if(0 === param[0]){
     var v1 = param[1], pos$0 = caml_call3(Bin_prot_Write[30], buf, pos, 0);
     return caml_call3(Bonsai_Graph_info[15][3][2], buf, pos$0, v1);
    }
    var v1$0 = param[1], pos$1 = caml_call3(Bin_prot_Write[30], buf, pos, 1);
    return bin_write_t(buf, pos$1, v1$0);
   }
   var bin_writer_t$1 = [0, bin_size_t$1, bin_write_t$1];
   function bin_read_t$3(buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19],
             cst_src_protocol_bonsai_protoc$4,
             pos_ref[1]);
   }
   function bin_read_t$4(buf, pos_ref){
    var match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
    if(0 === match){
     var arg_1 = caml_call2(Bonsai_Graph_info[15][3][3], buf, pos_ref);
     return [0, arg_1];
    }
    if(1 !== match) return caml_call2(Bin_prot_Common[18], _A_, pos_ref[1]);
    var arg_1$0 = bin_read_t$0(buf, pos_ref);
    return [1, arg_1$0];
   }
   var
    bin_reader_t$1 = [0, bin_read_t$4, bin_read_t$3],
    bin_t$1 = [0, bin_shape_t$1, bin_writer_t$1, bin_reader_t$1];
   function t_of_sexp$1(sexp_049){
    a:
    {
     if(0 === sexp_049[0]){
      var _cA_ = sexp_049[1];
      b:
      if(caml_string_notequal(_cA_, cst_Graph_info$3)){
       if(caml_string_notequal(_cA_, cst_Performance_measure$3)){
        if(! caml_string_notequal(_cA_, cst_graph_info)) break b;
        if(caml_string_notequal(_cA_, cst_performance_measure)) break a;
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[9], error_source_047, sexp_049);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[9], error_source_047, sexp_049);
     }
     var _cB_ = sexp_049[1];
     if(! _cB_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_047, sexp_049);
     var _cC_ = _cB_[1];
     if(0 !== _cC_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_047, sexp_049);
     var tag_050 = _cC_[1];
     b:
     if(caml_string_notequal(tag_050, cst_Graph_info$3)){
      if(caml_string_notequal(tag_050, cst_Performance_measure$3)){
       if(! caml_string_notequal(tag_050, cst_graph_info)) break b;
       if(caml_string_notequal(tag_050, cst_performance_measure)) break a;
      }
      var sexp_args_056 = _cB_[2];
      if(sexp_args_056 && ! sexp_args_056[2]){
       var arg0_057 = sexp_args_056[1], res0_058 = t_of_sexp(arg0_057);
       return [1, res0_058];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[8],
               error_source_047,
               tag_050,
               sexp_049);
     }
     var sexp_args_051 = _cB_[2];
     if(sexp_args_051 && ! sexp_args_051[2]){
      var
       arg0_052 = sexp_args_051[1],
       res0_053 = caml_call1(Bonsai_Graph_info[15][3][9], arg0_052);
      return [0, res0_053];
     }
     return caml_call3
             (Sexplib0_Sexp_conv_error[8],
              error_source_047,
              tag_050,
              sexp_049);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_047, sexp_049);
   }
   function sexp_of_t$1(param){
    if(0 === param[0]){
     var
      arg0_059 = param[1],
      res0_060 = caml_call1(Bonsai_Graph_info[15][3][10], arg0_059);
     return [1, [0, _B_, [0, res0_060, 0]]];
    }
    var arg0_061 = param[1], res0_062 = sexp_of_t(arg0_061);
    return [1, [0, _C_, [0, res0_062, 0]]];
   }
   if(typeof Ppx_inline_test_lib[3] !== "number"){
    var
     Ppx_expect_test_block$2 =
       caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
     _a9_ =
       function(param){
        var
         _cx_ = caml_call1(Bin_prot_Shape[15], bin_shape_t$1),
         _cy_ = caml_call1(Bin_shape[19][4], _cx_);
        caml_call1(Stdlib[46], _cy_);
        var _cz_ = caml_call1(Ppx_expect_runtime_Types[4][1], 6);
        return caml_call1(Ppx_expect_test_block$2[2], _cz_);
       },
     _ba_ =
       caml_call3
        (Ppx_expect_runtime_Test_node[1][1],
         [0, Ppx_expect_runtime_Types[1][1]],
         _a$_,
         _a__),
     _bb_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 6), _ba_], 0],
     _bc_ = caml_call1(Ppx_expect_runtime_Types[4][1], 8),
     _bd_ = caml_call1(Ppx_expect_runtime_Types[4][1], 7);
    caml_call14
     (Ppx_expect_test_block$2[3],
      cst_src_protocol_bonsai_protoc$22,
      41,
      _bg_,
      _bf_,
      _be_,
      [0, Ppx_expect_runtime_Types[1][1]],
      0,
      _bd_,
      _bc_,
      0,
      0,
      Inline_test_config,
      _bb_,
      _a9_);
   }
   function of_v1(t){
    if(0 === t[0]){
     var graph_info = t[1];
     return [0, caml_call1(Bonsai_Graph_info[15][3][12], graph_info)];
    }
    var v0 = t[1];
    return [1, v0];
   }
   var
    _D_ =
      caml_call1
       (Bin_prot_Shape[5],
        [0,
         [0, cst_Graph_info$1, [0, Bonsai_Graph_info[15][4][5], 0]],
         [0, [0, cst_Performance_measure$1, [0, bin_shape_t, 0]], 0]]),
    _E_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$3), 0, _D_], 0],
    _F_ = caml_call1(Bin_shape[4][1], cst_src_protocol_bonsai_protoc$5),
    group$2 = caml_call2(Bin_prot_Shape[2], _F_, _E_),
    _G_ = caml_call1(Bin_shape[2][1], cst_t$4),
    bin_shape_t$2 =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$2, _G_), 0);
   function bin_size_t$2(param){
    if(0 === param[0]){
     var v1 = param[1], _cv_ = caml_call1(Bonsai_Graph_info[15][4][1], v1);
     return caml_call2(Bin_prot_Common[23], 1, _cv_);
    }
    var v1$0 = param[1], _cw_ = bin_size_t(v1$0);
    return caml_call2(Bin_prot_Common[23], 1, _cw_);
   }
   function bin_write_t$2(buf, pos, param){
    if(0 === param[0]){
     var v1 = param[1], pos$0 = caml_call3(Bin_prot_Write[30], buf, pos, 0);
     return caml_call3(Bonsai_Graph_info[15][4][2], buf, pos$0, v1);
    }
    var v1$0 = param[1], pos$1 = caml_call3(Bin_prot_Write[30], buf, pos, 1);
    return bin_write_t(buf, pos$1, v1$0);
   }
   var bin_writer_t$2 = [0, bin_size_t$2, bin_write_t$2];
   function bin_read_t$5(buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19],
             cst_src_protocol_bonsai_protoc$6,
             pos_ref[1]);
   }
   function bin_read_t$6(buf, pos_ref){
    var match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
    if(0 === match){
     var arg_1 = caml_call2(Bonsai_Graph_info[15][4][3], buf, pos_ref);
     return [0, arg_1];
    }
    if(1 !== match) return caml_call2(Bin_prot_Common[18], _H_, pos_ref[1]);
    var arg_1$0 = bin_read_t$0(buf, pos_ref);
    return [1, arg_1$0];
   }
   var
    bin_reader_t$2 = [0, bin_read_t$6, bin_read_t$5],
    bin_t$2 = [0, bin_shape_t$2, bin_writer_t$2, bin_reader_t$2];
   function t_of_sexp$2(sexp_067){
    a:
    {
     if(0 === sexp_067[0]){
      var _cs_ = sexp_067[1];
      b:
      if(caml_string_notequal(_cs_, cst_Graph_info$3)){
       if(caml_string_notequal(_cs_, cst_Performance_measure$3)){
        if(! caml_string_notequal(_cs_, cst_graph_info)) break b;
        if(caml_string_notequal(_cs_, cst_performance_measure)) break a;
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[9], error_source_065, sexp_067);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[9], error_source_065, sexp_067);
     }
     var _ct_ = sexp_067[1];
     if(! _ct_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_065, sexp_067);
     var _cu_ = _ct_[1];
     if(0 !== _cu_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_065, sexp_067);
     var tag_068 = _cu_[1];
     b:
     if(caml_string_notequal(tag_068, cst_Graph_info$3)){
      if(caml_string_notequal(tag_068, cst_Performance_measure$3)){
       if(! caml_string_notequal(tag_068, cst_graph_info)) break b;
       if(caml_string_notequal(tag_068, cst_performance_measure)) break a;
      }
      var sexp_args_074 = _ct_[2];
      if(sexp_args_074 && ! sexp_args_074[2]){
       var arg0_075 = sexp_args_074[1], res0_076 = t_of_sexp(arg0_075);
       return [1, res0_076];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[8],
               error_source_065,
               tag_068,
               sexp_067);
     }
     var sexp_args_069 = _ct_[2];
     if(sexp_args_069 && ! sexp_args_069[2]){
      var
       arg0_070 = sexp_args_069[1],
       res0_071 = caml_call1(Bonsai_Graph_info[15][4][9], arg0_070);
      return [0, res0_071];
     }
     return caml_call3
             (Sexplib0_Sexp_conv_error[8],
              error_source_065,
              tag_068,
              sexp_067);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_065, sexp_067);
   }
   function sexp_of_t$2(param){
    if(0 === param[0]){
     var
      arg0_077 = param[1],
      res0_078 = caml_call1(Bonsai_Graph_info[15][4][10], arg0_077);
     return [1, [0, _I_, [0, res0_078, 0]]];
    }
    var arg0_079 = param[1], res0_080 = sexp_of_t(arg0_079);
    return [1, [0, _J_, [0, res0_080, 0]]];
   }
   if(typeof Ppx_inline_test_lib[3] !== "number"){
    var
     Ppx_expect_test_block$1 =
       caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
     _aZ_ =
       function(param){
        var
         _cp_ = caml_call1(Bin_prot_Shape[15], bin_shape_t$2),
         _cq_ = caml_call1(Bin_shape[19][4], _cp_);
        caml_call1(Stdlib[46], _cq_);
        var _cr_ = caml_call1(Ppx_expect_runtime_Types[4][1], 9);
        return caml_call1(Ppx_expect_test_block$1[2], _cr_);
       },
     _a2_ =
       caml_call3
        (Ppx_expect_runtime_Test_node[1][1],
         [0, Ppx_expect_runtime_Types[1][1]],
         _a1_,
         _a0_),
     _a3_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 9), _a2_], 0],
     _a4_ = caml_call1(Ppx_expect_runtime_Types[4][1], 11),
     _a5_ = caml_call1(Ppx_expect_runtime_Types[4][1], 10);
    caml_call14
     (Ppx_expect_test_block$1[3],
      cst_src_protocol_bonsai_protoc$21,
      58,
      _a8_,
      _a7_,
      _a6_,
      [0, Ppx_expect_runtime_Types[1][1]],
      0,
      _a5_,
      _a4_,
      0,
      0,
      Inline_test_config,
      _a3_,
      _aZ_);
   }
   function of_v2(t){
    if(0 === t[0]){
     var graph_info = t[1];
     return [0, caml_call1(Bonsai_Graph_info[15][4][12], graph_info)];
    }
    var v0 = t[1];
    return [1, v0];
   }
   var
    _K_ =
      caml_call1
       (Bin_prot_Shape[5],
        [0,
         [0, cst_Uuid, [0, Uuid[49][1][10], 0]],
         [0, [0, cst_Message, [0, bin_shape_t$1, 0]], 0]]),
    _L_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$5), 0, _K_], 0],
    _M_ = caml_call1(Bin_shape[4][1], cst_src_protocol_bonsai_protoc$7),
    group$3 = caml_call2(Bin_prot_Shape[2], _M_, _L_),
    _N_ = caml_call1(Bin_shape[2][1], cst_t$6),
    bin_shape_t$3 =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$3, _N_), 0);
   function bin_size_t$3(param){
    if(0 === param[0]){
     var v1 = param[1], _cn_ = caml_call1(Uuid[49][1][6], v1);
     return caml_call2(Bin_prot_Common[23], 1, _cn_);
    }
    var v1$0 = param[1], _co_ = bin_size_t$1(v1$0);
    return caml_call2(Bin_prot_Common[23], 1, _co_);
   }
   function bin_write_t$3(buf, pos, param){
    if(0 === param[0]){
     var v1 = param[1], pos$0 = caml_call3(Bin_prot_Write[30], buf, pos, 0);
     return caml_call3(Uuid[49][1][7], buf, pos$0, v1);
    }
    var v1$0 = param[1], pos$1 = caml_call3(Bin_prot_Write[30], buf, pos, 1);
    return bin_write_t$1(buf, pos$1, v1$0);
   }
   var bin_writer_t$3 = [0, bin_size_t$3, bin_write_t$3];
   function bin_read_t$7(buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19],
             cst_src_protocol_bonsai_protoc$8,
             pos_ref[1]);
   }
   function bin_read_t$8(buf, pos_ref){
    var match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
    if(0 === match){
     var arg_1 = caml_call2(Uuid[49][1][8], buf, pos_ref);
     return [0, arg_1];
    }
    if(1 !== match) return caml_call2(Bin_prot_Common[18], _O_, pos_ref[1]);
    var arg_1$0 = bin_read_t$4(buf, pos_ref);
    return [1, arg_1$0];
   }
   var
    bin_reader_t$3 = [0, bin_read_t$8, bin_read_t$7],
    bin_t$3 = [0, bin_shape_t$3, bin_writer_t$3, bin_reader_t$3];
   function t_of_sexp$3(sexp_085){
    a:
    {
     if(0 === sexp_085[0]){
      var _ck_ = sexp_085[1];
      b:
      if(caml_string_notequal(_ck_, cst_Message$1)){
       if(caml_string_notequal(_ck_, cst_Uuid$1)){
        if(! caml_string_notequal(_ck_, cst_message)) break b;
        if(caml_string_notequal(_ck_, cst_uuid)) break a;
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[9], error_source_083, sexp_085);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[9], error_source_083, sexp_085);
     }
     var _cl_ = sexp_085[1];
     if(! _cl_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_083, sexp_085);
     var _cm_ = _cl_[1];
     if(0 !== _cm_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_083, sexp_085);
     var tag_086 = _cm_[1];
     b:
     if(caml_string_notequal(tag_086, cst_Message$1)){
      if(caml_string_notequal(tag_086, cst_Uuid$1)){
       if(! caml_string_notequal(tag_086, cst_message)) break b;
       if(caml_string_notequal(tag_086, cst_uuid)) break a;
      }
      var sexp_args_087 = _cl_[2];
      if(sexp_args_087 && ! sexp_args_087[2]){
       var
        arg0_088 = sexp_args_087[1],
        res0_089 = caml_call1(Uuid[49][1][15], arg0_088);
       return [0, res0_089];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[8],
               error_source_083,
               tag_086,
               sexp_085);
     }
     var sexp_args_092 = _cl_[2];
     if(sexp_args_092 && ! sexp_args_092[2]){
      var arg0_093 = sexp_args_092[1], res0_094 = t_of_sexp$1(arg0_093);
      return [1, res0_094];
     }
     return caml_call3
             (Sexplib0_Sexp_conv_error[8],
              error_source_083,
              tag_086,
              sexp_085);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_083, sexp_085);
   }
   function sexp_of_t$3(param){
    if(0 === param[0]){
     var
      arg0_095 = param[1],
      res0_096 = caml_call1(Uuid[49][1][16], arg0_095);
     return [1, [0, _P_, [0, res0_096, 0]]];
    }
    var arg0_097 = param[1], res0_098 = sexp_of_t$1(arg0_097);
    return [1, [0, _Q_, [0, res0_098, 0]]];
   }
   if(typeof Ppx_inline_test_lib[3] !== "number"){
    var
     Ppx_expect_test_block$0 =
       caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
     _aP_ =
       function(param){
        var
         _ch_ = caml_call1(Bin_prot_Shape[15], bin_shape_t$3),
         _ci_ = caml_call1(Bin_shape[19][4], _ch_);
        caml_call1(Stdlib[46], _ci_);
        var _cj_ = caml_call1(Ppx_expect_runtime_Types[4][1], 12);
        return caml_call1(Ppx_expect_test_block$0[2], _cj_);
       },
     _aS_ =
       caml_call3
        (Ppx_expect_runtime_Test_node[1][1],
         [0, Ppx_expect_runtime_Types[1][1]],
         _aR_,
         _aQ_),
     _aT_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 12), _aS_], 0],
     _aU_ = caml_call1(Ppx_expect_runtime_Types[4][1], 14),
     _aV_ = caml_call1(Ppx_expect_runtime_Types[4][1], 13);
    caml_call14
     (Ppx_expect_test_block$0[3],
      cst_src_protocol_bonsai_protoc$20,
      77,
      _aY_,
      _aX_,
      _aW_,
      [0, Ppx_expect_runtime_Types[1][1]],
      0,
      _aV_,
      _aU_,
      0,
      0,
      Inline_test_config,
      _aT_,
      _aP_);
   }
   var
    _R_ =
      caml_call1
       (Bin_prot_Shape[5],
        [0,
         [0, cst_Uuid$0, [0, Uuid[49][1][10], 0]],
         [0, [0, cst_Message$0, [0, bin_shape_t$2, 0]], 0]]),
    _S_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$7), 0, _R_], 0],
    _T_ = caml_call1(Bin_shape[4][1], cst_src_protocol_bonsai_protoc$9),
    group$4 = caml_call2(Bin_prot_Shape[2], _T_, _S_),
    _U_ = caml_call1(Bin_shape[2][1], cst_t$8),
    bin_shape_t$4 =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$4, _U_), 0);
   function bin_size_t$4(param){
    if(0 === param[0]){
     var v1 = param[1], _cf_ = caml_call1(Uuid[49][1][6], v1);
     return caml_call2(Bin_prot_Common[23], 1, _cf_);
    }
    var v1$0 = param[1], _cg_ = bin_size_t$2(v1$0);
    return caml_call2(Bin_prot_Common[23], 1, _cg_);
   }
   function bin_write_t$4(buf, pos, param){
    if(0 === param[0]){
     var v1 = param[1], pos$0 = caml_call3(Bin_prot_Write[30], buf, pos, 0);
     return caml_call3(Uuid[49][1][7], buf, pos$0, v1);
    }
    var v1$0 = param[1], pos$1 = caml_call3(Bin_prot_Write[30], buf, pos, 1);
    return bin_write_t$2(buf, pos$1, v1$0);
   }
   var bin_writer_t$4 = [0, bin_size_t$4, bin_write_t$4];
   function bin_read_t$9(buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19],
             cst_src_protocol_bonsai_protoc$10,
             pos_ref[1]);
   }
   function bin_read_t$10(buf, pos_ref){
    var match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
    if(0 === match){
     var arg_1 = caml_call2(Uuid[49][1][8], buf, pos_ref);
     return [0, arg_1];
    }
    if(1 !== match) return caml_call2(Bin_prot_Common[18], _V_, pos_ref[1]);
    var arg_1$0 = bin_read_t$6(buf, pos_ref);
    return [1, arg_1$0];
   }
   var
    bin_reader_t$4 = [0, bin_read_t$10, bin_read_t$9],
    bin_t$4 = [0, bin_shape_t$4, bin_writer_t$4, bin_reader_t$4];
   function t_of_sexp$4(sexp_103){
    a:
    {
     if(0 === sexp_103[0]){
      var _cc_ = sexp_103[1];
      b:
      if(caml_string_notequal(_cc_, cst_Message$1)){
       if(caml_string_notequal(_cc_, cst_Uuid$1)){
        if(! caml_string_notequal(_cc_, cst_message)) break b;
        if(caml_string_notequal(_cc_, cst_uuid)) break a;
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[9], error_source_101, sexp_103);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[9], error_source_101, sexp_103);
     }
     var _cd_ = sexp_103[1];
     if(! _cd_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_101, sexp_103);
     var _ce_ = _cd_[1];
     if(0 !== _ce_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_101, sexp_103);
     var tag_104 = _ce_[1];
     b:
     if(caml_string_notequal(tag_104, cst_Message$1)){
      if(caml_string_notequal(tag_104, cst_Uuid$1)){
       if(! caml_string_notequal(tag_104, cst_message)) break b;
       if(caml_string_notequal(tag_104, cst_uuid)) break a;
      }
      var sexp_args_105 = _cd_[2];
      if(sexp_args_105 && ! sexp_args_105[2]){
       var
        arg0_106 = sexp_args_105[1],
        res0_107 = caml_call1(Uuid[49][1][15], arg0_106);
       return [0, res0_107];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[8],
               error_source_101,
               tag_104,
               sexp_103);
     }
     var sexp_args_110 = _cd_[2];
     if(sexp_args_110 && ! sexp_args_110[2]){
      var arg0_111 = sexp_args_110[1], res0_112 = t_of_sexp$2(arg0_111);
      return [1, res0_112];
     }
     return caml_call3
             (Sexplib0_Sexp_conv_error[8],
              error_source_101,
              tag_104,
              sexp_103);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_101, sexp_103);
   }
   function sexp_of_t$4(param){
    if(0 === param[0]){
     var
      arg0_113 = param[1],
      res0_114 = caml_call1(Uuid[49][1][16], arg0_113);
     return [1, [0, _W_, [0, res0_114, 0]]];
    }
    var arg0_115 = param[1], res0_116 = sexp_of_t$2(arg0_115);
    return [1, [0, _X_, [0, res0_116, 0]]];
   }
   function of_v1$0(t){
    if(0 === t[0]){var v0 = t[1]; return [0, v0];}
    var message = t[1];
    return [1, of_v2(message)];
   }
   if(typeof Ppx_inline_test_lib[3] !== "number"){
    var
     Ppx_expect_test_block =
       caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
     _aF_ =
       function(param){
        var
         _b$_ = caml_call1(Bin_prot_Shape[15], bin_shape_t$4),
         _ca_ = caml_call1(Bin_shape[19][4], _b$_);
        caml_call1(Stdlib[46], _ca_);
        var _cb_ = caml_call1(Ppx_expect_runtime_Types[4][1], 15);
        return caml_call1(Ppx_expect_test_block[2], _cb_);
       },
     _aI_ =
       caml_call3
        (Ppx_expect_runtime_Test_node[1][1],
         [0, Ppx_expect_runtime_Types[1][1]],
         _aH_,
         _aG_),
     _aJ_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 15), _aI_], 0],
     _aK_ = caml_call1(Ppx_expect_runtime_Types[4][1], 17),
     _aL_ = caml_call1(Ppx_expect_runtime_Types[4][1], 16);
    caml_call14
     (Ppx_expect_test_block[3],
      cst_src_protocol_bonsai_protoc$19,
      93,
      _aO_,
      _aN_,
      _aM_,
      [0, Ppx_expect_runtime_Types[1][1]],
      0,
      _aL_,
      _aK_,
      0,
      0,
      Inline_test_config,
      _aJ_,
      _aF_);
   }
   function t_of_sexp$5(sexp_121){
    a:
    {
     if(0 === sexp_121[0]){
      var _b8_ = sexp_121[1];
      b:
      if(caml_string_notequal(_b8_, cst_V1$0)){
       c:
       if(caml_string_notequal(_b8_, cst_V2$0)){
        d:
        if(caml_string_notequal(_b8_, cst_V3$0)){
         if(caml_string_notequal(_b8_, cst_V4$0)){
          if(! caml_string_notequal(_b8_, cst_v1)) break b;
          if(! caml_string_notequal(_b8_, cst_v2)) break c;
          if(! caml_string_notequal(_b8_, cst_v3)) break d;
          if(caml_string_notequal(_b8_, cst_v4)) break a;
         }
         return caml_call2
                 (Sexplib0_Sexp_conv_error[9], error_source_119, sexp_121);
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[9], error_source_119, sexp_121);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[9], error_source_119, sexp_121);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[9], error_source_119, sexp_121);
     }
     var _b9_ = sexp_121[1];
     if(! _b9_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_119, sexp_121);
     var _b__ = _b9_[1];
     if(0 !== _b__[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_119, sexp_121);
     var tag_122 = _b__[1];
     b:
     if(caml_string_notequal(tag_122, cst_V1$0)){
      c:
      if(caml_string_notequal(tag_122, cst_V2$0)){
       d:
       if(caml_string_notequal(tag_122, cst_V3$0)){
        if(caml_string_notequal(tag_122, cst_V4$0)){
         if(! caml_string_notequal(tag_122, cst_v1)) break b;
         if(! caml_string_notequal(tag_122, cst_v2)) break c;
         if(! caml_string_notequal(tag_122, cst_v3)) break d;
         if(caml_string_notequal(tag_122, cst_v4)) break a;
        }
        var sexp_args_138 = _b9_[2];
        if(sexp_args_138 && ! sexp_args_138[2]){
         var
          arg0_139 = sexp_args_138[1],
          res0_140 = caml_call2(Core[473], t_of_sexp$4, arg0_139);
         return [3, res0_140];
        }
        return caml_call3
                (Sexplib0_Sexp_conv_error[8],
                 error_source_119,
                 tag_122,
                 sexp_121);
       }
       var sexp_args_133 = _b9_[2];
       if(sexp_args_133 && ! sexp_args_133[2]){
        var
         arg0_134 = sexp_args_133[1],
         res0_135 = caml_call2(Core[473], t_of_sexp$3, arg0_134);
        return [2, res0_135];
       }
       return caml_call3
               (Sexplib0_Sexp_conv_error[8],
                error_source_119,
                tag_122,
                sexp_121);
      }
      var sexp_args_128 = _b9_[2];
      if(sexp_args_128 && ! sexp_args_128[2]){
       var
        arg0_129 = sexp_args_128[1],
        res0_130 = caml_call2(Core[473], t_of_sexp$1, arg0_129);
       return [1, res0_130];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[8],
               error_source_119,
               tag_122,
               sexp_121);
     }
     var sexp_args_123 = _b9_[2];
     if(sexp_args_123 && ! sexp_args_123[2]){
      var
       arg0_124 = sexp_args_123[1],
       res0_125 = caml_call2(Core[473], t_of_sexp$0, arg0_124);
      return [0, res0_125];
     }
     return caml_call3
             (Sexplib0_Sexp_conv_error[8],
              error_source_119,
              tag_122,
              sexp_121);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_119, sexp_121);
   }
   function sexp_of_t$5(param){
    switch(param[0]){
      case 0:
       var
        arg0_141 = param[1],
        res0_142 = caml_call2(Core[472], sexp_of_t$0, arg0_141);
       return [1, [0, _Y_, [0, res0_142, 0]]];
      case 1:
       var
        arg0_143 = param[1],
        res0_144 = caml_call2(Core[472], sexp_of_t$1, arg0_143);
       return [1, [0, _Z_, [0, res0_144, 0]]];
      case 2:
       var
        arg0_145 = param[1],
        res0_146 = caml_call2(Core[472], sexp_of_t$3, arg0_145);
       return [1, [0, ___, [0, res0_146, 0]]];
      default:
       var
        arg0_147 = param[1],
        res0_148 = caml_call2(Core[472], sexp_of_t$4, arg0_147);
       return [1, [0, _$_, [0, res0_148, 0]]];
    }
   }
   var
    _aa_ = [0, [0, cst_V4, [0, caml_call1(Core[456], bin_shape_t$4), 0]], 0],
    _ab_ =
      [0, [0, cst_V3, [0, caml_call1(Core[456], bin_shape_t$3), 0]], _aa_],
    _ac_ =
      [0, [0, cst_V2, [0, caml_call1(Core[456], bin_shape_t$1), 0]], _ab_],
    _ad_ =
      [0, [0, cst_V1, [0, caml_call1(Core[456], bin_shape_t$0), 0]], _ac_],
    _ae_ = caml_call1(Bin_prot_Shape[5], _ad_),
    _af_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$9), 0, _ae_], 0],
    _ag_ = caml_call1(Bin_shape[4][1], cst_src_protocol_bonsai_protoc$11),
    group$5 = caml_call2(Bin_prot_Shape[2], _ag_, _af_),
    _ah_ = caml_call1(Bin_shape[2][1], cst_t$10),
    bin_shape_t$5 =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$5, _ah_), 0);
   function bin_size_t$5(param){
    switch(param[0]){
      case 0:
       var v1 = param[1], _b4_ = caml_call2(Core[457], bin_size_t$0, v1);
       return caml_call2(Bin_prot_Common[23], 1, _b4_);
      case 1:
       var v1$0 = param[1], _b5_ = caml_call2(Core[457], bin_size_t$1, v1$0);
       return caml_call2(Bin_prot_Common[23], 1, _b5_);
      case 2:
       var v1$1 = param[1], _b6_ = caml_call2(Core[457], bin_size_t$3, v1$1);
       return caml_call2(Bin_prot_Common[23], 1, _b6_);
      default:
       var v1$2 = param[1], _b7_ = caml_call2(Core[457], bin_size_t$4, v1$2);
       return caml_call2(Bin_prot_Common[23], 1, _b7_);
    }
   }
   function bin_write_t$5(buf, pos, param){
    switch(param[0]){
      case 0:
       var v1 = param[1], pos$0 = caml_call3(Bin_prot_Write[30], buf, pos, 0);
       return caml_call4(Core[459], bin_write_t$0, buf, pos$0, v1);
      case 1:
       var
        v1$0 = param[1],
        pos$1 = caml_call3(Bin_prot_Write[30], buf, pos, 1);
       return caml_call4(Core[459], bin_write_t$1, buf, pos$1, v1$0);
      case 2:
       var
        v1$1 = param[1],
        pos$2 = caml_call3(Bin_prot_Write[30], buf, pos, 2);
       return caml_call4(Core[459], bin_write_t$3, buf, pos$2, v1$1);
      default:
       var
        v1$2 = param[1],
        pos$3 = caml_call3(Bin_prot_Write[30], buf, pos, 3);
       return caml_call4(Core[459], bin_write_t$4, buf, pos$3, v1$2);
    }
   }
   var bin_writer_t$5 = [0, bin_size_t$5, bin_write_t$5];
   function bin_read_t$11(buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19],
             cst_src_protocol_bonsai_protoc$12,
             pos_ref[1]);
   }
   function bin_read_t$12(buf, pos_ref){
    var match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
    if(3 < match >>> 0)
     return caml_call2(Bin_prot_Common[18], _ai_, pos_ref[1]);
    switch(match){
      case 0:
       var
        arg_1 = caml_call2(caml_call1(Core[462], bin_read_t$2), buf, pos_ref);
       return [0, arg_1];
      case 1:
       var
        arg_1$0 =
          caml_call2(caml_call1(Core[462], bin_read_t$4), buf, pos_ref);
       return [1, arg_1$0];
      case 2:
       var
        arg_1$1 =
          caml_call2(caml_call1(Core[462], bin_read_t$8), buf, pos_ref);
       return [2, arg_1$1];
      default:
       var
        arg_1$2 =
          caml_call2(caml_call1(Core[462], bin_read_t$10), buf, pos_ref);
       return [3, arg_1$2];
    }
   }
   var
    bin_reader_t$5 = [0, bin_read_t$12, bin_read_t$11],
    bin_t$5 = [0, bin_shape_t$5, bin_writer_t$5, bin_reader_t$5],
    _aj_ =
      [0,
       [0, cst_entry_type$0, Core[541]],
       [0,
        [0, cst_start_time$0, Core[350]],
        [0, [0, cst_duration$0, Core[350]], 0]]],
    _ak_ = [0, caml_call2(Bin_prot_Shape[6], cst_Other, [0, Core[541]]), 0],
    _al_ =
      [0,
       caml_call2(Bin_prot_Shape[6], cst_Bonsai, [0, Bonsai_Node_path[5]]),
       _ak_],
    _am_ = caml_call1(Bin_shape[4][1], cst_src_protocol_bonsai_protoc$13),
    _an_ =
      [0, [0, cst_label$0, caml_call2(Bin_prot_Shape[8], _am_, _al_)], _aj_],
    _ao_ = caml_call1(Bin_prot_Shape[4], _an_),
    _ap_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$11), 0, _ao_], 0],
    _aq_ = caml_call1(Bin_shape[4][1], cst_src_protocol_bonsai_protoc$14),
    group$6 = caml_call2(Bin_prot_Shape[2], _aq_, _ap_),
    _ar_ = caml_call1(Bin_shape[2][1], cst_t$12),
    bin_shape_t$6 =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$6, _ar_), 0);
   function bin_size_t$6(param){
    var v4 = param[4], v3 = param[3], v2 = param[2], v1 = param[1], size = 0;
    if(370492634 <= v1[1])
     var
      args = v1[2],
      size_args = caml_call1(Bonsai_Node_path[1], args),
      _b0_ = caml_call2(Bin_prot_Common[23], size_args, 4);
    else
     var
      args$0 = v1[2],
      size_args$0 = caml_call1(Core[542], args$0),
      _b0_ = caml_call2(Bin_prot_Common[23], size_args$0, 4);
    var
     size$0 = caml_call2(Bin_prot_Common[23], size, _b0_),
     _b1_ = caml_call1(Core[542], v2),
     size$1 = caml_call2(Bin_prot_Common[23], size$0, _b1_),
     _b2_ = caml_call1(Core[351], v3),
     size$2 = caml_call2(Bin_prot_Common[23], size$1, _b2_),
     _b3_ = caml_call1(Core[351], v4);
    return caml_call2(Bin_prot_Common[23], size$2, _b3_);
   }
   function bin_write_t$6(buf, pos, param){
    var v4 = param[4], v3 = param[3], v2 = param[2], v1 = param[1];
    if(370492634 <= v1[1])
     var
      args = v1[2],
      pos$0 = caml_call3(Bin_prot_Write[29], buf, pos, 370492634),
      pos$1 = caml_call3(Bonsai_Node_path[2], buf, pos$0, args);
    else
     var
      args$0 = v1[2],
      pos$4 = caml_call3(Bin_prot_Write[29], buf, pos, -912009552),
      pos$1 = caml_call3(Core[544], buf, pos$4, args$0);
    var
     pos$2 = caml_call3(Core[544], buf, pos$1, v2),
     pos$3 = caml_call3(Core[353], buf, pos$2, v3);
    return caml_call3(Core[353], buf, pos$3, v4);
   }
   var bin_writer_t$6 = [0, bin_size_t$6, bin_write_t$6];
   function bin_read_t$13(buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19],
             cst_src_protocol_bonsai_protoc$15,
             pos_ref[1]);
   }
   function bin_read_t$14(buf, pos_ref){
    var vint = caml_call2(Bin_prot_Read[28], buf, pos_ref);
    try{
     if(-912009552 === vint)
      var
       arg_1 = caml_call2(Core[547], buf, pos_ref),
       _bY_ = [0, -912009552, arg_1];
     else{
      if(370492634 !== vint)
       throw caml_maybe_attach_backtrace(Bin_prot_Common[13], 0);
      var
       arg_1$0 = caml_call2(Bonsai_Node_path[3], buf, pos_ref),
       _bY_ = [0, 370492634, arg_1$0];
     }
     var v_label = _bY_;
    }
    catch(_bZ_){
     var _bX_ = caml_wrap_exception(_bZ_);
     if(_bX_ !== Bin_prot_Common[13])
      throw caml_maybe_attach_backtrace(_bX_, 0);
     var
      v_label =
        caml_call2
         (Bin_prot_Common[19], cst_src_protocol_bonsai_protoc$16, pos_ref[1]);
    }
    var
     v_entry_type = caml_call2(Core[547], buf, pos_ref),
     v_start_time = caml_call2(Core[356], buf, pos_ref),
     v_duration = caml_call2(Core[356], buf, pos_ref);
    return [0, v_label, v_entry_type, v_start_time, v_duration];
   }
   var
    bin_reader_t$6 = [0, bin_read_t$14, bin_read_t$13],
    bin_t$6 = [0, bin_shape_t$6, bin_writer_t$6, bin_reader_t$6];
   function t_of_sexp$6(x_163){
    function _bG_(param){
     var
      _bV_ = param[2],
      _bW_ = _bV_[2],
      duration = _bW_[2][1],
      start_time = _bW_[1],
      entry_type = _bV_[1],
      label = param[1];
     return [0, label, entry_type, start_time, duration];
    }
    var _bH_ = 0;
    function _bI_(param){
     return caml_string_notequal(param, cst_duration$2)
             ? caml_string_notequal
                (param, cst_entry_type$2)
               ? caml_string_notequal
                  (param, cst_label$2)
                 ? caml_string_notequal(param, cst_start_time$2) ? -1 : 2
                 : 0
               : 1
             : 3;
    }
    var
     _bJ_ =
       [0,
        cst_entry_type$1,
        1,
        Core[559],
        [0,
         cst_start_time$1,
         1,
         Core[368],
         [0, cst_duration$1, 1, Core[368], 0]]],
     _bK_ =
       [0,
        cst_label$1,
        1,
        function(sexp_162){
         try{
          if(0 === sexp_162[0])
           var
            atom_152 = sexp_162[1],
            _bM_ =
              caml_string_notequal(atom_152, cst_Bonsai$0)
               ? caml_string_notequal
                  (atom_152, cst_Other$0)
                 ? caml_call1(Sexplib0_Sexp_conv_error[23], 0)
                 : caml_call2
                   (Sexplib0_Sexp_conv_error[27], error_source_150, sexp_162)
               : caml_call2
                 (Sexplib0_Sexp_conv_error[27], error_source_150, sexp_162),
            _bN_ = _bM_;
          else{
           var _bO_ = sexp_162[1];
           if(_bO_){
            var match = _bO_[1];
            if(0 === match[0]){
             var sexp_args_155 = _bO_[2], atom_152$0 = match[1];
             if(caml_string_notequal(atom_152$0, cst_Bonsai$0))
              if(caml_string_notequal(atom_152$0, cst_Other$0))
               var _bP_ = caml_call1(Sexplib0_Sexp_conv_error[23], 0);
              else{
               a:
               {
                if(sexp_args_155 && ! sexp_args_155[2]){
                 var
                  arg0_157 = sexp_args_155[1],
                  res0_158 = caml_call1(Core[559], arg0_157),
                  _bS_ = [0, -912009552, res0_158];
                 break a;
                }
                var
                 _bS_ =
                   caml_call3
                    (Sexplib0_Sexp_conv_error[26],
                     error_source_150,
                     atom_152$0,
                     sexp_162);
               }
               var _bP_ = _bS_;
              }
             else{
              a:
              {
               if(sexp_args_155 && ! sexp_args_155[2]){
                var
                 arg0_160 = sexp_args_155[1],
                 res0_161 = caml_call1(Bonsai_Node_path[9], arg0_160),
                 _bT_ = [0, 370492634, res0_161];
                break a;
               }
               var
                _bT_ =
                  caml_call3
                   (Sexplib0_Sexp_conv_error[26],
                    error_source_150,
                    atom_152$0,
                    sexp_162);
              }
              var _bP_ = _bT_;
             }
             var _bQ_ = _bP_;
            }
            else
             var
              _bQ_ =
                caml_call2
                 (Sexplib0_Sexp_conv_error[28], error_source_150, sexp_162);
            var _bR_ = _bQ_;
           }
           else
            var
             _bR_ =
               caml_call2
                (Sexplib0_Sexp_conv_error[29], error_source_150, sexp_162);
           var _bN_ = _bR_;
          }
          return _bN_;
         }
         catch(_bU_){
          var _bL_ = caml_wrap_exception(_bU_);
          if(_bL_ === Sexplib0_Sexp_conv_error[22])
           return caml_call2
                   (Sexplib0_Sexp_conv_error[24], error_source_150, sexp_162);
          throw caml_maybe_attach_backtrace(_bL_, 0);
         }
        },
        _bJ_];
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_150,
             _bK_,
             _bI_,
             _bH_,
             _bG_,
             x_163);
   }
   function sexp_of_t$6(param){
    var
     duration_173 = param[4],
     start_time_171 = param[3],
     entry_type_169 = param[2],
     label_165 = param[1],
     arg_174 = caml_call1(Core[367], duration_173),
     bnds_164 = [0, [1, [0, _as_, [0, arg_174, 0]]], 0],
     arg_172 = caml_call1(Core[367], start_time_171),
     bnds_164$0 = [0, [1, [0, _at_, [0, arg_172, 0]]], bnds_164],
     arg_170 = caml_call1(Core[558], entry_type_169),
     bnds_164$1 = [0, [1, [0, _au_, [0, arg_170, 0]]], bnds_164$0];
    if(370492634 <= label_165[1])
     var
      v_167 = label_165[2],
      arg_166 =
        [1, [0, _av_, [0, caml_call1(Bonsai_Node_path[10], v_167), 0]]];
    else
     var
      v_168 = label_165[2],
      arg_166 = [1, [0, _ax_, [0, caml_call1(Core[558], v_168), 0]]];
    var bnds_164$2 = [0, [1, [0, _aw_, [0, arg_166, 0]]], bnds_164$1];
    return [1, bnds_164$2];
   }
   var
    _ay_ =
      caml_call1
       (Bin_prot_Shape[5],
        [0,
         [0, cst_Graph_info$2, [0, Bonsai_Graph_info[6], 0]],
         [0, [0, cst_Performance_measure$2, [0, bin_shape_t$6, 0]], 0]]),
    _az_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$13), 0, _ay_], 0],
    _aA_ = caml_call1(Bin_shape[4][1], cst_src_protocol_bonsai_protoc$17),
    group$7 = caml_call2(Bin_prot_Shape[2], _aA_, _az_),
    _aB_ = caml_call1(Bin_shape[2][1], cst_t$14),
    bin_shape_t$7 =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$7, _aB_), 0);
   function bin_size_t$7(param){
    if(0 === param[0]){
     var v1 = param[1], _bE_ = caml_call1(Bonsai_Graph_info[2], v1);
     return caml_call2(Bin_prot_Common[23], 1, _bE_);
    }
    var v1$0 = param[1], _bF_ = bin_size_t$6(v1$0);
    return caml_call2(Bin_prot_Common[23], 1, _bF_);
   }
   function bin_write_t$7(buf, pos, param){
    if(0 === param[0]){
     var v1 = param[1], pos$0 = caml_call3(Bin_prot_Write[30], buf, pos, 0);
     return caml_call3(Bonsai_Graph_info[3], buf, pos$0, v1);
    }
    var v1$0 = param[1], pos$1 = caml_call3(Bin_prot_Write[30], buf, pos, 1);
    return bin_write_t$6(buf, pos$1, v1$0);
   }
   var bin_writer_t$7 = [0, bin_size_t$7, bin_write_t$7];
   function bin_read_t$15(buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19],
             cst_src_protocol_bonsai_protoc$18,
             pos_ref[1]);
   }
   function bin_read_t$16(buf, pos_ref){
    var match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
    if(0 === match){
     var arg_1 = caml_call2(Bonsai_Graph_info[4], buf, pos_ref);
     return [0, arg_1];
    }
    if(1 !== match) return caml_call2(Bin_prot_Common[18], _aC_, pos_ref[1]);
    var arg_1$0 = bin_read_t$14(buf, pos_ref);
    return [1, arg_1$0];
   }
   var
    bin_reader_t$7 = [0, bin_read_t$16, bin_read_t$15],
    bin_t$7 = [0, bin_shape_t$7, bin_writer_t$7, bin_reader_t$7];
   function t_of_sexp$7(sexp_179){
    a:
    {
     if(0 === sexp_179[0]){
      var _bB_ = sexp_179[1];
      b:
      if(caml_string_notequal(_bB_, cst_Graph_info$3)){
       if(caml_string_notequal(_bB_, cst_Performance_measure$3)){
        if(! caml_string_notequal(_bB_, cst_graph_info)) break b;
        if(caml_string_notequal(_bB_, cst_performance_measure)) break a;
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[9], error_source_177, sexp_179);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[9], error_source_177, sexp_179);
     }
     var _bC_ = sexp_179[1];
     if(! _bC_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_177, sexp_179);
     var _bD_ = _bC_[1];
     if(0 !== _bD_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_177, sexp_179);
     var tag_180 = _bD_[1];
     b:
     if(caml_string_notequal(tag_180, cst_Graph_info$3)){
      if(caml_string_notequal(tag_180, cst_Performance_measure$3)){
       if(! caml_string_notequal(tag_180, cst_graph_info)) break b;
       if(caml_string_notequal(tag_180, cst_performance_measure)) break a;
      }
      var sexp_args_186 = _bC_[2];
      if(sexp_args_186 && ! sexp_args_186[2]){
       var arg0_187 = sexp_args_186[1], res0_188 = t_of_sexp$6(arg0_187);
       return [1, res0_188];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[8],
               error_source_177,
               tag_180,
               sexp_179);
     }
     var sexp_args_181 = _bC_[2];
     if(sexp_args_181 && ! sexp_args_181[2]){
      var
       arg0_182 = sexp_args_181[1],
       res0_183 = caml_call1(Bonsai_Graph_info[10], arg0_182);
      return [0, res0_183];
     }
     return caml_call3
             (Sexplib0_Sexp_conv_error[8],
              error_source_177,
              tag_180,
              sexp_179);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_177, sexp_179);
   }
   function sexp_of_t$7(param){
    if(0 === param[0]){
     var
      arg0_189 = param[1],
      res0_190 = caml_call1(Bonsai_Graph_info[11], arg0_189);
     return [1, [0, _aD_, [0, res0_190, 0]]];
    }
    var arg0_191 = param[1], res0_192 = sexp_of_t$6(arg0_191);
    return [1, [0, _aE_, [0, res0_192, 0]]];
   }
   var Worker_message = [0];
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai_protocol);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_protocol);
   var
    Bonsai_protocol =
      [0,
       [0,
        bin_size_t$6,
        bin_write_t$6,
        bin_read_t$14,
        bin_read_t$13,
        bin_shape_t$6,
        bin_writer_t$6,
        bin_reader_t$6,
        bin_t$6,
        t_of_sexp$6,
        sexp_of_t$6],
       [0,
        bin_size_t$7,
        bin_write_t$7,
        bin_read_t$16,
        bin_read_t$15,
        bin_shape_t$7,
        bin_writer_t$7,
        bin_reader_t$7,
        bin_t$7,
        t_of_sexp$7,
        sexp_of_t$7],
       Worker_message,
       [0,
        [0,
         [0,
          t_of_sexp,
          sexp_of_t,
          bin_size_t,
          bin_write_t,
          bin_read_t$0,
          bin_read_t,
          bin_shape_t,
          bin_writer_t,
          bin_reader_t,
          bin_t]],
        [0,
         [0,
          t_of_sexp$0,
          sexp_of_t$0,
          bin_size_t$0,
          bin_write_t$0,
          bin_read_t$2,
          bin_read_t$1,
          bin_shape_t$0,
          bin_writer_t$0,
          bin_reader_t$0,
          bin_t$0],
         [0,
          bin_size_t$1,
          bin_write_t$1,
          bin_read_t$4,
          bin_read_t$3,
          bin_shape_t$1,
          bin_writer_t$1,
          bin_reader_t$1,
          bin_t$1,
          t_of_sexp$1,
          sexp_of_t$1,
          of_v1],
         [0,
          bin_size_t$2,
          bin_write_t$2,
          bin_read_t$6,
          bin_read_t$5,
          bin_shape_t$2,
          bin_writer_t$2,
          bin_reader_t$2,
          bin_t$2,
          t_of_sexp$2,
          sexp_of_t$2,
          of_v2]],
        [0,
         [0,
          bin_size_t$3,
          bin_write_t$3,
          bin_read_t$8,
          bin_read_t$7,
          bin_shape_t$3,
          bin_writer_t$3,
          bin_reader_t$3,
          bin_t$3,
          t_of_sexp$3,
          sexp_of_t$3],
         [0,
          t_of_sexp$4,
          sexp_of_t$4,
          bin_size_t$4,
          bin_write_t$4,
          bin_read_t$10,
          bin_read_t$9,
          bin_shape_t$4,
          bin_writer_t$4,
          bin_reader_t$4,
          bin_t$4,
          of_v1$0]]],
       [0,
        t_of_sexp$5,
        sexp_of_t$5,
        bin_size_t$5,
        bin_write_t$5,
        bin_read_t$12,
        bin_read_t$11,
        bin_shape_t$5,
        bin_writer_t$5,
        bin_reader_t$5,
        bin_t$5]];
   runtime.caml_register_global(265, Bonsai_protocol, cst_Bonsai_protocol$0);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
