// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Nonempty_list
//# unitInfo: Requires: Base, Base__Indexed_container, Base__Monad, Base__Sequence, Base_quickcheck__Generator, Base_quickcheck__Observer, Base_quickcheck__Shrinker, Bin_prot__Common, Bin_prot__Read, Bin_prot__Shape, Bin_prot__Write, Bin_shape, Core, Core__Binable, Core__Bool, Core__Command_internal, Core__Comparator, Core__Fn, Core__List, Core__Map, Core__Or_error, Core__Result, Core__Sequence, Core__Sexpable, Core__Stable, Expect_test_config, Inline_test_config, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_expect_runtime__Test_block, Ppx_expect_runtime__Test_node, Ppx_expect_runtime__Types, Ppx_inline_test_lib, Ppx_module_timer_runtime, Reversed_list, Sexplib0__Sexp_conv, Stable_witness, Stdlib, Typerep_lib__Make_typename, Typerep_lib__Std, Typerep_lib__Typename, Validate
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$2 = "",
    cst$1 = "::",
    cst_Nonempty_list$0 = "Nonempty_list",
    cst_a$10 = "a",
    cst_nonempty_list$0 = "nonempty_list",
    cst_nonempty_list_src_nonempty$17 = "nonempty_list/src/nonempty_list.ml",
    cst_nonempty_list_src_nonempty$16 =
      "nonempty_list/src/nonempty_list.ml.T'.t",
    cst_t$7 = "t";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call14
   (f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13){
    return (f.l >= 0 ? f.l : f.l = f.length) == 14
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13)
            : runtime.caml_call_gen
              (f,
               [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = cst$1,
    name = cst_nonempty_list_src_nonempty$16,
    cst$0 = cst$1,
    name$0 = "nonempty_list/src/nonempty_list.ml.Option.t",
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Core = global_data.Core,
    Core_Command_internal = global_data.Core__Command_internal,
    Core_Fn = global_data.Core__Fn,
    Core_List = global_data.Core__List,
    Reversed_list = global_data.Reversed_list,
    Validate = global_data.Validate,
    Core_Or_error = global_data.Core__Or_error,
    Core_Result = global_data.Core__Result,
    Core_Map = global_data.Core__Map,
    Core_Sequence = global_data.Core__Sequence,
    Bin_prot_Read = global_data.Bin_prot__Read,
    Bin_prot_Common = global_data.Bin_prot__Common,
    Bin_prot_Write = global_data.Bin_prot__Write,
    Bin_shape = global_data.Bin_shape,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Typerep_lib_Typename = global_data.Typerep_lib__Typename,
    Typerep_lib_Std = global_data.Typerep_lib__Std,
    Base_quickcheck_Shrinker = global_data.Base_quickcheck__Shrinker,
    Base_Sequence = global_data.Base__Sequence,
    Base = global_data.Base,
    Base_quickcheck_Observer = global_data.Base_quickcheck__Observer,
    Base_quickcheck_Generator = global_data.Base_quickcheck__Generator,
    Core_Stable = global_data.Core__Stable,
    Stdlib = global_data.Stdlib,
    Ppx_expect_runtime_Types = global_data.Ppx_expect_runtime__Types,
    Stable_witness = global_data.Stable_witness,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Core_Binable = global_data.Core__Binable,
    Core_Sexpable = global_data.Core__Sexpable,
    Expect_test_config = global_data.Expect_test_config,
    Ppx_expect_runtime_Test_block = global_data.Ppx_expect_runtime__Test_block,
    Ppx_expect_runtime_Test_node = global_data.Ppx_expect_runtime__Test_node,
    Inline_test_config = global_data.Inline_test_config,
    Typerep_lib_Make_typename = global_data.Typerep_lib__Make_typename,
    Core_Comparator = global_data.Core__Comparator,
    Base_Indexed_container = global_data.Base__Indexed_container,
    Base_Monad = global_data.Base__Monad;
   caml_call1(Ppx_module_timer_runtime[4], cst_Nonempty_list$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_nonempty_list$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_nonempty_list_src_nonempty$17);
   caml_call2(Ppx_inline_test_lib[6], cst_nonempty_list$0, "nonempty_list.ml");
   var
    cst_Nonempty_list_Option_value =
      "Nonempty_list.Option.value_exn: empty list",
    _T_ = [0, 0],
    _S_ =
      [0,
       [11, "Nonempty_list.init ", [4, 0, 0, 0, 0]],
       "Nonempty_list.init %d"],
    _Q_ =
      [0,
       [11,
        "Nonempty_list.nth_exn ",
        [4, 0, 0, 0, [11, " called on list of length ", [4, 0, 0, 0, 0]]]],
       "Nonempty_list.nth_exn %d called on list of length %d"],
    cst_empty_list = "empty list",
    _P_ = [1, cst_nonempty_list_src_nonempty$16],
    cst_nonempty_list_src_nonempty$12 = cst_nonempty_list_src_nonempty$16,
    cst_t$6 = cst_t$7,
    cst_nonempty_list_src_nonempty$8 =
      "nonempty_list/src/nonempty_list.ml.Stable.V1.Pair_format.t",
    cst_t$4 = cst_t$7,
    cst_nonempty_list_src_nonempty$4 =
      "nonempty_list/src/nonempty_list.ml.Stable.V2.Record_format.t",
    cst_t$2 = cst_t$7,
    cst_t$0 = cst_t$7,
    cst_Nonempty_list_of_list_exn_ = "Nonempty_list.of_list_exn: empty list",
    cst_a = cst_a$10,
    cst_nonempty_list_src_nonempty =
      "nonempty_list/src/nonempty_list.ml:19:18",
    cst_a$0 = cst_a$10,
    cst_t = cst_t$7,
    cst_nonempty_list_src_nonempty$0 =
      "nonempty_list/src/nonempty_list.ml:19:6",
    cst_9a63aaee_82e0_11ea_8fb6_aa = "9a63aaee-82e0-11ea-8fb6-aa00005c6184",
    _an_ =
      [0,
       [0,
        [0, " eaa5c1535ea5c1691291b3bdbbd7b014 ", [0, cst$2]],
        [0, 1537, 1552, 1590]]],
    _ao_ = [0, 1537, 1543, 1591],
    _at_ = [0, 1471, 1475, 1591],
    _au_ = [0, 1537, 1591, 1591],
    _av_ = [0, 1471, 1475, 1591],
    cst_nonempty_list_src_nonempty$15 = cst_nonempty_list_src_nonempty$17,
    cst_a$1 = cst_a$10,
    cst_nonempty_list_src_nonempty$1 =
      "nonempty_list/src/nonempty_list.ml:78:15",
    cst_tl = "tl",
    cst_a$2 = cst_a$10,
    cst_nonempty_list_src_nonempty$2 =
      "nonempty_list/src/nonempty_list.ml:77:15",
    cst_hd = "hd",
    cst_a$3 = cst_a$10,
    cst_t$1 = cst_t$7,
    cst_nonempty_list_src_nonempty$3 =
      "nonempty_list/src/nonempty_list.ml:76:6",
    _ad_ =
      [0,
       [0,
        [0, " 2aede2e9b03754f5dfa5f1a61877b330 ", [0, cst$2]],
        [0, 2788, 2803, 2841]]],
    _ae_ = [0, 2788, 2794, 2842],
    _aj_ = [0, 2722, 2726, 2842],
    _ak_ = [0, 2788, 2842, 2842],
    _al_ = [0, 2722, 2726, 2842],
    cst_nonempty_list_src_nonempty$14 = cst_nonempty_list_src_nonempty$17,
    cst_a$4 = cst_a$10,
    cst_nonempty_list_src_nonempty$5 =
      "nonempty_list/src/nonempty_list.ml:123:23",
    cst_a$5 = cst_a$10,
    cst_nonempty_list_src_nonempty$6 =
      "nonempty_list/src/nonempty_list.ml:123:18",
    cst_a$6 = cst_a$10,
    cst_t$3 = cst_t$7,
    cst_nonempty_list_src_nonempty$7 =
      "nonempty_list/src/nonempty_list.ml:123:6",
    _V_ =
      [0,
       [0,
        [0, " f27871ef428aef2925f18d6be687bf9c ", [0, cst$2]],
        [0, 3954, 3969, 4007]]],
    _W_ = [0, 3954, 3960, 4008],
    _$_ = [0, 3888, 3892, 4008],
    _aa_ = [0, 3954, 4008, 4008],
    _ab_ = [0, 3888, 3892, 4008],
    cst_nonempty_list_src_nonempty$13 = cst_nonempty_list_src_nonempty$17,
    cst_a$7 = cst_a$10,
    cst_nonempty_list_src_nonempty$9 =
      "nonempty_list/src/nonempty_list.ml:160:46",
    cst_a$8 = cst_a$10,
    cst_nonempty_list_src_nonempty$10 =
      "nonempty_list/src/nonempty_list.ml:160:41",
    cst_a$9 = cst_a$10,
    cst_t$5 = cst_t$7,
    cst_nonempty_list_src_nonempty$11 =
      "nonempty_list/src/nonempty_list.ml:160:2",
    cst_nonempty_list = cst_nonempty_list$0,
    cst_Nonempty_list = cst_Nonempty_list$0;
   function compare(cmp_a, a_001, b_002){
    if(a_001 === b_002) return 0;
    var
     b_006 = b_002[2],
     b_004 = b_002[1],
     a_005 = a_001[2],
     a_003 = a_001[1],
     n = caml_call2(cmp_a, a_003, b_004);
    if(0 !== n) return n;
    function _cg_(a_007, b_008){return caml_call2(cmp_a, a_007, b_008);}
    return caml_call3(Core_Stable[446], _cg_, a_005, b_006);
   }
   function equal(cmp_a, a_009, b_010){
    if(a_009 === b_010) return 1;
    var
     b_014 = b_010[2],
     b_012 = b_010[1],
     a_013 = a_009[2],
     a_011 = a_009[1],
     _ce_ = caml_call2(cmp_a, a_011, b_012);
    if(! _ce_) return _ce_;
    function _cf_(a_015, b_016){return caml_call2(cmp_a, a_015, b_016);}
    return caml_call3(Core_Stable[460], _cf_, a_013, b_014);
   }
   function hash_fold_t(hash_fold_a, hsv, arg){
    var a1 = arg[2], a0 = arg[1], hsv$0 = caml_call2(hash_fold_a, hsv, a0);
    return caml_call3(Core_Stable[291], hash_fold_a, hsv$0, a1);
   }
   function to_list(param){
    var tl = param[2], hd = param[1];
    return [0, hd, tl];
   }
   function of_list_exn(param){
    if(param){var tl = param[2], hd = param[1]; return [0, hd, tl];}
    var
     _cd_ = caml_call1(Sexplib0_Sexp_conv[7], cst_Nonempty_list_of_list_exn_);
    return caml_call1(Core[261], _cd_);
   }
   var
    _a_ = caml_call1(Bin_shape[3][1], cst_a),
    _b_ = caml_call1(Bin_shape[4][1], cst_nonempty_list_src_nonempty),
    _c_ = caml_call2(Bin_prot_Shape[11], _b_, _a_),
    _d_ = caml_call1(Core_Stable[203], _c_),
    _e_ = [0, caml_call1(Bin_shape[3][1], cst_a$0), 0],
    _f_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t), _e_, _d_], 0],
    _g_ = caml_call1(Bin_shape[4][1], cst_nonempty_list_src_nonempty$0),
    group = caml_call2(Bin_prot_Shape[2], _g_, _f_);
   function bin_shape_t(a){
    var _cc_ = caml_call1(Bin_shape[2][1], cst_t$0);
    return caml_call1(caml_call2(Bin_prot_Shape[10], group, _cc_), [0, a, 0]);
   }
   function bin_size_t(size_of_a, v){
    return caml_call2(Core_Stable[18], size_of_a, v);
   }
   function bin_write_t(write_a, buf, pos, v){
    return caml_call4(Core_Stable[205], write_a, buf, pos, v);
   }
   function bin_read_t(of_a, buf, pos_ref, vint){
    return caml_call3(caml_call1(Core_Stable[209], of_a), buf, pos_ref, vint);
   }
   function bin_read_t$0(of_a, buf, pos_ref){
    return caml_call2(caml_call1(Core_Stable[208], of_a), buf, pos_ref);
   }
   var t_of_sexp = Core_Stable[343], sexp_of_t = Core_Stable[342];
   function stable_witness(a_stable_witness){return Stable_witness[6];}
   var
    caller_identity =
      caml_call1(Bin_shape[5][1], cst_9a63aaee_82e0_11ea_8fb6_aa),
    _h_ =
      caml_call1
       (caml_call1
         (Core_Binable[16][2][2],
          [0, bin_shape_t, bin_size_t, bin_write_t, bin_read_t$0, bin_read_t]),
        [0, to_list, of_list_exn, caller_identity]),
    bin_shape_t$0 = _h_[1],
    bin_size_t$0 = _h_[2],
    bin_write_t$0 = _h_[3],
    bin_read_t$1 = _h_[4],
    bin_read_t$2 = _h_[5],
    bin_writer_t = _h_[6],
    bin_reader_t = _h_[7],
    bin_t = _h_[8],
    include =
      caml_call1
       (caml_call1(Core_Sexpable[2][2][1], [0, t_of_sexp, sexp_of_t]),
        [0, to_list, of_list_exn]),
    t_of_sexp$0 = include[1],
    sexp_of_t$0 = include[2];
   function t_sexp_grammar(param){return [2, [0, param, [1, param]]];}
   function stable_witness$0(witness){
    return caml_call4
            (caml_call1(caml_call1(Stable_witness[3], [0]), [0])[1],
             stable_witness,
             of_list_exn,
             to_list,
             witness);
   }
   if(typeof Ppx_inline_test_lib[3] !== "number"){
    var
     Ppx_expect_test_block$1 =
       caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
     _am_ =
       function(param){
        var
         _b__ = caml_call1(bin_shape_t$0, Core_Stable[123]),
         _b$_ = caml_call1(Bin_prot_Shape[15], _b__),
         _ca_ = caml_call1(Bin_shape[19][4], _b$_);
        caml_call1(Stdlib[46], _ca_);
        var _cb_ = caml_call1(Ppx_expect_runtime_Types[4][1], 0);
        return caml_call1(Ppx_expect_test_block$1[2], _cb_);
       },
     _ap_ =
       caml_call3
        (Ppx_expect_runtime_Test_node[1][1],
         [0, Ppx_expect_runtime_Types[1][1]],
         _ao_,
         _an_),
     _aq_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 0), _ap_], 0],
     _ar_ = caml_call1(Ppx_expect_runtime_Types[4][1], 2),
     _as_ = caml_call1(Ppx_expect_runtime_Types[4][1], 1);
    caml_call14
     (Ppx_expect_test_block$1[3],
      cst_nonempty_list_src_nonempty$15,
      58,
      _av_,
      _au_,
      _at_,
      [0, Ppx_expect_runtime_Types[1][1]],
      0,
      _as_,
      _ar_,
      0,
      0,
      Inline_test_config,
      _aq_,
      _am_);
   }
   function compare$0(cmp_a, a_022, b_023){
    if(a_022 === b_023) return 0;
    var
     b_027 = b_023[2],
     b_025 = b_023[1],
     a_026 = a_022[2],
     a_024 = a_022[1],
     n = caml_call2(cmp_a, a_024, b_025);
    if(0 !== n) return n;
    function _b9_(a_028, b_029){return caml_call2(cmp_a, a_028, b_029);}
    return caml_call3(Core_Stable[446], _b9_, a_026, b_027);
   }
   function equal$0(cmp_a, a_030, b_031){
    if(a_030 === b_031) return 1;
    var
     b_035 = b_031[2],
     b_033 = b_031[1],
     a_034 = a_030[2],
     a_032 = a_030[1],
     _b7_ = caml_call2(cmp_a, a_032, b_033);
    if(! _b7_) return _b7_;
    function _b8_(a_036, b_037){return caml_call2(cmp_a, a_036, b_037);}
    return caml_call3(Core_Stable[460], _b8_, a_034, b_035);
   }
   function hash_fold_t$0(hash_fold_a, hsv, arg){
    var a1 = arg[2], a0 = arg[1], hsv$0 = caml_call2(hash_fold_a, hsv, a0);
    return caml_call3(Core_Stable[291], hash_fold_a, hsv$0, a1);
   }
   var
    _i_ = caml_call1(Bin_shape[3][1], cst_a$1),
    _j_ = caml_call1(Bin_shape[4][1], cst_nonempty_list_src_nonempty$1),
    _k_ = caml_call2(Bin_prot_Shape[11], _j_, _i_),
    _l_ = [0, [0, cst_tl, caml_call1(Core_Stable[203], _k_)], 0],
    _m_ = caml_call1(Bin_shape[3][1], cst_a$2),
    _n_ = caml_call1(Bin_shape[4][1], cst_nonempty_list_src_nonempty$2),
    _o_ = [0, [0, cst_hd, caml_call2(Bin_prot_Shape[11], _n_, _m_)], _l_],
    _p_ = caml_call1(Bin_prot_Shape[4], _o_),
    _q_ = [0, caml_call1(Bin_shape[3][1], cst_a$3), 0],
    _r_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$1), _q_, _p_], 0],
    _s_ = caml_call1(Bin_shape[4][1], cst_nonempty_list_src_nonempty$3),
    group$0 = caml_call2(Bin_prot_Shape[2], _s_, _r_);
   function bin_shape_t$1(a){
    var _b6_ = caml_call1(Bin_shape[2][1], cst_t$2);
    return caml_call1
            (caml_call2(Bin_prot_Shape[10], group$0, _b6_), [0, a, 0]);
   }
   function bin_size_t$1(size_of_a, param){
    var
     v2 = param[2],
     v1 = param[1],
     _b4_ = caml_call1(size_of_a, v1),
     size = caml_call2(Bin_prot_Common[23], 0, _b4_),
     _b5_ = caml_call2(Core_Stable[18], size_of_a, v2);
    return caml_call2(Bin_prot_Common[23], size, _b5_);
   }
   function bin_write_t$1(write_a, buf, pos, param){
    var
     v2 = param[2],
     v1 = param[1],
     pos$0 = caml_call3(write_a, buf, pos, v1);
    return caml_call4(Core_Stable[205], write_a, buf, pos$0, v2);
   }
   function bin_read_t$3(of_a, buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19],
             cst_nonempty_list_src_nonempty$4,
             pos_ref[1]);
   }
   function bin_read_t$4(of_a, buf, pos_ref){
    var
     v_hd = caml_call2(of_a, buf, pos_ref),
     v_tl = caml_call2(caml_call1(Core_Stable[208], of_a), buf, pos_ref);
    return [0, v_hd, v_tl];
   }
   function stable_witness$1(a_stable_witness){return Stable_witness[6];}
   function of_nonempty_list(param){
    var tl = param[2], hd = param[1];
    return [0, hd, tl];
   }
   function to_nonempty_list(param){
    var tl = param[2], hd = param[1];
    return [0, hd, tl];
   }
   var
    include$0 =
      caml_call1
       (caml_call1
         (Core_Binable[16][2][1],
          [0,
           bin_shape_t$1,
           bin_size_t$1,
           bin_write_t$1,
           bin_read_t$4,
           bin_read_t$3]),
        [0, of_nonempty_list, to_nonempty_list]),
    bin_shape_t$2 = include$0[1],
    bin_size_t$2 = include$0[2],
    bin_write_t$2 = include$0[3],
    bin_read_t$5 = include$0[4],
    bin_read_t$6 = include$0[5],
    bin_writer_t$0 = include$0[6],
    bin_reader_t$0 = include$0[7],
    bin_t$0 = include$0[8];
   function stable_witness$2(witness){
    return caml_call4
            (caml_call1(caml_call1(Stable_witness[3], [0]), [0])[1],
             stable_witness$1,
             to_nonempty_list,
             of_nonempty_list,
             witness);
   }
   if(typeof Ppx_inline_test_lib[3] !== "number"){
    var
     Ppx_expect_test_block$0 =
       caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
     _ac_ =
       function(param){
        var
         _b0_ = caml_call1(bin_shape_t$2, Core_Stable[123]),
         _b1_ = caml_call1(Bin_prot_Shape[15], _b0_),
         _b2_ = caml_call1(Bin_shape[19][4], _b1_);
        caml_call1(Stdlib[46], _b2_);
        var _b3_ = caml_call1(Ppx_expect_runtime_Types[4][1], 3);
        return caml_call1(Ppx_expect_test_block$0[2], _b3_);
       },
     _af_ =
       caml_call3
        (Ppx_expect_runtime_Test_node[1][1],
         [0, Ppx_expect_runtime_Types[1][1]],
         _ae_,
         _ad_),
     _ag_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 3), _af_], 0],
     _ah_ = caml_call1(Ppx_expect_runtime_Types[4][1], 5),
     _ai_ = caml_call1(Ppx_expect_runtime_Types[4][1], 4);
    caml_call14
     (Ppx_expect_test_block$0[3],
      cst_nonempty_list_src_nonempty$14,
      106,
      _al_,
      _ak_,
      _aj_,
      [0, Ppx_expect_runtime_Types[1][1]],
      0,
      _ai_,
      _ah_,
      0,
      0,
      Inline_test_config,
      _ag_,
      _ac_);
   }
   function compare$1(cmp_a, a_042, b_043){
    if(a_042 === b_043) return 0;
    var
     b_047 = b_043[2],
     b_045 = b_043[1],
     a_046 = a_042[2],
     a_044 = a_042[1],
     n = caml_call2(cmp_a, a_044, b_045);
    if(0 !== n) return n;
    function _bZ_(a_048, b_049){return caml_call2(cmp_a, a_048, b_049);}
    return caml_call3(Core_Stable[446], _bZ_, a_046, b_047);
   }
   function equal$1(cmp_a, a_050, b_051){
    if(a_050 === b_051) return 1;
    var
     b_055 = b_051[2],
     b_053 = b_051[1],
     a_054 = a_050[2],
     a_052 = a_050[1],
     _bX_ = caml_call2(cmp_a, a_052, b_053);
    if(! _bX_) return _bX_;
    function _bY_(a_056, b_057){return caml_call2(cmp_a, a_056, b_057);}
    return caml_call3(Core_Stable[460], _bY_, a_054, b_055);
   }
   var
    _t_ = caml_call1(Bin_shape[3][1], cst_a$4),
    _u_ = caml_call1(Bin_shape[4][1], cst_nonempty_list_src_nonempty$5),
    _v_ = caml_call2(Bin_prot_Shape[11], _u_, _t_),
    _w_ = [0, caml_call1(Core_Stable[203], _v_), 0],
    _x_ = caml_call1(Bin_shape[3][1], cst_a$5),
    _y_ = caml_call1(Bin_shape[4][1], cst_nonempty_list_src_nonempty$6),
    _z_ = [0, caml_call2(Bin_prot_Shape[11], _y_, _x_), _w_],
    _A_ = caml_call1(Bin_prot_Shape[3], _z_),
    _B_ = [0, caml_call1(Bin_shape[3][1], cst_a$6), 0],
    _C_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$3), _B_, _A_], 0],
    _D_ = caml_call1(Bin_shape[4][1], cst_nonempty_list_src_nonempty$7),
    group$1 = caml_call2(Bin_prot_Shape[2], _D_, _C_);
   function bin_shape_t$3(a){
    var _bW_ = caml_call1(Bin_shape[2][1], cst_t$4);
    return caml_call1
            (caml_call2(Bin_prot_Shape[10], group$1, _bW_), [0, a, 0]);
   }
   function bin_size_t$3(size_of_a, param){
    var
     v2 = param[2],
     v1 = param[1],
     _bU_ = caml_call1(size_of_a, v1),
     size = caml_call2(Bin_prot_Common[23], 0, _bU_),
     _bV_ = caml_call2(Core_Stable[18], size_of_a, v2);
    return caml_call2(Bin_prot_Common[23], size, _bV_);
   }
   function bin_write_t$3(write_a, buf, pos, param){
    var
     v2 = param[2],
     v1 = param[1],
     pos$0 = caml_call3(write_a, buf, pos, v1);
    return caml_call4(Core_Stable[205], write_a, buf, pos$0, v2);
   }
   function bin_read_t$7(of_a, buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19],
             cst_nonempty_list_src_nonempty$8,
             pos_ref[1]);
   }
   function bin_read_t$8(of_a, buf, pos_ref){
    var
     v1 = caml_call2(of_a, buf, pos_ref),
     v2 = caml_call2(caml_call1(Core_Stable[208], of_a), buf, pos_ref);
    return [0, v1, v2];
   }
   function stable_witness$3(a_stable_witness){return Stable_witness[6];}
   function of_nonempty_list$0(param){
    var tl = param[2], hd = param[1];
    return [0, hd, tl];
   }
   function to_nonempty_list$0(param){
    var tl = param[2], hd = param[1];
    return [0, hd, tl];
   }
   var
    include$1 =
      caml_call1
       (caml_call1
         (Core_Binable[16][2][1],
          [0,
           bin_shape_t$3,
           bin_size_t$3,
           bin_write_t$3,
           bin_read_t$8,
           bin_read_t$7]),
        [0, of_nonempty_list$0, to_nonempty_list$0]),
    bin_shape_t$4 = include$1[1],
    bin_size_t$4 = include$1[2],
    bin_write_t$4 = include$1[3],
    bin_read_t$9 = include$1[4],
    bin_read_t$10 = include$1[5],
    bin_writer_t$1 = include$1[6],
    bin_reader_t$1 = include$1[7],
    bin_t$1 = include$1[8];
   function stable_witness$4(witness){
    return caml_call4
            (caml_call1(caml_call1(Stable_witness[3], [0]), [0])[1],
             stable_witness$3,
             to_nonempty_list$0,
             of_nonempty_list$0,
             witness);
   }
   if(typeof Ppx_inline_test_lib[3] !== "number"){
    var
     Ppx_expect_test_block =
       caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
     _U_ =
       function(param){
        var
         _bQ_ = caml_call1(bin_shape_t$4, Core_Stable[123]),
         _bR_ = caml_call1(Bin_prot_Shape[15], _bQ_),
         _bS_ = caml_call1(Bin_shape[19][4], _bR_);
        caml_call1(Stdlib[46], _bS_);
        var _bT_ = caml_call1(Ppx_expect_runtime_Types[4][1], 6);
        return caml_call1(Ppx_expect_test_block[2], _bT_);
       },
     _X_ =
       caml_call3
        (Ppx_expect_runtime_Test_node[1][1],
         [0, Ppx_expect_runtime_Types[1][1]],
         _W_,
         _V_),
     _Y_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 6), _X_], 0],
     _Z_ = caml_call1(Ppx_expect_runtime_Types[4][1], 8),
     ___ = caml_call1(Ppx_expect_runtime_Types[4][1], 7);
    caml_call14
     (Ppx_expect_test_block[3],
      cst_nonempty_list_src_nonempty$13,
      149,
      _ab_,
      _aa_,
      _$_,
      [0, Ppx_expect_runtime_Types[1][1]],
      0,
      ___,
      _Z_,
      0,
      0,
      Inline_test_config,
      _Y_,
      _U_);
   }
   function compare$2(cmp_a, a_066, b_067){
    if(a_066 === b_067) return 0;
    var
     b_071 = b_067[2],
     b_069 = b_067[1],
     a_070 = a_066[2],
     a_068 = a_066[1],
     n = caml_call2(cmp_a, a_068, b_069);
    if(0 !== n) return n;
    function _bP_(a_072, b_073){return caml_call2(cmp_a, a_072, b_073);}
    return caml_call3(Core[466], _bP_, a_070, b_071);
   }
   function equal$2(cmp_a, a_074, b_075){
    if(a_074 === b_075) return 1;
    var
     b_079 = b_075[2],
     b_077 = b_075[1],
     a_078 = a_074[2],
     a_076 = a_074[1],
     _bN_ = caml_call2(cmp_a, a_076, b_077);
    if(! _bN_) return _bN_;
    function _bO_(a_080, b_081){return caml_call2(cmp_a, a_080, b_081);}
    return caml_call3(Core[468], _bO_, a_078, b_079);
   }
   function hash_fold_t$1(hash_fold_a, hsv, arg){
    var a1 = arg[2], a0 = arg[1], hsv$0 = caml_call2(hash_fold_a, hsv, a0);
    return caml_call3(Core[471], hash_fold_a, hsv$0, a1);
   }
   function quickcheck_generator(generator_091){
    var _bI_ = 0;
    function _bJ_(size_092, random_093){
     var
      _bL_ = caml_call1(Core[129], generator_091),
      _bM_ =
        caml_call3(Base_quickcheck_Generator[128], _bL_, size_092, random_093);
     return [0,
             caml_call3
              (Base_quickcheck_Generator[128],
               generator_091,
               size_092,
               random_093),
             _bM_];
    }
    var
     _bK_ =
       [0, [0, 1., caml_call1(Base_quickcheck_Generator[127], _bJ_)], _bI_];
    return caml_call1(Base_quickcheck_Generator[60], _bK_);
   }
   function quickcheck_observer(observer_085){
    function _bG_(x_086, size_087, hash_088){
     var
      x_090 = x_086[2],
      x_089 = x_086[1],
      hash_088$0 = caml_call2(Base[133], hash_088, 0),
      hash_088$1 =
        caml_call4
         (Base_quickcheck_Observer[37],
          observer_085,
          x_089,
          size_087,
          hash_088$0),
      _bH_ = caml_call1(Core[134], observer_085),
      hash_088$2 =
        caml_call4
         (Base_quickcheck_Observer[37], _bH_, x_090, size_087, hash_088$1);
     return hash_088$2;
    }
    return caml_call1(Base_quickcheck_Observer[36], _bG_);
   }
   function quickcheck_shrinker(shrinker_082){
    function _bx_(param){
     var x_084 = param[2], x_083 = param[1], _by_ = 0;
     function _bz_(x_084){return [0, x_083, x_084];}
     var
      _bA_ = caml_call1(Core[139], shrinker_082),
      _bB_ = caml_call2(Base_quickcheck_Shrinker[37], _bA_, x_084),
      _bC_ = [0, caml_call2(Base_Sequence[35], _bB_, _bz_), _by_];
     function _bD_(x_083){return [0, x_083, x_084];}
     var
      _bE_ = caml_call2(Base_quickcheck_Shrinker[37], shrinker_082, x_083),
      _bF_ = [0, caml_call2(Base_Sequence[35], _bE_, _bD_), _bC_];
     return caml_call1(Base_Sequence[70], _bF_);
    }
    return caml_call1(Base_quickcheck_Shrinker[36], _bx_);
   }
   var
    Typename_of_t = caml_call1(Typerep_lib_Make_typename[2], [0, name]),
    typename_of_t = Typename_of_t[2];
   function typerep_of_t(of_a){
    var name_of_t = caml_call1(Typename_of_t[1], of_a);
    return [9,
            [0,
             name_of_t,
             [0,
              [246,
               function(param){
                var
                 _bt_ =
                   [0,
                    function(param){
                     var v1 = param[2], v0 = param[1];
                     return [0, v0, v1];
                    }],
                 _bu_ = caml_call2(Typerep_lib_Typename[1], 0, 0),
                 _bv_ = caml_call1(Core[475], of_a),
                 _bw_ =
                   [0,
                    cst,
                    caml_call2(Core[275], of_a, _bv_),
                    2,
                    0,
                    0,
                    0,
                    _bu_,
                    _bt_],
                 tag0 = caml_call1(Typerep_lib_Std[1][4][9], _bw_),
                 typename = caml_call1(Typerep_lib_Std[1][1][2], name_of_t),
                 tags = [0, [0, tag0]],
                 polymorphic = 0;
                function value(param){
                 var v1 = param[2], v0 = param[1];
                 return [0, tag0, [0, v0, v1]];
                }
                return [8,
                        caml_call1
                         (Typerep_lib_Std[1][6][7],
                          [0, typename, tags, polymorphic, value])];
               }]]]];
   }
   var
    _E_ = caml_call1(Bin_shape[3][1], cst_a$7),
    _F_ = caml_call1(Bin_shape[4][1], cst_nonempty_list_src_nonempty$9),
    _G_ = caml_call2(Bin_prot_Shape[11], _F_, _E_),
    _H_ = [0, caml_call1(Core[456], _G_), 0],
    _I_ = caml_call1(Bin_shape[3][1], cst_a$8),
    _J_ = caml_call1(Bin_shape[4][1], cst_nonempty_list_src_nonempty$10),
    _K_ =
      [0, [0, cst$0, [0, caml_call2(Bin_prot_Shape[11], _J_, _I_), _H_]], 0],
    _L_ = caml_call1(Bin_prot_Shape[5], _K_),
    _M_ = [0, caml_call1(Bin_shape[3][1], cst_a$9), 0],
    _N_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$5), _M_, _L_], 0],
    _O_ = caml_call1(Bin_shape[4][1], cst_nonempty_list_src_nonempty$11),
    group$2 = caml_call2(Bin_prot_Shape[2], _O_, _N_);
   function bin_shape_t$5(a){
    var _bs_ = caml_call1(Bin_shape[2][1], cst_t$6);
    return caml_call1
            (caml_call2(Bin_prot_Shape[10], group$2, _bs_), [0, a, 0]);
   }
   function bin_size_t$5(size_of_a, param){
    var
     v2 = param[2],
     v1 = param[1],
     _bq_ = caml_call1(size_of_a, v1),
     size = caml_call2(Bin_prot_Common[23], 1, _bq_),
     _br_ = caml_call2(Core[457], size_of_a, v2);
    return caml_call2(Bin_prot_Common[23], size, _br_);
   }
   function bin_write_t$5(write_a, buf, pos, param){
    var
     v2 = param[2],
     v1 = param[1],
     pos$0 = caml_call3(Bin_prot_Write[30], buf, pos, 0),
     pos$1 = caml_call3(write_a, buf, pos$0, v1);
    return caml_call4(Core[459], write_a, buf, pos$1, v2);
   }
   function bin_writer_t$2(bin_writer_a){
    function _bm_(v){
     var _bn_ = bin_writer_a[2];
     return function(_bo_, _bp_){return bin_write_t$5(_bn_, v, _bo_, _bp_);};
    }
    return [0, function(v){return bin_size_t$5(bin_writer_a[1], v);}, _bm_];
   }
   function bin_read_t$11(of_a, buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19],
             cst_nonempty_list_src_nonempty$12,
             pos_ref[1]);
   }
   function bin_read_t$12(of_a, buf, pos_ref){
    if(0 !== caml_call2(Bin_prot_Read[29], buf, pos_ref))
     return caml_call2(Bin_prot_Common[18], _P_, pos_ref[1]);
    var
     arg_1 = caml_call2(of_a, buf, pos_ref),
     arg_2 = caml_call2(caml_call1(Core[462], of_a), buf, pos_ref);
    return [0, arg_1, arg_2];
   }
   function bin_reader_t$2(bin_reader_a){
    function _bl_(buf, pos_ref, vtag){
     return bin_read_t$11(bin_reader_a[1], buf, pos_ref, vtag);
    }
    return [0,
            function(buf, pos_ref){
             return bin_read_t$12(bin_reader_a[1], buf, pos_ref);
            },
            _bl_];
   }
   function bin_t$2(bin_a){
    var _bj_ = bin_reader_t$2(bin_a[3]), _bk_ = bin_writer_t$2(bin_a[2]);
    return [0, bin_shape_t$5(bin_a[1]), _bk_, _bj_];
   }
   function globalize(globalize_a_095, x_096){
    var
     arg_097 = x_096[2],
     arg_099 = x_096[1],
     _bi_ = caml_call2(Core[470], globalize_a_095, arg_097);
    return [0, caml_call1(globalize_a_095, arg_099), _bi_];
   }
   function hd(param){var hd = param[1]; return hd;}
   function tl(param){var tl = param[2]; return tl;}
   function of_list(param){
    if(! param) return 0;
    var tl = param[2], hd = param[1];
    return [0, [0, hd, tl]];
   }
   function of_list_error(param){
    if(param){var tl = param[2], hd = param[1]; return [0, [0, hd, tl]];}
    var _bh_ = caml_call1(Sexplib0_Sexp_conv[7], cst_empty_list);
    return caml_call1(Core[245], _bh_);
   }
   function fold(param, init, f){
    var tl = param[2], hd = param[1], _bg_ = caml_call2(f, init, hd);
    return caml_call3(Core_List[20], tl, _bg_, f);
   }
   var
    foldi = -304398144,
    iter =
      [0,
       -198771759,
       function(param, f){
        var tl = param[2], hd = param[1];
        caml_call1(f, hd);
        return caml_call2(Core_List[19], tl, f);
       }],
    iteri = -304398144,
    length =
      [0,
       -198771759,
       function(param){
        var tl = param[2];
        return 1 + caml_call1(Core_List[45], tl) | 0;
       }],
    include$2 = caml_call1(Core_Comparator[9], [0, compare$2, sexp_of_t$0]),
    comparator = include$2[1];
   function is_empty(param){return 0;}
   var
    From_indexed_container_make =
      caml_call1
       (Base_Indexed_container[8], [0, fold, iter, length, iteri, foldi]),
    mem = From_indexed_container_make[1],
    length$0 = From_indexed_container_make[2],
    iter$0 = From_indexed_container_make[4],
    fold$0 = From_indexed_container_make[5],
    fold_result = From_indexed_container_make[6],
    fold_until = From_indexed_container_make[7],
    exists = From_indexed_container_make[8],
    for_all = From_indexed_container_make[9],
    count = From_indexed_container_make[10],
    sum = From_indexed_container_make[11],
    find = From_indexed_container_make[12],
    find_map = From_indexed_container_make[13],
    to_array = From_indexed_container_make[15],
    min_elt = From_indexed_container_make[16],
    max_elt = From_indexed_container_make[17],
    iteri$0 = From_indexed_container_make[19],
    find_mapi = From_indexed_container_make[24],
    findi = From_indexed_container_make[23],
    counti = From_indexed_container_make[22],
    for_alli = From_indexed_container_make[21],
    existsi = From_indexed_container_make[20],
    foldi$0 = From_indexed_container_make[18];
   function invariant(f, t){return caml_call2(iter$0, t, f);}
   function create(hd, tl){return [0, hd, tl];}
   function singleton(hd){return [0, hd, 0];}
   function cons(x, param){
    var tl = param[2], hd = param[1];
    return [0, x, [0, hd, tl]];
   }
   function nth(param, n){
    var tl = param[2], hd = param[1];
    return 0 === n ? [0, hd] : caml_call2(Core_List[57], tl, n - 1 | 0);
   }
   function nth_exn(t, n){
    var match = nth(t, n);
    if(match){var a = match[1]; return a;}
    var _bf_ = caml_call1(length$0, t);
    return caml_call4(Core[250], _Q_, n, _bf_, 0);
   }
   function mapi(param, f){
    var tl = param[2], hd = param[1], hd$0 = caml_call2(f, 0, hd);
    function _be_(i, x){return caml_call2(f, i + 1 | 0, x);}
    return [0, hd$0, caml_call2(Core_List[41], tl, _be_)];
   }
   function filter_map(param, f){
    var tl = param[2], hd = param[1], match = caml_call1(f, hd);
    if(! match) return caml_call2(Core_List[13], tl, f);
    var hd$0 = match[1];
    return [0, hd$0, caml_call2(Core_List[13], tl, f)];
   }
   function filter_mapi(param, f){
    var tl = param[2], hd = param[1], hd$0 = caml_call2(f, 0, hd);
    function f$0(i, x){return caml_call2(f, i + 1 | 0, x);}
    if(! hd$0) return caml_call2(Core_List[43], tl, f$0);
    var hd$1 = hd$0[1];
    return [0, hd$1, caml_call2(Core_List[43], tl, f$0)];
   }
   function filter(param, f){
    var tl = param[2], hd = param[1];
    return caml_call1(f, hd)
            ? [0, hd, caml_call2(Core_List[12], tl, f)]
            : caml_call2(Core_List[12], tl, f);
   }
   function filteri(param, f){
    var tl = param[2], hd = param[1], include_hd = caml_call2(f, 0, hd);
    function f$0(i, x){return caml_call2(f, i + 1 | 0, x);}
    return include_hd
            ? [0, hd, caml_call2(Core_List[42], tl, f$0)]
            : caml_call2(Core_List[42], tl, f$0);
   }
   function _R_(t, f){
    return mapi(t, function(param, x){return caml_call1(f, x);});
   }
   function map2(t1, t2, f){
    var
     _bc_ = to_list(t2),
     _bd_ = to_list(t1),
     match = caml_call3(Core_List[95], _bd_, _bc_, f);
    if(! match) return 0;
    var x = match[1];
    return [0, of_list_exn(x)];
   }
   function map2_exn(t1, t2, f){
    var _ba_ = to_list(t2), _bb_ = to_list(t1);
    return of_list_exn(caml_call3(Core_List[94], _bb_, _ba_, f));
   }
   function reduce(param, f){
    var tl = param[2], hd = param[1];
    return caml_call3(Core_List[20], tl, hd, f);
   }
   function reverse(param){
    var tl = param[2], hd = param[1], acc = 0, x = hd, xs = tl;
    for(;;){
     if(! xs) return [0, x, acc];
     var
      ys = xs[2],
      y = xs[1],
      acc$0 = [0, x, acc],
      acc = acc$0,
      x = y,
      xs = ys;
    }
   }
   function append(param, l){
    var tl = param[2], hd = param[1];
    return [0, hd, caml_call2(Core_List[10], tl, l)];
   }
   function return$0(hd){return [0, hd, 0];}
   var map = [0, -198771759, _R_];
   function bind(param, f){
    var tl = param[2], hd = param[1], f_hd = caml_call1(f, hd);
    function _a$_(x){return to_list(caml_call1(f, x));}
    return append(f_hd, caml_call2(Core_List[14], tl, _a$_));
   }
   var
    include$3 = caml_call1(Base_Monad[5], [0, bind, return$0, map]),
    symbol_bind = include$3[1],
    symbol_map = include$3[2],
    Monad_infix = include$3[3],
    bind$0 = include$3[4],
    return$1 = include$3[5],
    map$0 = include$3[6],
    join = include$3[7],
    ignore_m = include$3[8],
    all = include$3[9],
    all_unit = include$3[10],
    Let_syntax = include$3[11];
   function unzip(param){
    var
     tl = param[2],
     match = param[1],
     hd2 = match[2],
     hd1 = match[1],
     match$0 = caml_call1(Core_List[103], tl),
     tl2 = match$0[2],
     tl1 = match$0[1];
    return [0, [0, hd1, tl1], [0, hd2, tl2]];
   }
   function concat(t){
    return caml_call2(bind$0, t, function(_a__){return _a__;});
   }
   function zip(t1, t2){
    var
     _a8_ = to_list(t2),
     _a9_ = to_list(t1),
     match = caml_call2(Core_List[105], _a9_, _a8_);
    if(! match) return 0;
    var x = match[1];
    return [0, of_list_exn(x)];
   }
   function zip_exn(t1, t2){
    var _a6_ = to_list(t2), _a7_ = to_list(t1);
    return of_list_exn(caml_call2(Core_List[106], _a7_, _a6_));
   }
   function last(param){
    var tl = param[2], hd = param[1];
    function _a5_(param, elt){return elt;}
    return caml_call3(Core_List[20], tl, hd, _a5_);
   }
   function drop_last(param){
    var tl = param[2], hd = param[1], match = caml_call1(Core_List[139], tl);
    if(! match) return 0;
    var l = match[1];
    return [0, hd, l];
   }
   function to_sequence(t){
    var _a4_ = to_list(t);
    return caml_call1(Core_Sequence[111], _a4_);
   }
   function sort(t, compare){
    var _a3_ = to_list(t);
    return of_list_exn(caml_call2(Core_List[79], _a3_, compare));
   }
   function stable_sort(t, compare){
    var _a2_ = to_list(t);
    return of_list_exn(caml_call2(Core_List[80], _a2_, compare));
   }
   function dedup_and_sort(t, compare){
    var _a1_ = to_list(t);
    return of_list_exn(caml_call2(Core_List[122], _a1_, compare));
   }
   function permute(random_state, t){
    var _a0_ = to_list(t);
    return of_list_exn(caml_call2(Core_List[144], random_state, _a0_));
   }
   function min_elt$0(param, compare){
    var tl = param[2], hd = param[1];
    function _aY_(min, elt){
     var _aZ_ = caml_call2(compare, min, elt);
     return caml_call2(Core[91], _aZ_, 0) ? elt : min;
    }
    return caml_call3(Core_List[20], tl, hd, _aY_);
   }
   function max_elt$0(t, compare){
    return min_elt$0(t, function(x, y){return caml_call2(compare, y, x);});
   }
   function map_add_multi(map, key, data){
    function _aX_(param){
     if(! param) return singleton(data);
     var t = param[1];
     return cons(data, t);
    }
    return caml_call3(Core_Map[43], map, key, _aX_);
   }
   function map_of_container_multi(fold, container, comparator){
    function _aW_(acc, param){
     var data = param[2], key = param[1];
     return map_add_multi(acc, key, data);
    }
    return caml_call3
            (fold, container, caml_call1(Core_Map[4], comparator), _aW_);
   }
   function map_of_alist_multi(alist){
    var _aU_ = Core_List[20];
    return function(_aV_){return map_of_container_multi(_aU_, alist, _aV_);};
   }
   function map_of_sequence_multi(sequence){
    var _aS_ = Core_Sequence[21];
    return function(_aT_){
     return map_of_container_multi(_aS_, sequence, _aT_);};
   }
   function fold_nonempty(param, init, f){
    var tl = param[2], hd = param[1], _aR_ = caml_call1(init, hd);
    return caml_call3(Core_List[20], tl, _aR_, f);
   }
   function map_of_list_with_key_multi(list, comparator, get_key){
    function _aP_(acc, data){
     var key = caml_call1(get_key, data);
     return map_add_multi(acc, key, data);
    }
    var _aQ_ = caml_call1(Core_Map[4], comparator);
    return caml_call3(Core_List[20], list, _aQ_, _aP_);
   }
   function fold_right(param, acc, f){
    var
     tl = param[2],
     hd = param[1],
     acc$0 = caml_call3(Core_List[101], tl, f, acc);
    return caml_call2(f, hd, acc$0);
   }
   function folding_map(param, init, f){
    var
     tl = param[2],
     hd = param[1],
     match = caml_call2(f, init, hd),
     hd$0 = match[2],
     acc = match[1];
    return [0, hd$0, caml_call3(Core_List[90], tl, acc, f)];
   }
   function fold_map(param, acc, f){
    var
     tl = param[2],
     hd = param[1],
     match = caml_call2(f, acc, hd),
     hd$0 = match[2],
     acc$0 = match[1],
     match$0 = caml_call3(Core_List[92], tl, acc$0, f),
     tl$0 = match$0[2],
     acc$1 = match$0[1];
    return [0, acc$1, [0, hd$0, tl$0]];
   }
   function combine_errors(t){
    var _aO_ = to_list(t), match = caml_call1(Core_Result[49], _aO_);
    if(0 === match[0]){var oks = match[1]; return [0, of_list_exn(oks)];}
    var errors = match[1];
    return [1, of_list_exn(errors)];
   }
   function combine_errors_unit(t){
    var _aN_ = to_list(t), ok = caml_call1(Core_Result[50], _aN_);
    if(0 === ok[0]) return ok;
    var errors = ok[1];
    return [1, of_list_exn(errors)];
   }
   function combine_or_errors(t){
    var _aM_ = to_list(t), e = caml_call1(Core_Or_error[56], _aM_);
    if(0 !== e[0]) return e;
    var oks = e[1];
    return [0, of_list_exn(oks)];
   }
   function combine_or_errors_unit(t){
    var _aL_ = to_list(t);
    return caml_call1(Core_Or_error[57], _aL_);
   }
   function validate(name, check, t){
    var _aK_ = to_list(t);
    return caml_call3(Validate[29], name, check, _aK_);
   }
   function validate_indexed(check, t){
    var _aJ_ = to_list(t);
    return caml_call2(Validate[28], check, _aJ_);
   }
   function rev_append(xs, acc){
    var xs$0 = xs, acc$0 = acc;
    for(;;){
     if(! xs$0) return acc$0;
     var
      tl = xs$0[2],
      hd = xs$0[1],
      acc$1 = cons(hd, acc$0),
      xs$0 = tl,
      acc$0 = acc$1;
    }
   }
   function init(n, f){
    if(caml_call2(Core[92], n, 1)) caml_call3(Core[250], _S_, n, 0);
    function _aI_(i){return caml_call1(f, i + 1 | 0);}
    var
     tl = caml_call2(Core_List[40], n - 1 | 0, _aI_),
     hd = caml_call1(f, 0);
    return [0, hd, tl];
   }
   function cartesian_product(t$0, t){
    var _aG_ = to_list(t), _aH_ = to_list(t$0);
    return of_list_exn(caml_call2(Core_List[143], _aH_, _aG_));
   }
   function to_rev_list(param){
    var tl = param[2], hd = param[1];
    return [0, hd, tl];
   }
   function rev_append$0(param, xs){
    var tl = param[2], hd = param[1];
    return rev_append(tl, [0, hd, xs]);
   }
   function rev(t){return rev_append$0(t, 0);}
   function rev_mapi(param, f){
    var
     tl$0 = param[2],
     hd$0 = param[1],
     acc$1 = [0, caml_call2(f, 0, hd$0), 0],
     i = 1,
     xs = tl$0,
     acc = acc$1;
    for(;;){
     if(! xs) return acc;
     var
      tl = xs[2],
      hd = xs[1],
      acc$0 = cons(caml_call2(f, i, hd), acc),
      i$0 = i + 1 | 0,
      i = i$0,
      xs = tl,
      acc = acc$0;
    }
   }
   function rev_map(t, f){
    return rev_mapi(t, function(param, x){return caml_call1(f, x);});
   }
   function cons$0(x, t){return [0, x, to_rev_list(t)];}
   function sexp_of_t$1(sexp_of_a, t){
    var _aF_ = to_rev_list(t);
    return caml_call2(Reversed_list[9][1], sexp_of_a, _aF_);
   }
   var With_sexp_of = [0, sexp_of_t$1];
   function sexp_of_t$2(sexp_of_a, t){
    var _aE_ = to_rev_list(t);
    return caml_call2(Reversed_list[10][1], sexp_of_a, _aE_);
   }
   var With_rev_sexp_of = [0, sexp_of_t$2];
   function rev$0(param){
    var tl = param[2], hd = param[1], _aD_ = caml_call1(Core_Fn[6], cons$0);
    return caml_call3(Core_List[20], tl, [0, hd, 0], _aD_);
   }
   function flag(arg_type){
    function _aB_(param){
     var more = param[2], one = param[1];
     return [0, one, more];
    }
    var _aC_ = caml_call1(Core_Command_internal[20][32], arg_type);
    return caml_call2(Core_Command_internal[20][41], _aC_, _aB_);
   }
   function comma_separated_argtype
   (key, strip_whitespace, unique_values, arg_type){
    var
     _aA_ =
       caml_call5
        (Core_Command_internal[19][9],
         _T_,
         0,
         strip_whitespace,
         unique_values,
         arg_type);
    return caml_call3(Core_Command_internal[19][3], key, _aA_, of_list_exn);
   }
   function compare$3(cmp_a, a_100, b_101){
    function _az_(a_102, b_103){return caml_call2(cmp_a, a_102, b_103);}
    return caml_call3(Core[466], _az_, a_100, b_101);
   }
   function equal$3(cmp_a, a_104, b_105){
    function _ay_(a_106, b_107){return caml_call2(cmp_a, a_106, b_107);}
    return caml_call3(Core[468], _ay_, a_104, b_105);
   }
   var t_of_sexp$1 = Core[473], sexp_of_t$3 = Core[472];
   function t_sexp_grammar$0(a_sexp_grammar){
    return caml_call1(Core[474], a_sexp_grammar);
   }
   var hash_fold_t$2 = Core[471];
   function quickcheck_generator$0(generator_115){return caml_call1(Core[129], generator_115);
   }
   function quickcheck_observer$0(observer_114){return caml_call1(Core[134], observer_114);
   }
   function quickcheck_shrinker$0(shrinker_113){return caml_call1(Core[139], shrinker_113);
   }
   var
    Typename_of_t$0 = caml_call1(Typerep_lib_Make_typename[2], [0, name$0]),
    typename_of_t$0 = Typename_of_t$0[2];
   function typerep_of_t$0(of_a){
    var name_of_t = caml_call1(Typename_of_t$0[1], of_a);
    return [9,
            [0,
             name_of_t,
             [0, [246, function(_ax_){return caml_call1(Core[475], of_a);}]]]];
   }
   var none = 0;
   function some(value){return value;}
   function unchecked_value(t){return t;}
   function is_none(t){return t === 0 ? 1 : 0;}
   function is_some(t){return 1 - (t === 0 ? 1 : 0);}
   function of_option(param){
    if(! param) return none;
    var value = param[1];
    return value;
   }
   function value_exn(l){
    if(l) return l;
    var
     _aw_ = caml_call1(Sexplib0_Sexp_conv[7], cst_Nonempty_list_Option_value);
    return caml_call1(Core[261], _aw_);
   }
   function value(t, default$0){
    return runtime.caml_csel_value(t === 0 ? 1 : 0, default$0, t);
   }
   var
    Optional_syntax = [0, is_none, unchecked_value],
    Optional_syntax$0 = [0, Optional_syntax];
   caml_call1(Ppx_inline_test_lib[7], cst_nonempty_list);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Nonempty_list);
   var
    Nonempty_list =
      [0,
       compare$2,
       equal$2,
       t_of_sexp$0,
       sexp_of_t$0,
       t_sexp_grammar,
       hash_fold_t$1,
       quickcheck_generator,
       quickcheck_observer,
       quickcheck_shrinker,
       typerep_of_t,
       typename_of_t,
       bin_shape_t$5,
       bin_size_t$5,
       bin_write_t$5,
       bin_read_t$12,
       bin_read_t$11,
       bin_writer_t$2,
       bin_reader_t$2,
       bin_t$2,
       globalize,
       comparator,
       invariant,
       symbol_bind,
       symbol_map,
       Monad_infix,
       bind$0,
       return$1,
       map$0,
       join,
       ignore_m,
       all,
       all_unit,
       Let_syntax,
       mem,
       length$0,
       is_empty,
       iter$0,
       fold$0,
       fold_result,
       fold_until,
       exists,
       for_all,
       count,
       sum,
       find,
       find_map,
       to_list,
       to_array,
       min_elt,
       max_elt,
       foldi$0,
       existsi,
       for_alli,
       counti,
       findi,
       find_mapi,
       create,
       init,
       of_list,
       of_list_error,
       of_list_exn,
       singleton,
       cons,
       hd,
       tl,
       nth,
       nth_exn,
       reduce,
       reverse,
       append,
       unzip,
       zip,
       zip_exn,
       mapi,
       map2,
       map2_exn,
       filter,
       filteri,
       filter_map,
       filter_mapi,
       concat,
       bind$0,
       last,
       drop_last,
       to_sequence,
       sort,
       stable_sort,
       dedup_and_sort,
       permute,
       iteri$0,
       cartesian_product,
       fold_nonempty,
       fold_right,
       folding_map,
       fold_map,
       min_elt$0,
       max_elt$0,
       map_add_multi,
       map_of_alist_multi,
       map_of_sequence_multi,
       map_of_list_with_key_multi,
       combine_errors,
       combine_errors_unit,
       combine_or_errors,
       combine_or_errors_unit,
       validate_indexed,
       validate,
       flag,
       comma_separated_argtype,
       [0,
        compare$3,
        equal$3,
        t_of_sexp$1,
        sexp_of_t$3,
        t_sexp_grammar$0,
        hash_fold_t$2,
        quickcheck_generator$0,
        quickcheck_observer$0,
        quickcheck_shrinker$0,
        typerep_of_t$0,
        typename_of_t$0,
        none,
        some,
        is_none,
        is_some,
        value,
        value_exn,
        unchecked_value,
        of_list,
        of_option,
        Optional_syntax$0],
       [0,
        cons$0,
        to_rev_list,
        rev,
        rev_append$0,
        rev_map,
        rev_mapi,
        With_sexp_of,
        With_rev_sexp_of],
       rev$0,
       rev_append,
       [0,
        bin_shape_t$0,
        bin_size_t$0,
        bin_write_t$0,
        bin_read_t$1,
        bin_read_t$2,
        bin_writer_t,
        bin_reader_t,
        bin_t,
        compare,
        equal,
        hash_fold_t,
        t_of_sexp$0,
        sexp_of_t$0,
        t_sexp_grammar],
       [0,
        [0,
         bin_shape_t$0,
         bin_size_t$0,
         bin_write_t$0,
         bin_read_t$1,
         bin_read_t$2,
         bin_writer_t,
         bin_reader_t,
         bin_t,
         compare,
         equal,
         t_of_sexp$0,
         sexp_of_t$0,
         t_sexp_grammar,
         hash_fold_t,
         stable_witness$0],
        [0,
         bin_shape_t$2,
         bin_size_t$2,
         bin_write_t$2,
         bin_read_t$5,
         bin_read_t$6,
         bin_writer_t$0,
         bin_reader_t$0,
         bin_t$0,
         compare$0,
         equal$0,
         t_of_sexp$0,
         sexp_of_t$0,
         hash_fold_t$0,
         stable_witness$2],
        [0,
         bin_shape_t$4,
         bin_size_t$4,
         bin_write_t$4,
         bin_read_t$9,
         bin_read_t$10,
         bin_writer_t$1,
         bin_reader_t$1,
         bin_t$1,
         compare$1,
         equal$1,
         t_of_sexp$0,
         sexp_of_t$0,
         stable_witness$4]]];
   runtime.caml_register_global(114, Nonempty_list, cst_Nonempty_list$0);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
