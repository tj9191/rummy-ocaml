// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Virtual_dom__
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Virtual_dom = [0],
    Virtual_dom$0 = [0, Virtual_dom];
   runtime.caml_register_global(0, Virtual_dom$0, "Virtual_dom__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Virtual_dom__Dom_float
//# unitInfo: Requires: Core, Core__Float, Expect_test_config, Inline_test_config, Js_of_ocaml__Js, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_expect_runtime__Test_block, Ppx_expect_runtime__Test_node, Ppx_expect_runtime__Types, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst = "",
    cst_Virtual_dom_Dom_float$0 = "Virtual_dom__Dom_float",
    cst_src_dom_float_ml$0 = "src/dom_float.ml",
    cst_virtual_dom$0 = "virtual_dom",
    caml_string_of_jsstring = runtime.caml_string_of_jsstring;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call14
   (f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13){
    return (f.l >= 0 ? f.l : f.l = f.length) == 14
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13)
            : runtime.caml_call_gen
              (f,
               [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Core = global_data.Core,
    Ppx_expect_runtime_Types = global_data.Ppx_expect_runtime__Types,
    Core_Float = global_data.Core__Float,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Expect_test_config = global_data.Expect_test_config,
    Ppx_expect_runtime_Test_block = global_data.Ppx_expect_runtime__Test_block,
    Ppx_expect_runtime_Test_node = global_data.Ppx_expect_runtime__Test_node,
    Inline_test_config = global_data.Inline_test_config;
   caml_call1(Ppx_module_timer_runtime[4], cst_Virtual_dom_Dom_float$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_virtual_dom$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_dom_float_ml$0);
   caml_call2(Ppx_inline_test_lib[6], cst_virtual_dom$0, "dom_float.ml");
   var
    _b_ = [0, [2, 0, 0], "%s"],
    _c_ = [0, [0, [0, " 1 ", [0, cst]], [0, 738, 749, 756]]],
    _d_ = [0, 738, 740, 757],
    _g_ = [0, [0, [0, " NaN ", [0, cst]], [0, 778, 789, 798]]],
    _h_ = [0, 778, 780, 799],
    _k_ = [0, [0, [0, " Infinity ", [0, cst]], [0, 825, 836, 850]]],
    _l_ = [0, 825, 827, 851],
    _o_ = [0, [0, [0, " -Infinity ", [0, cst]], [0, 881, 892, 907]]],
    _p_ = [0, 881, 883, 908],
    _s_ = [0, [0, [0, " 1e-8 ", [0, cst]], [0, 930, 941, 951]]],
    _t_ = [0, 930, 932, 952],
    _w_ = [0, [0, [0, " -1 ", [0, cst]], [0, 969, 980, 988]]],
    _x_ = [0, 969, 971, 989],
    _A_ = [0, [0, [0, " 1.0000001 ", [0, cst]], [0, 1010, 1021, 1036]]],
    _B_ = [0, 1010, 1012, 1037],
    _G_ = [0, 642, 642, 1037],
    _H_ = [0, 1010, 1037, 1037],
    _I_ = [0, 642, 642, 1037],
    cst_src_dom_float_ml = cst_src_dom_float_ml$0,
    cst_virtual_dom = cst_virtual_dom$0,
    cst_Virtual_dom_Dom_float = cst_Virtual_dom_Dom_float$0;
   function to_js_string(value){return value.toString();}
   function to_js_string_fixed(digits, value){return value.toFixed(digits);}
   function to_js_string_precision(digits, value){return value.toPrecision(digits);
   }
   function to_js_string_exponential(value){return value.toExponential();}
   function to_string(value){
    return caml_string_of_jsstring(value.toString());
   }
   function to_string_fixed(digits, value){
    return caml_string_of_jsstring(value.toFixed(digits));
   }
   function to_string_precision(digits, value){
    return caml_string_of_jsstring(value.toPrecision(digits));
   }
   function to_string_exponential(value){
    return caml_string_of_jsstring(value.toExponential());
   }
   if(typeof Ppx_inline_test_lib[3] !== "number"){
    var
     Ppx_expect_test_block =
       caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
     _a_ =
       function(param){
        function print(f){
         var _Q_ = to_string(f);
         return caml_call2(Core[258], _b_, _Q_);
        }
        print(1.);
        var _J_ = caml_call1(Ppx_expect_runtime_Types[4][1], 0);
        caml_call1(Ppx_expect_test_block[2], _J_);
        print(Core_Float[13]);
        var _K_ = caml_call1(Ppx_expect_runtime_Types[4][1], 1);
        caml_call1(Ppx_expect_test_block[2], _K_);
        print(Core_Float[14]);
        var _L_ = caml_call1(Ppx_expect_runtime_Types[4][1], 2);
        caml_call1(Ppx_expect_test_block[2], _L_);
        print(Core_Float[15]);
        var _M_ = caml_call1(Ppx_expect_runtime_Types[4][1], 3);
        caml_call1(Ppx_expect_test_block[2], _M_);
        print(1e-8);
        var _N_ = caml_call1(Ppx_expect_runtime_Types[4][1], 4);
        caml_call1(Ppx_expect_test_block[2], _N_);
        print(-1.);
        var _O_ = caml_call1(Ppx_expect_runtime_Types[4][1], 5);
        caml_call1(Ppx_expect_test_block[2], _O_);
        print(1.0000001);
        var _P_ = caml_call1(Ppx_expect_runtime_Types[4][1], 6);
        return caml_call1(Ppx_expect_test_block[2], _P_);
       },
     _e_ =
       caml_call3
        (Ppx_expect_runtime_Test_node[1][1],
         [0, Ppx_expect_runtime_Types[1][1]],
         _d_,
         _c_),
     _f_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 0), _e_], 0],
     _i_ =
       caml_call3
        (Ppx_expect_runtime_Test_node[1][1],
         [0, Ppx_expect_runtime_Types[1][1]],
         _h_,
         _g_),
     _j_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 1), _i_], _f_],
     _m_ =
       caml_call3
        (Ppx_expect_runtime_Test_node[1][1],
         [0, Ppx_expect_runtime_Types[1][1]],
         _l_,
         _k_),
     _n_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 2), _m_], _j_],
     _q_ =
       caml_call3
        (Ppx_expect_runtime_Test_node[1][1],
         [0, Ppx_expect_runtime_Types[1][1]],
         _p_,
         _o_),
     _r_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 3), _q_], _n_],
     _u_ =
       caml_call3
        (Ppx_expect_runtime_Test_node[1][1],
         [0, Ppx_expect_runtime_Types[1][1]],
         _t_,
         _s_),
     _v_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 4), _u_], _r_],
     _y_ =
       caml_call3
        (Ppx_expect_runtime_Test_node[1][1],
         [0, Ppx_expect_runtime_Types[1][1]],
         _x_,
         _w_),
     _z_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 5), _y_], _v_],
     _C_ =
       caml_call3
        (Ppx_expect_runtime_Test_node[1][1],
         [0, Ppx_expect_runtime_Types[1][1]],
         _B_,
         _A_),
     _D_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 6), _C_], _z_],
     _E_ = caml_call1(Ppx_expect_runtime_Types[4][1], 8),
     _F_ = caml_call1(Ppx_expect_runtime_Types[4][1], 7);
    caml_call14
     (Ppx_expect_test_block[3],
      cst_src_dom_float_ml,
      12,
      _I_,
      _H_,
      _G_,
      [0, Ppx_expect_runtime_Types[1][1]],
      0,
      _F_,
      _E_,
      0,
      0,
      Inline_test_config,
      _D_,
      _a_);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_virtual_dom);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Virtual_dom_Dom_float);
   var
    Virtual_dom_Dom_float =
      [0,
       to_js_string,
       to_js_string_fixed,
       to_js_string_precision,
       to_js_string_exponential,
       to_string,
       to_string_fixed,
       to_string_precision,
       to_string_exponential];
   runtime.caml_register_global
    (45, Virtual_dom_Dom_float, cst_Virtual_dom_Dom_float$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Virtual_dom__Effect
//# unitInfo: Requires: Base__Hashtbl, Base__List, Base__Option, Js_of_ocaml__Dom, Js_of_ocaml__Dom_html, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Stdlib__Obj, Ui_effect
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Virtual_dom_Effect$0 = "Virtual_dom__Effect",
    cst_virtual_dom$0 = "virtual_dom",
    caml_fresh_oo_id = runtime.caml_fresh_oo_id;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Js_of_ocaml_Dom = global_data.Js_of_ocaml__Dom,
    Base_Option = global_data.Base__Option,
    Js_of_ocaml_Dom_html = global_data.Js_of_ocaml__Dom_html,
    Base_List = global_data.Base__List,
    Ui_effect = global_data.Ui_effect,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Stdlib_Obj = global_data.Stdlib__Obj,
    Base_Hashtbl = global_data.Base__Hashtbl;
   caml_call1(Ppx_module_timer_runtime[4], cst_Virtual_dom_Effect$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_virtual_dom$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/effect.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_virtual_dom$0, "effect.ml");
   var
    Ignore = Ui_effect[1],
    Many = Ui_effect[2],
    symbol_bind = Ui_effect[3],
    symbol_map = Ui_effect[4],
    bind = Ui_effect[6],
    return$0 = Ui_effect[7],
    map = Ui_effect[8],
    join = Ui_effect[9],
    ignore_m = Ui_effect[10],
    all = Ui_effect[11],
    all_unit = Ui_effect[12],
    never = Ui_effect[14],
    lazy = Ui_effect[15],
    print_s = Ui_effect[16],
    of_sync_fun = Ui_effect[17],
    of_thunk = Ui_effect[18],
    Expert = Ui_effect[21],
    visibility_handlers = [0, 0],
    cst_Virtual_dom_Effect_Viewpor = "Virtual_dom__Effect.Viewport_changed",
    cst_Virtual_dom_Effect_Stop_pr = "Virtual_dom__Effect.Stop_propagation",
    cst_Virtual_dom_Effect_Stop_im =
      "Virtual_dom__Effect.Stop_immediate_propagation",
    cst_Virtual_dom_Effect_Prevent = "Virtual_dom__Effect.Prevent_default",
    cst_virtual_dom = cst_virtual_dom$0,
    cst_Virtual_dom_Effect = cst_Virtual_dom_Effect$0;
   function Define_visibility(VH){
    visibility_handlers[1] = [0, VH[1], visibility_handlers[1]];
    return [0];
   }
   var
    Viewport_changed =
      [248, cst_Virtual_dom_Effect_Viewpor, caml_fresh_oo_id(0)],
    Stop_propagation =
      [248, cst_Virtual_dom_Effect_Stop_pr, caml_fresh_oo_id(0)],
    Stop_immediate_propagation =
      [248, cst_Virtual_dom_Effect_Stop_im, caml_fresh_oo_id(0)],
    Prevent_default =
      [248, cst_Virtual_dom_Effect_Prevent, caml_fresh_oo_id(0)];
   function sequence_as_sibling(left, unless_stopped){
    function contains_stop(param){
     if(param[1] !== Many)
      return param === Stop_immediate_propagation ? 1 : 0;
     var es = param[2];
     return caml_call2(Base_List[23], es, contains_stop);
    }
    if(contains_stop(left)) return left;
    var _k_ = [0, left, [0, caml_call1(unless_stopped, 0), 0]];
    return [0, Ui_effect[2], _k_];
   }
   var current_dom_event = [0, 0];
   function _a_(param){
    function _j_(f){return caml_call1(f, 0);}
    return caml_call2(Base_List[19], visibility_handlers[1], _j_);
   }
   var
    _b_ = caml_call1(Stdlib_Obj[23][1], Viewport_changed),
    _c_ = caml_call1(Stdlib_Obj[23][3], _b_);
   caml_call3(Base_Hashtbl[39], Expert[3], _c_, _a_);
   function _d_(param){
    return caml_call2
            (Base_Option[37], current_dom_event[1], Js_of_ocaml_Dom_html[116]);
   }
   var
    _e_ = caml_call1(Stdlib_Obj[23][1], Stop_propagation),
    _f_ = caml_call1(Stdlib_Obj[23][3], _e_);
   caml_call3(Base_Hashtbl[39], Expert[3], _f_, _d_);
   function _g_(param){
    return caml_call2
            (Base_Option[37], current_dom_event[1], Js_of_ocaml_Dom[18]);
   }
   var
    _h_ = caml_call1(Stdlib_Obj[23][1], Prevent_default),
    _i_ = caml_call1(Stdlib_Obj[23][3], _h_);
   caml_call3(Base_Hashtbl[39], Expert[3], _i_, _g_);
   var handle_non_dom_event_exn = Expert[2];
   function handle(dom_event, event){
    var old = current_dom_event[1];
    current_dom_event[1] = [0, dom_event];
    caml_call1(Expert[2], event);
    current_dom_event[1] = old;
    return 0;
   }
   caml_call1(Ppx_inline_test_lib[7], cst_virtual_dom);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Virtual_dom_Effect);
   var
    Virtual_dom_Effect =
      [0,
       Ignore,
       Many,
       symbol_bind,
       symbol_map,
       bind,
       return$0,
       map,
       join,
       ignore_m,
       all,
       all_unit,
       never,
       lazy,
       print_s,
       of_sync_fun,
       of_thunk,
       Viewport_changed,
       Stop_propagation,
       Stop_immediate_propagation,
       Prevent_default,
       sequence_as_sibling,
       Define_visibility,
       [0, handle, handle_non_dom_event_exn]];
   runtime.caml_register_global
    (22, Virtual_dom_Effect, cst_Virtual_dom_Effect$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Virtual_dom__Hooks_intf
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Virtual_dom_Hooks_intf = "Virtual_dom__Hooks_intf",
    cst_virtual_dom = "virtual_dom";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Virtual_dom_Hooks_intf);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_virtual_dom);
   caml_call1(Ppx_expect_runtime[1][1], "src/hooks_intf.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_virtual_dom, "hooks_intf.ml");
   caml_call1(Ppx_inline_test_lib[7], cst_virtual_dom);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Virtual_dom_Hooks_intf);
   var Virtual_dom_Hooks_intf = [0];
   runtime.caml_register_global
    (11, Virtual_dom_Hooks_intf, cst_Virtual_dom_Hooks_intf);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Virtual_dom__Hooks
//# unitInfo: Requires: CamlinternalLazy, Core, Core__Type_equal, Js_of_ocaml__Dom_html, Js_of_ocaml__Js, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$1 = "",
    cst_Virtual_dom_Hooks$0 = "Virtual_dom__Hooks",
    cst_virtual_dom$0 = "virtual_dom",
    caml_js_wrap_callback = runtime.caml_js_wrap_callback;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = cst$1,
    cst$0 = cst$1,
    Core = global_data.Core,
    Core_Type_equal = global_data.Core__Type_equal,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    Js_of_ocaml_Dom_html = global_data.Js_of_ocaml__Dom_html,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Virtual_dom_Hooks$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_virtual_dom$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/hooks.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_virtual_dom$0, "hooks.ml");
   var
    cst_hooks_do_not_have_the_same =
      "hooks do not have the same type, so they cannot be combined; taking the second of the two",
    cst_virtual_dom = cst_virtual_dom$0,
    cst_Virtual_dom_Hooks = cst_Virtual_dom_Hooks$0;
   function sexp_of_t(param){
    var value = param[2], type_id = param[1];
    return caml_call2(Core_Type_equal[8][6], type_id, value);
   }
   var
    Extra = [0, sexp_of_t],
    generic_hook =
      [246, function(param){return Js_of_ocaml_Js[52][1].GenericHook;}];
   function pack(param){
    var
     id = param[7],
     destroy = param[6],
     update = param[5],
     init = param[4],
     input_id = param[2],
     input = param[1],
     init$0 = caml_js_wrap_callback(caml_call1(init, input)),
     update$0 = caml_js_wrap_callback(caml_call1(update, input)),
     destroy$0 = caml_js_wrap_callback(destroy),
     _j_ = runtime.caml_obj_tag(generic_hook);
    a:
    if(250 === _j_)
     var generic_hook$0 = generic_hook[1];
    else{
     if(246 !== _j_ && 244 !== _j_){
      var generic_hook$0 = generic_hook;
      break a;
     }
     var generic_hook$0 = caml_call1(CamlinternalLazy[2], generic_hook);
    }
    var extra = [0, input_id, input];
    return generic_hook$0(init$0, update$0, destroy$0, id, extra);
   }
   function combine(left, right){
    if(caml_call2(Core_Type_equal[8][9], left[2], right[2])){
     var
      _c_ = right[7],
      _d_ = right[6],
      _e_ = right[5],
      _f_ = right[4],
      _g_ = right[3],
      _h_ = right[2];
     return [0,
             caml_call2(right[3], left[1], right[1]),
             _h_,
             _g_,
             _f_,
             _e_,
             _d_,
             _c_];
    }
    var
     _i_ = caml_call1(Sexplib0_Sexp_conv[7], cst_hooks_do_not_have_the_same);
    caml_call2(Core[257], 0, _i_);
    return right;
   }
   caml_call1(Ppx_inline_test_lib[7], cst_virtual_dom);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Virtual_dom_Hooks);
   var
    _a_ = [0, Extra],
    Virtual_dom_Hooks =
      [0,
       combine,
       pack,
       function(S){
        function _b_(param){
         var
          arg1_002 = param[3],
          arg0_001 = param[1],
          res0_003 = caml_call1(S[2][1], arg0_001),
          res1_004 = caml_call1(Core[149], arg1_002);
         return [1, [0, res0_003, [0, res1_004, 0]]];
        }
        var
         input_and_state_id = caml_call2(Core_Type_equal[8][3], cst, _b_),
         input_id = caml_call2(Core_Type_equal[8][3], cst$0, S[2][1]);
        function init(input, element){
         var state = caml_call2(S[3], input, element), match = S[4];
         if(typeof match === "number")
          var on_destroy = function(param){return 0;};
         else
          var
           on_mount = match[2],
           f =
             function(param){
              return caml_call3(on_mount, input, state, element);
             },
           animation_id =
             Js_of_ocaml_Dom_html[8].requestAnimationFrame
              (caml_js_wrap_callback(f)),
           on_destroy =
             function(param){
              return Js_of_ocaml_Dom_html[8].cancelAnimationFrame
                      (animation_id);
             };
         return [0, input, on_destroy, state];
        }
        function update(input, param, element){
         var state = param[3], on_destroy = param[2], old_input = param[1];
         caml_call4(S[5], old_input, input, state, element);
         return [0, input, on_destroy, state];
        }
        function destroy(param, element){
         var state = param[3], on_destroy = param[2], old_input = param[1];
         caml_call1(on_destroy, 0);
         return caml_call3(S[6], old_input, state, element);
        }
        function create(input){
         var combine_inputs = S[2][2];
         return [0,
                 input,
                 input_id,
                 combine_inputs,
                 init,
                 update,
                 destroy,
                 input_and_state_id];
        }
        var For_testing = [0, input_id];
        return [0, create, For_testing];
       },
       _a_];
   runtime.caml_register_global
    (23, Virtual_dom_Hooks, cst_Virtual_dom_Hooks$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Virtual_dom__Js_map
//# unitInfo: Requires: Js_of_ocaml__Js, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Virtual_dom_Js_map$0 = "Virtual_dom__Js_map",
    cst_virtual_dom$0 = "virtual_dom";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Virtual_dom_Js_map$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_virtual_dom$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/js_map.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_virtual_dom$0, "js_map.ml");
   var
    cst_virtual_dom = cst_virtual_dom$0,
    cst_Virtual_dom_Js_map = cst_Virtual_dom_Js_map$0;
   function create(param){
    var t0 = Js_of_ocaml_Js[52][1], map = t0.Map;
    return new map;
   }
   function set(t, a, b){return t.set(a, b);}
   function get(t, a){
    var _a_ = t.get(a);
    return caml_call1(Js_of_ocaml_Js[6][10], _a_);
   }
   function delete$0(t, a){return t.delete(a);}
   caml_call1(Ppx_inline_test_lib[7], cst_virtual_dom);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Virtual_dom_Js_map);
   var Virtual_dom_Js_map = [0, create, set, get, delete$0];
   runtime.caml_register_global
    (16, Virtual_dom_Js_map, cst_Virtual_dom_Js_map$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Virtual_dom__Raw
//# unitInfo: Requires: Base, Base__Type_equal, Js_of_ocaml__Js, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Virtual_dom__Js_map
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Virtual_dom_Raw$0 = "Virtual_dom__Raw",
    cst_attributes$4 = "attributes",
    cst_virtual_dom$0 = "virtual_dom",
    caml_js_wrap_callback = runtime.caml_js_wrap_callback,
    caml_jsstring_of_string = runtime.caml_jsstring_of_string;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    Base_Type_equal = global_data.Base__Type_equal,
    Virtual_dom_Js_map = global_data.Virtual_dom__Js_map,
    Base = global_data.Base,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Virtual_dom_Raw$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_virtual_dom$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/raw.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_virtual_dom$0, "raw.ml");
   var
    _b_ = [0, "id_sexp"],
    cst_BUG_element_state_not_foun = "BUG: element state not found",
    _a_ = [0, "<opaque>"],
    cst_attributes$1 = cst_attributes$4,
    cst_attributes$2 = cst_attributes$4,
    cst_attributes$3 = cst_attributes$4,
    cst_attributes = cst_attributes$4,
    cst_attributes$0 = cst_attributes$4,
    cst_virtual_dom = cst_virtual_dom$0,
    cst_Virtual_dom_Raw = cst_Virtual_dom_Raw$0;
   function set_prop_ascii(t, name, value){
    return t[caml_jsstring_of_string(name)] = value;
   }
   function get_prop_ascii(t, name){return t[caml_jsstring_of_string(name)];}
   function has_property(t, name){
    var _i_ = t[caml_jsstring_of_string(name)];
    return caml_call1(Js_of_ocaml_Js[6][5], _i_);
   }
   function create(param){return {};}
   function set_property(t, name, value){
    return set_prop_ascii(t, name, value);
   }
   function has_attribute(t, name){
    var _h_ = has_property(t, cst_attributes);
    return _h_ ? has_property(get_prop_ascii(t, cst_attributes$0), name) : _h_;
   }
   function set_attribute(t, name, value){
    var a = get_prop_ascii(t, cst_attributes$1);
    if(1 - caml_call1(Js_of_ocaml_Js[6][5], a))
     set_prop_ascii(t, cst_attributes$2, {});
    return set_prop_ascii(get_prop_ascii(t, cst_attributes$3), name, value);
   }
   var t0 = Js_of_ocaml_Js[52][1], virtual_dom = t0.VirtualDom;
   function to_dom(vnode){return virtual_dom.createElement(vnode);}
   function node(tag, attrs, children, key){
    var tag$0 = caml_jsstring_of_string(tag);
    if(key)
     var
      key$0 = key[1],
      key$1 = caml_call1(Js_of_ocaml_Js[6][2], caml_jsstring_of_string(key$0));
    else
     var key$1 = Js_of_ocaml_Js[6][1];
    var vnode = virtual_dom.VNode;
    return new vnode(tag$0, attrs, children, key$1);
   }
   function svg(tag, attrs, children, key){
    var tag$0 = caml_jsstring_of_string(tag);
    if(key)
     var
      key$0 = key[1],
      key$1 = caml_call1(Js_of_ocaml_Js[6][2], caml_jsstring_of_string(key$0));
    else
     var key$1 = Js_of_ocaml_Js[6][1];
    var vsvg = virtual_dom.svg;
    return new vsvg(tag$0, attrs, children, key$1);
   }
   function text(s){
    var vtext = virtual_dom.VText;
    return new vtext(caml_jsstring_of_string(s));
   }
   function patch(element, vnode){return virtual_dom.patch(element, vnode);}
   function create$0(previous, current){
    return virtual_dom.diff(previous, current);
   }
   function f(patch){
    for(var key in patch) if(key !== "a") return false;
    return true;
   }
   function is_empty(t){return f(t) | 0;}
   var t = caml_call1(Virtual_dom_Js_map[1], 0);
   function set(id, element, state){
    return caml_call3(Virtual_dom_Js_map[2], t, element, [0, id, state]);
   }
   function get(id, element){
    var match = caml_call2(Virtual_dom_Js_map[3], t, element);
    if(match){
     var match$0 = match[1], state = match$0[2], f_id = match$0[1];
     caml_call2(Base_Type_equal[12][11], id, f_id);
     return state;
    }
    function _e_(param){return _a_;}
    var
     id_sexp = caml_call2(Base_Type_equal[12][1], _e_, id),
     _f_ = [0, [1, [0, _b_, [0, caml_call1(Base[85][5], id_sexp), 0]]], 0],
     _g_ =
       [1,
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_BUG_element_state_not_foun),
         _f_]];
    return caml_call1(Base[246], _g_);
   }
   function delete$0(element){
    return caml_call2(Virtual_dom_Js_map[4], t, element);
   }
   function create$1(vdom_for_testing, opt, _c_, t28, init, param){
    if(opt)
     var sth = opt[1], destroy = sth;
    else
     var destroy = function(param, _d_){return;};
    if(_c_)
     var sth$0 = _c_[1], update = sth$0;
    else
     var update = function(s, elt){return [0, s, elt];};
    var obj = {};
    obj.type = "Widget";
    obj.name = 0;
    obj.id = t28;
    obj.vdomForTesting = vdom_for_testing;
    var
     t32 =
       caml_js_wrap_callback
        (function(param){
          var match = caml_call1(init, 0), dom_node = match[2], s0 = match[1];
          set(t28, dom_node, s0);
          return dom_node;
         });
    obj.init = t32;
    var
     t35 =
       caml_js_wrap_callback
        (function(prev, dom_node){
          caml_call2(Base_Type_equal[12][11], prev.id, t28);
          var
           prev_state = get(t28, dom_node),
           match = caml_call2(update, prev_state, dom_node),
           dom_node$0 = match[2],
           state = match[1];
          delete$0(dom_node);
          set(t28, dom_node$0, state);
          return dom_node$0;
         });
    obj.update = t35;
    var
     t37 =
       caml_js_wrap_callback
        (function(dom_node){
          var prev_state = get(t28, dom_node);
          caml_call2(destroy, prev_state, dom_node);
          return delete$0(dom_node);
         });
    obj.destroy = t37;
    return obj;
   }
   caml_call1(Ppx_inline_test_lib[7], cst_virtual_dom);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Virtual_dom_Raw);
   var
    Virtual_dom_Raw =
      [0,
       [0, create, has_property, has_attribute, set_property, set_attribute],
       [0, node, text, svg, to_dom],
       [0, create$0, patch, is_empty],
       [0, create$1]];
   runtime.caml_register_global(41, Virtual_dom_Raw, cst_Virtual_dom_Raw$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Virtual_dom__Attr
//# unitInfo: Requires: Core, Core__Bool, Core__Date, Core__Int, Core__List, Core__Map, Core__Option, Core__Set, Core__String, Core__Type_equal, Core__Unit, Css_gen, Js_of_ocaml__Dom, Js_of_ocaml__Dom_html, Js_of_ocaml__Js, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Ui_effect, Virtual_dom__Dom_float, Virtual_dom__Effect, Virtual_dom__Hooks, Virtual_dom__Raw
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$7 = "",
    cst_Virtual_dom_Attr$0 = "Virtual_dom__Attr",
    cst$8 = "_",
    cst_class$1 = "class",
    cst_first = "first",
    cst_focus$0 = "focus",
    cst_input$1 = "input",
    cst_max$2 = "max",
    cst_min$2 = "min",
    cst_name$0 = "name",
    cst_on$1 = "on",
    cst_second = "second",
    cst_style$1 = "style",
    cst_target$0 = "target",
    cst_value$2 = "value",
    cst_virtual_dom$0 = "virtual_dom",
    caml_jsstring_of_string = runtime.caml_jsstring_of_string;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    cst$6 = "--",
    cst$4 = cst$7,
    empty = [6, 0],
    cst = cst$7,
    cst$0 = cst$7,
    cst$1 = cst$7,
    cst$2 = cst$7,
    cst$3 = cst$7,
    cst$5 = cst$7,
    Core_List = global_data.Core__List,
    Core = global_data.Core,
    Core_String = global_data.Core__String,
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    Css_gen = global_data.Css_gen,
    Virtual_dom_Hooks = global_data.Virtual_dom__Hooks,
    Virtual_dom_Effect = global_data.Virtual_dom__Effect,
    Ui_effect = global_data.Ui_effect,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Js_of_ocaml_Dom_html = global_data.Js_of_ocaml__Dom_html,
    Core_Option = global_data.Core__Option,
    Core_Type_equal = global_data.Core__Type_equal,
    Core_Bool = global_data.Core__Bool,
    Core_Int = global_data.Core__Int,
    Core_Date = global_data.Core__Date,
    Core_Set = global_data.Core__Set,
    Virtual_dom_Raw = global_data.Virtual_dom__Raw,
    Core_Map = global_data.Core__Map,
    Js_of_ocaml_Dom = global_data.Js_of_ocaml__Dom,
    Virtual_dom_Dom_float = global_data.Virtual_dom__Dom_float,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Core_Unit = global_data.Core__Unit;
   caml_call1(Ppx_module_timer_runtime[4], cst_Virtual_dom_Attr$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_virtual_dom$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/attr.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_virtual_dom$0, "attr.ml");
   Css_gen[99][1][1] = Virtual_dom_Dom_float[6];
   var
    cst_on$0 = cst_on$1,
    cst_style$0 = cst_style$1,
    cst_class$0 = cst_class$1,
    cst_custom_css_vars = "custom-css-vars",
    cst_single_focus_hook = "single-focus-hook",
    cst_always_focus_hook = "always-focus-hook",
    cst_input$0 = cst_input$1,
    _r_ = [1, 0],
    cst_draggable = "draggable",
    cst_cols = "cols",
    cst_rows = "rows",
    cst_rowspan = "rowspan",
    cst_colspan = "colspan",
    cst_T23_59 = "T23:59",
    cst_max$1 = cst_max$2,
    cst_T00_00 = "T00:00",
    cst_min$1 = cst_min$2,
    cst_max$0 = cst_max$2,
    cst_min$0 = cst_min$2,
    cst_max = cst_max$2,
    cst_min = cst_min$2,
    cst_start = "start",
    cst_src = "src",
    cst_alt = "alt",
    cst_title = "title",
    cst_tabindex = "tabindex",
    cst_value$1 = cst_value$2,
    cst_value$0 = cst_value$2,
    cst_type = "type",
    cst_for = "for",
    cst_allow = "allow",
    cst_autofocus = "autofocus",
    cst_role = "role",
    cst_placeholder = "placeholder",
    cst_target = cst_target$0,
    cst_label = "label",
    cst_href = "href",
    cst_name = cst_name$0,
    cst_id = "id",
    _p_ = [0, cst_name$0],
    cst_WARNING_not_combining_attr = "WARNING: not combining attributes",
    _o_ = [0, cst_name$0],
    cst_WARNING_not_combining_prop = "WARNING: not combining properties",
    cst_value = cst_value$2,
    cst_on = cst_on$1,
    _n_ = [0, cst_name$0],
    cst_WARNING_not_combining_hook = "WARNING: not combining hooks",
    _m_ = [0, cst_name$0],
    cst_WARNING_not_combining_hand = "WARNING: not combining handlers",
    _k_ = [0, cst_second],
    _l_ = [0, cst_first],
    cst_WARNING_not_combining_clas = "WARNING: not combining classes",
    _i_ = [0, cst_second],
    _j_ = [0, cst_first],
    cst_WARNING_not_combining_styl = "WARNING: not combining styles",
    cst_style = cst_style$1,
    _q_ = [0, " "],
    cst_class = cst_class$1,
    _f_ = [0, "quota"],
    cst_WARNING_reached_warning_me =
      "WARNING: reached warning message quota; no more messages will be printed",
    _c_ = [0, cst$8],
    _a_ = [0, cst$8],
    _b_ = [0, "rtid"],
    _d_ = [0, "ltid"],
    cst_BUG_Type_ids_for_event_han =
      "BUG!  Type-ids for event handlers differ",
    _e_ = [0, 100],
    cst_checked = "checked",
    cst_selected = "selected",
    cst_hidden = "hidden",
    cst_readonly = "readonly",
    cst_disabled = "disabled",
    cst_open = "open",
    cst_event = "event",
    cst_focusEvent = "focusEvent",
    cst_mouseEvent = "mouseEvent",
    cst_keyboardEvent = "keyboardEvent",
    cst_submitEvent = "submitEvent",
    cst_mousewheelEvent = "mousewheelEvent",
    cst_wheelwheelEvent = "wheelwheelEvent",
    cst_clipboardEvent = "clipboardEvent",
    cst_dragEvent = "dragEvent",
    cst_pointerEvent = "pointerEvent",
    cst_animationEvent = "animationEvent",
    cst_focus = cst_focus$0,
    cst_blur = "blur",
    cst_cancel = "cancel",
    cst_click = "click",
    cst_close = "close",
    cst_contextmenu = "contextmenu",
    cst_dblclick = "dblclick",
    cst_drag = "drag",
    cst_dragstart = "dragstart",
    cst_dragend = "dragend",
    cst_dragenter = "dragenter",
    cst_dragleave = "dragleave",
    cst_dragover = "dragover",
    cst_drop = "drop",
    cst_mousemove = "mousemove",
    cst_mouseup = "mouseup",
    cst_mousedown = "mousedown",
    cst_mouseenter = "mouseenter",
    cst_mouseleave = "mouseleave",
    cst_mouseover = "mouseover",
    cst_mouseout = "mouseout",
    cst_keyup = "keyup",
    cst_keypress = "keypress",
    cst_keydown = "keydown",
    cst_scroll = "scroll",
    cst_load = "load",
    cst_error = "error",
    cst_submit = "submit",
    cst_pointerdown = "pointerdown",
    cst_pointerup = "pointerup",
    cst_mousewheel = "mousewheel",
    cst_wheel = "wheel",
    cst_copy = "copy",
    cst_cut = "cut",
    cst_paste = "paste",
    cst_reset = "reset",
    cst_animationend = "animationend",
    cst_change = "change",
    cst_input = cst_input$1,
    cst_virtual_dom = cst_virtual_dom$0,
    cst_Virtual_dom_Attr = cst_Virtual_dom_Attr$0;
   function combine(param, right){
    var
     rhandler = right[2],
     x_002 = right[1],
     lhandler = param[2],
     x_001 = param[1];
    if(caml_call2(Core_Type_equal[8][9], x_001, x_002))
     return [0,
             x_001,
             function(value){
              function _b6_(param){return caml_call1(rhandler, value);}
              var _b7_ = caml_call1(lhandler, value);
              return caml_call2(Virtual_dom_Effect[21], _b7_, _b6_);
             }];
    var _bY_ = 0, _bZ_ = 0;
    function _b0_(param){return _a_;}
    var
     _b1_ =
       [0,
        [1,
         [0, _b_, [0, caml_call2(Core_Type_equal[8][1], _b0_, x_002), _bZ_]]],
        _bY_],
     _b2_ = 0;
    function _b3_(param){return _c_;}
    var
     _b4_ =
       [0,
        [1,
         [0, _d_, [0, caml_call2(Core_Type_equal[8][1], _b3_, x_001), _b2_]]],
        _b1_],
     _b5_ =
       [1,
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_BUG_Type_ids_for_event_han),
         _b4_]];
    caml_call2(Core[257], 0, _b5_);
    return right;
   }
   function create(name, value){
    return [1, 0, name, caml_jsstring_of_string(value)];
   }
   function create_float(name, value){
    return [1, 0, name, caml_call1(Virtual_dom_Dom_float[1], value)];
   }
   function property(name, value){return [0, 0, name, value];}
   function string_property(name, value){
    return [0, 0, name, caml_jsstring_of_string(value)];
   }
   function bool_property(name, value){return [0, 0, name, ! ! value];}
   function suppress_merge_warnings(t){
    switch(t[0]){
      case 0:
       return [0, 1, t[2], t[3]];
      case 1:
       return [1, 1, t[2], t[3]];
      default: return t;
    }
   }
   function create_hook(name, hook){return [3, name, hook];}
   function many(attrs){return [6, attrs];}
   function many_without_merge(attrs){return [8, attrs];}
   function combine$0(left, right){return [6, [0, left, [0, right, 0]]];}
   function of_opt(param){
    if(! param) return empty;
    var attr = param[1];
    return attr;
   }
   var warning_count = [0, 0], current = [0, _e_];
   function warn_s(s){
    warning_count[1]++;
    var match = current[1];
    if(typeof match === "number"){
     if(match) return caml_call2(Core[257], 0, s);
     return;
    }
    var quota = match[1], warning_count$0 = warning_count[1];
    if(caml_call2(Core[89], warning_count$0, quota)){
     caml_call2(Core[257], 0, s);
     if(caml_call2(Core[90], warning_count$0, quota)){
      var
       _bW_ = [0, [1, [0, _f_, [0, caml_call1(Core[389], quota), 0]]], 0],
       _bX_ =
         [1,
          [0,
           caml_call1(Sexplib0_Sexp_conv[7], cst_WARNING_reached_warning_me),
           _bW_]];
      return caml_call2(Core[257], 0, _bX_);
     }
    }
    return;
   }
   function reset_warning_count(param){warning_count[1] = 0; return 0;}
   var For_testing = [0, reset_warning_count];
   function combining_map_add(map, key, value, combine){
    function _bV_(param){
     if(! param) return value;
     var existing_value = param[1];
     return caml_call3(combine, key, existing_value, value);
    }
    return caml_call3(Core_Map[43], map, key, _bV_);
   }
   var
    _g_ = caml_call1(Core_Map[4], [0, Core_String[158]]),
    _h_ = caml_call1(Core_Map[4], [0, Core_String[158]]),
    empty_merge = [0, Css_gen[22], 0, _h_, _g_];
   function style(css){return [4, css];}
   function class$0(classname){return [5, [0, classname, 0]];}
   function classes(classes){return [5, caml_call1(Core_Set[39], classes)];}
   function classes$0(classnames){return [5, classnames];}
   function id(s){return create(cst_id, s);}
   function name(s){return create(cst_name, s);}
   function href(r){return create(cst_href, r);}
   function label(r){return create(cst_label, r);}
   function target(s){return create(cst_target, s);}
   var
    checked = create(cst_checked, cst),
    selected = create(cst_selected, cst$0),
    hidden = create(cst_hidden, cst$1),
    readonly = create(cst_readonly, cst$2),
    disabled = create(cst_disabled, cst$3);
   function placeholder(x){return create(cst_placeholder, x);}
   function role(r){return create(cst_role, r);}
   function autofocus(param){
    return param ? create(cst_autofocus, cst$4) : empty;
   }
   function allow(x){return create(cst_allow, x);}
   function for$0(x){return create(cst_for, x);}
   function type(x){return create(cst_type, x);}
   function value(x){return create(cst_value$0, x);}
   function value_prop(x){return string_property(cst_value$1, x);}
   function tabindex(x){
    return create(cst_tabindex, caml_call1(Core_Int[79], x));
   }
   function title(x){return create(cst_title, x);}
   function alt(x){return create(cst_alt, x);}
   function src(x){return create(cst_src, x);}
   var open = create(cst_open, cst$5);
   function start(x){return create(cst_start, caml_call1(Core_Int[79], x));}
   function min(x){return create_float(cst_min, x);}
   function max(x){return create_float(cst_max, x);}
   function min_date(x){
    return create(cst_min$0, caml_call1(Core_Date[23], x));
   }
   function max_date(x){
    return create(cst_max$0, caml_call1(Core_Date[23], x));
   }
   function min_date_time(x){
    var _bU_ = caml_call1(Core_Date[23], x);
    return create(cst_min$1, caml_call2(Core[18], _bU_, cst_T00_00));
   }
   function max_date_time(x){
    var _bT_ = caml_call1(Core_Date[23], x);
    return create(cst_max$1, caml_call2(Core[18], _bT_, cst_T23_59));
   }
   function colspan(x){
    return create(cst_colspan, caml_call1(Core_Int[79], x));
   }
   function rowspan(x){
    return create(cst_rowspan, caml_call1(Core_Int[79], x));
   }
   function rows(x){return create(cst_rows, caml_call1(Core_Int[79], x));}
   function cols(x){return create(cst_cols, caml_call1(Core_Int[79], x));}
   function draggable(b){
    return create(cst_draggable, caml_call1(Core_Bool[24], b));
   }
   function create$0(name){
    function _bS_(param){return _r_;}
    return caml_call2(Core_Type_equal[8][3], name, _bS_);
   }
   var
    event = create$0(cst_event),
    focus = create$0(cst_focusEvent),
    mouse = create$0(cst_mouseEvent),
    keyboard = create$0(cst_keyboardEvent),
    submit = create$0(cst_submitEvent),
    mousewheel = create$0(cst_mousewheelEvent),
    wheel = create$0(cst_wheelwheelEvent),
    clipboard = create$0(cst_clipboardEvent),
    drag = create$0(cst_dragEvent),
    pointer = create$0(cst_pointerEvent),
    animation = create$0(cst_animationEvent);
   function on(type_id, name, handler){
    return [2, name, [0, type_id, handler]];
   }
   function on_focus(_bR_){return on(focus, cst_focus, _bR_);}
   function on_blur(_bQ_){return on(focus, cst_blur, _bQ_);}
   function on_cancel(_bP_){return on(event, cst_cancel, _bP_);}
   function on_click(_bO_){return on(mouse, cst_click, _bO_);}
   function on_close(_bN_){return on(event, cst_close, _bN_);}
   function on_contextmenu(_bM_){return on(mouse, cst_contextmenu, _bM_);}
   function on_double_click(_bL_){return on(mouse, cst_dblclick, _bL_);}
   function on_drag(_bK_){return on(drag, cst_drag, _bK_);}
   function on_dragstart(_bJ_){return on(drag, cst_dragstart, _bJ_);}
   function on_dragend(_bI_){return on(drag, cst_dragend, _bI_);}
   function on_dragenter(_bH_){return on(drag, cst_dragenter, _bH_);}
   function on_dragleave(_bG_){return on(drag, cst_dragleave, _bG_);}
   function on_dragover(_bF_){return on(drag, cst_dragover, _bF_);}
   function on_drop(_bE_){return on(drag, cst_drop, _bE_);}
   function on_mousemove(_bD_){return on(mouse, cst_mousemove, _bD_);}
   function on_mouseup(_bC_){return on(mouse, cst_mouseup, _bC_);}
   function on_mousedown(_bB_){return on(mouse, cst_mousedown, _bB_);}
   function on_mouseenter(_bA_){return on(mouse, cst_mouseenter, _bA_);}
   function on_mouseleave(_bz_){return on(mouse, cst_mouseleave, _bz_);}
   function on_mouseover(_by_){return on(mouse, cst_mouseover, _by_);}
   function on_mouseout(_bx_){return on(mouse, cst_mouseout, _bx_);}
   function on_keyup(_bw_){return on(keyboard, cst_keyup, _bw_);}
   function on_keypress(_bv_){return on(keyboard, cst_keypress, _bv_);}
   function on_keydown(_bu_){return on(keyboard, cst_keydown, _bu_);}
   function on_scroll(_bt_){return on(event, cst_scroll, _bt_);}
   function on_load(_bs_){return on(event, cst_load, _bs_);}
   function on_error(_br_){return on(event, cst_error, _br_);}
   function on_submit(_bq_){return on(submit, cst_submit, _bq_);}
   function on_pointerdown(_bp_){return on(pointer, cst_pointerdown, _bp_);}
   function on_pointerup(_bo_){return on(pointer, cst_pointerup, _bo_);}
   function on_mousewheel(_bn_){return on(mousewheel, cst_mousewheel, _bn_);}
   function on_wheel(_bm_){return on(wheel, cst_wheel, _bm_);}
   function on_copy(_bl_){return on(clipboard, cst_copy, _bl_);}
   function on_cut(_bk_){return on(clipboard, cst_cut, _bk_);}
   function on_paste(_bj_){return on(clipboard, cst_paste, _bj_);}
   function on_reset(_bi_){return on(event, cst_reset, _bi_);}
   function on_animationend(_bh_){
    return on(animation, cst_animationend, _bh_);
   }
   function const_ignore(param){return Virtual_dom_Effect[1];}
   function run_coercion(coercion, target, prev){
    if(prev) return prev;
    var _bg_ = caml_call1(coercion, target);
    return caml_call1(Js_of_ocaml_Js[5][10], _bg_);
   }
   function on_input_event(type_id, event, handler){
    return on
            (type_id,
             event,
             function(ev){
              function _ba_(target){
               function _be_(target){
                var text = runtime.caml_string_of_jsstring(target.value);
                return caml_call2(handler, ev, text);
               }
               var
                _bf_ = Virtual_dom_Effect[1],
                _bb_ = run_coercion(Js_of_ocaml_Dom_html[117][33], target, 0),
                _bc_ =
                  run_coercion(Js_of_ocaml_Dom_html[117][50], target, _bb_),
                _bd_ =
                  run_coercion(Js_of_ocaml_Dom_html[117][55], target, _bc_);
               return caml_call3(Core_Option[41], _bd_, _bf_, _be_);
              }
              return caml_call3
                      (Js_of_ocaml_Js[5][7], ev.target, const_ignore, _ba_);
             });
   }
   function on_change(_a$_){return on_input_event(event, cst_change, _a$_);}
   function on_input(_a__){return on_input_event(event, cst_input, _a__);}
   function to_raw(attr){
    switch(attr[0]){
      case 6:
      case 8:
       if(! attr[1]) return caml_call1(Virtual_dom_Raw[1][1], 0); break;
    }
    var
     attrs = [0, attr, 0],
     attrs_obj = caml_call1(Virtual_dom_Raw[1][1], 0);
    function take_second_styles(first, second){
     if(1 - caml_call1(Css_gen[23], first)){
      var
       _a8_ = [0, [1, [0, _i_, [0, caml_call1(Css_gen[10], second), 0]]], 0],
       _a9_ = [0, [1, [0, _j_, [0, caml_call1(Css_gen[10], first), 0]]], _a8_];
      warn_s
       ([1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_WARNING_not_combining_styl),
          _a9_]]);
     }
     return second;
    }
    function take_second_classes(first, second){
     if(1 - caml_call1(Core_List[18], first)){
      var
       _a4_ =
         function(a_003, b_004){return caml_call2(Core[551], a_003, b_004);},
       first$0 = caml_call2(Core_List[79], first, _a4_),
       _a5_ =
         function(a_005, b_006){return caml_call2(Core[551], a_005, b_006);},
       second$0 = caml_call2(Core_List[79], second, _a5_),
       _a6_ =
         [0,
          [1, [0, _k_, [0, caml_call2(Core[472], Core[558], second$0), 0]]],
          0],
       _a7_ =
         [0,
          [1, [0, _l_, [0, caml_call2(Core[472], Core[558], first$0), 0]]],
          _a6_];
      warn_s
       ([1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_WARNING_not_combining_clas),
          _a7_]]);
     }
     return second;
    }
    function take_second_handler(name, first, second){
     var _a3_ = [0, [1, [0, _m_, [0, caml_call1(Core[558], name), 0]]], 0];
     warn_s
      ([1,
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_WARNING_not_combining_hand),
         _a3_]]);
     return second;
    }
    function take_second_hook(name, first, second){
     var _a2_ = [0, [1, [0, _n_, [0, caml_call1(Core[558], name), 0]]], 0];
     warn_s
      ([1,
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_WARNING_not_combining_hook),
         _a2_]]);
     return second;
    }
    function merge
    (combine_hook, combine_handler, combine_styles, combine_classes, acc){
     var _ay_ = Core_List[20];
     function _az_(acc, attr){
      switch(attr[0]){
        case 0:
         var
          value = attr[3],
          name = attr[2],
          suppress_merge_warnings = attr[1],
          _aB_ = caml_call2(Virtual_dom_Raw[1][2], attrs_obj, name),
          _aC_ = _aB_ ? 1 - suppress_merge_warnings : _aB_;
         if(_aC_){
          var
           _aD_ = [0, [1, [0, _o_, [0, caml_call1(Core[558], name), 0]]], 0];
          warn_s
           ([1,
             [0,
              caml_call1
               (Sexplib0_Sexp_conv[7], cst_WARNING_not_combining_prop),
              _aD_]]);
         }
         if(runtime.caml_string_notequal(name, cst_value$2))
          caml_call3(Virtual_dom_Raw[1][4], attrs_obj, name, value);
         else{
          var value$0 = Js_of_ocaml_Js[52][1].SoftSetHook(value);
          caml_call3(Virtual_dom_Raw[1][4], attrs_obj, cst_value, value$0);
         }
         return acc;
        case 1:
         var
          value$1 = attr[3],
          name$0 = attr[2],
          suppress_merge_warnings$0 = attr[1],
          _aE_ = caml_call2(Virtual_dom_Raw[1][3], attrs_obj, name$0),
          _aF_ = _aE_ ? 1 - suppress_merge_warnings$0 : _aE_;
         if(_aF_){
          var
           _aG_ = [0, [1, [0, _p_, [0, caml_call1(Core[558], name$0), 0]]], 0];
          warn_s
           ([1,
             [0,
              caml_call1
               (Sexplib0_Sexp_conv[7], cst_WARNING_not_combining_attr),
              _aG_]]);
         }
         caml_call3(Virtual_dom_Raw[1][5], attrs_obj, name$0, value$1);
         return acc;
        case 2:
         var
          handler = attr[2],
          name$1 = attr[1],
          _aH_ = acc[4],
          _aI_ = combining_map_add(acc[3], name$1, handler, combine_handler);
         return [0, acc[1], acc[2], _aI_, _aH_];
        case 3:
         var
          hook = attr[2],
          name$2 = attr[1],
          _aJ_ = combining_map_add(acc[4], name$2, hook, combine_hook);
         return [0, acc[1], acc[2], acc[3], _aJ_];
        case 4:
         var
          new_styles = attr[1],
          _aK_ = acc[4],
          _aL_ = acc[3],
          _aM_ = acc[2];
         return [0,
                 caml_call2(combine_styles, acc[1], new_styles),
                 _aM_,
                 _aL_,
                 _aK_];
        case 5:
         var
          new_classes = attr[1],
          _aN_ = acc[4],
          _aO_ = acc[3],
          _aP_ = caml_call2(combine_classes, acc[2], new_classes);
         return [0, acc[1], _aP_, _aO_, _aN_];
        case 6:
         var
          attrs = attr[1],
          _aQ_ = Core[156],
          _aR_ = Css_gen[29],
          _aS_ = function(param){return combine;},
          sub_merge =
            merge
              (function(param){return Virtual_dom_Hooks[1];},
               _aS_,
               _aR_,
               _aQ_,
               empty_merge)
             (attrs),
          _aT_ = caml_call3(Core_Map[86], acc[4], sub_merge[4], combine_hook),
          _aU_ =
            caml_call3(Core_Map[86], acc[3], sub_merge[3], combine_handler),
          _aV_ = caml_call2(combine_classes, acc[2], sub_merge[2]);
         return [0,
                 caml_call2(combine_styles, acc[1], sub_merge[1]),
                 _aV_,
                 _aU_,
                 _aT_];
        case 7:
         var
          map_classes = attr[3],
          map_styles = attr[2],
          attrs$0 = attr[1],
          sub_merge$0 =
            merge
              (take_second_hook,
               take_second_handler,
               Css_gen[29],
               Core[156],
               empty_merge)
             (attrs$0),
          _aW_ =
            caml_call3(Core_Map[86], acc[4], sub_merge$0[4], combine_hook),
          _aX_ =
            caml_call3(Core_Map[86], acc[3], sub_merge$0[3], combine_handler),
          _aY_ =
            caml_call1
             (map_classes,
              caml_call2(combine_classes, acc[2], sub_merge$0[2]));
         return [0,
                 caml_call1
                  (map_styles,
                   caml_call2(combine_styles, acc[1], sub_merge$0[1])),
                 _aY_,
                 _aX_,
                 _aW_];
        default:
         var
          attrs$1 = attr[1],
          sub_merge$1 =
            merge
              (take_second_hook,
               take_second_handler,
               take_second_styles,
               take_second_classes,
               empty_merge)
             (attrs$1),
          _aZ_ =
            caml_call3(Core_Map[86], acc[4], sub_merge$1[4], combine_hook),
          _a0_ =
            caml_call3(Core_Map[86], acc[3], sub_merge$1[3], combine_handler),
          _a1_ = caml_call2(combine_classes, acc[2], sub_merge$1[2]);
         return [0,
                 caml_call2(combine_styles, acc[1], sub_merge$1[1]),
                 _a1_,
                 _a0_,
                 _aZ_];
      }
     }
     return function(_aA_){return caml_call3(_ay_, _aA_, acc, _az_);};
    }
    var
     merge$0 =
       merge
         (take_second_hook,
          take_second_handler,
          take_second_styles,
          take_second_classes,
          empty_merge)
        (attrs);
    function _aq_(name, hook){
     var _ax_ = caml_call1(Virtual_dom_Hooks[2], hook);
     return caml_call3(Virtual_dom_Raw[1][4], attrs_obj, name, _ax_);
    }
    caml_call2(Core_Map[51], merge$0[4], _aq_);
    function _ar_(name, param){
     var handler = param[2];
     function f(e){
      var _aw_ = caml_call1(handler, e);
      caml_call2(Virtual_dom_Effect[23][1], e, _aw_);
      return Js_of_ocaml_Js[7];
     }
     var
      _au_ = caml_call1(Js_of_ocaml_Dom[10], f),
      _av_ = caml_call2(Core[18], cst_on, name);
     return caml_call3(Virtual_dom_Raw[1][4], attrs_obj, _av_, _au_);
    }
    caml_call2(Core_Map[51], merge$0[3], _ar_);
    if(1 - caml_call1(Css_gen[23], merge$0[1])){
     var
      props = caml_call1(Css_gen[32], merge$0[1]),
      obj = caml_call1(Virtual_dom_Raw[1][1], 0),
      _as_ =
        function(param){
         var v = param[2], k = param[1];
         return caml_call3
                 (Virtual_dom_Raw[1][4], obj, k, caml_jsstring_of_string(v));
        };
     caml_call2(Core_List[19], props, _as_);
     caml_call3(Virtual_dom_Raw[1][4], attrs_obj, cst_style, obj);
    }
    if(! caml_call1(Core_List[18], merge$0[2])){
     var
      _at_ =
        caml_jsstring_of_string(caml_call2(Core_String[46], _q_, merge$0[2]));
     caml_call3(Virtual_dom_Raw[1][5], attrs_obj, cst_class, _at_);
    }
    return attrs_obj;
   }
   function on_file_input(handler){
    return on
            (event,
             cst_input$0,
             function(ev){
              function _am_(target){
               function _an_(target){
                function _ap_(files){return caml_call2(handler, ev, files);}
                return caml_call3
                        (Js_of_ocaml_Js[6][7], target.files, const_ignore, _ap_);
               }
               var _ao_ = caml_call1(Js_of_ocaml_Dom_html[117][33], target);
               return caml_call3
                       (Js_of_ocaml_Js[5][7], _ao_, const_ignore, _an_);
              }
              return caml_call3
                      (Js_of_ocaml_Js[5][7], ev.target, const_ignore, _am_);
             });
   }
   var sexp_of_t = Core_Unit[10];
   function combine$1(param, _al_){return 0;}
   function init(param, _ak_){return 0;}
   var
    on_mount =
      [0, -970641302, function(param, _aj_, element){return element.focus();}];
   function update(param, _ai_, _ah_, _ag_){return 0;}
   function destroy(param, _af_, _ae_){return 0;}
   var
    Hook =
      caml_call1
       (Virtual_dom_Hooks[3],
        [0, [0], [0, sexp_of_t, combine$1], init, on_mount, update, destroy]);
   function attr(param){
    return [3, cst_always_focus_hook, caml_call1(Hook[1], 0)];
   }
   function map_style(t, f){
    var _ac_ = 0;
    return [0, [7, t, f, function(_ad_){return _ad_;}], _ac_];
   }
   function add_class(t, c){
    var _$_ = 0;
    function _aa_(cs){return [0, c, cs];}
    return [0, [7, t, function(_ab_){return _ab_;}, _aa_], _$_];
   }
   function add_style(t, s){
    return map_style(t, function(ss){return caml_call2(Css_gen[29], ss, s);});
   }
   function merge_classes_and_styles(t){
    var _X_ = 0;
    function _Y_(___){return ___;}
    return [0, [7, t, function(_Z_){return _Z_;}, _Y_], _X_];
   }
   function sexp_of_t$0(x_013){
    function _W_(param){
     var
      arg1_010 = param[2],
      arg0_009 = param[1],
      res0_011 = caml_call1(Core[558], arg0_009),
      res1_012 = caml_call1(Core[558], arg1_010);
     return [1, [0, res0_011, [0, res1_012, 0]]];
    }
    return caml_call2(Core[472], _W_, x_013);
   }
   var combine$2 = Core_List[10], Input = [0, sexp_of_t$0, combine$2];
   function init$0(input, element){
    function _V_(param){
     var v = param[2], k = param[1];
     element.style.setProperty
      (caml_jsstring_of_string(k),
       caml_jsstring_of_string(v),
       Js_of_ocaml_Js[3]);
     return 0;
    }
    return caml_call2(Core_List[19], input, _V_);
   }
   var on_mount$0 = 327963705;
   function destroy$0(input, param, element){
    function _U_(param){
     var k = param[1];
     element.style.removeProperty(caml_jsstring_of_string(k));
     return 0;
    }
    return caml_call2(Core_List[19], input, _U_);
   }
   function update$0(old_input, new_input, param, element){
    if(old_input !== new_input){
     var
      _S_ =
        function(a_016, b_017){
         var
          t_019 = a_016[2],
          t_018 = a_016[1],
          t_021 = b_017[2],
          t_020 = b_017[1],
          _T_ = caml_call2(Core[553], t_018, t_020);
         return _T_ ? caml_call2(Core[553], t_019, t_021) : _T_;
        };
     if(! caml_call3(Core[468], _S_, old_input, new_input)){
      destroy$0(old_input, 0, element);
      return init$0(new_input, element);
     }
    }
    return 0;
   }
   var
    Css_var_hook =
      caml_call1
       (Virtual_dom_Hooks[3],
        [0, [0], Input, init$0, on_mount$0, update$0, destroy$0]);
   function css_vars_no_kebabs(alist){
    return [3, cst_custom_css_vars, caml_call1(Css_var_hook[1], alist)];
   }
   function css_var(name, v){
    return css_vars_no_kebabs
            ([0, [0, caml_call2(Core[18], cst$6, name), v], 0]);
   }
   function filter_by_kind(t, f){
    switch(t[0]){
      case 0:
       return caml_call1(f, 99222645) ? t : empty;
      case 1:
       return caml_call1(f, 482562044) ? t : empty;
      case 2:
       return caml_call1(f, 321312682) ? t : empty;
      case 3:
       return caml_call1(f, 803993603) ? t : empty;
      case 4:
       return caml_call1(f, 390796561) ? t : empty;
      case 5:
       return caml_call1(f, -611981288) ? t : empty;
      case 6:
       var attrs = t[1], _M_ = function(_R_){return filter_by_kind(_R_, f);};
       return [6, caml_call2(Core_List[51], attrs, _M_)];
      case 7:
       var
        b = t[3],
        a = t[2],
        attrs$0 = t[1],
        _N_ = function(_Q_){return filter_by_kind(_Q_, f);};
       return [7, caml_call2(Core_List[51], attrs$0, _N_), a, b];
      default:
       var
        attrs$1 = t[1],
        _O_ = function(_P_){return filter_by_kind(_P_, f);};
       return [8, caml_call2(Core_List[51], attrs$1, _O_)];
    }
   }
   function contains_name(looking_for, param){
    switch(param[0]){
      case 2:
       var name$0 = param[1], _J_ = caml_call2(Core[18], cst_on$0, name$0);
       return caml_call2(Core_String[145], _J_, looking_for);
      case 3:
       var name = param[1]; break;
      case 4:
       return caml_call2(Core_String[145], looking_for, cst_style$0);
      case 5:
       return caml_call2(Core_String[145], looking_for, cst_class$0);
      case 0:
      case 1:
       var name = param[2]; break;
      default:
       var
        attrs = param[1],
        _K_ = function(_L_){return contains_name(looking_for, _L_);};
       return caml_call2(Core_List[23], attrs, _K_);
    }
    return caml_call2(Core_String[145], looking_for, name);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_virtual_dom);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Virtual_dom_Attr);
   var _s_ = [0, contains_name, filter_by_kind];
   function _t_(M){
    var Input = M[1];
    function init(param, _I_){return 0;}
    var on_mount = 327963705;
    function update(param, _H_, _G_, _F_){return 0;}
    function destroy(param, _E_, _D_){return 0;}
    var
     Hook =
       caml_call1
        (Virtual_dom_Hooks[3],
         [0, [0], Input, init, on_mount, update, destroy]);
    function attr(input){
     var _C_ = caml_call1(Hook[1], input);
     return [3, M[2], _C_];
    }
    var type_id = Hook[2][1];
    return [0, attr, type_id];
   }
   var
    Virtual_dom_Attr =
      [0,
       create,
       create_float,
       string_property,
       bool_property,
       property,
       suppress_merge_warnings,
       create_hook,
       of_opt,
       many,
       many_without_merge,
       empty,
       combine$0,
       combine$0,
       autofocus,
       checked,
       class$0,
       classes$0,
       classes,
       disabled,
       allow,
       for$0,
       label,
       href,
       target,
       id,
       name,
       placeholder,
       role,
       selected,
       hidden,
       readonly,
       style,
       min,
       max,
       min_date,
       max_date,
       min_date_time,
       max_date_time,
       colspan,
       rowspan,
       draggable,
       tabindex,
       type,
       value,
       rows,
       cols,
       value_prop,
       title,
       alt,
       src,
       open,
       start,
       on_focus,
       on_blur,
       [0, current, For_testing],
       to_raw,
       on_input,
       on_change,
       on_file_input,
       on_cancel,
       on_click,
       on_close,
       on_contextmenu,
       on_double_click,
       on_drag,
       on_dragstart,
       on_dragend,
       on_dragenter,
       on_dragleave,
       on_dragover,
       on_drop,
       on_mousemove,
       on_mouseup,
       on_mousedown,
       on_mouseenter,
       on_mouseleave,
       on_mouseover,
       on_mouseout,
       on_keyup,
       on_keypress,
       on_keydown,
       on_scroll,
       on_load,
       on_error,
       on_submit,
       on_pointerdown,
       on_pointerup,
       on_mousewheel,
       on_wheel,
       on_copy,
       on_cut,
       on_paste,
       on_reset,
       on_animationend,
       css_var,
       css_vars_no_kebabs,
       [0, merge_classes_and_styles, map_style, add_style, add_class],
       [0, attr],
       function(_u_){
        var has_been_used = [0, 0], sexp_of_t = Sexplib0_Sexp_conv[23];
        function combine(left, right){
         return [0, Ui_effect[2], [0, left, [0, right, 0]]];
        }
        var Input = [0, sexp_of_t, combine];
        function init(param, _B_){return 0;}
        var
         on_mount =
           [0,
            -970641302,
            function(event, param, element){
             var _A_ = 1 - has_been_used[1];
             return _A_
                     ? (has_been_used
                        [1]
                       = 1,
                       element.focus(),
                       caml_call1(Virtual_dom_Effect[23][2], event))
                     : _A_;
            }];
        function update(param, _z_, _y_, _x_){return 0;}
        function destroy(param, _w_, _v_){return 0;}
        var
         Hook =
           caml_call1
            (Virtual_dom_Hooks[3],
             [0, [0], Input, init, on_mount, update, destroy]);
        function attr(param, after){
         return [3, cst_single_focus_hook, caml_call1(Hook[1], after)];
        }
        return [0, attr];
       },
       _t_,
       _s_];
   runtime.caml_register_global(175, Virtual_dom_Attr, cst_Virtual_dom_Attr$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Virtual_dom__Global_listeners
//# unitInfo: Requires: Js_of_ocaml__Dom, Js_of_ocaml__Dom_html, Js_of_ocaml__Js, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Ui_effect, Virtual_dom__Attr, Virtual_dom__Effect, Virtual_dom__Hooks
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Virtual_dom_Global_listene$0 = "Virtual_dom__Global_listeners",
    cst_virtual_dom$0 = "virtual_dom";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Virtual_dom_Attr = global_data.Virtual_dom__Attr,
    Virtual_dom_Effect = global_data.Virtual_dom__Effect,
    Ui_effect = global_data.Ui_effect,
    Js_of_ocaml_Dom_html = global_data.Js_of_ocaml__Dom_html,
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    Js_of_ocaml_Dom = global_data.Js_of_ocaml__Dom,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Virtual_dom_Hooks = global_data.Virtual_dom__Hooks,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Virtual_dom_Global_listene$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_virtual_dom$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/global_listeners.ml");
   caml_call2
    (Ppx_inline_test_lib[6], cst_virtual_dom$0, "global_listeners.ml");
   var
    cst_global_visibilitychange_li = "global-visibilitychange-listener",
    cst_global_beforeunload_listen = "global-beforeunload-listener",
    cst_global_keydown_listener = "global-keydown-listener",
    cst_global_contextmenu_listene = "global-contextmenu-listener",
    cst_global_click_listener = "global-click-listener",
    cst_global_mousemove_listener = "global-mousemove-listener",
    cst_global_mouseup_listener = "global-mouseup-listener",
    cst_contextmenu = "contextmenu",
    cst_visibilitychange = "visibilitychange",
    cst_beforeunload = "beforeunload",
    cst_virtual_dom = cst_virtual_dom$0,
    cst_Virtual_dom_Global_listene = cst_Virtual_dom_Global_listene$0;
   function Make(X){
    function sexp_of_t(param){
     function _n_(_o_){return 0;}
     return caml_call1(Sexplib0_Sexp_conv[24], _n_);
    }
    function combine(f, g, event){
     var
      _l_ = [0, caml_call1(g, event), 0],
      _m_ = [0, caml_call1(f, event), _l_];
     return [0, Ui_effect[2], _m_];
    }
    var Input = [0, sexp_of_t, combine];
    function init(f, element){
     function _j_(ev){
      var _k_ = caml_call1(f, ev);
      caml_call2(Virtual_dom_Effect[23][1], ev, _k_);
      return Js_of_ocaml_Js[7];
     }
     var handler = caml_call1(Js_of_ocaml_Dom[10], _j_);
     return [0,
             caml_call4
              (Js_of_ocaml_Dom_html[17],
               Js_of_ocaml_Dom_html[8],
               X[1],
               handler,
               Js_of_ocaml_Js[7])];
    }
    function destroy(input, state, element){
     return caml_call1(Js_of_ocaml_Dom_html[18], state[1]);
    }
    function update(old_input, f, state, element){
     destroy(old_input, state, element);
     var new_state = init(f, element);
     state[1] = new_state[1];
     return 0;
    }
    var
     include =
       caml_call1
        (Virtual_dom_Hooks[3],
         [0, [0], Input, init, 327963705, update, destroy]),
     create = include[1],
     For_testing = include[2];
    return [0, create, For_testing];
   }
   var
    event_kind = Js_of_ocaml_Dom_html[15][7],
    Mouseup = Make([0, event_kind]),
    event_kind$0 = Js_of_ocaml_Dom_html[15][9],
    Mousemove = Make([0, event_kind$0]),
    event_kind$1 = Js_of_ocaml_Dom_html[15][1],
    Click = Make([0, event_kind$1]),
    event_kind$2 = caml_call1(Js_of_ocaml_Dom_html[15][92], cst_contextmenu),
    Contextmenu = Make([0, event_kind$2]),
    event_kind$3 = Js_of_ocaml_Dom_html[15][12],
    Keydown = Make([0, event_kind$3]),
    event_kind$4 =
      caml_call1(Js_of_ocaml_Dom_html[15][92], cst_visibilitychange),
    Visibilitychange = Make([0, event_kind$4]),
    event_kind$5 = caml_call1(Js_of_ocaml_Dom_html[15][92], cst_beforeunload),
    Beforeunload = Make([0, event_kind$5]);
   function mouseup(f){
    var _i_ = caml_call1(Mouseup[1], f);
    return caml_call2(Virtual_dom_Attr[7], cst_global_mouseup_listener, _i_);
   }
   function mousemove(f){
    var _h_ = caml_call1(Mousemove[1], f);
    return caml_call2(Virtual_dom_Attr[7], cst_global_mousemove_listener, _h_);
   }
   function click(f){
    var _g_ = caml_call1(Click[1], f);
    return caml_call2(Virtual_dom_Attr[7], cst_global_click_listener, _g_);
   }
   function contextmenu(f){
    var _f_ = caml_call1(Contextmenu[1], f);
    return caml_call2
            (Virtual_dom_Attr[7], cst_global_contextmenu_listene, _f_);
   }
   function keydown(f){
    var _e_ = caml_call1(Keydown[1], f);
    return caml_call2(Virtual_dom_Attr[7], cst_global_keydown_listener, _e_);
   }
   function beforeunload(f){
    function f$0(event){
     function _c_(param){
      if(typeof param === "number")
       return 327963705 <= param
               ? Virtual_dom_Effect[1]
               : (event.returnValue
                 = "this string can be anything",
                 Virtual_dom_Effect[1]);
      var effect = param[2];
      return effect;
     }
     var _d_ = caml_call1(f, event);
     return caml_call2(Ui_effect[13][4][2], _d_, _c_);
    }
    var _b_ = caml_call1(Beforeunload[1], f$0);
    return caml_call2
            (Virtual_dom_Attr[7], cst_global_beforeunload_listen, _b_);
   }
   function visibilitychange(f){
    var _a_ = caml_call1(Visibilitychange[1], f);
    return caml_call2
            (Virtual_dom_Attr[7], cst_global_visibilitychange_li, _a_);
   }
   var
    mouseup_type_id = Mouseup[2][1],
    mousemove_type_id = Mousemove[2][1],
    keydown_type_id = Keydown[2][1],
    click_type_id = Click[2][1],
    contextmenu_type_id = Contextmenu[2][1],
    visibilitychange_type_id = Visibilitychange[2][1],
    beforeunload_type_id = Beforeunload[2][1];
   caml_call1(Ppx_inline_test_lib[7], cst_virtual_dom);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Virtual_dom_Global_listene);
   var
    Virtual_dom_Global_listeners =
      [0,
       mouseup,
       mousemove,
       click,
       contextmenu,
       keydown,
       visibilitychange,
       beforeunload,
       [0,
        mouseup_type_id,
        mousemove_type_id,
        click_type_id,
        contextmenu_type_id,
        keydown_type_id,
        visibilitychange_type_id,
        beforeunload_type_id]];
   runtime.caml_register_global
    (32, Virtual_dom_Global_listeners, cst_Virtual_dom_Global_listene$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Virtual_dom__Thunk
//# unitInfo: Requires: CamlinternalLazy, Js_of_ocaml__Js, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Virtual_dom_Thunk$0 = "Virtual_dom__Thunk",
    cst_virtual_dom$0 = "virtual_dom";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Virtual_dom_Thunk$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_virtual_dom$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/thunk.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_virtual_dom$0, "thunk.ml");
   var
    cst_virtual_dom = cst_virtual_dom$0,
    cst_Virtual_dom_Thunk = cst_Virtual_dom_Thunk$0,
    vdom_thunk =
      [246, function(param){return Js_of_ocaml_Js[52][1].VdomThunk;}];
   function create(key, arg, f){
    if(key)
     var
      key$0 = key[1],
      key$1 =
        caml_call1
         (Js_of_ocaml_Js[6][2], runtime.caml_jsstring_of_string(key$0));
    else
     var key$1 = Js_of_ocaml_Js[6][1];
    var
     f$0 =
       runtime.caml_js_wrap_callback(function(a){return caml_call1(f, a);}),
     _a_ = runtime.caml_obj_tag(vdom_thunk);
    a:
    if(250 === _a_)
     var _b_ = vdom_thunk[1];
    else{
     if(246 !== _a_ && 244 !== _a_){var _b_ = vdom_thunk; break a;}
     var _b_ = caml_call1(CamlinternalLazy[2], vdom_thunk);
    }
    return _b_(f$0, arg, key$1);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_virtual_dom);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Virtual_dom_Thunk);
   var Virtual_dom_Thunk = [0, create];
   runtime.caml_register_global
    (14, Virtual_dom_Thunk, cst_Virtual_dom_Thunk$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Virtual_dom__Node
//# unitInfo: Requires: Base, Base__List, Base__Printf, Base__Staged, Base__String, Base__Type_equal, CamlinternalLazy, Core, Js_of_ocaml__Firebug, Js_of_ocaml__Js, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Ppx_string_runtime, Virtual_dom__Attr, Virtual_dom__Raw, Virtual_dom__Thunk
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_widget$1 = "-widget",
    cst_opaque = "<opaque>",
    cst_Virtual_dom_Node$0 = "Virtual_dom__Node",
    cst_div$1 = "div",
    cst_input$1 = "input",
    cst_virtual_dom$0 = "virtual_dom",
    caml_jsstring_of_string = runtime.caml_jsstring_of_string,
    caml_obj_tag = runtime.caml_obj_tag;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    res1_009 = [0, cst_opaque],
    Virtual_dom_Raw = global_data.Virtual_dom__Raw,
    Core = global_data.Core,
    Ppx_string_runtime = global_data.Ppx_string_runtime,
    Js_of_ocaml_Firebug = global_data.Js_of_ocaml__Firebug,
    Virtual_dom_Attr = global_data.Virtual_dom__Attr,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Virtual_dom_Thunk = global_data.Virtual_dom__Thunk,
    Base = global_data.Base,
    Base_List = global_data.Base__List,
    Base_String = global_data.Base__String,
    Base_Type_equal = global_data.Base__Type_equal,
    Base_Staged = global_data.Base__Staged,
    Base_Printf = global_data.Base__Printf,
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Virtual_dom_Node$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_virtual_dom$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/node.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_virtual_dom$0, "node.ml");
   var
    Aliases = [0],
    cst_Vdom_Node_to_dom_was_given =
      "Vdom.Node.to_dom was given a Vdom.Node.fragment, which contains multiple nodes.\n            In order to produce a single dom node, we are wrapping the fragment children in a <div>",
    cst_div = cst_div$1,
    _e_ = [0, 0],
    cst_widget$0 = cst_widget$1,
    cst_widget = cst_widget$1,
    _a_ = [0, "state"],
    _b_ = [0, cst_input$1],
    cst_inner_html_svg_node = "inner-html-svg-node",
    cst_inner_html_node = "inner-html-node",
    cst_a = "a",
    cst_abbr = "abbr",
    cst_b = "b",
    cst_body = "body",
    cst_button = "button",
    cst_code = "code",
    cst_datalist = "datalist",
    cst_details = "details",
    cst_dialog = "dialog",
    cst_div$0 = cst_div$1,
    cst_main = "main",
    cst_fieldset = "fieldset",
    cst_legend = "legend",
    cst_footer = "footer",
    cst_h1 = "h1",
    cst_h2 = "h2",
    cst_h3 = "h3",
    cst_h4 = "h4",
    cst_h5 = "h5",
    cst_h6 = "h6",
    cst_header = "header",
    cst_html = "html",
    cst_input = cst_input$1,
    cst_img = "img",
    cst_input$0 = cst_input$1,
    cst_textarea = "textarea",
    cst_select = "select",
    cst_small = "small",
    cst_optgroup = "optgroup",
    cst_option = "option",
    cst_label = "label",
    cst_li = "li",
    cst_p = "p",
    cst_pre = "pre",
    cst_section = "section",
    cst_span = "span",
    cst_strong = "strong",
    cst_em = "em",
    cst_blockquote = "blockquote",
    cst_summary = "summary",
    cst_iframe = "iframe",
    cst_table = "table",
    cst_tbody = "tbody",
    cst_td = "td",
    cst_th = "th",
    cst_thead = "thead",
    cst_tr = "tr",
    cst_ul = "ul",
    cst_ol = "ol",
    cst_br = "br",
    cst_hr = "hr",
    cst_dl = "dl",
    cst_dt = "dt",
    cst_dd = "dd",
    cst_kbd = "kbd",
    cst_form = "form",
    cst_virtual_dom = cst_virtual_dom$0,
    cst_Virtual_dom_Node = cst_Virtual_dom_Node$0;
   function tag(t){return t[1];}
   function attrs(t){return t[3];}
   function key(t){return t[2];}
   function with_key(t, key){
    return [0, t[1], [0, key], t[3], t[4], t[5], t[6]];
   }
   function map_attrs(t, f){
    var
     attrs = caml_call1(f, t[3]),
     raw_attrs =
       [246, function(_cF_){return caml_call1(Virtual_dom_Attr[56], attrs);}];
    return [0, t[1], t[2], attrs, raw_attrs, t[5], t[6]];
   }
   function add_class(t, c){
    return map_attrs
            (t,
             function(a){
              var _cE_ = caml_call1(Virtual_dom_Attr[16], c);
              return caml_call2(Virtual_dom_Attr[12], a, _cE_);
             });
   }
   function add_classes(t, c){
    return map_attrs
            (t,
             function(a){
              var _cD_ = caml_call1(Virtual_dom_Attr[17], c);
              return caml_call2(Virtual_dom_Attr[12], a, _cD_);
             });
   }
   function add_style(t, s){
    return map_attrs
            (t,
             function(a){
              var _cC_ = caml_call1(Virtual_dom_Attr[32], s);
              return caml_call2(Virtual_dom_Attr[12], a, _cC_);
             });
   }
   function to_raw_children(children, t_to_js){
    var children_raw = new Js_of_ocaml_Js[18];
    function append_children(children){
     function _cB_(other){
      if(typeof other === "number") return 0;
      if(0 === other[0]){
       var children = other[1];
       return append_children(children);
      }
      children_raw.push(caml_call1(t_to_js, other));
      return 0;
     }
     return caml_call2(Base_List[19], children, _cB_);
    }
    append_children(children);
    return children_raw;
   }
   var has_emitted_fragment_warning = [0, 0];
   function t_to_js(param){
    if(typeof param === "number")
     return caml_call1(Virtual_dom_Raw[2][2], cst);
    switch(param[0]){
      case 0:
       var
        children = param[1],
        _cv_ = Core[628],
        _cw_ = _cv_ || has_emitted_fragment_warning[1];
       if(1 - _cw_){
        var
         _cx_ =
           caml_call1
            (Ppx_string_runtime[1][2], cst_Vdom_Node_to_dom_was_given);
        Js_of_ocaml_Firebug[1].error(_cx_);
        has_emitted_fragment_warning[1] = 1;
       }
       var
        attrs = caml_call1(Virtual_dom_Attr[56], Virtual_dom_Attr[11]),
        children_raw = to_raw_children(children, t_to_js);
       return caml_call4
               (Virtual_dom_Raw[2][1], cst_div, attrs, children_raw, 0);
      case 1:
       var s = param[1]; return caml_call1(Virtual_dom_Raw[2][2], s);
      case 2:
       var
        _cy_ = param[1],
        _cz_ = _cy_[4],
        key = _cy_[2],
        tag = _cy_[1],
        _cA_ = caml_obj_tag(_cz_);
       a:
       if(250 === _cA_)
        var raw_attrs = _cz_[1];
       else{
        if(246 !== _cA_ && 244 !== _cA_){var raw_attrs = _cz_; break a;}
        var raw_attrs = caml_call1(CamlinternalLazy[2], _cz_);
       }
       var children$0 = _cy_[5];
       return 4153924 <= _cy_[6]
               ? caml_call4
                 (Virtual_dom_Raw[2][3], tag, raw_attrs, children$0, key)
               : caml_call4
                 (Virtual_dom_Raw[2][1], tag, raw_attrs, children$0, key);
      case 3:
       var w = param[1]; return w;
      default:
       var t = param[2], key$0 = param[1];
       return caml_call3(Virtual_dom_Thunk[1], key$0, t, t_to_js_lazy);
    }
   }
   function t_to_js_lazy(param){
    var _cu_ = caml_obj_tag(param);
    a:
    if(250 === _cu_)
     var t = param[1];
    else{
     if(246 !== _cu_ && 244 !== _cu_){var t = param; break a;}
     var t = caml_call1(CamlinternalLazy[2], param);
    }
    return t_to_js(t);
   }
   function text(s){return [1, s];}
   function element(kind, tag, key, attrs, children){
    var
     children_raw = to_raw_children(children, t_to_js),
     raw_attrs =
       [246, function(_ct_){return caml_call1(Virtual_dom_Attr[56], attrs);}];
    return [0, tag, key, attrs, raw_attrs, children_raw, kind];
   }
   function create(tag, key, opt, children){
    if(opt) var sth = opt[1], attrs = sth; else var attrs = 0;
    return [2,
            element
             (-847254184,
              tag,
              key,
              caml_call1(Virtual_dom_Attr[9], attrs),
              children)];
   }
   var include = Virtual_dom_Raw[4], create$0 = include[1];
   function lazy(key, t){return [4, key, t];}
   function element_expert(kind, tag, key, attrs, children){
    var
     raw_attrs =
       [246, function(_cs_){return caml_call1(Virtual_dom_Attr[56], attrs);}];
    return [0, tag, key, attrs, raw_attrs, children, kind];
   }
   function widget(vdom_for_testing, destroy, update, id, init, param){
    var
     vdom_for_testing$0 =
       [246,
        function(_co_){
         if(! vdom_for_testing){
          var _cr_ = caml_call1(Base_Type_equal[12][6], id);
          return t_to_js
                  (create(caml_call2(Base[241], _cr_, cst_widget$0), 0, 0, 0));
         }
         var t = vdom_for_testing[1], _cp_ = caml_obj_tag(t);
         a:
         if(250 === _cp_)
          var _cq_ = t[1];
         else{
          if(246 !== _cp_ && 244 !== _cp_){var _cq_ = t; break a;}
          var _cq_ = caml_call1(CamlinternalLazy[2], t);
         }
         return t_to_js(_cq_);
        }];
    return [3,
            caml_call6
             (create$0, [0, vdom_for_testing$0], destroy, update, id, init, 0)];
   }
   function create_childless(tag, key, attrs, param){return create(tag, key, attrs, 0);
   }
   function create_svg(tag, key, opt, children){
    if(opt) var sth = opt[1], attrs = sth; else var attrs = 0;
    return [2,
            element
             (4153924,
              tag,
              key,
              caml_call1(Virtual_dom_Attr[9], attrs),
              children)];
   }
   var none = 0;
   function fragment(children){return [0, children];}
   function textf(format){return caml_call2(Base_Printf[4], text, format);}
   function widget_of_module(m){
    function _cf_(param){
     var
      arg0_006 = param[1],
      state_004 = arg0_006[2],
      input_002 = arg0_006[1],
      arg_005 = caml_call1(m[2][1], state_004),
      bnds_001 = [0, [1, [0, _a_, [0, arg_005, 0]]], 0],
      arg_003 = caml_call1(m[1][1], input_002),
      bnds_001$0 = [0, [1, [0, _b_, [0, arg_003, 0]]], bnds_001],
      res0_008 = [1, bnds_001$0];
     return [1, [0, res0_008, [0, res1_009, 0]]];
    }
    var id = caml_call2(Base_Type_equal[12][4], m[3], _cf_);
    function _cg_(input){
     var
      vdom_for_testing =
        [246,
         function(_cm_){
          var match = m[7];
          if(typeof match === "number"){
           var other = caml_call1(m[1][1], input);
           a:
           {
            if
             (0 === other[0]
              && ! runtime.caml_string_notequal(other[1], cst_opaque)){var children = 0; break a;}
            var children = [0, [1, caml_call2(Base[85][14], 0, other)], 0];
           }
           var
            _cn_ =
              create(caml_call2(Base[241], m[3], cst_widget), 0, 0, children);
          }
          else
           var f = match[2], _cn_ = caml_call1(f, input);
          return t_to_js(_cn_);
         }],
      _cj_ = 0;
     function _ck_(param){
      var
       match = caml_call1(m[4], input),
       element = match[2],
       state = match[1];
      return [0, [0, input, state], element];
     }
     var
      _cl_ =
        [0,
         function(param, element){
          var
           state = param[2],
           prev_input = param[1],
           match = caml_call4(m[5], prev_input, input, state, element),
           element$0 = match[2],
           state$0 = match[1];
          return [0, [0, input, state$0], element$0];
         }];
     return caml_call6
             (create$0,
              [0, vdom_for_testing],
              [0,
               function(param, element){
                var state = param[2], prev_input = param[1];
                return caml_call3(m[6], prev_input, state, element);
               }],
              _cl_,
              id,
              _ck_,
              _cj_);
    }
    var
     _ch_ = caml_call1(Base_Staged[1], _cg_),
     f = caml_call1(Base_Staged[2], _ch_);
    function _ci_(i){return [3, caml_call1(f, i)];}
    return caml_call1(Base_Staged[1], _ci_);
   }
   function to_dom(t){
    var _ce_ = t_to_js(t);
    return caml_call1(Virtual_dom_Raw[2][4], _ce_);
   }
   function widget$0(name, create){
    function _b9_(param){var content = param[1][1]; return [0, content];}
    var id = caml_call2(Base_Type_equal[12][4], name, _b9_);
    function _b__(override_vdom_for_testing, tag, attrs, content, param){
     var element = caml_call3(create, tag, attrs, 0);
     function init(param){
      var element$0 = to_dom(element), t5 = caml_jsstring_of_string(content);
      element$0.innerHTML = t5;
      return [0, [0, content, tag, attrs], element$0];
     }
     function update(param, element){
      var prev_attr = param[3], prev_tag = param[2], prev_content = param[1];
      a:
      {
       if(caml_call2(Base_String[134], prev_tag, tag) && prev_attr === attrs){var element$0 = element; break a;}
       var
        _cb_ = t_to_js(caml_call3(create, tag, attrs, 0)),
        _cc_ = t_to_js(caml_call3(create, prev_tag, prev_attr, 0)),
        _cd_ = caml_call2(Virtual_dom_Raw[3][1], _cc_, _cb_),
        element$0 = caml_call2(Virtual_dom_Raw[3][2], element, _cd_);
      }
      var
       _b$_ = 1 - caml_call2(Base_String[134], prev_tag, tag),
       _ca_ = _b$_ || 1 - caml_call2(Base_String[134], prev_content, content);
      if(_ca_){
       var t7 = caml_jsstring_of_string(content);
       element$0.innerHTML = t7;
      }
      return [0, [0, content, tag, attrs], element$0];
     }
     if(override_vdom_for_testing)
      var v = override_vdom_for_testing[1], vdom_for_testing = v;
     else
      var
       vdom_for_testing =
         [246,
          function(param){
           return caml_call3(create, tag, attrs, [0, [1, content], 0]);
          }];
     return widget([0, vdom_for_testing], 0, [0, update], id, init, 0);
    }
    return caml_call1(Base_Staged[1], _b__);
   }
   var
    _c_ =
      widget$0
       (cst_inner_html_svg_node,
        function(tag, attrs){
         var key = 0;
         return function(children){
          return [2,
                  element
                   (4153924,
                    tag,
                    key,
                    caml_call1(Virtual_dom_Attr[9], attrs),
                    children)];};
        }),
    inner_html_svg = caml_call1(Base_Staged[2], _c_),
    _d_ =
      widget$0
       (cst_inner_html_node,
        function(tag, attrs){
         var _b6_ = [0, attrs], _b7_ = 0;
         return function(_b8_){return create(tag, _b7_, _b6_, _b8_);};
        }),
    inner_html = caml_call1(Base_Staged[2], _d_);
   function a(_b3_, _b4_, _b5_){return create(cst_a, _b3_, _b4_, _b5_);}
   function abbr(_b0_, _b1_, _b2_){return create(cst_abbr, _b0_, _b1_, _b2_);}
   function b(_bX_, _bY_, _bZ_){return create(cst_b, _bX_, _bY_, _bZ_);}
   function body(_bU_, _bV_, _bW_){return create(cst_body, _bU_, _bV_, _bW_);}
   function button(_bR_, _bS_, _bT_){
    return create(cst_button, _bR_, _bS_, _bT_);
   }
   function code(_bO_, _bP_, _bQ_){return create(cst_code, _bO_, _bP_, _bQ_);}
   function datalist(_bL_, _bM_, _bN_){
    return create(cst_datalist, _bL_, _bM_, _bN_);
   }
   function details(_bI_, _bJ_, _bK_){
    return create(cst_details, _bI_, _bJ_, _bK_);
   }
   function dialog(_bF_, _bG_, _bH_){
    return create(cst_dialog, _bF_, _bG_, _bH_);
   }
   function div(_bC_, _bD_, _bE_){return create(cst_div$0, _bC_, _bD_, _bE_);}
   function main(_bz_, _bA_, _bB_){return create(cst_main, _bz_, _bA_, _bB_);}
   function fieldset(_bw_, _bx_, _by_){
    return create(cst_fieldset, _bw_, _bx_, _by_);
   }
   function legend(_bt_, _bu_, _bv_){
    return create(cst_legend, _bt_, _bu_, _bv_);
   }
   function footer(_bq_, _br_, _bs_){
    return create(cst_footer, _bq_, _br_, _bs_);
   }
   function h1(_bn_, _bo_, _bp_){return create(cst_h1, _bn_, _bo_, _bp_);}
   function h2(_bk_, _bl_, _bm_){return create(cst_h2, _bk_, _bl_, _bm_);}
   function h3(_bh_, _bi_, _bj_){return create(cst_h3, _bh_, _bi_, _bj_);}
   function h4(_be_, _bf_, _bg_){return create(cst_h4, _be_, _bf_, _bg_);}
   function h5(_bb_, _bc_, _bd_){return create(cst_h5, _bb_, _bc_, _bd_);}
   function h6(_a__, _a$_, _ba_){return create(cst_h6, _a__, _a$_, _ba_);}
   function header(_a7_, _a8_, _a9_){
    return create(cst_header, _a7_, _a8_, _a9_);
   }
   function html(_a4_, _a5_, _a6_){return create(cst_html, _a4_, _a5_, _a6_);}
   function input(_a1_, _a2_, _a3_){
    return create_childless(cst_input, _a1_, _a2_, _a3_);
   }
   function img(_aY_, _aZ_, _a0_){
    return create_childless(cst_img, _aY_, _aZ_, _a0_);
   }
   function input_deprecated(_aV_, _aW_, _aX_){
    return create(cst_input$0, _aV_, _aW_, _aX_);
   }
   function textarea(_aS_, _aT_, _aU_){
    return create(cst_textarea, _aS_, _aT_, _aU_);
   }
   function select(_aP_, _aQ_, _aR_){
    return create(cst_select, _aP_, _aQ_, _aR_);
   }
   function small(_aM_, _aN_, _aO_){
    return create(cst_small, _aM_, _aN_, _aO_);
   }
   function optgroup(_aJ_, _aK_, _aL_){
    return create(cst_optgroup, _aJ_, _aK_, _aL_);
   }
   function option(_aG_, _aH_, _aI_){
    return create(cst_option, _aG_, _aH_, _aI_);
   }
   function label(_aD_, _aE_, _aF_){
    return create(cst_label, _aD_, _aE_, _aF_);
   }
   function li(_aA_, _aB_, _aC_){return create(cst_li, _aA_, _aB_, _aC_);}
   function p(_ax_, _ay_, _az_){return create(cst_p, _ax_, _ay_, _az_);}
   function pre(_au_, _av_, _aw_){return create(cst_pre, _au_, _av_, _aw_);}
   function section(_ar_, _as_, _at_){
    return create(cst_section, _ar_, _as_, _at_);
   }
   function span(_ao_, _ap_, _aq_){return create(cst_span, _ao_, _ap_, _aq_);}
   function strong(_al_, _am_, _an_){
    return create(cst_strong, _al_, _am_, _an_);
   }
   function em(_ai_, _aj_, _ak_){return create(cst_em, _ai_, _aj_, _ak_);}
   function blockquote(_af_, _ag_, _ah_){
    return create(cst_blockquote, _af_, _ag_, _ah_);
   }
   function summary(_ac_, _ad_, _ae_){
    return create(cst_summary, _ac_, _ad_, _ae_);
   }
   function iframe(_$_, _aa_, _ab_){
    return create(cst_iframe, _$_, _aa_, _ab_);
   }
   function table(_Y_, _Z_, ___){return create(cst_table, _Y_, _Z_, ___);}
   function tbody(_V_, _W_, _X_){return create(cst_tbody, _V_, _W_, _X_);}
   function td(_S_, _T_, _U_){return create(cst_td, _S_, _T_, _U_);}
   function th(_P_, _Q_, _R_){return create(cst_th, _P_, _Q_, _R_);}
   function thead(_M_, _N_, _O_){return create(cst_thead, _M_, _N_, _O_);}
   function tr(_J_, _K_, _L_){return create(cst_tr, _J_, _K_, _L_);}
   function ul(_G_, _H_, _I_){return create(cst_ul, _G_, _H_, _I_);}
   function ol(_D_, _E_, _F_){return create(cst_ol, _D_, _E_, _F_);}
   function br(_A_, _B_, _C_){return create_childless(cst_br, _A_, _B_, _C_);}
   function hr(_x_, _y_, _z_){return create_childless(cst_hr, _x_, _y_, _z_);}
   function dl(_u_, _v_, _w_){return create(cst_dl, _u_, _v_, _w_);}
   function dt(_r_, _s_, _t_){return create(cst_dt, _r_, _s_, _t_);}
   function dd(_o_, _p_, _q_){return create(cst_dd, _o_, _p_, _q_);}
   function kbd(_l_, _m_, _n_){return create(cst_kbd, _l_, _m_, _n_);}
   function form(_i_, _j_, _k_){return create(cst_form, _i_, _j_, _k_);}
   function sexp_for_debugging(indent, sexp){
    var _h_ = [1, caml_call2(Base[85][14], indent, sexp)];
    return pre(0, _e_, caml_call1(Base_List[52], _h_));
   }
   function create$1(previous, current){
    var _f_ = t_to_js(current), _g_ = t_to_js(previous);
    return caml_call2(Virtual_dom_Raw[3][1], _g_, _f_);
   }
   function apply(t, elt){return caml_call2(Virtual_dom_Raw[3][2], elt, t);}
   function is_empty(t){return caml_call1(Virtual_dom_Raw[3][3], t);}
   var Patch = [0, create$1, apply, is_empty];
   function create$2(key, tag, attrs, children){
    return [2, element_expert(-847254184, tag, key, attrs, children)];
   }
   function create_svg$0(key, tag, attrs, children){
    return [2, element_expert(4153924, tag, key, attrs, children)];
   }
   var Expert = [0, create$2, create_svg$0];
   caml_call1(Ppx_inline_test_lib[7], cst_virtual_dom);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Virtual_dom_Node);
   var
    Virtual_dom_Node =
      [0,
       [0,
        tag,
        attrs,
        key,
        with_key,
        map_attrs,
        add_style,
        add_class,
        add_classes],
       [0],
       Aliases,
       none,
       fragment,
       text,
       textf,
       a,
       abbr,
       b,
       body,
       button,
       code,
       datalist,
       details,
       dialog,
       div,
       main,
       footer,
       fieldset,
       legend,
       h1,
       h2,
       h3,
       h4,
       h5,
       h6,
       header,
       html,
       input,
       img,
       textarea,
       select,
       small,
       optgroup,
       option,
       label,
       li,
       p,
       pre,
       section,
       span,
       strong,
       em,
       blockquote,
       summary,
       iframe,
       table,
       tbody,
       td,
       th,
       thead,
       tr,
       ul,
       ol,
       br,
       hr,
       dl,
       dt,
       dd,
       kbd,
       form,
       sexp_for_debugging,
       lazy,
       inner_html,
       inner_html_svg,
       input_deprecated,
       create,
       create_svg,
       to_dom,
       t_to_js,
       widget,
       widget_of_module,
       Patch,
       Expert];
   runtime.caml_register_global(97, Virtual_dom_Node, cst_Virtual_dom_Node$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Virtual_dom__Vdom
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Virtual_dom__Attr, Virtual_dom__Node
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Virtual_dom_Vdom = "Virtual_dom__Vdom",
    cst_virtual_dom = "virtual_dom";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Virtual_dom_Attr = global_data.Virtual_dom__Attr,
    Virtual_dom_Node = global_data.Virtual_dom__Node;
   caml_call1(Ppx_module_timer_runtime[4], cst_Virtual_dom_Vdom);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_virtual_dom);
   caml_call1(Ppx_expect_runtime[1][1], "src/vdom.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_virtual_dom, "vdom.ml");
   var
    create = Virtual_dom_Attr[1],
    create_float = Virtual_dom_Attr[2],
    string_property = Virtual_dom_Attr[3],
    bool_property = Virtual_dom_Attr[4],
    property = Virtual_dom_Attr[5],
    suppress_merge_warnings = Virtual_dom_Attr[6],
    create_hook = Virtual_dom_Attr[7],
    of_opt = Virtual_dom_Attr[8],
    many = Virtual_dom_Attr[9],
    many_without_merge = Virtual_dom_Attr[10],
    empty = Virtual_dom_Attr[11],
    symbol = Virtual_dom_Attr[12],
    combine = Virtual_dom_Attr[13],
    autofocus = Virtual_dom_Attr[14],
    checked = Virtual_dom_Attr[15],
    class$0 = Virtual_dom_Attr[16],
    classes = Virtual_dom_Attr[17],
    classes$0 = Virtual_dom_Attr[18],
    disabled = Virtual_dom_Attr[19],
    allow = Virtual_dom_Attr[20],
    for$0 = Virtual_dom_Attr[21],
    label = Virtual_dom_Attr[22],
    href = Virtual_dom_Attr[23],
    target = Virtual_dom_Attr[24],
    id = Virtual_dom_Attr[25],
    name = Virtual_dom_Attr[26],
    placeholder = Virtual_dom_Attr[27],
    role = Virtual_dom_Attr[28],
    selected = Virtual_dom_Attr[29],
    hidden = Virtual_dom_Attr[30],
    readonly = Virtual_dom_Attr[31],
    style = Virtual_dom_Attr[32],
    min = Virtual_dom_Attr[33],
    max = Virtual_dom_Attr[34],
    min_date = Virtual_dom_Attr[35],
    max_date = Virtual_dom_Attr[36],
    min_date_time = Virtual_dom_Attr[37],
    max_date_time = Virtual_dom_Attr[38],
    colspan = Virtual_dom_Attr[39],
    rowspan = Virtual_dom_Attr[40],
    draggable = Virtual_dom_Attr[41],
    tabindex = Virtual_dom_Attr[42],
    type = Virtual_dom_Attr[43],
    value = Virtual_dom_Attr[44],
    rows = Virtual_dom_Attr[45],
    cols = Virtual_dom_Attr[46],
    value_prop = Virtual_dom_Attr[47],
    title = Virtual_dom_Attr[48],
    alt = Virtual_dom_Attr[49],
    src = Virtual_dom_Attr[50],
    open = Virtual_dom_Attr[51],
    start = Virtual_dom_Attr[52],
    on_focus = Virtual_dom_Attr[53],
    on_blur = Virtual_dom_Attr[54],
    Unmerged_warning_mode = Virtual_dom_Attr[55],
    to_raw = Virtual_dom_Attr[56],
    on_input = Virtual_dom_Attr[57],
    on_change = Virtual_dom_Attr[58],
    on_file_input = Virtual_dom_Attr[59],
    on_cancel = Virtual_dom_Attr[60],
    on_click = Virtual_dom_Attr[61],
    on_close = Virtual_dom_Attr[62],
    on_contextmenu = Virtual_dom_Attr[63],
    on_double_click = Virtual_dom_Attr[64],
    on_drag = Virtual_dom_Attr[65],
    on_dragstart = Virtual_dom_Attr[66],
    on_dragend = Virtual_dom_Attr[67],
    on_dragenter = Virtual_dom_Attr[68],
    on_dragleave = Virtual_dom_Attr[69],
    on_dragover = Virtual_dom_Attr[70],
    on_drop = Virtual_dom_Attr[71],
    on_mousemove = Virtual_dom_Attr[72],
    on_mouseup = Virtual_dom_Attr[73],
    on_mousedown = Virtual_dom_Attr[74],
    on_mouseenter = Virtual_dom_Attr[75],
    on_mouseleave = Virtual_dom_Attr[76],
    on_mouseover = Virtual_dom_Attr[77],
    on_mouseout = Virtual_dom_Attr[78],
    on_keyup = Virtual_dom_Attr[79],
    on_keypress = Virtual_dom_Attr[80],
    on_keydown = Virtual_dom_Attr[81],
    on_scroll = Virtual_dom_Attr[82],
    on_load = Virtual_dom_Attr[83],
    on_error = Virtual_dom_Attr[84],
    on_submit = Virtual_dom_Attr[85],
    on_pointerdown = Virtual_dom_Attr[86],
    on_pointerup = Virtual_dom_Attr[87],
    on_mousewheel = Virtual_dom_Attr[88],
    on_wheel = Virtual_dom_Attr[89],
    on_copy = Virtual_dom_Attr[90],
    on_cut = Virtual_dom_Attr[91],
    on_paste = Virtual_dom_Attr[92],
    on_reset = Virtual_dom_Attr[93],
    on_animationend = Virtual_dom_Attr[94],
    css_var = Virtual_dom_Attr[95],
    css_vars_no_kebabs = Virtual_dom_Attr[96],
    Multi = Virtual_dom_Attr[97],
    Always_focus_hook = Virtual_dom_Attr[98],
    Single_focus_hook = Virtual_dom_Attr[99],
    No_op_hook = Virtual_dom_Attr[100],
    Expert = Virtual_dom_Attr[101],
    Attr =
      [0,
       create,
       create_float,
       string_property,
       bool_property,
       property,
       suppress_merge_warnings,
       create_hook,
       of_opt,
       many,
       many_without_merge,
       empty,
       symbol,
       combine,
       autofocus,
       checked,
       class$0,
       classes,
       classes$0,
       disabled,
       allow,
       for$0,
       label,
       href,
       target,
       id,
       name,
       placeholder,
       role,
       selected,
       hidden,
       readonly,
       style,
       min,
       max,
       min_date,
       max_date,
       min_date_time,
       max_date_time,
       colspan,
       rowspan,
       draggable,
       tabindex,
       type,
       value,
       rows,
       cols,
       value_prop,
       title,
       alt,
       src,
       open,
       start,
       on_focus,
       on_blur,
       Unmerged_warning_mode,
       to_raw,
       on_input,
       on_change,
       on_file_input,
       on_cancel,
       on_click,
       on_close,
       on_contextmenu,
       on_double_click,
       on_drag,
       on_dragstart,
       on_dragend,
       on_dragenter,
       on_dragleave,
       on_dragover,
       on_drop,
       on_mousemove,
       on_mouseup,
       on_mousedown,
       on_mouseenter,
       on_mouseleave,
       on_mouseover,
       on_mouseout,
       on_keyup,
       on_keypress,
       on_keydown,
       on_scroll,
       on_load,
       on_error,
       on_submit,
       on_pointerdown,
       on_pointerup,
       on_mousewheel,
       on_wheel,
       on_copy,
       on_cut,
       on_paste,
       on_reset,
       on_animationend,
       css_var,
       css_vars_no_kebabs,
       Multi,
       Always_focus_hook,
       Single_focus_hook,
       No_op_hook,
       Expert],
    Attr$0 =
      [0,
       Attr[1],
       Attr[2],
       Attr[3],
       Attr[4],
       Attr[5],
       Attr[6],
       Attr[7],
       Attr[8],
       Attr[9],
       Attr[10],
       Attr[11],
       Attr[12],
       Attr[13],
       Attr[14],
       Attr[15],
       Attr[16],
       Attr[17],
       Attr[18],
       Attr[19],
       Attr[20],
       Attr[21],
       Attr[22],
       Attr[23],
       Attr[24],
       Attr[25],
       Attr[26],
       Attr[27],
       Attr[28],
       Attr[29],
       Attr[30],
       Attr[31],
       Attr[32],
       Attr[33],
       Attr[34],
       Attr[35],
       Attr[36],
       Attr[37],
       Attr[38],
       Attr[39],
       Attr[40],
       Attr[41],
       Attr[42],
       Attr[43],
       Attr[44],
       Attr[45],
       Attr[46],
       Attr[47],
       Attr[48],
       Attr[49],
       Attr[50],
       Attr[51],
       Attr[52],
       Attr[53],
       Attr[54],
       Attr[56],
       Attr[57],
       Attr[58],
       Attr[59],
       Attr[60],
       Attr[61],
       Attr[62],
       Attr[63],
       Attr[64],
       Attr[65],
       Attr[66],
       Attr[67],
       Attr[68],
       Attr[69],
       Attr[70],
       Attr[71],
       Attr[72],
       Attr[73],
       Attr[74],
       Attr[75],
       Attr[76],
       Attr[77],
       Attr[78],
       Attr[79],
       Attr[80],
       Attr[81],
       Attr[82],
       Attr[83],
       Attr[84],
       Attr[85],
       Attr[86],
       Attr[87],
       Attr[88],
       Attr[89],
       Attr[90],
       Attr[91],
       Attr[92],
       Attr[93],
       Attr[94],
       Attr[95],
       Attr[96]],
    Node =
      [0,
       Virtual_dom_Node[4],
       Virtual_dom_Node[5],
       Virtual_dom_Node[6],
       Virtual_dom_Node[7],
       Virtual_dom_Node[8],
       Virtual_dom_Node[9],
       Virtual_dom_Node[10],
       Virtual_dom_Node[11],
       Virtual_dom_Node[12],
       Virtual_dom_Node[13],
       Virtual_dom_Node[14],
       Virtual_dom_Node[15],
       Virtual_dom_Node[16],
       Virtual_dom_Node[17],
       Virtual_dom_Node[18],
       Virtual_dom_Node[19],
       Virtual_dom_Node[20],
       Virtual_dom_Node[21],
       Virtual_dom_Node[22],
       Virtual_dom_Node[23],
       Virtual_dom_Node[24],
       Virtual_dom_Node[25],
       Virtual_dom_Node[26],
       Virtual_dom_Node[27],
       Virtual_dom_Node[28],
       Virtual_dom_Node[29],
       Virtual_dom_Node[30],
       Virtual_dom_Node[31],
       Virtual_dom_Node[32],
       Virtual_dom_Node[33],
       Virtual_dom_Node[34],
       Virtual_dom_Node[35],
       Virtual_dom_Node[36],
       Virtual_dom_Node[37],
       Virtual_dom_Node[38],
       Virtual_dom_Node[39],
       Virtual_dom_Node[40],
       Virtual_dom_Node[41],
       Virtual_dom_Node[42],
       Virtual_dom_Node[43],
       Virtual_dom_Node[44],
       Virtual_dom_Node[45],
       Virtual_dom_Node[46],
       Virtual_dom_Node[47],
       Virtual_dom_Node[48],
       Virtual_dom_Node[49],
       Virtual_dom_Node[50],
       Virtual_dom_Node[51],
       Virtual_dom_Node[52],
       Virtual_dom_Node[53],
       Virtual_dom_Node[54],
       Virtual_dom_Node[55],
       Virtual_dom_Node[56],
       Virtual_dom_Node[57],
       Virtual_dom_Node[58],
       Virtual_dom_Node[59],
       Virtual_dom_Node[60],
       Virtual_dom_Node[61],
       Virtual_dom_Node[62],
       Virtual_dom_Node[63],
       Virtual_dom_Node[64],
       Virtual_dom_Node[65],
       Virtual_dom_Node[66],
       Virtual_dom_Node[67],
       Virtual_dom_Node[68],
       Virtual_dom_Node[69],
       Virtual_dom_Node[70],
       Virtual_dom_Node[71],
       Virtual_dom_Node[72],
       Virtual_dom_Node[73]],
    Html_syntax = [0, Attr$0, Node],
    Html_syntax$0 = [0, Html_syntax];
   caml_call1(Ppx_inline_test_lib[7], cst_virtual_dom);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Virtual_dom_Vdom);
   var Virtual_dom_Vdom = [0, Attr, Html_syntax$0];
   runtime.caml_register_global(13, Virtual_dom_Vdom, cst_Virtual_dom_Vdom);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Virtual_dom
//# unitInfo: Requires: Css_gen, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Virtual_dom__Dom_float
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Virtual_dom = "Virtual_dom",
    cst_virtual_dom = "virtual_dom";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Virtual_dom_Dom_float = global_data.Virtual_dom__Dom_float,
    Css_gen = global_data.Css_gen;
   caml_call1(Ppx_module_timer_runtime[4], cst_Virtual_dom);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_virtual_dom);
   caml_call1(Ppx_expect_runtime[1][1], "src/virtual_dom.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_virtual_dom, "virtual_dom.ml");
   Css_gen[99][1][1] = Virtual_dom_Dom_float[6];
   var Top_level_effects = [0];
   caml_call1(Ppx_inline_test_lib[7], cst_virtual_dom);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Virtual_dom);
   var Virtual_dom = [0, Top_level_effects];
   runtime.caml_register_global(13, Virtual_dom, cst_Virtual_dom);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
