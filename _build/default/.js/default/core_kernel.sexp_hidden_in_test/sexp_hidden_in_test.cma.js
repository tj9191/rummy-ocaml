// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Sexp_hidden_in_test
//# unitInfo: Requires: Bin_prot__Common, Bin_prot__Shape, Bin_shape, Core, Expect_test_config, Inline_test_config, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_expect_runtime__Test_block, Ppx_expect_runtime__Test_node, Ppx_expect_runtime__Types, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$0 = "",
    cst_Sexp_hidden_in_test$0 = "Sexp_hidden_in_test",
    cst_a$3 = "a",
    cst_sexp_hidden_in_test$0 = "sexp_hidden_in_test",
    cst_sexp_hidden_in_test_src_se$6 =
      "sexp_hidden_in_test/src/sexp_hidden_in_test.ml",
    cst_t$3 = "t";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   function caml_call14
   (f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13){
    return (f.l >= 0 ? f.l : f.l = f.length) == 14
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13)
            : runtime.caml_call_gen
              (f,
               [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    cst = cst$0,
    Core = global_data.Core,
    Ppx_expect_runtime_Types = global_data.Ppx_expect_runtime__Types,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Expect_test_config = global_data.Expect_test_config,
    Ppx_expect_runtime_Test_block = global_data.Ppx_expect_runtime__Test_block,
    Ppx_expect_runtime_Test_node = global_data.Ppx_expect_runtime__Test_node,
    Inline_test_config = global_data.Inline_test_config,
    Bin_shape = global_data.Bin_shape,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Bin_prot_Common = global_data.Bin_prot__Common,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Sexp_hidden_in_test$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_sexp_hidden_in_test$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_sexp_hidden_in_test_src_se$6);
   caml_call2
    (Ppx_inline_test_lib[6],
     cst_sexp_hidden_in_test$0,
     "sexp_hidden_in_test.ml");
   var
    _j_ = [0, [0, [0, " <hidden_in_test> ", [0, cst$0]], [0, 951, 966, 988]]],
    _k_ = [0, 951, 957, 989],
    _l_ = [0, "Turned on"],
    _m_ = [0, 873, 877, 989],
    _n_ = [0, 951, 989, 989],
    _o_ = [0, 873, 877, 989],
    cst_sexp_hidden_in_test_src_se$4 = cst_sexp_hidden_in_test_src_se$6,
    _d_ = [0, [0, [0, " 1024 ", [0, cst$0]], [0, 1080, 1095, 1105]]],
    _e_ = [0, 1080, 1086, 1106],
    _f_ = [0, "Turned off"],
    _g_ = [0, 998, 1002, 1106],
    _h_ = [0, 1080, 1106, 1106],
    _i_ = [0, 998, 1002, 1106],
    cst_sexp_hidden_in_test_src_se$3 = cst_sexp_hidden_in_test_src_se$6,
    cst_t$2 = cst_t$3,
    _b_ = [0, "<hidden_in_test>"],
    _a_ = [5, "sexp_hidden_in_test/src/sexp_hidden_in_test.ml.Make.t"],
    cst_t$0 = cst_t$3,
    cst_a = cst_a$3,
    cst_sexp_hidden_in_test_src_se =
      "sexp_hidden_in_test/src/sexp_hidden_in_test.ml:7:14",
    cst_a$0 = cst_a$3,
    cst_t = cst_t$3,
    cst_sexp_hidden_in_test_src_se$0 =
      "sexp_hidden_in_test/src/sexp_hidden_in_test.ml:7:2",
    cst_a$1 = cst_a$3,
    cst_sexp_hidden_in_test_src_se$1 =
      "sexp_hidden_in_test/src/sexp_hidden_in_test.ml:14:23",
    cst_a$2 = cst_a$3,
    cst_t$1 = cst_t$3,
    cst_sexp_hidden_in_test_src_se$2 =
      "sexp_hidden_in_test/src/sexp_hidden_in_test.ml:14:4",
    cst_sexp_hidden_in_test_src_se$5 = cst_sexp_hidden_in_test_src_se$6,
    cst_sexp_hidden_in_test = cst_sexp_hidden_in_test$0,
    cst_Sexp_hidden_in_test = cst_Sexp_hidden_in_test$0;
   function Make(M){
    var
     _D_ = caml_call1(Bin_shape[3][1], cst_a),
     _E_ = caml_call1(Bin_shape[4][1], cst_sexp_hidden_in_test_src_se),
     _F_ = caml_call2(Bin_prot_Shape[11], _E_, _D_),
     _G_ = [0, caml_call1(Bin_shape[3][1], cst_a$0), 0],
     _H_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t), _G_, _F_], 0],
     _I_ = caml_call1(Bin_shape[4][1], cst_sexp_hidden_in_test_src_se$0),
     group = caml_call2(Bin_prot_Shape[2], _I_, _H_);
    function bin_shape_t(a){
     var _$_ = caml_call1(Bin_shape[2][1], cst_t$0);
     return caml_call1(caml_call2(Bin_prot_Shape[10], group, _$_), [0, a, 0]);
    }
    function bin_size_t(size_of_a){return size_of_a;}
    function bin_write_t(write_a){return write_a;}
    function bin_writer_t(bin_writer_a){
     function ___(v){return caml_call1(bin_writer_a[2], v);}
     return [0, function(v){return caml_call1(bin_writer_a[1], v);}, ___];
    }
    function bin_read_t(of_a, buf, pos_ref, vint){
     return caml_call2(Bin_prot_Common[18], _a_, pos_ref[1]);
    }
    function bin_read_t$0(of_a){return of_a;}
    function bin_reader_t(bin_reader_a){
     function _Z_(buf, pos_ref, vtag){
      return bin_read_t(bin_reader_a[1], buf, pos_ref, vtag);
     }
     return [0,
             function(buf, pos_ref){
              return caml_call2(bin_reader_a[1], buf, pos_ref);
             },
             _Z_];
    }
    function bin_t(bin_a){
     var _X_ = bin_reader_t(bin_a[3]), _Y_ = bin_writer_t(bin_a[2]);
     return [0, bin_shape_t(bin_a[1]), _Y_, _X_];
    }
    function compare(cmp_a, a_001, b_002){
     return caml_call2(cmp_a, a_001, b_002);
    }
    function equal(cmp_a, a_003, b_004){
     return caml_call2(cmp_a, a_003, b_004);
    }
    function t_of_sexp(of_a_005){return of_a_005;}
    function sexp_of_t(sexp_of_a, a){
     return M[1] ? _b_ : caml_call1(sexp_of_a, a);
    }
    var
     _J_ = caml_call1(Bin_shape[3][1], cst_a$1),
     _K_ = caml_call1(Bin_shape[4][1], cst_sexp_hidden_in_test_src_se$1),
     _L_ = bin_shape_t(caml_call2(Bin_prot_Shape[11], _K_, _J_)),
     _M_ = [0, caml_call1(Bin_shape[3][1], cst_a$2), 0],
     _N_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$1), _M_, _L_], 0],
     _O_ = caml_call1(Bin_shape[4][1], cst_sexp_hidden_in_test_src_se$2),
     group$0 = caml_call2(Bin_prot_Shape[2], _O_, _N_);
    function bin_shape_t$0(a){
     var _W_ = caml_call1(Bin_shape[2][1], cst_t$2);
     return caml_call1
             (caml_call2(Bin_prot_Shape[10], group$0, _W_), [0, a, 0]);
    }
    function bin_size_t$0(size_of_a, v){return caml_call1(size_of_a, v);}
    function bin_write_t$0(write_a, buf, pos, v){return caml_call3(write_a, buf, pos, v);
    }
    function bin_writer_t$0(bin_writer_a){
     function _S_(v){
      var _T_ = bin_writer_a[2];
      return function(_U_, _V_){return bin_write_t$0(_T_, v, _U_, _V_);};
     }
     return [0, function(v){return bin_size_t$0(bin_writer_a[1], v);}, _S_];
    }
    function bin_read_t$1(of_a, buf, pos_ref, vint){return bin_read_t(of_a, buf, pos_ref, vint);
    }
    function bin_read_t$2(of_a, buf, pos_ref){return caml_call2(of_a, buf, pos_ref);
    }
    function bin_reader_t$0(bin_reader_a){
     function _R_(buf, pos_ref, vtag){
      return bin_read_t$1(bin_reader_a[1], buf, pos_ref, vtag);
     }
     return [0,
             function(buf, pos_ref){
              return bin_read_t$2(bin_reader_a[1], buf, pos_ref);
             },
             _R_];
    }
    function bin_t$0(bin_a){
     var _P_ = bin_reader_t$0(bin_a[3]), _Q_ = bin_writer_t$0(bin_a[2]);
     return [0, bin_shape_t$0(bin_a[1]), _Q_, _P_];
    }
    function compare$0(cmp_a, a_008, b_009){
     return compare
             (function(a_010, b_011){return caml_call2(cmp_a, a_010, b_011);},
              a_008,
              b_009);
    }
    function equal$0(cmp_a, a_012, b_013){
     return equal
             (function(a_014, b_015){return caml_call2(cmp_a, a_014, b_015);},
              a_012,
              b_013);
    }
    var
     With_non_roundtripping_in_test =
       [0,
        bin_shape_t$0,
        bin_size_t$0,
        bin_write_t$0,
        bin_writer_t$0,
        bin_read_t$1,
        bin_read_t$2,
        bin_reader_t$0,
        bin_t$0,
        compare$0,
        equal$0,
        t_of_sexp,
        sexp_of_t];
    return [0,
            bin_shape_t,
            bin_size_t,
            bin_write_t,
            bin_writer_t,
            bin_read_t,
            bin_read_t$0,
            bin_reader_t,
            bin_t,
            compare,
            equal,
            ,
            sexp_of_t,
            With_non_roundtripping_in_test];
   }
   function _c_(param){
    var
     Sexp_hidden_in_test_turned_off = Make([0, 0]),
     Sexp_hidden_in_test_turned_on = Make([0, 1]);
    if(typeof Ppx_inline_test_lib[3] !== "number"){
     var
      Ppx_expect_test_block$0 =
        caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
      _u_ =
        function(param){
         var
          _B_ = Sexp_hidden_in_test_turned_on[12].call(null, Core[389], 1024);
         caml_call2(Core[256], 0, _B_);
         var _C_ = caml_call1(Ppx_expect_runtime_Types[4][1], 0);
         return caml_call1(Ppx_expect_test_block$0[2], _C_);
        },
      _v_ =
        caml_call3
         (Ppx_expect_runtime_Test_node[1][1],
          [0, Ppx_expect_runtime_Types[1][1]],
          _k_,
          _j_),
      _w_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 0), _v_], 0],
      _x_ = caml_call1(Ppx_expect_runtime_Types[4][1], 2),
      _y_ = caml_call1(Ppx_expect_runtime_Types[4][1], 1);
     caml_call14
      (Ppx_expect_test_block$0[3],
       cst_sexp_hidden_in_test_src_se$4,
       36,
       _o_,
       _n_,
       _m_,
       [0, Ppx_expect_runtime_Types[1][1]],
       0,
       _y_,
       _x_,
       _l_,
       0,
       Inline_test_config,
       _w_,
       _u_);
    }
    if(typeof Ppx_inline_test_lib[3] !== "number"){
     var
      Ppx_expect_test_block =
        caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
      _p_ =
        function(param){
         var
          _z_ = Sexp_hidden_in_test_turned_off[12].call(null, Core[389], 1024);
         caml_call2(Core[256], 0, _z_);
         var _A_ = caml_call1(Ppx_expect_runtime_Types[4][1], 3);
         return caml_call1(Ppx_expect_test_block[2], _A_);
        },
      _q_ =
        caml_call3
         (Ppx_expect_runtime_Test_node[1][1],
          [0, Ppx_expect_runtime_Types[1][1]],
          _e_,
          _d_),
      _r_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 3), _q_], 0],
      _s_ = caml_call1(Ppx_expect_runtime_Types[4][1], 5),
      _t_ = caml_call1(Ppx_expect_runtime_Types[4][1], 4);
     caml_call14
      (Ppx_expect_test_block[3],
       cst_sexp_hidden_in_test_src_se$3,
       41,
       _i_,
       _h_,
       _g_,
       [0, Ppx_expect_runtime_Types[1][1]],
       0,
       _t_,
       _s_,
       _f_,
       0,
       Inline_test_config,
       _r_,
       _p_);
    }
    return 0;
   }
   caml_call8
    (Ppx_inline_test_lib[10],
     Inline_test_config,
     cst,
     0,
     cst_sexp_hidden_in_test_src_se$5,
     18,
     0,
     733,
     _c_);
   var
    am_running_test = Core[628],
    include = Make([0, am_running_test]),
    bin_shape_t = include[1],
    bin_size_t = include[2],
    bin_write_t = include[3],
    bin_writer_t = include[4],
    bin_read_t = include[5],
    bin_read_t$0 = include[6],
    bin_reader_t = include[7],
    bin_t = include[8],
    compare = include[9],
    equal = include[10],
    sexp_of_t = include[12],
    With_non_roundtripping_in_test = include[13];
   caml_call1(Ppx_inline_test_lib[7], cst_sexp_hidden_in_test);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Sexp_hidden_in_test);
   var
    Sexp_hidden_in_test =
      [0,
       bin_shape_t,
       bin_size_t,
       bin_write_t,
       bin_read_t$0,
       bin_read_t,
       bin_writer_t,
       bin_reader_t,
       bin_t,
       compare,
       equal,
       sexp_of_t,
       [0,
        With_non_roundtripping_in_test[1],
        With_non_roundtripping_in_test[2],
        With_non_roundtripping_in_test[3],
        With_non_roundtripping_in_test[6],
        With_non_roundtripping_in_test[5],
        With_non_roundtripping_in_test[4],
        With_non_roundtripping_in_test[7],
        With_non_roundtripping_in_test[8],
        With_non_roundtripping_in_test[9],
        With_non_roundtripping_in_test[10],
        With_non_roundtripping_in_test[11],
        With_non_roundtripping_in_test[12]]];
   runtime.caml_register_global
    (50, Sexp_hidden_in_test, cst_Sexp_hidden_in_test$0);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLjAsImZpbGUiOiJzZXhwX2hpZGRlbl9pbl90ZXN0LmNtYS5qcyIsInNvdXJjZVJvb3QiOiIiLCJuYW1lcyI6WyJncm91cCIsImJpbl9zaGFwZV90IiwiYSIsImJpbl9zaXplX3QiLCJzaXplX29mX2EiLCJiaW5fd3JpdGVfdCIsIndyaXRlX2EiLCJiaW5fd3JpdGVyX3QiLCJiaW5fd3JpdGVyX2EiLCJ2IiwiYmluX3JlYWRfdCIsIm9mX2EiLCJidWYiLCJwb3NfcmVmIiwidmludCIsImJpbl9yZWFkX3QkMCIsImJpbl9yZWFkZXJfdCIsImJpbl9yZWFkZXJfYSIsInZ0YWciLCJiaW5fdCIsImJpbl9hIiwiY29tcGFyZSIsImNtcF9hIiwiYV8wMDEiLCJiXzAwMiIsImVxdWFsIiwiYV8wMDMiLCJiXzAwNCIsInRfb2Zfc2V4cCIsIm9mX2FfMDA1Iiwic2V4cF9vZl90Iiwic2V4cF9vZl9hIiwiZ3JvdXAkMCIsImJpbl9zaGFwZV90JDAiLCJiaW5fc2l6ZV90JDAiLCJiaW5fd3JpdGVfdCQwIiwicG9zIiwiYmluX3dyaXRlcl90JDAiLCJiaW5fcmVhZF90JDEiLCJiaW5fcmVhZF90JDIiLCJiaW5fcmVhZGVyX3QkMCIsImJpbl90JDAiLCJjb21wYXJlJDAiLCJhXzAwOCIsImJfMDA5IiwiYV8wMTAiLCJiXzAxMSIsImVxdWFsJDAiLCJhXzAxMiIsImJfMDEzIiwiYV8wMTQiLCJiXzAxNSIsImFtX3J1bm5pbmdfdGVzdCJdLCJzb3VyY2VzIjpbIi9Vc2Vycy90eWxhbm1vcmFuLy5vcGFtLzUuMS4xL2xpYi9jb3JlX2tlcm5lbC9zZXhwX2hpZGRlbl9pbl90ZXN0L3NleHBfaGlkZGVuX2luX3Rlc3QubWwiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0c7Ozs7O0c7Ozs7O0c7Ozs7O0c7Ozs7O0c7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFNVTs7OztLQUFBLFVBQUE7S0FBUixjQUFRO0tB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Z0M7TUFBaEM7UUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7S0FLQTs7Ozs7U0FsQkE7O1NBaUJBO1NBQ0EsVUFBQTtTQUFBLE9BQUE7UUFBb0I7TUFBcEI7UUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFNQXNCO3VCQUFBQTtJQTFDSW5EO0lBQVJFO0lBQUFFO0lBQUFFO0lBQUFHO0lBQUFLO0lBQUFDO0lBQUFHO0lBQUFFO0lBQUFJO0lBRUlLOzs7Ozs7Ozs7T0FGSTdCO09BQVJFO09BQUFFO09BQUFVO09BQUFMO09BQUFIO09BQUFTO09BQUFHO09BQUFFO09BQUFJO09BRUlLOzs7Ozs7Ozs7Ozs7Ozs7OztFIiwic291cmNlc0NvbnRlbnQiOlsib3BlbiEgQ29yZVxuXG5tb2R1bGUgTWFrZSAoTSA6IHNpZ1xuICB2YWwgYW1fcnVubmluZ190ZXN0IDogYm9vbFxuZW5kKSA9XG5zdHJ1Y3RcbiAgdHlwZSAnYSB0ID0gJ2EgW0BAZGVyaXZpbmcgYmluX2lvLCBjb21wYXJlLCBlcXVhbCwgc2V4cF1cblxuICBsZXQgc2V4cF9vZl90IHNleHBfb2ZfYSBhID1cbiAgICBpZiBNLmFtX3J1bm5pbmdfdGVzdCB0aGVuIFNleHAuQXRvbSBcIjxoaWRkZW5faW5fdGVzdD5cIiBlbHNlIHNleHBfb2ZfYSBhXG4gIDs7XG5cbiAgbW9kdWxlIFdpdGhfbm9uX3JvdW5kdHJpcHBpbmdfaW5fdGVzdF9vZl9zZXhwID0gc3RydWN0XG4gICAgdHlwZSBub25yZWMgJ2EgdCA9ICdhIHQgW0BAZGVyaXZpbmcgYmluX2lvLCBjb21wYXJlLCBlcXVhbCwgc2V4cF1cbiAgZW5kXG5lbmRcblxubGV0JXRlc3RfbW9kdWxlIF8gPVxuICAobW9kdWxlIHN0cnVjdFxuICAgIG1vZHVsZSBUdXJuZWRfb2ZmID0gc3RydWN0XG4gICAgICBtb2R1bGUgU2V4cF9oaWRkZW5faW5fdGVzdF90dXJuZWRfb2ZmID0gTWFrZSAoc3RydWN0XG4gICAgICAgIGxldCBhbV9ydW5uaW5nX3Rlc3QgPSBmYWxzZVxuICAgICAgZW5kKVxuXG4gICAgICB0eXBlIG5vbnJlYyB0ID0gaW50IFNleHBfaGlkZGVuX2luX3Rlc3RfdHVybmVkX29mZi50IFtAQGRlcml2aW5nIHNleHBfb2ZdXG4gICAgZW5kXG5cbiAgICBtb2R1bGUgVHVybmVkX29uID0gc3RydWN0XG4gICAgICBtb2R1bGUgU2V4cF9oaWRkZW5faW5fdGVzdF90dXJuZWRfb24gPSBNYWtlIChzdHJ1Y3RcbiAgICAgICAgbGV0IGFtX3J1bm5pbmdfdGVzdCA9IHRydWVcbiAgICAgIGVuZClcblxuICAgICAgdHlwZSBub25yZWMgdCA9IGludCBTZXhwX2hpZGRlbl9pbl90ZXN0X3R1cm5lZF9vbi50IFtAQGRlcml2aW5nIHNleHBfb2ZdXG4gICAgZW5kXG5cbiAgICBsZXQlZXhwZWN0X3Rlc3QgXCJUdXJuZWQgb25cIiA9XG4gICAgICBwcmludF9zIFslc2V4cCAoMTAyNCA6IFR1cm5lZF9vbi50KV07XG4gICAgICBbJWV4cGVjdCB7fCA8aGlkZGVuX2luX3Rlc3Q+IHx9XVxuICAgIDs7XG5cbiAgICBsZXQlZXhwZWN0X3Rlc3QgXCJUdXJuZWQgb2ZmXCIgPVxuICAgICAgcHJpbnRfcyAoWyVzZXhwX29mOiBUdXJuZWRfb2ZmLnRdIDEwMjQpO1xuICAgICAgWyVleHBlY3Qge3wgMTAyNCB8fV1cbiAgICA7O1xuICBlbmQpXG47O1xuXG5pbmNsdWRlIE1ha2UgKHN0cnVjdFxuICBsZXQgYW1fcnVubmluZ190ZXN0ID0gYW1fcnVubmluZ190ZXN0XG5lbmQpXG4iXX0=
