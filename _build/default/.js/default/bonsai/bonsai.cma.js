// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Bonsai__
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Bonsai = [0],
    Bonsai$0 = [0, Bonsai];
   runtime.caml_register_global(0, Bonsai$0, "Bonsai__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Action
//# unitInfo: Requires: Core, Core__Nothing, Core__Option, Core__Sexp, Core__Type_equal, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Assoc = "Assoc",
    cst_Bonsai_Action$0 = "Bonsai__Action",
    cst_Lazy = "Lazy",
    cst_Switch = "Switch",
    cst_bonsai$0 = "bonsai";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Core_Type_equal = global_data.Core__Type_equal,
    Core = global_data.Core,
    Core_Sexp = global_data.Core__Sexp,
    Core_Option = global_data.Core__Option,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Core_Nothing = global_data.Core__Nothing;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Action$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/action.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai$0, "action.ml");
   var
    _a_ = [0, 0],
    _b_ = [0, 0],
    _c_ = [0, 0],
    _d_ = [0, 0],
    _e_ = [0, 0],
    _f_ = [0, 0],
    _g_ = [0, 0],
    _h_ = [0, 0],
    _i_ = [0, cst_Switch],
    _j_ = [0, cst_Lazy],
    _k_ = [0, "Leaf"],
    _l_ = [0, "Sub"],
    _m_ = [0, "Wrap"],
    _n_ = [0, "Model_reset"],
    _o_ = [0, cst_Assoc],
    _p_ = [0, cst_Assoc],
    _B_ = [0, "Assoc_on"],
    _A_ = [0, cst_Assoc],
    _y_ = [0, "Model_reset_outer"],
    _z_ = [0, "Model_reset_inner"],
    _w_ = [0, "Wrap_inner"],
    _x_ = [0, "Wrap_outer"],
    _u_ = [0, "Sub_from"],
    _v_ = [0, "Sub_into"],
    _s_ = [0, "Leaf_static"],
    _t_ = [0, "Leaf_dynamic"],
    _r_ = [0, cst_Lazy],
    _q_ = [0, cst_Switch],
    cst_Nothing_t = "Nothing.t",
    cst_bonsai = cst_bonsai$0,
    cst_Bonsai_Action = cst_Bonsai_Action$0;
   function same_witness(a, b){
    if(typeof a === "number"){
     if(0 === a){
      if(typeof b === "number" && ! b) return _a_;
     }
     else if(typeof b === "number" && b) return _b_;
    }
    else
     switch(a[0]){
       case 0:
        if(typeof b !== "number" && 0 === b[0]){
         var action = b[1], action$0 = a[1];
         return caml_call2(Core_Type_equal[8][9], action$0, action) ? _c_ : 0;
        }
        break;
       case 1:
        if(typeof b !== "number" && 1 === b[0]){
         var
          into = b[2],
          from = b[1],
          into$0 = a[2],
          from$0 = a[1],
          same_from = same_witness(from$0, from),
          same_into = same_witness(into$0, into);
         if(same_from && same_into) return _d_;
         return 0;
        }
        break;
       case 2:
        if(typeof b !== "number" && 2 === b[0]){
         var
          outer = b[2],
          inner = b[1],
          outer$0 = a[2],
          inner$0 = a[1],
          same_inner = same_witness(inner$0, inner),
          same_outer = caml_call2(Core_Type_equal[8][9], outer$0, outer);
         if(same_inner && same_outer) return _e_;
         return 0;
        }
        break;
       case 3:
        if(typeof b !== "number" && 3 === b[0]){
         var inner$1 = b[1], inner$2 = a[1];
         return same_witness(inner$2, inner$1) ? _f_ : 0;
        }
        break;
       case 4:
        if(typeof b !== "number" && 4 === b[0]){
         var
          action$1 = b[2],
          key = b[1],
          action$2 = a[2],
          key$0 = a[1],
          same_key = caml_call2(Core_Type_equal[8][9], key$0, key),
          same_action = same_witness(action$2, action$1);
         if(same_key && same_action) return _g_;
         return 0;
        }
        break;
       default:
        if(typeof b !== "number" && 5 === b[0]){
         var
          action$3 = b[3],
          model_key = b[2],
          io_key = b[1],
          action$4 = a[3],
          model_key$0 = a[2],
          io_key$0 = a[1],
          same_io_key = caml_call2(Core_Type_equal[8][9], io_key$0, io_key),
          same_model_key =
            caml_call2(Core_Type_equal[8][9], model_key$0, model_key),
          same_action$0 = same_witness(action$4, action$3);
         if(same_io_key && same_model_key && same_action$0) return _h_;
         return 0;
        }
     }
    return 0;
   }
   function sexp_of_t(param){
    if(typeof param === "number") return 0 === param ? _i_ : _j_;
    switch(param[0]){
      case 0:
       var action = param[1];
       return [1,
               [0,
                _k_,
                [0, caml_call2(Core_Type_equal[8][1], Core[149], action), 0]]];
      case 1:
       var
        into = param[2],
        from = param[1],
        from$0 = sexp_of_t(from),
        into$0 = sexp_of_t(into),
        _Q_ = [0, caml_call1(Core_Sexp[93], into$0), 0];
       return [1, [0, _l_, [0, caml_call1(Core_Sexp[93], from$0), _Q_]]];
      case 2:
       var
        outer = param[2],
        inner = param[1],
        inner$0 = sexp_of_t(inner),
        _R_ = [0, caml_call2(Core_Type_equal[8][1], Core[149], outer), 0];
       return [1, [0, _m_, [0, caml_call1(Core_Sexp[93], inner$0), _R_]]];
      case 3:
       var inner$1 = param[1], inner$2 = sexp_of_t(inner$1);
       return [1, [0, _n_, [0, caml_call1(Core_Sexp[93], inner$2), 0]]];
      case 4:
       var
        action$0 = param[2],
        x_003 = param[1],
        action$1 = sexp_of_t(action$0),
        _S_ = [0, caml_call1(Core_Sexp[93], action$1), 0];
       return [1,
               [0,
                _o_,
                [0, caml_call2(Core_Type_equal[8][1], Core[149], x_003), _S_]]];
      default:
       var
        action$2 = param[3],
        model_key = param[2],
        io_key = param[1],
        action$3 = sexp_of_t(action$2),
        _T_ = [0, caml_call1(Core_Sexp[93], action$3), 0],
        _U_ =
          [0, caml_call2(Core_Type_equal[8][1], Core[149], model_key), _T_];
       return [1,
               [0,
                _p_,
                [0, caml_call2(Core_Type_equal[8][1], Core[149], io_key), _U_]]];
    }
   }
   function to_sexp(param){
    if(typeof param === "number")
     return 0 === param
             ? function
              (param){
               var
                type_id = param[3],
                action = param[2],
                branch = param[1],
                to_sexp$0 = to_sexp(type_id),
                _N_ = to_sexp$0(action),
                _O_ = [0, caml_call1(Core_Sexp[93], _N_), 0];
               return [1, [0, _q_, [0, caml_call1(Core[389], branch), _O_]]];
              }
             : function
              (param){
               var
                type_id = param[2],
                action = param[1],
                to_sexp$0 = to_sexp(type_id),
                _P_ = to_sexp$0(action);
               return [1, [0, _r_, [0, caml_call1(Core_Sexp[93], _P_), 0]]];
              };
    switch(param[0]){
      case 0:
       var
        action = param[1],
        to_sexp$0 = caml_call1(Core_Type_equal[8][6], action);
       return function(param){
        if(typeof param !== "number" && 1 === param[0]){
         var action$0 = param[1], _M_ = caml_call1(to_sexp$0, action$0);
         return [1, [0, _t_, [0, caml_call1(Core_Sexp[93], _M_), 0]]];
        }
        var action = param[1], _L_ = caml_call1(to_sexp$0, action);
        return [1, [0, _s_, [0, caml_call1(Core_Sexp[93], _L_), 0]]];};
      case 1:
       var into = param[2], from = param[1];
       return function(param){
        if(typeof param !== "number" && 3 === param[0]){
         var
          action$0 = param[1],
          to_sexp$1 = to_sexp(into),
          _K_ = to_sexp$1(action$0);
         return [1, [0, _v_, [0, caml_call1(Core_Sexp[93], _K_), 0]]];
        }
        var
         action = param[1],
         to_sexp$0 = to_sexp(from),
         _J_ = to_sexp$0(action);
        return [1, [0, _u_, [0, caml_call1(Core_Sexp[93], _J_), 0]]];};
      case 2:
       var outer = param[2], inner = param[1];
       return function(param){
        if(typeof param !== "number" && 5 === param[0]){
         var
          action$0 = param[1],
          to_sexp$1 = caml_call1(Core_Type_equal[8][6], outer),
          _I_ = caml_call1(to_sexp$1, action$0);
         return [1, [0, _x_, [0, caml_call1(Core_Sexp[93], _I_), 0]]];
        }
        var
         action = param[1],
         to_sexp$0 = to_sexp(inner),
         _H_ = to_sexp$0(action);
        return [1, [0, _w_, [0, caml_call1(Core_Sexp[93], _H_), 0]]];};
      case 3:
       var inner$0 = param[1];
       return function(param){
        if(typeof param === "number") return _y_;
        var
         action = param[1],
         to_sexp$0 = to_sexp(inner$0),
         _G_ = to_sexp$0(action);
        return [1, [0, _z_, [0, caml_call1(Core_Sexp[93], _G_), 0]]];};
      case 4:
       var action_id = param[2], key_id = param[1];
       return function(param){
        var
         action = param[2],
         key = param[1],
         sexp_of_key = caml_call1(Core_Type_equal[8][6], key_id),
         sexp_of_action = to_sexp(action_id),
         _F_ = [0, sexp_of_action(action), 0];
        return [1, [0, _A_, [0, caml_call1(sexp_of_key, key), _F_]]];};
      default:
       var
        action_id$0 = param[3],
        model_key_id = param[2],
        io_key_id = param[1];
       return function(param){
        var
         action = param[3],
         model_key = param[2],
         io_key = param[1],
         sexp_of_io_key = caml_call1(Core_Type_equal[8][6], io_key_id),
         sexp_of_model_key = caml_call1(Core_Type_equal[8][6], model_key_id),
         sexp_of_action = to_sexp(action_id$0),
         _D_ = [0, sexp_of_action(action), 0],
         _E_ = [0, caml_call1(sexp_of_model_key, model_key), _D_];
        return [1, [0, _B_, [0, caml_call1(sexp_of_io_key, io_key), _E_]]];};
    }
   }
   var
    nothing_type_id =
      caml_call2(Core_Type_equal[8][3], cst_Nothing_t, Core_Nothing[23]),
    nothing = [0, nothing_type_id];
   function leaf(type_id){return [0, type_id];}
   function sub(from, into){return [1, from, into];}
   function wrap(inner, outer){return [2, inner, outer];}
   function model_reset(inner){return [3, inner];}
   var lazy = 1, switch$0 = 0;
   function assoc(key, action){return [4, key, action];}
   function assoc_on(io_key, model_key, action){return [5, io_key, model_key, action];
   }
   function same_witness_exn(a, b){
    var _C_ = same_witness(a, b);
    return caml_call4(Core_Option[40], 0, 0, 0, _C_);
   }
   function static_leaf(action){return [0, action];}
   function dynamic_leaf(action){return [1, action];}
   function sub_from(action){return [2, action];}
   function sub_into(action){return [3, action];}
   function wrap_inner(action){return [4, action];}
   function wrap_outer(action){return [5, action];}
   function model_reset_inner(action){return [6, action];}
   var model_reset_outer = 0;
   function switch$1(branch, type_id, action){return [7, branch, action, type_id];
   }
   function lazy$0(type_id, action){return [8, action, type_id];}
   function assoc$0(key, id, compare, action){return [9, key, action, id, compare];
   }
   function assoc_on$0(io_key, io_id, io_compare, model_key, action){return [10, io_key, model_key, action, io_id, io_compare];
   }
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Action);
   var
    Bonsai_Action =
      [0,
       [0,
        nothing,
        leaf,
        sub,
        wrap,
        model_reset,
        switch$0,
        lazy,
        assoc,
        assoc_on,
        same_witness,
        same_witness_exn,
        sexp_of_t,
        to_sexp],
       static_leaf,
       dynamic_leaf,
       sub_from,
       sub_into,
       wrap_inner,
       wrap_outer,
       model_reset_inner,
       model_reset_outer,
       switch$1,
       lazy$0,
       assoc$0,
       assoc_on$0];
   runtime.caml_register_global(45, Bonsai_Action, cst_Bonsai_Action$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Annotate_incr
//# unitInfo: Requires: Base__Hash, Core, Core__Hashable, Core__List, Core__Memo, Core__Source_code_position, Core__String, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv_error, Ui_incr
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Assoc_input = "Assoc_input",
    cst_Assoc_inputs = "Assoc_inputs",
    cst_Assoc_key = "Assoc_key",
    cst_Assoc_lifecycles = "Assoc_lifecycles",
    cst_Assoc_results = "Assoc_results",
    cst_Bonsai_Annotate_incr$0 = "Bonsai__Annotate_incr",
    cst_Empty_lifecycle = "Empty_lifecycle",
    cst_Input = "Input",
    cst_Lifecycle = "Lifecycle",
    cst_Lifecycle_apply_action_pai = "Lifecycle_apply_action_pair",
    cst_Model = "Model",
    cst_Model_and_input = "Model_and_input",
    cst_Path = "Path",
    cst_Result = "Result",
    cst_Value = "Value",
    cst_assoc_input$0 = "assoc_input",
    cst_assoc_inputs = "assoc_inputs",
    cst_assoc_key$0 = "assoc_key",
    cst_assoc_lifecycles = "assoc_lifecycles",
    cst_assoc_results = "assoc_results",
    cst_bonsai$0 = "bonsai",
    cst_bound$1 = "bound: ",
    cst_empty_lifecycle$0 = "empty_lifecycle",
    cst_input$0 = "input",
    cst_lifecycle$0 = "lifecycle",
    cst_lifecycle_apply_action_pai$0 = "lifecycle_apply_action_pair",
    cst_model$0 = "model",
    cst_model_and_input = "model_and_input",
    cst_path$0 = "path",
    cst_result$0 = "result",
    cst_value$0 = "value",
    caml_string_compare = runtime.caml_string_compare,
    caml_string_notequal = runtime.caml_string_notequal;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    red50 = [0, 3603131, "#FEF2F2"],
    red100 = [0, 3603131, "#FEE2E2"],
    red200 = [0, 3603131, "#FECACA"],
    red300 = [0, 3603131, "#FCA5A5"],
    amber100 = [0, 3603131, "#FEF3C7"],
    amber200 = [0, 3603131, "#FDE68A"],
    blue100 = [0, 3603131, "#DBEAFE"],
    blue200 = [0, 3603131, "#BFDBFE"],
    blue300 = [0, 3603131, "#93C5FD"],
    emerald100 = [0, 3603131, "#D1FAE5"],
    emerald200 = [0, 3603131, "#A7F3D0"],
    pink100 = [0, 3603131, "#FCE7F3"],
    pink200 = [0, 3603131, "#FBCFE8"],
    pink300 = [0, 3603131, "#F9A8D4"],
    error_source_005 = "src/annotate_incr.ml.Kind.T.t",
    Ui_incr = global_data.Ui_incr,
    Core = global_data.Core,
    Core_String = global_data.Core__String,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Base_Hash = global_data.Base__Hash,
    Core_Source_code_position = global_data.Core__Source_code_position,
    Core_List = global_data.Core__List,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Core_Hashable = global_data.Core__Hashable,
    Core_Memo = global_data.Core__Memo;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Annotate_incr$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/annotate_incr.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai$0, "annotate_incr.ml");
   var
    enabled = [0, 0],
    _q_ = [0, cst_lifecycle_apply_action_pai$0],
    _r_ = [0, cst_path$0],
    _s_ = [0, cst_assoc_inputs],
    _t_ = [0, cst_assoc_lifecycles],
    _u_ = [0, cst_assoc_results],
    _v_ = [0, cst_assoc_input$0],
    _w_ = [0, cst_assoc_key$0],
    _x_ = [0, cst_model_and_input],
    _y_ = [0, cst_model$0],
    _z_ = [0, cst_empty_lifecycle$0],
    _A_ = [0, cst_lifecycle$0],
    _B_ = [0, cst_result$0],
    _C_ = [0, cst_value$0],
    _D_ = [0, cst_input$0],
    cst_kind = "kind",
    cst_fillcolor = "fillcolor",
    _p_ = [0, "style", "filled"],
    cst_input = cst_input$0,
    cst_value = cst_value$0,
    cst_result = cst_result$0,
    cst_lifecycle = cst_lifecycle$0,
    cst_empty_lifecycle = "empty lifecycle",
    cst_model = cst_model$0,
    cst_model_input = "model & input",
    cst_assoc_key = "assoc key",
    cst_assoc_input = "assoc input",
    cst_assoc_result_map = "assoc result map",
    cst_assoc_lifecycle_map = "assoc lifecycle map",
    cst_assoc_input_map = "assoc input map",
    cst_path = cst_path$0,
    cst_lifecycle_apply_action_pai = "lifecycle/apply-action pair",
    _a_ = [0, cst_Input],
    _b_ = [0, cst_Value],
    _c_ = [0, cst_Result],
    _d_ = [0, cst_Lifecycle],
    _e_ = [0, cst_Empty_lifecycle],
    _f_ = [0, cst_Model],
    _g_ = [0, cst_Model_and_input],
    _h_ = [0, cst_Assoc_key],
    _i_ = [0, cst_Assoc_input],
    _j_ = [0, cst_Assoc_results],
    _k_ = [0, cst_Assoc_lifecycles],
    _l_ = [0, cst_Assoc_inputs],
    _m_ = [0, cst_Path],
    _n_ = [0, cst_Lifecycle_apply_action_pai],
    cst_app = "app/",
    cst_lib = "lib/",
    cst_bound = cst_bound$1,
    cst_bound$0 = cst_bound$1,
    cst_bonsai = cst_bonsai$0,
    cst_Bonsai_Annotate_incr = cst_Bonsai_Annotate_incr$0;
   function enable(param){enabled[1] = 1; return 0;}
   function disable(param){enabled[1] = 0; return 0;}
   var empty_attrs = Core_String[159][5];
   function hash_fold_t(hsv, arg){
    switch(arg){
      case 0:
       var _Y_ = 0; break;
      case 1:
       var _Y_ = 1; break;
      case 2:
       var _Y_ = 2; break;
      case 3:
       var _Y_ = 3; break;
      case 4:
       var _Y_ = 4; break;
      case 5:
       var _Y_ = 5; break;
      case 6:
       var _Y_ = 6; break;
      case 7:
       var _Y_ = 7; break;
      case 8:
       var _Y_ = 8; break;
      case 9:
       var _Y_ = 9; break;
      case 10:
       var _Y_ = 10; break;
      case 11:
       var _Y_ = 11; break;
      case 12:
       var _Y_ = 12; break;
      default: var _Y_ = 13;
    }
    return caml_call2(Base_Hash[3], hsv, _Y_);
   }
   function hash(arg){
    var hsv = caml_call2(Base_Hash[11], 0, 0), _X_ = hash_fold_t(hsv, arg);
    return caml_call1(Base_Hash[9], _X_);
   }
   var compare = runtime.caml_int_compare;
   function t_of_sexp(sexp_006){
    a:
    {
     if(0 === sexp_006[0]){
      var
       _N_ = sexp_006[1],
       _O_ = caml_string_compare(_N_, cst_assoc_input$0);
      b:
      {
       c:
       {
        d:
        {
         e:
         {
          f:
          {
           g:
           {
            h:
            {
             i:
             {
              j:
              {
               k:
               {
                l:
                {
                 m:
                 {
                  n:
                  {
                   if(0 <= _O_){
                    if(0 >= _O_) break h;
                    var _P_ = caml_string_compare(_N_, cst_lifecycle$0);
                    if(0 > _P_){
                     if(! caml_string_notequal(_N_, cst_assoc_inputs)) break g;
                     if(! caml_string_notequal(_N_, cst_assoc_key$0)) break f;
                     if(! caml_string_notequal(_N_, cst_assoc_lifecycles))
                      break e;
                     if(! caml_string_notequal(_N_, cst_assoc_results)) break d;
                     if(! caml_string_notequal(_N_, cst_empty_lifecycle$0))
                      break c;
                     if(caml_string_notequal(_N_, cst_input$0)) break a;
                     break b;
                    }
                    if(0 < _P_){
                     if
                      (!
                       caml_string_notequal(_N_, cst_lifecycle_apply_action_pai$0))
                      break n;
                     if(! caml_string_notequal(_N_, cst_model$0)) break m;
                     if(! caml_string_notequal(_N_, cst_model_and_input))
                      break l;
                     if(! caml_string_notequal(_N_, cst_path$0)) break k;
                     if(! caml_string_notequal(_N_, cst_result$0)) break j;
                     if(caml_string_notequal(_N_, cst_value$0)) break a;
                     break i;
                    }
                   }
                   else{
                    var _Q_ = caml_string_compare(_N_, cst_Lifecycle);
                    if(0 > _Q_){
                     if(! caml_string_notequal(_N_, cst_Assoc_input)) break h;
                     if(! caml_string_notequal(_N_, cst_Assoc_inputs)) break g;
                     if(! caml_string_notequal(_N_, cst_Assoc_key)) break f;
                     if(! caml_string_notequal(_N_, cst_Assoc_lifecycles))
                      break e;
                     if(! caml_string_notequal(_N_, cst_Assoc_results)) break d;
                     if(! caml_string_notequal(_N_, cst_Empty_lifecycle))
                      break c;
                     if(caml_string_notequal(_N_, cst_Input)) break a;
                     break b;
                    }
                    if(0 < _Q_){
                     if
                      (!
                       caml_string_notequal(_N_, cst_Lifecycle_apply_action_pai))
                      break n;
                     if(! caml_string_notequal(_N_, cst_Model)) break m;
                     if(! caml_string_notequal(_N_, cst_Model_and_input))
                      break l;
                     if(! caml_string_notequal(_N_, cst_Path)) break k;
                     if(! caml_string_notequal(_N_, cst_Result)) break j;
                     if(caml_string_notequal(_N_, cst_Value)) break a;
                     break i;
                    }
                   }
                   return 3;
                  }
                  return 13;
                 }
                 return 5;
                }
                return 6;
               }
               return 12;
              }
              return 2;
             }
             return 1;
            }
            return 8;
           }
           return 11;
          }
          return 7;
         }
         return 10;
        }
        return 9;
       }
       return 4;
      }
      return 0;
     }
     var _R_ = sexp_006[1];
     if(! _R_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_005, sexp_006);
     var _S_ = _R_[1];
     if(0 !== _S_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_005, sexp_006);
     var _T_ = _S_[1], _U_ = caml_string_compare(_T_, cst_assoc_input$0);
     b:
     {
      c:
      {
       d:
       {
        e:
        {
         f:
         {
          g:
          {
           h:
           {
            i:
            {
             j:
             {
              k:
              {
               l:
               {
                m:
                {
                 n:
                 {
                  if(0 <= _U_){
                   if(0 >= _U_) break h;
                   var _V_ = caml_string_compare(_T_, cst_lifecycle$0);
                   if(0 > _V_){
                    if(! caml_string_notequal(_T_, cst_assoc_inputs)) break g;
                    if(! caml_string_notequal(_T_, cst_assoc_key$0)) break f;
                    if(! caml_string_notequal(_T_, cst_assoc_lifecycles))
                     break e;
                    if(! caml_string_notequal(_T_, cst_assoc_results)) break d;
                    if(! caml_string_notequal(_T_, cst_empty_lifecycle$0))
                     break c;
                    if(caml_string_notequal(_T_, cst_input$0)) break a;
                    break b;
                   }
                   if(0 < _V_){
                    if
                     (!
                      caml_string_notequal(_T_, cst_lifecycle_apply_action_pai$0))
                     break n;
                    if(! caml_string_notequal(_T_, cst_model$0)) break m;
                    if(! caml_string_notequal(_T_, cst_model_and_input))
                     break l;
                    if(! caml_string_notequal(_T_, cst_path$0)) break k;
                    if(! caml_string_notequal(_T_, cst_result$0)) break j;
                    if(caml_string_notequal(_T_, cst_value$0)) break a;
                    break i;
                   }
                  }
                  else{
                   var _W_ = caml_string_compare(_T_, cst_Lifecycle);
                   if(0 > _W_){
                    if(! caml_string_notequal(_T_, cst_Assoc_input)) break h;
                    if(! caml_string_notequal(_T_, cst_Assoc_inputs)) break g;
                    if(! caml_string_notequal(_T_, cst_Assoc_key)) break f;
                    if(! caml_string_notequal(_T_, cst_Assoc_lifecycles))
                     break e;
                    if(! caml_string_notequal(_T_, cst_Assoc_results)) break d;
                    if(! caml_string_notequal(_T_, cst_Empty_lifecycle))
                     break c;
                    if(caml_string_notequal(_T_, cst_Input)) break a;
                    break b;
                   }
                   if(0 < _W_){
                    if
                     (!
                      caml_string_notequal(_T_, cst_Lifecycle_apply_action_pai))
                     break n;
                    if(! caml_string_notequal(_T_, cst_Model)) break m;
                    if(! caml_string_notequal(_T_, cst_Model_and_input))
                     break l;
                    if(! caml_string_notequal(_T_, cst_Path)) break k;
                    if(! caml_string_notequal(_T_, cst_Result)) break j;
                    if(caml_string_notequal(_T_, cst_Value)) break a;
                    break i;
                   }
                  }
                  return caml_call2
                          (Sexplib0_Sexp_conv_error[7], error_source_005, sexp_006);
                 }
                 return caml_call2
                         (Sexplib0_Sexp_conv_error[7], error_source_005, sexp_006);
                }
                return caml_call2
                        (Sexplib0_Sexp_conv_error[7], error_source_005, sexp_006);
               }
               return caml_call2
                       (Sexplib0_Sexp_conv_error[7], error_source_005, sexp_006);
              }
              return caml_call2
                      (Sexplib0_Sexp_conv_error[7], error_source_005, sexp_006);
             }
             return caml_call2
                     (Sexplib0_Sexp_conv_error[7], error_source_005, sexp_006);
            }
            return caml_call2
                    (Sexplib0_Sexp_conv_error[7], error_source_005, sexp_006);
           }
           return caml_call2
                   (Sexplib0_Sexp_conv_error[7], error_source_005, sexp_006);
          }
          return caml_call2
                  (Sexplib0_Sexp_conv_error[7], error_source_005, sexp_006);
         }
         return caml_call2
                 (Sexplib0_Sexp_conv_error[7], error_source_005, sexp_006);
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[7], error_source_005, sexp_006);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[7], error_source_005, sexp_006);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_005, sexp_006);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[7], error_source_005, sexp_006);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_005, sexp_006);
   }
   function sexp_of_t(param){
    switch(param){
      case 0:
       return _a_;
      case 1:
       return _b_;
      case 2:
       return _c_;
      case 3:
       return _d_;
      case 4:
       return _e_;
      case 5:
       return _f_;
      case 6:
       return _g_;
      case 7:
       return _h_;
      case 8:
       return _i_;
      case 9:
       return _j_;
      case 10:
       return _k_;
      case 11:
       return _l_;
      case 12:
       return _m_;
      default: return _n_;
    }
   }
   var
    include =
      caml_call1
       (Core_Hashable[3],
        [0, hash_fold_t, t_of_sexp, compare, sexp_of_t, hash]),
    hashable = include[4];
   function _o_(kind, incr){
    var _L_ = 0;
    switch(kind){
      case 0:
       var _M_ = cst_input; break;
      case 1:
       var _M_ = cst_value; break;
      case 2:
       var _M_ = cst_result; break;
      case 3:
       var _M_ = cst_lifecycle; break;
      case 4:
       var _M_ = cst_empty_lifecycle; break;
      case 5:
       var _M_ = cst_model; break;
      case 6:
       var _M_ = cst_model_input; break;
      case 7:
       var _M_ = cst_assoc_key; break;
      case 8:
       var _M_ = cst_assoc_input; break;
      case 9:
       var _M_ = cst_assoc_result_map; break;
      case 10:
       var _M_ = cst_assoc_lifecycle_map; break;
      case 11:
       var _M_ = cst_assoc_input_map; break;
      case 12:
       var _M_ = cst_path; break;
      default: var _M_ = cst_lifecycle_apply_action_pai;
    }
    var label = [0, cst_kind, [0, _M_, _L_]];
    switch(kind){
      case 0:
       var match = amber100; break;
      case 1:
       var match = red50; break;
      case 2:
       var match = red100; break;
      case 3:
       var match = blue100; break;
      case 4:
       var match = blue300; break;
      case 5:
       var match = emerald100; break;
      case 6:
       var match = pink100; break;
      case 7:
       var match = pink200; break;
      case 8:
       var match = pink300; break;
      case 9:
       var match = red200; break;
      case 10:
       var match = blue200; break;
      case 11:
       var match = amber200; break;
      case 12:
       var match = red300; break;
      default: var match = emerald200;
    }
    var
     color = match[2],
     attrs =
       caml_call1
        (Core_String[159][15], [0, _p_, [0, [0, cst_fillcolor, color], 0]]);
    return caml_call3(Ui_incr[74][3], incr, label, attrs);
   }
   var annotate_packed = caml_call3(Core_Memo[1], [0, hashable], 0, _o_);
   function sexp_of_t$0(param){
    var
     input_008 = param[1],
     value_010 = param[2],
     result_012 = param[3],
     lifecycle_014 = param[4],
     empty_lifecycle_016 = param[5],
     model_018 = param[6],
     model_and_input_020 = param[7],
     assoc_key_022 = param[8],
     assoc_input_024 = param[9],
     assoc_results_026 = param[10],
     assoc_lifecycles_028 = param[11],
     assoc_inputs_030 = param[12],
     path_032 = param[13],
     lifecycle_apply_action_pair_03 = param[14],
     arg_035 = caml_call1(Core[389], lifecycle_apply_action_pair_03),
     bnds_007 = [0, [1, [0, _q_, [0, arg_035, 0]]], 0],
     arg_033 = caml_call1(Core[389], path_032),
     bnds_007$0 = [0, [1, [0, _r_, [0, arg_033, 0]]], bnds_007],
     arg_031 = caml_call1(Core[389], assoc_inputs_030),
     bnds_007$1 = [0, [1, [0, _s_, [0, arg_031, 0]]], bnds_007$0],
     arg_029 = caml_call1(Core[389], assoc_lifecycles_028),
     bnds_007$2 = [0, [1, [0, _t_, [0, arg_029, 0]]], bnds_007$1],
     arg_027 = caml_call1(Core[389], assoc_results_026),
     bnds_007$3 = [0, [1, [0, _u_, [0, arg_027, 0]]], bnds_007$2],
     arg_025 = caml_call1(Core[389], assoc_input_024),
     bnds_007$4 = [0, [1, [0, _v_, [0, arg_025, 0]]], bnds_007$3],
     arg_023 = caml_call1(Core[389], assoc_key_022),
     bnds_007$5 = [0, [1, [0, _w_, [0, arg_023, 0]]], bnds_007$4],
     arg_021 = caml_call1(Core[389], model_and_input_020),
     bnds_007$6 = [0, [1, [0, _x_, [0, arg_021, 0]]], bnds_007$5],
     arg_019 = caml_call1(Core[389], model_018),
     bnds_007$7 = [0, [1, [0, _y_, [0, arg_019, 0]]], bnds_007$6],
     arg_017 = caml_call1(Core[389], empty_lifecycle_016),
     bnds_007$8 = [0, [1, [0, _z_, [0, arg_017, 0]]], bnds_007$7],
     arg_015 = caml_call1(Core[389], lifecycle_014),
     bnds_007$9 = [0, [1, [0, _A_, [0, arg_015, 0]]], bnds_007$8],
     arg_013 = caml_call1(Core[389], result_012),
     bnds_007$10 = [0, [1, [0, _B_, [0, arg_013, 0]]], bnds_007$9],
     arg_011 = caml_call1(Core[389], value_010),
     bnds_007$11 = [0, [1, [0, _C_, [0, arg_011, 0]]], bnds_007$10],
     arg_009 = caml_call1(Core[389], input_008),
     bnds_007$12 = [0, [1, [0, _D_, [0, arg_009, 0]]], bnds_007$11];
    return [1, bnds_007$12];
   }
   var global = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
   function current(param){
    return [0,
            global[1],
            global[2],
            global[3],
            global[4],
            global[5],
            global[6],
            global[7],
            global[8],
            global[9],
            global[10],
            global[11],
            global[12],
            global[13],
            global[14]];
   }
   function diff(before, after){
    return [0,
            after[1] - before[1] | 0,
            after[2] - before[2] | 0,
            after[3] - before[3] | 0,
            after[4] - before[4] | 0,
            after[5] - before[5] | 0,
            after[6] - before[6] | 0,
            after[7] - before[7] | 0,
            after[8] - before[8] | 0,
            after[9] - before[9] | 0,
            after[10] - before[10] | 0,
            after[11] - before[11] | 0,
            after[12] - before[12] | 0,
            after[13] - before[13] | 0,
            after[14] - before[14] | 0];
   }
   function incr(param){
    switch(param){
      case 0:
       global[1] = global[1] + 1 | 0; return;
      case 1:
       global[2] = global[2] + 1 | 0; return;
      case 2:
       global[3] = global[3] + 1 | 0; return;
      case 3:
       global[4] = global[4] + 1 | 0; return;
      case 4:
       global[5] = global[5] + 1 | 0; return;
      case 5:
       global[6] = global[6] + 1 | 0; return;
      case 6:
       global[7] = global[7] + 1 | 0; return;
      case 7:
       global[8] = global[8] + 1 | 0; return;
      case 8:
       global[9] = global[9] + 1 | 0; return;
      case 9:
       global[10] = global[10] + 1 | 0; return;
      case 10:
       global[11] = global[11] + 1 | 0; return;
      case 11:
       global[12] = global[12] + 1 | 0; return;
      case 12:
       global[13] = global[13] + 1 | 0; return;
      default: global[14] = global[14] + 1 | 0; return;
    }
   }
   function annotate_packed$0(kind, incr$0){
    incr(kind);
    var _K_ = enabled[1];
    return _K_ ? caml_call2(annotate_packed, kind, incr$0) : _K_;
   }
   function annotate(kind, incr$0){
    incr(kind);
    var _J_ = enabled[1];
    return _J_
            ? annotate_packed$0(kind, caml_call1(Ui_incr[75], incr$0))
            : _J_;
   }
   function attribute_packed(pos_opt, t){
    if(enabled[1] && pos_opt){
     var
      pos$0 = pos_opt[1],
      _F_ = caml_call1(Core_Source_code_position[4], pos$0),
      _G_ = caml_call2(Core_String[95], _F_, cst_lib),
      pos = caml_call2(Core_String[95], _G_, cst_app),
      match = caml_call2(Core_String[77], pos, 47);
     if(match)
      var
       match$0 = match[1],
       r = match$0[2],
       l = match$0[1],
       _H_ = [0, caml_call2(Core[18], cst_bound, r), 0],
       labels = [0, caml_call2(Core[18], cst_bound$0, l), _H_];
     else
      var labels = [0, pos, 0];
     var
      _I_ =
        function(label){
         var label$0 = [0, label, 0];
         return caml_call3(Ui_incr[74][3], t, label$0, empty_attrs);
        };
     return caml_call2(Core_List[19], labels, _I_);
    }
    return 0;
   }
   function attribute(pos_opt, incr){
    var _E_ = enabled[1];
    return _E_
            ? attribute_packed(pos_opt, caml_call1(Ui_incr[75], incr))
            : _E_;
   }
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Annotate_incr);
   var
    Bonsai_Annotate_incr =
      [0,
       enable,
       disable,
       [0],
       [0, sexp_of_t$0, current, diff],
       annotate,
       annotate_packed$0,
       attribute,
       attribute_packed];
   runtime.caml_register_global
    (140, Bonsai_Annotate_incr, cst_Bonsai_Annotate_incr$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Apply_action_context
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_Apply_action_contex$0 = "Bonsai__Apply_action_context",
    cst_bonsai$0 = "bonsai";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Apply_action_contex$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/apply_action_context.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai$0, "apply_action_context.ml");
   var
    cst_bonsai = cst_bonsai$0,
    cst_Bonsai_Apply_action_contex = cst_Bonsai_Apply_action_contex$0;
   function inject(param, action){
    var inject = param[1];
    return caml_call1(inject, action);
   }
   function schedule_event(param, event){
    var schedule_event = param[2];
    return caml_call1(schedule_event, event);
   }
   function create(inject, schedule_event){return [0, inject, schedule_event];
   }
   function reveal(_a_){return _a_;}
   var Private = [0, reveal];
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Apply_action_contex);
   var
    Bonsai_Apply_action_context = [0, inject, schedule_event, create, Private];
   runtime.caml_register_global
    (11, Bonsai_Apply_action_context, cst_Bonsai_Apply_action_contex$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Module_types
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_Module_types = "Bonsai__Module_types",
    cst_bonsai = "bonsai";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Module_types);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][1], "src/module_types.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai, "module_types.ml");
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Module_types);
   var Bonsai_Module_types = [0];
   runtime.caml_register_global
    (11, Bonsai_Module_types, cst_Bonsai_Module_types);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Import
//# unitInfo: Requires: Bonsai__Annotate_incr, Bonsai__Module_types, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Ui_effect, Ui_incr
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_Import$0 = "Bonsai__Import",
    cst_bonsai$0 = "bonsai",
    cst_src_import_ml = "src/import.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Match_failure = global_data.Match_failure,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Bonsai_Annotate_incr = global_data.Bonsai__Annotate_incr,
    Ui_incr = global_data.Ui_incr,
    Ui_effect = global_data.Ui_effect;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Import$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_import_ml);
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai$0, "import.ml");
   var
    enable = Bonsai_Annotate_incr[1],
    disable = Bonsai_Annotate_incr[2],
    Kind = Bonsai_Annotate_incr[3],
    Counts = Bonsai_Annotate_incr[4],
    annotate = Bonsai_Annotate_incr[5],
    annotate_packed = Bonsai_Annotate_incr[6],
    attribute = Bonsai_Annotate_incr[7],
    attribute_packed = Bonsai_Annotate_incr[8],
    _a_ = [0, cst_src_import_ml, 7, 64],
    cst_bonsai = cst_bonsai$0,
    cst_Bonsai_Import = cst_Bonsai_Import$0;
   function unreachable_action(param){
    throw caml_maybe_attach_backtrace([0, Match_failure, _a_], 1);
   }
   function unusable_apply_action(param, _d_, input, model){return unreachable_action;
   }
   function reset_unit_model(param, _c_, _b_){return 0;}
   var
    unit_model = caml_call1(Ui_incr[11], 0),
    ignore_effect = caml_call1(Ui_incr[11], Ui_effect[1]);
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Import);
   var
    Bonsai_Import =
      [0,
       enable,
       disable,
       Kind,
       Counts,
       annotate,
       annotate_packed,
       attribute,
       attribute_packed,
       unreachable_action,
       unusable_apply_action,
       reset_unit_model,
       unit_model,
       ignore_effect];
   runtime.caml_register_global(16, Bonsai_Import, cst_Bonsai_Import$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Environment
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Ui_incr, Univ_map
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_Environment$0 = "Bonsai__Environment",
    cst_bonsai$0 = "bonsai";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Ui_incr = global_data.Ui_incr,
    Univ_map = global_data.Univ_map;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Environment$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/environment.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai$0, "environment.ml");
   var
    _a_ = [0, Ui_incr[5]],
    include = caml_call1(caml_call1(Univ_map[26], Univ_map[1]), _a_),
    empty = include[4],
    find = include[10],
    add_exn = include[13],
    update = include[16],
    cst_bonsai = cst_bonsai$0,
    cst_Bonsai_Environment = cst_Bonsai_Environment$0;
   function add_overwriting(t, key, data){
    return caml_call3(update, t, key, function(param){return data;});
   }
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Environment);
   var Bonsai_Environment = [0, empty, add_exn, add_overwriting, find];
   runtime.caml_register_global
    (13, Bonsai_Environment, cst_Bonsai_Environment$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Keyed
//# unitInfo: Requires: Core__Comparable, Core__Type_equal, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_Keyed$0 = "Bonsai__Keyed",
    cst_bonsai$0 = "bonsai";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Core_Type_equal = global_data.Core__Type_equal,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Core_Comparable = global_data.Core__Comparable;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Keyed$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/keyed.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai$0, "keyed.ml");
   var cst_bonsai = cst_bonsai$0, cst_Bonsai_Keyed = cst_Bonsai_Keyed$0;
   function compare(param, _a_){
    var
     id2 = _a_[2],
     key2 = _a_[1],
     compare1 = param[3],
     id1 = param[2],
     key1 = param[1];
    if(caml_call2(Core_Type_equal[8][9], id1, id2))
     return caml_call2(compare1, key1, key2);
    var
     _b_ = caml_call1(Core_Type_equal[8][2], id2),
     _c_ = caml_call1(Core_Type_equal[8][2], id1);
    return caml_call2(Core_Type_equal[8][11][23], _c_, _b_);
   }
   function sexp_of_t(param){
    var id = param[2], key = param[1];
    return caml_call2(Core_Type_equal[8][6], id, key);
   }
   function create(key, id, compare){return [0, key, id, compare];}
   var
    include = caml_call1(Core_Comparable[11], [0, compare, sexp_of_t]),
    symbol = include[1],
    symbol$0 = include[2],
    symbol$1 = include[3],
    symbol$2 = include[4],
    symbol$3 = include[5],
    symbol$4 = include[6],
    equal = include[7],
    compare$0 = include[8],
    min = include[9],
    max = include[10],
    ascending = include[11],
    descending = include[12],
    between = include[13],
    clamp_exn = include[14],
    clamp = include[15],
    comparator = include[16],
    validate_lbound = include[17],
    validate_ubound = include[18],
    validate_bound = include[19],
    Replace_polymorphic_compare = include[20],
    Map = include[21],
    Set = include[22];
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Keyed);
   var
    Bonsai_Keyed =
      [0,
       sexp_of_t,
       create,
       symbol,
       symbol$0,
       symbol$1,
       symbol$2,
       symbol$3,
       symbol$4,
       equal,
       compare$0,
       min,
       max,
       ascending,
       descending,
       between,
       clamp_exn,
       clamp,
       comparator,
       validate_lbound,
       validate_ubound,
       validate_bound,
       Replace_polymorphic_compare,
       Map,
       Set];
   runtime.caml_register_global(13, Bonsai_Keyed, cst_Bonsai_Keyed$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Stabilization_tracker
//# unitInfo: Requires: Bonsai__Action, Bonsai__Keyed, Core, Core__Int, Core__Map, Core__Option, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Ui_incr
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_Stabilization_track$0 = "Bonsai__Stabilization_tracker",
    cst_bonsai$0 = "bonsai";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    Core = global_data.Core,
    Ui_incr = global_data.Ui_incr,
    Core_Map = global_data.Core__Map,
    Core_Option = global_data.Core__Option,
    Bonsai_Action = global_data.Bonsai__Action,
    Bonsai_Keyed = global_data.Bonsai__Keyed,
    Core_Int = global_data.Core__Int,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Stabilization_track$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/stabilization_tracker.ml");
   caml_call2
    (Ppx_inline_test_lib[6], cst_bonsai$0, "stabilization_tracker.ml");
   var
    cst_stabilized = "stabilized",
    cst_skipped_stabilization = "skipped stabilization",
    _a_ = [0, "branches_pruned"],
    _b_ = [0, "prunes_run"],
    _c_ = [0, "stabilizations_skipped"],
    _d_ = [0, "stabilizations_caused_by_var_changes"],
    _e_ = [0, "stabilizations_before_actions"],
    cst_bonsai = cst_bonsai$0,
    cst_Bonsai_Stabilization_track = cst_Bonsai_Stabilization_track$0;
   function incr_don_t_stabilize(t){t[2] = t[2] + 1 | 0; return;}
   var dirty_incremental_vars = [0, 0];
   function mark_incremental_dirty(param){
    dirty_incremental_vars[1] = 1;
    return 0;
   }
   var next = Core_Int[25], initial = 0, num_generations_for_pruning = 2700;
   function with_empty_generation(inner){return [0, -1, inner];}
   function empty(param){return with_empty_generation(0);}
   function traverse(initial_state, traverser){
    return function(action$1, t$0){
     var state = initial_state, action = action$1, t = t$0;
     for(;;){
      var match = t[2];
      if(typeof match === "number"){
       if(0 === match) return caml_call3(traverser[1], state, t, action);
       if(typeof action !== "number" && 1 === action[0])
        return caml_call1(traverser[2], state);
       return caml_call1(traverser[3], state);
      }
      switch(match[0]){
        case 0:
         var
          into = match[2],
          from = match[1],
          state$0 = caml_call4(traverser[4], state, from, into, action);
         if(typeof action !== "number" && 3 === action[0]){
          var
           into_action = action[1],
           state = state$0,
           action = into_action,
           t = into;
          break;
         }
         var
          from_action = action[1],
          state = state$0,
          action = from_action,
          t = from;
         break;
        case 1:
         var
          inner = match[2],
          outer = match[1],
          state$1 = caml_call4(traverser[5], state, inner, outer, action);
         if(typeof action !== "number" && 5 === action[0])
          return caml_call1(traverser[2], state$1);
         var
          inner_action = action[1],
          state = state$1,
          action = inner_action,
          t = inner;
         break;
        case 2:
         var
          inner$0 = match[2],
          outer$0 = match[1],
          state$2 = caml_call4(traverser[6], state, inner$0, outer$0, action);
         if(typeof action === "number")
          return caml_call1(traverser[3], state$2);
         var
          inner_action$0 = action[1],
          state = state$2,
          action = inner_action$0,
          t = inner$0;
         break;
        case 3:
         var
          match$0 = match[1],
          type_id = match$0[2],
          inner$1 = match$0[1],
          action_type_id = action[2],
          action$0 = action[1];
         caml_call2(Bonsai_Action[1][11], type_id, action_type_id);
         var
          state$3 = caml_call3(traverser[7], state, inner$1, action$0),
          state = state$3,
          action = action$0,
          t = inner$1;
         break;
        case 4:
         var
          assoc = match[1],
          compare = action[4],
          id = action[3],
          inner_action$1 = action[2],
          key = action[1],
          keyed = caml_call3(Bonsai_Keyed[2], key, id, compare),
          state$4 = caml_call4(traverser[8], state, assoc, keyed, action),
          match$1 = caml_call2(Core_Map[44], assoc[1], keyed);
         if(! match$1){
          var empty$0 = empty(0);
          assoc[1] = caml_call3(Core_Map[38], assoc[1], keyed, empty$0);
          return caml_call3(traverser[1], state$4, empty$0, inner_action$1);
         }
         var
          inner$2 = match$1[1],
          state = state$4,
          action = inner_action$1,
          t = inner$2;
         break;
        case 5:
         var
          assoc_on = match[1],
          io_compare = action[5],
          io_id = action[4],
          inner_action$2 = action[3],
          io_key = action[1],
          keyed$0 = caml_call3(Bonsai_Keyed[2], io_key, io_id, io_compare),
          state$5 = caml_call4(traverser[9], state, assoc_on, keyed$0, action),
          match$2 = caml_call2(Core_Map[44], assoc_on[1], keyed$0);
         if(! match$2){
          var empty$1 = empty(0);
          assoc_on[1] =
           caml_call3(Core_Map[38], assoc_on[1], keyed$0, empty$1);
          return caml_call3(traverser[1], state$5, empty$1, inner_action$2);
         }
         var
          inner$3 = match$2[1],
          state = state$5,
          action = inner_action$2,
          t = inner$3;
         break;
        default:
         var
          switch$0 = match[1],
          action_type_id$0 = action[3],
          inner_action$3 = action[2],
          branch = action[1],
          state$6 = caml_call4(traverser[10], state, switch$0, branch, action),
          match$3 = caml_call2(Core_Map[44], switch$0[1], branch);
         if(! match$3){
          var empty$2 = empty(0);
          switch$0[1] =
           caml_call3
            (Core_Map[38],
             switch$0[1],
             branch,
             [0, empty$2, action_type_id$0]);
          return caml_call3(traverser[1], state$6, empty$2, inner_action$3);
         }
         var
          match$4 = match$3[1],
          type_id$0 = match$4[2],
          inner$4 = match$4[1];
         caml_call2(Bonsai_Action[1][11], type_id$0, action_type_id$0);
         var state = state$6, action = inner_action$3, t = inner$4;
      }
     }};
   }
   function should_stabilize_dynamic_actio(stats, found_conflict){
    if(dirty_incremental_vars[1]) stats[3] = stats[3] + 1 | 0;
    var
     _aa_ = dirty_incremental_vars[1],
     should_stabilize = _aa_ || found_conflict;
    if(should_stabilize)
     stats[1] = stats[1] + 1 | 0;
    else
     incr_don_t_stabilize(stats);
    return should_stabilize;
   }
   function current(param){
    var state = Ui_incr[4][3];
    return [0, caml_call1(Ui_incr[4][19], state)];
   }
   function empty$0(param){
    var _$_ = current(0);
    return [0, empty(0), [0, 0, 0, 0, 0, 0], initial, _$_, initial, 0];
   }
   function mark_stabilization(t){
    dirty_incremental_vars[1] = 0;
    t[3] = caml_call1(next, t[3]);
    t[4] = current(0);
    return 0;
   }
   function requires_stabilization(t, action){
    var
     b_002 = t[4],
     a_001 = current(0),
     _N_ = a_001 === b_002 ? 1 : caml_call2(Core[384], a_001[1], b_002[1]);
    if(1 - _N_) mark_incremental_dirty(0);
    var stats = t[2], current_generation = t[3], _O_ = t[1];
    function sub_requires_stabilization(state, from, param, ___){
     if(typeof ___ !== "number" && 3 === ___[0])
      return state ? state : caml_call2(Core[90], from[1], current_generation);
     return state;
    }
    function wrap_requires_stabilization(state, inner, outer, param){
     if(typeof param !== "number" && 5 === param[0]){
      if(state)
       var state$0 = state;
      else{
       var _Z_ = caml_call2(Core[90], outer[1], current_generation);
       if(! _Z_) return caml_call2(Core[90], inner[1], current_generation);
       var state$0 = _Z_;
      }
      return state$0;
     }
     return state ? state : caml_call2(Core[90], outer[1], current_generation);
    }
    function model_reset_requires_stabiliza(state, param, outer, _Y_){
     return typeof _Y_ === "number"
             ? state
             : state
               ? state
               : caml_call2(Core[90], outer[1], current_generation);
    }
    function don_t_stabilize(param){incr_don_t_stabilize(stats); return 0;}
    function _H_(state, param, _X_, _W_){return state;}
    function _I_(state, param, _V_, _U_){return state;}
    function _J_(state, param, _T_, _S_){return state;}
    function _K_(state, param, _R_){return state;}
    function _L_(param){return don_t_stabilize(0);}
    function _M_(_Q_){return should_stabilize_dynamic_actio(stats, _Q_);}
    var
     traverser =
       [0,
        function(state, empty, action$7){
         var param = action$7;
         for(;;){
          if(typeof param === "number")
           var _P_ = 0;
          else
           switch(param[0]){
             case 0:
              var _P_ = 0; break;
             case 1:
              var _P_ = 1; break;
             case 2:
              var action = param[1], param = action; continue;
             case 3:
              var action$0 = param[1], param = action$0; continue;
             case 4:
              var action$1 = param[1], param = action$1; continue;
             case 5:
              var _P_ = 1; break;
             case 6:
              var action$2 = param[1], param = action$2; continue;
             case 7:
              var action$3 = param[2], param = action$3; continue;
             case 8:
              var action$4 = param[1], param = action$4; continue;
             case 9:
              var action$5 = param[2], param = action$5; continue;
             default: var action$6 = param[3], param = action$6; continue;
           }
          return _P_
                  ? should_stabilize_dynamic_actio(stats, state)
                  : don_t_stabilize(0);
         }
        },
        _M_,
        _L_,
        sub_requires_stabilization,
        wrap_requires_stabilization,
        model_reset_requires_stabiliza,
        _K_,
        _J_,
        _I_,
        _H_],
     requires_stabilization = traverse(0, traverser)(action, _O_);
    if(t[6])
     if(requires_stabilization)
      caml_call1(Core[32], cst_stabilized);
     else
      caml_call1(Core[32], cst_skipped_stabilization);
    return requires_stabilization;
   }
   function insert(t$1, action){
    var t$2 = t$1[1], current_generation$0 = t$1[3];
    function insert_unexplored(param, empty$0, action){
     function with_current_generation(inner){
      return [0, current_generation$0, inner];
     }
     function node_of_action(param){
      if(typeof param !== "number")
       switch(param[0]){
         case 0:
          return 1;
         case 1:
          return 1;
         case 2:
          var
           from = param[1],
           from$0 = with_current_generation(node_of_action(from));
          return [0, from$0, empty(0)];
         case 3:
          var
           into = param[1],
           into$0 = with_current_generation(node_of_action(into));
          return [0, empty(0), into$0];
         case 4:
          var
           inner = param[1],
           inner$0 = with_current_generation(node_of_action(inner));
          return [1, with_empty_generation(0), inner$0];
         case 5:
          var _E_ = empty(0); return [1, with_current_generation(0), _E_];
         case 6:
          var
           inner$1 = param[1],
           inner$2 = with_current_generation(node_of_action(inner$1));
          return [2, with_empty_generation(0), inner$2];
         case 7:
          var
           type_id = param[3],
           action = param[2],
           branch = param[1],
           inner$3 = with_current_generation(node_of_action(action)),
           inner$4 = [0, inner$3, type_id];
          return [6, [0, caml_call2(Core_Int[98][6], branch, inner$4)]];
         case 8:
          var
           type_id$0 = param[2],
           action$0 = param[1],
           inner$5 = with_current_generation(node_of_action(action$0));
          return [3, [0, inner$5, type_id$0]];
         case 9:
          var
           compare = param[4],
           id = param[3],
           action$1 = param[2],
           key = param[1],
           inner$6 = with_current_generation(node_of_action(action$1)),
           _F_ = caml_call3(Bonsai_Keyed[2], key, id, compare);
          return [4, [0, caml_call2(Bonsai_Keyed[23][6], _F_, inner$6)]];
         default:
          var
           io_compare = param[5],
           io_id = param[4],
           action$2 = param[3],
           io_key = param[1],
           inner$7 = with_current_generation(node_of_action(action$2)),
           _G_ = caml_call3(Bonsai_Keyed[2], io_key, io_id, io_compare);
          return [5, [0, caml_call2(Bonsai_Keyed[23][6], _G_, inner$7)]];
       }
      var _D_ = empty(0);
      return [2, with_current_generation(0), _D_];
     }
     empty$0[2] = node_of_action(action);
     return 0;
    }
    function insert_sub(param, from, into, _C_){
     if(typeof _C_ !== "number" && 3 === _C_[0]){into[1] = current_generation$0; return 0;}
     from[1] = current_generation$0;
     return 0;
    }
    function insert_wrap(param, inner, outer, _B_){
     if(typeof _B_ !== "number" && 5 === _B_[0]){outer[1] = current_generation$0; return 0;
     }
     inner[1] = current_generation$0;
     return 0;
    }
    function insert_model_reset(param, inner, outer, _A_){
     return typeof _A_ === "number"
             ? (outer[1] = current_generation$0, 0)
             : (inner[1] = current_generation$0, 0);
    }
    function iter_data(m, key, f){
     var _z_ = caml_call2(Core_Map[44], m, key);
     return caml_call2(Core_Option[46], _z_, f);
    }
    function _k_(param, switch$0, branch, action){
     function _y_(param){
      var inner = param[1];
      inner[1] = current_generation$0;
      return 0;
     }
     return iter_data(switch$0[1], branch, _y_);
    }
    function _l_(param, assoc_on, key, action){
     function _x_(inner){inner[1] = current_generation$0; return 0;}
     return iter_data(assoc_on[1], key, _x_);
    }
    function _m_(param, assoc, key, action){
     function _w_(inner){inner[1] = current_generation$0; return 0;}
     return iter_data(assoc[1], key, _w_);
    }
    function _n_(param, inner, _v_){
     inner[1] = current_generation$0;
     return 0;
    }
    function _o_(param){return 0;}
    var
     traverser =
       [0,
        insert_unexplored,
        function(param){return 0;},
        _o_,
        insert_sub,
        insert_wrap,
        insert_model_reset,
        _n_,
        _m_,
        _l_,
        _k_];
    traverse(0, traverser)(action, t$2);
    var _p_ = caml_call2(Core[88], t$1[3], t$1[5] + 2700 | 0);
    if(_p_){
     var t = t$1[2];
     t[4] = t[4] + 1 | 0;
     var
      t$0 = t$1[1],
      current_generation = t$1[3],
      loop =
        function(t){
         var t$0 = t;
         for(;;){
          var
           filter_and_loop_via_fold =
             function(m, f){
              function _u_(key, data, map){
               var
                inner = caml_call1(f, data),
                generation = inner[1],
                should_prune =
                  caml_call2
                   (Core[89], generation, current_generation - 2700 | 0);
               if(should_prune){var t = t$1[2]; t[5] = t[5] + 1 | 0;}
               return should_prune
                       ? caml_call2(Core_Map[47], map, key)
                       : (loop(inner), map);
              }
              return caml_call3(Core_Map[61], m, m, _u_);
             },
           match = t$0[2];
          if(typeof match === "number"){if(0 === match) return; return;}
          switch(match[0]){
            case 0:
             var into = match[2], from = match[1];
             loop(from);
             var t$0 = into;
             break;
            case 1:
             var inner = match[2], t$0 = inner; break;
            case 2:
             var inner$0 = match[2], t$0 = inner$0; break;
            case 3:
             var inner$1 = match[1][1], t$0 = inner$1; break;
            case 4:
             var assoc = match[1], _r_ = function(inner){return inner;};
             assoc[1] = filter_and_loop_via_fold(assoc[1], _r_);
             return;
            case 5:
             var assoc_on = match[1], _s_ = function(inner){return inner;};
             assoc_on[1] = filter_and_loop_via_fold(assoc_on[1], _s_);
             return;
            default:
             var
              switch$0 = match[1],
              _t_ = function(param){var inner = param[1]; return inner;};
             switch$0[1] = filter_and_loop_via_fold(switch$0[1], _t_);
             return;
          }
         }
        };
     loop(t$0);
     t$1[5] = t$1[3];
     var _q_ = 0;
    }
    else
     var _q_ = _p_;
    return _q_;
   }
   function start_debugging(t){t[6] = 1; return 0;}
   function display_stats(t){
    var
     t$0 = t[2],
     _f_ = [0, [1, [0, _a_, [0, caml_call1(Core[389], t$0[5]), 0]]], 0],
     _g_ = [0, [1, [0, _b_, [0, caml_call1(Core[389], t$0[4]), 0]]], _f_],
     _h_ = [0, [1, [0, _c_, [0, caml_call1(Core[389], t$0[2]), 0]]], _g_],
     _i_ = [0, [1, [0, _d_, [0, caml_call1(Core[389], t$0[3]), 0]]], _h_],
     _j_ = [1, [0, [1, [0, _e_, [0, caml_call1(Core[389], t$0[1]), 0]]], _i_]];
    return caml_call2(Core[256], 0, _j_);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Stabilization_track);
   var
    Bonsai_Stabilization_tracker =
      [0,
       empty$0,
       insert,
       requires_stabilization,
       mark_incremental_dirty,
       mark_stabilization,
       [0, [0], start_debugging, num_generations_for_pruning, display_stats]];
   runtime.caml_register_global
    (25, Bonsai_Stabilization_tracker, cst_Bonsai_Stabilization_track$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Value
//# unitInfo: Requires: Base__Applicative, Bonsai__Environment, Bonsai__Import, Core, Core__Option, Core__Source_code_position, Core__Type_equal, Incremental, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Ppx_string_runtime, Sexplib0__Sexp_conv, Ui_incr
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_Value$0 = "Bonsai__Value",
    cst_bonsai$0 = "bonsai",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_string_runtime = global_data.Ppx_string_runtime,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Ui_incr = global_data.Ui_incr,
    Bonsai_Environment = global_data.Bonsai__Environment,
    Core = global_data.Core,
    Incremental = global_data.Incremental,
    Core_Option = global_data.Core__Option,
    Bonsai_Import = global_data.Bonsai__Import,
    Core_Type_equal = global_data.Core__Type_equal,
    Core_Source_code_position = global_data.Core__Source_code_position,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Base_Applicative = global_data.Base__Applicative;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Value$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/value.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai$0, "value.ml");
   var
    cst_was_used_outside_of_the_sc =
      " was used outside of the scope that it was declared in. Make sure that you aren't storing it inside a ref.",
    cst_incr = "incr",
    cst_map7 = "map7",
    cst_map6 = "map6",
    cst_map5 = "map5",
    cst_map4 = "map4",
    cst_map3 = "map3",
    cst_both = "both",
    cst_return_exn = "return exn",
    cst_return = "return",
    cst_cutoff = "cutoff",
    cst_map = "map",
    cst_map2 = "map2",
    cst_The_Value_t_for_the_key_in =
      "The Value.t for the key introduced within a [Bonsai.assoc] or [Bonsai.assoc_on] computation",
    cst_The_Value_t_for_the_data_i =
      "The Value.t for the data introduced within a [Bonsai.assoc] or [Bonsai.assoc_on] computation",
    cst_The_name_for_the_model_int =
      "The name for the model introduced within a [Bonsai.wrap] computation",
    cst_The_Value_t_for_the_inject =
      "The Value.t for the injection function introduced within a [Bonsai.wrap] computation",
    cst_The_app_input_Value_t = "The app input Value.t",
    cst_A_model_resetter = "A model resetter",
    _a_ = [0, "TEST_FILENAME", 0, 0, 0],
    cst_A_Value_t_introduced_by_th =
      "A Value.t introduced by the [let%sub] expression at ",
    cst_A_Value_t_introduced_by_so =
      "A Value.t introduced by some [let%sub] expression",
    cst_bonsai = cst_bonsai$0,
    cst_Bonsai_Value = cst_Bonsai_Value$0;
   function value_id(name){
    return caml_call2(Core_Type_equal[8][3], name, Core[149]);
   }
   function map2(t1, t2, f){
    return [0, [6, t1, t2, f], 0, value_id(cst_map2)];
   }
   function _b_(t, f){return [0, [5, t, f], 0, value_id(cst_map)];}
   function named(name_source, id){return [0, [2, name_source], 0, id];}
   function cutoff(added_by_let_syntax, t, equal){
    var value = [4, t, equal, added_by_let_syntax];
    return [0, value, 0, value_id(cst_cutoff)];
   }
   function _c_(env, param){
    var id = param[3], value = param[1];
    switch(value[0]){
      case 0:
       var x = value[1]; return caml_call1(Ui_incr[11], x);
      case 1:
       var x$0 = value[1]; return x$0;
      case 2:
       var
        name_source = value[1],
        match = caml_call2(Bonsai_Environment[4], env, id);
       if(match){var incremental = match[1]; return incremental;}
       var
        _q_ =
          [0,
           caml_call1
            (Ppx_string_runtime[1][2], cst_was_used_outside_of_the_sc),
           0];
       if(typeof name_source === "number")
        switch(name_source){
          case 0:
           var _r_ = cst_The_Value_t_for_the_key_in; break;
          case 1:
           var _r_ = cst_The_Value_t_for_the_data_i; break;
          case 2:
           var _r_ = cst_The_name_for_the_model_int; break;
          case 3:
           var _r_ = cst_The_Value_t_for_the_inject; break;
          case 4:
           var _r_ = cst_The_app_input_Value_t; break;
          default: var _r_ = cst_A_model_resetter;
        }
       else{
        var here = name_source[1];
        if(here)
         var
          here$0 = here[1],
          here$1 = Core[628] ? _a_ : here$0,
          _n_ = caml_call1(Core_Source_code_position[4], here$1),
          _o_ = [0, caml_call1(Ppx_string_runtime[1][3], _n_), 0],
          _p_ =
            [0,
             caml_call1
              (Ppx_string_runtime[1][2], cst_A_Value_t_introduced_by_th),
             _o_],
          _r_ = caml_call1(Ppx_string_runtime[1][4], _p_);
        else
         var _r_ = cst_A_Value_t_introduced_by_so;
       }
       var
        _s_ = [0, caml_call1(Ppx_string_runtime[1][3], _r_), _q_],
        _t_ = caml_call1(Ppx_string_runtime[1][4], _s_),
        _u_ = caml_call1(Sexplib0_Sexp_conv[7], _t_);
       return caml_call1(Core[261], _u_);
      case 3:
       var
        t2 = value[2],
        t1 = value[1],
        _v_ = _c_(env, t2),
        _w_ = _c_(env, t1);
       return caml_call2(Ui_incr[42], _w_, _v_);
      case 4:
       var equal = value[2], t = value[1], incremental_node = _c_(env, t);
       switch(t[1][0]){
         case 1:
         case 2:
         case 4:
          var
           _y_ = function(_ab_){return _ab_;},
           incremental_node$0 = caml_call2(Ui_incr[12], incremental_node, _y_);
          break;
         default: var incremental_node$0 = incremental_node;
       }
       var _x_ = caml_call1(Incremental[58][5], equal);
       caml_call2(Incremental[59], incremental_node$0, _x_);
       return incremental_node$0;
      case 5:
       var f = value[2], t$0 = value[1], _z_ = _c_(env, t$0);
       return caml_call2(Ui_incr[12], _z_, f);
      case 6:
       var
        f$0 = value[3],
        t2$0 = value[2],
        t1$0 = value[1],
        _A_ = _c_(env, t2$0),
        _B_ = _c_(env, t1$0);
       return caml_call3(Ui_incr[14], _B_, _A_, f$0);
      case 7:
       var
        f$1 = value[4],
        t3 = value[3],
        t2$1 = value[2],
        t1$1 = value[1],
        _C_ = _c_(env, t3),
        _D_ = _c_(env, t2$1),
        _E_ = _c_(env, t1$1);
       return caml_call4(Ui_incr[15], _E_, _D_, _C_, f$1);
      case 8:
       var
        f$2 = value[5],
        t4 = value[4],
        t3$0 = value[3],
        t2$2 = value[2],
        t1$2 = value[1],
        _F_ = _c_(env, t4),
        _G_ = _c_(env, t3$0),
        _H_ = _c_(env, t2$2),
        _I_ = _c_(env, t1$2);
       return caml_call5(Ui_incr[16], _I_, _H_, _G_, _F_, f$2);
      case 9:
       var
        f$3 = value[6],
        t5 = value[5],
        t4$0 = value[4],
        t3$1 = value[3],
        t2$3 = value[2],
        t1$3 = value[1],
        _J_ = _c_(env, t5),
        _K_ = _c_(env, t4$0),
        _L_ = _c_(env, t3$1),
        _M_ = _c_(env, t2$3),
        _N_ = _c_(env, t1$3);
       return caml_call6(Ui_incr[17], _N_, _M_, _L_, _K_, _J_, f$3);
      case 10:
       var
        f$4 = value[7],
        t6 = value[6],
        t5$0 = value[5],
        t4$1 = value[4],
        t3$2 = value[3],
        t2$4 = value[2],
        t1$4 = value[1],
        _O_ = _c_(env, t6),
        _P_ = _c_(env, t5$0),
        _Q_ = _c_(env, t4$1),
        _R_ = _c_(env, t3$2),
        _S_ = _c_(env, t2$4),
        _T_ = _c_(env, t1$4);
       return caml_call7(Ui_incr[18], _T_, _S_, _R_, _Q_, _P_, _O_, f$4);
      case 11:
       var
        f$5 = value[8],
        t7 = value[7],
        t6$0 = value[6],
        t5$1 = value[5],
        t4$2 = value[4],
        t3$3 = value[3],
        t2$5 = value[2],
        t1$5 = value[1],
        _U_ = _c_(env, t7),
        _V_ = _c_(env, t6$0),
        _W_ = _c_(env, t5$1),
        _X_ = _c_(env, t4$2),
        _Y_ = _c_(env, t3$3),
        _Z_ = _c_(env, t2$5),
        ___ = _c_(env, t1$5);
       return caml_call8(Ui_incr[19], ___, _Z_, _Y_, _X_, _W_, _V_, _U_, f$5);
      default:
       var
        ex = value[1],
        _$_ = function(param){throw caml_maybe_attach_backtrace(ex, 0);},
        _aa_ = caml_call1(Ui_incr[11], 0);
       return caml_call2(Ui_incr[12], _aa_, _$_);
    }
   }
   function eval$0(env, t){
    var incr = _c_(env, t);
    caml_call2(Bonsai_Import[5], 1, incr);
    return incr;
   }
   function return$0(a){return [0, [0, a], 0, value_id(cst_return)];}
   function return_exn(exn){
    return [0, [12, exn], 0, value_id(cst_return_exn)];
   }
   function transpose_opt(opt){
    var _j_ = Core_Option[58];
    function _k_(_m_){return _b_(_m_, _j_);}
    var _l_ = return$0(0);
    return caml_call3(Core_Option[41], opt, _l_, _k_);
   }
   var
    map = [0, -198771759, _b_],
    include = caml_call1(Base_Applicative[13], [0, return$0, map2, map]),
    return$1 = include[1],
    map$0 = include[2],
    symbol = include[4],
    symbol$0 = include[5],
    symbol$1 = include[6],
    symbol_map = include[7],
    apply = include[8],
    map2$0 = include[9],
    all_unit = include[12],
    Applicative_infix = include[13];
   function both(a, b){return [0, [3, a, b], 0, value_id(cst_both)];}
   function map3(t1, t2, t3, f){
    return [0, [7, t1, t2, t3, f], 0, value_id(cst_map3)];
   }
   function map4(t1, t2, t3, t4, f){
    return [0, [8, t1, t2, t3, t4, f], 0, value_id(cst_map4)];
   }
   function map5(t1, t2, t3, t4, t5, f){
    return [0, [9, t1, t2, t3, t4, t5, f], 0, value_id(cst_map5)];
   }
   function map6(t1, t2, t3, t4, t5, t6, f){
    return [0, [10, t1, t2, t3, t4, t5, t6, f], 0, value_id(cst_map6)];
   }
   function map7(t1, t2, t3, t4, t5, t6, t7, f){
    return [0, [11, t1, t2, t3, t4, t5, t6, t7, f], 0, value_id(cst_map7)];
   }
   function all(param){
    if(! param) return caml_call1(return$1, 0);
    var _d_ = param[2], t1 = param[1];
    if(! _d_) return caml_call2(map$0, t1, function(a1){return [0, a1, 0];});
    var _e_ = _d_[2], t2 = _d_[1];
    if(! _e_)
     return caml_call3
             (map2$0, t1, t2, function(a1, a2){return [0, a1, [0, a2, 0]];});
    var _f_ = _e_[2], t3 = _e_[1];
    if(! _f_)
     return map3
             (t1,
              t2,
              t3,
              function(a1, a2, a3){return [0, a1, [0, a2, [0, a3, 0]]];});
    var _g_ = _f_[2], t4 = _f_[1];
    if(! _g_)
     return map4
             (t1,
              t2,
              t3,
              t4,
              function(a1, a2, a3, a4){
               return [0, a1, [0, a2, [0, a3, [0, a4, 0]]]];
              });
    var _h_ = _g_[2], t5 = _g_[1];
    if(! _h_)
     return map5
             (t1,
              t2,
              t3,
              t4,
              t5,
              function(a1, a2, a3, a4, a5){
               return [0, a1, [0, a2, [0, a3, [0, a4, [0, a5, 0]]]]];
              });
    var _i_ = _h_[2], t6 = _h_[1];
    if(! _i_)
     return map6
             (t1,
              t2,
              t3,
              t4,
              t5,
              t6,
              function(a1, a2, a3, a4, a5, a6){
               return [0, a1, [0, a2, [0, a3, [0, a4, [0, a5, [0, a6, 0]]]]]];
              });
    var t7 = _i_[1];
    if(! _i_[2])
     return map7
             (t1,
              t2,
              t3,
              t4,
              t5,
              t6,
              t7,
              function(a1, a2, a3, a4, a5, a6, a7){
               return [0,
                       a1,
                       [0, a2, [0, a3, [0, a4, [0, a5, [0, a6, [0, a7, 0]]]]]]];
              });
    var
     rest = _i_[2],
     left =
       map7
        (t1,
         t2,
         t3,
         t4,
         t5,
         t6,
         t7,
         function(a1, a2, a3, a4, a5, a6, a7){
          return [0,
                  a1,
                  [0, a2, [0, a3, [0, a4, [0, a5, [0, a6, [0, a7, 0]]]]]]];
         }),
     right = all(rest);
    return caml_call3
            (map2$0,
             left,
             right,
             function(left, right){return caml_call2(Core[156], left, right);});
   }
   function of_incr(x){return [0, [1, x], 0, value_id(cst_incr)];}
   var
    Open_on_rhs_intf = [0],
    symbol$2 = Applicative_infix[1],
    symbol$3 = Applicative_infix[2],
    symbol$4 = Applicative_infix[3],
    symbol_map$0 = Applicative_infix[4],
    Open_on_rhs = [0],
    Let_syntax = [0, return$1, map$0, both, Open_on_rhs],
    Let_syntax$0 =
      [0, return$1, symbol$2, symbol$3, symbol$4, symbol_map$0, Let_syntax];
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Value);
   var
    Bonsai_Value =
      [0,
       [0],
       return$1,
       map$0,
       both,
       symbol,
       symbol$0,
       symbol$1,
       symbol_map,
       apply,
       map2$0,
       all,
       all_unit,
       Applicative_infix,
       Open_on_rhs_intf,
       Let_syntax$0,
       map3,
       map4,
       map5,
       map6,
       map7,
       named,
       cutoff,
       eval$0,
       of_incr,
       return_exn,
       transpose_opt];
   runtime.caml_register_global(44, Bonsai_Value, cst_Bonsai_Value$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Var
//# unitInfo: Requires: Bonsai__Stabilization_tracker, Bonsai__Value, Core, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Ui_incr
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_Var$0 = "Bonsai__Var",
    cst_bonsai$0 = "bonsai";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ui_incr = global_data.Ui_incr,
    Bonsai_Value = global_data.Bonsai__Value,
    Bonsai_Stabilization_tracker = global_data.Bonsai__Stabilization_tracker,
    Core = global_data.Core,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Var$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/var.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai$0, "var.ml");
   var
    cst_Bonsai_Var_mutated_during_ =
      "Bonsai.Var mutated during the computation of a Bonsai value",
    cst_bonsai = cst_bonsai$0,
    cst_Bonsai_Var = cst_Bonsai_Var$0;
   function create(x){return caml_call2(Ui_incr[53][2], 0, x);}
   function set(t, v){
    caml_call1(Bonsai_Stabilization_tracker[4], 0);
    if(caml_call1(Ui_incr[59], 0))
     caml_call1(Core[6], cst_Bonsai_Var_mutated_during_);
    return caml_call2(Ui_incr[53][3], t, v);
   }
   function update(t, f){
    var old = caml_call1(Ui_incr[53][5], t);
    return set(t, caml_call1(f, old));
   }
   function get(t){return caml_call1(Ui_incr[53][5], t);}
   function value(t){
    var _b_ = caml_call1(Ui_incr[53][4], t);
    return caml_call1(Bonsai_Value[24], _b_);
   }
   function incr_var(_a_){return _a_;}
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Var);
   var Bonsai_Var = [0, create, update, set, get, value, incr_var];
   runtime.caml_register_global(16, Bonsai_Var, cst_Bonsai_Var$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Input
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Ui_incr
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_Input$0 = "Bonsai__Input",
    cst_bonsai$0 = "bonsai";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    static$0 = [1, 0],
    Ui_incr = global_data.Ui_incr,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Input$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/input.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai$0, "input.ml");
   var cst_bonsai = cst_bonsai$0, cst_Bonsai_Input = cst_Bonsai_Input$0;
   function dynamic(input){return [0, input];}
   function map(t, f){
    switch(t[0]){
      case 0:
       var input = t[1]; return [0, caml_call2(Ui_incr[12], input, f)];
      case 1:
       var input$0 = t[1]; return [1, caml_call1(f, input$0)];
      default:
       var g = t[2], input$1 = t[1];
       return [2,
               input$1,
               function(x){return caml_call1(f, caml_call1(g, x));}];
    }
   }
   function iter_incremental(t, f){
    switch(t[0]){
      case 0:
       var incr = t[1]; return caml_call1(f, caml_call1(Ui_incr[75], incr));
      case 1:
       return 0;
      default:
       var incr$0 = t[1];
       return caml_call1(f, caml_call1(Ui_incr[75], incr$0));
    }
   }
   function to_incremental(param){
    switch(param[0]){
      case 0:
       var input = param[1]; return input;
      case 1:
       var input$0 = param[1]; return caml_call1(Ui_incr[11], input$0);
      default:
       var f = param[2], incr = param[1];
       return caml_call2(Ui_incr[12], incr, f);
    }
   }
   function merge(a, b){
    switch(a[0]){
      case 0:
       var a$0 = a[1];
       switch(b[0]){
         case 0:
          var b$0 = b[1]; return [0, caml_call2(Ui_incr[42], a$0, b$0)];
         case 1:
          var b$1 = b[1]; return [2, a$0, function(a){return [0, a, b$1];}];
         default:
          var
           f = b[2],
           b$2 = b[1],
           _a_ =
             function(param){
              var b = param[2], a = param[1];
              return [0, a, caml_call1(f, b)];
             };
          return [2, caml_call2(Ui_incr[42], a$0, b$2), _a_];
       }
      case 1:
       var a$1 = a[1];
       switch(b[0]){
         case 0:
          var b$3 = b[1]; return [2, b$3, function(b){return [0, a$1, b];}];
         case 1:
          var b$4 = b[1]; return [1, [0, a$1, b$4]];
         default:
          var f$0 = b[2], b$5 = b[1];
          return [2, b$5, function(b){return [0, a$1, caml_call1(f$0, b)];}];
       }
      default:
       var f$1 = a[2], a$2 = a[1];
       switch(b[0]){
         case 0:
          var
           b$6 = b[1],
           _b_ =
             function(param){
              var b = param[2], a = param[1];
              return [0, caml_call1(f$1, a), b];
             };
          return [2, caml_call2(Ui_incr[42], a$2, b$6), _b_];
         case 1:
          var b$7 = b[1];
          return [2, a$2, function(a){return [0, caml_call1(f$1, a), b$7];}];
         default:
          var
           g = b[2],
           b$8 = b[1],
           _c_ =
             function(param){
              var b = param[2], a = param[1], _d_ = caml_call1(g, b);
              return [0, caml_call1(f$1, a), _d_];
             };
          return [2, caml_call2(Ui_incr[42], a$2, b$8), _c_];
       }
    }
   }
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Input);
   var
    Bonsai_Input =
      [0, dynamic, static$0, to_incremental, merge, map, iter_incremental];
   runtime.caml_register_global(13, Bonsai_Input, cst_Bonsai_Input$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Path
//# unitInfo: Requires: Base__Buffer, Bonsai__Keyed, Core, Core__Char, Core__Comparable, Core__Int, Core__Sexp, Core__String, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Reversed_list, Sexplib0__Sexp_conv, Uopt
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_Path$0 = "Bonsai__Path",
    cst_bonsai$0 = "bonsai";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "_",
    Core = global_data.Core,
    Uopt = global_data.Uopt,
    Reversed_list = global_data.Reversed_list,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Core_Int = global_data.Core__Int,
    Base_Buffer = global_data.Base__Buffer,
    Core_String = global_data.Core__String,
    Bonsai_Keyed = global_data.Bonsai__Keyed,
    Core_Sexp = global_data.Core__Sexp,
    Core_Char = global_data.Core__Char,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Core_Comparable = global_data.Core__Comparable;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Path$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/path.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai$0, "path.ml");
   var
    _g_ = [0, "path"],
    cst_BUG_Bonsai_Path_t_should_b =
      "BUG: [Bonsai.Path.t] should be unique for all components, but duplicate paths were discovered.",
    cst_x = "x",
    cst_y = "y",
    _a_ = [0, "Subst_from"],
    _b_ = [0, "Subst_into"],
    _c_ = [0, "Assoc"],
    _d_ = [0, "Switch"],
    _f_ = [0, "bonsai_path"],
    cst_bonsai = cst_bonsai$0,
    cst_Bonsai_Path = cst_Bonsai_Path$0;
   function keyed(compare, id){
    function _u_(key){return caml_call3(Bonsai_Keyed[2], key, id, compare);}
    return caml_call1(Core[266], _u_);
   }
   function sexp_of_t(param){
    if(typeof param === "number") return 0 === param ? _a_ : _b_;
    if(0 === param[0]){
     var
      arg0_001 = param[1],
      res0_002 = caml_call1(Bonsai_Keyed[1], arg0_001);
     return [1, [0, _c_, [0, res0_002, 0]]];
    }
    var arg0_003 = param[1], res0_004 = caml_call1(Core[389], arg0_003);
    return [1, [0, _d_, [0, res0_004, 0]]];
   }
   function compare(a_005, b_006){
    if(a_005 === b_006) return 0;
    a:
    {
     if(typeof a_005 !== "number"){
      if(0 === a_005[0]){
       var a_007 = a_005[1];
       if(typeof b_006 !== "number"){
        if(0 !== b_006[0]) return -1;
        var b_008 = b_006[1];
        return caml_call2(Bonsai_Keyed[10], a_007, b_008);
       }
       if(0 === b_006) break a;
      }
      else{
       var a_009 = a_005[1];
       if(typeof b_006 !== "number"){
        if(0 === b_006[0]) return 1;
        var b_010 = b_006[1];
        return caml_call2(Core[382], a_009, b_010);
       }
       if(0 === b_006) break a;
      }
      return 1;
     }
     if(0 === a_005){
      if(typeof b_006 === "number" && ! b_006) return 0;
      return -1;
     }
     if(typeof b_006 !== "number") return -1;
     if(b_006) return 0;
    }
    return 1;
   }
   var offset = caml_call1(Core_Char[11], 97);
   function lower_nibble_to_alpha(c){
    var _t_ = caml_call2(Core_Int[28], c, 15) + offset | 0;
    return caml_call1(Core_Char[13], _t_);
   }
   function char_to_alpha(buf, c){
    var
     c$0 = caml_call1(Core_Char[11], c),
     lower = lower_nibble_to_alpha(c$0),
     upper = lower_nibble_to_alpha(caml_call2(Core_Int[34], c$0, 4));
    caml_call2(Base_Buffer[15], buf, upper);
    return caml_call2(Base_Buffer[15], buf, lower);
   }
   function sexp_of_run(param){
    var arg1_017 = param[2], arg0_016 = param[1];
    if(caml_call2(Core[90], arg1_017, 1)) return sexp_of_t(arg0_016);
    var
     res0_018 = sexp_of_t(arg0_016),
     res1_019 = caml_call1(Core[389], arg1_017);
    return [1, [0, res0_018, [0, res1_019, 0]]];
   }
   function run_length_encoding(t){
    var match$0 = caml_call1(Uopt[13], t[4]);
    if(match$0){var items = match$0[1]; return items;}
    var l$0 = caml_call1(Reversed_list[3], t[1]), acc = 0, l = l$0;
    for(;;){
     if(acc){
      if(l){
       var
        tl = l[2],
        curr_element = l[1],
        acc_tl = acc[2],
        curr_acc = acc[1],
        x_023 = curr_acc[1],
        match = 0 === compare(x_023, curr_element) ? 1 : 0;
       if(match){
        var
         acc$0 = [0, [0, curr_acc[1], curr_acc[2] + 1 | 0], acc_tl],
         acc = acc$0,
         l = tl;
        continue;
       }
       var
        acc$1 = [0, [0, curr_element, 1], [0, curr_acc, acc_tl]],
        acc = acc$1,
        l = tl;
       continue;
      }
     }
     else if(l){
      var
       tl$0 = l[2],
       first = l[1],
       acc$2 = [0, [0, first, 1], 0],
       acc = acc$2,
       l = tl$0;
      continue;
     }
     var run_length_encoded_items = caml_call1(Reversed_list[3], acc);
     t[4] = caml_call1(Uopt[6], run_length_encoded_items);
     return run_length_encoded_items;
    }
   }
   function sexp_of_t$0(t){
    var x_020 = run_length_encoding(t);
    return caml_call2(Core[472], sexp_of_run, x_020);
   }
   function compare$0(a$2, b$2){
    if(a$2 === b$2) return 0;
    var
     b_028 = run_length_encoding(b$2),
     a_027 = run_length_encoding(a$2),
     a = a_027,
     b = b_028;
    for(;;){
     if(! a) return b ? -1 : 0;
     if(! b) return 1;
     var
      bl = b[2],
      b$0 = b[1],
      al = a[2],
      a$0 = a[1],
      b_022 = b$0[1],
      a_021 = a$0[1],
      c = compare(a_021, b_022);
     if(! caml_call2(Core[90], c, 0)) return c;
     switch(caml_call1(Core_Int[11], a$0[2] - b$0[2] | 0)){
       case 0:
        var b$1 = [0, [0, b$0[1], b$0[2] - a$0[2] | 0], bl], a = al, b = b$1;
        break;
       case 1:
        var a = al, b = bl; break;
       default:
        var a$1 = [0, [0, a$0[1], a$0[2] - b$0[2] | 0], al], a = a$1, b = bl;
     }
    }
   }
   var
    _e_ = caml_call1(Uopt[6], 0),
    empty = [0, 0, caml_call1(Uopt[6], 0), _f_, _e_];
   function append(t, ele){
    var
     items_rev = [0, ele, t[1]],
     items_for_testing = Uopt[5],
     string_repr = [1, t, ele],
     run_length_encoded_items = Uopt[5];
    return [0,
            items_rev,
            items_for_testing,
            string_repr,
            run_length_encoded_items];
   }
   var
    include = caml_call1(Core_Comparable[11], [0, compare$0, sexp_of_t$0]),
    symbol = include[1],
    symbol$0 = include[2],
    symbol$1 = include[3],
    symbol$2 = include[4],
    symbol$3 = include[5],
    symbol$4 = include[6],
    equal = include[7],
    compare$1 = include[8],
    min = include[9],
    max = include[10],
    ascending = include[11],
    descending = include[12],
    between = include[13],
    clamp_exn = include[14],
    clamp = include[15],
    comparator = include[16],
    validate_lbound = include[17],
    validate_ubound = include[18],
    validate_bound = include[19],
    Replace_polymorphic_compare = include[20],
    Map = include[21],
    Set = include[22];
   function to_unique_identifier_string(t){
    var match = t[3];
    if(0 === match[0]){var s = match[1]; return s;}
    var
     ele = match[2],
     parent = match[1],
     parent_s = to_unique_identifier_string(parent);
    if(typeof ele === "number")
     var _o_ = 0 === ele ? cst_x : cst_y;
    else if(0 === ele[0]){
     var
      k = ele[1],
      buf = caml_call1(Base_Buffer[2], 10),
      _k_ = caml_call1(Bonsai_Keyed[1], k),
      _l_ =
        function(buf, string){
         function _q_(_r_){return char_to_alpha(buf, _r_);}
         return caml_call2(Core_String[15], string, _q_);
        };
     caml_call4(Core_Sexp[90], buf, char_to_alpha, _l_, _k_);
     var _o_ = caml_call1(Base_Buffer[3], buf);
    }
    else{
     var
      i = ele[1],
      buf$0 = caml_call1(Base_Buffer[2], 4),
      _m_ = function(_s_){return char_to_alpha(buf$0, _s_);},
      _n_ = caml_call1(Core_Int[79], i);
     caml_call2(Core_String[15], _n_, _m_);
     var _o_ = caml_call1(Base_Buffer[3], buf$0);
    }
    var
     _p_ = caml_call2(Core[18], cst, _o_),
     string_repr = caml_call2(Core[18], parent_s, _p_);
    t[3] = [0, string_repr];
    return string_repr;
   }
   function raise_duplicate(path){
    var
     _i_ = [0, [1, [0, _g_, [0, sexp_of_t$0(path), 0]]], 0],
     _j_ =
       [1,
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_BUG_Bonsai_Path_t_should_b),
         _i_]];
    return caml_call1(Core[261], _j_);
   }
   function items(t){
    var match = caml_call1(Uopt[13], t[2]);
    if(match){var items = match[1]; return items;}
    var items$0 = caml_call1(Reversed_list[3], t[1]);
    t[2] = caml_call1(Uopt[6], items$0);
    return items$0;
   }
   function slow_but_correct_compare_for_b(a, b){
    if(a === b) return 0;
    var b_032 = items(b), a_031 = items(a);
    function _h_(a_033, b_034){return compare(a_033, b_034);}
    return caml_call3(Core[466], _h_, a_031, b_032);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Path);
   var
    Bonsai_Path =
      [0,
       [0, keyed, compare],
       sexp_of_t$0,
       symbol,
       symbol$0,
       symbol$1,
       symbol$2,
       symbol$3,
       symbol$4,
       equal,
       compare$1,
       min,
       max,
       ascending,
       descending,
       between,
       clamp_exn,
       clamp,
       comparator,
       validate_lbound,
       validate_ubound,
       validate_bound,
       Replace_polymorphic_compare,
       Map,
       Set,
       empty,
       append,
       to_unique_identifier_string,
       raise_duplicate,
       [0, slow_but_correct_compare_for_b]];
   runtime.caml_register_global(34, Bonsai_Path, cst_Bonsai_Path$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Lifecycle
//# unitInfo: Requires: Bonsai__Path, Core__Map, Core__Option, Incr_map, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Reversed_list, Ui_effect
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_Lifecycle$0 = "Bonsai__Lifecycle",
    cst_bonsai$0 = "bonsai";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Incr_map = global_data.Incr_map,
    Core_Map = global_data.Core__Map,
    Reversed_list = global_data.Reversed_list,
    Ui_effect = global_data.Ui_effect,
    Core_Option = global_data.Core__Option,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Bonsai_Path = global_data.Bonsai__Path;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Lifecycle$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/lifecycle.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai$0, "lifecycle.ml");
   var
    empty = Bonsai_Path[23][5],
    _a_ = [0, 0, 0],
    cst_bonsai = cst_bonsai$0,
    cst_Bonsai_Lifecycle = cst_Bonsai_Lifecycle$0;
   function has_after_display(t){
    function _n_(t){return caml_call1(Core_Option[62], t[3]);}
    return caml_call2(Core_Map[97], t, _n_);
   }
   function maybe_cons(hd, tl){
    if(! hd) return tl;
    var a = hd[1];
    return [0, a, tl];
   }
   function diff(old, new$0){
    function collect(param, _l_){
     var after_display = _l_[3];
     return function(_m_){return maybe_cons(after_display, _m_);};
    }
    var after_displays = caml_call3(Core_Map[61], new$0, 0, collect);
    function collect$0(param, _i_){
     var
      _j_ = _i_[2],
      _k_ = _j_[1],
      deactivations = param[2],
      activations = param[1];
     if(847852583 === _k_){
      var on_deactivate = _j_[2][2];
      return [0, activations, maybe_cons(on_deactivate, deactivations)];
     }
     if(1013247643 <= _k_) return [0, activations, deactivations];
     var on_activate = _j_[2][1];
     return [0, maybe_cons(on_activate, activations), deactivations];
    }
    function data_equal(_h_, _g_){return _h_ === _g_ ? 1 : 0;}
    var
     match = caml_call5(Core_Map[89], old, new$0, data_equal, _a_, collect$0),
     deactivations = match[2],
     activations = match[1],
     _b_ = caml_call1(Reversed_list[3], after_displays),
     _c_ = [0, [0, Ui_effect[2], _b_], 0],
     _d_ = caml_call1(Reversed_list[3], activations),
     _e_ = [0, [0, Ui_effect[2], _d_], _c_],
     _f_ = caml_call1(Reversed_list[3], deactivations);
    return [0, Ui_effect[2], [0, [0, Ui_effect[2], _f_], _e_]];
   }
   function merge(a, b){return caml_call4(Incr_map[28], 0, 0, a, b);}
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Lifecycle);
   var Bonsai_Lifecycle = [0, [0, has_after_display, empty, diff, merge]];
   runtime.caml_register_global(18, Bonsai_Lifecycle, cst_Bonsai_Lifecycle$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__May_contain
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_May_contain$0 = "Bonsai__May_contain",
    cst_bonsai$0 = "bonsai";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_May_contain$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/may_contain.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai$0, "may_contain.ml");
   var
    cst_bonsai = cst_bonsai$0,
    cst_Bonsai_May_contain = cst_Bonsai_May_contain$0;
   function merge(a, b){if(a && b) return 1; return 0;}
   var T = [0, merge];
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_May_contain);
   var Bonsai_May_contain = [0, T, T];
   runtime.caml_register_global
    (11, Bonsai_May_contain, cst_Bonsai_May_contain$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Meta
//# unitInfo: Requires: Base__Option, Core, Core__Int, Core__Map, Core__Nothing, Core__Option, Core__Tuple, Core__Type_equal, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_Meta$0 = "Bonsai__Meta",
    cst_bonsai$0 = "bonsai";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Core = global_data.Core,
    Core_Type_equal = global_data.Core__Type_equal,
    Core_Int = global_data.Core__Int,
    Core_Map = global_data.Core__Map,
    Core_Option = global_data.Core__Option,
    Core_Tuple = global_data.Core__Tuple,
    Base_Option = global_data.Base__Option,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Core_Nothing = global_data.Core__Nothing;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Meta$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/meta.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai$0, "meta.ml");
   var
    unit_type_id = caml_call2(Core_Type_equal[8][3], "unit", Core[620]),
    nothing_type_id =
      caml_call2(Core_Type_equal[8][3], "Nothing.t", Core_Nothing[23]),
    cst_input = "input",
    _e_ = [0, [2, 0, [11, "-model", 0]], "%s-model"],
    _d_ = [0, 0],
    _c_ = [0, 0],
    _b_ = [0, 0],
    _a_ = [0, 0],
    cst_module_tree_type_id = "module tree type id",
    cst_Bonsai_Meta_Model_Type_id_ = "Bonsai__Meta.Model.Type_id.Fail",
    cst_lazy_model = "lazy-model",
    cst_lazy_input = "lazy input",
    cst_enum_input = "enum input",
    cst_bonsai = cst_bonsai$0,
    cst_Bonsai_Meta = cst_Bonsai_Meta$0;
   function sexp_of_t(sexp_of_a, param){
    var sexp_of_a$0 = sexp_of_a, param$0 = param;
    for(;;)
     switch(param$0[0]){
       case 0:
        var type_id = param$0[1];
        return caml_call2(Core_Type_equal[8][1], sexp_of_a$0, type_id);
       case 1:
        var
         x_003 = param$0[2],
         x_002 = param$0[1],
         _T_ = [0, sexp_of_t(Core[149], x_003), 0];
        return [1, [0, sexp_of_t(Core[149], x_002), _T_]];
       case 2:
        var
         x_004 = param$0[3],
         sexp_of_a$1 = Core[149],
         sexp_of_a$0 = sexp_of_a$1,
         param$0 = x_004;
        break;
       case 3:
        var
         x_005 = param$0[4],
         sexp_of_a$2 = Core[149],
         sexp_of_a$0 = sexp_of_a$2,
         param$0 = x_005;
        break;
       default:
        var
         multi_model = param$0[1],
         sexp_of_hidden =
           function(param){
            var type_id = param[2][3];
            return sexp_of_t(Core[149], type_id);
           };
        return caml_call2(Core_Int[98][45], sexp_of_hidden, multi_model);
     }
   }
   function to_sexp(param){
    switch(param[0]){
      case 0:
       var type_id = param[1];
       return caml_call1(Core_Type_equal[8][6], type_id);
      case 1:
       var
        b_t = param[2],
        a_t = param[1],
        sexp_of_a = to_sexp(a_t),
        sexp_of_b = to_sexp(b_t);
       return function(param){
        var
         arg1_009 = param[2],
         arg0_008 = param[1],
         res0_010 = caml_call1(sexp_of_a, arg0_008),
         res1_011 = caml_call1(sexp_of_b, arg1_009);
        return [1, [0, res0_010, [0, res1_011, 0]]];};
      case 2:
       var
        by = param[3],
        k = param[1],
        sexp_of_t$0 = caml_call1(Core_Type_equal[8][6], k),
        Key = [0, sexp_of_t$0],
        sexp_of_by = to_sexp(by);
       return function(x_012){
        return caml_call3(Core_Map[132], Key, sexp_of_by, x_012);};
      case 3:
       var
        by$0 = param[4],
        k_io = param[2],
        k_model = param[1],
        sexp_of_t$1 = caml_call1(Core_Type_equal[8][6], k_model),
        Key$0 = [0, sexp_of_t$1],
        sexp_of_by$0 = to_sexp(by$0),
        sexp_of_k_io = caml_call1(Core_Type_equal[8][6], k_io);
       return function(x_017){
        function _S_(param){
         var
          arg1_014 = param[2],
          arg0_013 = param[1],
          res0_015 = caml_call1(sexp_of_k_io, arg0_013),
          res1_016 = caml_call1(sexp_of_by$0, arg1_014);
         return [1, [0, res0_015, [0, res1_016, 0]]];
        }
        return caml_call3(Core_Map[132], Key$0, _S_, x_017);};
      default:
       var
        sexp_of_hidden =
          function(param){
           var type_id = param[2][3];
           return sexp_of_t(Core[149], type_id);
          };
       return function(x_018){
        return caml_call2(Core_Int[98][45], sexp_of_hidden, x_018);};
    }
   }
   var
    Fail = [248, cst_Bonsai_Meta_Model_Type_id_, runtime.caml_fresh_oo_id(0)],
    type_equal_id_same_witness = Core_Type_equal[8][9];
   function same_witness(a, b){
    switch(a[0]){
      case 0:
       if(0 === b[0])
        return caml_call2(type_equal_id_same_witness, a[1], b[1]);
       break;
      case 1:
       if(1 === b[0]){
        var
         _x_ =
           function(param){
            function _Q_(param){return _a_;}
            var _R_ = same_witness(a[2], b[2]);
            return caml_call2(Base_Option[29][4][2], _R_, _Q_);
           },
         _y_ = same_witness(a[1], b[1]);
        return caml_call2(Base_Option[29][4][2], _y_, _x_);
       }
       break;
      case 2:
       if(2 === b[0]){
        var
         _z_ =
           function(param){
            function _M_(param){
             function _O_(param){return _b_;}
             var _P_ = same_witness(a[3], b[3]);
             return caml_call2(Base_Option[29][4][2], _P_, _O_);
            }
            var _N_ = caml_call2(type_equal_id_same_witness, a[2], b[2]);
            return caml_call2(Base_Option[29][4][2], _N_, _M_);
           },
         _A_ = caml_call2(type_equal_id_same_witness, a[1], b[1]);
        return caml_call2(Base_Option[29][4][2], _A_, _z_);
       }
       break;
      case 3:
       if(3 === b[0]){
        var
         _B_ =
           function(param){
            function _G_(param){
             function _I_(param){
              function _K_(param){return _c_;}
              var _L_ = same_witness(a[4], b[4]);
              return caml_call2(Base_Option[29][4][2], _L_, _K_);
             }
             var _J_ = caml_call2(type_equal_id_same_witness, a[3], b[3]);
             return caml_call2(Base_Option[29][4][2], _J_, _I_);
            }
            var _H_ = caml_call2(type_equal_id_same_witness, a[1], b[1]);
            return caml_call2(Base_Option[29][4][2], _H_, _G_);
           },
         _C_ = caml_call2(type_equal_id_same_witness, a[2], b[2]);
        return caml_call2(Base_Option[29][4][2], _C_, _B_);
       }
       break;
      default:
       if(4 === b[0]){
        var
         _D_ =
           function(param){
            function _E_(param$0, data){
             if(typeof data !== "number" && 737457313 === data[1]){
              var _F_ = data[2], b = _F_[2];
              return same_witness(_F_[1][2][3], b[2][3])
                      ? 0
                      : caml_call1(param, 0);
             }
             return caml_call1(param, 0);
            }
            caml_call3(Core_Map[56], a[1], b[1], _E_);
            return _d_;
           };
        return caml_call1(Core[268], _D_);
       }
    }
    return 0;
   }
   function same_witness_exn(a, b){
    var match = same_witness(a, b);
    if(! match) throw Fail;
    var proof = match[1];
    return proof;
   }
   function to_type_id(param){
    return caml_call2
            (Core_Type_equal[8][3], cst_module_tree_type_id, Core[149]);
   }
   var
    unit = [0, unit_type_id],
    nothing = [0, nothing_type_id],
    unit$0 = [0, 0, Core[615], unit, Core[620]];
   function both(model1, model2){
    var
     sexp_of = caml_call2(Core_Tuple[1][2], model1[4], model2[4]),
     type_id = [1, model1[3], model2[3]],
     default$0 = [0, model1[1], model2[1]],
     equal = caml_call2(Core_Tuple[1][10], model1[2], model2[2]);
    return [0, default$0, equal, type_id, sexp_of];
   }
   function map(M, k, cmp, model){
    var sexp_of_model = model[4];
    function sexp_of_map_model(x_028){
     return caml_call3(Core_Map[132], [0, M[1]], sexp_of_model, x_028);
    }
    var
     model_map_type_id = [2, k, cmp, model[3]],
     _w_ = caml_call1(Core_Map[78], model[2]);
    return [0,
            caml_call1(Core_Map[4], [0, M[2]]),
            _w_,
            model_map_type_id,
            sexp_of_map_model];
   }
   function map_on(M, M_io, k_model, k_io, cmp, model){
    var sexp_of_model = model[4];
    function sexp_of_map_model(x_033){
     function _v_(param){
      var
       arg1_030 = param[2],
       arg0_029 = param[1],
       res0_031 = caml_call1(M_io[1], arg0_029),
       res1_032 = caml_call1(sexp_of_model, arg1_030);
      return [1, [0, res0_031, [0, res1_032, 0]]];
     }
     return caml_call3(Core_Map[132], [0, M[1]], _v_, x_033);
    }
    var model_map_type_id = [3, k_model, k_io, cmp, model[3]];
    function io_equal(a, b){
     var _u_ = caml_call2(M_io[2][1], a, b);
     return caml_call2(Core[90], _u_, 0);
    }
    var
     _s_ = caml_call2(Core_Tuple[1][10], io_equal, model[2]),
     _t_ = caml_call1(Core_Map[78], _s_);
    return [0,
            caml_call1(Core_Map[4], [0, M[2]]),
            _t_,
            model_map_type_id,
            sexp_of_map_model];
   }
   function of_module(sexp_of_model, equal, default$0, name){
    function _o_(_r_, _q_){return _r_ === _q_ ? 1 : 0;}
    var
     equal$0 = caml_call2(Core_Option[39], equal, _o_),
     _p_ = caml_call2(Core[265], _e_, name),
     type_id = caml_call2(Core_Type_equal[8][3], _p_, sexp_of_model);
    return [0, default$0, equal$0, [0, type_id], sexp_of_model];
   }
   function sexp_of_t$0(param){
    var sexp_of = param[2][4], model = param[1];
    return caml_call1(sexp_of, model);
   }
   function equal(param, _n_){
    var
     t2 = _n_[2][3],
     m2 = _n_[1],
     match = param[2],
     t1 = match[3],
     equal = match[2],
     m1 = param[1];
    return same_witness(t1, t2) ? caml_call2(equal, m1, m2) : 0;
   }
   function create(info){function wrap(m){return [0, m, info];} return wrap;}
   function _f_(x_039){return caml_call2(Core[515], sexp_of_t$0, x_039);}
   function _g_(x_038){return caml_call2(Core[515], sexp_of_t$0, x_038);}
   var
    _h_ = [0, caml_call2(Core_Type_equal[8][3], cst_lazy_model, _g_)],
    lazy =
      [0,
       0,
       function(a_034, b_035){
        function _m_(a_036, b_037){return equal(a_036, b_037);}
        return caml_call3(Core[511], _m_, a_034, b_035);
       },
       _h_,
       _f_];
   function sexp_of_t$1(sexp_of_k){
    var _l_ = [0, sexp_of_k];
    return function(x_040){
     return caml_call3(Core_Map[132], _l_, sexp_of_t$0, x_040);};
   }
   var find_exn = Core_Map[45], set = Core_Map[38];
   function of_models(_k_){return _k_;}
   function to_models(_j_){return _j_;}
   function model_info(default$0){
    function sexp_of(x_041){return sexp_of_t$1(Core[389])(x_041);}
    var type_id = [4, default$0];
    return [0,
            default$0,
            function(a_042, b_043){
             function _i_(a_044, b_045){return equal(a_044, b_045);}
             return caml_call3(Core_Int[98][4], _i_, a_042, b_043);
            },
            type_id,
            sexp_of];
   }
   var
    Multi_model =
      [0, sexp_of_t$1, find_exn, set, to_models, of_models, model_info];
   function create$0(param){
    return [0, caml_call2(Core_Type_equal[8][3], cst_input, Core[149])];
   }
   function both$0(a, b){return [1, a, b];}
   function map$0(k, cmp, by){return [2, k, cmp, by];}
   var
    unit$1 = [0, caml_call2(Core_Type_equal[8][3], cst_lazy_input, Core[149])],
    int$0 = [0, caml_call2(Core_Type_equal[8][3], cst_enum_input, Core[149])],
    Hidden = [0, unit$1, int$0];
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Meta);
   var
    Bonsai_Meta =
      [0,
       [0,
        [0,
         sexp_of_t,
         same_witness,
         same_witness_exn,
         to_type_id,
         to_sexp,
         nothing,
         unit],
        [0, equal, sexp_of_t$0, create, lazy],
        unit$0,
        both,
        map,
        map_on,
        of_module],
       Multi_model,
       [0,
        sexp_of_t,
        same_witness,
        same_witness_exn,
        unit,
        both$0,
        map$0,
        create$0,
        Hidden]];
   runtime.caml_register_global(32, Bonsai_Meta, cst_Bonsai_Meta$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Snapshot
//# unitInfo: Requires: Bonsai__Import, Bonsai__Input, Bonsai__Lifecycle, Core__Option, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Ui_incr
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_Snapshot$0 = "Bonsai__Snapshot",
    cst_bonsai$0 = "bonsai";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Bonsai_Lifecycle = global_data.Bonsai__Lifecycle,
    Ui_incr = global_data.Ui_incr,
    Bonsai_Import = global_data.Bonsai__Import,
    Bonsai_Input = global_data.Bonsai__Input,
    Core_Option = global_data.Core__Option,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Snapshot$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/snapshot.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai$0, "snapshot.ml");
   var cst_bonsai = cst_bonsai$0, cst_Bonsai_Snapshot = cst_Bonsai_Snapshot$0;
   function result(r){return r[3];}
   function lifecycle(r){return r[2];}
   function input(r){return r[1];}
   function create(input, lifecycle, result){
    var _c_ = caml_call1(Bonsai_Import[6], 0);
    caml_call2(Bonsai_Input[6], input, _c_);
    var _d_ = caml_call1(Bonsai_Import[5], 3);
    caml_call2(Core_Option[46], lifecycle, _d_);
    caml_call2(Bonsai_Import[5], 2, result);
    return [0, input, lifecycle, result];
   }
   function attribute_positions(here, t){
    var _a_ = caml_call1(Bonsai_Import[8], here);
    caml_call2(Bonsai_Input[6], t[1], _a_);
    var _b_ = caml_call1(Bonsai_Import[7], here);
    caml_call2(Core_Option[46], t[2], _b_);
    return caml_call2(Bonsai_Import[7], here, t[3]);
   }
   function lifecycle_or_empty(t){
    var match = t[2];
    if(match){var l = match[1]; return l;}
    var r = caml_call1(Ui_incr[10], Bonsai_Lifecycle[1][2]);
    caml_call2(Bonsai_Import[5], 4, r);
    return r;
   }
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Snapshot);
   var
    Bonsai_Snapshot =
      [0,
       input,
       result,
       lifecycle,
       lifecycle_or_empty,
       create,
       attribute_positions];
   runtime.caml_register_global(19, Bonsai_Snapshot, cst_Bonsai_Snapshot$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Trampoline
//# unitInfo: Requires: Base__Monad, CamlinternalLazy, Core__List, Core__Map, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_Trampoline$0 = "Bonsai__Trampoline",
    cst_bonsai$0 = "bonsai";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    CamlinternalLazy = global_data.CamlinternalLazy,
    Core_Map = global_data.Core__Map,
    Core_List = global_data.Core__List,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Base_Monad = global_data.Base__Monad;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Trampoline$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/trampoline.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai$0, "trampoline.ml");
   var
    cst_bonsai = cst_bonsai$0,
    cst_Bonsai_Trampoline = cst_Bonsai_Trampoline$0;
   function lazy(t){return [0, t];}
   function return$0(a){return [1, a];}
   function bind(t, f){return [2, t, f];}
   function run(t$4){
    var t = t$4, stack = 0;
    for(;;)
     switch(t[0]){
       case 0:
        var t$0 = t[1], _e_ = runtime.caml_obj_tag(t$0);
        a:
        if(250 === _e_)
         var t$1 = t$0[1];
        else{
         if(246 !== _e_ && 244 !== _e_){var t$1 = t$0; break a;}
         var t$1 = caml_call1(CamlinternalLazy[2], t$0);
        }
        var t = t$1;
        break;
       case 1:
        var a = t[1];
        if(! stack) return a;
        var
         stack$0 = stack[2],
         k = stack[1],
         t$2 = caml_call1(k, a),
         t = t$2,
         stack = stack$0;
        break;
       default:
        var
         k$0 = t[2],
         t$3 = t[1],
         stack$1 = [0, k$0, stack],
         t = t$3,
         stack = stack$1;
     }
   }
   var
    include = caml_call1(Base_Monad[1], [0, bind, return$0, -349054340]),
    bind$0 = include[4],
    return$1 = include[5],
    all = include[9];
   function all_map(map){
    function _a_(alist){
     var _d_ = caml_call1(Core_Map[3], map);
     return caml_call1(return$1, caml_call2(Core_Map[8], _d_, alist));
    }
    function _b_(param){
     var v = param[2], k = param[1];
     return caml_call2
             (bind$0, v, function(v){return caml_call1(return$1, [0, k, v]);});
    }
    var _c_ = caml_call2(Core_Map[81], 0, map);
    return caml_call2
            (bind$0,
             caml_call1(all, caml_call2(Core_List[51], _c_, _b_)),
             _a_);
   }
   var
    Let_syntax = [0, return$1, bind$0],
    Let_syntax$0 = [0, return$1, Let_syntax];
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Trampoline);
   var Bonsai_Trampoline = [0, lazy, run, return$1, all_map, Let_syntax$0];
   runtime.caml_register_global
    (15, Bonsai_Trampoline, cst_Bonsai_Trampoline$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Computation
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_Computation = "Bonsai__Computation",
    cst_bonsai = "bonsai";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Computation);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][1], "src/computation.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai, "computation.ml");
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Computation);
   var Bonsai_Computation = [0];
   runtime.caml_register_global
    (11, Bonsai_Computation, cst_Bonsai_Computation);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Node_path
//# unitInfo: Requires: Base__Buffer, Bin_prot__Common, Bin_prot__Shape, Bin_shape, Core, Core__Int, Core__List, Core__String, Expect_test_config, Inline_test_config, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_expect_runtime__Test_block, Ppx_expect_runtime__Test_node, Ppx_expect_runtime__Types, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$0 = "",
    cst_Bonsai_Node_path$0 = "Bonsai__Node_path",
    cst_bonsai$0 = "bonsai",
    cst_builder = "builder",
    cst_src_node_path_ml$4 = "src/node_path.ml";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   function caml_call14
   (f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13){
    return (f.l >= 0 ? f.l : f.l = f.length) == 14
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13)
            : runtime.caml_call_gen
              (f,
               [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    empty = [0, 0, 0],
    cst = cst$0,
    Ppx_expect_runtime_Types = global_data.Ppx_expect_runtime__Types,
    Core = global_data.Core,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Expect_test_config = global_data.Expect_test_config,
    Ppx_expect_runtime_Test_block = global_data.Ppx_expect_runtime__Test_block,
    Ppx_expect_runtime_Test_node = global_data.Ppx_expect_runtime__Test_node,
    Inline_test_config = global_data.Inline_test_config,
    Base_Buffer = global_data.Base__Buffer,
    Core_Int = global_data.Core__Int,
    Core_List = global_data.Core__List;
   global_data.Bin_prot__Common;
   var
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Core_String = global_data.Core__String,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Bin_shape = global_data.Bin_shape;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Node_path$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_node_path_ml$4);
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai$0, "node_path.ml");
   var
    include = Core_String[180][1],
    bin_size_t = include[11],
    bin_write_t = include[12],
    bin_read_t = include[13],
    bin_read_t$0 = include[14],
    bin_shape_t = include[15],
    bin_writer_t = include[16],
    bin_reader_t = include[17],
    bin_t = include[18],
    compare = include[19],
    t_of_sexp = include[20],
    sexp_of_t = include[21],
    comparator = include[22],
    Map = include[23],
    Set = include[24],
    _a_ = [0, [0, "depth", Core[372]], 0],
    _b_ = [0, [0, "choices", caml_call1(Core[456], Core[372])], _a_],
    _c_ = caml_call1(Bin_prot_Shape[4], _b_),
    _d_ = [0, [0, caml_call1(Bin_shape[2][1], cst_builder), 0, _c_], 0],
    _e_ = caml_call1(Bin_shape[4][1], "src/node_path.ml:13:0"),
    group = caml_call2(Bin_prot_Shape[2], _e_, _d_),
    _f_ = caml_call1(Bin_shape[2][1], cst_builder);
   caml_call1(caml_call2(Bin_prot_Shape[10], group, _f_), 0);
   var
    _h_ = [0, [0, 30, 0], 1],
    _s_ = [0, 0, 1],
    _y_ = [0, [0, 1, [0, 2, [0, 2, [0, 1, [0, 0, 0]]]]], 0],
    _z_ = [0, [0, [0, " 1-2-2-1-0_0 ", [0, cst$0]], [0, 1000, 1015, 1032]]],
    _A_ = [0, 1000, 1006, 1033],
    _B_ = [0, 921, 925, 1033],
    _C_ = [0, 1000, 1033, 1033],
    _D_ = [0, 921, 925, 1033],
    cst_src_node_path_ml$2 = cst_src_node_path_ml$4,
    _t_ = [0, [0, [0, " _1 ", [0, cst$0]], [0, 1106, 1121, 1129]]],
    _u_ = [0, 1106, 1112, 1130],
    _v_ = [0, 1042, 1046, 1130],
    _w_ = [0, 1106, 1130, 1130],
    _x_ = [0, 1042, 1046, 1130],
    cst_src_node_path_ml$1 = cst_src_node_path_ml$4,
    _n_ = [0, [0, [0, " _0 ", [0, cst$0]], [0, 1181, 1196, 1204]]],
    _o_ = [0, 1181, 1187, 1205],
    _p_ = [0, 1139, 1143, 1205],
    _q_ = [0, 1181, 1205, 1205],
    _r_ = [0, 1139, 1143, 1205],
    cst_src_node_path_ml$0 = cst_src_node_path_ml$4,
    _i_ = [0, [0, [0, " 30_1 ", [0, cst$0]], [0, 1282, 1297, 1307]]],
    _j_ = [0, 1282, 1288, 1308],
    _k_ = [0, 1214, 1218, 1308],
    _l_ = [0, 1282, 1308, 1308],
    _m_ = [0, 1214, 1218, 1308],
    cst_src_node_path_ml = cst_src_node_path_ml$4,
    cst_src_node_path_ml$3 = cst_src_node_path_ml$4,
    cst_bonsai = cst_bonsai$0,
    cst_Bonsai_Node_path = cst_Bonsai_Node_path$0;
   function to_string(param){
    var
     depth = param[2],
     choices = param[1],
     buffer = caml_call1(Base_Buffer[2], 10);
    if(choices){
     var
      choices$0 = choices[2],
      choice = choices[1],
      _aa_ = caml_call1(Core_Int[79], choice);
     caml_call2(Base_Buffer[16], buffer, _aa_);
     var
      _ab_ =
        function(choice){
         caml_call2(Base_Buffer[15], buffer, 45);
         var _ad_ = caml_call1(Core_Int[79], choice);
         return caml_call2(Base_Buffer[16], buffer, _ad_);
        };
     caml_call2(Core_List[19], choices$0, _ab_);
    }
    caml_call2(Base_Buffer[15], buffer, 95);
    var _ac_ = caml_call1(Core_Int[79], depth);
    caml_call2(Base_Buffer[16], buffer, _ac_);
    return caml_call1(Base_Buffer[3], buffer);
   }
   function choice_point(t, n){
    return [0, caml_call2(Core[156], t[1], [0, n, 0]), 0];
   }
   function descend(t){return [0, t[1], t[2] + 1 | 0];}
   function _g_(param){
    function test(t){var s = to_string(t); return caml_call1(Core[32], s);}
    if(typeof Ppx_inline_test_lib[3] !== "number"){
     var
      Ppx_expect_test_block$2 =
        caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
      _T_ =
        function(param){
         test(_y_);
         var _$_ = caml_call1(Ppx_expect_runtime_Types[4][1], 0);
         return caml_call1(Ppx_expect_test_block$2[2], _$_);
        },
      _U_ =
        caml_call3
         (Ppx_expect_runtime_Test_node[1][1],
          [0, Ppx_expect_runtime_Types[1][1]],
          _A_,
          _z_),
      _V_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 0), _U_], 0],
      _W_ = caml_call1(Ppx_expect_runtime_Types[4][1], 2),
      _X_ = caml_call1(Ppx_expect_runtime_Types[4][1], 1);
     caml_call14
      (Ppx_expect_test_block$2[3],
       cst_src_node_path_ml$2,
       44,
       _D_,
       _C_,
       _B_,
       [0, Ppx_expect_runtime_Types[1][1]],
       0,
       _X_,
       _W_,
       0,
       0,
       Inline_test_config,
       _V_,
       _T_);
    }
    if(typeof Ppx_inline_test_lib[3] !== "number"){
     var
      Ppx_expect_test_block$1 =
        caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
      _O_ =
        function(param){
         test(_s_);
         var ___ = caml_call1(Ppx_expect_runtime_Types[4][1], 3);
         return caml_call1(Ppx_expect_test_block$1[2], ___);
        },
      _P_ =
        caml_call3
         (Ppx_expect_runtime_Test_node[1][1],
          [0, Ppx_expect_runtime_Types[1][1]],
          _u_,
          _t_),
      _Q_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 3), _P_], 0],
      _R_ = caml_call1(Ppx_expect_runtime_Types[4][1], 5),
      _S_ = caml_call1(Ppx_expect_runtime_Types[4][1], 4);
     caml_call14
      (Ppx_expect_test_block$1[3],
       cst_src_node_path_ml$1,
       49,
       _x_,
       _w_,
       _v_,
       [0, Ppx_expect_runtime_Types[1][1]],
       0,
       _S_,
       _R_,
       0,
       0,
       Inline_test_config,
       _Q_,
       _O_);
    }
    if(typeof Ppx_inline_test_lib[3] !== "number"){
     var
      Ppx_expect_test_block$0 =
        caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
      _J_ =
        function(param){
         test(empty);
         var _Z_ = caml_call1(Ppx_expect_runtime_Types[4][1], 6);
         return caml_call1(Ppx_expect_test_block$0[2], _Z_);
        },
      _K_ =
        caml_call3
         (Ppx_expect_runtime_Test_node[1][1],
          [0, Ppx_expect_runtime_Types[1][1]],
          _o_,
          _n_),
      _L_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 6), _K_], 0],
      _M_ = caml_call1(Ppx_expect_runtime_Types[4][1], 8),
      _N_ = caml_call1(Ppx_expect_runtime_Types[4][1], 7);
     caml_call14
      (Ppx_expect_test_block$0[3],
       cst_src_node_path_ml$0,
       54,
       _r_,
       _q_,
       _p_,
       [0, Ppx_expect_runtime_Types[1][1]],
       0,
       _N_,
       _M_,
       0,
       0,
       Inline_test_config,
       _L_,
       _J_);
    }
    if(typeof Ppx_inline_test_lib[3] !== "number"){
     var
      Ppx_expect_test_block =
        caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
      _E_ =
        function(param){
         test(_h_);
         var _Y_ = caml_call1(Ppx_expect_runtime_Types[4][1], 9);
         return caml_call1(Ppx_expect_test_block[2], _Y_);
        },
      _F_ =
        caml_call3
         (Ppx_expect_runtime_Test_node[1][1],
          [0, Ppx_expect_runtime_Types[1][1]],
          _j_,
          _i_),
      _G_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 9), _F_], 0],
      _H_ = caml_call1(Ppx_expect_runtime_Types[4][1], 11),
      _I_ = caml_call1(Ppx_expect_runtime_Types[4][1], 10);
     caml_call14
      (Ppx_expect_test_block[3],
       cst_src_node_path_ml,
       59,
       _m_,
       _l_,
       _k_,
       [0, Ppx_expect_runtime_Types[1][1]],
       0,
       _I_,
       _H_,
       0,
       0,
       Inline_test_config,
       _G_,
       _E_);
    }
    return 0;
   }
   caml_call8
    (Ppx_inline_test_lib[10],
     Inline_test_config,
     cst,
     0,
     cst_src_node_path_ml$3,
     37,
     0,
     513,
     _g_);
   function finalize(builder){return to_string(builder);}
   var
    bin_size_t$0 = Core_String[126],
    bin_write_t$0 = Core_String[127],
    bin_read_t$1 = Core_String[128],
    bin_read_t$2 = Core_String[129],
    bin_shape_t$0 = Core_String[130],
    bin_writer_t$0 = Core_String[131],
    bin_reader_t$0 = Core_String[132],
    bin_t$0 = Core_String[133],
    t_of_sexp$0 = Core_String[134],
    sexp_of_t$0 = Core_String[135],
    of_string = Core_String[136],
    to_string$0 = Core_String[137],
    symbol = Core_String[139],
    symbol$0 = Core_String[140],
    symbol$1 = Core_String[141],
    symbol$2 = Core_String[142],
    symbol$3 = Core_String[143],
    symbol$4 = Core_String[144],
    equal = Core_String[145],
    compare$0 = Core_String[146],
    min = Core_String[147],
    max = Core_String[148],
    ascending = Core_String[149],
    descending = Core_String[150],
    between = Core_String[151],
    clamp_exn = Core_String[152],
    clamp = Core_String[153],
    validate_lbound = Core_String[154],
    validate_ubound = Core_String[155],
    validate_bound = Core_String[156],
    Replace_polymorphic_compare = Core_String[157],
    comparator$0 = Core_String[158],
    Map$0 = Core_String[159],
    Set$0 = Core_String[160];
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Node_path);
   var
    Bonsai_Node_path =
      [0,
       bin_size_t$0,
       bin_write_t$0,
       bin_read_t$1,
       bin_read_t$2,
       bin_shape_t$0,
       bin_writer_t$0,
       bin_reader_t$0,
       bin_t$0,
       t_of_sexp$0,
       sexp_of_t$0,
       symbol,
       symbol$0,
       symbol$1,
       symbol$2,
       symbol$3,
       symbol$4,
       equal,
       compare$0,
       min,
       max,
       ascending,
       descending,
       between,
       clamp_exn,
       clamp,
       validate_lbound,
       validate_ubound,
       validate_bound,
       Replace_polymorphic_compare,
       comparator$0,
       Map$0,
       Set$0,
       of_string,
       to_string$0,
       empty,
       choice_point,
       descend,
       finalize,
       [0,
        [0,
         bin_size_t,
         bin_write_t,
         bin_read_t,
         bin_read_t$0,
         bin_shape_t,
         bin_writer_t,
         bin_reader_t,
         bin_t,
         compare,
         t_of_sexp,
         sexp_of_t,
         comparator,
         [0,
          Map[1],
          Map[2],
          Map[3],
          Map[4],
          Map[5],
          Map[6],
          Map[7],
          Map[8],
          Map[9],
          Map[10],
          Map[11],
          Map[12],
          Map[13]],
         [0,
          Set[1],
          Set[2],
          Set[3],
          Set[4],
          Set[5],
          Set[6],
          Set[7],
          Set[8],
          Set[9],
          Set[10],
          Set[11],
          Set[12]]]]];
   runtime.caml_register_global(60, Bonsai_Node_path, cst_Bonsai_Node_path$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Transform
//# unitInfo: Requires: Bonsai__Node_path, Core__Lazy, Core__Map, Core__Type_equal, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_Transform$0 = "Bonsai__Transform",
    cst_bonsai$0 = "bonsai";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Bonsai_Node_path = global_data.Bonsai__Node_path,
    Core_Type_equal = global_data.Core__Type_equal,
    Core_Map = global_data.Core__Map,
    Core_Lazy = global_data.Core__Lazy,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Transform$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/transform.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai$0, "transform.ml");
   var
    Var_from_parent = [0],
    _a_ = [0, 1],
    _b_ = [0, 2],
    _c_ = [0, 1],
    _d_ = [0, 2],
    _e_ = [0, 2],
    _f_ = [0, 1],
    _g_ = [0, 2],
    _h_ = [0, 1],
    cst_bonsai = cst_bonsai$0,
    cst_Bonsai_Transform = cst_Bonsai_Transform$0;
   function descend(f, var_from_parent, append_to, parent, param){
    var
     id = param[3],
     here = param[2],
     value = param[1],
     current_path = caml_call1(Bonsai_Node_path[37], append_to);
    function map(n, v){
     var
      append_to = caml_call2(Bonsai_Node_path[36], current_path, n),
      child_path = caml_call1(Bonsai_Node_path[37], append_to),
      _aE_ =
        [246,
         function(_aI_){return caml_call1(Bonsai_Node_path[38], child_path);}],
      _aF_ =
        [246,
         function(_aH_){
          return caml_call1(Bonsai_Node_path[38], current_path);
         }],
      _aG_ =
        [0,
         function(parent, v){return descend(f, 0, append_to, parent, v);},
         var_from_parent,
         _aF_,
         _aE_];
     return caml_call3(f[1], _aG_, parent, v);
    }
    switch(value[0]){
      case 0:
       var value$0 = value; break;
      case 1:
       var value$0 = value; break;
      case 2:
       var value$0 = value; break;
      case 3:
       var
        b = value[2],
        a = value[1],
        _$_ = map(2, b),
        value$0 = [3, map(1, a), _$_];
       break;
      case 4:
       var
        _aa_ = value[3],
        _ab_ = value[2],
        value$0 = [4, map(1, value[1]), _ab_, _aa_];
       break;
      case 5:
       var _ac_ = value[2], value$0 = [5, map(1, value[1]), _ac_]; break;
      case 6:
       var
        _ad_ = value[3],
        _ae_ = map(2, value[2]),
        value$0 = [6, map(1, value[1]), _ae_, _ad_];
       break;
      case 7:
       var
        _af_ = value[4],
        _ag_ = map(3, value[3]),
        _ah_ = map(2, value[2]),
        value$0 = [7, map(1, value[1]), _ah_, _ag_, _af_];
       break;
      case 8:
       var
        _ai_ = value[5],
        _aj_ = map(4, value[4]),
        _ak_ = map(3, value[3]),
        _al_ = map(2, value[2]),
        value$0 = [8, map(1, value[1]), _al_, _ak_, _aj_, _ai_];
       break;
      case 9:
       var
        _am_ = value[6],
        _an_ = map(5, value[5]),
        _ao_ = map(4, value[4]),
        _ap_ = map(3, value[3]),
        _aq_ = map(2, value[2]),
        value$0 = [9, map(1, value[1]), _aq_, _ap_, _ao_, _an_, _am_];
       break;
      case 10:
       var
        _ar_ = value[7],
        _as_ = map(6, value[6]),
        _at_ = map(5, value[5]),
        _au_ = map(4, value[4]),
        _av_ = map(3, value[3]),
        _aw_ = map(2, value[2]),
        value$0 = [10, map(1, value[1]), _aw_, _av_, _au_, _at_, _as_, _ar_];
       break;
      case 11:
       var
        _ax_ = value[8],
        _ay_ = map(7, value[7]),
        _az_ = map(6, value[6]),
        _aA_ = map(5, value[5]),
        _aB_ = map(4, value[4]),
        _aC_ = map(3, value[3]),
        _aD_ = map(2, value[2]),
        value$0 =
          [11, map(1, value[1]), _aD_, _aC_, _aB_, _aA_, _az_, _ay_, _ax_];
       break;
      default: var value$0 = value;
    }
    return [0, value$0, here, id];
   }
   var
    id =
      [0,
       function(param, from_parent, value){
        var recurse = param[1];
        return caml_call2(recurse, from_parent, value);
       }];
   function descend$0(f, for_value, append_to, parent, computation){
    var current_path = caml_call1(Bonsai_Node_path[37], append_to);
    function map(opt, choice, c){
     if(opt)
      var sth = opt[1], var_from_parent = sth;
     else
      var var_from_parent = 0;
     if(choice)
      var
       choice$0 = choice[1],
       append_to = caml_call2(Bonsai_Node_path[36], current_path, choice$0);
     else
      var append_to = current_path;
     var
      child_path = caml_call1(Bonsai_Node_path[37], append_to),
      _W_ =
        [246,
         function(___){return caml_call1(Bonsai_Node_path[38], child_path);}],
      _X_ =
        [246,
         function(_Z_){return caml_call1(Bonsai_Node_path[38], current_path);}],
      _Y_ =
        [0,
         function(parent, c){
          return descend$0(f, for_value, append_to, parent, c);
         },
         var_from_parent,
         _X_,
         _W_];
     return caml_call3(f[1], _Y_, parent, c);
    }
    function map_value(opt, choice, v){
     if(opt)
      var sth = opt[1], var_from_parent = sth;
     else
      var var_from_parent = 0;
     if(choice)
      var
       choice$0 = choice[1],
       append_to = caml_call2(Bonsai_Node_path[36], current_path, choice$0);
     else
      var append_to = current_path;
     var
      parent_path =
        [246,
         function(_V_){return caml_call1(Bonsai_Node_path[38], current_path);}],
      current_path$0 = caml_call1(Bonsai_Node_path[37], append_to),
      _S_ =
        [246,
         function(_U_){
          return caml_call1(Bonsai_Node_path[38], current_path$0);
         }],
      _T_ =
        [0,
         function(parent, v){
          return descend(for_value, 0, append_to, parent, v);
         },
         var_from_parent,
         parent_path,
         _S_];
     return caml_call3(for_value[1], _T_, parent, v);
    }
    if(typeof computation === "number") return computation;
    switch(computation[0]){
      case 0:
       var value = computation[1]; return [0, map_value(0, 0, value)];
      case 1:
       var _o_ = map_value(0, 0, computation[6]);
       return [1,
               computation[1],
               computation[2],
               computation[3],
               computation[4],
               computation[5],
               _o_];
      case 2:
       return computation;
      case 3:
       var _p_ = computation[2];
       return [3, map_value(0, 0, computation[1]), _p_];
      case 4:
       var
        _q_ = computation[1],
        from =
          map
           ([0, [0, caml_call1(Core_Type_equal[8][2], computation[2])]],
            _a_,
            _q_),
        into = map(0, _b_, computation[3]);
       return [4, from, computation[2], into, computation[4]];
      case 5:
       var
        _r_ = computation[2],
        value$0 =
          map_value
           ([0, [0, caml_call1(Core_Type_equal[8][2], computation[1])]],
            _c_,
            _r_),
        inner = map(0, _d_, computation[3]);
       return [5, computation[1], value$0, inner];
      case 6:
       return computation;
      case 7:
       var
        _s_ = computation[6],
        _t_ = caml_call1(Core_Type_equal[8][2], computation[5]),
        _u_ =
          map
           ([0, [1, caml_call1(Core_Type_equal[8][2], computation[3]), _t_]],
            _e_,
            _s_),
        _v_ = computation[5],
        _w_ = computation[4],
        _x_ = computation[3],
        _y_ = computation[2];
       return [7, map_value(0, _f_, computation[1]), _y_, _x_, _w_, _v_, _u_];
      case 8:
       var
        _z_ = computation[10],
        _A_ = computation[9],
        _B_ = caml_call1(Core_Type_equal[8][2], computation[8]),
        _C_ =
          map
           ([0, [1, caml_call1(Core_Type_equal[8][2], computation[4]), _B_]],
            _g_,
            _A_),
        _D_ = computation[8],
        _E_ = computation[7],
        _F_ = computation[6],
        _G_ = computation[5],
        _H_ = computation[4],
        _I_ = computation[3],
        _J_ = computation[2];
       return [8,
               map_value(0, _h_, computation[1]),
               _J_,
               _I_,
               _H_,
               _G_,
               _F_,
               _E_,
               _D_,
               _C_,
               _z_];
      case 9:
       var _K_ = computation[3], _L_ = computation[2];
       return [9, map_value(0, 0, computation[1]), _L_, _K_];
      case 10:
       var
        here = computation[3],
        arms = computation[2],
        index = [0, 1],
        match = map_value(0, [0, index[1]], computation[1]),
        _M_ = function(c){index[1]++; return map(0, [0, index[1]], c);},
        arms$0 = caml_call2(Core_Map[57], arms, _M_);
       return [10, match, arms$0, here];
      case 11:
       var t = computation[1], _N_ = function(eta){return map(0, 0, eta);};
       return [11, caml_call2(Core_Lazy[30], t, _N_)];
      case 12:
       var
        inner$0 = computation[6],
        model_id = computation[5],
        inject_id = computation[4],
        _O_ = computation[8],
        _P_ = computation[7],
        _Q_ = caml_call1(Core_Type_equal[8][2], inject_id),
        _R_ =
          map
           ([0, [1, caml_call1(Core_Type_equal[8][2], model_id), _Q_]],
            0,
            inner$0);
       return [12,
               computation[1],
               computation[2],
               computation[3],
               computation[4],
               computation[5],
               _R_,
               _P_,
               _O_];
      case 13:
       var inner$1 = computation[2], reset_id = computation[1];
       return [13, reset_id, map(0, 0, inner$1)];
      default: var t$0 = computation[1]; return [14, map_value(0, 0, t$0)];
    }
   }
   var
    id$0 =
      [0,
       function(param, from_parent, computation){
        var recurse = param[1];
        return caml_call2(recurse, from_parent, computation);
       }];
   function map(computation_mapper, value_mapper, init, computation){
    var
     current_path = caml_call1(Bonsai_Node_path[37], Bonsai_Node_path[35]),
     parent_path = Bonsai_Node_path[35],
     append_to = Bonsai_Node_path[35],
     _i_ =
       [246,
        function(_n_){return caml_call1(Bonsai_Node_path[38], current_path);}],
     _j_ =
       [246,
        function(_m_){return caml_call1(Bonsai_Node_path[38], parent_path);}],
     _k_ = 0,
     _l_ =
       [0,
        function(parent, c){
         return descend$0
                 (computation_mapper, value_mapper, append_to, parent, c);
        },
        _k_,
        _j_,
        _i_];
    return caml_call3(computation_mapper[1], _l_, init, computation);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Transform);
   var Bonsai_Transform = [0, Var_from_parent, [0, id], [0, id$0], map];
   runtime.caml_register_global(23, Bonsai_Transform, cst_Bonsai_Transform$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Fix_transform_intf
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_Fix_transform_intf$0 = "Bonsai__Fix_transform_intf",
    cst_bonsai$0 = "bonsai";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Fix_transform_intf$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/fix_transform_intf.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai$0, "fix_transform_intf.ml");
   var
    cst_bonsai = cst_bonsai$0,
    cst_Bonsai_Fix_transform_intf = cst_Bonsai_Fix_transform_intf$0;
   function combine(param, _a_){return 0;}
   var Unit = [0, combine, 0, 0];
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Fix_transform_intf);
   var Bonsai_Fix_transform_intf = [0, Unit];
   runtime.caml_register_global
    (11, Bonsai_Fix_transform_intf, cst_Bonsai_Fix_transform_intf$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Fix_transform
//# unitInfo: Requires: Bonsai__Fix_transform_intf, Bonsai__Trampoline, CamlinternalMod, Core__Int, Core__Lazy, Core__List, Core__Map, Core__Option, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_Fix_transform$0 = "Bonsai__Fix_transform",
    cst_bonsai$0 = "bonsai",
    cst_src_fix_transform_ml = "src/fix_transform.ml";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Bonsai_Trampoline = global_data.Bonsai__Trampoline,
    Core_List = global_data.Core__List,
    Core_Option = global_data.Core__Option,
    Core_Int = global_data.Core__Int,
    Core_Map = global_data.Core__Map,
    Core_Lazy = global_data.Core__Lazy,
    CamlinternalMod = global_data.CamlinternalMod,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Fix_transform$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_fix_transform_ml);
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai$0, "fix_transform.ml");
   var
    _a_ = [0, [0, 0, 0]],
    _b_ = [0, cst_src_fix_transform_ml, 8, 62],
    _c_ = [0, [0, 0, 0]],
    _d_ = [0, cst_src_fix_transform_ml, 197, 54],
    _e_ = [0, [0, 0, 0]],
    _f_ = [0, [0, 0, 0]],
    cst_bonsai = cst_bonsai$0,
    cst_Bonsai_Fix_transform = cst_Bonsai_Fix_transform$0;
   function Make(Types, F){
    var
     Recurse = caml_call2(CamlinternalMod[1], _b_, _a_),
     User = caml_call2(CamlinternalMod[1], _d_, _c_),
     empty_for_lazy = Types[3][3],
     empty = Types[3][2],
     combine_up = Types[3][1];
    function default_c(down, acc, computation){
     if(typeof computation === "number")
      return caml_call1(Bonsai_Trampoline[5][1], [0, acc, empty, 0]);
     switch(computation[0]){
       case 0:
        var
         value = computation[1],
         match = caml_call3(User[2], down, acc, value),
         value$0 = match[3],
         up = match[2],
         acc$0 = match[1];
        return caml_call1
                (Bonsai_Trampoline[5][1], [0, acc$0, up, [0, value$0]]);
       case 1:
        var
         input = computation[6],
         reset = computation[5],
         apply_action = computation[4],
         dynamic_action = computation[3],
         input_id = computation[2],
         model = computation[1],
         match$0 = caml_call3(User[2], down, acc, input),
         input$0 = match$0[3],
         up$0 = match$0[2],
         acc$1 = match$0[1];
        return caml_call1
                (Bonsai_Trampoline[5][1],
                 [0,
                  acc$1,
                  up$0,
                  [1,
                   model,
                   input_id,
                   dynamic_action,
                   apply_action,
                   reset,
                   input$0]]);
       case 2:
        var
         reset$0 = computation[4],
         apply_action$0 = computation[3],
         static_action = computation[2],
         model$0 = computation[1];
        return caml_call1
                (Bonsai_Trampoline[5][1],
                 [0,
                  acc,
                  empty,
                  [2, model$0, static_action, apply_action$0, reset$0]]);
       case 3:
        var
         compute = computation[2],
         input$1 = computation[1],
         match$1 = caml_call3(User[2], down, acc, input$1),
         input$2 = match$1[3],
         up$1 = match$1[2],
         acc$2 = match$1[1];
        return caml_call1
                (Bonsai_Trampoline[5][1],
                 [0, acc$2, up$1, [3, input$2, compute]]);
       case 4:
        var
         here = computation[4],
         into = computation[3],
         via = computation[2],
         from = computation[1],
         _k_ =
           function(param){
            var from = param[3], up1 = param[2], acc = param[1];
            function _M_(param){
             var
              into = param[3],
              up2 = param[2],
              acc = param[1],
              _O_ =
                [0,
                 acc,
                 caml_call2(combine_up, up1, up2),
                 [4, from, via, into, here]];
             return caml_call1(Bonsai_Trampoline[5][1], _O_);
            }
            var _N_ = caml_call3(User[1], down, acc, into);
            return caml_call2(Bonsai_Trampoline[5][2][2], _N_, _M_);
           },
         _l_ = caml_call3(User[1], down, acc, from);
        return caml_call2(Bonsai_Trampoline[5][2][2], _l_, _k_);
       case 5:
        var
         inner = computation[3],
         value$1 = computation[2],
         id = computation[1],
         match$2 = caml_call3(User[2], down, acc, value$1),
         value$2 = match$2[3],
         up1 = match$2[2],
         acc$3 = match$2[1],
         _m_ =
           function(param){
            var
             inner = param[3],
             up2 = param[2],
             acc = param[1],
             _L_ =
               [0,
                acc,
                caml_call2(combine_up, up1, up2),
                [5, id, value$2, inner]];
            return caml_call1(Bonsai_Trampoline[5][1], _L_);
           },
         _n_ = caml_call3(User[1], down, acc$3, inner);
        return caml_call2(Bonsai_Trampoline[5][2][2], _n_, _m_);
       case 6:
        var
         for_some = computation[3],
         default$0 = computation[2],
         id$0 = computation[1];
        return caml_call1
                (Bonsai_Trampoline[5][1],
                 [0, acc, empty, [6, id$0, default$0, for_some]]);
       case 7:
        var
         by = computation[6],
         data_id = computation[5],
         cmp_id = computation[4],
         key_id = computation[3],
         key_comparator = computation[2],
         map = computation[1],
         match$3 = caml_call3(User[2], down, acc, map),
         map$0 = match$3[3],
         up1$0 = match$3[2],
         acc$4 = match$3[1],
         _o_ =
           function(param){
            var
             by = param[3],
             up2 = param[2],
             acc = param[1],
             _K_ =
               [0,
                acc,
                caml_call2(combine_up, up1$0, up2),
                [7, map$0, key_comparator, key_id, cmp_id, data_id, by]];
            return caml_call1(Bonsai_Trampoline[5][1], _K_);
           },
         _p_ = caml_call3(User[1], down, acc$4, by);
        return caml_call2(Bonsai_Trampoline[5][2][2], _p_, _o_);
       case 8:
        var
         match$4 = caml_call3(User[2], down, acc, computation[1]),
         map$1 = match$4[3],
         up1$1 = match$4[2],
         acc$5 = match$4[1],
         _q_ =
           function(param){
            var
             by = param[3],
             up2 = param[2],
             acc = param[1],
             _I_ =
               [8,
                map$1,
                computation[2],
                computation[3],
                computation[4],
                computation[5],
                computation[6],
                computation[7],
                computation[8],
                by,
                computation[10]],
             _J_ = [0, acc, caml_call2(combine_up, up1$1, up2), _I_];
            return caml_call1(Bonsai_Trampoline[5][1], _J_);
           },
         _r_ = caml_call3(User[1], down, acc$5, computation[9]);
        return caml_call2(Bonsai_Trampoline[5][2][2], _r_, _q_);
       case 9:
        var
         may_contain_path = computation[3],
         by$0 = computation[2],
         map$2 = computation[1],
         match$5 = caml_call3(User[2], down, acc, map$2),
         map$3 = match$5[3],
         up$2 = match$5[2],
         acc$6 = match$5[1];
        return caml_call1
                (Bonsai_Trampoline[5][1],
                 [0, acc$6, up$2, [9, map$3, by$0, may_contain_path]]);
       case 10:
        var
         here$0 = computation[3],
         arms = computation[2],
         match$6 = caml_call3(User[2], down, acc, computation[1]),
         up1$2 = match$6[2],
         acc$7 = match$6[1],
         match$7 = match$6[3],
         _s_ =
           function(acc_and_up_and_arms, param){
            var v = param[2], k = param[1];
            function _E_(param){
             var arms = param[3], up = param[2], acc = param[1];
             function _F_(param){
              var
               v = param[3],
               up$0 = param[2],
               acc = param[1],
               _H_ =
                 [0,
                  acc,
                  caml_call2(combine_up, up, up$0),
                  [0, [0, k, v], arms]];
              return caml_call1(Bonsai_Trampoline[5][1], _H_);
             }
             var _G_ = caml_call3(User[1], down, acc, v);
             return caml_call2(Bonsai_Trampoline[5][2][2], _G_, _F_);
            }
            return caml_call2
                    (Bonsai_Trampoline[5][2][2], acc_and_up_and_arms, _E_);
           },
         _t_ = caml_call1(Bonsai_Trampoline[5][1], [0, acc$7, up1$2, 0]),
         _u_ = caml_call2(Core_Map[81], 0, arms),
         acc_and_upn_and_arms = caml_call3(Core_List[20], _u_, _t_, _s_),
         _v_ =
           function(param){
            var
             arms = param[3],
             upn = param[2],
             acc = param[1],
             arms$0 = caml_call2(Core_Map[8], [0, Core_Int[97]], arms);
            return caml_call1
                    (Bonsai_Trampoline[5][1],
                     [0, acc, upn, [10, match$7, arms$0, here$0]]);
           };
        return caml_call2
                (Bonsai_Trampoline[5][2][2], acc_and_upn_and_arms, _v_);
       case 11:
        var
         t = computation[1],
         _w_ =
           function(t){
            function _B_(param){
             var t = param[3];
             return caml_call1(Bonsai_Trampoline[5][1], t);
            }
            var
             _C_ = caml_call3(User[1], down, acc, t),
             _D_ = caml_call2(Bonsai_Trampoline[5][2][2], _C_, _B_);
            return caml_call1(Bonsai_Trampoline[2], _D_);
           },
         t$0 = caml_call2(Core_Lazy[30], t, _w_);
        return caml_call1
                (Bonsai_Trampoline[5][1], [0, acc, empty_for_lazy, [11, t$0]]);
       case 12:
        var
         reset$1 = computation[8],
         dynamic_apply_action = computation[7],
         inner$0 = computation[6],
         model_id = computation[5],
         inject_id = computation[4],
         action_id = computation[3],
         result_id = computation[2],
         wrapper_model = computation[1],
         _x_ =
           function(param){
            var
             inner = param[3],
             up = param[2],
             acc = param[1],
             res =
               [12,
                wrapper_model,
                result_id,
                action_id,
                inject_id,
                model_id,
                inner,
                dynamic_apply_action,
                reset$1];
            return caml_call1(Bonsai_Trampoline[5][1], [0, acc, up, res]);
           },
         _y_ = caml_call3(User[1], down, acc, inner$0);
        return caml_call2(Bonsai_Trampoline[5][2][2], _y_, _x_);
       case 13:
        var
         inner$1 = computation[2],
         reset_id = computation[1],
         _z_ =
           function(param){
            var inner = param[3], up = param[2], acc = param[1];
            return caml_call1
                    (Bonsai_Trampoline[5][1],
                     [0, acc, up, [13, reset_id, inner]]);
           },
         _A_ = caml_call3(User[1], down, acc, inner$1);
        return caml_call2(Bonsai_Trampoline[5][2][2], _A_, _z_);
       default:
        var
         value$3 = computation[1],
         match$8 = caml_call3(User[2], down, acc, value$3),
         value$4 = match$8[3],
         up$3 = match$8[2],
         acc$8 = match$8[1];
        return caml_call1
                (Bonsai_Trampoline[5][1], [0, acc$8, up$3, [14, value$4]]);
     }
    }
    function reduce_up(l){
     var _j_ = caml_call2(Core_List[109], l, combine_up);
     return caml_call2(Core_Option[39], _j_, empty);
    }
    function default_v(down, acc, param){
     var id = param[3], here = param[2], value = param[1];
     switch(value[0]){
       case 0:
        var c = value[1], value$0 = [0, c], up = empty, acc$0 = acc; break;
       case 1:
        var
         incr_node = value[1],
         value$0 = [1, incr_node],
         up = empty,
         acc$0 = acc;
        break;
       case 2:
        var
         name_source = value[1],
         value$0 = [2, name_source],
         up = empty,
         acc$0 = acc;
        break;
       case 3:
        var
         b = value[2],
         a = value[1],
         match = caml_call3(User[2], down, acc, a),
         a$0 = match[3],
         up_a = match[2],
         acc$1 = match[1],
         match$0 = caml_call3(User[2], down, acc$1, b),
         b$0 = match$0[3],
         up_b = match$0[2],
         acc$2 = match$0[1],
         value$1 = [3, a$0, b$0],
         value$0 = value$1,
         up = caml_call2(combine_up, up_a, up_b),
         acc$0 = acc$2;
        break;
       case 4:
        var
         match$1 = caml_call3(User[2], down, acc, value[1]),
         value$2 = match$1[3],
         up$0 = match$1[2],
         acc$3 = match$1[1],
         value$0 = [4, value$2, value[2], value[3]],
         up = up$0,
         acc$0 = acc$3;
        break;
       case 5:
        var
         match$2 = caml_call3(User[2], down, acc, value[1]),
         value$3 = match$2[3],
         up$1 = match$2[2],
         acc$4 = match$2[1],
         value$0 = [5, value$3, value[2]],
         up = up$1,
         acc$0 = acc$4;
        break;
       case 6:
        var
         match$3 = caml_call3(User[2], down, acc, value[1]),
         t1 = match$3[3],
         up1 = match$3[2],
         acc$5 = match$3[1],
         match$4 = caml_call3(User[2], down, acc$5, value[2]),
         t2 = match$4[3],
         up2 = match$4[2],
         acc$6 = match$4[1],
         value$4 = [6, t1, t2, value[3]],
         value$0 = value$4,
         up = reduce_up([0, up1, [0, up2, 0]]),
         acc$0 = acc$6;
        break;
       case 7:
        var
         match$5 = caml_call3(User[2], down, acc, value[1]),
         t1$0 = match$5[3],
         up1$0 = match$5[2],
         acc$7 = match$5[1],
         match$6 = caml_call3(User[2], down, acc$7, value[2]),
         t2$0 = match$6[3],
         up2$0 = match$6[2],
         acc$8 = match$6[1],
         match$7 = caml_call3(User[2], down, acc$8, value[3]),
         t3 = match$7[3],
         up3 = match$7[2],
         acc$9 = match$7[1],
         value$5 = [7, t1$0, t2$0, t3, value[4]],
         value$0 = value$5,
         up = reduce_up([0, up1$0, [0, up2$0, [0, up3, 0]]]),
         acc$0 = acc$9;
        break;
       case 8:
        var
         match$8 = caml_call3(User[2], down, acc, value[1]),
         t1$1 = match$8[3],
         up1$1 = match$8[2],
         acc$10 = match$8[1],
         match$9 = caml_call3(User[2], down, acc$10, value[2]),
         t2$1 = match$9[3],
         up2$1 = match$9[2],
         acc$11 = match$9[1],
         match$10 = caml_call3(User[2], down, acc$11, value[3]),
         t3$0 = match$10[3],
         up3$0 = match$10[2],
         acc$12 = match$10[1],
         match$11 = caml_call3(User[2], down, acc$12, value[4]),
         t4 = match$11[3],
         up4 = match$11[2],
         acc$13 = match$11[1],
         value$6 = [8, t1$1, t2$1, t3$0, t4, value[5]],
         value$0 = value$6,
         up = reduce_up([0, up1$1, [0, up2$1, [0, up3$0, [0, up4, 0]]]]),
         acc$0 = acc$13;
        break;
       case 9:
        var
         match$12 = caml_call3(User[2], down, acc, value[1]),
         t1$2 = match$12[3],
         up1$2 = match$12[2],
         acc$14 = match$12[1],
         match$13 = caml_call3(User[2], down, acc$14, value[2]),
         t2$2 = match$13[3],
         up2$2 = match$13[2],
         acc$15 = match$13[1],
         match$14 = caml_call3(User[2], down, acc$15, value[3]),
         t3$1 = match$14[3],
         up3$1 = match$14[2],
         acc$16 = match$14[1],
         match$15 = caml_call3(User[2], down, acc$16, value[4]),
         t4$0 = match$15[3],
         up4$0 = match$15[2],
         acc$17 = match$15[1],
         match$16 = caml_call3(User[2], down, acc$17, value[5]),
         t5 = match$16[3],
         up5 = match$16[2],
         acc$18 = match$16[1],
         up$2 =
           reduce_up
            ([0, up1$2, [0, up2$2, [0, up3$1, [0, up4$0, [0, up5, 0]]]]]),
         value$0 = [9, t1$2, t2$2, t3$1, t4$0, t5, value[6]],
         up = up$2,
         acc$0 = acc$18;
        break;
       case 10:
        var
         match$17 = caml_call3(User[2], down, acc, value[1]),
         t1$3 = match$17[3],
         up1$3 = match$17[2],
         acc$19 = match$17[1],
         match$18 = caml_call3(User[2], down, acc$19, value[2]),
         t2$3 = match$18[3],
         up2$3 = match$18[2],
         acc$20 = match$18[1],
         match$19 = caml_call3(User[2], down, acc$20, value[3]),
         t3$2 = match$19[3],
         up3$2 = match$19[2],
         acc$21 = match$19[1],
         match$20 = caml_call3(User[2], down, acc$21, value[4]),
         t4$1 = match$20[3],
         up4$1 = match$20[2],
         acc$22 = match$20[1],
         match$21 = caml_call3(User[2], down, acc$22, value[5]),
         t5$0 = match$21[3],
         up5$0 = match$21[2],
         acc$23 = match$21[1],
         match$22 = caml_call3(User[2], down, acc$23, value[6]),
         t6 = match$22[3],
         up6 = match$22[2],
         acc$24 = match$22[1],
         up$3 =
           reduce_up
            ([0,
              up1$3,
              [0, up2$3, [0, up3$2, [0, up4$1, [0, up5$0, [0, up6, 0]]]]]]),
         value$0 = [10, t1$3, t2$3, t3$2, t4$1, t5$0, t6, value[7]],
         up = up$3,
         acc$0 = acc$24;
        break;
       case 11:
        var
         match$23 = caml_call3(User[2], down, acc, value[1]),
         t1$4 = match$23[3],
         up1$4 = match$23[2],
         acc$25 = match$23[1],
         match$24 = caml_call3(User[2], down, acc$25, value[2]),
         t2$4 = match$24[3],
         up2$4 = match$24[2],
         acc$26 = match$24[1],
         match$25 = caml_call3(User[2], down, acc$26, value[3]),
         t3$3 = match$25[3],
         up3$3 = match$25[2],
         acc$27 = match$25[1],
         match$26 = caml_call3(User[2], down, acc$27, value[4]),
         t4$2 = match$26[3],
         up4$2 = match$26[2],
         acc$28 = match$26[1],
         match$27 = caml_call3(User[2], down, acc$28, value[5]),
         t5$1 = match$27[3],
         up5$1 = match$27[2],
         acc$29 = match$27[1],
         match$28 = caml_call3(User[2], down, acc$29, value[6]),
         t6$0 = match$28[3],
         up6$0 = match$28[2],
         acc$30 = match$28[1],
         match$29 = caml_call3(User[2], down, acc$30, value[7]),
         t7 = match$29[3],
         up7 = match$29[2],
         acc$31 = match$29[1],
         up$4 =
           reduce_up
            ([0,
              up1$4,
              [0,
               up2$4,
               [0, up3$3, [0, up4$2, [0, up5$1, [0, up6$0, [0, up7, 0]]]]]]]),
         value$0 = [11, t1$4, t2$4, t3$3, t4$2, t5$1, t6$0, t7, value[8]],
         up = up$4,
         acc$0 = acc$31;
        break;
       default:
        var
         e = value[1],
         value$7 = [12, e],
         value$0 = value$7,
         up = empty,
         acc$0 = acc;
     }
     return [0, acc$0, up, [0, value$0, here, id]];
    }
    function on_value(down, acc, behavior, value){
     return 264513256 <= behavior
             ? caml_call3(User[2], down, acc, value)
             : default_v(down, acc, value);
    }
    function on_computation(down, acc, behavior, computation){
     var
      _h_ =
        [246,
         function(_i_){
          return 264513256 <= behavior
                  ? caml_call3(User[1], down, acc, computation)
                  : default_c(down, acc, computation);
         }];
     return caml_call1(Bonsai_Trampoline[1], _h_);
    }
    caml_call3
     (CamlinternalMod[2], _e_, Recurse, [0, on_computation, on_value]);
    var _g_ = caml_call1(F, Recurse);
    caml_call3(CamlinternalMod[2], _f_, User, _g_);
    function transform_c(down, acc, computation){
     return caml_call4(Recurse[1], down, acc, 264513256, computation);
    }
    function transform_v(down, acc, value){
     return caml_call4(Recurse[2], down, acc, 264513256, value);
    }
    return [0, transform_c, transform_v];
   }
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Fix_transform);
   var Bonsai_Fix_transform = [0, Make];
   runtime.caml_register_global
    (24, Bonsai_Fix_transform, cst_Bonsai_Fix_transform$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Proc_min
//# unitInfo: Requires: Bonsai__Apply_action_context, Bonsai__Meta, Bonsai__Value, Core, Core__Int, Core__List, Core__Option, Core__Sexp, Core__Source_code_position, Core__Type_equal, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Ui_incr
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_Proc_min$0 = "Bonsai__Proc_min",
    cst_action = "action",
    cst_bonsai$0 = "bonsai",
    cst_data_id$1 = "data id",
    cst_model_key_id$1 = "model key id",
    cst_src_proc_min_ml = "src/proc_min.ml",
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Core = global_data.Core,
    Core_Type_equal = global_data.Core__Type_equal,
    Bonsai_Value = global_data.Bonsai__Value,
    Core_Sexp = global_data.Core__Sexp,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Bonsai_Apply_action_context = global_data.Bonsai__Apply_action_context,
    Bonsai_Meta = global_data.Bonsai__Meta,
    Core_Option = global_data.Core__Option,
    Ui_incr = global_data.Ui_incr,
    Core_Source_code_position = global_data.Core__Source_code_position,
    Core_List = global_data.Core__List,
    Core_Int = global_data.Core__Int,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Proc_min$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_proc_min_ml);
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai$0, "proc_min.ml");
   var
    cst_reset_model = "reset-model",
    _g_ = [0, cst_action],
    cst_An_action_sent_to_a_wrap_h =
      "An action sent to a [wrap] has been dropped because its input was not present. This happens when the [wrap] is inactive when it receives a message.",
    cst_model_id = "model id",
    cst_action_id = "action id",
    cst_inject_id = "inject id",
    cst_outer_model_for_wrap = "outer model for wrap",
    cst_io_key_id = "io key id",
    cst_io_cmp_id = "io cmp id",
    cst_model_key_id = cst_model_key_id$1,
    cst_model_key_id$0 = cst_model_key_id$1,
    cst_data_id$0 = cst_data_id$1,
    cst_key_id = "key id",
    cst_cmp_id = "cmp id",
    cst_data_id = cst_data_id$1,
    _f_ = [0, cst_action],
    cst_An_action_sent_to_an_of_mo =
      "An action sent to an [of_module] has been dropped because its input was not present. This happens when the [of_module] is inactive when it receives a message.",
    cst_src_proc_min_ml_173_17 = "src/proc_min.ml:173:17",
    _e_ = [0, cst_src_proc_min_ml, 118, 2635, 2679],
    _c_ = [0, "Active"],
    _d_ = [0, "Inactive"],
    _b_ = [0, cst_src_proc_min_ml, 53, 1191, 1235],
    _a_ = [0, cst_src_proc_min_ml, 15, 360, 406],
    cst_bonsai = cst_bonsai$0,
    cst_Bonsai_Proc_min = cst_Bonsai_Proc_min$0;
   function read(x){return [0, x];}
   function sub(here, from, f){
    if(typeof from !== "number" && 0 === from[0]){
     var match = from[1], named = match[1];
     if(2 === named[0]){
      var
       id = match[3],
       there = match[2],
       here$0 = caml_call2(Core_Option[59], here, there);
      return caml_call1(f, [0, named, here$0, id]);
     }
    }
    var
     _G_ = Core[149],
     _H_ = caml_call1(Core_Source_code_position[4], _a_),
     via = caml_call2(Core_Type_equal[8][3], _H_, _G_),
     into = caml_call1(f, caml_call2(Bonsai_Value[21], [0, here], via));
    return [4, from, via, into, here];
   }
   function switch$0(here, match, branches, with$0){
    function _D_(key){
     try{var _F_ = caml_call1(with$0, key), computation = _F_;}
     catch(exn$0){
      var
       exn = caml_wrap_exception(exn$0),
       computation = [0, caml_call1(Bonsai_Value[25], exn)];
     }
     return [0, key, computation];
    }
    var
     _E_ = caml_call2(Core_List[40], branches, _D_),
     arms = caml_call1(Core_Int[98][15], _E_);
    return [10, match, arms, here];
   }
   function fetch(id, default$0, for_some){return [6, id, default$0, for_some];
   }
   function store(id, value, inner){return [5, id, value, inner];}
   var Dynamic_scope = [0, fetch, store];
   function lifecycle(t){return [14, t];}
   var Edge = [0, lifecycle];
   function sexp_of_t(of_input_001, param){
    if(! param) return _d_;
    var arg0_002 = param[1], res0_003 = caml_call1(of_input_001, arg0_002);
    return [1, [0, _c_, [0, res0_003, 0]]];
   }
   function state_machine1
   (sexp_of_action$0,
    reset$1,
    sexp_of_model,
    equal,
    default_model,
    apply_action$0,
    input){
    var
     sexp_of_model$0 = caml_call2(Core_Option[39], sexp_of_model, Core[149]);
    if(sexp_of_action$0)
     var sth = sexp_of_action$0[1], sexp_of_action = sth;
    else
     var sexp_of_action = Core[149];
    var name = caml_call1(Core_Source_code_position[4], _b_);
    if(reset$1)
     var
      reset = reset$1[1],
      reset$0 =
        function(inject, schedule_event){
         return caml_call1
                 (reset,
                  caml_call2
                   (Bonsai_Apply_action_context[3], inject, schedule_event));
        };
    else
     var reset$0 = function(param, _C_, _B_){return default_model;};
    function apply_action(inject, schedule_event){
     var
      context =
        caml_call2(Bonsai_Apply_action_context[3], inject, schedule_event);
     return function(input$0, model, action){
      if(input$0) var x = input$0[1], input = [0, x]; else var input = 0;
      return caml_call4(apply_action$0, context, input, model, action);};
    }
    var
     _z_ = caml_call2(Core_Type_equal[8][3], name, sexp_of_action),
     _A_ = caml_call1(Bonsai_Meta[3][7], 0);
    return [1,
            caml_call4
             (Bonsai_Meta[1][7], sexp_of_model$0, equal, default_model, name),
            _A_,
            _z_,
            apply_action,
            reset$0,
            input];
   }
   function state_machine0
   (reset, sexp_of_model, opt, equal, default_model, apply_action, param){
    if(opt)
     var sth = opt[1], sexp_of_action = sth;
    else
     var sexp_of_action = Core[149];
    var name = caml_call1(Core_Source_code_position[4], _e_);
    function apply_action$0(inject, schedule_event){
     return caml_call1
             (apply_action,
              caml_call2
               (Bonsai_Apply_action_context[3], inject, schedule_event));
    }
    if(reset)
     var
      reset$0 = reset[1],
      reset$1 =
        function(inject, schedule_event){
         return caml_call1
                 (reset$0,
                  caml_call2
                   (Bonsai_Apply_action_context[3], inject, schedule_event));
        };
    else
     var reset$1 = function(param, _y_, _x_){return default_model;};
    var
     _v_ = caml_call2(Core_Type_equal[8][3], name, sexp_of_action),
     _w_ = caml_call2(Core_Option[39], sexp_of_model, Core[149]);
    return [2,
            caml_call4(Bonsai_Meta[1][7], _w_, equal, default_model, name),
            _v_,
            apply_action$0,
            reset$1];
   }
   function value_cutoff(t, equal){
    return [0, caml_call3(Bonsai_Value[22], 0, t, equal)];
   }
   function compute_with_clock(t, f){return [3, t, f];}
   function of_module(M, sexp_of_model, equal, default_model, input){
    function _m_(state){
     function _r_(clock, input_and_state){
      function _s_(param){
       var pattern_syntax_005 = param[2][2];
       return pattern_syntax_005;
      }
      var inject = caml_call2(Ui_incr[78][4][6], input_and_state, _s_);
      function _t_(param){
       var pattern_syntax_006 = param[1];
       return pattern_syntax_006;
      }
      var input = caml_call2(Ui_incr[78][4][6], input_and_state, _t_);
      function _u_(param){
       var pattern_syntax_007 = param[2][1];
       return pattern_syntax_007;
      }
      var model = caml_call2(Ui_incr[78][4][6], input_and_state, _u_);
      return caml_call3(M[7], input, model, inject);
     }
     return [3, caml_call2(Bonsai_Value[4], input, state), _r_];
    }
    function _n_(context, input, model, action){
     var
      match = caml_call1(Bonsai_Apply_action_context[4][1], context),
      schedule_event = match[2],
      inject = match[1];
     if(input){
      var input$0 = input[1];
      return caml_call5(M[6], input$0, inject, schedule_event, model, action);
     }
     var
      _o_ = [0, [1, [0, _f_, [0, caml_call1(M[4][1], action), 0]]], 0],
      _p_ =
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_An_action_sent_to_an_of_mo),
         _o_],
      _q_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_src_proc_min_ml_173_17),
          _p_]];
     caml_call2(Core[257], 0, _q_);
     return model;
    }
    return sub
            (0,
             state_machine1
              ([0, M[4][1]],
               0,
               sexp_of_model,
               [0, equal],
               default_model,
               _n_,
               input),
             _m_);
   }
   var Proc_incr = [0, value_cutoff, compute_with_clock, of_module];
   function assoc(comparator, map, f){
    var
     key_id = caml_call2(Core_Type_equal[8][3], cst_key_id, comparator[1]),
     cmp_id = caml_call2(Core_Type_equal[8][3], cst_cmp_id, Core[149]),
     data_id = caml_call2(Core_Type_equal[8][3], cst_data_id, Core[149]),
     key_var = caml_call2(Bonsai_Value[21], 0, key_id),
     data_var = caml_call2(Bonsai_Value[21], 1, data_id),
     by = caml_call2(f, key_var, data_var);
    return [7, map, comparator, key_id, cmp_id, data_id, by];
   }
   function assoc_on(io_comparator, model_comparator, map, get_model_key, f){
    var
     io_key_id =
       caml_call2(Core_Type_equal[8][3], cst_io_key_id, io_comparator[1]),
     io_cmp_id = caml_call2(Core_Type_equal[8][3], cst_io_cmp_id, Core[149]),
     model_key_id =
       caml_call2
        (Core_Type_equal[8][3], cst_model_key_id, model_comparator[1]),
     model_cmp_id =
       caml_call2(Core_Type_equal[8][3], cst_model_key_id$0, Core[149]),
     data_id = caml_call2(Core_Type_equal[8][3], cst_data_id$0, Core[149]),
     key_var = caml_call2(Bonsai_Value[21], 0, io_key_id),
     data_var = caml_call2(Bonsai_Value[21], 1, data_id),
     by = caml_call2(f, key_var, data_var);
    return [8,
            map,
            io_comparator,
            model_comparator,
            io_key_id,
            io_cmp_id,
            model_key_id,
            model_cmp_id,
            data_id,
            by,
            get_model_key];
   }
   function lazy(t){return [11, t];}
   function wrap
   (reset, sexp_of_model, equal, default_model, apply_action, f, param){
    var model_id = caml_call2(Core_Type_equal[8][3], cst_model_id, Core[149]);
    if(reset)
     var
      reset$0 = reset[1],
      reset$1 =
        function(inject, schedule_event){
         return caml_call1
                 (reset$0,
                  caml_call2
                   (Bonsai_Apply_action_context[3], inject, schedule_event));
        };
    else
     var reset$1 = function(param, _l_, _k_){return default_model;};
    var
     action_id = caml_call2(Core_Type_equal[8][3], cst_action_id, Core[149]),
     result_id = caml_call1(Bonsai_Meta[3][7], 0),
     inject_id = caml_call2(Core_Type_equal[8][3], cst_inject_id, Core[149]);
    function apply_action$0(inject, schedule_event, result, model, action){
     if(result){
      var result$0 = result[1];
      return caml_call4
              (apply_action,
               caml_call2
                (Bonsai_Apply_action_context[3], inject, schedule_event),
               result$0,
               model,
               action);
     }
     var
      action$0 = caml_call1(Core[149], action),
      _i_ = [0, [1, [0, _g_, [0, caml_call1(Core_Sexp[93], action$0), 0]]], 0],
      _j_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_An_action_sent_to_a_wrap_h),
          _i_]];
     caml_call2(Core[257], 0, _j_);
     return model;
    }
    var
     model_var = caml_call2(Bonsai_Value[21], 2, model_id),
     inject_var = caml_call2(Bonsai_Value[21], 3, inject_id),
     inner = caml_call2(f, model_var, inject_var),
     _h_ = caml_call2(Core_Option[39], sexp_of_model, Core[149]),
     wrapper_model =
       caml_call4
        (Bonsai_Meta[1][7],
         _h_,
         equal,
         default_model,
         cst_outer_model_for_wrap);
    return [12,
            wrapper_model,
            result_id,
            action_id,
            inject_id,
            model_id,
            inner,
            apply_action$0,
            reset$1];
   }
   function with_model_resetter(f){
    var
     reset_id = caml_call2(Core_Type_equal[8][3], cst_reset_model, Core[149]),
     inner = caml_call1(f, caml_call2(Bonsai_Value[21], 5, reset_id));
    return [13, reset_id, inner];
   }
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Proc_min);
   var
    Bonsai_Proc_min =
      [0,
       read,
       sub,
       switch$0,
       Proc_incr,
       Dynamic_scope,
       Edge,
       [0, sexp_of_t],
       state_machine1,
       state_machine0,
       assoc,
       assoc_on,
       lazy,
       wrap,
       with_model_resetter,
       0];
   runtime.caml_register_global(46, Bonsai_Proc_min, cst_Bonsai_Proc_min$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Incr0
//# unitInfo: Requires: Bonsai__Proc_min, Bonsai__Value, Core, Core__Type_equal, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_Incr0$0 = "Bonsai__Incr0",
    cst_bonsai$0 = "bonsai";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Core = global_data.Core,
    Core_Type_equal = global_data.Core__Type_equal,
    Bonsai_Value = global_data.Bonsai__Value,
    Bonsai_Proc_min = global_data.Bonsai__Proc_min,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Incr0$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/incr0.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai$0, "incr0.ml");
   var
    cst_to_value = "to_value",
    cst_bonsai = cst_bonsai$0,
    cst_Bonsai_Incr0 = cst_Bonsai_Incr0$0;
   function compute(t, f){
    function _c_(param, input){return caml_call1(f, input);}
    return caml_call2(Bonsai_Proc_min[4][2], t, _c_);
   }
   function with_clock(f){
    function _a_(clock, param){return caml_call1(f, clock);}
    var _b_ = caml_call1(Bonsai_Value[2], 0);
    return caml_call2(Bonsai_Proc_min[4][2], _b_, _a_);
   }
   function to_value(incr){
    return [0,
            [1, incr],
            0,
            caml_call2(Core_Type_equal[8][3], cst_to_value, Core[149])];
   }
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Incr0);
   var Bonsai_Incr0 = [0, compute, with_clock, to_value];
   runtime.caml_register_global(16, Bonsai_Incr0, cst_Bonsai_Incr0$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Map0_intf
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_Map0_intf = "Bonsai__Map0_intf",
    cst_bonsai = "bonsai";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Map0_intf);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][1], "src/map0_intf.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai, "map0_intf.ml");
   var Map0 = [0];
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Map0_intf);
   var Bonsai_Map0_intf = [0, Map0];
   runtime.caml_register_global(11, Bonsai_Map0_intf, cst_Bonsai_Map0_intf);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Map0
//# unitInfo: Requires: Bonsai__Map0_intf, Incr_map, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Ui_incr
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_Map0$0 = "Bonsai__Map0",
    cst_bonsai$0 = "bonsai";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   function caml_call10(f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9){
    return (f.l >= 0 ? f.l : f.l = f.length) == 10
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9)
            : runtime.caml_call_gen
              (f, [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9]);
   }
   function caml_call13
   (f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12){
    return (f.l >= 0 ? f.l : f.l = f.length) == 13
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12)
            : runtime.caml_call_gen
              (f, [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Incr_map = global_data.Incr_map,
    Ui_incr = global_data.Ui_incr,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Map0$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/map0.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai$0, "map0.ml");
   var cst_bonsai = cst_bonsai$0, cst_Bonsai_Map0 = cst_Bonsai_Map0$0;
   function Make(Input){
    function map(m, f){
     var _a4_ = Incr_map[5];
     function _a5_(eta){return caml_call4(_a4_, 0, 0, eta, f);}
     return caml_call2(Input[3][1], m, _a5_);
    }
    function mapi(m, f){
     var _a2_ = Incr_map[3];
     function _a3_(eta){return caml_call4(_a2_, 0, 0, eta, f);}
     return caml_call2(Input[3][1], m, _a3_);
    }
    var func = Input[3][1], arg = Incr_map[1];
    function _a_(eta){return caml_call2(arg, 0, eta);}
    function of_set(_a1_){return caml_call2(func, _a1_, _a_);}
    function filter_mapi(m, f){
     var _aZ_ = Incr_map[2];
     function _a0_(eta){return caml_call4(_aZ_, 0, 0, eta, f);}
     return caml_call2(Input[3][1], m, _a0_);
    }
    function filter_map(m, f){
     var _aX_ = Incr_map[4];
     function _aY_(eta){return caml_call4(_aX_, 0, 0, eta, f);}
     return caml_call2(Input[3][1], m, _aY_);
    }
    function partition_mapi(m, f){
     var _aV_ = Incr_map[10];
     function _aW_(eta){return caml_call4(_aV_, 0, 0, eta, f);}
     return caml_call2(Input[3][1], m, _aW_);
    }
    function unordered_fold(update, m, init, add, remove){
     var _aT_ = Incr_map[12];
     function _aU_(eta){
      return caml_call10(_aT_, 0, 0, update, 0, 0, 0, eta, init, add, remove);
     }
     return caml_call2(Input[3][1], m, _aU_);
    }
    function unordered_fold_with_extra
    (update, m, e, init, add, remove, extra_changed){
     function _aP_(m_and_e){
      function _aR_(param){
       var pattern_syntax_001 = param[2];
       return pattern_syntax_001;
      }
      var e = caml_call2(Ui_incr[78][4][6], m_and_e, _aR_);
      function _aS_(param){
       var pattern_syntax_002 = param[1];
       return pattern_syntax_002;
      }
      var m = caml_call2(Ui_incr[78][4][6], m_and_e, _aS_);
      return caml_call13
              (Incr_map[13],
               0,
               0,
               0,
               update,
               0,
               0,
               0,
               m,
               e,
               init,
               add,
               remove,
               extra_changed);
     }
     var _aQ_ = caml_call2(Input[1][1], m, e);
     return caml_call2(Input[3][1], _aQ_, _aP_);
    }
    function cutoff(m, equal){
     var func = Incr_map[14], _aN_ = caml_call1(Ui_incr[60][5], equal);
     function _aO_(eta){return caml_call3(func, 0, eta, _aN_);}
     return caml_call2(Input[3][1], m, _aO_);
    }
    function mapi_count(m, M, f){
     var _aK_ = Incr_map[15], _aL_ = [0, M[2]];
     function _aM_(eta){return caml_call5(_aK_, 0, 0, eta, _aL_, f);}
     return caml_call2(Input[3][1], m, _aM_);
    }
    function map_count(m, M, f){
     var _aH_ = Incr_map[16], _aI_ = [0, M[2]];
     function _aJ_(eta){return caml_call5(_aH_, 0, 0, eta, _aI_, f);}
     return caml_call2(Input[3][1], m, _aJ_);
    }
    function mapi_min(m, M, f){
     var _aE_ = Incr_map[17], _aF_ = [0, M[2]];
     function _aG_(eta){return caml_call5(_aE_, 0, 0, eta, _aF_, f);}
     return caml_call2(Input[3][1], m, _aG_);
    }
    function mapi_max(m, M, f){
     var _aB_ = Incr_map[18], _aC_ = [0, M[2]];
     function _aD_(eta){return caml_call5(_aB_, 0, 0, eta, _aC_, f);}
     return caml_call2(Input[3][1], m, _aD_);
    }
    function map_min(m, M, f){
     var _ay_ = Incr_map[19], _az_ = [0, M[2]];
     function _aA_(eta){return caml_call5(_ay_, 0, 0, eta, _az_, f);}
     return caml_call2(Input[3][1], m, _aA_);
    }
    function map_max(m, M, f){
     var _av_ = Incr_map[20], _aw_ = [0, M[2]];
     function _ax_(eta){return caml_call5(_av_, 0, 0, eta, _aw_, f);}
     return caml_call2(Input[3][1], m, _ax_);
    }
    function min_value(m, M){
     var _as_ = Incr_map[21], _at_ = [0, M[2]];
     function _au_(eta){return caml_call4(_as_, 0, 0, eta, _at_);}
     return caml_call2(Input[3][1], m, _au_);
    }
    function max_value(m, M){
     var _ap_ = Incr_map[22], _aq_ = [0, M[2]];
     function _ar_(eta){return caml_call4(_ap_, 0, 0, eta, _aq_);}
     return caml_call2(Input[3][1], m, _ar_);
    }
    function mapi_bounds(m, M, f){
     var _am_ = Incr_map[23], _an_ = [0, M[2]];
     function _ao_(eta){return caml_call5(_am_, 0, 0, eta, _an_, f);}
     return caml_call2(Input[3][1], m, _ao_);
    }
    function map_bounds(m, M, f){
     var _aj_ = Incr_map[24], _ak_ = [0, M[2]];
     function _al_(eta){return caml_call5(_aj_, 0, 0, eta, _ak_, f);}
     return caml_call2(Input[3][1], m, _al_);
    }
    function value_bounds(m, M){
     var _ag_ = Incr_map[25], _ah_ = [0, M[2]];
     function _ai_(eta){return caml_call4(_ag_, 0, 0, eta, _ah_);}
     return caml_call2(Input[3][1], m, _ai_);
    }
    function merge(a, b, f){
     function _ac_(a_and_b){
      function _ae_(param){
       var pattern_syntax_003 = param[1];
       return pattern_syntax_003;
      }
      var a = caml_call2(Ui_incr[78][4][6], a_and_b, _ae_);
      function _af_(param){
       var pattern_syntax_004 = param[2];
       return pattern_syntax_004;
      }
      var b = caml_call2(Ui_incr[78][4][6], a_and_b, _af_);
      return caml_call6(Incr_map[26], 0, 0, 0, a, b, f);
     }
     var _ad_ = caml_call2(Input[1][1], a, b);
     return caml_call2(Input[3][1], _ad_, _ac_);
    }
    function merge_both_some(a, b, f){
     function ___(a_and_b){
      function _aa_(param){
       var pattern_syntax_005 = param[1];
       return pattern_syntax_005;
      }
      var a = caml_call2(Ui_incr[78][4][6], a_and_b, _aa_);
      function _ab_(param){
       var pattern_syntax_006 = param[2];
       return pattern_syntax_006;
      }
      var b = caml_call2(Ui_incr[78][4][6], a_and_b, _ab_);
      return caml_call7(Incr_map[27], 0, 0, 0, 0, a, b, f);
     }
     var _$_ = caml_call2(Input[1][1], a, b);
     return caml_call2(Input[3][1], _$_, ___);
    }
    function unzip(m){
     function _Z_(m){
      var
       match = caml_call4(Incr_map[30], 0, 0, 0, m),
       r = match[2],
       l = match[1];
      return caml_call2(Ui_incr[42], l, r);
     }
     return caml_call2(Input[3][1], m, _Z_);
    }
    function unzip_mapi(m, f){
     function _Y_(m){
      var
       match = caml_call6(Incr_map[31], 0, 0, 0, 0, m, f),
       r = match[2],
       l = match[1];
      return caml_call2(Ui_incr[42], l, r);
     }
     return caml_call2(Input[3][1], m, _Y_);
    }
    var func$0 = Input[3][1], arg$0 = Incr_map[36];
    function _b_(eta){return caml_call2(arg$0, 0, eta);}
    function keys(_X_){return caml_call2(func$0, _X_, _b_);}
    function rank(m, k){
     function _T_(m_and_k){
      function _V_(param){
       var pattern_syntax_007 = param[2];
       return pattern_syntax_007;
      }
      var k = caml_call2(Ui_incr[78][4][6], m_and_k, _V_);
      function _W_(param){
       var pattern_syntax_008 = param[1];
       return pattern_syntax_008;
      }
      var m = caml_call2(Ui_incr[78][4][6], m_and_k, _W_);
      return caml_call3(Incr_map[37], 0, m, k);
     }
     var _U_ = caml_call2(Input[1][1], m, k);
     return caml_call2(Input[3][1], _U_, _T_);
    }
    function subrange(m, bounds){
     function _P_(m_and_bounds){
      function _R_(param){
       var pattern_syntax_009 = param[2];
       return pattern_syntax_009;
      }
      var bounds = caml_call2(Ui_incr[78][4][6], m_and_bounds, _R_);
      function _S_(param){
       var pattern_syntax_010 = param[1];
       return pattern_syntax_010;
      }
      var m = caml_call2(Ui_incr[78][4][6], m_and_bounds, _S_);
      return caml_call4(Incr_map[38], 0, 0, m, bounds);
     }
     var _Q_ = caml_call2(Input[1][1], m, bounds);
     return caml_call2(Input[3][1], _Q_, _P_);
    }
    function subrange_by_rank(m, bounds){
     function _L_(m_and_bounds){
      function _N_(param){
       var pattern_syntax_011 = param[2];
       return pattern_syntax_011;
      }
      var bounds = caml_call2(Ui_incr[78][4][6], m_and_bounds, _N_);
      function _O_(param){
       var pattern_syntax_012 = param[1];
       return pattern_syntax_012;
      }
      var m = caml_call2(Ui_incr[78][4][6], m_and_bounds, _O_);
      return caml_call4(Incr_map[39], 0, 0, m, bounds);
     }
     var _M_ = caml_call2(Input[1][1], m, bounds);
     return caml_call2(Input[3][1], _M_, _L_);
    }
    function rekey(m, M, f){
     var _I_ = Incr_map[40], _J_ = [0, M[2]];
     function _K_(eta){return caml_call5(_I_, 0, 0, eta, _J_, f);}
     return caml_call2(Input[3][1], m, _K_);
    }
    function index_byi(m, M, index){
     var _F_ = Incr_map[41], _G_ = [0, M[2]];
     function _H_(eta){return caml_call5(_F_, 0, 0, eta, _G_, index);}
     return caml_call2(Input[3][1], m, _H_);
    }
    function index_by(m, M, index){
     var _C_ = Incr_map[42], _D_ = [0, M[2]];
     function _E_(eta){return caml_call5(_C_, 0, 0, eta, _D_, index);}
     return caml_call2(Input[3][1], m, _E_);
    }
    function unordered_fold_nested_maps(update, m, init, add, remove){
     var _A_ = Incr_map[43];
     function _B_(eta){
      return caml_call8(_A_, 0, 0, 0, update, eta, init, add, remove);
     }
     return caml_call2(Input[3][1], m, _B_);
    }
    function transpose(M, m){
     var _z_ = caml_call3(Incr_map[44], 0, 0, [0, M[2]]);
     return caml_call2(Input[3][1], m, _z_);
    }
    function collapse(m, M){
     var _w_ = Incr_map[45], _x_ = [0, M[2]];
     function _y_(eta){return caml_call4(_w_, 0, 0, eta, _x_);}
     return caml_call2(Input[3][1], m, _y_);
    }
    function collapse_by(m, merge_keys, M){
     var _t_ = Incr_map[46], _u_ = [0, M[2]];
     function _v_(eta){return caml_call5(_t_, 0, 0, eta, merge_keys, _u_);}
     return caml_call2(Input[3][1], m, _v_);
    }
    function expand(m, M_outer, M_inner){
     var _p_ = Incr_map[47], _q_ = [0, M_outer[2]], _r_ = [0, M_inner[2]];
     function _s_(eta){return caml_call5(_p_, 0, 0, eta, _q_, _r_);}
     return caml_call2(Input[3][1], m, _s_);
    }
    function counti(m, f){
     var _n_ = Incr_map[48];
     function _o_(eta){return caml_call4(_n_, 0, 0, eta, f);}
     return caml_call2(Input[3][1], m, _o_);
    }
    function count(m, f){
     var _l_ = Incr_map[49];
     function _m_(eta){return caml_call4(_l_, 0, 0, eta, f);}
     return caml_call2(Input[3][1], m, _m_);
    }
    function for_alli(m, f){
     var _j_ = Incr_map[50];
     function _k_(eta){return caml_call4(_j_, 0, 0, eta, f);}
     return caml_call2(Input[3][1], m, _k_);
    }
    function for_all(m, f){
     var _h_ = Incr_map[51];
     function _i_(eta){return caml_call4(_h_, 0, 0, eta, f);}
     return caml_call2(Input[3][1], m, _i_);
    }
    function existsi(m, f){
     var _f_ = Incr_map[52];
     function _g_(eta){return caml_call4(_f_, 0, 0, eta, f);}
     return caml_call2(Input[3][1], m, _g_);
    }
    function exists(m, f){
     var _d_ = Incr_map[53];
     function _e_(eta){return caml_call4(_d_, 0, 0, eta, f);}
     return caml_call2(Input[3][1], m, _e_);
    }
    function sum(m, algebra, f){
     function _c_(m){return caml_call5(Incr_map[54], 0, 0, m, algebra, f);}
     return caml_call2(Input[3][1], m, _c_);
    }
    return [0,
            mapi,
            map,
            of_set,
            filter_mapi,
            filter_map,
            partition_mapi,
            unordered_fold,
            unordered_fold_with_extra,
            cutoff,
            mapi_count,
            map_count,
            mapi_min,
            mapi_max,
            map_min,
            map_max,
            min_value,
            max_value,
            mapi_bounds,
            map_bounds,
            value_bounds,
            merge,
            merge_both_some,
            unzip,
            unzip_mapi,
            keys,
            rank,
            subrange,
            subrange_by_rank,
            rekey,
            index_byi,
            index_by,
            unordered_fold_nested_maps,
            transpose,
            collapse,
            collapse_by,
            expand,
            counti,
            count,
            for_alli,
            for_all,
            existsi,
            exists,
            sum];
   }
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Map0);
   var Bonsai_Map0 = [0, Make];
   runtime.caml_register_global(13, Bonsai_Map0, cst_Bonsai_Map0$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Proc
//# unitInfo: Requires: Base__Applicative, Bonsai__Apply_action_context, Bonsai__Computation, Bonsai__Incr0, Bonsai__Map0, Bonsai__Path, Bonsai__Proc_min, Bonsai__Value, Bonsai__Var, CamlinternalLazy, Core, Core__Bool, Core__Comparator, Core__Error, Core__Int, Core__List, Core__Map, Core__Option, Core__Source_code_position, Core__Time_ns, Core__Tuple, Core__Type_equal, Core__Unique_id, Core__Unit, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Sexplib0__Sexp_conv_error, Ui_effect, Ui_incr, Ui_time_source
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Aborted = "Aborted",
    cst_After = "After",
    cst_Before = "Before",
    cst_Bonsai_Proc$0 = "Bonsai__Proc",
    cst_Finished = "Finished",
    cst_Schedule_effect = "Schedule_effect",
    cst_Set = "Set",
    cst_Wait_for = "Wait_for",
    cst_Waiting_for = "Waiting_for",
    cst_Waiting_for_effect_to_fini = "Waiting_for_effect_to_finish",
    cst_aborted = "aborted",
    cst_after = "after",
    cst_before = "before",
    cst_bonsai$0 = "bonsai",
    cst_finished = "finished",
    cst_schedule_effect = "schedule_effect",
    cst_src_proc_ml = "src/proc.ml",
    cst_wait_for = "wait_for",
    cst_waiting_for = "waiting_for",
    cst_waiting_for_effect_to_fini = "waiting_for_effect_to_finish",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_string_notequal = runtime.caml_string_notequal;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    error_source_125 = "src/proc.ml.Effect_throttling.Poll_result.t",
    error_source_200 = "src/proc.ml.Clock.Before_or_after.t",
    error_source_206 = "src/proc.ml.Clock.Every_model.t",
    error_source_229 = "src/proc.ml.Clock.Every_action.t",
    Core = global_data.Core,
    Core_Tuple = global_data.Core__Tuple,
    Core_Map = global_data.Core__Map,
    Core_List = global_data.Core__List,
    Bonsai_Value = global_data.Bonsai__Value,
    Ui_effect = global_data.Ui_effect,
    Core_Time_ns = global_data.Core__Time_ns,
    Assert_failure = global_data.Assert_failure,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Ui_time_source = global_data.Ui_time_source,
    Ui_incr = global_data.Ui_incr,
    Core_Type_equal = global_data.Core__Type_equal,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Core_Option = global_data.Core__Option,
    Bonsai_Var = global_data.Bonsai__Var,
    Core_Source_code_position = global_data.Core__Source_code_position,
    Bonsai_Apply_action_context = global_data.Bonsai__Apply_action_context,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Core_Error = global_data.Core__Error,
    Core_Int = global_data.Core__Int,
    Core_Unit = global_data.Core__Unit,
    Bonsai_Path = global_data.Bonsai__Path,
    Core_Bool = global_data.Core__Bool,
    Core_Comparator = global_data.Core__Comparator,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Bonsai_Proc_min = global_data.Bonsai__Proc_min,
    Bonsai_Incr0 = global_data.Bonsai__Incr0,
    Bonsai_Computation = global_data.Bonsai__Computation,
    Bonsai_Map0 = global_data.Bonsai__Map0,
    Core_Unique_id = global_data.Core__Unique_id,
    Base_Applicative = global_data.Base__Applicative;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Proc$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_proc_ml);
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai$0, "proc.ml");
   var
    read = Bonsai_Proc_min[1],
    sub = Bonsai_Proc_min[2],
    switch$0 = Bonsai_Proc_min[3],
    Proc_incr = Bonsai_Proc_min[4],
    Dynamic_scope = Bonsai_Proc_min[5],
    Edge = Bonsai_Proc_min[6],
    Computation_status = Bonsai_Proc_min[7],
    state_machine1 = Bonsai_Proc_min[8],
    state_machine0 = Bonsai_Proc_min[9],
    assoc = Bonsai_Proc_min[10],
    assoc_on = Bonsai_Proc_min[11],
    lazy = Bonsai_Proc_min[12],
    wrap = Bonsai_Proc_min[13],
    with_model_resetter = Bonsai_Proc_min[14],
    path = Bonsai_Proc_min[15],
    _dv_ = [0, [0, cst_src_proc_ml, 1274, 38189, 38195]],
    _dw_ = [0, [0, cst_src_proc_ml, 1273, 38166, 38172]],
    _dt_ = [0, [0, cst_src_proc_ml, 1267, 38037, 38043]],
    _du_ = [0, [0, cst_src_proc_ml, 1266, 38014, 38020]],
    _dm_ = [0, [0, cst_src_proc_ml, 1235, 36866, 36872]],
    _dn_ = [0, [0, cst_src_proc_ml, 1234, 36841, 36847]],
    _do_ = [0, [0, cst_src_proc_ml, 1233, 36816, 36822]],
    _dp_ = [0, [0, cst_src_proc_ml, 1232, 36791, 36797]],
    _dq_ = [0, [0, cst_src_proc_ml, 1231, 36766, 36772]],
    _dr_ = [0, [0, cst_src_proc_ml, 1230, 36741, 36747]],
    _ds_ = [0, [0, cst_src_proc_ml, 1229, 36716, 36722]],
    _dg_ = [0, [0, cst_src_proc_ml, 1224, 36599, 36605]],
    _dh_ = [0, [0, cst_src_proc_ml, 1223, 36574, 36580]],
    _di_ = [0, [0, cst_src_proc_ml, 1222, 36549, 36555]],
    _dj_ = [0, [0, cst_src_proc_ml, 1221, 36524, 36530]],
    _dk_ = [0, [0, cst_src_proc_ml, 1220, 36499, 36505]],
    _dl_ = [0, [0, cst_src_proc_ml, 1219, 36474, 36480]],
    _db_ = [0, [0, cst_src_proc_ml, 1214, 36363, 36369]],
    _dc_ = [0, [0, cst_src_proc_ml, 1213, 36338, 36344]],
    _dd_ = [0, [0, cst_src_proc_ml, 1212, 36313, 36319]],
    _de_ = [0, [0, cst_src_proc_ml, 1211, 36288, 36294]],
    _df_ = [0, [0, cst_src_proc_ml, 1210, 36263, 36269]],
    _c9_ = [0, [0, cst_src_proc_ml, 1205, 36158, 36164]],
    _c__ = [0, [0, cst_src_proc_ml, 1204, 36133, 36139]],
    _c$_ = [0, [0, cst_src_proc_ml, 1203, 36108, 36114]],
    _da_ = [0, [0, cst_src_proc_ml, 1202, 36083, 36089]],
    _c6_ = [0, [0, cst_src_proc_ml, 1197, 35984, 35990]],
    _c7_ = [0, [0, cst_src_proc_ml, 1196, 35959, 35965]],
    _c8_ = [0, [0, cst_src_proc_ml, 1195, 35934, 35940]],
    _c4_ = [0, [0, cst_src_proc_ml, 1184, 35788, 35794]],
    _c5_ = [0, [0, cst_src_proc_ml, 1183, 35765, 35771]],
    _c1_ = [0, [0, cst_src_proc_ml, 1177, 35687, 35693]],
    _c2_ = [0, [0, cst_src_proc_ml, 1176, 35664, 35670]],
    _c3_ = [0, [0, cst_src_proc_ml, 1175, 35641, 35647]],
    _cP_ = [0, [0, cst_src_proc_ml, 1157, 35290, 35294]],
    _cQ_ = [0, [0, cst_src_proc_ml, 1147, 34983, 34987]],
    _cR_ = [0, [0, cst_src_proc_ml, 1147, 34983, 34987]],
    _cS_ = [0, [0, cst_src_proc_ml, 1149, 35025, 35033]],
    _cT_ = [0, [0, cst_src_proc_ml, 1148, 35000, 35006]],
    _cU_ = [0, [0, cst_src_proc_ml, 1147, 34983, 34987]],
    _cV_ = [0, [0, cst_src_proc_ml, 1135, 34682, 34686]],
    _cW_ = [0, [0, cst_src_proc_ml, 1135, 34682, 34686]],
    _cX_ = [0, [0, cst_src_proc_ml, 1135, 34682, 34686]],
    _cY_ = [0, [0, cst_src_proc_ml, 1134, 34638, 34642]],
    _cZ_ = [0, [0, cst_src_proc_ml, 1134, 34638, 34642]],
    _c0_ = [0, [0, cst_src_proc_ml, 1134, 34638, 34642]],
    _cI_ = [0, [0, cst_src_proc_ml, 1122, 34420, 34424]],
    _cJ_ = [0, [0, cst_src_proc_ml, 1121, 34331, 34335]],
    _cK_ = [0, [0, cst_src_proc_ml, 1112, 34069, 34073]],
    _cL_ = [0, [0, cst_src_proc_ml, 1112, 34069, 34073]],
    _cM_ = [0, [0, cst_src_proc_ml, 1112, 34069, 34073]],
    _cN_ = [0, [0, cst_src_proc_ml, 1112, 34069, 34073]],
    _cO_ = [0, [0, cst_src_proc_ml, 1112, 34069, 34073]],
    _cF_ = [0, "Add"],
    _cG_ = [0, "Remove"],
    _cH_ = [0, "Change"],
    _cE_ = [0, 0],
    _ci_ = [0, cst_src_proc_ml, 983, 6],
    _cf_ = [0, cst_src_proc_ml, 983, 6],
    _cd_ = [0, [0, cst_src_proc_ml, 987, 29876, 29884]],
    _ce_ = [0, [0, cst_src_proc_ml, 986, 29831, 29839]],
    _cg_ = [0, [0, cst_src_proc_ml, 983, 29705, 29711]],
    _ch_ = [0, [0, cst_src_proc_ml, 983, 29705, 29711]],
    _cl_ = [0, cst_src_proc_ml, 983, 6],
    _cj_ = [0, [0, cst_src_proc_ml, 983, 29705, 29711]],
    _ck_ = [0, [0, cst_src_proc_ml, 983, 29705, 29711]],
    _cm_ = [0, cst_src_proc_ml, 984, 29738, 29746],
    _cb_ = [0, [0, cst_src_proc_ml, 992, 30038, 30044]],
    _cc_ = [0, [0, cst_src_proc_ml, 991, 30015, 30019]],
    _cn_ = [0, [0, cst_src_proc_ml, 983, 29705, 29711]],
    _co_ = [0, [0, cst_src_proc_ml, 982, 29675, 29679]],
    _cp_ = [0, [0, cst_src_proc_ml, 973, 29391, 29395]],
    _cq_ = [0, [0, cst_src_proc_ml, 973, 29391, 29395]],
    _cr_ = [0, [0, cst_src_proc_ml, 973, 29391, 29395]],
    _cs_ = [0, [0, cst_src_proc_ml, 973, 29391, 29395]],
    _ct_ = [0, [0, cst_src_proc_ml, 973, 29391, 29395]],
    _cu_ = [0, [0, cst_src_proc_ml, 955, 28614, 28620]],
    _cv_ = [0, [0, cst_src_proc_ml, 954, 28589, 28593]],
    _cw_ = [0, [0, cst_src_proc_ml, 953, 28538, 28542]],
    _cx_ = [0, [0, cst_src_proc_ml, 947, 28333, 28339]],
    _cy_ = [0, [0, cst_src_proc_ml, 946, 28305, 28309]],
    _cz_ = [0, [0, cst_src_proc_ml, 940, 28136, 28142]],
    _cA_ = [0, [0, cst_src_proc_ml, 939, 28112, 28116]],
    _b$_ = [0, cst_Wait_for],
    _ca_ = [0, cst_Schedule_effect],
    _b9_ = [0, cst_Waiting_for],
    _b__ = [0, cst_Waiting_for_effect_to_fini],
    _b4_ = [0, cst_After],
    _b5_ = [0, cst_Before],
    _b0_ = [0, [0, cst_src_proc_ml, 866, 26101, 26109]],
    _b1_ = [0, [0, cst_src_proc_ml, 865, 26080, 26086]],
    _b2_ = [0, [0, cst_src_proc_ml, 864, 26041, 26047]],
    _b3_ = [0, [0, cst_src_proc_ml, 884, 26577, 26581]],
    _bM_ = [0, cst_src_proc_ml, 810, 2],
    cst_not_found = "not found",
    _bJ_ = [0, "key"],
    cst_Incremental_glitch = "Incremental glitch",
    cst_src_proc_ml_821_29 = "src/proc.ml:821:29",
    cst_BUG = "BUG",
    _bK_ = [0, [0, cst_src_proc_ml, 813, 24490, 24494]],
    _bL_ = [0, [0, cst_src_proc_ml, 812, 24411, 24415]],
    _bQ_ = [0, cst_src_proc_ml, 810, 2],
    _bP_ = [0, [0, cst_src_proc_ml, 823, 24816, 24820]],
    _bT_ = [0, cst_src_proc_ml, 810, 2],
    _bR_ = [0, [0, cst_src_proc_ml, 810, 24363, 24365]],
    _bS_ = [0, [0, cst_src_proc_ml, 810, 24363, 24365]],
    _bN_ = [0, [0, cst_src_proc_ml, 810, 24363, 24365]],
    _bO_ = [0, [0, cst_src_proc_ml, 810, 24363, 24365]],
    _bU_ = [0, cst_src_proc_ml, 811, 24390, 24394],
    _bV_ = [0, [0, cst_src_proc_ml, 810, 24363, 24365]],
    _bW_ = [0, [0, cst_src_proc_ml, 807, 24295, 24299]],
    _bX_ = [0, [0, cst_src_proc_ml, 806, 24273, 24275]],
    _bY_ = [0, [0, cst_src_proc_ml, 803, 24196, 24200]],
    _bZ_ = [0, [0, cst_src_proc_ml, 802, 24178, 24180]],
    _bI_ = [0, [0, cst_src_proc_ml, 796, 23985, 23987]],
    _by_ = [0, [0, cst_src_proc_ml, 791, 23873, 23875]],
    _bz_ = [0, [0, cst_src_proc_ml, 791, 23873, 23875]],
    _bA_ = [0, [0, cst_src_proc_ml, 791, 23873, 23875]],
    _bB_ = [0, [0, cst_src_proc_ml, 788, 23794, 23798]],
    _bC_ = [0, [0, cst_src_proc_ml, 787, 23773, 23775]],
    _bD_ = [0, [0, cst_src_proc_ml, 786, 23708, 23710]],
    _bE_ = [0, [0, cst_src_proc_ml, 786, 23708, 23710]],
    _bF_ = [0, [0, cst_src_proc_ml, 786, 23708, 23710]],
    _bG_ = [0, [0, cst_src_proc_ml, 786, 23708, 23710]],
    _bH_ = [0, [0, cst_src_proc_ml, 786, 23708, 23710]],
    _bl_ = [0, cst_src_proc_ml, 765, 2],
    _bg_ = [0, [0, cst_src_proc_ml, 772, 23268, 23272]],
    _bh_ = [0, [0, cst_src_proc_ml, 772, 23268, 23272]],
    _bi_ = [0, [0, cst_src_proc_ml, 772, 23268, 23272]],
    _bj_ = [0, [0, cst_src_proc_ml, 769, 23134, 23140]],
    _bk_ = [0, [0, cst_src_proc_ml, 768, 23111, 23115]],
    _bo_ = [0, cst_src_proc_ml, 765, 2],
    _bm_ = [0, [0, cst_src_proc_ml, 765, 23027, 23029]],
    _bn_ = [0, [0, cst_src_proc_ml, 765, 23027, 23029]],
    _bp_ = [0, cst_src_proc_ml, 766, 23050, 23054],
    _bq_ = [0, [0, cst_src_proc_ml, 765, 23027, 23029]],
    _br_ = [0, [0, cst_src_proc_ml, 764, 22954, 22956]],
    _bs_ = [0, [0, cst_src_proc_ml, 763, 22920, 22922]],
    _bt_ = [0, [0, cst_src_proc_ml, 760, 22811, 22813]],
    _bu_ = [0, [0, cst_src_proc_ml, 760, 22811, 22813]],
    _bv_ = [0, [0, cst_src_proc_ml, 760, 22811, 22813]],
    _bw_ = [0, [0, cst_src_proc_ml, 760, 22811, 22813]],
    _bx_ = [0, [0, cst_src_proc_ml, 760, 22811, 22813]],
    _bf_ = [0, [0, cst_src_proc_ml, 755, 22619, 22621]],
    _a3_ = [0, cst_src_proc_ml, 740, 2],
    _a6_ = [0, [0, cst_src_proc_ml, 743, 22375, 22379]],
    _a7_ = [0, [0, cst_src_proc_ml, 743, 22375, 22379]],
    _a9_ = [0, cst_src_proc_ml, 740, 2],
    _a8_ = [0, [0, cst_src_proc_ml, 743, 22375, 22379]],
    _a4_ = [0, [0, cst_src_proc_ml, 740, 22309, 22311]],
    _a5_ = [0, [0, cst_src_proc_ml, 740, 22309, 22311]],
    _a__ = [0, cst_src_proc_ml, 741, 22332, 22336],
    _a$_ = [0, [0, cst_src_proc_ml, 740, 22309, 22311]],
    _ba_ = [0, [0, cst_src_proc_ml, 739, 22242, 22244]],
    _bb_ = [0, [0, cst_src_proc_ml, 739, 22242, 22244]],
    _bc_ = [0, [0, cst_src_proc_ml, 739, 22242, 22244]],
    _bd_ = [0, [0, cst_src_proc_ml, 739, 22242, 22244]],
    _be_ = [0, [0, cst_src_proc_ml, 739, 22242, 22244]],
    cst_BUG_finished_effect_even_t =
      "BUG:  finished effect even though not running",
    _aR_ = [0, "here"],
    _aS_ = [0, cst_src_proc_ml, 710, 21539, 21571],
    _aT_ = [0, 1, 0],
    _aU_ = [0, cst_src_proc_ml, 707, 21372, 21404],
    _aV_ = [0, cst_src_proc_ml, 704, 21218, 21250],
    _aW_ = [0, 0, 0],
    _aX_ = [0, 1, 0],
    _aY_ = [0, 0, 0],
    _aZ_ = [0, 1, 0],
    _aH_ = [0, [0, cst_src_proc_ml, 720, 21836, 21840]],
    _aI_ = [0, [0, cst_src_proc_ml, 719, 21785, 21789]],
    _aJ_ = [0, [0, cst_src_proc_ml, 719, 21785, 21789]],
    _aK_ = [0, [0, cst_src_proc_ml, 719, 21785, 21789]],
    _aL_ = [0, [0, cst_src_proc_ml, 716, 21723, 21729]],
    _aM_ = [0, [0, cst_src_proc_ml, 715, 21697, 21701]],
    _aN_ = [0, [0, cst_src_proc_ml, 628, 17400, 17404]],
    _aO_ = [0, [0, cst_src_proc_ml, 628, 17400, 17404]],
    _aP_ = [0, [0, cst_src_proc_ml, 628, 17400, 17404]],
    _aQ_ = [0, [0, cst_src_proc_ml, 628, 17400, 17404]],
    _a0_ = [0, 0, 0],
    _a1_ = [0, [0, cst_src_proc_ml, 628, 17400, 17404]],
    _aG_ = [0, "for"],
    _aE_ = [0, cst_Finished],
    _aF_ = [0, cst_Aborted],
    _ar_ = [0, [0, cst_src_proc_ml, 565, 15779, 15785]],
    _as_ = [0, [0, cst_src_proc_ml, 565, 15779, 15785]],
    _at_ = [0, [0, cst_src_proc_ml, 565, 15779, 15785]],
    _au_ = [0, [0, cst_src_proc_ml, 562, 15702, 15710]],
    _av_ = [0, [0, cst_src_proc_ml, 561, 15677, 15683]],
    _aw_ = [0, [0, cst_src_proc_ml, 558, 15550, 15556]],
    _ax_ = [0, [0, cst_src_proc_ml, 558, 15550, 15556]],
    _ay_ = [0, [0, cst_src_proc_ml, 558, 15550, 15556]],
    _az_ = [0, [0, cst_src_proc_ml, 558, 15550, 15556]],
    _aA_ = [0, [0, cst_src_proc_ml, 558, 15550, 15556]],
    _aB_ = [0, [0, cst_src_proc_ml, 549, 15280, 15288]],
    _aC_ = [0, [0, cst_src_proc_ml, 548, 15257, 15263]],
    _aD_ = [0, [0, cst_src_proc_ml, 547, 15216, 15222]],
    _ag_ = [0, [0, cst_src_proc_ml, 502, 13893, 13899]],
    _ah_ = [0, [0, cst_src_proc_ml, 495, 13611, 13619]],
    _ai_ = [0, [0, cst_src_proc_ml, 494, 13586, 13592]],
    _aj_ = [0, [0, cst_src_proc_ml, 480, 13040, 13046]],
    _ak_ = [0, [0, cst_src_proc_ml, 480, 13040, 13046]],
    _al_ = [0, [0, cst_src_proc_ml, 480, 13040, 13046]],
    _am_ = [0, [0, cst_src_proc_ml, 480, 13040, 13046]],
    _af_ = [0, cst_Set],
    _ad_ = [0, "last_result"],
    _ae_ = [0, "last_seqnum"],
    _an_ = [0, [0, cst_src_proc_ml, 480, 13040, 13046]],
    _ao_ = [0, [0, cst_src_proc_ml, 450, 12190, 12196]],
    _ap_ = [0, [0, cst_src_proc_ml, 450, 12190, 12196]],
    _aq_ = [0, [0, cst_src_proc_ml, 450, 12190, 12196]],
    _T_ = [0, cst_src_proc_ml, 405, 6],
    _S_ = [0, [0, cst_src_proc_ml, 412, 11234, 11242]],
    _W_ = [0, cst_src_proc_ml, 405, 6],
    _U_ = [0, [0, cst_src_proc_ml, 405, 10992, 10998]],
    _V_ = [0, [0, cst_src_proc_ml, 405, 10992, 10998]],
    _R_ = [0, [0, cst_src_proc_ml, 407, 11035, 11043]],
    _X_ = [0, cst_src_proc_ml, 406, 11019, 11027],
    _Y_ = [0, [0, cst_src_proc_ml, 405, 10992, 10998]],
    _Z_ = [0, [0, cst_src_proc_ml, 404, 10971, 10975]],
    ___ = [0, [0, cst_src_proc_ml, 403, 10902, 10906]],
    _$_ = [0, [0, cst_src_proc_ml, 403, 10902, 10906]],
    _aa_ = [0, [0, cst_src_proc_ml, 403, 10902, 10906]],
    _ab_ = [0, [0, cst_src_proc_ml, 403, 10902, 10906]],
    _ac_ = [0, [0, cst_src_proc_ml, 403, 10902, 10906]],
    _M_ = [0, [0, cst_src_proc_ml, 375, 9954, 9960]],
    _N_ = [0, [0, cst_src_proc_ml, 374, 9938, 9942]],
    _O_ = [0, [0, cst_src_proc_ml, 369, 9783, 9789]],
    _P_ = [0, [0, cst_src_proc_ml, 368, 9762, 9766]],
    _H_ = [0, [0, cst_src_proc_ml, 356, 9472, 9474]],
    _I_ = [0, [0, cst_src_proc_ml, 347, 9228, 9230]],
    _J_ = [0, [0, cst_src_proc_ml, 347, 9228, 9230]],
    _K_ = [0, [0, cst_src_proc_ml, 347, 9228, 9230]],
    _F_ = [0, [0, cst_src_proc_ml, 342, 9145, 9147]],
    _y_ = [0, [0, cst_src_proc_ml, 327, 8821, 8823]],
    _z_ = [0, [0, cst_src_proc_ml, 326, 8750, 8752]],
    _A_ = [0, [0, cst_src_proc_ml, 326, 8750, 8752]],
    _B_ = [0, [0, cst_src_proc_ml, 326, 8750, 8752]],
    _C_ = [0, [0, cst_src_proc_ml, 326, 8750, 8752]],
    _D_ = [0, [0, cst_src_proc_ml, 326, 8750, 8752]],
    _w_ = [0, [0, cst_src_proc_ml, 320, 8537, 8539]],
    _u_ = [0, cst_Set],
    _v_ = [0, "Toggle"],
    _x_ = [0, [0, cst_src_proc_ml, 309, 8207, 8209]],
    _m_ = [0, [0, cst_src_proc_ml, 256, 7051, 7053]],
    _n_ = [0, [0, cst_src_proc_ml, 253, 6954, 6958]],
    _o_ = [0, [0, cst_src_proc_ml, 252, 6935, 6937]],
    _p_ = [0, [0, cst_src_proc_ml, 234, 6272, 6274]],
    _q_ = [0, [0, cst_src_proc_ml, 234, 6272, 6274]],
    _r_ = [0, [0, cst_src_proc_ml, 234, 6272, 6274]],
    _s_ = [0, [0, cst_src_proc_ml, 234, 6272, 6274]],
    _t_ = [0, [0, cst_src_proc_ml, 234, 6272, 6274]],
    _k_ = [0, [0, cst_src_proc_ml, 188, 4868, 4870]],
    _l_ = [0, [0, cst_src_proc_ml, 179, 4621, 4623]],
    _i_ = [0, [0, cst_src_proc_ml, 166, 4352, 4354]],
    _j_ = [0, [0, cst_src_proc_ml, 157, 4090, 4092]],
    _f_ = [0, "action"],
    cst_An_action_sent_to_an_of_mo =
      "An action sent to an [of_module1] has been dropped because its input was not present. This happens when the [of_module1] is inactive when it receives a message.",
    cst_src_proc_ml_101_14 = "src/proc.ml:101:14",
    _e_ = [0, [0, cst_src_proc_ml, 109, 2889, 2891]],
    _g_ = [0, [0, cst_src_proc_ml, 89, 2221, 2223]],
    _h_ = [0, [0, cst_src_proc_ml, 88, 2187, 2189]],
    _c_ = [0, [0, cst_src_proc_ml, 73, 1891, 1893]],
    _d_ = [0, [0, cst_src_proc_ml, 72, 1825, 1827]],
    _b_ = [0, cst_src_proc_ml, 62, 1549, 1575],
    _a_ = [0, [0, cst_src_proc_ml, 45, 1037, 1041]],
    _G_ = [0, [0, cst_src_proc_ml, 341, 9120, 9122]],
    cst_request_was_aborted = "request was aborted",
    cst_bonsai = cst_bonsai$0,
    cst_Bonsai_Proc = cst_Bonsai_Proc$0;
   function map(here, t, f){
    var _m6_ = caml_call2(Bonsai_Value[3], t, f);
    return [0, _m6_[1], here, _m6_[3]];
   }
   var both = Bonsai_Value[4], map2 = Bonsai_Value[10];
   function arr(here, t, f){return caml_call1(read, map(here, t, f));}
   function cutoff(t, equal){
    return caml_call3(Bonsai_Value[22], 1, t, equal);
   }
   var
    map7 = Bonsai_Value[20],
    map6 = Bonsai_Value[19],
    map5 = Bonsai_Value[18],
    map4 = Bonsai_Value[17],
    map3 = Bonsai_Value[16],
    Let_syntax =
      [0,
       sub,
       switch$0,
       read,
       map,
       both,
       map2,
       arr,
       cutoff,
       map3,
       map4,
       map5,
       map6,
       map7];
   function symbol_map(a, f){return caml_call3(Let_syntax[4], 0, a, f);}
   function symbol(f, a){
    function _m5_(f, a){return caml_call1(f, a);}
    return caml_call3(Bonsai_Value[10], f, a, _m5_);
   }
   function symbol$0(f, a){return caml_call3(Let_syntax[4], 0, a, f);}
   var Let_syntax$0 = [0, read, Let_syntax, symbol_map, symbol, symbol$0];
   function pure(f, i){
    return caml_call1(read, caml_call2(Bonsai_Value[3], i, f));
   }
   function const$0(x){
    return caml_call1(read, caml_call1(Bonsai_Value[2], x));
   }
   function fix(input, f){
    function recurse(i2){
     return caml_call1
             (lazy, [246, function(_m4_){return caml_call2(f, recurse, i2);}]);
    }
    return caml_call2(f, recurse, input);
   }
   function fix2(a, b, f){
    function recurse(a, b){
     return caml_call1
             (lazy,
              [246, function(_m3_){return caml_call3(f, recurse, a, b);}]);
    }
    return caml_call3(f, recurse, a, b);
   }
   function with_model_resetter$0(inside){
    return caml_call1
            (with_model_resetter,
             function(reset){
              function _m1_(r){
               var _m2_ = caml_call2(Bonsai_Value[4], r, reset);
               return caml_call1(Let_syntax$0[1], _m2_);
              }
              return caml_call3(Let_syntax$0[2][1], _a_, inside, _m1_);
             });
   }
   function enum$0(E, match, with$0){
    var
     all = E[2],
     include = caml_call1(Core_Comparator[7], [0, E[1], E[4]]),
     comparator = include[1],
     forward_index = caml_call1(Core_List[30], all);
    function _mY_(i, k){return [0, k, i];}
    var
     _mZ_ = caml_call2(Core_List[41], all, _mY_),
     reverse_index = caml_call2(Core_Map[8], [0, comparator], _mZ_),
     _m0_ = caml_call1(Core_Map[45], reverse_index),
     branches = forward_index.length - 1,
     match$0 = caml_call2(Let_syntax$0[3], match, _m0_);
    function with$1(i){
     return caml_call1
             (with$0, runtime.caml_check_bound(forward_index, i)[1 + i]);
    }
    return caml_call4(Let_syntax$0[2][2], _b_, match$0, branches, with$1);
   }
   function scope_model(M, v, computation){
    function _mT_(k){return caml_call3(Core_Map[5], [0, M[2]], k, 0);}
    var v$0 = caml_call2(Bonsai_Value[3], v, _mT_);
    function _mU_(map){
     function _mX_(map){var r = caml_call1(Core_Map[93], map)[2]; return r;}
     return caml_call3(Let_syntax$0[2][7], _c_, map, _mX_);
    }
    var
     _mV_ =
       caml_call3(assoc, M, v$0, function(param, _mW_){return computation;});
    return caml_call3(Let_syntax$0[2][1], _d_, _mV_, _mU_);
   }
   function of_module1(sexp_of_model, component, equal, default_model, input){
    function _mJ_(input){
     function _mL_(model_and_inject){
      function _mR_(param){
       var
        input = param[2],
        match = param[1],
        inject = match[2],
        model = match[1];
       return caml_call3(component[7], inject, input, model);
      }
      var _mS_ = caml_call2(Let_syntax$0[2][5], model_and_inject, input);
      return caml_call3(Let_syntax$0[2][7], _e_, _mS_, _mR_);
     }
     function _mM_(context, input, model, action){
      if(input){
       var input$0 = input[1];
       return caml_call4(component[6], context, input$0, model, action);
      }
      var
       _mO_ =
         [0, [1, [0, _f_, [0, caml_call1(component[4][1], action), 0]]], 0],
       _mP_ =
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_An_action_sent_to_an_of_mo),
          _mO_],
       _mQ_ =
         [1,
          [0, caml_call1(Sexplib0_Sexp_conv[7], cst_src_proc_ml_101_14), _mP_]];
      caml_call2(Core[257], 0, _mQ_);
      return model;
     }
     var
      _mN_ =
        caml_call7
         (state_machine1,
          [0, component[4][1]],
          0,
          sexp_of_model,
          equal,
          default_model,
          _mM_,
          input);
     return caml_call3(Let_syntax$0[2][1], _g_, _mN_, _mL_);
    }
    var _mK_ = caml_call1(Let_syntax$0[1], input);
    return caml_call3(Let_syntax$0[2][1], _h_, _mK_, _mJ_);
   }
   function of_module2(sexp_of_model, c, equal, default_model, i1, i2){
    return of_module1
            (sexp_of_model,
             c,
             equal,
             default_model,
             caml_call2(Bonsai_Value[4], i1, i2));
   }
   function race_dynamic_model
   (sexp_of_action, sexp_of_model, equal, model, apply_action, input){
    if(657750365 <= model[1])
     var
      m = model[2],
      _mA_ =
        function(m, param){if(! param) return m; var a = param[1]; return a;},
      model_creator = caml_call2(Bonsai_Value[3], m, _mA_);
    else
     var f = model[2], model_creator = f;
    function apply_action$0(context, computation_status, model, action){
     var
      match = caml_call1(Bonsai_Apply_action_context[4][1], context),
      schedule_event = match[2],
      inject = match[1];
     if(! computation_status)
      return [0,
              caml_call5
               (apply_action, inject, schedule_event, 0, model, action)];
     var
      match$0 = computation_status[1],
      model_creator = match$0[2],
      input = match$0[1],
      model$0 = [0, caml_call1(model_creator, model)];
     return [0,
             caml_call5
              (apply_action,
               inject,
               schedule_event,
               [0, input],
               model$0,
               action)];
    }
    function _mB_(model_and_inject){
     function _mH_(param){
      var
       model_creator = param[2],
       match = param[1],
       inject = match[2],
       model = match[1];
      return [0, caml_call1(model_creator, model), inject];
     }
     var
      _mI_ = caml_call2(Let_syntax$0[2][5], model_and_inject, model_creator);
     return caml_call3(Let_syntax$0[2][7], _i_, _mI_, _mH_);
    }
    var
     _mC_ = caml_call2(Bonsai_Value[4], input, model_creator),
     _mD_ = 0,
     _mE_ =
       [0,
        function(a_014, b_015){
         function _mG_(a_011, b_012){return caml_call2(equal, a_011, b_012);}
         return caml_call3(Core[511], _mG_, a_014, b_015);
        }],
     _mF_ =
       caml_call7
        (state_machine1,
         sexp_of_action,
         0,
         caml_call2(Core_Option[34], sexp_of_model, Core_Option[22]),
         _mE_,
         _mD_,
         apply_action$0,
         _mC_);
    return caml_call3(Let_syntax$0[2][1], _j_, _mF_, _mB_);
   }
   function of_module0(sexp_of_model, equal, component, default_model){
    function _mv_(model_and_inject){
     function _mz_(param){
      var inject = param[2], model = param[1];
      return caml_call3(component[7], inject, 0, model);
     }
     return caml_call3(Let_syntax$0[2][7], _k_, model_and_inject, _mz_);
    }
    var _mw_ = 0;
    function _mx_(context, model, action){
     return caml_call4(component[6], context, 0, model, action);
    }
    var
     _my_ =
       caml_call7
        (state_machine0,
         0,
         sexp_of_model,
         [0, component[4][1]],
         equal,
         default_model,
         _mx_,
         _mw_);
    return caml_call3(Let_syntax$0[2][1], _l_, _my_, _mv_);
   }
   function actor1
   (opt, reset, sexp_of_model, equal, default_model, recv, input){
    if(opt)
     var sth = opt[1], sexp_of_action = sth;
    else
     var sexp_of_action = Core[149];
    function sexp_of_t(cb){
     return caml_call1(sexp_of_action, caml_call1(Ui_effect[22][1][2], cb));
    }
    function make_inject(inject, schedule_event, action){
     function _mu_(action){
      return caml_call1(schedule_event, caml_call1(inject, action));
     }
     return caml_call2(Ui_effect[22][2], action, _mu_);
    }
    function _ma_(f, context, model){
     var
      match = caml_call1(Bonsai_Apply_action_context[4][1], context),
      schedule_event = match[2],
      inject = match[1];
     function inject$0(_mt_){
      return make_inject(inject, schedule_event, _mt_);
     }
     return caml_call3(f, inject$0, schedule_event, model);
    }
    var reset$0 = caml_call2(Core_Option[34], reset, _ma_);
    function _mb_(pattern_syntax_021){
     function _me_(model){
      function _mi_(inject){
       function _mm_(inject){
        function _mr_(param){
         var inject = param[2], model = param[1];
         return [0, model, inject];
        }
        var _ms_ = caml_call2(Let_syntax$0[2][5], model, inject);
        return caml_call3(Let_syntax$0[2][7], _m_, _ms_, _mr_);
       }
       function _mn_(inject){
        var _mp_ = Ui_effect[21][2];
        return function(_mq_){return make_inject(inject, _mp_, _mq_);};
       }
       var _mo_ = caml_call3(Let_syntax$0[2][7], _n_, inject, _mn_);
       return caml_call3(Let_syntax$0[2][1], _o_, _mo_, _mm_);
      }
      function _mj_(param){
       var pattern_syntax_022 = param[2];
       return pattern_syntax_022;
      }
      var
       _mk_ = caml_call3(Let_syntax$0[2][4], _p_, pattern_syntax_021, _mj_),
       _ml_ = caml_call1(Let_syntax$0[2][3], _mk_);
      return caml_call3(Let_syntax$0[2][1], _q_, _ml_, _mi_);
     }
     function _mf_(param){
      var pattern_syntax_023 = param[1];
      return pattern_syntax_023;
     }
     var
      _mg_ = caml_call3(Let_syntax$0[2][4], _r_, pattern_syntax_021, _mf_),
      _mh_ = caml_call1(Let_syntax$0[2][3], _mg_);
     return caml_call3(Let_syntax$0[2][1], _s_, _mh_, _me_);
    }
    var
     _mc_ =
       caml_call7
        (state_machine1,
         [0, sexp_of_t],
         reset$0,
         sexp_of_model,
         equal,
         default_model,
         function(context, input, model, callback){
          var
           match = caml_call1(Bonsai_Apply_action_context[4][1], context),
           schedule_event = match[2],
           inject = match[1];
          function inject$0(_md_){
           return make_inject(inject, schedule_event, _md_);
          }
          var
           action = caml_call1(Ui_effect[22][1][2], callback),
           match$0 =
             caml_call5(recv, inject$0, schedule_event, input, model, action),
           response = match$0[2],
           new_model = match$0[1];
          caml_call1
           (schedule_event,
            caml_call2(Ui_effect[22][1][3], callback, response));
          return new_model;
         },
         input);
    return caml_call3(Let_syntax$0[2][1], _t_, _mc_, _mb_);
   }
   function actor0
   (reset, sexp_of_model, sexp_of_action, equal, default_model, recv, param){
    function recv$0(inject, schedule_event, param){
     return caml_call2(recv, inject, schedule_event);
    }
    return actor1
            (sexp_of_action,
             reset,
             sexp_of_model,
             equal,
             default_model,
             recv$0,
             caml_call1(Bonsai_Value[2], 0));
   }
   function state(reset, sexp_of_model, equal, default_model){
    var
     sexp_of_action = caml_call2(Core_Option[39], sexp_of_model, Core[149]);
    function _l__(reset, param, m){return caml_call1(reset, m);}
    var reset$0 = caml_call2(Core_Option[34], reset, _l__), _l$_ = 0;
    return caml_call7
            (state_machine0,
             reset$0,
             sexp_of_model,
             [0, sexp_of_action],
             equal,
             default_model,
             function(param, old_model, new_model){return new_model;},
             _l$_);
   }
   var Toggle = [0];
   function toggle(default_model){
    function sexp_of_t(param){
     if(! param) return _v_;
     var arg0_038 = param[1], res0_039 = caml_call1(Core[323], arg0_038);
     return [1, [0, _u_, [0, res0_039, 0]]];
    }
    function _l2_(state_and_inject){
     function _l8_(state_and_inject){
      var
       inject = state_and_inject[2],
       state = state_and_inject[1],
       _l9_ = caml_call1(inject, 0);
      return [0,
              state,
              function(state){return caml_call1(inject, [0, state]);},
              _l9_];
     }
     return caml_call3(Let_syntax$0[2][7], _w_, state_and_inject, _l8_);
    }
    var _l3_ = 0;
    function _l4_(param, state, _l7_){
     if(! _l7_) return 1 - state;
     var state$0 = _l7_[1];
     return state$0;
    }
    var
     _l5_ =
       [0,
        function(a_041, b_042){
         return caml_call2(Core_Bool[32], a_041, b_042);
        }],
     _l6_ =
       caml_call7
        (state_machine0,
         0,
         [0, Core_Bool[22]],
         [0, sexp_of_t],
         _l5_,
         default_model,
         _l4_,
         _l3_);
    return caml_call3(Let_syntax$0[2][1], _x_, _l6_, _l2_);
   }
   function toggle$0(default_model){
    function _lQ_(pattern_syntax_044){
     function _lS_(toggle){
      function _lW_(state){
       function _l0_(param){
        var toggle = param[2], state = param[1];
        return [0, state, toggle];
       }
       var _l1_ = caml_call2(Let_syntax$0[2][5], state, toggle);
       return caml_call3(Let_syntax$0[2][7], _y_, _l1_, _l0_);
      }
      function _lX_(param){
       var pattern_syntax_045 = param[1];
       return pattern_syntax_045;
      }
      var
       _lY_ = caml_call3(Let_syntax$0[2][4], _z_, pattern_syntax_044, _lX_),
       _lZ_ = caml_call1(Let_syntax$0[2][3], _lY_);
      return caml_call3(Let_syntax$0[2][1], _A_, _lZ_, _lW_);
     }
     function _lT_(param){
      var pattern_syntax_046 = param[3];
      return pattern_syntax_046;
     }
     var
      _lU_ = caml_call3(Let_syntax$0[2][4], _B_, pattern_syntax_044, _lT_),
      _lV_ = caml_call1(Let_syntax$0[2][3], _lU_);
     return caml_call3(Let_syntax$0[2][1], _C_, _lV_, _lS_);
    }
    var _lR_ = toggle(default_model);
    return caml_call3(Let_syntax$0[2][1], _D_, _lR_, _lQ_);
   }
   function state_opt(reset, default_model, sexp_of_model, equal, param){
    var _lP_ = caml_call2(Core_Option[34], equal, Core_Option[18]);
    return state
            (reset,
             caml_call2(Core_Option[34], sexp_of_model, Core_Option[22]),
             _lP_,
             default_model);
   }
   function _E_(path){
    function _lO_(path){return caml_call1(Bonsai_Path[27], path);}
    return caml_call3(Let_syntax$0[2][7], _F_, path, _lO_);
   }
   var path_id = caml_call3(Let_syntax$0[2][1], _G_, path, _E_);
   function yoink(a){
    function _lB_(pattern_syntax_052){
     function _lJ_(result){
      function _lN_(result){return caml_call1(result, 0);}
      return caml_call3(Let_syntax$0[2][7], _H_, result, _lN_);
     }
     function _lK_(param){
      var pattern_syntax_053 = param[2];
      return pattern_syntax_053;
     }
     var
      _lL_ = caml_call3(Let_syntax$0[2][4], _I_, pattern_syntax_052, _lK_),
      _lM_ = caml_call1(Let_syntax$0[2][3], _lL_);
     return caml_call3(Let_syntax$0[2][1], _J_, _lM_, _lJ_);
    }
    function _lC_(param, _lI_, a, _lH_, _lG_){return [0, 0, a];}
    var
     _lD_ = 0,
     _lE_ =
       [0,
        function(a_054, b_055){
         return caml_call2(Core_Unit[20], a_054, b_055);
        }],
     _lF_ =
       actor1([0, Core_Unit[10]], 0, [0, Core_Unit[10]], _lE_, _lD_, _lC_, a);
    return caml_call3(Let_syntax$0[2][1], _K_, _lF_, _lB_);
   }
   var _L_ = Edge[1];
   function lifecycle(on_activate, on_deactivate, after_display, param){
    function transpose_join(param){
     if(! param) return caml_call1(Bonsai_Value[2], 0);
     var a = param[1];
     return a;
    }
    function _lt_(triple){
     function _ly_(t){return caml_call1(_L_, t);}
     function _lz_(param){
      var on_activate = param[1];
      if(! on_activate && ! param[2] && ! param[3]) return 0;
      var after_display = param[3], on_deactivate = param[2];
      return [0, [0, on_activate, on_deactivate, after_display]];
     }
     var _lA_ = caml_call3(Let_syntax$0[2][7], _M_, triple, _lz_);
     return caml_call3(Let_syntax$0[2][1], _N_, _lA_, _ly_);
    }
    var
     let_syntax_058 = transpose_join(on_activate),
     let_syntax_059 = transpose_join(on_deactivate),
     let_syntax_060 = transpose_join(after_display);
    function _lu_(param){
     var match = param[2], c = match[2], b = match[1], a = param[1];
     return [0, a, b, c];
    }
    var
     _lv_ = caml_call2(Let_syntax$0[2][5], let_syntax_059, let_syntax_060),
     _lw_ = caml_call2(Let_syntax$0[2][5], let_syntax_058, _lv_),
     _lx_ = caml_call3(Let_syntax$0[2][7], _O_, _lw_, _lu_);
    return caml_call3(Let_syntax$0[2][1], _P_, _lx_, _lt_);
   }
   function lifecycle$0(on_activate, on_deactivate, after_display, param){
    var _le_ = 0, _lf_ = Bonsai_Value[3], _lg_ = Core_Option[58];
    function _lh_(_ls_){return caml_call2(_lf_, _ls_, _lg_);}
    var
     _li_ = caml_call2(Core_Option[34], after_display, _lh_),
     _lj_ = Bonsai_Value[3],
     _lk_ = Core_Option[58];
    function _ll_(_lr_){return caml_call2(_lj_, _lr_, _lk_);}
    var
     _lm_ = caml_call2(Core_Option[34], on_deactivate, _ll_),
     _ln_ = Bonsai_Value[3],
     _lo_ = Core_Option[58];
    function _lp_(_lq_){return caml_call2(_ln_, _lq_, _lo_);}
    return lifecycle
            (caml_call2(Core_Option[34], on_activate, _lp_), _lm_, _li_, _le_);
   }
   function after_display(event_opt_value){
    return lifecycle(0, 0, [0, event_opt_value], 0);
   }
   function after_display$0(event_value){
    var
     event_value$0 = caml_call2(Bonsai_Value[3], event_value, Core_Option[58]);
    return lifecycle(0, 0, [0, event_value$0], 0);
   }
   function _Q_(clock){
    var _ld_ = caml_call1(Ui_time_source[11], clock);
    return caml_call1(Ui_incr[11], _ld_);
   }
   var wait_after_display = caml_call1(Bonsai_Incr0[2], _Q_);
   function on_change(sexp_of_model, equal, input, callback){
    function _kG_(pattern_syntax_063){
     function _kI_(state){
      function _kM_(set_state){
       function _kQ_(update){return after_display(update);}
       function _kR_(pattern_syntax_067){
        function _kU_(param){
         if(0 === param){
          var
           _kY_ =
             function(param){
              var
               match = param[2],
               callback = match[2],
               input = match[1],
               set_state = param[1],
               _lb_ = [0, caml_call2(callback, 0, input), 0],
               _lc_ = [0, caml_call1(set_state, [0, input]), _lb_];
              return [0, [0, Ui_effect[2], _lc_]];
             },
           _kZ_ = caml_call2(Let_syntax$0[2][5], input, callback),
           _k0_ = caml_call2(Let_syntax$0[2][5], set_state, _kZ_);
          return caml_call3(Let_syntax$0[2][7], _R_, _k0_, _kY_);
         }
         if(1 !== param)
          throw caml_maybe_attach_backtrace([0, Assert_failure, _W_], 1);
         function _k1_(state){
          function _k5_(param){
           var
            _k9_ = param[2],
            match = _k9_[2],
            callback = match[2],
            input = match[1],
            set_state = _k9_[1],
            state = param[1];
           if(state !== input && ! caml_call2(equal, state, input)){
            var
             _k__ =
               [246,
                function(param){
                 var
                  _k$_ = [0, caml_call2(callback, [0, state], input), 0],
                  _la_ = [0, caml_call1(set_state, [0, input]), _k$_];
                 return [0, Ui_effect[2], _la_];
                }];
            return [0, caml_call1(Ui_effect[15], _k__)];
           }
           return 0;
          }
          var
           _k6_ = caml_call2(Let_syntax$0[2][5], input, callback),
           _k7_ = caml_call2(Let_syntax$0[2][5], set_state, _k6_),
           _k8_ = caml_call2(Let_syntax$0[2][5], state, _k7_);
          return caml_call3(Let_syntax$0[2][7], _S_, _k8_, _k5_);
         }
         function _k2_(param){
          if(! param)
           throw caml_maybe_attach_backtrace([0, Assert_failure, _T_], 1);
          var pattern_syntax_068 = param[1];
          return pattern_syntax_068;
         }
         var
          _k3_ = caml_call3(Let_syntax$0[2][4], _U_, pattern_syntax_067, _k2_),
          _k4_ = caml_call1(Let_syntax$0[2][3], _k3_);
         return caml_call3(Let_syntax$0[2][1], _V_, _k4_, _k1_);
        }
        var _kV_ = 2;
        function _kW_(param){return param ? 1 : 0;}
        var
         _kX_ = caml_call3(Let_syntax$0[2][4], 0, pattern_syntax_067, _kW_);
        return caml_call4(Let_syntax$0[2][2], _X_, _kX_, _kV_, _kU_);
       }
       var
        _kS_ = caml_call1(Let_syntax$0[2][3], state),
        _kT_ = caml_call3(Let_syntax$0[2][1], _Y_, _kS_, _kR_);
       return caml_call3(Let_syntax$0[2][1], _Z_, _kT_, _kQ_);
      }
      function _kN_(param){
       var pattern_syntax_064 = param[2];
       return pattern_syntax_064;
      }
      var
       _kO_ = caml_call3(Let_syntax$0[2][4], ___, pattern_syntax_063, _kN_),
       _kP_ = caml_call1(Let_syntax$0[2][3], _kO_);
      return caml_call3(Let_syntax$0[2][1], _$_, _kP_, _kM_);
     }
     function _kJ_(param){
      var pattern_syntax_065 = param[1];
      return pattern_syntax_065;
     }
     var
      _kK_ = caml_call3(Let_syntax$0[2][4], _aa_, pattern_syntax_063, _kJ_),
      _kL_ = caml_call1(Let_syntax$0[2][3], _kK_);
     return caml_call3(Let_syntax$0[2][1], _ab_, _kL_, _kI_);
    }
    var _kH_ = state_opt(0, 0, sexp_of_model, [0, equal], 0);
    return caml_call3(Let_syntax$0[2][1], _ac_, _kH_, _kG_);
   }
   function on_change$0(sexp_of_model, equal, input, callback){
    function _kF_(callback, prev, value){return caml_call1(callback, value);}
    var callback$0 = caml_call2(Bonsai_Value[3], callback, _kF_);
    return on_change(sexp_of_model, equal, input, callback$0);
   }
   var empty = 0;
   function initial(a){return [0, a];}
   var Starting = [0, empty, initial];
   function manual_refresh_implementation
   (sexp_of_model, equal, initial, wrap_result, effect, param){
    function _j0_(pattern_syntax_078){
     function _j8_(next_seqnum){
      var
       sexp_of_result = caml_call2(Core_Option[39], sexp_of_model, Core[149]);
      function _ka_(_kE_, _kD_){return _kE_ === _kD_ ? 1 : 0;}
      var equal_result = caml_call2(Core_Option[39], equal, _ka_);
      function sexp_of_t(param){
       var
        last_result_085 = param[2],
        last_seqnum_083 = param[1],
        arg_086 = caml_call1(sexp_of_result, last_result_085),
        bnds_082 = [0, [1, [0, _ad_, [0, arg_086, 0]]], 0],
        arg_084 = caml_call1(Core[389], last_seqnum_083),
        bnds_082$0 = [0, [1, [0, _ae_, [0, arg_084, 0]]], bnds_082];
       return [1, bnds_082$0];
      }
      var
       sexp_of_result$0 =
         caml_call2(Core_Option[39], sexp_of_model, Core[149]);
      function sexp_of_t$0(param){
       var
        arg1_090 = param[2],
        arg0_089 = param[1],
        res0_091 = caml_call1(Core[389], arg0_089),
        res1_092 = caml_call1(sexp_of_result$0, arg1_090);
       return [1, [0, _af_, [0, res0_091, [0, res1_092, 0]]]];
      }
      function _kb_(pattern_syntax_093){
       function _ki_(state){
        function _km_(inject_change){
         function _kq_(callback){
          function _ky_(param){
           var callback = param[2], last_result = param[1][2];
           return [0, last_result, callback];
          }
          function _kz_(param, _kC_){
           var new_for_cutoff_107 = _kC_[2], old_for_cutoff_108 = param[2];
           return old_for_cutoff_108 === new_for_cutoff_107 ? 1 : 0;
          }
          var
           _kA_ = caml_call2(Let_syntax$0[2][8], state, _kz_),
           _kB_ = caml_call2(Let_syntax$0[2][5], _kA_, callback);
          return caml_call3(Let_syntax$0[2][7], _ag_, _kB_, _ky_);
         }
         function _kr_(param){
          var
           match = param[2],
           inject_change = match[2],
           next_seqnum = match[1],
           effect = param[1];
          function _kv_(seqnum){
           function _kx_(result){
            return caml_call1
                    (inject_change,
                     [0, seqnum, caml_call1(wrap_result, result)]);
           }
           return caml_call2(Ui_effect[13][4][2], effect, _kx_);
          }
          var _kw_ = caml_call1(next_seqnum, 0);
          return caml_call2(Ui_effect[13][4][2], _kw_, _kv_);
         }
         var
          _ks_ = caml_call2(Let_syntax$0[2][5], next_seqnum, inject_change),
          _kt_ = caml_call2(Let_syntax$0[2][5], effect, _ks_),
          _ku_ = caml_call3(Let_syntax$0[2][7], _ah_, _kt_, _kr_);
         return caml_call3(Let_syntax$0[2][1], _ai_, _ku_, _kq_);
        }
        function _kn_(param){
         var pattern_syntax_094 = param[2];
         return pattern_syntax_094;
        }
        var
         _ko_ = caml_call3(Let_syntax$0[2][4], _aj_, pattern_syntax_093, _kn_),
         _kp_ = caml_call1(Let_syntax$0[2][3], _ko_);
        return caml_call3(Let_syntax$0[2][1], _ak_, _kp_, _km_);
       }
       function _kj_(param){
        var pattern_syntax_095 = param[1];
        return pattern_syntax_095;
       }
       var
        _kk_ = caml_call3(Let_syntax$0[2][4], _al_, pattern_syntax_093, _kj_),
        _kl_ = caml_call1(Let_syntax$0[2][3], _kk_);
       return caml_call3(Let_syntax$0[2][1], _am_, _kl_, _ki_);
      }
      var _kc_ = 0;
      function _kd_(param, model, _kh_){
       var res = _kh_[2], seqnum = _kh_[1];
       return caml_call2(Core[92], seqnum, model[1])
               ? model
               : [0, seqnum, res];
      }
      var
       _ke_ = [0, -1, initial],
       _kf_ =
         caml_call7
          (state_machine0,
           0,
           [0, sexp_of_t],
           [0, sexp_of_t$0],
           [0,
            function(a_096, b_097){
             if(a_096 === b_097) return 1;
             var _kg_ = caml_call2(Core[384], a_096[1], b_097[1]);
             return _kg_ ? caml_call2(equal_result, a_096[2], b_097[2]) : _kg_;
            }],
           _ke_,
           _kd_,
           _kc_);
      return caml_call3(Let_syntax$0[2][1], _an_, _kf_, _kb_);
     }
     function _j9_(param){
      var pattern_syntax_079 = param[2];
      return pattern_syntax_079;
     }
     var
      _j__ = caml_call3(Let_syntax$0[2][4], _ao_, pattern_syntax_078, _j9_),
      _j$_ = caml_call1(Let_syntax$0[2][3], _j__);
     return caml_call3(Let_syntax$0[2][1], _ap_, _j$_, _j8_);
    }
    var _j1_ = 0;
    function _j2_(param, _j7_, i, _j6_){return [0, i + 1 | 0, i];}
    var
     _j3_ = 0,
     _j4_ =
       [0,
        function(a_080, b_081){return caml_call2(Core_Int[87], a_080, b_081);}],
     _j5_ =
       actor0
        (0, [0, Core_Int[77]], [0, Core_Unit[10]], _j4_, _j3_, _j2_, _j1_);
    return caml_call3(Let_syntax$0[2][1], _aq_, _j5_, _j0_);
   }
   function manual_refresh(sexp_of_model, equal, kind, effect){
    if(kind){
     var initial = kind[1], _jW_ = 0;
     return manual_refresh_implementation
             (sexp_of_model,
              equal,
              initial,
              function(_jZ_){return _jZ_;},
              effect,
              _jW_);
    }
    var
     _jX_ = Core_Option[58],
     _jY_ = caml_call2(Core_Option[34], equal, Core_Option[18]);
    return manual_refresh_implementation
            (caml_call2(Core_Option[34], sexp_of_model, Core_Option[22]),
             _jY_,
             0,
             _jX_,
             effect,
             0);
   }
   function effect_on_change
   (sexp_of_input,
    sexp_of_result,
    equal_input,
    equal_result,
    kind,
    input,
    effect){
    function _ju_(get_input){
     function _jw_(effect){
      function _jD_(pattern_syntax_116){
       function _jF_(result){
        function _jJ_(refresh){
         function _jN_(callback){
          function _jQ_(pattern_syntax_121){
           function _jS_(param){return caml_call1(Let_syntax$0[1], result);}
           function _jT_(param){return 0;}
           var
            _jU_ =
              caml_call3(Let_syntax$0[2][4], _ar_, pattern_syntax_121, _jT_),
            _jV_ = caml_call1(Let_syntax$0[2][3], _jU_);
           return caml_call3(Let_syntax$0[2][1], _as_, _jV_, _jS_);
          }
          var _jR_ = on_change$0(sexp_of_input, equal_input, input, callback);
          return caml_call3(Let_syntax$0[2][1], _at_, _jR_, _jQ_);
         }
         function _jO_(refresh, param){return refresh;}
         var _jP_ = caml_call3(Let_syntax$0[2][7], _au_, refresh, _jO_);
         return caml_call3(Let_syntax$0[2][1], _av_, _jP_, _jN_);
        }
        function _jK_(param){
         var pattern_syntax_117 = param[2];
         return pattern_syntax_117;
        }
        var
         _jL_ = caml_call3(Let_syntax$0[2][4], _aw_, pattern_syntax_116, _jK_),
         _jM_ = caml_call1(Let_syntax$0[2][3], _jL_);
        return caml_call3(Let_syntax$0[2][1], _ax_, _jM_, _jJ_);
       }
       function _jG_(param){
        var pattern_syntax_118 = param[1];
        return pattern_syntax_118;
       }
       var
        _jH_ = caml_call3(Let_syntax$0[2][4], _ay_, pattern_syntax_116, _jG_),
        _jI_ = caml_call1(Let_syntax$0[2][3], _jH_);
       return caml_call3(Let_syntax$0[2][1], _az_, _jI_, _jF_);
      }
      var _jE_ = manual_refresh(sexp_of_result, equal_result, kind, effect);
      return caml_call3(Let_syntax$0[2][1], _aA_, _jE_, _jD_);
     }
     function _jx_(param){
      var effect = param[2], get_input = param[1];
      function _jA_(input){return caml_call1(effect, input);}
      function _jB_(param){
       if(! param) return Ui_effect[14];
       var input = param[1];
       return caml_call1(Ui_effect[7], input);
      }
      var _jC_ = caml_call2(Ui_effect[13][4][2], get_input, _jB_);
      return caml_call2(Ui_effect[13][4][2], _jC_, _jA_);
     }
     var
      _jy_ = caml_call2(Let_syntax$0[2][5], get_input, effect),
      _jz_ = caml_call3(Let_syntax$0[2][7], _aB_, _jy_, _jx_);
     return caml_call3(Let_syntax$0[2][1], _aC_, _jz_, _jw_);
    }
    var _jv_ = yoink(input);
    return caml_call3(Let_syntax$0[2][1], _aD_, _jv_, _ju_);
   }
   var
    Poll =
      [0,
       Starting,
       manual_refresh_implementation,
       manual_refresh,
       effect_on_change],
    Edge$0 =
      [0,
       lifecycle,
       lifecycle$0,
       after_display,
       after_display$0,
       wait_after_display,
       on_change,
       on_change$0,
       Poll];
   function t_of_sexp(of_a_122, sexp_127){
    a:
    {
     if(0 === sexp_127[0]){
      var _jr_ = sexp_127[1];
      b:
      if(caml_string_notequal(_jr_, cst_Aborted)){
       if(caml_string_notequal(_jr_, cst_Finished)){
        if(! caml_string_notequal(_jr_, cst_aborted)) break b;
        if(caml_string_notequal(_jr_, cst_finished)) break a;
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[9], error_source_125, sexp_127);
      }
      return 0;
     }
     var _js_ = sexp_127[1];
     if(! _js_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_125, sexp_127);
     var _jt_ = _js_[1];
     if(0 !== _jt_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_125, sexp_127);
     var tag_128 = _jt_[1];
     b:
     if(caml_string_notequal(tag_128, cst_Aborted)){
      if(caml_string_notequal(tag_128, cst_Finished)){
       if(! caml_string_notequal(tag_128, cst_aborted)) break b;
       if(caml_string_notequal(tag_128, cst_finished)) break a;
      }
      var sexp_args_129 = _js_[2];
      if(sexp_args_129 && ! sexp_args_129[2]){
       var
        arg0_130 = sexp_args_129[1],
        res0_131 = caml_call1(of_a_122, arg0_130);
       return [0, res0_131];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[8],
               error_source_125,
               tag_128,
               sexp_127);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[7], error_source_125, sexp_127);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_125, sexp_127);
   }
   function sexp_of_t(of_a_133, param){
    if(! param) return _aF_;
    var arg0_134 = param[1], res0_135 = caml_call1(of_a_133, arg0_134);
    return [1, [0, _aE_, [0, res0_135, 0]]];
   }
   function equal(cmp_a, a_137, b_138){
    if(a_137 === b_138) return 1;
    if(! a_137) return b_138 ? 0 : 1;
    if(! b_138) return 0;
    var b_140 = b_138[1], a_139 = a_137[1];
    return caml_call2(cmp_a, a_139, b_140);
   }
   var
    request_aborted_error =
      caml_call1(Core_Error[14], cst_request_was_aborted);
   function collapse_to_or_error(tag_s){
    function maybe_tag_error(error){
     if(! tag_s) return error;
     var _jp_ = tag_s[1], _jq_ = runtime.caml_obj_tag(_jp_);
     a:
     if(250 === _jq_)
      var tag = _jp_[1];
     else{
      if(246 !== _jq_ && 244 !== _jq_){var tag = _jp_; break a;}
      var tag = caml_call1(CamlinternalLazy[2], _jp_);
     }
     return caml_call2(Core_Error[23], error, tag);
    }
    return function(param){
     if(! param) return [1, maybe_tag_error(request_aborted_error)];
     var match = param[1];
     if(0 === match[0]){var v = match[1]; return [0, v];}
     var e = match[1];
     return [1, maybe_tag_error(e)];};
   }
   function collapse_fun_to_or_error(sexp_of_input, f, a){
    if(sexp_of_input)
     var
      sexp_of_input$0 = sexp_of_input[1],
      tag_s =
        [0,
         [246,
          function(param){
           return [1, [0, _aG_, [0, caml_call1(sexp_of_input$0, a), 0]]];
          }]];
    else
     var tag_s = 0;
    var
     _jl_ = collapse_to_or_error(tag_s),
     _jm_ = [246, function(_jo_){return caml_call1(f, a);}],
     _jn_ = caml_call1(Ui_effect[15], _jm_);
    return caml_call2(Ui_effect[8], _jn_, _jl_);
   }
   var
    Poll_result =
      [0,
       t_of_sexp,
       sexp_of_t,
       equal,
       request_aborted_error,
       collapse_to_or_error,
       collapse_fun_to_or_error];
   function poll(effect){
    var sexp_of_t = Core[149], sexp_of_t$0 = Core[149];
    function _iR_(pattern_syntax_141){
     function _i3_(inject){
      function _i7_(model){
       function _i$_(on_activate){
        function _jc_(pattern_syntax_150){
         function _je_(param){
          function _ji_(inject, request){
           function _jj_(callback){
            var _jk_ = caml_call1(inject, [0, callback]);
            return caml_call1(Ui_effect[21][2], _jk_);
           }
           return caml_call2(Ui_effect[22][2], request, _jj_);
          }
          return caml_call3(Let_syntax$0[2][7], _aH_, inject, _ji_);
         }
         function _jf_(param){return 0;}
         var
          _jg_ =
            caml_call3(Let_syntax$0[2][4], _aI_, pattern_syntax_150, _jf_),
          _jh_ = caml_call1(Let_syntax$0[2][3], _jg_);
         return caml_call3(Let_syntax$0[2][1], _aJ_, _jh_, _je_);
        }
        var _jd_ = caml_call4(Edge$0[2], [0, on_activate], 0, 0, 0);
        return caml_call3(Let_syntax$0[2][1], _aK_, _jd_, _jc_);
       }
       function _ja_(inject){return caml_call1(inject, 0);}
       var _jb_ = caml_call3(Let_syntax$0[2][7], _aL_, inject, _ja_);
       return caml_call3(Let_syntax$0[2][1], _aM_, _jb_, _i$_);
      }
      function _i8_(param){
       var pattern_syntax_142 = param[1];
       return pattern_syntax_142;
      }
      var
       _i9_ = caml_call3(Let_syntax$0[2][4], _aN_, pattern_syntax_141, _i8_),
       _i__ = caml_call1(Let_syntax$0[2][3], _i9_);
      return caml_call3(Let_syntax$0[2][1], _aO_, _i__, _i7_);
     }
     function _i4_(param){
      var pattern_syntax_143 = param[2];
      return pattern_syntax_143;
     }
     var
      _i5_ = caml_call3(Let_syntax$0[2][4], _aP_, pattern_syntax_141, _i4_),
      _i6_ = caml_call1(Let_syntax$0[2][3], _i5_);
     return caml_call3(Let_syntax$0[2][1], _aQ_, _i6_, _i3_);
    }
    function _iS_(context, effect, param, action){
     var
      next_up = param[2],
      running = param[1],
      match = caml_call1(Bonsai_Apply_action_context[4][1], context),
      schedule_event = match[2],
      inject = match[1];
     function run_effect(effect, callback){
      function _iZ_(response){
       function _i1_(param){return caml_call1(inject, 1);}
       var _i2_ = caml_call2(Ui_effect[22][1][3], callback, [0, response]);
       return caml_call2(Ui_effect[13][4][2], _i2_, _i1_);
      }
      var
       _i0_ = caml_call1(effect, caml_call1(Ui_effect[22][1][2], callback));
      return caml_call1
              (schedule_event, caml_call2(Ui_effect[13][4][2], _i0_, _iZ_));
     }
     function abort(callback){
      return caml_call1
              (schedule_event, caml_call2(Ui_effect[22][1][3], callback, 0));
     }
     function soft_assert_running(here, running){
      var _iW_ = 1 - running;
      if(! _iW_) return _iW_;
      var
       _iX_ =
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_BUG_finished_effect_even_t),
          0],
       _iY_ =
         [1,
          [0,
           [1,
            [0, _aR_, [0, caml_call1(Core_Source_code_position[1], here), 0]]],
           _iX_]];
      return caml_call2(Core[257], 0, _iY_);
     }
     if(typeof action === "number"){
      if(! action){
       if(! effect) return [0, running, next_up];
       if(running) return [0, 1, next_up];
       if(! next_up) return _aY_;
       var effect$1 = effect[1], next_up$1 = next_up[1];
       run_effect(effect$1, next_up$1);
       return _aX_;
      }
      if(! next_up){soft_assert_running(_aV_, running); return _aW_;}
      var next_up$0 = next_up[1];
      if(effect){
       var effect$0 = effect[1];
       soft_assert_running(_aS_, running);
       run_effect(effect$0, next_up$0);
       return _aT_;
      }
      soft_assert_running(_aU_, running);
      return [0, 0, [0, next_up$0]];
     }
     var callback = action[1];
     if(running){
      if(! next_up) return [0, 1, [0, callback]];
      var next_up$2 = next_up[1];
      abort(next_up$2);
      return [0, 1, [0, callback]];
     }
     if(! next_up){
      if(! effect) return [0, 0, [0, callback]];
      var effect$3 = effect[1];
      run_effect(effect$3, callback);
      return _aZ_;
     }
     var next_up$3 = next_up[1];
     if(effect){
      var effect$2 = effect[1];
      run_effect(effect$2, next_up$3);
      return [0, 1, [0, callback]];
     }
     abort(next_up$3);
     return [0, 0, [0, callback]];
    }
    var
     _iT_ = [0, function(a_144, b_145){return a_144 === b_145 ? 1 : 0;}],
     _iU_ = [0, sexp_of_t$0],
     _iV_ =
       caml_call7
        (state_machine1,
         [0, sexp_of_t],
         [0, function(param, model){return model;}],
         _iU_,
         _iT_,
         _a0_,
         _iS_,
         effect);
    return caml_call3(Let_syntax$0[2][1], _a1_, _iV_, _iR_);
   }
   var
    Effect_throttling = [0, Poll_result, poll],
    _a2_ = Bonsai_Proc_min[4],
    value_cutoff = _a2_[1],
    compute_with_clock = _a2_[2],
    of_module = _a2_[3],
    compute = Bonsai_Incr0[1],
    with_clock = Bonsai_Incr0[2],
    to_value = Bonsai_Incr0[3],
    Incr =
      [0,
       value_cutoff,
       compute_with_clock,
       of_module,
       compute,
       with_clock,
       to_value],
    Map0 =
      caml_call1
       (Bonsai_Map0[1],
        [0, [0, Bonsai_Value[4]], Bonsai_Computation, [0, Incr[4]]]);
   function freeze(sexp_of_model, equal, value){
    function _il_(pattern_syntax_152){
     function _in_(state){
      function _ir_(set_state){
       function _iv_(pattern_syntax_155){
        function _ix_(param){
         if(0 === param){
          var
           _iB_ = function(state){return caml_call1(Let_syntax$0[1], state);},
           _iC_ =
             function(param){
              if(! param)
               throw caml_maybe_attach_backtrace([0, Assert_failure, _a3_], 1);
              var pattern_syntax_156 = param[1];
              return pattern_syntax_156;
             },
           _iD_ =
             caml_call3(Let_syntax$0[2][4], _a4_, pattern_syntax_155, _iC_),
           _iE_ = caml_call1(Let_syntax$0[2][3], _iD_);
          return caml_call3(Let_syntax$0[2][1], _a5_, _iE_, _iB_);
         }
         if(1 !== param)
          throw caml_maybe_attach_backtrace([0, Assert_failure, _a9_], 1);
         function _iF_(pattern_syntax_157){
          function _iN_(param){return caml_call1(Let_syntax$0[1], value);}
          function _iO_(param){return 0;}
          var
           _iP_ =
             caml_call3(Let_syntax$0[2][4], _a6_, pattern_syntax_157, _iO_),
           _iQ_ = caml_call1(Let_syntax$0[2][3], _iP_);
          return caml_call3(Let_syntax$0[2][1], _a7_, _iQ_, _iN_);
         }
         var _iG_ = 0, _iH_ = 0, _iI_ = 0;
         function _iJ_(param){
          var value = param[2], set_state = param[1];
          return caml_call1(set_state, [0, value]);
         }
         var
          _iK_ = caml_call2(Let_syntax$0[2][5], set_state, value),
          _iL_ = [0, caml_call3(Let_syntax$0[2][4], 0, _iK_, _iJ_)],
          _iM_ = caml_call4(Edge$0[2], _iL_, _iI_, _iH_, _iG_);
         return caml_call3(Let_syntax$0[2][1], _a8_, _iM_, _iF_);
        }
        var _iy_ = 2;
        function _iz_(param){return param ? 0 : 1;}
        var
         _iA_ = caml_call3(Let_syntax$0[2][4], 0, pattern_syntax_155, _iz_);
        return caml_call4(Let_syntax$0[2][2], _a__, _iA_, _iy_, _ix_);
       }
       var _iw_ = caml_call1(Let_syntax$0[2][3], state);
       return caml_call3(Let_syntax$0[2][1], _a$_, _iw_, _iv_);
      }
      function _is_(param){
       var pattern_syntax_153 = param[2];
       return pattern_syntax_153;
      }
      var
       _it_ = caml_call3(Let_syntax$0[2][4], _ba_, pattern_syntax_152, _is_),
       _iu_ = caml_call1(Let_syntax$0[2][3], _it_);
      return caml_call3(Let_syntax$0[2][1], _bb_, _iu_, _ir_);
     }
     function _io_(param){
      var pattern_syntax_154 = param[1];
      return pattern_syntax_154;
     }
     var
      _ip_ = caml_call3(Let_syntax$0[2][4], _bc_, pattern_syntax_152, _io_),
      _iq_ = caml_call1(Let_syntax$0[2][3], _ip_);
     return caml_call3(Let_syntax$0[2][1], _bd_, _iq_, _in_);
    }
    var _im_ = state_opt(0, 0, sexp_of_model, equal, 0);
    return caml_call3(Let_syntax$0[2][1], _be_, _im_, _il_);
   }
   function thunk(f){
    function _id_(out){
     var _ii_ = [0, function(_ik_, _ij_){return _ik_ === _ij_ ? 1 : 0;}];
     return freeze([0, Core[149]], _ii_, out);
    }
    var
     _ie_ = caml_call1(Bonsai_Var[1], 0),
     _if_ = caml_call1(Bonsai_Var[5], _ie_),
     _ig_ = caml_call2(Bonsai_Value[3], _if_, f),
     _ih_ = caml_call1(Let_syntax$0[1], _ig_);
    return caml_call3(Let_syntax$0[2][1], _bf_, _ih_, _id_);
   }
   function most_recent_some(sexp_of_model, equal, input, f){
    function _hH_(pattern_syntax_162){
     function _hJ_(set_most_recent_valid_value){
      function _hN_(most_recent_valid_value){
       function _hR_(input){
        function _hT_(input){
         function _hW_(pattern_syntax_167){
          function _hY_(param){
           if(0 === param)
            return caml_call1(Let_syntax$0[1], most_recent_valid_value);
           if(1 !== param)
            throw caml_maybe_attach_backtrace([0, Assert_failure, _bo_], 1);
           function _h2_(inner){
            function _h6_(callback){
             function _h9_(pattern_syntax_171){
              function _h$_(param){return caml_call1(Let_syntax$0[1], input);}
              function _ia_(param){return 0;}
              var
               _ib_ =
                 caml_call3
                  (Let_syntax$0[2][4], _bg_, pattern_syntax_171, _ia_),
               _ic_ = caml_call1(Let_syntax$0[2][3], _ib_);
              return caml_call3(Let_syntax$0[2][1], _bh_, _ic_, _h$_);
             }
             var
              _h__ =
                caml_call4(Edge$0[7], sexp_of_model, equal, inner, callback);
             return caml_call3(Let_syntax$0[2][1], _bi_, _h__, _h9_);
            }
            function _h7_(set_most_recent_valid_value, x){
             return caml_call1(set_most_recent_valid_value, [0, x]);
            }
            var
             _h8_ =
               caml_call3
                (Let_syntax$0[2][7], _bj_, set_most_recent_valid_value, _h7_);
            return caml_call3(Let_syntax$0[2][1], _bk_, _h8_, _h6_);
           }
           function _h3_(param){
            if(! param)
             throw caml_maybe_attach_backtrace([0, Assert_failure, _bl_], 1);
            var pattern_syntax_168 = param[1];
            return pattern_syntax_168;
           }
           var
            _h4_ =
              caml_call3(Let_syntax$0[2][4], _bm_, pattern_syntax_167, _h3_),
            _h5_ = caml_call1(Let_syntax$0[2][3], _h4_);
           return caml_call3(Let_syntax$0[2][1], _bn_, _h5_, _h2_);
          }
          var _hZ_ = 2;
          function _h0_(param){return param ? 1 : 0;}
          var
           _h1_ = caml_call3(Let_syntax$0[2][4], 0, pattern_syntax_167, _h0_);
          return caml_call4(Let_syntax$0[2][2], _bp_, _h1_, _hZ_, _hY_);
         }
         var _hX_ = caml_call1(Let_syntax$0[2][3], input);
         return caml_call3(Let_syntax$0[2][1], _bq_, _hX_, _hW_);
        }
        var
         _hU_ = caml_call1(Core_Option[18], equal),
         _hV_ = caml_call2(Incr[1], input, _hU_);
        return caml_call3(Let_syntax$0[2][1], _br_, _hV_, _hT_);
       }
       var _hS_ = pure(f, input);
       return caml_call3(Let_syntax$0[2][1], _bs_, _hS_, _hR_);
      }
      function _hO_(param){
       var pattern_syntax_163 = param[1];
       return pattern_syntax_163;
      }
      var
       _hP_ = caml_call3(Let_syntax$0[2][4], _bt_, pattern_syntax_162, _hO_),
       _hQ_ = caml_call1(Let_syntax$0[2][3], _hP_);
      return caml_call3(Let_syntax$0[2][1], _bu_, _hQ_, _hN_);
     }
     function _hK_(param){
      var pattern_syntax_164 = param[2];
      return pattern_syntax_164;
     }
     var
      _hL_ = caml_call3(Let_syntax$0[2][4], _bv_, pattern_syntax_162, _hK_),
      _hM_ = caml_call1(Let_syntax$0[2][3], _hL_);
     return caml_call3(Let_syntax$0[2][1], _bw_, _hM_, _hJ_);
    }
    var _hI_ = state_opt(0, 0, sexp_of_model, [0, equal], 0);
    return caml_call3(Let_syntax$0[2][1], _bx_, _hI_, _hH_);
   }
   function most_recent_value_satisfying
   (sexp_of_model, equal, input, condition){
    return most_recent_some
            (sexp_of_model,
             equal,
             input,
             function(a){return caml_call1(condition, a) ? [0, a] : 0;});
   }
   function previous_value(sexp_of_model, equal, input){
    function _ho_(pattern_syntax_172){
     function _hq_(set_prev){
      function _hu_(prev){
       function _hy_(callback){
        function _hB_(pattern_syntax_177){
         function _hD_(param){return caml_call1(Let_syntax$0[1], prev);}
         function _hE_(param){return 0;}
         var
          _hF_ =
            caml_call3(Let_syntax$0[2][4], _by_, pattern_syntax_177, _hE_),
          _hG_ = caml_call1(Let_syntax$0[2][3], _hF_);
         return caml_call3(Let_syntax$0[2][1], _bz_, _hG_, _hD_);
        }
        var
         _hC_ = caml_call4(Edge$0[7], sexp_of_model, equal, input, callback);
        return caml_call3(Let_syntax$0[2][1], _bA_, _hC_, _hB_);
       }
       function _hz_(set_prev, input){
        return caml_call1(set_prev, [0, input]);
       }
       var _hA_ = caml_call3(Let_syntax$0[2][7], _bB_, set_prev, _hz_);
       return caml_call3(Let_syntax$0[2][1], _bC_, _hA_, _hy_);
      }
      function _hv_(param){
       var pattern_syntax_173 = param[1];
       return pattern_syntax_173;
      }
      var
       _hw_ = caml_call3(Let_syntax$0[2][4], _bD_, pattern_syntax_172, _hv_),
       _hx_ = caml_call1(Let_syntax$0[2][3], _hw_);
      return caml_call3(Let_syntax$0[2][1], _bE_, _hx_, _hu_);
     }
     function _hr_(param){
      var pattern_syntax_174 = param[2];
      return pattern_syntax_174;
     }
     var
      _hs_ = caml_call3(Let_syntax$0[2][4], _bF_, pattern_syntax_172, _hr_),
      _ht_ = caml_call1(Let_syntax$0[2][3], _hs_);
     return caml_call3(Let_syntax$0[2][1], _bG_, _ht_, _hq_);
    }
    var _hp_ = state_opt(0, 0, sexp_of_model, [0, equal], 0);
    return caml_call3(Let_syntax$0[2][1], _bH_, _hp_, _ho_);
   }
   function assoc_set(m, v, f){
    function _hm_(as_map){
     return caml_call3
             (assoc, m, as_map, function(k, param){return caml_call1(f, k);});
    }
    var _hn_ = caml_call1(Map0[3], v);
    return caml_call3(Let_syntax$0[2][1], _bI_, _hn_, _hm_);
   }
   function assoc_list(m, list, get_key, f){
    function _gS_(alist){
     function _gW_(input_map){
      function _gZ_(pattern_syntax_183){
       function _g1_(param){
        if(0 === param){
         var
          _g5_ =
            function(input_map){
             function _hc_(output_map){
              function _he_(param){
               var output_map = param[2], alist = param[1];
               function _hg_(param){
                var
                 k = param[1],
                 match = caml_call2(Core_Map[44], output_map, k);
                if(match){var r = match[1]; return r;}
                var
                 _hh_ =
                   [0, caml_call1(Sexplib0_Sexp_conv[7], cst_not_found), 0],
                 _hi_ = [0, [1, [0, _bJ_, [0, caml_call1(m[1], k), 0]]], _hh_],
                 _hj_ =
                   [0,
                    caml_call1(Sexplib0_Sexp_conv[7], cst_Incremental_glitch),
                    _hi_],
                 _hk_ =
                   [0,
                    caml_call1(Sexplib0_Sexp_conv[7], cst_src_proc_ml_821_29),
                    _hj_],
                 _hl_ =
                   [1, [0, caml_call1(Sexplib0_Sexp_conv[7], cst_BUG), _hk_]];
                return caml_call1(Core[261], _hl_);
               }
               return [0, 17724, caml_call2(Core_List[51], alist, _hg_)];
              }
              var _hf_ = caml_call2(Let_syntax$0[2][5], alist, output_map);
              return caml_call3(Let_syntax$0[2][7], _bK_, _hf_, _he_);
             }
             var
              _hd_ =
                caml_call3
                 (assoc,
                  m,
                  input_map,
                  function(k, v){return caml_call2(f, k, v);});
             return caml_call3(Let_syntax$0[2][1], _bL_, _hd_, _hc_);
            },
          _g6_ =
            function(param){
             if(typeof param !== "number" && 17724 === param[1]){
              var pattern_syntax_184 = param[2];
              return pattern_syntax_184;
             }
             throw caml_maybe_attach_backtrace([0, Assert_failure, _bM_], 1);
            },
          _g7_ =
            caml_call3(Let_syntax$0[2][4], _bN_, pattern_syntax_183, _g6_),
          _g8_ = caml_call1(Let_syntax$0[2][3], _g7_);
         return caml_call3(Let_syntax$0[2][1], _bO_, _g8_, _g5_);
        }
        if(1 !== param)
         throw caml_maybe_attach_backtrace([0, Assert_failure, _bT_], 1);
        function _g9_(key){
         function _hb_(key){return [0, -1048878709, key];}
         return caml_call3(Let_syntax$0[2][7], _bP_, key, _hb_);
        }
        function _g__(param){
         if(typeof param !== "number" && -1048878709 === param[1]){
          var pattern_syntax_185 = param[2];
          return pattern_syntax_185;
         }
         throw caml_maybe_attach_backtrace([0, Assert_failure, _bQ_], 1);
        }
        var
         _g$_ = caml_call3(Let_syntax$0[2][4], _bR_, pattern_syntax_183, _g__),
         _ha_ = caml_call1(Let_syntax$0[2][3], _g$_);
        return caml_call3(Let_syntax$0[2][1], _bS_, _ha_, _g9_);
       }
       var _g2_ = 2;
       function _g3_(param){return 17724 <= param[1] ? 0 : 1;}
       var _g4_ = caml_call3(Let_syntax$0[2][4], 0, pattern_syntax_183, _g3_);
       return caml_call4(Let_syntax$0[2][2], _bU_, _g4_, _g2_, _g1_);
      }
      var _g0_ = caml_call1(Let_syntax$0[2][3], input_map);
      return caml_call3(Let_syntax$0[2][1], _bV_, _g0_, _gZ_);
     }
     function _gX_(alist){return caml_call2(Core_Map[6], [0, m[2]], alist);}
     var _gY_ = caml_call3(Let_syntax$0[2][7], _bW_, alist, _gX_);
     return caml_call3(Let_syntax$0[2][1], _bX_, _gY_, _gW_);
    }
    function _gT_(list){
     function _gV_(x){return [0, caml_call1(get_key, x), x];}
     return caml_call2(Core_List[51], list, _gV_);
    }
    var _gU_ = caml_call3(Let_syntax$0[2][7], _bY_, list, _gT_);
    return caml_call3(Let_syntax$0[2][1], _bZ_, _gU_, _gS_);
   }
   function fallback(param){
    if(0 === param[0]){var fallback$0 = param[2]; return fallback$0;}
    var get = param[2], base = param[1];
    return caml_call1(get, fallback(base));
   }
   function fetch(t, default$0, for_some){
    var t$0 = t, for_some$0 = for_some;
    for(;;){
     if(0 === t$0[0]){
      var id = t$0[1];
      return caml_call3(Dynamic_scope[1], id, default$0, for_some$0);
     }
     var
      get = t$0[2],
      base = t$0[1],
      for_some$2 =
        function(for_some, get){
         function for_some$0(x){
          return caml_call1(for_some, caml_call1(get, x));
         }
         return for_some$0;
        },
      for_some$1 = for_some$2(for_some$0, get),
      t$0 = base,
      for_some$0 = for_some$1;
    }
   }
   function lookup(var$0){
    function _gQ_(_gR_){return _gR_;}
    return fetch(var$0, fallback(var$0), _gQ_);
   }
   function store(var$0, value, inner){
    if(0 === var$0[0]){
     var id = var$0[1];
     return caml_call3(Dynamic_scope[2], id, value, inner);
    }
    var set = var$0[3], base = var$0[1];
    function _gK_(current){
     function _gM_(new$0){return store(base, new$0, inner);}
     function _gN_(param){
      var value = param[2], current = param[1];
      return caml_call2(set, current, value);
     }
     var
      _gO_ = caml_call2(Let_syntax$0[2][5], current, value),
      _gP_ = caml_call3(Let_syntax$0[2][7], _b0_, _gO_, _gN_);
     return caml_call3(Let_syntax$0[2][1], _b1_, _gP_, _gM_);
    }
    var _gL_ = lookup(base);
    return caml_call3(Let_syntax$0[2][1], _b2_, _gL_, _gK_);
   }
   function create(opt, name, fallback, param){
    if(opt) var sth = opt[1], sexp_of = sth; else var sexp_of = Core[149];
    return [0, caml_call2(Core_Type_equal[8][3], name, sexp_of), fallback];
   }
   function derived(opt, base, get, set){
    if(opt) var sth = opt[1], sexp_of = sth; else var sexp_of = Core[149];
    return [1, base, get, set, sexp_of];
   }
   function modify(var$0, change, f){
    function _gI_(current){
     function revert(c){return store(var$0, current, c);}
     var value = caml_call1(change, current);
     return store(var$0, value, caml_call1(f, [0, revert]));
    }
    var _gJ_ = lookup(var$0);
    return caml_call3(Let_syntax$0[2][1], _b3_, _gJ_, _gI_);
   }
   function set(t, v, inside){return store(t, v, inside);}
   function set$0(var$0, value, f){
    return modify(var$0, function(param){return value;}, f);
   }
   var
    Dynamic_scope$0 =
      [0, fallback, fetch, lookup, store, create, derived, modify, set, set$0];
   function approx_now(tick_every){
    function _gF_(clock){
     function _gG_(param){return caml_call1(Ui_time_source[5], clock);}
     var _gH_ = caml_call2(Ui_time_source[7], clock, tick_every);
     return caml_call2(Ui_incr[78][4][6], _gH_, _gG_);
    }
    return caml_call1(Incr[5], _gF_);
   }
   var now = caml_call1(Incr[5], Ui_time_source[6]);
   function t_of_sexp$0(sexp_201){
    a:
    {
     if(0 === sexp_201[0]){
      var _gB_ = sexp_201[1];
      b:
      if(caml_string_notequal(_gB_, cst_After)){
       if(caml_string_notequal(_gB_, cst_Before)){
        if(! caml_string_notequal(_gB_, cst_after)) break b;
        if(caml_string_notequal(_gB_, cst_before)) break a;
       }
       return 0;
      }
      return 1;
     }
     var _gC_ = sexp_201[1];
     if(! _gC_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_200, sexp_201);
     var _gD_ = _gC_[1];
     if(0 !== _gD_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_200, sexp_201);
     var _gE_ = _gD_[1];
     b:
     if(caml_string_notequal(_gE_, cst_After)){
      if(caml_string_notequal(_gE_, cst_Before)){
       if(! caml_string_notequal(_gE_, cst_after)) break b;
       if(caml_string_notequal(_gE_, cst_before)) break a;
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_200, sexp_201);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[7], error_source_200, sexp_201);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_200, sexp_201);
   }
   function sexp_of_t$0(param){return param ? _b4_ : _b5_;}
   function equal$0(_gA_, _gz_){return _gA_ === _gz_ ? 1 : 0;}
   var Before_or_after = [0, t_of_sexp$0, sexp_of_t$0, equal$0];
   function at(time){
    function _gw_(clock){
     var func = Ui_incr[28], _gx_ = caml_call1(Ui_time_source[8], clock);
     return function(_gy_){return caml_call2(func, _gy_, _gx_);};
    }
    return caml_call2(Incr[2], time, _gw_);
   }
   function _b6_(clock){
    var _gt_ = 0;
    function _gu_(param){return caml_call1(Ui_time_source[5], clock);}
    var _gv_ = caml_call2(Ui_effect[17], _gu_, _gt_);
    return caml_call1(Ui_incr[11], _gv_);
   }
   var get_current_time = caml_call1(Incr[5], _b6_);
   function _b7_(clock){
    var _gs_ = caml_call1(Ui_time_source[10], clock);
    return caml_call1(Ui_incr[11], _gs_);
   }
   var sleep = caml_call1(Incr[5], _b7_);
   function _b8_(clock){
    var _gr_ = caml_call1(Ui_time_source[9], clock);
    return caml_call1(Ui_incr[11], _gr_);
   }
   var
    until = caml_call1(Incr[5], _b8_),
    Trigger_id = caml_call1(Core_Unique_id[1], 0);
   function t_of_sexp$1(sexp_208){
    a:
    {
     if(0 === sexp_208[0]){
      var _gn_ = sexp_208[1];
      b:
      if(caml_string_notequal(_gn_, cst_Waiting_for)){
       if(caml_string_notequal(_gn_, cst_Waiting_for_effect_to_fini)){
        if(! caml_string_notequal(_gn_, cst_waiting_for)) break b;
        if(caml_string_notequal(_gn_, cst_waiting_for_effect_to_fini))
         break a;
       }
       return 0;
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[9], error_source_206, sexp_208);
     }
     var _go_ = sexp_208[1];
     if(! _go_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_206, sexp_208);
     var _gp_ = _go_[1];
     if(0 !== _gp_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_206, sexp_208);
     var tag_209 = _gp_[1];
     b:
     if(caml_string_notequal(tag_209, cst_Waiting_for)){
      if(caml_string_notequal(tag_209, cst_Waiting_for_effect_to_fini)){
       if(! caml_string_notequal(tag_209, cst_waiting_for)) break b;
       if(caml_string_notequal(tag_209, cst_waiting_for_effect_to_fini))
        break a;
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_206, sexp_208);
     }
     var sexp_args_210 = _go_[2];
     if(sexp_args_210){
      var _gq_ = sexp_args_210[2];
      if(_gq_ && ! _gq_[2]){
       var
        arg1_212 = _gq_[1],
        arg0_211 = sexp_args_210[1],
        res0_213 = caml_call2(Core[516], Trigger_id[9], arg0_211),
        res1_214 = caml_call1(Core_Time_ns[25][11], arg1_212);
       return [0, res0_213, res1_214];
      }
     }
     return caml_call3
             (Sexplib0_Sexp_conv_error[8],
              error_source_206,
              tag_209,
              sexp_208);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_206, sexp_208);
   }
   function sexp_of_t$1(param){
    if(! param) return _b__;
    var
     arg1_216 = param[2],
     arg0_215 = param[1],
     res0_217 = caml_call2(Core[515], Trigger_id[10], arg0_215),
     res1_218 = caml_call1(Core_Time_ns[25][12], arg1_216);
    return [1, [0, _b9_, [0, res0_217, [0, res1_218, 0]]]];
   }
   function equal$1(a_219, b_220){
    if(a_219 === b_220) return 1;
    if(! a_219) return b_220 ? 0 : 1;
    if(! b_220) return 0;
    var
     b_224 = b_220[2],
     b_222 = b_220[1],
     a_223 = a_219[2],
     a_221 = a_219[1];
    function _gl_(a_225, b_226){
     return caml_call2(Trigger_id[19], a_225, b_226);
    }
    var _gm_ = caml_call3(Core[511], _gl_, a_221, b_222);
    return _gm_ ? caml_call2(Core_Time_ns[25][20], a_223, b_224) : _gm_;
   }
   var Every_model = [0, t_of_sexp$1, sexp_of_t$1, equal$1];
   function t_of_sexp$2(sexp_231){
    a:
    {
     if(0 === sexp_231[0]){
      var _gi_ = sexp_231[1];
      b:
      if(caml_string_notequal(_gi_, cst_Schedule_effect)){
       if(caml_string_notequal(_gi_, cst_Wait_for)){
        if(! caml_string_notequal(_gi_, cst_schedule_effect)) break b;
        if(caml_string_notequal(_gi_, cst_wait_for)) break a;
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[9], error_source_229, sexp_231);
      }
      return 0;
     }
     var _gj_ = sexp_231[1];
     if(! _gj_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_229, sexp_231);
     var _gk_ = _gj_[1];
     if(0 !== _gk_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_229, sexp_231);
     var tag_232 = _gk_[1];
     b:
     if(caml_string_notequal(tag_232, cst_Schedule_effect)){
      if(caml_string_notequal(tag_232, cst_Wait_for)){
       if(! caml_string_notequal(tag_232, cst_schedule_effect)) break b;
       if(caml_string_notequal(tag_232, cst_wait_for)) break a;
      }
      var sexp_args_233 = _gj_[2];
      if(sexp_args_233 && ! sexp_args_233[2]){
       var
        arg0_234 = sexp_args_233[1],
        res0_235 = caml_call1(Core_Time_ns[25][11], arg0_234);
       return [0, res0_235];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[8],
               error_source_229,
               tag_232,
               sexp_231);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[7], error_source_229, sexp_231);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_229, sexp_231);
   }
   function sexp_of_t$2(param){
    if(! param) return _ca_;
    var
     arg0_236 = param[1],
     res0_237 = caml_call1(Core_Time_ns[25][12], arg0_236);
    return [1, [0, _b$_, [0, res0_237, 0]]];
   }
   function equal$2(a_238, b_239){
    if(a_238 === b_239) return 1;
    if(! a_238) return b_239 ? 0 : 1;
    if(! b_239) return 0;
    var b_241 = b_239[1], a_240 = a_238[1];
    return caml_call2(Core_Time_ns[25][20], a_240, b_241);
   }
   var Every_action = [0, t_of_sexp$2, sexp_of_t$2, equal$2];
   function generic_every(create_effect, opt, span, callback){
    if(opt)
     var sth = opt[1], trigger_on_activate = sth;
    else
     var trigger_on_activate = 1;
    function _fp_(base_time){
     function _ft_(initial_model){
      function _fw_(get_current_time){
       function _fx_(race_input){
        function apply_action(inject, schedule_event, input, old_model, param){
         if(param){
          var next_time = param[1];
          return [0, [0, caml_call1(Trigger_id[45], 0)], next_time];
         }
         if(input)
          var
           match = input[1],
           callback = match[3],
           get_current_time = match[2],
           base_time = match[1],
           _gf_ =
             function(next_time){return caml_call1(inject, [0, next_time]);},
           _gg_ =
             caml_call4
              (create_effect, span, base_time, get_current_time, callback),
           _gh_ = caml_call2(Ui_effect[13][4][2], _gg_, _gf_);
         else
          var _gh_ = Ui_effect[1];
         caml_call1(schedule_event, _gh_);
         return 0;
        }
        function _fC_(pattern_syntax_255){
         function _fG_(inject){
          function _fK_(every_model){
           function _fO_(before_or_after){
            function _f8_(callback){
             function _f$_(a_275, b_276){
              function _gc_(a_277, b_278){
               var
                t_280 = a_277[2],
                t_279 = a_277[1],
                t_282 = b_278[2],
                t_281 = b_278[1];
               function _gd_(a_283, b_284){
                return caml_call2(Trigger_id[19], a_283, b_284);
               }
               var _ge_ = caml_call3(Core[511], _gd_, t_279, t_281);
               return _ge_
                       ? caml_call2(Before_or_after[3], t_280, t_282)
                       : _ge_;
              }
              return caml_call3(Core[511], _gc_, a_275, b_276);
             }
             var
              _ga_ =
                [0,
                 function(x_274){
                  function _gb_(param){
                   var
                    arg1_271 = param[2],
                    arg0_270 = param[1],
                    res0_272 = caml_call2(Core[515], Trigger_id[10], arg0_270),
                    res1_273 = caml_call1(Before_or_after[2], arg1_271);
                   return [1, [0, res0_272, [0, res1_273, 0]]];
                  }
                  return caml_call2(Core[515], _gb_, x_274);
                 }];
             return caml_call4
                     (Edge$0[7], _ga_, _f$_, before_or_after, callback);
            }
            function _f9_(inject, param){
             if(param && param[1][2]) return caml_call1(inject, 0);
             return Ui_effect[1];
            }
            var _f__ = caml_call3(Let_syntax$0[2][7], _cb_, inject, _f9_);
            return caml_call3(Let_syntax$0[2][1], _cc_, _f__, _f8_);
           }
           function _fP_(pattern_syntax_261){
            function _fS_(param){
             if(0 === param) return const$0(0);
             if(1 !== param)
              throw caml_maybe_attach_backtrace([0, Assert_failure, _cl_], 1);
             function _fW_(trigger_id){
              function _f0_(time){
               function _f4_(before_or_after){
                function _f6_(param){
                 var before_or_after = param[2], trigger_id = param[1];
                 return [0, [0, trigger_id, before_or_after]];
                }
                var
                 _f7_ =
                   caml_call2(Let_syntax$0[2][5], trigger_id, before_or_after);
                return caml_call3(Let_syntax$0[2][7], _cd_, _f7_, _f6_);
               }
               var _f5_ = at(time);
               return caml_call3(Let_syntax$0[2][1], _ce_, _f5_, _f4_);
              }
              function _f1_(param){
               if(! param)
                throw caml_maybe_attach_backtrace
                       ([0, Assert_failure, _cf_], 1);
               var pattern_syntax_262 = param[2];
               return pattern_syntax_262;
              }
              var
               _f2_ =
                 caml_call3
                  (Let_syntax$0[2][4], _cg_, pattern_syntax_261, _f1_),
               _f3_ = caml_call1(Let_syntax$0[2][3], _f2_);
              return caml_call3(Let_syntax$0[2][1], _ch_, _f3_, _f0_);
             }
             function _fX_(param){
              if(! param)
               throw caml_maybe_attach_backtrace([0, Assert_failure, _ci_], 1);
              var pattern_syntax_263 = param[1];
              return pattern_syntax_263;
             }
             var
              _fY_ =
                caml_call3(Let_syntax$0[2][4], _cj_, pattern_syntax_261, _fX_),
              _fZ_ = caml_call1(Let_syntax$0[2][3], _fY_);
             return caml_call3(Let_syntax$0[2][1], _ck_, _fZ_, _fW_);
            }
            var _fT_ = 2;
            function _fU_(param){return param ? 1 : 0;}
            var
             _fV_ =
               caml_call3(Let_syntax$0[2][4], 0, pattern_syntax_261, _fU_);
            return caml_call4(Let_syntax$0[2][2], _cm_, _fV_, _fT_, _fS_);
           }
           var
            _fQ_ = caml_call1(Let_syntax$0[2][3], every_model),
            _fR_ = caml_call3(Let_syntax$0[2][1], _cn_, _fQ_, _fP_);
           return caml_call3(Let_syntax$0[2][1], _co_, _fR_, _fO_);
          }
          function _fL_(param){
           var pattern_syntax_256 = param[1];
           return pattern_syntax_256;
          }
          var
           _fM_ =
             caml_call3(Let_syntax$0[2][4], _cp_, pattern_syntax_255, _fL_),
           _fN_ = caml_call1(Let_syntax$0[2][3], _fM_);
          return caml_call3(Let_syntax$0[2][1], _cq_, _fN_, _fK_);
         }
         function _fH_(param){
          var pattern_syntax_257 = param[2];
          return pattern_syntax_257;
         }
         var
          _fI_ =
            caml_call3(Let_syntax$0[2][4], _cr_, pattern_syntax_255, _fH_),
          _fJ_ = caml_call1(Let_syntax$0[2][3], _fI_);
         return caml_call3(Let_syntax$0[2][1], _cs_, _fJ_, _fG_);
        }
        var _fD_ = [0, 657750365, initial_model];
        function _fE_(a_258, b_259){
         return caml_call2(Every_model[3], a_258, b_259);
        }
        var
         _fF_ =
           race_dynamic_model
            ([0, Every_action[2]],
             [0, Every_model[2]],
             _fE_,
             _fD_,
             apply_action,
             race_input);
        return caml_call3(Let_syntax$0[2][1], _ct_, _fF_, _fC_);
       }
       function _fy_(param){
        var
         match = param[2],
         callback = match[2],
         get_current_time = match[1],
         base_time = param[1];
        return [0, base_time, get_current_time, callback];
       }
       var
        _fz_ = caml_call2(Let_syntax$0[2][5], get_current_time, callback),
        _fA_ = caml_call2(Let_syntax$0[2][5], base_time, _fz_),
        _fB_ = caml_call3(Let_syntax$0[2][7], _cu_, _fA_, _fy_);
       return caml_call3(Let_syntax$0[2][1], _cv_, _fB_, _fx_);
      }
      return caml_call3(Let_syntax$0[2][1], _cw_, get_current_time, _fw_);
     }
     function _fu_(base_time){
      var
       start_time =
         trigger_on_activate
          ? base_time
          : caml_call2(Core_Time_ns[67], base_time, span);
      return [0, 0, start_time];
     }
     var _fv_ = caml_call3(Let_syntax$0[2][7], _cx_, base_time, _fu_);
     return caml_call3(Let_syntax$0[2][1], _cy_, _fv_, _ft_);
    }
    function _fq_(now){
     var
      _fs_ =
        [0,
         function(a_244, b_245){
          return caml_call2(Core_Time_ns[25][20], a_244, b_245);
         }];
     return freeze([0, Core_Time_ns[25][12]], _fs_, now);
    }
    var _fr_ = caml_call3(Let_syntax$0[2][1], _cz_, now, _fq_);
    return caml_call3(Let_syntax$0[2][1], _cA_, _fr_, _fp_);
   }
   function ensure_clock_advances(old_time, new_time){
    var _fo_ = caml_call1(Core_Time_ns[71], old_time);
    return caml_call2(Core_Time_ns[24], _fo_, new_time);
   }
   function _cB_(span, param, get_current_time, callback){
    function _fm_(param){
     function _fn_(now){
      return ensure_clock_advances
              (now, caml_call2(Core_Time_ns[67], now, span));
     }
     return caml_call2(Ui_effect[13][4][3], get_current_time, _fn_);
    }
    return caml_call2(Ui_effect[13][4][2], callback, _fm_);
   }
   function every_wait_period_after_previo(_fj_, _fk_, _fl_){return generic_every(_cB_, _fj_, _fk_, _fl_);
   }
   function _cC_(span, param, get_current_time, callback){
    function _fg_(start){
     function _fh_(param){
      function _fi_(now){
       return ensure_clock_advances
               (now, caml_call2(Core_Time_ns[67], start, span));
      }
      return caml_call2(Ui_effect[13][4][3], get_current_time, _fi_);
     }
     return caml_call2(Ui_effect[13][4][2], callback, _fh_);
    }
    return caml_call2(Ui_effect[13][4][2], get_current_time, _fg_);
   }
   function every_wait_period_after_previo$0(_fd_, _fe_, _ff_){return generic_every(_cC_, _fd_, _fe_, _ff_);
   }
   function _cD_(span, base_time, get_current_time, callback){
    function _e$_(param){
     function _fa_(now){
      var
       _fb_ = caml_call1(Core_Time_ns[1][108], Core_Time_ns[1][76]),
       _fc_ = caml_call2(Core_Time_ns[1][24], span, _fb_);
      return ensure_clock_advances
              (now,
               caml_call5(Core_Time_ns[81], _cE_, base_time, now, _fc_, 0));
     }
     return caml_call2(Ui_effect[13][4][3], get_current_time, _fa_);
    }
    return caml_call2(Ui_effect[13][4][2], callback, _e$_);
   }
   function every_multiple_of_period_block(_e8_, _e9_, _e__){return generic_every(_cD_, _e8_, _e9_, _e__);
   }
   function every_multiple_of_period_non_b
   (trigger_on_activate, span, callback){
    function _e7_(callback){return [0, Ui_effect[2], [0, callback, 0]];}
    return every_multiple_of_period_block
            (trigger_on_activate,
             span,
             caml_call3(Let_syntax$0[2][4], 0, callback, _e7_));
   }
   function every(when_to_start_next_effect){
    return 103362454 <= when_to_start_next_effect
            ? 584040262
              <= when_to_start_next_effect
              ? every_wait_period_after_previo$0
              : every_multiple_of_period_block
            : -174594474
              <= when_to_start_next_effect
              ? every_wait_period_after_previo
              : every_multiple_of_period_non_b;
   }
   var
    Clock =
      [0,
       approx_now,
       now,
       Before_or_after,
       at,
       get_current_time,
       sleep,
       until,
       Trigger_id,
       Every_model,
       Every_action,
       generic_every,
       ensure_clock_advances,
       every_wait_period_after_previo,
       every_wait_period_after_previo$0,
       every_multiple_of_period_block,
       every_multiple_of_period_non_b,
       every];
   function sexp_of_t$3(of_query_293, param){
    switch(param[0]){
      case 0:
       var arg0_294 = param[1], res0_295 = caml_call1(of_query_293, arg0_294);
       return [1, [0, _cF_, [0, res0_295, 0]]];
      case 1:
       var arg0_296 = param[1], res0_297 = caml_call1(of_query_293, arg0_296);
       return [1, [0, _cG_, [0, res0_297, 0]]];
      default:
       var
        arg1_299 = param[2],
        arg0_298 = param[1],
        res0_300 = caml_call1(of_query_293, arg0_298),
        res1_301 = caml_call1(of_query_293, arg1_299);
       return [1, [0, _cH_, [0, res0_300, [0, res1_301, 0]]]];
    }
   }
   var Action = [0, sexp_of_t$3];
   function create$0(Query, f){
    function sexp_of_t(x_303){
     return caml_call3(Core_Map[132], [0, Query[1]], Core[389], x_303);
    }
    function sexp_of_t$0(x_308){
     return caml_call2(Action[1], Query[1], x_308);
    }
    function apply_action(param, model, action){
     function add(model, q){
      function _e6_(param){
       if(! param) return 1;
       var c = param[1];
       return c + 1 | 0;
      }
      return caml_call3(Core_Map[43], model, q, _e6_);
     }
     function remove(model, q){
      function _e5_(param){
       if(! param) return 0;
       var c = param[1];
       return 1 === c ? 0 : [0, c - 1 | 0];
      }
      return caml_call3(Core_Map[42], model, q, _e5_);
     }
     switch(action[0]){
       case 0:
        var q = action[1]; return add(model, q);
       case 1:
        var q$0 = action[1]; return remove(model, q$0);
       default:
        var after = action[2], before = action[1];
        return add(remove(model, before), after);
     }
    }
    function _eO_(pattern_syntax_309){
     function _eT_(queries){
      function _eX_(inject){
       function _e1_(responses){
        function _e3_(param){
         var inject = param[2], responses = param[1];
         return [0, responses, inject];
        }
        var _e4_ = caml_call2(Let_syntax$0[2][5], responses, inject);
        return caml_call3(Let_syntax$0[2][7], _cI_, _e4_, _e3_);
       }
       var
        _e2_ =
          caml_call3
           (assoc,
            Query,
            queries,
            function(query, count){return caml_call1(f, query);});
       return caml_call3(Let_syntax$0[2][1], _cJ_, _e2_, _e1_);
      }
      function _eY_(param){
       var pattern_syntax_310 = param[2];
       return pattern_syntax_310;
      }
      var
       _eZ_ = caml_call3(Let_syntax$0[2][4], _cK_, pattern_syntax_309, _eY_),
       _e0_ = caml_call1(Let_syntax$0[2][3], _eZ_);
      return caml_call3(Let_syntax$0[2][1], _cL_, _e0_, _eX_);
     }
     function _eU_(param){
      var pattern_syntax_311 = param[1];
      return pattern_syntax_311;
     }
     var
      _eV_ = caml_call3(Let_syntax$0[2][4], _cM_, pattern_syntax_309, _eU_),
      _eW_ = caml_call1(Let_syntax$0[2][3], _eV_);
     return caml_call3(Let_syntax$0[2][1], _cN_, _eW_, _eT_);
    }
    var
     _eP_ = 0,
     _eQ_ = caml_call1(Core_Map[4], [0, Query[2]]),
     _eR_ =
       caml_call7
        (state_machine0,
         0,
         [0, sexp_of_t],
         [0, sexp_of_t$0],
         [0,
          function(a_312, b_313){
           function _eS_(a_306, b_307){
            return caml_call2(Core[384], a_306, b_307);
           }
           return caml_call4(Core_Map[136], [0], _eS_, a_312, b_313);
          }],
         _eQ_,
         apply_action,
         _eP_);
    return caml_call3(Let_syntax$0[2][1], _cO_, _eR_, _eO_);
   }
   function lookup$0(sexp_of_model, equal, t, query){
    function _ej_(pattern_syntax_318){
     function _el_(inject){
      function _ep_(pattern_syntax_320){
       function _ez_(param){
        function _eD_(pattern_syntax_327){
         function _eI_(param){
          function _eM_(param){
           var query = param[2], t = param[1], responses = t[1];
           return caml_call2(Core_Map[44], responses, query);
          }
          var _eN_ = caml_call2(Let_syntax$0[2][5], t, query);
          return caml_call3(Let_syntax$0[2][7], _cP_, _eN_, _eM_);
         }
         function _eJ_(param){return 0;}
         var
          _eK_ =
            caml_call3(Let_syntax$0[2][4], _cQ_, pattern_syntax_327, _eJ_),
          _eL_ = caml_call1(Let_syntax$0[2][3], _eK_);
         return caml_call3(Let_syntax$0[2][1], _cR_, _eL_, _eI_);
        }
        function _eE_(callback){
         return caml_call4(Edge$0[6], sexp_of_model, equal, query, callback);
        }
        function _eF_(inject, prev, next){
         if(! prev) return Ui_effect[1];
         var prev$0 = prev[1];
         return caml_call1(inject, [2, prev$0, next]);
        }
        var
         _eG_ = caml_call3(Let_syntax$0[2][7], _cS_, inject, _eF_),
         _eH_ = caml_call3(Let_syntax$0[2][1], _cT_, _eG_, _eE_);
        return caml_call3(Let_syntax$0[2][1], _cU_, _eH_, _eD_);
       }
       function _eA_(param){return 0;}
       var
        _eB_ = caml_call3(Let_syntax$0[2][4], _cV_, pattern_syntax_320, _eA_),
        _eC_ = caml_call1(Let_syntax$0[2][3], _eB_);
       return caml_call3(Let_syntax$0[2][1], _cW_, _eC_, _ez_);
      }
      var _eq_ = 0, _er_ = 0;
      function _es_(param){
       var query = param[2], inject = param[1];
       return caml_call1(inject, [1, query]);
      }
      var
       _et_ = caml_call2(Let_syntax$0[2][5], inject, query),
       _eu_ = [0, caml_call3(Let_syntax$0[2][4], 0, _et_, _es_)];
      function _ev_(param){
       var query = param[2], inject = param[1];
       return caml_call1(inject, [0, query]);
      }
      var
       _ew_ = caml_call2(Let_syntax$0[2][5], inject, query),
       _ex_ = [0, caml_call3(Let_syntax$0[2][4], 0, _ew_, _ev_)],
       _ey_ = caml_call4(Edge$0[2], _ex_, _eu_, _er_, _eq_);
      return caml_call3(Let_syntax$0[2][1], _cX_, _ey_, _ep_);
     }
     function _em_(param){
      var pattern_syntax_319 = param[2];
      return pattern_syntax_319;
     }
     var
      _en_ = caml_call3(Let_syntax$0[2][4], _cY_, pattern_syntax_318, _em_),
      _eo_ = caml_call1(Let_syntax$0[2][3], _en_);
     return caml_call3(Let_syntax$0[2][1], _cZ_, _eo_, _el_);
    }
    var _ek_ = caml_call1(Let_syntax$0[1], t);
    return caml_call3(Let_syntax$0[2][1], _c0_, _ek_, _ej_);
   }
   var Memo = [0, Action, create$0, lookup$0];
   function map2$0(a, b, f){
    function _ef_(let_syntax_335){
     function _eg_(b){
      function _eh_(param){
       var b = param[2], a = param[1];
       return caml_call2(f, a, b);
      }
      var _ei_ = caml_call2(Let_syntax$0[2][5], let_syntax_335, b);
      return caml_call3(Let_syntax$0[2][7], _c1_, _ei_, _eh_);
     }
     return caml_call3(Let_syntax$0[2][1], _c2_, b, _eg_);
    }
    return caml_call3(Let_syntax$0[2][1], _c3_, a, _ef_);
   }
   var
    map$0 =
      [0,
       -198771759,
       function(a, f){
        function _ed_(a){
         function _ee_(a){return caml_call1(f, a);}
         return caml_call3(Let_syntax$0[2][7], _c4_, a, _ee_);
        }
        return caml_call3(Let_syntax$0[2][1], _c5_, a, _ed_);
       }],
    include = caml_call1(Base_Applicative[13], [0, const$0, map2$0, map$0]),
    return$0 = include[1],
    map$1 = include[2],
    both$0 = include[3],
    symbol$1 = include[4],
    symbol$2 = include[5],
    symbol$3 = include[6],
    symbol_map$0 = include[7],
    apply = include[8],
    map2$1 = include[9],
    Applicative_infix = include[13];
   function map3$0(t1, t2, t3, f){
    function _ea_(t1){
     function _eb_(t2){
      function _ec_(t3){
       return caml_call1(read, caml_call4(Bonsai_Value[16], t1, t2, t3, f));
      }
      return caml_call3(Let_syntax$0[2][1], _c6_, t3, _ec_);
     }
     return caml_call3(Let_syntax$0[2][1], _c7_, t2, _eb_);
    }
    return caml_call3(Let_syntax$0[2][1], _c8_, t1, _ea_);
   }
   function map4$0(t1, t2, t3, t4, f){
    function _d8_(t1){
     function _d9_(t2){
      function _d__(t3){
       function _d$_(t4){
        return caml_call1
                (read, caml_call5(Bonsai_Value[17], t1, t2, t3, t4, f));
       }
       return caml_call3(Let_syntax$0[2][1], _c9_, t4, _d$_);
      }
      return caml_call3(Let_syntax$0[2][1], _c__, t3, _d__);
     }
     return caml_call3(Let_syntax$0[2][1], _c$_, t2, _d9_);
    }
    return caml_call3(Let_syntax$0[2][1], _da_, t1, _d8_);
   }
   function map5$0(t1, t2, t3, t4, t5, f){
    function _d3_(t1){
     function _d4_(t2){
      function _d5_(t3){
       function _d6_(t4){
        function _d7_(t5){
         return caml_call1
                 (read, caml_call6(Bonsai_Value[18], t1, t2, t3, t4, t5, f));
        }
        return caml_call3(Let_syntax$0[2][1], _db_, t5, _d7_);
       }
       return caml_call3(Let_syntax$0[2][1], _dc_, t4, _d6_);
      }
      return caml_call3(Let_syntax$0[2][1], _dd_, t3, _d5_);
     }
     return caml_call3(Let_syntax$0[2][1], _de_, t2, _d4_);
    }
    return caml_call3(Let_syntax$0[2][1], _df_, t1, _d3_);
   }
   function map6$0(t1, t2, t3, t4, t5, t6, f){
    function _dX_(t1){
     function _dY_(t2){
      function _dZ_(t3){
       function _d0_(t4){
        function _d1_(t5){
         function _d2_(t6){
          return caml_call1
                  (read,
                   caml_call7(Bonsai_Value[19], t1, t2, t3, t4, t5, t6, f));
         }
         return caml_call3(Let_syntax$0[2][1], _dg_, t6, _d2_);
        }
        return caml_call3(Let_syntax$0[2][1], _dh_, t5, _d1_);
       }
       return caml_call3(Let_syntax$0[2][1], _di_, t4, _d0_);
      }
      return caml_call3(Let_syntax$0[2][1], _dj_, t3, _dZ_);
     }
     return caml_call3(Let_syntax$0[2][1], _dk_, t2, _dY_);
    }
    return caml_call3(Let_syntax$0[2][1], _dl_, t1, _dX_);
   }
   function map7$0(t1, t2, t3, t4, t5, t6, t7, f){
    function _dQ_(t1){
     function _dR_(t2){
      function _dS_(t3){
       function _dT_(t4){
        function _dU_(t5){
         function _dV_(t6){
          function _dW_(t7){
           return caml_call1
                   (read,
                    caml_call8(Bonsai_Value[20], t1, t2, t3, t4, t5, t6, t7, f));
          }
          return caml_call3(Let_syntax$0[2][1], _dm_, t7, _dW_);
         }
         return caml_call3(Let_syntax$0[2][1], _dn_, t6, _dV_);
        }
        return caml_call3(Let_syntax$0[2][1], _do_, t5, _dU_);
       }
       return caml_call3(Let_syntax$0[2][1], _dp_, t4, _dT_);
      }
      return caml_call3(Let_syntax$0[2][1], _dq_, t3, _dS_);
     }
     return caml_call3(Let_syntax$0[2][1], _dr_, t2, _dR_);
    }
    return caml_call3(Let_syntax$0[2][1], _ds_, t1, _dQ_);
   }
   var
    Mapn = [0, map2$1, map3$0, map4$0, map5$0, map6$0, map7$0],
    map2$2 = Mapn[1],
    map3$1 = Mapn[2],
    map4$1 = Mapn[3],
    map5$1 = Mapn[4],
    map6$1 = Mapn[5],
    map7$1 = Mapn[6];
   function all(param){
    if(! param) return caml_call1(return$0, 0);
    var _dK_ = param[2], t1 = param[1];
    if(! _dK_) return caml_call2(map$1, t1, function(a1){return [0, a1, 0];});
    var _dL_ = _dK_[2], t2 = _dK_[1];
    if(! _dL_)
     return caml_call3
             (map2$2, t1, t2, function(a1, a2){return [0, a1, [0, a2, 0]];});
    var _dM_ = _dL_[2], t3 = _dL_[1];
    if(! _dM_)
     return caml_call4
             (map3$1,
              t1,
              t2,
              t3,
              function(a1, a2, a3){return [0, a1, [0, a2, [0, a3, 0]]];});
    var _dN_ = _dM_[2], t4 = _dM_[1];
    if(! _dN_)
     return caml_call5
             (map4$1,
              t1,
              t2,
              t3,
              t4,
              function(a1, a2, a3, a4){
               return [0, a1, [0, a2, [0, a3, [0, a4, 0]]]];
              });
    var _dO_ = _dN_[2], t5 = _dN_[1];
    if(! _dO_)
     return caml_call6
             (map5$1,
              t1,
              t2,
              t3,
              t4,
              t5,
              function(a1, a2, a3, a4, a5){
               return [0, a1, [0, a2, [0, a3, [0, a4, [0, a5, 0]]]]];
              });
    var _dP_ = _dO_[2], t6 = _dO_[1];
    if(! _dP_)
     return caml_call7
             (map6$1,
              t1,
              t2,
              t3,
              t4,
              t5,
              t6,
              function(a1, a2, a3, a4, a5, a6){
               return [0, a1, [0, a2, [0, a3, [0, a4, [0, a5, [0, a6, 0]]]]]];
              });
    var t7 = _dP_[1];
    if(! _dP_[2])
     return caml_call8
             (map7$1,
              t1,
              t2,
              t3,
              t4,
              t5,
              t6,
              t7,
              function(a1, a2, a3, a4, a5, a6, a7){
               return [0,
                       a1,
                       [0, a2, [0, a3, [0, a4, [0, a5, [0, a6, [0, a7, 0]]]]]]];
              });
    var
     rest = _dP_[2],
     left =
       caml_call8
        (map7$1,
         t1,
         t2,
         t3,
         t4,
         t5,
         t6,
         t7,
         function(a1, a2, a3, a4, a5, a6, a7){
          return [0,
                  a1,
                  [0, a2, [0, a3, [0, a4, [0, a5, [0, a6, [0, a7, 0]]]]]]];
         }),
     right = all(rest);
    return caml_call3
            (map2$2,
             left,
             right,
             function(left, right){return caml_call2(Core[156], left, right);});
   }
   function reduce_balanced(xs, f){
    function _dH_(a, b){
     function _dI_(a){
      function _dJ_(b){return caml_call2(f, a, b);}
      return caml_call3(Let_syntax$0[2][1], _dt_, b, _dJ_);
     }
     return caml_call3(Let_syntax$0[2][1], _du_, a, _dI_);
    }
    return caml_call2(Core_List[110], xs, _dH_);
   }
   function fold_right(xs, f, init){
    var _dD_ = caml_call1(read, init);
    function _dE_(a, b){
     function _dF_(a){
      function _dG_(b){return caml_call2(f, a, b);}
      return caml_call3(Let_syntax$0[2][1], _dv_, b, _dG_);
     }
     return caml_call3(Let_syntax$0[2][1], _dw_, a, _dF_);
    }
    return caml_call3(Core_List[101], xs, _dE_, _dD_);
   }
   function all_unit(xs){
    function _dC_(param){return 0;}
    return caml_call2(map$1, all(xs), _dC_);
   }
   function all_map(map_of_computations){
    var
     _dy_ = caml_call1(Core_Map[3], map_of_computations),
     _dz_ = caml_call1(Core_Map[8], _dy_);
    function _dA_(param){
     var data = param[2], key = param[1];
     return caml_call2(map$1, data, caml_call1(Core_Tuple[1][6], key));
    }
    var _dB_ = caml_call2(Core_Map[81], 0, map_of_computations);
    return caml_call2(map$1, all(caml_call2(Core_List[51], _dB_, _dA_)), _dz_);
   }
   var
    symbol$4 = Applicative_infix[1],
    symbol$5 = Applicative_infix[2],
    symbol$6 = Applicative_infix[3],
    symbol_map$1 = Applicative_infix[4],
    map2$3 = Mapn[1],
    map3$2 = Mapn[2],
    map4$2 = Mapn[3],
    map5$2 = Mapn[4],
    map6$2 = Mapn[5],
    map7$2 = Mapn[6],
    Let_syntax$1 =
      [0,
       return$0,
       map$1,
       both$0,
       map2$3,
       map3$2,
       map4$2,
       map5$2,
       map6$2,
       map7$2],
    Let_syntax$2 =
      [0, return$0, symbol$4, symbol$5, symbol$6, symbol_map$1, Let_syntax$1],
    Computation =
      [0,
       return$0,
       map$1,
       both$0,
       symbol$1,
       symbol$2,
       symbol$3,
       symbol_map$0,
       apply,
       Applicative_infix,
       Mapn,
       map2$2,
       map3$1,
       map4$1,
       map5$1,
       map6$1,
       map7$1,
       all,
       reduce_balanced,
       fold_right,
       all_unit,
       all_map,
       Let_syntax$2],
    Name_source = Bonsai_Value[1],
    return$1 = Bonsai_Value[2],
    map$2 = Bonsai_Value[3],
    both$1 = Bonsai_Value[4],
    symbol$7 = Bonsai_Value[5],
    symbol$8 = Bonsai_Value[6],
    symbol$9 = Bonsai_Value[7],
    symbol_map$2 = Bonsai_Value[8],
    apply$0 = Bonsai_Value[9],
    map2$4 = Bonsai_Value[10],
    all$0 = Bonsai_Value[11],
    all_unit$0 = Bonsai_Value[12],
    Applicative_infix$0 = Bonsai_Value[13],
    Open_on_rhs_intf = Bonsai_Value[14],
    Let_syntax$3 = Bonsai_Value[15],
    map3$3 = Bonsai_Value[16],
    map4$3 = Bonsai_Value[17],
    map5$3 = Bonsai_Value[18],
    map6$3 = Bonsai_Value[19],
    map7$3 = Bonsai_Value[20],
    named = Bonsai_Value[21],
    eval$0 = Bonsai_Value[23],
    of_incr = Bonsai_Value[24],
    return_exn = Bonsai_Value[25],
    transpose_opt = Bonsai_Value[26],
    _dx_ = Bonsai_Value[22];
   function cutoff$0(t, equal){return caml_call3(_dx_, 0, t, equal);}
   var
    Value =
      [0,
       Name_source,
       return$1,
       map$2,
       both$1,
       symbol$7,
       symbol$8,
       symbol$9,
       symbol_map$2,
       apply$0,
       map2$4,
       all$0,
       all_unit$0,
       Applicative_infix$0,
       Open_on_rhs_intf,
       Let_syntax$3,
       map3$3,
       map4$3,
       map5$3,
       map6$3,
       map7$3,
       named,
       eval$0,
       of_incr,
       return_exn,
       transpose_opt,
       cutoff$0],
    Expert = [0, thunk, assoc_on];
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Proc);
   var
    Bonsai_Proc =
      [0,
       read,
       sub,
       switch$0,
       Proc_incr,
       Computation_status,
       state_machine1,
       state_machine0,
       assoc,
       assoc_on,
       lazy,
       wrap,
       path,
       Let_syntax$0,
       pure,
       const$0,
       with_model_resetter,
       fix,
       fix2,
       with_model_resetter$0,
       enum$0,
       scope_model,
       of_module1,
       of_module2,
       race_dynamic_model,
       of_module0,
       actor1,
       actor0,
       state,
       Toggle,
       toggle,
       toggle$0,
       state_opt,
       path_id,
       yoink,
       Edge$0,
       Effect_throttling,
       Incr,
       Map0,
       freeze,
       thunk,
       most_recent_some,
       most_recent_value_satisfying,
       previous_value,
       assoc_set,
       assoc_list,
       Dynamic_scope$0,
       Clock,
       Memo,
       Computation,
       Value,
       Expert];
   runtime.caml_register_global(353, Bonsai_Proc, cst_Bonsai_Proc$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Simplify
//# unitInfo: Requires: Bonsai__Path, Core, Core__List, Core__Option, Core__Type_equal, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Univ_map
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_Simplify$0 = "Bonsai__Simplify",
    cst_bonsai$0 = "bonsai";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Core_Type_equal = global_data.Core__Type_equal,
    Bonsai_Path = global_data.Bonsai__Path,
    Core = global_data.Core,
    Core_Option = global_data.Core__Option,
    Core_List = global_data.Core__List,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Univ_map = global_data.Univ_map;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Simplify$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/simplify.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai$0, "simplify.ml");
   var cst_bonsai = cst_bonsai$0, cst_Bonsai_Simplify = cst_Bonsai_Simplify$0;
   function sexp_of_t(of_a_001){return Core[620];}
   var
    include =
      caml_call1(caml_call1(Univ_map[26], Univ_map[1]), [0, sexp_of_t]),
    empty = include[4],
    is_empty = include[6],
    set = include[7],
    add_exn = include[13],
    remove = include[17],
    to_alist = include[21];
   function merge(a, b){
    function _ad_(acc, param){
     var id = param[1];
     return caml_call3(set, acc, id, 0);
    }
    var _ae_ = caml_call1(to_alist, b);
    return caml_call3(Core_List[20], _ae_, a, _ad_);
   }
   function sexp_of_t$0(of_a_002){return of_a_002;}
   var
    Env = caml_call1(caml_call1(Univ_map[26], Univ_map[1]), [0, sexp_of_t$0]);
   function squash(other){
    if(typeof other === "number") return 0;
    if(0 === other[0]) return other;
    var can_contain_path = other[3], gen = other[2], free = other[1];
    return caml_call1(is_empty, free)
            ? [0, caml_call1(gen, Env[4]), can_contain_path]
            : other;
   }
   function map(a, f){
    if(typeof a === "number") return 0;
    if(0 === a[0]){
     var can_contain_path = a[2], value = a[1];
     return [0, caml_call1(f, value), can_contain_path];
    }
    var can_contain_path$0 = a[3], gen = a[2], free = a[1];
    return [1,
            free,
            function(m){return caml_call1(f, caml_call1(gen, m));},
            can_contain_path$0];
   }
   function both(a, b){
    if(typeof a !== "number")
     if(0 === a[0]){
      var pa = a[2], a$0 = a[1];
      if(typeof b !== "number"){
       if(0 === b[0]){
        var pb = b[2], b$0 = b[1], pa$0 = pa || pb;
        return [0, [0, a$0, b$0], pa$0];
       }
       var pb$0 = b[3], gen = b[2], free = b[1], pa$1 = pa || pb$0;
       return [1,
               free,
               function(m){return [0, a$0, caml_call1(gen, m)];},
               pa$1];
      }
     }
     else{
      var pa$2 = a[3], gen$0 = a[2], free_a = a[1];
      if(typeof b !== "number"){
       if(0 === b[0]){
        var pb$1 = b[2], b$1 = b[1], pa$3 = pa$2 || pb$1;
        return [1,
                free_a,
                function(m){return [0, caml_call1(gen$0, m), b$1];},
                pa$3];
       }
       var
        pb$2 = b[3],
        gen_b = b[2],
        free_b = b[1],
        free$0 = merge(free_a, free_b),
        pa$4 = pa$2 || pb$2;
       return [1,
               free$0,
               function(env){
                var _ac_ = caml_call1(gen_b, env);
                return [0, caml_call1(gen$0, env), _ac_];
               },
               pa$4];
      }
     }
    return 0;
   }
   function value_to_function(value, key_id, data_id){
    var value$0 = value;
    for(;;){
     var match = value$0[1];
     switch(match[0]){
       case 0:
        var r = match[1], _k_ = 0;
        return [0, function(key, data){return r;}, _k_];
       case 1:
        return 0;
       case 2:
        var
         same_name = Core_Type_equal[8][9],
         match$0 = caml_call2(same_name, value$0[3], key_id),
         match$1 = caml_call2(same_name, value$0[3], data_id);
        if(match$0){
         var _l_ = 0;
         return [0, function(key, data){return key;}, _l_];
        }
        if(match$1){
         var _m_ = 0;
         return [0, function(key, data){return data;}, _m_];
        }
        var
         _n_ = 0,
         _o_ =
           function(env, param, _ab_){
            return caml_call2(Env[11], env, value$0[3]);
           };
        return [1, caml_call3(add_exn, empty, value$0[3], 0), _o_, _n_];
       case 3:
        var
         b = match[2],
         a = match[1],
         let_syntax_003 = value_to_function(a, key_id, data_id),
         let_syntax_004 = value_to_function(b, key_id, data_id),
         _p_ =
           function(param, key, data){
            var b = param[2], a = param[1], _aa_ = caml_call2(b, key, data);
            return [0, caml_call2(a, key, data), _aa_];
           };
        return map(both(let_syntax_003, let_syntax_004), _p_);
       case 4:
        var value$1 = match[1];
        if(! match[3]) return 0;
        var value$0 = value$1;
        break;
       case 5:
        var
         f = match[2],
         t = match[1],
         _q_ =
           function(a, key, data){
            return caml_call1(f, caml_call2(a, key, data));
           };
        return map(value_to_function(t, key_id, data_id), _q_);
       case 6:
        var
         f$0 = match[3],
         t2 = match[2],
         t1 = match[1],
         let_syntax_007 = value_to_function(t1, key_id, data_id),
         let_syntax_008 = value_to_function(t2, key_id, data_id),
         _r_ =
           function(param, key, data){
            var t2 = param[2], t1 = param[1], _$_ = caml_call2(t2, key, data);
            return caml_call2(f$0, caml_call2(t1, key, data), _$_);
           };
        return map(both(let_syntax_007, let_syntax_008), _r_);
       case 7:
        var
         f$1 = match[4],
         t3 = match[3],
         t2$0 = match[2],
         t1$0 = match[1],
         let_syntax_010 = value_to_function(t1$0, key_id, data_id),
         let_syntax_011 = value_to_function(t2$0, key_id, data_id),
         let_syntax_012 = value_to_function(t3, key_id, data_id),
         _s_ =
           function(param, key, data){
            var
             match = param[2],
             t3 = match[2],
             t2 = match[1],
             t1 = param[1],
             _Z_ = caml_call2(t3, key, data),
             ___ = caml_call2(t2, key, data);
            return caml_call3(f$1, caml_call2(t1, key, data), ___, _Z_);
           };
        return map
                (both(let_syntax_010, both(let_syntax_011, let_syntax_012)),
                 _s_);
       case 8:
        var
         f$2 = match[5],
         t4 = match[4],
         t3$0 = match[3],
         t2$1 = match[2],
         t1$1 = match[1],
         let_syntax_014 = value_to_function(t1$1, key_id, data_id),
         let_syntax_015 = value_to_function(t2$1, key_id, data_id),
         let_syntax_016 = value_to_function(t3$0, key_id, data_id),
         let_syntax_017 = value_to_function(t4, key_id, data_id),
         _t_ =
           function(param, key, data){
            var
             _V_ = param[2],
             match = _V_[2],
             t4 = match[2],
             t3 = match[1],
             t2 = _V_[1],
             t1 = param[1],
             _W_ = caml_call2(t4, key, data),
             _X_ = caml_call2(t3, key, data),
             _Y_ = caml_call2(t2, key, data);
            return caml_call4(f$2, caml_call2(t1, key, data), _Y_, _X_, _W_);
           };
        return map
                (both
                  (let_syntax_014,
                   both(let_syntax_015, both(let_syntax_016, let_syntax_017))),
                 _t_);
       case 9:
        var
         f$3 = match[6],
         t5 = match[5],
         t4$0 = match[4],
         t3$1 = match[3],
         t2$2 = match[2],
         t1$2 = match[1],
         let_syntax_019 = value_to_function(t1$2, key_id, data_id),
         let_syntax_020 = value_to_function(t2$2, key_id, data_id),
         let_syntax_021 = value_to_function(t3$1, key_id, data_id),
         let_syntax_022 = value_to_function(t4$0, key_id, data_id),
         let_syntax_023 = value_to_function(t5, key_id, data_id),
         _u_ =
           function(param, key, data){
            var
             _P_ = param[2],
             _Q_ = _P_[2],
             match = _Q_[2],
             t5 = match[2],
             t4 = match[1],
             t3 = _Q_[1],
             t2 = _P_[1],
             t1 = param[1],
             _R_ = caml_call2(t5, key, data),
             _S_ = caml_call2(t4, key, data),
             _T_ = caml_call2(t3, key, data),
             _U_ = caml_call2(t2, key, data);
            return caml_call5
                    (f$3, caml_call2(t1, key, data), _U_, _T_, _S_, _R_);
           };
        return map
                (both
                  (let_syntax_019,
                   both
                    (let_syntax_020,
                     both(let_syntax_021, both(let_syntax_022, let_syntax_023)))),
                 _u_);
       case 10:
        var
         f$4 = match[7],
         t6 = match[6],
         t5$0 = match[5],
         t4$1 = match[4],
         t3$2 = match[3],
         t2$3 = match[2],
         t1$3 = match[1],
         let_syntax_025 = value_to_function(t1$3, key_id, data_id),
         let_syntax_026 = value_to_function(t2$3, key_id, data_id),
         let_syntax_027 = value_to_function(t3$2, key_id, data_id),
         let_syntax_028 = value_to_function(t4$1, key_id, data_id),
         let_syntax_029 = value_to_function(t5$0, key_id, data_id),
         let_syntax_030 = value_to_function(t6, key_id, data_id),
         _v_ =
           function(param, key, data){
            var
             _H_ = param[2],
             _I_ = _H_[2],
             _J_ = _I_[2],
             match = _J_[2],
             t6 = match[2],
             t5 = match[1],
             t4 = _J_[1],
             t3 = _I_[1],
             t2 = _H_[1],
             t1 = param[1],
             _K_ = caml_call2(t6, key, data),
             _L_ = caml_call2(t5, key, data),
             _M_ = caml_call2(t4, key, data),
             _N_ = caml_call2(t3, key, data),
             _O_ = caml_call2(t2, key, data);
            return caml_call6
                    (f$4, caml_call2(t1, key, data), _O_, _N_, _M_, _L_, _K_);
           };
        return map
                (both
                  (let_syntax_025,
                   both
                    (let_syntax_026,
                     both
                      (let_syntax_027,
                       both(let_syntax_028, both(let_syntax_029, let_syntax_030))))),
                 _v_);
       case 11:
        var
         f$5 = match[8],
         t7 = match[7],
         t6$0 = match[6],
         t5$1 = match[5],
         t4$2 = match[4],
         t3$3 = match[3],
         t2$4 = match[2],
         t1$4 = match[1],
         let_syntax_032 = value_to_function(t1$4, key_id, data_id),
         let_syntax_033 = value_to_function(t2$4, key_id, data_id),
         let_syntax_034 = value_to_function(t3$3, key_id, data_id),
         let_syntax_035 = value_to_function(t4$2, key_id, data_id),
         let_syntax_036 = value_to_function(t5$1, key_id, data_id),
         let_syntax_037 = value_to_function(t6$0, key_id, data_id),
         let_syntax_038 = value_to_function(t7, key_id, data_id),
         _w_ =
           function(param, key, data){
            var
             _x_ = param[2],
             _y_ = _x_[2],
             _z_ = _y_[2],
             _A_ = _z_[2],
             match = _A_[2],
             t7 = match[2],
             t6 = match[1],
             t5 = _A_[1],
             t4 = _z_[1],
             t3 = _y_[1],
             t2 = _x_[1],
             t1 = param[1],
             _B_ = caml_call2(t7, key, data),
             _C_ = caml_call2(t6, key, data),
             _D_ = caml_call2(t5, key, data),
             _E_ = caml_call2(t4, key, data),
             _F_ = caml_call2(t3, key, data),
             _G_ = caml_call2(t2, key, data);
            return caml_call7
                    (f$5,
                     caml_call2(t1, key, data),
                     _G_,
                     _F_,
                     _E_,
                     _D_,
                     _C_,
                     _B_);
           };
        return map
                (both
                  (let_syntax_032,
                   both
                    (let_syntax_033,
                     both
                      (let_syntax_034,
                       both
                        (let_syntax_035,
                         both(let_syntax_036, both(let_syntax_037, let_syntax_038)))))),
                 _w_);
       default: return 0;
     }
    }
   }
   function _a_(computation, key_id, data_id){
    function recurse(computation){return _a_(computation, key_id, data_id);}
    if(typeof computation === "number"){
     var _f_ = 1;
     return [0, function(path, param, _j_){return path;}, _f_];
    }
    switch(computation[0]){
      case 0:
       var value = computation[1], _g_ = function(f, path){return f;};
       return map(value_to_function(value, key_id, data_id), _g_);
      case 4:
       var
        into = computation[3],
        via = computation[2],
        from$0 = computation[1],
        match = recurse(from$0),
        match$0 = recurse(into);
       a:
       if(typeof match !== "number"){
        if(0 === match[0]){
         var pa = match[2], from = match[1];
         if(typeof match$0 === "number") break a;
         if(0 !== match$0[0]){
          var
           pb = match$0[3],
           gen = match$0[2],
           free = match$0[1],
           free$0 = caml_call2(remove, free, via),
           both_use_path = pa ? pb : pa,
           gen$0 =
             function(env, path, key, data){
              var
               from_path =
                 both_use_path ? caml_call2(Bonsai_Path[26], path, 0) : path,
               into_path =
                 both_use_path ? caml_call2(Bonsai_Path[26], path, 1) : path,
               _h_ = caml_call3(from, from_path, key, data),
               env$0 = caml_call3(Env[13], env, via, _h_);
              return caml_call4(gen, env$0, into_path, key, data);
             },
           pa$0 = pa || pb;
          return squash([1, free$0, gen$0, pa$0]);
         }
        }
        else{
         var pa$1 = match[3], gen_a = match[2], free_a = match[1];
         if(typeof match$0 === "number") break a;
         if(0 !== match$0[0]){
          var
           pb$0 = match$0[3],
           gen_b = match$0[2],
           free_b = match$0[1],
           free_b$0 = caml_call2(remove, free_b, via),
           free$1 = merge(free_a, free_b$0),
           both_use_path$0 = pa$1 ? pb$0 : pa$1,
           gen$1 =
             function(env, path, key, data){
              var
               from_path =
                 both_use_path$0 ? caml_call2(Bonsai_Path[26], path, 0) : path,
               into_path =
                 both_use_path$0 ? caml_call2(Bonsai_Path[26], path, 1) : path,
               _i_ = caml_call4(gen_a, env, from_path, key, data),
               env$0 = caml_call3(Env[13], env, via, _i_);
              return caml_call4(gen_b, env$0, into_path, key, data);
             },
           pa$2 = pa$1 || pb$0;
          return squash([1, free$1, gen$1, pa$2]);
         }
        }
        return match$0;
       }
       return 0;
      default: return 0;
    }
   }
   function computation_to_function(t, key_compare, key_id, data_id){
    var
     _b_ = caml_call2(Bonsai_Path[1][1], key_compare, key_id),
     make_path_element = caml_call1(Core[267], _b_),
     match = squash(_a_(t, key_id, data_id));
    if(typeof match !== "number" && 0 === match[0]){
     var
      can_contain_path = match[2],
      f = match[1],
      _c_ = can_contain_path ? -742043105 : 230487820,
      _d_ =
        [0,
         function(path, key, data){
          if(can_contain_path)
           var
            _e_ = [0, caml_call1(make_path_element, key)],
            path$0 = caml_call2(Bonsai_Path[26], path, _e_);
          else
           var path$0 = path;
          return caml_call3(f, path$0, key, data);
         },
         _c_];
     return caml_call1(Core_Option[58], _d_);
    }
    return 0;
   }
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Simplify);
   var Bonsai_Simplify = [0, computation_to_function];
   runtime.caml_register_global(17, Bonsai_Simplify, cst_Bonsai_Simplify$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Constant_fold
//# unitInfo: Requires: Base__Option, Bonsai__Fix_transform, Bonsai__Fix_transform_intf, Bonsai__Proc, Bonsai__Simplify, Bonsai__Trampoline, Bonsai__Value, CamlinternalLazy, Core, Core__Error, Core__Lazy, Core__Map, Core__Option, Core__Type_equal, Core__Unit, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Univ_map
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_Constant_fold$0 = "Bonsai__Constant_fold",
    cst_bonsai$0 = "bonsai",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_obj_tag = runtime.caml_obj_tag,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    name = "leaf1",
    Bonsai_Trampoline = global_data.Bonsai__Trampoline,
    Bonsai_Proc = global_data.Bonsai__Proc,
    Core_Map = global_data.Core__Map,
    Bonsai_Value = global_data.Bonsai__Value,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Core = global_data.Core,
    Core_Error = global_data.Core__Error,
    Core_Lazy = global_data.Core__Lazy,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Base_Option = global_data.Base__Option,
    Bonsai_Simplify = global_data.Bonsai__Simplify,
    Core_Option = global_data.Core__Option,
    Core_Type_equal = global_data.Core__Type_equal,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Univ_map = global_data.Univ_map,
    Bonsai_Fix_transform_intf = global_data.Bonsai__Fix_transform_intf,
    Bonsai_Fix_transform = global_data.Bonsai__Fix_transform;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Constant_fold$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/constant_fold.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai$0, "constant_fold.ml");
   var
    cst_does_not_have_a_correspond =
      "does not have a corresponding computation",
    cst_switch_with_value = "switch with value",
    cst_exception = "exception",
    cst_bonsai = cst_bonsai$0,
    cst_Bonsai_Constant_fold = cst_Bonsai_Constant_fold$0;
   function sexp_of_t(param){return Core[149];}
   var
    Constants_in_scope =
      caml_call1(caml_call1(Univ_map[26], Univ_map[1]), [0, sexp_of_t]),
    Down = [0];
   function wrap_value(here, name, v){
    return [0, v, here, caml_call2(Core_Type_equal[8][3], name, Core[149])];
   }
   function value_exception_folder(f){
    try{var _be_ = caml_call1(f, 0); return _be_;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     return wrap_value(0, cst_exception, [12, exn]);
    }
   }
   function lazy_contents_if_value_is_cons(param){
    var value = param[1];
    switch(value[0]){
      case 0:
       var x = value[1]; return [0, [250, x]];
      case 12:
       var ex = value[1];
       return [0,
               [246,
                function(param){throw caml_maybe_attach_backtrace(ex, 0);}]];
      default: return 0;
    }
   }
   function contents_if_value_is_constant(value){
    function _ba_(_bc_){
     var _bd_ = caml_obj_tag(_bc_);
     if(250 === _bd_) return _bc_[1];
     if(246 !== _bd_ && 244 !== _bd_) return _bc_;
     return caml_call1(CamlinternalLazy[2], _bc_);
    }
    var _bb_ = lazy_contents_if_value_is_cons(value);
    return caml_call2(Core_Option[34], _bb_, _ba_);
   }
   function constant_or_value(with_id, f){
    return value_exception_folder
            (function(param){
              var match = caml_call1(f, 0);
              if(! match) return with_id;
              var constant = match[1];
              return [0, [0, constant], with_id[2], with_id[3]];
             });
   }
   function simplify_assoc_if_simpl(key_comparator, key_id, data_id, map, by){
    function _a__(param){
     var
      can_contain_path = param[2],
      by = param[1],
      may_contain_path = 230487820 <= can_contain_path ? 1 : 0;
     return [9, map, by, may_contain_path];
    }
    var
     _a$_ =
       caml_call4
        (Bonsai_Simplify[1], by, key_comparator[2][1], key_id, data_id);
    return caml_call2(Base_Option[29][4][3], _a$_, _a__);
   }
   function _a_(Recurse){
    function _c_(param, assoc_t){
     var evaluated = param[2], constants_in_scope = param[1];
     if(typeof assoc_t !== "number")
      switch(assoc_t[0]){
        case 1:
         var
          input = assoc_t[6],
          reset = assoc_t[5],
          apply_action = assoc_t[4],
          dynamic_action = assoc_t[3],
          input_id = assoc_t[2],
          model = assoc_t[1],
          input$0 =
            caml_call4
              (Recurse[2],
               [0, constants_in_scope, evaluated],
               0,
               264513256,
               input)
             [3];
         try{
          var match = contents_if_value_is_constant(input$0);
          if(match)
           var
            input$1 = match[1],
            apply_action$0 =
              function(inject){
               var
                _a7_ = caml_call1(apply_action, inject),
                _a8_ = [0, input$1];
               return function(_a9_){return caml_call2(_a7_, _a9_, _a8_);};
              },
            _an_ =
              caml_call1
               (Bonsai_Trampoline[5][1],
                [2, model, dynamic_action, apply_action$0, reset]);
          else
           var
            _an_ =
              caml_call1
               (Bonsai_Trampoline[5][1],
                [1,
                 model,
                 input_id,
                 dynamic_action,
                 apply_action,
                 reset,
                 input$0]);
          return _an_;
         }
         catch(exn$0){
          var
           exn = caml_wrap_exception(exn$0),
           _am_ = [0, wrap_value(0, name, [12, exn])];
          return caml_call1(Bonsai_Trampoline[3], _am_);
         }
        case 4:
         var
          here = assoc_t[4],
          into = assoc_t[3],
          via = assoc_t[2],
          from = assoc_t[1],
          _aq_ =
            function(param){
             var from = param[3];
             if(typeof from !== "number" && 0 === from[0]){
              var
               with_id = from[1],
               _a2_ = lazy_contents_if_value_is_cons(with_id);
              if(caml_call1(Core_Option[62], _a2_)){
               var
                new_constants_in_scope =
                  caml_call3
                   (Constants_in_scope[13], constants_in_scope, via, with_id),
                _a5_ =
                  function(param){
                   var c = param[3];
                   return caml_call1(Bonsai_Trampoline[5][1], c);
                  },
                _a6_ =
                  caml_call4
                   (Recurse[1],
                    [0, new_constants_in_scope, evaluated],
                    0,
                    264513256,
                    into);
               return caml_call2(Bonsai_Trampoline[5][2][2], _a6_, _a5_);
              }
             }
             function _a3_(param){
              var into = param[3];
              return caml_call1
                      (Bonsai_Trampoline[5][1], [4, from, via, into, here]);
             }
             var
              _a4_ =
                caml_call4
                 (Recurse[1],
                  [0, constants_in_scope, evaluated],
                  0,
                  264513256,
                  into);
             return caml_call2(Bonsai_Trampoline[5][2][2], _a4_, _a3_);
            },
          _ar_ =
            caml_call4
             (Recurse[1],
              [0, constants_in_scope, evaluated],
              0,
              264513256,
              from);
         return caml_call2(Bonsai_Trampoline[5][2][2], _ar_, _aq_);
        case 7:
         var
          by = assoc_t[6],
          data_id = assoc_t[5],
          key_id = assoc_t[3],
          key_comparator = assoc_t[2],
          map = assoc_t[1],
          map_v =
            caml_call4
              (Recurse[2],
               [0, constants_in_scope, evaluated],
               0,
               264513256,
               map)
             [3],
          match$0 = map_v[1];
         switch(match$0[0]){
           case 0:
            var
             map$0 = match$0[1],
             _as_ =
               function(key, data){
                var
                 data_binding =
                   [4, caml_call1(Bonsai_Proc[15], data), data_id, by, 0];
                return [4,
                        caml_call1(Bonsai_Proc[15], key),
                        key_id,
                        data_binding,
                        0];
               },
             _at_ = caml_call2(Core_Map[58], map$0, _as_),
             folded = caml_call1(Bonsai_Proc[49][21], _at_),
             _au_ =
               function(param){
                var r = param[3];
                return caml_call1(Bonsai_Trampoline[5][1], r);
               },
             _av_ =
               caml_call4
                (Recurse[1],
                 [0, constants_in_scope, evaluated],
                 0,
                 264513256,
                 folded);
            return caml_call2(Bonsai_Trampoline[5][2][2], _av_, _au_);
           case 12:
            var
             exn$0 = match$0[1],
             _ay_ = caml_call1(Bonsai_Value[25], exn$0),
             _az_ = caml_call1(Bonsai_Proc[1], _ay_);
            return caml_call1(Bonsai_Trampoline[5][1], _az_);
           default:
            var
             _aw_ =
               function(param){
                var
                 by = param[3],
                 match =
                   simplify_assoc_if_simpl
                    (key_comparator, key_id, data_id, map_v, by);
                if(! match)
                 return caml_call1
                         (Bonsai_Trampoline[5][1],
                          [7,
                           map_v,
                           assoc_t[2],
                           assoc_t[3],
                           assoc_t[4],
                           assoc_t[5],
                           by]);
                var kind = match[1];
                return caml_call1(Bonsai_Trampoline[5][1], kind);
               },
             _ax_ =
               caml_call4
                (Recurse[1], [0, constants_in_scope, 1], 0, 264513256, by);
            return caml_call2(Bonsai_Trampoline[5][2][2], _ax_, _aw_);
         }
        case 8:
         var
          by$0 = assoc_t[9],
          data_id$0 = assoc_t[8],
          key_id$0 = assoc_t[4],
          key_comparator$0 = assoc_t[2],
          map$1 = assoc_t[1],
          map$2 =
            caml_call4
              (Recurse[2],
               [0, constants_in_scope, evaluated],
               0,
               264513256,
               map$1)
             [3],
          _aA_ =
            function(param){
             var
              by = param[3],
              match =
                simplify_assoc_if_simpl
                 (key_comparator$0, key_id$0, data_id$0, map$2, by);
             if(! match)
              return caml_call1
                      (Bonsai_Trampoline[5][1],
                       [8,
                        map$2,
                        assoc_t[2],
                        assoc_t[3],
                        assoc_t[4],
                        assoc_t[5],
                        assoc_t[6],
                        assoc_t[7],
                        assoc_t[8],
                        by,
                        assoc_t[10]]);
             var kind = match[1];
             return caml_call1(Bonsai_Trampoline[5][1], kind);
            },
          _aB_ =
            caml_call4
             (Recurse[1], [0, constants_in_scope, 1], 0, 264513256, by$0);
         return caml_call2(Bonsai_Trampoline[5][2][2], _aB_, _aA_);
        case 10:
         var
          here$0 = assoc_t[3],
          arms = assoc_t[2],
          match$1 =
            caml_call4
              (Recurse[2],
               [0, constants_in_scope, evaluated],
               0,
               264513256,
               assoc_t[1])
             [3],
          match$2 = match$1[1];
         switch(match$2[0]){
           case 0:
            var i = match$2[1], match$3 = caml_call2(Core_Map[44], arms, i);
            if(match$3){
             var
              c = match$3[1],
              _aC_ =
                function(param){
                 var r = param[3];
                 return caml_call1(Bonsai_Trampoline[5][1], r);
                },
              _aD_ =
                caml_call4
                 (Recurse[1],
                  [0, constants_in_scope, evaluated],
                  0,
                  264513256,
                  c);
             return caml_call2(Bonsai_Trampoline[5][2][2], _aD_, _aC_);
            }
            var
             _aE_ =
               [0,
                caml_call1
                 (Sexplib0_Sexp_conv[7], cst_does_not_have_a_correspond),
                0],
             _aF_ = [0, [1, [0, caml_call1(Core[389], i), _aE_]], 0],
             _aG_ =
               [1,
                [0,
                 caml_call1(Sexplib0_Sexp_conv[7], cst_switch_with_value),
                 _aF_]],
             _aH_ = caml_call1(Core_Error[20], _aG_),
             _aI_ = caml_call1(Core_Error[28], _aH_),
             _aJ_ = caml_call1(Bonsai_Value[25], _aI_),
             _aK_ = caml_call1(Bonsai_Proc[1], _aJ_);
            return caml_call1(Bonsai_Trampoline[5][1], _aK_);
           case 12:
            var
             exn$1 = match$2[1],
             _aP_ = caml_call1(Bonsai_Value[25], exn$1),
             _aQ_ = caml_call1(Bonsai_Proc[1], _aP_);
            return caml_call1(Bonsai_Trampoline[5][1], _aQ_);
           default:
            var
             _aL_ =
               function(arms){
                return caml_call1
                        (Bonsai_Trampoline[5][1], [10, match$1, arms, here$0]);
               },
             _aM_ =
               function(c){
                function _a0_(param){
                 var r = param[3];
                 return caml_call1(Bonsai_Trampoline[5][1], r);
                }
                var
                 _a1_ =
                   caml_call4
                    (Recurse[1], [0, constants_in_scope, 1], 0, 264513256, c);
                return caml_call2(Bonsai_Trampoline[5][2][2], _a1_, _a0_);
               },
             _aN_ = caml_call2(Core_Map[57], arms, _aM_),
             _aO_ = caml_call1(Bonsai_Trampoline[4], _aN_);
            return caml_call2(Bonsai_Trampoline[5][2][2], _aO_, _aL_);
         }
        case 11:
         var t = assoc_t[1];
         if(evaluated){
          var
           _aR_ =
             function(t){
              function _aX_(param){
               var t = param[3];
               return caml_call1(Bonsai_Trampoline[5][1], t);
              }
              var
               _aY_ =
                 caml_call4
                  (Recurse[1], [0, constants_in_scope, 0], 0, 264513256, t),
               _aZ_ = caml_call2(Bonsai_Trampoline[5][2][2], _aY_, _aX_);
              return caml_call1(Bonsai_Trampoline[2], _aZ_);
             },
           _aS_ = [11, caml_call2(Core_Lazy[30], t, _aR_)];
          return caml_call1(Bonsai_Trampoline[5][1], _aS_);
         }
         var
          _aT_ =
            function(param){
             var c = param[3];
             return caml_call1(Bonsai_Trampoline[5][1], c);
            },
          _aU_ = caml_obj_tag(t);
         a:
         if(250 === _aU_)
          var _aV_ = t[1];
         else{
          if(246 !== _aU_ && 244 !== _aU_){var _aV_ = t; break a;}
          var _aV_ = caml_call1(CamlinternalLazy[2], t);
         }
         var
          _aW_ =
            caml_call4
             (Recurse[1], [0, constants_in_scope, 0], 0, 264513256, _aV_);
         return caml_call2(Bonsai_Trampoline[5][2][2], _aW_, _aT_);
      }
     function _ao_(param){
      var c = param[3];
      return caml_call1(Bonsai_Trampoline[5][1], c);
     }
     var
      _ap_ =
        caml_call4
         (Recurse[1],
          [0, constants_in_scope, evaluated],
          0,
          -582119678,
          assoc_t);
     return caml_call2(Bonsai_Trampoline[5][2][2], _ap_, _ao_);
    }
    function transform_v(constants_in_scope$0, param, value$1){
     var
      evaluated = constants_in_scope$0[2],
      constants_in_scope = constants_in_scope$0[1],
      value_with_id =
        caml_call4
          (Recurse[2],
           [0, constants_in_scope, evaluated],
           0,
           -582119678,
           value$1)
         [3],
      id = value_with_id[3],
      value = value_with_id[1];
     function rebuild(value){
      return [0, value, value_with_id[2], value_with_id[3]];
     }
     switch(value[0]){
       case 2:
        var
         match = caml_call2(Constants_in_scope[10], constants_in_scope, id);
        if(match)
         var value$0 = match[1], _f_ = value$0;
        else
         var _f_ = value_with_id;
        break;
       case 3:
        var
         b = value[2],
         a = value[1],
         _f_ =
           value_exception_folder
            (function(param){
              var
               match = contents_if_value_is_constant(a),
               match$0 = contents_if_value_is_constant(b);
              if(match){
               var l = match[1];
               if(match$0)
                var r = match$0[1], _al_ = [0, [0, l, r]];
               else
                var _al_ = [5, b, function(b){return [0, l, b];}];
               var value$0 = _al_;
              }
              else if(match$0)
               var
                r$0 = match$0[1],
                value$0 = [5, a, function(a){return [0, a, r$0];}];
              else
               var value$0 = value;
              return rebuild(value$0);
             });
        break;
       case 4:
        var
         was_wrapper_cutoff_added_by_le = value[3],
         equal = value[2],
         t = value[1],
         _f_ =
           value_exception_folder
            (function(param){
              var _ai_ = contents_if_value_is_constant(t), match = t[1];
              if(_ai_)
               var v = _ai_[1], _aj_ = [0, v];
              else if(4 === match[0])
               var
                was_nested_cutoff_added_by_let = match[3],
                inner_equal = match[2],
                t$0 = match[1],
                added_by_let_syntax =
                  was_wrapper_cutoff_added_by_le
                   ? was_nested_cutoff_added_by_let
                   : was_wrapper_cutoff_added_by_le,
                _aj_ =
                  [4,
                   t$0,
                   function(a, b){
                    var _ak_ = caml_call2(inner_equal, a, b);
                    return _ak_ ? _ak_ : caml_call2(equal, a, b);
                   },
                   added_by_let_syntax];
              else
               var _aj_ = value;
              return rebuild(_aj_);
             });
        break;
       case 5:
        var
         f = value[2],
         t$0 = value[1],
         _f_ =
           constant_or_value
            (value_with_id,
             function(param){
              function _ag_(t1){return caml_call1(f, t1);}
              var _ah_ = contents_if_value_is_constant(t$0);
              return caml_call2(Base_Option[29][4][3], _ah_, _ag_);
             });
        break;
       case 6:
        var
         f$0 = value[3],
         t2 = value[2],
         t1 = value[1],
         _f_ =
           constant_or_value
            (value_with_id,
             function(param){
              function _ac_(t1){
               function _ae_(t2){return caml_call2(f$0, t1, t2);}
               var _af_ = contents_if_value_is_constant(t2);
               return caml_call2(Base_Option[29][4][3], _af_, _ae_);
              }
              var _ad_ = contents_if_value_is_constant(t1);
              return caml_call2(Base_Option[29][4][2], _ad_, _ac_);
             });
        break;
       case 7:
        var
         f$1 = value[4],
         t3 = value[3],
         t2$0 = value[2],
         t1$0 = value[1],
         _f_ =
           constant_or_value
            (value_with_id,
             function(param){
              function _Y_(t1){
               function ___(t2){
                function _aa_(t3){return caml_call3(f$1, t1, t2, t3);}
                var _ab_ = contents_if_value_is_constant(t3);
                return caml_call2(Base_Option[29][4][3], _ab_, _aa_);
               }
               var _$_ = contents_if_value_is_constant(t2$0);
               return caml_call2(Base_Option[29][4][2], _$_, ___);
              }
              var _Z_ = contents_if_value_is_constant(t1$0);
              return caml_call2(Base_Option[29][4][2], _Z_, _Y_);
             });
        break;
       case 8:
        var
         f$2 = value[5],
         t4 = value[4],
         t3$0 = value[3],
         t2$1 = value[2],
         t1$1 = value[1],
         _f_ =
           constant_or_value
            (value_with_id,
             function(param){
              function _Q_(t1){
               function _S_(t2){
                function _U_(t3){
                 function _W_(t4){return caml_call4(f$2, t1, t2, t3, t4);}
                 var _X_ = contents_if_value_is_constant(t4);
                 return caml_call2(Base_Option[29][4][3], _X_, _W_);
                }
                var _V_ = contents_if_value_is_constant(t3$0);
                return caml_call2(Base_Option[29][4][2], _V_, _U_);
               }
               var _T_ = contents_if_value_is_constant(t2$1);
               return caml_call2(Base_Option[29][4][2], _T_, _S_);
              }
              var _R_ = contents_if_value_is_constant(t1$1);
              return caml_call2(Base_Option[29][4][2], _R_, _Q_);
             });
        break;
       case 9:
        var
         f$3 = value[6],
         t5 = value[5],
         t4$0 = value[4],
         t3$1 = value[3],
         t2$2 = value[2],
         t1$2 = value[1],
         _f_ =
           constant_or_value
            (value_with_id,
             function(param){
              function _G_(t1){
               function _I_(t2){
                function _K_(t3){
                 function _M_(t4){
                  function _O_(t5){
                   return caml_call5(f$3, t1, t2, t3, t4, t5);
                  }
                  var _P_ = contents_if_value_is_constant(t5);
                  return caml_call2(Base_Option[29][4][3], _P_, _O_);
                 }
                 var _N_ = contents_if_value_is_constant(t4$0);
                 return caml_call2(Base_Option[29][4][2], _N_, _M_);
                }
                var _L_ = contents_if_value_is_constant(t3$1);
                return caml_call2(Base_Option[29][4][2], _L_, _K_);
               }
               var _J_ = contents_if_value_is_constant(t2$2);
               return caml_call2(Base_Option[29][4][2], _J_, _I_);
              }
              var _H_ = contents_if_value_is_constant(t1$2);
              return caml_call2(Base_Option[29][4][2], _H_, _G_);
             });
        break;
       case 10:
        var
         f$4 = value[7],
         t6 = value[6],
         t5$0 = value[5],
         t4$1 = value[4],
         t3$2 = value[3],
         t2$3 = value[2],
         t1$3 = value[1],
         _f_ =
           constant_or_value
            (value_with_id,
             function(param){
              function _u_(t1){
               function _w_(t2){
                function _y_(t3){
                 function _A_(t4){
                  function _C_(t5){
                   function _E_(t6){
                    return caml_call6(f$4, t1, t2, t3, t4, t5, t6);
                   }
                   var _F_ = contents_if_value_is_constant(t6);
                   return caml_call2(Base_Option[29][4][3], _F_, _E_);
                  }
                  var _D_ = contents_if_value_is_constant(t5$0);
                  return caml_call2(Base_Option[29][4][2], _D_, _C_);
                 }
                 var _B_ = contents_if_value_is_constant(t4$1);
                 return caml_call2(Base_Option[29][4][2], _B_, _A_);
                }
                var _z_ = contents_if_value_is_constant(t3$2);
                return caml_call2(Base_Option[29][4][2], _z_, _y_);
               }
               var _x_ = contents_if_value_is_constant(t2$3);
               return caml_call2(Base_Option[29][4][2], _x_, _w_);
              }
              var _v_ = contents_if_value_is_constant(t1$3);
              return caml_call2(Base_Option[29][4][2], _v_, _u_);
             });
        break;
       case 11:
        var
         f$5 = value[8],
         t7 = value[7],
         t6$0 = value[6],
         t5$1 = value[5],
         t4$2 = value[4],
         t3$3 = value[3],
         t2$4 = value[2],
         t1$4 = value[1],
         _f_ =
           constant_or_value
            (value_with_id,
             function(param){
              function _g_(t1){
               function _i_(t2){
                function _k_(t3){
                 function _m_(t4){
                  function _o_(t5){
                   function _q_(t6){
                    function _s_(t7){
                     return caml_call7(f$5, t1, t2, t3, t4, t5, t6, t7);
                    }
                    var _t_ = contents_if_value_is_constant(t7);
                    return caml_call2(Base_Option[29][4][3], _t_, _s_);
                   }
                   var _r_ = contents_if_value_is_constant(t6$0);
                   return caml_call2(Base_Option[29][4][2], _r_, _q_);
                  }
                  var _p_ = contents_if_value_is_constant(t5$1);
                  return caml_call2(Base_Option[29][4][2], _p_, _o_);
                 }
                 var _n_ = contents_if_value_is_constant(t4$2);
                 return caml_call2(Base_Option[29][4][2], _n_, _m_);
                }
                var _l_ = contents_if_value_is_constant(t3$3);
                return caml_call2(Base_Option[29][4][2], _l_, _k_);
               }
               var _j_ = contents_if_value_is_constant(t2$4);
               return caml_call2(Base_Option[29][4][2], _j_, _i_);
              }
              var _h_ = contents_if_value_is_constant(t1$4);
              return caml_call2(Base_Option[29][4][2], _h_, _g_);
             });
        break;
       default: var _f_ = value_with_id;
     }
     return [0, 0, 0, _f_];
    }
    function transform_c(constants_in_scope, param, c){
     function _d_(r){
      return caml_call1(Bonsai_Trampoline[5][1], [0, 0, 0, r]);
     }
     var _e_ = _c_(constants_in_scope, c);
     return caml_call2(Bonsai_Trampoline[5][2][2], _e_, _d_);
    }
    return [0, transform_c, transform_v];
   }
   var
    open =
      caml_call1
       (caml_call1
         (Bonsai_Fix_transform[1],
          [0, Down, [0], Bonsai_Fix_transform_intf[1]]),
        _a_),
    transform_c = open[1];
   function constant_fold(c){
    var
     _b_ = caml_call3(transform_c, [0, Constants_in_scope[4], 0], 0, c),
     r = caml_call1(Bonsai_Trampoline[2], _b_)[3];
    return r;
   }
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Constant_fold);
   var Bonsai_Constant_fold = [0, constant_fold];
   runtime.caml_register_global
    (31, Bonsai_Constant_fold, cst_Bonsai_Constant_fold$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Flatten_values
//# unitInfo: Requires: Bonsai__Fix_transform, Bonsai__Fix_transform_intf, Bonsai__Trampoline, Core__Unit, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_Flatten_values$0 = "Bonsai__Flatten_values",
    cst_bonsai$0 = "bonsai";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Bonsai_Trampoline = global_data.Bonsai__Trampoline,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Bonsai_Fix_transform_intf = global_data.Bonsai__Fix_transform_intf,
    Bonsai_Fix_transform = global_data.Bonsai__Fix_transform;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Flatten_values$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/flatten_values.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai$0, "flatten_values.ml");
   var
    cst_bonsai = cst_bonsai$0,
    cst_Bonsai_Flatten_values = cst_Bonsai_Flatten_values$0;
   function value_map(param){
    var id = param[3], here = param[2], value = param[1];
    a:
    {
     switch(value[0]){
       case 3:
        var _e_ = value[2][1];
        if(3 === _e_[0]){
         var t2 = _e_[1], t1 = value[1], _f_ = _e_[2][1];
         if(3 === _f_[0]){
          var t3$0 = _f_[1], _h_ = _f_[2][1];
          if(3 === _h_[0]){
           var t4$0 = _h_[1], _j_ = _h_[2][1];
           if(3 === _j_[0]){
            var t5$0 = _j_[1], match = _j_[2][1];
            if(3 === match[0])
             var
              t7 = match[2],
              t6$0 = match[1],
              _l_ =
                [11,
                 t1,
                 t2,
                 t3$0,
                 t4$0,
                 t5$0,
                 t6$0,
                 t7,
                 function(t1, t2, t3, t4, t5, t6, t7){
                  return [0,
                          t1,
                          [0, t2, [0, t3, [0, t4, [0, t5, [0, t6, t7]]]]]];
                 }];
            else
             var
              t6 = _j_[2],
              _l_ =
                [10,
                 t1,
                 t2,
                 t3$0,
                 t4$0,
                 t5$0,
                 t6,
                 function(t1, t2, t3, t4, t5, t6){
                  return [0, t1, [0, t2, [0, t3, [0, t4, [0, t5, t6]]]]];
                 }];
            var _k_ = _l_;
           }
           else
            var
             t5 = _h_[2],
             _k_ =
               [9,
                t1,
                t2,
                t3$0,
                t4$0,
                t5,
                function(t1, t2, t3, t4, t5){
                 return [0, t1, [0, t2, [0, t3, [0, t4, t5]]]];
                }];
           var _i_ = _k_;
          }
          else
           var
            t4 = _f_[2],
            _i_ =
              [8,
               t1,
               t2,
               t3$0,
               t4,
               function(t1, t2, t3, t4){return [0, t1, [0, t2, [0, t3, t4]]];}];
          var _g_ = _i_;
         }
         else
          var
           t3 = _e_[2],
           _g_ =
             [7,
              t1,
              t2,
              t3,
              function(t1, t2, t3){return [0, t1, [0, t2, t3]];}];
         var value$0 = _g_;
         break a;
        }
        break;
       case 5:
        var _m_ = value[1][1];
        if(3 === _m_[0]){
         var t1$0 = _m_[1], _n_ = _m_[2][1];
         if(3 === _n_[0]){
          var t2$1 = _n_[1], _p_ = _n_[2][1];
          if(3 === _p_[0]){
           var t3$2 = _p_[1], _r_ = _p_[2][1];
           if(3 === _r_[0]){
            var t4$2 = _r_[1], _t_ = _r_[2][1];
            if(3 === _t_[0]){
             var t5$2 = _t_[1], match$0 = _t_[2][1];
             if(3 === match$0[0])
              var
               f$4 = value[2],
               t7$0 = match$0[2],
               t6$2 = match$0[1],
               _v_ =
                 [11,
                  t1$0,
                  t2$1,
                  t3$2,
                  t4$2,
                  t5$2,
                  t6$2,
                  t7$0,
                  function(t1, t2, t3, t4, t5, t6, t7){
                   return caml_call1
                           (f$4,
                            [0, t1, [0, t2, [0, t3, [0, t4, [0, t5, [0, t6, t7]]]]]]);
                  }];
             else
              var
               f$3 = value[2],
               t6$1 = _t_[2],
               _v_ =
                 [10,
                  t1$0,
                  t2$1,
                  t3$2,
                  t4$2,
                  t5$2,
                  t6$1,
                  function(t1, t2, t3, t4, t5, t6){
                   return caml_call1
                           (f$3, [0, t1, [0, t2, [0, t3, [0, t4, [0, t5, t6]]]]]);
                  }];
             var _u_ = _v_;
            }
            else
             var
              f$2 = value[2],
              t5$1 = _r_[2],
              _u_ =
                [9,
                 t1$0,
                 t2$1,
                 t3$2,
                 t4$2,
                 t5$1,
                 function(t1, t2, t3, t4, t5){
                  return caml_call1
                          (f$2, [0, t1, [0, t2, [0, t3, [0, t4, t5]]]]);
                 }];
            var _s_ = _u_;
           }
           else
            var
             f$1 = value[2],
             t4$1 = _p_[2],
             _s_ =
               [8,
                t1$0,
                t2$1,
                t3$2,
                t4$1,
                function(t1, t2, t3, t4){
                 return caml_call1(f$1, [0, t1, [0, t2, [0, t3, t4]]]);
                }];
           var _q_ = _s_;
          }
          else
           var
            f$0 = value[2],
            t3$1 = _n_[2],
            _q_ =
              [7,
               t1$0,
               t2$1,
               t3$1,
               function(t1, t2, t3){
                return caml_call1(f$0, [0, t1, [0, t2, t3]]);
               }];
          var _o_ = _q_;
         }
         else
          var
           f = value[2],
           t2$0 = _m_[2],
           _o_ =
             [6,
              t1$0,
              t2$0,
              function(t1, t2){return caml_call1(f, [0, t1, t2]);}];
         var value$0 = _o_;
         break a;
        }
        break;
     }
     var value$0 = value;
    }
    return [0, value$0, here, id];
   }
   function _a_(Recurse){
    function transform_v(param, _d_, v){
     var out = value_map(v);
     return caml_call4(Recurse[2], 0, 0, -582119678, out);
    }
    function transform_c(param, _c_, c){
     return caml_call4(Recurse[1], 0, 0, -582119678, c);
    }
    return [0, transform_c, transform_v];
   }
   var
    open =
      caml_call1
       (caml_call1
         (Bonsai_Fix_transform[1],
          [0, [0], [0], Bonsai_Fix_transform_intf[1]]),
        _a_),
    transform_c = open[1];
   function flatten_values(c){
    var
     _b_ = caml_call3(transform_c, 0, 0, c),
     r = caml_call1(Bonsai_Trampoline[2], _b_)[3];
    return r;
   }
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Flatten_values);
   var Bonsai_Flatten_values = [0, flatten_values];
   runtime.caml_register_global
    (14, Bonsai_Flatten_values, cst_Bonsai_Flatten_values$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Pre_process
//# unitInfo: Requires: Bonsai__Constant_fold, Bonsai__Flatten_values, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_Pre_process$0 = "Bonsai__Pre_process",
    cst_bonsai$0 = "bonsai";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Bonsai_Constant_fold = global_data.Bonsai__Constant_fold,
    Bonsai_Flatten_values = global_data.Bonsai__Flatten_values,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Pre_process$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/pre_process.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai$0, "pre_process.ml");
   var
    cst_bonsai = cst_bonsai$0,
    cst_Bonsai_Pre_process = cst_Bonsai_Pre_process$0;
   function pre_process(t){
    var _a_ = caml_call1(Bonsai_Constant_fold[1], t);
    return caml_call1(Bonsai_Flatten_values[1], _a_);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Pre_process);
   var Bonsai_Pre_process = [0, pre_process];
   runtime.caml_register_global
    (13, Bonsai_Pre_process, cst_Bonsai_Pre_process$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Skeleton
//# unitInfo: Requires: Base__Hash, Bonsai__Meta, Bonsai__Node_path, CamlinternalLazy, CamlinternalOO, Core, Core__Fn, Core__Hashtbl, Core__Int, Core__Lazy, Core__List, Core__Map, Core__Option, Core__Sexp, Core__Source_code_position, Core__String, Core__Type_equal, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Assoc = "Assoc",
    cst_Assoc_on = "Assoc_on",
    cst_Assoc_simpl = "Assoc_simpl",
    cst_Bonsai_Skeleton$0 = "Bonsai__Skeleton",
    cst_Constant = "Constant",
    cst_Cutoff = "Cutoff",
    cst_Exception = "Exception",
    cst_Fetch = "Fetch",
    cst_Identity = "Identity",
    cst_Incr = "Incr",
    cst_Lazy = "Lazy",
    cst_Leaf0 = "Leaf0",
    cst_Leaf01 = "Leaf01",
    cst_Leaf1 = "Leaf1",
    cst_Leaf_incr = "Leaf_incr",
    cst_Lifecycle = "Lifecycle",
    cst_Mapn = "Mapn",
    cst_Model_cutoff = "Model_cutoff",
    cst_Named = "Named",
    cst_Path = "Path",
    cst_Return = "Return",
    cst_Store = "Store",
    cst_Sub = "Sub",
    cst_Switch = "Switch",
    cst_With_model_resetter = "With_model_resetter",
    cst_Wrap = "Wrap",
    cst_added_by_let_syntax = "added_by_let_syntax",
    cst_arms = "arms",
    cst_bonsai$0 = "bonsai",
    cst_bool = "bool",
    cst_by = "by",
    cst_cmp_id = "cmp_id",
    cst_computation = "computation",
    cst_computation_kind = "computation_kind",
    cst_data_id = "data_id",
    cst_from = "from",
    cst_here = "here",
    cst_id = "id",
    cst_inject_id = "inject_id",
    cst_inner = "inner",
    cst_input = "input",
    cst_inputs = "inputs",
    cst_into = "into",
    cst_io_key_id = "io_key_id",
    cst_key_id = "key_id",
    cst_kind = "kind",
    cst_lazy = "lazy_",
    cst_list = "list",
    cst_map = "map",
    cst_match = "match_",
    cst_model_cmp_id = "model_cmp_id",
    cst_model_id = "model_id",
    cst_model_key_id = "model_key_id",
    cst_node_path = "node_path",
    cst_option = "option",
    cst_reset_id = "reset_id",
    cst_source_code_position = "source_code_position",
    cst_t = "t",
    cst_value = "value",
    cst_value_kind = "value_kind",
    cst_via = "via",
    caml_update_dummy = runtime.caml_update_dummy;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    _a_ =
      [0,
       cst_source_code_position,
       cst_option,
       cst_node_path,
       cst_list,
       cst_lazy,
       cst_id,
       cst_bool],
    _b_ =
      [0,
       cst_value_kind,
       cst_value,
       cst_source_code_position,
       cst_option,
       cst_node_path,
       cst_list,
       cst_lazy,
       cst_id,
       cst_computation_kind,
       cst_computation,
       cst_bool],
    _c_ =
      [0,
       cst_bool,
       cst_list,
       cst_computation_kind,
       cst_lazy,
       cst_id,
       cst_node_path,
       cst_value_kind,
       cst_computation,
       cst_option,
       cst_value,
       cst_source_code_position],
    shared =
      [0, cst_computation, cst_computation_kind, cst_value, cst_value_kind],
    CamlinternalOO = global_data.CamlinternalOO,
    Core_Hashtbl = global_data.Core__Hashtbl,
    Core_Option = global_data.Core__Option,
    Core_List = global_data.Core__List,
    Core_Lazy = global_data.Core__Lazy,
    Core_Fn = global_data.Core__Fn,
    Core = global_data.Core,
    Bonsai_Node_path = global_data.Bonsai__Node_path,
    Core_Map = global_data.Core__Map,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Core_Source_code_position = global_data.Core__Source_code_position,
    Core_String = global_data.Core__String,
    Bonsai_Meta = global_data.Bonsai__Meta,
    Core_Type_equal = global_data.Core__Type_equal,
    Core_Sexp = global_data.Core__Sexp,
    Core_Int = global_data.Core__Int,
    Base_Hash = global_data.Base__Hash,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Skeleton$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/skeleton.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai$0, "skeleton.ml");
   var
    _bB_ = [12, 0],
    _aM_ = [0, cst_Leaf0],
    _aN_ = [0, cst_Path],
    _aO_ = [0, cst_value],
    _aP_ = [0, cst_Return],
    _aQ_ = [0, cst_input],
    _aR_ = [0, cst_Leaf01],
    _aS_ = [0, cst_input],
    _aT_ = [0, cst_Leaf1],
    _aU_ = [0, cst_input],
    _aV_ = [0, cst_Leaf_incr],
    _aW_ = [0, cst_t],
    _aX_ = [0, cst_Model_cutoff],
    _aY_ = [0, cst_into],
    _aZ_ = [0, cst_via],
    _a0_ = [0, cst_from],
    _a1_ = [0, cst_Sub],
    _a2_ = [0, cst_inner],
    _a3_ = [0, cst_value],
    _a4_ = [0, cst_id],
    _a5_ = [0, cst_Store],
    _a6_ = [0, cst_id],
    _a7_ = [0, cst_Fetch],
    _a8_ = [0, cst_by],
    _a9_ = [0, cst_data_id],
    _a__ = [0, cst_cmp_id],
    _a$_ = [0, cst_key_id],
    _ba_ = [0, cst_map],
    _bb_ = [0, cst_Assoc],
    _bc_ = [0, cst_by],
    _bd_ = [0, cst_data_id],
    _be_ = [0, cst_model_cmp_id],
    _bf_ = [0, cst_model_key_id],
    _bg_ = [0, cst_io_key_id],
    _bh_ = [0, cst_map],
    _bi_ = [0, cst_Assoc_on],
    _bj_ = [0, cst_map],
    _bk_ = [0, cst_Assoc_simpl],
    _bl_ = [0, cst_arms],
    _bm_ = [0, cst_match],
    _bn_ = [0, cst_Switch],
    _bo_ = [0, cst_t],
    _bp_ = [0, cst_Lazy],
    _bq_ = [0, cst_inner],
    _br_ = [0, cst_inject_id],
    _bs_ = [0, cst_model_id],
    _bt_ = [0, cst_Wrap],
    _bu_ = [0, cst_reset_id],
    _bv_ = [0, cst_inner],
    _bw_ = [0, cst_With_model_resetter],
    _bx_ = [0, cst_value],
    _by_ = [0, cst_Lifecycle],
    _bz_ = [0, cst_t],
    _bA_ = [0, cst_Identity],
    _K_ = [0, cst_here],
    _L_ = [0, cst_kind],
    _M_ = [0, cst_node_path],
    _N_ = [0, cst_Leaf0],
    _O_ = [0, cst_Path],
    _P_ = [0, cst_value],
    _Q_ = [0, cst_Return],
    _R_ = [0, cst_input],
    _S_ = [0, cst_Leaf01],
    _T_ = [0, cst_input],
    _U_ = [0, cst_Leaf1],
    _V_ = [0, cst_input],
    _W_ = [0, cst_Leaf_incr],
    _X_ = [0, cst_t],
    _Y_ = [0, cst_Model_cutoff],
    _Z_ = [0, cst_into],
    ___ = [0, cst_via],
    _$_ = [0, cst_from],
    _aa_ = [0, cst_Sub],
    _ab_ = [0, cst_inner],
    _ac_ = [0, cst_value],
    _ad_ = [0, cst_id],
    _ae_ = [0, cst_Store],
    _af_ = [0, cst_id],
    _ag_ = [0, cst_Fetch],
    _ah_ = [0, cst_by],
    _ai_ = [0, cst_data_id],
    _aj_ = [0, cst_cmp_id],
    _ak_ = [0, cst_key_id],
    _al_ = [0, cst_map],
    _am_ = [0, cst_Assoc],
    _an_ = [0, cst_by],
    _ao_ = [0, cst_data_id],
    _ap_ = [0, cst_model_cmp_id],
    _aq_ = [0, cst_model_key_id],
    _ar_ = [0, cst_io_key_id],
    _as_ = [0, cst_map],
    _at_ = [0, cst_Assoc_on],
    _au_ = [0, cst_map],
    _av_ = [0, cst_Assoc_simpl],
    _aw_ = [0, cst_arms],
    _ax_ = [0, cst_match],
    _ay_ = [0, cst_Switch],
    _az_ = [0, cst_t],
    _aA_ = [0, cst_Lazy],
    _aB_ = [0, cst_inner],
    _aC_ = [0, cst_inject_id],
    _aD_ = [0, cst_model_id],
    _aE_ = [0, cst_Wrap],
    _aF_ = [0, cst_inner],
    _aG_ = [0, cst_reset_id],
    _aH_ = [0, cst_With_model_resetter],
    _aI_ = [0, cst_value],
    _aJ_ = [0, cst_Lifecycle],
    _aK_ = [0, cst_t],
    _aL_ = [0, cst_Identity],
    _E_ = [0, [11, "constant_", [2, 0, 0]], "constant_%s"],
    _F_ = [0, [11, "exception_", [2, 0, 0]], "exception_%s"],
    cst_incr = "incr",
    _G_ = [0, [12, 120, [2, 0, 0]], "x%s"],
    _H_ = [0, [11, "(cutoff ", [2, 0, [12, 41, 0]]], "(cutoff %s)"],
    _I_ = [0, " "],
    _J_ = [0, [11, "(mapn ", [2, 0, [12, 41, 0]]], "(mapn %s)"],
    _t_ = [0, cst_Exception],
    _u_ = [0, cst_Incr],
    _v_ = [0, cst_id],
    _w_ = [0, cst_Constant],
    _x_ = [0, "uid"],
    _y_ = [0, cst_Named],
    _z_ = [0, cst_added_by_let_syntax],
    _A_ = [0, cst_t],
    _B_ = [0, cst_Cutoff],
    _C_ = [0, cst_inputs],
    _D_ = [0, cst_Mapn],
    _g_ = [0, cst_id],
    _h_ = [0, cst_here],
    _i_ = [0, cst_kind],
    _j_ = [0, cst_node_path],
    _k_ = [0, cst_Constant],
    _l_ = [0, cst_Exception],
    _m_ = [0, cst_Incr],
    _n_ = [0, cst_Named],
    _o_ = [0, cst_added_by_let_syntax],
    _p_ = [0, cst_t],
    _q_ = [0, cst_Cutoff],
    _r_ = [0, cst_inputs],
    _s_ = [0, cst_Mapn],
    _e_ = [0, "Type"],
    _f_ = [0, "Test"],
    _d_ =
      [0,
       cst_bool,
       cst_computation,
       cst_computation_kind,
       cst_id,
       cst_lazy,
       cst_list,
       cst_node_path,
       cst_option,
       cst_source_code_position,
       cst_value,
       cst_value_kind],
    cst_bonsai = cst_bonsai$0,
    cst_Bonsai_Skeleton = cst_Bonsai_Skeleton$0;
   function finalize(node_path_builder){
    return [246,
            function(_ec_){
             return caml_call1(Bonsai_Node_path[38], node_path_builder);
            }];
   }
   function compare(a_001, b_002){
    if(a_001 === b_002) return 0;
    if(0 === a_001[0]){
     var a_003 = a_001[1];
     if(0 !== b_002[0]) return -1;
     var b_004 = b_002[1];
     return caml_call2(Core_Type_equal[8][11][23], a_003, b_004);
    }
    var a_005 = a_001[1];
    if(0 === b_002[0]) return 1;
    var b_006 = b_002[1];
    return caml_call2(Core[382], a_005, b_006);
   }
   function hash_fold_t(hsv, arg){
    if(0 === arg[0]){
     var a0 = arg[1], hsv$0 = caml_call2(Base_Hash[3], hsv, 0);
     return caml_call2(Core_Type_equal[8][11][24], hsv$0, a0);
    }
    var a0$0 = arg[1], hsv$1 = caml_call2(Base_Hash[3], hsv, 1);
    return caml_call2(Core[387], hsv$1, a0$0);
   }
   function hash(arg){
    var hsv = caml_call2(Base_Hash[11], 0, 0), _eb_ = hash_fold_t(hsv, arg);
    return caml_call1(Base_Hash[9], _eb_);
   }
   function sexp_of_t(param){
    if(0 === param[0]){
     var
      arg0_007 = param[1],
      res0_008 = caml_call1(Core_Type_equal[8][11][1], arg0_007);
     return [1, [0, _e_, [0, res0_008, 0]]];
    }
    var arg0_009 = param[1], res0_010 = caml_call1(Core[389], arg0_009);
    return [1, [0, _f_, [0, res0_010, 0]]];
   }
   function to_string(t){
    if(0 === t[0]){
     var uid = t[1], _ea_ = caml_call1(Core_Type_equal[8][11][1], uid);
     return caml_call1(Core_Sexp[86], _ea_);
    }
    var int$0 = t[1];
    return caml_call1(Core_Int[79], int$0);
   }
   function of_type_id(id){return [0, caml_call1(Core_Type_equal[8][2], id)];}
   function sexp_of_t$0(param){
    var
     id_018 = param[4],
     here_016 = param[3],
     kind_014 = param[2],
     node_path_012 = param[1],
     arg_019 = sexp_of_t(id_018),
     bnds_011 = [0, [1, [0, _g_, [0, arg_019, 0]]], 0],
     arg_017 =
       caml_call2(Core[515], Core_Source_code_position[38][1][13], here_016),
     bnds_011$0 = [0, [1, [0, _h_, [0, arg_017, 0]]], bnds_011],
     arg_015 = sexp_of_kind(kind_014),
     bnds_011$1 = [0, [1, [0, _i_, [0, arg_015, 0]]], bnds_011$0],
     arg_013 = caml_call2(Core_Lazy[23], Bonsai_Node_path[10], node_path_012),
     bnds_011$2 = [0, [1, [0, _j_, [0, arg_013, 0]]], bnds_011$1];
    return [1, bnds_011$2];
   }
   function sexp_of_kind(param){
    if(typeof param === "number")
     switch(param){
       case 0:
        return _k_;
       case 1:
        return _l_;
       case 2:
        return _m_;
       default: return _n_;
     }
    if(0 === param[0]){
     var
      added_by_let_syntax_023 = param[2],
      t_021 = param[1],
      arg_024 = caml_call1(Core[323], added_by_let_syntax_023),
      bnds_020 = [0, [1, [0, _o_, [0, arg_024, 0]]], 0],
      arg_022 = sexp_of_t$0(t_021),
      bnds_020$0 = [0, [1, [0, _p_, [0, arg_022, 0]]], bnds_020];
     return [1, [0, _q_, bnds_020$0]];
    }
    var
     inputs_026 = param[1],
     arg_027 = caml_call2(Core[472], sexp_of_t$0, inputs_026),
     bnds_025 = [0, [1, [0, _r_, [0, arg_027, 0]]], 0];
    return [1, [0, _s_, bnds_025]];
   }
   function sexp_of_t$1(param){
    if(typeof param === "number") return 0 === param ? _t_ : _u_;
    switch(param[0]){
      case 0:
       var
        id_029 = param[1],
        arg_030 = sexp_of_t(id_029),
        bnds_028 = [0, [1, [0, _v_, [0, arg_030, 0]]], 0];
       return [1, [0, _w_, bnds_028]];
      case 1:
       var
        uid_032 = param[1],
        arg_033 = sexp_of_t(uid_032),
        bnds_031 = [0, [1, [0, _x_, [0, arg_033, 0]]], 0];
       return [1, [0, _y_, bnds_031]];
      case 2:
       var
        added_by_let_syntax_037 = param[2],
        t_035 = param[1],
        arg_038 = caml_call1(Core[323], added_by_let_syntax_037),
        bnds_034 = [0, [1, [0, _z_, [0, arg_038, 0]]], 0],
        arg_036 = sexp_of_t$1(t_035),
        bnds_034$0 = [0, [1, [0, _A_, [0, arg_036, 0]]], bnds_034];
       return [1, [0, _B_, bnds_034$0]];
      default:
       var
        inputs_040 = param[1],
        arg_041 = caml_call2(Core[472], sexp_of_t$1, inputs_040),
        bnds_039 = [0, [1, [0, _C_, [0, arg_041, 0]]], 0];
       return [1, [0, _D_, bnds_039]];
    }
   }
   function of_complete(complete){
    var match = complete[2];
    if(typeof match === "number")
     switch(match){
       case 0:
        return [0, complete[4]];
       case 1:
        return 0;
       case 2:
        return 1;
       default: return [1, complete[4]];
     }
    if(0 === match[0]){
     var added_by_let_syntax = match[2], t = match[1];
     return [2, of_complete(t), added_by_let_syntax];
    }
    var inputs = match[1];
    return [3, caml_call2(Core_List[51], inputs, of_complete)];
   }
   function minimal_sexp_of_t(t){return sexp_of_t$1(of_complete(t));}
   function inputs(param){
    var kind = param[2];
    if(typeof kind === "number") return 0;
    if(0 === kind[0]){var t = kind[1]; return [0, t, 0];}
    var inputs = kind[1];
    return inputs;
   }
   function of_value(initial_path, value){
    var helper = function _d$_(_d9_, _d__){return _d$_.fun(_d9_, _d__);};
    function create_mapn_with_choices(current_path, values){
     function _d7_(i, param){
      var
       value = param[1],
       _d8_ = caml_call2(Bonsai_Node_path[36], current_path, i + 1 | 0);
      return caml_call2(helper, caml_call1(Bonsai_Node_path[37], _d8_), value);
     }
     return [1, caml_call2(Core_List[41], values, _d7_)];
    }
    caml_update_dummy
     (helper,
      function(current_path, param){
       var outer_id = param[3], here = param[2], value = param[1];
       switch(value[0]){
         case 0:
          var kind = 0; break;
         case 1:
          var kind = 2; break;
         case 2:
          var kind = 3; break;
         case 3:
          var
           t2 = value[2],
           t1 = value[1],
           kind =
             create_mapn_with_choices
              (current_path, [0, [0, t1], [0, [0, t2], 0]]);
          break;
         case 4:
          var
           added_by_let_syntax = value[3],
           t = value[1],
           _d6_ = caml_call2(Bonsai_Node_path[36], current_path, 1),
           kind =
             [0,
              caml_call2(helper, caml_call1(Bonsai_Node_path[37], _d6_), t),
              added_by_let_syntax];
          break;
         case 5:
          var
           t$0 = value[1],
           kind = create_mapn_with_choices(current_path, [0, [0, t$0], 0]);
          break;
         case 6:
          var
           t2$0 = value[2],
           t1$0 = value[1],
           kind =
             create_mapn_with_choices
              (current_path, [0, [0, t1$0], [0, [0, t2$0], 0]]);
          break;
         case 7:
          var
           t3 = value[3],
           t2$1 = value[2],
           t1$1 = value[1],
           kind =
             create_mapn_with_choices
              (current_path, [0, [0, t1$1], [0, [0, t2$1], [0, [0, t3], 0]]]);
          break;
         case 8:
          var
           t4 = value[4],
           t3$0 = value[3],
           t2$2 = value[2],
           t1$2 = value[1],
           kind =
             create_mapn_with_choices
              (current_path,
               [0, [0, t1$2], [0, [0, t2$2], [0, [0, t3$0], [0, [0, t4], 0]]]]);
          break;
         case 9:
          var
           t5 = value[5],
           t4$0 = value[4],
           t3$1 = value[3],
           t2$3 = value[2],
           t1$3 = value[1],
           kind =
             create_mapn_with_choices
              (current_path,
               [0,
                [0, t1$3],
                [0,
                 [0, t2$3],
                 [0, [0, t3$1], [0, [0, t4$0], [0, [0, t5], 0]]]]]);
          break;
         case 10:
          var
           t6 = value[6],
           t5$0 = value[5],
           t4$1 = value[4],
           t3$2 = value[3],
           t2$4 = value[2],
           t1$4 = value[1],
           kind =
             create_mapn_with_choices
              (current_path,
               [0,
                [0, t1$4],
                [0,
                 [0, t2$4],
                 [0,
                  [0, t3$2],
                  [0, [0, t4$1], [0, [0, t5$0], [0, [0, t6], 0]]]]]]);
          break;
         case 11:
          var
           t7 = value[7],
           t6$0 = value[6],
           t5$1 = value[5],
           t4$2 = value[4],
           t3$3 = value[3],
           t2$5 = value[2],
           t1$5 = value[1],
           kind =
             create_mapn_with_choices
              (current_path,
               [0,
                [0, t1$5],
                [0,
                 [0, t2$5],
                 [0,
                  [0, t3$3],
                  [0,
                   [0, t4$2],
                   [0, [0, t5$1], [0, [0, t6$0], [0, [0, t7], 0]]]]]]]);
          break;
         default: var kind = 1;
       }
       var _d5_ = of_type_id(outer_id);
       return [0, finalize(current_path), kind, here, _d5_];
      });
    return caml_call2(helper, initial_path, value);
   }
   function of_value$0(value){
    return of_value
            (caml_call1(Bonsai_Node_path[37], Bonsai_Node_path[35]), value);
   }
   function to_string_hum(param){
    var id = param[4], kind = param[2];
    if(typeof kind === "number")
     switch(kind){
       case 0:
        var _dZ_ = to_string(id); return caml_call2(Core[265], _E_, _dZ_);
       case 1:
        var _d0_ = to_string(id); return caml_call2(Core[265], _F_, _d0_);
       case 2:
        return cst_incr;
       default:
        var _d1_ = to_string(id); return caml_call2(Core[265], _G_, _d1_);
     }
    if(0 === kind[0]){
     var t = kind[1], _d2_ = to_string_hum(t);
     return caml_call2(Core[265], _H_, _d2_);
    }
    var
     inputs = kind[1],
     _d3_ = caml_call2(Core_List[51], inputs, to_string_hum),
     _d4_ = caml_call2(Core_String[46], _I_, _d3_);
    return caml_call2(Core[265], _J_, _d4_);
   }
   function sexp_of_t$2(param){
    var
     here_047 = param[3],
     kind_045 = param[2],
     node_path_043 = param[1],
     arg_048 =
       caml_call2(Core[515], Core_Source_code_position[38][1][13], here_047),
     bnds_042 = [0, [1, [0, _K_, [0, arg_048, 0]]], 0],
     arg_046 = sexp_of_kind$0(kind_045),
     bnds_042$0 = [0, [1, [0, _L_, [0, arg_046, 0]]], bnds_042],
     arg_044 = caml_call2(Core_Lazy[23], Bonsai_Node_path[10], node_path_043),
     bnds_042$1 = [0, [1, [0, _M_, [0, arg_044, 0]]], bnds_042$0];
    return [1, bnds_042$1];
   }
   function sexp_of_kind$0(param){
    if(typeof param === "number") return 0 === param ? _N_ : _O_;
    switch(param[0]){
      case 0:
       var
        value_050 = param[1],
        arg_051 = sexp_of_t$0(value_050),
        bnds_049 = [0, [1, [0, _P_, [0, arg_051, 0]]], 0];
       return [1, [0, _Q_, bnds_049]];
      case 1:
       var
        input_053 = param[1],
        arg_054 = sexp_of_t$0(input_053),
        bnds_052 = [0, [1, [0, _R_, [0, arg_054, 0]]], 0];
       return [1, [0, _S_, bnds_052]];
      case 2:
       var
        input_056 = param[1],
        arg_057 = sexp_of_t$0(input_056),
        bnds_055 = [0, [1, [0, _T_, [0, arg_057, 0]]], 0];
       return [1, [0, _U_, bnds_055]];
      case 3:
       var
        input_059 = param[1],
        arg_060 = sexp_of_t$0(input_059),
        bnds_058 = [0, [1, [0, _V_, [0, arg_060, 0]]], 0];
       return [1, [0, _W_, bnds_058]];
      case 4:
       var
        t_062 = param[1],
        arg_063 = sexp_of_t$2(t_062),
        bnds_061 = [0, [1, [0, _X_, [0, arg_063, 0]]], 0];
       return [1, [0, _Y_, bnds_061]];
      case 5:
       var
        into_069 = param[3],
        via_067 = param[2],
        from_065 = param[1],
        arg_070 = sexp_of_t$2(into_069),
        bnds_064 = [0, [1, [0, _Z_, [0, arg_070, 0]]], 0],
        arg_068 = sexp_of_t(via_067),
        bnds_064$0 = [0, [1, [0, ___, [0, arg_068, 0]]], bnds_064],
        arg_066 = sexp_of_t$2(from_065),
        bnds_064$1 = [0, [1, [0, _$_, [0, arg_066, 0]]], bnds_064$0];
       return [1, [0, _aa_, bnds_064$1]];
      case 6:
       var
        inner_076 = param[3],
        value_074 = param[2],
        id_072 = param[1],
        arg_077 = sexp_of_t$2(inner_076),
        bnds_071 = [0, [1, [0, _ab_, [0, arg_077, 0]]], 0],
        arg_075 = sexp_of_t$0(value_074),
        bnds_071$0 = [0, [1, [0, _ac_, [0, arg_075, 0]]], bnds_071],
        arg_073 = sexp_of_t(id_072),
        bnds_071$1 = [0, [1, [0, _ad_, [0, arg_073, 0]]], bnds_071$0];
       return [1, [0, _ae_, bnds_071$1]];
      case 7:
       var
        id_079 = param[1],
        arg_080 = sexp_of_t(id_079),
        bnds_078 = [0, [1, [0, _af_, [0, arg_080, 0]]], 0];
       return [1, [0, _ag_, bnds_078]];
      case 8:
       var
        by_090 = param[5],
        data_id_088 = param[4],
        cmp_id_086 = param[3],
        key_id_084 = param[2],
        map_082 = param[1],
        arg_091 = sexp_of_t$2(by_090),
        bnds_081 = [0, [1, [0, _ah_, [0, arg_091, 0]]], 0],
        arg_089 = sexp_of_t(data_id_088),
        bnds_081$0 = [0, [1, [0, _ai_, [0, arg_089, 0]]], bnds_081],
        arg_087 = sexp_of_t(cmp_id_086),
        bnds_081$1 = [0, [1, [0, _aj_, [0, arg_087, 0]]], bnds_081$0],
        arg_085 = sexp_of_t(key_id_084),
        bnds_081$2 = [0, [1, [0, _ak_, [0, arg_085, 0]]], bnds_081$1],
        arg_083 = sexp_of_t$0(map_082),
        bnds_081$3 = [0, [1, [0, _al_, [0, arg_083, 0]]], bnds_081$2];
       return [1, [0, _am_, bnds_081$3]];
      case 9:
       var
        by_103 = param[6],
        data_id_101 = param[5],
        model_cmp_id_099 = param[4],
        model_key_id_097 = param[3],
        io_key_id_095 = param[2],
        map_093 = param[1],
        arg_104 = sexp_of_t$2(by_103),
        bnds_092 = [0, [1, [0, _an_, [0, arg_104, 0]]], 0],
        arg_102 = sexp_of_t(data_id_101),
        bnds_092$0 = [0, [1, [0, _ao_, [0, arg_102, 0]]], bnds_092],
        arg_100 = sexp_of_t(model_cmp_id_099),
        bnds_092$1 = [0, [1, [0, _ap_, [0, arg_100, 0]]], bnds_092$0],
        arg_098 = sexp_of_t(model_key_id_097),
        bnds_092$2 = [0, [1, [0, _aq_, [0, arg_098, 0]]], bnds_092$1],
        arg_096 = sexp_of_t(io_key_id_095),
        bnds_092$3 = [0, [1, [0, _ar_, [0, arg_096, 0]]], bnds_092$2],
        arg_094 = sexp_of_t$0(map_093),
        bnds_092$4 = [0, [1, [0, _as_, [0, arg_094, 0]]], bnds_092$3];
       return [1, [0, _at_, bnds_092$4]];
      case 10:
       var
        map_106 = param[1],
        arg_107 = sexp_of_t$0(map_106),
        bnds_105 = [0, [1, [0, _au_, [0, arg_107, 0]]], 0];
       return [1, [0, _av_, bnds_105]];
      case 11:
       var
        arms_111 = param[2],
        match_109 = param[1],
        arg_112 = caml_call2(Core[472], sexp_of_t$2, arms_111),
        bnds_108 = [0, [1, [0, _aw_, [0, arg_112, 0]]], 0],
        arg_110 = sexp_of_t$0(match_109),
        bnds_108$0 = [0, [1, [0, _ax_, [0, arg_110, 0]]], bnds_108];
       return [1, [0, _ay_, bnds_108$0]];
      case 12:
       var
        t_114 = param[1],
        arg_115 = caml_call2(Core[515], sexp_of_t$2, t_114),
        bnds_113 = [0, [1, [0, _az_, [0, arg_115, 0]]], 0];
       return [1, [0, _aA_, bnds_113]];
      case 13:
       var
        inner_121 = param[3],
        inject_id_119 = param[2],
        model_id_117 = param[1],
        arg_122 = sexp_of_t$2(inner_121),
        bnds_116 = [0, [1, [0, _aB_, [0, arg_122, 0]]], 0],
        arg_120 = sexp_of_t(inject_id_119),
        bnds_116$0 = [0, [1, [0, _aC_, [0, arg_120, 0]]], bnds_116],
        arg_118 = sexp_of_t(model_id_117),
        bnds_116$1 = [0, [1, [0, _aD_, [0, arg_118, 0]]], bnds_116$0];
       return [1, [0, _aE_, bnds_116$1]];
      case 14:
       var
        inner_126 = param[2],
        reset_id_124 = param[1],
        arg_127 = sexp_of_t$2(inner_126),
        bnds_123 = [0, [1, [0, _aF_, [0, arg_127, 0]]], 0],
        arg_125 = sexp_of_t(reset_id_124),
        bnds_123$0 = [0, [1, [0, _aG_, [0, arg_125, 0]]], bnds_123];
       return [1, [0, _aH_, bnds_123$0]];
      case 15:
       var
        value_129 = param[1],
        arg_130 = sexp_of_t$0(value_129),
        bnds_128 = [0, [1, [0, _aI_, [0, arg_130, 0]]], 0];
       return [1, [0, _aJ_, bnds_128]];
      default:
       var
        t_132 = param[1],
        arg_133 = sexp_of_t$2(t_132),
        bnds_131 = [0, [1, [0, _aK_, [0, arg_133, 0]]], 0];
       return [1, [0, _aL_, bnds_131]];
    }
   }
   function of_computation(computation){
    function helper(current_path, computation){
     function choice_point(choice){
      var _dY_ = caml_call2(Bonsai_Node_path[36], current_path, choice);
      return caml_call1(Bonsai_Node_path[37], _dY_);
     }
     var node_path = finalize(current_path);
     if(typeof computation === "number") return [0, node_path, 1, 0];
     switch(computation[0]){
       case 0:
        var value = computation[1];
        return [0,
                node_path,
                [0,
                 of_value
                  (caml_call1(Bonsai_Node_path[37], current_path), value)],
                0];
       case 1:
        var input = computation[6];
        return [0,
                node_path,
                [2,
                 of_value
                  (caml_call1(Bonsai_Node_path[37], current_path), input)],
                0];
       case 2:
        return [0, node_path, 0, 0];
       case 3:
        var input$0 = computation[1];
        return [0,
                node_path,
                [3,
                 of_value
                  (caml_call1(Bonsai_Node_path[37], current_path), input$0)],
                0];
       case 4:
        var
         here = computation[4],
         into = computation[3],
         via = computation[2],
         from = computation[1],
         _dD_ = helper(choice_point(2), into),
         _dE_ = of_type_id(via),
         kind = [5, helper(choice_point(1), from), _dE_, _dD_];
        return [0, node_path, kind, here];
       case 5:
        var
         inner = computation[3],
         value$0 = computation[2],
         id = computation[1],
         _dF_ = helper(choice_point(2), inner),
         _dG_ = of_value(choice_point(1), value$0),
         kind$0 = [6, of_type_id(id), _dG_, _dF_];
        return [0, node_path, kind$0, 0];
       case 6:
        var id$0 = computation[1], kind$1 = [7, of_type_id(id$0)];
        return [0, node_path, kind$1, 0];
       case 7:
        var
         by = computation[6],
         data_id = computation[5],
         cmp_id = computation[4],
         key_id = computation[3],
         map = computation[1],
         _dH_ = helper(choice_point(2), by),
         _dI_ = of_type_id(data_id),
         _dJ_ = of_type_id(cmp_id),
         _dK_ = of_type_id(key_id),
         kind$2 = [8, of_value(choice_point(1), map), _dK_, _dJ_, _dI_, _dH_];
        return [0, node_path, kind$2, 0];
       case 8:
        var
         by$0 = computation[9],
         data_id$0 = computation[8],
         model_cmp_id = computation[7],
         model_key_id = computation[6],
         io_key_id = computation[4],
         map$0 = computation[1],
         _dL_ = helper(choice_point(2), by$0),
         _dM_ = of_type_id(data_id$0),
         _dN_ = of_type_id(model_cmp_id),
         _dO_ = of_type_id(model_key_id),
         _dP_ = of_type_id(io_key_id),
         kind$3 =
           [9, of_value(choice_point(1), map$0), _dP_, _dO_, _dN_, _dM_, _dL_];
        return [0, node_path, kind$3, 0];
       case 9:
        var
         map$1 = computation[1],
         kind$4 =
           [10,
            of_value(caml_call1(Bonsai_Node_path[37], current_path), map$1)];
        return [0, node_path, kind$4, 0];
       case 10:
        var
         arms = computation[2],
         index = [0, 1],
         match = computation[1],
         _dQ_ =
           function(param, computation, acc){
            index[1]++;
            return [0, helper(choice_point(index[1]), computation), acc];
           },
         _dR_ = caml_call3(Core_Map[61], arms, 0, _dQ_),
         _dS_ = caml_call1(Core_List[59], _dR_),
         kind$5 = [11, of_value(choice_point(1), match), _dS_];
        return [0, node_path, kind$5, 0];
       case 11:
        var t = computation[1];
        if(caml_call1(Core_Lazy[40], t)){
         var _dT_ = runtime.caml_obj_tag(t);
         a:
         if(250 === _dT_)
          var _dU_ = t[1];
         else{
          if(246 !== _dT_ && 244 !== _dT_){var _dU_ = t; break a;}
          var _dU_ = caml_call1(CamlinternalLazy[2], t);
         }
         var
          potentially_evaluated =
            [0, helper(caml_call1(Bonsai_Node_path[37], current_path), _dU_)];
        }
        else
         var potentially_evaluated = 0;
        return [0, node_path, [12, potentially_evaluated], 0];
       case 12:
        var
         inner$0 = computation[6],
         inject_id = computation[4],
         wrapper_model = computation[1],
         _dV_ =
           helper(caml_call1(Bonsai_Node_path[37], current_path), inner$0),
         _dW_ = of_type_id(inject_id),
         id$1 = wrapper_model[3],
         kind$6 =
           [13,
            of_type_id(caml_call1(Bonsai_Meta[1][1][4], id$1)),
            _dW_,
            _dV_];
        return [0, node_path, kind$6, 0];
       case 13:
        var
         inner$1 = computation[2],
         reset_id = computation[1],
         _dX_ =
           helper(caml_call1(Bonsai_Node_path[37], current_path), inner$1),
         kind$7 = [14, of_type_id(reset_id), _dX_];
        return [0, node_path, kind$7, 0];
       default:
        var
         value$1 = computation[1],
         kind$8 =
           [15,
            of_value(caml_call1(Bonsai_Node_path[37], current_path), value$1)];
        return [0, node_path, kind$8, 0];
     }
    }
    return helper
            (caml_call1(Bonsai_Node_path[37], Bonsai_Node_path[35]),
             computation);
   }
   function sexp_of_t$3(param){
    if(typeof param === "number") return 0 === param ? _aM_ : _aN_;
    switch(param[0]){
      case 0:
       var
        value_135 = param[1],
        arg_136 = sexp_of_t$1(value_135),
        bnds_134 = [0, [1, [0, _aO_, [0, arg_136, 0]]], 0];
       return [1, [0, _aP_, bnds_134]];
      case 1:
       var
        input_138 = param[1],
        arg_139 = sexp_of_t$1(input_138),
        bnds_137 = [0, [1, [0, _aQ_, [0, arg_139, 0]]], 0];
       return [1, [0, _aR_, bnds_137]];
      case 2:
       var
        input_141 = param[1],
        arg_142 = sexp_of_t$1(input_141),
        bnds_140 = [0, [1, [0, _aS_, [0, arg_142, 0]]], 0];
       return [1, [0, _aT_, bnds_140]];
      case 3:
       var
        input_144 = param[1],
        arg_145 = sexp_of_t$1(input_144),
        bnds_143 = [0, [1, [0, _aU_, [0, arg_145, 0]]], 0];
       return [1, [0, _aV_, bnds_143]];
      case 4:
       var
        t_147 = param[1],
        arg_148 = sexp_of_t$3(t_147),
        bnds_146 = [0, [1, [0, _aW_, [0, arg_148, 0]]], 0];
       return [1, [0, _aX_, bnds_146]];
      case 5:
       var
        into_154 = param[3],
        via_152 = param[2],
        from_150 = param[1],
        arg_155 = sexp_of_t$3(into_154),
        bnds_149 = [0, [1, [0, _aY_, [0, arg_155, 0]]], 0],
        arg_153 = sexp_of_t(via_152),
        bnds_149$0 = [0, [1, [0, _aZ_, [0, arg_153, 0]]], bnds_149],
        arg_151 = sexp_of_t$3(from_150),
        bnds_149$1 = [0, [1, [0, _a0_, [0, arg_151, 0]]], bnds_149$0];
       return [1, [0, _a1_, bnds_149$1]];
      case 6:
       var
        inner_161 = param[3],
        value_159 = param[2],
        id_157 = param[1],
        arg_162 = sexp_of_t$3(inner_161),
        bnds_156 = [0, [1, [0, _a2_, [0, arg_162, 0]]], 0],
        arg_160 = sexp_of_t$1(value_159),
        bnds_156$0 = [0, [1, [0, _a3_, [0, arg_160, 0]]], bnds_156],
        arg_158 = sexp_of_t(id_157),
        bnds_156$1 = [0, [1, [0, _a4_, [0, arg_158, 0]]], bnds_156$0];
       return [1, [0, _a5_, bnds_156$1]];
      case 7:
       var
        id_164 = param[1],
        arg_165 = sexp_of_t(id_164),
        bnds_163 = [0, [1, [0, _a6_, [0, arg_165, 0]]], 0];
       return [1, [0, _a7_, bnds_163]];
      case 8:
       var
        by_175 = param[5],
        data_id_173 = param[4],
        cmp_id_171 = param[3],
        key_id_169 = param[2],
        map_167 = param[1],
        arg_176 = sexp_of_t$3(by_175),
        bnds_166 = [0, [1, [0, _a8_, [0, arg_176, 0]]], 0],
        arg_174 = sexp_of_t(data_id_173),
        bnds_166$0 = [0, [1, [0, _a9_, [0, arg_174, 0]]], bnds_166],
        arg_172 = sexp_of_t(cmp_id_171),
        bnds_166$1 = [0, [1, [0, _a__, [0, arg_172, 0]]], bnds_166$0],
        arg_170 = sexp_of_t(key_id_169),
        bnds_166$2 = [0, [1, [0, _a$_, [0, arg_170, 0]]], bnds_166$1],
        arg_168 = sexp_of_t$1(map_167),
        bnds_166$3 = [0, [1, [0, _ba_, [0, arg_168, 0]]], bnds_166$2];
       return [1, [0, _bb_, bnds_166$3]];
      case 9:
       var
        by_188 = param[6],
        data_id_186 = param[5],
        model_cmp_id_184 = param[4],
        model_key_id_182 = param[3],
        io_key_id_180 = param[2],
        map_178 = param[1],
        arg_189 = sexp_of_t$3(by_188),
        bnds_177 = [0, [1, [0, _bc_, [0, arg_189, 0]]], 0],
        arg_187 = sexp_of_t(data_id_186),
        bnds_177$0 = [0, [1, [0, _bd_, [0, arg_187, 0]]], bnds_177],
        arg_185 = sexp_of_t(model_cmp_id_184),
        bnds_177$1 = [0, [1, [0, _be_, [0, arg_185, 0]]], bnds_177$0],
        arg_183 = sexp_of_t(model_key_id_182),
        bnds_177$2 = [0, [1, [0, _bf_, [0, arg_183, 0]]], bnds_177$1],
        arg_181 = sexp_of_t(io_key_id_180),
        bnds_177$3 = [0, [1, [0, _bg_, [0, arg_181, 0]]], bnds_177$2],
        arg_179 = sexp_of_t$1(map_178),
        bnds_177$4 = [0, [1, [0, _bh_, [0, arg_179, 0]]], bnds_177$3];
       return [1, [0, _bi_, bnds_177$4]];
      case 10:
       var
        map_191 = param[1],
        arg_192 = sexp_of_t$1(map_191),
        bnds_190 = [0, [1, [0, _bj_, [0, arg_192, 0]]], 0];
       return [1, [0, _bk_, bnds_190]];
      case 11:
       var
        arms_196 = param[2],
        match_194 = param[1],
        arg_197 = caml_call2(Core[472], sexp_of_t$3, arms_196),
        bnds_193 = [0, [1, [0, _bl_, [0, arg_197, 0]]], 0],
        arg_195 = sexp_of_t$1(match_194),
        bnds_193$0 = [0, [1, [0, _bm_, [0, arg_195, 0]]], bnds_193];
       return [1, [0, _bn_, bnds_193$0]];
      case 12:
       var
        t_199 = param[1],
        arg_200 = caml_call2(Core[515], sexp_of_t$3, t_199),
        bnds_198 = [0, [1, [0, _bo_, [0, arg_200, 0]]], 0];
       return [1, [0, _bp_, bnds_198]];
      case 13:
       var
        inner_206 = param[3],
        inject_id_204 = param[2],
        model_id_202 = param[1],
        arg_207 = sexp_of_t$3(inner_206),
        bnds_201 = [0, [1, [0, _bq_, [0, arg_207, 0]]], 0],
        arg_205 = sexp_of_t(inject_id_204),
        bnds_201$0 = [0, [1, [0, _br_, [0, arg_205, 0]]], bnds_201],
        arg_203 = sexp_of_t(model_id_202),
        bnds_201$1 = [0, [1, [0, _bs_, [0, arg_203, 0]]], bnds_201$0];
       return [1, [0, _bt_, bnds_201$1]];
      case 14:
       var
        reset_id_211 = param[2],
        inner_209 = param[1],
        arg_212 = sexp_of_t(reset_id_211),
        bnds_208 = [0, [1, [0, _bu_, [0, arg_212, 0]]], 0],
        arg_210 = sexp_of_t$3(inner_209),
        bnds_208$0 = [0, [1, [0, _bv_, [0, arg_210, 0]]], bnds_208];
       return [1, [0, _bw_, bnds_208$0]];
      case 15:
       var
        value_214 = param[1],
        arg_215 = sexp_of_t$1(value_214),
        bnds_213 = [0, [1, [0, _bx_, [0, arg_215, 0]]], 0];
       return [1, [0, _by_, bnds_213]];
      default:
       var
        t_217 = param[1],
        arg_218 = sexp_of_t$3(t_217),
        bnds_216 = [0, [1, [0, _bz_, [0, arg_218, 0]]], 0];
       return [1, [0, _bA_, bnds_216]];
    }
   }
   function of_complete$0(complete){
    var match = complete[2];
    if(typeof match === "number") return 0 === match ? 0 : 1;
    switch(match[0]){
      case 0:
       var value = match[1]; return [0, of_complete(value)];
      case 1:
       var input = match[1]; return [1, of_complete(input)];
      case 2:
       var input$0 = match[1]; return [2, of_complete(input$0)];
      case 3:
       var input$1 = match[1]; return [3, of_complete(input$1)];
      case 4:
       var t = match[1]; return [4, of_complete$0(t)];
      case 5:
       var
        into = match[3],
        via = match[2],
        from = match[1],
        _dy_ = of_complete$0(into);
       return [5, of_complete$0(from), via, _dy_];
      case 6:
       var
        inner = match[3],
        value$0 = match[2],
        id = match[1],
        _dz_ = of_complete$0(inner);
       return [6, id, of_complete(value$0), _dz_];
      case 7:
       var id$0 = match[1]; return [7, id$0];
      case 8:
       var
        by = match[5],
        data_id = match[4],
        cmp_id = match[3],
        key_id = match[2],
        map = match[1],
        _dA_ = of_complete$0(by);
       return [8, of_complete(map), key_id, cmp_id, data_id, _dA_];
      case 9:
       var
        by$0 = match[6],
        data_id$0 = match[5],
        model_cmp_id = match[4],
        model_key_id = match[3],
        io_key_id = match[2],
        map$0 = match[1],
        _dB_ = of_complete$0(by$0);
       return [9,
               of_complete(map$0),
               io_key_id,
               model_key_id,
               model_cmp_id,
               data_id$0,
               _dB_];
      case 10:
       var map$1 = match[1]; return [10, of_complete(map$1)];
      case 11:
       var
        arms = match[2],
        match$0 = match[1],
        _dC_ = caml_call2(Core_List[51], arms, of_complete$0);
       return [11, of_complete(match$0), _dC_];
      case 12:
       var match$1 = match[1];
       if(! match$1) return _bB_;
       var t$0 = match$1[1];
       return [12, [0, of_complete$0(t$0)]];
      case 13:
       var inner$0 = match[3], inject_id = match[2], model_id = match[1];
       return [13, model_id, inject_id, of_complete$0(inner$0)];
      case 14:
       var inner$1 = match[2], reset_id = match[1];
       return [14, of_complete$0(inner$1), reset_id];
      case 15:
       var value$1 = match[1]; return [15, of_complete(value$1)];
      default: var t$1 = match[1]; return [16, of_complete$0(t$1)];
    }
   }
   function minimal_sexp_of_t$0(t){return sexp_of_t$3(of_complete$0(t));}
   function inputs$0(t){
    var match = t[2];
    if(typeof match === "number") return 0 === match ? 0 : 0;
    switch(match[0]){
      case 0:
       var value = match[1]; return [0, value, 0];
      case 1:
       var input = match[1]; return [0, input, 0];
      case 2:
       var input$0 = match[1]; return [0, input$0, 0];
      case 3:
       var input$1 = match[1]; return [0, input$1, 0];
      case 4:
       return 0;
      case 5:
       return 0;
      case 6:
       var value$0 = match[2]; return [0, value$0, 0];
      case 7:
       return 0;
      case 8:
       var map = match[1]; return [0, map, 0];
      case 9:
       var map$0 = match[1]; return [0, map$0, 0];
      case 10:
       var map$1 = match[1]; return [0, map$1, 0];
      case 11:
       return [0, match[1], 0];
      case 12:
       return 0;
      case 13:
       return 0;
      case 14:
       return 0;
      case 15:
       var value$1 = match[1]; return [0, value$1, 0];
      default: return 0;
    }
   }
   function children(t){
    var match = t[2];
    if(typeof match === "number") return 0 === match ? 0 : 0;
    switch(match[0]){
      case 0:
       return 0;
      case 1:
       return 0;
      case 2:
       return 0;
      case 3:
       return 0;
      case 4:
       var t$0 = match[1]; return [0, t$0, 0];
      case 5:
       var into = match[3], from = match[1]; return [0, from, [0, into, 0]];
      case 6:
       var inner = match[3]; return [0, inner, 0];
      case 7:
       return 0;
      case 8:
       var by = match[5]; return [0, by, 0];
      case 9:
       var by$0 = match[6]; return [0, by$0, 0];
      case 10:
       return 0;
      case 11:
       return 0;
      case 12:
       var match$0 = match[1];
       if(! match$0) return 0;
       var t$1 = match$0[1];
       return [0, t$1, 0];
      case 13:
       var inner$0 = match[3]; return [0, inner$0, 0];
      case 14:
       var inner$1 = match[2]; return [0, inner$1, 0];
      case 15:
       return 0;
      default: var t$2 = match[1]; return [0, t$2, 0];
    }
   }
   var map = [], _bC_ = 0, _bD_ = 0;
   caml_update_dummy
    (map,
     [0,
      0,
      function(_c__){
       var
        _c$_ = caml_call2(CamlinternalOO[8], _c__, _b_),
        _da_ = _c$_[1],
        _db_ = _c$_[2],
        _dc_ = _c$_[3],
        _dd_ = _c$_[4],
        _de_ = _c$_[5],
        _df_ = _c$_[6],
        _dg_ = _c$_[7],
        _dh_ = _c$_[8],
        _di_ = _c$_[9],
        _dj_ = _c$_[10],
        _dk_ = _c$_[11];
       function _dl_(self_1, x){
        if(typeof x === "number")
         switch(x){
           case 0:
            return 0;
           case 1:
            return 1;
           case 2:
            return 2;
           default: return 3;
         }
        if(0 === x[0]){
         var
          added_by_let_syntax = x[2],
          t = x[1],
          t$0 = caml_call2(self_1[1][1 + _db_], self_1, t),
          added_by_let_syntax$0 =
            caml_call2(self_1[1][1 + _dk_], self_1, added_by_let_syntax);
         return [0, t$0, added_by_let_syntax$0];
        }
        var
         inputs = x[1],
         _dx_ = caml_call1(self_1[1][1 + _db_], self_1),
         inputs$0 = caml_call3(self_1[1][1 + _df_], self_1, _dx_, inputs);
        return [1, inputs$0];
       }
       function _dm_(self_1, param){
        var
         id = param[4],
         here = param[3],
         kind = param[2],
         node_path = param[1],
         _dv_ = caml_call1(self_1[1][1 + _de_], self_1),
         node_path$0 =
           caml_call3(self_1[1][1 + _dg_], self_1, _dv_, node_path),
         kind$0 = caml_call2(self_1[1][1 + _da_], self_1, kind),
         _dw_ = caml_call1(self_1[1][1 + _dc_], self_1),
         here$0 = caml_call3(self_1[1][1 + _dd_], self_1, _dw_, here),
         id$0 = caml_call2(self_1[1][1 + _dh_], self_1, id);
        return [0, node_path$0, kind$0, here$0, id$0];
       }
       function _dn_(self_1, x){
        if(typeof x === "number") return 0 === x ? 0 : 1;
        switch(x[0]){
          case 0:
           var
            value = x[1],
            value$0 = caml_call2(self_1[1][1 + _db_], self_1, value);
           return [0, value$0];
          case 1:
           var
            input = x[1],
            input$0 = caml_call2(self_1[1][1 + _db_], self_1, input);
           return [1, input$0];
          case 2:
           var
            input$1 = x[1],
            input$2 = caml_call2(self_1[1][1 + _db_], self_1, input$1);
           return [2, input$2];
          case 3:
           var
            input$3 = x[1],
            input$4 = caml_call2(self_1[1][1 + _db_], self_1, input$3);
           return [3, input$4];
          case 4:
           var t = x[1], t$0 = caml_call2(self_1[1][1 + _dj_], self_1, t);
           return [4, t$0];
          case 5:
           var
            into = x[3],
            via = x[2],
            from = x[1],
            from$0 = caml_call2(self_1[1][1 + _dj_], self_1, from),
            via$0 = caml_call2(self_1[1][1 + _dh_], self_1, via),
            into$0 = caml_call2(self_1[1][1 + _dj_], self_1, into);
           return [5, from$0, via$0, into$0];
          case 6:
           var
            inner = x[3],
            value$1 = x[2],
            id = x[1],
            id$0 = caml_call2(self_1[1][1 + _dh_], self_1, id),
            value$2 = caml_call2(self_1[1][1 + _db_], self_1, value$1),
            inner$0 = caml_call2(self_1[1][1 + _dj_], self_1, inner);
           return [6, id$0, value$2, inner$0];
          case 7:
           var
            id$1 = x[1],
            id$2 = caml_call2(self_1[1][1 + _dh_], self_1, id$1);
           return [7, id$2];
          case 8:
           var
            by = x[5],
            data_id = x[4],
            cmp_id = x[3],
            key_id = x[2],
            map = x[1],
            map$0 = caml_call2(self_1[1][1 + _db_], self_1, map),
            key_id$0 = caml_call2(self_1[1][1 + _dh_], self_1, key_id),
            cmp_id$0 = caml_call2(self_1[1][1 + _dh_], self_1, cmp_id),
            data_id$0 = caml_call2(self_1[1][1 + _dh_], self_1, data_id),
            by$0 = caml_call2(self_1[1][1 + _dj_], self_1, by);
           return [8, map$0, key_id$0, cmp_id$0, data_id$0, by$0];
          case 9:
           var
            by$1 = x[6],
            data_id$1 = x[5],
            model_cmp_id = x[4],
            model_key_id = x[3],
            io_key_id = x[2],
            map$1 = x[1],
            map$2 = caml_call2(self_1[1][1 + _db_], self_1, map$1),
            io_key_id$0 = caml_call2(self_1[1][1 + _dh_], self_1, io_key_id),
            model_key_id$0 =
              caml_call2(self_1[1][1 + _dh_], self_1, model_key_id),
            model_cmp_id$0 =
              caml_call2(self_1[1][1 + _dh_], self_1, model_cmp_id),
            data_id$2 = caml_call2(self_1[1][1 + _dh_], self_1, data_id$1),
            by$2 = caml_call2(self_1[1][1 + _dj_], self_1, by$1);
           return [9,
                   map$2,
                   io_key_id$0,
                   model_key_id$0,
                   model_cmp_id$0,
                   data_id$2,
                   by$2];
          case 10:
           var
            map$3 = x[1],
            map$4 = caml_call2(self_1[1][1 + _db_], self_1, map$3);
           return [10, map$4];
          case 11:
           var
            arms = x[2],
            match = caml_call2(self_1[1][1 + _db_], self_1, x[1]),
            _dt_ = caml_call1(self_1[1][1 + _dj_], self_1),
            arms$0 = caml_call3(self_1[1][1 + _df_], self_1, _dt_, arms);
           return [11, match, arms$0];
          case 12:
           var
            t$1 = x[1],
            _du_ = caml_call1(self_1[1][1 + _dj_], self_1),
            t$2 = caml_call3(self_1[1][1 + _dd_], self_1, _du_, t$1);
           return [12, t$2];
          case 13:
           var
            inner$1 = x[3],
            inject_id = x[2],
            model_id = x[1],
            model_id$0 = caml_call2(self_1[1][1 + _dh_], self_1, model_id),
            inject_id$0 = caml_call2(self_1[1][1 + _dh_], self_1, inject_id),
            inner$2 = caml_call2(self_1[1][1 + _dj_], self_1, inner$1);
           return [13, model_id$0, inject_id$0, inner$2];
          case 14:
           var
            inner$3 = x[2],
            reset_id = x[1],
            reset_id$0 = caml_call2(self_1[1][1 + _dh_], self_1, reset_id),
            inner$4 = caml_call2(self_1[1][1 + _dj_], self_1, inner$3);
           return [14, reset_id$0, inner$4];
          case 15:
           var
            value$3 = x[1],
            value$4 = caml_call2(self_1[1][1 + _db_], self_1, value$3);
           return [15, value$4];
          default:
           var t$3 = x[1], t$4 = caml_call2(self_1[1][1 + _dj_], self_1, t$3);
           return [16, t$4];
        }
       }
       var
        _do_ =
          [0,
           _dj_,
           function(self_1, param){
            var
             here = param[3],
             kind = param[2],
             node_path = param[1],
             _dr_ = caml_call1(self_1[1][1 + _de_], self_1),
             node_path$0 =
               caml_call3(self_1[1][1 + _dg_], self_1, _dr_, node_path),
             kind$0 = caml_call2(self_1[1][1 + _di_], self_1, kind),
             _ds_ = caml_call1(self_1[1][1 + _dc_], self_1),
             here$0 = caml_call3(self_1[1][1 + _dd_], self_1, _ds_, here);
            return [0, node_path$0, kind$0, here$0];
           },
           _di_,
           _dn_,
           _db_,
           _dm_,
           _da_,
           _dl_];
       caml_call2(CamlinternalOO[11], _c__, _do_);
       return function(_dq_, _dp_){
        return caml_call2(CamlinternalOO[24], _dp_, _c__);};
      },
      _bD_,
      _bC_]);
   var fold = [], _bE_ = 0, _bF_ = 0;
   caml_update_dummy
    (fold,
     [0,
      0,
      function(_cK_){
       var
        _cL_ = caml_call2(CamlinternalOO[8], _cK_, _b_),
        _cM_ = _cL_[1],
        _cN_ = _cL_[2],
        _cO_ = _cL_[3],
        _cP_ = _cL_[4],
        _cQ_ = _cL_[5],
        _cR_ = _cL_[6],
        _cS_ = _cL_[7],
        _cT_ = _cL_[8],
        _cU_ = _cL_[9],
        _cV_ = _cL_[10],
        _cW_ = _cL_[11];
       function _cX_(self_2, x, acc){
        if(typeof x === "number")
         switch(x){
           case 0:
            return acc;
           case 1:
            return acc;
           case 2:
            return acc;
           default: return acc;
         }
        if(0 === x[0]){
         var
          added_by_let_syntax = x[2],
          t = x[1],
          acc$0 = caml_call3(self_2[1][1 + _cN_], self_2, t, acc),
          acc$1 =
            caml_call3
             (self_2[1][1 + _cW_], self_2, added_by_let_syntax, acc$0);
         return acc$1;
        }
        var inputs = x[1], _c9_ = caml_call1(self_2[1][1 + _cN_], self_2);
        return caml_call4(self_2[1][1 + _cR_], self_2, _c9_, inputs, acc);
       }
       function _cY_(self_2, param, acc){
        var
         id = param[4],
         here = param[3],
         kind = param[2],
         node_path = param[1],
         _c7_ = caml_call1(self_2[1][1 + _cQ_], self_2),
         acc$0 = caml_call4(self_2[1][1 + _cS_], self_2, _c7_, node_path, acc),
         acc$1 = caml_call3(self_2[1][1 + _cM_], self_2, kind, acc$0),
         _c8_ = caml_call1(self_2[1][1 + _cO_], self_2),
         acc$2 = caml_call4(self_2[1][1 + _cP_], self_2, _c8_, here, acc$1),
         acc$3 = caml_call3(self_2[1][1 + _cT_], self_2, id, acc$2);
        return acc$3;
       }
       function _cZ_(self_2, x, acc){
        if(typeof x === "number") return 0 === x ? acc : acc;
        switch(x[0]){
          case 0:
           var value = x[1];
           return caml_call3(self_2[1][1 + _cN_], self_2, value, acc);
          case 1:
           var input = x[1];
           return caml_call3(self_2[1][1 + _cN_], self_2, input, acc);
          case 2:
           var input$0 = x[1];
           return caml_call3(self_2[1][1 + _cN_], self_2, input$0, acc);
          case 3:
           var input$1 = x[1];
           return caml_call3(self_2[1][1 + _cN_], self_2, input$1, acc);
          case 4:
           var t = x[1];
           return caml_call3(self_2[1][1 + _cV_], self_2, t, acc);
          case 5:
           var
            into = x[3],
            via = x[2],
            from = x[1],
            acc$0 = caml_call3(self_2[1][1 + _cV_], self_2, from, acc),
            acc$1 = caml_call3(self_2[1][1 + _cT_], self_2, via, acc$0),
            acc$2 = caml_call3(self_2[1][1 + _cV_], self_2, into, acc$1);
           return acc$2;
          case 6:
           var
            inner = x[3],
            value$0 = x[2],
            id = x[1],
            acc$3 = caml_call3(self_2[1][1 + _cT_], self_2, id, acc),
            acc$4 = caml_call3(self_2[1][1 + _cN_], self_2, value$0, acc$3),
            acc$5 = caml_call3(self_2[1][1 + _cV_], self_2, inner, acc$4);
           return acc$5;
          case 7:
           var id$0 = x[1];
           return caml_call3(self_2[1][1 + _cT_], self_2, id$0, acc);
          case 8:
           var
            by = x[5],
            data_id = x[4],
            cmp_id = x[3],
            key_id = x[2],
            map = x[1],
            acc$6 = caml_call3(self_2[1][1 + _cN_], self_2, map, acc),
            acc$7 = caml_call3(self_2[1][1 + _cT_], self_2, key_id, acc$6),
            acc$8 = caml_call3(self_2[1][1 + _cT_], self_2, cmp_id, acc$7),
            acc$9 = caml_call3(self_2[1][1 + _cT_], self_2, data_id, acc$8),
            acc$10 = caml_call3(self_2[1][1 + _cV_], self_2, by, acc$9);
           return acc$10;
          case 9:
           var
            by$0 = x[6],
            data_id$0 = x[5],
            model_cmp_id = x[4],
            model_key_id = x[3],
            io_key_id = x[2],
            map$0 = x[1],
            acc$11 = caml_call3(self_2[1][1 + _cN_], self_2, map$0, acc),
            acc$12 =
              caml_call3(self_2[1][1 + _cT_], self_2, io_key_id, acc$11),
            acc$13 =
              caml_call3(self_2[1][1 + _cT_], self_2, model_key_id, acc$12),
            acc$14 =
              caml_call3(self_2[1][1 + _cT_], self_2, model_cmp_id, acc$13),
            acc$15 =
              caml_call3(self_2[1][1 + _cT_], self_2, data_id$0, acc$14),
            acc$16 = caml_call3(self_2[1][1 + _cV_], self_2, by$0, acc$15);
           return acc$16;
          case 10:
           var map$1 = x[1];
           return caml_call3(self_2[1][1 + _cN_], self_2, map$1, acc);
          case 11:
           var
            arms = x[2],
            acc$17 = caml_call3(self_2[1][1 + _cN_], self_2, x[1], acc),
            _c5_ = caml_call1(self_2[1][1 + _cV_], self_2),
            acc$18 =
              caml_call4(self_2[1][1 + _cR_], self_2, _c5_, arms, acc$17);
           return acc$18;
          case 12:
           var t$0 = x[1], _c6_ = caml_call1(self_2[1][1 + _cV_], self_2);
           return caml_call4(self_2[1][1 + _cP_], self_2, _c6_, t$0, acc);
          case 13:
           var
            inner$0 = x[3],
            inject_id = x[2],
            model_id = x[1],
            acc$19 = caml_call3(self_2[1][1 + _cT_], self_2, model_id, acc),
            acc$20 =
              caml_call3(self_2[1][1 + _cT_], self_2, inject_id, acc$19),
            acc$21 = caml_call3(self_2[1][1 + _cV_], self_2, inner$0, acc$20);
           return acc$21;
          case 14:
           var
            inner$1 = x[2],
            reset_id = x[1],
            acc$22 = caml_call3(self_2[1][1 + _cT_], self_2, reset_id, acc),
            acc$23 = caml_call3(self_2[1][1 + _cV_], self_2, inner$1, acc$22);
           return acc$23;
          case 15:
           var value$1 = x[1];
           return caml_call3(self_2[1][1 + _cN_], self_2, value$1, acc);
          default:
           var t$1 = x[1];
           return caml_call3(self_2[1][1 + _cV_], self_2, t$1, acc);
        }
       }
       var
        _c0_ =
          [0,
           _cV_,
           function(self_2, param, acc){
            var
             here = param[3],
             kind = param[2],
             node_path = param[1],
             _c3_ = caml_call1(self_2[1][1 + _cQ_], self_2),
             acc$0 =
               caml_call4(self_2[1][1 + _cS_], self_2, _c3_, node_path, acc),
             acc$1 = caml_call3(self_2[1][1 + _cU_], self_2, kind, acc$0),
             _c4_ = caml_call1(self_2[1][1 + _cO_], self_2),
             acc$2 =
               caml_call4(self_2[1][1 + _cP_], self_2, _c4_, here, acc$1);
            return acc$2;
           },
           _cU_,
           _cZ_,
           _cN_,
           _cY_,
           _cM_,
           _cX_];
       caml_call2(CamlinternalOO[11], _cK_, _c0_);
       return function(_c2_, _c1_){
        return caml_call2(CamlinternalOO[24], _c1_, _cK_);};
      },
      _bF_,
      _bE_]);
   function _bG_(_ci_){
    var
     _cj_ = caml_call2(CamlinternalOO[8], _ci_, _b_),
     _ck_ = _cj_[3],
     _cl_ = _cj_[4],
     _cm_ = _cj_[5],
     _cn_ = _cj_[6],
     _co_ = _cj_[7],
     _cp_ = _cj_[8],
     _cq_ = _cj_[11],
     _cr_ = caml_call6(CamlinternalOO[18], _ci_, 0, _a_, shared, fold, 1)[1];
    function _cs_(self_3, param){return function(_cJ_){return _cJ_;};}
    function _ct_(self_3, param){return function(_cI_){return _cI_;};}
    function _cu_(self_3, param, _cG_){return function(_cH_){return _cH_;};}
    function _cv_(self_3, f, l, acc){
     var _cF_ = caml_call1(Core_Fn[6], f);
     return caml_call3(Core_List[20], l, acc, _cF_);
    }
    function _cw_(self_3, param){return function(_cE_){return _cE_;};}
    function _cx_(self_3, f, o, acc){
     var _cD_ = caml_call1(Core_Fn[6], f);
     return caml_call3(Core_Option[43], o, acc, _cD_);
    }
    var
     _cy_ =
       [0,
        _ck_,
        function(self_3, param){return function(_cC_){return _cC_;};},
        _cl_,
        _cx_,
        _cm_,
        _cw_,
        _cn_,
        _cv_,
        _co_,
        _cu_,
        _cp_,
        _ct_,
        _cq_,
        _cs_];
    caml_call2(CamlinternalOO[11], _ci_, _cy_);
    return function(_cA_, _cz_){
     var _cB_ = caml_call2(CamlinternalOO[24], _cz_, _ci_);
     caml_call1(_cr_, _cB_);
     return caml_call3(CamlinternalOO[26], _cz_, _cB_, _ci_);};
   }
   var fold$0 = caml_call2(CamlinternalOO[19], _c_, _bG_);
   function _bH_(_bW_){
    var
     _bX_ = caml_call2(CamlinternalOO[8], _bW_, _b_),
     _bY_ = _bX_[3],
     _bZ_ = _bX_[4],
     _b0_ = _bX_[5],
     _b1_ = _bX_[6],
     _b2_ = _bX_[7],
     _b3_ = _bX_[8],
     _b4_ = _bX_[11],
     _b5_ = caml_call6(CamlinternalOO[18], _bW_, 0, _a_, shared, map, 1)[1];
    function _b6_(self_5){return function(_ch_){return _ch_;};}
    function _b7_(self_5){return function(_cg_){return _cg_;};}
    function _b8_(self_5, f, x){return caml_call2(Core_Lazy[30], x, f);}
    function _b9_(self_5, f, x){return caml_call2(Core_List[51], x, f);}
    function _b__(self_5){return function(_cf_){return _cf_;};}
    function _b$_(self_5, f, x){return caml_call2(Core_Option[34], x, f);}
    var
     _ca_ =
       [0,
        _bY_,
        function(self_5){return function(_ce_){return _ce_;};},
        _bZ_,
        _b$_,
        _b0_,
        _b__,
        _b1_,
        _b9_,
        _b2_,
        _b8_,
        _b3_,
        _b7_,
        _b4_,
        _b6_];
    caml_call2(CamlinternalOO[11], _bW_, _ca_);
    return function(_cc_, _cb_){
     var _cd_ = caml_call2(CamlinternalOO[24], _cb_, _bW_);
     caml_call1(_b5_, _cd_);
     return caml_call3(CamlinternalOO[26], _cb_, _cd_, _bW_);};
   }
   var map$0 = caml_call2(CamlinternalOO[19], _c_, _bH_), _bI_ = [0, 0];
   function sanitize_for_testing(t){
    var
     table = caml_call3(Core_Hashtbl[4], 0, 0, [0, compare, sexp_of_t, hash]);
    function replace(id){
     function _bV_(param){return [1, caml_call1(Core_Hashtbl[28], table)];}
     return caml_call3(Core_Hashtbl[54], table, id, _bV_);
    }
    if(! _bI_[1]){
     var
      _bJ_ = caml_call1(CamlinternalOO[16], _c_),
      _bK_ = caml_call2(CamlinternalOO[3], _bJ_, cst),
      _bL_ = caml_call2(CamlinternalOO[8], _bJ_, _b_)[8],
      _bM_ = caml_call6(CamlinternalOO[18], _bJ_, 0, 0, _d_, map$0, 0),
      _bN_ = _bM_[1],
      _bO_ = _bM_[5],
      _bP_ =
        function(self_7, id){
         var env = self_7[1 + _bK_], _bU_ = caml_call1(env[1], id);
         return caml_call1(caml_call1(_bO_, self_7), _bU_);
        };
     caml_call3(CamlinternalOO[10], _bJ_, _bL_, _bP_);
     var
      _bQ_ =
        function(_bR_){
         var _bS_ = _bR_[1], _bT_ = caml_call2(CamlinternalOO[24], 0, _bJ_);
         caml_call2(_bN_, _bR_[2], _bT_);
         _bT_[1 + _bK_] = _bS_;
         return caml_call3(CamlinternalOO[26], 0, _bT_, _bJ_);
        };
     caml_call1(CamlinternalOO[17], _bJ_);
     _bI_[1] = _bQ_;
    }
    var
     replace_old_uids_with_sanitize =
       caml_call1(_bI_[1], [0, [0, replace], map$0[4]]);
    return caml_call2
            (runtime.caml_get_public_method
              (replace_old_uids_with_sanitize, 381242055, 1),
             replace_old_uids_with_sanitize,
             t);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Skeleton);
   var
    Bonsai_Skeleton =
      [0,
       [0, compare, hash_fold_t, hash, sexp_of_t],
       [0,
        sexp_of_t$0,
        sexp_of_kind,
        of_value$0,
        minimal_sexp_of_t,
        inputs,
        to_string_hum],
       [0,
        sexp_of_t$2,
        sexp_of_kind$0,
        of_computation,
        sanitize_for_testing,
        minimal_sexp_of_t$0,
        inputs$0,
        children],
       [0, fold$0, map$0]];
   runtime.caml_register_global(177, Bonsai_Skeleton, cst_Bonsai_Skeleton$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__To_dot
//# unitInfo: Requires: Base__Buffer, Bonsai__Pre_process, Bonsai__Skeleton, Core, Core__Char, Core__Hashtbl, Core__Int, Core__List, Core__Option, Core__Source_code_position, Core__String, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Ppx_string_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$7 = "",
    cst_Bonsai_To_dot$0 = "Bonsai__To_dot",
    cst_Mrecord$1 = "Mrecord",
    cst_bonsai$0 = "bonsai",
    cst_const$1 = "const",
    cst_leaf$0 = "leaf",
    cst_oval$1 = "oval",
    cst_src_to_dot_ml = "src/to_dot.ml",
    cst_width_1_height_1 = "width=.1, height=.1",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$6 = ";",
    cst$5 = "_",
    color = "#FFDD94",
    cst$4 = cst$7,
    cst$3 = cst$7,
    cst = '"',
    cst$2 = cst$7,
    cst$0 = "]",
    cst$1 = '"; ',
    Core_List = global_data.Core__List,
    Base_Buffer = global_data.Base__Buffer,
    Bonsai_Skeleton = global_data.Bonsai__Skeleton,
    Core_Hashtbl = global_data.Core__Hashtbl,
    Bonsai_Pre_process = global_data.Bonsai__Pre_process,
    Core = global_data.Core,
    Core_Char = global_data.Core__Char,
    Core_String = global_data.Core__String,
    Assert_failure = global_data.Assert_failure,
    Core_Int = global_data.Core__Int,
    Ppx_string_runtime = global_data.Ppx_string_runtime,
    Core_Source_code_position = global_data.Core__Source_code_position,
    Core_Option = global_data.Core__Option,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_To_dot$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_to_dot_ml);
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai$0, "to_dot.ml");
   var
    of_string = Core_String[136],
    to_string = Core_String[137],
    cst_const$0 = cst_const$1,
    cst_exception = "exception",
    cst_incr = "incr",
    cst_cutoff = "cutoff",
    cst_mapn = "mapn",
    cst_leaf0 = "leaf0",
    cst_path = "path",
    cst_read = "read",
    cst_leaf_incr = "leaf_incr",
    cst_model_cutoff = "model_cutoff",
    cst_dyn_set = "dyn_set",
    cst_fetch = "fetch",
    cst_assoc = "assoc",
    cst_assoc_on = "assoc_on",
    cst_assoc_simpl = "assoc_simpl",
    cst_switch = "switch",
    cst_forced_lazy = "forced_lazy",
    cst_lazy = "lazy",
    cst_wrap = "wrap",
    cst_with_model_resetter = "with_model_resetter",
    cst_life_cycle = "life_cycle",
    cst_identity = "identity",
    _g_ = [0, [11, "digraph {\n", [2, 0, [12, 125, 0]]], "digraph {\n%s}"],
    cst_leaf = cst_leaf$0,
    cst_const = cst_const$1,
    cst_named$0 = "named",
    cst_dir_none = " [dir=none];",
    _f_ =
      [0, [2, 0, [11, " -> ", [2, 0, [2, 0, [12, 10, 0]]]]], "%s -> %s%s\n"],
    _e_ = [0, cst_src_to_dot_ml, 79, 2],
    cst_D0E6A5 = "#D0E6A5",
    cst_state_machine = "{state machine}",
    cst_Mrecord = cst_Mrecord$1,
    _b_ = [0, cst_leaf$0],
    cst_86E3CE = "#86E3CE",
    cst_Mrecord$0 = cst_Mrecord$1,
    cst_oval = cst_oval$1,
    cst_FFFFFF = "#FFFFFF",
    cst_subst = "subst",
    cst_oval$0 = cst_oval$1,
    _d_ = [0, cst_width_1_height_1],
    cst_000000 = "#000000",
    cst_circle = "circle",
    _c_ = [0, cst_width_1_height_1],
    cst_tooltip = ', tooltip = "',
    cst_fillcolor = '"; fillcolor = "',
    cst_label = '", label = "',
    cst_shape = ', shape = "',
    cst_style_filled = "[ style=filled",
    cst_named = "named_",
    cst_bonsai = cst_bonsai$0,
    cst_Bonsai_To_dot = cst_Bonsai_To_dot$0,
    _a_ = Core_String[73];
   function basic_shape(opt, tooltip, shape, label, color, param){
    if(opt) var sth = opt[1], other = sth; else var other = cst$3;
    if(tooltip)
     var
      tooltip$0 = tooltip[1],
      _A_ = [0, tooltip$0, [0, caml_call1(Ppx_string_runtime[1][2], cst), 0]],
      _B_ = [0, caml_call1(Ppx_string_runtime[1][2], cst_tooltip), _A_],
      tooltip$1 = caml_call1(Ppx_string_runtime[1][4], _B_);
    else
     var tooltip$1 = cst$2;
    var
     _C_ = [0, other, [0, caml_call1(Ppx_string_runtime[1][2], cst$0), 0]],
     _D_ = [0, color, [0, caml_call1(Ppx_string_runtime[1][2], cst$1), _C_]],
     _E_ =
       [0,
        label,
        [0, caml_call1(Ppx_string_runtime[1][2], cst_fillcolor), _D_]],
     _F_ =
       [0, shape, [0, caml_call1(Ppx_string_runtime[1][2], cst_label), _E_]],
     _G_ =
       [0,
        tooltip$1,
        [0, caml_call1(Ppx_string_runtime[1][2], cst_shape), _F_]],
     _H_ = [0, caml_call1(Ppx_string_runtime[1][2], cst_style_filled), _G_];
    return caml_call1(Ppx_string_runtime[1][4], _H_);
   }
   function register(state, kind$1, name){
    function _u_(c){
     var _z_ = caml_call1(Core_Char[22], c);
     return _z_ ? _z_ : caml_call2(Core_Char[54], c, 95);
    }
    if(! caml_call2(Core_String[20], name, _u_))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _e_], 1);
    var
     _v_ = caml_call1(Core_Int[79], state[1]),
     _w_ = [0, caml_call1(Ppx_string_runtime[1][3], _v_), 0],
     _x_ = [0, name, [0, caml_call1(Ppx_string_runtime[1][2], cst$5), _w_]],
     s = caml_call1(Ppx_string_runtime[1][4], _x_);
    caml_call2(Base_Buffer[16], state[3], s);
    caml_call2(Base_Buffer[15], state[3], 32);
    if(typeof kind$1 === "number")
     var
      _y_ =
        0 === kind$1
         ? basic_shape(0, _b_, cst_Mrecord, cst_state_machine, cst_D0E6A5, 0)
         : basic_shape(_c_, 0, cst_circle, cst$4, cst_000000, 0);
    else
     switch(kind$1[0]){
       case 0:
        var
         kind = kind$1[1],
         _y_ = basic_shape(0, 0, cst_Mrecord$0, kind, cst_86E3CE, 0);
        break;
       case 1:
        var
         here = kind$1[2],
         kind$0 = kind$1[1],
         tooltip =
           caml_call2(Core_Option[34], here, Core_Source_code_position[4]),
         _y_ = basic_shape(0, tooltip, cst_oval, kind$0, color, 0);
        break;
       default:
        var
         here$0 = kind$1[1],
         tooltip$0 =
           caml_call2(Core_Option[34], here$0, Core_Source_code_position[4]),
         _y_ =
           basic_shape(_d_, tooltip$0, cst_oval$0, cst_subst, cst_FFFFFF, 0);
     }
    caml_call2(Base_Buffer[16], state[3], _y_);
    caml_call2(Base_Buffer[15], state[3], 10);
    state[1] = state[1] + 1 | 0;
    return caml_call1(of_string, s);
   }
   function arrow(state, from, to){
    var
     arrow_string = caml_call2(_a_, to, cst_named) ? cst_dir_none : cst$6,
     _s_ = caml_call1(to_string, to),
     _t_ = caml_call1(to_string, from);
    return caml_call5(Core[241], state[3], _f_, _t_, _s_, arrow_string);
   }
   function arrow_from_many(state, to, l){
    function _r_(from){return arrow(state, from, to);}
    caml_call2(Core_List[19], l, _r_);
    return to;
   }
   function register_named(state, shape, name){
    function _q_(param){return register(state, shape, cst_named$0);}
    return caml_call3(Core_Hashtbl[54], state[2], name, _q_);
   }
   function follow_skeleton_value(state, param){
    var id = param[4], here = param[3], value = param[2];
    function register$0(s){return register(state, [1, s, here], s);}
    var shape = [1, cst_const$0, here];
    if(typeof value === "number")
     switch(value){
       case 0:
        var _n_ = function(param){return register(state, shape, cst_const);};
        return caml_call3(Core_Hashtbl[54], state[2], id, _n_);
       case 1:
        return register$0(cst_exception);
       case 2:
        return register$0(cst_incr);
       default: return register_named(state, [2, here], id);
     }
    if(0 === value[0]){
     var
      t = value[1],
      me = register$0(cst_cutoff),
      them = follow_skeleton_value(state, t);
     arrow(state, them, me);
     return me;
    }
    var inputs = value[1];
    function _o_(value){return follow_skeleton_value(state, value);}
    var _p_ = caml_call2(Core_List[51], inputs, _o_);
    return arrow_from_many(state, register$0(cst_mapn), _p_);
   }
   function follow_dynamic_skeleton_leaf(state, input){
    var me = register(state, 0, cst_leaf), match = input[2];
    if(typeof match === "number"){if(0 === match) return me;}
    else if(1 === match[0]){
     var
      inputs = match[1],
      _m_ = function(value){return follow_skeleton_value(state, value);};
     return arrow_from_many(state, me, caml_call2(Core_List[51], inputs, _m_));
    }
    arrow(state, follow_skeleton_value(state, input), me);
    return me;
   }
   function follow_skeleton_computation(state, computation){
    var computation$0 = computation;
    for(;;){
     var
      register_computation =
        function(kind){return register(state, [0, kind], kind);},
      match = computation$0[2];
     if(typeof match === "number")
      return 0 === match
              ? register(state, 0, cst_leaf0)
              : register_computation(cst_path);
     switch(match[0]){
       case 0:
        var value = match[1], me = register_computation(cst_read);
        arrow(state, follow_skeleton_value(state, value), me);
        return me;
       case 1:
        var input = match[1];
        return follow_dynamic_skeleton_leaf(state, input);
       case 2:
        var input$0 = match[1];
        return follow_dynamic_skeleton_leaf(state, input$0);
       case 3:
        return register_computation(cst_leaf_incr);
       case 4:
        var t = match[1], me$0 = register_computation(cst_model_cutoff);
        arrow(state, follow_skeleton_computation(state, t), me$0);
        return me$0;
       case 5:
        var
         computation$1 = match[3],
         via = match[2],
         from = match[1],
         _k_ = register_named(state, [2, computation$0[3]], via);
        arrow(state, follow_skeleton_computation(state, from), _k_);
        var computation$0 = computation$1;
        break;
       case 6:
        var
         computation$2 = match[3],
         value$0 = match[2],
         id = match[1],
         me$1 = register_computation(cst_dyn_set);
        arrow(state, follow_skeleton_value(state, value$0), me$1);
        arrow(state, me$1, register_named(state, 2, id));
        var computation$0 = computation$2;
        break;
       case 7:
        var id$0 = match[1], me$2 = register_computation(cst_fetch);
        arrow(state, register_named(state, 2, id$0), me$2);
        return me$2;
       case 8:
        var
         by = match[5],
         map = match[1],
         me$3 = register_computation(cst_assoc);
        arrow(state, follow_skeleton_computation(state, by), me$3);
        arrow(state, follow_skeleton_value(state, map), me$3);
        return me$3;
       case 9:
        var
         by$0 = match[6],
         map$0 = match[1],
         me$4 = register_computation(cst_assoc_on);
        arrow(state, follow_skeleton_computation(state, by$0), me$4);
        arrow(state, follow_skeleton_value(state, map$0), me$4);
        return me$4;
       case 10:
        var map$1 = match[1], me$5 = register_computation(cst_assoc_simpl);
        arrow(state, follow_skeleton_value(state, map$1), me$5);
        return me$5;
       case 11:
        var
         arms = match[2],
         match$0 = match[1],
         me$6 = register_computation(cst_switch);
        arrow(state, follow_skeleton_value(state, match$0), me$6);
        var
         _l_ =
           function(t){
            return arrow(state, follow_skeleton_computation(state, t), me$6);
           };
        caml_call2(Core_List[19], arms, _l_);
        return me$6;
       case 12:
        var match$1 = match[1];
        if(! match$1) return register_computation(cst_lazy);
        var t$0 = match$1[1], me$7 = register_computation(cst_forced_lazy);
        arrow(state, follow_skeleton_computation(state, t$0), me$7);
        return me$7;
       case 13:
        var inner = match[3], me$8 = register_computation(cst_wrap);
        arrow(state, follow_skeleton_computation(state, inner), me$8);
        return me$8;
       case 14:
        var
         inner$0 = match[2],
         reset_id = match[1],
         me$9 = register_computation(cst_with_model_resetter);
        arrow(state, me$9, register_named(state, 1, reset_id));
        arrow(state, follow_skeleton_computation(state, inner$0), me$9);
        return me$9;
       case 15:
        var value$1 = match[1], me$10 = register_computation(cst_life_cycle);
        arrow(state, follow_skeleton_value(state, value$1), me$10);
        return me$10;
       default:
        var t$1 = match[1], me$11 = register_computation(cst_identity);
        arrow(state, follow_skeleton_computation(state, t$1), me$11);
        return me$11;
     }
    }
   }
   function to_dot(opt, t){
    if(opt) var sth = opt[1], pre_process = sth; else var pre_process = 1;
    var
     _h_ = caml_call1(Base_Buffer[2], 2014),
     _i_ = Bonsai_Skeleton[1],
     state =
       [0,
        0,
        caml_call3(Core_Hashtbl[4], 0, 0, [0, _i_[1], _i_[4], _i_[3]]),
        _h_],
     computation = pre_process ? caml_call1(Bonsai_Pre_process[1], t) : t,
     skeleton_computation = caml_call1(Bonsai_Skeleton[3][3], computation);
    follow_skeleton_computation(state, skeleton_computation);
    var _j_ = caml_call1(Base_Buffer[3], state[3]);
    return caml_call2(Core[265], _g_, _j_);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_To_dot);
   var Bonsai_To_dot = [0, to_dot];
   runtime.caml_register_global(82, Bonsai_To_dot, cst_Bonsai_To_dot$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Graph_info
//# unitInfo: Requires: Base__Option, Bin_prot__Common, Bin_prot__Shape, Bin_shape, Bonsai__Node_path, Bonsai__Transform, CamlinternalLazy, Core, Core__Hashtbl, Core__Int, Core__Map, Core__Option, Core__Source_code_position, Core__Stable, Core__String, Core__Type_equal, Expect_test_config, Inline_test_config, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_expect_runtime__Test_block, Ppx_expect_runtime__Test_node, Ppx_expect_runtime__Types, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Sexplib0__Sexp_conv_record, Stdlib
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$0 = "",
    cst_122924cb491f2c00727ae98b5c = " 122924cb491f2c00727ae98b5c47f343 ",
    cst_127c33aa3895110d2fdd1b3c35 = " 127c33aa3895110d2fdd1b3c356bf5c3 ",
    cst_Bonsai_Graph_info$0 = "Bonsai__Graph_info",
    cst_bonsai$0 = "bonsai",
    cst_dag$7 = "dag",
    cst_here$5 = "here",
    cst_id$1 = "id",
    cst_info$7 = "info",
    cst_node_type$5 = "node_type",
    cst_pos_bol$1 = "pos_bol",
    cst_pos_cnum$1 = "pos_cnum",
    cst_pos_fname$1 = "pos_fname",
    cst_pos_lnum$1 = "pos_lnum",
    cst_src_graph_info_ml$5 = "src/graph_info.ml",
    cst_src_graph_info_ml_Node_inf$0 = "src/graph_info.ml.Node_info.t",
    cst_src_graph_info_ml_Stable_N$2 =
      "src/graph_info.ml.Stable.Node_info.V1.t",
    cst_src_graph_info_ml_Stable_N$1 =
      "src/graph_info.ml.Stable.Node_info.V2.t",
    cst_src_graph_info_ml_Stable_V$4 = "src/graph_info.ml.Stable.V1.t",
    cst_src_graph_info_ml_Stable_V$3 = "src/graph_info.ml.Stable.V2.t",
    cst_src_graph_info_ml_Stable_V$2 = "src/graph_info.ml.Stable.V3.t",
    cst_src_graph_info_ml_t$0 = "src/graph_info.ml.t",
    cst_t$17 = "t",
    cst_tree$7 = "tree",
    caml_obj_tag = runtime.caml_obj_tag,
    caml_string_notequal = runtime.caml_string_notequal;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call14
   (f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13){
    return (f.l >= 0 ? f.l : f.l = f.length) == 14
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13)
            : runtime.caml_call_gen
              (f,
               [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "~",
    error_source_002 = cst_src_graph_info_ml_Stable_N$2,
    error_source_014 = cst_src_graph_info_ml_Stable_N$1,
    error_source_031 = cst_src_graph_info_ml_Stable_V$4,
    error_source_051 = cst_src_graph_info_ml_Stable_V$3,
    error_source_071 = cst_src_graph_info_ml_Stable_V$2,
    error_source_081 = "src/graph_info.ml.Source_code_position.t",
    error_source_093 = cst_src_graph_info_ml_Node_inf$0,
    error_source_101 = cst_src_graph_info_ml_t$0,
    Core = global_data.Core,
    Base_Option = global_data.Base__Option,
    Core_Map = global_data.Core__Map,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Core_Type_equal = global_data.Core__Type_equal,
    Bonsai_Transform = global_data.Bonsai__Transform,
    Core_Hashtbl = global_data.Core__Hashtbl,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Bonsai_Node_path = global_data.Bonsai__Node_path,
    Sexplib0_Sexp_conv_record = global_data.Sexplib0__Sexp_conv_record,
    Bin_prot_Common = global_data.Bin_prot__Common,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Bin_shape = global_data.Bin_shape,
    Stdlib = global_data.Stdlib,
    Ppx_expect_runtime_Types = global_data.Ppx_expect_runtime__Types,
    Core_Stable = global_data.Core__Stable,
    Core_String = global_data.Core__String,
    Core_Source_code_position = global_data.Core__Source_code_position,
    Core_Option = global_data.Core__Option,
    Core_Int = global_data.Core__Int,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Expect_test_config = global_data.Expect_test_config,
    Ppx_expect_runtime_Test_block = global_data.Ppx_expect_runtime__Test_block,
    Ppx_expect_runtime_Test_node = global_data.Ppx_expect_runtime__Test_node,
    Inline_test_config = global_data.Inline_test_config;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Graph_info$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_graph_info_ml$5);
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai$0, "graph_info.ml");
   var
    cst_src_graph_info_ml_217_41 = "src/graph_info.ml:217:41",
    cst_BUG = "BUG",
    _av_ = [0, cst_info$7],
    _aw_ = [0, cst_dag$7],
    _ax_ = [0, cst_tree$7],
    cst_info$6 = cst_info$7,
    cst_dag$6 = cst_dag$7,
    cst_tree$6 = cst_tree$7,
    cst_src_graph_info_ml_t = cst_src_graph_info_ml_t$0,
    cst_path = "path",
    cst_return = "return",
    cst_leaf1 = "leaf1",
    cst_leaf0 = "leaf0",
    cst_leaf_incr = "leaf_incr",
    cst_sub = "sub",
    cst_store = "store",
    cst_fetch = "fetch",
    cst_assoc = "assoc",
    cst_assoc_on = "assoc_on",
    cst_assoc_simpl = "assoc_simpl",
    cst_switch = "switch",
    cst_lazy = "lazy",
    cst_wrap = "wrap",
    cst_with_model_resetter = "with_model_resetter",
    cst_lifecycle = "lifecycle",
    cst_constant = "constant",
    cst_incr = "incr",
    cst_named = "named",
    cst_both = "both",
    cst_cutoff = "cutoff",
    cst_map = "map",
    cst_map2 = "map2",
    cst_map3 = "map3",
    cst_map4 = "map4",
    cst_map5 = "map5",
    cst_map6 = "map6",
    cst_map7 = "map7",
    cst_exception = "exception",
    cst_src_graph_info_ml_Node_inf = cst_src_graph_info_ml_Node_inf$0,
    _ag_ = [0, cst_here$5],
    _ah_ = [0, cst_node_type$5],
    cst_here$3 = cst_here$5,
    cst_node_type$3 = cst_node_type$5,
    ___ = [0, cst_pos_cnum$1],
    _$_ = [0, cst_pos_bol$1],
    _aa_ = [0, cst_pos_lnum$1],
    _ab_ = [0, cst_pos_fname$1],
    cst_pos_cnum = cst_pos_cnum$1,
    cst_pos_bol = cst_pos_bol$1,
    cst_pos_lnum = cst_pos_lnum$1,
    cst_pos_fname = cst_pos_fname$1,
    _X_ = [0, cst_info$7],
    _Y_ = [0, cst_dag$7],
    _Z_ = [0, cst_tree$7],
    cst_info$4 = cst_info$7,
    cst_dag$4 = cst_dag$7,
    cst_tree$4 = cst_tree$7,
    cst_src_graph_info_ml_Stable_V$1 = cst_src_graph_info_ml_Stable_V$2,
    _M_ = [0, cst_info$7],
    _N_ = [0, cst_dag$7],
    _O_ = [0, cst_tree$7],
    cst_info$2 = cst_info$7,
    cst_dag$2 = cst_dag$7,
    cst_tree$2 = cst_tree$7,
    cst_src_graph_info_ml_Stable_V$0 = cst_src_graph_info_ml_Stable_V$3,
    _B_ = [0, cst_info$7],
    _C_ = [0, cst_dag$7],
    _D_ = [0, cst_tree$7],
    cst_info$0 = cst_info$7,
    cst_dag$0 = cst_dag$7,
    cst_tree$0 = cst_tree$7,
    cst_src_graph_info_ml_Stable_V = cst_src_graph_info_ml_Stable_V$4,
    cst_src_graph_info_ml_Stable_N$0 = cst_src_graph_info_ml_Stable_N$1,
    _h_ = [0, cst_id$1],
    _i_ = [0, cst_here$5],
    _j_ = [0, cst_node_type$5],
    cst_id = cst_id$1,
    cst_here$1 = cst_here$5,
    cst_node_type$1 = cst_node_type$5,
    cst_src_graph_info_ml_Stable_N = cst_src_graph_info_ml_Stable_N$2,
    _a_ = [0, cst_here$5],
    _b_ = [0, cst_node_type$5],
    cst_here = cst_here$5,
    cst_node_type = cst_node_type$5,
    cst_here$0 = cst_here$5,
    cst_node_type$0 = cst_node_type$5,
    cst_t = cst_t$17,
    cst_src_graph_info_ml_6_6 = "src/graph_info.ml:6:6",
    cst_t$0 = cst_t$17,
    _bl_ =
      [0,
       [0,
        [0, cst_127c33aa3895110d2fdd1b3c35, [0, cst$0]],
        [0, 331, 348, 386]]],
    _bm_ = [0, 331, 339, 387],
    _br_ = [0, 265, 271, 387],
    _bs_ = [0, 331, 387, 387],
    _bt_ = [0, 265, 271, 387],
    cst_src_graph_info_ml$4 = cst_src_graph_info_ml$5,
    cst_id$0 = cst_id$1,
    cst_here$2 = cst_here$5,
    cst_node_type$2 = cst_node_type$5,
    cst_t$1 = cst_t$17,
    cst_src_graph_info_ml_19_6 = "src/graph_info.ml:19:6",
    cst_t$2 = cst_t$17,
    _bb_ =
      [0,
       [0,
        [0, " da0e8001d1f5692d5a56c26e18c81a01 ", [0, cst$0]],
        [0, 731, 748, 786]]],
    _bc_ = [0, 731, 739, 787],
    _bh_ = [0, 665, 671, 787],
    _bi_ = [0, 731, 787, 787],
    _bj_ = [0, 665, 671, 787],
    cst_src_graph_info_ml$3 = cst_src_graph_info_ml$5,
    cst_t$3 = cst_t$17,
    cst_src_graph_info_ml_36_6 = "src/graph_info.ml:36:6",
    cst_t$4 = cst_t$17,
    _a3_ =
      [0,
       [0,
        [0, cst_127c33aa3895110d2fdd1b3c35, [0, cst$0]],
        [0, 1021, 1038, 1076]]],
    _a4_ = [0, 1021, 1029, 1077],
    _a9_ = [0, 955, 961, 1077],
    _a__ = [0, 1021, 1077, 1077],
    _a$_ = [0, 955, 961, 1077],
    cst_src_graph_info_ml$2 = cst_src_graph_info_ml$5,
    cst_info = cst_info$7,
    cst_dag = cst_dag$7,
    cst_tree = cst_tree$7,
    cst_t$5 = cst_t$17,
    cst_src_graph_info_ml_49_4 = "src/graph_info.ml:49:4",
    cst_t$6 = cst_t$17,
    _aT_ =
      [0,
       [0,
        [0, cst_122924cb491f2c00727ae98b5c, [0, cst$0]],
        [0, 1478, 1493, 1531]]],
    _aU_ = [0, 1478, 1484, 1532],
    _aZ_ = [0, 1416, 1420, 1532],
    _a0_ = [0, 1478, 1532, 1532],
    _a1_ = [0, 1416, 1420, 1532],
    cst_src_graph_info_ml$1 = cst_src_graph_info_ml$5,
    cst_info$1 = cst_info$7,
    cst_dag$1 = cst_dag$7,
    cst_tree$1 = cst_tree$7,
    cst_t$7 = cst_t$17,
    cst_src_graph_info_ml_63_4 = "src/graph_info.ml:63:4",
    cst_t$8 = cst_t$17,
    _aJ_ =
      [0,
       [0,
        [0, " ca80280d86a032bbd663626d8558fe6f ", [0, cst$0]],
        [0, 1923, 1938, 1976]]],
    _aK_ = [0, 1923, 1929, 1977],
    _aP_ = [0, 1861, 1865, 1977],
    _aQ_ = [0, 1923, 1977, 1977],
    _aR_ = [0, 1861, 1865, 1977],
    cst_src_graph_info_ml$0 = cst_src_graph_info_ml$5,
    cst_info$3 = cst_info$7,
    cst_dag$3 = cst_dag$7,
    cst_tree$3 = cst_tree$7,
    cst_t$9 = cst_t$17,
    cst_src_graph_info_ml_87_4 = "src/graph_info.ml:87:4",
    cst_t$10 = cst_t$17,
    _az_ =
      [0,
       [0,
        [0, cst_122924cb491f2c00727ae98b5c, [0, cst$0]],
        [0, 2588, 2603, 2641]]],
    _aA_ = [0, 2588, 2594, 2642],
    _aF_ = [0, 2526, 2530, 2642],
    _aG_ = [0, 2588, 2642, 2642],
    _aH_ = [0, 2526, 2530, 2642],
    cst_src_graph_info_ml = cst_src_graph_info_ml$5,
    cst_pos_cnum$0 = cst_pos_cnum$1,
    cst_pos_bol$0 = cst_pos_bol$1,
    cst_pos_lnum$0 = cst_pos_lnum$1,
    cst_pos_fname$0 = cst_pos_fname$1,
    cst_t$11 = cst_t$17,
    cst_src_graph_info_ml_117_2 = "src/graph_info.ml:117:2",
    cst_t$12 = cst_t$17,
    cst_here$4 = cst_here$5,
    cst_node_type$4 = cst_node_type$5,
    cst_t$13 = cst_t$17,
    cst_src_graph_info_ml_127_2 = "src/graph_info.ml:127:2",
    cst_t$14 = cst_t$17,
    cst_info$5 = cst_info$7,
    cst_dag$5 = cst_dag$7,
    cst_tree$5 = cst_tree$7,
    cst_t$15 = cst_t$17,
    cst_src_graph_info_ml_183_0 = "src/graph_info.ml:183:0",
    cst_t$16 = cst_t$17,
    cst_bonsai = cst_bonsai$0,
    cst_Bonsai_Graph_info = cst_Bonsai_Graph_info$0;
   function t_of_sexp(x_003){
    function _dw_(param){
     var here = param[2][1], node_type = param[1];
     return [0, node_type, here];
    }
    var _dx_ = 0;
    function _dy_(param){
     return caml_string_notequal(param, cst_here$5)
             ? caml_string_notequal(param, cst_node_type$5) ? -1 : 0
             : 1;
    }
    var
     _dz_ =
       [0,
        cst_here,
        1,
        caml_call1
         (Core_Option[68][1][14], Core_Source_code_position[38][1][12]),
        0];
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_002,
             [0, cst_node_type, 1, Core_String[180][1][20], _dz_],
             _dy_,
             _dx_,
             _dw_,
             x_003);
   }
   function sexp_of_t(param){
    var
     here_007 = param[2],
     node_type_005 = param[1],
     arg_008 =
       caml_call2
        (Core_Option[68][1][15],
         Core_Source_code_position[38][1][13],
         here_007),
     bnds_004 = [0, [1, [0, _a_, [0, arg_008, 0]]], 0],
     arg_006 = caml_call1(Core_String[180][1][21], node_type_005),
     bnds_004$0 = [0, [1, [0, _b_, [0, arg_006, 0]]], bnds_004];
    return [1, bnds_004$0];
   }
   var
    _c_ =
      [0,
       [0,
        cst_here$0,
        caml_call1(Core_Option[68][1][1], Core_Source_code_position[38][1][7])],
       0],
    _d_ =
      caml_call1
       (Bin_prot_Shape[4],
        [0, [0, cst_node_type$0, Core_String[180][1][15]], _c_]),
    _e_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t), 0, _d_], 0],
    _f_ = caml_call1(Bin_shape[4][1], cst_src_graph_info_ml_6_6),
    group = caml_call2(Bin_prot_Shape[2], _f_, _e_),
    _g_ = caml_call1(Bin_shape[2][1], cst_t$0),
    bin_shape_t = caml_call1(caml_call2(Bin_prot_Shape[10], group, _g_), 0);
   function bin_size_t(param){
    var
     v2 = param[2],
     v1 = param[1],
     _du_ = caml_call1(Core_String[180][1][11], v1),
     size = caml_call2(Bin_prot_Common[23], 0, _du_),
     _dv_ =
       caml_call2
        (Core_Option[68][1][2], Core_Source_code_position[38][1][3], v2);
    return caml_call2(Bin_prot_Common[23], size, _dv_);
   }
   function bin_write_t(buf, pos, param){
    var
     v2 = param[2],
     v1 = param[1],
     pos$0 = caml_call3(Core_String[180][1][12], buf, pos, v1);
    return caml_call4
            (Core_Option[68][1][3],
             Core_Source_code_position[38][1][4],
             buf,
             pos$0,
             v2);
   }
   var bin_writer_t = [0, bin_size_t, bin_write_t];
   function bin_read_t(buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19], cst_src_graph_info_ml_Stable_N, pos_ref[1]);
   }
   function bin_read_t$0(buf, pos_ref){
    var
     v_node_type = caml_call2(Core_String[180][1][13], buf, pos_ref),
     v_here =
       caml_call2
        (caml_call1
          (Core_Option[68][1][4], Core_Source_code_position[38][1][5]),
         buf,
         pos_ref);
    return [0, v_node_type, v_here];
   }
   var
    bin_reader_t = [0, bin_read_t$0, bin_read_t],
    bin_t = [0, bin_shape_t, bin_writer_t, bin_reader_t];
   function compare(a_009, b_010){
    if(a_009 === b_010) return 0;
    var n = caml_call2(Core_String[180][1][19], a_009[1], b_010[1]);
    if(0 !== n) return n;
    var _dr_ = b_010[2], _ds_ = a_009[2];
    function _dt_(a_011, b_012){
     return caml_call2(Core_Source_code_position[38][1][11], a_011, b_012);
    }
    return caml_call3(Core_Option[68][1][11], _dt_, _ds_, _dr_);
   }
   if(typeof Ppx_inline_test_lib[3] !== "number"){
    var
     Ppx_expect_test_block$4 =
       caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
     _bk_ =
       function(param){
        var
         _do_ = caml_call1(Bin_prot_Shape[15], bin_shape_t),
         _dp_ = caml_call1(Bin_shape[19][4], _do_);
        caml_call1(Stdlib[46], _dp_);
        var _dq_ = caml_call1(Ppx_expect_runtime_Types[4][1], 0);
        return caml_call1(Ppx_expect_test_block$4[2], _dq_);
       },
     _bn_ =
       caml_call3
        (Ppx_expect_runtime_Test_node[1][1],
         [0, Ppx_expect_runtime_Types[1][1]],
         _bm_,
         _bl_),
     _bo_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 0), _bn_], 0],
     _bp_ = caml_call1(Ppx_expect_runtime_Types[4][1], 2),
     _bq_ = caml_call1(Ppx_expect_runtime_Types[4][1], 1);
    caml_call14
     (Ppx_expect_test_block$4[3],
      cst_src_graph_info_ml$4,
      12,
      _bt_,
      _bs_,
      _br_,
      [0, Ppx_expect_runtime_Types[1][1]],
      0,
      _bq_,
      _bp_,
      0,
      0,
      Inline_test_config,
      _bo_,
      _bk_);
   }
   function t_of_sexp$0(x_015){
    function _di_(param){
     var
      _dn_ = param[2],
      id = _dn_[2][1],
      here = _dn_[1],
      node_type = param[1];
     return [0, node_type, here, id];
    }
    var _dj_ = 0;
    function _dk_(param){
     return caml_string_notequal(param, cst_here$5)
             ? caml_string_notequal
                (param, cst_id$1)
               ? caml_string_notequal(param, cst_node_type$5) ? -1 : 0
               : 2
             : 1;
    }
    var
     _dl_ = [0, cst_id, 1, Core_Int[120][1][15], 0],
     _dm_ =
       [0,
        cst_here$1,
        1,
        caml_call1
         (Core_Option[68][1][14], Core_Source_code_position[38][1][12]),
        _dl_];
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_014,
             [0, cst_node_type$1, 1, Core_String[180][1][20], _dm_],
             _dk_,
             _dj_,
             _di_,
             x_015);
   }
   function sexp_of_t$0(param){
    var
     id_021 = param[3],
     here_019 = param[2],
     node_type_017 = param[1],
     arg_022 = caml_call1(Core_Int[120][1][16], id_021),
     bnds_016 = [0, [1, [0, _h_, [0, arg_022, 0]]], 0],
     arg_020 =
       caml_call2
        (Core_Option[68][1][15],
         Core_Source_code_position[38][1][13],
         here_019),
     bnds_016$0 = [0, [1, [0, _i_, [0, arg_020, 0]]], bnds_016],
     arg_018 = caml_call1(Core_String[180][1][21], node_type_017),
     bnds_016$1 = [0, [1, [0, _j_, [0, arg_018, 0]]], bnds_016$0];
    return [1, bnds_016$1];
   }
   function compare$0(a_023, b_024){
    if(a_023 === b_024) return 0;
    var n = caml_call2(Core_String[180][1][19], a_023[1], b_024[1]);
    if(0 !== n) return n;
    var _df_ = b_024[2], _dg_ = a_023[2];
    function _dh_(a_025, b_026){
     return caml_call2(Core_Source_code_position[38][1][11], a_025, b_026);
    }
    var n$0 = caml_call3(Core_Option[68][1][11], _dh_, _dg_, _df_);
    return 0 === n$0
            ? caml_call2(Core_Int[120][1][14], a_023[3], b_024[3])
            : n$0;
   }
   var
    _k_ = [0, [0, cst_id$0, Core_Int[120][1][10]], 0],
    _l_ =
      [0,
       [0,
        cst_here$2,
        caml_call1(Core_Option[68][1][1], Core_Source_code_position[38][1][7])],
       _k_],
    _m_ =
      caml_call1
       (Bin_prot_Shape[4],
        [0, [0, cst_node_type$2, Core_String[180][1][15]], _l_]),
    _n_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$1), 0, _m_], 0],
    _o_ = caml_call1(Bin_shape[4][1], cst_src_graph_info_ml_19_6),
    group$0 = caml_call2(Bin_prot_Shape[2], _o_, _n_),
    _p_ = caml_call1(Bin_shape[2][1], cst_t$2),
    bin_shape_t$0 =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$0, _p_), 0);
   function bin_size_t$0(param){
    var
     v3 = param[3],
     v2 = param[2],
     v1 = param[1],
     _dc_ = caml_call1(Core_String[180][1][11], v1),
     size = caml_call2(Bin_prot_Common[23], 0, _dc_),
     _dd_ =
       caml_call2
        (Core_Option[68][1][2], Core_Source_code_position[38][1][3], v2),
     size$0 = caml_call2(Bin_prot_Common[23], size, _dd_),
     _de_ = caml_call1(Core_Int[120][1][6], v3);
    return caml_call2(Bin_prot_Common[23], size$0, _de_);
   }
   function bin_write_t$0(buf, pos, param){
    var
     v3 = param[3],
     v2 = param[2],
     v1 = param[1],
     pos$0 = caml_call3(Core_String[180][1][12], buf, pos, v1),
     pos$1 =
       caml_call4
        (Core_Option[68][1][3],
         Core_Source_code_position[38][1][4],
         buf,
         pos$0,
         v2);
    return caml_call3(Core_Int[120][1][7], buf, pos$1, v3);
   }
   var bin_writer_t$0 = [0, bin_size_t$0, bin_write_t$0];
   function bin_read_t$1(buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19],
             cst_src_graph_info_ml_Stable_N$0,
             pos_ref[1]);
   }
   function bin_read_t$2(buf, pos_ref){
    var
     v_node_type = caml_call2(Core_String[180][1][13], buf, pos_ref),
     v_here =
       caml_call2
        (caml_call1
          (Core_Option[68][1][4], Core_Source_code_position[38][1][5]),
         buf,
         pos_ref),
     v_id = caml_call2(Core_Int[120][1][8], buf, pos_ref);
    return [0, v_node_type, v_here, v_id];
   }
   var
    bin_reader_t$0 = [0, bin_read_t$2, bin_read_t$1],
    bin_t$0 = [0, bin_shape_t$0, bin_writer_t$0, bin_reader_t$0];
   if(typeof Ppx_inline_test_lib[3] !== "number"){
    var
     Ppx_expect_test_block$3 =
       caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
     _ba_ =
       function(param){
        var
         _c$_ = caml_call1(Bin_prot_Shape[15], bin_shape_t$0),
         _da_ = caml_call1(Bin_shape[19][4], _c$_);
        caml_call1(Stdlib[46], _da_);
        var _db_ = caml_call1(Ppx_expect_runtime_Types[4][1], 3);
        return caml_call1(Ppx_expect_test_block$3[2], _db_);
       },
     _bd_ =
       caml_call3
        (Ppx_expect_runtime_Test_node[1][1],
         [0, Ppx_expect_runtime_Types[1][1]],
         _bc_,
         _bb_),
     _be_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 3), _bd_], 0],
     _bf_ = caml_call1(Ppx_expect_runtime_Types[4][1], 5),
     _bg_ = caml_call1(Ppx_expect_runtime_Types[4][1], 4);
    caml_call14
     (Ppx_expect_test_block$3[3],
      cst_src_graph_info_ml$3,
      26,
      _bj_,
      _bi_,
      _bh_,
      [0, Ppx_expect_runtime_Types[1][1]],
      0,
      _bg_,
      _bf_,
      0,
      0,
      Inline_test_config,
      _be_,
      _ba_);
   }
   function to_v1(t){
    var here = t[2], node_type = t[1];
    return [0, node_type, here];
   }
   function of_v1(t){
    var here = t[2], node_type = t[1];
    return [0, node_type, here, -1];
   }
   var
    _q_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$3), 0, bin_shape_t], 0],
    _r_ = caml_call1(Bin_shape[4][1], cst_src_graph_info_ml_36_6),
    group$1 = caml_call2(Bin_prot_Shape[2], _r_, _q_),
    _s_ = caml_call1(Bin_shape[2][1], cst_t$4),
    bin_shape_t$1 =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$1, _s_), 0);
   if(typeof Ppx_inline_test_lib[3] !== "number"){
    var
     Ppx_expect_test_block$2 =
       caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
     _a2_ =
       function(param){
        var
         _c8_ = caml_call1(Bin_prot_Shape[15], bin_shape_t$1),
         _c9_ = caml_call1(Bin_shape[19][4], _c8_);
        caml_call1(Stdlib[46], _c9_);
        var _c__ = caml_call1(Ppx_expect_runtime_Types[4][1], 6);
        return caml_call1(Ppx_expect_test_block$2[2], _c__);
       },
     _a5_ =
       caml_call3
        (Ppx_expect_runtime_Test_node[1][1],
         [0, Ppx_expect_runtime_Types[1][1]],
         _a4_,
         _a3_),
     _a6_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 6), _a5_], 0],
     _a7_ = caml_call1(Ppx_expect_runtime_Types[4][1], 8),
     _a8_ = caml_call1(Ppx_expect_runtime_Types[4][1], 7);
    caml_call14
     (Ppx_expect_test_block$2[3],
      cst_src_graph_info_ml$2,
      38,
      _a$_,
      _a__,
      _a9_,
      [0, Ppx_expect_runtime_Types[1][1]],
      0,
      _a8_,
      _a7_,
      0,
      0,
      Inline_test_config,
      _a6_,
      _a2_);
   }
   var
    _t_ =
      [0,
       [0, cst_info, caml_call1(Bonsai_Node_path[39][1][13][1], bin_shape_t)],
       0],
    _u_ = caml_call1(Core_Stable[203], Bonsai_Node_path[39][1][5]),
    _v_ =
      [0, [0, cst_dag, caml_call1(Bonsai_Node_path[39][1][13][1], _u_)], _t_],
    _w_ =
      [0,
       [0,
        cst_tree,
        caml_call1(Bonsai_Node_path[39][1][13][1], Bonsai_Node_path[39][1][5])],
       _v_],
    _x_ = caml_call1(Bin_prot_Shape[4], _w_),
    _y_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$5), 0, _x_], 0],
    _z_ = caml_call1(Bin_shape[4][1], cst_src_graph_info_ml_49_4),
    group$2 = caml_call2(Bin_prot_Shape[2], _z_, _y_),
    _A_ = caml_call1(Bin_shape[2][1], cst_t$6),
    bin_shape_t$2 =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$2, _A_), 0);
   function bin_size_t$1(param){
    var
     v3 = param[3],
     v2 = param[2],
     v1 = param[1],
     _c4_ =
       caml_call2
        (Bonsai_Node_path[39][1][13][2], Bonsai_Node_path[39][1][1], v1),
     size = caml_call2(Bin_prot_Common[23], 0, _c4_),
     _c5_ = caml_call1(Core_Stable[18], Bonsai_Node_path[39][1][1]),
     _c6_ = caml_call2(Bonsai_Node_path[39][1][13][2], _c5_, v2),
     size$0 = caml_call2(Bin_prot_Common[23], size, _c6_),
     _c7_ = caml_call2(Bonsai_Node_path[39][1][13][2], bin_size_t, v3);
    return caml_call2(Bin_prot_Common[23], size$0, _c7_);
   }
   function bin_write_t$1(buf, pos, param){
    var
     v3 = param[3],
     v2 = param[2],
     v1 = param[1],
     pos$0 =
       caml_call4
        (Bonsai_Node_path[39][1][13][3],
         Bonsai_Node_path[39][1][2],
         buf,
         pos,
         v1),
     _c3_ = caml_call1(Core_Stable[205], Bonsai_Node_path[39][1][2]),
     pos$1 = caml_call4(Bonsai_Node_path[39][1][13][3], _c3_, buf, pos$0, v2);
    return caml_call4
            (Bonsai_Node_path[39][1][13][3], bin_write_t, buf, pos$1, v3);
   }
   var bin_writer_t$1 = [0, bin_size_t$1, bin_write_t$1];
   function bin_read_t$3(buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19], cst_src_graph_info_ml_Stable_V, pos_ref[1]);
   }
   function bin_read_t$4(buf, pos_ref){
    var
     v_tree =
       caml_call2
        (caml_call1
          (Bonsai_Node_path[39][1][13][4], Bonsai_Node_path[39][1][3]),
         buf,
         pos_ref),
     _c2_ = caml_call1(Core_Stable[208], Bonsai_Node_path[39][1][3]),
     v_dag =
       caml_call2
        (caml_call1(Bonsai_Node_path[39][1][13][4], _c2_), buf, pos_ref),
     v_info =
       caml_call2
        (caml_call1(Bonsai_Node_path[39][1][13][4], bin_read_t$0),
         buf,
         pos_ref);
    return [0, v_tree, v_dag, v_info];
   }
   var
    bin_reader_t$1 = [0, bin_read_t$4, bin_read_t$3],
    bin_t$1 = [0, bin_shape_t$2, bin_writer_t$1, bin_reader_t$1];
   function t_of_sexp$1(x_032){
    function _cU_(param){
     var _c1_ = param[2], info = _c1_[2][1], dag = _c1_[1], tree = param[1];
     return [0, tree, dag, info];
    }
    var _cV_ = 0;
    function _cW_(param){
     return caml_string_notequal(param, cst_dag$7)
             ? caml_string_notequal
                (param, cst_info$7)
               ? caml_string_notequal(param, cst_tree$7) ? -1 : 0
               : 2
             : 1;
    }
    var
     _cX_ =
       [0,
        cst_info$0,
        1,
        caml_call1(Bonsai_Node_path[39][1][13][10], t_of_sexp),
        0],
     _cY_ = caml_call1(Core_Stable[343], Bonsai_Node_path[39][1][10]),
     _cZ_ =
       [0,
        cst_dag$0,
        1,
        caml_call1(Bonsai_Node_path[39][1][13][10], _cY_),
        _cX_],
     _c0_ =
       [0,
        cst_tree$0,
        1,
        caml_call1
         (Bonsai_Node_path[39][1][13][10], Bonsai_Node_path[39][1][10]),
        _cZ_];
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_031,
             _c0_,
             _cW_,
             _cV_,
             _cU_,
             x_032);
   }
   function sexp_of_t$1(param){
    var
     info_038 = param[3],
     dag_036 = param[2],
     tree_034 = param[1],
     arg_039 =
       caml_call2(Bonsai_Node_path[39][1][13][11], sexp_of_t, info_038),
     bnds_033 = [0, [1, [0, _B_, [0, arg_039, 0]]], 0],
     _cT_ = caml_call1(Core_Stable[342], Bonsai_Node_path[39][1][11]),
     arg_037 = caml_call2(Bonsai_Node_path[39][1][13][11], _cT_, dag_036),
     bnds_033$0 = [0, [1, [0, _C_, [0, arg_037, 0]]], bnds_033],
     arg_035 =
       caml_call2
        (Bonsai_Node_path[39][1][13][11],
         Bonsai_Node_path[39][1][11],
         tree_034),
     bnds_033$1 = [0, [1, [0, _D_, [0, arg_035, 0]]], bnds_033$0];
    return [1, bnds_033$1];
   }
   if(typeof Ppx_inline_test_lib[3] !== "number"){
    var
     Ppx_expect_test_block$1 =
       caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
     _aS_ =
       function(param){
        var
         _cQ_ = caml_call1(Bin_prot_Shape[15], bin_shape_t$2),
         _cR_ = caml_call1(Bin_shape[19][4], _cQ_);
        caml_call1(Stdlib[46], _cR_);
        var _cS_ = caml_call1(Ppx_expect_runtime_Types[4][1], 9);
        return caml_call1(Ppx_expect_test_block$1[2], _cS_);
       },
     _aV_ =
       caml_call3
        (Ppx_expect_runtime_Test_node[1][1],
         [0, Ppx_expect_runtime_Types[1][1]],
         _aU_,
         _aT_),
     _aW_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 9), _aV_], 0],
     _aX_ = caml_call1(Ppx_expect_runtime_Types[4][1], 11),
     _aY_ = caml_call1(Ppx_expect_runtime_Types[4][1], 10);
    caml_call14
     (Ppx_expect_test_block$1[3],
      cst_src_graph_info_ml$1,
      56,
      _a1_,
      _a0_,
      _aZ_,
      [0, Ppx_expect_runtime_Types[1][1]],
      0,
      _aY_,
      _aX_,
      0,
      0,
      Inline_test_config,
      _aW_,
      _aS_);
   }
   var
    _E_ =
      [0,
       [0,
        cst_info$1,
        caml_call1(Bonsai_Node_path[39][1][13][1], bin_shape_t$0)],
       0],
    _F_ = caml_call1(Core_Stable[203], Bonsai_Node_path[39][1][5]),
    _G_ =
      [0,
       [0, cst_dag$1, caml_call1(Bonsai_Node_path[39][1][13][1], _F_)],
       _E_],
    _H_ =
      [0,
       [0,
        cst_tree$1,
        caml_call1(Bonsai_Node_path[39][1][13][1], Bonsai_Node_path[39][1][5])],
       _G_],
    _I_ = caml_call1(Bin_prot_Shape[4], _H_),
    _J_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$7), 0, _I_], 0],
    _K_ = caml_call1(Bin_shape[4][1], cst_src_graph_info_ml_63_4),
    group$3 = caml_call2(Bin_prot_Shape[2], _K_, _J_),
    _L_ = caml_call1(Bin_shape[2][1], cst_t$8),
    bin_shape_t$3 =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$3, _L_), 0);
   function bin_size_t$2(param){
    var
     v3 = param[3],
     v2 = param[2],
     v1 = param[1],
     _cM_ =
       caml_call2
        (Bonsai_Node_path[39][1][13][2], Bonsai_Node_path[39][1][1], v1),
     size = caml_call2(Bin_prot_Common[23], 0, _cM_),
     _cN_ = caml_call1(Core_Stable[18], Bonsai_Node_path[39][1][1]),
     _cO_ = caml_call2(Bonsai_Node_path[39][1][13][2], _cN_, v2),
     size$0 = caml_call2(Bin_prot_Common[23], size, _cO_),
     _cP_ = caml_call2(Bonsai_Node_path[39][1][13][2], bin_size_t$0, v3);
    return caml_call2(Bin_prot_Common[23], size$0, _cP_);
   }
   function bin_write_t$2(buf, pos, param){
    var
     v3 = param[3],
     v2 = param[2],
     v1 = param[1],
     pos$0 =
       caml_call4
        (Bonsai_Node_path[39][1][13][3],
         Bonsai_Node_path[39][1][2],
         buf,
         pos,
         v1),
     _cL_ = caml_call1(Core_Stable[205], Bonsai_Node_path[39][1][2]),
     pos$1 = caml_call4(Bonsai_Node_path[39][1][13][3], _cL_, buf, pos$0, v2);
    return caml_call4
            (Bonsai_Node_path[39][1][13][3], bin_write_t$0, buf, pos$1, v3);
   }
   var bin_writer_t$2 = [0, bin_size_t$2, bin_write_t$2];
   function bin_read_t$5(buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19],
             cst_src_graph_info_ml_Stable_V$0,
             pos_ref[1]);
   }
   function bin_read_t$6(buf, pos_ref){
    var
     v_tree =
       caml_call2
        (caml_call1
          (Bonsai_Node_path[39][1][13][4], Bonsai_Node_path[39][1][3]),
         buf,
         pos_ref),
     _cK_ = caml_call1(Core_Stable[208], Bonsai_Node_path[39][1][3]),
     v_dag =
       caml_call2
        (caml_call1(Bonsai_Node_path[39][1][13][4], _cK_), buf, pos_ref),
     v_info =
       caml_call2
        (caml_call1(Bonsai_Node_path[39][1][13][4], bin_read_t$2),
         buf,
         pos_ref);
    return [0, v_tree, v_dag, v_info];
   }
   var
    bin_reader_t$2 = [0, bin_read_t$6, bin_read_t$5],
    bin_t$2 = [0, bin_shape_t$3, bin_writer_t$2, bin_reader_t$2];
   function t_of_sexp$2(x_052){
    function _cC_(param){
     var _cJ_ = param[2], info = _cJ_[2][1], dag = _cJ_[1], tree = param[1];
     return [0, tree, dag, info];
    }
    var _cD_ = 0;
    function _cE_(param){
     return caml_string_notequal(param, cst_dag$7)
             ? caml_string_notequal
                (param, cst_info$7)
               ? caml_string_notequal(param, cst_tree$7) ? -1 : 0
               : 2
             : 1;
    }
    var
     _cF_ =
       [0,
        cst_info$2,
        1,
        caml_call1(Bonsai_Node_path[39][1][13][10], t_of_sexp$0),
        0],
     _cG_ = caml_call1(Core_Stable[343], Bonsai_Node_path[39][1][10]),
     _cH_ =
       [0,
        cst_dag$2,
        1,
        caml_call1(Bonsai_Node_path[39][1][13][10], _cG_),
        _cF_],
     _cI_ =
       [0,
        cst_tree$2,
        1,
        caml_call1
         (Bonsai_Node_path[39][1][13][10], Bonsai_Node_path[39][1][10]),
        _cH_];
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_051,
             _cI_,
             _cE_,
             _cD_,
             _cC_,
             x_052);
   }
   function sexp_of_t$2(param){
    var
     info_058 = param[3],
     dag_056 = param[2],
     tree_054 = param[1],
     arg_059 =
       caml_call2(Bonsai_Node_path[39][1][13][11], sexp_of_t$0, info_058),
     bnds_053 = [0, [1, [0, _M_, [0, arg_059, 0]]], 0],
     _cB_ = caml_call1(Core_Stable[342], Bonsai_Node_path[39][1][11]),
     arg_057 = caml_call2(Bonsai_Node_path[39][1][13][11], _cB_, dag_056),
     bnds_053$0 = [0, [1, [0, _N_, [0, arg_057, 0]]], bnds_053],
     arg_055 =
       caml_call2
        (Bonsai_Node_path[39][1][13][11],
         Bonsai_Node_path[39][1][11],
         tree_054),
     bnds_053$1 = [0, [1, [0, _O_, [0, arg_055, 0]]], bnds_053$0];
    return [1, bnds_053$1];
   }
   if(typeof Ppx_inline_test_lib[3] !== "number"){
    var
     Ppx_expect_test_block$0 =
       caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
     _aI_ =
       function(param){
        var
         _cy_ = caml_call1(Bin_prot_Shape[15], bin_shape_t$3),
         _cz_ = caml_call1(Bin_shape[19][4], _cy_);
        caml_call1(Stdlib[46], _cz_);
        var _cA_ = caml_call1(Ppx_expect_runtime_Types[4][1], 12);
        return caml_call1(Ppx_expect_test_block$0[2], _cA_);
       },
     _aL_ =
       caml_call3
        (Ppx_expect_runtime_Test_node[1][1],
         [0, Ppx_expect_runtime_Types[1][1]],
         _aK_,
         _aJ_),
     _aM_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 12), _aL_], 0],
     _aN_ = caml_call1(Ppx_expect_runtime_Types[4][1], 14),
     _aO_ = caml_call1(Ppx_expect_runtime_Types[4][1], 13);
    caml_call14
     (Ppx_expect_test_block$0[3],
      cst_src_graph_info_ml$0,
      70,
      _aR_,
      _aQ_,
      _aP_,
      [0, Ppx_expect_runtime_Types[1][1]],
      0,
      _aO_,
      _aN_,
      0,
      0,
      Inline_test_config,
      _aM_,
      _aI_);
   }
   function of_v1$0(t){
    var info = t[3], dag = t[2], tree = t[1];
    return [0, tree, dag, caml_call2(Core_Map[57], info, of_v1)];
   }
   function to_v1$0(t){
    var info = t[3], dag = t[2], tree = t[1];
    return [0, tree, dag, caml_call2(Core_Map[57], info, to_v1)];
   }
   var
    _P_ =
      [0,
       [0,
        cst_info$3,
        caml_call1(Bonsai_Node_path[39][1][13][1], bin_shape_t$1)],
       0],
    _Q_ = caml_call1(Core_Stable[203], Bonsai_Node_path[39][1][5]),
    _R_ =
      [0,
       [0, cst_dag$3, caml_call1(Bonsai_Node_path[39][1][13][1], _Q_)],
       _P_],
    _S_ =
      [0,
       [0,
        cst_tree$3,
        caml_call1(Bonsai_Node_path[39][1][13][1], Bonsai_Node_path[39][1][5])],
       _R_],
    _T_ = caml_call1(Bin_prot_Shape[4], _S_),
    _U_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$9), 0, _T_], 0],
    _V_ = caml_call1(Bin_shape[4][1], cst_src_graph_info_ml_87_4),
    group$4 = caml_call2(Bin_prot_Shape[2], _V_, _U_),
    _W_ = caml_call1(Bin_shape[2][1], cst_t$10),
    bin_shape_t$4 =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$4, _W_), 0);
   function bin_size_t$3(param){
    var
     v3 = param[3],
     v2 = param[2],
     v1 = param[1],
     _cu_ =
       caml_call2
        (Bonsai_Node_path[39][1][13][2], Bonsai_Node_path[39][1][1], v1),
     size = caml_call2(Bin_prot_Common[23], 0, _cu_),
     _cv_ = caml_call1(Core_Stable[18], Bonsai_Node_path[39][1][1]),
     _cw_ = caml_call2(Bonsai_Node_path[39][1][13][2], _cv_, v2),
     size$0 = caml_call2(Bin_prot_Common[23], size, _cw_),
     _cx_ = caml_call2(Bonsai_Node_path[39][1][13][2], bin_size_t, v3);
    return caml_call2(Bin_prot_Common[23], size$0, _cx_);
   }
   function bin_write_t$3(buf, pos, param){
    var
     v3 = param[3],
     v2 = param[2],
     v1 = param[1],
     pos$0 =
       caml_call4
        (Bonsai_Node_path[39][1][13][3],
         Bonsai_Node_path[39][1][2],
         buf,
         pos,
         v1),
     _ct_ = caml_call1(Core_Stable[205], Bonsai_Node_path[39][1][2]),
     pos$1 = caml_call4(Bonsai_Node_path[39][1][13][3], _ct_, buf, pos$0, v2);
    return caml_call4
            (Bonsai_Node_path[39][1][13][3], bin_write_t, buf, pos$1, v3);
   }
   var bin_writer_t$3 = [0, bin_size_t$3, bin_write_t$3];
   function bin_read_t$7(buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19],
             cst_src_graph_info_ml_Stable_V$1,
             pos_ref[1]);
   }
   function bin_read_t$8(buf, pos_ref){
    var
     v_tree =
       caml_call2
        (caml_call1
          (Bonsai_Node_path[39][1][13][4], Bonsai_Node_path[39][1][3]),
         buf,
         pos_ref),
     _cs_ = caml_call1(Core_Stable[208], Bonsai_Node_path[39][1][3]),
     v_dag =
       caml_call2
        (caml_call1(Bonsai_Node_path[39][1][13][4], _cs_), buf, pos_ref),
     v_info =
       caml_call2
        (caml_call1(Bonsai_Node_path[39][1][13][4], bin_read_t$0),
         buf,
         pos_ref);
    return [0, v_tree, v_dag, v_info];
   }
   var
    bin_reader_t$3 = [0, bin_read_t$8, bin_read_t$7],
    bin_t$3 = [0, bin_shape_t$4, bin_writer_t$3, bin_reader_t$3];
   function t_of_sexp$3(x_072){
    function _ck_(param){
     var _cr_ = param[2], info = _cr_[2][1], dag = _cr_[1], tree = param[1];
     return [0, tree, dag, info];
    }
    var _cl_ = 0;
    function _cm_(param){
     return caml_string_notequal(param, cst_dag$7)
             ? caml_string_notequal
                (param, cst_info$7)
               ? caml_string_notequal(param, cst_tree$7) ? -1 : 0
               : 2
             : 1;
    }
    var
     _cn_ =
       [0,
        cst_info$4,
        1,
        caml_call1(Bonsai_Node_path[39][1][13][10], t_of_sexp),
        0],
     _co_ = caml_call1(Core_Stable[343], Bonsai_Node_path[39][1][10]),
     _cp_ =
       [0,
        cst_dag$4,
        1,
        caml_call1(Bonsai_Node_path[39][1][13][10], _co_),
        _cn_],
     _cq_ =
       [0,
        cst_tree$4,
        1,
        caml_call1
         (Bonsai_Node_path[39][1][13][10], Bonsai_Node_path[39][1][10]),
        _cp_];
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_071,
             _cq_,
             _cm_,
             _cl_,
             _ck_,
             x_072);
   }
   function sexp_of_t$3(param){
    var
     info_078 = param[3],
     dag_076 = param[2],
     tree_074 = param[1],
     arg_079 =
       caml_call2(Bonsai_Node_path[39][1][13][11], sexp_of_t, info_078),
     bnds_073 = [0, [1, [0, _X_, [0, arg_079, 0]]], 0],
     _cj_ = caml_call1(Core_Stable[342], Bonsai_Node_path[39][1][11]),
     arg_077 = caml_call2(Bonsai_Node_path[39][1][13][11], _cj_, dag_076),
     bnds_073$0 = [0, [1, [0, _Y_, [0, arg_077, 0]]], bnds_073],
     arg_075 =
       caml_call2
        (Bonsai_Node_path[39][1][13][11],
         Bonsai_Node_path[39][1][11],
         tree_074),
     bnds_073$1 = [0, [1, [0, _Z_, [0, arg_075, 0]]], bnds_073$0];
    return [1, bnds_073$1];
   }
   if(typeof Ppx_inline_test_lib[3] !== "number"){
    var
     Ppx_expect_test_block =
       caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
     _ay_ =
       function(param){
        var
         _cg_ = caml_call1(Bin_prot_Shape[15], bin_shape_t$4),
         _ch_ = caml_call1(Bin_shape[19][4], _cg_);
        caml_call1(Stdlib[46], _ch_);
        var _ci_ = caml_call1(Ppx_expect_runtime_Types[4][1], 15);
        return caml_call1(Ppx_expect_test_block[2], _ci_);
       },
     _aB_ =
       caml_call3
        (Ppx_expect_runtime_Test_node[1][1],
         [0, Ppx_expect_runtime_Types[1][1]],
         _aA_,
         _az_),
     _aC_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 15), _aB_], 0],
     _aD_ = caml_call1(Ppx_expect_runtime_Types[4][1], 17),
     _aE_ = caml_call1(Ppx_expect_runtime_Types[4][1], 16);
    caml_call14
     (Ppx_expect_test_block[3],
      cst_src_graph_info_ml,
      94,
      _aH_,
      _aG_,
      _aF_,
      [0, Ppx_expect_runtime_Types[1][1]],
      0,
      _aE_,
      _aD_,
      0,
      0,
      Inline_test_config,
      _aC_,
      _ay_);
   }
   function of_v2(t){
    var info = t[3], dag = t[2], tree = t[1];
    return [0, tree, dag, caml_call2(Core_Map[57], info, to_v1)];
   }
   function to_v2(t){
    var info = t[3], dag = t[2], tree = t[1];
    return [0, tree, dag, caml_call2(Core_Map[57], info, of_v1)];
   }
   function t_of_sexp$4(x_082){
    function _cb_(param){
     var
      _ce_ = param[2],
      _cf_ = _ce_[2],
      pos_cnum = _cf_[2][1],
      pos_bol = _cf_[1],
      pos_lnum = _ce_[1],
      pos_fname = param[1];
     return [0, pos_fname, pos_lnum, pos_bol, pos_cnum];
    }
    var _cc_ = 0;
    function _cd_(param){
     return caml_string_notequal(param, cst_pos_bol$1)
             ? caml_string_notequal
                (param, cst_pos_cnum$1)
               ? caml_string_notequal
                  (param, cst_pos_fname$1)
                 ? caml_string_notequal(param, cst_pos_lnum$1) ? -1 : 1
                 : 0
               : 3
             : 2;
    }
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_081,
             [0,
              cst_pos_fname,
              1,
              Core[559],
              [0,
               cst_pos_lnum,
               1,
               Core[390],
               [0,
                cst_pos_bol,
                1,
                Core[390],
                [0, cst_pos_cnum, 1, Core[390], 0]]]],
             _cd_,
             _cc_,
             _cb_,
             x_082);
   }
   function sexp_of_t$4(param){
    var
     pos_cnum_090 = param[4],
     pos_bol_088 = param[3],
     pos_lnum_086 = param[2],
     pos_fname_084 = param[1],
     arg_091 = caml_call1(Core[389], pos_cnum_090),
     bnds_083 = [0, [1, [0, ___, [0, arg_091, 0]]], 0],
     arg_089 = caml_call1(Core[389], pos_bol_088),
     bnds_083$0 = [0, [1, [0, _$_, [0, arg_089, 0]]], bnds_083],
     arg_087 = caml_call1(Core[389], pos_lnum_086),
     bnds_083$1 = [0, [1, [0, _aa_, [0, arg_087, 0]]], bnds_083$0],
     arg_085 = caml_call1(Core[558], pos_fname_084),
     bnds_083$2 = [0, [1, [0, _ab_, [0, arg_085, 0]]], bnds_083$1];
    return [1, bnds_083$2];
   }
   var
    _ac_ =
      caml_call1
       (Bin_prot_Shape[4],
        [0,
         [0, cst_pos_fname$0, Core[541]],
         [0,
          [0, cst_pos_lnum$0, Core[372]],
          [0,
           [0, cst_pos_bol$0, Core[372]],
           [0, [0, cst_pos_cnum$0, Core[372]], 0]]]]),
    _ad_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$11), 0, _ac_], 0],
    _ae_ = caml_call1(Bin_shape[4][1], cst_src_graph_info_ml_117_2),
    group$5 = caml_call2(Bin_prot_Shape[2], _ae_, _ad_),
    _af_ = caml_call1(Bin_shape[2][1], cst_t$12),
    bin_shape_t$5 =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$5, _af_), 0);
   function bin_size_t$4(param){
    var
     v4 = param[4],
     v3 = param[3],
     v2 = param[2],
     v1 = param[1],
     _b9_ = caml_call1(Core[542], v1),
     size = caml_call2(Bin_prot_Common[23], 0, _b9_),
     _b__ = caml_call1(Core[373], v2),
     size$0 = caml_call2(Bin_prot_Common[23], size, _b__),
     _b$_ = caml_call1(Core[373], v3),
     size$1 = caml_call2(Bin_prot_Common[23], size$0, _b$_),
     _ca_ = caml_call1(Core[373], v4);
    return caml_call2(Bin_prot_Common[23], size$1, _ca_);
   }
   function bin_write_t$4(buf, pos, param){
    var
     v4 = param[4],
     v3 = param[3],
     v2 = param[2],
     v1 = param[1],
     pos$0 = caml_call3(Core[544], buf, pos, v1),
     pos$1 = caml_call3(Core[375], buf, pos$0, v2),
     pos$2 = caml_call3(Core[375], buf, pos$1, v3);
    return caml_call3(Core[375], buf, pos$2, v4);
   }
   function bin_read_t$9(buf, pos_ref){
    var
     v_pos_fname = caml_call2(Core[547], buf, pos_ref),
     v_pos_lnum = caml_call2(Core[378], buf, pos_ref),
     v_pos_bol = caml_call2(Core[378], buf, pos_ref),
     v_pos_cnum = caml_call2(Core[378], buf, pos_ref);
    return [0, v_pos_fname, v_pos_lnum, v_pos_bol, v_pos_cnum];
   }
   function t_of_sexp$5(x_094){
    function _b5_(param){
     var here = param[2][1], node_type = param[1];
     return [0, node_type, here];
    }
    var _b6_ = 0;
    function _b7_(param){
     return caml_string_notequal(param, cst_here$5)
             ? caml_string_notequal(param, cst_node_type$5) ? -1 : 0
             : 1;
    }
    var _b8_ = [0, cst_here$3, 1, caml_call1(Core[516], t_of_sexp$4), 0];
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_093,
             [0, cst_node_type$3, 1, Core[559], _b8_],
             _b7_,
             _b6_,
             _b5_,
             x_094);
   }
   function sexp_of_t$5(param){
    var
     here_098 = param[2],
     node_type_096 = param[1],
     arg_099 = caml_call2(Core[515], sexp_of_t$4, here_098),
     bnds_095 = [0, [1, [0, _ag_, [0, arg_099, 0]]], 0],
     arg_097 = caml_call1(Core[558], node_type_096),
     bnds_095$0 = [0, [1, [0, _ah_, [0, arg_097, 0]]], bnds_095];
    return [1, bnds_095$0];
   }
   var
    _ai_ = [0, [0, cst_here$4, caml_call1(Core[499], bin_shape_t$5)], 0],
    _aj_ =
      caml_call1
       (Bin_prot_Shape[4], [0, [0, cst_node_type$4, Core[541]], _ai_]),
    _ak_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$13), 0, _aj_], 0],
    _al_ = caml_call1(Bin_shape[4][1], cst_src_graph_info_ml_127_2),
    group$6 = caml_call2(Bin_prot_Shape[2], _al_, _ak_),
    _am_ = caml_call1(Bin_shape[2][1], cst_t$14),
    bin_shape_t$6 =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$6, _am_), 0);
   function bin_size_t$5(param){
    var
     v2 = param[2],
     v1 = param[1],
     _b3_ = caml_call1(Core[542], v1),
     size = caml_call2(Bin_prot_Common[23], 0, _b3_),
     _b4_ = caml_call2(Core[500], bin_size_t$4, v2);
    return caml_call2(Bin_prot_Common[23], size, _b4_);
   }
   function bin_write_t$5(buf, pos, param){
    var
     v2 = param[2],
     v1 = param[1],
     pos$0 = caml_call3(Core[544], buf, pos, v1);
    return caml_call4(Core[502], bin_write_t$4, buf, pos$0, v2);
   }
   var bin_writer_t$4 = [0, bin_size_t$5, bin_write_t$5];
   function bin_read_t$10(buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19], cst_src_graph_info_ml_Node_inf, pos_ref[1]);
   }
   function bin_read_t$11(buf, pos_ref){
    var
     v_node_type = caml_call2(Core[547], buf, pos_ref),
     v_here = caml_call2(caml_call1(Core[505], bin_read_t$9), buf, pos_ref);
    return [0, v_node_type, v_here];
   }
   var
    bin_reader_t$4 = [0, bin_read_t$11, bin_read_t$10],
    bin_t$4 = [0, bin_shape_t$6, bin_writer_t$4, bin_reader_t$4];
   function of_value(param){
    var here = param[2], value = param[1];
    switch(value[0]){
      case 0:
       var node_type = cst_constant; break;
      case 1:
       var node_type = cst_incr; break;
      case 2:
       var node_type = cst_named; break;
      case 3:
       var node_type = cst_both; break;
      case 4:
       var node_type = cst_cutoff; break;
      case 5:
       var node_type = cst_map; break;
      case 6:
       var node_type = cst_map2; break;
      case 7:
       var node_type = cst_map3; break;
      case 8:
       var node_type = cst_map4; break;
      case 9:
       var node_type = cst_map5; break;
      case 10:
       var node_type = cst_map6; break;
      case 11:
       var node_type = cst_map7; break;
      default: var node_type = cst_exception;
    }
    return [0, node_type, here];
   }
   function of_computation(computation){
    a:
    {
     if(typeof computation !== "number")
      switch(computation[0]){
        case 4:
         var here$0 = computation[4], here = here$0; break a;
        case 10:
         var here$1 = computation[3], here = [0, here$1]; break a;
      }
     var here = 0;
    }
    if(typeof computation === "number")
     var node_type = cst_path;
    else
     switch(computation[0]){
       case 0:
        var node_type = cst_return; break;
       case 1:
        var node_type = cst_leaf1; break;
       case 2:
        var node_type = cst_leaf0; break;
       case 3:
        var node_type = cst_leaf_incr; break;
       case 4:
        var node_type = cst_sub; break;
       case 5:
        var node_type = cst_store; break;
       case 6:
        var node_type = cst_fetch; break;
       case 7:
        var node_type = cst_assoc; break;
       case 8:
        var node_type = cst_assoc_on; break;
       case 9:
        var node_type = cst_assoc_simpl; break;
       case 10:
        var node_type = cst_switch; break;
       case 11:
        var node_type = cst_lazy; break;
       case 12:
        var node_type = cst_wrap; break;
       case 13:
        var node_type = cst_with_model_resetter; break;
       default: var node_type = cst_lifecycle;
     }
    return [0, node_type, here];
   }
   var
    _an_ =
      [0,
       [0, cst_info$5, caml_call1(Bonsai_Node_path[31][46], bin_shape_t$6)],
       0],
    _ao_ = caml_call1(Core[456], Bonsai_Node_path[5]),
    _ap_ =
      [0, [0, cst_dag$5, caml_call1(Bonsai_Node_path[31][46], _ao_)], _an_],
    _aq_ =
      [0,
       [0,
        cst_tree$5,
        caml_call1(Bonsai_Node_path[31][46], Bonsai_Node_path[5])],
       _ap_],
    _ar_ = caml_call1(Bin_prot_Shape[4], _aq_),
    _as_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$15), 0, _ar_], 0],
    _at_ = caml_call1(Bin_shape[4][1], cst_src_graph_info_ml_183_0),
    group$7 = caml_call2(Bin_prot_Shape[2], _at_, _as_),
    _au_ = caml_call1(Bin_shape[2][1], cst_t$16),
    bin_shape_t$7 =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$7, _au_), 0);
   function bin_size_t$6(param){
    var
     v3 = param[3],
     v2 = param[2],
     v1 = param[1],
     _bZ_ = caml_call2(Bonsai_Node_path[31][47], Bonsai_Node_path[1], v1),
     size = caml_call2(Bin_prot_Common[23], 0, _bZ_),
     _b0_ = caml_call1(Core[457], Bonsai_Node_path[1]),
     _b1_ = caml_call2(Bonsai_Node_path[31][47], _b0_, v2),
     size$0 = caml_call2(Bin_prot_Common[23], size, _b1_),
     _b2_ = caml_call2(Bonsai_Node_path[31][47], bin_size_t$5, v3);
    return caml_call2(Bin_prot_Common[23], size$0, _b2_);
   }
   function bin_write_t$6(buf, pos, param){
    var
     v3 = param[3],
     v2 = param[2],
     v1 = param[1],
     pos$0 =
       caml_call4(Bonsai_Node_path[31][48], Bonsai_Node_path[2], buf, pos, v1),
     _bY_ = caml_call1(Core[459], Bonsai_Node_path[2]),
     pos$1 = caml_call4(Bonsai_Node_path[31][48], _bY_, buf, pos$0, v2);
    return caml_call4(Bonsai_Node_path[31][48], bin_write_t$5, buf, pos$1, v3);
   }
   var bin_writer_t$5 = [0, bin_size_t$6, bin_write_t$6];
   function bin_read_t$12(buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19], cst_src_graph_info_ml_t, pos_ref[1]);
   }
   function bin_read_t$13(buf, pos_ref){
    var
     v_tree =
       caml_call2
        (caml_call1(Bonsai_Node_path[31][49], Bonsai_Node_path[3]),
         buf,
         pos_ref),
     _bX_ = caml_call1(Core[462], Bonsai_Node_path[3]),
     v_dag =
       caml_call2(caml_call1(Bonsai_Node_path[31][49], _bX_), buf, pos_ref),
     v_info =
       caml_call2
        (caml_call1(Bonsai_Node_path[31][49], bin_read_t$11), buf, pos_ref);
    return [0, v_tree, v_dag, v_info];
   }
   var
    bin_reader_t$5 = [0, bin_read_t$13, bin_read_t$12],
    bin_t$5 = [0, bin_shape_t$7, bin_writer_t$5, bin_reader_t$5];
   function t_of_sexp$6(x_102){
    function _bP_(param){
     var _bW_ = param[2], info = _bW_[2][1], dag = _bW_[1], tree = param[1];
     return [0, tree, dag, info];
    }
    var _bQ_ = 0;
    function _bR_(param){
     return caml_string_notequal(param, cst_dag$7)
             ? caml_string_notequal
                (param, cst_info$7)
               ? caml_string_notequal(param, cst_tree$7) ? -1 : 0
               : 2
             : 1;
    }
    var
     _bS_ =
       [0,
        cst_info$6,
        1,
        caml_call1(Bonsai_Node_path[31][44], t_of_sexp$5),
        0],
     _bT_ = caml_call1(Core[473], Bonsai_Node_path[9]),
     _bU_ =
       [0, cst_dag$6, 1, caml_call1(Bonsai_Node_path[31][44], _bT_), _bS_],
     _bV_ =
       [0,
        cst_tree$6,
        1,
        caml_call1(Bonsai_Node_path[31][44], Bonsai_Node_path[9]),
        _bU_];
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_101,
             _bV_,
             _bR_,
             _bQ_,
             _bP_,
             x_102);
   }
   function sexp_of_t$6(param){
    var
     info_108 = param[3],
     dag_106 = param[2],
     tree_104 = param[1],
     arg_109 = caml_call2(Bonsai_Node_path[31][45], sexp_of_t$5, info_108),
     bnds_103 = [0, [1, [0, _av_, [0, arg_109, 0]]], 0],
     _bO_ = caml_call1(Core[472], Bonsai_Node_path[10]),
     arg_107 = caml_call2(Bonsai_Node_path[31][45], _bO_, dag_106),
     bnds_103$0 = [0, [1, [0, _aw_, [0, arg_107, 0]]], bnds_103],
     arg_105 =
       caml_call2(Bonsai_Node_path[31][45], Bonsai_Node_path[10], tree_104),
     bnds_103$1 = [0, [1, [0, _ax_, [0, arg_105, 0]]], bnds_103$0];
    return [1, bnds_103$1];
   }
   var
    empty =
      [0,
       Bonsai_Node_path[31][5],
       Bonsai_Node_path[31][5],
       Bonsai_Node_path[31][5]];
   function value_map(param, state, value){
    var
     current_path = param[4],
     parent_path = param[3],
     var_from_parent = param[2],
     recurse = param[1],
     add_dag_relationship = state[3],
     add_tree_relationship = state[2],
     environment = state[1],
     node_info = of_value(value);
    if(typeof var_from_parent !== "number")
     if(0 === var_from_parent[0]){
      var var_from_parent$0 = var_from_parent[1];
      caml_call3
       (Core_Hashtbl[37], environment, var_from_parent$0, current_path);
     }
     else{
      var snd = var_from_parent[2], fst = var_from_parent[1];
      caml_call3(Core_Hashtbl[37], environment, fst, current_path);
      caml_call3(Core_Hashtbl[37], environment, snd, current_path);
     }
    caml_call3(add_tree_relationship, current_path, parent_path, node_info);
    caml_call2(add_dag_relationship, current_path, parent_path);
    if(2 === value[1][0]){
     var
      _bL_ = caml_call1(Core_Type_equal[8][2], value[3]),
      match = caml_call2(Core_Hashtbl[56], environment, _bL_);
     if(match){
      var named_id = match[1];
      caml_call2(add_dag_relationship, named_id, current_path);
     }
     else{
      var
       _bM_ =
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_src_graph_info_ml_217_41),
          0],
       _bN_ = [1, [0, caml_call1(Sexplib0_Sexp_conv[7], cst_BUG), _bM_]];
      caml_call2(Core[256], 0, _bN_);
     }
    }
    return caml_call2(recurse, state, value);
   }
   function computation_map(param, state, computation){
    var
     current_path = param[4],
     parent_path = param[3],
     var_from_parent = param[2],
     recurse = param[1],
     add_dag_relationship = state[3],
     add_tree_relationship = state[2],
     environment = state[1],
     node_info = of_computation(computation);
    caml_call3(add_tree_relationship, current_path, parent_path, node_info);
    caml_call2(add_dag_relationship, current_path, parent_path);
    if(typeof var_from_parent !== "number")
     if(0 === var_from_parent[0]){
      var var_from_parent$0 = var_from_parent[1];
      caml_call3
       (Core_Hashtbl[37], environment, var_from_parent$0, current_path);
     }
     else{
      var snd = var_from_parent[2], fst = var_from_parent[1];
      caml_call3(Core_Hashtbl[37], environment, fst, current_path);
      caml_call3(Core_Hashtbl[37], environment, snd, current_path);
     }
    var recursed = caml_call2(recurse, state, computation);
    if(typeof recursed !== "number" && 6 === recursed[0]){
     var
      v_id = recursed[1],
      uid = caml_call1(Core_Type_equal[8][2], v_id),
      match = caml_call2(Core_Hashtbl[56], environment, uid);
     if(match){
      var named_id = match[1];
      caml_call2(add_dag_relationship, named_id, current_path);
     }
     return computation;
    }
    return recursed;
   }
   function iter_graph_updates(t, on_update){
    var graph_info = [0, empty];
    function add_dag_relationship(from, to){
     var _bH_ = caml_obj_tag(to);
     a:
     if(250 === _bH_)
      var to$0 = to[1];
     else{
      if(246 !== _bH_ && 244 !== _bH_){var to$0 = to; break a;}
      var to$0 = caml_call1(CamlinternalLazy[2], to);
     }
     var _bI_ = caml_obj_tag(from);
     a:
     if(250 === _bI_)
      var from$0 = from[1];
     else{
      if(246 !== _bI_ && 244 !== _bI_){var from$0 = from; break a;}
      var from$0 = caml_call1(CamlinternalLazy[2], from);
     }
     var
      gm = graph_info[1],
      _bJ_ = gm[3],
      _bK_ = caml_call3(Core_Map[39], gm[2], from$0, to$0);
     graph_info[1] = [0, gm[1], _bK_, _bJ_];
     return caml_call1(on_update, graph_info[1]);
    }
    function add_tree_relationship(from, to, from_info){
     var _bD_ = caml_obj_tag(to);
     a:
     if(250 === _bD_)
      var to$0 = to[1];
     else{
      if(246 !== _bD_ && 244 !== _bD_){var to$0 = to; break a;}
      var to$0 = caml_call1(CamlinternalLazy[2], to);
     }
     var _bE_ = caml_obj_tag(from);
     a:
     if(250 === _bE_)
      var from$0 = from[1];
     else{
      if(246 !== _bE_ && 244 !== _bE_){var from$0 = from; break a;}
      var from$0 = caml_call1(CamlinternalLazy[2], from);
     }
     var
      gm = graph_info[1],
      _bF_ = caml_call3(Core_Map[37], gm[3], from$0, from_info),
      _bG_ = gm[2];
     graph_info[1] =
      [0, caml_call3(Core_Map[37], gm[1], from$0, to$0), _bG_, _bF_];
     return caml_call1(on_update, graph_info[1]);
    }
    var environment = caml_call3(Core_Type_equal[8][11][27][5], 0, 0, 0);
    return caml_call4
            (Bonsai_Transform[4],
             [0, computation_map],
             [0, value_map],
             [0, environment, add_tree_relationship, add_dag_relationship],
             t);
   }
   function pull_source_locations_from_nea(t){
    var info = [0, t[3]];
    function find_and_update_nearest_here(key){
     function _bu_(param){
      var here = param[2], node_type = param[1];
      if(here)
       var here$0 = here[1], here$1 = [0, here$0];
      else
       var
        _bw_ =
          function(parent){
           function _by_(here){
            var _bA_ = here[4], _bB_ = here[3], _bC_ = here[2];
            return [0, caml_call2(Core[18], cst, here[1]), _bC_, _bB_, _bA_];
           }
           var _bz_ = find_and_update_nearest_here(parent);
           return caml_call2(Base_Option[29][4][3], _bz_, _by_);
          },
        _bx_ = caml_call2(Core_Map[44], t[1], key),
        here$1 = caml_call2(Base_Option[29][4][2], _bx_, _bw_);
      info[1] = caml_call3(Core_Map[38], info[1], key, [0, node_type, here$1]);
      return here$1;
     }
     var _bv_ = caml_call2(Core_Map[44], info[1], key);
     return caml_call2(Base_Option[29][4][2], _bv_, _bu_);
    }
    function update_nearest_here(key){
     find_and_update_nearest_here(key);
     return 0;
    }
    caml_call2(Core_Map[49], info[1], update_nearest_here);
    return info[1];
   }
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Graph_info);
   var
    Bonsai_Graph_info =
      [0,
       [0,
        t_of_sexp$5,
        sexp_of_t$5,
        bin_size_t$5,
        bin_write_t$5,
        bin_read_t$11,
        bin_read_t$10,
        bin_shape_t$6,
        bin_writer_t$4,
        bin_reader_t$4,
        bin_t$4,
        of_computation,
        of_value],
       bin_size_t$6,
       bin_write_t$6,
       bin_read_t$13,
       bin_read_t$12,
       bin_shape_t$7,
       bin_writer_t$5,
       bin_reader_t$5,
       bin_t$5,
       t_of_sexp$6,
       sexp_of_t$6,
       empty,
       iter_graph_updates,
       pull_source_locations_from_nea,
       [0,
        [0,
         [0,
          t_of_sexp,
          sexp_of_t,
          bin_size_t,
          bin_write_t,
          bin_read_t$0,
          bin_read_t,
          bin_shape_t,
          bin_writer_t,
          bin_reader_t,
          bin_t,
          compare],
         [0,
          t_of_sexp$0,
          sexp_of_t$0,
          bin_size_t$0,
          bin_write_t$0,
          bin_read_t$2,
          bin_read_t$1,
          bin_shape_t$0,
          bin_writer_t$0,
          bin_reader_t$0,
          bin_t$0,
          compare$0,
          to_v1,
          of_v1],
         [0, of_v1, to_v1]],
        [0,
         t_of_sexp$1,
         sexp_of_t$1,
         bin_size_t$1,
         bin_write_t$1,
         bin_read_t$4,
         bin_read_t$3,
         bin_shape_t$2,
         bin_writer_t$1,
         bin_reader_t$1,
         bin_t$1],
        [0,
         bin_size_t$2,
         bin_write_t$2,
         bin_read_t$6,
         bin_read_t$5,
         bin_shape_t$3,
         bin_writer_t$2,
         bin_reader_t$2,
         bin_t$2,
         t_of_sexp$2,
         sexp_of_t$2,
         to_v1$0,
         of_v1$0],
        [0,
         bin_size_t$3,
         bin_write_t$3,
         bin_read_t$8,
         bin_read_t$7,
         bin_shape_t$4,
         bin_writer_t$3,
         bin_reader_t$3,
         bin_t$3,
         t_of_sexp$3,
         sexp_of_t$3,
         to_v2,
         of_v2]]];
   runtime.caml_register_global
    (238, Bonsai_Graph_info, cst_Bonsai_Graph_info$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Instrumentation
//# unitInfo: Requires: Bonsai__Graph_info, Bonsai__Node_path, Bonsai__Transform, CamlinternalLazy, Core__String, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Ppx_string_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$2 = "##",
    cst_Bonsai_Instrumentation$0 = "Bonsai__Instrumentation",
    cst_bonsai$0 = "bonsai",
    caml_obj_tag = runtime.caml_obj_tag;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$1 = cst$2,
    cst = " ",
    cst$0 = cst$2,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Bonsai_Graph_info = global_data.Bonsai__Graph_info,
    Ppx_string_runtime = global_data.Ppx_string_runtime,
    Bonsai_Transform = global_data.Bonsai__Transform,
    Core_String = global_data.Core__String,
    Bonsai_Node_path = global_data.Bonsai__Node_path,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Instrumentation$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/instrumentation.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai$0, "instrumentation.ml");
   var
    cst_compute = "-compute",
    cst_apply_action = "-apply_action",
    cst_by = "-by",
    cst_bonsai = cst_bonsai$0,
    cst_Bonsai_Instrumentation = cst_Bonsai_Instrumentation$0;
   function to_string(param){
    var
     node_type = param[2],
     id = param[1],
     _n_ = caml_call1(Bonsai_Node_path[34], id),
     _o_ = [0, caml_call1(Ppx_string_runtime[1][3], _n_), 0],
     _p_ = [0, node_type, [0, caml_call1(Ppx_string_runtime[1][2], cst), _o_]],
     _q_ = [0, caml_call1(Ppx_string_runtime[1][2], cst$0), _p_];
    return caml_call1(Ppx_string_runtime[1][4], _q_);
   }
   function extract_node_path_from_entry_l(label){
    if(! caml_call2(Core_String[73], label, cst$1)) return 0;
    var match = caml_call2(Core_String[78], label, 32);
    if(match){
     var _m_ = match[2];
     if(_m_ && ! _m_[2]){
      var node_path = _m_[1];
      return [0, caml_call1(Bonsai_Node_path[33], node_path)];
     }
    }
    return 0;
   }
   function instrument_computation(t, start_timer, stop_timer){
    function computation_map(context, param, computation){
     var node_info = caml_call1(Bonsai_Graph_info[1][11], computation);
     function entry_label(node_type){
      var _k_ = context[4], _l_ = caml_obj_tag(_k_);
      a:
      if(250 === _l_)
       var current_path = _k_[1];
      else{
       if(246 !== _l_ && 244 !== _l_){var current_path = _k_; break a;}
       var current_path = caml_call1(CamlinternalLazy[2], _k_);
      }
      return to_string([0, current_path, node_type]);
     }
     var
      _c_ = [0, caml_call1(Ppx_string_runtime[1][2], cst_compute), 0],
      compute_label =
        entry_label
         (caml_call1(Ppx_string_runtime[1][4], [0, node_info[1], _c_])),
      _d_ = [0, caml_call1(Ppx_string_runtime[1][2], cst_apply_action), 0],
      apply_action_label =
        entry_label
         (caml_call1(Ppx_string_runtime[1][4], [0, node_info[1], _d_])),
      _e_ = [0, caml_call1(Ppx_string_runtime[1][2], cst_by), 0],
      by_label =
        entry_label
         (caml_call1(Ppx_string_runtime[1][4], [0, node_info[1], _e_])),
      recursed = caml_call2(context[1], 0, computation);
     if(typeof recursed !== "number")
      switch(recursed[0]){
        case 1:
         var
          apply_action = recursed[4],
          _f_ = recursed[6],
          _g_ = recursed[5],
          _h_ =
            function(inject, schedule_event, input, model$0, action){
             caml_call1(start_timer, apply_action_label);
             var
              model =
                caml_call5
                 (apply_action,
                  inject,
                  schedule_event,
                  input,
                  model$0,
                  action);
             caml_call1(stop_timer, apply_action_label);
             return model;
            };
         return [1, recursed[1], recursed[2], recursed[3], _h_, _g_, _f_];
        case 2:
         var
          apply_action$0 = recursed[3],
          _i_ = recursed[4],
          _j_ =
            function(inject, schedule_event, model$0, action){
             caml_call1(start_timer, apply_action_label);
             var
              model =
                caml_call4
                 (apply_action$0, inject, schedule_event, model$0, action);
             caml_call1(stop_timer, apply_action_label);
             return model;
            };
         return [2, recursed[1], recursed[2], _j_, _i_];
        case 3:
         var
          compute =
            function(clock, input){
             caml_call1(start_timer, compute_label);
             var computed = caml_call2(recursed[2], clock, input);
             caml_call1(stop_timer, compute_label);
             return computed;
            };
         return [3, recursed[1], compute];
        case 6:
         return recursed;
        case 9:
         var
          by =
            function(path, key, value){
             caml_call1(start_timer, by_label);
             var by = caml_call3(recursed[2], path, key, value);
             caml_call1(stop_timer, by_label);
             return by;
            };
         return [9, recursed[1], by, recursed[3]];
      }
     return recursed;
    }
    function value_map(context, param, wrapped_value){
     var
      id = wrapped_value[3],
      here = wrapped_value[2],
      value = wrapped_value[1],
      _a_ = context[4],
      _b_ = caml_obj_tag(_a_);
     a:
     if(250 === _b_)
      var current_path = _a_[1];
     else{
      if(246 !== _b_ && 244 !== _b_){var current_path = _a_; break a;}
      var current_path = caml_call1(CamlinternalLazy[2], _a_);
     }
     var
      node_info = caml_call1(Bonsai_Graph_info[1][12], wrapped_value),
      entry_label = to_string([0, current_path, node_info[1]]);
     switch(value[0]){
       case 5:
        var
         f =
           function(a){
            caml_call1(start_timer, entry_label);
            var x = caml_call1(value[2], a);
            caml_call1(stop_timer, entry_label);
            return x;
           },
         value$0 = [5, value[1], f];
        break;
       case 6:
        var
         f$0 =
           function(a, b){
            caml_call1(start_timer, entry_label);
            var x = caml_call2(value[3], a, b);
            caml_call1(stop_timer, entry_label);
            return x;
           },
         value$0 = [6, value[1], value[2], f$0];
        break;
       case 7:
        var
         f$1 =
           function(a, b, c){
            caml_call1(start_timer, entry_label);
            var x = caml_call3(value[4], a, b, c);
            caml_call1(stop_timer, entry_label);
            return x;
           },
         value$0 = [7, value[1], value[2], value[3], f$1];
        break;
       case 8:
        var
         f$2 =
           function(a, b, c, d){
            caml_call1(start_timer, entry_label);
            var x = caml_call4(value[5], a, b, c, d);
            caml_call1(stop_timer, entry_label);
            return x;
           },
         value$0 = [8, value[1], value[2], value[3], value[4], f$2];
        break;
       case 9:
        var
         f$3 =
           function(a, b, c, d, e){
            caml_call1(start_timer, entry_label);
            var x = caml_call5(value[6], a, b, c, d, e);
            caml_call1(stop_timer, entry_label);
            return x;
           },
         value$0 = [9, value[1], value[2], value[3], value[4], value[5], f$3];
        break;
       case 10:
        var
         f$4 =
           function(a, b, c, d, e, f){
            caml_call1(start_timer, entry_label);
            var x = caml_call6(value[7], a, b, c, d, e, f);
            caml_call1(stop_timer, entry_label);
            return x;
           },
         value$0 =
           [10,
            value[1],
            value[2],
            value[3],
            value[4],
            value[5],
            value[6],
            f$4];
        break;
       case 11:
        var
         f$5 =
           function(a, b, c, d, e, f, g){
            caml_call1(start_timer, entry_label);
            var x = caml_call7(value[8], a, b, c, d, e, f, g);
            caml_call1(stop_timer, entry_label);
            return x;
           },
         value$0 =
           [11,
            value[1],
            value[2],
            value[3],
            value[4],
            value[5],
            value[6],
            value[7],
            f$5];
        break;
       default: var value$0 = value;
     }
     return caml_call2(context[1], 0, [0, value$0, here, id]);
    }
    return caml_call4
            (Bonsai_Transform[4], [0, computation_map], [0, value_map], 0, t);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Instrumentation);
   var
    Bonsai_Instrumentation =
      [0, instrument_computation, extract_node_path_from_entry_l];
   runtime.caml_register_global
    (23, Bonsai_Instrumentation, cst_Bonsai_Instrumentation$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Cont
//# unitInfo: Requires: Base__Applicative, Base__Exn, Base__Field, Bonsai__Annotate_incr, Bonsai__Apply_action_context, Bonsai__Instrumentation, Bonsai__Map0, Bonsai__Path, Bonsai__Proc, Bonsai__Proc_min, Bonsai__To_dot, Bonsai__Value, Bonsai__Var, CamlinternalLazy, Core, Core__Int, Core__Map, Core__Option, Core__Source_code_position, Core__Tuple, Core__Type_equal, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Sexplib0__Sexp_conv_error, Ui_effect
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_After = "After",
    cst_Before = "Before",
    cst_Bonsai_Cont$0 = "Bonsai__Cont",
    cst_after = "after",
    cst_before = "before",
    cst_bonsai$0 = "bonsai",
    cst_src_cont_ml = "src/cont.ml",
    caml_string_notequal = runtime.caml_string_notequal,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    cst = "",
    error_source_003 = "src/cont.ml.Clock.Before_or_after.t",
    Base_Field = global_data.Base__Field,
    Ui_effect = global_data.Ui_effect,
    Core = global_data.Core,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Bonsai_Proc = global_data.Bonsai__Proc,
    Bonsai_Value = global_data.Bonsai__Value,
    Core_Source_code_position = global_data.Core__Source_code_position,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Core_Int = global_data.Core__Int,
    Core_Map = global_data.Core__Map,
    Bonsai_Instrumentation = global_data.Bonsai__Instrumentation,
    Bonsai_To_dot = global_data.Bonsai__To_dot,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Bonsai_Proc_min = global_data.Bonsai__Proc_min,
    Core_Option = global_data.Core__Option,
    Core_Tuple = global_data.Core__Tuple,
    Base_Exn = global_data.Base__Exn,
    Core_Type_equal = global_data.Core__Type_equal,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Base_Applicative = global_data.Base__Applicative,
    Bonsai_Annotate_incr = global_data.Bonsai__Annotate_incr,
    Bonsai_Map0 = global_data.Bonsai__Map0,
    Bonsai_Var = global_data.Bonsai__Var,
    Bonsai_Path = global_data.Bonsai__Path,
    Bonsai_Apply_action_context = global_data.Bonsai__Apply_action_context;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Cont$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_cont_ml);
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai$0, "cont.ml");
   var
    _f_ = [0, "here"],
    cst_match_sub_called_outside_o =
      "match%sub called outside of the context of a graph",
    _e_ = [0, cst_src_cont_ml, 704, 21221, 21302],
    _c_ = [0, cst_After],
    _d_ = [0, cst_Before],
    _a_ =
      [0,
       [11,
        "BUG: nested calls (",
        [4,
         0,
         0,
         0,
         [11, ") to top_level_handle. Please report to bonsai-devs.\n", 0]]],
       "BUG: nested calls (%d) to top_level_handle. Please report to bonsai-devs.\n"],
    cst_outside_of_a_Bonsai_toplev = "outside of a Bonsai toplevel",
    cst_bonsai = cst_bonsai$0,
    cst_Bonsai_Cont = cst_Bonsai_Cont$0,
    perform_on_exception = [0, function(_aD_){return;}];
   function set_perform_on_exception(perform){
    perform_on_exception[1] = perform;
    return 0;
   }
   function perform(here, graph, computation_to_perform){
    if
     (typeof computation_to_perform !== "number"
      && 0 === computation_to_perform[0]){
     var match = computation_to_perform[1], value = match[1];
     switch(value[0]){
       case 0:
       case 2:
       case 12:
        var id = match[3]; return [0, value, here, id];
     }
    }
    var
     via = caml_call2(Core_Type_equal[8][3], cst, Core[149]),
     old_f = graph[1];
    function new_f(eventual_result){
     if(typeof eventual_result !== "number" && 0 === eventual_result[0]){
      var _aC_ = eventual_result[1];
      if(2 === _aC_[1][0]){
       var id = _aC_[3];
       if(caml_call2(Core_Type_equal[8][8], via, id)){
        caml_call2(Core_Type_equal[8][10], via, id);
        return caml_call1(old_f, computation_to_perform);
       }
      }
     }
     return caml_call1
             (old_f, [4, computation_to_perform, via, eventual_result, here]);
    }
    graph[1] = new_f;
    return caml_call2(Bonsai_Value[21], [0, here], via);
   }
   function isolated(graph, f){
    var backup_f = graph[1];
    graph[1] = function(_aB_){return _aB_;};
    try{
     var
      r = caml_call1(f, 0),
      _aA_ = caml_call1(Bonsai_Proc[1], r),
      r$0 = caml_call1(graph[1], _aA_);
     graph[1] = backup_f;
     return r$0;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     caml_call1(perform_on_exception[1], exn);
     graph[1] = backup_f;
     var _az_ = caml_call1(Bonsai_Value[25], exn);
     return caml_call1(Bonsai_Proc[1], _az_);
    }
   }
   var
    the_one_and_only =
      [0,
       function(param){
        return caml_call1(Core[6], cst_outside_of_a_Bonsai_toplev);
       }],
    num_nested_top_level_handles = [0, 0];
   function handle(f, graph){
    return isolated(graph, function(param){return caml_call1(f, graph);});
   }
   function handle_with_global_graph(inside_a_lazy, f){
    a:
    {
     var match = caml_call2(Core[91], num_nested_top_level_handles[1], 0);
     if(851120823 > inside_a_lazy && match){
      caml_call2(Core[243], _a_, num_nested_top_level_handles[1]);
      break a;
     }
    }
    num_nested_top_level_handles[1]++;
    function _aw_(param){num_nested_top_level_handles[1] += -1; return 0;}
    function _ax_(param){
     var backup_f = the_one_and_only[1];
     the_one_and_only[1] = function(_ay_){return _ay_;};
     var
      v = caml_call1(f, the_one_and_only),
      computation_context = the_one_and_only[1];
     the_one_and_only[1] = backup_f;
     return caml_call1(computation_context, caml_call1(Bonsai_Proc_min[1], v));
    }
    return caml_call2(Base_Exn[13], _ax_, _aw_);
   }
   function top_level_handle(f){
    return handle_with_global_graph(496818763, f);
   }
   function with_global_graph(f, no_graph){
    return caml_call2(Core[91], num_nested_top_level_handles[1], 0)
            ? caml_call1(f, the_one_and_only)
            : caml_call1(no_graph, 0);
   }
   var return$0 = Bonsai_Value[2];
   function arr1(graph, a, f){
    var _av_ = caml_call2(Bonsai_Proc[50][3], a, f);
    return perform(0, graph, caml_call1(Bonsai_Proc[1], _av_));
   }
   function arr2(graph, a, b, f){
    var _au_ = caml_call3(Bonsai_Proc[50][10], a, b, f);
    return perform(0, graph, caml_call1(Bonsai_Proc[1], _au_));
   }
   function _b_(a, f){
    function _at_(param){return caml_call2(Bonsai_Value[3], a, f);}
    return with_global_graph(function(graph){return arr1(graph, a, f);}, _at_);
   }
   function map2(a, b, f){
    function _as_(param){return caml_call3(Bonsai_Value[10], a, b, f);}
    return with_global_graph
            (function(graph){return arr2(graph, a, b, f);}, _as_);
   }
   var
    map = [0, -198771759, _b_],
    include = caml_call1(Base_Applicative[13], [0, return$0, map2, map]),
    return$1 = include[1],
    map$0 = include[2],
    symbol = include[4],
    symbol$0 = include[5],
    symbol$1 = include[6],
    symbol_map = include[7],
    apply = include[8],
    map2$0 = include[9],
    all = include[11],
    all_unit = include[12],
    Applicative_infix = include[13];
   function map3(a, b, c, f){
    function _aq_(param){return caml_call4(Bonsai_Value[16], a, b, c, f);}
    return with_global_graph
            (function(graph){
              var _ar_ = caml_call4(Bonsai_Proc[50][16], a, b, c, f);
              return perform(0, graph, caml_call1(Bonsai_Proc[1], _ar_));
             },
             _aq_);
   }
   function map4(a, b, c, d, f){
    function _ao_(param){return caml_call5(Bonsai_Value[17], a, b, c, d, f);}
    return with_global_graph
            (function(graph){
              var _ap_ = caml_call5(Bonsai_Proc[50][17], a, b, c, d, f);
              return perform(0, graph, caml_call1(Bonsai_Proc[1], _ap_));
             },
             _ao_);
   }
   function map5(a, b, c, d, e, f){
    function _am_(param){
     return caml_call6(Bonsai_Value[18], a, b, c, d, e, f);
    }
    return with_global_graph
            (function(graph){
              var _an_ = caml_call6(Bonsai_Proc[50][18], a, b, c, d, e, f);
              return perform(0, graph, caml_call1(Bonsai_Proc[1], _an_));
             },
             _am_);
   }
   function map6(a, b, c, d, e, g, f){
    function _ak_(param){
     return caml_call7(Bonsai_Value[19], a, b, c, d, e, g, f);
    }
    return with_global_graph
            (function(graph){
              var _al_ = caml_call7(Bonsai_Proc[50][19], a, b, c, d, e, g, f);
              return perform(0, graph, caml_call1(Bonsai_Proc[1], _al_));
             },
             _ak_);
   }
   function map7(a, b, c, d, e, g, h, f){
    function _ai_(param){
     return caml_call8(Bonsai_Value[20], a, b, c, d, e, g, h, f);
    }
    return with_global_graph
            (function(graph){
              var
               _aj_ = caml_call8(Bonsai_Proc[50][20], a, b, c, d, e, g, h, f);
              return perform(0, graph, caml_call1(Bonsai_Proc[1], _aj_));
             },
             _ai_);
   }
   function both(a, b){return caml_call3(map2$0, a, b, Core_Tuple[1][6]);}
   function cutoff(v, equal){
    return caml_call3(Bonsai_Value[22], 0, v, equal);
   }
   function all_map(v, graph){
    function _ag_(f){return handle(f, graph);}
    var _ah_ = caml_call2(Core_Map[57], v, _ag_);
    return perform(0, graph, caml_call1(Bonsai_Proc[49][21], _ah_));
   }
   function transpose_opt(opt){
    var _ac_ = Core_Option[58];
    function _ad_(_af_){return caml_call2(map$0, _af_, _ac_);}
    var _ae_ = caml_call1(return$1, 0);
    return caml_call3(Core_Option[41], opt, _ae_, _ad_);
   }
   function path_id(graph){return perform(0, graph, Bonsai_Proc[33]);}
   function split(graph, tuple){
    var
     a = arr1(graph, tuple, function(_ab_){return _ab_[1];}),
     b = arr1(graph, tuple, function(_aa_){return _aa_[2];});
    return [0, a, b];
   }
   function state_for_proc2(reset, sexp_of_model, equal, default_model, graph){
    return perform
            (0,
             graph,
             caml_call4
              (Bonsai_Proc[28], reset, sexp_of_model, equal, default_model));
   }
   function state(reset, sexp_of_model, equal, default_model, graph){
    return split
            (graph,
             state_for_proc2
              (reset, sexp_of_model, equal, default_model, graph));
   }
   function state_opt_for_proc2
   (reset, default_model, sexp_of_model, equal, param, graph){
    return perform
            (0,
             graph,
             caml_call5
              (Bonsai_Proc[32], reset, default_model, sexp_of_model, equal, 0));
   }
   function state_opt(reset, sexp_of_model, equal, default_model, graph){
    return split
            (graph,
             state_opt_for_proc2
              (reset, default_model, sexp_of_model, equal, 0, graph));
   }
   function toggle_for_proc2(default_model, graph){
    return perform(0, graph, caml_call1(Bonsai_Proc[31], default_model));
   }
   function toggle(default_model, graph){
    return split(graph, toggle_for_proc2(default_model, graph));
   }
   function toggle$0(default_model, graph){
    var
     all = perform(0, graph, caml_call1(Bonsai_Proc[30], default_model)),
     state =
       arr1(graph, all, function(param){var state = param[1]; return state;}),
     set_state =
       arr1
        (graph,
         all,
         function(param){var set_state = param[2]; return set_state;}),
     toggle =
       arr1
        (graph, all, function(param){var toggle = param[3]; return toggle;});
    return [0, state, set_state, toggle];
   }
   function path(graph){return perform(0, graph, Bonsai_Proc[12]);}
   function state_machine0_for_proc2
   (reset,
    sexp_of_model,
    sexp_of_action,
    equal,
    default_model,
    apply_action,
    param,
    graph){
    return perform
            (0,
             graph,
             caml_call7
              (Bonsai_Proc[7],
               reset,
               sexp_of_model,
               sexp_of_action,
               equal,
               default_model,
               apply_action,
               0));
   }
   function state_machine0
   (reset,
    sexp_of_model,
    sexp_of_action,
    equal,
    default_model,
    apply_action,
    graph){
    return split
            (graph,
             state_machine0_for_proc2
              (reset,
               sexp_of_model,
               sexp_of_action,
               equal,
               default_model,
               apply_action,
               0,
               graph));
   }
   function state_machine1_for_proc2
   (sexp_of_action,
    reset,
    sexp_of_model,
    equal,
    default_model,
    apply_action,
    input,
    graph){
    return perform
            (0,
             graph,
             caml_call7
              (Bonsai_Proc[6],
               sexp_of_action,
               reset,
               sexp_of_model,
               equal,
               default_model,
               apply_action,
               input));
   }
   function state_machine1
   (reset,
    sexp_of_model,
    sexp_of_action,
    equal,
    default_model,
    apply_action,
    input,
    graph){
    return split
            (graph,
             state_machine1_for_proc2
              (sexp_of_action,
               reset,
               sexp_of_model,
               equal,
               default_model,
               apply_action,
               input,
               graph));
   }
   function actor0_for_proc2
   (reset,
    sexp_of_model,
    sexp_of_action,
    equal,
    default_model,
    recv,
    param,
    graph){
    return perform
            (0,
             graph,
             caml_call7
              (Bonsai_Proc[27],
               reset,
               sexp_of_model,
               sexp_of_action,
               equal,
               default_model,
               recv,
               0));
   }
   function actor0
   (reset, sexp_of_model, sexp_of_action, equal, default_model, recv, graph){
    return split
            (graph,
             actor0_for_proc2
              (reset,
               sexp_of_model,
               sexp_of_action,
               equal,
               default_model,
               recv,
               0,
               graph));
   }
   function actor1_for_proc2
   (sexp_of_action,
    reset,
    sexp_of_model,
    equal,
    default_model,
    recv,
    input,
    graph){
    return perform
            (0,
             graph,
             caml_call7
              (Bonsai_Proc[26],
               sexp_of_action,
               reset,
               sexp_of_model,
               equal,
               default_model,
               recv,
               input));
   }
   function actor1
   (sexp_of_action,
    reset,
    sexp_of_model,
    equal,
    default_model,
    recv,
    input,
    graph){
    return split
            (graph,
             actor1_for_proc2
              (sexp_of_action,
               reset,
               sexp_of_model,
               equal,
               default_model,
               recv,
               input,
               graph));
   }
   function delay(f, graph){
    var
     ___ =
       [246, function(_$_){return handle_with_global_graph(851120823, f);}];
    return perform(0, graph, caml_call1(Bonsai_Proc[10], ___));
   }
   function thunk(f, graph){
    return perform(0, graph, caml_call1(Bonsai_Proc[40], f));
   }
   function assoc_on(io_cmp, model_cmp, map, get_model_key, f, graph){
    function _Z_(k, v){
     return handle(function(graph){return caml_call3(f, k, v, graph);}, graph);
    }
    return perform
            (0,
             graph,
             caml_call5
              (Bonsai_Proc[9], io_cmp, model_cmp, map, get_model_key, _Z_));
   }
   function freeze(sexp_of_model, equal, v, graph){
    return perform
            (0, graph, caml_call3(Bonsai_Proc[39], sexp_of_model, equal, v));
   }
   function fix(v, f, graph){
    function recurse(i2, graph){
     return delay
             (function(graph){return caml_call3(f, recurse, i2, graph);},
              graph);
    }
    return caml_call3(f, recurse, v, graph);
   }
   function fix2(a, b, f, graph){
    function recurse(a, b, graph){
     return delay
             (function(graph){return caml_call4(f, recurse, a, b, graph);},
              graph);
    }
    return caml_call4(f, recurse, a, b, graph);
   }
   function scope_model(comparator, on, for$0, graph){
    var
     _Y_ = handle(function(graph){return caml_call1(for$0, graph);}, graph);
    return perform(0, graph, caml_call3(Bonsai_Proc[21], comparator, on, _Y_));
   }
   function most_recent_some(sexp_of_model, equal, value, f, graph){
    return perform
            (0,
             graph,
             caml_call4(Bonsai_Proc[41], sexp_of_model, equal, value, f));
   }
   function most_recent_value_satisfying
   (sexp_of_model, equal, value, condition, graph){
    return perform
            (0,
             graph,
             caml_call4
              (Bonsai_Proc[42], sexp_of_model, equal, value, condition));
   }
   function previous_value(sexp_of_model, equal, value, graph){
    return perform
            (0,
             graph,
             caml_call3(Bonsai_Proc[43], sexp_of_model, equal, value));
   }
   function wrap_for_proc2
   (reset, sexp_of_model, equal, default_model, apply_action, f, param, graph){
    var _W_ = 0;
    function _X_(model, inject){
     return handle
             (function(graph){return caml_call3(f, model, inject, graph);},
              graph);
    }
    return perform
            (0,
             graph,
             caml_call7
              (Bonsai_Proc_min[13],
               reset,
               sexp_of_model,
               equal,
               default_model,
               apply_action,
               _X_,
               _W_));
   }
   function wrap
   (reset, sexp_of_model, equal, default_model, apply_action, f, graph){
    return wrap_for_proc2
            (reset,
             sexp_of_model,
             equal,
             default_model,
             apply_action,
             f,
             0,
             graph);
   }
   function enum$0(m, match, with$0, graph){
    function with$1(k){
     return handle
             (function(graph){return caml_call2(with$0, k, graph);}, graph);
    }
    return perform(0, graph, caml_call3(Bonsai_Proc[20], m, match, with$1));
   }
   function with_model_resetter_for_proc2(f, graph){
    var _V_ = handle(function(graph){return caml_call1(f, graph);}, graph);
    return perform(0, graph, caml_call1(Bonsai_Proc[19], _V_));
   }
   function with_model_resetter(f, graph){
    return split(graph, with_model_resetter_for_proc2(f, graph));
   }
   function with_model_resetter$0(f, graph){
    function _U_(reset){
     return handle
             (function(graph){return caml_call2(f, reset, graph);}, graph);
    }
    return perform(0, graph, caml_call1(Bonsai_Proc_min[14], _U_));
   }
   function peek(value, graph){
    return perform(0, graph, caml_call1(Bonsai_Proc[34], value));
   }
   function approx_now(tick_every, graph){
    return perform(0, graph, caml_call1(Bonsai_Proc[47][1], tick_every));
   }
   function now(graph){return perform(0, graph, Bonsai_Proc[47][2]);}
   function t_of_sexp(sexp_004){
    a:
    {
     if(0 === sexp_004[0]){
      var _Q_ = sexp_004[1];
      b:
      if(caml_string_notequal(_Q_, cst_After)){
       if(caml_string_notequal(_Q_, cst_Before)){
        if(! caml_string_notequal(_Q_, cst_after)) break b;
        if(caml_string_notequal(_Q_, cst_before)) break a;
       }
       return 0;
      }
      return 1;
     }
     var _R_ = sexp_004[1];
     if(! _R_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_003, sexp_004);
     var _S_ = _R_[1];
     if(0 !== _S_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_003, sexp_004);
     var _T_ = _S_[1];
     b:
     if(caml_string_notequal(_T_, cst_After)){
      if(caml_string_notequal(_T_, cst_Before)){
       if(! caml_string_notequal(_T_, cst_after)) break b;
       if(caml_string_notequal(_T_, cst_before)) break a;
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_003, sexp_004);
   }
   function sexp_of_t(param){return param ? _c_ : _d_;}
   function equal(_P_, _O_){return _P_ === _O_ ? 1 : 0;}
   var Before_or_after = [0, t_of_sexp, sexp_of_t, equal];
   function at(time, graph){
    return perform(0, graph, caml_call1(Bonsai_Proc[47][4], time));
   }
   function every
   (when_to_start_next_effect, trigger_on_activate, span, callback, graph){
    perform
     (0,
      graph,
      caml_call4
       (Bonsai_Proc[47][17],
        when_to_start_next_effect,
        trigger_on_activate,
        span,
        callback));
    return 0;
   }
   function get_current_time(graph){
    return perform(0, graph, Bonsai_Proc[47][5]);
   }
   function sleep(graph){return perform(0, graph, Bonsai_Proc[47][6]);}
   function until(graph){return perform(0, graph, Bonsai_Proc[47][7]);}
   var
    Clock =
      [0,
       approx_now,
       now,
       Before_or_after,
       at,
       every,
       get_current_time,
       sleep,
       until];
   function on_change_for_proc2(sexp_of_model, equal, value, callback, graph){
    return perform
            (0,
             graph,
             caml_call4
              (Bonsai_Proc[35][7], sexp_of_model, equal, value, callback));
   }
   function on_change(sexp_of_model, equal, value, callback, graph){
    on_change_for_proc2(sexp_of_model, equal, value, callback, graph);
    return 0;
   }
   function on_change_for_proc2$0
   (sexp_of_model, equal, value, callback, graph){
    return perform
            (0,
             graph,
             caml_call4
              (Bonsai_Proc[35][6], sexp_of_model, equal, value, callback));
   }
   function on_change$0(sexp_of_model, equal, value, callback, graph){
    on_change_for_proc2$0(sexp_of_model, equal, value, callback, graph);
    return 0;
   }
   function lifecycle_for_proc2
   (on_activate, on_deactivate, after_display, param, graph){
    return perform
            (0,
             graph,
             caml_call4
              (Bonsai_Proc[35][2],
               on_activate,
               on_deactivate,
               after_display,
               0));
   }
   function lifecycle(on_activate, on_deactivate, after_display, graph){
    lifecycle_for_proc2(on_activate, on_deactivate, after_display, 0, graph);
    return 0;
   }
   function lifecycle_for_proc2$0
   (on_activate, on_deactivate, after_display, param, graph){
    return perform
            (0,
             graph,
             caml_call4
              (Bonsai_Proc[35][1],
               on_activate,
               on_deactivate,
               after_display,
               0));
   }
   function lifecycle$0(on_activate, on_deactivate, after_display, graph){
    lifecycle_for_proc2$0(on_activate, on_deactivate, after_display, 0, graph);
    return 0;
   }
   function after_display_for_proc2(callback, graph){
    return perform(0, graph, caml_call1(Bonsai_Proc[35][4], callback));
   }
   function after_display(callback, graph){
    after_display_for_proc2(callback, graph);
    return 0;
   }
   function after_display_for_proc2$0(callback, graph){
    return perform(0, graph, caml_call1(Bonsai_Proc[35][3], callback));
   }
   function after_display$0(callback, graph){
    after_display_for_proc2$0(callback, graph);
    return 0;
   }
   function wait_after_display(graph){
    return perform(0, graph, Bonsai_Proc[35][5]);
   }
   function effect_on_change
   (sexp_of_input,
    sexp_of_result,
    equal_input,
    equal_result,
    starting,
    value,
    effect,
    graph){
    return perform
            (0,
             graph,
             caml_call7
              (Bonsai_Proc[35][8][4],
               sexp_of_input,
               sexp_of_result,
               equal_input,
               equal_result,
               starting,
               value,
               effect));
   }
   function manual_refresh_for_proc2
   (sexp_of_model, equal, starting, effect, graph){
    return perform
            (0,
             graph,
             caml_call4
              (Bonsai_Proc[35][8][3], sexp_of_model, equal, starting, effect));
   }
   function manual_refresh(sexp_of_model, equal, starting, effect, graph){
    return split
            (graph,
             manual_refresh_for_proc2
              (sexp_of_model, equal, starting, effect, graph));
   }
   function create(cmp, f, graph){
    function _N_(v){
     return handle(function(graph){return caml_call2(f, v, graph);}, graph);
    }
    return perform(0, graph, caml_call2(Bonsai_Proc[48][2], cmp, _N_));
   }
   function lookup(sexp_of_model, equal, t, input, graph){
    return perform
            (0,
             graph,
             caml_call4(Bonsai_Proc[48][3], sexp_of_model, equal, t, input));
   }
   var Memo = [0, create, lookup];
   function poll(callback, graph){
    return perform(0, graph, caml_call1(Bonsai_Proc[36][2], callback));
   }
   var create$0 = Bonsai_Proc[46][5], derived = Bonsai_Proc[46][6];
   function set(var$0, value, inside, graph){
    var
     inside$0 =
       handle(function(graph){return caml_call1(inside, graph);}, graph);
    return perform
            (0, graph, caml_call3(Bonsai_Proc[46][8], var$0, value, inside$0));
   }
   function f_with_resetter(f, graph, resetter){
    var
     resetter$0 =
       [0,
        function(c, graph){
         var
          _M_ = handle(function(graph){return caml_call1(c, graph);}, graph);
         return perform(0, graph, caml_call1(resetter[1], _M_));
        }];
    return handle
            (function(graph){return caml_call2(f, resetter$0, graph);}, graph);
   }
   function set$0(var$0, value, f, graph){
    function f$0(_L_){return f_with_resetter(f, graph, _L_);}
    return perform
            (0, graph, caml_call3(Bonsai_Proc[46][9], var$0, value, f$0));
   }
   function lookup$0(var$0, graph){
    return perform(0, graph, caml_call1(Bonsai_Proc[46][3], var$0));
   }
   function modify(var$0, change, f, graph){
    function f$0(_K_){return f_with_resetter(f, graph, _K_);}
    return perform
            (0, graph, caml_call3(Bonsai_Proc[46][7], var$0, change, f$0));
   }
   function value_cutoff(t, equal, graph){
    return perform(0, graph, caml_call2(Bonsai_Proc[37][1], t, equal));
   }
   function compute(t, f, graph){
    return perform(0, graph, caml_call2(Bonsai_Proc[37][4], t, f));
   }
   function to_value(incr){return caml_call1(Bonsai_Proc[37][6], incr);}
   function with_clock(f, graph){
    return perform(0, graph, caml_call1(Bonsai_Proc[37][5], f));
   }
   var Incr = [0, value_cutoff, compute, to_value, with_clock];
   function assoc(comparator, map, f, graph){
    function _J_(k, v){
     return handle(function(graph){return caml_call3(f, k, v, graph);}, graph);
    }
    return perform(0, graph, caml_call3(Bonsai_Proc[8], comparator, map, _J_));
   }
   function assoc_set(comparator, set, f, graph){
    function _I_(k){
     return handle(function(graph){return caml_call2(f, k, graph);}, graph);
    }
    return perform
            (0, graph, caml_call3(Bonsai_Proc[44], comparator, set, _I_));
   }
   function assoc_list(comparator, list, get_key, f, graph){
    function _H_(k, v){
     return handle(function(graph){return caml_call3(f, k, v, graph);}, graph);
    }
    return perform
            (0,
             graph,
             caml_call4(Bonsai_Proc[45], comparator, list, get_key, _H_));
   }
   function on_change$1(v, f, graph){
    var
     f$0 = arr1(graph, v, function(v){caml_call1(f, v); return Ui_effect[1];});
    return after_display(f$0, graph);
   }
   function on_change_print_s(v, sexp_of){
    function _E_(a){
     var _G_ = caml_call1(sexp_of, a);
     return caml_call2(Core[256], 0, _G_);
    }
    return function(_F_){return on_change$1(v, _E_, _F_);};
   }
   function to_dot(pre_process, c){
    var _D_ = top_level_handle(c);
    return caml_call2(Bonsai_To_dot[1], pre_process, _D_);
   }
   var
    enable_incremental_annotations = Bonsai_Annotate_incr[1],
    disable_incremental_annotation = Bonsai_Annotate_incr[2];
   function instrument_computation(c, start_timer, stop_timer, graph){
    var _C_ = handle(c, graph);
    return perform
            (0,
             graph,
             caml_call3
              (Bonsai_Instrumentation[1], _C_, start_timer, stop_timer));
   }
   function switch_for_proc2(match, branches, with$0, graph){
    var arms = [0, 0], _A_ = branches - 1 | 0, _z_ = 0;
    if(_A_ >= 0){
     var i = _z_;
     for(;;){
      var
       computation =
         isolated
          (graph,
           function(i){
             return function(param){return caml_call2(with$0, i, graph);};
            }
            (i));
      arms[1] = [0, [0, i, computation], arms[1]];
      var _B_ = i + 1 | 0;
      if(_A_ === i) break;
      var i = _B_;
     }
    }
    var arms$0 = arms[1];
    return perform
            (0,
             graph,
             [10,
              match,
              caml_call2(Core_Map[8], [0, Core_Int[97]], arms$0),
              _e_]);
   }
   function symbol_map$0(t, f){return caml_call2(map$0, t, f);}
   function return$2(_y_){return _y_;}
   function map$1(param, a, f){return caml_call2(map$0, a, f);}
   function arr(param, a, f){return map$1(0, a, f);}
   function cutoff$0(v, equal){
    return caml_call3(Bonsai_Value[22], 1, v, equal);
   }
   function switch$0(here, match, branches, with$0){
    function _v_(param){
     var
      _w_ =
        [0,
         [1, [0, _f_, [0, caml_call1(Core_Source_code_position[1], here), 0]]],
         0],
      _x_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_match_sub_called_outside_o),
          _w_]];
     return caml_call1(Core[261], _x_);
    }
    return with_global_graph
            (function(graph){
              function with$1(i, graph){return caml_call1(with$0, i);}
              return switch_for_proc2(match, branches, with$1, graph);
             },
             _v_);
   }
   function sub(param, a, f){return caml_call1(f, a);}
   function arr1_with_location(here, graph, a, f){
    var _u_ = caml_call3(Bonsai_Proc[13][2][4], here, a, f);
    return perform(0, graph, caml_call1(Bonsai_Proc[1], _u_));
   }
   function value_cutoff$0(v, equal){
    return caml_call3(Bonsai_Value[22], 0, v, equal);
   }
   function conceal_value(v){return v;}
   function toggle$1(default_model, graph){
    return perform(0, graph, caml_call1(Bonsai_Proc[30], default_model));
   }
   function with_model_resetter$1(f, graph){
    return with_model_resetter_for_proc2(f, graph);
   }
   function with_model_resetter$2(f, graph){return with_model_resetter$0(f, graph);
   }
   function lazy(f, graph){
    return delay
            (function(graph){
              var _s_ = runtime.caml_obj_tag(f);
              a:
              if(250 === _s_)
               var _t_ = f[1];
              else{
               if(246 !== _s_ && 244 !== _s_){var _t_ = f; break a;}
               var _t_ = caml_call1(CamlinternalLazy[2], f);
              }
              return caml_call1(_t_, graph);
             },
             graph);
   }
   function switch$1(match, branches, with$0, graph){
    return switch_for_proc2(match, branches, with$0, graph);
   }
   function debug_on_change(v, f, graph){
    var
     f$0 = arr1(graph, v, function(v){caml_call1(f, v); return Ui_effect[1];});
    return after_display_for_proc2(f$0, graph);
   }
   function debug_on_change_print_s(v, sexp_of){
    function _p_(a){
     var _r_ = caml_call1(sexp_of, a);
     return caml_call2(Core[256], 0, _r_);
    }
    return function(_q_){return debug_on_change(v, _p_, _q_);};
   }
   function narrow(state_and_inject, get, set, graph){
    var
     match = split(graph, state_and_inject),
     inject = match[2],
     state = match[1],
     peek_state = peek(state, graph);
    function _m_(param, a){
     var inject = param[2], peek_state = param[1];
     function _o_(param){
      if(! param) return Ui_effect[1];
      var state = param[1];
      return caml_call1(inject, caml_call2(set, state, a));
     }
     return caml_call2(Ui_effect[13][4][2], peek_state, _o_);
    }
    var
     inject$0 = map$1(0, both(peek_state, inject), _m_),
     state$0 =
       map$1(0, state, function(state){return caml_call1(get, state);});
    function _n_(param){
     var inject = param[2], state = param[1];
     return [0, state, inject];
    }
    return map$1(0, both(state$0, inject$0), _n_);
   }
   function narrow_via_field(state_and_inject, field){
    var
     _j_ = caml_call1(Base_Field[4], field),
     _k_ = caml_call1(Base_Field[3], field);
    return function(_l_){return narrow(state_and_inject, _k_, _j_, _l_);};
   }
   function reveal_value(_i_){return _i_;}
   function conceal_value$0(_h_){return _h_;}
   var
    Conv =
      [0,
       handle,
       top_level_handle,
       perform,
       reveal_value,
       conceal_value$0,
       isolated],
    Value = [0, both],
    Computation = [0],
    compute$0 = Incr[2],
    Incr$0 = [0, compute$0],
    Map = caml_call1(Bonsai_Map0[1], [0, Value, Computation, Incr$0]);
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Cont);
   var
    _g_ = Bonsai_Proc[36][1],
    Bonsai_Cont =
      [0,
       symbol,
       symbol$0,
       symbol$1,
       symbol_map,
       apply,
       all,
       all_unit,
       Applicative_infix,
       map3,
       map4,
       map5,
       map6,
       map7,
       return$1,
       map$0,
       map2$0,
       both,
       cutoff,
       all_map,
       transpose_opt,
       state,
       state_opt,
       [0, Bonsai_Apply_action_context[1], Bonsai_Apply_action_context[2]],
       Bonsai_Proc[5],
       [0],
       toggle,
       toggle$0,
       state_machine0,
       state_machine1,
       actor0,
       actor1,
       freeze,
       fix,
       fix2,
       scope_model,
       most_recent_some,
       most_recent_value_satisfying,
       previous_value,
       wrap,
       enum$0,
       with_model_resetter,
       with_model_resetter$0,
       peek,
       Clock,
       [0,
        on_change,
        on_change$0,
        lifecycle,
        lifecycle$0,
        after_display,
        after_display$0,
        wait_after_display,
        [0, Bonsai_Proc[35][8][1], effect_on_change, manual_refresh]],
       Memo,
       [0, [0, _g_[1], _g_[2], _g_[3], _g_[5], _g_[6]], poll],
       [0, create$0, derived, set, set$0, lookup$0, modify],
       Incr,
       assoc,
       assoc_set,
       assoc_list,
       [0,
        on_change$1,
        on_change_print_s,
        instrument_computation,
        to_dot,
        enable_incremental_annotations,
        disable_incremental_annotation],
       [0,
        Bonsai_Path[2],
        Bonsai_Path[3],
        Bonsai_Path[4],
        Bonsai_Path[5],
        Bonsai_Path[6],
        Bonsai_Path[7],
        Bonsai_Path[8],
        Bonsai_Path[9],
        Bonsai_Path[10],
        Bonsai_Path[11],
        Bonsai_Path[12],
        Bonsai_Path[13],
        Bonsai_Path[14],
        Bonsai_Path[15],
        Bonsai_Path[16],
        Bonsai_Path[17],
        Bonsai_Path[18],
        Bonsai_Path[19],
        Bonsai_Path[20],
        Bonsai_Path[21],
        Bonsai_Path[22],
        Bonsai_Path[23],
        Bonsai_Path[24],
        Bonsai_Path[27]],
       path_id,
       path,
       arr1,
       arr2,
       Conv,
       [0,
        symbol_map$0,
        return$1,
        [0,
         map$1,
         map2$0,
         both,
         arr,
         return$2,
         cutoff$0,
         switch$0,
         sub,
         map3,
         map4,
         map5,
         map6,
         map7]],
       Map,
       [0,
        thunk,
        assoc_on,
        delay,
        [0,
         Bonsai_Var[1],
         Bonsai_Var[5],
         Bonsai_Var[2],
         Bonsai_Var[3],
         Bonsai_Var[4],
         Bonsai_Var[6]],
        [0, set_perform_on_exception]],
       [0,
        arr1_with_location,
        value_cutoff$0,
        conceal_value,
        state_for_proc2,
        state_opt_for_proc2,
        toggle_for_proc2,
        Bonsai_Proc[29],
        toggle$1,
        state_machine0_for_proc2,
        state_machine1_for_proc2,
        actor0_for_proc2,
        actor1_for_proc2,
        wrap_for_proc2,
        switch$1,
        with_model_resetter$1,
        with_model_resetter$2,
        on_change_for_proc2,
        on_change_for_proc2$0,
        lifecycle_for_proc2,
        lifecycle_for_proc2$0,
        after_display_for_proc2,
        after_display_for_proc2$0,
        manual_refresh_for_proc2,
        debug_on_change,
        debug_on_change_print_s,
        lazy,
        narrow,
        narrow_via_field]];
   runtime.caml_register_global(52, Bonsai_Cont, cst_Bonsai_Cont$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Proc_layer2
//# unitInfo: Requires: Base__Applicative, Bonsai__Apply_action_context, Bonsai__Cont, Bonsai__Proc, Bonsai__Value, Bonsai__Var, Core, Core__Comparator, Core__List, Core__Map, Core__Option, Core__Tuple, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_Proc_layer2$0 = "Bonsai__Proc_layer2",
    cst_bonsai$0 = "bonsai",
    cst_src_proc_layer2_ml = "src/proc_layer2.ml";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Core_Comparator = global_data.Core__Comparator,
    Core_List = global_data.Core__List,
    Core_Map = global_data.Core__Map,
    Bonsai_Cont = global_data.Bonsai__Cont,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Core = global_data.Core,
    Bonsai_Var = global_data.Bonsai__Var,
    Core_Tuple = global_data.Core__Tuple,
    Core_Option = global_data.Core__Option,
    Bonsai_Proc = global_data.Bonsai__Proc,
    Bonsai_Value = global_data.Bonsai__Value,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Base_Applicative = global_data.Base__Applicative,
    Bonsai_Apply_action_context = global_data.Bonsai__Apply_action_context;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Proc_layer2$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_proc_layer2_ml);
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai$0, "proc_layer2.ml");
   var
    _H_ = [0, "action"],
    cst_An_action_sent_to_an_of_mo =
      "An action sent to an [of_module1] has been dropped because its input was not present. This happens when the [of_module1] is inactive when it receives a message.",
    _C_ = [0, [0, cst_src_proc_layer2_ml, 243, 6772, 6778]],
    _D_ = [0, [0, cst_src_proc_layer2_ml, 242, 6749, 6755]],
    _A_ = [0, [0, cst_src_proc_layer2_ml, 230, 6462, 6468]],
    _B_ = [0, [0, cst_src_proc_layer2_ml, 229, 6439, 6445]],
    _s_ = [0, [0, cst_src_proc_layer2_ml, 196, 5218, 5224]],
    _t_ = [0, [0, cst_src_proc_layer2_ml, 195, 5193, 5199]],
    _u_ = [0, [0, cst_src_proc_layer2_ml, 194, 5168, 5174]],
    _v_ = [0, [0, cst_src_proc_layer2_ml, 193, 5143, 5149]],
    _w_ = [0, [0, cst_src_proc_layer2_ml, 192, 5118, 5124]],
    _x_ = [0, [0, cst_src_proc_layer2_ml, 191, 5093, 5099]],
    _y_ = [0, [0, cst_src_proc_layer2_ml, 190, 5068, 5074]],
    _m_ = [0, [0, cst_src_proc_layer2_ml, 185, 4929, 4935]],
    _n_ = [0, [0, cst_src_proc_layer2_ml, 184, 4904, 4910]],
    _o_ = [0, [0, cst_src_proc_layer2_ml, 183, 4879, 4885]],
    _p_ = [0, [0, cst_src_proc_layer2_ml, 182, 4854, 4860]],
    _q_ = [0, [0, cst_src_proc_layer2_ml, 181, 4829, 4835]],
    _r_ = [0, [0, cst_src_proc_layer2_ml, 180, 4804, 4810]],
    _h_ = [0, [0, cst_src_proc_layer2_ml, 175, 4671, 4677]],
    _i_ = [0, [0, cst_src_proc_layer2_ml, 174, 4646, 4652]],
    _j_ = [0, [0, cst_src_proc_layer2_ml, 173, 4621, 4627]],
    _k_ = [0, [0, cst_src_proc_layer2_ml, 172, 4596, 4602]],
    _l_ = [0, [0, cst_src_proc_layer2_ml, 171, 4571, 4577]],
    _d_ = [0, [0, cst_src_proc_layer2_ml, 166, 4444, 4450]],
    _e_ = [0, [0, cst_src_proc_layer2_ml, 165, 4419, 4425]],
    _f_ = [0, [0, cst_src_proc_layer2_ml, 164, 4394, 4400]],
    _g_ = [0, [0, cst_src_proc_layer2_ml, 163, 4369, 4375]],
    _a_ = [0, [0, cst_src_proc_layer2_ml, 158, 4248, 4254]],
    _b_ = [0, [0, cst_src_proc_layer2_ml, 157, 4223, 4229]],
    _c_ = [0, [0, cst_src_proc_layer2_ml, 156, 4198, 4204]],
    cst_bonsai = cst_bonsai$0,
    cst_Bonsai_Proc_layer2 = cst_Bonsai_Proc_layer2$0;
   function return$0(a){
    var _b9_ = caml_call1(Bonsai_Value[2], a);
    return caml_call1(Bonsai_Cont[59][5], _b9_);
   }
   function map(here, v, f){
    var
     _b7_ = caml_call1(Bonsai_Cont[59][4], v),
     _b8_ = caml_call3(Bonsai_Proc[13][2][4], here, _b7_, f);
    return caml_call1(Bonsai_Cont[59][5], _b8_);
   }
   function transpose_opt(opt){
    var _b4_ = Core_Option[58];
    function _b5_(eta){return map(0, eta, _b4_);}
    var _b6_ = return$0(0);
    return caml_call3(Core_Option[41], opt, _b6_, _b5_);
   }
   function cutoff(a, equal){
    var
     _b2_ = caml_call1(Bonsai_Cont[59][4], a),
     _b3_ = caml_call3(Bonsai_Value[22], 0, _b2_, equal);
    return caml_call1(Bonsai_Cont[59][5], _b3_);
   }
   var
    map2 = Bonsai_Cont[16],
    map3 = Bonsai_Cont[9],
    map4 = Bonsai_Cont[10],
    map5 = Bonsai_Cont[11],
    map6 = Bonsai_Cont[12],
    map7 = Bonsai_Cont[13],
    map$0 = [0, -198771759, function(a, f){return map(0, a, f);}],
    include = caml_call1(Base_Applicative[13], [0, return$0, map2, map$0]),
    return$1 = include[1],
    map$1 = include[2],
    symbol = include[4],
    symbol$0 = include[5],
    symbol$1 = include[6],
    symbol_map = include[7],
    apply = include[8],
    map2$0 = include[9],
    map3$0 = include[10],
    all = include[11],
    all_unit = include[12],
    Applicative_infix = include[13];
   function both(a, b){
    var
     _bZ_ = caml_call1(Bonsai_Cont[59][4], b),
     _b0_ = caml_call1(Bonsai_Cont[59][4], a),
     _b1_ = caml_call2(Bonsai_Value[4], _b0_, _bZ_);
    return caml_call1(Bonsai_Cont[59][5], _b1_);
   }
   function symbol_map$0(a, f){
    var
     _bX_ = caml_call1(Bonsai_Cont[59][4], a),
     _bY_ = caml_call2(Bonsai_Value[3], _bX_, f);
    return caml_call1(Bonsai_Cont[59][5], _bY_);
   }
   function symbol$2(f, a){
    function _bT_(a, f){return caml_call1(f, a);}
    var
     _bU_ = caml_call1(Bonsai_Cont[59][4], f),
     _bV_ = caml_call1(Bonsai_Cont[59][4], a),
     _bW_ = caml_call3(Bonsai_Value[10], _bV_, _bU_, _bT_);
    return caml_call1(Bonsai_Cont[59][5], _bW_);
   }
   function symbol$3(f, a){
    function _bQ_(a){return caml_call1(f, a);}
    var
     _bR_ = caml_call1(Bonsai_Cont[59][4], a),
     _bS_ = caml_call2(Bonsai_Value[3], _bR_, _bQ_);
    return caml_call1(Bonsai_Cont[59][5], _bS_);
   }
   function map$2(here, v, f){
    var
     _bO_ = caml_call1(Bonsai_Cont[59][4], v),
     _bP_ = caml_call3(Bonsai_Proc[13][2][4], here, _bO_, f);
    return caml_call1(Bonsai_Cont[59][5], _bP_);
   }
   function cutoff$0(a, equal){
    var
     _bM_ = caml_call1(Bonsai_Cont[59][4], a),
     _bN_ = caml_call2(Bonsai_Proc[13][2][8], _bM_, equal);
    return caml_call1(Bonsai_Cont[59][5], _bN_);
   }
   function both$0(a, b){
    var
     _bJ_ = caml_call1(Bonsai_Cont[59][4], b),
     _bK_ = caml_call1(Bonsai_Cont[59][4], a),
     _bL_ = caml_call2(Bonsai_Value[4], _bK_, _bJ_);
    return caml_call1(Bonsai_Cont[59][5], _bL_);
   }
   function comp_return(v, graph){
    var
     _bH_ = caml_call1(Bonsai_Cont[59][4], v),
     _bI_ = caml_call1(Bonsai_Proc[1], _bH_);
    return caml_call3(Bonsai_Cont[59][3], 0, graph, _bI_);
   }
   function subcomputation(here, a, graph){
    function _bF_(graph){return caml_call1(a, graph);}
    var _bG_ = caml_call2(Bonsai_Cont[59][1], _bF_, graph);
    return caml_call3(Bonsai_Cont[59][3], here, graph, _bG_);
   }
   function sub(here, a, f, graph){
    return caml_call2(f, subcomputation(here, a, graph), graph);
   }
   function arr(here, v, f, graph){
    return caml_call4(Bonsai_Cont[63][1], here, graph, v, f);
   }
   function switch$0(param, match, branches, with$0, graph){
    return caml_call4(Bonsai_Cont[63][14], match, branches, with$0, graph);
   }
   function return$2(a, graph){return caml_call1(return$1, a);}
   function map2$1(a, b, f, graph){
    var a$0 = caml_call1(a, graph), b$0 = caml_call1(b, graph);
    return caml_call4(Bonsai_Cont[58], graph, a$0, b$0, f);
   }
   var
    map$3 =
      [0,
       -198771759,
       function(a, f, graph){
        var _bE_ = caml_call1(a, graph);
        return caml_call3(Bonsai_Cont[57], graph, _bE_, f);
       }],
    include$0 = caml_call1(Base_Applicative[13], [0, return$2, map2$1, map$3]),
    computation_return = include$0[1],
    map$4 = include$0[2],
    both$1 = include$0[3],
    symbol$4 = include$0[4],
    symbol$5 = include$0[5],
    symbol$6 = include$0[6],
    symbol_map$1 = include$0[7],
    apply$0 = include$0[8],
    map2$2 = include$0[9],
    Applicative_infix$0 = include$0[13];
   function map3$1(t1, t2, t3, f){
    function _bw_(t1){
     function _by_(t2){
      function _bA_(t3){
       var _bC_ = caml_call4(map3, t1, t2, t3, f);
       return function(_bD_){return comp_return(_bC_, _bD_);};
      }
      return function(_bB_){return sub(_a_, t3, _bA_, _bB_);};
     }
     return function(_bz_){return sub(_b_, t2, _by_, _bz_);};
    }
    return function(_bx_){return sub(_c_, t1, _bw_, _bx_);};
   }
   function map4$0(t1, t2, t3, t4, f){
    function _bm_(t1){
     function _bo_(t2){
      function _bq_(t3){
       function _bs_(t4){
        var _bu_ = caml_call5(map4, t1, t2, t3, t4, f);
        return function(_bv_){return comp_return(_bu_, _bv_);};
       }
       return function(_bt_){return sub(_d_, t4, _bs_, _bt_);};
      }
      return function(_br_){return sub(_e_, t3, _bq_, _br_);};
     }
     return function(_bp_){return sub(_f_, t2, _bo_, _bp_);};
    }
    return function(_bn_){return sub(_g_, t1, _bm_, _bn_);};
   }
   function map5$0(t1, t2, t3, t4, t5, f){
    function _ba_(t1){
     function _bc_(t2){
      function _be_(t3){
       function _bg_(t4){
        function _bi_(t5){
         var _bk_ = caml_call6(map5, t1, t2, t3, t4, t5, f);
         return function(_bl_){return comp_return(_bk_, _bl_);};
        }
        return function(_bj_){return sub(_h_, t5, _bi_, _bj_);};
       }
       return function(_bh_){return sub(_i_, t4, _bg_, _bh_);};
      }
      return function(_bf_){return sub(_j_, t3, _be_, _bf_);};
     }
     return function(_bd_){return sub(_k_, t2, _bc_, _bd_);};
    }
    return function(_bb_){return sub(_l_, t1, _ba_, _bb_);};
   }
   function map6$0(t1, t2, t3, t4, t5, t6, f){
    function _aY_(t1){
     function _a0_(t2){
      function _a2_(t3){
       function _a4_(t4){
        function _a6_(t5){
         function _a8_(t6){
          var _a__ = caml_call7(map6, t1, t2, t3, t4, t5, t6, f);
          return function(_a$_){return comp_return(_a__, _a$_);};
         }
         return function(_a9_){return sub(_m_, t6, _a8_, _a9_);};
        }
        return function(_a7_){return sub(_n_, t5, _a6_, _a7_);};
       }
       return function(_a5_){return sub(_o_, t4, _a4_, _a5_);};
      }
      return function(_a3_){return sub(_p_, t3, _a2_, _a3_);};
     }
     return function(_a1_){return sub(_q_, t2, _a0_, _a1_);};
    }
    return function(_aZ_){return sub(_r_, t1, _aY_, _aZ_);};
   }
   function map7$0(t1, t2, t3, t4, t5, t6, t7, f){
    function _aI_(t1){
     function _aK_(t2){
      function _aM_(t3){
       function _aO_(t4){
        function _aQ_(t5){
         function _aS_(t6){
          function _aU_(t7){
           var _aW_ = caml_call8(map7, t1, t2, t3, t4, t5, t6, t7, f);
           return function(_aX_){return comp_return(_aW_, _aX_);};
          }
          return function(_aV_){return sub(_s_, t7, _aU_, _aV_);};
         }
         return function(_aT_){return sub(_t_, t6, _aS_, _aT_);};
        }
        return function(_aR_){return sub(_u_, t5, _aQ_, _aR_);};
       }
       return function(_aP_){return sub(_v_, t4, _aO_, _aP_);};
      }
      return function(_aN_){return sub(_w_, t3, _aM_, _aN_);};
     }
     return function(_aL_){return sub(_x_, t2, _aK_, _aL_);};
    }
    return function(_aJ_){return sub(_y_, t1, _aI_, _aJ_);};
   }
   function _z_(param){
    if(! param) return caml_call1(computation_return, 0);
    var _aC_ = param[2], t1 = param[1];
    if(! _aC_) return caml_call2(map$4, t1, function(a1){return [0, a1, 0];});
    var _aD_ = _aC_[2], t2 = _aC_[1];
    if(! _aD_)
     return caml_call3
             (map2$2, t1, t2, function(a1, a2){return [0, a1, [0, a2, 0]];});
    var _aE_ = _aD_[2], t3 = _aD_[1];
    if(! _aE_)
     return map3$1
             (t1,
              t2,
              t3,
              function(a1, a2, a3){return [0, a1, [0, a2, [0, a3, 0]]];});
    var _aF_ = _aE_[2], t4 = _aE_[1];
    if(! _aF_)
     return map4$0
             (t1,
              t2,
              t3,
              t4,
              function(a1, a2, a3, a4){
               return [0, a1, [0, a2, [0, a3, [0, a4, 0]]]];
              });
    var _aG_ = _aF_[2], t5 = _aF_[1];
    if(! _aG_)
     return map5$0
             (t1,
              t2,
              t3,
              t4,
              t5,
              function(a1, a2, a3, a4, a5){
               return [0, a1, [0, a2, [0, a3, [0, a4, [0, a5, 0]]]]];
              });
    var _aH_ = _aG_[2], t6 = _aG_[1];
    if(! _aH_)
     return map6$0
             (t1,
              t2,
              t3,
              t4,
              t5,
              t6,
              function(a1, a2, a3, a4, a5, a6){
               return [0, a1, [0, a2, [0, a3, [0, a4, [0, a5, [0, a6, 0]]]]]];
              });
    var t7 = _aH_[1];
    if(! _aH_[2])
     return map7$0
             (t1,
              t2,
              t3,
              t4,
              t5,
              t6,
              t7,
              function(a1, a2, a3, a4, a5, a6, a7){
               return [0,
                       a1,
                       [0, a2, [0, a3, [0, a4, [0, a5, [0, a6, [0, a7, 0]]]]]]];
              });
    var
     rest = _aH_[2],
     left =
       map7$0
        (t1,
         t2,
         t3,
         t4,
         t5,
         t6,
         t7,
         function(a1, a2, a3, a4, a5, a6, a7){
          return [0,
                  a1,
                  [0, a2, [0, a3, [0, a4, [0, a5, [0, a6, [0, a7, 0]]]]]]];
         }),
     right = _z_(rest);
    return caml_call3
            (map2$2,
             left,
             right,
             function(left, right){return caml_call2(Core[156], left, right);});
   }
   function all$0(xs){
    var _az_ = _z_(xs), _aA_ = 0;
    return function(_aB_){return subcomputation(_aA_, _az_, _aB_);};
   }
   function reduce_balanced(xs, f){
    if(! xs) return 0;
    function _aq_(a, b){
     function _av_(a){
      function _ax_(b){return caml_call2(f, a, b);}
      return function(_ay_){return sub(_A_, b, _ax_, _ay_);};
     }
     return function(_aw_){return sub(_B_, a, _av_, _aw_);};
    }
    var
     _ar_ = caml_call2(Core_List[110], xs, _aq_),
     _as_ = caml_call4(Core_Option[40], 0, 0, 0, _ar_),
     _at_ = 0;
    return [0, function(_au_){return subcomputation(_at_, _as_, _au_);}];
   }
   function fold_right(xs, f, init){
    function _ag_(_ap_){return comp_return(init, _ap_);}
    function _ah_(a, b){
     function _al_(a){
      function _an_(b){return caml_call2(f, a, b);}
      return function(_ao_){return sub(_C_, b, _an_, _ao_);};
     }
     return function(_am_){return sub(_D_, a, _al_, _am_);};
    }
    var _ai_ = caml_call3(Core_List[101], xs, _ah_, _ag_), _aj_ = 0;
    return function(_ak_){return subcomputation(_aj_, _ai_, _ak_);};
   }
   function all_unit$0(xs){
    function _ac_(param){return 0;}
    var _ad_ = caml_call2(map$4, all$0(xs), _ac_), _ae_ = 0;
    return function(_af_){return subcomputation(_ae_, _ad_, _af_);};
   }
   function all_map(map_of_computations){
    var
     _X_ = caml_call1(Core_Map[3], map_of_computations),
     _Y_ = caml_call1(Core_Map[8], _X_);
    function _Z_(param){
     var data = param[2], key = param[1];
     return caml_call2(map$4, data, caml_call1(Core_Tuple[1][6], key));
    }
    var
     ___ = caml_call2(Core_Map[81], 0, map_of_computations),
     _$_ = caml_call2(map$4, all$0(caml_call2(Core_List[51], ___, _Z_)), _Y_),
     _aa_ = 0;
    return function(_ab_){return subcomputation(_aa_, _$_, _ab_);};
   }
   var
    symbol$7 = Applicative_infix$0[1],
    symbol$8 = Applicative_infix$0[2],
    symbol$9 = Applicative_infix$0[3],
    symbol_map$2 = Applicative_infix$0[4],
    create = Bonsai_Var[1],
    update = Bonsai_Var[2],
    set = Bonsai_Var[3],
    get = Bonsai_Var[4],
    incr_var = Bonsai_Var[6];
   function value(var$0){
    var _W_ = caml_call1(Bonsai_Var[5], var$0);
    return caml_call1(Bonsai_Cont[63][3], _W_);
   }
   var
    For_open = [0],
    For_proc2 = Bonsai_Cont[63],
    Expert = Bonsai_Cont[62],
    path = Bonsai_Cont[56],
    path_id = Bonsai_Cont[55],
    Debug = Bonsai_Cont[53],
    assoc_list = Bonsai_Cont[52],
    assoc_set = Bonsai_Cont[51],
    assoc = Bonsai_Cont[50],
    Incr = Bonsai_Cont[49],
    Dynamic_scope = Bonsai_Cont[48],
    Effect_throttling = Bonsai_Cont[47],
    Memo = Bonsai_Cont[46],
    Edge = Bonsai_Cont[45],
    Clock = Bonsai_Cont[44],
    peek = Bonsai_Cont[43],
    previous_value = Bonsai_Cont[38],
    most_recent_value_satisfying = Bonsai_Cont[37],
    most_recent_some = Bonsai_Cont[36],
    scope_model = Bonsai_Cont[35],
    fix2 = Bonsai_Cont[34],
    fix = Bonsai_Cont[33],
    freeze = Bonsai_Cont[32],
    Computation_status = Bonsai_Cont[24],
    both$2 = Bonsai_Cont[17],
    map$5 = Bonsai_Cont[15],
    include$1 = Bonsai_Cont[63],
    state = include$1[4],
    state_opt = include$1[5],
    toggle = include$1[6],
    Toggle = include$1[7],
    toggle$0 = include$1[8],
    state_machine0 = include$1[9],
    state_machine1 = include$1[10],
    actor0 = include$1[11],
    actor1 = include$1[12],
    wrap = include$1[13],
    with_model_resetter = include$1[15],
    with_model_resetter$0 = include$1[16],
    debug_on_change = include$1[24],
    debug_on_change_print_s = include$1[25],
    lazy = include$1[26],
    narrow = include$1[27],
    narrow_via_field = include$1[28];
   function read(v, graph){return v;}
   function const$0(a, graph){return caml_call1(Bonsai_Cont[60][2], a);}
   function pure(f, i, graph){return caml_call2(map$5, i, f);}
   function scope_model$0(cmp, on, for$0){
    return caml_call3(scope_model, cmp, on, for$0);
   }
   var
    approx_now = Clock[1],
    now = Clock[2],
    Before_or_after = Clock[3],
    at = Clock[4],
    get_current_time = Clock[6],
    sleep = Clock[7],
    until = Clock[8],
    _E_ = Clock[5];
   function every
   (when_to_start_next_effect,
    trigger_on_activate,
    time_span,
    callback,
    graph){
    caml_call5
     (_E_,
      when_to_start_next_effect,
      trigger_on_activate,
      time_span,
      callback,
      graph);
    return caml_call1(Bonsai_Cont[60][2], 0);
   }
   var
    value_cutoff = Incr[1],
    compute = Incr[2],
    to_value = Incr[3],
    _F_ = Incr[4];
   function with_clock(f){return caml_call1(_F_, f);}
   var
    Incr$0 = [0, value_cutoff, compute, to_value, with_clock],
    wait_after_display = Edge[7],
    Poll = Edge[8],
    on_change = For_proc2[17],
    on_change$0 = For_proc2[18],
    lifecycle = For_proc2[19],
    lifecycle$0 = For_proc2[20],
    after_display = For_proc2[21],
    after_display$0 = For_proc2[22],
    Starting = Poll[1],
    effect_on_change = Poll[2],
    manual_refresh = For_proc2[23],
    Poll$0 = [0, Starting, effect_on_change, manual_refresh],
    instrument_computation = Debug[3],
    to_dot = Debug[4],
    enable_incremental_annotations = Debug[5],
    disable_incremental_annotation = Debug[6],
    assoc_on = Expert[2],
    _G_ = Expert[1];
   function thunk(f, graph){return caml_call2(_G_, f, graph);}
   function of_module1
   (sexp_of_model, component, equal, default_model, input, graph){
    function _Q_(ctx, input, model, action){
     if(input){
      var input$0 = input[1];
      return caml_call4(component[6], ctx, input$0, model, action);
     }
     var
      _U_ = [0, [1, [0, _H_, [0, caml_call1(component[4][1], action), 0]]], 0],
      _V_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_An_action_sent_to_an_of_mo),
          _U_]];
     caml_call2(Core[257], 0, _V_);
     return model;
    }
    var
     match =
       caml_call8
        (Bonsai_Cont[29],
         0,
         sexp_of_model,
         [0, component[4][1]],
         equal,
         default_model,
         _Q_,
         input,
         graph),
     inject = match[2],
     model = match[1];
    function _R_(param){
     var
      match = param[2],
      input = match[2],
      inject = match[1],
      model = param[1];
     return caml_call3(component[7], inject, input, model);
    }
    var
     _S_ = caml_call2(Bonsai_Cont[60][3][3], inject, input),
     _T_ = caml_call2(Bonsai_Cont[60][3][3], model, _S_);
    return caml_call3(Bonsai_Cont[60][3][1], 0, _T_, _R_);
   }
   function of_module0(sexp_of_model, equal, component, default_model, graph){
    function _N_(ctx){return caml_call2(component[6], ctx, 0);}
    var
     match =
       caml_call7
        (Bonsai_Cont[28],
         0,
         sexp_of_model,
         [0, component[4][1]],
         equal,
         default_model,
         _N_,
         graph),
     inject = match[2],
     model = match[1];
    function _O_(param){
     var inject = param[2], model = param[1];
     return caml_call3(component[7], inject, 0, model);
    }
    var _P_ = caml_call2(Bonsai_Cont[60][3][3], model, inject);
    return caml_call3(Bonsai_Cont[60][3][1], 0, _P_, _O_);
   }
   function of_module2(sexp_of_model, c, equal, default_model, i1, i2){
    var _L_ = caml_call2(both$2, i1, i2);
    return function(_M_){
     return of_module1(sexp_of_model, c, equal, default_model, _L_, _M_);};
   }
   function enum$0(E, match, with$0, graph){
    var
     all = E[2],
     include = caml_call1(Core_Comparator[7], [0, E[1], E[4]]),
     comparator = include[1],
     forward_index = caml_call1(Core_List[30], all);
    function _I_(i, k){return [0, k, i];}
    var
     _J_ = caml_call2(Core_List[41], all, _I_),
     reverse_index = caml_call2(Core_Map[8], [0, comparator], _J_),
     _K_ = caml_call1(Core_Map[45], reverse_index),
     branches = forward_index.length - 1,
     match$0 = caml_call2(Bonsai_Cont[60][1], match, _K_);
    function with$1(i){
     return caml_call1
             (with$0, runtime.caml_check_bound(forward_index, i)[1 + i]);
    }
    return caml_call4(For_proc2[14], match$0, branches, with$1, graph);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Proc_layer2);
   var
    Bonsai_Proc_layer2 =
      [0,
       [0],
       [0],
       [0,
        return$1,
        map$1,
        both,
        symbol,
        symbol$0,
        symbol$1,
        symbol_map,
        apply,
        map2$0,
        all,
        all_unit,
        Applicative_infix,
        map3$0,
        map4,
        map5,
        map6,
        map7,
        cutoff,
        transpose_opt],
       [0,
        computation_return,
        map$4,
        both$1,
        symbol$4,
        symbol$5,
        symbol$6,
        symbol_map$1,
        apply$0,
        map2$2,
        all$0,
        all_unit$0,
        Applicative_infix$0,
        all_map,
        reduce_balanced,
        fold_right,
        [0,
         computation_return,
         symbol$7,
         symbol$8,
         symbol$9,
         symbol_map$2,
         [0,
          computation_return,
          map$4,
          both$1,
          map3$1,
          map4$0,
          map5$0,
          map6$0,
          map7$0]],
        map3$1,
        map4$0,
        map5$0,
        map6$0,
        map7$0],
       For_open,
       [0, create, update, set, get, value, incr_var],
       read,
       const$0,
       path_id,
       pure,
       Computation_status,
       state,
       state_opt,
       toggle,
       Toggle,
       toggle$0,
       [0, Bonsai_Apply_action_context[1], Bonsai_Apply_action_context[2]],
       state_machine0,
       state_machine1,
       actor0,
       actor1,
       narrow,
       narrow_via_field,
       of_module0,
       of_module1,
       of_module2,
       freeze,
       lazy,
       fix,
       fix2,
       scope_model$0,
       most_recent_some,
       most_recent_value_satisfying,
       previous_value,
       assoc,
       assoc_set,
       assoc_list,
       enum$0,
       wrap,
       with_model_resetter,
       with_model_resetter$0,
       peek,
       sub,
       [0,
        approx_now,
        now,
        Before_or_after,
        at,
        every,
        get_current_time,
        sleep,
        until],
       [0,
        on_change,
        on_change$0,
        lifecycle,
        lifecycle$0,
        after_display,
        after_display$0,
        wait_after_display,
        Poll$0],
       Memo,
       Effect_throttling,
       Dynamic_scope,
       Incr$0,
       [0,
        comp_return,
        symbol_map$0,
        symbol$2,
        symbol$3,
        [0,
         sub,
         cutoff$0,
         switch$0,
         map$2,
         map2,
         comp_return,
         both$0,
         arr,
         map3,
         map4,
         map5,
         map6,
         map7]],
       [0, thunk, assoc_on],
       [0,
        debug_on_change,
        debug_on_change_print_s,
        instrument_computation,
        to_dot,
        enable_incremental_annotations,
        disable_incremental_annotation],
       path,
       Bonsai_Cont[61]];
   runtime.caml_register_global
    (55, Bonsai_Proc_layer2, cst_Bonsai_Proc_layer2$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Proc_intf
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_Proc_intf = "Bonsai__Proc_intf",
    cst_bonsai = "bonsai";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Proc_intf);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][1], "src/proc_intf.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai, "proc_intf.ml");
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Proc_intf);
   var Bonsai_Proc_intf = [0];
   runtime.caml_register_global(11, Bonsai_Proc_intf, cst_Bonsai_Proc_intf);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Linter
//# unitInfo: Requires: Bonsai__Skeleton, CamlinternalOO, Core__List, Core__Option, Core__Source_code_position, Core__String, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Ppx_string_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_Linter$0 = "Bonsai__Linter",
    cst_bonsai$0 = "bonsai",
    cst_bool = "bool",
    cst_computation = "computation",
    cst_computation_kind = "computation_kind",
    cst_id = "id",
    cst_lazy = "lazy_",
    cst_list = "list",
    cst_node_path = "node_path",
    cst_option = "option",
    cst_source_code_position = "source_code_position",
    cst_value = "value",
    cst_value_kind = "value_kind";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = ": ",
    _a_ =
      [0,
       cst_value_kind,
       cst_value,
       cst_source_code_position,
       cst_option,
       cst_node_path,
       cst_list,
       cst_lazy,
       cst_id,
       cst_computation_kind,
       cst_computation,
       cst_bool],
    _b_ =
      [0,
       cst_bool,
       cst_list,
       cst_computation_kind,
       cst_lazy,
       cst_id,
       cst_node_path,
       cst_value_kind,
       cst_computation,
       cst_option,
       cst_value,
       cst_source_code_position],
    shared =
      [0,
       cst_bool,
       cst_computation,
       cst_computation_kind,
       cst_id,
       cst_lazy,
       cst_list,
       cst_node_path,
       cst_option,
       cst_source_code_position,
       cst_value,
       cst_value_kind],
    Core_List = global_data.Core__List,
    Bonsai_Skeleton = global_data.Bonsai__Skeleton,
    Core_Source_code_position = global_data.Core__Source_code_position,
    CamlinternalOO = global_data.CamlinternalOO,
    Core_Option = global_data.Core__Option,
    Core_String = global_data.Core__String,
    Ppx_string_runtime = global_data.Ppx_string_runtime,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Linter$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/linter.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai$0, "linter.ml");
   var
    _q_ = [0, "_none_", 0, 0, 0],
    cst_state_machine1_can_be_opti =
      "state_machine1 can be optimized to a state_machine0",
    cst_unfolded_constant = "unfolded constant",
    cst_bonsai = cst_bonsai$0,
    cst_Bonsai_Linter = cst_Bonsai_Linter$0;
   function to_string(param){
    var
     here = param[2],
     message = param[1],
     _u_ = [0, caml_call1(Ppx_string_runtime[1][2], cst), [0, message, 0]],
     _v_ = caml_call1(Core_Source_code_position[4], here),
     _w_ = [0, caml_call1(Ppx_string_runtime[1][3], _v_), _u_];
    return caml_call1(Ppx_string_runtime[1][4], _w_);
   }
   function relative_to(base, t){
    if(! caml_call2(Core_String[145], base[1], t[2][1])) return t;
    var _t_ = t[2];
    return [0, t[1], [0, _t_[1], t[2][2] - base[2] | 0, _t_[3], _t_[4]]];
   }
   function value_is_constant(param){
    var param$0 = param;
    for(;;){
     var kind = param$0[2];
     if(typeof kind === "number") return 1 < kind ? 0 : 1;
     if(0 !== kind[0]){
      var inputs = kind[1];
      return caml_call2(Core_List[24], inputs, value_is_constant);
     }
     var t = kind[1], param$0 = t;
    }
   }
   var
    _c_ = caml_call1(CamlinternalOO[16], _b_),
    _d_ = caml_call2(CamlinternalOO[8], _c_, _a_)[2],
    _e_ =
      caml_call6
       (CamlinternalOO[18], _c_, 0, 0, shared, Bonsai_Skeleton[4][1], 1),
    _f_ = _e_[1],
    _g_ = _e_[11];
   function _h_(self_1, value, param){
    var
     here = param[2],
     warnings = param[1],
     here$0 = caml_call2(Core_Option[39], value[3], here),
     match = value[2];
    if(typeof match === "number")
     var is_unfolded_constant = 0;
    else if(0 === match[0])
     var t = match[1], is_unfolded_constant = value_is_constant(t);
    else
     var
      inputs = match[1],
      is_unfolded_constant =
        caml_call2(Core_List[24], inputs, value_is_constant);
    return is_unfolded_constant
            ? [0, [0, [0, cst_unfolded_constant, here$0], warnings], here$0]
            : caml_call2
              (caml_call1(_g_, self_1), value, [0, warnings, here$0]);
   }
   caml_call3(CamlinternalOO[10], _c_, _d_, _h_);
   caml_call1(CamlinternalOO[17], _c_);
   var _i_ = caml_call2(CamlinternalOO[24], 0, _c_);
   caml_call1(_f_, _i_);
   var
    unfolded_constants_linter = caml_call3(CamlinternalOO[26], 0, _i_, _c_),
    _j_ = caml_call1(CamlinternalOO[16], _b_),
    _k_ = caml_call2(CamlinternalOO[8], _j_, _a_)[10],
    _l_ =
      caml_call6
       (CamlinternalOO[18], _j_, 0, 0, shared, Bonsai_Skeleton[4][1], 1),
    _m_ = _l_[1],
    _n_ = _l_[3];
   function _o_(self_2, computation, param){
    var
     here = param[2],
     warnings = param[1],
     here$0 = caml_call2(Core_Option[39], computation[3], here),
     match = computation[2];
    a:
    {
     if(typeof match !== "number" && 2 === match[0]){
      var
       input = match[1],
       _s_ =
         value_is_constant(input)
          ? [0, [0, cst_state_machine1_can_be_opti, here$0], warnings]
          : warnings,
       warnings$0 = _s_;
      break a;
     }
     var warnings$0 = warnings;
    }
    return caml_call2
            (caml_call1(_n_, self_2), computation, [0, warnings$0, here$0]);
   }
   caml_call3(CamlinternalOO[10], _j_, _k_, _o_);
   caml_call1(CamlinternalOO[17], _j_);
   var _p_ = caml_call2(CamlinternalOO[24], 0, _j_);
   caml_call1(_m_, _p_);
   var
    state_machine1_to_state_machin =
      caml_call3(CamlinternalOO[26], 0, _p_, _j_);
   function list_warnings(computation){
    var
     computation$0 = caml_call1(Bonsai_Skeleton[3][3], computation),
     default_location = caml_call1(Core_Source_code_position[5], _q_),
     linters =
       [0, unfolded_constants_linter, [0, state_machine1_to_state_machin, 0]];
    function _r_(warnings, linter){
     var
      warnings$0 =
        caml_call3
          (runtime.caml_get_public_method(linter, 381242055, 2),
           linter,
           computation$0,
           [0, warnings, default_location])
         [1];
     return warnings$0;
    }
    return caml_call3(Core_List[20], linters, 0, _r_);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Linter);
   var Bonsai_Linter = [0, [0, to_string, relative_to], list_warnings];
   runtime.caml_register_global(25, Bonsai_Linter, cst_Bonsai_Linter$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Legacy_api_intf
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_Legacy_api_intf = "Bonsai__Legacy_api_intf",
    cst_bonsai = "bonsai";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Legacy_api_intf);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][1], "src/legacy_api_intf.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai, "legacy_api_intf.ml");
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Legacy_api_intf);
   var Bonsai_Legacy_api_intf = [0];
   runtime.caml_register_global
    (11, Bonsai_Legacy_api_intf, cst_Bonsai_Legacy_api_intf);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Legacy_api
//# unitInfo: Requires: Bonsai__Cont, Bonsai__Proc_layer2, Bonsai__Value, Core, Core__Sexp, Core__Tuple, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Ui_incr
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_Legacy_api$0 = "Bonsai__Legacy_api",
    cst_action = "action",
    cst_bonsai$0 = "bonsai",
    cst_src_legacy_api_ml = "src/legacy_api.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ui_incr = global_data.Ui_incr,
    Bonsai_Proc_layer2 = global_data.Bonsai__Proc_layer2,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Core = global_data.Core,
    Bonsai_Cont = global_data.Bonsai__Cont,
    Bonsai_Value = global_data.Bonsai__Value,
    Core_Tuple = global_data.Core__Tuple,
    Assert_failure = global_data.Assert_failure,
    Core_Sexp = global_data.Core__Sexp,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Legacy_api$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_legacy_api_ml);
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai$0, "legacy_api.ml");
   var
    _s_ = [0, cst_action],
    cst_An_action_sent_to_an_of_mo =
      "An action sent to an [of_module] has been dropped because its input was not present. This happens when the [of_module] is inactive when it receives a message.",
    cst_src_legacy_api_ml_181_16 = "src/legacy_api.ml:181:16",
    _t_ = [0, [0, cst_src_legacy_api_ml, 163, 3850, 3854]],
    _q_ = [0, [0, cst_src_legacy_api_ml, 140, 3380, 3384]],
    _r_ = [0, [0, cst_src_legacy_api_ml, 138, 3312, 3316]],
    _o_ = [0, [0, cst_src_legacy_api_ml, 133, 3176, 3180]],
    _p_ = [0, [0, cst_src_legacy_api_ml, 131, 3105, 3109]],
    _m_ = [0, [0, cst_src_legacy_api_ml, 126, 2995, 2999]],
    _n_ = [0, [0, cst_src_legacy_api_ml, 125, 2968, 2972]],
    _l_ = [0, [0, cst_src_legacy_api_ml, 120, 2879, 2883]],
    _k_ = [0, [0, cst_src_legacy_api_ml, 115, 2787, 2791]],
    _i_ = [0, [0, cst_src_legacy_api_ml, 110, 2688, 2692]],
    _j_ = [0, [0, cst_src_legacy_api_ml, 109, 2659, 2663]],
    _h_ = [0, [0, cst_src_legacy_api_ml, 103, 2530, 2534]],
    _g_ = [0, [0, cst_src_legacy_api_ml, 97, 2404, 2408]],
    _d_ = [0, cst_src_legacy_api_ml, 70, 2],
    _e_ = [0, cst_src_legacy_api_ml, 70, 1697, 1699],
    _f_ = [0, [0, cst_src_legacy_api_ml, 70, 1697, 1699]],
    _b_ = [0, [0, cst_src_legacy_api_ml, 57, 1374, 1376]],
    _c_ = [0, [0, cst_src_legacy_api_ml, 56, 1353, 1355]],
    _a_ = [0, cst_action],
    cst_An_action_sent_to_a_state_ =
      "An action sent to a [state_machine1] has been dropped because its input was not present. This happens when the [state_machine1] is inactive when it receives a message.",
    cst_src_legacy_api_ml_45_12 = "src/legacy_api.ml:45:12",
    cst_bonsai = cst_bonsai$0,
    cst_Bonsai_Legacy_api = cst_Bonsai_Legacy_api$0;
   function const$0(x, param){return caml_call1(Bonsai_Proc_layer2[8], x);}
   var input = Bonsai_Proc_layer2[7];
   function pure(f, i){
    var _a9_ = caml_call2(Bonsai_Proc_layer2[3][2], i, f);
    return caml_call1(Bonsai_Proc_layer2[7], _a9_);
   }
   function compose(a, b, i){
    var _a8_ = caml_call1(a, i);
    return caml_call3(Bonsai_Proc_layer2[50][5][1], 0, _a8_, b);
   }
   function map(a, f, i){
    function _a5_(x){
     var _a7_ = caml_call2(Bonsai_Proc_layer2[3][2], x, f);
     return caml_call1(Bonsai_Proc_layer2[7], _a7_);
    }
    var _a6_ = caml_call1(a, i);
    return caml_call3(Bonsai_Proc_layer2[50][5][1], 0, _a6_, _a5_);
   }
   function map_input(a, f, i){
    return caml_call1(a, caml_call2(Bonsai_Proc_layer2[3][2], i, f));
   }
   var of_module = Bonsai_Proc_layer2[25];
   function state_machine
   (sexp_of_action,
    sexp_of_model,
    equal,
    here,
    default_model,
    apply_action,
    input){
    function _a1_(context, input, model, action){
     if(input){
      var input$0 = input[1];
      return caml_call4(apply_action, context, input$0, model, action);
     }
     var
      action$0 = caml_call1(sexp_of_action, action),
      _a2_ =
        [0, [1, [0, _a_, [0, caml_call1(Core_Sexp[93], action$0), 0]]], 0],
      _a3_ =
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_An_action_sent_to_a_state_),
         _a2_],
      _a4_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_src_legacy_api_ml_45_12),
          _a3_]];
     caml_call2(Core[257], 0, _a4_);
     return model;
    }
    return caml_call7
            (Bonsai_Proc_layer2[19],
             [0, sexp_of_action],
             0,
             sexp_of_model,
             [0, equal],
             default_model,
             _a1_,
             input);
   }
   function both(a, b, i){
    function _aW_(a){
     function _aY_(b){
      var _a0_ = caml_call2(Bonsai_Proc_layer2[3][3], a, b);
      return caml_call1(Bonsai_Proc_layer2[50][1], _a0_);
     }
     var _aZ_ = caml_call1(b, i);
     return caml_call3(Bonsai_Proc_layer2[50][5][1], _b_, _aZ_, _aY_);
    }
    var _aX_ = caml_call1(a, i);
    return caml_call3(Bonsai_Proc_layer2[50][5][1], _c_, _aX_, _aW_);
   }
   function enum$0(m, which, handle, input){
    var match = caml_call2(Bonsai_Proc_layer2[3][2], input, which);
    function with$0(key){return caml_call2(handle, key, input);}
    return caml_call3(Bonsai_Proc_layer2[38], m, match, with$0);
   }
   function if$0(choose, then, else$0, input){
    var cond = caml_call2(Bonsai_Proc_layer2[3][2], input, choose);
    function _aQ_(pattern_syntax_003){
     function _aS_(param){
      if(0 === param) return caml_call1(then, input);
      if(1 === param) return caml_call1(else$0, input);
      throw caml_maybe_attach_backtrace([0, Assert_failure, _d_], 1);
     }
     var _aT_ = 2;
     function _aU_(param){return param ? 0 : 1;}
     var
      _aV_ =
        caml_call3(Bonsai_Proc_layer2[50][5][4], 0, pattern_syntax_003, _aU_);
     return caml_call4(Bonsai_Proc_layer2[50][5][3], _e_, _aV_, _aT_, _aS_);
    }
    var _aR_ = caml_call1(Bonsai_Proc_layer2[50][5][6], cond);
    return caml_call3(Bonsai_Proc_layer2[50][5][1], _f_, _aR_, _aQ_);
   }
   function assoc_input(comparator, f, input){
    function _aP_(param){return f;}
    return caml_call3(Bonsai_Proc_layer2[35], comparator, input, _aP_);
   }
   function associ_input(comparator, f, input){
    function _aO_(key, data){
     return caml_call1(f, caml_call2(Bonsai_Proc_layer2[3][3], key, data));
    }
    return caml_call3(Bonsai_Proc_layer2[35], comparator, input, _aO_);
   }
   function associ_input_with_extra(comparator, f, input){
    function _aJ_(param){
     var pattern_syntax_004 = param[2];
     return pattern_syntax_004;
    }
    var extra = caml_call3(Bonsai_Proc_layer2[50][5][4], 0, input, _aJ_);
    function _aK_(param){
     var pattern_syntax_005 = param[1];
     return pattern_syntax_005;
    }
    var input$0 = caml_call3(Bonsai_Proc_layer2[50][5][4], 0, input, _aK_);
    function _aL_(key, data){
     var
      _aM_ = caml_call2(Bonsai_Proc_layer2[50][4], Core_Tuple[2][5], key),
      _aN_ = caml_call2(Bonsai_Proc_layer2[50][3], _aM_, data);
     return caml_call1(f, caml_call2(Bonsai_Proc_layer2[50][3], _aN_, extra));
    }
    return caml_call3(Bonsai_Proc_layer2[35], comparator, input$0, _aL_);
   }
   var Map = [0, assoc_input, associ_input, associ_input_with_extra];
   function arr(f){return function(_aI_){return pure(f, _aI_);};}
   function symbol(a, f){return function(_aH_){return map(a, f, _aH_);};}
   function symbol$0(a, f){
    return function(_aG_){return map_input(a, f, _aG_);};
   }
   function first(f, i){
    function _aB_(param){
     var pattern_syntax_006 = param[1];
     return pattern_syntax_006;
    }
    var fst = caml_call3(Bonsai_Proc_layer2[50][5][4], 0, i, _aB_);
    function _aC_(param){
     var pattern_syntax_007 = param[2];
     return pattern_syntax_007;
    }
    var snd = caml_call3(Bonsai_Proc_layer2[50][5][4], 0, i, _aC_);
    function _aD_(out){
     var _aF_ = caml_call2(Bonsai_Proc_layer2[3][3], out, snd);
     return caml_call1(Bonsai_Proc_layer2[50][1], _aF_);
    }
    var _aE_ = caml_call1(f, fst);
    return caml_call3(Bonsai_Proc_layer2[50][5][1], _g_, _aE_, _aD_);
   }
   function second(f, i){
    function _aw_(param){
     var pattern_syntax_009 = param[1];
     return pattern_syntax_009;
    }
    var fst = caml_call3(Bonsai_Proc_layer2[50][5][4], 0, i, _aw_);
    function _ax_(param){
     var pattern_syntax_010 = param[2];
     return pattern_syntax_010;
    }
    var snd = caml_call3(Bonsai_Proc_layer2[50][5][4], 0, i, _ax_);
    function _ay_(out){
     var _aA_ = caml_call2(Bonsai_Proc_layer2[3][3], fst, out);
     return caml_call1(Bonsai_Proc_layer2[50][1], _aA_);
    }
    var _az_ = caml_call1(f, snd);
    return caml_call3(Bonsai_Proc_layer2[50][5][1], _h_, _az_, _ay_);
   }
   function symbol$1(f1, f2, i){
    function _ap_(param){
     var pattern_syntax_012 = param[1];
     return pattern_syntax_012;
    }
    var fst = caml_call3(Bonsai_Proc_layer2[50][5][4], 0, i, _ap_);
    function _aq_(param){
     var pattern_syntax_013 = param[2];
     return pattern_syntax_013;
    }
    var snd = caml_call3(Bonsai_Proc_layer2[50][5][4], 0, i, _aq_);
    function _ar_(out1){
     function _at_(out2){
      var _av_ = caml_call2(Bonsai_Proc_layer2[3][3], out1, out2);
      return caml_call1(Bonsai_Proc_layer2[50][1], _av_);
     }
     var _au_ = caml_call1(f2, snd);
     return caml_call3(Bonsai_Proc_layer2[50][5][1], _i_, _au_, _at_);
    }
    var _as_ = caml_call1(f1, fst);
    return caml_call3(Bonsai_Proc_layer2[50][5][1], _j_, _as_, _ar_);
   }
   function extend_first(f, i){
    function _am_(out){
     var _ao_ = caml_call2(Bonsai_Proc_layer2[3][3], out, i);
     return caml_call1(Bonsai_Proc_layer2[50][1], _ao_);
    }
    var _an_ = caml_call1(f, i);
    return caml_call3(Bonsai_Proc_layer2[50][5][1], _k_, _an_, _am_);
   }
   function extend_second(f, i){
    function _aj_(out){
     var _al_ = caml_call2(Bonsai_Proc_layer2[3][3], i, out);
     return caml_call1(Bonsai_Proc_layer2[50][1], _al_);
    }
    var _ak_ = caml_call1(f, i);
    return caml_call3(Bonsai_Proc_layer2[50][5][1], _l_, _ak_, _aj_);
   }
   function fanout(f1, f2, i){
    function _ae_(out1){
     function _ag_(out2){
      var _ai_ = caml_call2(Bonsai_Proc_layer2[3][3], out1, out2);
      return caml_call1(Bonsai_Proc_layer2[50][1], _ai_);
     }
     var _ah_ = caml_call1(f2, i);
     return caml_call3(Bonsai_Proc_layer2[50][5][1], _m_, _ah_, _ag_);
    }
    var _af_ = caml_call1(f1, i);
    return caml_call3(Bonsai_Proc_layer2[50][5][1], _n_, _af_, _ae_);
   }
   function partial_compose_first(f1, f2, i){
    function _Z_(out1){
     function _$_(param){
      var pattern_syntax_021 = param[2];
      return pattern_syntax_021;
     }
     var out1$0 = caml_call3(Bonsai_Proc_layer2[50][5][4], 0, out1, _$_);
     function _aa_(param){
      var pattern_syntax_022 = param[1];
      return pattern_syntax_022;
     }
     var shared = caml_call3(Bonsai_Proc_layer2[50][5][4], 0, out1, _aa_);
     function _ab_(out2){
      var _ad_ = caml_call2(Bonsai_Proc_layer2[3][3], out1$0, out2);
      return caml_call1(Bonsai_Proc_layer2[50][1], _ad_);
     }
     var
      _ac_ = caml_call1(f2, caml_call2(Bonsai_Proc_layer2[3][3], i, shared));
     return caml_call3(Bonsai_Proc_layer2[50][5][1], _o_, _ac_, _ab_);
    }
    var ___ = caml_call1(f1, i);
    return caml_call3(Bonsai_Proc_layer2[50][5][1], _p_, ___, _Z_);
   }
   function pipe(f1, into, via, finalize, i){
    function _R_(r1){
     var
      _T_ = caml_call2(Bonsai_Proc_layer2[50][4], via, i),
      intermediate = caml_call2(Bonsai_Proc_layer2[50][3], _T_, r1);
     function _U_(r2){
      var
       _W_ = caml_call2(Bonsai_Proc_layer2[50][4], finalize, i),
       _X_ = caml_call2(Bonsai_Proc_layer2[50][3], _W_, r1),
       _Y_ = caml_call2(Bonsai_Proc_layer2[50][3], _X_, r2);
      return caml_call1(Bonsai_Proc_layer2[50][1], _Y_);
     }
     var _V_ = caml_call1(into, intermediate);
     return caml_call3(Bonsai_Proc_layer2[50][5][1], _q_, _V_, _U_);
    }
    var _S_ = caml_call1(f1, i);
    return caml_call3(Bonsai_Proc_layer2[50][5][1], _r_, _S_, _R_);
   }
   function of_incr(i, param){
    var
     _P_ = caml_call1(Bonsai_Value[24], i),
     _Q_ = caml_call1(Bonsai_Cont[59][5], _P_);
    return caml_call1(Bonsai_Proc_layer2[7], _Q_);
   }
   function of_module$0(sexp_of_model, component, equal, default_model, input){
    function _C_(state){
     function _K_(input_and_state){
      function _M_(param){
       var pattern_syntax_027 = param[2][2];
       return pattern_syntax_027;
      }
      var inject = caml_call2(Ui_incr[78][4][6], input_and_state, _M_);
      function _N_(param){
       var pattern_syntax_028 = param[1];
       return pattern_syntax_028;
      }
      var input = caml_call2(Ui_incr[78][4][6], input_and_state, _N_);
      function _O_(param){
       var pattern_syntax_029 = param[2][1];
       return pattern_syntax_029;
      }
      var model = caml_call2(Ui_incr[78][4][6], input_and_state, _O_);
      return caml_call3(component[7], input, model, inject);
     }
     var _L_ = caml_call2(Bonsai_Cont[17], input, state);
     return caml_call2(Bonsai_Proc_layer2[49][2], _L_, _K_);
    }
    function _D_(ctx, input, model, action){
     if(input){
      var
       input$0 = input[1],
       _F_ = caml_call1(Bonsai_Proc_layer2[17][2], ctx),
       _G_ = caml_call1(Bonsai_Proc_layer2[17][1], ctx);
      return caml_call5(component[6], input$0, _G_, _F_, model, action);
     }
     var
      _H_ = [0, [1, [0, _s_, [0, caml_call1(component[4][1], action), 0]]], 0],
      _I_ =
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_An_action_sent_to_an_of_mo),
         _H_],
      _J_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_src_legacy_api_ml_181_16),
          _I_]];
     caml_call2(Core[257], 0, _J_);
     return model;
    }
    var
     _E_ =
       caml_call7
        (Bonsai_Proc_layer2[19],
         [0, component[4][1]],
         0,
         sexp_of_model,
         [0, equal],
         default_model,
         _D_,
         input);
    return caml_call3(Bonsai_Proc_layer2[50][5][1], _t_, _E_, _C_);
   }
   function pure$0(f){
    var _A_ = Bonsai_Proc_layer2[49][2];
    return function(_B_){return caml_call2(_A_, _B_, f);};
   }
   function map$0(a, f){
    var _y_ = pure$0(f);
    return function(_z_){return compose(a, _y_, _z_);};
   }
   function value_cutoff(cutoff){
    return map$0
            (input,
             function(input){
              function _w_(_x_){return _x_;}
              var input$0 = caml_call2(Ui_incr[12], input, _w_);
              caml_call2(Ui_incr[61], input$0, cutoff);
              return input$0;
             });
   }
   function symbol_map(a, f){return function(_v_){return map(a, f, _v_);};}
   function symbol$2(f, a){
    return function(_u_){return map_input(a, f, _u_);};
   }
   var
    Infix = [0, compose, symbol_map, symbol$2],
    symbol$3 = Infix[1],
    symbol_map$0 = Infix[2],
    symbol$4 = Infix[3];
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Legacy_api);
   var
    Bonsai_Legacy_api =
      [0,
       const$0,
       input,
       pure,
       compose,
       map,
       map_input,
       of_module,
       both,
       state_machine,
       enum$0,
       if$0,
       Map,
       arr,
       symbol,
       symbol$0,
       first,
       second,
       symbol$1,
       extend_first,
       extend_second,
       fanout,
       symbol$1,
       fanout,
       partial_compose_first,
       pipe,
       [0, of_incr, of_module$0, map$0, pure$0, value_cutoff],
       Infix,
       [0,
        const$0,
        symbol$3,
        symbol_map$0,
        symbol$4,
        [0, const$0, map, both, Infix]]];
   runtime.caml_register_global
    (44, Bonsai_Legacy_api, cst_Bonsai_Legacy_api$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Import_stable
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Bonsai_Import_stable = [0];
   runtime.caml_register_global
    (0, Bonsai_Import_stable, "Bonsai__Import_stable");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Eval_sub
//# unitInfo: Requires: Balanced_reducer, Base__Option, Bonsai__Action, Bonsai__Environment, Bonsai__Import, Bonsai__Input, Bonsai__Lifecycle, Bonsai__May_contain, Bonsai__Meta, Bonsai__Path, Bonsai__Snapshot, Bonsai__Trampoline, Core__List, Core__Option, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Reversed_list, Ui_incr
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_Eval_sub$0 = "Bonsai__Eval_sub",
    cst_bonsai$0 = "bonsai";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Reversed_list = global_data.Reversed_list,
    Bonsai_Trampoline = global_data.Bonsai__Trampoline,
    Balanced_reducer = global_data.Balanced_reducer,
    Core_List = global_data.Core__List,
    Base_Option = global_data.Base__Option,
    Bonsai_Meta = global_data.Bonsai__Meta,
    Bonsai_Action = global_data.Bonsai__Action,
    Bonsai_Snapshot = global_data.Bonsai__Snapshot,
    Bonsai_Lifecycle = global_data.Bonsai__Lifecycle,
    Core_Option = global_data.Core__Option,
    Bonsai_Environment = global_data.Bonsai__Environment,
    Bonsai_Path = global_data.Bonsai__Path,
    Bonsai_Import = global_data.Bonsai__Import,
    Bonsai_May_contain = global_data.Bonsai__May_contain,
    Bonsai_Input = global_data.Bonsai__Input,
    Ui_incr = global_data.Ui_incr,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Eval_sub$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/eval_sub.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai$0, "eval_sub.ml");
   var cst_bonsai = cst_bonsai$0, cst_Bonsai_Eval_sub = cst_Bonsai_Eval_sub$0;
   function with_threaded_environment(param){
    var
     match = param[1],
     may_contain_lifecycle = match[8],
     may_contain_path = match[7],
     reset = match[6],
     run = match[5],
     apply_action = match[4],
     action = match[3],
     input = match[2],
     model = match[1];
    function run$0(environment, path, clock, model, inject){
     function _at_(param){
      var snapshot = param[1];
      return caml_call1(Bonsai_Trampoline[3], [0, snapshot, 0]);
     }
     var _au_ = caml_call5(run, environment, path, clock, model, inject);
     return caml_call2(Bonsai_Trampoline[5][2][2], _au_, _at_);
    }
    return [0,
            [0,
             model,
             input,
             action,
             apply_action,
             run$0,
             reset,
             may_contain_path,
             may_contain_lifecycle]];
   }
   function symbol(f, inject, b){return caml_call1(inject, caml_call1(f, b));}
   function wrap_sub_from(inject){
    var _ar_ = Bonsai_Action[4];
    return function(_as_){return symbol(_ar_, inject, _as_);};
   }
   function wrap_sub_into(inject){
    var _ap_ = Bonsai_Action[5];
    return function(_aq_){return symbol(_ap_, inject, _aq_);};
   }
   function both_use_path(a, b){if(! a && ! b) return 1; return 0;}
   function pick(thread_env, environment, maybe_env){
    if(! thread_env) return environment;
    if(! maybe_env) return environment;
    var env = maybe_env[1];
    return env;
   }
   function capture(thread_env, environment, maybe_env){
    if(! thread_env) return 0;
    if(! maybe_env) return [0, environment];
    var env = maybe_env[1];
    return [0, env];
   }
   function gather(here, info_from, info_into, via, thread_environment){
    function is_unit(x){
     return caml_call2(Bonsai_Meta[1][1][2], Bonsai_Meta[1][3][3], x);
    }
    var
     from_model = is_unit(info_from[1][3]),
     from_action =
       caml_call2(Bonsai_Action[1][10], info_from[3], Bonsai_Action[1][1]);
    function _t_(a){
     function _ao_(b){return [0, [0, a, b]];}
     return caml_call2(Base_Option[29][4][2], from_action, _ao_);
    }
    var
     can_run_from_stateless =
       caml_call2(Base_Option[29][4][2], from_model, _t_);
    if(can_run_from_stateless){
     var
      both_use_path$1 = both_use_path(info_from[7], info_into[7]),
      run$0 =
        function(environment, path, clock, model, inject){
         function _af_(param){
          var maybe_env = param[2], from = param[1];
          caml_call2(Bonsai_Snapshot[6], here, from);
          var
           from_result = caml_call1(Bonsai_Snapshot[2], from),
           environment$0 = pick(thread_environment, environment, maybe_env),
           environment$1 =
             caml_call3
              (Bonsai_Environment[2], environment$0, via, from_result);
          function _ah_(param){
           var
            maybe_env = param[2],
            into = param[1],
            result = caml_call1(Bonsai_Snapshot[2], into),
            _aj_ = Bonsai_Lifecycle[1][4],
            _ak_ = caml_call1(Bonsai_Snapshot[3], into),
            _al_ = caml_call1(Bonsai_Snapshot[3], from),
            lifecycle = caml_call3(Core_Option[54], _al_, _ak_, _aj_),
            input = caml_call1(Bonsai_Snapshot[1], into),
            _am_ = capture(thread_environment, environment$1, maybe_env),
            _an_ =
              [0,
               caml_call3(Bonsai_Snapshot[5], input, lifecycle, result),
               _am_];
           return caml_call1(Bonsai_Trampoline[3], _an_);
          }
          var
           path$0 =
             both_use_path$1 ? caml_call2(Bonsai_Path[26], path, 1) : path,
           _ai_ =
             caml_call5
              (info_into[5], environment$1, path$0, clock, model, inject);
          return caml_call2(Bonsai_Trampoline[5][2][2], _ai_, _ah_);
         }
         var
          path$0 =
            both_use_path$1 ? caml_call2(Bonsai_Path[26], path, 0) : path,
          _ag_ =
            caml_call5
             (info_from[5],
              environment,
              path$0,
              clock,
              Bonsai_Import[12],
              Bonsai_Import[9]);
         return caml_call2(Bonsai_Trampoline[5][2][2], _ag_, _af_);
        },
      _p_ = caml_call2(Bonsai_May_contain[1][1], info_from[8], info_into[8]),
      _q_ = caml_call2(Bonsai_May_contain[2][1], info_from[7], info_into[7]);
     return [0,
             [0,
              info_into[1],
              info_into[2],
              info_into[3],
              info_into[4],
              run$0,
              info_into[6],
              _q_,
              _p_]];
    }
    var
     into_model = is_unit(info_into[1][3]),
     into_action =
       caml_call2(Bonsai_Action[1][10], info_into[3], Bonsai_Action[1][1]);
    function _u_(a){
     function _ae_(b){return [0, [0, a, b]];}
     return caml_call2(Base_Option[29][4][2], into_action, _ae_);
    }
    var
     can_run_into_stateless =
       caml_call2(Base_Option[29][4][2], into_model, _u_);
    if(can_run_into_stateless){
     var
      both_use_path$2 = both_use_path(info_from[7], info_into[7]),
      run$1 =
        function(environment, path, clock, model, inject){
         function _X_(param){
          var maybe_env = param[2], from = param[1];
          caml_call2(Bonsai_Snapshot[6], here, from);
          var
           from_result = caml_call1(Bonsai_Snapshot[2], from),
           environment$0 = pick(thread_environment, environment, maybe_env),
           environment$1 =
             caml_call3
              (Bonsai_Environment[2], environment$0, via, from_result);
          function _Z_(param){
           var
            maybe_env = param[2],
            into = param[1],
            result = caml_call1(Bonsai_Snapshot[2], into),
            _$_ = Bonsai_Lifecycle[1][4],
            _aa_ = caml_call1(Bonsai_Snapshot[3], into),
            _ab_ = caml_call1(Bonsai_Snapshot[3], from),
            lifecycle = caml_call3(Core_Option[54], _ab_, _aa_, _$_),
            input = caml_call1(Bonsai_Snapshot[1], from),
            _ac_ = capture(thread_environment, environment$1, maybe_env),
            _ad_ =
              [0,
               caml_call3(Bonsai_Snapshot[5], input, lifecycle, result),
               _ac_];
           return caml_call1(Bonsai_Trampoline[3], _ad_);
          }
          var
           path$0 =
             both_use_path$2 ? caml_call2(Bonsai_Path[26], path, 1) : path,
           ___ =
             caml_call5
              (info_into[5],
               environment$1,
               path$0,
               clock,
               Bonsai_Import[12],
               Bonsai_Import[9]);
          return caml_call2(Bonsai_Trampoline[5][2][2], ___, _Z_);
         }
         var
          path$0 =
            both_use_path$2 ? caml_call2(Bonsai_Path[26], path, 0) : path,
          _Y_ =
            caml_call5
             (info_from[5], environment, path$0, clock, model, inject);
         return caml_call2(Bonsai_Trampoline[5][2][2], _Y_, _X_);
        },
      _r_ = caml_call2(Bonsai_May_contain[1][1], info_from[8], info_into[8]),
      _s_ = caml_call2(Bonsai_May_contain[2][1], info_from[7], info_into[7]);
     return [0,
             [0,
              info_from[1],
              info_from[2],
              info_from[3],
              info_from[4],
              run$1,
              info_from[6],
              _s_,
              _r_]];
    }
    function reset(inject, schedule_event, param){
     var
      model_into = param[2],
      model_from = param[1],
      _V_ = wrap_sub_from(inject),
      model_from$0 = caml_call3(info_from[6], _V_, schedule_event, model_from),
      _W_ = wrap_sub_into(inject),
      model_into$0 = caml_call3(info_into[6], _W_, schedule_event, model_into);
     return [0, model_from$0, model_into$0];
    }
    function apply_action(inject, schedule_event, input, param, _M_){
     var model_into = param[2], model_from = param[1];
     if(typeof _M_ !== "number" && 3 === _M_[0]){
      var
       action$0 = _M_[1],
       _Q_ = function(_U_){return _U_[2];},
       _R_ = caml_call2(Core_Option[34], input, _Q_),
       _S_ = wrap_sub_into(inject),
       model_into$0 =
         caml_call5
          (info_into[4], _S_, schedule_event, _R_, model_into, action$0);
      return [0, model_from, model_into$0];
     }
     var action = _M_[1];
     function _N_(_T_){return _T_[1];}
     var
      _O_ = caml_call2(Core_Option[34], input, _N_),
      _P_ = wrap_sub_from(inject),
      model_from$0 =
        caml_call5(info_from[4], _P_, schedule_event, _O_, model_from, action);
     return [0, model_from$0, model_into];
    }
    var both_use_path$0 = both_use_path(info_from[7], info_into[7]);
    function run(environment, path, clock, model, inject){
     caml_call2(Bonsai_Import[5], 5, model);
     function _v_(param){
      var maybe_env = param[2], from = param[1];
      caml_call2(Bonsai_Snapshot[6], here, from);
      var
       from_result = caml_call1(Bonsai_Snapshot[2], from),
       environment$0 = pick(thread_environment, environment, maybe_env),
       environment$1 =
         caml_call3(Bonsai_Environment[2], environment$0, via, from_result);
      function _A_(param){
       var
        maybe_env = param[2],
        into = param[1],
        result = caml_call1(Bonsai_Snapshot[2], into),
        _F_ = Bonsai_Lifecycle[1][4],
        _G_ = caml_call1(Bonsai_Snapshot[3], into),
        _H_ = caml_call1(Bonsai_Snapshot[3], from),
        lifecycle = caml_call3(Core_Option[54], _H_, _G_, _F_),
        _I_ = caml_call1(Bonsai_Snapshot[1], into),
        _J_ = caml_call1(Bonsai_Snapshot[1], from),
        input = caml_call2(Bonsai_Input[4], _J_, _I_),
        _K_ = capture(thread_environment, environment$1, maybe_env),
        _L_ =
          [0, caml_call3(Bonsai_Snapshot[5], input, lifecycle, result), _K_];
       return caml_call1(Bonsai_Trampoline[3], _L_);
      }
      function _B_(_E_){return _E_[2];}
      var
       model$0 = caml_call2(Ui_incr[12], model, _B_),
       path$0 = both_use_path$0 ? caml_call2(Bonsai_Path[26], path, 1) : path,
       _C_ = wrap_sub_into(inject),
       _D_ =
         caml_call5(info_into[5], environment$1, path$0, clock, model$0, _C_);
      return caml_call2(Bonsai_Trampoline[5][2][2], _D_, _A_);
     }
     function _w_(_z_){return _z_[1];}
     var
      model$0 = caml_call2(Ui_incr[12], model, _w_),
      path$0 = both_use_path$0 ? caml_call2(Bonsai_Path[26], path, 0) : path,
      _x_ = wrap_sub_from(inject),
      _y_ = caml_call5(info_from[5], environment, path$0, clock, model$0, _x_);
     return caml_call2(Bonsai_Trampoline[5][2][2], _y_, _v_);
    }
    var
     model = caml_call2(Bonsai_Meta[1][4], info_from[1], info_into[1]),
     input = caml_call2(Bonsai_Meta[3][5], info_from[2], info_into[2]),
     _n_ = caml_call2(Bonsai_May_contain[1][1], info_from[8], info_into[8]),
     _o_ = caml_call2(Bonsai_May_contain[2][1], info_from[7], info_into[7]);
    return [0,
            [0,
             model,
             input,
             caml_call2(Bonsai_Action[1][3], info_from[3], info_into[3]),
             apply_action,
             run,
             reset,
             _o_,
             _n_]];
   }
   function build_chain(computation, acc, length_of_acc, recurse){
    if(typeof computation !== "number" && 4 === computation[0]){
     var
      here = computation[4],
      into = computation[3],
      via = computation[2],
      from = computation[1],
      _k_ =
        function(from){
         var bound = with_threaded_environment(from);
         return build_chain
                 (into,
                  [0, [0, bound, via, here], acc],
                  length_of_acc + 1 | 0,
                  recurse);
        },
      _l_ = caml_call1(recurse[1], from);
     return caml_call2(Bonsai_Trampoline[5][2][2], _l_, _k_);
    }
    function _i_(final$0){
     var _m_ = [0, caml_call1(Reversed_list[3], acc), length_of_acc, final$0];
     return caml_call1(Bonsai_Trampoline[3], _m_);
    }
    var _j_ = caml_call1(recurse[1], computation);
    return caml_call2(Bonsai_Trampoline[5][2][2], _j_, _i_);
   }
   function reduce(param, _h_){
    var
     here_right = _h_[3],
     via_right = _h_[2],
     bound_right = _h_[1][1],
     here_left = param[3],
     via_left = param[2],
     bound_left = param[1][1],
     bound = gather(here_left, bound_left, bound_right, via_left, 1);
    return [0, bound, via_right, here_right];
   }
   function gather$0(here, info_from, info_into, via){
    return gather(here, info_from, info_into, via, 0);
   }
   function chain(computation, recurse){
    function _a_(t){
     var init = t[1];
     if(init){
      var
       final$0 = t[3],
       length_of_init = t[2],
       reducer = caml_call4(Balanced_reducer[3], 0, 0, length_of_init, reduce),
       _c_ =
         function(i, link){
          return caml_call3(Balanced_reducer[4], reducer, i, link);
         };
      caml_call2(Core_List[34], init, _c_);
      var
       _d_ = caml_call1(Balanced_reducer[6], reducer),
       here = _d_[3],
       via = _d_[2],
       info_from = _d_[1][1],
       info_into = with_threaded_environment(final$0)[1],
       match = gather(here, info_from, info_into, via, 1)[1],
       may_contain_lifecycle = match[8],
       may_contain_path = match[7],
       reset = match[6],
       run = match[5],
       apply_action = match[4],
       action = match[3],
       input = match[2],
       model = match[1],
       run$0 =
         function(environment, path, clock, model, inject){
          function _f_(param){
           var snapshot = param[1];
           return caml_call1(Bonsai_Trampoline[3], [0, snapshot, 0]);
          }
          var _g_ = caml_call5(run, environment, path, clock, model, inject);
          return caml_call2(Bonsai_Trampoline[5][2][2], _g_, _f_);
         },
       _e_ =
         [0,
          [0,
           model,
           input,
           action,
           apply_action,
           run$0,
           reset,
           may_contain_path,
           may_contain_lifecycle]];
     }
     else
      var final$1 = t[3], _e_ = final$1;
     return caml_call1(Bonsai_Trampoline[3], _e_);
    }
    var _b_ = build_chain(computation, 0, 0, recurse);
    return caml_call2(Bonsai_Trampoline[5][2][2], _b_, _a_);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Eval_sub);
   var Bonsai_Eval_sub = [0, gather$0, chain];
   runtime.caml_register_global(27, Bonsai_Eval_sub, cst_Bonsai_Eval_sub$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Eval
//# unitInfo: Requires: Base__Option, Bonsai__Action, Bonsai__Environment, Bonsai__Eval_sub, Bonsai__Import, Bonsai__Input, Bonsai__Lifecycle, Bonsai__May_contain, Bonsai__Meta, Bonsai__Path, Bonsai__Snapshot, Bonsai__Trampoline, Bonsai__Value, Core, Core__Lazy, Core__Map, Core__Option, Core__Sexp, Core__Tuple, Core__Type_equal, Incr_map, Incremental, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Ui_incr
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_Eval$0 = "Bonsai__Eval",
    cst_bonsai$0 = "bonsai",
    cst_src_eval_ml = "src/eval.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Bonsai_Path = global_data.Bonsai__Path,
    Assert_failure = global_data.Assert_failure,
    Ui_incr = global_data.Ui_incr,
    Bonsai_Value = global_data.Bonsai__Value,
    Bonsai_Input = global_data.Bonsai__Input,
    Bonsai_Snapshot = global_data.Bonsai__Snapshot,
    Bonsai_Trampoline = global_data.Bonsai__Trampoline,
    Bonsai_Action = global_data.Bonsai__Action,
    Bonsai_Environment = global_data.Bonsai__Environment,
    Bonsai_Import = global_data.Bonsai__Import,
    Base_Option = global_data.Base__Option,
    Bonsai_Meta = global_data.Bonsai__Meta,
    Core_Option = global_data.Core__Option,
    Core = global_data.Core,
    Core_Type_equal = global_data.Core__Type_equal,
    Core_Map = global_data.Core__Map,
    Core_Sexp = global_data.Core__Sexp,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Incremental = global_data.Incremental,
    Core_Tuple = global_data.Core__Tuple,
    Bonsai_May_contain = global_data.Bonsai__May_contain,
    Incr_map = global_data.Incr_map,
    Bonsai_Eval_sub = global_data.Bonsai__Eval_sub,
    Core_Lazy = global_data.Core__Lazy,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Bonsai_Lifecycle = global_data.Bonsai__Lifecycle;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Eval$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_eval_ml);
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai$0, "eval.ml");
   var
    _d_ = [0, cst_src_eval_ml, 1029, 8],
    _e_ = [0, cst_src_eval_ml, 1029, 8],
    _b_ = [0, "action"],
    _c_ = [0, "index"],
    cst_an_action_inside_of_Bonsai =
      "an action inside of Bonsai.switch has been dropped because the computation is no longer active",
    cst_BUG_state_machine0_s_apply =
      "BUG: state_machine0's apply_action was called with a dynamic action",
    cst_BUG_state_machine1_s_apply =
      "BUG: state_machine1's apply_action was called with a dynamic action",
    cst_bonsai = cst_bonsai$0,
    cst_Bonsai_Eval = cst_Bonsai_Eval$0;
   function symbol(f, inject, b){return caml_call1(inject, caml_call1(f, b));}
   caml_call2(Ui_incr[4][7], Ui_incr[4][3], 1024);
   function unzip3_mapi(map, may_contain_lifecycle, comparator, f){
    if(may_contain_lifecycle){
     var
      _cy_ =
        function(key, data){
         var match = caml_call2(f, key, data), b = match[2], a = match[1];
         return [0, a, b];
        },
      match = caml_call5(Incr_map[32], 0, 0, 0, map, _cy_),
      second = match[2],
      first = match[1],
      _cz_ = caml_call1(Core_Map[4], comparator);
     return [0, first, second, caml_call1(Ui_incr[11], _cz_)];
    }
    function _cA_(key, data){
     var
      match = caml_call2(f, key, data),
      c = match[3],
      b = match[2],
      a = match[1],
      bc = caml_call2(Ui_incr[42], b, c);
     caml_call2(Bonsai_Import[5], 13, bc);
     return [0, a, bc];
    }
    var
     match$0 = caml_call5(Incr_map[32], 0, 0, 0, map, _cA_),
     second_and_third = match$0[2],
     first$0 = match$0[1],
     match$1 = caml_call4(Incr_map[30], 0, 0, 0, second_and_third),
     third = match$1[2],
     second$0 = match$1[1];
    return [0, first$0, second$0, third];
   }
   var do_nothing_lifecycle = caml_call1(Ui_incr[11], Bonsai_Lifecycle[1][2]);
   function _a_(t){
    if(typeof t === "number"){
     var
      run =
        function(param, path, _cw_, _cv_, _cu_){
         var result = caml_call1(Ui_incr[11], path);
         caml_call2(Bonsai_Import[5], 12, result);
         var
          _cx_ =
            [0, caml_call3(Bonsai_Snapshot[5], Bonsai_Input[2], 0, result), 0];
         return caml_call1(Bonsai_Trampoline[3], _cx_);
        };
     return caml_call1
             (Bonsai_Trampoline[3],
              [0,
               [0,
                Bonsai_Meta[1][3],
                Bonsai_Meta[3][4],
                Bonsai_Action[1][1],
                Bonsai_Import[10],
                run,
                Bonsai_Import[11],
                0,
                1]]);
    }
    switch(t[0]){
      case 0:
       var
        value = t[1],
        run$0 =
          function(environment, param, _cs_, _cr_, _cq_){
           var
            result = caml_call2(Bonsai_Value[23], environment, value),
            _ct_ =
              [0,
               caml_call3(Bonsai_Snapshot[5], Bonsai_Input[2], 0, result),
               0];
           return caml_call1(Bonsai_Trampoline[3], _ct_);
          };
       return caml_call1
               (Bonsai_Trampoline[3],
                [0,
                 [0,
                  Bonsai_Meta[1][3],
                  Bonsai_Meta[3][4],
                  Bonsai_Action[1][1],
                  Bonsai_Import[10],
                  run$0,
                  Bonsai_Import[11],
                  1,
                  1]]);
      case 1:
       var
        input = t[6],
        reset = t[5],
        apply_action = t[4],
        dynamic_action = t[3],
        input_id = t[2],
        model = t[1],
        wrap_leaf =
          function(inject){
           var _co_ = Bonsai_Action[3];
           return function(_cp_){return symbol(_co_, inject, _cp_);};
          },
        run$1 =
          function(environment, param, _ck_, model, inject){
           caml_call2(Bonsai_Import[5], 5, model);
           var
            input$0 = caml_call2(Bonsai_Value[23], environment, input),
            inject_dynamic = wrap_leaf(inject);
           function _cl_(model){return [0, model, inject_dynamic];}
           var
            result = caml_call2(Ui_incr[78][4][6], model, _cl_),
            _cm_ = caml_call1(Bonsai_Input[1], input$0),
            _cn_ = [0, caml_call3(Bonsai_Snapshot[5], _cm_, 0, result), 0];
           return caml_call1(Bonsai_Trampoline[3], _cn_);
          },
        apply_action$0 =
          function(inject, schedule_event, input, model, param){
           if(typeof param !== "number" && 1 === param[0]){
            var action = param[1];
            return caml_call5
                    (apply_action,
                     wrap_leaf(inject),
                     schedule_event,
                     input,
                     model,
                     action);
           }
           var
            _cj_ =
              caml_call1
               (Sexplib0_Sexp_conv[7], cst_BUG_state_machine1_s_apply);
           caml_call2(Core[257], 0, _cj_);
           return model;
          },
        reset$0 =
          function(inject, schedule_event, model){
           return caml_call3(reset, wrap_leaf(inject), schedule_event, model);
          },
        _g_ =
          [0,
           [0,
            model,
            input_id,
            caml_call1(Bonsai_Action[1][2], dynamic_action),
            apply_action$0,
            run$1,
            reset$0,
            1,
            1]];
       return caml_call1(Bonsai_Trampoline[3], _g_);
      case 2:
       var
        reset$1 = t[4],
        apply_action$1 = t[3],
        static_action = t[2],
        model$0 = t[1],
        wrap_leaf$0 =
          function(inject){
           var _ch_ = Bonsai_Action[2];
           return function(_ci_){return symbol(_ch_, inject, _ci_);};
          },
        run$2 =
          function(param, _ce_, _cd_, model, inject){
           caml_call2(Bonsai_Import[5], 5, model);
           var inject_static = wrap_leaf$0(inject);
           function _cf_(model){return [0, model, inject_static];}
           var
            result = caml_call2(Ui_incr[78][4][6], model, _cf_),
            _cg_ =
              [0,
               caml_call3(Bonsai_Snapshot[5], Bonsai_Input[2], 0, result),
               0];
           return caml_call1(Bonsai_Trampoline[3], _cg_);
          },
        apply_action$2 =
          function(inject, schedule_event, input, model, param){
           if(typeof param !== "number" && 1 === param[0]){
            var
             _cc_ =
               caml_call1
                (Sexplib0_Sexp_conv[7], cst_BUG_state_machine0_s_apply);
            caml_call2(Core[257], 0, _cc_);
            return model;
           }
           var action = param[1];
           return caml_call4
                   (apply_action$1,
                    wrap_leaf$0(inject),
                    schedule_event,
                    model,
                    action);
          },
        reset$2 =
          function(inject, schedule_event, model){
           return caml_call3
                   (reset$1, wrap_leaf$0(inject), schedule_event, model);
          },
        _h_ = caml_call1(Bonsai_Action[1][2], static_action);
       return caml_call1
               (Bonsai_Trampoline[3],
                [0,
                 [0,
                  model$0,
                  Bonsai_Meta[3][4],
                  _h_,
                  apply_action$2,
                  run$2,
                  reset$2,
                  1,
                  1]]);
      case 3:
       var
        compute = t[2],
        input$0 = t[1],
        run$3 =
          function(environment, param, clock, _ca_, _b$_){
           var
            input = caml_call2(Bonsai_Value[23], environment, input$0),
            result = caml_call2(compute, clock, input),
            _cb_ =
              [0,
               caml_call3(Bonsai_Snapshot[5], Bonsai_Input[2], 0, result),
               0];
           return caml_call1(Bonsai_Trampoline[3], _cb_);
          };
       return caml_call1
               (Bonsai_Trampoline[3],
                [0,
                 [0,
                  Bonsai_Meta[1][3],
                  Bonsai_Meta[3][4],
                  Bonsai_Action[1][1],
                  Bonsai_Import[10],
                  run$3,
                  Bonsai_Import[11],
                  1,
                  1]]);
      case 4:
       var from = t[1], _i_ = t[3];
       a:
       if(typeof _i_ !== "number" && 4 === _i_[0]){
        var _l_ = _i_[3];
        if(typeof _l_ !== "number" && 4 === _l_[0])
         return caml_call2(Bonsai_Eval_sub[2], t, [0, _a_]);
        break a;
       }
       var
        here = t[4],
        into = t[3],
        via = t[2],
        _j_ =
          function(param){
           var info_from = param[1];
           function _b8_(param){
            var
             info_into = param[1],
             _b__ =
               caml_call4(Bonsai_Eval_sub[1], here, info_from, info_into, via);
            return caml_call1(Bonsai_Trampoline[3], _b__);
           }
           var _b9_ = _a_(into);
           return caml_call2(Bonsai_Trampoline[5][2][2], _b9_, _b8_);
          },
        _k_ = _a_(from);
       return caml_call2(Bonsai_Trampoline[5][2][2], _k_, _j_);
      case 5:
       var
        inner = t[3],
        value$0 = t[2],
        id = t[1],
        _m_ =
          function(param){
           var gathered = param[1];
           function run(environment, path, clock, model, inject){
            var
             value = caml_call2(Bonsai_Value[23], environment, value$0),
             environment$0 =
               caml_call3(Bonsai_Environment[3], environment, id, value);
            return caml_call5
                    (gathered[5], environment$0, path, clock, model, inject);
           }
           return caml_call1
                   (Bonsai_Trampoline[3],
                    [0,
                     [0,
                      gathered[1],
                      gathered[2],
                      gathered[3],
                      gathered[4],
                      run,
                      gathered[6],
                      gathered[7],
                      gathered[8]]]);
          },
        _n_ = _a_(inner);
       return caml_call2(Bonsai_Trampoline[5][2][2], _n_, _m_);
      case 6:
       var
        for_some = t[3],
        default$0 = t[2],
        id$0 = t[1],
        run$4 =
          function(environment, param, _b5_, _b4_, _b3_){
           var match = caml_call2(Bonsai_Environment[4], environment, id$0);
           if(match)
            var
             x = match[1],
             _b6_ = function(a){return caml_call1(for_some, a);},
             result = caml_call2(Ui_incr[12], x, _b6_);
           else
            var result = caml_call1(Ui_incr[11], default$0);
           var
            _b7_ =
              [0,
               caml_call3(Bonsai_Snapshot[5], Bonsai_Input[2], 0, result),
               0];
           return caml_call1(Bonsai_Trampoline[3], _b7_);
          };
       return caml_call1
               (Bonsai_Trampoline[3],
                [0,
                 [0,
                  Bonsai_Meta[1][3],
                  Bonsai_Meta[3][4],
                  Bonsai_Action[1][1],
                  Bonsai_Import[10],
                  run$4,
                  Bonsai_Import[11],
                  1,
                  1]]);
      case 7:
       var
        by = t[6],
        data_id = t[5],
        cmp_id = t[4],
        key_id = t[3],
        key_comparator = t[2],
        map = t[1],
        wrap_assoc =
          function(key, inject){
           var
            _b1_ =
              caml_call3(Bonsai_Action[12], key, key_id, key_comparator[2][1]);
           return function(_b2_){return symbol(_b1_, inject, _b2_);};
          },
        _o_ =
          function(param){
           var
            match = param[1],
            may_contain_lifecycle = match[8],
            may_contain_path = match[7],
            reset = match[6],
            run = match[5],
            apply_action = match[4],
            action = match[3],
            input_info = match[2],
            model_info = match[1];
           function run$0(environment, path, clock, model, inject){
            var map_input = caml_call2(Bonsai_Value[23], environment, map);
            function _bI_(param, _bZ_){
             var _b0_ = _bZ_[1];
             if(737457313 === _b0_){
              var input_and_models = _bZ_[2];
              return [0, input_and_models];
             }
             if(847852583 > _b0_) return 0;
             var input = _bZ_[2];
             return [0, [0, input, model_info[1]]];
            }
            var
             input_and_models_map =
               caml_call6(Incr_map[26], 0, 0, 0, map_input, model, _bI_),
             _bJ_ =
               caml_call2(Bonsai_Path[1][1], key_comparator[2][1], key_id),
             create_keyed = caml_call1(Core[267], _bJ_);
            function _bK_(key, input_and_model){
             caml_call2(Bonsai_Import[5], 6, input_and_model);
             if(may_contain_path)
              var path$0 = path;
             else
              var
               _bY_ = [0, caml_call1(create_keyed, key)],
               path$0 = caml_call2(Bonsai_Path[26], path, _bY_);
             function _bR_(param){
              var pattern_syntax_007 = param[2];
              return pattern_syntax_007;
             }
             var model = caml_call2(Ui_incr[78][4][6], input_and_model, _bR_);
             function _bS_(param){
              var pattern_syntax_008 = param[1];
              return pattern_syntax_008;
             }
             var
              value = caml_call2(Ui_incr[78][4][6], input_and_model, _bS_),
              key_incr = caml_call1(Ui_incr[10], key);
             caml_call2(Bonsai_Import[5], 7, key_incr);
             caml_call2(Bonsai_Import[5], 8, value);
             var
              _bT_ =
                caml_call3
                 (Bonsai_Environment[2], environment, key_id, key_incr),
              environment$0 =
                caml_call3(Bonsai_Environment[2], _bT_, data_id, value),
              _bU_ =
                caml_call5
                 (run,
                  environment$0,
                  path$0,
                  clock,
                  model,
                  wrap_assoc(key, inject)),
              snapshot = caml_call1(Bonsai_Trampoline[2], _bU_)[1],
              _bV_ = caml_call1(Bonsai_Snapshot[4], snapshot),
              _bW_ = caml_call1(Bonsai_Snapshot[1], snapshot),
              _bX_ = caml_call1(Bonsai_Input[3], _bW_);
             return [0, caml_call1(Bonsai_Snapshot[2], snapshot), _bX_, _bV_];
            }
            var
             match =
               unzip3_mapi
                (input_and_models_map,
                 may_contain_lifecycle,
                 [0, key_comparator[2]],
                 _bK_),
             lifecycle_map = match[3],
             input_map = match[2],
             results_map = match[1];
            caml_call2(Bonsai_Import[5], 9, results_map);
            caml_call2(Bonsai_Import[5], 10, lifecycle_map);
            caml_call2(Bonsai_Import[5], 11, input_map);
            if(may_contain_lifecycle)
             var lifecycle = 0;
            else{
             var
              _bN_ =
                function(param, key, _bQ_, acc){
                 return caml_call2(Core_Map[47], acc, key);
                },
              _bO_ =
                function(param, key, data, acc){
                 function _bP_(param){
                  return param ? caml_call1(Bonsai_Path[28], key) : data;
                 }
                 return caml_call3(Core_Map[43], acc, key, _bP_);
                },
              unfolded =
                caml_call8
                 (Incr_map[43],
                  0,
                  0,
                  0,
                  0,
                  lifecycle_map,
                  Bonsai_Path[23][5],
                  _bO_,
                  _bN_);
             caml_call2(Bonsai_Import[5], 10, unfolded);
             var lifecycle = [0, unfolded];
            }
            var
             _bL_ = caml_call1(Bonsai_Input[1], input_map),
             _bM_ =
               [0,
                caml_call3(Bonsai_Snapshot[5], _bL_, lifecycle, results_map),
                0];
            return caml_call1(Bonsai_Trampoline[3], _bM_);
           }
           function apply_action$0
           (inject, schedule_event, input, model, param){
            var action = param[2], key = param[1];
            function _bF_(input){return caml_call2(Core_Map[44], input, key);}
            var
             input$0 = caml_call2(Core_Option[32], input, _bF_),
             _bG_ = model_info[1],
             _bH_ = caml_call2(Core_Map[44], model, key),
             specific_model = caml_call2(Core_Option[39], _bH_, _bG_),
             data =
               caml_call5
                (apply_action,
                 wrap_assoc(key, inject),
                 schedule_event,
                 input$0,
                 specific_model,
                 action);
            return caml_call2(model_info[2], data, model_info[1])
                    ? caml_call2(Core_Map[47], model, key)
                    : caml_call3(Core_Map[38], model, key, data);
           }
           function reset$0(inject, schedule_event, model){
            function _bE_(key, data){
             var
              new_model =
                caml_call3
                 (reset, wrap_assoc(key, inject), schedule_event, data);
             return caml_call2(model_info[2], new_model, model_info[1])
                     ? 0
                     : [0, new_model];
            }
            return caml_call2(Core_Map[69], model, _bE_);
           }
           var
            _bB_ = caml_call2(Bonsai_Action[1][8], key_id, action),
            _bC_ = caml_call3(Bonsai_Meta[3][6], key_id, cmp_id, input_info),
            _bD_ =
              [0,
               [0,
                caml_call4
                 (Bonsai_Meta[1][5],
                  key_comparator,
                  key_id,
                  cmp_id,
                  model_info),
                _bC_,
                _bB_,
                apply_action$0,
                run$0,
                reset$0,
                may_contain_path,
                may_contain_lifecycle]];
           return caml_call1(Bonsai_Trampoline[3], _bD_);
          },
        _p_ = _a_(by);
       return caml_call2(Bonsai_Trampoline[5][2][2], _p_, _o_);
      case 8:
       var
        get_model_key = t[10],
        by$0 = t[9],
        data_id$0 = t[8],
        model_cmp_id = t[7],
        model_key_id = t[6],
        io_cmp_id = t[5],
        io_key_id = t[4],
        model_comparator = t[3],
        io_comparator = t[2],
        map$0 = t[1],
        wrap_assoc_on =
          function(io_key, model_key, inject){
           var
            _bz_ =
              caml_call4
               (Bonsai_Action[13],
                io_key,
                io_key_id,
                io_comparator[2][1],
                model_key);
           return function(_bA_){return symbol(_bz_, inject, _bA_);};
          },
        model_key_comparator = model_comparator[2],
        _q_ =
          function(param){
           var
            match = param[1],
            may_contain_lifecycle = match[8],
            may_contain_path = match[7],
            reset = match[6],
            run = match[5],
            apply_action = match[4],
            action = match[3],
            input_info = match[2],
            model_info = match[1];
           function run$0(environment, path, clock, model, inject){
            var
             map_input = caml_call2(Bonsai_Value[23], environment, map$0),
             model_lookup =
               caml_call4(Incr_map[56][1], 0, 0, model, model_key_comparator),
             _be_ =
               caml_call2(Bonsai_Path[1][1], io_comparator[2][1], io_key_id),
             create_keyed = caml_call1(Core[267], _be_);
            function _bf_(io_key, value){
             if(may_contain_path)
              var path$0 = path;
             else
              var
               _bt_ = [0, caml_call1(create_keyed, io_key)],
               path$0 = caml_call2(Bonsai_Path[26], path, _bt_);
             var key_incr = caml_call1(Ui_incr[10], io_key);
             caml_call2(Bonsai_Import[5], 7, key_incr);
             caml_call2(Bonsai_Import[5], 8, value);
             var
              _bm_ =
                caml_call3
                 (Bonsai_Environment[2], environment, io_key_id, key_incr),
              environment$0 =
                caml_call3(Bonsai_Environment[2], _bm_, data_id$0, value);
             function _bn_(value){
              return caml_call2(get_model_key, io_key, value);
             }
             var
              model_key = caml_call2(Ui_incr[78][4][6], value, _bn_),
              _bo_ = caml_call1(Ui_incr[60][4], model_key_comparator[1]);
             caml_call2(Ui_incr[61], model_key, _bo_);
             function _bp_(model_key){
              function _bu_(param){
               if(! param) return model_info[1];
               var model = param[1][2];
               return model;
              }
              var
               _bv_ = caml_call2(Incr_map[56][2], model_lookup, model_key),
               model = caml_call2(Ui_incr[78][4][6], _bv_, _bu_);
              caml_call2(Bonsai_Import[5], 5, model);
              var
               _bw_ =
                 caml_call5
                  (run,
                   environment$0,
                   path$0,
                   clock,
                   model,
                   wrap_assoc_on(io_key, model_key, inject)),
               snapshot = caml_call1(Bonsai_Trampoline[2], _bw_)[1],
               let_syntax_016 = caml_call1(Bonsai_Snapshot[2], snapshot),
               _bx_ = caml_call1(Bonsai_Snapshot[1], snapshot),
               let_syntax_017 = caml_call1(Bonsai_Input[3], _bx_),
               let_syntax_018 = caml_call1(Bonsai_Snapshot[4], snapshot);
              function _by_(result, input, lifecycle){return [0, result, input, lifecycle];
              }
              return caml_call4
                      (Ui_incr[78][4][8],
                       let_syntax_016,
                       let_syntax_017,
                       let_syntax_018,
                       _by_);
             }
             var
              pattern_syntax_010 =
                caml_call2(Ui_incr[78][4][1], model_key, _bp_);
             function _bq_(param){
              var pattern_syntax_011 = param[2];
              return pattern_syntax_011;
             }
             var
              input_map =
                caml_call2(Ui_incr[78][4][6], pattern_syntax_010, _bq_);
             function _br_(param){
              var pattern_syntax_012 = param[3];
              return pattern_syntax_012;
             }
             var
              lifecycle_map =
                caml_call2(Ui_incr[78][4][6], pattern_syntax_010, _br_);
             function _bs_(param){
              var pattern_syntax_013 = param[1];
              return pattern_syntax_013;
             }
             var
              results_map =
                caml_call2(Ui_incr[78][4][6], pattern_syntax_010, _bs_);
             return [0, results_map, input_map, lifecycle_map];
            }
            var
             match =
               unzip3_mapi
                (map_input,
                 may_contain_lifecycle,
                 [0, io_comparator[2]],
                 _bf_),
             lifecycle_map = match[3],
             input_map = match[2],
             results_map = match[1];
            caml_call2(Bonsai_Import[5], 9, results_map);
            caml_call2(Bonsai_Import[5], 10, lifecycle_map);
            if(may_contain_lifecycle)
             var lifecycle = 0;
            else{
             var
              _bi_ =
                function(param, key, _bl_, acc){
                 return caml_call2(Core_Map[47], acc, key);
                },
              _bj_ =
                function(param, key, data, acc){
                 function _bk_(param){
                  return param ? caml_call1(Bonsai_Path[28], key) : data;
                 }
                 return caml_call3(Core_Map[43], acc, key, _bk_);
                },
              unfolded =
                caml_call8
                 (Incr_map[43],
                  0,
                  0,
                  0,
                  0,
                  lifecycle_map,
                  Bonsai_Path[23][5],
                  _bj_,
                  _bi_);
             caml_call2(Bonsai_Import[5], 10, unfolded);
             var lifecycle = [0, unfolded];
            }
            var
             _bg_ = caml_call1(Bonsai_Input[1], input_map),
             _bh_ =
               [0,
                caml_call3(Bonsai_Snapshot[5], _bg_, lifecycle, results_map),
                0];
            return caml_call1(Bonsai_Trampoline[3], _bh_);
           }
           function apply_action$0
           (inject, schedule_event, input, model, param){
            var action = param[3], model_key = param[2], io_key = param[1];
            function _bd_(input){
             return caml_call2(Core_Map[44], input, io_key);
            }
            var
             input$0 = caml_call2(Core_Option[32], input, _bd_),
             match = caml_call2(Core_Map[44], model, model_key);
            if(match)
             var model$0 = match[1][2], specific_model = model$0;
            else
             var specific_model = model_info[1];
            var
             new_model =
               caml_call5
                (apply_action,
                 wrap_assoc_on(io_key, model_key, inject),
                 schedule_event,
                 input$0,
                 specific_model,
                 action);
            return caml_call2(model_info[2], new_model, model_info[1])
                    ? caml_call2(Core_Map[47], model, model_key)
                    : caml_call3
                      (Core_Map[38], model, model_key, [0, io_key, new_model]);
           }
           function reset$0(inject, schedule_event, model){
            function _bc_(model_key, param){
             var
              model = param[2],
              io_key = param[1],
              new_model =
                caml_call3
                 (reset,
                  wrap_assoc_on(io_key, model_key, inject),
                  schedule_event,
                  model);
             return caml_call2(model_info[2], new_model, model_info[1])
                     ? 0
                     : [0, [0, io_key, new_model]];
            }
            return caml_call2(Core_Map[69], model, _bc_);
           }
           var
            _a$_ =
              caml_call3(Bonsai_Action[1][9], io_key_id, model_key_id, action),
            _ba_ =
              caml_call3(Bonsai_Meta[3][6], io_key_id, io_cmp_id, input_info),
            _bb_ =
              [0,
               [0,
                caml_call6
                 (Bonsai_Meta[1][6],
                  model_comparator,
                  io_comparator,
                  model_key_id,
                  io_key_id,
                  model_cmp_id,
                  model_info),
                _ba_,
                _a$_,
                apply_action$0,
                run$0,
                reset$0,
                may_contain_path,
                may_contain_lifecycle]];
           return caml_call1(Bonsai_Trampoline[3], _bb_);
          },
        _r_ = _a_(by$0);
       return caml_call2(Bonsai_Trampoline[5][2][2], _r_, _q_);
      case 9:
       var
        may_contain_path = t[3],
        by$1 = t[2],
        map$1 = t[1],
        run$5 =
          function(environment, path, param, _a8_, _a7_){
           var map_input = caml_call2(Bonsai_Value[23], environment, map$1);
           function _a9_(key, data){return caml_call3(by$1, path, key, data);}
           var
            result = caml_call4(Incr_map[3], 0, 0, map_input, _a9_),
            _a__ =
              [0,
               caml_call3(Bonsai_Snapshot[5], Bonsai_Input[2], 0, result),
               0];
           return caml_call1(Bonsai_Trampoline[3], _a__);
          };
       return caml_call1
               (Bonsai_Trampoline[3],
                [0,
                 [0,
                  Bonsai_Meta[1][3],
                  Bonsai_Meta[3][4],
                  Bonsai_Action[1][1],
                  Bonsai_Import[10],
                  run$5,
                  Bonsai_Import[11],
                  may_contain_path,
                  1]]);
      case 10:
       var
        arms = t[2],
        match = t[1],
        wrap_switch =
          function(branch, type_id, inject){
           var _a5_ = caml_call2(Bonsai_Action[10], branch, type_id);
           return function(_a6_){return symbol(_a5_, inject, _a6_);};
          },
        _s_ =
          function(gathered){
           function _aH_(param, _a4_, acc){
            var gathered = _a4_[1];
            return caml_call2(Bonsai_May_contain[1][1], acc, gathered[8]);
           }
           var
            may_contain_lifecycle =
              caml_call3(Core_Map[61], gathered, 1, _aH_);
           function _aI_(param){return param[1][7] ? 0 : 1;}
           var
            num_contain_path = caml_call2(Core_Map[99], gathered, _aI_),
            may_contain_path =
              caml_call2(Core[91], num_contain_path, 0) ? 0 : 1,
            needs_disambiguation = caml_call2(Core[91], num_contain_path, 1);
           function run(environment, path, clock, model, inject){
            caml_call2(Bonsai_Import[5], 5, model);
            var index = caml_call2(Bonsai_Value[23], environment, match);
            function _aR_(index){
             var
              path$0 =
                needs_disambiguation
                 ? caml_call2(Bonsai_Path[26], path, [1, index])
                 : path,
              match = caml_call2(Core_Map[45], gathered, index)[1],
              run = match[5],
              action_info = match[3],
              input_info = match[2],
              model_info = match[1];
             function _aX_(map){
              var
               match = caml_call2(Bonsai_Meta[2][2], map, index),
               info = match[2],
               model = match[1],
               equal =
                 caml_call2(Bonsai_Meta[1][1][3], info[3], model_info[3]);
              return caml_call2(Core_Type_equal[5], equal, model);
             }
             var
              chosen_model = caml_call2(Incremental[10], model, _aX_),
              _aY_ =
                caml_call5
                 (run,
                  environment,
                  path$0,
                  clock,
                  chosen_model,
                  wrap_switch(index, action_info, inject)),
              snapshot = caml_call1(Bonsai_Trampoline[2], _aY_)[1];
             function _aZ_(input){return [0, input, input_info, index];}
             var
              _a0_ = caml_call1(Bonsai_Snapshot[1], snapshot),
              _a1_ = caml_call1(Bonsai_Input[3], _a0_),
              input = caml_call2(Ui_incr[78][4][6], _a1_, _aZ_),
              _a2_ = caml_call1(Bonsai_Snapshot[4], snapshot),
              _a3_ =
                [0, caml_call1(Bonsai_Snapshot[2], snapshot), input, _a2_];
             return caml_call1(Ui_incr[11], _a3_);
            }
            var
             result_input_and_lifecycle =
               caml_call2(Ui_incr[78][4][1], index, _aR_);
            function _aS_(_aW_){return _aW_[1];}
            var
             result =
               caml_call2(Ui_incr[28], result_input_and_lifecycle, _aS_);
            function _aT_(_aV_){return _aV_[2];}
            var
             input = caml_call2(Ui_incr[28], result_input_and_lifecycle, _aT_),
             lifecycle =
               caml_call2
                (Ui_incr[28], result_input_and_lifecycle, Core_Tuple[2][10]),
             input$0 = caml_call1(Bonsai_Input[1], input),
             lifecycle$0 = may_contain_lifecycle ? 0 : [0, lifecycle],
             _aU_ =
               [0,
                caml_call3(Bonsai_Snapshot[5], input$0, lifecycle$0, result),
                0];
            return caml_call1(Bonsai_Trampoline[3], _aU_);
           }
           function apply_action(inject, schedule_event, input, model, param){
            var
             action_type_id = param[3],
             action = param[2],
             index = param[1],
             match = caml_call2(Core_Map[45], gathered, index)[1],
             apply_action = match[4],
             am = match[3],
             im = match[2],
             tm = match[1],
             match$0 = caml_call2(Bonsai_Meta[2][2], model, index),
             chosen_model_info = match$0[2],
             chosen_model = match$0[1],
             match$1 = caml_call2(Bonsai_Action[1][10], action_type_id, am),
             match$2 =
               caml_call2(Bonsai_Meta[1][1][2], chosen_model_info[3], tm[3]);
            if(match$1 && match$2){
             if(input){
              var
               match$3 = input[1],
               index$0 = match$3[3],
               chosen_input_info = match$3[2],
               chosen_input = match$3[1],
               match$4 = caml_call2(Core[90], index, index$0);
              a:
              {
               var
                match$5 = caml_call2(Bonsai_Meta[3][2], chosen_input_info, im);
               if(match$4 && match$5){
                var
                 _aN_ =
                   caml_call5
                    (apply_action,
                     wrap_switch(index, am, inject),
                     schedule_event,
                     [0, chosen_input],
                     chosen_model,
                     action);
                break a;
               }
               var
                _aN_ =
                  caml_call5
                   (apply_action,
                    wrap_switch(index, am, inject),
                    schedule_event,
                    0,
                    chosen_model,
                    action);
              }
              var new_model = _aN_;
             }
             else
              var
               new_model =
                 caml_call5
                  (apply_action,
                   wrap_switch(index, am, inject),
                   schedule_event,
                   0,
                   chosen_model,
                   action);
             var
              new_model$0 = caml_call2(Bonsai_Meta[1][2][3], tm, new_model);
             return caml_call3(Bonsai_Meta[2][3], model, index, new_model$0);
            }
            var
             action$0 =
               caml_call2(Bonsai_Action[1][13], action_type_id, action),
             _aO_ =
               [0,
                [1, [0, _b_, [0, caml_call1(Core_Sexp[93], action$0), 0]]],
                0],
             _aP_ =
               [0, [1, [0, _c_, [0, caml_call1(Core[389], index), 0]]], _aO_],
             _aQ_ =
               [1,
                [0,
                 caml_call1
                  (Sexplib0_Sexp_conv[7], cst_an_action_inside_of_Bonsai),
                 _aP_]];
            caml_call2(Core[257], 0, _aQ_);
            return model;
           }
           function reset(inject, schedule_event, model){
            function f(index, model){
             var
              chosen_model_info = model[2],
              chosen_model = model[1],
              match = caml_call2(Core_Map[45], gathered, index)[1],
              reset = match[6],
              am = match[3],
              tm = match[1];
             caml_call2(Bonsai_Meta[1][1][3], tm[3], chosen_model_info[3]);
             var
              new_model =
                caml_call3
                 (reset,
                  wrap_switch(index, am, inject),
                  schedule_event,
                  chosen_model);
             return caml_call2(Bonsai_Meta[1][2][3], tm, new_model);
            }
            var
             _aL_ = caml_call1(Bonsai_Meta[2][4], model),
             _aM_ = caml_call2(Core_Map[58], _aL_, f);
            return caml_call1(Bonsai_Meta[2][5], _aM_);
           }
           function _aJ_(param){
            var model = param[1][1];
            return caml_call2(Bonsai_Meta[1][2][3], model, model[1]);
           }
           var
            models = caml_call2(Core_Map[57], gathered, _aJ_),
            _aK_ = caml_call1(Bonsai_Meta[2][5], models),
            model = caml_call1(Bonsai_Meta[2][6], _aK_);
           return caml_call1
                   (Bonsai_Trampoline[3],
                    [0,
                     [0,
                      model,
                      Bonsai_Meta[3][8][2],
                      Bonsai_Action[1][6],
                      apply_action,
                      run,
                      reset,
                      may_contain_path,
                      may_contain_lifecycle]]);
          },
        _t_ = caml_call2(Core_Map[57], arms, _a_),
        _u_ = caml_call1(Bonsai_Trampoline[4], _t_);
       return caml_call2(Bonsai_Trampoline[5][2][2], _u_, _s_);
      case 11:
       var
        lazy_computation = t[1],
        wrap_lazy =
          function(type_id, inject){
           var _aF_ = caml_call1(Bonsai_Action[11], type_id);
           return function(_aG_){return symbol(_aF_, inject, _aG_);};
          },
        model$1 = Bonsai_Meta[1][2][4],
        _v_ =
          function(c){
           var _aE_ = _a_(c);
           return caml_call1(Bonsai_Trampoline[2], _aE_);
          },
        gathered = caml_call2(Core_Lazy[30], lazy_computation, _v_),
        run$6 =
          function(environment, path, clock, model, inject){
           var
            match = caml_call1(Core[248], gathered)[1],
            run = match[5],
            action_info = match[3],
            input_info = match[2],
            model_info = match[1];
           caml_call2(Bonsai_Import[5], 5, model);
           function _av_(model){
            var
             _aD_ =
               caml_call2(Bonsai_Meta[1][2][3], model_info, model_info[1]),
             match = caml_call2(Core_Option[39], model, _aD_),
             info = match[2],
             model$0 = match[1],
             witness =
               caml_call2(Bonsai_Meta[1][1][3], info[3], model_info[3]);
            return caml_call2(Core_Type_equal[5], witness, model$0);
           }
           var input_model = caml_call2(Ui_incr[78][4][6], model, _av_);
           function _aw_(param){
            var snapshot = param[1];
            function _ay_(input){return [0, input, input_info, 0];}
            var
             _az_ = caml_call1(Bonsai_Snapshot[1], snapshot),
             input = caml_call2(Bonsai_Input[5], _az_, _ay_),
             _aA_ = caml_call1(Bonsai_Snapshot[2], snapshot),
             _aB_ = caml_call1(Bonsai_Snapshot[3], snapshot),
             _aC_ = [0, caml_call3(Bonsai_Snapshot[5], input, _aB_, _aA_), 0];
            return caml_call1(Bonsai_Trampoline[3], _aC_);
           }
           var
            _ax_ =
              caml_call5
               (run,
                environment,
                path,
                clock,
                input_model,
                wrap_lazy(action_info, inject));
           return caml_call2(Bonsai_Trampoline[5][2][2], _ax_, _aw_);
          },
        apply_action$3 =
          function(inject, schedule_event, input, model, param){
           var
            action_type_id = param[2],
            action = param[1],
            match = caml_call1(Core[248], gathered)[1],
            apply_action = match[4],
            action_info = match[3],
            input_info = match[2],
            model_info = match[1],
            _au_ = caml_call2(Bonsai_Meta[1][2][3], model_info, model_info[1]),
            match$0 = caml_call2(Core_Option[39], model, _au_),
            chosen_model_info = match$0[2],
            chosen_model = match$0[1];
           caml_call2(Bonsai_Action[1][11], action_type_id, action_info);
           caml_call2
            (Bonsai_Meta[1][1][3], chosen_model_info[3], model_info[3]);
           if(input){
            var
             match$1 = input[1],
             input_type_id = match$1[2],
             input$0 = match$1[1];
            caml_call2(Bonsai_Meta[3][3], input_type_id, input_info);
            var
             new_model =
               caml_call5
                (apply_action,
                 wrap_lazy(action_info, inject),
                 schedule_event,
                 [0, input$0],
                 chosen_model,
                 action);
           }
           else
            var
             new_model =
               caml_call5
                (apply_action,
                 wrap_lazy(action_info, inject),
                 schedule_event,
                 0,
                 chosen_model,
                 action);
           return [0, caml_call2(Bonsai_Meta[1][2][3], model_info, new_model)];
          },
        reset$3 =
          function(inject, schedule_event, model){
           if(! model) return 0;
           var
            model$0 = model[1],
            match = caml_call1(Core[248], gathered)[1],
            reset = match[6],
            action_info = match[3],
            model_info = match[1],
            chosen_model_info = model$0[2],
            chosen_model = model$0[1];
           caml_call2
            (Bonsai_Meta[1][1][3], chosen_model_info[3], model_info[3]);
           var
            new_model =
              caml_call3
               (reset,
                wrap_lazy(action_info, inject),
                schedule_event,
                chosen_model);
           return [0, caml_call2(Bonsai_Meta[1][2][3], model_info, new_model)];
          };
       return caml_call1
               (Bonsai_Trampoline[3],
                [0,
                 [0,
                  model$1,
                  Bonsai_Meta[3][8][1],
                  Bonsai_Action[1][7],
                  apply_action$3,
                  run$6,
                  reset$3,
                  0,
                  0]]);
      case 12:
       var
        reset_me = t[8],
        dynamic_apply_action = t[7],
        inner$0 = t[6],
        model_id = t[5],
        inject_id = t[4],
        action_id = t[3],
        result_id = t[2],
        wrapper_model = t[1],
        _w_ =
          function(param){
           var
            match = param[1],
            may_contain_lifecycle = match[8],
            may_contain_path = match[7],
            reset = match[6],
            run = match[5],
            apply_action = match[4],
            inner_action = match[3],
            inner_input = match[2],
            inner_model = match[1];
           function wrap_inner(inject){
            var _as_ = Bonsai_Action[6];
            return function(_at_){return symbol(_as_, inject, _at_);};
           }
           function wrap_outer(inject){
            var _aq_ = Bonsai_Action[7];
            return function(_ar_){return symbol(_aq_, inject, _ar_);};
           }
           function run$0(environment, path, clock, model, inject){
            caml_call2(Bonsai_Import[5], 5, model);
            function _ae_(param){
             var pattern_syntax_028 = param[2];
             return pattern_syntax_028;
            }
            var inner_model = caml_call2(Ui_incr[78][4][6], model, _ae_);
            function _af_(param){
             var pattern_syntax_029 = param[1];
             return pattern_syntax_029;
            }
            var outer_model = caml_call2(Ui_incr[78][4][6], model, _af_);
            caml_call2(Bonsai_Import[5], 5, outer_model);
            function _ag_(param){
             var
              inner_snapshot = param[1],
              inner_result = caml_call1(Bonsai_Snapshot[2], inner_snapshot),
              _al_ = caml_call1(Bonsai_Snapshot[2], inner_snapshot),
              _am_ = caml_call1(Bonsai_Input[1], _al_),
              _an_ = caml_call1(Bonsai_Snapshot[1], inner_snapshot),
              input = caml_call2(Bonsai_Input[4], _an_, _am_),
              _ao_ = caml_call1(Bonsai_Snapshot[3], inner_snapshot),
              _ap_ =
                [0,
                 caml_call3(Bonsai_Snapshot[5], input, _ao_, inner_result),
                 0];
             return caml_call1(Bonsai_Trampoline[3], _ap_);
            }
            var
             _ah_ = wrap_outer(inject),
             _ai_ = caml_call1(Ui_incr[11], _ah_),
             _aj_ =
               caml_call3
                (Bonsai_Environment[2], environment, model_id, outer_model),
             environment$0 =
               caml_call3(Bonsai_Environment[2], _aj_, inject_id, _ai_),
             _ak_ =
               caml_call5
                (run,
                 environment$0,
                 path,
                 clock,
                 inner_model,
                 wrap_inner(inject));
            return caml_call2(Bonsai_Trampoline[5][2][2], _ak_, _ag_);
           }
           var
            model = caml_call2(Bonsai_Meta[1][4], wrapper_model, inner_model);
           function apply_action$0
           (inject, schedule_event, input, param, action){
            var inner_model = param[2], outer_model = param[1];
            if(typeof action !== "number" && 5 === action[0]){
             var
              action_outer = action[1],
              _aa_ = function(_ad_){return _ad_[2];},
              _ab_ = caml_call2(Core_Option[34], input, _aa_),
              new_outer_model =
                caml_call5
                 (dynamic_apply_action,
                  wrap_outer(inject),
                  schedule_event,
                  _ab_,
                  outer_model,
                  action_outer);
             return [0, new_outer_model, inner_model];
            }
            var action_inner = action[1];
            function ___(_ac_){return _ac_[1];}
            var
             _$_ = caml_call2(Core_Option[34], input, ___),
             new_inner_model =
               caml_call5
                (apply_action,
                 wrap_inner(inject),
                 schedule_event,
                 _$_,
                 inner_model,
                 action_inner);
            return [0, outer_model, new_inner_model];
           }
           function reset$0(inject, schedule_event, param){
            var
             inner_model = param[2],
             outer_model = param[1],
             outer_model$0 =
               caml_call3
                (reset_me, wrap_outer(inject), schedule_event, outer_model),
             inner_model$0 =
               caml_call3
                (reset, wrap_inner(inject), schedule_event, inner_model);
            return [0, outer_model$0, inner_model$0];
           }
           var
            _Y_ = caml_call2(Bonsai_Action[1][4], inner_action, action_id),
            _Z_ =
              [0,
               [0,
                model,
                caml_call2(Bonsai_Meta[3][5], inner_input, result_id),
                _Y_,
                apply_action$0,
                run$0,
                reset$0,
                may_contain_path,
                may_contain_lifecycle]];
           return caml_call1(Bonsai_Trampoline[3], _Z_);
          },
        _x_ = _a_(inner$0);
       return caml_call2(Bonsai_Trampoline[5][2][2], _x_, _w_);
      case 13:
       var
        inner$1 = t[2],
        reset_id = t[1],
        _y_ =
          function(param){
           var
            gathered_inner = param[1],
            may_contain_lifecycle = gathered_inner[8],
            may_contain_path = gathered_inner[7],
            reset = gathered_inner[6],
            run = gathered_inner[5],
            apply_action = gathered_inner[4],
            action = gathered_inner[3],
            input = gathered_inner[2],
            model = gathered_inner[1],
            same_model = Bonsai_Meta[1][1][2],
            same_action = Bonsai_Action[1][10];
           function _J_(a){
            function _W_(b){return [0, [0, a, b]];}
            var _X_ = caml_call2(same_action, action, Bonsai_Action[1][1]);
            return caml_call2(Base_Option[29][4][2], _X_, _W_);
           }
           var
            _K_ = caml_call2(same_model, model[3], Bonsai_Meta[1][3][3]),
            inner_stateless = caml_call2(Base_Option[29][4][2], _K_, _J_);
           if(inner_stateless){
            var
             run$0 =
               function(env, path, clock, param, _V_){
                var
                 environment =
                   caml_call3
                    (Bonsai_Environment[2], env, reset_id, Bonsai_Import[13]);
                return caml_call5
                        (run,
                         environment,
                         path,
                         clock,
                         Bonsai_Import[12],
                         Bonsai_Import[9]);
               };
            return caml_call1
                    (Bonsai_Trampoline[3],
                     [0,
                      [0,
                       gathered_inner[1],
                       gathered_inner[2],
                       gathered_inner[3],
                       gathered_inner[4],
                       run$0,
                       gathered_inner[6],
                       gathered_inner[7],
                       gathered_inner[8]]]);
           }
           function wrap_inner(inject){
            var _T_ = Bonsai_Action[8];
            return function(_U_){return symbol(_T_, inject, _U_);};
           }
           function run$1(environment, path, clock, model, inject){
            var
             _M_ = caml_call1(inject, Bonsai_Action[9]),
             _N_ = caml_call1(Ui_incr[11], _M_),
             environment$0 =
               caml_call3(Bonsai_Environment[2], environment, reset_id, _N_);
            function _O_(param){
             var
              snapshot = param[1],
              result = caml_call1(Bonsai_Snapshot[2], snapshot),
              _Q_ = caml_call1(Bonsai_Snapshot[3], snapshot),
              _R_ = caml_call1(Bonsai_Snapshot[1], snapshot),
              _S_ = [0, caml_call3(Bonsai_Snapshot[5], _R_, _Q_, result), 0];
             return caml_call1(Bonsai_Trampoline[3], _S_);
            }
            var
             _P_ =
               caml_call5
                (run, environment$0, path, clock, model, wrap_inner(inject));
            return caml_call2(Bonsai_Trampoline[5][2][2], _P_, _O_);
           }
           function apply_action$0(inject, schedule_event, i, m, param){
            if(typeof param === "number")
             return caml_call3(reset, wrap_inner(inject), schedule_event, m);
            var inner = param[1];
            return caml_call5
                    (apply_action,
                     wrap_inner(inject),
                     schedule_event,
                     i,
                     m,
                     inner);
           }
           function reset$0(inject, schedule_event, m){
            return caml_call3(reset, wrap_inner(inject), schedule_event, m);
           }
           var
            _L_ =
              [0,
               [0,
                model,
                input,
                caml_call1(Bonsai_Action[1][5], action),
                apply_action$0,
                run$1,
                reset$0,
                may_contain_path,
                may_contain_lifecycle]];
           return caml_call1(Bonsai_Trampoline[3], _L_);
          },
        _z_ = _a_(inner$1);
       return caml_call2(Bonsai_Trampoline[5][2][2], _z_, _y_);
      default:
       var
        lifecycle = t[1],
        run$7 =
          function(environment, path, param, _B_, _A_){
           var
            pattern_syntax_035 =
              caml_call2(Bonsai_Value[23], environment, lifecycle);
           function _C_(param){
            if(0 === param){
             var
              _H_ =
                function(param){
                 if(! param)
                  throw caml_maybe_attach_backtrace
                         ([0, Assert_failure, _d_], 1);
                 var pattern_syntax_036 = param[1];
                 return pattern_syntax_036;
                },
              lifecycle =
                caml_call2(Ui_incr[78][4][6], pattern_syntax_035, _H_),
              _I_ =
                function(lifecycle){
                 return caml_call2(Bonsai_Path[23][6], path, lifecycle);
                };
             return caml_call2(Ui_incr[78][4][6], lifecycle, _I_);
            }
            if(1 === param) return do_nothing_lifecycle;
            throw caml_maybe_attach_backtrace([0, Assert_failure, _e_], 1);
           }
           function _D_(param){return param ? 0 : 1;}
           var
            _E_ = caml_call2(Ui_incr[78][4][6], pattern_syntax_035, _D_),
            lifecycle$0 = caml_call2(Ui_incr[78][4][1], _E_, _C_),
            _F_ = caml_call1(Ui_incr[11], 0),
            _G_ =
              [0,
               caml_call3
                (Bonsai_Snapshot[5], Bonsai_Input[2], [0, lifecycle$0], _F_),
               0];
           return caml_call1(Bonsai_Trampoline[3], _G_);
          };
       return caml_call1
               (Bonsai_Trampoline[3],
                [0,
                 [0,
                  Bonsai_Meta[1][3],
                  Bonsai_Meta[3][4],
                  Bonsai_Action[1][1],
                  Bonsai_Import[10],
                  run$7,
                  Bonsai_Import[11],
                  0,
                  0]]);
    }
   }
   function gather(c){
    var _f_ = _a_(c);
    return caml_call1(Bonsai_Trampoline[2], _f_);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Eval);
   var Bonsai_Eval = [0, gather];
   runtime.caml_register_global(43, Bonsai_Eval, cst_Bonsai_Eval$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai
//# unitInfo: Requires: Bonsai__Cont, Bonsai__Eval, Bonsai__Legacy_api, Bonsai__Pre_process, Bonsai__Proc_layer2, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai = "Bonsai",
    cst_bonsai = "bonsai";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Bonsai_Proc_layer2 = global_data.Bonsai__Proc_layer2,
    Bonsai_Eval = global_data.Bonsai__Eval,
    Bonsai_Pre_process = global_data.Bonsai__Pre_process,
    Bonsai_Cont = global_data.Bonsai__Cont,
    Bonsai_Legacy_api = global_data.Bonsai__Legacy_api;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][1], "src/bonsai.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_bonsai, "bonsai.ml");
   var
    Private = [0],
    Stable = [0, Private],
    path = Bonsai_Proc_layer2[53],
    gather = Bonsai_Eval[1],
    pre_process = Bonsai_Pre_process[1],
    reveal_value = Bonsai_Cont[59][4],
    conceal_value = Bonsai_Cont[59][5],
    top_level_handle = Bonsai_Cont[59][2],
    handle = Bonsai_Cont[59][1],
    perform = Bonsai_Cont[59][3],
    set_perform_on_exception = Bonsai_Cont[62][5][1],
    Value = Bonsai_Proc_layer2[3],
    Computation = Bonsai_Proc_layer2[4],
    Var = Bonsai_Proc_layer2[6],
    read = Bonsai_Proc_layer2[7],
    const$0 = Bonsai_Proc_layer2[8],
    path_id = Bonsai_Proc_layer2[9],
    pure = Bonsai_Proc_layer2[10],
    Computation_status = Bonsai_Proc_layer2[11],
    state = Bonsai_Proc_layer2[12],
    state_opt = Bonsai_Proc_layer2[13],
    toggle = Bonsai_Proc_layer2[14],
    Toggle = Bonsai_Proc_layer2[15],
    toggle$0 = Bonsai_Proc_layer2[16],
    Apply_action_context = Bonsai_Proc_layer2[17],
    state_machine0 = Bonsai_Proc_layer2[18],
    state_machine1 = Bonsai_Proc_layer2[19],
    actor0 = Bonsai_Proc_layer2[20],
    actor1 = Bonsai_Proc_layer2[21],
    narrow = Bonsai_Proc_layer2[22],
    narrow_via_field = Bonsai_Proc_layer2[23],
    of_module0 = Bonsai_Proc_layer2[24],
    of_module1 = Bonsai_Proc_layer2[25],
    of_module2 = Bonsai_Proc_layer2[26],
    freeze = Bonsai_Proc_layer2[27],
    lazy = Bonsai_Proc_layer2[28],
    fix = Bonsai_Proc_layer2[29],
    fix2 = Bonsai_Proc_layer2[30],
    scope_model = Bonsai_Proc_layer2[31],
    most_recent_some = Bonsai_Proc_layer2[32],
    most_recent_value_satisfying = Bonsai_Proc_layer2[33],
    previous_value = Bonsai_Proc_layer2[34],
    assoc = Bonsai_Proc_layer2[35],
    assoc_set = Bonsai_Proc_layer2[36],
    assoc_list = Bonsai_Proc_layer2[37],
    enum$0 = Bonsai_Proc_layer2[38],
    wrap = Bonsai_Proc_layer2[39],
    with_model_resetter = Bonsai_Proc_layer2[40],
    with_model_resetter$0 = Bonsai_Proc_layer2[41],
    yoink = Bonsai_Proc_layer2[42],
    sub = Bonsai_Proc_layer2[43],
    Clock = Bonsai_Proc_layer2[44],
    Edge = Bonsai_Proc_layer2[45],
    Memo = Bonsai_Proc_layer2[46],
    Effect_throttling = Bonsai_Proc_layer2[47],
    Dynamic_scope = Bonsai_Proc_layer2[48],
    Incr = Bonsai_Proc_layer2[49],
    Let_syntax = Bonsai_Proc_layer2[50],
    Expert = Bonsai_Proc_layer2[51],
    Debug = Bonsai_Proc_layer2[52],
    path$0 = Bonsai_Proc_layer2[53],
    Map = Bonsai_Proc_layer2[54],
    For_open = [0],
    const$1 = Bonsai_Legacy_api[1],
    input = Bonsai_Legacy_api[2],
    pure$0 = Bonsai_Legacy_api[3],
    compose = Bonsai_Legacy_api[4],
    map = Bonsai_Legacy_api[5],
    map_input = Bonsai_Legacy_api[6],
    of_module = Bonsai_Legacy_api[7],
    both = Bonsai_Legacy_api[8],
    state_machine = Bonsai_Legacy_api[9],
    enum$1 = Bonsai_Legacy_api[10],
    if$0 = Bonsai_Legacy_api[11],
    Map$0 = Bonsai_Legacy_api[12],
    arr = Bonsai_Legacy_api[13],
    symbol = Bonsai_Legacy_api[14],
    symbol$0 = Bonsai_Legacy_api[15],
    first = Bonsai_Legacy_api[16],
    second = Bonsai_Legacy_api[17],
    split = Bonsai_Legacy_api[18],
    extend_first = Bonsai_Legacy_api[19],
    extend_second = Bonsai_Legacy_api[20],
    fanout = Bonsai_Legacy_api[21],
    symbol$1 = Bonsai_Legacy_api[22],
    symbol$2 = Bonsai_Legacy_api[23],
    partial_compose_first = Bonsai_Legacy_api[24],
    pipe = Bonsai_Legacy_api[25],
    With_incr = Bonsai_Legacy_api[26],
    Infix = Bonsai_Legacy_api[27],
    Let_syntax$0 = Bonsai_Legacy_api[28],
    Arrow_deprecated =
      [0,
       const$1,
       input,
       pure$0,
       compose,
       map,
       map_input,
       of_module,
       both,
       state_machine,
       enum$1,
       if$0,
       Map$0,
       arr,
       symbol,
       symbol$0,
       first,
       second,
       split,
       extend_first,
       extend_second,
       fanout,
       symbol$1,
       symbol$2,
       partial_compose_first,
       pipe,
       With_incr,
       Infix,
       Let_syntax$0];
   caml_call1(Ppx_inline_test_lib[7], cst_bonsai);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai);
   var
    Bonsai =
      [0,
       [0,
        Bonsai_Cont[1],
        Bonsai_Cont[2],
        Bonsai_Cont[3],
        Bonsai_Cont[4],
        Bonsai_Cont[5],
        Bonsai_Cont[6],
        Bonsai_Cont[7],
        Bonsai_Cont[8],
        Bonsai_Cont[9],
        Bonsai_Cont[10],
        Bonsai_Cont[11],
        Bonsai_Cont[12],
        Bonsai_Cont[13],
        Bonsai_Cont[14],
        Bonsai_Cont[15],
        Bonsai_Cont[16],
        Bonsai_Cont[17],
        Bonsai_Cont[18],
        Bonsai_Cont[19],
        Bonsai_Cont[20],
        Bonsai_Cont[21],
        Bonsai_Cont[22],
        Bonsai_Cont[23],
        Bonsai_Cont[24],
        Bonsai_Cont[25],
        Bonsai_Cont[26],
        Bonsai_Cont[27],
        Bonsai_Cont[28],
        Bonsai_Cont[29],
        Bonsai_Cont[30],
        Bonsai_Cont[31],
        Bonsai_Cont[32],
        Bonsai_Cont[33],
        Bonsai_Cont[34],
        Bonsai_Cont[35],
        Bonsai_Cont[36],
        Bonsai_Cont[37],
        Bonsai_Cont[38],
        Bonsai_Cont[39],
        Bonsai_Cont[40],
        Bonsai_Cont[41],
        Bonsai_Cont[42],
        Bonsai_Cont[43],
        Bonsai_Cont[44],
        Bonsai_Cont[45],
        Bonsai_Cont[46],
        Bonsai_Cont[47],
        Bonsai_Cont[48],
        Bonsai_Cont[49],
        Bonsai_Cont[50],
        Bonsai_Cont[51],
        Bonsai_Cont[52],
        Bonsai_Cont[53],
        Bonsai_Cont[54],
        Bonsai_Cont[55],
        Bonsai_Cont[56],
        Bonsai_Cont[57],
        Bonsai_Cont[58],
        Bonsai_Cont[60],
        Bonsai_Cont[61],
        Bonsai_Cont[62]],
       Value,
       Computation,
       For_open,
       Var,
       read,
       const$0,
       path_id,
       pure,
       Computation_status,
       state,
       state_opt,
       toggle,
       Toggle,
       toggle$0,
       Apply_action_context,
       state_machine0,
       state_machine1,
       actor0,
       actor1,
       narrow,
       narrow_via_field,
       of_module0,
       of_module1,
       of_module2,
       freeze,
       lazy,
       fix,
       fix2,
       scope_model,
       most_recent_some,
       most_recent_value_satisfying,
       previous_value,
       assoc,
       assoc_set,
       assoc_list,
       enum$0,
       wrap,
       with_model_resetter,
       with_model_resetter$0,
       yoink,
       sub,
       Clock,
       Edge,
       Memo,
       Effect_throttling,
       Dynamic_scope,
       Incr,
       Let_syntax,
       Expert,
       Debug,
       path$0,
       Map,
       [0,
        reveal_value,
        conceal_value,
        top_level_handle,
        handle,
        perform,
        path,
        gather,
        pre_process,
        set_perform_on_exception],
       Arrow_deprecated,
       Stable];
   runtime.caml_register_global(16, Bonsai, cst_Bonsai);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
