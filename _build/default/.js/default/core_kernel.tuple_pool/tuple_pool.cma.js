// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Tuple_pool__
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Tuple_pool = [0],
    Tuple_pool$0 = [0, Tuple_pool];
   runtime.caml_register_global(0, Tuple_pool$0, "Tuple_pool__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Tuple_pool__Import
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Tuple_pool_Import = "Tuple_pool__Import",
    cst_tuple_pool = "tuple_pool";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Tuple_pool_Import);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_tuple_pool);
   caml_call1(Ppx_expect_runtime[1][1], "tuple_pool/src/import.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_tuple_pool, "import.ml");
   caml_call1(Ppx_inline_test_lib[7], cst_tuple_pool);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Tuple_pool_Import);
   var Tuple_pool_Import = [0];
   runtime.caml_register_global(11, Tuple_pool_Import, cst_Tuple_pool_Import);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Tuple_pool__Tuple_type_intf
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Tuple_pool_Tuple_type_intf = "Tuple_pool__Tuple_type_intf",
    cst_tuple_pool = "tuple_pool";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Tuple_pool_Tuple_type_intf);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_tuple_pool);
   caml_call1(Ppx_expect_runtime[1][1], "tuple_pool/src/tuple_type_intf.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_tuple_pool, "tuple_type_intf.ml");
   caml_call1(Ppx_inline_test_lib[7], cst_tuple_pool);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Tuple_pool_Tuple_type_intf);
   var Tuple_pool_Tuple_type_intf = [0];
   runtime.caml_register_global
    (11, Tuple_pool_Tuple_type_intf, cst_Tuple_pool_Tuple_type_intf);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Tuple_pool__Tuple_type
//# unitInfo: Requires: Core, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Tuple_pool__Tuple_type_intf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Tuple_pool_Tuple_type$0 = "Tuple_pool__Tuple_type",
    cst_tuple_pool$0 = "tuple_pool";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    t1 = [0, 301584533, [0, 1]],
    t2 = [0, 301584533, [0, 2]],
    t3 = [0, 301584533, [0, 3]],
    t4 = [0, 301584533, [0, 4]],
    t5 = [0, 301584533, [0, 5]],
    t6 = [0, 301584533, [0, 6]],
    t7 = [0, 301584533, [0, 7]],
    t8 = [0, 301584533, [0, 8]],
    t9 = [0, 301584533, [0, 9]],
    t10 = [0, 301584533, [0, 10]],
    t11 = [0, 301584533, [0, 11]],
    t12 = [0, 301584533, [0, 12]],
    t13 = [0, 301584533, [0, 13]],
    t14 = [0, 301584533, [0, 14]],
    Core = global_data.Core,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Tuple_pool_Tuple_type$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_tuple_pool$0);
   caml_call1(Ppx_expect_runtime[1][1], "tuple_pool/src/tuple_type.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_tuple_pool$0, "tuple_type.ml");
   var
    _b_ = [0, "Slots"],
    _a_ = [0, "slots_per_tuple"],
    cst_tuple_pool = cst_tuple_pool$0,
    cst_Tuple_pool_Tuple_type = cst_Tuple_pool_Tuple_type$0;
   function sexp_of_t(param){
    var
     v_006 = param[2],
     slots_per_tuple_002 = v_006[1],
     arg_003 = caml_call1(Core[389], slots_per_tuple_002),
     bnds_001 = [0, [1, [0, _a_, [0, arg_003, 0]]], 0];
    return [1, [0, _b_, [0, [1, bnds_001], 0]]];
   }
   function sexp_of_t$0(of_tuple_007, of_variant_008){return sexp_of_t;}
   function slots_per_tuple(param){var n = param[2][1]; return n;}
   function sexp_of_t1(of_a0_009){return sexp_of_t;}
   function sexp_of_t2(of_a0_010, of_a1_011){return sexp_of_t;}
   function sexp_of_t3(of_a0_012, of_a1_013, of_a2_014){return sexp_of_t;}
   function sexp_of_t4(of_a0_015, of_a1_016, of_a2_017, of_a3_018){return sexp_of_t;
   }
   function sexp_of_t5(of_a0_019, of_a1_020, of_a2_021, of_a3_022, of_a4_023){return sexp_of_t;
   }
   function sexp_of_t6
   (of_a0_024, of_a1_025, of_a2_026, of_a3_027, of_a4_028, of_a5_029){return sexp_of_t;
   }
   function sexp_of_t7
   (of_a0_030,
    of_a1_031,
    of_a2_032,
    of_a3_033,
    of_a4_034,
    of_a5_035,
    of_a6_036){
    return sexp_of_t;
   }
   function sexp_of_t8
   (of_a0_037,
    of_a1_038,
    of_a2_039,
    of_a3_040,
    of_a4_041,
    of_a5_042,
    of_a6_043,
    of_a7_044){
    return sexp_of_t;
   }
   function sexp_of_t9
   (of_a0_045,
    of_a1_046,
    of_a2_047,
    of_a3_048,
    of_a4_049,
    of_a5_050,
    of_a6_051,
    of_a7_052,
    of_a8_053){
    return sexp_of_t;
   }
   function sexp_of_t10
   (of_a0_054,
    of_a1_055,
    of_a2_056,
    of_a3_057,
    of_a4_058,
    of_a5_059,
    of_a6_060,
    of_a7_061,
    of_a8_062,
    of_a9_063){
    return sexp_of_t;
   }
   function sexp_of_t11
   (of_a0_064,
    of_a1_065,
    of_a2_066,
    of_a3_067,
    of_a4_068,
    of_a5_069,
    of_a6_070,
    of_a7_071,
    of_a8_072,
    of_a9_073,
    of_a10_074){
    return sexp_of_t;
   }
   function sexp_of_t12
   (of_a0_075,
    of_a1_076,
    of_a2_077,
    of_a3_078,
    of_a4_079,
    of_a5_080,
    of_a6_081,
    of_a7_082,
    of_a8_083,
    of_a9_084,
    of_a10_085,
    of_a11_086){
    return sexp_of_t;
   }
   function sexp_of_t13
   (of_a0_087,
    of_a1_088,
    of_a2_089,
    of_a3_090,
    of_a4_091,
    of_a5_092,
    of_a6_093,
    of_a7_094,
    of_a8_095,
    of_a9_096,
    of_a10_097,
    of_a11_098,
    of_a12_099){
    return sexp_of_t;
   }
   function sexp_of_t14
   (of_a0_100,
    of_a1_101,
    of_a2_102,
    of_a3_103,
    of_a4_104,
    of_a5_105,
    of_a6_106,
    of_a7_107,
    of_a8_108,
    of_a9_109,
    of_a10_110,
    of_a11_111,
    of_a12_112,
    of_a13_113){
    return sexp_of_t;
   }
   caml_call1(Ppx_inline_test_lib[7], cst_tuple_pool);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Tuple_pool_Tuple_type);
   var
    Tuple_pool_Tuple_type =
      [0,
       [0,
        sexp_of_t$0,
        slots_per_tuple,
        sexp_of_t1,
        sexp_of_t2,
        sexp_of_t3,
        sexp_of_t4,
        sexp_of_t5,
        sexp_of_t6,
        sexp_of_t7,
        sexp_of_t8,
        sexp_of_t9,
        sexp_of_t10,
        sexp_of_t11,
        sexp_of_t12,
        sexp_of_t13,
        sexp_of_t14,
        t1,
        t2,
        t3,
        t4,
        t5,
        t6,
        t7,
        t8,
        t9,
        t10,
        t11,
        t12,
        t13,
        t14]];
   runtime.caml_register_global
    (28, Tuple_pool_Tuple_type, cst_Tuple_pool_Tuple_type$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Tuple_pool__Tuple_pool_intf
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Tuple_pool_Tuple_pool_intf = "Tuple_pool__Tuple_pool_intf",
    cst_tuple_pool = "tuple_pool";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Tuple_pool_Tuple_pool_intf);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_tuple_pool);
   caml_call1(Ppx_expect_runtime[1][1], "tuple_pool/src/tuple_pool_intf.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_tuple_pool, "tuple_pool_intf.ml");
   caml_call1(Ppx_inline_test_lib[7], cst_tuple_pool);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Tuple_pool_Tuple_pool_intf);
   var Tuple_pool_Tuple_pool_intf = [0];
   runtime.caml_register_global
    (11, Tuple_pool_Tuple_pool_intf, cst_Tuple_pool_Tuple_pool_intf);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Tuple_pool
//# unitInfo: Requires: Base__Field, Base__String, Bin_prot__Shape, Bin_shape, Core, Core__Array, Core__Core_sys, Core__Debug, Core__Error, Core__Int, Core__Int63, Core__List, Core__Printf, Core__Result, Core__Uniform_array, Inline_test_config, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Stdlib, Tuple_pool__Tuple_type, Typerep_lib__Make_typename, Typerep_lib__Std, Typerep_lib__Typename, Typerep_lib__Typerep_obj
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Tuple_pool$0 = "Tuple_pool",
    cst = "_",
    cst_capacity$1 = "capacity",
    cst_dummy$0 = "dummy",
    cst_first_free$0 = "first_free",
    cst_is_valid$0 = "is_valid",
    cst_length$0 = "length",
    cst_next_id$0 = "next_id",
    cst_pointer$0 = "pointer",
    cst_slots_per_tuple$0 = "slots_per_tuple",
    cst_t$1 = "t",
    cst_tuple_pool$0 = "tuple_pool",
    cst_tuple_pool_src_tuple_pool_$9 = "tuple_pool/src/tuple_pool.ml",
    caml_check_bound = runtime.caml_check_bound,
    caml_div = runtime.caml_div,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_mul = runtime.caml_mul,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   function caml_call9(f, a0, a1, a2, a3, a4, a5, a6, a7, a8){
    return (f.l >= 0 ? f.l : f.l = f.length) == 9
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7, a8]);
   }
   function caml_call10(f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9){
    return (f.l >= 0 ? f.l : f.l = f.length) == 10
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9)
            : runtime.caml_call_gen
              (f, [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9]);
   }
   function caml_call11(f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10){
    return (f.l >= 0 ? f.l : f.l = f.length) == 11
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10)
            : runtime.caml_call_gen
              (f, [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10]);
   }
   function caml_call12(f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11){
    return (f.l >= 0 ? f.l : f.l = f.length) == 12
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11)
            : runtime.caml_call_gen
              (f, [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11]);
   }
   function caml_call13
   (f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12){
    return (f.l >= 0 ? f.l : f.l = f.length) == 13
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12)
            : runtime.caml_call_gen
              (f, [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12]);
   }
   function caml_call14
   (f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13){
    return (f.l >= 0 ? f.l : f.l = f.length) == 14
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13)
            : runtime.caml_call_gen
              (f,
               [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13]);
   }
   function caml_call15
   (f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14){
    return (f.l >= 0 ? f.l : f.l = f.length) == 15
            ? f
              (a0,
               a1,
               a2,
               a3,
               a4,
               a5,
               a6,
               a7,
               a8,
               a9,
               a10,
               a11,
               a12,
               a13,
               a14)
            : runtime.caml_call_gen
              (f,
               [a0,
                a1,
                a2,
                a3,
                a4,
                a5,
                a6,
                a7,
                a8,
                a9,
                a10,
                a11,
                a12,
                a13,
                a14]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    name$1 = "tuple_pool/src/tuple_pool.ml.Error_check.Pointer.t",
    prefix = "Pool.",
    name$0 = "tuple_pool/src/tuple_pool.ml.Debug.Pointer.t",
    name = "tuple_pool/src/tuple_pool.ml.Pool.Pointer.t",
    Typerep_lib_Typename = global_data.Typerep_lib__Typename,
    Core = global_data.Core,
    Typerep_lib_Std = global_data.Typerep_lib__Std,
    Typerep_lib_Typerep_obj = global_data.Typerep_lib__Typerep_obj,
    Typerep_lib_Make_typename = global_data.Typerep_lib__Make_typename,
    Core_Int63 = global_data.Core__Int63,
    Core_Result = global_data.Core__Result,
    Core_List = global_data.Core__List,
    Core_Debug = global_data.Core__Debug,
    Bin_shape = global_data.Bin_shape,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Core_Uniform_array = global_data.Core__Uniform_array,
    Tuple_pool_Tuple_type = global_data.Tuple_pool__Tuple_type,
    Assert_failure = global_data.Assert_failure,
    Core_Array = global_data.Core__Array,
    Base_Field = global_data.Base__Field,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Base_String = global_data.Base__String,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Core_Error = global_data.Core__Error,
    Core_Core_sys = global_data.Core__Core_sys,
    Core_Int = global_data.Core__Int,
    Stdlib = global_data.Stdlib,
    Core_Printf = global_data.Core__Printf,
    Inline_test_config = global_data.Inline_test_config;
   caml_call1(Ppx_module_timer_runtime[4], cst_Tuple_pool$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_tuple_pool$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_tuple_pool_src_tuple_pool_$9);
   caml_call2(Ppx_inline_test_lib[6], cst_tuple_pool$0, "tuple_pool.ml");
   var
    failwiths = Core_Error[44],
    arch_sixtyfour = caml_call2(Core[90], Core_Core_sys[9], 64),
    num_bits = Core_Int[44],
    max_value = Stdlib[19],
    to_string = Core[22],
    sprintf = Core_Printf[2],
    _aN_ = [0, cst],
    cst_attempt_to_use_invalid_poi = "attempt to use invalid pointer",
    _aO_ = [0, cst_tuple_pool_src_tuple_pool_$9, 1144, 38347, 38374],
    cst_is_valid = cst_is_valid$0,
    cst_pointer = cst_pointer$0,
    _aL_ = [0, cst_pointer$0],
    _aM_ = [0, cst_is_valid$0],
    cst_unsafe_set = "unsafe_set",
    cst_set = "set",
    _aK_ = [0, cst],
    cst_unsafe_get = "unsafe_get",
    cst_get = "get",
    _aJ_ = [0, cst],
    _aI_ = [0, cst],
    _aH_ = [0, cst],
    _aG_ = [0, cst],
    cst_get_tuple = "get_tuple",
    _aF_ = [0, cst],
    cst_new = "new",
    _aE_ = [0, cst],
    cst_free = "free",
    _aD_ = [0, cst],
    cst_unsafe_free = "unsafe_free",
    _aC_ = [0, cst],
    cst_is_full = "is_full",
    _aB_ = [0, cst_capacity$1],
    _aA_ = [0, cst],
    cst_grow = "grow",
    _az_ = [0, cst],
    cst_capacity$0 = cst_capacity$1,
    cst_max_capacity = "max_capacity",
    _ay_ = [0, cst],
    cst_create = "create",
    _ax_ = [0, cst],
    cst_pointer_is_valid = "pointer_is_valid",
    _aw_ = [0, cst],
    cst_pointer_of_id_exn = "pointer_of_id_exn",
    _av_ = [0, cst],
    cst_id_of_pointer = "id_of_pointer",
    cst_Pointer_Id_to_int63 = "Pointer.Id.to_int63",
    cst_Pointer_Id_of_int63 = "Pointer.Id.of_int63",
    _au_ = [0, cst],
    cst_Pointer_is_null = "Pointer.is_null",
    _at_ = [0, cst],
    _as_ = [0, cst],
    cst_Pointer_phys_equal = "Pointer.phys_equal",
    _ar_ = [0, cst],
    _aq_ = [0, cst],
    cst_Pointer_phys_compare = "Pointer.phys_compare",
    _ap_ = [0, " result", 0],
    cst_t = cst_t$1,
    cst_tuple_pool_src_tuple_pool_$8 = "tuple_pool/src/tuple_pool.ml:980:6",
    cst_t$0 = cst_t$1,
    _an_ = [0, cst],
    _am_ = [0, cst],
    cst_Pool_free_of_invalid_point = "Pool.free of invalid pointer",
    _ao_ = [0, cst_tuple_pool_src_tuple_pool_$9, 694, 23065, 23079],
    _ak_ = [0, cst],
    cst_Pool_malloc_of_full_pool = "Pool.malloc of full pool",
    _al_ = [0, cst_tuple_pool_src_tuple_pool_$9, 651, 21432, 21452],
    cst_Pool_grow_cannot_grow_pool =
      "Pool.grow cannot grow pool; capacity already at maximum",
    _aj_ = [0, cst_tuple_pool_src_tuple_pool_$9, 619, 20496, 20510],
    _ah_ = [0, "max"],
    cst_Pool_create_got_invalid_ca = "Pool.create got invalid capacity",
    _ag_ = [0, cst_tuple_pool_src_tuple_pool_$9, 534, 17863, 17885],
    cst_Pool_create_got_too_large_ = "Pool.create got too large capacity",
    _ai_ = [0, cst_tuple_pool_src_tuple_pool_$9, 540, 18123, 18137],
    _W_ = [0, cst],
    _af_ = [0, cst_tuple_pool_src_tuple_pool_$9, 446, 56],
    _ae_ = [0, cst_tuple_pool_src_tuple_pool_$9, 449, 13],
    _ad_ = [0, cst_tuple_pool_src_tuple_pool_$9, 450, 13],
    _ac_ = [0, cst_tuple_pool_src_tuple_pool_$9, 453, 13],
    _ab_ = [0, cst_tuple_pool_src_tuple_pool_$9, 454, 13],
    _aa_ = [0, cst_tuple_pool_src_tuple_pool_$9, 462, 15],
    _$_ = [0, cst_tuple_pool_src_tuple_pool_$9, 464, 15],
    cst_cycle_in_free_list = "cycle in free list",
    ___ = [0, cst_tuple_pool_src_tuple_pool_$9, 467, 15394, 15430],
    _Y_ = [0, cst_tuple_pool_src_tuple_pool_$9, 473, 28],
    _Z_ = [0, cst_tuple_pool_src_tuple_pool_$9, 482, 20],
    cst_Pool_invariant_failed = "Pool.invariant failed",
    _X_ = [0, cst_tuple_pool_src_tuple_pool_$9, 487, 16324, 16346],
    _T_ = [0, cst],
    cst_invalid_header_index = "invalid header index",
    _V_ = [0, cst_tuple_pool_src_tuple_pool_$9, 429, 13873, 13902],
    cst_pointer_not_live = "pointer not live",
    cst_Pool_pointer_of_id_exn_got = "Pool.pointer_of_id_exn got invalid id",
    _U_ = [0, cst_tuple_pool_src_tuple_pool_$9, 435, 14100, 14114],
    _N_ = [0, cst_dummy$0],
    _O_ = [0, cst_first_free$0],
    _P_ = [0, cst_next_id$0],
    _Q_ = [0, cst_length$0],
    _R_ = [0, cst_capacity$1],
    _S_ = [0, cst_slots_per_tuple$0],
    _A_ = [0, cst_tuple_pool_src_tuple_pool_$9, 325, 6],
    _w_ = [0, "null"],
    _x_ = [0, "Free"],
    _y_ = [0, "Used"],
    _v_ = [0, cst_tuple_pool_src_tuple_pool_$9, 303, 8],
    _u_ = [0, cst_tuple_pool_src_tuple_pool_$9, 304, 8],
    _q_ = [0, cst],
    cst_should_equal = "should equal",
    _r_ = [0, cst_tuple_pool_src_tuple_pool_$9, 247, 7700, 7731],
    cst_Pointer_of_id_exn_got_stra = "Pointer.of_id_exn got strange id",
    _p_ = [0, cst_tuple_pool_src_tuple_pool_$9, 251, 7828, 7844],
    _m_ = [0, cst_tuple_pool_src_tuple_pool_$9, 216, 48],
    _k_ =
      [0,
       [11, "<Pool.Pointer.t: 0x", [4, 6, [0, 2, 8], 0, [12, 62, 0]]],
       "<Pool.Pointer.t: 0x%08x>"],
    cst_Tuple_id_of_int_got_negati = "Tuple_id.of_int got negative int",
    _j_ = [0, cst_tuple_pool_src_tuple_pool_$9, 142, 4422, 4449],
    _i_ = [0, cst_tuple_pool_src_tuple_pool_$9, 133, 22],
    _b_ = [0, cst_capacity$1],
    _c_ = [0, "old_capacity"],
    cst_Pool_grow_got_too_small_ca = "Pool.grow got too small capacity",
    _d_ = [0, cst_tuple_pool_src_tuple_pool_$9, 29, 642, 658],
    _a_ = [0, ""],
    cst_tuple_pool_src_tuple_pool_ = cst_tuple_pool_src_tuple_pool_$9,
    cst_t13_max_slot = "<<t13 = max_slot>>",
    _aR_ = [0, cst_tuple_pool_src_tuple_pool_$9, 103, 6],
    _aS_ = [0, cst_tuple_pool_src_tuple_pool_$9, 106, 6],
    cst_tuple_pool_src_tuple_pool_$0 = cst_tuple_pool_src_tuple_pool_$9,
    cst_array_index_num_bits_0 = "<<array_index_num_bits > 0>>",
    cst_tuple_pool_src_tuple_pool_$1 = cst_tuple_pool_src_tuple_pool_$9,
    cst_masked_tuple_id_num_bits_0 = "<<masked_tuple_id_num_bits > 0>>",
    cst_tuple_pool_src_tuple_pool_$2 = cst_tuple_pool_src_tuple_pool_$9,
    cst_array_index_num_bits_maske =
      "<<(array_index_num_bits + masked_tuple_id_num_b[...]>>",
    cst_tuple_pool_src_tuple_pool_$3 = cst_tuple_pool_src_tuple_pool_$9,
    cst_null_max_slot_0 = "<<((null ()) + max_slot) < 0>>",
    cst_tuple_pool_src_tuple_pool_$4 = cst_tuple_pool_src_tuple_pool_$9,
    cst_invariant_ignore_null = "<<invariant ignore (null ())>>",
    cst_tuple_pool_src_tuple_pool_$5 = cst_tuple_pool_src_tuple_pool_$9,
    cst_List_iter_Tuple_id_example =
      "<<List.iter Tuple_id.examples   ~f:(fun tuple_i[...]>>",
    cst_tuple_pool_src_tuple_pool_$6 = cst_tuple_pool_src_tuple_pool_$9,
    cst_List_iter_Tuple_id_example$0 =
      "<<List.iter Tuple_id.examples   ~f:(fun id ->  [...]>>",
    cst_tuple_pool_src_tuple_pool_$7 = cst_tuple_pool_src_tuple_pool_$9,
    cst_for_slots_per_tuple_1_to_m =
      "<<for slots_per_tuple = 1 to max_slot do   asse[...]>>",
    cst_dummy = cst_dummy$0,
    cst_first_free = cst_first_free$0,
    cst_next_id = cst_next_id$0,
    cst_length = cst_length$0,
    cst_capacity = cst_capacity$1,
    cst_slots_per_tuple = cst_slots_per_tuple$0,
    cst_tuple_pool = cst_tuple_pool$0,
    cst_Tuple_pool = cst_Tuple_pool$0;
   function concat(l){return caml_call2(Base_String[68], _a_, l);}
   var max_slot = 14;
   function sexp_of_t(of_slots_007, of_a_008){return Core[389];}
   function equal(t1, t2){return caml_call2(Core[90], t1, t2);}
   var
    t0 = 1,
    t1 = 2,
    t2 = 3,
    t3 = 4,
    t4 = 5,
    t5 = 6,
    t6 = 7,
    t7 = 8,
    t8 = 9,
    t9 = 10,
    t10 = 11,
    t11 = 12,
    t12 = 13,
    t13 = 14;
   function _e_(param){return caml_call2(Core[90], t13, max_slot);}
   caml_call8
    (Ppx_inline_test_lib[8],
     Inline_test_config,
     cst_t13_max_slot,
     0,
     cst_tuple_pool_src_tuple_pool_,
     86,
     4,
     31,
     _e_);
   var
    Slot =
      [0,
       sexp_of_t,
       equal,
       t0,
       t1,
       t2,
       t3,
       t4,
       t5,
       t6,
       t7,
       t8,
       t9,
       t10,
       t11,
       t12,
       t13];
   if(arch_sixtyfour){
    if(! caml_call2(Core[90], num_bits, 63))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _aR_], 1);
    var array_index_num_bits = 30;
   }
   else{
    if
     (!
      caml_call2(Core[90], num_bits, 31)
      && ! caml_call2(Core[90], num_bits, 32))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _aS_], 1);
    var array_index_num_bits = 22;
   }
   var masked_tuple_id_num_bits = num_bits - array_index_num_bits | 0;
   function _f_(param){return caml_call2(Core[91], array_index_num_bits, 0);}
   caml_call8
    (Ppx_inline_test_lib[8],
     Inline_test_config,
     cst_array_index_num_bits_0,
     0,
     cst_tuple_pool_src_tuple_pool_$0,
     111,
     2,
     39,
     _f_);
   function _g_(param){
    return caml_call2(Core[91], masked_tuple_id_num_bits, 0);
   }
   caml_call8
    (Ppx_inline_test_lib[8],
     Inline_test_config,
     cst_masked_tuple_id_num_bits_0,
     0,
     cst_tuple_pool_src_tuple_pool_$1,
     112,
     2,
     43,
     _g_);
   function _h_(param){
    return caml_call2
            (Core[89],
             array_index_num_bits + masked_tuple_id_num_bits | 0,
             num_bits);
   }
   caml_call8
    (Ppx_inline_test_lib[8],
     Inline_test_config,
     cst_array_index_num_bits_maske,
     0,
     cst_tuple_pool_src_tuple_pool_$2,
     113,
     2,
     78,
     _h_);
   var max_array_length = 1 << array_index_num_bits, sexp_of_t$0 = Core[389];
   function invariant(t){
    if(caml_call2(Core[88], t, 0)) return 0;
    throw caml_maybe_attach_backtrace([0, Assert_failure, _i_], 1);
   }
   var init = 0;
   function of_int(i){
    if(caml_call2(Core[92], i, 0))
     caml_call5
      (failwiths, 0, _j_, cst_Tuple_id_of_int_got_negati, i, Core[389]);
    return i;
   }
   var
    examples = [0, 0, [0, 1, [0, 536870911, [0, max_value, 0]]]],
    tuple_id_mask = (1 << masked_tuple_id_num_bits) - 1 | 0,
    Typename_of_t = caml_call1(Typerep_lib_Make_typename[2], [0, name]),
    typename_of_t = Typename_of_t[2];
   function typerep_of_t(of_slots){
    var name_of_t = caml_call1(Typename_of_t[1], of_slots);
    return [9, [0, name_of_t, [0, Core[392]]]];
   }
   function sexp_of_t$1(param, t){return [0, caml_call2(sprintf, _k_, t)];}
   function phys_equal(t1, t2){return t1 === t2 ? 1 : 0;}
   var phys_compare = Core[95];
   function null$0(param){return -15;}
   function is_null(t){return t === -15 ? 1 : 0;}
   function _l_(param){return caml_call2(Core[92], -1, 0);}
   caml_call8
    (Ppx_inline_test_lib[8],
     Inline_test_config,
     cst_null_max_slot_0,
     0,
     cst_tuple_pool_src_tuple_pool_$3,
     206,
     4,
     39,
     _l_);
   function create(header_index, tuple_id){
    return header_index | (tuple_id & tuple_id_mask) << array_index_num_bits;
   }
   var header_index_mask = (1 << array_index_num_bits) - 1 | 0;
   function masked_tuple_id(t){return t >>> array_index_num_bits | 0;}
   function header_index(t){return t & header_index_mask;}
   function invariant$0(param, t){
    var _cM_ = 1 - (t === -15 ? 1 : 0);
    if(! _cM_) return _cM_;
    var _cN_ = header_index(t);
    if(caml_call2(Core[91], _cN_, 0)) return 0;
    throw caml_maybe_attach_backtrace([0, Assert_failure, _m_], 1);
   }
   function _n_(param){
    var _cK_ = -15;
    invariant$0(function(_cL_){return 0;}, _cK_);
    return 0;
   }
   caml_call8
    (Ppx_inline_test_lib[9],
     Inline_test_config,
     cst_invariant_ignore_null,
     0,
     cst_tuple_pool_src_tuple_pool_$4,
     217,
     4,
     48,
     _n_);
   function _o_(param){
    function _cH_(tuple_id){
     var _cI_ = create(1, tuple_id);
     return invariant$0(function(_cJ_){return 0;}, _cI_);
    }
    caml_call2(Core_List[19], examples, _cH_);
    return 0;
   }
   caml_call8
    (Ppx_inline_test_lib[9],
     Inline_test_config,
     cst_List_iter_Tuple_id_example,
     0,
     cst_tuple_pool_src_tuple_pool_$5,
     219,
     4,
     135,
     _o_);
   function slot_index(t, slot){return header_index(t) + slot | 0;}
   function first_slot_index(t){return slot_index(t, Slot[3]);}
   var
    to_int_exn = Core_Int63[5],
    of_int$0 = Core_Int63[72],
    bin_size_t = Core_Int63[94],
    bin_write_t = Core_Int63[95],
    bin_read_t = Core_Int63[96],
    bin_read_t$0 = Core_Int63[97],
    bin_shape_t = Core_Int63[98],
    bin_writer_t = Core_Int63[99],
    bin_reader_t = Core_Int63[100],
    bin_t = Core_Int63[101],
    t_of_sexp = Core_Int63[102],
    sexp_of_t$2 = Core_Int63[103];
   function to_int63(t){return t;}
   function of_int63(i){return i;}
   var
    _s_ =
      [0,
       bin_size_t,
       bin_write_t,
       bin_read_t,
       bin_read_t$0,
       bin_shape_t,
       bin_writer_t,
       bin_reader_t,
       bin_t,
       t_of_sexp,
       sexp_of_t$2,
       to_int63,
       of_int63],
    null$1 = 0;
   function is_null$0(t){return caml_call2(Core[90], t, 0);}
   function is_free(t){return caml_call2(Core[91], t, 0);}
   function is_used(t){return caml_call2(Core[92], t, 0);}
   function tuple_id(t){return of_int(- (t + 1 | 0) | 0);}
   function _t_(param){
    function _cG_(id){
     var t = -1 - id | 0;
     if(! is_used(t))
      throw caml_maybe_attach_backtrace([0, Assert_failure, _v_], 1);
     var t1 = tuple_id(t);
     if(caml_call2(Core[90], t1, id)) return 0;
     throw caml_maybe_attach_backtrace([0, Assert_failure, _u_], 1);
    }
    caml_call2(Core_List[19], examples, _cG_);
    return 0;
   }
   caml_call8
    (Ppx_inline_test_lib[9],
     Inline_test_config,
     cst_List_iter_Tuple_id_example$0,
     0,
     cst_tuple_pool_src_tuple_pool_$6,
     300,
     4,
     173,
     _t_);
   var metadata_index = 0, start_of_tuples_index = 1;
   function max_capacity(slots_per_tuple){
    return caml_div(max_array_length - 1 | 0, 1 + slots_per_tuple | 0);
   }
   function _z_(param){
    var slots_per_tuple = 1;
    for(;;){
     var
      _cE_ =
        1 + caml_mul(1 + slots_per_tuple | 0, max_capacity(slots_per_tuple))
        | 0;
     if(! caml_call2(Core[89], _cE_, max_array_length))
      throw caml_maybe_attach_backtrace([0, Assert_failure, _A_], 1);
     var _cF_ = slots_per_tuple + 1 | 0;
     if(14 === slots_per_tuple) return 0;
     var slots_per_tuple = _cF_;
    }
   }
   caml_call8
    (Ppx_inline_test_lib[9],
     Inline_test_config,
     cst_for_slots_per_tuple_1_to_m,
     0,
     cst_tuple_pool_src_tuple_pool_$7,
     323,
     2,
     203,
     _z_);
   function dummy(r){return r[6];}
   function first_free(r){return r[5];}
   function set_first_free(r, v){r[5] = v; return 0;}
   function next_id(r){return r[4];}
   function set_next_id(r, v){r[4] = v; return 0;}
   function length(r){return r[3];}
   function set_length(r, v){r[3] = v; return 0;}
   function capacity(r){return r[2];}
   function slots_per_tuple(r){return r[1];}
   function _B_(r, v){return [0, r[1], r[2], r[3], r[4], r[5], v];}
   var
    _C_ = 0,
    dummy$0 = [0, function(param){return 0;}, cst_dummy, _C_, dummy, _B_];
   function _D_(r, v){return [0, r[1], r[2], r[3], r[4], v, r[6]];}
   var
    _E_ = [0, set_first_free],
    first_free$0 =
      [0, function(param){return 0;}, cst_first_free, _E_, first_free, _D_];
   function _F_(r, v){return [0, r[1], r[2], r[3], v, r[5], r[6]];}
   var
    _G_ = [0, set_next_id],
    next_id$0 =
      [0, function(param){return 0;}, cst_next_id, _G_, next_id, _F_];
   function _H_(r, v){return [0, r[1], r[2], v, r[4], r[5], r[6]];}
   var
    _I_ = [0, set_length],
    length$0 = [0, function(param){return 0;}, cst_length, _I_, length, _H_];
   function _J_(r, v){return [0, r[1], v, r[3], r[4], r[5], r[6]];}
   var
    _K_ = 0,
    capacity$0 =
      [0, function(param){return 0;}, cst_capacity, _K_, capacity, _J_];
   function _L_(r, v){return [0, v, r[2], r[3], r[4], r[5], r[6]];}
   var
    _M_ = 0,
    slots_per_tuple$0 =
      [0,
       function(param){return 0;},
       cst_slots_per_tuple,
       _M_,
       slots_per_tuple,
       _L_];
   function array_indices_per_tuple(t){return 1 + t[1] | 0;}
   function array_length(t){
    var _cD_ = array_indices_per_tuple(t);
    return 1 + caml_mul(t[2], _cD_) | 0;
   }
   function tuple_num_to_header_index(t, tuple_num){
    return 1 + caml_mul(tuple_num, array_indices_per_tuple(t)) | 0;
   }
   function tuple_num_to_first_slot_index(t, tuple_num){
    return tuple_num_to_header_index(t, tuple_num) + 1 | 0;
   }
   function metadata(t){
    return caml_call2(Core_Uniform_array[21], t, metadata_index);
   }
   function length$1(t){return metadata(t)[3];}
   function sexp_of_t$3(sexp_of_ty, t){
    var
     param = metadata(t),
     capacity_018 = param[2],
     slots_per_tuple_016 = param[1],
     length_020 = param[3],
     next_id_022 = param[4],
     first_free_024 = param[5],
     dummy_026 = param[6],
     arg_027 = caml_call2(Core[515], Sexplib0_Sexp_conv[23], dummy_026),
     bnds_015 = [0, [1, [0, _N_, [0, arg_027, 0]]], 0],
     arg_025 =
       is_null$0(first_free_024)
        ? _w_
        : is_free
           (first_free_024)
          ? [1, [0, _x_, [0, [0, caml_call1(to_string, first_free_024)], 0]]]
          : [1,
            [0,
             _y_,
             [0, [0, caml_call1(to_string, tuple_id(first_free_024))], 0]]],
     bnds_015$0 = [0, [1, [0, _O_, [0, arg_025, 0]]], bnds_015],
     arg_023 = caml_call1(sexp_of_t$0, next_id_022),
     bnds_015$1 = [0, [1, [0, _P_, [0, arg_023, 0]]], bnds_015$0],
     arg_021 = caml_call1(Core[389], length_020),
     bnds_015$2 = [0, [1, [0, _Q_, [0, arg_021, 0]]], bnds_015$1],
     arg_019 = caml_call1(Core[389], capacity_018),
     bnds_015$3 = [0, [1, [0, _R_, [0, arg_019, 0]]], bnds_015$2],
     arg_017 = caml_call1(Core[389], slots_per_tuple_016),
     bnds_015$4 = [0, [1, [0, _S_, [0, arg_017, 0]]], bnds_015$3];
    return [1, bnds_015$4];
   }
   function unsafe_header(t, header_index){
    return caml_call2(Core_Uniform_array[21], t, header_index);
   }
   function unsafe_set_header(t, header_index, header){
    return caml_call3(Core_Uniform_array[73], t, header_index, header);
   }
   function header_index_is_in_bounds(t, header_index){
    var _cB_ = caml_call2(Core[88], header_index, start_of_tuples_index);
    if(! _cB_) return _cB_;
    var _cC_ = caml_call1(Core_Uniform_array[19], t);
    return caml_call2(Core[92], header_index, _cC_);
   }
   function unsafe_pointer_is_live(t, pointer){
    var
     header_index$0 = header_index(pointer),
     header = unsafe_header(t, header_index$0),
     _cy_ = is_used(header);
    if(! _cy_) return _cy_;
    var
     _cz_ = masked_tuple_id(pointer),
     _cA_ = tuple_id(header) & tuple_id_mask;
    return caml_call2(Core[90], _cA_, _cz_);
   }
   function pointer_is_valid(t, pointer){
    var _cx_ = header_index_is_in_bounds(t, header_index(pointer));
    return _cx_ ? unsafe_pointer_is_live(t, pointer) : _cx_;
   }
   function id_of_pointer(t, pointer){return caml_call1(of_int$0, pointer);}
   function is_valid_header_index(t, header_index){
    var
     metadata$0 = metadata(t),
     _cv_ = header_index_is_in_bounds(t, header_index);
    if(! _cv_) return _cv_;
    var
     _cw_ =
       runtime.caml_mod
        (header_index - 1 | 0, array_indices_per_tuple(metadata$0));
    return caml_call2(Core[90], 0, _cw_);
   }
   function pointer_of_id_exn(t$2, id){
    try{
     try{
      var t = caml_call1(to_int_exn, id);
      if(t === -15)
       var t$0 = t;
      else
       var
        _cu_ = of_int(masked_tuple_id(t)),
        should_equal = create(header_index(t), _cu_),
        t$1 =
          t === should_equal
           ? t
           : caml_call5
             (failwiths,
              0,
              _r_,
              cst_should_equal,
              should_equal,
              function(x_009){
               return sexp_of_t$1(function(param){return _q_;}, x_009);
              }),
        t$0 = t$1;
      var pointer = t$0;
     }
     catch(exn$0){
      var
       exn = caml_wrap_exception(exn$0),
       pointer =
         caml_call5
          (failwiths,
           0,
           _p_,
           cst_Pointer_of_id_exn_got_stra,
           [0, id, exn],
           function(param){
            var
             arg1_011 = param[2],
             arg0_010 = param[1],
             res0_012 = caml_call1(sexp_of_t$2, arg0_010),
             res1_013 = caml_call1(Core[625], arg1_011);
            return [1, [0, res0_012, [0, res1_013, 0]]];
           });
     }
     if(1 - (pointer === -15 ? 1 : 0)){
      var header_index$0 = header_index(pointer);
      if(1 - is_valid_header_index(t$2, header_index$0))
       caml_call5
        (failwiths,
         0,
         _V_,
         cst_invalid_header_index,
         header_index$0,
         Core[389]);
      if(1 - unsafe_pointer_is_live(t$2, pointer))
       caml_call1(Core[6], cst_pointer_not_live);
     }
     return pointer;
    }
    catch(exn){
     var exn$0 = caml_wrap_exception(exn);
     return caml_call5
             (failwiths,
              0,
              _U_,
              cst_Pool_pointer_of_id_exn_got,
              [0, id, t$2, exn$0],
              function(param){
               var
                arg2_030 = param[3],
                arg1_029 = param[2],
                arg0_028 = param[1],
                res0_031 = caml_call1(_s_[10], arg0_028),
                res1_032 = sexp_of_t$3(function(param){return _T_;}, arg1_029),
                res2_033 = caml_call1(Core[625], arg2_030);
               return [1, [0, res0_031, [0, res1_032, [0, res2_033, 0]]]];
              });
    }
   }
   function invariant$1(invariant_a, t){
    try{
     var
      metadata$0 = metadata(t),
      check =
        function(f, field){
         return caml_call1(f, caml_call2(Base_Field[3], field, metadata$0));
        },
      _cf_ =
        function(param){
         if(param){
          var
           dummy = param[1],
           _cm_ = metadata$0[1],
           _cn_ = caml_call1(Core_Uniform_array[19], dummy);
          if(caml_call2(Core[90], _cn_, _cm_)) return 0;
          throw caml_maybe_attach_backtrace([0, Assert_failure, _Y_], 1);
         }
         var _cp_ = metadata$0[2] - 1 | 0, _co_ = 0;
         if(_cp_ >= 0){
          var tuple_num = _co_;
          for(;;){
           var
            header_index = tuple_num_to_header_index(metadata$0, tuple_num),
            header = unsafe_header(t, header_index);
           if(is_free(header)){
            var
             first_slot = tuple_num_to_first_slot_index(metadata$0, tuple_num),
             _cr_ = metadata$0[1] - 1 | 0,
             _cq_ = 0;
            if(_cr_ >= 0){
             var slot = _cq_;
             for(;;){
              if
               (typeof
                caml_call2(Core_Uniform_array[20], t, first_slot + slot | 0)
                !== "number")
               throw caml_maybe_attach_backtrace([0, Assert_failure, _Z_], 1);
              var _ct_ = slot + 1 | 0;
              if(_cr_ === slot) break;
              var slot = _ct_;
             }
            }
           }
           var _cs_ = tuple_num + 1 | 0;
           if(_cp_ === tuple_num) break;
           var tuple_num = _cs_;
          }
         }
         return 0;
        },
      _cg_ =
        function(first_free){
         var
          free = caml_call2(Core_Array[63], metadata$0[2], 0),
          r = [0, first_free];
         for(;;){
          if(is_null$0(r[1])) return 0;
          var header_index = r[1];
          if(! is_free(header_index))
           throw caml_maybe_attach_backtrace([0, Assert_failure, _aa_], 1);
          if(! is_valid_header_index(t, header_index))
           throw caml_maybe_attach_backtrace([0, Assert_failure, _$_], 1);
          var
           tuple_num =
             caml_div
              (header_index - 1 | 0, array_indices_per_tuple(metadata$0));
          if(caml_check_bound(free, tuple_num)[1 + tuple_num])
           caml_call5
            (failwiths, 0, ___, cst_cycle_in_free_list, tuple_num, Core[389]);
          caml_check_bound(free, tuple_num)[1 + tuple_num] = 1;
          r[1] = unsafe_header(t, header_index);
         }
        },
      _ch_ =
        function(length){
         if(! caml_call2(Core[88], length, 0))
          throw caml_maybe_attach_backtrace([0, Assert_failure, _ac_], 1);
         if(caml_call2(Core[89], length, metadata$0[2])) return 0;
         throw caml_maybe_attach_backtrace([0, Assert_failure, _ab_], 1);
        },
      _ci_ =
        function(capacity){
         if(! caml_call2(Core[88], capacity, 0))
          throw caml_maybe_attach_backtrace([0, Assert_failure, _ae_], 1);
         var
          _ck_ = array_length(metadata$0),
          _cl_ = caml_call1(Core_Uniform_array[19], t);
         if(caml_call2(Core[90], _cl_, _ck_)) return 0;
         throw caml_maybe_attach_backtrace([0, Assert_failure, _ad_], 1);
        };
     check
      (function(slots_per_tuple){
        if(caml_call2(Core[91], slots_per_tuple, 0)) return 0;
        throw caml_maybe_attach_backtrace([0, Assert_failure, _af_], 1);
       },
       slots_per_tuple$0);
     check(_ci_, capacity$0);
     check(_ch_, length$0);
     check(invariant, next_id$0);
     check(_cg_, first_free$0);
     var _cj_ = check(_cf_, dummy$0);
     return _cj_;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     return caml_call5
             (failwiths,
              0,
              _X_,
              cst_Pool_invariant_failed,
              [0, exn, t],
              function(param){
               var
                arg1_035 = param[2],
                arg0_034 = param[1],
                res0_036 = caml_call1(Core[625], arg0_034),
                res1_037 = sexp_of_t$3(function(param){return _W_;}, arg1_035);
               return [1, [0, res0_036, [0, res1_037, 0]]];
              });
    }
   }
   function capacity$1(t){return metadata(t)[2];}
   function is_full(t){
    var t$0 = metadata(t);
    return caml_call2(Core[90], t$0[3], t$0[2]);
   }
   function unsafe_add_to_free_list(t, metadata, header_index){
    unsafe_set_header(t, header_index, metadata[5]);
    metadata[5] = header_index;
    return;
   }
   function set_metadata(t, metadata){
    return caml_call3(Core_Uniform_array[23], t, metadata_index, metadata);
   }
   function create_array(metadata){
    var
     _ce_ = array_length(metadata),
     t = caml_call1(Core_Uniform_array[71], _ce_);
    set_metadata(t, metadata);
    return t;
   }
   function unsafe_init_range(t, metadata, lo, hi){
    var match = metadata[6];
    if(match){
     var dummy = match[1], _b__ = hi - 1 | 0;
     if(_b__ >= lo){
      var tuple_num$0 = lo;
      for(;;){
       var
        _cb_ = metadata[1],
        _cc_ = tuple_num_to_first_slot_index(metadata, tuple_num$0);
       caml_call5(Core_Uniform_array[41], dummy, 0, t, _cc_, _cb_);
       var _cd_ = tuple_num$0 + 1 | 0;
       if(_b__ === tuple_num$0) break;
       var tuple_num$0 = _cd_;
      }
     }
    }
    var _b$_ = hi - 1 | 0;
    if(_b$_ >= lo){
     var tuple_num = _b$_;
     for(;;){
      unsafe_add_to_free_list
       (t, metadata, tuple_num_to_header_index(metadata, tuple_num));
      var _ca_ = tuple_num - 1 | 0;
      if(lo === tuple_num) break;
      var tuple_num = _ca_;
     }
    }
    return;
   }
   function create_with_dummy(slots, capacity, dummy){
    if(caml_call2(Core[92], capacity, 0))
     caml_call5
      (failwiths,
       0,
       _ag_,
       cst_Pool_create_got_invalid_ca,
       capacity,
       Core[389]);
    var
     slots_per_tuple = caml_call1(Tuple_pool_Tuple_type[1][2], slots),
     max_capacity$0 = max_capacity(slots_per_tuple);
    if(caml_call2(Core[91], capacity, max_capacity$0))
     caml_call5
      (failwiths,
       0,
       _ai_,
       cst_Pool_create_got_too_large_,
       [0, capacity, [0, 5442212, max_capacity$0]],
       function(param){
        var
         arg1_040 = param[2],
         arg0_039 = param[1],
         res0_041 = caml_call1(Core[389], arg0_039),
         v_038 = arg1_040[2],
         res1_042 = [1, [0, _ah_, [0, caml_call1(Core[389], v_038), 0]]];
        return [1, [0, res0_041, [0, res1_042, 0]]];
       });
    var
     metadata = [0, slots_per_tuple, capacity, 0, init, null$1, dummy],
     t = create_array(metadata);
    unsafe_init_range(t, metadata, 0, capacity);
    return t;
   }
   function create$0(slots, capacity, dummy){
    var
     _b9_ = caml_call1(Tuple_pool_Tuple_type[1][2], slots),
     dummy$0 =
       caml_call2(Core[90], _b9_, 1)
        ? caml_call1(Core_Uniform_array[17], dummy)
        : dummy;
    return create_with_dummy(slots, capacity, [0, dummy$0]);
   }
   function grow(capacity$0, t){
    var
     match$0 = metadata(t),
     old_capacity = match$0[2],
     slots_per_tuple = match$0[1],
     length = match$0[3],
     next_id = match$0[4],
     dummy$0 = match$0[6];
    if(capacity$0){
     var capacity = capacity$0[1];
     if(caml_call2(Core[89], capacity, old_capacity))
      caml_call5
       (failwiths,
        0,
        _d_,
        cst_Pool_grow_got_too_small_ca,
        [0, [0, -1011154630, capacity], [0, 138253074, old_capacity]],
        function(param){
         var
          arg1_004 = param[2],
          arg0_003 = param[1],
          v_001 = arg0_003[2],
          res0_005 = [1, [0, _b_, [0, caml_call1(Core[389], v_001), 0]]],
          v_002 = arg1_004[2],
          res1_006 = [1, [0, _c_, [0, caml_call1(Core[389], v_002), 0]]];
         return [1, [0, res0_005, [0, res1_006, 0]]];
        });
     var _b4_ = capacity;
    }
    else
     var
      _b4_ = caml_call2(Core[90], old_capacity, 0) ? 1 : old_capacity * 2 | 0;
    var
     _b5_ = max_capacity(slots_per_tuple),
     capacity$1 = caml_call2(Core[96], _b5_, _b4_);
    if(caml_call2(Core[90], capacity$1, old_capacity))
     caml_call5
      (failwiths,
       0,
       _aj_,
       cst_Pool_grow_cannot_grow_pool,
       capacity$1,
       Core[389]);
    var
     metadata$2 =
       [0, slots_per_tuple, capacity$1, length, next_id, null$1, dummy$0],
     t$0 = create_array(metadata$2),
     _b6_ = caml_mul(old_capacity, array_indices_per_tuple(metadata$2));
    caml_call5
     (Core_Uniform_array[41],
      t,
      start_of_tuples_index,
      t$0,
      start_of_tuples_index,
      _b6_);
    var metadata$0 = metadata(t), match = metadata$0[6];
    if(match){
     var dummy = match[1], _b0_ = metadata$0[2] - 1 | 0, _bZ_ = 0;
     if(_b0_ >= 0){
      var tuple_num = _bZ_;
      for(;;){
       var header_index = tuple_num_to_header_index(metadata$0, tuple_num);
       unsafe_set_header(t, header_index, null$1);
       caml_call5
        (Core_Uniform_array[41],
         dummy,
         0,
         t,
         header_index + 1 | 0,
         metadata$0[1]);
       var _b1_ = tuple_num + 1 | 0;
       if(_b0_ === tuple_num) break;
       var tuple_num = _b1_;
      }
     }
    }
    else{
     var _b2_ = caml_call1(Core_Uniform_array[19], t) - 1 | 0;
     if(_b2_ >= 1){
      var i = start_of_tuples_index;
      for(;;){
       caml_call3(Core_Uniform_array[24], t, i, 0);
       var _b3_ = i + 1 | 0;
       if(_b2_ === i) break;
       var i = _b3_;
      }
     }
    }
    var
     metadata$1 =
       [0, metadata$0[1], 0, 0, metadata$0[4], null$1, metadata$0[6]];
    set_metadata(t, metadata$1);
    unsafe_init_range(t$0, metadata$2, old_capacity, capacity$1);
    var _b7_ = old_capacity - 1 | 0;
    if(_b7_ >= 0){
     var tuple_num$0 = _b7_;
     for(;;){
      var
       header_index$0 = tuple_num_to_header_index(metadata$2, tuple_num$0),
       header = unsafe_header(t$0, header_index$0);
      if(1 - is_used(header))
       unsafe_add_to_free_list(t$0, metadata$2, header_index$0);
      var _b8_ = tuple_num$0 - 1 | 0;
      if(0 === tuple_num$0) break;
      var tuple_num$0 = _b8_;
     }
    }
    return t$0;
   }
   function malloc(t){
    var metadata$0 = metadata(t), header_index = metadata$0[5];
    if(is_null$0(header_index))
     caml_call5
      (failwiths,
       0,
       _al_,
       cst_Pool_malloc_of_full_pool,
       t,
       function(x_043){
        return sexp_of_t$3(function(param){return _ak_;}, x_043);
       });
    metadata$0[5] = unsafe_header(t, header_index);
    metadata$0[3] = metadata$0[3] + 1 | 0;
    var tuple_id = metadata$0[4];
    unsafe_set_header(t, header_index, -1 - tuple_id | 0);
    var
     _bY_ =
       arch_sixtyfour
        ? tuple_id + 1 | 0
        : caml_call2(Core[90], tuple_id, max_value) ? 0 : tuple_id + 1 | 0;
    metadata$0[4] = _bY_;
    return create(header_index, tuple_id);
   }
   function unsafe_free(t, pointer){
    var metadata$0 = metadata(t);
    metadata$0[3] = metadata$0[3] - 1 | 0;
    unsafe_add_to_free_list(t, metadata$0, header_index(pointer));
    var match = metadata$0[6];
    if(match){
     var
      dummy = match[1],
      _bT_ = metadata$0[1],
      _bU_ = first_slot_index(pointer);
     return caml_call5(Core_Uniform_array[43], dummy, 0, t, _bU_, _bT_);
    }
    var
     pos = first_slot_index(pointer),
     _bW_ = metadata$0[1] - 1 | 0,
     _bV_ = 0;
    if(_bW_ >= 0){
     var i = _bV_;
     for(;;){
      caml_call2(Core_Uniform_array[75], t, pos + i | 0);
      var _bX_ = i + 1 | 0;
      if(_bW_ === i) break;
      var i = _bX_;
     }
    }
    return 0;
   }
   function free(t, pointer){
    if(1 - pointer_is_valid(t, pointer))
     caml_call5
      (failwiths,
       0,
       _ao_,
       cst_Pool_free_of_invalid_point,
       [0, pointer, t],
       function(param){
        var
         arg1_045 = param[2],
         arg0_044 = param[1],
         res0_046 = sexp_of_t$1(function(param){return _am_;}, arg0_044),
         res1_047 = sexp_of_t$3(function(param){return _an_;}, arg1_045);
        return [1, [0, res0_046, [0, res1_047, 0]]];
       });
    return unsafe_free(t, pointer);
   }
   function new1(t, a0){
    var pointer = malloc(t), offset = header_index(pointer);
    caml_call3(Core_Uniform_array[24], t, offset + 1 | 0, a0);
    return pointer;
   }
   function new2(t, a0, a1){
    var pointer = malloc(t), offset = header_index(pointer);
    caml_call3(Core_Uniform_array[24], t, offset + 1 | 0, a0);
    caml_call3(Core_Uniform_array[24], t, offset + 2 | 0, a1);
    return pointer;
   }
   function new3(t, a0, a1, a2){
    var pointer = malloc(t), offset = header_index(pointer);
    caml_call3(Core_Uniform_array[24], t, offset + 1 | 0, a0);
    caml_call3(Core_Uniform_array[24], t, offset + 2 | 0, a1);
    caml_call3(Core_Uniform_array[24], t, offset + 3 | 0, a2);
    return pointer;
   }
   function new4(t, a0, a1, a2, a3){
    var pointer = malloc(t), offset = header_index(pointer);
    caml_call3(Core_Uniform_array[24], t, offset + 1 | 0, a0);
    caml_call3(Core_Uniform_array[24], t, offset + 2 | 0, a1);
    caml_call3(Core_Uniform_array[24], t, offset + 3 | 0, a2);
    caml_call3(Core_Uniform_array[24], t, offset + 4 | 0, a3);
    return pointer;
   }
   function new5(t, a0, a1, a2, a3, a4){
    var pointer = malloc(t), offset = header_index(pointer);
    caml_call3(Core_Uniform_array[24], t, offset + 1 | 0, a0);
    caml_call3(Core_Uniform_array[24], t, offset + 2 | 0, a1);
    caml_call3(Core_Uniform_array[24], t, offset + 3 | 0, a2);
    caml_call3(Core_Uniform_array[24], t, offset + 4 | 0, a3);
    caml_call3(Core_Uniform_array[24], t, offset + 5 | 0, a4);
    return pointer;
   }
   function new6(t, a0, a1, a2, a3, a4, a5){
    var pointer = malloc(t), offset = header_index(pointer);
    caml_call3(Core_Uniform_array[24], t, offset + 1 | 0, a0);
    caml_call3(Core_Uniform_array[24], t, offset + 2 | 0, a1);
    caml_call3(Core_Uniform_array[24], t, offset + 3 | 0, a2);
    caml_call3(Core_Uniform_array[24], t, offset + 4 | 0, a3);
    caml_call3(Core_Uniform_array[24], t, offset + 5 | 0, a4);
    caml_call3(Core_Uniform_array[24], t, offset + 6 | 0, a5);
    return pointer;
   }
   function new7(t, a0, a1, a2, a3, a4, a5, a6){
    var pointer = malloc(t), offset = header_index(pointer);
    caml_call3(Core_Uniform_array[24], t, offset + 1 | 0, a0);
    caml_call3(Core_Uniform_array[24], t, offset + 2 | 0, a1);
    caml_call3(Core_Uniform_array[24], t, offset + 3 | 0, a2);
    caml_call3(Core_Uniform_array[24], t, offset + 4 | 0, a3);
    caml_call3(Core_Uniform_array[24], t, offset + 5 | 0, a4);
    caml_call3(Core_Uniform_array[24], t, offset + 6 | 0, a5);
    caml_call3(Core_Uniform_array[24], t, offset + 7 | 0, a6);
    return pointer;
   }
   function new8(t, a0, a1, a2, a3, a4, a5, a6, a7){
    var pointer = malloc(t), offset = header_index(pointer);
    caml_call3(Core_Uniform_array[24], t, offset + 1 | 0, a0);
    caml_call3(Core_Uniform_array[24], t, offset + 2 | 0, a1);
    caml_call3(Core_Uniform_array[24], t, offset + 3 | 0, a2);
    caml_call3(Core_Uniform_array[24], t, offset + 4 | 0, a3);
    caml_call3(Core_Uniform_array[24], t, offset + 5 | 0, a4);
    caml_call3(Core_Uniform_array[24], t, offset + 6 | 0, a5);
    caml_call3(Core_Uniform_array[24], t, offset + 7 | 0, a6);
    caml_call3(Core_Uniform_array[24], t, offset + 8 | 0, a7);
    return pointer;
   }
   function new9(t, a0, a1, a2, a3, a4, a5, a6, a7, a8){
    var pointer = malloc(t), offset = header_index(pointer);
    caml_call3(Core_Uniform_array[24], t, offset + 1 | 0, a0);
    caml_call3(Core_Uniform_array[24], t, offset + 2 | 0, a1);
    caml_call3(Core_Uniform_array[24], t, offset + 3 | 0, a2);
    caml_call3(Core_Uniform_array[24], t, offset + 4 | 0, a3);
    caml_call3(Core_Uniform_array[24], t, offset + 5 | 0, a4);
    caml_call3(Core_Uniform_array[24], t, offset + 6 | 0, a5);
    caml_call3(Core_Uniform_array[24], t, offset + 7 | 0, a6);
    caml_call3(Core_Uniform_array[24], t, offset + 8 | 0, a7);
    caml_call3(Core_Uniform_array[24], t, offset + 9 | 0, a8);
    return pointer;
   }
   function new10(t, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9){
    var pointer = malloc(t), offset = header_index(pointer);
    caml_call3(Core_Uniform_array[24], t, offset + 1 | 0, a0);
    caml_call3(Core_Uniform_array[24], t, offset + 2 | 0, a1);
    caml_call3(Core_Uniform_array[24], t, offset + 3 | 0, a2);
    caml_call3(Core_Uniform_array[24], t, offset + 4 | 0, a3);
    caml_call3(Core_Uniform_array[24], t, offset + 5 | 0, a4);
    caml_call3(Core_Uniform_array[24], t, offset + 6 | 0, a5);
    caml_call3(Core_Uniform_array[24], t, offset + 7 | 0, a6);
    caml_call3(Core_Uniform_array[24], t, offset + 8 | 0, a7);
    caml_call3(Core_Uniform_array[24], t, offset + 9 | 0, a8);
    caml_call3(Core_Uniform_array[24], t, offset + 10 | 0, a9);
    return pointer;
   }
   function new11(t, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10){
    var pointer = malloc(t), offset = header_index(pointer);
    caml_call3(Core_Uniform_array[24], t, offset + 1 | 0, a0);
    caml_call3(Core_Uniform_array[24], t, offset + 2 | 0, a1);
    caml_call3(Core_Uniform_array[24], t, offset + 3 | 0, a2);
    caml_call3(Core_Uniform_array[24], t, offset + 4 | 0, a3);
    caml_call3(Core_Uniform_array[24], t, offset + 5 | 0, a4);
    caml_call3(Core_Uniform_array[24], t, offset + 6 | 0, a5);
    caml_call3(Core_Uniform_array[24], t, offset + 7 | 0, a6);
    caml_call3(Core_Uniform_array[24], t, offset + 8 | 0, a7);
    caml_call3(Core_Uniform_array[24], t, offset + 9 | 0, a8);
    caml_call3(Core_Uniform_array[24], t, offset + 10 | 0, a9);
    caml_call3(Core_Uniform_array[24], t, offset + 11 | 0, a10);
    return pointer;
   }
   function new12(t, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11){
    var pointer = malloc(t), offset = header_index(pointer);
    caml_call3(Core_Uniform_array[24], t, offset + 1 | 0, a0);
    caml_call3(Core_Uniform_array[24], t, offset + 2 | 0, a1);
    caml_call3(Core_Uniform_array[24], t, offset + 3 | 0, a2);
    caml_call3(Core_Uniform_array[24], t, offset + 4 | 0, a3);
    caml_call3(Core_Uniform_array[24], t, offset + 5 | 0, a4);
    caml_call3(Core_Uniform_array[24], t, offset + 6 | 0, a5);
    caml_call3(Core_Uniform_array[24], t, offset + 7 | 0, a6);
    caml_call3(Core_Uniform_array[24], t, offset + 8 | 0, a7);
    caml_call3(Core_Uniform_array[24], t, offset + 9 | 0, a8);
    caml_call3(Core_Uniform_array[24], t, offset + 10 | 0, a9);
    caml_call3(Core_Uniform_array[24], t, offset + 11 | 0, a10);
    caml_call3(Core_Uniform_array[24], t, offset + 12 | 0, a11);
    return pointer;
   }
   function new13(t, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12){
    var pointer = malloc(t), offset = header_index(pointer);
    caml_call3(Core_Uniform_array[24], t, offset + 1 | 0, a0);
    caml_call3(Core_Uniform_array[24], t, offset + 2 | 0, a1);
    caml_call3(Core_Uniform_array[24], t, offset + 3 | 0, a2);
    caml_call3(Core_Uniform_array[24], t, offset + 4 | 0, a3);
    caml_call3(Core_Uniform_array[24], t, offset + 5 | 0, a4);
    caml_call3(Core_Uniform_array[24], t, offset + 6 | 0, a5);
    caml_call3(Core_Uniform_array[24], t, offset + 7 | 0, a6);
    caml_call3(Core_Uniform_array[24], t, offset + 8 | 0, a7);
    caml_call3(Core_Uniform_array[24], t, offset + 9 | 0, a8);
    caml_call3(Core_Uniform_array[24], t, offset + 10 | 0, a9);
    caml_call3(Core_Uniform_array[24], t, offset + 11 | 0, a10);
    caml_call3(Core_Uniform_array[24], t, offset + 12 | 0, a11);
    caml_call3(Core_Uniform_array[24], t, offset + 13 | 0, a12);
    return pointer;
   }
   function new14
   (t, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13){
    var pointer = malloc(t), offset = header_index(pointer);
    caml_call3(Core_Uniform_array[24], t, offset + 1 | 0, a0);
    caml_call3(Core_Uniform_array[24], t, offset + 2 | 0, a1);
    caml_call3(Core_Uniform_array[24], t, offset + 3 | 0, a2);
    caml_call3(Core_Uniform_array[24], t, offset + 4 | 0, a3);
    caml_call3(Core_Uniform_array[24], t, offset + 5 | 0, a4);
    caml_call3(Core_Uniform_array[24], t, offset + 6 | 0, a5);
    caml_call3(Core_Uniform_array[24], t, offset + 7 | 0, a6);
    caml_call3(Core_Uniform_array[24], t, offset + 8 | 0, a7);
    caml_call3(Core_Uniform_array[24], t, offset + 9 | 0, a8);
    caml_call3(Core_Uniform_array[24], t, offset + 10 | 0, a9);
    caml_call3(Core_Uniform_array[24], t, offset + 11 | 0, a10);
    caml_call3(Core_Uniform_array[24], t, offset + 12 | 0, a11);
    caml_call3(Core_Uniform_array[24], t, offset + 13 | 0, a12);
    caml_call3(Core_Uniform_array[24], t, offset + 14 | 0, a13);
    return pointer;
   }
   function get(t, p, slot){
    var _bS_ = slot_index(p, slot);
    return caml_call2(Core_Uniform_array[20], t, _bS_);
   }
   function unsafe_get(t, p, slot){
    var _bR_ = slot_index(p, slot);
    return caml_call2(Core_Uniform_array[21], t, _bR_);
   }
   function set(t, p, slot, x){
    var _bQ_ = slot_index(p, slot);
    return caml_call3(Core_Uniform_array[23], t, _bQ_, x);
   }
   function unsafe_set(t, p, slot, x){
    var _bP_ = slot_index(p, slot);
    return caml_call3(Core_Uniform_array[24], t, _bP_, x);
   }
   function get_tuple(t, pointer){
    var metadata$0 = metadata(t), len = metadata$0[1];
    if(caml_call2(Core[90], len, 1)) return get(t, pointer, Slot[3]);
    var _bO_ = first_slot_index(pointer);
    return caml_call3(Core_Uniform_array[44], t, _bO_, len);
   }
   function create$1(slots, capacity){
    return create_with_dummy(slots, capacity, 0);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_tuple_pool);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Tuple_pool);
   function _aP_(Pool){
    var Slots = Pool[1], Slot = Pool[2];
    function sexp_of_t(of_slots_077, param){
     var
      is_valid_079 = param[1],
      pointer_081 = param[2],
      arg_082 = caml_call2(Pool[3][1], of_slots_077, pointer_081),
      bnds_078 = [0, [1, [0, _aL_, [0, arg_082, 0]]], 0],
      arg_080 = caml_call1(Core[323], is_valid_079),
      bnds_078$0 = [0, [1, [0, _aM_, [0, arg_080, 0]]], bnds_078];
     return [1, bnds_078$0];
    }
    var
     Typename_of_t = caml_call1(Typerep_lib_Make_typename[2], [0, name$1]),
     typename_of_t = Typename_of_t[2];
    function typerep_of_t(of_slots){
     var name_of_t = caml_call1(Typename_of_t[1], of_slots);
     return [9,
             [0,
              name_of_t,
              [0,
               [246,
                function(param){
                 var _bF_ = 1;
                 function _bG_(t){return t[1];}
                 var
                  _bH_ = caml_call2(Typerep_lib_Typename[1], 0, 0),
                  field0 =
                    caml_call1
                     (Typerep_lib_Std[1][8][7],
                      [0, cst_is_valid, Core[326], 0, _bH_, _bG_, _bF_]),
                  _bI_ = 0;
                 function _bJ_(t){return t[2];}
                 var
                  _bK_ = caml_call2(Typerep_lib_Typename[1], 0, 0),
                  _bL_ =
                    [0,
                     cst_pointer,
                     caml_call1(Pool[3][2], of_slots),
                     1,
                     _bK_,
                     _bJ_,
                     _bI_],
                  field1 = caml_call1(Typerep_lib_Std[1][8][7], _bL_),
                  typename = caml_call1(Typerep_lib_Std[1][1][2], name_of_t),
                  _bM_ = caml_call1(Typerep_lib_Typerep_obj[3], 0),
                  _bN_ = [0, caml_call1(Typerep_lib_Typerep_obj[3], 0), _bM_],
                  has_double_array_tag =
                    caml_call1(Typerep_lib_Typerep_obj[4], _bN_),
                  fields = [0, [0, field0], [0, field1]];
                 function create(param){
                  var
                   get = param[1],
                   is_valid = caml_call1(get, field0),
                   pointer = caml_call1(get, field1);
                  return [0, is_valid, pointer];
                 }
                 return [7,
                         caml_call1
                          (Typerep_lib_Std[1][10][7],
                           [0, typename, fields, has_double_array_tag, create])];
                }]]]];
    }
    function create(pointer){return [0, 1, pointer];}
    function null$0(param){return [0, 0, caml_call1(Pool[3][4], 0)];}
    function phys_compare(t1, t2){
     return caml_call2(Pool[3][6], t1[2], t2[2]);
    }
    function phys_equal(t1, t2){return caml_call2(Pool[3][7], t1[2], t2[2]);}
    function is_null(t){return caml_call1(Pool[3][5], t[2]);}
    function follow(t){
     if(1 - t[1])
      caml_call5
       (failwiths,
        0,
        _aO_,
        cst_attempt_to_use_invalid_poi,
        t,
        function(x_083){
         return sexp_of_t(function(param){return _aN_;}, x_083);
        });
     return t[2];
    }
    function invalidate(t){t[1] = 0; return 0;}
    var
     Id = Pool[3][8],
     sexp_of_t$0 = Pool[4],
     invariant = Pool[5],
     length = Pool[12];
    function pointer_is_valid(t, param){
     var is_valid = param[1], pointer = param[2];
     return is_valid ? caml_call2(Pool[6], t, pointer) : is_valid;
    }
    function id_of_pointer(t, pointer){
     return caml_call2(Pool[7], t, pointer[2]);
    }
    function pointer_of_id_exn(t, id){
     var
      pointer = caml_call2(Pool[8], t, id),
      is_valid = caml_call2(Pool[6], t, pointer);
     return [0, is_valid, pointer];
    }
    var
     create$0 = Pool[9],
     capacity = Pool[11],
     max_capacity = Pool[10],
     grow = Pool[13],
     is_full = Pool[14];
    function get_tuple(t, p){
     var _bE_ = follow(p);
     return caml_call2(Pool[31], t, _bE_);
    }
    function get(t, p){
     var _bD_ = follow(p);
     return caml_call2(Pool[32], t, _bD_);
    }
    function unsafe_get(t, p){
     var _bC_ = follow(p);
     return caml_call2(Pool[33], t, _bC_);
    }
    function set(t, p, slot, v){
     var _bB_ = follow(p);
     return caml_call4(Pool[34], t, _bB_, slot, v);
    }
    function unsafe_set(t, p, slot, v){
     var _bA_ = follow(p);
     return caml_call4(Pool[35], t, _bA_, slot, v);
    }
    function unsafe_free(t, p){
     var _bz_ = follow(p);
     caml_call2(Pool[16], t, _bz_);
     return invalidate(p);
    }
    function free(t, p){
     var _by_ = follow(p);
     caml_call2(Pool[15], t, _by_);
     return invalidate(p);
    }
    function new1(t, a0){return create(caml_call2(Pool[17], t, a0));}
    function new2(t, a0, a1){return create(caml_call3(Pool[18], t, a0, a1));}
    function new3(t, a0, a1, a2){
     return create(caml_call4(Pool[19], t, a0, a1, a2));
    }
    function new4(t, a0, a1, a2, a3){
     return create(caml_call5(Pool[20], t, a0, a1, a2, a3));
    }
    function new5(t, a0, a1, a2, a3, a4){
     return create(caml_call6(Pool[21], t, a0, a1, a2, a3, a4));
    }
    function new6(t, a0, a1, a2, a3, a4, a5){
     return create(caml_call7(Pool[22], t, a0, a1, a2, a3, a4, a5));
    }
    function new7(t, a0, a1, a2, a3, a4, a5, a6){
     return create(caml_call8(Pool[23], t, a0, a1, a2, a3, a4, a5, a6));
    }
    function new8(t, a0, a1, a2, a3, a4, a5, a6, a7){
     return create(caml_call9(Pool[24], t, a0, a1, a2, a3, a4, a5, a6, a7));
    }
    function new9(t, a0, a1, a2, a3, a4, a5, a6, a7, a8){
     return create
             (caml_call10(Pool[25], t, a0, a1, a2, a3, a4, a5, a6, a7, a8));
    }
    function new10(t, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9){
     return create
             (caml_call11(Pool[26], t, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9));
    }
    function new11(t, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10){
     return create
             (caml_call12
               (Pool[27], t, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10));
    }
    function new12(t, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11){
     return create
             (caml_call13
               (Pool[28], t, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11));
    }
    function new13(t, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12){
     return create
             (caml_call14
               (Pool[29],
                t,
                a0,
                a1,
                a2,
                a3,
                a4,
                a5,
                a6,
                a7,
                a8,
                a9,
                a10,
                a11,
                a12));
    }
    function new14
    (t, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13){
     return create
             (caml_call15
               (Pool[30],
                t,
                a0,
                a1,
                a2,
                a3,
                a4,
                a5,
                a6,
                a7,
                a8,
                a9,
                a10,
                a11,
                a12,
                a13));
    }
    return [0,
            Slots,
            Slot,
            [0,
             sexp_of_t,
             typerep_of_t,
             typename_of_t,
             null$0,
             is_null,
             phys_compare,
             phys_equal,
             Id],
            sexp_of_t$0,
            invariant,
            pointer_is_valid,
            id_of_pointer,
            pointer_of_id_exn,
            create$0,
            max_capacity,
            capacity,
            length,
            grow,
            is_full,
            free,
            unsafe_free,
            new1,
            new2,
            new3,
            new4,
            new5,
            new6,
            new7,
            new8,
            new9,
            new10,
            new11,
            new12,
            new13,
            new14,
            get_tuple,
            get,
            unsafe_get,
            set,
            unsafe_set];
   }
   function _aQ_(Pool){
    var check_invariant = [0, 1], show_messages = [0, 1];
    function debug(name, ts, arg, sexp_of_arg, sexp_of_result, f){
     if(check_invariant[1]){
      var _bs_ = function(_bx_){return 0;}, _bt_ = caml_call1(Pool[5], _bs_);
      caml_call2(Core_List[19], ts, _bt_);
     }
     if(show_messages[1]){
      var _bu_ = concat([0, prefix, [0, name, 0]]);
      caml_call3(Core_Debug[2], _bu_, arg, sexp_of_arg);
     }
     var result_or_exn = caml_call1(Core_Result[54], f);
     if(show_messages[1]){
      var
       _bv_ =
         function(x_048){
          return caml_call3(Core_Result[15], sexp_of_result, Core[625], x_048);
         },
       _bw_ = concat([0, prefix, [0, name, _ap_]]);
      caml_call3(Core_Debug[2], _bw_, result_or_exn, _bv_);
     }
     return caml_call1(Core_Result[40], result_or_exn);
    }
    var
     Slots = Pool[1],
     Slot = Pool[2],
     sexp_of_t = Pool[3][1],
     Typename_of_t = caml_call1(Typerep_lib_Make_typename[2], [0, name$0]),
     typename_of_t = Typename_of_t[2];
    function typerep_of_t(of_slots){
     var name_of_t = caml_call1(Typename_of_t[1], of_slots);
     return [9,
             [0,
              name_of_t,
              [0,
               [246, function(_br_){return caml_call1(Pool[3][2], of_slots);}]]]];
    }
    function phys_compare(t1, t2){
     function _bp_(param){return caml_call2(Pool[3][6], t1, t2);}
     var _bq_ = Core[389];
     return debug
             (cst_Pointer_phys_compare,
              0,
              [0, t1, t2],
              function(param){
               var
                arg1_052 = param[2],
                arg0_051 = param[1],
                res0_053 =
                  caml_call2
                   (sexp_of_t, function(param){return _aq_;}, arg0_051),
                res1_054 =
                  caml_call2
                   (sexp_of_t, function(param){return _ar_;}, arg1_052);
               return [1, [0, res0_053, [0, res1_054, 0]]];
              },
              _bq_,
              _bp_);
    }
    function phys_equal(t1, t2){
     function _bn_(param){return caml_call2(Pool[3][7], t1, t2);}
     var _bo_ = Core[323];
     return debug
             (cst_Pointer_phys_equal,
              0,
              [0, t1, t2],
              function(param){
               var
                arg1_056 = param[2],
                arg0_055 = param[1],
                res0_057 =
                  caml_call2
                   (sexp_of_t, function(param){return _as_;}, arg0_055),
                res1_058 =
                  caml_call2
                   (sexp_of_t, function(param){return _at_;}, arg1_056);
               return [1, [0, res0_057, [0, res1_058, 0]]];
              },
              _bo_,
              _bn_);
    }
    function is_null(t){
     function _bl_(param){return caml_call1(Pool[3][5], t);}
     var _bm_ = Core[323];
     return debug
             (cst_Pointer_is_null,
              0,
              t,
              function(x_059){
               return caml_call2
                       (sexp_of_t, function(param){return _au_;}, x_059);
              },
              _bm_,
              _bl_);
    }
    var
     null$0 = Pool[3][4],
     _aT_ = Pool[3][8][5],
     _aU_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t), 0, _aT_], 0],
     _aV_ = caml_call1(Bin_shape[4][1], cst_tuple_pool_src_tuple_pool_$8),
     group = caml_call2(Bin_prot_Shape[2], _aV_, _aU_),
     _aW_ = caml_call1(Bin_shape[2][1], cst_t$0),
     bin_shape_t = caml_call1(caml_call2(Bin_prot_Shape[10], group, _aW_), 0),
     bin_size_t = Pool[3][8][1],
     bin_write_t = Pool[3][8][2],
     bin_writer_t = [0, bin_size_t, bin_write_t],
     bin_read_t = Pool[3][8][4],
     bin_read_t$0 = Pool[3][8][3],
     bin_reader_t = [0, bin_read_t$0, bin_read_t],
     bin_t = [0, bin_shape_t, bin_writer_t, bin_reader_t],
     t_of_sexp = Pool[3][8][9],
     sexp_of_t$0 = Pool[3][8][10];
    function of_int63(i){
     function _bk_(param){return caml_call1(Pool[3][8][12], i);}
     return debug
             (cst_Pointer_Id_of_int63,
              0,
              i,
              Core_Int63[103],
              sexp_of_t$0,
              _bk_);
    }
    function to_int63(t){
     function _bj_(param){return caml_call1(Pool[3][8][11], t);}
     return debug
             (cst_Pointer_Id_to_int63,
              0,
              t,
              sexp_of_t$0,
              Core_Int63[103],
              _bj_);
    }
    var sexp_of_t$1 = Pool[4], invariant = Pool[5], length = Pool[12];
    function id_of_pointer(t, pointer){
     function _bi_(param){return caml_call2(Pool[7], t, pointer);}
     return debug
             (cst_id_of_pointer,
              [0, t, 0],
              pointer,
              function(x_063){
               return caml_call2
                       (sexp_of_t, function(param){return _av_;}, x_063);
              },
              sexp_of_t$0,
              _bi_);
    }
    function pointer_of_id_exn(t, id){
     function _bh_(param){return caml_call2(Pool[8], t, id);}
     return debug
             (cst_pointer_of_id_exn,
              [0, t, 0],
              id,
              sexp_of_t$0,
              function(x_064){
               return caml_call2
                       (sexp_of_t, function(param){return _aw_;}, x_064);
              },
              _bh_);
    }
    function pointer_is_valid(t, pointer){
     function _bf_(param){return caml_call2(Pool[6], t, pointer);}
     var _bg_ = Core[323];
     return debug
             (cst_pointer_is_valid,
              [0, t, 0],
              pointer,
              function(x_065){
               return caml_call2
                       (sexp_of_t, function(param){return _ax_;}, x_065);
              },
              _bg_,
              _bf_);
    }
    function create(slots, capacity, dummy){
     function _bd_(param){return caml_call3(Pool[9], slots, capacity, dummy);}
     function _be_(x_066){
      return caml_call2(sexp_of_t$1, function(param){return _ay_;}, x_066);
     }
     return debug(cst_create, 0, capacity, Core[389], _be_, _bd_);
    }
    function max_capacity(slots_per_tuple){
     function _bc_(param){return caml_call1(Pool[10], slots_per_tuple);}
     return debug
             (cst_max_capacity,
              0,
              slots_per_tuple,
              Core[389],
              Core[389],
              _bc_);
    }
    function capacity(t){
     function _ba_(param){return caml_call1(Pool[11], t);}
     var _bb_ = Core[389];
     return debug
             (cst_capacity$0,
              [0, t, 0],
              t,
              function(x_067){
               return caml_call2
                       (sexp_of_t$1, function(param){return _az_;}, x_067);
              },
              _bb_,
              _ba_);
    }
    function grow(capacity, t){
     function _a__(param){return caml_call2(Pool[13], capacity, t);}
     function _a$_(x_069){
      return caml_call2(sexp_of_t$1, function(param){return _aA_;}, x_069);
     }
     return debug
             (cst_grow,
              [0, t, 0],
              [0, -1011154630, capacity],
              function(param){
               var v_068 = param[2];
               return [1,
                       [0, _aB_, [0, caml_call2(Core[515], Core[389], v_068), 0]]];
              },
              _a$_,
              _a__);
    }
    function is_full(t){
     function _a8_(param){return caml_call1(Pool[14], t);}
     var _a9_ = Core[323];
     return debug
             (cst_is_full,
              [0, t, 0],
              t,
              function(x_070){
               return caml_call2
                       (sexp_of_t$1, function(param){return _aC_;}, x_070);
              },
              _a9_,
              _a8_);
    }
    function unsafe_free(t, p){
     function _a6_(param){return caml_call2(Pool[16], t, p);}
     var _a7_ = Core[620];
     return debug
             (cst_unsafe_free,
              [0, t, 0],
              p,
              function(x_071){
               return caml_call2
                       (sexp_of_t, function(param){return _aD_;}, x_071);
              },
              _a7_,
              _a6_);
    }
    function free(t, p){
     function _a4_(param){return caml_call2(Pool[15], t, p);}
     var _a5_ = Core[620];
     return debug
             (cst_free,
              [0, t, 0],
              p,
              function(x_072){
               return caml_call2
                       (sexp_of_t, function(param){return _aE_;}, x_072);
              },
              _a5_,
              _a4_);
    }
    function debug_new(t, f){
     function _a3_(x_073){
      return caml_call2(sexp_of_t, function(param){return _aF_;}, x_073);
     }
     return debug(cst_new, [0, t, 0], 0, Core[620], _a3_, f);
    }
    function new1(t, a0){
     return debug_new(t, function(param){return caml_call2(Pool[17], t, a0);});
    }
    function new2(t, a0, a1){
     return debug_new
             (t, function(param){return caml_call3(Pool[18], t, a0, a1);});
    }
    function new3(t, a0, a1, a2){
     return debug_new
             (t, function(param){return caml_call4(Pool[19], t, a0, a1, a2);});
    }
    function new4(t, a0, a1, a2, a3){
     return debug_new
             (t,
              function(param){return caml_call5(Pool[20], t, a0, a1, a2, a3);});
    }
    function new5(t, a0, a1, a2, a3, a4){
     return debug_new
             (t,
              function(param){
               return caml_call6(Pool[21], t, a0, a1, a2, a3, a4);
              });
    }
    function new6(t, a0, a1, a2, a3, a4, a5){
     return debug_new
             (t,
              function(param){
               return caml_call7(Pool[22], t, a0, a1, a2, a3, a4, a5);
              });
    }
    function new7(t, a0, a1, a2, a3, a4, a5, a6){
     return debug_new
             (t,
              function(param){
               return caml_call8(Pool[23], t, a0, a1, a2, a3, a4, a5, a6);
              });
    }
    function new8(t, a0, a1, a2, a3, a4, a5, a6, a7){
     return debug_new
             (t,
              function(param){
               return caml_call9(Pool[24], t, a0, a1, a2, a3, a4, a5, a6, a7);
              });
    }
    function new9(t, a0, a1, a2, a3, a4, a5, a6, a7, a8){
     return debug_new
             (t,
              function(param){
               return caml_call10
                       (Pool[25], t, a0, a1, a2, a3, a4, a5, a6, a7, a8);
              });
    }
    function new10(t, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9){
     return debug_new
             (t,
              function(param){
               return caml_call11
                       (Pool[26], t, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9);
              });
    }
    function new11(t, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10){
     return debug_new
             (t,
              function(param){
               return caml_call12
                       (Pool[27], t, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
              });
    }
    function new12(t, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11){
     return debug_new
             (t,
              function(param){
               return caml_call13
                       (Pool[28],
                        t,
                        a0,
                        a1,
                        a2,
                        a3,
                        a4,
                        a5,
                        a6,
                        a7,
                        a8,
                        a9,
                        a10,
                        a11);
              });
    }
    function new13(t, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12){
     return debug_new
             (t,
              function(param){
               return caml_call14
                       (Pool[29],
                        t,
                        a0,
                        a1,
                        a2,
                        a3,
                        a4,
                        a5,
                        a6,
                        a7,
                        a8,
                        a9,
                        a10,
                        a11,
                        a12);
              });
    }
    function new14
    (t, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13){
     return debug_new
             (t,
              function(param){
               return caml_call15
                       (Pool[30],
                        t,
                        a0,
                        a1,
                        a2,
                        a3,
                        a4,
                        a5,
                        a6,
                        a7,
                        a8,
                        a9,
                        a10,
                        a11,
                        a12,
                        a13);
              });
    }
    function get_tuple(t, pointer){
     function _a1_(param){return caml_call2(Pool[31], t, pointer);}
     function _a2_(param){return _aG_;}
     return debug
             (cst_get_tuple,
              [0, t, 0],
              pointer,
              function(x_074){
               return caml_call2
                       (sexp_of_t, function(param){return _aH_;}, x_074);
              },
              _a2_,
              _a1_);
    }
    function debug_get(name, f, t, pointer){
     function _aZ_(param){return caml_call2(f, t, pointer);}
     function _a0_(param){return _aI_;}
     return debug
             (name,
              [0, t, 0],
              pointer,
              function(x_075){
               return caml_call2
                       (sexp_of_t, function(param){return _aJ_;}, x_075);
              },
              _a0_,
              _aZ_);
    }
    function get(t, pointer, slot){
     return caml_call1(debug_get(cst_get, Pool[32], t, pointer), slot);
    }
    function unsafe_get(t, pointer, slot){
     return caml_call1(debug_get(cst_unsafe_get, Pool[33], t, pointer), slot);
    }
    function debug_set(name, f, t, pointer, slot, a){
     function _aX_(param){return caml_call4(f, t, pointer, slot, a);}
     var _aY_ = Core[620];
     return debug
             (name,
              [0, t, 0],
              pointer,
              function(x_076){
               return caml_call2
                       (sexp_of_t, function(param){return _aK_;}, x_076);
              },
              _aY_,
              _aX_);
    }
    function set(t, pointer, slot, a){
     return debug_set(cst_set, Pool[34], t, pointer, slot, a);
    }
    function unsafe_set(t, pointer, slot, a){
     return debug_set(cst_unsafe_set, Pool[35], t, pointer, slot, a);
    }
    return [0,
            Slots,
            Slot,
            [0,
             sexp_of_t,
             typerep_of_t,
             typename_of_t,
             null$0,
             is_null,
             phys_compare,
             phys_equal,
             [0,
              bin_size_t,
              bin_write_t,
              bin_read_t$0,
              bin_read_t,
              bin_shape_t,
              bin_writer_t,
              bin_reader_t,
              bin_t,
              t_of_sexp,
              sexp_of_t$0,
              to_int63,
              of_int63]],
            sexp_of_t$1,
            invariant,
            pointer_is_valid,
            id_of_pointer,
            pointer_of_id_exn,
            create,
            max_capacity,
            capacity,
            length,
            grow,
            is_full,
            free,
            unsafe_free,
            new1,
            new2,
            new3,
            new4,
            new5,
            new6,
            new7,
            new8,
            new9,
            new10,
            new11,
            new12,
            new13,
            new14,
            get_tuple,
            get,
            unsafe_get,
            set,
            unsafe_set,
            check_invariant,
            show_messages];
   }
   var
    Tuple_pool =
      [0,
       Tuple_pool_Tuple_type[1],
       Slot,
       [0,
        sexp_of_t$1,
        typerep_of_t,
        typename_of_t,
        null$0,
        is_null,
        phys_compare,
        phys_equal,
        _s_],
       sexp_of_t$3,
       invariant$1,
       pointer_is_valid,
       id_of_pointer,
       pointer_of_id_exn,
       create$0,
       max_capacity,
       capacity$1,
       length$1,
       grow,
       is_full,
       free,
       unsafe_free,
       new1,
       new2,
       new3,
       new4,
       new5,
       new6,
       new7,
       new8,
       new9,
       new10,
       new11,
       new12,
       new13,
       new14,
       get_tuple,
       get,
       unsafe_get,
       set,
       unsafe_set,
       [0,
        Tuple_pool_Tuple_type[1],
        Slot,
        [0,
         sexp_of_t$1,
         typerep_of_t,
         typename_of_t,
         null$0,
         is_null,
         phys_compare,
         phys_equal,
         _s_],
        sexp_of_t$3,
        invariant$1,
        pointer_is_valid,
        id_of_pointer,
        pointer_of_id_exn,
        max_capacity,
        capacity$1,
        length$1,
        grow,
        is_full,
        free,
        unsafe_free,
        new1,
        new2,
        new3,
        new4,
        new5,
        new6,
        new7,
        new8,
        new9,
        new10,
        new11,
        new12,
        new13,
        new14,
        get_tuple,
        get,
        unsafe_get,
        set,
        unsafe_set,
        create$1],
       _aQ_,
       _aP_];
   runtime.caml_register_global(179, Tuple_pool, cst_Tuple_pool$0);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
