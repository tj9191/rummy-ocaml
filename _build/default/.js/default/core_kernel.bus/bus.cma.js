// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Bus
//# unitInfo: Requires: Base__Backtrace, Base__Invariant, Core, Core__Array, Core__Error, Core__Gc, Core__Info, Core__Int, Core__List, Core__Option, Core__Option_array, Core__Sexp, Core__Source_code_position, Core__Unique_id, Inline_test_config, Ppx_assert_lib__Runtime, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Arity1 = "Arity1",
    cst_Arity2 = "Arity2",
    cst_Arity3 = "Arity3",
    cst_Arity4 = "Arity4",
    cst_Arity5 = "Arity5",
    cst_Bus$0 = "Bus",
    cst$0 = "_",
    cst_backtrace = "backtrace",
    cst_bus$0 = "bus",
    cst_bus_src_bus_ml$1 = "bus/src/bus.ml",
    cst_exn = "exn",
    cst_subscribed_from = "subscribed_from",
    cst_subscribers$0 = "subscribers",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    pos$0 = "bus/src/bus.ml:866:21",
    pos = "bus/src/bus.ml:865:21",
    all = [0, 0, [0, 1, [0, 2, 0]]],
    cst = "",
    Core_Error = global_data.Core__Error,
    Core = global_data.Core,
    Ppx_assert_lib_Runtime = global_data.Ppx_assert_lib__Runtime,
    Inline_test_config = global_data.Inline_test_config,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Core_Sexp = global_data.Core__Sexp,
    Core_Source_code_position = global_data.Core__Source_code_position,
    Core_Option_array = global_data.Core__Option_array,
    Core_Int = global_data.Core__Int,
    Base_Backtrace = global_data.Base__Backtrace,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Core_List = global_data.Core__List,
    Assert_failure = global_data.Assert_failure,
    Core_Option = global_data.Core__Option,
    Base_Invariant = global_data.Base__Invariant,
    Core_Array = global_data.Core__Array,
    Core_Info = global_data.Core__Info,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Core_Unique_id = global_data.Core__Unique_id;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bus$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bus$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_bus_src_bus_ml$1);
   caml_call2(Ppx_inline_test_lib[6], cst_bus$0, "bus.ml");
   var
    _aB_ = [0, cst_bus_src_bus_ml$1, 880, 26388, 26412],
    _aC_ = [0, cst_bus_src_bus_ml$1, 881, 26430, 26454],
    _aD_ = [0, cst_bus_src_bus_ml$1, 882, 26472, 26496],
    _aE_ = [0, cst_bus_src_bus_ml$1, 883, 26514, 26538],
    _aF_ = [0, cst_bus_src_bus_ml$1, 884, 26556, 26580],
    _aA_ = [0, cst_bus_src_bus_ml$1, 859, 25410, 25444],
    cst_bus_src_bus_ml = cst_bus_src_bus_ml$1,
    cst_write_doesn_t_allocate_whe = "write doesn't allocate when inlined",
    _ax_ = [0, cst$0],
    _aw_ = [0, cst$0],
    cst_Bus_fold_exn_called_after_ = "Bus.fold_exn called after first write",
    _ay_ = [0, cst_bus_src_bus_ml$1, 841, 24790, 24810],
    _ar_ = [0, cst_Arity1],
    _as_ = [0, cst_Arity2],
    _at_ = [0, cst_Arity3],
    _au_ = [0, cst_Arity4],
    _av_ = [0, cst_Arity5],
    _ap_ = [0, cst$0],
    _ao_ = [0, cst$0],
    cst_Bus_iter_exn_called_after_ = "Bus.iter_exn called after first write",
    _aq_ = [0, cst_bus_src_bus_ml$1, 811, 23923, 23943],
    _ak_ = [0, cst$0],
    _aj_ = [0, cst$0],
    _al_ = [0, cst_bus$0],
    _am_ = [0, cst_subscribed_from],
    cst_Bus_subscribe_exn_called_a =
      "Bus.subscribe_exn called after first write",
    _an_ = [0, cst_bus_src_bus_ml$1, 767, 22321, 22333],
    _ac_ = [0, "original_error"],
    _ad_ = [0, cst_backtrace],
    _ae_ = [0, cst_exn],
    cst_Bus_subscriber_s_on_callba =
      "Bus subscriber's [on_callback_raise] raised",
    _af_ = [0, cst$0],
    _ag_ = [0, "subscriber"],
    _ah_ = [0, cst_backtrace],
    _ai_ = [0, cst_exn],
    cst_Bus_subscriber_raised = "Bus subscriber raised",
    _ab_ = [0, cst_bus_src_bus_ml$1, 439, 19],
    _aa_ = [0, cst_bus_src_bus_ml$1, 425, 2],
    _Z_ = [0, cst$0],
    _Y_ = [0, cst$0],
    _W_ = [0, cst$0],
    _V_ = [0, cst$0],
    cst_Bus_write_called_on_closed = "[Bus.write] called on closed bus",
    _X_ = [0, cst_bus_src_bus_ml$1, 349, 9833, 9853],
    cst_Bus_write_called_from_call =
      "[Bus.write] called from callback on the same bus",
    ___ = [0, cst_bus_src_bus_ml$1, 352, 9958, 9970],
    _$_ = [0, cst_bus_src_bus_ml$1, 356, 19],
    _T_ = [0, cst$0],
    _S_ = [0, cst$0],
    _R_ = [0, cst_bus_src_bus_ml$1, 313, 54],
    _P_ = [0, cst_bus_src_bus_ml$1, 326, 15],
    _Q_ = [0, cst_bus_src_bus_ml$1, 327, 18],
    _O_ = [0, cst_bus_src_bus_ml$1, 305, 11],
    _N_ = [0, cst_bus_src_bus_ml$1, 309, 18],
    _U_ = [0, cst_bus_src_bus_ml$1, 298, 8050, 8072],
    _K_ = [0, cst$0],
    _E_ = [0, cst$0],
    _F_ = [0, cst_subscribers$0],
    _G_ = [0, "write_ever_called"],
    _H_ = [0, "state"],
    _I_ = [0, "on_subscription_after_first_write"],
    _J_ = [0, "created_from"],
    _L_ = [0, "callback_arity"],
    _M_ = [0, "name"],
    _w_ = [0, cst$0],
    _x_ = [0, cst_bus_src_bus_ml$1, 209, 5637, 5661],
    _q_ = [0, 1],
    _r_ = [0, cst_subscribed_from],
    _s_ = [0, "extract_exn"],
    _t_ = [0, "on_callback_raise"],
    _u_ = [0, "subscribers_index"],
    _v_ = [0, "Bus.Subscriber.t"],
    _l_ = [0, "Allow"],
    _m_ = [0, "Allow_and_send_last_value"],
    _n_ = [0, "Raise"],
    _j_ = [0, cst$0],
    _k_ = [0, "arity"],
    cst_Cannot_save_last_value_whe =
      "Cannot save last value when using local args",
    _d_ = [0, cst_Arity1],
    _e_ = [0, "Arity1_local"],
    _f_ = [0, cst_Arity2],
    _g_ = [0, cst_Arity3],
    _h_ = [0, cst_Arity4],
    _i_ = [0, cst_Arity5],
    _a_ = [0, "Closed"],
    _b_ = [0, "Write_in_progress"],
    _c_ = [0, "Ok_to_write"],
    cst_callback = "callback",
    cst_callbacks = "callbacks",
    cst_subscribers = cst_subscribers$0,
    cst_num_subscribers = "num_subscribers",
    cst_bus_src_bus_ml$0 = cst_bus_src_bus_ml$1,
    cst_bus = cst_bus$0,
    cst_Bus = cst_Bus$0;
   function sexp_of_t(of_a_002, param){
    switch(param){
      case 0:
       return _d_;
      case 1:
       return _e_;
      case 2:
       return _f_;
      case 3:
       return _g_;
      case 4:
       return _h_;
      default: return _i_;
    }
   }
   function sexp_of_t$0(param){
    switch(param){case 0: return _l_;case 1: return _m_;default: return _n_;
    }
   }
   var Bus_id = caml_call1(Core_Unique_id[2], 0);
   function callback(r){return r[2];}
   function _o_(r, v){return [0, r[1], v, r[3], r[4], r[5], r[6], r[7]];}
   var
    _p_ = 0,
    callback$0 =
      [0, function(param){return 0;}, cst_callback, _p_, callback, _o_];
   function sexp_of_t$1(param, _ck_){
    var
     extract_exn = _ck_[3],
     subscribers_index = _ck_[4],
     subscribed_from = _ck_[7],
     on_callback_raise = _ck_[5],
     _cl_ = 0,
     match = Ppx_inline_test_lib[1] ? 0 : [0, subscribers_index],
     match$0 = extract_exn ? _q_ : 0,
     match$1 =
       [0,
        [1,
         [0,
          _r_,
          [0, caml_call1(Core_Source_code_position[1], subscribed_from), 0]]],
        0];
    if(match$0)
     var
      v = match$0[1],
      match$2 = [0, [1, [0, _s_, [0, caml_call1(Core[323], v), 0]]], match$1];
    else
     var match$2 = match$1;
    if(on_callback_raise)
     var
      _cm_ = 0,
      _cn_ = function(_cp_){return 0;},
      match$3 =
        [0,
         [1, [0, _t_, [0, caml_call1(Sexplib0_Sexp_conv[24], _cn_), _cm_]]],
         match$2];
    else
     var match$3 = match$2;
    if(match)
     var
      v$0 = match[1],
      res = [0, [1, [0, _u_, [0, caml_call1(Core[389], v$0), 0]]], match$3];
    else
     var res = match$3;
    if(res[2]) var _co_ = [1, res]; else var h = res[1], _co_ = h;
    return [1, [0, _v_, [0, _co_, _cl_]]];
   }
   function callbacks(r){return r[12];}
   function set_callbacks(r, v){r[12] = v; return 0;}
   function subscribers(r){return r[11];}
   function set_subscribers(r, v){r[11] = v; return 0;}
   function num_subscribers(r){return r[10];}
   function set_num_subscribers(r, v){r[10] = v; return 0;}
   function callback_arity(r){return r[3];}
   function _y_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            v,
            r[13]];
   }
   var
    _z_ = [0, set_callbacks],
    callbacks$0 =
      [0, function(param){return 0;}, cst_callbacks, _z_, callbacks, _y_];
   function _A_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            v,
            r[12],
            r[13]];
   }
   var
    _B_ = [0, set_subscribers],
    subscribers$0 =
      [0, function(param){return 0;}, cst_subscribers, _B_, subscribers, _A_];
   function _C_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            v,
            r[11],
            r[12],
            r[13]];
   }
   var
    _D_ = [0, set_num_subscribers],
    num_subscribers$0 =
      [0,
       function(param){return 0;},
       cst_num_subscribers,
       _D_,
       num_subscribers,
       _C_];
   function sexp_of_bus(param, _b8_, _b7_){
    var
     on_subscription_after_first_wr = _b7_[5],
     created_from = _b7_[4],
     callback_arity = _b7_[3],
     name = _b7_[2],
     state = _b7_[8],
     write_ever_called = _b7_[9],
     num_subscribers = _b7_[10],
     subscribers = _b7_[11];
    function _b9_(i){
     return caml_call2(Core_Option_array[44], subscribers, i);
    }
    var
     subscribers$0 = caml_call2(Core_Array[56], num_subscribers, _b9_),
     _b__ = 0,
     _b$_ = 0;
    function _ca_(param){return _E_;}
    function _cb_(_cj_){return sexp_of_t$1(_ca_, _cj_);}
    var
     _cc_ =
       [0,
        [1,
         [0, _F_, [0, caml_call2(Core_Array[20], _cb_, subscribers$0), _b$_]]],
        _b__],
     _cd_ =
       [0,
        [1, [0, _G_, [0, caml_call1(Core[323], write_ever_called), 0]]],
        _cc_],
     _ce_ = 0;
    switch(state){
      case 0:
       var _cf_ = _a_; break;
      case 1:
       var _cf_ = _b_; break;
      default: var _cf_ = _c_;
    }
    var
     _cg_ =
       [0,
        [1, [0, _I_, [0, sexp_of_t$0(on_subscription_after_first_wr), 0]]],
        [0, [1, [0, _H_, [0, _cf_, _ce_]]], _cd_]],
     _ch_ =
       [0,
        [1,
         [0,
          _J_,
          [0, caml_call1(Core_Source_code_position[1], created_from), 0]]],
        _cg_],
     _ci_ = 0,
     match =
       [0,
        [1,
         [0,
          _L_,
          [0, sexp_of_t(function(param){return _K_;}, callback_arity), _ci_]]],
        _ch_];
    if(name)
     var
      v = name[1],
      res = [0, [1, [0, _M_, [0, caml_call1(Core_Info[9], v), 0]]], match];
    else
     var res = match;
    if(res[2]) return [1, res];
    var h = res[1];
    return h;
   }
   function read_only(t){return t;}
   function invariant(invariant_a, param, t){
    function _bU_(param){
     function check(f){return caml_call2(Base_Invariant[2], t, f);}
     var
      callbacks_fun =
        check
         (function(callbacks){
           var
            _b2_ = caml_call1(Core_Option_array[36], t[11]),
            _b3_ = caml_call1(Core_Option_array[36], callbacks);
           if(! caml_call2(Core[90], _b3_, _b2_))
            throw caml_maybe_attach_backtrace([0, Assert_failure, _O_], 1);
           var
            _b5_ = caml_call1(Core_Option_array[36], callbacks) - 1 | 0,
            _b4_ = 0;
           if(_b5_ >= 0){
            var i = _b4_;
            for(;;){
             if(caml_call2(Core[92], i, t[10]))
              caml_call1
               (invariant_a, caml_call2(Core_Option_array[44], callbacks, i));
             else if(! caml_call2(Core_Option_array[45], callbacks, i))
              throw caml_maybe_attach_backtrace([0, Assert_failure, _N_], 1);
             var _b6_ = i + 1 | 0;
             if(_b5_ === i) break;
             var i = _b6_;
            }
           }
           return 0;
          }),
      subscribers_fun =
        check
         (function(subscribers){
           var
            _b0_ = caml_call1(Core_Option_array[36], subscribers) - 1 | 0,
            _bZ_ = 0;
           if(_b0_ >= 0){
            var i = _bZ_;
            for(;;){
             if(caml_call2(Core[92], i, t[10])){
              var
               subscriber = caml_call2(Core_Option_array[44], subscribers, i),
               _bX_ =
                 function(subscriber){
                   return function(param){
                    var
                     callback_fun =
                       caml_call2(Base_Invariant[2], subscriber, invariant_a);
                    caml_call1(callback_fun, callback$0);
                    return 0;};
                  }
                  (subscriber),
               _bY_ =
                 function(x_005){
                  return sexp_of_t$1(function(param){return _w_;}, x_005);
                 };
              caml_call4(Base_Invariant[1], _x_, subscriber, _bY_, _bX_);
              if(! caml_call2(Core[90], i, subscriber[4]))
               throw caml_maybe_attach_backtrace([0, Assert_failure, _P_], 1);
             }
             else if(! caml_call2(Core_Option_array[45], subscribers, i))
              throw caml_maybe_attach_backtrace([0, Assert_failure, _Q_], 1);
             var _b1_ = i + 1 | 0;
             if(_b0_ === i) break;
             var i = _b1_;
            }
           }
           return 0;
          }),
      num_subscribers_fun =
        check
         (function(num_subscribers){
           if(caml_call2(Core[88], num_subscribers, 0)) return 0;
           throw caml_maybe_attach_backtrace([0, Assert_failure, _R_], 1);
          });
     caml_call1(num_subscribers_fun, num_subscribers$0);
     caml_call1(subscribers_fun, subscribers$0);
     caml_call1(callbacks_fun, callbacks$0);
     return 0;
    }
    function _bV_(x_011){
     function _bW_(param){return _S_;}
     return sexp_of_bus(function(param){return _T_;}, _bW_, x_011);
    }
    return caml_call4(Base_Invariant[1], _U_, t, _bV_, _bU_);
   }
   function is_closed(t){
    switch(t[8]){case 0: return 1;case 1: return 0;default: return 0;
    }
   }
   function sexp_of_t$2(of_callback_012, x_013){
    return sexp_of_bus(of_callback_012, Core[212], x_013);
   }
   function invariant$0(invariant_a, t){
    return invariant(invariant_a, function(_bT_){return 0;}, t);
   }
   var Read_write = [0, sexp_of_t$2, invariant$0];
   function sexp_of_t$3(of_callback_014, x_015){
    return sexp_of_bus(of_callback_014, Core[171], x_015);
   }
   function invariant$1(invariant_a, t){
    return invariant(invariant_a, function(_bS_){return 0;}, t);
   }
   var Read_only = [0, sexp_of_t$3, invariant$1];
   function start_write_failing(t){
    switch(t[8]){
      case 0:
       var
        _bO_ =
          function(x_016){
           function _bR_(param){return _V_;}
           return sexp_of_bus(function(param){return _W_;}, _bR_, x_016);
          };
       return caml_call5
               (Core[247], 0, _X_, cst_Bus_write_called_on_closed, t, _bO_);
      case 1:
       var
        _bP_ =
          function(x_017){
           function _bQ_(param){return _Y_;}
           return sexp_of_bus(function(param){return _Z_;}, _bQ_, x_017);
          };
       return caml_call5
               (Core[247], 0, ___, cst_Bus_write_called_from_call, t, _bP_);
      default: throw caml_maybe_attach_backtrace([0, Assert_failure, _$_], 1);
    }
   }
   function capacity(t){return caml_call1(Core_Option_array[36], t[11]);}
   function maybe_shrink_capacity(t){
    var _bL_ = capacity(t), _bM_ = caml_call2(Core[89], t[10] * 4 | 0, _bL_);
    if(_bM_){
     var
      desired_capacity = t[10],
      copy_and_shrink =
        function(array){
         var new_array = caml_call1(Core_Option_array[13], desired_capacity);
         caml_call5(Core_Option_array[61], array, 0, new_array, 0, t[10]);
         return new_array;
        };
     t[11] = copy_and_shrink(t[11]);
     t[12] = copy_and_shrink(t[12]);
     var _bN_ = 0;
    }
    else
     var _bN_ = _bM_;
    return _bN_;
   }
   function add_subscriber(t, subscriber, at_subscribers_index){
    subscriber[4] = at_subscribers_index;
    caml_call3(Core_Option_array[52], t[11], at_subscribers_index, subscriber);
    return caml_call3
            (Core_Option_array[52],
             t[12],
             at_subscribers_index,
             subscriber[2]);
   }
   function remove_subscriber(t, subscriber){
    var subscribers_index = subscriber[4];
    subscriber[4] = -1;
    caml_call2(Core_Option_array[53], t[11], subscribers_index);
    return caml_call2(Core_Option_array[53], t[12], subscribers_index);
   }
   function unsubscribe_assuming_valid_sub(t, subscriber){
    var
     subscriber_index = subscriber[4],
     last_subscriber_index = t[10] - 1 | 0;
    remove_subscriber(t, subscriber);
    if(caml_call2(Core[92], subscriber_index, last_subscriber_index)){
     var
      last_subscriber =
        caml_call2(Core_Option_array[44], t[11], last_subscriber_index);
     remove_subscriber(t, last_subscriber);
     add_subscriber(t, last_subscriber, subscriber_index);
    }
    t[10] = t[10] - 1 | 0;
    return maybe_shrink_capacity(t);
   }
   function unsubscribe(t, subscriber){
    var
     to = t[1],
     _bJ_ = caml_call2(Core[88], subscriber[4], 0),
     _bK_ = _bJ_ ? caml_call2(Bus_id[19], subscriber[1], to) : _bJ_;
    if(_bK_)
     switch(t[8]){
       case 0:
        return 0;
       case 1:
        t[13] = [0, subscriber, t[13]]; return 0;
       default: return unsubscribe_assuming_valid_sub(t, subscriber);
     }
    return _bK_;
   }
   function unsubscribe_all(t){
    if(! is_closed(t))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _aa_], 1);
    var _bG_ = t[10] - 1 | 0, _bF_ = 0;
    if(_bG_ >= 0){
     var i = _bF_;
     for(;;){
      var
       subscriber = caml_call2(Core_Option_array[44], t[11], i),
       _bH_ = function(on_close){return caml_call1(on_close, 0);};
      caml_call2(Core_Option[46], subscriber[6], _bH_);
      remove_subscriber(t, subscriber);
      var _bI_ = i + 1 | 0;
      if(_bG_ === i) break;
      var i = _bI_;
     }
    }
    t[10] = 0;
    return maybe_shrink_capacity(t);
   }
   function finish_write(t){
    if(1 - caml_call1(Core_List[18], t[13])){
     var
      _bD_ = function(_bE_){return unsubscribe_assuming_valid_sub(t, _bE_);};
     caml_call2(Core_List[19], t[13], _bD_);
     t[13] = 0;
    }
    switch(t[8]){
      case 0:
       return unsubscribe_all(t);
      case 1:
       t[8] = 2; return 0;
      default:
       throw caml_maybe_attach_backtrace([0, Assert_failure, _ab_], 1);
    }
   }
   function close(t){
    switch(t[8]){
      case 0:
       return 0;
      case 1:
       t[8] = 0; return 0;
      default: t[8] = 0; return unsubscribe_all(t);
    }
   }
   function call_on_callback_raise(t, error){
    try{caml_call1(t[6], error); return;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     close(t);
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function callback_raised(t, i, exn){
    var subscriber = caml_call2(Core_Option_array[44], t[11], i - 1 | 0);
    if(subscriber[3])
     var error = caml_call2(Core_Error[27], 0, exn);
    else
     var
      backtrace$0 = caml_call1(Base_Backtrace[6][4], 0),
      _bx_ = 0,
      _by_ = 0,
      _bz_ =
        [0,
         [1,
          [0,
           _ag_,
           [0, sexp_of_t$1(function(param){return _af_;}, subscriber), _by_]]],
         _bx_],
      _bA_ =
        [0,
         [1, [0, _ah_, [0, caml_call1(Base_Backtrace[1], backtrace$0), 0]]],
         _bz_],
      _bB_ = [0, [1, [0, _ai_, [0, caml_call1(Core[625], exn), 0]]], _bA_],
      _bC_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Bus_subscriber_raised),
          _bB_]],
      error = caml_call1(Core_Error[8], _bC_);
    var match = subscriber[5];
    if(! match) return call_on_callback_raise(t, error);
    var f = match[1];
    try{caml_call1(f, error); return;}
    catch(exn){
     var
      exn$0 = caml_wrap_exception(exn),
      backtrace = caml_call1(Base_Backtrace[6][4], 0),
      _bt_ = [0, [1, [0, _ac_, [0, caml_call1(Core_Error[9], error), 0]]], 0],
      _bu_ =
        [0,
         [1, [0, _ad_, [0, caml_call1(Base_Backtrace[1], backtrace), 0]]],
         _bt_],
      _bv_ = [0, [1, [0, _ae_, [0, caml_call1(Core[625], exn$0), 0]]], _bu_],
      _bw_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Bus_subscriber_s_on_callba),
          _bv_]];
     return call_on_callback_raise(t, caml_call1(Core_Error[8], _bw_));
    }
   }
   function unsafe_get_callback(a, i){
    return caml_call2(Core_Option_array[49], a, i);
   }
   function write(t, a1){
    var callbacks = t[12];
    t[9] = 1;
    if(2 > t[8]) return start_write_failing(t);
    var match = t[7];
    if(match){
     var last_value = match[1], _br_ = last_value[1];
     if(_br_) _br_[1][1] = a1; else last_value[1] = [0, [0, a1]];
    }
    var _bs_ = caml_call2(Core[91], t[10], 0);
    if(! _bs_) return _bs_;
    t[8] = 1;
    if(caml_call2(Core[90], t[10], 1)){
     try{caml_call1(unsafe_get_callback(callbacks, 0), a1);}
     catch(exn){
      var exn$0 = caml_wrap_exception(exn);
      callback_raised(t, 1, exn$0);
     }
     return finish_write(t);
    }
    var len = t[10], i = [0, 0];
    for(;;){
     if(! caml_call2(Core[92], i[1], len)) return finish_write(t);
     try{
      var callback = unsafe_get_callback(callbacks, i[1]);
      i[1]++;
      caml_call1(callback, a1);
     }
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      callback_raised(t, i[1], exn);
      continue;
     }
    }
   }
   function write_local(t, a1){
    var callbacks = t[12];
    t[9] = 1;
    if(2 > t[8]) return start_write_failing(t);
    var _bq_ = caml_call2(Core[91], t[10], 0);
    if(! _bq_) return _bq_;
    t[8] = 1;
    if(caml_call2(Core[90], t[10], 1)){
     try{caml_call1(unsafe_get_callback(callbacks, 0), a1);}
     catch(exn){
      var exn$0 = caml_wrap_exception(exn);
      callback_raised(t, 1, exn$0);
     }
     return finish_write(t);
    }
    var len = t[10], i = [0, 0];
    for(;;){
     if(! caml_call2(Core[92], i[1], len)) return finish_write(t);
     try{
      var callback = unsafe_get_callback(callbacks, i[1]);
      i[1]++;
      caml_call1(callback, a1);
     }
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      callback_raised(t, i[1], exn);
      continue;
     }
    }
   }
   function write2(t, a1, a2){
    var callbacks = t[12];
    t[9] = 1;
    if(2 > t[8]) return start_write_failing(t);
    var match$0 = t[7];
    if(match$0){
     var last_value = match$0[1], _bo_ = last_value[1];
     if(_bo_){
      var match = _bo_[1];
      match[1] = a1;
      match[2] = a2;
     }
     else
      last_value[1] = [0, [1, a1, a2]];
    }
    var _bp_ = caml_call2(Core[91], t[10], 0);
    if(! _bp_) return _bp_;
    t[8] = 1;
    if(caml_call2(Core[90], t[10], 1)){
     try{caml_call2(unsafe_get_callback(callbacks, 0), a1, a2);}
     catch(exn){
      var exn$0 = caml_wrap_exception(exn);
      callback_raised(t, 1, exn$0);
     }
     return finish_write(t);
    }
    var len = t[10], i = [0, 0];
    for(;;){
     if(! caml_call2(Core[92], i[1], len)) return finish_write(t);
     try{
      var callback = unsafe_get_callback(callbacks, i[1]);
      i[1]++;
      caml_call2(callback, a1, a2);
     }
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      callback_raised(t, i[1], exn);
      continue;
     }
    }
   }
   function write3(t, a1, a2, a3){
    var callbacks = t[12];
    t[9] = 1;
    if(2 > t[8]) return start_write_failing(t);
    var match$0 = t[7];
    if(match$0){
     var last_value = match$0[1], _bm_ = last_value[1];
     if(_bm_){
      var match = _bm_[1];
      match[1] = a1;
      match[2] = a2;
      match[3] = a3;
     }
     else
      last_value[1] = [0, [2, a1, a2, a3]];
    }
    var _bn_ = caml_call2(Core[91], t[10], 0);
    if(! _bn_) return _bn_;
    t[8] = 1;
    if(caml_call2(Core[90], t[10], 1)){
     try{caml_call3(unsafe_get_callback(callbacks, 0), a1, a2, a3);}
     catch(exn){
      var exn$0 = caml_wrap_exception(exn);
      callback_raised(t, 1, exn$0);
     }
     return finish_write(t);
    }
    var len = t[10], i = [0, 0];
    for(;;){
     if(! caml_call2(Core[92], i[1], len)) return finish_write(t);
     try{
      var callback = unsafe_get_callback(callbacks, i[1]);
      i[1]++;
      caml_call3(callback, a1, a2, a3);
     }
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      callback_raised(t, i[1], exn);
      continue;
     }
    }
   }
   function write4(t, a1, a2, a3, a4){
    var callbacks = t[12];
    t[9] = 1;
    if(2 > t[8]) return start_write_failing(t);
    var match$0 = t[7];
    if(match$0){
     var last_value = match$0[1], _bk_ = last_value[1];
     if(_bk_){
      var match = _bk_[1];
      match[1] = a1;
      match[2] = a2;
      match[3] = a3;
      match[4] = a4;
     }
     else
      last_value[1] = [0, [3, a1, a2, a3, a4]];
    }
    var _bl_ = caml_call2(Core[91], t[10], 0);
    if(! _bl_) return _bl_;
    t[8] = 1;
    if(caml_call2(Core[90], t[10], 1)){
     try{caml_call4(unsafe_get_callback(callbacks, 0), a1, a2, a3, a4);}
     catch(exn){
      var exn$0 = caml_wrap_exception(exn);
      callback_raised(t, 1, exn$0);
     }
     return finish_write(t);
    }
    var len = t[10], i = [0, 0];
    for(;;){
     if(! caml_call2(Core[92], i[1], len)) return finish_write(t);
     try{
      var callback = unsafe_get_callback(callbacks, i[1]);
      i[1]++;
      caml_call4(callback, a1, a2, a3, a4);
     }
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      callback_raised(t, i[1], exn);
      continue;
     }
    }
   }
   function write5(t, arg1, arg2, arg3, arg4, arg5){
    var callbacks = t[12];
    t[9] = 1;
    if(2 > t[8]) return start_write_failing(t);
    var match$0 = t[7];
    if(match$0){
     var last_value = match$0[1], _bi_ = last_value[1];
     if(_bi_){
      var match = _bi_[1];
      match[1] = arg1;
      match[2] = arg2;
      match[3] = arg3;
      match[4] = arg4;
      match[5] = arg5;
     }
     else
      last_value[1] = [0, [4, arg1, arg2, arg3, arg4, arg5]];
    }
    var _bj_ = caml_call2(Core[91], t[10], 0);
    if(! _bj_) return _bj_;
    t[8] = 1;
    if(caml_call2(Core[90], t[10], 1)){
     try{
      caml_call5
       (unsafe_get_callback(callbacks, 0), arg1, arg2, arg3, arg4, arg5);
     }
     catch(exn){
      var exn$0 = caml_wrap_exception(exn);
      callback_raised(t, 1, exn$0);
     }
     return finish_write(t);
    }
    var len = t[10], i = [0, 0];
    for(;;){
     if(! caml_call2(Core[92], i[1], len)) return finish_write(t);
     try{
      var callback = unsafe_get_callback(callbacks, i[1]);
      i[1]++;
      caml_call5(callback, arg1, arg2, arg3, arg4, arg5);
     }
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      callback_raised(t, i[1], exn);
      continue;
     }
    }
   }
   function create_exn
   (name,
    created_from,
    callback_arity,
    on_subscription_after_first_wr,
    on_callback_raise){
    switch(on_subscription_after_first_wr){
      case 0:
       var last_value = 0; break;
      case 1:
       switch(callback_arity){
         case 0:
          var _bb_ = 0; break;
         case 1:
          var _bb_ = 1; break;
         case 2:
          var _bb_ = 0; break;
         case 3:
          var _bb_ = 0; break;
         case 4:
          var _bb_ = 0; break;
         default: var _bb_ = 0;
       }
       if(_bb_){
        var
         _bc_ = 0,
         _bd_ = 0,
         _be_ =
           [0,
            [1,
             [0,
              _k_,
              [0,
               sexp_of_t(function(param){return _j_;}, callback_arity),
               _bd_]]],
            _bc_],
         _bf_ =
           [1,
            [0,
             caml_call1(Sexplib0_Sexp_conv[7], cst_Cannot_save_last_value_whe),
             _be_]];
        caml_call1(Core[261], _bf_);
       }
       var last_value = [0, [0, 0]];
       break;
      default: var last_value = 0;
    }
    var
     _bg_ = caml_call1(Core_Option_array[13], 0),
     _bh_ = caml_call1(Core_Option_array[13], 0);
    return [0,
            caml_call1(Bus_id[45], 0),
            name,
            callback_arity,
            created_from,
            on_subscription_after_first_wr,
            on_callback_raise,
            last_value,
            2,
            0,
            0,
            _bh_,
            _bg_,
            0];
   }
   function can_subscribe(t){
    switch(t[5]){
      case 0:
       var _a$_ = 1; break;
      case 1:
       var _a$_ = 1; break;
      default: var _a$_ = 0;
    }
    var _ba_ = _a$_ || 1 - t[9];
    return _ba_;
   }
   function subscribe_exn
   (opt, on_callback_raise, on_close, x_019, subscribed_from, callback){
    if(opt) var sth = opt[1], extract_exn = sth; else var extract_exn = 0;
    if(1 - can_subscribe(x_019)){
     var
      _a2_ = Core_Sexp[93],
      _a3_ = 0,
      _a4_ = 0,
      _a5_ = 0,
      _a6_ = function(param){return _aj_;},
      _a7_ =
        [0,
         [1,
          [0,
           [1,
            [0,
             _al_,
             [0,
              sexp_of_bus(function(param){return _ak_;}, _a6_, x_019),
              _a5_]]],
           _a4_]],
         _a3_],
      _a8_ =
        [1,
         [0,
          [1,
           [0,
            _am_,
            [0, caml_call1(Core_Source_code_position[1], subscribed_from), 0]]],
          _a7_]];
     caml_call5
      (Core[247], 0, _an_, cst_Bus_subscribe_exn_called_a, _a8_, _a2_);
    }
    if(! x_019[8])
     return [0,
             x_019[1],
             callback,
             extract_exn,
             -1,
             on_callback_raise,
             on_close,
             subscribed_from];
    var
     subscriber =
       [0,
        x_019[1],
        callback,
        extract_exn,
        x_019[10],
        on_callback_raise,
        on_close,
        subscribed_from],
     _a9_ = x_019[10],
     _a__ = capacity(x_019);
    if(caml_call2(Core[90], _a__, _a9_)){
     var
      capacity$0 = capacity(x_019),
      new_capacity = caml_call2(Core_Int[90], 1, capacity$0 * 2 | 0),
      copy_and_double =
        function(array){
         var new_array = caml_call1(Core_Option_array[13], new_capacity);
         caml_call5(Core_Option_array[61], array, 0, new_array, 0, capacity$0);
         return new_array;
        };
     x_019[11] = copy_and_double(x_019[11]);
     x_019[12] = copy_and_double(x_019[12]);
    }
    add_subscriber(x_019, subscriber, x_019[10]);
    x_019[10] = x_019[10] + 1 | 0;
    var match$0 = x_019[7];
    if(match$0){
     var last_value = match$0[1], _a1_ = last_value[1];
     if(_a1_){
      var match = _a1_[1];
      switch(match[0]){
        case 0:
         var arg1 = match[1]; caml_call1(callback, arg1); break;
        case 1:
         var arg1$0 = match[1], arg2 = match[2];
         caml_call2(callback, arg1$0, arg2);
         break;
        case 2:
         var arg1$1 = match[1], arg2$0 = match[2], arg3 = match[3];
         caml_call3(callback, arg1$1, arg2$0, arg3);
         break;
        case 3:
         var
          arg1$2 = match[1],
          arg2$1 = match[2],
          arg3$0 = match[3],
          arg4 = match[4];
         caml_call4(callback, arg1$2, arg2$1, arg3$0, arg4);
         break;
        default:
         var
          arg1$3 = match[1],
          arg2$2 = match[2],
          arg3$1 = match[3],
          arg4$0 = match[4],
          arg5 = match[5];
         caml_call5(callback, arg1$3, arg2$2, arg3$1, arg4$0, arg5);
      }
     }
    }
    return subscriber;
   }
   function iter_exn(extract_exn, t, subscribed_from, f){
    if(1 - can_subscribe(t)){
     var
      _aZ_ =
        function(x_020){
         function _a0_(param){return _ao_;}
         return sexp_of_bus(function(param){return _ap_;}, _a0_, x_020);
        };
     caml_call5(Core[247], 0, _aq_, cst_Bus_iter_exn_called_after_, t, _aZ_);
    }
    subscribe_exn(extract_exn, 0, 0, t, subscribed_from, f);
    return 0;
   }
   function sexp_of_t$4(of_a_024, of_b_025, of_c_026, param){
    switch(param){
      case 0:
       return _ar_;
      case 1:
       return _as_;
      case 2:
       return _at_;
      case 3:
       return _au_;
      default: return _av_;
    }
   }
   var Fold_arity = [0, sexp_of_t$4];
   function fold_exn(extract_exn, t, subscribed_from, fold_arity, init, f){
    var state = [0, init];
    if(1 - can_subscribe(t)){
     var
      _aW_ =
        function(x_030){
         function _aY_(param){return _aw_;}
         return sexp_of_bus(function(param){return _ax_;}, _aY_, x_030);
        };
     caml_call5(Core[247], 0, _ay_, cst_Bus_fold_exn_called_after_, t, _aW_);
    }
    switch(fold_arity){
      case 0:
       var
        _aX_ = function(a1){state[1] = caml_call2(f, state[1], a1); return 0;};
       break;
      case 1:
       var
        _aX_ =
          function(a1, a2){
           state[1] = caml_call3(f, state[1], a1, a2);
           return 0;
          };
       break;
      case 2:
       var
        _aX_ =
          function(a1, a2, a3){
           state[1] = caml_call4(f, state[1], a1, a2, a3);
           return 0;
          };
       break;
      case 3:
       var
        _aX_ =
          function(a1, a2, a3, a4){
           state[1] = caml_call5(f, state[1], a1, a2, a3, a4);
           return 0;
          };
       break;
      default:
       var
        _aX_ =
          function(a1, a2, a3, a4, a5){
           state[1] = caml_call6(f, state[1], a1, a2, a3, a4, a5);
           return 0;
          };
    }
    return iter_exn(extract_exn, t, subscribed_from, _aX_);
   }
   function _az_(param){
    function assert_no_allocation(bus_r, callback, write){
     subscribe_exn(0, 0, 0, bus_r, _aA_, callback);
     var
      starting_minor_words = runtime.core_gc_minor_words(0),
      starting_major_words = runtime.core_gc_major_words(0);
     caml_call1(write, 0);
     var
      ending_minor_words = runtime.core_gc_minor_words(0),
      ending_major_words = runtime.core_gc_major_words(0),
      got = ending_minor_words - starting_minor_words | 0,
      sexpifier = Core[389],
      expect = 0,
      equal = 0,
      message = 0,
      here = 0;
     function comparator(a_031, b_032){
      return caml_call2(Core[382], a_031, b_032);
     }
     caml_call8
      (Ppx_assert_lib_Runtime[3],
       pos,
       sexpifier,
       comparator,
       here,
       message,
       equal,
       expect,
       got);
     var
      got$0 = ending_major_words - starting_major_words | 0,
      sexpifier$0 = Core[389],
      expect$0 = 0,
      equal$0 = 0,
      message$0 = 0,
      here$0 = 0;
     function comparator$0(a_033, b_034){
      return caml_call2(Core[382], a_033, b_034);
     }
     return caml_call8
             (Ppx_assert_lib_Runtime[3],
              pos$0,
              sexpifier$0,
              comparator$0,
              here$0,
              message$0,
              equal$0,
              expect$0,
              got$0);
    }
    function _aG_(param){
     function create(created_from, arity){
      return create_exn(0, created_from, arity, 2, Core_Error[30]);
     }
     var
      bus1 = create(_aB_, 0),
      bus2 = create(_aC_, 2),
      bus3 = create(_aD_, 3),
      bus4 = create(_aE_, 4),
      bus5 = create(_aF_, 5);
     function _aH_(param){return write(bus1, 0);}
     assert_no_allocation(bus1, function(param){return 0;}, _aH_);
     function _aI_(param){return write2(bus2, 0, 0);}
     assert_no_allocation(bus2, function(param, _aV_){return 0;}, _aI_);
     function _aJ_(param){return write3(bus3, 0, 0, 0);}
     assert_no_allocation(bus3, function(param, _aU_, _aT_){return 0;}, _aJ_);
     function _aK_(param){return write4(bus4, 0, 0, 0, 0);}
     assert_no_allocation
      (bus4, function(param, _aS_, _aR_, _aQ_){return 0;}, _aK_);
     function _aL_(param){return write5(bus5, 0, 0, 0, 0, 0);}
     assert_no_allocation
      (bus5, function(param, _aP_, _aO_, _aN_, _aM_){return 0;}, _aL_);
     return 0;
    }
    caml_call8
     (Ppx_inline_test_lib[9],
      Inline_test_config,
      cst_write_doesn_t_allocate_whe,
      0,
      cst_bus_src_bus_ml,
      872,
      4,
      945,
      _aG_);
    return 0;
   }
   caml_call8
    (Ppx_inline_test_lib[10],
     Inline_test_config,
     cst,
     0,
     cst_bus_src_bus_ml$0,
     855,
     0,
     1803,
     _az_);
   caml_call1(Ppx_inline_test_lib[7], cst_bus);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bus);
   var
    Bus =
      [0,
       [0, sexp_of_t],
       sexp_of_bus,
       Read_write,
       Read_only,
       [0, all, sexp_of_t$0],
       read_only,
       create_exn,
       callback_arity,
       num_subscribers,
       is_closed,
       close,
       write,
       write_local,
       write2,
       write3,
       write4,
       write5,
       [0, sexp_of_t$1],
       subscribe_exn,
       iter_exn,
       Fold_arity,
       fold_exn,
       unsubscribe];
   runtime.caml_register_global(140, Bus, cst_Bus$0);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
