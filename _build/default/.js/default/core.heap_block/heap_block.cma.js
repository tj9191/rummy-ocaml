// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Heap_block
//# unitInfo: Requires: Base, Base__Word_size, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Heap_block$0 = "Heap_block",
    cst_heap_block$0 = "heap_block";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base = global_data.Base,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Base_Word_size = global_data.Base__Word_size;
   caml_call1(Ppx_module_timer_runtime[4], cst_Heap_block$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_heap_block$0);
   caml_call1(Ppx_expect_runtime[1][1], "heap_block/heap_block.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_heap_block$0, "heap_block.ml");
   var
    cst_Heap_block_create_exn_call =
      "Heap_block.create_exn called with non heap block",
    cst_heap_block = cst_heap_block$0,
    cst_Heap_block = cst_Heap_block$0;
   function sexp_of_t(of_a_001){return of_a_001;}
   function create(v){
    return runtime.core_heap_block_is_heap_block(v) ? [0, v] : 0;
   }
   function create_exn(v){
    return runtime.core_heap_block_is_heap_block(v)
            ? v
            : caml_call1(Base[244], cst_Heap_block_create_exn_call);
   }
   function value(t){return t;}
   var
    bytes_per_word = caml_call1(Base_Word_size[2], Base_Word_size[3]) / 8 | 0;
   function bytes(t){
    return runtime.caml_mul(t.length - 1 + 1 | 0, bytes_per_word);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_heap_block);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Heap_block);
   var Heap_block = [0, sexp_of_t, create, create_exn, value, bytes];
   runtime.caml_register_global(14, Heap_block, cst_Heap_block$0);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLjAsImZpbGUiOiJoZWFwX2Jsb2NrLmNtYS5qcyIsInNvdXJjZVJvb3QiOiIiLCJuYW1lcyI6WyJzZXhwX29mX3QiLCJvZl9hXzAwMSIsImNyZWF0ZSIsInYiLCJjcmVhdGVfZXhuIiwidmFsdWUiLCJ0IiwiYnl0ZXNfcGVyX3dvcmQiLCJieXRlcyJdLCJzb3VyY2VzIjpbIi9Vc2Vycy90eWxhbm1vcmFuLy5vcGFtLzUuMS4xL2xpYi9jb3JlL2hlYXBfYmxvY2svaGVhcF9ibG9jay5tbCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0c7Ozs7O0c7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBRUEsU0FBQUEsVUFBS0MsVUFBTCxPQUFLQSxTQUE4QjtZQU0vQkMsT0FBT0M7SUFBSSxPQUFHLHNDQUFQQSxTQUFBQTtHQUFvQztZQUUzQ0MsV0FBV0Q7SUFDYixPQUFHLHNDQURVQTtjQUFBQTtjQUNVO0dBQTJEO1lBR2hGRSxNQUFNQyxHQUFJLE9BQUpBLEVBQUs7R0FDaUI7SUFBNUJDLGlCQUE0QjtZQUU1QkMsTUFBZ0JGO0lBQ2xCLHdCQURrQkEsc0JBRmhCQztHQUdnRTs7Ozs7d0JBaEJwRVAsV0FNSUUsUUFFQUUsWUFJQUMsT0FHQUc7OztFIiwic291cmNlc0NvbnRlbnQiOlsib3BlbiEgQmFzZVxuXG50eXBlICdhIHQgPSAnYSBbQEBkZXJpdmluZyBzZXhwX29mXVxuXG5leHRlcm5hbCBpc19oZWFwX2Jsb2NrIDogU3RkbGliLk9iai50IC0+IGJvb2wgPSBcImNvcmVfaGVhcF9ibG9ja19pc19oZWFwX2Jsb2NrXCJcbiAgW0BAbm9hbGxvY11cblxubGV0IGlzX29rIHYgPSBpc19oZWFwX2Jsb2NrIChTdGRsaWIuT2JqLnJlcHIgdilcbmxldCBjcmVhdGUgdiA9IGlmIGlzX29rIHYgdGhlbiBTb21lIHYgZWxzZSBOb25lXG5cbmxldCBjcmVhdGVfZXhuIHYgPVxuICBpZiBpc19vayB2IHRoZW4gdiBlbHNlIGZhaWx3aXRoIFwiSGVhcF9ibG9jay5jcmVhdGVfZXhuIGNhbGxlZCB3aXRoIG5vbiBoZWFwIGJsb2NrXCJcbjs7XG5cbmxldCB2YWx1ZSB0ID0gdFxubGV0IGJ5dGVzX3Blcl93b3JkID0gV29yZF9zaXplLihudW1fYml0cyB3b3JkX3NpemUpIC8gOFxuXG5sZXQgYnl0ZXMgKHR5cGUgYSkgKHQgOiBhIHQpID1cbiAgKFN0ZGxpYi5PYmouc2l6ZSAoU3RkbGliLk9iai5yZXByICh0IDogYSB0KSkgKyAxKSAqIGJ5dGVzX3Blcl93b3JkXG47O1xuIl19
