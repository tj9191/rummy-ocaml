// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Univ_map__
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Univ_map = [0],
    Univ_map$0 = [0, Univ_map];
   runtime.caml_register_global(0, Univ_map$0, "Univ_map__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Univ_map__Univ_map_intf
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Univ_map_Univ_map_intf = "Univ_map__Univ_map_intf",
    cst_univ_map = "univ_map";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Univ_map_Univ_map_intf);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_univ_map);
   caml_call1(Ppx_expect_runtime[1][1], "univ_map/src/univ_map_intf.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_univ_map, "univ_map_intf.ml");
   caml_call1(Ppx_inline_test_lib[7], cst_univ_map);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Univ_map_Univ_map_intf);
   var Univ_map_Univ_map_intf = [0];
   runtime.caml_register_global
    (11, Univ_map_Univ_map_intf, cst_Univ_map_Univ_map_intf);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Univ_map
//# unitInfo: Requires: Base, Base__Invariant, Base__List, Base__Map, Base__Option, Base__Printf, Base__Set, Base__String, Base__Type_equal, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Univ_map__Univ_map_intf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Univ_map$0 = "Univ_map",
    cst = "_",
    cst_univ_map$0 = "univ_map",
    cst_univ_map_src_univ_map_ml = "univ_map/src/univ_map.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    Base_List = global_data.Base__List,
    Base_Option = global_data.Base__Option,
    Base_Type_equal = global_data.Base__Type_equal,
    Base_Map = global_data.Base__Map,
    Base = global_data.Base,
    Base_Set = global_data.Base__Set,
    Base_Printf = global_data.Base__Printf,
    Assert_failure = global_data.Assert_failure,
    Base_Invariant = global_data.Base__Invariant,
    Base_String = global_data.Base__String,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Univ_map$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_univ_map$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_univ_map_src_univ_map_ml);
   caml_call2(Ppx_inline_test_lib[6], cst_univ_map$0, "univ_map.ml");
   var
    _m_ =
      [0,
       [11, "Univ_map.change_exn on unknown key ", [2, 0, 0]],
       "Univ_map.change_exn on unknown key %s"],
    _l_ =
      [0,
       [11, "Univ_map.add_exn on existing key ", [2, 0, 0]],
       "Univ_map.add_exn on existing key %s"],
    _k_ =
      [0,
       [11, "Univ_map.find_exn on unknown key ", [2, 0, 0]],
       "Univ_map.find_exn on unknown key %s"],
    _i_ = [0, cst],
    _h_ = [0, cst_univ_map_src_univ_map_ml, 82, 40],
    _j_ = [0, cst_univ_map_src_univ_map_ml, 81, 2431, 2455],
    _f_ = [0, cst],
    _d_ = [0, "type_id2"],
    _e_ = [0, "type_id1"],
    _g_ = [0, "key"],
    cst_Key_type_id_must_not_provi =
      "[Key.type_id] must not provide different type ids when called on the same input",
    _a_ = [0, "<uid>"],
    _b_ = [0, "uid"],
    _c_ = [0, "name"],
    cst_univ_map = cst_univ_map$0,
    cst_Univ_map = cst_Univ_map$0;
   function Make1(Key, Data){
    var sexp_of_t = Key[1];
    function sexp_of_type_id(type_id){
     var _aG_ = 0, _aH_ = 0;
     if(Ppx_inline_test_lib[1])
      var _aI_ = _a_;
     else
      var
       _aL_ = caml_call1(Base_Type_equal[12][3], type_id),
       _aI_ = caml_call1(Base_Type_equal[12][2][3], _aL_);
     var
      _aJ_ =
        [0, [1, [0, _b_, [0, caml_call1(Base[85][5], _aI_), _aH_]]], _aG_],
      _aK_ = caml_call1(Base_Type_equal[12][6], type_id);
     return [1, [0, [1, [0, _c_, [0, caml_call1(Base[202], _aK_), 0]]], _aJ_]];
    }
    function type_id(x_003){
     var
      type_id1 = caml_call1(Key[2], x_003),
      type_id2 = caml_call1(Key[2], x_003);
     if(caml_call2(Base_Type_equal[12][9], type_id1, type_id2))
      return type_id1;
     var
      _aA_ = [0, [1, [0, _d_, [0, sexp_of_type_id(type_id2), 0]]], 0],
      _aB_ = [0, [1, [0, _e_, [0, sexp_of_type_id(type_id1), 0]]], _aA_],
      _aC_ = 0;
     function _aD_(param){return _f_;}
     var
      _aE_ =
        [0, [1, [0, _g_, [0, caml_call2(Key[1], _aD_, x_003), _aC_]]], _aB_],
      _aF_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Key_type_id_must_not_provi),
          _aE_]];
     return caml_call1(Base[246], _aF_);
    }
    var Key$0 = [0, sexp_of_t, sexp_of_type_id, type_id];
    function name_of_key(key){
     var _az_ = Key$0[3].call(null, key);
     return caml_call1(Base_Type_equal[12][6], _az_);
    }
    function uid_of_key(key){
     var _ay_ = Key$0[3].call(null, key);
     return caml_call1(Base_Type_equal[12][3], _ay_);
    }
    function sexp_of_t$0(sexp_of_a, param){
     var
      data = param[2],
      key = param[1],
      _aw_ = Key$0[3].call(null, key),
      _ax_ = caml_call1(Base_Type_equal[12][7], _aw_);
     return caml_call3(Data[1], sexp_of_a, _ax_, data);
    }
    function type_id_name(param){var key = param[1]; return name_of_key(key);}
    function type_id_uid(param){var key = param[1]; return uid_of_key(key);}
    function compare(t1, t2){
     var
      _as_ = type_id_name(t2),
      _at_ = type_id_name(t1),
      c = caml_call2(Base_String[51], _at_, _as_);
     if(0 !== c) return c;
     var _au_ = type_id_uid(t2), _av_ = type_id_uid(t1);
     return caml_call2(Base_Type_equal[12][2][11], _av_, _au_);
    }
    var Packed = [0, sexp_of_t$0, type_id_name, type_id_uid, compare];
    function to_alist(t){
     var _aq_ = Packed[4], _ar_ = caml_call1(Base_Map[74], t);
     return caml_call2(Base_List[83], _ar_, _aq_);
    }
    function sexp_of_t$1(sexp_of_a, t){
     function _an_(packed){return [0, Packed[2].call(null, packed), packed];}
     var _ao_ = to_alist(t), x_008 = caml_call2(Base_List[53], _ao_, _an_);
     function _ap_(param){
      var
       arg1_005 = param[2],
       arg0_004 = param[1],
       res0_006 = caml_call1(Base[202], arg0_004),
       res1_007 = Packed[1].call(null, sexp_of_a, arg1_005);
      return [1, [0, res0_006, [0, res1_007, 0]]];
     }
     return caml_call2(Base[165], _ap_, x_008);
    }
    function invariant(t){
     function _aj_(param){
      function _al_(key, data){
       var _am_ = Packed[3].call(null, data);
       if(caml_call2(Base_Type_equal[12][2][10], key, _am_)) return 0;
       throw caml_maybe_attach_backtrace([0, Assert_failure, _h_], 1);
      }
      return caml_call2(Base_Map[48], t, _al_);
     }
     function _ak_(x_009){
      return sexp_of_t$1(function(param){return _i_;}, x_009);
     }
     return caml_call4(Base_Invariant[1], _j_, t, _ak_, _aj_);
    }
    function set(t, key, data){
     var _ai_ = uid_of_key(key);
     return caml_call3(Base_Map[34], t, _ai_, [0, key, data]);
    }
    function mem_by_id(t, id){return caml_call2(Base_Map[45], t, id);}
    function mem(t, key){return mem_by_id(t, uid_of_key(key));}
    function remove_by_id(t, id){return caml_call2(Base_Map[44], t, id);}
    function remove(t, key){return remove_by_id(t, uid_of_key(key));}
    var empty = caml_call1(Base_Map[6], [0, Base_Type_equal[12][2][19]]);
    function singleton(key, data){
     var _ah_ = uid_of_key(key);
     return caml_call3
             (Base_Map[7],
              [0, Base_Type_equal[12][2][19]],
              _ah_,
              [0, key, data]);
    }
    var is_empty = Base_Map[32];
    function find(t, key){
     var _ae_ = uid_of_key(key), match = caml_call2(Base_Map[42], t, _ae_);
     if(! match) return 0;
     var
      match$0 = match[1],
      value = match$0[2],
      key$0 = match$0[1],
      _af_ = Key$0[3].call(null, key$0),
      _ag_ = Key$0[3].call(null, key);
     caml_call2(Base_Type_equal[12][11], _ag_, _af_);
     return [0, value];
    }
    function find_exn(t, key){
     var match = find(t, key);
     if(match){var data = match[1]; return data;}
     var _ad_ = name_of_key(key);
     return caml_call3(Base_Printf[6], _k_, _ad_, 0);
    }
    function add(t, key, data){
     return mem(t, key) ? -1024851605 : [0, 17724, set(t, key, data)];
    }
    function add_exn(t, key, data){
     var match = add(t, key, data);
     if(typeof match === "number"){
      var _ac_ = name_of_key(key);
      return caml_call3(Base_Printf[6], _l_, _ac_, 0);
     }
     var t$0 = match[2];
     return t$0;
    }
    function change_exn(t, key, update){
     var match = find(t, key);
     if(match){
      var data = match[1];
      return set(t, key, caml_call1(update, data));
     }
     var _ab_ = name_of_key(key);
     return caml_call3(Base_Printf[6], _m_, _ab_, 0);
    }
    function change(t, key, update){
     var orig = find(t, key), next = caml_call1(update, orig);
     if(! next) return caml_call1(Base_Option[52], orig) ? t : remove(t, key);
     var data = next[1];
     return set(t, key, data);
    }
    function update(t, key, f){
     return change(t, key, function(data){return [0, caml_call1(f, data)];});
    }
    function key_id_set(t){
     var _aa_ = caml_call1(Base_Map[73], t);
     return caml_call2(Base_Set[32], [0, Base_Type_equal[12][2][19]], _aa_);
    }
    function of_alist_exn(t){
     function ___(p){return [0, Packed[3].call(null, p), p];}
     var _$_ = caml_call2(Base_List[53], t, ___);
     return caml_call2(Base_Map[10], [0, Base_Type_equal[12][2][19]], _$_);
    }
    var
     find_packed_by_id = Base_Map[42],
     find_packed_by_id_exn = Base_Map[43];
    return [0,
            Key$0,
            ,
            ,
            ,
            to_alist,
            sexp_of_t$1,
            invariant,
            set,
            mem_by_id,
            mem,
            remove_by_id,
            remove,
            empty,
            singleton,
            is_empty,
            find,
            find_exn,
            add,
            add_exn,
            change_exn,
            change,
            update,
            key_id_set,
            of_alist_exn,
            find_packed_by_id,
            find_packed_by_id_exn,
            0];
   }
   function Make(Key, Data){
    function sexp_of_t(of_a_011, of_a_012, x_013){return caml_call2(Data[1], of_a_012, x_013);
    }
    var M = Make1(Key, [0, sexp_of_t]);
    function sexp_of_t$0(x_014){return M[6].call(null, Base[220], x_014);}
    var
     invariant = M[7],
     empty = M[13],
     singleton = M[14],
     is_empty = M[15],
     set = M[8],
     mem = M[10],
     mem_by_id = M[9],
     find = M[16],
     find_exn = M[17],
     add = M[18],
     add_exn = M[19],
     change = M[21],
     change_exn = M[20],
     update = M[22],
     remove = M[12],
     remove_by_id = M[11],
     Packed = [0],
     key_id_set = M[23],
     to_alist = M[5],
     of_alist_exn = M[24],
     find_packed_by_id = M[25],
     find_packed_by_id_exn = M[26];
    return [0,
            ,
            sexp_of_t$0,
            Key,
            invariant,
            empty,
            singleton,
            is_empty,
            set,
            mem,
            mem_by_id,
            find,
            find_exn,
            add,
            add_exn,
            change,
            change_exn,
            update,
            remove,
            remove_by_id,
            Packed,
            key_id_set,
            to_alist,
            of_alist_exn,
            find_packed_by_id,
            find_packed_by_id_exn,
            0];
   }
   var sexp_of_t = Base_Type_equal[12][1];
   function type_id(_Z_){return _Z_;}
   var Type_id_key = [0, sexp_of_t, type_id];
   function sexp_of_t$0(of_a_017){return of_a_017;}
   var
    _s_ = Make(Type_id_key, [0, sexp_of_t$0]),
    type_equal = _s_[26],
    find_packed_by_id_exn = _s_[25],
    find_packed_by_id = _s_[24],
    of_alist_exn = _s_[23],
    to_alist = _s_[22],
    key_id_set = _s_[21],
    Packed = _s_[20],
    remove_by_id = _s_[19],
    remove = _s_[18],
    update = _s_[17],
    change_exn = _s_[16],
    change = _s_[15],
    add_exn = _s_[14],
    add = _s_[13],
    find_exn = _s_[12],
    find = _s_[11],
    mem_by_id = _s_[10],
    mem = _s_[9],
    set = _s_[8],
    is_empty = _s_[7],
    singleton = _s_[6],
    empty = _s_[5],
    invariant = _s_[4],
    sexp_of_t$1 = _s_[2];
   function create(default$0, name, sexp_of){
    return [0, caml_call2(Base_Type_equal[12][4], name, sexp_of), default$0];
   }
   function id(t){return t[1];}
   var Key = [0, create, id];
   function find$0(t, param){
    var default$0 = param[2], key = param[1], _Y_ = find(t, key);
    return caml_call2(Base_Option[30], _Y_, default$0);
   }
   function set$0(t, param, data){
    var key = param[1];
    return set(t, key, data);
   }
   function change$0(t, key, update){
    return set$0(t, key, caml_call1(update, find$0(t, key)));
   }
   function create$0(init, f, name, sexp_of){
    return [0, caml_call3(Key[1], init, name, sexp_of), f];
   }
   function id$0(t){return caml_call1(Key[2], t[1]);}
   var Key$0 = [0, create$0, id$0];
   function find$1(t, param){var key = param[1]; return find$0(t, key);}
   function set$1(t, param, data){
    var key = param[1];
    return set$0(t, key, data);
   }
   function change$1(t, param, update){
    var key = param[1];
    return change$0(t, key, update);
   }
   function add$0(t, param, data){
    var f = param[2], key = param[1];
    return change$0(t, key, function(acc){return caml_call2(f, acc, data);});
   }
   function create$1(name, sexp_of){
    var _W_ = caml_call1(Base_List[6], sexp_of);
    function _X_(xs, x){return [0, x, xs];}
    return caml_call4(Key$0[1], 0, _X_, name, _W_);
   }
   var
    id$1 = Key$0[2],
    Key$1 = [0, create$1, id$1],
    Multi = [0, Key$1, set$1, find$1, add$0, change$1];
   caml_call1(Ppx_inline_test_lib[7], cst_univ_map);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Univ_map);
   var
    _n_ = [0, Key$0, set$1, find$1, add$0, change$1],
    _o_ = [0, Key, set$0, find$0, change$0];
   function _p_(Key, _M_, _L_, Output_data){
    Make1(Key, Output_data);
    function merge(t1, t2, param){
     var f = param[1];
     function f$0(key, merge_result){
      function _U_(data){return [0, key, data];}
      var _V_ = caml_call2(f, key, merge_result);
      return caml_call2(Base_Option[24], _V_, _U_);
     }
     function _N_(param, _O_){
      var _P_ = _O_[1];
      if(737457313 === _P_){
       var
        _Q_ = _O_[2],
        _R_ = _Q_[2],
        right_data = _R_[2],
        right_key = _R_[1],
        match = _Q_[1],
        left_data = match[2],
        left_key = match[1],
        _S_ = caml_call1(Key[2], right_key),
        _T_ = caml_call1(Key[2], left_key);
       caml_call2(Base_Type_equal[12][11], _T_, _S_);
       return f$0(left_key, [0, 737457313, [0, left_data, right_data]]);
      }
      if(847852583 <= _P_){
       var match$0 = _O_[2], data = match$0[2], key = match$0[1];
       return f$0(key, [0, 847852583, data]);
      }
      var match$1 = _O_[2], data$0 = match$1[2], key$0 = match$1[1];
      return f$0(key$0, [0, -57574468, data$0]);
     }
     return caml_call3(Base_Map[76], t1, t2, _N_);
    }
    return [0, merge];
   }
   function _q_(Key, _B_, _A_, Output_data){
    Make(Key, Output_data);
    function merge(t1, t2, param){
     var f = param[1];
     function f$0(key, merge_result){
      function _J_(data){return [0, key, data];}
      var _K_ = caml_call2(f, key, merge_result);
      return caml_call2(Base_Option[24], _K_, _J_);
     }
     function _C_(param, _D_){
      var _E_ = _D_[1];
      if(737457313 === _E_){
       var
        _F_ = _D_[2],
        _G_ = _F_[2],
        right_data = _G_[2],
        right_key = _G_[1],
        match = _F_[1],
        left_data = match[2],
        left_key = match[1],
        _H_ = caml_call1(Key[2], right_key),
        _I_ = caml_call1(Key[2], left_key);
       caml_call2(Base_Type_equal[12][11], _I_, _H_);
       return f$0(left_key, [0, 737457313, [0, left_data, right_data]]);
      }
      if(847852583 <= _E_){
       var match$0 = _D_[2], data = match$0[2], key = match$0[1];
       return f$0(key, [0, 847852583, data]);
      }
      var match$1 = _D_[2], data$0 = match$1[2], key$0 = match$1[1];
      return f$0(key$0, [0, -57574468, data$0]);
     }
     return caml_call3(Base_Map[76], t1, t2, _C_);
    }
    return [0, merge];
   }
   function _r_(_x_, _w_){
    var _y_ = Make1(_x_, _w_), _z_ = _y_[1];
    return [0,
            _y_[6],
            [0, _z_[1], _z_[3]],
            _y_[7],
            _y_[13],
            _y_[14],
            _y_[15],
            _y_[8],
            _y_[10],
            _y_[9],
            _y_[16],
            _y_[17],
            _y_[18],
            _y_[19],
            _y_[21],
            _y_[20],
            _y_[22],
            _y_[12],
            _y_[11],
            [0],
            _y_[23],
            _y_[5],
            _y_[24],
            _y_[25],
            _y_[26],
            _y_[27]];
   }
   var
    Univ_map =
      [0,
       Type_id_key,
       sexp_of_t$1,
       invariant,
       empty,
       singleton,
       is_empty,
       set,
       mem,
       mem_by_id,
       find,
       find_exn,
       add,
       add_exn,
       change,
       change_exn,
       update,
       remove,
       remove_by_id,
       Packed,
       key_id_set,
       to_alist,
       of_alist_exn,
       find_packed_by_id,
       find_packed_by_id_exn,
       type_equal,
       function(_u_, _t_){
        var _v_ = Make(_u_, _t_);
        return [0,
                _v_[2],
                _v_[3],
                _v_[4],
                _v_[5],
                _v_[6],
                _v_[7],
                _v_[8],
                _v_[9],
                _v_[10],
                _v_[11],
                _v_[12],
                _v_[13],
                _v_[14],
                _v_[15],
                _v_[16],
                _v_[17],
                _v_[18],
                _v_[19],
                _v_[20],
                _v_[21],
                _v_[22],
                _v_[23],
                _v_[24],
                _v_[25],
                _v_[26]];
       },
       _r_,
       _q_,
       _p_,
       _o_,
       _n_,
       Multi];
   runtime.caml_register_global(36, Univ_map, cst_Univ_map$0);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
