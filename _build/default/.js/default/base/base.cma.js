// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Base__
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Base = [0], Base$0 = [0, Base];
   runtime.caml_register_global(0, Base$0, "Base__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Bool0
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Base_Bool0 = [0];
   runtime.caml_register_global(0, Base_Bool0, "Base__Bool0");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Globalize
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, caml_obj_dup = runtime.caml_obj_dup;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function globalize_bool(b){return b;}
   function globalize_char(c){return c;}
   function globalize_unit(u){return u;}
   function globalize_array(param, a){return a.slice();}
   function globalize_list(f, param){
    if(! param) return 0;
    var xs = param[2], x = param[1], _g_ = globalize_list(f, xs);
    return [0, caml_call1(f, x), _g_];
   }
   function globalize_option(f, param){
    if(! param) return 0;
    var x = param[1];
    return [0, caml_call1(f, x)];
   }
   function globalize_result(globalize_a, globalize_b, t){
    if(0 === t[0]){var a = t[1]; return [0, caml_call1(globalize_a, a)];}
    var b = t[1];
    return [1, caml_call1(globalize_b, b)];
   }
   function globalize_ref(param, r){return [0, r[1]];}
   function globalize_lazy_t(param, t){return t;}
   var
    _a_ = caml_obj_dup,
    _b_ = caml_obj_dup,
    _c_ = caml_obj_dup,
    _d_ = caml_obj_dup,
    _e_ = caml_obj_dup,
    Base_Globalize =
      [0,
       globalize_bool,
       globalize_char,
       caml_obj_dup,
       function(_f_){return _f_;},
       _e_,
       _d_,
       _c_,
       _b_,
       _a_,
       globalize_unit,
       globalize_array,
       globalize_lazy_t,
       globalize_list,
       globalize_option,
       globalize_result,
       globalize_ref];
   runtime.caml_register_global(0, Base_Globalize, "Base__Globalize");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Poly0
//# unitInfo: Requires: Base__Bool0
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, caml_compare = runtime.caml_compare;
   function descending(x, y){return caml_compare(y, x);}
   function max(x, y){
    return runtime.caml_csel_value(runtime.caml_greaterequal(x, y), x, y);
   }
   function min(x, y){
    return runtime.caml_csel_value(runtime.caml_lessequal(x, y), x, y);
   }
   var Base_Poly0 = [0, caml_compare, descending, min, max];
   runtime.caml_register_global(0, Base_Poly0, "Base__Poly0");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Import0
//# unitInfo: Requires: Base__Bool0, Base__Poly0, Shadow_stdlib, Stdlib, Stdlib__MoreLabels, Stdlib__StdLabels
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_bytes_compare = runtime.caml_bytes_compare,
    caml_bytes_equal = runtime.caml_bytes_equal,
    caml_bytes_greaterequal = runtime.caml_bytes_greaterequal,
    caml_bytes_lessequal = runtime.caml_bytes_lessequal,
    caml_equal = runtime.caml_equal,
    caml_greaterequal = runtime.caml_greaterequal,
    caml_greaterthan = runtime.caml_greaterthan,
    caml_int_compare = runtime.caml_int_compare,
    caml_lessequal = runtime.caml_lessequal,
    caml_lessthan = runtime.caml_lessthan,
    caml_notequal = runtime.caml_notequal,
    caml_string_compare = runtime.caml_string_compare,
    caml_string_equal = runtime.caml_string_equal,
    caml_string_greaterequal = runtime.caml_string_greaterequal,
    caml_string_lessequal = runtime.caml_string_lessequal;
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_Poly0 = global_data.Base__Poly0,
    Shadow_stdlib = global_data.Shadow_stdlib,
    Stdlib = global_data.Stdlib,
    Stdlib_MoreLabels = global_data.Stdlib__MoreLabels,
    Exit = Shadow_stdlib[3],
    Not_found = Shadow_stdlib[4],
    max_int = Shadow_stdlib[8],
    min_int = Shadow_stdlib[9],
    infinity = Shadow_stdlib[11],
    neg_infinity = Shadow_stdlib[12],
    nan = Shadow_stdlib[13],
    max_float = Shadow_stdlib[14],
    min_float = Shadow_stdlib[15],
    epsilon_float = Shadow_stdlib[16],
    char_of_int = Shadow_stdlib[18],
    string_of_bool = Shadow_stdlib[19],
    bool_of_string_opt = Shadow_stdlib[20],
    bool_of_string = Shadow_stdlib[21],
    string_of_int = Shadow_stdlib[22],
    int_of_string_opt = Shadow_stdlib[23],
    string_of_float = Shadow_stdlib[24],
    float_of_string_opt = Shadow_stdlib[25],
    stdin = Shadow_stdlib[27],
    stdout = Shadow_stdlib[28],
    stderr = Shadow_stdlib[29],
    print_char = Shadow_stdlib[30],
    print_string = Shadow_stdlib[31],
    print_bytes = Shadow_stdlib[32],
    print_int = Shadow_stdlib[33],
    print_float = Shadow_stdlib[34],
    print_endline = Shadow_stdlib[35],
    print_newline = Shadow_stdlib[36],
    prerr_char = Shadow_stdlib[37],
    prerr_string = Shadow_stdlib[38],
    prerr_bytes = Shadow_stdlib[39],
    prerr_int = Shadow_stdlib[40],
    prerr_float = Shadow_stdlib[41],
    prerr_endline = Shadow_stdlib[42],
    prerr_newline = Shadow_stdlib[43],
    read_line = Shadow_stdlib[44],
    read_int_opt = Shadow_stdlib[45],
    read_int = Shadow_stdlib[46],
    read_float_opt = Shadow_stdlib[47],
    read_float = Shadow_stdlib[48],
    open_out = Shadow_stdlib[49],
    open_out_bin = Shadow_stdlib[50],
    open_out_gen = Shadow_stdlib[51],
    flush = Shadow_stdlib[52],
    flush_all = Shadow_stdlib[53],
    output_char = Shadow_stdlib[54],
    output_string = Shadow_stdlib[55],
    output_bytes = Shadow_stdlib[56],
    output = Shadow_stdlib[57],
    output_substring = Shadow_stdlib[58],
    output_byte = Shadow_stdlib[59],
    output_binary_int = Shadow_stdlib[60],
    output_value = Shadow_stdlib[61],
    seek_out = Shadow_stdlib[62],
    pos_out = Shadow_stdlib[63],
    out_channel_length = Shadow_stdlib[64],
    close_out = Shadow_stdlib[65],
    close_out_noerr = Shadow_stdlib[66],
    set_binary_mode_out = Shadow_stdlib[67],
    open_in = Shadow_stdlib[68],
    open_in_bin = Shadow_stdlib[69],
    open_in_gen = Shadow_stdlib[70],
    input_char = Shadow_stdlib[71],
    input_line = Shadow_stdlib[72],
    input = Shadow_stdlib[73],
    really_input = Shadow_stdlib[74],
    really_input_string = Shadow_stdlib[75],
    input_byte = Shadow_stdlib[76],
    input_binary_int = Shadow_stdlib[77],
    input_value = Shadow_stdlib[78],
    seek_in = Shadow_stdlib[79],
    pos_in = Shadow_stdlib[80],
    in_channel_length = Shadow_stdlib[81],
    close_in = Shadow_stdlib[82],
    close_in_noerr = Shadow_stdlib[83],
    set_binary_mode_in = Shadow_stdlib[84],
    string_of_format = Shadow_stdlib[85],
    symbol = Shadow_stdlib[86],
    exit = Shadow_stdlib[87],
    at_exit = Shadow_stdlib[88],
    valid_float_lexem = Shadow_stdlib[89],
    unsafe_really_input = Shadow_stdlib[90],
    do_at_exit = Shadow_stdlib[91],
    do_domain_local_at_exit = Shadow_stdlib[92],
    invalid_arg = Stdlib[1],
    failwith = Stdlib[2],
    Exit$0 = Stdlib[3],
    Match_failure = Stdlib[4],
    Assert_failure = Stdlib[5],
    Invalid_argument = Stdlib[6],
    Failure = Stdlib[7],
    Not_found$0 = Stdlib[8],
    Out_of_memory = Stdlib[9],
    Stack_overflow = Stdlib[10],
    Sys_error = Stdlib[11],
    End_of_file = Stdlib[12],
    Division_by_zero = Stdlib[13],
    Sys_blocked_io = Stdlib[14],
    Undefined_recursive_module = Stdlib[15],
    min = Stdlib[16],
    max = Stdlib[17],
    abs = Stdlib[18],
    max_int$0 = Stdlib[19],
    min_int$0 = Stdlib[20],
    lnot = Stdlib[21],
    infinity$0 = Stdlib[22],
    neg_infinity$0 = Stdlib[23],
    nan$0 = Stdlib[24],
    max_float$0 = Stdlib[25],
    min_float$0 = Stdlib[26],
    epsilon_float$0 = Stdlib[27],
    symbol$0 = Stdlib[28],
    char_of_int$0 = Stdlib[29],
    string_of_bool$0 = Stdlib[30],
    bool_of_string_opt$0 = Stdlib[31],
    bool_of_string$0 = Stdlib[32],
    string_of_int$0 = Stdlib[33],
    int_of_string_opt$0 = Stdlib[34],
    string_of_float$0 = Stdlib[35],
    float_of_string_opt$0 = Stdlib[36],
    symbol$1 = Stdlib[37],
    stdin$0 = Stdlib[38],
    stdout$0 = Stdlib[39],
    stderr$0 = Stdlib[40],
    print_char$0 = Stdlib[41],
    print_string$0 = Stdlib[42],
    print_bytes$0 = Stdlib[43],
    print_int$0 = Stdlib[44],
    print_float$0 = Stdlib[45],
    print_endline$0 = Stdlib[46],
    print_newline$0 = Stdlib[47],
    prerr_char$0 = Stdlib[48],
    prerr_string$0 = Stdlib[49],
    prerr_bytes$0 = Stdlib[50],
    prerr_int$0 = Stdlib[51],
    prerr_float$0 = Stdlib[52],
    prerr_endline$0 = Stdlib[53],
    prerr_newline$0 = Stdlib[54],
    read_line$0 = Stdlib[55],
    read_int_opt$0 = Stdlib[56],
    read_int$0 = Stdlib[57],
    read_float_opt$0 = Stdlib[58],
    read_float$0 = Stdlib[59],
    open_out$0 = Stdlib[60],
    open_out_bin$0 = Stdlib[61],
    open_out_gen$0 = Stdlib[62],
    flush$0 = Stdlib[63],
    flush_all$0 = Stdlib[64],
    output_char$0 = Stdlib[65],
    output_string$0 = Stdlib[66],
    output_bytes$0 = Stdlib[67],
    output$0 = Stdlib[68],
    output_substring$0 = Stdlib[69],
    output_byte$0 = Stdlib[70],
    output_binary_int$0 = Stdlib[71],
    output_value$0 = Stdlib[72],
    seek_out$0 = Stdlib[73],
    pos_out$0 = Stdlib[74],
    out_channel_length$0 = Stdlib[75],
    close_out$0 = Stdlib[76],
    close_out_noerr$0 = Stdlib[77],
    set_binary_mode_out$0 = Stdlib[78],
    open_in$0 = Stdlib[79],
    open_in_bin$0 = Stdlib[80],
    open_in_gen$0 = Stdlib[81],
    input_char$0 = Stdlib[82],
    input_line$0 = Stdlib[83],
    input$0 = Stdlib[84],
    really_input$0 = Stdlib[85],
    really_input_string$0 = Stdlib[86],
    input_byte$0 = Stdlib[87],
    input_binary_int$0 = Stdlib[88],
    input_value$0 = Stdlib[89],
    seek_in$0 = Stdlib[90],
    pos_in$0 = Stdlib[91],
    in_channel_length$0 = Stdlib[92],
    close_in$0 = Stdlib[93],
    close_in_noerr$0 = Stdlib[94],
    set_binary_mode_in$0 = Stdlib[95],
    LargeFile = Stdlib[96],
    string_of_format$0 = Stdlib[97],
    symbol$2 = Stdlib[98],
    exit$0 = Stdlib[99],
    at_exit$0 = Stdlib[100],
    valid_float_lexem$0 = Stdlib[101],
    unsafe_really_input$0 = Stdlib[102],
    do_at_exit$0 = Stdlib[103],
    do_domain_local_at_exit$0 = Stdlib[104],
    Hashtbl = Stdlib_MoreLabels[1],
    Map = Stdlib_MoreLabels[2],
    Set = Stdlib_MoreLabels[3],
    Stdlib$0 =
      [0,
       invalid_arg,
       failwith,
       Exit$0,
       Match_failure,
       Assert_failure,
       Invalid_argument,
       Failure,
       Not_found$0,
       Out_of_memory,
       Stack_overflow,
       Sys_error,
       End_of_file,
       Division_by_zero,
       Sys_blocked_io,
       Undefined_recursive_module,
       min,
       max,
       abs,
       max_int$0,
       min_int$0,
       lnot,
       infinity$0,
       neg_infinity$0,
       nan$0,
       max_float$0,
       min_float$0,
       epsilon_float$0,
       symbol$0,
       char_of_int$0,
       string_of_bool$0,
       bool_of_string_opt$0,
       bool_of_string$0,
       string_of_int$0,
       int_of_string_opt$0,
       string_of_float$0,
       float_of_string_opt$0,
       symbol$1,
       stdin$0,
       stdout$0,
       stderr$0,
       print_char$0,
       print_string$0,
       print_bytes$0,
       print_int$0,
       print_float$0,
       print_endline$0,
       print_newline$0,
       prerr_char$0,
       prerr_string$0,
       prerr_bytes$0,
       prerr_int$0,
       prerr_float$0,
       prerr_endline$0,
       prerr_newline$0,
       read_line$0,
       read_int_opt$0,
       read_int$0,
       read_float_opt$0,
       read_float$0,
       open_out$0,
       open_out_bin$0,
       open_out_gen$0,
       flush$0,
       flush_all$0,
       output_char$0,
       output_string$0,
       output_bytes$0,
       output$0,
       output_substring$0,
       output_byte$0,
       output_binary_int$0,
       output_value$0,
       seek_out$0,
       pos_out$0,
       out_channel_length$0,
       close_out$0,
       close_out_noerr$0,
       set_binary_mode_out$0,
       open_in$0,
       open_in_bin$0,
       open_in_gen$0,
       input_char$0,
       input_line$0,
       input$0,
       really_input$0,
       really_input_string$0,
       input_byte$0,
       input_binary_int$0,
       input_value$0,
       seek_in$0,
       pos_in$0,
       in_channel_length$0,
       close_in$0,
       close_in_noerr$0,
       set_binary_mode_in$0,
       LargeFile,
       string_of_format$0,
       symbol$2,
       exit$0,
       at_exit$0,
       valid_float_lexem$0,
       unsafe_really_input$0,
       do_at_exit$0,
       do_domain_local_at_exit$0,
       Hashtbl,
       Map,
       Set];
   function bool_to_int(x){return x;}
   function symbol$3(_F_, _E_){return _F_ !== _E_ ? 1 : 0;}
   var symbol$4 = runtime.caml_mul;
   function symbol$5(_D_, _C_){return Math.pow(_D_, _C_);}
   function symbol$6(_B_, _A_){return _B_ * _A_;}
   function symbol$7(_z_, _y_){return _z_ + _y_ | 0;}
   function symbol$8(_x_, _w_){return _x_ + _w_;}
   function symbol$9(_v_, _u_){return _v_ - _u_ | 0;}
   function symbol$10(_t_, _s_){return _t_ - _s_;}
   var symbol$11 = runtime.caml_div;
   function symbol$12(_r_, _q_){return _r_ / _q_;}
   var ascending = caml_int_compare;
   function descending(x, y){return caml_int_compare(y, x);}
   function max$0(x, y){return runtime.caml_csel_value(y <= x ? 1 : 0, x, y);}
   function min$0(x, y){return runtime.caml_csel_value(x <= y ? 1 : 0, x, y);}
   var
    Int_replace_polymorphic_compar = [0, ascending, descending, max$0, min$0],
    ascending$0 = Int_replace_polymorphic_compar[1],
    descending$0 = Int_replace_polymorphic_compar[2],
    max$1 = Int_replace_polymorphic_compar[3],
    min$1 = Int_replace_polymorphic_compar[4],
    symbol$13 = caml_lessthan,
    symbol$14 = caml_lessequal,
    symbol$15 = caml_notequal,
    symbol$16 = caml_equal,
    symbol$17 = caml_greaterthan,
    symbol$18 = caml_greaterequal;
   function ascending$1(x, y){return caml_call2(Base_Poly0[1], x, y);}
   function descending$1(x, y){return caml_call2(Base_Poly0[2], x, y);}
   var
    compare = caml_int_compare,
    compare_local = caml_int_compare,
    equal = caml_equal,
    equal_local = caml_equal;
   function max$2(x, y){
    return runtime.caml_csel_value(caml_greaterequal(x, y), x, y);
   }
   function min$2(x, y){
    return runtime.caml_csel_value(caml_lessequal(x, y), x, y);
   }
   var
    Int32_replace_polymorphic_comp =
      [0,
       symbol$13,
       symbol$14,
       symbol$15,
       symbol$16,
       symbol$17,
       symbol$18,
       ascending$1,
       descending$1,
       compare,
       compare_local,
       equal,
       equal_local,
       max$2,
       min$2];
   function ascending$2(x, y){return caml_call2(Base_Poly0[1], x, y);}
   function descending$2(x, y){return caml_call2(Base_Poly0[2], x, y);}
   function max$3(x, y){
    return runtime.caml_csel_value(caml_greaterequal(x, y), x, y);
   }
   function min$3(x, y){
    return runtime.caml_csel_value(caml_lessequal(x, y), x, y);
   }
   var
    Int64_replace_polymorphic_comp =
      [0, ascending$2, descending$2, max$3, min$3],
    symbol$19 = caml_lessthan,
    symbol$20 = caml_lessequal,
    symbol$21 = caml_notequal,
    symbol$22 = caml_equal,
    symbol$23 = caml_greaterthan,
    symbol$24 = caml_greaterequal;
   function ascending$3(x, y){return caml_call2(Base_Poly0[1], x, y);}
   function descending$3(x, y){return caml_call2(Base_Poly0[2], x, y);}
   var
    compare$0 = caml_int_compare,
    compare_local$0 = caml_int_compare,
    equal$0 = caml_equal,
    equal_local$0 = caml_equal;
   function max$4(x, y){
    return runtime.caml_csel_value(caml_greaterequal(x, y), x, y);
   }
   function min$4(x, y){
    return runtime.caml_csel_value(caml_lessequal(x, y), x, y);
   }
   var
    Nativeint_replace_polymorphic_ =
      [0,
       symbol$19,
       symbol$20,
       symbol$21,
       symbol$22,
       symbol$23,
       symbol$24,
       ascending$3,
       descending$3,
       compare$0,
       compare_local$0,
       equal$0,
       equal_local$0,
       max$4,
       min$4];
   function symbol$25(x, y){return x < y ? 1 : 0;}
   function symbol$26(x, y){return x <= y ? 1 : 0;}
   function symbol$27(x, y){return x !== y ? 1 : 0;}
   function symbol$28(x, y){return x === y ? 1 : 0;}
   function symbol$29(x, y){return y < x ? 1 : 0;}
   function symbol$30(x, y){return y <= x ? 1 : 0;}
   function ascending$4(x, y){return caml_call2(Base_Poly0[1], x, y);}
   function descending$4(x, y){return caml_call2(Base_Poly0[2], x, y);}
   var compare$1 = caml_int_compare, compare_local$1 = caml_int_compare;
   function equal$1(x, y){return x === y ? 1 : 0;}
   function equal_local$1(x, y){return x === y ? 1 : 0;}
   function max$5(x, y){return runtime.caml_csel_value(y <= x ? 1 : 0, x, y);}
   function min$5(x, y){return runtime.caml_csel_value(x <= y ? 1 : 0, x, y);}
   var
    Bool_replace_polymorphic_compa =
      [0,
       symbol$25,
       symbol$26,
       symbol$27,
       symbol$28,
       symbol$29,
       symbol$30,
       ascending$4,
       descending$4,
       compare$1,
       compare_local$1,
       equal$1,
       equal_local$1,
       max$5,
       min$5];
   function symbol$31(x, y){return x < y ? 1 : 0;}
   function symbol$32(x, y){return x <= y ? 1 : 0;}
   function symbol$33(x, y){return x !== y ? 1 : 0;}
   function symbol$34(x, y){return x === y ? 1 : 0;}
   function symbol$35(x, y){return y < x ? 1 : 0;}
   function symbol$36(x, y){return y <= x ? 1 : 0;}
   function ascending$5(x, y){return caml_call2(Base_Poly0[1], x, y);}
   function descending$5(x, y){return caml_call2(Base_Poly0[2], x, y);}
   var compare$2 = caml_int_compare, compare_local$2 = caml_int_compare;
   function equal$2(x, y){return x === y ? 1 : 0;}
   function equal_local$2(x, y){return x === y ? 1 : 0;}
   function max$6(x, y){return runtime.caml_csel_value(y <= x ? 1 : 0, x, y);}
   function min$6(x, y){return runtime.caml_csel_value(x <= y ? 1 : 0, x, y);}
   var
    Char_replace_polymorphic_compa =
      [0,
       symbol$31,
       symbol$32,
       symbol$33,
       symbol$34,
       symbol$35,
       symbol$36,
       ascending$5,
       descending$5,
       compare$2,
       compare_local$2,
       equal$2,
       equal_local$2,
       max$6,
       min$6];
   function symbol$37(x, y){return x < y ? 1 : 0;}
   function symbol$38(x, y){return x <= y ? 1 : 0;}
   function symbol$39(x, y){return x !== y ? 1 : 0;}
   function symbol$40(x, y){return x === y ? 1 : 0;}
   function symbol$41(x, y){return y < x ? 1 : 0;}
   function symbol$42(x, y){return y <= x ? 1 : 0;}
   function ascending$6(x, y){
    return caml_call2(Int_replace_polymorphic_compar[1], x, y);
   }
   function descending$6(x, y){
    return caml_call2(Int_replace_polymorphic_compar[2], x, y);
   }
   var compare$3 = caml_int_compare;
   function equal$3(x, y){return x === y ? 1 : 0;}
   var compare_local$3 = caml_int_compare;
   function equal_local$3(x, y){return x === y ? 1 : 0;}
   function max$7(x, y){return runtime.caml_csel_value(y <= x ? 1 : 0, x, y);}
   function min$7(x, y){return runtime.caml_csel_value(x <= y ? 1 : 0, x, y);}
   var
    Uchar_replace_polymorphic_comp =
      [0,
       symbol$37,
       symbol$38,
       symbol$39,
       symbol$40,
       symbol$41,
       symbol$42,
       ascending$6,
       descending$6,
       compare$3,
       equal$3,
       compare_local$3,
       equal_local$3,
       max$7,
       min$7];
   function ascending$7(x, y){return caml_call2(Base_Poly0[1], x, y);}
   function descending$7(x, y){return caml_call2(Base_Poly0[2], x, y);}
   var compare_local$4 = runtime.caml_float_compare;
   function equal_local$4(x, y){return x == y ? 1 : 0;}
   function max$8(x, y){return runtime.caml_csel_value(y <= x ? 1 : 0, x, y);}
   function min$8(x, y){return runtime.caml_csel_value(x <= y ? 1 : 0, x, y);}
   var
    Float_replace_polymorphic_comp =
      [0,
       ascending$7,
       descending$7,
       compare_local$4,
       equal_local$4,
       max$8,
       min$8],
    symbol$43 = runtime.caml_string_lessthan,
    symbol$44 = caml_string_lessequal,
    symbol$45 = runtime.caml_string_notequal,
    symbol$46 = caml_string_equal,
    symbol$47 = runtime.caml_string_greaterthan,
    symbol$48 = caml_string_greaterequal;
   function ascending$8(x, y){return caml_call2(Base_Poly0[1], x, y);}
   function descending$8(x, y){return caml_call2(Base_Poly0[2], x, y);}
   var
    compare$4 = caml_string_compare,
    compare_local$5 = caml_string_compare,
    equal$4 = caml_string_equal,
    equal_local$5 = caml_string_equal;
   function max$9(x, y){
    return runtime.caml_csel_value(caml_string_greaterequal(x, y), x, y);
   }
   function min$9(x, y){
    return runtime.caml_csel_value(caml_string_lessequal(x, y), x, y);
   }
   var
    String_replace_polymorphic_com =
      [0,
       symbol$43,
       symbol$44,
       symbol$45,
       symbol$46,
       symbol$47,
       symbol$48,
       ascending$8,
       descending$8,
       compare$4,
       compare_local$5,
       equal$4,
       equal_local$5,
       max$9,
       min$9],
    symbol$49 = runtime.caml_bytes_lessthan,
    symbol$50 = caml_bytes_lessequal,
    symbol$51 = runtime.caml_bytes_notequal,
    symbol$52 = caml_bytes_equal,
    symbol$53 = runtime.caml_bytes_greaterthan,
    symbol$54 = caml_bytes_greaterequal;
   function ascending$9(x, y){return caml_call2(Base_Poly0[1], x, y);}
   function descending$9(x, y){return caml_call2(Base_Poly0[2], x, y);}
   var
    compare$5 = caml_bytes_compare,
    compare_local$6 = caml_bytes_compare,
    equal$5 = caml_bytes_equal,
    equal_local$6 = caml_bytes_equal;
   function max$10(x, y){
    return runtime.caml_csel_value(caml_bytes_greaterequal(x, y), x, y);
   }
   function min$10(x, y){
    return runtime.caml_csel_value(caml_bytes_lessequal(x, y), x, y);
   }
   var
    Bytes_replace_polymorphic_comp =
      [0,
       symbol$49,
       symbol$50,
       symbol$51,
       symbol$52,
       symbol$53,
       symbol$54,
       ascending$9,
       descending$9,
       compare$5,
       compare_local$6,
       equal$5,
       equal_local$6,
       max$10,
       min$10],
    symbol$55 = Stdlib$0[37],
    symbol$56 = Stdlib$0[28];
   function symbol$57(_p_){return - _p_ | 0;}
   function symbol$58(_o_){return - _o_;}
   function asr(_n_, _m_){return _n_ >> _m_;}
   function land(_l_, _k_){return _l_ & _k_;}
   var lnot$0 = Stdlib$0[21];
   function lor(_j_, _i_){return _j_ | _i_;}
   function lsl(_h_, _g_){return _h_ << _g_;}
   function lsr(_f_, _e_){return _f_ >>> _e_ | 0;}
   function lxor(_d_, _c_){return _d_ ^ _c_;}
   var mod = runtime.caml_mod, abs$0 = Stdlib$0[18], failwith$0 = Stdlib$0[2];
   function fst(_b_){return _b_[1];}
   var invalid_arg$0 = Stdlib$0[1];
   function snd(_a_){return _a_[2];}
   var
    float_of_string = runtime.caml_float_of_string,
    am_testing = runtime.Base_am_testing(0),
    Base_Import0 =
      [0,
       Exit,
       Not_found,
       max_int,
       min_int,
       infinity,
       neg_infinity,
       nan,
       max_float,
       min_float,
       epsilon_float,
       char_of_int,
       string_of_bool,
       bool_of_string_opt,
       bool_of_string,
       string_of_int,
       int_of_string_opt,
       string_of_float,
       float_of_string_opt,
       stdin,
       stdout,
       stderr,
       print_char,
       print_string,
       print_bytes,
       print_int,
       print_float,
       print_endline,
       print_newline,
       prerr_char,
       prerr_string,
       prerr_bytes,
       prerr_int,
       prerr_float,
       prerr_endline,
       prerr_newline,
       read_line,
       read_int_opt,
       read_int,
       read_float_opt,
       read_float,
       open_out,
       open_out_bin,
       open_out_gen,
       flush,
       flush_all,
       output_char,
       output_string,
       output_bytes,
       output,
       output_substring,
       output_byte,
       output_binary_int,
       output_value,
       seek_out,
       pos_out,
       out_channel_length,
       close_out,
       close_out_noerr,
       set_binary_mode_out,
       open_in,
       open_in_bin,
       open_in_gen,
       input_char,
       input_line,
       input,
       really_input,
       really_input_string,
       input_byte,
       input_binary_int,
       input_value,
       seek_in,
       pos_in,
       in_channel_length,
       close_in,
       close_in_noerr,
       set_binary_mode_in,
       string_of_format,
       symbol,
       exit,
       at_exit,
       valid_float_lexem,
       unsafe_really_input,
       do_at_exit,
       do_domain_local_at_exit,
       Stdlib$0,
       bool_to_int,
       symbol$3,
       symbol$4,
       symbol$5,
       symbol$6,
       symbol$7,
       symbol$8,
       symbol$9,
       symbol$10,
       symbol$11,
       symbol$12,
       Int_replace_polymorphic_compar,
       ascending$0,
       descending$0,
       max$1,
       min$1,
       Int32_replace_polymorphic_comp,
       Int64_replace_polymorphic_comp,
       Nativeint_replace_polymorphic_,
       Bool_replace_polymorphic_compa,
       Char_replace_polymorphic_compa,
       Uchar_replace_polymorphic_comp,
       Float_replace_polymorphic_comp,
       String_replace_polymorphic_com,
       Bytes_replace_polymorphic_comp,
       symbol$55,
       symbol$56,
       symbol$57,
       symbol$58,
       asr,
       land,
       lnot$0,
       lor,
       lsl,
       lsr,
       lxor,
       mod,
       abs$0,
       failwith$0,
       fst,
       invalid_arg$0,
       snd,
       float_of_string,
       am_testing];
   runtime.caml_register_global(4, Base_Import0, "Base__Import0");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Int0
//# unitInfo: Requires: Stdlib
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    to_string = Stdlib[33],
    of_string = runtime.caml_int_of_string,
    of_string_opt = Stdlib[34];
   function to_float(_d_){return _d_;}
   function of_float(_c_){return _c_ | 0;}
   var max_value = Stdlib[19], min_value = Stdlib[20];
   function succ(_b_){return _b_ + 1 | 0;}
   function pred(_a_){return _a_ - 1 | 0;}
   var
    Base_Int0 =
      [0,
       to_string,
       of_string,
       of_string_opt,
       to_float,
       of_float,
       max_value,
       min_value,
       succ,
       pred];
   runtime.caml_register_global(1, Base_Int0, "Base__Int0");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Printf
//# unitInfo: Requires: Base__Import0, Stdlib__Printf
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_Import0 = global_data.Base__Import0,
    Stdlib_Printf = global_data.Stdlib__Printf,
    sprintf = Stdlib_Printf[4],
    bprintf = Stdlib_Printf[5],
    ifprintf = Stdlib_Printf[6],
    ksprintf = Stdlib_Printf[10],
    kbprintf = Stdlib_Printf[11];
   function failwithf(fmt){
    return caml_call2
            (ksprintf,
             function(s, param){return caml_call1(Base_Import0[124], s);},
             fmt);
   }
   function invalid_argf(fmt){
    return caml_call2
            (ksprintf,
             function(s, param){return caml_call1(Base_Import0[126], s);},
             fmt);
   }
   var
    Base_Printf =
      [0,
       ifprintf,
       sprintf,
       bprintf,
       ksprintf,
       kbprintf,
       failwithf,
       invalid_argf];
   runtime.caml_register_global(2, Base_Printf, "Base__Printf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Sys0
//# unitInfo: Requires: Base__Import0, Base__Printf, Stdlib__Sys
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_sys_argv = runtime.caml_sys_argv,
    caml_sys_getenv = runtime.caml_sys_getenv,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_Import0 = global_data.Base__Import0,
    Base_Printf = global_data.Base__Printf,
    Stdlib_Sys = global_data.Stdlib__Sys,
    backend_type = Stdlib_Sys[5],
    interactive = Stdlib_Sys[3],
    os_type = Stdlib_Sys[4],
    unix = Stdlib_Sys[6],
    win32 = Stdlib_Sys[7],
    cygwin = Stdlib_Sys[8],
    word_size_in_bits = Stdlib_Sys[9],
    int_size_in_bits = Stdlib_Sys[10],
    big_endian = Stdlib_Sys[11],
    max_string_length = Stdlib_Sys[12],
    max_array_length = Stdlib_Sys[13],
    runtime_variant = runtime.caml_runtime_variant,
    runtime_parameters = runtime.caml_runtime_parameters,
    argv = caml_sys_argv(0),
    _a_ =
      [0,
       [11,
        "Sys.getenv_exn: environment variable ",
        [2, 0, [11, " is not set", 0]]],
       "Sys.getenv_exn: environment variable %s is not set"];
   function get_argv(param){return caml_sys_argv(0);}
   var
    ocaml_version = Stdlib_Sys[46],
    enable_runtime_warnings = Stdlib_Sys[49],
    runtime_warnings_enabled = Stdlib_Sys[50];
   function Make_immediate64(_h_, _g_){
    return caml_call1(caml_call1(Stdlib_Sys[51][1], _h_), _g_);
   }
   function getenv_exn(var$0){
    try{var _e_ = caml_sys_getenv(var$0); return _e_;}
    catch(_f_){
     var _d_ = caml_wrap_exception(_f_);
     if(_d_ === Base_Import0[85][8])
      return caml_call3(Base_Printf[6], _a_, var$0, 0);
     throw caml_maybe_attach_backtrace(_d_, 0);
    }
   }
   function getenv(var$0){
    try{var x = caml_sys_getenv(var$0);}
    catch(_c_){
     var _b_ = caml_wrap_exception(_c_);
     if(_b_ === Base_Import0[85][8]) return 0;
     throw caml_maybe_attach_backtrace(_b_, 0);
    }
    return [0, x];
   }
   var
    Break = Stdlib_Sys[44],
    Base_Sys0 =
      [0,
       backend_type,
       interactive,
       os_type,
       unix,
       win32,
       cygwin,
       word_size_in_bits,
       int_size_in_bits,
       big_endian,
       max_string_length,
       max_array_length,
       runtime_variant,
       runtime_parameters,
       argv,
       get_argv,
       ocaml_version,
       enable_runtime_warnings,
       runtime_warnings_enabled,
       Make_immediate64,
       getenv_exn,
       getenv,
       Break];
   runtime.caml_register_global(4, Base_Sys0, "Base__Sys0");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Array0
//# unitInfo: Requires: Base__Import0, Base__Int0, Base__Printf, Base__Sys0, Stdlib, Stdlib__ArrayLabels
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_check_bound = runtime.caml_check_bound,
    caml_make_vect = runtime.caml_make_vect;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_ArrayLabels = global_data.Stdlib__ArrayLabels,
    Base_Import0 = global_data.Base__Import0,
    Base_Int0 = global_data.Base__Int0;
   global_data.Stdlib;
   var
    Base_Printf = global_data.Base__Printf,
    Base_Sys0 = global_data.Base__Sys0,
    invalid_argf = Base_Printf[7],
    Array = [0],
    max_length = Base_Sys0[11],
    cst_Array_init = "Array.init";
   function create(len, x){return caml_make_vect(len, x);}
   function create_local(len, x){return caml_make_vect(len, x);}
   function create_float_uninitialized(len){
    return runtime.caml_make_float_vect(len);
   }
   var
    append = Stdlib_ArrayLabels[3],
    blit = Stdlib_ArrayLabels[8],
    concat = Stdlib_ArrayLabels[4],
    copy = Stdlib_ArrayLabels[6],
    fill = Stdlib_ArrayLabels[7];
   function init(len, f){
    if(0 === len) return [0];
    if(0 > len) return caml_call1(Base_Import0[126], cst_Array_init);
    var
     res = caml_make_vect(len, caml_call1(f, 0)),
     _s_ = caml_call1(Base_Int0[9], len),
     _r_ = 1;
    if(_s_ >= 1){
     var i = _r_;
     for(;;){
      res[1 + i] = caml_call1(f, i);
      var _t_ = i + 1 | 0;
      if(_s_ === i) break;
      var i = _t_;
     }
    }
    return res;
   }
   var
    make_matrix = Stdlib_ArrayLabels[2],
    of_list = Stdlib_ArrayLabels[10],
    sub = Stdlib_ArrayLabels[5],
    to_list = Stdlib_ArrayLabels[9];
   function fold(t, init, f){
    var
     r = [0, init],
     _p_ = caml_call2(Base_Import0[93], t.length - 1, 1),
     _o_ = 0;
    if(_p_ >= 0){
     var i = _o_;
     for(;;){
      r[1] = caml_call2(f, r[1], t[1 + i]);
      var _q_ = i + 1 | 0;
      if(_p_ === i) break;
      var i = _q_;
     }
    }
    return r[1];
   }
   function fold_right(t, f, init){
    var r = [0, init], _m_ = caml_call2(Base_Import0[93], t.length - 1, 1);
    if(_m_ >= 0){
     var i = _m_;
     for(;;){
      r[1] = caml_call2(f, t[1 + i], r[1]);
      var _n_ = i - 1 | 0;
      if(0 === i) break;
      var i = _n_;
     }
    }
    return r[1];
   }
   function iter(t, f){
    var _k_ = caml_call2(Base_Import0[93], t.length - 1, 1), _j_ = 0;
    if(_k_ >= 0){
     var i = _j_;
     for(;;){
      caml_call1(f, t[1 + i]);
      var _l_ = i + 1 | 0;
      if(_k_ === i) break;
      var i = _l_;
     }
    }
    return 0;
   }
   function iteri(t, f){
    var _h_ = caml_call2(Base_Import0[93], t.length - 1, 1), _g_ = 0;
    if(_h_ >= 0){
     var i = _g_;
     for(;;){
      caml_call2(f, i, t[1 + i]);
      var _i_ = i + 1 | 0;
      if(_h_ === i) break;
      var i = _i_;
     }
    }
    return 0;
   }
   function map(t, f){
    var len = t.length - 1;
    if(0 === len) return [0];
    var
     r = caml_make_vect(len, caml_call1(f, t[1])),
     _e_ = caml_call2(Base_Import0[93], len, 1),
     _d_ = 1;
    if(_e_ >= 1){
     var i = _d_;
     for(;;){
      r[1 + i] = caml_call1(f, t[1 + i]);
      var _f_ = i + 1 | 0;
      if(_e_ === i) break;
      var i = _f_;
     }
    }
    return r;
   }
   function mapi(t, f){
    var len = t.length - 1;
    if(0 === len) return [0];
    var
     r = caml_make_vect(len, caml_call2(f, 0, t[1])),
     _b_ = caml_call2(Base_Import0[93], len, 1),
     _a_ = 1;
    if(_b_ >= 1){
     var i = _a_;
     for(;;){
      r[1 + i] = caml_call2(f, i, t[1 + i]);
      var _c_ = i + 1 | 0;
      if(_b_ === i) break;
      var i = _c_;
     }
    }
    return r;
   }
   function stable_sort(t, compare){
    return caml_call2(Stdlib_ArrayLabels[35], compare, t);
   }
   function swap(t, i, j){
    var
     elt_i = caml_check_bound(t, i)[1 + i],
     elt_j = caml_check_bound(t, j)[1 + j];
    t[1 + i] = elt_j;
    t[1 + j] = elt_i;
    return 0;
   }
   var
    Base_Array0 =
      [0,
       invalid_argf,
       Array,
       max_length,
       create,
       create_local,
       create_float_uninitialized,
       append,
       blit,
       concat,
       copy,
       fill,
       init,
       make_matrix,
       of_list,
       sub,
       to_list,
       fold,
       fold_right,
       iter,
       iteri,
       map,
       mapi,
       stable_sort,
       swap];
   runtime.caml_register_global(10, Base_Array0, "Base__Array0");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Char0
//# unitInfo: Requires: Base__Printf, Stdlib__Char
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_Printf = global_data.Base__Printf,
    Stdlib_Char = global_data.Stdlib__Char,
    failwithf = Base_Printf[6],
    escaped = Stdlib_Char[2],
    lowercase = Stdlib_Char[3],
    _a_ =
      [0,
       [11, "Char.of_int_exn got integer out of range: ", [4, 0, 0, 0, 0]],
       "Char.of_int_exn got integer out of range: %d"];
   function to_int(_e_){return _e_;}
   function unsafe_of_int(_d_){return _d_;}
   var uppercase = Stdlib_Char[4];
   function int_is_ok(i){
    var _b_ = 0 <= i ? 1 : 0, _c_ = _b_ ? i <= 255 ? 1 : 0 : _b_;
    return _c_;
   }
   var min_value = 0, max_value = 255;
   function of_int(i){return int_is_ok(i) ? [0, i] : 0;}
   function of_int_exn(i){
    return int_is_ok(i) ? i : caml_call3(failwithf, _a_, i, 0);
   }
   function equal(t1, t2){return t1 === t2 ? 1 : 0;}
   var
    Base_Char0 =
      [0,
       failwithf,
       escaped,
       lowercase,
       to_int,
       unsafe_of_int,
       uppercase,
       int_is_ok,
       min_value,
       max_value,
       of_int,
       of_int_exn,
       equal];
   runtime.caml_register_global(3, Base_Char0, "Base__Char0");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Hash_intf
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Base_Hash_intf = [0];
   runtime.caml_register_global(0, Base_Hash_intf, "Base__Hash_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__List0
//# unitInfo: Requires: Base__Import0, Stdlib__ListLabels
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_Import0 = global_data.Base__Import0,
    Stdlib_ListLabels = global_data.Stdlib__ListLabels,
    hd_exn = Stdlib_ListLabels[6],
    rev_append = Stdlib_ListLabels[13],
    tl_exn = Stdlib_ListLabels[7],
    unzip = Stdlib_ListLabels[57],
    cst_List_exists2 = "List.exists2",
    cst_List_fold_left2 = "List.fold_left2",
    cst_List_for_all2 = "List.for_all2",
    cst_List_iter2 = "List.iter2",
    cst_List_rev_map2 = "List.rev_map2";
   function length(l$0){
    var len = 0, param = l$0;
    for(;;){
     if(! param) return len;
     var
      l = param[2],
      len$0 = caml_call2(Base_Import0[91], len, 1),
      len = len$0,
      param = l;
    }
   }
   function exists(t, f){
    var t$0 = t;
    for(;;){
     if(! t$0) return 0;
     var xs = t$0[2], x = t$0[1];
     if(caml_call1(f, x)) return 1;
     var t$0 = xs;
    }
   }
   function exists2_ok(l1, l2, f){
    var l1$0 = l1, l2$0 = l2;
    for(;;){
     if(l1$0){
      if(l2$0){
       var
        l2$1 = l2$0[2],
        a2 = l2$0[1],
        l1$1 = l1$0[2],
        a1 = l1$0[1],
        _e_ = caml_call2(f, a1, a2);
       if(_e_) return _e_;
       var l1$0 = l1$1, l2$0 = l2$1;
       continue;
      }
     }
     else if(! l2$0) return 0;
     return caml_call1(Base_Import0[126], cst_List_exists2);
    }
   }
   function fold(t, init, f){
    var t$0 = t, init$0 = init;
    for(;;){
     if(! t$0) return init$0;
     var
      l = t$0[2],
      a = t$0[1],
      init$1 = caml_call2(f, init$0, a),
      t$0 = l,
      init$0 = init$1;
    }
   }
   function fold2_ok(l1, l2, init, f){
    var l1$0 = l1, l2$0 = l2, init$0 = init;
    for(;;){
     if(l1$0){
      if(l2$0){
       var
        l2$1 = l2$0[2],
        a2 = l2$0[1],
        l1$1 = l1$0[2],
        a1 = l1$0[1],
        init$1 = caml_call3(f, init$0, a1, a2),
        l1$0 = l1$1,
        l2$0 = l2$1,
        init$0 = init$1;
       continue;
      }
     }
     else if(! l2$0) return init$0;
     return caml_call1(Base_Import0[126], cst_List_fold_left2);
    }
   }
   function for_all(t, f){
    return 1 - exists(t, function(x){return 1 - caml_call1(f, x);});
   }
   function for_all2_ok(l1, l2, f){
    var l1$0 = l1, l2$0 = l2;
    for(;;){
     if(l1$0){
      if(l2$0){
       var
        l2$1 = l2$0[2],
        a2 = l2$0[1],
        l1$1 = l1$0[2],
        a1 = l1$0[1],
        _d_ = caml_call2(f, a1, a2);
       if(! _d_) return _d_;
       var l1$0 = l1$1, l2$0 = l2$1;
       continue;
      }
     }
     else if(! l2$0) return 1;
     return caml_call1(Base_Import0[126], cst_List_for_all2);
    }
   }
   function iter(t, f){
    var t$0 = t;
    for(;;){
     if(! t$0) return 0;
     var l = t$0[2], a = t$0[1];
     caml_call1(f, a);
     var t$0 = l;
    }
   }
   function iter2_ok(l1, l2, f){
    var l1$0 = l1, l2$0 = l2;
    for(;;){
     if(l1$0){
      if(l2$0){
       var l2$1 = l2$0[2], a2 = l2$0[1], l1$1 = l1$0[2], a1 = l1$0[1];
       caml_call2(f, a1, a2);
       var l1$0 = l1$1, l2$0 = l2$1;
       continue;
      }
     }
     else if(! l2$0) return 0;
     return caml_call1(Base_Import0[126], cst_List_iter2);
    }
   }
   function nontail_map(t, f){
    if(! t) return 0;
    var xs = t[2], x = t[1], y = caml_call1(f, x);
    return [0, y, nontail_map(xs, f)];
   }
   function nontail_mapi(t, f){
    return caml_call2(Stdlib_ListLabels[21], f, t);
   }
   function partition(t, f){return caml_call2(Stdlib_ListLabels[47], f, t);}
   function rev_map(l$0, f){
    var accu = 0, param = l$0;
    for(;;){
     if(! param) return accu;
     var
      l = param[2],
      a = param[1],
      accu$0 = [0, caml_call1(f, a), accu],
      accu = accu$0,
      param = l;
    }
   }
   function rev_map2_ok(l1$1, l2$1, f){
    var accu = 0, l1 = l1$1, l2 = l2$1;
    for(;;){
     if(l1){
      if(l2){
       var
        l2$0 = l2[2],
        a2 = l2[1],
        l1$0 = l1[2],
        a1 = l1[1],
        accu$0 = [0, caml_call2(f, a1, a2), accu],
        accu = accu$0,
        l1 = l1$0,
        l2 = l2$0;
       continue;
      }
     }
     else if(! l2) return accu;
     return caml_call1(Base_Import0[126], cst_List_rev_map2);
    }
   }
   function rev(res){
    if(res){
     var match = res[2];
     if(match){
      var rest = match[2], y = match[1], x = res[1];
      return caml_call2(rev_append, rest, [0, y, [0, x, 0]]);
     }
    }
    return res;
   }
   function fold_right(l, f, init){
    if(! l) return init;
    function _c_(a, b){return caml_call2(f, b, a);}
    return fold(rev(l), init, _c_);
   }
   function fold_right2_ok(l1, l2, f, init){
    if(! l1 && ! l2) return init;
    function _a_(a, b, c){return caml_call3(f, b, c, a);}
    var _b_ = rev(l2);
    return fold2_ok(rev(l1), _b_, init, _a_);
   }
   var
    Base_List0 =
      [0,
       hd_exn,
       rev_append,
       tl_exn,
       unzip,
       length,
       exists,
       exists2_ok,
       fold,
       fold2_ok,
       for_all,
       for_all2_ok,
       iter,
       iter2_ok,
       nontail_map,
       nontail_mapi,
       partition,
       rev_map,
       rev_map2_ok,
       rev,
       fold_right,
       fold_right2_ok];
   runtime.caml_register_global(7, Base_List0, "Base__List0");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Hash
//# unitInfo: Requires: Base__Char0, Base__Hash_intf, Base__Import0, Base__Int0, Base__List0, Base_internalhash_types, CamlinternalLazy
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    description = "internalhash",
    Base_Import0 = global_data.Base__Import0,
    Base_Int0 = global_data.Base__Int0,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Base_List0 = global_data.Base__List0,
    Base_Char0 = global_data.Base__Char0;
   function Folding(Hash){
    function hash_fold_unit(s, param){return s;}
    var
     hash_fold_int = Hash[2],
     hash_fold_int64 = Hash[3],
     hash_fold_float = Hash[4],
     hash_fold_string = Hash[5];
    function as_int(f, s, x){
     return caml_call2(hash_fold_int, s, caml_call1(f, x));
    }
    function _Q_(_ar_){return _ar_;}
    function hash_fold_int32(_ap_, _aq_){return as_int(_Q_, _ap_, _aq_);}
    var _R_ = Base_Char0[4];
    function hash_fold_char(_an_, _ao_){return as_int(_R_, _an_, _ao_);}
    function _S_(param){return param ? 1 : 0;}
    function hash_fold_bool(_al_, _am_){return as_int(_S_, _al_, _am_);}
    function hash_fold_nativeint(s, x){
     return caml_call2(hash_fold_int64, s, runtime.caml_int64_of_int32(x));
    }
    function hash_fold_option(hash_fold_elem, s, param){
     if(! param) return caml_call2(hash_fold_int, s, 0);
     var x = param[1];
     return caml_call2(hash_fold_elem, caml_call2(hash_fold_int, s, 1), x);
    }
    function hash_fold_list(hash_fold_elem, s$1, list$1){
     var
      s$2 = caml_call2(hash_fold_int, s$1, caml_call1(Base_List0[5], list$1)),
      s = s$2,
      list = list$1;
     for(;;){
      if(! list) return s;
      var
       list$0 = list[2],
       x = list[1],
       s$0 = caml_call2(hash_fold_elem, s, x),
       s = s$0,
       list = list$0;
     }
    }
    function hash_fold_lazy_t(hash_fold_elem, s, x){
     var _aj_ = runtime.caml_obj_tag(x);
     a:
     if(250 === _aj_)
      var _ak_ = x[1];
     else{
      if(246 !== _aj_ && 244 !== _aj_){var _ak_ = x; break a;}
      var _ak_ = caml_call1(CamlinternalLazy[2], x);
     }
     return caml_call2(hash_fold_elem, s, _ak_);
    }
    function hash_fold_ref_frozen(hash_fold_elem, s, x){return caml_call2(hash_fold_elem, s, x[1]);
    }
    function hash_fold_array_frozen(hash_fold_elem, s$1, array){
     var
      s$2 = caml_call2(hash_fold_int, s$1, array.length - 1),
      s = s$2,
      i = 0;
     for(;;){
      if(i === array.length - 1) return s;
      var
       e = array[1 + i],
       i$0 = caml_call2(Base_Import0[91], i, 1),
       s$0 = caml_call2(hash_fold_elem, s, e),
       s = s$0,
       i = i$0;
     }
    }
    function hash_nativeint(x){
     var
      _ah_ = caml_call1(Hash[6], 0),
      _ai_ = hash_fold_nativeint(caml_call2(Hash[7], 0, _ah_), x);
     return caml_call1(Hash[8], _ai_);
    }
    function hash_int64(x){
     var
      _af_ = caml_call1(Hash[6], 0),
      _ag_ = caml_call2(hash_fold_int64, caml_call2(Hash[7], 0, _af_), x);
     return caml_call1(Hash[8], _ag_);
    }
    function hash_int32(x){
     var
      _ad_ = caml_call1(Hash[6], 0),
      _ae_ = hash_fold_int32(caml_call2(Hash[7], 0, _ad_), x);
     return caml_call1(Hash[8], _ae_);
    }
    function hash_char(x){
     var
      _ab_ = caml_call1(Hash[6], 0),
      _ac_ = hash_fold_char(caml_call2(Hash[7], 0, _ab_), x);
     return caml_call1(Hash[8], _ac_);
    }
    function hash_int(x){
     var
      _$_ = caml_call1(Hash[6], 0),
      _aa_ = caml_call2(hash_fold_int, caml_call2(Hash[7], 0, _$_), x);
     return caml_call1(Hash[8], _aa_);
    }
    function hash_bool(x){
     var
      _Z_ = caml_call1(Hash[6], 0),
      ___ = hash_fold_bool(caml_call2(Hash[7], 0, _Z_), x);
     return caml_call1(Hash[8], ___);
    }
    function hash_string(x){
     var
      _X_ = caml_call1(Hash[6], 0),
      _Y_ = caml_call2(hash_fold_string, caml_call2(Hash[7], 0, _X_), x);
     return caml_call1(Hash[8], _Y_);
    }
    function hash_float(x){
     var
      _V_ = caml_call1(Hash[6], 0),
      _W_ = caml_call2(hash_fold_float, caml_call2(Hash[7], 0, _V_), x);
     return caml_call1(Hash[8], _W_);
    }
    function hash_unit(x){
     var _T_ = caml_call1(Hash[6], 0), _U_ = caml_call2(Hash[7], 0, _T_);
     return caml_call1(Hash[8], _U_);
    }
    return [0,
            hash_fold_nativeint,
            hash_fold_int64,
            hash_fold_int32,
            hash_fold_char,
            hash_fold_int,
            hash_fold_bool,
            hash_fold_string,
            hash_fold_float,
            hash_fold_unit,
            hash_fold_option,
            hash_fold_list,
            hash_fold_lazy_t,
            hash_fold_ref_frozen,
            hash_fold_array_frozen,
            hash_nativeint,
            hash_int64,
            hash_int32,
            hash_char,
            hash_int,
            hash_bool,
            hash_string,
            hash_float,
            hash_unit];
   }
   function F(Hash){
    var
     description = Hash[1],
     fold_int = Hash[2],
     fold_int64 = Hash[3],
     fold_float = Hash[4],
     fold_string = Hash[5],
     alloc = Hash[6],
     reset = Hash[7],
     get_hash_value = Hash[8],
     For_tests = Hash[9];
    function create(seed, param){
     return caml_call2(reset, seed, caml_call1(alloc, 0));
    }
    function of_fold(hash_fold_t, t){
     return caml_call1
             (get_hash_value, caml_call2(hash_fold_t, create(0, 0), t));
    }
    var Builtin = Folding(Hash);
    function run(seed, folder, x){
     var
      _O_ = caml_call1(Hash[6], 0),
      _P_ = caml_call2(folder, caml_call2(Hash[7], seed, _O_), x);
     return caml_call1(Hash[8], _P_);
    }
    return [0,
            description,
            fold_int,
            fold_int64,
            fold_float,
            fold_string,
            alloc,
            reset,
            get_hash_value,
            For_tests,
            create,
            of_fold,
            Builtin,
            run];
   }
   function alloc(param){return 0;}
   function reset(opt, t){
    if(opt) var sth = opt[1], seed = sth; else var seed = 0;
    return seed;
   }
   var compare_state = runtime.caml_int_compare;
   function state_to_string(state){return caml_call1(Base_Int0[1], state);}
   var For_tests = [0, compare_state, state_to_string];
   function create(seed, param){return reset(seed, 0);}
   function run(seed, folder, x){
    return runtime.Base_internalhash_get_hash_value
            (caml_call2(folder, reset(seed, 0), x));
   }
   function of_fold(hash_fold_t, t){
    return runtime.Base_internalhash_get_hash_value
            (caml_call2(hash_fold_t, create(0, 0), t));
   }
   function _a_(_N_){return runtime.Base_internalhash_get_hash_value(_N_);}
   function _b_(_M_, _L_){
    return runtime.Base_internalhash_fold_string(_M_, _L_);
   }
   function _c_(_K_, _J_){
    return runtime.Base_internalhash_fold_float(_K_, _J_);
   }
   function _d_(_I_, _H_){
    return runtime.Base_internalhash_fold_int64(_I_, _H_);
   }
   var
    Folding$0 =
      Folding
       ([0,
         description,
         function(_G_, _F_){
          return runtime.Base_internalhash_fold_int(_G_, _F_);
         },
         _d_,
         _c_,
         _b_,
         alloc,
         reset,
         _a_,
         For_tests]),
    hash_fold_nativeint = Folding$0[1],
    hash_fold_int64 = Folding$0[2],
    hash_fold_int32 = Folding$0[3],
    hash_fold_char = Folding$0[4],
    hash_fold_int = Folding$0[5],
    hash_fold_bool = Folding$0[6],
    hash_fold_string = Folding$0[7],
    hash_fold_float = Folding$0[8],
    hash_fold_unit = Folding$0[9],
    hash_fold_option = Folding$0[10],
    hash_fold_list = Folding$0[11],
    hash_fold_lazy_t = Folding$0[12],
    hash_fold_ref_frozen = Folding$0[13],
    hash_fold_array_frozen = Folding$0[14],
    hash_nativeint = Folding$0[15],
    hash_int64 = Folding$0[16],
    hash_int32 = Folding$0[17],
    hash_string = Folding$0[21],
    hash_char = Base_Char0[4];
   function hash_int(t){
    var
     _t_ = caml_call2(Base_Import0[119], t, 21),
     _u_ = caml_call1(Base_Import0[117], t),
     t$0 = caml_call2(Base_Import0[91], _u_, _t_),
     _v_ = caml_call2(Base_Import0[120], t$0, 24),
     t$1 = caml_call2(Base_Import0[121], t$0, _v_),
     _w_ = caml_call2(Base_Import0[119], t$1, 8),
     _x_ = caml_call2(Base_Import0[119], t$1, 3),
     _y_ = caml_call2(Base_Import0[91], t$1, _x_),
     t$2 = caml_call2(Base_Import0[91], _y_, _w_),
     _z_ = caml_call2(Base_Import0[120], t$2, 14),
     t$3 = caml_call2(Base_Import0[121], t$2, _z_),
     _A_ = caml_call2(Base_Import0[119], t$3, 4),
     _B_ = caml_call2(Base_Import0[119], t$3, 2),
     _C_ = caml_call2(Base_Import0[91], t$3, _B_),
     t$4 = caml_call2(Base_Import0[91], _C_, _A_),
     _D_ = caml_call2(Base_Import0[120], t$4, 28),
     t$5 = caml_call2(Base_Import0[121], t$4, _D_),
     _E_ = caml_call2(Base_Import0[119], t$5, 31);
    return caml_call2(Base_Import0[91], t$5, _E_);
   }
   function hash_bool(x){return x ? 1 : 0;}
   function hash_unit(param){return 0;}
   var
    _e_ =
      [0,
       hash_fold_nativeint,
       hash_fold_int64,
       hash_fold_int32,
       hash_fold_char,
       hash_fold_int,
       hash_fold_bool,
       hash_fold_string,
       hash_fold_float,
       hash_fold_unit,
       hash_fold_option,
       hash_fold_list,
       hash_fold_lazy_t,
       hash_fold_ref_frozen,
       hash_fold_array_frozen,
       hash_nativeint,
       hash_int64,
       hash_int32,
       hash_char,
       hash_int,
       hash_bool,
       hash_string,
       function(_s_){return runtime.Base_hash_double(_s_);},
       hash_unit];
   function _f_(_r_){return runtime.Base_internalhash_get_hash_value(_r_);}
   function _g_(_q_, _p_){
    return runtime.Base_internalhash_fold_string(_q_, _p_);
   }
   function _h_(_o_, _n_){
    return runtime.Base_internalhash_fold_float(_o_, _n_);
   }
   function _i_(_m_, _l_){
    return runtime.Base_internalhash_fold_int64(_m_, _l_);
   }
   var
    Base_Hash =
      [0,
       F,
       description,
       function(_k_, _j_){
        return runtime.Base_internalhash_fold_int(_k_, _j_);
       },
       _i_,
       _h_,
       _g_,
       alloc,
       reset,
       _f_,
       For_tests,
       create,
       of_fold,
       _e_,
       run];
   runtime.caml_register_global(6, Base_Hash, "Base__Hash");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Ppx_compare_lib
//# unitInfo: Requires: Base__Import0, Base__Printf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_which_is_abstract_in_an_im =
      ", which is abstract in an implementation.",
    caml_bytes_compare = runtime.caml_bytes_compare,
    caml_bytes_equal = runtime.caml_bytes_equal,
    caml_equal = runtime.caml_equal,
    caml_float_compare = runtime.caml_float_compare,
    caml_int64_compare = runtime.caml_int64_compare,
    caml_int_compare = runtime.caml_int_compare,
    caml_string_compare = runtime.caml_string_compare,
    caml_string_equal = runtime.caml_string_equal;
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_Import0 = global_data.Base__Import0,
    Base_Printf = global_data.Base__Printf,
    _b_ =
      [0,
       [11,
        "Equal called on the type ",
        [2, 0, [11, cst_which_is_abstract_in_an_im, 0]]],
       "Equal called on the type %s, which is abstract in an implementation."],
    _a_ =
      [0,
       [11,
        "Compare called on the type ",
        [2, 0, [11, cst_which_is_abstract_in_an_im, 0]]],
       "Compare called on the type %s, which is abstract in an implementation."];
   function compare_abstract(type_name, param, _F_){
    return caml_call3(Base_Printf[4], Base_Import0[124], _a_, type_name);
   }
   function equal_abstract(type_name, param, _E_){
    return caml_call3(Base_Printf[4], Base_Import0[124], _b_, type_name);
   }
   var
    Comparable = [0],
    Equal = [0],
    compare_bool = caml_int_compare,
    compare_bool_local = caml_int_compare,
    compare_char = caml_int_compare,
    compare_char_local = caml_int_compare,
    compare_float = caml_float_compare,
    compare_float_local = caml_float_compare,
    compare_int = caml_int_compare,
    compare_int_local = caml_int_compare,
    compare_int32 = caml_int_compare,
    compare_int32_local = caml_int_compare;
   function compare_int64(_D_, _C_){return caml_int64_compare(_D_, _C_);}
   function compare_int64_local(_B_, _A_){return caml_int64_compare(_B_, _A_);
   }
   var
    compare_nativeint = caml_int_compare,
    compare_nativeint_local = caml_int_compare,
    compare_string = caml_string_compare,
    compare_string_local = caml_string_compare,
    compare_bytes = caml_bytes_compare,
    compare_bytes_local = caml_bytes_compare,
    compare_unit = caml_int_compare,
    compare_unit_local = caml_int_compare;
   function compare_array_local(compare_elt, a, b){
    if(a === b) return 0;
    var
     len_a = a.length - 1,
     len_b = b.length - 1,
     ret = caml_int_compare(len_a, len_b);
    if(0 !== ret) return ret;
    var i = 0;
    for(;;){
     if(i === len_a) return 0;
     var l = a[1 + i], r = b[1 + i], res = caml_call2(compare_elt, l, r);
     if(0 !== res) return res;
     var i$0 = caml_call2(Base_Import0[91], i, 1), i = i$0;
    }
   }
   function compare_array(compare_elt, a, b){
    return compare_array_local(compare_elt, a, b);
   }
   function compare_list(compare_elt, a, b){
    var a$0 = a, b$0 = b;
    for(;;){
     if(! a$0) return b$0 ? -1 : 0;
     if(! b$0) return 1;
     var
      ys = b$0[2],
      y = b$0[1],
      xs = a$0[2],
      x = a$0[1],
      res = caml_call2(compare_elt, x, y);
     if(0 !== res) return res;
     var a$0 = xs, b$0 = ys;
    }
   }
   function compare_list_local(compare_elt_local, a, b){
    var a$0 = a, b$0 = b;
    for(;;){
     if(! a$0) return b$0 ? -1 : 0;
     if(! b$0) return 1;
     var
      ys = b$0[2],
      y = b$0[1],
      xs = a$0[2],
      x = a$0[1],
      res = caml_call2(compare_elt_local, x, y);
     if(0 !== res) return res;
     var a$0 = xs, b$0 = ys;
    }
   }
   function compare_option(compare_elt, a, b){
    if(! a) return b ? -1 : 0;
    var a$0 = a[1];
    if(! b) return 1;
    var b$0 = b[1];
    return caml_call2(compare_elt, a$0, b$0);
   }
   function compare_option_local(compare_elt_local, a, b){
    if(! a) return b ? -1 : 0;
    var a$0 = a[1];
    if(! b) return 1;
    var b$0 = b[1];
    return caml_call2(compare_elt_local, a$0, b$0);
   }
   function compare_ref(compare_elt, a, b){
    return caml_call2(compare_elt, a[1], b[1]);
   }
   function compare_ref_local(compare_elt, a, b){return caml_call2(compare_elt, a[1], b[1]);
   }
   function equal_bool(_z_, _y_){return _z_ === _y_ ? 1 : 0;}
   function equal_bool_local(_x_, _w_){return _x_ === _w_ ? 1 : 0;}
   function equal_char(_v_, _u_){return _v_ === _u_ ? 1 : 0;}
   function equal_char_local(_t_, _s_){return _t_ === _s_ ? 1 : 0;}
   function equal_int(_r_, _q_){return _r_ === _q_ ? 1 : 0;}
   function equal_int_local(_p_, _o_){return _p_ === _o_ ? 1 : 0;}
   var
    equal_int32 = caml_equal,
    equal_int32_local = caml_equal,
    equal_int64 = caml_equal,
    equal_int64_local = caml_equal,
    equal_nativeint = caml_equal,
    equal_nativeint_local = caml_equal,
    equal_string = caml_string_equal,
    equal_string_local = caml_string_equal,
    equal_bytes = caml_bytes_equal,
    equal_bytes_local = caml_bytes_equal;
   function equal_unit(_n_, _m_){return _n_ === _m_ ? 1 : 0;}
   function equal_unit_local(_l_, _k_){return _l_ === _k_ ? 1 : 0;}
   function equal_float(x, y){return caml_float_compare(x, y) === 0 ? 1 : 0;}
   function equal_float_local(x, y){
    return caml_float_compare(x, y) === 0 ? 1 : 0;
   }
   function equal_array_local(equal_elt, a, b){
    var _e_ = a === b ? 1 : 0;
    if(_e_)
     var _f_ = _e_;
    else{
     var
      len_a = a.length - 1,
      len_b = b.length - 1,
      _g_ = len_a === len_b ? 1 : 0;
     if(_g_){
      var i = 0;
      for(;;){
       var _h_ = i === len_a ? 1 : 0;
       if(_h_)
        var _i_ = _h_;
       else{
        var l = a[1 + i], r = b[1 + i], _j_ = caml_call2(equal_elt, l, r);
        if(_j_){
         var i$0 = caml_call2(Base_Import0[91], i, 1), i = i$0;
         continue;
        }
        var _i_ = _j_;
       }
       return _i_;
      }
     }
     var _f_ = _g_;
    }
    return _f_;
   }
   function equal_array(equal_elt, a, b){
    return equal_array_local(equal_elt, a, b);
   }
   function equal_list(equal_elt, a, b){
    var a$0 = a, b$0 = b;
    for(;;){
     if(a$0){
      if(b$0){
       var
        ys = b$0[2],
        y = b$0[1],
        xs = a$0[2],
        x = a$0[1],
        _d_ = caml_call2(equal_elt, x, y);
       if(! _d_) return _d_;
       var a$0 = xs, b$0 = ys;
       continue;
      }
     }
     else if(! b$0) return 1;
     return 0;
    }
   }
   function equal_list_local(equal_elt_local, a, b){
    var a$0 = a, b$0 = b;
    for(;;){
     if(a$0){
      if(b$0){
       var
        ys = b$0[2],
        y = b$0[1],
        xs = a$0[2],
        x = a$0[1],
        _c_ = caml_call2(equal_elt_local, x, y);
       if(! _c_) return _c_;
       var a$0 = xs, b$0 = ys;
       continue;
      }
     }
     else if(! b$0) return 1;
     return 0;
    }
   }
   function equal_option(equal_elt, a, b){
    if(a){
     if(b){
      var b$0 = b[1], a$0 = a[1];
      return caml_call2(equal_elt, a$0, b$0);
     }
    }
    else if(! b) return 1;
    return 0;
   }
   function equal_option_local(equal_elt_local, a, b){
    if(a){
     if(b){
      var b$0 = b[1], a$0 = a[1];
      return caml_call2(equal_elt_local, a$0, b$0);
     }
    }
    else if(! b) return 1;
    return 0;
   }
   function equal_ref(equal_elt, a, b){
    return caml_call2(equal_elt, a[1], b[1]);
   }
   function equal_ref_local(equal_elt, a, b){
    return caml_call2(equal_elt, a[1], b[1]);
   }
   var
    Base_Ppx_compare_lib =
      [0,
       compare_abstract,
       equal_abstract,
       Comparable,
       Equal,
       [0,
        compare_bool,
        compare_char,
        compare_float,
        compare_int,
        compare_int32,
        compare_int64,
        compare_nativeint,
        compare_string,
        compare_bytes,
        compare_unit,
        compare_array,
        compare_list,
        compare_option,
        compare_ref,
        equal_bool,
        equal_char,
        equal_float,
        equal_int,
        equal_int32,
        equal_int64,
        equal_nativeint,
        equal_string,
        equal_bytes,
        equal_unit,
        equal_array,
        equal_list,
        equal_option,
        equal_ref,
        compare_bool_local,
        compare_char_local,
        compare_float_local,
        compare_int_local,
        compare_int32_local,
        compare_int64_local,
        compare_nativeint_local,
        compare_string_local,
        compare_bytes_local,
        compare_unit_local,
        compare_array_local,
        compare_list_local,
        compare_option_local,
        compare_ref_local,
        equal_bool_local,
        equal_char_local,
        equal_float_local,
        equal_int_local,
        equal_int32_local,
        equal_int64_local,
        equal_nativeint_local,
        equal_string_local,
        equal_bytes_local,
        equal_unit_local,
        equal_array_local,
        equal_list_local,
        equal_option_local,
        equal_ref_local]];
   runtime.caml_register_global
    (4, Base_Ppx_compare_lib, "Base__Ppx_compare_lib");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Ppx_hash_lib
(function(globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Std = [0],
    Hashable = [0],
    Base_Ppx_hash_lib = [0, Std, Hashable];
   runtime.caml_register_global(0, Base_Ppx_hash_lib, "Base__Ppx_hash_lib");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Sexp
//# unitInfo: Requires: Base__Globalize, Base__Hash, Base__Ppx_compare_lib, Sexplib0__Sexp, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_update_dummy = runtime.caml_update_dummy;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_Ppx_compare_lib = global_data.Base__Ppx_compare_lib,
    Base_Globalize = global_data.Base__Globalize,
    Base_Hash = global_data.Base__Hash,
    Sexplib0_Sexp = global_data.Sexplib0__Sexp,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    t_of_sexp = Sexplib0_Sexp[1],
    sexp_of_t = Sexplib0_Sexp[2],
    equal = Sexplib0_Sexp[3],
    Not_found_s = Sexplib0_Sexp[5],
    Of_sexp_error = Sexplib0_Sexp[6],
    message = Sexplib0_Sexp[7],
    default_indent = Sexplib0_Sexp[8],
    pp_hum = Sexplib0_Sexp[9],
    pp_hum_indent = Sexplib0_Sexp[10],
    pp_mach = Sexplib0_Sexp[11],
    pp = Sexplib0_Sexp[12],
    to_string_hum = Sexplib0_Sexp[13],
    to_string_mach = Sexplib0_Sexp[14],
    to_string = Sexplib0_Sexp[15],
    of_float_style = Sexplib0_Sexp[16],
    of_int_style = Sexplib0_Sexp[17],
    Private = Sexplib0_Sexp[18];
   function compare_local(a_001, b_002){
    if(a_001 === b_002) return 0;
    if(0 === a_001[0]){
     var a_003 = a_001[1];
     if(0 !== b_002[0]) return -1;
     var b_004 = b_002[1];
     return caml_call2(Base_Ppx_compare_lib[5][36], a_003, b_004);
    }
    var a_005 = a_001[1];
    if(0 === b_002[0]) return 1;
    var b_006 = b_002[1];
    return caml_call3
            (Base_Ppx_compare_lib[5][40], compare_local, a_005, b_006);
   }
   function compare(a, b){return compare_local(a, b);}
   function globalize(x_009){
    if(0 === x_009[0]){
     var arg_010 = x_009[1];
     return [0, caml_call1(Base_Globalize[9], arg_010)];
    }
    var arg_011 = x_009[1];
    return [1, caml_call2(Base_Globalize[13], globalize, arg_011)];
   }
   var
    hash_fold_t = function _f_(_d_, _e_){return _f_.fun(_d_, _e_);},
    hash = function _c_(_b_){return _c_.fun(_b_);};
   caml_update_dummy
    (hash_fold_t,
     function(hsv, arg){
      if(0 === arg[0]){
       var a0 = arg[1], hsv$0 = caml_call2(Base_Hash[3], hsv, 0);
       return caml_call2(Base_Hash[13][7], hsv$0, a0);
      }
      var a0$0 = arg[1], hsv$1 = caml_call2(Base_Hash[3], hsv, 1);
      return caml_call3(Base_Hash[13][11], hash_fold_t, hsv$1, a0$0);
     });
   caml_update_dummy
    (hash,
     function(arg){
      var
       hsv = caml_call2(Base_Hash[11], 0, 0),
       _a_ = caml_call2(hash_fold_t, hsv, arg);
      return caml_call1(Base_Hash[9], _a_);
     });
   var t_sexp_grammar = Sexplib0_Sexp_conv[61], of_string = 0;
   function invariant(param){return 0;}
   function equal_local(a, b){return 0 === compare_local(a, b) ? 1 : 0;}
   var
    Base_Sexp =
      [0,
       globalize,
       hash_fold_t,
       hash,
       t_of_sexp,
       sexp_of_t,
       equal,
       compare,
       Not_found_s,
       Of_sexp_error,
       message,
       default_indent,
       pp_hum,
       pp_hum_indent,
       pp_mach,
       pp,
       to_string_hum,
       to_string_mach,
       to_string,
       of_float_style,
       of_int_style,
       Private,
       equal_local,
       compare_local,
       t_sexp_grammar,
       invariant,
       of_string];
   runtime.caml_register_global(5, Base_Sexp, "Base__Sexp");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Import
//# unitInfo: Requires: Base__Globalize, Base__Hash, Base__Import0, Base__Ppx_compare_lib, Base__Sexp, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Base_Import0 = global_data.Base__Import0,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Base_Hash = global_data.Base__Hash,
    Base_Ppx_compare_lib = global_data.Base__Ppx_compare_lib,
    Base_Globalize = global_data.Base__Globalize,
    Base_Sexp = global_data.Base__Sexp,
    Exit = Base_Import0[1],
    Not_found = Base_Import0[2],
    max_int = Base_Import0[3],
    min_int = Base_Import0[4],
    infinity = Base_Import0[5],
    neg_infinity = Base_Import0[6],
    nan = Base_Import0[7],
    max_float = Base_Import0[8],
    min_float = Base_Import0[9],
    epsilon_float = Base_Import0[10],
    char_of_int = Base_Import0[11],
    string_of_bool = Base_Import0[12],
    bool_of_string_opt = Base_Import0[13],
    bool_of_string = Base_Import0[14],
    string_of_int = Base_Import0[15],
    int_of_string_opt = Base_Import0[16],
    string_of_float = Base_Import0[17],
    float_of_string_opt = Base_Import0[18],
    stdin = Base_Import0[19],
    stdout = Base_Import0[20],
    stderr = Base_Import0[21],
    print_char = Base_Import0[22],
    print_string = Base_Import0[23],
    print_bytes = Base_Import0[24],
    print_int = Base_Import0[25],
    print_float = Base_Import0[26],
    print_endline = Base_Import0[27],
    print_newline = Base_Import0[28],
    prerr_char = Base_Import0[29],
    prerr_string = Base_Import0[30],
    prerr_bytes = Base_Import0[31],
    prerr_int = Base_Import0[32],
    prerr_float = Base_Import0[33],
    prerr_endline = Base_Import0[34],
    prerr_newline = Base_Import0[35],
    read_line = Base_Import0[36],
    read_int_opt = Base_Import0[37],
    read_int = Base_Import0[38],
    read_float_opt = Base_Import0[39],
    read_float = Base_Import0[40],
    open_out = Base_Import0[41],
    open_out_bin = Base_Import0[42],
    open_out_gen = Base_Import0[43],
    flush = Base_Import0[44],
    flush_all = Base_Import0[45],
    output_char = Base_Import0[46],
    output_string = Base_Import0[47],
    output_bytes = Base_Import0[48],
    output = Base_Import0[49],
    output_substring = Base_Import0[50],
    output_byte = Base_Import0[51],
    output_binary_int = Base_Import0[52],
    output_value = Base_Import0[53],
    seek_out = Base_Import0[54],
    pos_out = Base_Import0[55],
    out_channel_length = Base_Import0[56],
    close_out = Base_Import0[57],
    close_out_noerr = Base_Import0[58],
    set_binary_mode_out = Base_Import0[59],
    open_in = Base_Import0[60],
    open_in_bin = Base_Import0[61],
    open_in_gen = Base_Import0[62],
    input_char = Base_Import0[63],
    input_line = Base_Import0[64],
    input = Base_Import0[65],
    really_input = Base_Import0[66],
    really_input_string = Base_Import0[67],
    input_byte = Base_Import0[68],
    input_binary_int = Base_Import0[69],
    input_value = Base_Import0[70],
    seek_in = Base_Import0[71],
    pos_in = Base_Import0[72],
    in_channel_length = Base_Import0[73],
    close_in = Base_Import0[74],
    close_in_noerr = Base_Import0[75],
    set_binary_mode_in = Base_Import0[76],
    string_of_format = Base_Import0[77],
    symbol = Base_Import0[78],
    exit = Base_Import0[79],
    at_exit = Base_Import0[80],
    valid_float_lexem = Base_Import0[81],
    unsafe_really_input = Base_Import0[82],
    do_at_exit = Base_Import0[83],
    do_domain_local_at_exit = Base_Import0[84],
    Stdlib = Base_Import0[85],
    bool_to_int = Base_Import0[86],
    symbol$0 = Base_Import0[87],
    symbol$1 = Base_Import0[88],
    symbol$2 = Base_Import0[89],
    symbol$3 = Base_Import0[90],
    symbol$4 = Base_Import0[91],
    symbol$5 = Base_Import0[92],
    symbol$6 = Base_Import0[93],
    symbol$7 = Base_Import0[94],
    symbol$8 = Base_Import0[95],
    symbol$9 = Base_Import0[96],
    Int_replace_polymorphic_compar = Base_Import0[97],
    ascending = Base_Import0[98],
    descending = Base_Import0[99],
    max = Base_Import0[100],
    min = Base_Import0[101],
    Int32_replace_polymorphic_comp = Base_Import0[102],
    Int64_replace_polymorphic_comp = Base_Import0[103],
    Nativeint_replace_polymorphic_ = Base_Import0[104],
    Bool_replace_polymorphic_compa = Base_Import0[105],
    Char_replace_polymorphic_compa = Base_Import0[106],
    Uchar_replace_polymorphic_comp = Base_Import0[107],
    Float_replace_polymorphic_comp = Base_Import0[108],
    String_replace_polymorphic_com = Base_Import0[109],
    Bytes_replace_polymorphic_comp = Base_Import0[110],
    symbol$10 = Base_Import0[111],
    symbol$11 = Base_Import0[112],
    symbol$12 = Base_Import0[113],
    symbol$13 = Base_Import0[114],
    asr = Base_Import0[115],
    land = Base_Import0[116],
    lnot = Base_Import0[117],
    lor = Base_Import0[118],
    lsl = Base_Import0[119],
    lsr = Base_Import0[120],
    lxor = Base_Import0[121],
    mod = Base_Import0[122],
    abs = Base_Import0[123],
    failwith = Base_Import0[124],
    fst = Base_Import0[125],
    invalid_arg = Base_Import0[126],
    snd = Base_Import0[127],
    float_of_string = Base_Import0[128],
    am_testing = Base_Import0[129],
    default_string_of_float = Sexplib0_Sexp_conv[1],
    write_old_option_format = Sexplib0_Sexp_conv[2],
    read_old_option_format = Sexplib0_Sexp_conv[3],
    list_map = Sexplib0_Sexp_conv[4],
    sexp_of_unit = Sexplib0_Sexp_conv[5],
    sexp_of_bool = Sexplib0_Sexp_conv[6],
    sexp_of_string = Sexplib0_Sexp_conv[7],
    sexp_of_bytes = Sexplib0_Sexp_conv[8],
    sexp_of_char = Sexplib0_Sexp_conv[9],
    sexp_of_int = Sexplib0_Sexp_conv[10],
    sexp_of_float = Sexplib0_Sexp_conv[11],
    sexp_of_int32 = Sexplib0_Sexp_conv[12],
    sexp_of_int64 = Sexplib0_Sexp_conv[13],
    sexp_of_nativeint = Sexplib0_Sexp_conv[14],
    sexp_of_ref = Sexplib0_Sexp_conv[15],
    sexp_of_lazy_t = Sexplib0_Sexp_conv[16],
    sexp_of_option = Sexplib0_Sexp_conv[17],
    sexp_of_pair = Sexplib0_Sexp_conv[18],
    sexp_of_triple = Sexplib0_Sexp_conv[19],
    sexp_of_list = Sexplib0_Sexp_conv[20],
    sexp_of_array = Sexplib0_Sexp_conv[21],
    sexp_of_hashtbl = Sexplib0_Sexp_conv[22],
    sexp_of_opaque = Sexplib0_Sexp_conv[23],
    sexp_of_fun = Sexplib0_Sexp_conv[24],
    Of_sexp_error = Sexplib0_Sexp_conv[25],
    record_check_extra_fields = Sexplib0_Sexp_conv[26],
    of_sexp_error = Sexplib0_Sexp_conv[27],
    of_sexp_error_exn = Sexplib0_Sexp_conv[28],
    unit_of_sexp = Sexplib0_Sexp_conv[29],
    bool_of_sexp = Sexplib0_Sexp_conv[30],
    string_of_sexp = Sexplib0_Sexp_conv[31],
    bytes_of_sexp = Sexplib0_Sexp_conv[32],
    char_of_sexp = Sexplib0_Sexp_conv[33],
    int_of_sexp = Sexplib0_Sexp_conv[34],
    float_of_sexp = Sexplib0_Sexp_conv[35],
    int32_of_sexp = Sexplib0_Sexp_conv[36],
    int64_of_sexp = Sexplib0_Sexp_conv[37],
    nativeint_of_sexp = Sexplib0_Sexp_conv[38],
    ref_of_sexp = Sexplib0_Sexp_conv[39],
    lazy_t_of_sexp = Sexplib0_Sexp_conv[40],
    option_of_sexp = Sexplib0_Sexp_conv[41],
    pair_of_sexp = Sexplib0_Sexp_conv[42],
    triple_of_sexp = Sexplib0_Sexp_conv[43],
    list_of_sexp = Sexplib0_Sexp_conv[44],
    array_of_sexp = Sexplib0_Sexp_conv[45],
    hashtbl_of_sexp = Sexplib0_Sexp_conv[46],
    opaque_of_sexp = Sexplib0_Sexp_conv[47],
    fun_of_sexp = Sexplib0_Sexp_conv[48],
    sexp_grammar_with_tags = Sexplib0_Sexp_conv[49],
    sexp_grammar_with_tag_list = Sexplib0_Sexp_conv[50],
    unit_sexp_grammar = Sexplib0_Sexp_conv[51],
    bool_sexp_grammar = Sexplib0_Sexp_conv[52],
    string_sexp_grammar = Sexplib0_Sexp_conv[53],
    bytes_sexp_grammar = Sexplib0_Sexp_conv[54],
    char_sexp_grammar = Sexplib0_Sexp_conv[55],
    int_sexp_grammar = Sexplib0_Sexp_conv[56],
    float_sexp_grammar = Sexplib0_Sexp_conv[57],
    int32_sexp_grammar = Sexplib0_Sexp_conv[58],
    int64_sexp_grammar = Sexplib0_Sexp_conv[59],
    nativeint_sexp_grammar = Sexplib0_Sexp_conv[60],
    sexp_t_sexp_grammar = Sexplib0_Sexp_conv[61],
    ref_sexp_grammar = Sexplib0_Sexp_conv[62],
    lazy_t_sexp_grammar = Sexplib0_Sexp_conv[63],
    option_sexp_grammar = Sexplib0_Sexp_conv[64],
    list_sexp_grammar = Sexplib0_Sexp_conv[65],
    array_sexp_grammar = Sexplib0_Sexp_conv[66],
    opaque_sexp_grammar = Sexplib0_Sexp_conv[67],
    fun_sexp_grammar = Sexplib0_Sexp_conv[68],
    sexp_of_exn = Sexplib0_Sexp_conv[69],
    printexc_prefer_sexp = Sexplib0_Sexp_conv[70],
    sexp_of_exn_opt = Sexplib0_Sexp_conv[71],
    Exn_converter = Sexplib0_Sexp_conv[72],
    _a_ = Base_Hash[13],
    hash_fold_nativeint = _a_[1],
    hash_fold_int64 = _a_[2],
    hash_fold_int32 = _a_[3],
    hash_fold_char = _a_[4],
    hash_fold_int = _a_[5],
    hash_fold_bool = _a_[6],
    hash_fold_string = _a_[7],
    hash_fold_float = _a_[8],
    hash_fold_unit = _a_[9],
    hash_fold_option = _a_[10],
    hash_fold_list = _a_[11],
    hash_fold_lazy_t = _a_[12],
    hash_fold_ref_frozen = _a_[13],
    hash_fold_array_frozen = _a_[14],
    hash_nativeint = _a_[15],
    hash_int64 = _a_[16],
    hash_int32 = _a_[17],
    hash_char = _a_[18],
    hash_int = _a_[19],
    hash_bool = _a_[20],
    hash_string = _a_[21],
    hash_float = _a_[22],
    hash_unit = _a_[23],
    _b_ = Base_Ppx_compare_lib[5],
    compare_bool = _b_[1],
    compare_char = _b_[2],
    compare_float = _b_[3],
    compare_int = _b_[4],
    compare_int32 = _b_[5],
    compare_int64 = _b_[6],
    compare_nativeint = _b_[7],
    compare_string = _b_[8],
    compare_bytes = _b_[9],
    compare_unit = _b_[10],
    compare_array = _b_[11],
    compare_list = _b_[12],
    compare_option = _b_[13],
    compare_ref = _b_[14],
    equal_bool = _b_[15],
    equal_char = _b_[16],
    equal_float = _b_[17],
    equal_int = _b_[18],
    equal_int32 = _b_[19],
    equal_int64 = _b_[20],
    equal_nativeint = _b_[21],
    equal_string = _b_[22],
    equal_bytes = _b_[23],
    equal_unit = _b_[24],
    equal_array = _b_[25],
    equal_list = _b_[26],
    equal_option = _b_[27],
    equal_ref = _b_[28],
    compare_bool_local = _b_[29],
    compare_char_local = _b_[30],
    compare_float_local = _b_[31],
    compare_int_local = _b_[32],
    compare_int32_local = _b_[33],
    compare_int64_local = _b_[34],
    compare_nativeint_local = _b_[35],
    compare_string_local = _b_[36],
    compare_bytes_local = _b_[37],
    compare_unit_local = _b_[38],
    compare_array_local = _b_[39],
    compare_list_local = _b_[40],
    compare_option_local = _b_[41],
    compare_ref_local = _b_[42],
    equal_bool_local = _b_[43],
    equal_char_local = _b_[44],
    equal_float_local = _b_[45],
    equal_int_local = _b_[46],
    equal_int32_local = _b_[47],
    equal_int64_local = _b_[48],
    equal_nativeint_local = _b_[49],
    equal_string_local = _b_[50],
    equal_bytes_local = _b_[51],
    equal_unit_local = _b_[52],
    equal_array_local = _b_[53],
    equal_list_local = _b_[54],
    equal_option_local = _b_[55],
    equal_ref_local = _b_[56],
    globalize_bool = Base_Globalize[1],
    globalize_char = Base_Globalize[2],
    globalize_float = Base_Globalize[3],
    globalize_int = Base_Globalize[4],
    globalize_int32 = Base_Globalize[5],
    globalize_int64 = Base_Globalize[6],
    globalize_nativeint = Base_Globalize[7],
    globalize_bytes = Base_Globalize[8],
    globalize_string = Base_Globalize[9],
    globalize_unit = Base_Globalize[10],
    globalize_array = Base_Globalize[11],
    globalize_lazy_t = Base_Globalize[12],
    globalize_list = Base_Globalize[13],
    globalize_option = Base_Globalize[14],
    globalize_result = Base_Globalize[15],
    globalize_ref = Base_Globalize[16],
    Not_found_s = Base_Sexp[8],
    Base_Import =
      [0,
       Exit,
       Not_found,
       max_int,
       min_int,
       infinity,
       neg_infinity,
       nan,
       max_float,
       min_float,
       epsilon_float,
       char_of_int,
       string_of_bool,
       bool_of_string_opt,
       bool_of_string,
       string_of_int,
       int_of_string_opt,
       string_of_float,
       float_of_string_opt,
       stdin,
       stdout,
       stderr,
       print_char,
       print_string,
       print_bytes,
       print_int,
       print_float,
       print_endline,
       print_newline,
       prerr_char,
       prerr_string,
       prerr_bytes,
       prerr_int,
       prerr_float,
       prerr_endline,
       prerr_newline,
       read_line,
       read_int_opt,
       read_int,
       read_float_opt,
       read_float,
       open_out,
       open_out_bin,
       open_out_gen,
       flush,
       flush_all,
       output_char,
       output_string,
       output_bytes,
       output,
       output_substring,
       output_byte,
       output_binary_int,
       output_value,
       seek_out,
       pos_out,
       out_channel_length,
       close_out,
       close_out_noerr,
       set_binary_mode_out,
       open_in,
       open_in_bin,
       open_in_gen,
       input_char,
       input_line,
       input,
       really_input,
       really_input_string,
       input_byte,
       input_binary_int,
       input_value,
       seek_in,
       pos_in,
       in_channel_length,
       close_in,
       close_in_noerr,
       set_binary_mode_in,
       string_of_format,
       symbol,
       exit,
       at_exit,
       valid_float_lexem,
       unsafe_really_input,
       do_at_exit,
       do_domain_local_at_exit,
       Stdlib,
       bool_to_int,
       symbol$0,
       symbol$1,
       symbol$2,
       symbol$3,
       symbol$4,
       symbol$5,
       symbol$6,
       symbol$7,
       symbol$8,
       symbol$9,
       Int_replace_polymorphic_compar,
       ascending,
       descending,
       max,
       min,
       Int32_replace_polymorphic_comp,
       Int64_replace_polymorphic_comp,
       Nativeint_replace_polymorphic_,
       Bool_replace_polymorphic_compa,
       Char_replace_polymorphic_compa,
       Uchar_replace_polymorphic_comp,
       Float_replace_polymorphic_comp,
       String_replace_polymorphic_com,
       Bytes_replace_polymorphic_comp,
       symbol$10,
       symbol$11,
       symbol$12,
       symbol$13,
       asr,
       land,
       lnot,
       lor,
       lsl,
       lsr,
       lxor,
       mod,
       abs,
       failwith,
       fst,
       invalid_arg,
       snd,
       float_of_string,
       am_testing,
       default_string_of_float,
       write_old_option_format,
       read_old_option_format,
       list_map,
       sexp_of_unit,
       sexp_of_bool,
       sexp_of_string,
       sexp_of_bytes,
       sexp_of_char,
       sexp_of_int,
       sexp_of_float,
       sexp_of_int32,
       sexp_of_int64,
       sexp_of_nativeint,
       sexp_of_ref,
       sexp_of_lazy_t,
       sexp_of_option,
       sexp_of_pair,
       sexp_of_triple,
       sexp_of_list,
       sexp_of_array,
       sexp_of_hashtbl,
       sexp_of_opaque,
       sexp_of_fun,
       Of_sexp_error,
       record_check_extra_fields,
       of_sexp_error,
       of_sexp_error_exn,
       unit_of_sexp,
       bool_of_sexp,
       string_of_sexp,
       bytes_of_sexp,
       char_of_sexp,
       int_of_sexp,
       float_of_sexp,
       int32_of_sexp,
       int64_of_sexp,
       nativeint_of_sexp,
       ref_of_sexp,
       lazy_t_of_sexp,
       option_of_sexp,
       pair_of_sexp,
       triple_of_sexp,
       list_of_sexp,
       array_of_sexp,
       hashtbl_of_sexp,
       opaque_of_sexp,
       fun_of_sexp,
       sexp_grammar_with_tags,
       sexp_grammar_with_tag_list,
       unit_sexp_grammar,
       bool_sexp_grammar,
       string_sexp_grammar,
       bytes_sexp_grammar,
       char_sexp_grammar,
       int_sexp_grammar,
       float_sexp_grammar,
       int32_sexp_grammar,
       int64_sexp_grammar,
       nativeint_sexp_grammar,
       sexp_t_sexp_grammar,
       ref_sexp_grammar,
       lazy_t_sexp_grammar,
       option_sexp_grammar,
       list_sexp_grammar,
       array_sexp_grammar,
       opaque_sexp_grammar,
       fun_sexp_grammar,
       sexp_of_exn,
       printexc_prefer_sexp,
       sexp_of_exn_opt,
       Exn_converter,
       hash_fold_nativeint,
       hash_fold_int64,
       hash_fold_int32,
       hash_fold_char,
       hash_fold_int,
       hash_fold_bool,
       hash_fold_string,
       hash_fold_float,
       hash_fold_unit,
       hash_fold_option,
       hash_fold_list,
       hash_fold_lazy_t,
       hash_fold_ref_frozen,
       hash_fold_array_frozen,
       hash_nativeint,
       hash_int64,
       hash_int32,
       hash_char,
       hash_int,
       hash_bool,
       hash_string,
       hash_float,
       hash_unit,
       compare_bool,
       compare_char,
       compare_float,
       compare_int,
       compare_int32,
       compare_int64,
       compare_nativeint,
       compare_string,
       compare_bytes,
       compare_unit,
       compare_array,
       compare_list,
       compare_option,
       compare_ref,
       equal_bool,
       equal_char,
       equal_float,
       equal_int,
       equal_int32,
       equal_int64,
       equal_nativeint,
       equal_string,
       equal_bytes,
       equal_unit,
       equal_array,
       equal_list,
       equal_option,
       equal_ref,
       compare_bool_local,
       compare_char_local,
       compare_float_local,
       compare_int_local,
       compare_int32_local,
       compare_int64_local,
       compare_nativeint_local,
       compare_string_local,
       compare_bytes_local,
       compare_unit_local,
       compare_array_local,
       compare_list_local,
       compare_option_local,
       compare_ref_local,
       equal_bool_local,
       equal_char_local,
       equal_float_local,
       equal_int_local,
       equal_int32_local,
       equal_int64_local,
       equal_nativeint_local,
       equal_string_local,
       equal_bytes_local,
       equal_unit_local,
       equal_array_local,
       equal_list_local,
       equal_option_local,
       equal_ref_local,
       globalize_bool,
       globalize_char,
       globalize_float,
       globalize_int,
       globalize_int32,
       globalize_int64,
       globalize_nativeint,
       globalize_bytes,
       globalize_string,
       globalize_unit,
       globalize_array,
       globalize_lazy_t,
       globalize_list,
       globalize_option,
       globalize_result,
       globalize_ref,
       Not_found_s];
   runtime.caml_register_global(6, Base_Import, "Base__Import");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Word_size
//# unitInfo: Requires: Base__Import, Base__Sys0
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_Sys0 = global_data.Base__Sys0,
    Base_Import = global_data.Base__Import,
    _a_ = [0, "W64"],
    _b_ = [0, "W32"],
    cst_unknown_word_size = "unknown word size";
   function sexp_of_t(param){return param ? _a_ : _b_;}
   function num_bits(param){return param ? 64 : 32;}
   var
    _c_ = Base_Sys0[7],
    word_size =
      32 === _c_
       ? 0
       : 64 === _c_ ? 1 : caml_call1(Base_Import[124], cst_unknown_word_size),
    Base_Word_size = [0, sexp_of_t, num_bits, word_size];
   runtime.caml_register_global(5, Base_Word_size, "Base__Word_size");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Formatter
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Base_Formatter = [0];
   runtime.caml_register_global(0, Base_Formatter, "Base__Formatter");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Pretty_printer
//# unitInfo: Requires: Base__Import, Stdlib__Format
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Format = global_data.Stdlib__Format,
    Base_Import = global_data.Base__Import,
    r = [0, [0, "Base.Sexp.pp_hum", 0]],
    cst_pp = ".pp";
   function all(param){return r[1];}
   function register(p){r[1] = [0, p, r[1]]; return 0;}
   function Register_pp(M){
    var pp = M[1];
    register(caml_call2(Base_Import[112], M[2], cst_pp));
    return [0, pp];
   }
   function _a_(_c_){return [0, Register_pp(_c_)[1]];}
   var
    Base_Pretty_printer =
      [0,
       all,
       function(M){
        var module_name = M[1];
        function pp(formatter, t){
         var _b_ = caml_call1(M[2], t);
         return caml_call2(Stdlib_Format[13], formatter, _b_);
        }
        return [0, Register_pp([0, pp, module_name])[1]];
       },
       _a_,
       register];
   runtime.caml_register_global
    (4, Base_Pretty_printer, "Base__Pretty_printer");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Exn
//# unitInfo: Requires: Base__Import, Base__Pretty_printer, Base__Printf, Base__Sexp, Sexplib0__Sexp_conv, Stdlib__Format, Stdlib__Printexc, Stdlib__Printf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_2 = "<2>",
    cst_src_exn_ml = "src/exn.ml",
    caml_fresh_oo_id = runtime.caml_fresh_oo_id,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    module_name = "Base.Exn",
    Stdlib_Printexc = global_data.Stdlib__Printexc,
    Base_Import = global_data.Base__Import,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib_Format = global_data.Stdlib__Format,
    Base_Sexp = global_data.Base__Sexp,
    Base_Printf = global_data.Base__Printf,
    Assert_failure = global_data.Assert_failure,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Base_Pretty_printer = global_data.Base__Pretty_printer,
    sexp_of_t = Base_Import[198],
    exit = Base_Import[85][99],
    Finally = [248, "Base__Exn.Finally", caml_fresh_oo_id(0)],
    _k_ =
      [0,
       [11, "Exn.handle_uncaught could not print; exiting anyway\n", [10, 0]],
       "Exn.handle_uncaught could not print; exiting anyway\n%!"],
    _j_ =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [11,
         "Uncaught exception:",
         [17,
          3,
          [17,
           3,
           [18, [1, [0, 0, ""]], [15, [17, 0, [17, 0, [17, 3, [17, 4, 0]]]]]]]]]],
       "@[<2>Uncaught exception:@\n@\n@[%a@]@]@\n@."],
    _i_ = [0, 2],
    _h_ = [0, cst_src_exn_ml, 53, 6],
    _e_ = [0, "exn.ml.Reraised"],
    _f_ = [0, cst_src_exn_ml, 32, 11],
    _b_ = [0, "exn.ml.Finally"],
    _c_ = [0, cst_src_exn_ml, 19, 11],
    cst_Base_Exn_Reraised = "Base__Exn.Reraised",
    cst_Base_Exn_Sexp = "Base__Exn.Sexp";
   function _a_(param){
    if(param[1] !== Finally)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _c_], 1);
    var
     arg1_002 = param[3],
     arg0_001 = param[2],
     res0_003 = caml_call1(sexp_of_t, arg0_001),
     res1_004 = caml_call1(sexp_of_t, arg1_002);
    return [1, [0, _b_, [0, res0_003, [0, res1_004, 0]]]];
   }
   caml_call4(Sexplib0_Sexp_conv[72][1], 0, 0, Finally, _a_);
   var Reraised = [248, cst_Base_Exn_Reraised, caml_fresh_oo_id(0)];
   function _d_(param){
    if(param[1] !== Reraised)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _f_], 1);
    var
     arg1_006 = param[3],
     arg0_005 = param[2],
     res0_007 = caml_call1(Base_Import[136], arg0_005),
     res1_008 = caml_call1(sexp_of_t, arg1_006);
    return [1, [0, _e_, [0, res0_007, [0, res1_008, 0]]]];
   }
   caml_call4(Sexplib0_Sexp_conv[72][1], 0, 0, Reraised, _d_);
   var Sexp = [248, cst_Base_Exn_Sexp, caml_fresh_oo_id(0)];
   function _g_(param){
    if(param[1] !== Sexp)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _h_], 1);
    var t = param[2];
    return t;
   }
   caml_call4(Sexplib0_Sexp_conv[72][1], 0, 0, Sexp, _g_);
   function create_s(sexp){return [0, Sexp, sexp];}
   function raise_with_original_backtrace(t, backtrace){
    runtime.caml_restore_raw_backtrace(t, backtrace);
    throw caml_maybe_attach_backtrace(t, 0);
   }
   function reraise(exn, str){
    var exn$0 = [0, Reraised, str, exn];
    if(! runtime.Base_caml_exn_is_most_recent_exn(exn))
     throw caml_maybe_attach_backtrace(exn$0, 1);
    var bt = caml_call1(Stdlib_Printexc[12], 0);
    return raise_with_original_backtrace(exn$0, bt);
   }
   function reraisef(exc, format){
    function _y_(str, param){return reraise(exc, str);}
    return caml_call2(Base_Printf[4], _y_, format);
   }
   function to_string(exc){
    var _x_ = caml_call1(Base_Import[198], exc);
    return caml_call2(Base_Sexp[16], _i_, _x_);
   }
   function to_string_mach(exc){
    var _w_ = caml_call1(Base_Import[198], exc);
    return caml_call1(Base_Sexp[17], _w_);
   }
   var sexp_of_t$0 = Base_Import[198];
   function protectx(f, x, finally$0){
    try{var res = caml_call1(f, x);}
    catch(exn$0){
     var
      exn = caml_wrap_exception(exn$0),
      bt = caml_call1(Stdlib_Printexc[12], 0);
     try{caml_call1(finally$0, x);}
     catch(final_exn$0){
      var final_exn = caml_wrap_exception(final_exn$0);
      return raise_with_original_backtrace([0, Finally, exn, final_exn], bt);
     }
     return raise_with_original_backtrace(exn, bt);
    }
    caml_call1(finally$0, x);
    return res;
   }
   function protect(f, finally$0){return protectx(f, 0, finally$0);}
   function does_raise(f){
    try{caml_call1(f, 0); var _u_ = 0; return _u_;}catch(_v_){return 1;}
   }
   function pp(ppf, t){
    var match = caml_call1(Base_Import[200], t);
    if(match){
     var sexp = match[1];
     return caml_call2(Base_Sexp[12], ppf, sexp);
    }
    var _t_ = caml_call1(Stdlib_Printexc[1], t);
    return caml_call2(Stdlib_Format[13], ppf, _t_);
   }
   var
    include = caml_call1(Base_Pretty_printer[3], [0, pp, module_name]),
    pp$0 = include[1];
   function print_with_backtrace(exc, raw_backtrace){
    caml_call3(Stdlib_Format[139], _j_, pp$0, exc);
    if(caml_call1(Stdlib_Printexc[8], 0))
     caml_call2(Stdlib_Printexc[13], Base_Import[85][40], raw_backtrace);
    return caml_call1(Base_Import[85][63], Base_Import[85][40]);
   }
   function handle_uncaught_aux(do_at_exit, exit, f){
    try{var _p_ = caml_call1(f, 0); return _p_;}
    catch(exc$0){
     var
      exc = caml_wrap_exception(exc$0),
      raw_backtrace = caml_call1(Stdlib_Printexc[12], 0);
     if(do_at_exit) try{caml_call1(Base_Import[85][103], 0);}catch(_s_){}
     try{print_with_backtrace(exc, raw_backtrace);}
     catch(_q_){try{caml_call1(Stdlib_Printf[3], _k_);}catch(_r_){}}
     return caml_call1(exit, 1);
    }
   }
   function handle_uncaught_and_exit(f){
    return handle_uncaught_aux(1, exit, f);
   }
   function handle_uncaught(must_exit, f){
    var exit$0 = must_exit ? exit : function(_o_){return 0;};
    return handle_uncaught_aux(must_exit, exit$0, f);
   }
   function reraise_uncaught(str, func){
    try{var _n_ = caml_call1(func, 0); return _n_;}
    catch(exn$0){
     var
      exn = caml_wrap_exception(exn$0),
      bt = caml_call1(Stdlib_Printexc[12], 0);
     return raise_with_original_backtrace([0, Reraised, str, exn], bt);
    }
   }
   function raise_without_backtrace(e){
    runtime.Base_clear_caml_backtrace_pos(0);
    throw e;
   }
   function initialize_module(param){
    return caml_call1(Stdlib_Printexc[16], print_with_backtrace);
   }
   function clear_backtrace(_m_){
    return runtime.Base_clear_caml_backtrace_pos(_m_);
   }
   var
    Private = [0, clear_backtrace],
    Base_Exn =
      [0,
       sexp_of_t$0,
       pp$0,
       Finally,
       Reraised,
       create_s,
       raise_without_backtrace,
       raise_with_original_backtrace,
       reraise,
       reraisef,
       to_string,
       to_string_mach,
       protectx,
       protect,
       handle_uncaught,
       handle_uncaught_and_exit,
       reraise_uncaught,
       does_raise,
       function(_l_){return runtime.Base_caml_exn_is_most_recent_exn(_l_);},
       initialize_module,
       Private];
   runtime.caml_register_global(21, Base_Exn, "Base__Exn");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__With_return
//# unitInfo: Requires: Base__Exn, Base__Import
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_Import = global_data.Base__Import,
    Base_Exn = global_data.Base__Exn,
    cst_use_of_return_from_a_with_ =
      "use of [return] from a [with_return] that already returned",
    cst_Return = "Return";
   function with_return(f){
    var
     Return = [248, cst_Return, runtime.caml_fresh_oo_id(0)],
     is_alive = [0, 1];
    function return$0(a){
     if(1 - is_alive[1])
      caml_call1(Base_Import[124], cst_use_of_return_from_a_with_);
     return caml_call1(Base_Exn[6], [0, Return, a]);
    }
    try{var a$0 = caml_call1(f, return$0); is_alive[1] = 0; return a$0;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     is_alive[1] = 0;
     if(exn[1] !== Return) throw caml_maybe_attach_backtrace(exn, 0);
     var a = exn[2];
     return a;
    }
   }
   function with_return_option(f){
    return with_return
            (function(return$0){
              caml_call1(f, function(a){return caml_call1(return$0, [0, a]);});
              return 0;
             });
   }
   function prepend(param, f){
    return function(x){return caml_call1(param, caml_call1(f, x));};
   }
   var Base_With_return = [0, with_return, with_return_option, prepend];
   runtime.caml_register_global(4, Base_With_return, "Base__With_return");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Variant
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Base_Variant = [0];
   runtime.caml_register_global(0, Base_Variant, "Base__Variant");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Variantslib
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Base_Variantslib = [0];
   runtime.caml_register_global(0, Base_Variantslib, "Base__Variantslib");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Fn
//# unitInfo: Requires: Base__Import
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_Import = global_data.Base__Import;
   function const$0(c, param){return c;}
   function non(f, x){return 1 - caml_call1(f, x);}
   function forever(f){
    try{for(;;) caml_call1(f, 0);}
    catch(e$0){var e = caml_wrap_exception(e$0); return e;}
   }
   function compose(f, g, x){return caml_call1(f, caml_call1(g, x));}
   function flip(f, x, y){return caml_call2(f, y, x);}
   function apply_n_times(n, f, x){
    var n$0 = n, x$0 = x;
    for(;;){
     if(0 >= n$0) return x$0;
     var
      x$1 = caml_call1(f, x$0),
      n$1 = caml_call2(Base_Import[93], n$0, 1),
      n$0 = n$1,
      x$0 = x$1;
    }
   }
   var Base_Fn = [0, const$0, non, forever, apply_n_times, compose, flip];
   runtime.caml_register_global(1, Base_Fn, "Base__Fn");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Monad_intf
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function S_to_S2(X){
    var
     symbol_bind = X[1],
     symbol_map = X[2],
     Monad_infix = X[3],
     bind = X[4],
     return$0 = X[5],
     map = X[6],
     join = X[7],
     ignore_m = X[8],
     all = X[9],
     all_unit = X[10],
     Let_syntax = X[11];
    return [0,
            symbol_bind,
            symbol_map,
            Let_syntax,
            Monad_infix,
            bind,
            return$0,
            map,
            join,
            ignore_m,
            all,
            all_unit];
   }
   function S2_to_S3(X){
    var
     symbol_bind = X[1],
     symbol_map = X[2],
     Let_syntax = X[3],
     Monad_infix = X[4],
     bind = X[5],
     return$0 = X[6],
     map = X[7],
     join = X[8],
     ignore_m = X[9],
     all = X[10],
     all_unit = X[11];
    return [0,
            symbol_bind,
            symbol_map,
            Let_syntax,
            Monad_infix,
            bind,
            return$0,
            map,
            join,
            ignore_m,
            all,
            all_unit];
   }
   function S_to_S_indexed(X){
    var
     symbol_bind = X[1],
     symbol_map = X[2],
     Monad_infix = X[3],
     bind = X[4],
     return$0 = X[5],
     map = X[6],
     join = X[7],
     ignore_m = X[8],
     all = X[9],
     all_unit = X[10],
     Let_syntax = X[11];
    return [0,
            symbol_bind,
            symbol_map,
            Let_syntax,
            Monad_infix,
            bind,
            return$0,
            map,
            join,
            ignore_m,
            all,
            all_unit];
   }
   function S2_to_S(X){
    var
     symbol_bind = X[1],
     symbol_map = X[2],
     Let_syntax = X[3],
     Monad_infix = X[4],
     bind = X[5],
     return$0 = X[6],
     map = X[7],
     join = X[8],
     ignore_m = X[9],
     all = X[10],
     all_unit = X[11];
    return [0,
            symbol_bind,
            symbol_map,
            Monad_infix,
            bind,
            return$0,
            map,
            join,
            ignore_m,
            all,
            all_unit,
            Let_syntax];
   }
   function S3_to_S2(X){
    var
     symbol_bind = X[1],
     symbol_map = X[2],
     Let_syntax = X[3],
     Monad_infix = X[4],
     bind = X[5],
     return$0 = X[6],
     map = X[7],
     join = X[8],
     ignore_m = X[9],
     all = X[10],
     all_unit = X[11];
    return [0,
            symbol_bind,
            symbol_map,
            Let_syntax,
            Monad_infix,
            bind,
            return$0,
            map,
            join,
            ignore_m,
            all,
            all_unit];
   }
   function S_indexed_to_S2(X){
    var
     symbol_bind = X[1],
     symbol_map = X[2],
     Let_syntax = X[3],
     Monad_infix = X[4],
     bind = X[5],
     return$0 = X[6],
     map = X[7],
     join = X[8],
     ignore_m = X[9],
     all = X[10],
     all_unit = X[11];
    return [0,
            symbol_bind,
            symbol_map,
            Let_syntax,
            Monad_infix,
            bind,
            return$0,
            map,
            join,
            ignore_m,
            all,
            all_unit];
   }
   var
    Base_Monad_intf =
      [0,
       S_to_S2,
       S2_to_S3,
       S_to_S_indexed,
       S2_to_S,
       S3_to_S2,
       S_indexed_to_S2];
   runtime.caml_register_global(0, Base_Monad_intf, "Base__Monad_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Monad
//# unitInfo: Requires: Base__List0, Base__Monad_intf
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    Base_List0 = global_data.Base__List0;
   function Make_general(_M_){
    var bind = _M_[1], return$0 = _M_[3];
    function map_via_bind(ma, f){
     function _N_(a){
      var _O_ = caml_call1(f, a);
      return caml_call1(_M_[3], _O_);
     }
     return caml_call2(_M_[1], ma, _N_);
    }
    var match = _M_[2];
    if(typeof match === "number")
     var map = map_via_bind;
    else
     var x = match[2], map = x;
    function symbol_bind(t, f){return caml_call2(bind, t, f);}
    function symbol_map(t, f){return caml_call2(map, t, f);}
    var
     Monad_infix = [0, symbol_bind, symbol_map],
     symbol_bind$0 = Monad_infix[1],
     symbol_map$0 = Monad_infix[2],
     symbol_bind$1 = Monad_infix[1],
     symbol_map$1 = Monad_infix[2];
    function both(a, b){
     return caml_call2
             (symbol_bind$1,
              a,
              function(a){
               return caml_call2
                       (symbol_map$1, b, function(b){return [0, a, b];});
              });
    }
    var
     Open_on_rhs = [0],
     Let_syntax = [0, return$0, bind, map, both, Open_on_rhs],
     Let_syntax$0 = [0, return$0, symbol_bind$1, symbol_map$1, Let_syntax];
    function join(t){
     return caml_call2(symbol_bind$0, t, function(t){return t;});
    }
    function ignore_m(t){
     return caml_call2(map, t, function(param){return 0;});
    }
    function loop(vs, param){
     if(! param) return caml_call1(return$0, caml_call1(Base_List0[19], vs));
     var ts = param[2], t = param[1];
     return caml_call2
             (symbol_bind$0, t, function(v){return loop([0, v, vs], ts);});
    }
    function all(ts){return loop(0, ts);}
    function all_unit(param){
     if(! param) return caml_call1(return$0, 0);
     var ts = param[2], t = param[1];
     return caml_call2
             (symbol_bind$0, t, function(param){return all_unit(ts);});
    }
    return [0,
            bind,
            return$0,
            ,
            map,
            Monad_infix,
            symbol_bind$0,
            symbol_map$0,
            Let_syntax$0,
            join,
            ignore_m,
            all,
            all_unit];
   }
   function Make_indexed(M){
    var
     bind = M[1],
     map = M[2],
     return$0 = M[3],
     _L_ = Make_general([0, bind, map, return$0]);
    return [0,
            _L_[6],
            _L_[7],
            _L_[8],
            _L_[5],
            _L_[1],
            _L_[2],
            _L_[4],
            _L_[9],
            _L_[10],
            _L_[11],
            _L_[12]];
   }
   function Make3(M){
    var
     bind = M[1],
     map = M[2],
     return$0 = M[3],
     _K_ = Make_general([0, bind, map, return$0]);
    return [0,
            _K_[6],
            _K_[7],
            _K_[8],
            _K_[5],
            _K_[1],
            _K_[2],
            _K_[4],
            _K_[9],
            _K_[10],
            _K_[11],
            _K_[12]];
   }
   function Make2(M){
    var
     bind = M[1],
     map = M[2],
     return$0 = M[3],
     _J_ = Make_general([0, bind, map, return$0]);
    return [0,
            _J_[6],
            _J_[7],
            _J_[8],
            _J_[5],
            _J_[1],
            _J_[2],
            _J_[4],
            _J_[9],
            _J_[10],
            _J_[11],
            _J_[12]];
   }
   function Make(M){
    var
     bind = M[1],
     return$0 = M[2],
     map = M[3],
     _I_ = Make_general([0, bind, map, return$0]);
    return [0,
            _I_[6],
            _I_[7],
            _I_[5],
            _I_[1],
            _I_[2],
            _I_[4],
            _I_[9],
            _I_[10],
            _I_[11],
            _I_[12],
            _I_[8]];
   }
   function Make2_local(_E_){
    var bind = _E_[1], return$0 = _E_[3];
    function map_via_bind(ma, f){
     function _G_(a){
      var _H_ = caml_call1(f, a);
      return caml_call1(_E_[3], _H_);
     }
     var res = caml_call2(_E_[1], ma, _G_);
     return res;
    }
    var match = _E_[2];
    if(typeof match === "number")
     var map = map_via_bind;
    else
     var x = match[2], map = x;
    function symbol_bind(t, f){return caml_call2(bind, t, f);}
    function symbol_map(t, f){return caml_call2(map, t, f);}
    var
     Monad_infix = [0, symbol_bind, symbol_map],
     symbol_bind$0 = Monad_infix[1],
     symbol_map$0 = Monad_infix[2],
     symbol_bind$1 = Monad_infix[1],
     symbol_map$1 = Monad_infix[2];
    function both(a, b){
     var
      res =
        caml_call2
         (bind,
          a,
          function(a){
           var res = caml_call2(map, b, function(b){return [0, a, b];});
           return res;
          });
     return res;
    }
    var
     Open_on_rhs = [0],
     Let_syntax = [0, return$0, bind, map, both, Open_on_rhs],
     Let_syntax$0 = [0, return$0, symbol_bind$1, symbol_map$1, Let_syntax];
    function join(t){
     return caml_call2(symbol_bind$0, t, function(_F_){return _F_;});
    }
    function ignore_m(t){
     var res = caml_call2(map, t, function(param){return 0;});
     return res;
    }
    function loop(vs, param){
     if(! param) return caml_call1(return$0, caml_call1(Base_List0[19], vs));
     var ts = param[2], t = param[1];
     return caml_call2
             (symbol_bind$0, t, function(v){return loop([0, v, vs], ts);});
    }
    function all(ts){return loop(0, ts);}
    function all_unit(param){
     if(! param) return caml_call1(return$0, 0);
     var ts = param[2], t = param[1];
     return caml_call2
             (symbol_bind$0, t, function(param){return all_unit(ts);});
    }
    return [0,
            bind,
            return$0,
            ,
            map,
            Monad_infix,
            symbol_bind$0,
            symbol_map$0,
            Let_syntax$0,
            join,
            ignore_m,
            all,
            all_unit];
   }
   function Make_local(M){
    var
     bind = M[1],
     return$0 = M[2],
     map = M[3],
     _D_ = Make2_local([0, bind, map, return$0]);
    return [0,
            _D_[6],
            _D_[7],
            _D_[5],
            _D_[1],
            _D_[2],
            _D_[4],
            _D_[9],
            _D_[10],
            _D_[11],
            _D_[12],
            _D_[8]];
   }
   function Of_monad_general(Monad, M){
    function return$0(a){
     var _C_ = caml_call1(Monad[3], a);
     return caml_call1(M[2], _C_);
    }
    function bind(t, f){
     function _y_(a){
      var _B_ = caml_call1(f, a);
      return caml_call1(M[1], _B_);
     }
     var _z_ = caml_call1(M[1], t), _A_ = caml_call2(Monad[1], _z_, _y_);
     return caml_call1(M[2], _A_);
    }
    var
     map =
       [0,
        -198771759,
        function(t, f){
         var _w_ = caml_call1(M[1], t), _x_ = caml_call2(Monad[2], _w_, f);
         return caml_call1(M[2], _x_);
        }];
    return Make_general([0, bind, map, return$0]);
   }
   function bind(a, f){return caml_call1(f, a);}
   function map(a, f){return caml_call1(f, a);}
   function symbol_map(a, f){return map(a, f);}
   function symbol_bind(a, f){return bind(a, f);}
   function return$0(_v_){return _v_;}
   function both(a, b){return [0, a, b];}
   var
    Open_on_rhs = [0],
    Let_syntax = [0, return$0, bind, map, both, Open_on_rhs],
    _a_ = [0, return$0, symbol_bind, symbol_map, Let_syntax];
   function _b_(_u_){return 0;}
   function _c_(_t_){return _t_;}
   function _d_(_s_){return 0;}
   function _e_(_r_){return _r_;}
   var
    _f_ =
      [0,
       symbol_bind,
       symbol_map,
       [0, symbol_bind, symbol_map],
       bind,
       function(_q_){return _q_;},
       map,
       _e_,
       _d_,
       _c_,
       _b_,
       _a_];
   function _g_(Monad, M){
    var
     to_monad = M[1],
     of_monad = M[2],
     bind = Monad[5],
     return$0 = Monad[6],
     map = Monad[7],
     _p_ = Of_monad_general([0, bind, map, return$0], [0, to_monad, of_monad]);
    return [0,
            _p_[6],
            _p_[7],
            _p_[8],
            _p_[5],
            _p_[1],
            _p_[2],
            _p_[4],
            _p_[9],
            _p_[10],
            _p_[11],
            _p_[12]];
   }
   function _h_(Monad, M){
    var
     to_monad = M[1],
     of_monad = M[2],
     bind = Monad[5],
     return$0 = Monad[6],
     map = Monad[7],
     _o_ = Of_monad_general([0, bind, map, return$0], [0, to_monad, of_monad]);
    return [0,
            _o_[6],
            _o_[7],
            _o_[8],
            _o_[5],
            _o_[1],
            _o_[2],
            _o_[4],
            _o_[9],
            _o_[10],
            _o_[11],
            _o_[12]];
   }
   function _i_(Monad, M){
    var
     to_monad = M[1],
     of_monad = M[2],
     bind = Monad[5],
     return$0 = Monad[6],
     map = Monad[7],
     _n_ = Of_monad_general([0, bind, map, return$0], [0, to_monad, of_monad]);
    return [0,
            _n_[6],
            _n_[7],
            _n_[8],
            _n_[5],
            _n_[1],
            _n_[2],
            _n_[4],
            _n_[9],
            _n_[10],
            _n_[11],
            _n_[12]];
   }
   function _j_(Monad, M){
    var
     to_monad = M[1],
     of_monad = M[2],
     bind = Monad[4],
     return$0 = Monad[5],
     map = Monad[6],
     _m_ = Of_monad_general([0, bind, map, return$0], [0, to_monad, of_monad]);
    return [0,
            _m_[6],
            _m_[7],
            _m_[5],
            _m_[1],
            _m_[2],
            _m_[4],
            _m_[9],
            _m_[10],
            _m_[11],
            _m_[12],
            _m_[8]];
   }
   var
    Base_Monad =
      [0,
       Make,
       Make2,
       Make3,
       Make_indexed,
       Make_local,
       function(_k_){
        var _l_ = Make2_local(_k_);
        return [0,
                _l_[6],
                _l_[7],
                _l_[8],
                _l_[5],
                _l_[1],
                _l_[2],
                _l_[4],
                _l_[9],
                _l_[10],
                _l_[11],
                _l_[12]];
       },
       _j_,
       _i_,
       _h_,
       _g_,
       _f_];
   runtime.caml_register_global(1, Base_Monad, "Base__Monad");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__T
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Base_T = [0];
   runtime.caml_register_global(0, Base_T, "Base__T");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Applicative_intf
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Base_Applicative_intf = [0];
   runtime.caml_register_global
    (0, Base_Applicative_intf, "Base__Applicative_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Applicative
//# unitInfo: Requires: Base__Applicative_intf, Base__Import, Base__List0
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_Import = global_data.Base__Import,
    Base_List0 = global_data.Base__List0;
   function S_to_S2(X){
    var
     return$0 = X[1],
     map = X[2],
     both = X[3],
     symbol = X[4],
     symbol$0 = X[5],
     symbol$1 = X[6],
     symbol_map = X[7],
     apply = X[8],
     map2 = X[9],
     map3 = X[10],
     all = X[11],
     all_unit = X[12],
     Applicative_infix = X[13];
    return [0,
            return$0,
            map,
            both,
            symbol,
            symbol$0,
            symbol$1,
            symbol_map,
            apply,
            map2,
            map3,
            all,
            all_unit,
            Applicative_infix];
   }
   function S2_to_S(T, X){
    var
     return$0 = X[1],
     map = X[2],
     both = X[3],
     symbol = X[4],
     symbol$0 = X[5],
     symbol$1 = X[6],
     symbol_map = X[7],
     apply = X[8],
     map2 = X[9],
     map3 = X[10],
     all = X[11],
     all_unit = X[12],
     Applicative_infix = X[13];
    return [0,
            return$0,
            map,
            both,
            symbol,
            symbol$0,
            symbol$1,
            symbol_map,
            apply,
            map2,
            map3,
            all,
            all_unit,
            Applicative_infix];
   }
   function S2_to_S3(X){
    var
     return$0 = X[1],
     map = X[2],
     both = X[3],
     symbol = X[4],
     symbol$0 = X[5],
     symbol$1 = X[6],
     symbol_map = X[7],
     apply = X[8],
     map2 = X[9],
     map3 = X[10],
     all = X[11],
     all_unit = X[12],
     Applicative_infix = X[13];
    return [0,
            return$0,
            map,
            both,
            symbol,
            symbol$0,
            symbol$1,
            symbol_map,
            apply,
            map2,
            map3,
            all,
            all_unit,
            Applicative_infix];
   }
   function S3_to_S2(T, X){
    var
     return$0 = X[1],
     map = X[2],
     both = X[3],
     symbol = X[4],
     symbol$0 = X[5],
     symbol$1 = X[6],
     symbol_map = X[7],
     apply = X[8],
     map2 = X[9],
     map3 = X[10],
     all = X[11],
     all_unit = X[12],
     Applicative_infix = X[13];
    return [0,
            return$0,
            map,
            both,
            symbol,
            symbol$0,
            symbol$1,
            symbol_map,
            apply,
            map2,
            map3,
            all,
            all_unit,
            Applicative_infix];
   }
   function S3_to_S(T1, T2, X){
    var
     return$0 = X[1],
     map = X[2],
     both = X[3],
     symbol = X[4],
     symbol$0 = X[5],
     symbol$1 = X[6],
     symbol_map = X[7],
     apply = X[8],
     map2 = X[9],
     map3 = X[10],
     all = X[11],
     all_unit = X[12],
     Applicative_infix = X[13];
    return [0,
            return$0,
            map,
            both,
            symbol,
            symbol$0,
            symbol$1,
            symbol_map,
            apply,
            map2,
            map3,
            all,
            all_unit,
            Applicative_infix];
   }
   function Make3(_X_){
    var return$0 = _X_[1], symbol = _X_[2];
    function derived_map(t, f){
     return caml_call2(symbol, caml_call1(return$0, f), t);
    }
    var match = _X_[3];
    if(typeof match === "number")
     var map = derived_map;
    else
     var x = match[2], map = x;
    function symbol_map(t, f){return caml_call2(map, t, f);}
    function map2(ta, tb, f){
     return caml_call2(symbol, caml_call2(map, ta, f), tb);
    }
    function map3(ta, tb, tc, f){
     return caml_call2
             (symbol, caml_call2(symbol, caml_call2(map, ta, f), tb), tc);
    }
    function all(ts){
     var _Z_ = caml_call1(return$0, 0);
     function ___(x, xs){return [0, x, xs];}
     function _$_(_aa_){return function(_ab_){return map2(_aa_, _ab_, ___);};}
     return caml_call3(Base_List0[20], ts, _$_, _Z_);
    }
    function both(ta, tb){
     return map2(ta, tb, function(a, b){return [0, a, b];});
    }
    function symbol$0(u, v){
     return caml_call2
             (symbol,
              caml_call2
               (symbol,
                caml_call1(return$0, function(param, y){return y;}),
                u),
              v);
    }
    function symbol$1(u, v){
     return caml_call2
             (symbol,
              caml_call2
               (symbol,
                caml_call1(return$0, function(x, param){return x;}),
                u),
              v);
    }
    function all_unit(ts){
     var _Y_ = caml_call1(return$0, 0);
     return caml_call3(Base_List0[8], ts, _Y_, symbol$0);
    }
    return [0,
            return$0,
            map,
            both,
            symbol,
            symbol$1,
            symbol$0,
            symbol_map,
            symbol,
            map2,
            map3,
            all,
            all_unit,
            [0, symbol, symbol$1, symbol$0, symbol_map]];
   }
   function Make2(X){
    var return$0 = X[1], apply = X[2], map = X[3];
    return Make3([0, return$0, apply, map]);
   }
   function Make(X){
    var return$0 = X[1], apply = X[2], map = X[3];
    return Make2([0, return$0, apply, map]);
   }
   function Make_let_syntax3(X, Intf, Impl){
    var
     return$0 = X[1],
     map = X[2],
     both = X[3],
     symbol = X[4],
     symbol$0 = X[5],
     symbol$1 = X[6],
     symbol_map = X[7],
     return$1 = X[1],
     map$0 = X[2],
     both$0 = X[3],
     symbol$2 = X[4],
     symbol$3 = X[5],
     symbol$4 = X[6],
     symbol_map$0 = X[7],
     Let_syntax =
       [0,
        return$1,
        map$0,
        both$0,
        symbol$2,
        symbol$3,
        symbol$4,
        symbol_map$0,
        Impl],
     Let_syntax$0 =
       [0,
        return$0,
        map,
        both,
        symbol,
        symbol$0,
        symbol$1,
        symbol_map,
        Let_syntax];
    return [0, Let_syntax$0];
   }
   function Make_let_syntax2(X, Intf, Impl){
    var
     return$0 = X[1],
     map = X[2],
     both = X[3],
     symbol = X[4],
     symbol$0 = X[5],
     symbol$1 = X[6],
     symbol_map = X[7];
    return Make_let_syntax3
            ([0, return$0, map, both, symbol, symbol$0, symbol$1, symbol_map],
             Intf,
             Impl);
   }
   function Make3_using_map2(_O_){
    var return$0 = _O_[1], map2 = _O_[2];
    function symbol(tf, ta){
     return caml_call3(map2, tf, ta, function(f, a){return caml_call1(f, a);});
    }
    function derived_map(t, f){return symbol(caml_call1(return$0, f), t);}
    var match = _O_[3];
    if(typeof match === "number")
     var map = derived_map;
    else
     var x = match[2], map = x;
    function symbol_map(t, f){return caml_call2(map, t, f);}
    function both(ta, tb){
     return caml_call3(map2, ta, tb, function(a, b){return [0, a, b];});
    }
    function map3(ta, tb, tc, f){
     function _W_(fab, c){return caml_call1(fab, c);}
     return caml_call3(map2, caml_call3(map2, ta, tb, f), tc, _W_);
    }
    function all(ts){
     var _Q_ = caml_call1(return$0, 0);
     function _R_(x, xs){return [0, x, xs];}
     function _S_(_T_){
      var _U_ = caml_call1(map2, _T_);
      return function(_V_){return caml_call2(_U_, _V_, _R_);};
     }
     return caml_call3(Base_List0[20], ts, _S_, _Q_);
    }
    function symbol$0(u, v){
     return caml_call3(map2, u, v, function(param, y){return y;});
    }
    function symbol$1(u, v){
     return caml_call3(map2, u, v, function(x, param){return x;});
    }
    function all_unit(ts){
     var _P_ = caml_call1(return$0, 0);
     return caml_call3(Base_List0[8], ts, _P_, symbol$0);
    }
    return [0,
            return$0,
            map,
            both,
            symbol,
            symbol$1,
            symbol$0,
            symbol_map,
            symbol,
            map2,
            map3,
            all,
            all_unit,
            [0, symbol, symbol$1, symbol$0, symbol_map]];
   }
   function Make2_using_map2(X){
    var return$0 = X[1], map2 = X[2], map = X[3];
    return Make3_using_map2([0, return$0, map2, map]);
   }
   function Make_using_map2(X){
    var return$0 = X[1], map2 = X[2], map = X[3];
    return Make2_using_map2([0, return$0, map2, map]);
   }
   function Make3_using_map2_local(_E_){
    var return$0 = _E_[1], map2 = _E_[2];
    function symbol(tf, ta){
     return caml_call3(map2, tf, ta, function(f, a){return caml_call1(f, a);});
    }
    function derived_map(t, f){
     function _N_(param){return f;}
     return caml_call3(map2, caml_call1(return$0, 0), t, _N_);
    }
    var match = _E_[3];
    if(typeof match === "number")
     var map = derived_map;
    else
     var map$0 = match[2], map = map$0;
    function symbol_map(t, f){return caml_call2(map, t, f);}
    function both(ta, tb){
     return caml_call3(map2, ta, tb, function(a, b){return [0, a, b];});
    }
    function map3(ta, tb, tc, f){
     function _M_(param, c){
      var b = param[2], a = param[1];
      return caml_call3(f, a, b, c);
     }
     var res = caml_call3(map2, both(ta, tb), tc, _M_);
     return res;
    }
    function all(ts){
     var _G_ = caml_call1(return$0, 0);
     function _H_(x, xs){return [0, x, xs];}
     function _I_(_J_){
      var _K_ = caml_call1(map2, _J_);
      return function(_L_){return caml_call2(_K_, _L_, _H_);};
     }
     return caml_call3(Base_List0[20], ts, _I_, _G_);
    }
    function symbol$0(u, v){
     return caml_call3(map2, u, v, function(param, y){return y;});
    }
    function symbol$1(u, v){
     return caml_call3(map2, u, v, function(x, param){return x;});
    }
    function all_unit(ts){
     var _F_ = caml_call1(return$0, 0);
     return caml_call3(Base_List0[8], ts, _F_, symbol$0);
    }
    return [0,
            return$0,
            map,
            both,
            symbol,
            symbol$1,
            symbol$0,
            symbol_map,
            symbol,
            map2,
            map3,
            all,
            all_unit,
            [0, symbol, symbol$1, symbol$0, symbol_map]];
   }
   function Make2_using_map2_local(X){
    var return$0 = X[1], map2 = X[2], map = X[3];
    return Make3_using_map2_local([0, return$0, map2, map]);
   }
   function Make_using_map2_local(X){
    var return$0 = X[1], map2 = X[2], map = X[3];
    return Make2_using_map2_local([0, return$0, map2, map]);
   }
   function Of_monad2(M){
    var return$0 = M[6];
    function apply(mf, mx){
     function _D_(f){return caml_call2(M[7], mx, f);}
     return caml_call2(M[5], mf, _D_);
    }
    var map = [0, -198771759, M[7]];
    return Make2([0, return$0, apply, map]);
   }
   function Of_monad(M){
    var
     symbol_bind = M[1],
     symbol_map = M[2],
     Monad_infix = M[3],
     bind = M[4],
     return$0 = M[5],
     map = M[6],
     join = M[7],
     ignore_m = M[8],
     all = M[9],
     all_unit = M[10],
     Let_syntax = M[11];
    return Of_monad2
            ([0,
              symbol_bind,
              symbol_map,
              Let_syntax,
              Monad_infix,
              bind,
              return$0,
              map,
              join,
              ignore_m,
              all,
              all_unit]);
   }
   function Compose(F, G){
    function return$0(a){
     var _C_ = caml_call1(F[1], a);
     return caml_call1(G[1], _C_);
    }
    function apply(tf, tx){
     var _B_ = caml_call2(G[2], tf, F[8]);
     return caml_call2(G[8], _B_, tx);
    }
    function custom_map(t, f){
     var _y_ = F[2];
     function _z_(_A_){return caml_call2(_y_, _A_, f);}
     return caml_call2(G[2], t, _z_);
    }
    var
     map = [0, -198771759, custom_map],
     include = Make([0, return$0, apply, map]),
     return$1 = include[1],
     map$0 = include[2],
     both = include[3],
     symbol = include[4],
     symbol$0 = include[5],
     symbol$1 = include[6],
     symbol_map = include[7],
     apply$0 = include[8],
     map2 = include[9],
     map3 = include[10],
     all = include[11],
     all_unit = include[12],
     Applicative_infix = include[13];
    return [0,
            return$1,
            map$0,
            both,
            symbol,
            symbol$0,
            symbol$1,
            symbol_map,
            apply$0,
            map2,
            map3,
            all,
            all_unit,
            Applicative_infix];
   }
   function Pair(F, G){
    function return$0(a){
     var _x_ = caml_call1(G[1], a);
     return [0, caml_call1(F[1], a), _x_];
    }
    function apply(tf, tx){
     var
      _s_ = caml_call1(Base_Import[127], tx),
      _t_ = caml_call1(Base_Import[127], tf),
      _u_ = caml_call2(G[8], _t_, _s_),
      _v_ = caml_call1(Base_Import[125], tx),
      _w_ = caml_call1(Base_Import[125], tf);
     return [0, caml_call2(F[8], _w_, _v_), _u_];
    }
    function custom_map(t, f){
     var
      _p_ = caml_call1(Base_Import[127], t),
      _q_ = caml_call2(G[2], _p_, f),
      _r_ = caml_call1(Base_Import[125], t);
     return [0, caml_call2(F[2], _r_, f), _q_];
    }
    var
     map = [0, -198771759, custom_map],
     include = Make([0, return$0, apply, map]),
     return$1 = include[1],
     map$0 = include[2],
     both = include[3],
     symbol = include[4],
     symbol$0 = include[5],
     symbol$1 = include[6],
     symbol_map = include[7],
     apply$0 = include[8],
     map2 = include[9],
     map3 = include[10],
     all = include[11],
     all_unit = include[12],
     Applicative_infix = include[13];
    return [0,
            return$1,
            map$0,
            both,
            symbol,
            symbol$0,
            symbol$1,
            symbol_map,
            apply$0,
            map2,
            map3,
            all,
            all_unit,
            Applicative_infix];
   }
   function return$0(_o_){return _o_;}
   function map2(a, b, f){return caml_call2(f, a, b);}
   var
    map = [0, -198771759, function(a, f){return caml_call1(f, a);}],
    include = Make_using_map2_local([0, return$0, map2, map]),
    return$1 = include[1],
    map$0 = include[2],
    both = include[3],
    symbol = include[4],
    symbol$0 = include[5],
    symbol$1 = include[6],
    symbol_map = include[7],
    apply = include[8],
    map2$0 = include[9],
    map3 = include[10],
    all = include[11],
    all_unit = include[12],
    Applicative_infix = include[13],
    Ident =
      [0,
       return$1,
       map$0,
       both,
       symbol,
       symbol$0,
       symbol$1,
       symbol_map,
       apply,
       map2$0,
       map3,
       all,
       all_unit,
       Applicative_infix];
   function _a_(_l_, _k_, _j_){
    var _m_ = Make_let_syntax3(_l_, _k_, _j_)[1], _n_ = _m_[8];
    return [0,
            [0,
             _m_[1],
             _m_[4],
             _m_[5],
             _m_[6],
             _m_[7],
             [0, _n_[1], _n_[2], _n_[3], _n_[8]]]];
   }
   function _b_(_g_, _f_, _e_){
    var _h_ = Make_let_syntax2(_g_, _f_, _e_)[1], _i_ = _h_[8];
    return [0,
            [0,
             _h_[1],
             _h_[4],
             _h_[5],
             _h_[6],
             _h_[7],
             [0, _i_[1], _i_[2], _i_[3], _i_[8]]]];
   }
   var
    Base_Applicative =
      [0,
       Ident,
       S2_to_S,
       S_to_S2,
       S3_to_S2,
       S3_to_S,
       S2_to_S3,
       Make,
       Make2,
       Make3,
       function(X, Intf, Impl){
        var
         return$0 = X[1],
         map = X[2],
         both = X[3],
         symbol = X[4],
         symbol$0 = X[5],
         symbol$1 = X[6],
         symbol_map = X[7],
         _c_ =
           Make_let_syntax2
             ([0, return$0, map, both, symbol, symbol$0, symbol$1, symbol_map],
              Intf,
              Impl)
            [1],
         _d_ = _c_[8];
        return [0,
                [0,
                 _c_[1],
                 _c_[4],
                 _c_[5],
                 _c_[6],
                 _c_[7],
                 [0, _d_[1], _d_[2], _d_[3], _d_[8]]]];
       },
       _b_,
       _a_,
       Make_using_map2,
       Make2_using_map2,
       Make3_using_map2,
       Make_using_map2_local,
       Make2_using_map2_local,
       Make3_using_map2_local,
       Of_monad,
       Of_monad2,
       Compose,
       Pair];
   runtime.caml_register_global(2, Base_Applicative, "Base__Applicative");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Comparator
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var Module = [0], _a_ = [0, "_"];
   function of_module(M){return M[1];}
   function to_module(t){return [0, t];}
   function make(compare, sexp_of_t){
    var comparator = [0, compare, sexp_of_t];
    return [0, comparator];
   }
   function S_to_S1(S){var comparator = S[1]; return [0, comparator];}
   function Make1(M){
    var comparator = [0, M[1], M[2]];
    return [0, comparator];
   }
   var compare = runtime.caml_compare;
   function sexp_of_t(param){return _a_;}
   var
    include = Make1([0, compare, sexp_of_t]),
    comparator = include[1],
    Poly = [0, comparator];
   function Derived(M){
    function comparator(a){
     var _e_ = caml_call1(M[2], a[2]);
     return [0, caml_call1(M[1], a[1]), _e_];
    }
    return [0, comparator];
   }
   function Derived2(M){
    function comparator(a, b){
     var _d_ = caml_call2(M[2], a[2], b[2]);
     return [0, caml_call2(M[1], a[1], b[1]), _d_];
    }
    return [0, comparator];
   }
   function Derived_phantom(M){
    function comparator(a){
     var _c_ = caml_call1(M[2], a[2]);
     return [0, caml_call1(M[1], a[1]), _c_];
    }
    return [0, comparator];
   }
   function Derived2_phantom(M){
    function comparator(a, b){
     var _b_ = caml_call2(M[2], a[2], b[2]);
     return [0, caml_call2(M[1], a[1], b[1]), _b_];
    }
    return [0, comparator];
   }
   var
    Base_Comparator =
      [0,
       make,
       Poly,
       Module,
       of_module,
       to_module,
       S_to_S1,
       function(M){var comparator = [0, M[1], M[2]]; return [0, comparator];},
       Make1,
       Derived,
       Derived2,
       Derived_phantom,
       Derived2_phantom];
   runtime.caml_register_global(1, Base_Comparator, "Base__Comparator");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Comparisons
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Base_Comparisons = [0];
   runtime.caml_register_global(0, Base_Comparisons, "Base__Comparisons");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Either0
//# unitInfo: Requires: Base__Hash, Sexplib0__Sexp_conv_error
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_First$0 = "First",
    cst_Second$0 = "Second",
    cst_first = "first",
    cst_second = "second",
    caml_string_notequal = runtime.caml_string_notequal;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    error_source_017 = "either0.ml.t",
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Base_Hash = global_data.Base__Hash,
    cst_Second = cst_Second$0,
    cst_First = cst_First$0,
    _a_ = [0, cst_First$0],
    _b_ = [0, cst_Second$0];
   function compare_local(cmp_f, cmp_s, a_007, b_008){
    if(a_007 === b_008) return 0;
    if(0 === a_007[0]){
     var a_009 = a_007[1];
     if(0 !== b_008[0]) return -1;
     var b_010 = b_008[1];
     return caml_call2(cmp_f, a_009, b_010);
    }
    var a_011 = a_007[1];
    if(0 === b_008[0]) return 1;
    var b_012 = b_008[1];
    return caml_call2(cmp_s, a_011, b_012);
   }
   function compare(cmp_f, cmp_s, a_001, b_002){
    if(a_001 === b_002) return 0;
    if(0 === a_001[0]){
     var a_003 = a_001[1];
     if(0 !== b_002[0]) return -1;
     var b_004 = b_002[1];
     return caml_call2(cmp_f, a_003, b_004);
    }
    var a_005 = a_001[1];
    if(0 === b_002[0]) return 1;
    var b_006 = b_002[1];
    return caml_call2(cmp_s, a_005, b_006);
   }
   function hash_fold_t(hash_fold_f, hash_fold_s, hsv, arg){
    if(0 === arg[0]){
     var a0 = arg[1], hsv$0 = caml_call2(Base_Hash[3], hsv, 0);
     return caml_call2(hash_fold_f, hsv$0, a0);
    }
    var a0$0 = arg[1], hsv$1 = caml_call2(Base_Hash[3], hsv, 1);
    return caml_call2(hash_fold_s, hsv$1, a0$0);
   }
   function t_of_sexp(of_f_013, of_s_014, sexp_019){
    a:
    {
     if(0 === sexp_019[0]){
      var _c_ = sexp_019[1];
      b:
      if(caml_string_notequal(_c_, cst_First$0)){
       if(caml_string_notequal(_c_, cst_Second$0)){
        if(! caml_string_notequal(_c_, cst_first)) break b;
        if(caml_string_notequal(_c_, cst_second)) break a;
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[9], error_source_017, sexp_019);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[9], error_source_017, sexp_019);
     }
     var _d_ = sexp_019[1];
     if(! _d_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_017, sexp_019);
     var _e_ = _d_[1];
     if(0 !== _e_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_017, sexp_019);
     var tag_020 = _e_[1];
     b:
     if(caml_string_notequal(tag_020, cst_First$0)){
      if(caml_string_notequal(tag_020, cst_Second$0)){
       if(! caml_string_notequal(tag_020, cst_first)) break b;
       if(caml_string_notequal(tag_020, cst_second)) break a;
      }
      var sexp_args_026 = _d_[2];
      if(sexp_args_026 && ! sexp_args_026[2]){
       var
        arg0_027 = sexp_args_026[1],
        res0_028 = caml_call1(of_s_014, arg0_027);
       return [1, res0_028];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[8],
               error_source_017,
               tag_020,
               sexp_019);
     }
     var sexp_args_021 = _d_[2];
     if(sexp_args_021 && ! sexp_args_021[2]){
      var
       arg0_022 = sexp_args_021[1],
       res0_023 = caml_call1(of_f_013, arg0_022);
      return [0, res0_023];
     }
     return caml_call3
             (Sexplib0_Sexp_conv_error[8],
              error_source_017,
              tag_020,
              sexp_019);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_017, sexp_019);
   }
   function sexp_of_t(of_f_031, of_s_032, param){
    if(0 === param[0]){
     var arg0_033 = param[1], res0_034 = caml_call1(of_f_031, arg0_033);
     return [1, [0, _a_, [0, res0_034, 0]]];
    }
    var arg0_035 = param[1], res0_036 = caml_call1(of_s_032, arg0_035);
    return [1, [0, _b_, [0, res0_036, 0]]];
   }
   function t_sexp_grammar(f_sexp_grammar, s_sexp_grammar){
    return [3,
            [0,
             2,
             [0,
              [1, [0, cst_First, [0, [0, f_sexp_grammar, 0]]]],
              [0, [1, [0, cst_Second, [0, [0, s_sexp_grammar, 0]]]], 0]]]];
   }
   var
    Base_Either0 =
      [0,
       compare_local,
       compare,
       hash_fold_t,
       t_of_sexp,
       sexp_of_t,
       t_sexp_grammar];
   runtime.caml_register_global(15, Base_Either0, "Base__Either0");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Field
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function opaque_identity(_b_){return _b_;}
   var For_generated_code = [0, opaque_identity];
   function name(param){return param[2];}
   function get(param, r){return caml_call1(param[4], r);}
   function fset(param, r, v){return caml_call2(param[5], r, v);}
   function setter(param){return param[3];}
   function map(param, r, f){
    var _a_ = caml_call1(f, caml_call1(param[4], r));
    return caml_call2(param[5], r, _a_);
   }
   function updater(field){
    var match = field[3];
    if(! match) return 0;
    var setter = match[1];
    return [0,
            function(r, f){
             return caml_call2
                     (setter, r, caml_call1(f, caml_call1(field[4], r)));
            }];
   }
   var
    Base_Field =
      [0, For_generated_code, name, get, fset, setter, map, updater];
   runtime.caml_register_global(0, Base_Field, "Base__Field");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Int_conversions
//# unitInfo: Requires: Base__Import, Base__Int0, Base__Printf, Base__Sys0, Base__Word_size, Stdlib__Int32, Stdlib__Int64, Stdlib__Nativeint
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_int$3 = "int",
    cst_int32$3 = "int32",
    cst_int64$3 = "int64",
    cst_nativeint$2 = "nativeint",
    cst_src_int_conversions_ml = "src/int_conversions.ml",
    caml_int64_of_int32 = runtime.caml_int64_of_int32,
    caml_int64_shift_right = runtime.caml_int64_shift_right,
    caml_int64_to_int32 = runtime.caml_int64_to_int32,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_Import = global_data.Base__Import,
    Base_Printf = global_data.Base__Printf,
    Base_Sys0 = global_data.Base__Sys0,
    Base_Word_size = global_data.Base__Word_size,
    Assert_failure = global_data.Assert_failure,
    Stdlib_Int32 = global_data.Stdlib__Int32,
    Stdlib_Int64 = global_data.Stdlib__Int64,
    Stdlib_Nativeint = global_data.Stdlib__Nativeint,
    Base_Int0 = global_data.Base__Int0,
    cst_int63 = "int63",
    cst_int64$2 = cst_int64$3,
    cst_nativeint$1 = cst_nativeint$2,
    cst_int64$1 = cst_int64$3,
    cst_int32$2 = cst_int32$3,
    cst_nativeint$0 = cst_nativeint$2,
    cst_int32$1 = cst_int32$3,
    cst_int64$0 = cst_int64$3,
    cst_int$2 = cst_int$3,
    cst_nativeint = cst_nativeint$2,
    cst_int$1 = cst_int$3,
    cst_int64 = cst_int64$3,
    _d_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    cst_int$0 = cst_int$3,
    cst_int32$0 = cst_int32$3,
    cst_int32 = cst_int32$3,
    cst_int = cst_int$3,
    _a_ =
      [0,
       [11,
        "conversion from ",
        [2,
         0,
         [11,
          " to ",
          [2, 0, [11, " failed: ", [2, 0, [11, " is out of range", 0]]]]]]],
       "conversion from %s to %s failed: %s is out of range"],
    _k_ = [0, cst_src_int_conversions_ml, 19, 9],
    _j_ = [0, cst_src_int_conversions_ml, 82, 9],
    _i_ = [0, cst_src_int_conversions_ml, 103, 9],
    _h_ = [0, cst_src_int_conversions_ml, 155, 9],
    _g_ = [0, cst_src_int_conversions_ml, 183, 9];
   function convert_failure(x, a, b, to_string){
    var _H_ = caml_call1(to_string, x);
    return caml_call5(Base_Printf[6], _a_, a, b, _H_, 0);
   }
   var
    num_bits_int = Base_Sys0[8],
    num_bits_nativeint = caml_call1(Base_Word_size[2], Base_Word_size[3]),
    num_bits_int32 = 32,
    num_bits_int64 = 64;
   if(63 !== num_bits_int && 31 !== num_bits_int && 32 !== num_bits_int)
    throw caml_maybe_attach_backtrace([0, Assert_failure, _k_], 1);
   var
    min_int32 = Stdlib_Int32[10],
    max_int32 = Stdlib_Int32[9],
    min_int64 = Stdlib_Int64[10],
    max_int64 = Stdlib_Int64[9],
    min_nativeint = Stdlib_Nativeint[11],
    max_nativeint = Stdlib_Nativeint[10],
    int64_to_string = Stdlib_Int64[14],
    nativeint_to_string = Stdlib_Nativeint[15],
    _b_ = Base_Import[85][33],
    _c_ = Stdlib_Int32[14];
   function int32_to_int_trunc(_G_){return _G_;}
   function int_to_int32_trunc(_F_){return _F_;}
   var
    int_is_representable_as_int32 =
      num_bits_int <= 32
       ? function(param){return 1;}
       : function
        (x){
         var
          _D_ = caml_call2(Base_Import[228], min_int32, x) <= 0 ? 1 : 0,
          _E_ =
            _D_
             ? caml_call2(Base_Import[228], x, max_int32) <= 0 ? 1 : 0
             : _D_;
         return _E_;
        };
   if(32 <= num_bits_int)
    var int32_is_representable_as_int = function(param){return 1;};
   else
    var
     min$4 = Base_Int0[7],
     max$4 = Base_Int0[6],
     int32_is_representable_as_int =
       function(x){
        var
         _B_ = caml_call2(Base_Import[229], min$4, x) <= 0 ? 1 : 0,
         _C_ = _B_ ? caml_call2(Base_Import[229], x, max$4) <= 0 ? 1 : 0 : _B_;
        return _C_;
       };
   function int_to_int32(x){
    return int_is_representable_as_int32(x) ? [0, x] : 0;
   }
   function int32_to_int(x){
    return int32_is_representable_as_int(x) ? [0, x] : 0;
   }
   function int_to_int32_exn(x){
    return int_is_representable_as_int32(x)
            ? x
            : convert_failure(x, cst_int, cst_int32, _b_);
   }
   function int32_to_int_exn(x){
    return int32_is_representable_as_int(x)
            ? x
            : convert_failure(x, cst_int32$0, cst_int$0, _c_);
   }
   if(num_bits_int >= 64)
    throw caml_maybe_attach_backtrace([0, Assert_failure, _j_], 1);
   var
    int_to_int64 = caml_int64_of_int32,
    int64_to_int_trunc = caml_int64_to_int32,
    min = caml_int64_of_int32(Base_Int0[7]),
    max = caml_int64_of_int32(Base_Int0[6]);
   function int64_is_representable_as_int(x){
    var
     _z_ = caml_call2(Base_Import[230], min, x) <= 0 ? 1 : 0,
     _A_ = _z_ ? caml_call2(Base_Import[230], x, max) <= 0 ? 1 : 0 : _z_;
    return _A_;
   }
   function int64_to_int(x){
    return int64_is_representable_as_int(x) ? [0, caml_int64_to_int32(x)] : 0;
   }
   function int64_to_int_exn(x){
    return int64_is_representable_as_int(x)
            ? caml_int64_to_int32(x)
            : convert_failure
              (runtime.caml_int64_add(x, _d_),
               cst_int64,
               cst_int$1,
               int64_to_string);
   }
   if(num_bits_int > num_bits_nativeint)
    throw caml_maybe_attach_backtrace([0, Assert_failure, _i_], 1);
   function int_to_nativeint(_y_){return _y_;}
   function nativeint_to_int_trunc(_x_){return _x_;}
   if(num_bits_nativeint <= num_bits_int)
    var _e_ = function(param){return 1;};
   else
    var
     min$3 = Base_Int0[7],
     max$3 = Base_Int0[6],
     _e_ =
       function(x){
        var
         _v_ = caml_call2(Base_Import[231], min$3, x) <= 0 ? 1 : 0,
         _w_ = _v_ ? caml_call2(Base_Import[231], x, max$3) <= 0 ? 1 : 0 : _v_;
        return _w_;
       };
   function nativeint_to_int(x){return _e_(x) ? [0, x] : 0;}
   function nativeint_to_int_exn(x){
    return _e_(x)
            ? x
            : convert_failure
              (x, cst_nativeint, cst_int$2, nativeint_to_string);
   }
   var
    int32_to_int64 = caml_int64_of_int32,
    int64_to_int32_trunc = caml_int64_to_int32,
    min$0 = caml_int64_of_int32(min_int32),
    max$0 = caml_int64_of_int32(max_int32);
   function int64_is_representable_as_int3(x){
    var
     _t_ = caml_call2(Base_Import[230], min$0, x) <= 0 ? 1 : 0,
     _u_ = _t_ ? caml_call2(Base_Import[230], x, max$0) <= 0 ? 1 : 0 : _t_;
    return _u_;
   }
   function int64_to_int32(x){
    return int64_is_representable_as_int3(x) ? [0, caml_int64_to_int32(x)] : 0;
   }
   function int64_to_int32_exn(x){
    return int64_is_representable_as_int3(x)
            ? caml_int64_to_int32(x)
            : convert_failure(x, cst_int64$0, cst_int32$1, int64_to_string);
   }
   if(32 > num_bits_nativeint)
    throw caml_maybe_attach_backtrace([0, Assert_failure, _h_], 1);
   function int32_to_nativeint(_s_){return _s_;}
   function nativeint_to_int32_trunc(_r_){return _r_;}
   var
    _f_ =
      num_bits_nativeint <= 32
       ? function(param){return 1;}
       : function
        (x){
         var
          _p_ = caml_call2(Base_Import[231], min_int32, x) <= 0 ? 1 : 0,
          _q_ =
            _p_
             ? caml_call2(Base_Import[231], x, max_int32) <= 0 ? 1 : 0
             : _p_;
         return _q_;
        };
   function nativeint_to_int32(x){return _f_(x) ? [0, x] : 0;}
   function nativeint_to_int32_exn(x){
    return _f_(x)
            ? x
            : convert_failure
              (x, cst_nativeint$0, cst_int32$2, nativeint_to_string);
   }
   if(num_bits_nativeint > 64)
    throw caml_maybe_attach_backtrace([0, Assert_failure, _g_], 1);
   var
    int64_to_nativeint_trunc = caml_int64_to_int32,
    nativeint_to_int64 = caml_int64_of_int32;
   if(64 <= num_bits_nativeint)
    var int64_is_representable_as_nati = function(param){return 1;};
   else
    var
     min$2 = caml_int64_of_int32(min_nativeint),
     max$2 = caml_int64_of_int32(max_nativeint),
     int64_is_representable_as_nati =
       function(x){
        var
         _n_ = caml_call2(Base_Import[230], min$2, x) <= 0 ? 1 : 0,
         _o_ = _n_ ? caml_call2(Base_Import[230], x, max$2) <= 0 ? 1 : 0 : _n_;
        return _o_;
       };
   function int64_to_nativeint(x){
    return int64_is_representable_as_nati(x) ? [0, caml_int64_to_int32(x)] : 0;
   }
   function int64_to_nativeint_exn(x){
    return int64_is_representable_as_nati(x)
            ? caml_int64_to_int32(x)
            : convert_failure
              (x, cst_int64$1, cst_nativeint$1, int64_to_string);
   }
   var
    min$1 = caml_int64_shift_right(min_int64, 1),
    max$1 = caml_int64_shift_right(max_int64, 1);
   function int64_is_representable_as_int6(x){
    var
     _l_ = caml_call2(Base_Import[230], min$1, x) <= 0 ? 1 : 0,
     _m_ = _l_ ? caml_call2(Base_Import[230], x, max$1) <= 0 ? 1 : 0 : _l_;
    return _m_;
   }
   function int64_fit_on_int63_exn(x){
    return int64_is_representable_as_int6(x)
            ? 0
            : convert_failure(x, cst_int64$2, cst_int63, int64_to_string);
   }
   var
    Base_Int_conversions =
      [0,
       int_to_int32,
       int_to_int32_exn,
       int_to_int32_trunc,
       int_to_int64,
       int_to_nativeint,
       int32_to_int,
       int32_to_int_exn,
       int32_to_int_trunc,
       int32_to_int64,
       int32_to_nativeint,
       int32_is_representable_as_int,
       int64_to_int,
       int64_to_int_exn,
       int64_to_int_trunc,
       int64_to_int32,
       int64_to_int32_exn,
       int64_to_int32_trunc,
       int64_to_nativeint,
       int64_to_nativeint_exn,
       int64_to_nativeint_trunc,
       int64_fit_on_int63_exn,
       int64_is_representable_as_int6,
       nativeint_to_int,
       nativeint_to_int_exn,
       nativeint_to_int_trunc,
       nativeint_to_int32,
       nativeint_to_int32_exn,
       nativeint_to_int32_trunc,
       nativeint_to_int64,
       num_bits_int,
       num_bits_int32,
       num_bits_int64,
       num_bits_nativeint];
   runtime.caml_register_global
    (33, Base_Int_conversions, "Base__Int_conversions");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Uchar0
//# unitInfo: Requires: Stdlib__Uchar
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Stdlib_Uchar = global_data.Stdlib__Uchar,
    succ = Stdlib_Uchar[5],
    pred = Stdlib_Uchar[6],
    is_valid = Stdlib_Uchar[7],
    is_char = Stdlib_Uchar[11],
    unsafe_to_char = Stdlib_Uchar[14],
    unsafe_of_int = Stdlib_Uchar[9],
    of_int = Stdlib_Uchar[8],
    to_int = Stdlib_Uchar[10],
    of_char = Stdlib_Uchar[12],
    compare = Stdlib_Uchar[16],
    equal = Stdlib_Uchar[15],
    min_value = Stdlib_Uchar[1],
    max_value = Stdlib_Uchar[2],
    byte_order_mark = Stdlib_Uchar[3],
    replacement_char = Stdlib_Uchar[4],
    utf_8_byte_length = Stdlib_Uchar[23],
    utf_16_byte_length = Stdlib_Uchar[24],
    utf_decode_is_valid = Stdlib_Uchar[18],
    utf_decode_uchar = Stdlib_Uchar[19],
    utf_decode_length = Stdlib_Uchar[20],
    utf_decode = Stdlib_Uchar[21],
    utf_decode_invalid = Stdlib_Uchar[22],
    Base_Uchar0 =
      [0,
       succ,
       pred,
       is_valid,
       is_char,
       unsafe_to_char,
       unsafe_of_int,
       of_int,
       to_int,
       of_char,
       compare,
       equal,
       min_value,
       max_value,
       byte_order_mark,
       replacement_char,
       utf_8_byte_length,
       utf_16_byte_length,
       utf_decode_is_valid,
       utf_decode_uchar,
       utf_decode_length,
       utf_decode,
       utf_decode_invalid];
   runtime.caml_register_global(1, Base_Uchar0, "Base__Uchar0");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__String0
//# unitInfo: Requires: Base__Char0, Base__Import0, Base__Int_conversions, Base__Sys0, Base__Uchar0, Stdlib, Stdlib__StringLabels
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$1 = "",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_get = runtime.caml_string_get;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    cst$0 = cst$1,
    cst = cst$1,
    Base_Import0 = global_data.Base__Import0,
    Base_Char0 = global_data.Base__Char0,
    Stdlib_StringLabels = global_data.Stdlib__StringLabels,
    Base_Int_conversions = global_data.Base__Int_conversions,
    Base_Uchar0 = global_data.Base__Uchar0,
    Stdlib = global_data.Stdlib,
    Base_Sys0 = global_data.Base__Sys0,
    String = [0],
    max_length = Base_Sys0[10],
    symbol = Base_Import0[112],
    capitalize = Stdlib_StringLabels[28],
    compare = Stdlib_StringLabels[10],
    escaped = Stdlib_StringLabels[25],
    lowercase = Stdlib_StringLabels[27],
    make = Stdlib_StringLabels[1],
    sub = Stdlib_StringLabels[16],
    uncapitalize = Stdlib_StringLabels[29],
    uppercase = Stdlib_StringLabels[26],
    is_valid_utf_8 = Stdlib_StringLabels[44],
    is_valid_utf_16le = Stdlib_StringLabels[48],
    is_valid_utf_16be = Stdlib_StringLabels[46],
    cst_index_out_of_bounds = "index out of bounds";
   function get_utf_8_uchar(t, byte_pos){
    return caml_call2(Stdlib_StringLabels[43], t, byte_pos);
   }
   function get_utf_16le_uchar(t, byte_pos){
    return caml_call2(Stdlib_StringLabels[47], t, byte_pos);
   }
   function get_utf_16be_uchar(t, byte_pos){
    return caml_call2(Stdlib_StringLabels[45], t, byte_pos);
   }
   function get_utf_32_uchar(get_int32, t, byte_pos){
    var
     len = caml_ml_string_length(t),
     _j_ = 0 <= byte_pos ? 1 : 0,
     _k_ = _j_ ? byte_pos < len ? 1 : 0 : _j_;
    if(! _k_)
     throw caml_maybe_attach_backtrace
            ([0, Stdlib[6], cst_index_out_of_bounds], 1);
    var bytes_read = caml_call2(Base_Import0[93], len, byte_pos);
    if(2 >= bytes_read - 1 >>> 0)
     return caml_call1(Base_Uchar0[22], bytes_read);
    var int32 = caml_call2(get_int32, t, byte_pos);
    if(! caml_call1(Base_Int_conversions[11], int32))
     return caml_call1(Base_Uchar0[22], 4);
    var int$0 = caml_call1(Base_Int_conversions[8], int32);
    if(! caml_call1(Base_Uchar0[3], int$0))
     return caml_call1(Base_Uchar0[22], 4);
    var _l_ = caml_call1(Base_Uchar0[6], int$0);
    return caml_call2(Base_Uchar0[21], 4, _l_);
   }
   function get_utf_32le_uchar(t, byte_pos){
    return get_utf_32_uchar(Stdlib_StringLabels[61], t, byte_pos);
   }
   function get_utf_32be_uchar(t, byte_pos){
    return get_utf_32_uchar(Stdlib_StringLabels[60], t, byte_pos);
   }
   function concat(opt, l){
    if(opt) var sth = opt[1], sep = sth; else var sep = cst$0;
    if(! l) return cst;
    if(l[2]) return caml_call2(Stdlib_StringLabels[7], sep, l);
    var x = l[1];
    return x;
   }
   function iter(t, f){
    var
     _h_ = caml_call2(Base_Import0[93], caml_ml_string_length(t), 1),
     _g_ = 0;
    if(_h_ >= 0){
     var i = _g_;
     for(;;){
      caml_call1(f, runtime.caml_string_unsafe_get(t, i));
      var _i_ = i + 1 | 0;
      if(_h_ === i) break;
      var i = _i_;
     }
    }
    return 0;
   }
   function back_up_at_newline(t, pos, eol){
    a:
    {
     if(0 < pos[1]){
      var _e_ = caml_string_get(t, caml_call2(Base_Import0[93], pos[1], 1));
      if(caml_call2(Base_Char0[12], _e_, 13)){var _f_ = 2; break a;}
     }
     var _f_ = 1;
    }
    pos[1] = caml_call2(Base_Import0[93], pos[1], _f_);
    eol[1] = caml_call2(Base_Import0[91], pos[1], 1);
    return;
   }
   function split_lines(t){
    var n = caml_ml_string_length(t);
    if(0 === n) return 0;
    var
     pos = [0, caml_call2(Base_Import0[93], n, 1)],
     eol = [0, n],
     ac = [0, 0],
     _a_ = caml_string_get(t, pos[1]);
    if(caml_call2(Base_Char0[12], _a_, 10)) back_up_at_newline(t, pos, eol);
    for(;;){
     if(0 > pos[1]){
      var _d_ = ac[1];
      return [0, caml_call3(sub, t, 0, eol[1]), _d_];
     }
     var _b_ = caml_string_get(t, pos[1]);
     if(caml_call2(Base_Char0[12], _b_, 10)){
      var start = caml_call2(Base_Import0[91], pos[1], 1), _c_ = ac[1];
      ac[1] =
       [0,
        caml_call3(sub, t, start, caml_call2(Base_Import0[93], eol[1], start)),
        _c_];
      back_up_at_newline(t, pos, eol);
     }
     else
      pos[1] += -1;
    }
   }
   var
    Base_String0 =
      [0,
       String,
       max_length,
       symbol,
       capitalize,
       compare,
       escaped,
       lowercase,
       make,
       sub,
       uncapitalize,
       uppercase,
       is_valid_utf_8,
       is_valid_utf_16le,
       is_valid_utf_16be,
       get_utf_8_uchar,
       get_utf_16le_uchar,
       get_utf_16be_uchar,
       get_utf_32le_uchar,
       get_utf_32be_uchar,
       concat,
       iter,
       split_lines];
   runtime.caml_register_global(10, Base_String0, "Base__String0");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Source_code_position0
//# unitInfo: Requires: Base__Comparator, Base__Hash, Base__Import, Base__Int0, Base__String0
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, cst$1 = ":";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = cst$1,
    cst$0 = cst$1,
    Base_Import = global_data.Base__Import,
    Base_Int0 = global_data.Base__Int0,
    Base_String0 = global_data.Base__String0,
    Base_Hash = global_data.Base__Hash,
    Base_Comparator = global_data.Base__Comparator,
    _a_ = [0, "pos_cnum"],
    _b_ = [0, "pos_bol"],
    _c_ = [0, "pos_lnum"],
    _d_ = [0, "pos_fname"];
   function compare_local(a_001, b_002){
    if(a_001 === b_002) return 0;
    var n = caml_call2(Base_Import[260], a_001[1], b_002[1]);
    if(0 !== n) return n;
    var n$0 = caml_call2(Base_Import[256], a_001[2], b_002[2]);
    if(0 !== n$0) return n$0;
    var n$1 = caml_call2(Base_Import[256], a_001[3], b_002[3]);
    return 0 === n$1 ? caml_call2(Base_Import[256], a_001[4], b_002[4]) : n$1;
   }
   function compare(a, b){return compare_local(a, b);}
   function hash_fold_t(hsv, arg){
    var
     hsv$0 = caml_call2(Base_Import[208], hsv, arg[1]),
     hsv$1 = caml_call2(Base_Import[206], hsv$0, arg[2]),
     hsv$2 = caml_call2(Base_Import[206], hsv$1, arg[3]);
    return caml_call2(Base_Import[206], hsv$2, arg[4]);
   }
   function hash(arg){
    var hsv = caml_call2(Base_Hash[11], 0, 0), _h_ = hash_fold_t(hsv, arg);
    return caml_call1(Base_Hash[9], _h_);
   }
   function sexp_of_t(param){
    var
     pos_cnum_010 = param[4],
     pos_bol_008 = param[3],
     pos_lnum_006 = param[2],
     pos_fname_004 = param[1],
     arg_011 = caml_call1(Base_Import[139], pos_cnum_010),
     bnds_003 = [0, [1, [0, _a_, [0, arg_011, 0]]], 0],
     arg_009 = caml_call1(Base_Import[139], pos_bol_008),
     bnds_003$0 = [0, [1, [0, _b_, [0, arg_009, 0]]], bnds_003],
     arg_007 = caml_call1(Base_Import[139], pos_lnum_006),
     bnds_003$1 = [0, [1, [0, _c_, [0, arg_007, 0]]], bnds_003$0],
     arg_005 = caml_call1(Base_Import[136], pos_fname_004),
     bnds_003$2 = [0, [1, [0, _d_, [0, arg_005, 0]]], bnds_003$1];
    return [1, bnds_003$2];
   }
   var
    T = [0, compare_local, compare, hash_fold_t, hash, sexp_of_t],
    compare_local$0 = T[1],
    compare$0 = T[2],
    hash_fold_t$0 = T[3],
    hash$0 = T[4],
    include = caml_call1(Base_Comparator[7], [0, T[2], T[5]]),
    comparator = include[1];
   function make_location_string(pos_fname, pos_lnum, pos_cnum, pos_bol){
    var
     _e_ = caml_call2(Base_Import[93], pos_cnum, pos_bol),
     _f_ = [0, cst, [0, caml_call1(Base_Int0[1], _e_), 0]],
     _g_ =
       [0,
        pos_fname,
        [0, cst$0, [0, caml_call1(Base_Int0[1], pos_lnum), _f_]]];
    return caml_call2(Base_String0[20], 0, _g_);
   }
   function to_string(param){
    var
     pos_cnum = param[4],
     pos_bol = param[3],
     pos_lnum = param[2],
     pos_fname = param[1];
    return make_location_string(pos_fname, pos_lnum, pos_cnum, pos_bol);
   }
   function sexp_of_t$0(t){return [0, to_string(t)];}
   var
    Base_Source_code_position0 =
      [0,
       T,
       compare_local$0,
       compare$0,
       hash_fold_t$0,
       hash$0,
       comparator,
       make_location_string,
       to_string,
       sexp_of_t$0];
   runtime.caml_register_global
    (11, Base_Source_code_position0, "Base__Source_code_position0");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Invariant_intf
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Base_Invariant_intf = [0];
   runtime.caml_register_global
    (0, Base_Invariant_intf, "Base__Invariant_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__List1
//# unitInfo: Requires: Base__List0
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_List0 = global_data.Base__List0,
    hd_exn = Base_List0[1],
    rev_append = Base_List0[2],
    tl_exn = Base_List0[3],
    unzip = Base_List0[4],
    length = Base_List0[5],
    exists = Base_List0[6],
    exists2_ok = Base_List0[7],
    fold = Base_List0[8],
    fold2_ok = Base_List0[9],
    for_all = Base_List0[10],
    for_all2_ok = Base_List0[11],
    iter = Base_List0[12],
    iter2_ok = Base_List0[13],
    nontail_map = Base_List0[14],
    nontail_mapi = Base_List0[15],
    partition = Base_List0[16],
    rev_map = Base_List0[17],
    rev_map2_ok = Base_List0[18],
    rev = Base_List0[19],
    fold_right = Base_List0[20],
    fold_right2_ok = Base_List0[21];
   function is_empty(param){return param ? 0 : 1;}
   function partition_map(t, f){
    var t$0 = t, fst = 0, snd = 0;
    for(;;){
     if(! t$0){
      var _a_ = caml_call1(rev, snd);
      return [0, caml_call1(rev, fst), _a_];
     }
     var t$1 = t$0[2], x = t$0[1], match = caml_call1(f, x);
     if(0 === match[0])
      var y = match[1], fst$0 = [0, y, fst], t$0 = t$1, fst = fst$0;
     else
      var y$0 = match[1], snd$0 = [0, y$0, snd], t$0 = t$1, snd = snd$0;
    }
   }
   var
    Base_List1 =
      [0,
       hd_exn,
       rev_append,
       tl_exn,
       unzip,
       length,
       exists,
       exists2_ok,
       fold,
       fold2_ok,
       for_all,
       for_all2_ok,
       iter,
       iter2_ok,
       nontail_map,
       nontail_mapi,
       partition,
       rev_map,
       rev_map2_ok,
       rev,
       fold_right,
       fold_right2_ok,
       is_empty,
       partition_map];
   runtime.caml_register_global(1, Base_List1, "Base__List1");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Result
//# unitInfo: Requires: Base__Hash, Base__Import, Base__List1, Base__Monad, Base__Printf, Sexplib0__Sexp_conv_error
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Error$0 = "Error",
    cst_Ok$0 = "Ok",
    cst_error = "error",
    cst_ok = "ok",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_string_notequal = runtime.caml_string_notequal,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    error_source_005 = "result.ml.t",
    Base_List1 = global_data.Base__List1,
    Base_Import = global_data.Base__Import,
    Base_Printf = global_data.Base__Printf,
    Base_Hash = global_data.Base__Hash,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Base_Monad = global_data.Base__Monad,
    _c_ = [0, 0],
    cst_Error = cst_Error$0,
    cst_Ok = cst_Ok$0,
    _a_ = [0, cst_Ok$0],
    _b_ = [0, cst_Error$0];
   function t_of_sexp(of_a_001, of_b_002, sexp_007){
    a:
    {
     if(0 === sexp_007[0]){
      var _f_ = sexp_007[1];
      b:
      if(caml_string_notequal(_f_, cst_Error$0)){
       if(caml_string_notequal(_f_, cst_Ok$0)){
        if(! caml_string_notequal(_f_, cst_error)) break b;
        if(caml_string_notequal(_f_, cst_ok)) break a;
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[9], error_source_005, sexp_007);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[9], error_source_005, sexp_007);
     }
     var _g_ = sexp_007[1];
     if(! _g_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_005, sexp_007);
     var _h_ = _g_[1];
     if(0 !== _h_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_005, sexp_007);
     var tag_008 = _h_[1];
     b:
     if(caml_string_notequal(tag_008, cst_Error$0)){
      if(caml_string_notequal(tag_008, cst_Ok$0)){
       if(! caml_string_notequal(tag_008, cst_error)) break b;
       if(caml_string_notequal(tag_008, cst_ok)) break a;
      }
      var sexp_args_009 = _g_[2];
      if(sexp_args_009 && ! sexp_args_009[2]){
       var
        arg0_010 = sexp_args_009[1],
        res0_011 = caml_call1(of_a_001, arg0_010);
       return [0, res0_011];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[8],
               error_source_005,
               tag_008,
               sexp_007);
     }
     var sexp_args_014 = _g_[2];
     if(sexp_args_014 && ! sexp_args_014[2]){
      var
       arg0_015 = sexp_args_014[1],
       res0_016 = caml_call1(of_b_002, arg0_015);
      return [1, res0_016];
     }
     return caml_call3
             (Sexplib0_Sexp_conv_error[8],
              error_source_005,
              tag_008,
              sexp_007);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_005, sexp_007);
   }
   function sexp_of_t(of_a_019, of_b_020, param){
    if(0 === param[0]){
     var arg0_021 = param[1], res0_022 = caml_call1(of_a_019, arg0_021);
     return [1, [0, _a_, [0, res0_022, 0]]];
    }
    var arg0_023 = param[1], res0_024 = caml_call1(of_b_020, arg0_023);
    return [1, [0, _b_, [0, res0_024, 0]]];
   }
   function t_sexp_grammar(a_sexp_grammar, b_sexp_grammar){
    return [3,
            [0,
             2,
             [0,
              [1, [0, cst_Ok, [0, [0, a_sexp_grammar, 0]]]],
              [0, [1, [0, cst_Error, [0, [0, b_sexp_grammar, 0]]]], 0]]]];
   }
   function compare_local(cmp_a, cmp_b, a_033, b_034){
    if(a_033 === b_034) return 0;
    if(0 === a_033[0]){
     var a_035 = a_033[1];
     if(0 !== b_034[0]) return -1;
     var b_036 = b_034[1];
     return caml_call2(cmp_a, a_035, b_036);
    }
    var a_037 = a_033[1];
    if(0 === b_034[0]) return 1;
    var b_038 = b_034[1];
    return caml_call2(cmp_b, a_037, b_038);
   }
   function compare(cmp_a, cmp_b, a_027, b_028){
    if(a_027 === b_028) return 0;
    if(0 === a_027[0]){
     var a_029 = a_027[1];
     if(0 !== b_028[0]) return -1;
     var b_030 = b_028[1];
     return caml_call2(cmp_a, a_029, b_030);
    }
    var a_031 = a_027[1];
    if(0 === b_028[0]) return 1;
    var b_032 = b_028[1];
    return caml_call2(cmp_b, a_031, b_032);
   }
   function equal_local(cmp_a, cmp_b, a_045, b_046){
    if(a_045 === b_046) return 1;
    if(0 === a_045[0]){
     var a_047 = a_045[1];
     if(0 !== b_046[0]) return 0;
     var b_048 = b_046[1];
     return caml_call2(cmp_a, a_047, b_048);
    }
    var a_049 = a_045[1];
    if(0 === b_046[0]) return 0;
    var b_050 = b_046[1];
    return caml_call2(cmp_b, a_049, b_050);
   }
   function equal(cmp_a, cmp_b, a_039, b_040){
    if(a_039 === b_040) return 1;
    if(0 === a_039[0]){
     var a_041 = a_039[1];
     if(0 !== b_040[0]) return 0;
     var b_042 = b_040[1];
     return caml_call2(cmp_a, a_041, b_042);
    }
    var a_043 = a_039[1];
    if(0 === b_040[0]) return 0;
    var b_044 = b_040[1];
    return caml_call2(cmp_b, a_043, b_044);
   }
   function hash_fold_t(hash_fold_a, hash_fold_b, hsv, arg){
    if(0 === arg[0]){
     var a0 = arg[1], hsv$0 = caml_call2(Base_Hash[3], hsv, 0);
     return caml_call2(hash_fold_a, hsv$0, a0);
    }
    var a0$0 = arg[1], hsv$1 = caml_call2(Base_Hash[3], hsv, 1);
    return caml_call2(hash_fold_b, hsv$1, a0$0);
   }
   var globalize = Base_Import[295];
   function bind(x, f){
    if(0 !== x[0]) return x;
    var x$0 = x[1];
    return caml_call1(f, x$0);
   }
   var
    map =
      [0,
       -198771759,
       function(x, f){
        if(0 !== x[0]) return x;
        var x$0 = x[1];
        return [0, caml_call1(f, x$0)];
       }];
   function return$0(x){return [0, x];}
   var
    include = caml_call1(Base_Monad[6], [0, bind, map, return$0]),
    symbol_bind = include[1],
    symbol_map = include[2],
    Let_syntax = include[3],
    Monad_infix = include[4],
    bind$0 = include[5],
    return$1 = include[6],
    map$0 = include[7],
    join = include[8],
    ignore_m = include[9],
    all = include[10],
    all_unit = include[11];
   function invariant(check_ok, check_error, t){
    if(0 === t[0]){var ok = t[1]; return caml_call1(check_ok, ok);}
    var error = t[1];
    return caml_call1(check_error, error);
   }
   function fail(x){return [1, x];}
   function failf(format){return caml_call2(Base_Printf[4], fail, format);}
   function map_error(t, f){
    if(0 === t[0]) return t;
    var x = t[1];
    return [1, caml_call1(f, x)];
   }
   function bind$1(x, f){
    if(0 === x[0]) return x;
    var e = x[1];
    return caml_call1(f, e);
   }
   var map$1 = [0, -198771759, map_error];
   function return$2(e){return [1, e];}
   var Error = caml_call1(Base_Monad[6], [0, bind$1, map$1, return$2]);
   function is_ok(param){return 0 === param[0] ? 1 : 0;}
   function is_error(param){return 0 === param[0] ? 0 : 1;}
   function ok(param){
    if(0 !== param[0]) return 0;
    var x = param[1];
    return [0, x];
   }
   function error(param){
    if(0 === param[0]) return 0;
    var x = param[1];
    return [0, x];
   }
   function of_option(opt, error){
    if(! opt) return [1, error];
    var x = opt[1];
    return [0, x];
   }
   function iter(v, f){
    if(0 !== v[0]) return 0;
    var x = v[1];
    return caml_call1(f, x);
   }
   function iter_error(v, f){
    if(0 === v[0]) return 0;
    var x = v[1];
    return caml_call1(f, x);
   }
   function to_either(param){
    if(0 === param[0]){var x = param[1]; return [0, x];}
    var x$0 = param[1];
    return [1, x$0];
   }
   function of_either(param){
    if(0 === param[0]){var x = param[1]; return [0, x];}
    var x$0 = param[1];
    return [1, x$0];
   }
   function ok_if_true(bool, error){return bool ? _c_ : [1, error];}
   function try_with(f){
    try{var _e_ = [0, caml_call1(f, 0)]; return _e_;}
    catch(exn$0){var exn = caml_wrap_exception(exn$0); return [1, exn];}
   }
   function ok_exn(param){
    if(0 === param[0]){var x = param[1]; return x;}
    var exn = param[1];
    throw caml_maybe_attach_backtrace(exn, 1);
   }
   function ok_or_failwith(param){
    if(0 === param[0]){var x = param[1]; return x;}
    var str = param[1];
    return caml_call1(Base_Import[124], str);
   }
   function combine(t1, t2, ok, err){
    if(0 === t1[0]){
     var ok1 = t1[1];
     if(0 === t2[0]){var ok2 = t2[1]; return [0, caml_call2(ok, ok1, ok2)];}
     var e = t2[1];
    }
    else{
     var err1 = t1[1];
     if(0 !== t2[0]){
      var err2 = t2[1];
      return [1, caml_call2(err, err1, err2)];
     }
     var e = err1;
    }
    return [1, e];
   }
   function combine_errors(l){
    var
     match = caml_call2(Base_List1[23], l, to_either),
     errs = match[2],
     ok = match[1];
    return errs ? [1, errs] : [0, ok];
   }
   function combine_errors_unit(l){
    function _d_(param){return 0;}
    return caml_call2(map$0, combine_errors(l), _d_);
   }
   var
    Base_Result =
      [0,
       t_of_sexp,
       sexp_of_t,
       t_sexp_grammar,
       compare,
       compare_local,
       equal,
       equal_local,
       hash_fold_t,
       globalize,
       symbol_bind,
       symbol_map,
       Let_syntax,
       Monad_infix,
       bind$0,
       return$1,
       join,
       ignore_m,
       all,
       all_unit,
       Error,
       invariant,
       fail,
       failf,
       is_ok,
       is_error,
       ok,
       ok_exn,
       ok_or_failwith,
       error,
       of_option,
       iter,
       iter_error,
       map$0,
       map_error,
       combine,
       combine_errors,
       combine_errors_unit,
       to_either,
       of_either,
       ok_if_true,
       try_with,
       [0, is_ok, is_error]];
   runtime.caml_register_global(20, Base_Result, "Base__Result");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Container_intf
(function(globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Continue_or_stop = [0],
    Export = [0, Continue_or_stop],
    Continue_or_stop$0 = Export[1],
    Base_Container_intf = [0, Export, Continue_or_stop$0];
   runtime.caml_register_global
    (0, Base_Container_intf, "Base__Container_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Container
//# unitInfo: Requires: Base__Array0, Base__Container_intf, Base__Import, Base__List0, Base__With_return
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_Array0 = global_data.Base__Array0,
    Base_List0 = global_data.Base__List0,
    Base_Import = global_data.Base__Import,
    Base_With_return = global_data.Base__With_return,
    with_return = Base_With_return[1];
   function iter(fold, t, f){
    return caml_call3
            (fold, t, 0, function(param, a){return caml_call1(f, a);});
   }
   function count(fold, t, f){
    return caml_call3
            (fold,
             t,
             0,
             function(n, a){
              return caml_call1(f, a) ? caml_call2(Base_Import[91], n, 1) : n;
             });
   }
   function sum(fold, M, t, f){
    function _u_(n, a){
     var _v_ = caml_call1(f, a);
     return caml_call2(M[2], n, _v_);
    }
    return caml_call3(fold, t, M[1], _u_);
   }
   function fold_result(fold, init, f, t){
    return caml_call1
            (with_return,
             function(param){
              return [0,
                      caml_call3
                       (fold,
                        t,
                        init,
                        function(acc, item){
                         var e = caml_call2(f, acc, item);
                         if(0 !== e[0]) return caml_call1(param, e);
                         var x = e[1];
                         return x;
                        })];
             });
   }
   function fold_until(fold, init, f, finish, t){
    return caml_call1
            (with_return,
             function(param){
              return caml_call1
                      (finish,
                       caml_call3
                        (fold,
                         t,
                         init,
                         function(acc, item){
                          var match = caml_call2(f, acc, item);
                          if(0 === match[0]){var x = match[1]; return x;}
                          var x$0 = match[1];
                          return caml_call1(param, x$0);
                         }));
             });
   }
   function min_elt(fold, t, compare){
    return caml_call3
            (fold,
             t,
             0,
             function(acc, elt){
              if(! acc) return [0, elt];
              var min = acc[1];
              return 0 < caml_call2(compare, min, elt) ? [0, elt] : acc;
             });
   }
   function max_elt(fold, t, compare){
    return caml_call3
            (fold,
             t,
             0,
             function(acc, elt){
              if(! acc) return [0, elt];
              var max = acc[1];
              return 0 <= caml_call2(compare, max, elt) ? acc : [0, elt];
             });
   }
   function length(fold, c){
    return caml_call3
            (fold,
             c,
             0,
             function(acc, param){return caml_call2(Base_Import[91], acc, 1);});
   }
   function is_empty(iter, c){
    return caml_call1
            (with_return,
             function(r){
              caml_call2(iter, c, function(param){return caml_call1(r, 0);});
              return 1;
             });
   }
   function mem(iter, c, x, equal){
    return caml_call1
            (with_return,
             function(r){
              caml_call2
               (iter,
                c,
                function(y){
                 var _t_ = caml_call2(equal, x, y);
                 return _t_ ? caml_call1(r, 1) : _t_;
                });
              return 0;
             });
   }
   function exists(iter, c, f){
    return caml_call1
            (with_return,
             function(r){
              caml_call2
               (iter,
                c,
                function(x){
                 var _s_ = caml_call1(f, x);
                 return _s_ ? caml_call1(r, 1) : _s_;
                });
              return 0;
             });
   }
   function for_all(iter, c, f){
    return caml_call1
            (with_return,
             function(r){
              caml_call2
               (iter,
                c,
                function(x){
                 var _r_ = 1 - caml_call1(f, x);
                 return _r_ ? caml_call1(r, 0) : _r_;
                });
              return 1;
             });
   }
   function find_map(iter, t, f){
    return caml_call1
            (with_return,
             function(r){
              caml_call2
               (iter,
                t,
                function(x){
                 var res = caml_call1(f, x);
                 return res ? caml_call1(r, res) : 0;
                });
              return 0;
             });
   }
   function find(iter, c, f){
    return caml_call1
            (with_return,
             function(r){
              caml_call2
               (iter,
                c,
                function(x){
                 var _q_ = caml_call1(f, x);
                 return _q_ ? caml_call1(r, [0, x]) : _q_;
                });
              return 0;
             });
   }
   function to_list(fold, c){
    var _p_ = caml_call3(fold, c, 0, function(acc, x){return [0, x, acc];});
    return caml_call1(Base_List0[19], _p_);
   }
   function to_array(length, iter, c){
    var array = [0, [0]], i = [0, 0];
    caml_call2
     (iter,
      c,
      function(x){
       if(0 === i[1]){
        var _n_ = caml_call1(length, c);
        array[1] = caml_call2(Base_Array0[4], _n_, x);
       }
       var _o_ = i[1];
       runtime.caml_check_bound(array[1], _o_)[1 + _o_] = x;
       i[1]++;
       return 0;
      });
    return array[1];
   }
   function Make_gen(T){
    var fold = T[1], match = T[2];
    if(typeof match === "number")
     var iter$0 = function(t, f){return iter(fold, t, f);};
    else
     var iter$1 = match[2], iter$0 = iter$1;
    var match$0 = T[3];
    if(typeof match$0 === "number")
     var length$0 = function(t){return length(fold, t);};
    else
     var length$1 = match$0[2], length$0 = length$1;
    function is_empty$0(t){return is_empty(iter$0, t);}
    function mem$0(t, x, equal){return mem(iter$0, t, x, equal);}
    function sum$0(m, t){return function(_m_){return sum(fold, m, t, _m_);};}
    function count$0(t, f){return count(fold, t, f);}
    function exists$0(t, f){return exists(iter$0, t, f);}
    function for_all$0(t, f){return for_all(iter$0, t, f);}
    function find_map$0(t, f){return find_map(iter$0, t, f);}
    function find$0(t, f){return find(iter$0, t, f);}
    function to_list$0(t){return to_list(fold, t);}
    function to_array$0(t){return to_array(length$0, iter$0, t);}
    function min_elt$0(t, compare){return min_elt(fold, t, compare);}
    function max_elt$0(t, compare){return max_elt(fold, t, compare);}
    function fold_result$0(t, init, f){return fold_result(fold, init, f, t);}
    function fold_until$0(t, init, f, finish){
     return fold_until(fold, init, f, finish, t);
    }
    return [0,
            length$0,
            is_empty$0,
            mem$0,
            iter$0,
            fold,
            fold_result$0,
            fold_until$0,
            exists$0,
            for_all$0,
            count$0,
            sum$0,
            find$0,
            find_map$0,
            to_list$0,
            to_array$0,
            min_elt$0,
            max_elt$0];
   }
   function Make_gen_with_creators(T){
    var
     include = Make_gen([0, T[1], T[2], T[3]]),
     length = include[1],
     is_empty = include[2],
     mem = include[3],
     iter = include[4],
     fold = include[5],
     fold_result = include[6],
     fold_until = include[7],
     exists = include[8],
     for_all = include[9],
     count = include[10],
     sum = include[11],
     find = include[12],
     find_map = include[13],
     to_list = include[14],
     to_array = include[15],
     min_elt = include[16],
     max_elt = include[17],
     of_list = T[4],
     of_array = T[5],
     concat = T[6],
     concat_of_array = T[7];
    function append(a, b){
     return caml_call1(concat, caml_call1(concat_of_array, [0, a, b]));
    }
    function concat_map(t, f){
     var _l_ = caml_call1(to_array, t);
     return caml_call1
             (concat,
              caml_call1(concat_of_array, caml_call2(Base_Array0[21], _l_, f)));
    }
    function filter_map(t, f){
     return concat_map
             (t,
              function(x){
               var match = caml_call1(f, x);
               if(! match) return caml_call1(of_array, [0]);
               var y = match[1];
               return caml_call1(of_array, [0, y]);
              });
    }
    function map(t, f){
     return filter_map(t, function(x){return [0, caml_call1(f, x)];});
    }
    function filter(t, f){
     return filter_map(t, function(x){return caml_call1(f, x) ? [0, x] : 0;});
    }
    function partition_map(t, f){
     var
      _f_ = caml_call1(to_array, t),
      array = caml_call2(Base_Array0[21], _f_, f),
      _g_ = 0;
     function _h_(either, acc){
      if(0 !== either[0]) return acc;
      var x = either[1];
      return [0, x, acc];
     }
     var xs = caml_call3(Base_Array0[18], array, _h_, _g_), _i_ = 0;
     function _j_(either, acc){
      if(0 === either[0]) return acc;
      var x = either[1];
      return [0, x, acc];
     }
     var
      ys = caml_call3(Base_Array0[18], array, _j_, _i_),
      _k_ = caml_call1(of_list, ys);
     return [0, caml_call1(of_list, xs), _k_];
    }
    function partition_tf(t, f){
     return partition_map
             (t, function(x){return caml_call1(f, x) ? [0, x] : [1, x];});
    }
    return [0,
            length,
            is_empty,
            mem,
            iter,
            fold,
            fold_result,
            fold_until,
            exists,
            for_all,
            count,
            sum,
            find,
            find_map,
            to_list,
            to_array,
            min_elt,
            max_elt,
            of_list,
            of_array,
            append,
            concat,
            map,
            filter,
            filter_map,
            concat_map,
            partition_tf,
            partition_map];
   }
   function _a_(T){
    var
     fold = T[2],
     iter = T[3],
     length = T[4],
     of_list = T[5],
     of_array = T[6],
     concat = T[7],
     concat_of_array = Base_Array0[16],
     include =
       Make_gen_with_creators
        ([0, fold, iter, length, of_list, of_array, concat, concat_of_array]),
     length$0 = include[1],
     is_empty = include[2],
     iter$0 = include[4],
     fold$0 = include[5],
     fold_result = include[6],
     fold_until = include[7],
     exists = include[8],
     for_all = include[9],
     count = include[10],
     sum = include[11],
     find = include[12],
     find_map = include[13],
     to_list = include[14],
     to_array = include[15],
     min_elt = include[16],
     max_elt = include[17],
     of_list$0 = include[18],
     of_array$0 = include[19],
     append = include[20],
     concat$0 = include[21],
     map = include[22],
     filter = include[23],
     filter_map = include[24],
     concat_map = include[25],
     partition_tf = include[26],
     partition_map = include[27],
     _e_ = include[3];
    function mem(t, x){return caml_call3(_e_, t, x, T[1][1]);}
    return [0,
            mem,
            length$0,
            is_empty,
            iter$0,
            fold$0,
            fold_result,
            fold_until,
            exists,
            for_all,
            count,
            sum,
            find,
            find_map,
            to_list,
            to_array,
            min_elt,
            max_elt,
            of_list$0,
            of_array$0,
            append,
            concat$0,
            map,
            filter,
            filter_map,
            concat_map,
            partition_tf,
            partition_map];
   }
   function _b_(T){
    var
     fold = T[1],
     iter = T[2],
     length = T[3],
     of_list = T[4],
     of_array = T[5],
     concat = T[6],
     include =
       Make_gen_with_creators
        ([0, fold, iter, length, of_list, of_array, concat, of_array]),
     length$0 = include[1],
     is_empty = include[2],
     mem = include[3],
     iter$0 = include[4],
     fold$0 = include[5],
     fold_result = include[6],
     fold_until = include[7],
     exists = include[8],
     for_all = include[9],
     count = include[10],
     sum = include[11],
     find = include[12],
     find_map = include[13],
     to_list = include[14],
     to_array = include[15],
     min_elt = include[16],
     max_elt = include[17],
     of_list$0 = include[18],
     of_array$0 = include[19],
     append = include[20],
     concat$0 = include[21],
     map = include[22],
     filter = include[23],
     filter_map = include[24],
     concat_map = include[25],
     partition_tf = include[26],
     partition_map = include[27];
    return [0,
            mem,
            length$0,
            is_empty,
            iter$0,
            fold$0,
            fold_result,
            fold_until,
            exists,
            for_all,
            count,
            sum,
            find,
            find_map,
            to_list,
            to_array,
            min_elt,
            max_elt,
            of_list$0,
            of_array$0,
            append,
            concat$0,
            map,
            filter,
            filter_map,
            concat_map,
            partition_tf,
            partition_map];
   }
   function _c_(T){
    var
     fold = T[2],
     iter = T[3],
     length = T[4],
     include = Make_gen([0, fold, iter, length]),
     length$0 = include[1],
     is_empty = include[2],
     iter$0 = include[4],
     fold$0 = include[5],
     fold_result = include[6],
     fold_until = include[7],
     exists = include[8],
     for_all = include[9],
     count = include[10],
     sum = include[11],
     find = include[12],
     find_map = include[13],
     to_list = include[14],
     to_array = include[15],
     min_elt = include[16],
     max_elt = include[17],
     _d_ = include[3];
    function mem(t, x){return caml_call3(_d_, t, x, T[1][1]);}
    return [0,
            mem,
            length$0,
            is_empty,
            iter$0,
            fold$0,
            fold_result,
            fold_until,
            exists,
            for_all,
            count,
            sum,
            find,
            find_map,
            to_list,
            to_array,
            min_elt,
            max_elt];
   }
   var
    Base_Container =
      [0,
       iter,
       count,
       min_elt,
       max_elt,
       length,
       to_list,
       sum,
       fold_result,
       fold_until,
       is_empty,
       mem,
       exists,
       for_all,
       find,
       find_map,
       to_array,
       function(T){
        var
         fold = T[1],
         iter = T[2],
         length = T[3],
         include = Make_gen([0, fold, iter, length]),
         length$0 = include[1],
         is_empty = include[2],
         mem = include[3],
         iter$0 = include[4],
         fold$0 = include[5],
         fold_result = include[6],
         fold_until = include[7],
         exists = include[8],
         for_all = include[9],
         count = include[10],
         sum = include[11],
         find = include[12],
         find_map = include[13],
         to_list = include[14],
         to_array = include[15],
         min_elt = include[16],
         max_elt = include[17];
        return [0,
                mem,
                length$0,
                is_empty,
                iter$0,
                fold$0,
                fold_result,
                fold_until,
                exists,
                for_all,
                count,
                sum,
                find,
                find_map,
                to_list,
                to_array,
                min_elt,
                max_elt];
       },
       _c_,
       Make_gen,
       _b_,
       _a_,
       Make_gen_with_creators];
   runtime.caml_register_global(4, Base_Container, "Base__Container");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Indexed_container_intf
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Base_Indexed_container_intf = [0];
   runtime.caml_register_global
    (0, Base_Indexed_container_intf, "Base__Indexed_container_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Indexed_container
//# unitInfo: Requires: Base__Array0, Base__Container, Base__Import, Base__Indexed_container_intf, Base__With_return
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_Array0 = global_data.Base__Array0,
    Base_Container = global_data.Base__Container,
    Base_Import = global_data.Base__Import,
    Base_With_return = global_data.Base__With_return,
    with_return = Base_With_return[1];
   function iteri(fold, t, f){
    caml_call3
     (fold,
      t,
      0,
      function(i, x){
       caml_call2(f, i, x);
       return caml_call2(Base_Import[91], i, 1);
      });
    return 0;
   }
   function foldi(fold, t, init, f){
    var i = [0, 0];
    return caml_call3
            (fold,
             t,
             init,
             function(acc, v){
              var acc$0 = caml_call3(f, i[1], acc, v);
              i[1] = caml_call2(Base_Import[91], i[1], 1);
              return acc$0;
             });
   }
   function counti(foldi, t, f){
    return caml_call3
            (foldi,
             t,
             0,
             function(i, n, a){
              return caml_call2(f, i, a)
                      ? caml_call2(Base_Import[91], n, 1)
                      : n;
             });
   }
   function existsi(iteri, c, f){
    return caml_call1
            (with_return,
             function(r){
              caml_call2
               (iteri,
                c,
                function(i, x){
                 var _k_ = caml_call2(f, i, x);
                 return _k_ ? caml_call1(r, 1) : _k_;
                });
              return 0;
             });
   }
   function for_alli(iteri, c, f){
    return caml_call1
            (with_return,
             function(r){
              caml_call2
               (iteri,
                c,
                function(i, x){
                 var _j_ = 1 - caml_call2(f, i, x);
                 return _j_ ? caml_call1(r, 0) : _j_;
                });
              return 1;
             });
   }
   function find_mapi(iteri, t, f){
    return caml_call1
            (with_return,
             function(r){
              caml_call2
               (iteri,
                t,
                function(i, x){
                 var res = caml_call2(f, i, x);
                 return res ? caml_call1(r, res) : 0;
                });
              return 0;
             });
   }
   function findi(iteri, c, f){
    return caml_call1
            (with_return,
             function(r){
              caml_call2
               (iteri,
                c,
                function(i, x){
                 var _i_ = caml_call2(f, i, x);
                 return _i_ ? caml_call1(r, [0, [0, i, x]]) : _i_;
                });
              return 0;
             });
   }
   function Make_gen_with_container(T, _h_){
    var
     length = _h_[1],
     is_empty = _h_[2],
     mem = _h_[3],
     iter = _h_[4],
     fold = _h_[5],
     fold_result = _h_[6],
     fold_until = _h_[7],
     exists = _h_[8],
     for_all = _h_[9],
     count = _h_[10],
     sum = _h_[11],
     find = _h_[12],
     find_map = _h_[13],
     to_list = _h_[14],
     to_array = _h_[15],
     min_elt = _h_[16],
     max_elt = _h_[17],
     match = T[4];
    if(typeof match === "number")
     var iteri$0 = function(t, f){return iteri(fold, t, f);};
    else
     var iteri$1 = match[2], iteri$0 = iteri$1;
    var match$0 = T[5];
    if(typeof match$0 === "number")
     var foldi$0 = function(t, init, f){return foldi(fold, t, init, f);};
    else
     var foldi$1 = match$0[2], foldi$0 = foldi$1;
    function counti$0(t, f){return counti(foldi$0, t, f);}
    function existsi$0(t, f){return existsi(iteri$0, t, f);}
    function for_alli$0(t, f){return for_alli(iteri$0, t, f);}
    function find_mapi$0(t, f){return find_mapi(iteri$0, t, f);}
    function findi$0(t, f){return findi(iteri$0, t, f);}
    return [0,
            length,
            is_empty,
            mem,
            iter,
            fold,
            fold_result,
            fold_until,
            exists,
            for_all,
            count,
            sum,
            find,
            find_map,
            to_list,
            to_array,
            min_elt,
            max_elt,
            foldi$0,
            iteri$0,
            existsi$0,
            for_alli$0,
            counti$0,
            findi$0,
            find_mapi$0];
   }
   function Make_gen(T){
    var
     C = caml_call1(Base_Container[19], [0, T[1], T[2], T[3]]),
     include = Make_gen_with_container(T, C),
     length = include[1],
     is_empty = include[2],
     mem = include[3],
     iter = include[4],
     fold = include[5],
     fold_result = include[6],
     fold_until = include[7],
     exists = include[8],
     for_all = include[9],
     count = include[10],
     sum = include[11],
     find = include[12],
     find_map = include[13],
     to_list = include[14],
     to_array = include[15],
     min_elt = include[16],
     max_elt = include[17],
     foldi = include[18],
     iteri = include[19],
     existsi = include[20],
     for_alli = include[21],
     counti = include[22],
     findi = include[23],
     find_mapi = include[24];
    return [0,
            length,
            is_empty,
            mem,
            iter,
            fold,
            fold_result,
            fold_until,
            exists,
            for_all,
            count,
            sum,
            find,
            find_map,
            to_list,
            to_array,
            min_elt,
            max_elt,
            foldi,
            iteri,
            existsi,
            for_alli,
            counti,
            findi,
            find_mapi];
   }
   function Make_gen_with_creators(T){
    var
     C =
       caml_call1
        (Base_Container[22], [0, T[5], T[6], T[7], T[2], T[3], T[4], T[1]]),
     of_list = C[18],
     of_array = C[19],
     append = C[20],
     concat = C[21],
     map = C[22],
     filter = C[23],
     filter_map = C[24],
     concat_map = C[25],
     partition_tf = C[26],
     partition_map = C[27],
     include =
       Make_gen_with_container
        ([0, T[5], T[6], T[7], T[8], T[9]],
         [0,
          C[1],
          C[2],
          C[3],
          C[4],
          C[5],
          C[6],
          C[7],
          C[8],
          C[9],
          C[10],
          C[11],
          C[12],
          C[13],
          C[14],
          C[15],
          C[16],
          C[17]]),
     length = include[1],
     is_empty = include[2],
     mem = include[3],
     iter = include[4],
     fold = include[5],
     fold_result = include[6],
     fold_until = include[7],
     exists = include[8],
     for_all = include[9],
     count = include[10],
     sum = include[11],
     find = include[12],
     find_map = include[13],
     to_list = include[14],
     to_array = include[15],
     min_elt = include[16],
     max_elt = include[17],
     foldi = include[18],
     iteri = include[19],
     existsi = include[20],
     for_alli = include[21],
     counti = include[22],
     findi = include[23],
     find_mapi = include[24];
    function derived_init(n, f){
     return caml_call1(of_array, caml_call2(Base_Array0[12], n, f));
    }
    var match = T[10];
    if(typeof match === "number")
     var derived_init$0 = derived_init;
    else
     var init = match[2], derived_init$0 = init;
    function derived_concat_mapi(t, f){
     var
      _f_ = caml_call1(to_array, t),
      _g_ = caml_call2(Base_Array0[22], _f_, f);
     return caml_call1(concat, caml_call1(T[1], _g_));
    }
    var match$0 = T[11];
    if(typeof match$0 === "number")
     var concat_mapi = derived_concat_mapi;
    else
     var concat_mapi$0 = match$0[2], concat_mapi = concat_mapi$0;
    function filter_mapi(t, f){
     return caml_call2
             (concat_mapi,
              t,
              function(i, x){
               var match = caml_call2(f, i, x);
               if(! match) return caml_call1(of_array, [0]);
               var y = match[1];
               return caml_call1(of_array, [0, y]);
              });
    }
    function mapi(t, f){
     return filter_mapi(t, function(i, x){return [0, caml_call2(f, i, x)];});
    }
    function filteri(t, f){
     return filter_mapi
             (t, function(i, x){return caml_call2(f, i, x) ? [0, x] : 0;});
    }
    return [0,
            of_list,
            of_array,
            append,
            concat,
            map,
            filter,
            filter_map,
            concat_map,
            partition_tf,
            partition_map,
            length,
            is_empty,
            mem,
            iter,
            fold,
            fold_result,
            fold_until,
            exists,
            for_all,
            count,
            sum,
            find,
            find_map,
            to_list,
            to_array,
            min_elt,
            max_elt,
            foldi,
            iteri,
            existsi,
            for_alli,
            counti,
            findi,
            find_mapi,
            derived_init$0,
            mapi,
            filteri,
            filter_mapi,
            concat_mapi];
   }
   function _a_(T){
    var
     of_list = T[2],
     of_array = T[3],
     concat = T[4],
     fold = T[5],
     iter = T[6],
     length = T[7],
     iteri = T[8],
     foldi = T[9],
     init = T[10],
     concat_mapi = T[11],
     concat_of_array = Base_Array0[16],
     include =
       Make_gen_with_creators
        ([0,
          concat_of_array,
          of_list,
          of_array,
          concat,
          fold,
          iter,
          length,
          iteri,
          foldi,
          init,
          concat_mapi]),
     of_list$0 = include[1],
     of_array$0 = include[2],
     append = include[3],
     concat$0 = include[4],
     map = include[5],
     filter = include[6],
     filter_map = include[7],
     concat_map = include[8],
     partition_tf = include[9],
     partition_map = include[10],
     length$0 = include[11],
     is_empty = include[12],
     iter$0 = include[14],
     fold$0 = include[15],
     fold_result = include[16],
     fold_until = include[17],
     exists = include[18],
     for_all = include[19],
     count = include[20],
     sum = include[21],
     find = include[22],
     find_map = include[23],
     to_list = include[24],
     to_array = include[25],
     min_elt = include[26],
     max_elt = include[27],
     foldi$0 = include[28],
     iteri$0 = include[29],
     existsi = include[30],
     for_alli = include[31],
     counti = include[32],
     findi = include[33],
     find_mapi = include[34],
     init$0 = include[35],
     mapi = include[36],
     filteri = include[37],
     filter_mapi = include[38],
     concat_mapi$0 = include[39],
     _e_ = include[13];
    function mem(t, x){return caml_call3(_e_, t, x, T[1][1]);}
    return [0,
            of_list$0,
            of_array$0,
            append,
            concat$0,
            map,
            filter,
            filter_map,
            concat_map,
            partition_tf,
            partition_map,
            mem,
            length$0,
            is_empty,
            iter$0,
            fold$0,
            fold_result,
            fold_until,
            exists,
            for_all,
            count,
            sum,
            find,
            find_map,
            to_list,
            to_array,
            min_elt,
            max_elt,
            foldi$0,
            iteri$0,
            existsi,
            for_alli,
            counti,
            findi,
            find_mapi,
            init$0,
            mapi,
            filteri,
            filter_mapi,
            concat_mapi$0];
   }
   function _b_(T){
    var
     of_list = T[1],
     of_array = T[2],
     concat = T[3],
     fold = T[4],
     iter = T[5],
     length = T[6],
     iteri = T[7],
     foldi = T[8],
     init = T[9],
     concat_mapi = T[10],
     include =
       Make_gen_with_creators
        ([0,
          of_array,
          of_list,
          of_array,
          concat,
          fold,
          iter,
          length,
          iteri,
          foldi,
          init,
          concat_mapi]),
     of_list$0 = include[1],
     of_array$0 = include[2],
     append = include[3],
     concat$0 = include[4],
     map = include[5],
     filter = include[6],
     filter_map = include[7],
     concat_map = include[8],
     partition_tf = include[9],
     partition_map = include[10],
     length$0 = include[11],
     is_empty = include[12],
     mem = include[13],
     iter$0 = include[14],
     fold$0 = include[15],
     fold_result = include[16],
     fold_until = include[17],
     exists = include[18],
     for_all = include[19],
     count = include[20],
     sum = include[21],
     find = include[22],
     find_map = include[23],
     to_list = include[24],
     to_array = include[25],
     min_elt = include[26],
     max_elt = include[27],
     foldi$0 = include[28],
     iteri$0 = include[29],
     existsi = include[30],
     for_alli = include[31],
     counti = include[32],
     findi = include[33],
     find_mapi = include[34],
     init$0 = include[35],
     mapi = include[36],
     filteri = include[37],
     filter_mapi = include[38],
     concat_mapi$0 = include[39];
    return [0,
            of_list$0,
            of_array$0,
            append,
            concat$0,
            map,
            filter,
            filter_map,
            concat_map,
            partition_tf,
            partition_map,
            mem,
            length$0,
            is_empty,
            iter$0,
            fold$0,
            fold_result,
            fold_until,
            exists,
            for_all,
            count,
            sum,
            find,
            find_map,
            to_list,
            to_array,
            min_elt,
            max_elt,
            foldi$0,
            iteri$0,
            existsi,
            for_alli,
            counti,
            findi,
            find_mapi,
            init$0,
            mapi,
            filteri,
            filter_mapi,
            concat_mapi$0];
   }
   function _c_(T){
    var
     fold = T[2],
     iter = T[3],
     length = T[4],
     iteri = T[5],
     foldi = T[6],
     include = Make_gen([0, fold, iter, length, iteri, foldi]),
     length$0 = include[1],
     is_empty = include[2],
     iter$0 = include[4],
     fold$0 = include[5],
     fold_result = include[6],
     fold_until = include[7],
     exists = include[8],
     for_all = include[9],
     count = include[10],
     sum = include[11],
     find = include[12],
     find_map = include[13],
     to_list = include[14],
     to_array = include[15],
     min_elt = include[16],
     max_elt = include[17],
     foldi$0 = include[18],
     iteri$0 = include[19],
     existsi = include[20],
     for_alli = include[21],
     counti = include[22],
     findi = include[23],
     find_mapi = include[24],
     _d_ = include[3];
    function mem(t, x){return caml_call3(_d_, t, x, T[1][1]);}
    return [0,
            mem,
            length$0,
            is_empty,
            iter$0,
            fold$0,
            fold_result,
            fold_until,
            exists,
            for_all,
            count,
            sum,
            find,
            find_map,
            to_list,
            to_array,
            min_elt,
            max_elt,
            foldi$0,
            iteri$0,
            existsi,
            for_alli,
            counti,
            findi,
            find_mapi];
   }
   var
    Base_Indexed_container =
      [0,
       foldi,
       iteri,
       counti,
       existsi,
       for_alli,
       findi,
       find_mapi,
       function(T){
        var
         fold = T[1],
         iter = T[2],
         length = T[3],
         iteri = T[4],
         foldi = T[5],
         include = Make_gen([0, fold, iter, length, iteri, foldi]),
         length$0 = include[1],
         is_empty = include[2],
         mem = include[3],
         iter$0 = include[4],
         fold$0 = include[5],
         fold_result = include[6],
         fold_until = include[7],
         exists = include[8],
         for_all = include[9],
         count = include[10],
         sum = include[11],
         find = include[12],
         find_map = include[13],
         to_list = include[14],
         to_array = include[15],
         min_elt = include[16],
         max_elt = include[17],
         foldi$0 = include[18],
         iteri$0 = include[19],
         existsi = include[20],
         for_alli = include[21],
         counti = include[22],
         findi = include[23],
         find_mapi = include[24];
        return [0,
                mem,
                length$0,
                is_empty,
                iter$0,
                fold$0,
                fold_result,
                fold_until,
                exists,
                for_all,
                count,
                sum,
                find,
                find_map,
                to_list,
                to_array,
                min_elt,
                max_elt,
                foldi$0,
                iteri$0,
                existsi,
                for_alli,
                counti,
                findi,
                find_mapi];
       },
       _c_,
       Make_gen,
       _b_,
       _a_,
       Make_gen_with_creators];
   runtime.caml_register_global
    (4, Base_Indexed_container, "Base__Indexed_container");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Lazy
//# unitInfo: Requires: Base__Globalize, Base__Hash, Base__Import, Base__Monad, CamlinternalLazy, Stdlib__Lazy
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, caml_obj_tag = runtime.caml_obj_tag;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    CamlinternalLazy = global_data.CamlinternalLazy,
    Base_Import = global_data.Base__Import,
    Stdlib_Lazy = global_data.Stdlib__Lazy,
    Base_Globalize = global_data.Base__Globalize,
    Base_Hash = global_data.Base__Hash,
    Base_Monad = global_data.Base__Monad,
    Undefined = Stdlib_Lazy[1],
    is_val = Stdlib_Lazy[3],
    from_val = Stdlib_Lazy[4],
    from_fun = Stdlib_Lazy[6],
    force_val = Stdlib_Lazy[7],
    t_of_sexp = Base_Import[169],
    sexp_of_t = Base_Import[145],
    cst_unforced_lazy = "<unforced lazy>";
   function t_sexp_grammar(a_sexp_grammar){
    return caml_call1(Base_Import[192], a_sexp_grammar);
   }
   var globalize = Base_Globalize[12];
   function _a_(t, f){
    return [246,
            function(_s_){
             var _t_ = caml_obj_tag(t);
             a:
             if(250 === _t_)
              var _u_ = t[1];
             else{
              if(246 !== _t_ && 244 !== _t_){var _u_ = t; break a;}
              var _u_ = caml_call1(CamlinternalLazy[2], t);
             }
             return caml_call1(f, _u_);
            }];
   }
   function compare_local(compare_a, t1, t2){
    if(t1 === t2) return 0;
    var _o_ = caml_obj_tag(t2);
    a:
    if(250 === _o_)
     var _p_ = t2[1];
    else{
     if(246 !== _o_ && 244 !== _o_){var _p_ = t2; break a;}
     var _p_ = caml_call1(CamlinternalLazy[2], t2);
    }
    var _q_ = caml_obj_tag(t1);
    a:
    if(250 === _q_)
     var _r_ = t1[1];
    else{
     if(246 !== _q_ && 244 !== _q_){var _r_ = t1; break a;}
     var _r_ = caml_call1(CamlinternalLazy[2], t1);
    }
    return caml_call2(compare_a, _r_, _p_);
   }
   function compare(compare_a, t1, t2){
    return compare_local(compare_a, t1, t2);
   }
   function equal_local(equal_a, t1, t2){
    if(t1 === t2) return 1;
    var _k_ = caml_obj_tag(t2);
    a:
    if(250 === _k_)
     var _l_ = t2[1];
    else{
     if(246 !== _k_ && 244 !== _k_){var _l_ = t2; break a;}
     var _l_ = caml_call1(CamlinternalLazy[2], t2);
    }
    var _m_ = caml_obj_tag(t1);
    a:
    if(250 === _m_)
     var _n_ = t1[1];
    else{
     if(246 !== _m_ && 244 !== _m_){var _n_ = t1; break a;}
     var _n_ = caml_call1(CamlinternalLazy[2], t1);
    }
    return caml_call2(equal_a, _n_, _l_);
   }
   function equal(equal_a, t1, t2){return equal_local(equal_a, t1, t2);}
   var hash_fold_t = Base_Hash[13][12];
   function peek(t){
    if(! caml_call1(is_val, t)) return 0;
    var _i_ = caml_obj_tag(t);
    a:
    if(250 === _i_)
     var _j_ = t[1];
    else{
     if(246 !== _i_ && 244 !== _i_){var _j_ = t; break a;}
     var _j_ = caml_call1(CamlinternalLazy[2], t);
    }
    return [0, _j_];
   }
   function return$0(x){return caml_call1(from_val, x);}
   function bind(t, f){
    return [246,
            function(_d_){
             var _e_ = caml_obj_tag(t);
             a:
             if(250 === _e_)
              var _f_ = t[1];
             else{
              if(246 !== _e_ && 244 !== _e_){var _f_ = t; break a;}
              var _f_ = caml_call1(CamlinternalLazy[2], t);
             }
             var _g_ = caml_call1(f, _f_), _h_ = caml_obj_tag(_g_);
             if(250 === _h_) return _g_[1];
             if(246 !== _h_ && 244 !== _h_) return _g_;
             return caml_call1(CamlinternalLazy[2], _g_);
            }];
   }
   var
    map = [0, -198771759, _a_],
    include = caml_call1(Base_Monad[1], [0, bind, return$0, map]),
    symbol_bind = include[1],
    symbol_map = include[2],
    Monad_infix = include[3],
    bind$0 = include[4],
    return$1 = include[5],
    map$0 = include[6],
    join = include[7],
    ignore_m = include[8],
    all = include[9],
    all_unit = include[10],
    Let_syntax = include[11];
   function sexp_of_t$0(sexp_of_a, t){
    if(! caml_call1(is_val, t))
     return caml_call1(Base_Import[136], cst_unforced_lazy);
    var _b_ = caml_obj_tag(t);
    a:
    if(250 === _b_)
     var _c_ = t[1];
    else{
     if(246 !== _b_ && 244 !== _b_){var _c_ = t; break a;}
     var _c_ = caml_call1(CamlinternalLazy[2], t);
    }
    return caml_call1(sexp_of_a, _c_);
   }
   var
    T_unforcing = [0, sexp_of_t$0],
    Base_Lazy =
      [0,
       compare,
       compare_local,
       equal,
       equal_local,
       globalize,
       hash_fold_t,
       t_of_sexp,
       sexp_of_t,
       t_sexp_grammar,
       symbol_bind,
       symbol_map,
       Monad_infix,
       bind$0,
       return$1,
       map$0,
       join,
       ignore_m,
       all,
       all_unit,
       Let_syntax,
       Undefined,
       force_val,
       from_fun,
       from_val,
       is_val,
       peek,
       T_unforcing];
   runtime.caml_register_global(7, Base_Lazy, "Base__Lazy");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Info_intf
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Base_Info_intf = [0];
   runtime.caml_register_global(0, Base_Info_intf, "Base__Info_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Ordered_collection_common0
//# unitInfo: Requires: Base__Import, Base__Printf
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_Import = global_data.Base__Import,
    Base_Printf = global_data.Base__Printf,
    invalid_argf = Base_Printf[7],
    _a_ =
      [0,
       [11, "Negative position: ", [4, 0, 0, 0, 0]],
       "Negative position: %d"],
    _b_ =
      [0, [11, "Negative length: ", [4, 0, 0, 0, 0]], "Negative length: %d"],
    _c_ =
      [0,
       [11,
        "pos + len past end: ",
        [4, 0, 0, 0, [11, " + ", [4, 0, 0, 0, [11, " > ", [4, 0, 0, 0, 0]]]]]],
       "pos + len past end: %d + %d > %d"];
   function slow_check_pos_len_exn(pos, len, total_length){
    if(pos < 0) caml_call3(invalid_argf, _a_, pos, 0);
    if(len < 0) caml_call3(invalid_argf, _b_, len, 0);
    var _h_ = caml_call2(Base_Import[93], total_length, len) < pos ? 1 : 0;
    return _h_
            ? caml_call5(invalid_argf, _c_, pos, len, total_length, 0)
            : _h_;
   }
   function check_pos_len_exn(pos, len, total_length){
    var
     stop = caml_call2(Base_Import[91], pos, len),
     _d_ = caml_call2(Base_Import[93], total_length, stop),
     _e_ = caml_call2(Base_Import[118], pos, len),
     _f_ = caml_call2(Base_Import[118], _e_, stop),
     _g_ = caml_call2(Base_Import[118], _f_, _d_) < 0 ? 1 : 0;
    return _g_ ? slow_check_pos_len_exn(pos, len, total_length) : _g_;
   }
   function get_pos_len_exn(opt, len, param, total_length){
    if(opt) var sth = opt[1], pos = sth; else var pos = 0;
    if(len)
     var i = len[1], len$0 = i;
    else
     var len$0 = caml_call2(Base_Import[93], total_length, pos);
    check_pos_len_exn(pos, len$0, total_length);
    return [0, pos, len$0];
   }
   var
    Private = [0, slow_check_pos_len_exn],
    Base_Ordered_collection_common =
      [0, get_pos_len_exn, check_pos_len_exn, Private];
   runtime.caml_register_global
    (5, Base_Ordered_collection_common, "Base__Ordered_collection_common0");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Random_repr
//# unitInfo: Requires: Stdlib__Bigarray, Stdlib__Domain, Stdlib__Random
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Domain = global_data.Stdlib__Domain,
    Stdlib_Random = global_data.Stdlib__Random;
   function of_state(_c_){return _c_;}
   var Repr = [0, of_state];
   function assign(t, state){
    var
     _b_ = caml_call1(Stdlib_Domain[10][2], t),
     dst = caml_call1(Repr[1], _b_),
     src = caml_call1(Repr[1], state);
    return runtime.caml_ba_blit(src, dst);
   }
   function make(state){
    function split_from_parent(v){
     return caml_call1(Stdlib_Random[15][15], v);
    }
    function _a_(param){return state;}
    var t = caml_call2(Stdlib_Domain[10][1], [0, split_from_parent], _a_);
    caml_call1(Stdlib_Domain[10][2], t);
    return t;
   }
   function make_lazy(f){
    function split_from_parent(v){
     return caml_call1(Stdlib_Random[15][15], v);
    }
    return caml_call2(Stdlib_Domain[10][1], [0, split_from_parent], f);
   }
   function get_state(t){return caml_call1(Stdlib_Domain[10][2], t);}
   var Base_Random_repr = [0, Repr, assign, make, make_lazy, get_state];
   runtime.caml_register_global(2, Base_Random_repr, "Base__Random_repr");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Random
//# unitInfo: Requires: Base__Char0, Base__Import, Base__Int0, Base__Printf, Base__Random_repr, Base__Word_size, Stdlib__Int32, Stdlib__Int64, Stdlib__Nativeint, Stdlib__Random
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_greaterequal = runtime.caml_greaterequal,
    caml_int64_add = runtime.caml_int64_add,
    caml_int64_of_int32 = runtime.caml_int64_of_int32,
    caml_int64_shift_left = runtime.caml_int64_shift_left,
    caml_int64_to_int32 = runtime.caml_int64_to_int32,
    caml_int64_xor = runtime.caml_int64_xor;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    Base_Random_repr = global_data.Base__Random_repr,
    Base_Import = global_data.Base__Import,
    Stdlib_Int64 = global_data.Stdlib__Int64,
    Stdlib_Nativeint = global_data.Stdlib__Nativeint,
    Stdlib_Int32 = global_data.Stdlib__Int32,
    Base_Int0 = global_data.Base__Int0,
    Base_Printf = global_data.Base__Printf,
    Stdlib_Random = global_data.Stdlib__Random,
    Base_Char0 = global_data.Base__Char0,
    Base_Word_size = global_data.Base__Word_size,
    cst_float = "float",
    cst_int64 = "int64",
    _b_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    cst_nativeint = "nativeint",
    cst_int32 = "int32",
    cst_int = "int",
    _a_ =
      [0,
       [11,
        "Random.",
        [2,
         0,
         [11, ": crossed bounds [", [2, 0, [11, " > ", [2, 0, [12, 93, 0]]]]]]],
       "Random.%s: crossed bounds [%s > %s]"],
    cst_initializing_Random_with_a =
      "initializing Random with a nondeterministic seed is forbidden in inline tests";
   function forbid_nondeterminism_in_tests(allow_in_tests){
    var _D_ = Base_Import[129];
    if(! _D_) return _D_;
    if(allow_in_tests && allow_in_tests[1]) return;
    return caml_call1(Base_Import[124], cst_initializing_Random_with_a);
   }
   function bits(t){
    var _C_ = caml_call1(Base_Random_repr[5], t);
    return caml_call1(Stdlib_Random[15][4], _C_);
   }
   function bits64(t){
    var _B_ = caml_call1(Base_Random_repr[5], t);
    return caml_call1(Stdlib_Random[15][13], _B_);
   }
   function bool(t){
    var _A_ = caml_call1(Base_Random_repr[5], t);
    return caml_call1(Stdlib_Random[15][11], _A_);
   }
   function int$0(t, x){
    var _z_ = caml_call1(Base_Random_repr[5], t);
    return caml_call2(Stdlib_Random[15][5], _z_, x);
   }
   function int32(t, x){
    var _y_ = caml_call1(Base_Random_repr[5], t);
    return caml_call2(Stdlib_Random[15][7], _y_, x);
   }
   function int64(t, x){
    var _x_ = caml_call1(Base_Random_repr[5], t);
    return caml_call2(Stdlib_Random[15][9], _x_, x);
   }
   function nativeint(t, x){
    var _w_ = caml_call1(Base_Random_repr[5], t);
    return caml_call2(Stdlib_Random[15][8], _w_, x);
   }
   function make(seed){
    var _v_ = caml_call1(Stdlib_Random[15][1], seed);
    return caml_call1(Base_Random_repr[3], _v_);
   }
   function copy(t){
    var
     _t_ = caml_call1(Base_Random_repr[5], t),
     _u_ = caml_call1(Stdlib_Random[15][3], _t_);
    return caml_call1(Base_Random_repr[3], _u_);
   }
   function char$0(t){
    var _s_ = int$0(t, 256);
    return caml_call1(Base_Char0[5], _s_);
   }
   function ascii(t){
    var _r_ = int$0(t, 128);
    return caml_call1(Base_Char0[5], _r_);
   }
   function make_self_init(allow_in_tests, param){
    forbid_nondeterminism_in_tests(allow_in_tests);
    return caml_call1(Base_Random_repr[4], Stdlib_Random[15][2]);
   }
   var assign = Base_Random_repr[2];
   if(Base_Import[129]){
    var t = caml_call1(Stdlib_Random[16], 0);
    caml_call1(Stdlib_Random[1], 137);
    var default$0 = caml_call1(Base_Random_repr[3], t);
   }
   else
    var default$0 = make_self_init(0, 0);
   function int_on_64bits(t, bound){
    return 1073741823 < bound
            ? caml_int64_to_int32(int64(t, caml_int64_of_int32(bound)))
            : int$0(t, bound);
   }
   function int_on_32bits(t, bound){
    return 1073741823 < bound ? int32(t, bound) : int$0(t, bound);
   }
   var int$1 = Base_Word_size[3] ? int_on_64bits : int_on_32bits;
   function bits$0(state){return caml_int64_of_int32(bits(state));}
   function full_range_int64(state){
    var
     _p_ = caml_int64_shift_left(bits$0(state), 60),
     _q_ = caml_int64_xor(caml_int64_shift_left(bits$0(state), 30), _p_);
    return caml_int64_xor(bits$0(state), _q_);
   }
   function bits$1(state){return bits(state);}
   function full_range_int32(state){
    var _o_ = bits$1(state) << 30;
    return bits$1(state) ^ _o_;
   }
   function full_range_int_on_64bits(state){
    return caml_int64_to_int32(full_range_int64(state));
   }
   function full_range_int_on_32bits(state){return full_range_int32(state);}
   var
    full_range_int_on_64bits$0 =
      Base_Word_size[3] ? full_range_int_on_64bits : full_range_int_on_32bits;
   function full_range_nativeint_on_64bits(state){
    return caml_int64_to_int32(full_range_int64(state));
   }
   function full_range_nativeint_on_32bits(state){return full_range_int32(state);
   }
   var
    full_range_nativeint =
      Base_Word_size[3]
       ? full_range_nativeint_on_64bits
       : full_range_nativeint_on_32bits;
   function raise_crossed_bounds
   (name, lower_bound, upper_bound, string_of_bound){
    var
     _m_ = caml_call1(string_of_bound, upper_bound),
     _n_ = caml_call1(string_of_bound, lower_bound);
    return caml_call5(Base_Printf[6], _a_, name, _n_, _m_, 0);
   }
   function int_incl(state, lo, hi){
    if(hi < lo) raise_crossed_bounds(cst_int, lo, hi, Base_Int0[1]);
    var diff = caml_call2(Base_Import[93], hi, lo);
    if(diff === Base_Int0[6]){
     var
      _i_ = Base_Int0[6],
      _j_ = full_range_int_on_64bits$0(state),
      _k_ = caml_call2(Base_Import[116], _j_, _i_);
     return caml_call2(Base_Import[91], lo, _k_);
    }
    if(0 <= diff){
     var _l_ = int$1(state, caml_call1(Base_Int0[8], diff));
     return caml_call2(Base_Import[91], lo, _l_);
    }
    for(;;){
     var int$0 = full_range_int_on_64bits$0(state);
     if(lo <= int$0 && int$0 <= hi) return int$0;
    }
   }
   function int32_incl(state, lo, hi){
    if(caml_call2(Base_Import[102][5], lo, hi))
     raise_crossed_bounds(cst_int32, lo, hi, Stdlib_Int32[14]);
    var diff = hi - lo | 0;
    if(caml_call2(Base_Import[102][4], diff, Stdlib_Int32[9])){
     var _h_ = Stdlib_Int32[9];
     return lo + (full_range_int32(state) & _h_) | 0;
    }
    if(caml_call2(Base_Import[102][6], diff, 0))
     return lo + int32(state, caml_call1(Stdlib_Int32[6], diff)) | 0;
    for(;;){
     var int$0 = full_range_int32(state);
     if
      (caml_call2(Base_Import[102][6], int$0, lo)
       && caml_call2(Base_Import[102][2], int$0, hi))
      return int$0;
    }
   }
   function nativeint_incl(state, lo, hi){
    if(caml_call2(Base_Import[104][5], lo, hi))
     raise_crossed_bounds(cst_nativeint, lo, hi, Stdlib_Nativeint[15]);
    var diff = hi - lo | 0;
    if(caml_call2(Base_Import[104][4], diff, Stdlib_Nativeint[10])){
     var _g_ = Stdlib_Nativeint[10];
     return lo + (full_range_nativeint(state) & _g_) | 0;
    }
    if(caml_call2(Base_Import[104][6], diff, 0))
     return lo + nativeint(state, caml_call1(Stdlib_Nativeint[6], diff)) | 0;
    for(;;){
     var int$0 = full_range_nativeint(state);
     if
      (caml_call2(Base_Import[104][6], int$0, lo)
       && caml_call2(Base_Import[104][2], int$0, hi))
      return int$0;
    }
   }
   function int64_incl(state, lo, hi){
    if(runtime.caml_greaterthan(lo, hi))
     raise_crossed_bounds(cst_int64, lo, hi, Stdlib_Int64[14]);
    var diff = runtime.caml_int64_sub(hi, lo);
    if(runtime.caml_equal(diff, Stdlib_Int64[9])){
     var _f_ = Stdlib_Int64[9];
     return caml_int64_add
             (lo, runtime.caml_int64_and(full_range_int64(state), _f_));
    }
    if(caml_greaterequal(diff, _b_))
     return caml_int64_add
             (lo, int64(state, caml_call1(Stdlib_Int64[6], diff)));
    for(;;){
     var int$0 = full_range_int64(state);
     if(caml_greaterequal(int$0, lo) && runtime.caml_lessequal(int$0, hi))
      return int$0;
    }
   }
   function float$0(state, hi){
    for(;;){
     var
      r1 = bits(state),
      r2 = bits(state),
      _d_ = caml_call2(Base_Import[90], r1, 9.313225746154785e-10),
      _e_ = caml_call2(Base_Import[92], _d_, r2),
      result = caml_call2(Base_Import[90], _e_, 9.313225746154785e-10);
     if(result < 1.) return caml_call2(Base_Import[90], result, hi);
    }
   }
   function float_range(state, lo, hi){
    if(hi < lo) raise_crossed_bounds(cst_float, lo, hi, Base_Import[85][35]);
    var _c_ = float$0(state, caml_call2(Base_Import[94], hi, lo));
    return caml_call2(Base_Import[92], lo, _c_);
   }
   function bits$2(param){return bits(default$0);}
   function bits64$0(param){return bits64(default$0);}
   function int$2(x){return int$1(default$0, x);}
   function int32$0(x){return int32(default$0, x);}
   function nativeint$0(x){return nativeint(default$0, x);}
   function int64$0(x){return int64(default$0, x);}
   function float$1(x){return float$0(default$0, x);}
   function int_incl$0(x, y){return int_incl(default$0, x, y);}
   function int32_incl$0(x, y){return int32_incl(default$0, x, y);}
   function nativeint_incl$0(x, y){return nativeint_incl(default$0, x, y);}
   function int64_incl$0(x, y){return int64_incl(default$0, x, y);}
   function float_range$0(x, y){return float_range(default$0, x, y);}
   function bool$0(param){return bool(default$0);}
   function char$1(param){return char$0(default$0);}
   function ascii$0(param){return ascii(default$0);}
   function full_init(seed){
    return caml_call2
            (assign, default$0, caml_call1(Stdlib_Random[15][1], seed));
   }
   function init(seed){return full_init([0, seed]);}
   function self_init(allow_in_tests, param){
    forbid_nondeterminism_in_tests(allow_in_tests);
    return full_init(runtime.caml_sys_random_seed(0));
   }
   function set_state(s){
    return caml_call2(assign, default$0, caml_call1(Base_Random_repr[5], s));
   }
   var
    Base_Random =
      [0,
       init,
       full_init,
       self_init,
       bits$2,
       bits64$0,
       int$2,
       int32$0,
       nativeint$0,
       int64$0,
       float$1,
       int_incl$0,
       int32_incl$0,
       nativeint_incl$0,
       int64_incl$0,
       float_range$0,
       bool$0,
       char$1,
       ascii$0,
       [0,
        default$0,
        make,
        make_self_init,
        copy,
        bits,
        bits64,
        int$1,
        int32,
        nativeint,
        int64,
        float$0,
        int_incl,
        int32_incl,
        nativeint_incl,
        int64_incl,
        float_range,
        bool,
        char$0,
        ascii],
       set_state];
   runtime.caml_register_global(22, Base_Random, "Base__Random");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Array_permute
//# unitInfo: Requires: Base__Array0, Base__Import, Base__Ordered_collection_common0, Base__Random
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_Random = global_data.Base__Random,
    Base_Import = global_data.Base__Import,
    Base_Ordered_collection_common =
      global_data.Base__Ordered_collection_common0,
    Base_Array0 = global_data.Base__Array0,
    invalid_argf = Base_Array0[1],
    Array = Base_Array0[2],
    max_length = Base_Array0[3],
    create = Base_Array0[4],
    create_local = Base_Array0[5],
    create_float_uninitialized = Base_Array0[6],
    append = Base_Array0[7],
    blit = Base_Array0[8],
    concat = Base_Array0[9],
    copy = Base_Array0[10],
    fill = Base_Array0[11],
    init = Base_Array0[12],
    make_matrix = Base_Array0[13],
    of_list = Base_Array0[14],
    sub = Base_Array0[15],
    to_list = Base_Array0[16],
    fold = Base_Array0[17],
    fold_right = Base_Array0[18],
    iter = Base_Array0[19],
    iteri = Base_Array0[20],
    map = Base_Array0[21],
    mapi = Base_Array0[22],
    stable_sort = Base_Array0[23],
    swap = Base_Array0[24];
   function permute(opt, _a_, len, t){
    if(opt)
     var sth = opt[1], random_state = sth;
    else
     var random_state = Base_Random[19][1];
    if(_a_) var sth$0 = _a_[1], pos = sth$0; else var pos = 0;
    var total_length = t.length - 1;
    if(len)
     var l = len[1], len$0 = l;
    else
     var len$0 = caml_call2(Base_Import[93], total_length, pos);
    caml_call3(Base_Ordered_collection_common[2], pos, len$0, total_length);
    var num_swaps = caml_call2(Base_Import[93], len$0, 1);
    if(num_swaps >= 1){
     var i = num_swaps;
     for(;;){
      var
       this_i = caml_call2(Base_Import[91], pos, i),
       _b_ = caml_call2(Base_Import[91], i, 1),
       _c_ = caml_call2(Base_Random[19][7], random_state, _b_),
       random_i = caml_call2(Base_Import[91], pos, _c_);
      caml_call3(swap, t, this_i, random_i);
      var _d_ = i - 1 | 0;
      if(1 === i) break;
      var i = _d_;
     }
    }
    return 0;
   }
   var
    Base_Array_permute =
      [0,
       invalid_argf,
       Array,
       max_length,
       create,
       create_local,
       create_float_uninitialized,
       append,
       blit,
       concat,
       copy,
       fill,
       init,
       make_matrix,
       of_list,
       sub,
       to_list,
       fold,
       fold_right,
       iter,
       iteri,
       map,
       mapi,
       stable_sort,
       swap,
       permute];
   runtime.caml_register_global(4, Base_Array_permute, "Base__Array_permute");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Equal
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Base_Equal = [0];
   runtime.caml_register_global(0, Base_Equal, "Base__Equal");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Ordering
//# unitInfo: Requires: Base__Hash, Sexplib0__Sexp_conv_error
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Equal = "Equal",
    cst_Greater = "Greater",
    cst_Less = "Less",
    cst_equal = "equal",
    cst_greater = "greater",
    cst_less = "less",
    caml_int_compare = runtime.caml_int_compare,
    caml_string_notequal = runtime.caml_string_notequal;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    all = [0, 0, [0, 1, [0, 2, 0]]],
    error_source_005 = "ordering.ml.t",
    t_sexp_grammar =
      [3,
       [0,
        2,
        [0,
         [1, [0, cst_Less, 0]],
         [0, [1, [0, cst_Equal, 0]], [0, [1, [0, cst_Greater, 0]], 0]]]]],
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Base_Hash = global_data.Base__Hash,
    compare_local = caml_int_compare,
    compare = caml_int_compare,
    _a_ = [0, cst_Less],
    _b_ = [0, cst_Equal],
    _c_ = [0, cst_Greater];
   function hash_fold_t(hsv, arg){
    switch(arg){
      case 0:
       var _i_ = 0; break;
      case 1:
       var _i_ = 1; break;
      default: var _i_ = 2;
    }
    return caml_call2(Base_Hash[3], hsv, _i_);
   }
   function hash(arg){
    var hsv = caml_call2(Base_Hash[11], 0, 0), _h_ = hash_fold_t(hsv, arg);
    return caml_call1(Base_Hash[9], _h_);
   }
   function t_of_sexp(sexp_006){
    a:
    {
     if(0 === sexp_006[0]){
      var _d_ = sexp_006[1];
      b:
      if(caml_string_notequal(_d_, cst_Equal)){
       c:
       if(caml_string_notequal(_d_, cst_Greater)){
        if(caml_string_notequal(_d_, cst_Less)){
         if(! caml_string_notequal(_d_, cst_equal)) break b;
         if(! caml_string_notequal(_d_, cst_greater)) break c;
         if(caml_string_notequal(_d_, cst_less)) break a;
        }
        return 0;
       }
       return 2;
      }
      return 1;
     }
     var _e_ = sexp_006[1];
     if(! _e_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_005, sexp_006);
     var _f_ = _e_[1];
     if(0 !== _f_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_005, sexp_006);
     var _g_ = _f_[1];
     b:
     if(caml_string_notequal(_g_, cst_Equal)){
      c:
      if(caml_string_notequal(_g_, cst_Greater)){
       if(caml_string_notequal(_g_, cst_Less)){
        if(! caml_string_notequal(_g_, cst_equal)) break b;
        if(! caml_string_notequal(_g_, cst_greater)) break c;
        if(caml_string_notequal(_g_, cst_less)) break a;
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[7], error_source_005, sexp_006);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_005, sexp_006);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[7], error_source_005, sexp_006);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_005, sexp_006);
   }
   function sexp_of_t(param){
    switch(param){case 0: return _a_;case 1: return _b_;default: return _c_;
    }
   }
   function equal(a, b){return 0 === caml_int_compare(a, b) ? 1 : 0;}
   function equal_local(a, b){return 0 === caml_int_compare(a, b) ? 1 : 0;}
   var Export = [0];
   function of_int(n){return 0 <= n ? 0 === n ? 1 : 2 : 0;}
   function to_int(param){
    switch(param){case 0: return -1;case 1: return 0;default: return 1;
    }
   }
   var
    Base_Ordering =
      [0,
       compare,
       compare_local,
       hash_fold_t,
       hash,
       t_of_sexp,
       sexp_of_t,
       t_sexp_grammar,
       all,
       equal,
       equal_local,
       of_int,
       to_int,
       Export];
   runtime.caml_register_global(20, Base_Ordering, "Base__Ordering");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__List
//# unitInfo: Requires: Base__Applicative, Base__Array0, Base__Array_permute, Base__Container, Base__Import, Base__List1, Base__Monad, Base__Ordering, Base__Printf, Base__Random, Base__Result, Sexplib0__Sexp_conv, Sexplib0__Sexp_conv_error, Sexplib0__Sexp_grammar
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst = " <> ",
    cst$0 = ": ",
    cst_List_map2$1 = "List.map2",
    cst_List_map3$1 = "List.map3",
    cst_List_range_stride_function$2 =
      "List.range': stride function cannot change direction",
    cst_length_mismatch_in = "length mismatch in ",
    cst_src_list_ml = "src/list.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_trampoline = runtime.caml_trampoline,
    caml_trampoline_return = runtime.caml_trampoline_return;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    error_source_036 = "list.ml.Assoc.t",
    Base_Import = global_data.Base__Import,
    Base_Container = global_data.Base__Container,
    Assert_failure = global_data.Assert_failure,
    Base_Random = global_data.Base__Random,
    Base_Array0 = global_data.Base__Array0,
    Base_Array_permute = global_data.Base__Array_permute,
    Sexplib0_Sexp_grammar = global_data.Sexplib0__Sexp_grammar,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Base_Result = global_data.Base__Result,
    Base_Ordering = global_data.Base__Ordering,
    Base_List1 = global_data.Base__List1,
    Base_Printf = global_data.Base__Printf,
    Base_Applicative = global_data.Base__Applicative,
    Base_Monad = global_data.Base__Monad,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    hd_exn = Base_List1[1],
    rev_append = Base_List1[2],
    tl_exn = Base_List1[3],
    length = Base_List1[5],
    exists = Base_List1[6],
    exists2_ok = Base_List1[7],
    fold = Base_List1[8],
    fold2_ok = Base_List1[9],
    for_all = Base_List1[10],
    for_all2_ok = Base_List1[11],
    iter = Base_List1[12],
    iter2_ok = Base_List1[13],
    rev_map = Base_List1[17],
    rev_map2_ok = Base_List1[18],
    rev = Base_List1[19],
    fold_right = Base_List1[20],
    fold_right2_ok = Base_List1[21],
    is_empty = Base_List1[22],
    partition_map = Base_List1[23],
    invalid_argf = Base_Printf[7],
    globalize = Base_Import[293],
    t_of_sexp = Base_Import[173],
    sexp_of_t = Base_Import[149],
    cst_List_map2 = cst_List_map2$1,
    cst_List_map2$0 = cst_List_map2$1,
    cst_List_map3 = cst_List_map3$1,
    cst_List_map3$0 = cst_List_map3$1,
    cst_List_last = "List.last",
    _v_ = [0, "list.ml.Transpose_got_lists_of_different_lengths"],
    _w_ = [0, cst_src_list_ml, 1588, 11],
    cst_List_random_element_exn_em = "List.random_element_exn: empty list",
    cst_List_drop_last_exn_empty_l = "List.drop_last_exn: empty list",
    _t_ =
      [0,
       [11, "List.chunks_of: Expected length > 0, got ", [4, 0, 0, 0, 0]],
       "List.chunks_of: Expected length > 0, got %d"],
    cst_List_sub = "List.sub",
    _r_ = [0, cst_src_list_ml, 1305, 12],
    _q_ = [1, 0],
    _p_ = [1, 0],
    _o_ = [1, 0],
    _n_ = [0, cst_src_list_ml, 1111, 4],
    _m_ = [0, [11, "List.init ", [4, 0, 0, 0, 0]], "List.init %d"],
    cst_List_reduce_balanced_exn = "List.reduce_balanced_exn",
    _l_ = [0, cst_src_list_ml, 626, 14],
    cst_List_reduce_exn = "List.reduce_exn",
    _k_ =
      [0,
       [11,
        "length mismatch in zip_exn: ",
        [4, 0, 0, 0, [11, cst, [4, 0, 0, 0, 0]]]],
       "length mismatch in zip_exn: %d <> %d"],
    cst_map3_exn = "map3_exn",
    cst_rev_map3_exn = "rev_map3_exn",
    _j_ = [0, cst_src_list_ml, 476, 11],
    cst_map2_exn = "map2_exn",
    cst_exists2_exn = "exists2_exn",
    cst_for_all2_exn = "for_all2_exn",
    cst_fold_right2_exn = "fold_right2_exn",
    cst_fold2_exn = "fold2_exn",
    cst_rev_map2_exn = "rev_map2_exn",
    cst_iter2_exn = "iter2_exn",
    _e_ =
      [0,
       [11,
        cst_length_mismatch_in,
        [2,
         0,
         [11,
          cst$0,
          [4,
           0,
           0,
           0,
           [11,
            cst,
            [4,
             0,
             0,
             0,
             [11, " || ", [4, 0, 0, 0, [11, cst, [4, 0, 0, 0, 0]]]]]]]]]],
       "length mismatch in %s: %d <> %d || %d <> %d"],
    _d_ =
      [0,
       [11,
        cst_length_mismatch_in,
        [2, 0, [11, cst$0, [4, 0, 0, 0, [11, cst, [4, 0, 0, 0, 0]]]]]],
       "length mismatch in %s: %d <> %d"],
    _c_ =
      [0,
       [11,
        "List.nth_exn ",
        [4, 0, 0, 0, [11, " called on list of length ", [4, 0, 0, 0, 0]]]],
       "List.nth_exn %d called on list of length %d"],
    cst_List_range_stride_must_be_ = "List.range: stride must be non-zero",
    cst_List_range_stride_function$0 = cst_List_range_stride_function$2,
    cst_List_range_stride_function$1 = cst_List_range_stride_function$2,
    cst_List_range_stride_function =
      "List.range': stride function cannot return the same value",
    _a_ = [0, "Ok"],
    _b_ = [0, "Unequal_lengths"],
    _f_ = [0, "List.find_map_exn: not found"],
    _g_ = [0, "List.find_exn: not found"],
    _h_ = [0, "List.findi_exn: not found"],
    _i_ = [0, "List.find_mapi_exn: not found"],
    _s_ = [0, "List.Assoc.find_exn: not found"],
    cst_Base_List_Transpose_got_li =
      "Base__List.Transpose_got_lists_of_different_lengths";
   function t_sexp_grammar(a_sexp_grammar){
    return caml_call1(Base_Import[194], a_sexp_grammar);
   }
   function compare_local(cmp_a, a_014, b_015){
    if(a_014 === b_015) return 0;
    if(! a_014) return b_015 ? 1 : 0;
    var a_016 = a_014[1];
    if(! b_015) return -1;
    var b_017 = b_015[1];
    return caml_call2(cmp_a, a_016, b_017);
   }
   function compare(cmp_a, a_010, b_011){
    if(a_010 === b_011) return 0;
    if(! a_010) return b_011 ? 1 : 0;
    var a_012 = a_010[1];
    if(! b_011) return -1;
    var b_013 = b_011[1];
    return caml_call2(cmp_a, a_012, b_013);
   }
   function sexp_of_t$0(of_a_018, param){
    if(! param) return _b_;
    var arg0_019 = param[1], res0_020 = caml_call1(of_a_018, arg0_019);
    return [1, [0, _a_, [0, res0_020, 0]]];
   }
   function invariant(f, t){return caml_call2(iter, t, f);}
   function of_list(t){return t;}
   function singleton(x){return [0, x, 0];}
   function range(compare, stride, opt, _bI_, start_i, stop_i){
    if(opt) var sth = opt[1], start = sth; else var start = 104758188;
    if(_bI_) var sth$0 = _bI_[1], stop = sth$0; else var stop = -160346914;
    var next_i = caml_call1(stride, start_i);
    function order(x, y){
     var _bJ_ = caml_call2(compare, x, y);
     return caml_call1(Base_Ordering[11], _bJ_);
    }
    function raise_stride_cannot_return_sam(param){
     return caml_call1(Base_Import[126], cst_List_range_stride_function);
    }
    switch(order(start_i, next_i)){
      case 0:
       var initial_stride_order = 847855481; break;
      case 1:
       var initial_stride_order = raise_stride_cannot_return_sam(0); break;
      default: var initial_stride_order = 85047514;
    }
    var
     start_i$0 = 104758188 <= start ? start_i : next_i,
     i_to_stop_order = order(start_i$0, stop_i);
    a:
    {
     switch(i_to_stop_order){
       case 0:
        if(847855481 > initial_stride_order) break a; break;
       case 1:
        return 104758188 <= stop ? [0, start_i$0, 0] : 0;
       default: if(847855481 <= initial_stride_order) break a;
     }
     var next_i$0 = caml_call1(stride, start_i$0);
     b:
     {
      switch(order(start_i$0, next_i$0)){
        case 0:
         if(847855481 > initial_stride_order) break b; break;
        case 1:
         return raise_stride_cannot_return_sam(0);
        default: if(847855481 <= initial_stride_order) break b;
      }
      var
       block = [0, start_i$0, 24029],
       dst = block,
       offset = 1,
       i = next_i$0;
      for(;;){
       var i_to_stop_order$0 = order(i, stop_i);
       c:
       {
        d:
        {
         switch(i_to_stop_order$0){
           case 0:
            if(847855481 <= initial_stride_order) break d; break;
           case 1:
            if(104758188 <= stop){dst[1 + offset] = [0, i, 0]; break c;}
            dst[1 + offset] = 0;
            break c;
           default: if(847855481 > initial_stride_order) break d;
         }
         dst[1 + offset] = 0;
         break c;
        }
        var next_i$1 = caml_call1(stride, i);
        d:
        {
         switch(order(i, next_i$1)){
           case 0:
            if(847855481 <= initial_stride_order) break d; break;
           case 1:
            dst[1 + offset] = raise_stride_cannot_return_sam(0); break c;
           default: if(847855481 > initial_stride_order) break d;
         }
         dst[1 + offset] =
          caml_call1(Base_Import[126], cst_List_range_stride_function$1);
         break c;
        }
        var dst$0 = [0, i, 24029];
        dst[1 + offset] = dst$0;
        var dst = dst$0, offset = 1, i = next_i$1;
        continue;
       }
       return block;
      }
     }
     return caml_call1(Base_Import[126], cst_List_range_stride_function$0);
    }
    return 0;
   }
   function range$0(opt, _bF_, _bE_, start_i, stop_i){
    if(opt) var sth = opt[1], stride = sth; else var stride = 1;
    if(_bF_) var sth$0 = _bF_[1], start = sth$0; else var start = 104758188;
    if(_bE_) var sth$1 = _bE_[1], stop = sth$1; else var stop = -160346914;
    if(0 === stride)
     caml_call1(Base_Import[126], cst_List_range_stride_must_be_);
    var _bG_ = [0, stop], _bH_ = [0, start];
    return range
            (runtime.caml_int_compare,
             function(x){return caml_call2(Base_Import[91], x, stride);},
             _bH_,
             _bG_,
             start_i,
             stop_i);
   }
   function hd(t){if(! t) return 0; var x = t[1]; return [0, x];}
   function tl(t){if(! t) return 0; var t$0 = t[2]; return [0, t$0];}
   function nth(t, n){
    if(0 > n) return 0;
    var t$0 = t, n$0 = n;
    for(;;){
     if(! t$0) return 0;
     var t$1 = t$0[2], a = t$0[1];
     if(0 === n$0) return [0, a];
     var n$1 = caml_call2(Base_Import[93], n$0, 1), t$0 = t$1, n$0 = n$1;
    }
   }
   function nth_exn(t, n){
    var match = nth(t, n);
    if(! match)
     return caml_call4(invalid_argf, _c_, n, caml_call1(length, t), 0);
    var a = match[1];
    return a;
   }
   function unordered_append(l1, l2){
    if(l1){
     if(l2) return caml_call2(rev_append, l1, l2);
     var l = l1;
    }
    else
     var l = l2;
    return l;
   }
   function of_lists(l1, l2){
    var a = l1, b = l2, shared_length = 0;
    for(;;){
     if(a){
      if(b){
       var
        b$0 = b[2],
        a$0 = a[2],
        shared_length$0 = caml_call2(Base_Import[91], shared_length, 1),
        a = a$0,
        b = b$0,
        shared_length = shared_length$0;
       continue;
      }
     }
     else if(! b) return [0, shared_length];
     return [1, shared_length, a, b];
    }
   }
   function check_length2_exn(name, l1, l2){
    var match = of_lists(l1, l2);
    if(0 === match[0]) return;
    var
     tail_of_b = match[3],
     tail_of_a = match[2],
     shared_length = match[1],
     _bB_ = caml_call1(length, tail_of_b),
     _bC_ = caml_call2(Base_Import[91], shared_length, _bB_),
     _bD_ = caml_call1(length, tail_of_a);
    return caml_call5
            (invalid_argf,
             _d_,
             name,
             caml_call2(Base_Import[91], shared_length, _bD_),
             _bC_,
             0);
   }
   function check_length2(l1, l2, f){
    return 0 === of_lists(l1, l2)[0] ? [0, caml_call2(f, l1, l2)] : 0;
   }
   function of_lists$0(l1, l2, l3){
    var a = l1, b = l2, c = l3, shared_length = 0;
    for(;;){
     if(a){
      if(b && c){
       var
        c$0 = c[2],
        b$0 = b[2],
        a$0 = a[2],
        shared_length$0 = caml_call2(Base_Import[91], shared_length, 1),
        a = a$0,
        b = b$0,
        c = c$0,
        shared_length = shared_length$0;
       continue;
      }
     }
     else if(! b && ! c) return [0, shared_length];
     return [1, shared_length, a, b, c];
    }
   }
   function check_length3_exn(name, l1, l2, l3){
    var match = of_lists$0(l1, l2, l3);
    if(0 === match[0]) return;
    var
     tail_of_c = match[4],
     tail_of_b = match[3],
     tail_of_a = match[2],
     shared_length = match[1],
     _by_ = caml_call1(length, tail_of_a),
     n1 = caml_call2(Base_Import[91], shared_length, _by_),
     _bz_ = caml_call1(length, tail_of_b),
     n2 = caml_call2(Base_Import[91], shared_length, _bz_),
     _bA_ = caml_call1(length, tail_of_c),
     n3 = caml_call2(Base_Import[91], shared_length, _bA_);
    return caml_call7(invalid_argf, _e_, name, n1, n2, n2, n3, 0);
   }
   function check_length3(l1, l2, l3, f){
    return 0 === of_lists$0(l1, l2, l3)[0]
            ? [0, caml_call3(f, l1, l2, l3)]
            : 0;
   }
   function iter2(l1, l2, f){
    return check_length2
            (l1,
             l2,
             function(_bv_){
              var _bw_ = caml_call1(iter2_ok, _bv_);
              return function(_bx_){return caml_call2(_bw_, _bx_, f);};
             });
   }
   function iter2_exn(l1, l2, f){
    check_length2_exn(cst_iter2_exn, l1, l2);
    return caml_call3(iter2_ok, l1, l2, f);
   }
   function rev_map2(l1, l2, f){
    return check_length2
            (l1,
             l2,
             function(_bs_){
              var _bt_ = caml_call1(rev_map2_ok, _bs_);
              return function(_bu_){return caml_call2(_bt_, _bu_, f);};
             });
   }
   function rev_map2_exn(l1, l2, f){
    check_length2_exn(cst_rev_map2_exn, l1, l2);
    return caml_call3(rev_map2_ok, l1, l2, f);
   }
   function fold2(l1, l2, init, f){
    return check_length2
            (l1,
             l2,
             function(_bp_){
              var _bq_ = caml_call1(fold2_ok, _bp_);
              return function(_br_){return caml_call3(_bq_, _br_, init, f);};
             });
   }
   function fold2_exn(l1, l2, init, f){
    check_length2_exn(cst_fold2_exn, l1, l2);
    return caml_call4(fold2_ok, l1, l2, init, f);
   }
   function fold_right2(l1, l2, f, init){
    return check_length2
            (l1,
             l2,
             function(_bm_){
              var _bn_ = caml_call1(fold_right2_ok, _bm_);
              return function(_bo_){return caml_call3(_bn_, _bo_, f, init);};
             });
   }
   function fold_right2_exn(l1, l2, f, init){
    check_length2_exn(cst_fold_right2_exn, l1, l2);
    return caml_call4(fold_right2_ok, l1, l2, f, init);
   }
   function for_all2(l1, l2, f){
    return check_length2
            (l1,
             l2,
             function(_bj_){
              var _bk_ = caml_call1(for_all2_ok, _bj_);
              return function(_bl_){return caml_call2(_bk_, _bl_, f);};
             });
   }
   function for_all2_exn(l1, l2, f){
    check_length2_exn(cst_for_all2_exn, l1, l2);
    return caml_call3(for_all2_ok, l1, l2, f);
   }
   function exists2(l1, l2, f){
    return check_length2
            (l1,
             l2,
             function(_bg_){
              var _bh_ = caml_call1(exists2_ok, _bg_);
              return function(_bi_){return caml_call2(_bh_, _bi_, f);};
             });
   }
   function exists2_exn(l1, l2, f){
    check_length2_exn(cst_exists2_exn, l1, l2);
    return caml_call3(exists2_ok, l1, l2, f);
   }
   function mem(t, a, equal){
    var param = t;
    for(;;){
     if(! param) return 0;
     var bs = param[2], b = param[1], _bf_ = caml_call2(equal, a, b);
     if(_bf_) return _bf_;
     var param = bs;
    }
   }
   function rev_filter(t, f){
    var accu = 0, param = t;
    for(;;){
     if(! param) return accu;
     var l = param[2], x = param[1];
     if(caml_call1(f, x))
      var accu$0 = [0, x, accu], accu = accu$0, param = l;
     else
      var param = l;
    }
   }
   function filter(l, f){
    var l$0 = l;
    for(;;){
     if(! l$0) return 0;
     var tl = l$0[2], hd = l$0[1];
     if(caml_call1(f, hd)){
      var block = [0, hd, 24029], dst = block, offset = 1, l$1 = tl;
      for(;;){
       if(! l$1){dst[1 + offset] = 0; return block;}
       var tl$0 = l$1[2], hd$0 = l$1[1];
       if(caml_call1(f, hd$0)){
        var dst$0 = [0, hd$0, 24029];
        dst[1 + offset] = dst$0;
        var dst = dst$0, offset = 1, l$1 = tl$0;
       }
       else
        var l$1 = tl$0;
      }
     }
     else
      var l$0 = tl;
    }
   }
   function find_map(t, f){
    var param = t;
    for(;;){
     if(! param) return 0;
     var l = param[2], x = param[1], r = caml_call1(f, x);
     if(r) return r;
     var param = l;
    }
   }
   var not_found = [0, Base_Import[297], _f_];
   function find_map_exn(t, f){
    var match = find_map(t, f);
    if(! match) throw caml_maybe_attach_backtrace(not_found, 1);
    var x = match[1];
    return x;
   }
   function find(t, f){
    var param = t;
    for(;;){
     if(! param) return 0;
     var l = param[2], x = param[1];
     if(caml_call1(f, x)) return [0, x];
     var param = l;
    }
   }
   var not_found$0 = [0, Base_Import[297], _g_];
   function find_exn(t, f){
    var t$0 = t;
    for(;;){
     if(! t$0) throw caml_maybe_attach_backtrace(not_found$0, 1);
     var t$1 = t$0[2], x = t$0[1];
     if(caml_call1(f, x)) return x;
     var t$0 = t$1;
    }
   }
   function findi(t, f){
    var i = 0, t$0 = t;
    for(;;){
     if(! t$0) return 0;
     var l = t$0[2], x = t$0[1];
     if(caml_call2(f, i, x)) return [0, [0, i, x]];
     var i$0 = caml_call2(Base_Import[91], i, 1), i = i$0, t$0 = l;
    }
   }
   var not_found$1 = [0, Base_Import[297], _h_];
   function findi_exn(t, f){
    var match = findi(t, f);
    if(! match) throw caml_maybe_attach_backtrace(not_found$1, 1);
    var x = match[1];
    return x;
   }
   function find_mapi(t, f){
    var i = 0, t$0 = t;
    for(;;){
     if(! t$0) return 0;
     var l = t$0[2], x = t$0[1], result = caml_call2(f, i, x);
     if(result) return result;
     var i$0 = caml_call2(Base_Import[91], i, 1), i = i$0, t$0 = l;
    }
   }
   var not_found$2 = [0, Base_Import[297], _i_];
   function find_mapi_exn(t, f){
    var match = find_mapi(t, f);
    if(! match) throw caml_maybe_attach_backtrace(not_found$2, 1);
    var x = match[1];
    return x;
   }
   function for_alli(t, f){
    var i = 0, t$0 = t;
    for(;;){
     if(! t$0) return 1;
     var tl = t$0[2], hd = t$0[1], _be_ = caml_call2(f, i, hd);
     if(! _be_) return _be_;
     var i$0 = caml_call2(Base_Import[91], i, 1), i = i$0, t$0 = tl;
    }
   }
   function existsi(t, f){
    var i = 0, t$0 = t;
    for(;;){
     if(! t$0) return 0;
     var tl = t$0[2], hd = t$0[1], _bd_ = caml_call2(f, i, hd);
     if(_bd_) return _bd_;
     var i$0 = caml_call2(Base_Import[91], i, 1), i = i$0, t$0 = tl;
    }
   }
   var of_array = Base_Array0[16], to_array = Base_Array0[14];
   function to_list(t){return t;}
   function append(l1$0, l2){
    if(! l2) return l1$0;
    if(! l1$0) return l2;
    var _a9_ = l1$0[2], x1 = l1$0[1];
    if(! _a9_) return [0, x1, l2];
    var _a__ = _a9_[2], x2 = _a9_[1];
    if(! _a__) return [0, x1, [0, x2, l2]];
    var _a$_ = _a__[2], x3 = _a__[1];
    if(! _a$_) return [0, x1, [0, x2, [0, x3, l2]]];
    var match = _a$_[2], x4 = _a$_[1];
    if(! match) return [0, x1, [0, x2, [0, x3, [0, x4, l2]]]];
    var
     tl = match[2],
     x5 = match[1],
     block = [0, x5, 24029],
     dst = block,
     offset = 1,
     l1 = tl;
    for(;;){
     if(l1){
      var _ba_ = l1[2], x1$0 = l1[1];
      if(_ba_){
       var _bb_ = _ba_[2], x2$0 = _ba_[1];
       if(_bb_){
        var _bc_ = _bb_[2], x3$0 = _bb_[1];
        if(_bc_){
         var match$0 = _bc_[2], x4$0 = _bc_[1];
         if(match$0){
          var tl$0 = match$0[2], x5$0 = match$0[1], dst$0 = [0, x5$0, 24029];
          dst[1 + offset] = [0, x1$0, [0, x2$0, [0, x3$0, [0, x4$0, dst$0]]]];
          var dst = dst$0, offset = 1, l1 = tl$0;
          continue;
         }
         dst[1 + offset] = [0, x1$0, [0, x2$0, [0, x3$0, [0, x4$0, l2]]]];
        }
        else
         dst[1 + offset] = [0, x1$0, [0, x2$0, [0, x3$0, l2]]];
       }
       else
        dst[1 + offset] = [0, x1$0, [0, x2$0, l2]];
      }
      else
       dst[1 + offset] = [0, x1$0, l2];
     }
     else
      dst[1 + offset] = l2;
     return [0, x1, [0, x2, [0, x3, [0, x4, block]]]];
    }
   }
   function map(l, f){
    if(! l) return 0;
    var
     tl = l[2],
     x = l[1],
     block = [0, caml_call1(f, x), 24029],
     dst = block,
     offset = 1,
     l$0 = tl;
    for(;;){
     if(! l$0){dst[1 + offset] = 0; return block;}
     var tl$0 = l$0[2], x$0 = l$0[1], dst$0 = [0, caml_call1(f, x$0), 24029];
     dst[1 + offset] = dst$0;
     var dst = dst$0, offset = 1, l$0 = tl$0;
    }
   }
   function folding_map(t, init, f){
    var acc = [0, init];
    return map
            (t,
             function(x){
              var
               match = caml_call2(f, acc[1], x),
               y = match[2],
               new_acc = match[1];
              acc[1] = new_acc;
              return y;
             });
   }
   function fold_map(t, init, f){
    var
     acc = [0, init],
     result =
       map
        (t,
         function(x){
          var
           match = caml_call2(f, acc[1], x),
           y = match[2],
           new_acc = match[1];
          acc[1] = new_acc;
          return y;
         });
    return [0, acc[1], result];
   }
   function symbol_map(l, f){return map(l, f);}
   function map2_ok(l1, l2, f){
    if(l1){
     if(l2){
      var
       l2$0 = l2[2],
       x2 = l2[1],
       l1$0 = l1[2],
       x1 = l1[1],
       block = [0, caml_call2(f, x1, x2), 24029],
       dst = block,
       offset = 1,
       l1$1 = l1$0,
       l2$1 = l2$0;
      for(;;){
       a:
       {
        if(l1$1){
         if(l2$1){
          var
           l2$2 = l2$1[2],
           x2$0 = l2$1[1],
           l1$2 = l1$1[2],
           x1$0 = l1$1[1],
           dst$0 = [0, caml_call2(f, x1$0, x2$0), 24029];
          dst[1 + offset] = dst$0;
          var dst = dst$0, offset = 1, l1$1 = l1$2, l2$1 = l2$2;
          continue;
         }
        }
        else if(! l2$1){dst[1 + offset] = 0; break a;}
        dst[1 + offset] = caml_call1(Base_Import[126], cst_List_map2$0);
       }
       return block;
      }
     }
    }
    else if(! l2) return 0;
    return caml_call1(Base_Import[126], cst_List_map2);
   }
   function map2(l1, l2, f){
    return check_length2
            (l1,
             l2,
             function(_a7_){
              return function(_a8_){return map2_ok(_a7_, _a8_, f);};
             });
   }
   function map2_exn(l1, l2, f){
    check_length2_exn(cst_map2_exn, l1, l2);
    return map2_ok(l1, l2, f);
   }
   function rev_map3_ok(l1, l2, l3, f){
    var l1$0 = l1, l2$0 = l2, l3$0 = l3, ac = 0;
    for(;;){
     if(l1$0){
      if(l2$0 && l3$0){
       var
        l3$1 = l3$0[2],
        x3 = l3$0[1],
        l2$1 = l2$0[2],
        x2 = l2$0[1],
        l1$1 = l1$0[2],
        x1 = l1$0[1],
        ac$0 = [0, caml_call3(f, x1, x2, x3), ac],
        l1$0 = l1$1,
        l2$0 = l2$1,
        l3$0 = l3$1,
        ac = ac$0;
       continue;
      }
     }
     else if(! l2$0 && ! l3$0) return ac;
     throw caml_maybe_attach_backtrace([0, Assert_failure, _j_], 1);
    }
   }
   function rev_map3(l1, l2, l3, f){
    return check_length3
            (l1,
             l2,
             l3,
             function(_a4_){
              return function(_a5_){
               return function(_a6_){
                return rev_map3_ok(_a4_, _a5_, _a6_, f);};};
             });
   }
   function rev_map3_exn(l1, l2, l3, f){
    check_length3_exn(cst_rev_map3_exn, l1, l2, l3);
    return rev_map3_ok(l1, l2, l3, f);
   }
   function map3_ok(l1, l2, l3, f){
    if(l1){
     if(l2 && l3){
      var
       l3$0 = l3[2],
       x3 = l3[1],
       l2$0 = l2[2],
       x2 = l2[1],
       l1$0 = l1[2],
       x1 = l1[1],
       block = [0, caml_call3(f, x1, x2, x3), 24029],
       dst = block,
       offset = 1,
       l1$1 = l1$0,
       l2$1 = l2$0,
       l3$1 = l3$0;
      for(;;){
       a:
       {
        if(l1$1){
         if(l2$1 && l3$1){
          var
           l3$2 = l3$1[2],
           x3$0 = l3$1[1],
           l2$2 = l2$1[2],
           x2$0 = l2$1[1],
           l1$2 = l1$1[2],
           x1$0 = l1$1[1],
           dst$0 = [0, caml_call3(f, x1$0, x2$0, x3$0), 24029];
          dst[1 + offset] = dst$0;
          var dst = dst$0, offset = 1, l1$1 = l1$2, l2$1 = l2$2, l3$1 = l3$2;
          continue;
         }
        }
        else if(! l2$1 && ! l3$1){dst[1 + offset] = 0; break a;}
        dst[1 + offset] = caml_call1(Base_Import[126], cst_List_map3$0);
       }
       return block;
      }
     }
    }
    else if(! l2 && ! l3) return 0;
    return caml_call1(Base_Import[126], cst_List_map3);
   }
   function map3(l1, l2, l3, f){
    return check_length3
            (l1,
             l2,
             l3,
             function(_a1_){
              return function(_a2_){
               return function(_a3_){return map3_ok(_a1_, _a2_, _a3_, f);};};
             });
   }
   function map3_exn(l1, l2, l3, f){
    check_length3_exn(cst_map3_exn, l1, l2, l3);
    return map3_ok(l1, l2, l3, f);
   }
   function rev_map_append(l1, l2, f){
    var l1$0 = l1, l2$0 = l2;
    for(;;){
     if(! l1$0) return l2$0;
     var
      l1$1 = l1$0[2],
      h = l1$0[1],
      l2$1 = [0, caml_call1(f, h), l2$0],
      l1$0 = l1$1,
      l2$0 = l2$1;
    }
   }
   function unzip(list){
    var list$2 = caml_call1(rev, list), list$0 = list$2, l1 = 0, l2 = 0;
    for(;;){
     if(! list$0) return [0, l1, l2];
     var
      list$1 = list$0[2],
      match = list$0[1],
      y = match[2],
      x = match[1],
      l2$0 = [0, y, l2],
      l1$0 = [0, x, l1],
      list$0 = list$1,
      l1 = l1$0,
      l2 = l2$0;
    }
   }
   function unzip3(list){
    var
     list$2 = caml_call1(rev, list),
     list$0 = list$2,
     l1 = 0,
     l2 = 0,
     l3 = 0;
    for(;;){
     if(! list$0) return [0, l1, l2, l3];
     var
      list$1 = list$0[2],
      match = list$0[1],
      z = match[3],
      y = match[2],
      x = match[1],
      l3$0 = [0, z, l3],
      l2$0 = [0, y, l2],
      l1$0 = [0, x, l1],
      list$0 = list$1,
      l1 = l1$0,
      l2 = l2$0,
      l3 = l3$0;
    }
   }
   function zip_exn(l1, l2){
    try{
     var _aZ_ = map2_ok(l1, l2, function(a, b){return [0, a, b];});
     return _aZ_;
    }
    catch(_a0_){
     var _aY_ = caml_call1(length, l2);
     return caml_call4(invalid_argf, _k_, caml_call1(length, l1), _aY_, 0);
    }
   }
   function zip(l1, l2){
    return map2(l1, l2, function(a, b){return [0, a, b];});
   }
   function rev_mapi(l, f){
    var i = 0, acc = 0, param = l;
    for(;;){
     if(! param) return acc;
     var
      t = param[2],
      h = param[1],
      acc$0 = [0, caml_call2(f, i, h), acc],
      i$0 = caml_call2(Base_Import[91], i, 1),
      i = i$0,
      acc = acc$0,
      param = t;
    }
   }
   function mapi(l, f){
    var i$2 = 0;
    if(! l) return 0;
    var
     t = l[2],
     h = l[1],
     block = [0, caml_call2(f, i$2, h), 24029],
     i = caml_call2(Base_Import[91], i$2, 1),
     dst = block,
     offset = 1,
     i$0 = i,
     param = t;
    for(;;){
     if(! param){dst[1 + offset] = 0; return block;}
     var
      t$0 = param[2],
      h$0 = param[1],
      block0_arg0 = caml_call2(f, i$0, h$0),
      block$0 = [0, block0_arg0, 24029];
     dst[1 + offset] = block$0;
     var
      i$1 = caml_call2(Base_Import[91], i$0, 1),
      dst = block$0,
      offset = 1,
      i$0 = i$1,
      param = t$0;
    }
   }
   function folding_mapi(t, init, f){
    var acc = [0, init];
    return mapi
            (t,
             function(i, x){
              var
               match = caml_call3(f, i, acc[1], x),
               y = match[2],
               new_acc = match[1];
              acc[1] = new_acc;
              return y;
             });
   }
   function fold_mapi(t, init, f){
    var
     acc = [0, init],
     result =
       mapi
        (t,
         function(i, x){
          var
           match = caml_call3(f, i, acc[1], x),
           y = match[2],
           new_acc = match[1];
          acc[1] = new_acc;
          return y;
         });
    return [0, acc[1], result];
   }
   function iteri(l, f){
    caml_call3
     (fold,
      l,
      0,
      function(i, x){
       caml_call2(f, i, x);
       return caml_call2(Base_Import[91], i, 1);
      });
    return 0;
   }
   function foldi(t, init, f){
    var
     _aW_ =
       caml_call3
        (fold,
         t,
         [0, 0, init],
         function(param, v){
          var acc = param[2], i = param[1], _aX_ = caml_call3(f, i, acc, v);
          return [0, caml_call2(Base_Import[91], i, 1), _aX_];
         });
    return caml_call1(Base_Import[127], _aW_);
   }
   function filteri(l, f){
    var pos = 0, l$0 = l;
    for(;;){
     if(! l$0) return 0;
     var tl = l$0[2], hd = l$0[1];
     if(caml_call2(f, pos, hd)) break;
     var pos$1 = caml_call2(Base_Import[91], pos, 1), pos = pos$1, l$0 = tl;
    }
    var
     block = [0, hd, 24029],
     pos$0 = caml_call2(Base_Import[91], pos, 1),
     dst = block,
     offset = 1,
     pos$2 = pos$0,
     l$1 = tl;
    for(;;){
     if(! l$1){dst[1 + offset] = 0; return block;}
     var tl$0 = l$1[2], hd$0 = l$1[1];
     if(caml_call2(f, pos$2, hd$0)){
      var block$0 = [0, hd$0, 24029];
      dst[1 + offset] = block$0;
      var
       pos$3 = caml_call2(Base_Import[91], pos$2, 1),
       dst = block$0,
       offset = 1,
       pos$2 = pos$3,
       l$1 = tl$0;
     }
     else
      var
       pos$4 = caml_call2(Base_Import[91], pos$2, 1),
       pos$2 = pos$4,
       l$1 = tl$0;
    }
   }
   function reduce(l, f){
    if(! l) return 0;
    var tl = l[2], hd = l[1];
    return [0, caml_call3(fold, tl, hd, f)];
   }
   function reduce_exn(l, f){
    var match = reduce(l, f);
    if(! match) return caml_call1(Base_Import[126], cst_List_reduce_exn);
    var v = match[1];
    return v;
   }
   function reduce_balanced(l, f){
    function step_accum(num, acc, x){
     var num$0 = num, acc$0 = acc, x$0 = x;
     for(;;){
      if(0 === caml_call2(Base_Import[116], num$0, 1)) return [0, x$0, acc$0];
      if(! acc$0)
       throw caml_maybe_attach_backtrace([0, Assert_failure, _l_], 1);
      var
       acc$1 = acc$0[2],
       y = acc$0[1],
       x$1 = caml_call2(f, y, x$0),
       num$1 = caml_call2(Base_Import[115], num$0, 1),
       num$0 = num$1,
       acc$0 = acc$1,
       x$0 = x$1;
     }
    }
    var match = foldi(l, 0, step_accum);
    if(! match) return 0;
    var xs = match[2], x = match[1];
    return [0,
            caml_call3
             (fold, xs, x, function(x, y){return caml_call2(f, y, x);})];
   }
   function reduce_balanced_exn(l, f){
    var match = reduce_balanced(l, f);
    if(! match)
     return caml_call1(Base_Import[126], cst_List_reduce_balanced_exn);
    var v = match[1];
    return v;
   }
   function groupi(l, break$0){
    var pos = [0, 0], l$0 = [0, l];
    function take_group(param){
     var group = l$0[1];
     if(group){
      var tl = group[2];
      if(tl){
       var y = tl[1], x = group[1];
       pos[1] = caml_call2(Base_Import[91], pos[1], 1);
       l$0[1] = tl;
       if(caml_call3(break$0, pos[1], x, y)) return [0, x, 0];
       var block = [0, x, 24029], dst = block, offset = 1;
       for(;;){
        var group$0 = l$0[1];
        a:
        {
         if(group$0){
          var tl$0 = group$0[2];
          if(tl$0){
           var y$0 = tl$0[1], x$0 = group$0[1];
           pos[1] = caml_call2(Base_Import[91], pos[1], 1);
           l$0[1] = tl$0;
           if(caml_call3(break$0, pos[1], x$0, y$0)){dst[1 + offset] = [0, x$0, 0]; break a;}
           var dst$0 = [0, x$0, 24029];
           dst[1 + offset] = dst$0;
           var dst = dst$0, offset = 1;
           continue;
          }
         }
         l$0[1] = 0;
         dst[1 + offset] = group$0;
        }
        return block;
       }
      }
     }
     l$0[1] = 0;
     return group;
    }
    if(caml_call1(is_empty, l$0[1])) return 0;
    var
     group = take_group(0),
     block = [0, group, 24029],
     dst = block,
     offset = 1;
    for(;;){
     if(caml_call1(is_empty, l$0[1])){dst[1 + offset] = 0; return block;}
     var group$0 = take_group(0), dst$0 = [0, group$0, 24029];
     dst[1 + offset] = dst$0;
     var dst = dst$0, offset = 1;
    }
   }
   function group(l, break$0){
    return groupi(l, function(param, x, y){return caml_call2(break$0, x, y);});
   }
   function merge(l1, l2, compare){
    if(! l1) return l2;
    if(! l2) return l1;
    var t2 = l2[2], h2 = l2[1], t1 = l1[2], h1 = l1[1];
    if(0 < caml_call2(compare, h1, h2)){
     var block = [0, h2, 24029];
     merge_dps(block, 1, l1, t2, compare);
     return block;
    }
    var block$0 = [0, h1, 24029];
    merge_dps(block$0, 1, t1, l2, compare);
    return block$0;
   }
   function merge_dps(dst, offset, l1, l2, compare){
    var dst$0 = dst, offset$0 = offset, l1$0 = l1, l2$0 = l2;
    for(;;){
     if(! l1$0){dst$0[1 + offset$0] = l2$0; return;}
     if(! l2$0){dst$0[1 + offset$0] = l1$0; return;}
     var t2 = l2$0[2], h2 = l2$0[1], t1 = l1$0[2], h1 = l1$0[1];
     if(0 < caml_call2(compare, h1, h2)){
      var dst$1 = [0, h2, 24029];
      dst$0[1 + offset$0] = dst$1;
      var dst$0 = dst$1, offset$0 = 1, l2$0 = t2;
     }
     else{
      var dst$2 = [0, h1, 24029];
      dst$0[1 + offset$0] = dst$2;
      var dst$0 = dst$2, offset$0 = 1, l1$0 = t1;
     }
    }
   }
   function stable_sort(l, cmp){
    function sort(n, l){
     if(2 === n){
      if(l){
       var match = l[2];
       if(match){
        var
         tl = match[2],
         x2 = match[1],
         x1 = l[1],
         s =
           0 < caml_call2(cmp, x1, x2)
            ? [0, x2, [0, x1, 0]]
            : [0, x1, [0, x2, 0]];
        return [0, s, tl];
       }
      }
     }
     else if(3 === n && l){
      var _aV_ = l[2];
      if(_aV_){
       var match$2 = _aV_[2];
       if(match$2){
        var
         tl$1 = match$2[2],
         x3 = match$2[1],
         x2$0 = _aV_[1],
         x1$0 = l[1],
         s$0 =
           0 < caml_call2(cmp, x1$0, x2$0)
            ? 0
              < caml_call2(cmp, x1$0, x3)
              ? 0
                < caml_call2(cmp, x2$0, x3)
                ? [0, x3, [0, x2$0, [0, x1$0, 0]]]
                : [0, x2$0, [0, x3, [0, x1$0, 0]]]
              : [0, x2$0, [0, x1$0, [0, x3, 0]]]
            : 0
              < caml_call2(cmp, x2$0, x3)
              ? 0
                < caml_call2(cmp, x1$0, x3)
                ? [0, x3, [0, x1$0, [0, x2$0, 0]]]
                : [0, x1$0, [0, x3, [0, x2$0, 0]]]
              : [0, x1$0, [0, x2$0, [0, x3, 0]]];
        return [0, s$0, tl$1];
       }
      }
     }
     var
      n1 = caml_call2(Base_Import[115], n, 1),
      n2 = caml_call2(Base_Import[93], n, n1),
      match$0 = rev_sort(n1, l),
      l2$0 = match$0[2],
      s1 = match$0[1],
      match$1 = rev_sort(n2, l2$0),
      tl$0 = match$1[2],
      s2 = match$1[1],
      l1 = s1,
      l2 = s2,
      accu = 0;
     for(;;){
      if(l1){
       if(l2){
        var t2 = l2[2], h2 = l2[1], t1 = l1[2], h1 = l1[1];
        if(0 < caml_call2(cmp, h1, h2)){
         var accu$0 = [0, h1, accu], l1 = t1, accu = accu$0;
         continue;
        }
        var accu$1 = [0, h2, accu], l2 = t2, accu = accu$1;
        continue;
       }
       var _aU_ = caml_call2(rev_append, l1, accu);
      }
      else
       var _aU_ = caml_call2(rev_append, l2, accu);
      return [0, _aU_, tl$0];
     }
    }
    function rev_sort(n, l){
     if(2 === n){
      if(l){
       var match = l[2];
       if(match){
        var
         tl = match[2],
         x2 = match[1],
         x1 = l[1],
         s =
           0 < caml_call2(cmp, x1, x2)
            ? [0, x1, [0, x2, 0]]
            : [0, x2, [0, x1, 0]];
        return [0, s, tl];
       }
      }
     }
     else if(3 === n && l){
      var _aT_ = l[2];
      if(_aT_){
       var match$2 = _aT_[2];
       if(match$2){
        var
         tl$1 = match$2[2],
         x3 = match$2[1],
         x2$0 = _aT_[1],
         x1$0 = l[1],
         s$0 =
           0 < caml_call2(cmp, x1$0, x2$0)
            ? 0
              < caml_call2(cmp, x2$0, x3)
              ? [0, x1$0, [0, x2$0, [0, x3, 0]]]
              : 0
                < caml_call2(cmp, x1$0, x3)
                ? [0, x1$0, [0, x3, [0, x2$0, 0]]]
                : [0, x3, [0, x1$0, [0, x2$0, 0]]]
            : 0
              < caml_call2(cmp, x1$0, x3)
              ? [0, x2$0, [0, x1$0, [0, x3, 0]]]
              : 0
                < caml_call2(cmp, x2$0, x3)
                ? [0, x2$0, [0, x3, [0, x1$0, 0]]]
                : [0, x3, [0, x2$0, [0, x1$0, 0]]];
        return [0, s$0, tl$1];
       }
      }
     }
     var
      n1 = caml_call2(Base_Import[115], n, 1),
      n2 = caml_call2(Base_Import[93], n, n1),
      match$0 = sort(n1, l),
      l2$0 = match$0[2],
      s1 = match$0[1],
      match$1 = sort(n2, l2$0),
      tl$0 = match$1[2],
      s2 = match$1[1],
      l1 = s1,
      l2 = s2,
      accu = 0;
     for(;;){
      if(l1){
       if(l2){
        var t2 = l2[2], h2 = l2[1], t1 = l1[2], h1 = l1[1];
        if(0 < caml_call2(cmp, h1, h2)){
         var accu$0 = [0, h2, accu], l2 = t2, accu = accu$0;
         continue;
        }
        var accu$1 = [0, h1, accu], l1 = t1, accu = accu$1;
        continue;
       }
       var _aS_ = caml_call2(rev_append, l1, accu);
      }
      else
       var _aS_ = caml_call2(rev_append, l2, accu);
      return [0, _aS_, tl$0];
     }
    }
    var len = caml_call1(length, l);
    if(2 > len) return l;
    var _aR_ = sort(len, l);
    return caml_call1(Base_Import[125], _aR_);
   }
   function sort_and_group(l, compare){
    var _aQ_ = stable_sort(l, compare);
    return group
            (_aQ_,
             function(x, y){return 0 !== caml_call2(compare, x, y) ? 1 : 0;});
   }
   function dedup_and_sort(l, cmp){
    function sort(n, l){
     if(2 === n){
      if(l){
       var match = l[2];
       if(match){
        var
         tl = match[2],
         x2 = match[1],
         x1 = l[1],
         c$0 = caml_call2(cmp, x1, x2);
        if(0 <= c$0)
         var _aC_ = 0 < c$0 ? [0, x2, [0, x1, 0]] : [0, x2, 0], s = _aC_;
        else
         var s = [0, x1, [0, x2, 0]];
        return [0, s, tl];
       }
      }
     }
     else if(3 === n && l){
      var _aE_ = l[2];
      if(_aE_){
       var match$2 = _aE_[2];
       if(match$2){
        var
         tl$1 = match$2[2],
         x3 = match$2[1],
         x2$0 = _aE_[1],
         x1$0 = l[1],
         c$1 = caml_call2(cmp, x1$0, x2$0);
        if(0 <= c$1){
         if(0 < c$1){
          var c$2 = caml_call2(cmp, x1$0, x3);
          if(0 <= c$2){
           if(0 < c$2){
            var c$3 = caml_call2(cmp, x2$0, x3);
            if(0 <= c$3)
             var
              _aF_ =
                0 < c$3
                 ? [0, x3, [0, x2$0, [0, x1$0, 0]]]
                 : [0, x3, [0, x1$0, 0]],
              _aG_ = _aF_;
            else
             var _aG_ = [0, x2$0, [0, x3, [0, x1$0, 0]]];
            var _aH_ = _aG_;
           }
           else
            var _aH_ = [0, x2$0, [0, x3, 0]];
           var _aI_ = _aH_;
          }
          else
           var _aI_ = [0, x2$0, [0, x1$0, [0, x3, 0]]];
          var _aJ_ = _aI_;
         }
         else{
          var c$4 = caml_call2(cmp, x2$0, x3);
          if(0 <= c$4)
           var
            _aK_ = 0 < c$4 ? [0, x3, [0, x2$0, 0]] : [0, x3, 0],
            _aL_ = _aK_;
          else
           var _aL_ = [0, x2$0, [0, x3, 0]];
          var _aJ_ = _aL_;
         }
         var s$0 = _aJ_;
        }
        else{
         var c$5 = caml_call2(cmp, x2$0, x3);
         if(0 <= c$5){
          if(0 < c$5){
           var c$6 = caml_call2(cmp, x1$0, x3);
           if(0 <= c$6)
            var
             _aM_ =
               0 < c$6
                ? [0, x3, [0, x1$0, [0, x2$0, 0]]]
                : [0, x3, [0, x2$0, 0]],
             _aN_ = _aM_;
           else
            var _aN_ = [0, x1$0, [0, x3, [0, x2$0, 0]]];
           var _aO_ = _aN_;
          }
          else
           var _aO_ = [0, x1$0, [0, x3, 0]];
          var _aP_ = _aO_;
         }
         else
          var _aP_ = [0, x1$0, [0, x2$0, [0, x3, 0]]];
         var s$0 = _aP_;
        }
        return [0, s$0, tl$1];
       }
      }
     }
     var
      n1 = caml_call2(Base_Import[115], n, 1),
      n2 = caml_call2(Base_Import[93], n, n1),
      match$0 = rev_sort(n1, l),
      l2$0 = match$0[2],
      s1 = match$0[1],
      match$1 = rev_sort(n2, l2$0),
      tl$0 = match$1[2],
      s2 = match$1[1],
      l1 = s1,
      l2 = s2,
      accu = 0;
     for(;;){
      if(l1){
       if(l2){
        var
         t2 = l2[2],
         h2 = l2[1],
         t1 = l1[2],
         h1 = l1[1],
         c = caml_call2(cmp, h1, h2);
        if(0 < c){
         var accu$0 = [0, h1, accu], l1 = t1, accu = accu$0;
         continue;
        }
        if(0 <= c){var l1 = t1; continue;}
        var accu$1 = [0, h2, accu], l2 = t2, accu = accu$1;
        continue;
       }
       var _aD_ = caml_call2(rev_append, l1, accu);
      }
      else
       var _aD_ = caml_call2(rev_append, l2, accu);
      return [0, _aD_, tl$0];
     }
    }
    function rev_sort(n, l){
     if(2 === n){
      if(l){
       var match = l[2];
       if(match){
        var
         tl = match[2],
         x2 = match[1],
         x1 = l[1],
         c$0 = caml_call2(cmp, x1, x2);
        if(0 < c$0)
         var s = [0, x1, [0, x2, 0]];
        else
         var _ao_ = 0 <= c$0 ? [0, x2, 0] : [0, x2, [0, x1, 0]], s = _ao_;
        return [0, s, tl];
       }
      }
     }
     else if(3 === n && l){
      var _aq_ = l[2];
      if(_aq_){
       var match$2 = _aq_[2];
       if(match$2){
        var
         tl$1 = match$2[2],
         x3 = match$2[1],
         x2$0 = _aq_[1],
         x1$0 = l[1],
         c$1 = caml_call2(cmp, x1$0, x2$0);
        if(0 < c$1){
         var c$2 = caml_call2(cmp, x2$0, x3);
         if(0 < c$2)
          var _ar_ = [0, x1$0, [0, x2$0, [0, x3, 0]]];
         else{
          if(0 <= c$2)
           var _as_ = [0, x1$0, [0, x3, 0]];
          else{
           var c$3 = caml_call2(cmp, x1$0, x3);
           if(0 < c$3)
            var _at_ = [0, x1$0, [0, x3, [0, x2$0, 0]]];
           else
            var
             _au_ =
               0 <= c$3
                ? [0, x3, [0, x2$0, 0]]
                : [0, x3, [0, x1$0, [0, x2$0, 0]]],
             _at_ = _au_;
           var _as_ = _at_;
          }
          var _ar_ = _as_;
         }
         var s$0 = _ar_;
        }
        else{
         if(0 <= c$1){
          var c$4 = caml_call2(cmp, x2$0, x3);
          if(0 < c$4)
           var _av_ = [0, x2$0, [0, x3, 0]];
          else
           var
            _ax_ = 0 <= c$4 ? [0, x3, 0] : [0, x3, [0, x2$0, 0]],
            _av_ = _ax_;
          var _aw_ = _av_;
         }
         else{
          var c$5 = caml_call2(cmp, x1$0, x3);
          if(0 < c$5)
           var _ay_ = [0, x2$0, [0, x1$0, [0, x3, 0]]];
          else{
           if(0 <= c$5)
            var _az_ = [0, x2$0, [0, x3, 0]];
           else{
            var c$6 = caml_call2(cmp, x2$0, x3);
            if(0 < c$6)
             var _aA_ = [0, x2$0, [0, x3, [0, x1$0, 0]]];
            else
             var
              _aB_ =
                0 <= c$6
                 ? [0, x3, [0, x1$0, 0]]
                 : [0, x3, [0, x2$0, [0, x1$0, 0]]],
              _aA_ = _aB_;
            var _az_ = _aA_;
           }
           var _ay_ = _az_;
          }
          var _aw_ = _ay_;
         }
         var s$0 = _aw_;
        }
        return [0, s$0, tl$1];
       }
      }
     }
     var
      n1 = caml_call2(Base_Import[115], n, 1),
      n2 = caml_call2(Base_Import[93], n, n1),
      match$0 = sort(n1, l),
      l2$0 = match$0[2],
      s1 = match$0[1],
      match$1 = sort(n2, l2$0),
      tl$0 = match$1[2],
      s2 = match$1[1],
      l1 = s1,
      l2 = s2,
      accu = 0;
     for(;;){
      if(l1){
       if(l2){
        var
         t2 = l2[2],
         h2 = l2[1],
         t1 = l1[2],
         h1 = l1[1],
         c = caml_call2(cmp, h1, h2);
        if(0 > c){
         var accu$1 = [0, h1, accu], l1 = t1, accu = accu$1;
         continue;
        }
        if(0 < c){
         var accu$0 = [0, h2, accu], l2 = t2, accu = accu$0;
         continue;
        }
        var l1 = t1;
        continue;
       }
       var _ap_ = caml_call2(rev_append, l1, accu);
      }
      else
       var _ap_ = caml_call2(rev_append, l2, accu);
      return [0, _ap_, tl$0];
     }
    }
    var len = caml_call1(length, l);
    if(2 > len) return l;
    var _an_ = sort(len, l);
    return caml_call1(Base_Import[125], _an_);
   }
   function stable_dedup(list, compare){
    if(list && list[2]){
     var
      dedups = caml_call2(rev_map, list, function(elt){return [0, elt, 1];}),
      unique =
        dedup_and_sort
         (dedups, function(x, y){return caml_call2(compare, x[1], y[1]);});
     caml_call2(iter, unique, function(dedup){dedup[2] = 0; return 0;});
     return caml_call3
             (fold,
              dedups,
              0,
              function(acc, dedup){
               return dedup[2] ? acc : [0, dedup[1], acc];
              });
    }
    return list;
   }
   function concat_mapi(l, f){
    function outer_loop_dps$0(counter, dst, offset, pos, param){
     if(! param){dst[1 + offset] = 0; return;}
     var tl = param[2], hd = param[1];
     if(! tl){dst[1 + offset] = caml_call2(f, pos, hd); return;}
     var
      _al_ = caml_call2(f, pos, hd),
      _am_ = caml_call2(Base_Import[91], pos, 1);
     if(counter >= 50)
      return caml_trampoline_return
              (inner_loop_dps$0, [0, dst, offset, _am_, _al_, tl]);
     var counter$0 = counter + 1 | 0;
     return inner_loop_dps$0(counter$0, dst, offset, _am_, _al_, tl);
    }
    function inner_loop_dps$0(counter, dst, offset, pos, l1, l2){
     var dst$0 = dst, offset$0 = offset, l1$0 = l1;
     for(;;){
      if(! l1$0){
       if(counter >= 50)
        return caml_trampoline_return
                (outer_loop_dps$0, [0, dst$0, offset$0, pos, l2]);
       var counter$4 = counter + 1 | 0;
       return outer_loop_dps$0(counter$4, dst$0, offset$0, pos, l2);
      }
      var _aa_ = l1$0[2], x1 = l1$0[1];
      if(! _aa_){
       var _aj_ = [0, x1, 24029];
       dst$0[1 + offset$0] = _aj_;
       var _ak_ = 1;
       if(counter >= 50)
        return caml_trampoline_return
                (outer_loop_dps$0, [0, _aj_, _ak_, pos, l2]);
       var counter$3 = counter + 1 | 0;
       return outer_loop_dps$0(counter$3, _aj_, _ak_, pos, l2);
      }
      var _ab_ = _aa_[2], x2 = _aa_[1];
      if(! _ab_){
       var _ah_ = [0, x2, 24029];
       dst$0[1 + offset$0] = [0, x1, _ah_];
       var _ai_ = 1;
       if(counter >= 50)
        return caml_trampoline_return
                (outer_loop_dps$0, [0, _ah_, _ai_, pos, l2]);
       var counter$2 = counter + 1 | 0;
       return outer_loop_dps$0(counter$2, _ah_, _ai_, pos, l2);
      }
      var _ac_ = _ab_[2], x3 = _ab_[1];
      if(! _ac_){
       var _af_ = [0, x3, 24029];
       dst$0[1 + offset$0] = [0, x1, [0, x2, _af_]];
       var _ag_ = 1;
       if(counter >= 50)
        return caml_trampoline_return
                (outer_loop_dps$0, [0, _af_, _ag_, pos, l2]);
       var counter$1 = counter + 1 | 0;
       return outer_loop_dps$0(counter$1, _af_, _ag_, pos, l2);
      }
      var match = _ac_[2], x4 = _ac_[1];
      if(! match){
       var _ad_ = [0, x4, 24029];
       dst$0[1 + offset$0] = [0, x1, [0, x2, [0, x3, _ad_]]];
       var _ae_ = 1;
       if(counter >= 50)
        return caml_trampoline_return
                (outer_loop_dps$0, [0, _ad_, _ae_, pos, l2]);
       var counter$0 = counter + 1 | 0;
       return outer_loop_dps$0(counter$0, _ad_, _ae_, pos, l2);
      }
      var tl = match[2], x5 = match[1], dst$1 = [0, x5, 24029];
      dst$0[1 + offset$0] = [0, x1, [0, x2, [0, x3, [0, x4, dst$1]]]];
      var dst$0 = dst$1, offset$0 = 1, l1$0 = tl;
     }
    }
    function outer_loop_dps(dst, offset, pos, param){
     return caml_trampoline(outer_loop_dps$0(0, dst, offset, pos, param));
    }
    function inner_loop_dps(dst, offset, pos, l1, l2){
     return caml_trampoline(inner_loop_dps$0(0, dst, offset, pos, l1, l2));
    }
    var pos = 0, param = l;
    for(;;){
     if(! param) return 0;
     var tl = param[2], hd = param[1];
     if(! tl) return caml_call2(f, pos, hd);
     var
      l1 = caml_call2(f, pos, hd),
      pos$0 = caml_call2(Base_Import[91], pos, 1);
     if(l1) break;
     var pos = pos$0, param = tl;
    }
    var _Z_ = l1[2], x1 = l1[1];
    if(! _Z_){
     var block$3 = [0, x1, 24029];
     outer_loop_dps(block$3, 1, pos$0, tl);
     return block$3;
    }
    var ___ = _Z_[2], x2 = _Z_[1];
    if(! ___){
     var block$2 = [0, x2, 24029];
     outer_loop_dps(block$2, 1, pos$0, tl);
     return [0, x1, block$2];
    }
    var _$_ = ___[2], x3 = ___[1];
    if(! _$_){
     var block$1 = [0, x3, 24029];
     outer_loop_dps(block$1, 1, pos$0, tl);
     return [0, x1, [0, x2, block$1]];
    }
    var match = _$_[2], x4 = _$_[1];
    if(match){
     var tl$0 = match[2], x5 = match[1], block = [0, x5, 24029];
     inner_loop_dps(block, 1, pos$0, tl$0, tl);
     return [0, x1, [0, x2, [0, x3, [0, x4, block]]]];
    }
    var block$0 = [0, x4, 24029];
    outer_loop_dps(block$0, 1, pos$0, tl);
    return [0, x1, [0, x2, [0, x3, block$0]]];
   }
   function concat_map(l, f){
    return concat_mapi(l, function(param, x){return caml_call1(f, x);});
   }
   function map2$0(a, b, f){
    return concat_map
            (a,
             function(x){
              return map(b, function(y){return caml_call2(f, x, y);});
             });
   }
   function symbol_bind(t, f){return concat_map(t, f);}
   var
    map$0 = [0, -198771759, map],
    Applicative =
      caml_call1(Base_Applicative[13], [0, singleton, map2$0, map$0]),
    map$1 = [0, -198771759, map],
    Monad = caml_call1(Base_Monad[1], [0, concat_map, singleton, map$1]),
    all = Monad[9],
    all_unit = Monad[10],
    ignore_m = Monad[8],
    join = Monad[7],
    apply = Applicative[8],
    both = Applicative[3],
    map3$0 = Applicative[10],
    symbol = Applicative[4],
    symbol$0 = Applicative[6],
    symbol$1 = Applicative[5],
    symbol$2 = Applicative[4],
    symbol$3 = Applicative[6],
    symbol$4 = Applicative[5],
    Open_on_rhs = [0],
    Let_syntax = [0, singleton, concat_map, map, both, Open_on_rhs],
    Let_syntax$0 = [0, singleton, symbol_bind, symbol_map, Let_syntax],
    Monad_infix = [0, symbol_bind, symbol_map];
   function last_exn(list){
    var list$0 = list;
    for(;;){
     if(! list$0) return caml_call1(Base_Import[126], cst_List_last);
     var x = list$0[1];
     if(! list$0[2]) return x;
     var list$1 = list$0[2], list$0 = list$1;
    }
   }
   function last(list){
    var list$0 = list;
    for(;;){
     if(! list$0) return 0;
     var x = list$0[1];
     if(! list$0[2]) return [0, x];
     var list$1 = list$0[2], list$0 = list$1;
    }
   }
   function is_prefix(list, prefix, equal){
    var list$0 = list, prefix$0 = prefix;
    for(;;){
     if(! prefix$0) return 1;
     var prefix$1 = prefix$0[2], hd = prefix$0[1];
     if(! list$0) return 0;
     var
      list$1 = list$0[2],
      hd$0 = list$0[1],
      _Y_ = caml_call2(equal, hd, hd$0);
     if(! _Y_) return _Y_;
     var list$0 = list$1, prefix$0 = prefix$1;
    }
   }
   function find_consecutive_duplicate(t, equal){
    if(! t) return 0;
    var t$0 = t[2], a1 = t[1], a1$0 = a1, t$1 = t$0;
    for(;;){
     if(! t$1) return 0;
     var t$2 = t$1[2], a2 = t$1[1];
     if(caml_call2(equal, a1$0, a2)) return [0, [0, a1$0, a2]];
     var a1$0 = a2, t$1 = t$2;
    }
   }
   function remove_consecutive_duplicates(opt, list, equal){
    if(opt)
     var sth = opt[1], which_to_keep = sth;
    else
     var which_to_keep = 847656566;
    if(! list) return 0;
    var
     tl$0 = list[2],
     to_keep$2 = list[1],
     to_keep = to_keep$2,
     accum = 0,
     param = tl$0;
    for(;;){
     if(! param) return caml_call1(rev, [0, to_keep, accum]);
     var tl = param[2], to_keep$0 = param[1];
     if(caml_call2(equal, to_keep$0, to_keep))
      var
       to_keep$1 = 847656566 <= which_to_keep ? to_keep$0 : to_keep,
       to_keep = to_keep$1,
       param = tl;
     else
      var
       accum$0 = [0, to_keep, accum],
       to_keep = to_keep$0,
       accum = accum$0,
       param = tl;
    }
   }
   function find_a_dup(l, compare){
    var sorted = stable_sort(l, compare), l$0 = sorted;
    for(;;){
     if(l$0){
      var tl = l$0[2];
      if(tl){
       var hd2 = tl[1], hd1 = l$0[1];
       if(0 === caml_call2(compare, hd1, hd2)) return [0, hd1];
       var l$0 = tl;
       continue;
      }
     }
     return 0;
    }
   }
   function contains_dup(lst, compare){
    return find_a_dup(lst, compare) ? 1 : 0;
   }
   function find_all_dups(l, compare){
    var sorted = stable_sort(l, compare);
    if(! sorted) return 0;
    var
     sorted$4 = sorted[2],
     prev$3 = sorted[1],
     sorted$0 = sorted$4,
     prev = prev$3,
     already_recorded = 0;
    for(;;){
     if(! sorted$0) return 0;
     var sorted$1 = sorted$0[2], prev$0 = sorted$0[1];
     if(0 === caml_call2(compare, prev, prev$0)){
      if(! already_recorded) break;
      var sorted$0 = sorted$1, prev = prev$0, already_recorded = 1;
     }
     else
      var sorted$0 = sorted$1, prev = prev$0, already_recorded = 0;
    }
    var
     block = [0, prev$0, 24029],
     dst = block,
     offset = 1,
     sorted$2 = sorted$1,
     prev$1 = prev$0,
     already_recorded$0 = 1;
    for(;;){
     if(! sorted$2){dst[1 + offset] = 0; return block;}
     var sorted$3 = sorted$2[2], prev$2 = sorted$2[1];
     if(0 === caml_call2(compare, prev$1, prev$2))
      if(already_recorded$0)
       var sorted$2 = sorted$3, prev$1 = prev$2, already_recorded$0 = 1;
      else{
       var dst$0 = [0, prev$2, 24029];
       dst[1 + offset] = dst$0;
       var
        dst = dst$0,
        offset = 1,
        sorted$2 = sorted$3,
        prev$1 = prev$2,
        already_recorded$0 = 1;
      }
     else
      var sorted$2 = sorted$3, prev$1 = prev$2, already_recorded$0 = 0;
    }
   }
   function all_equal(t$0, equal){
    if(! t$0) return 0;
    var xs$0 = t$0[2], x$0 = t$0[1], t = xs$0;
    for(;;){
     if(t){
      var xs = t[2], x = t[1], _W_ = caml_call2(equal, x, x$0);
      if(_W_){var t = xs; continue;}
      var _X_ = _W_;
     }
     else
      var _X_ = 1;
     return _X_ ? [0, x$0] : 0;
    }
   }
   function count(t, f){return caml_call3(Base_Container[2], fold, t, f);}
   function sum(m, t, f){return caml_call4(Base_Container[7], fold, m, t, f);}
   function min_elt(t, compare){
    return caml_call3(Base_Container[3], fold, t, compare);
   }
   function max_elt(t, compare){
    return caml_call3(Base_Container[4], fold, t, compare);
   }
   function counti(t, f){
    return foldi
            (t,
             0,
             function(idx, count, a){
              return caml_call2(f, idx, a)
                      ? caml_call2(Base_Import[91], count, 1)
                      : count;
             });
   }
   function init(n, f){
    if(n < 0) caml_call3(invalid_argf, _m_, n, 0);
    var i = n, accum = 0;
    for(;;){
     if(0 > i) throw caml_maybe_attach_backtrace([0, Assert_failure, _n_], 1);
     if(0 === i) return accum;
     var
      accum$0 = [0, caml_call1(f, caml_call2(Base_Import[93], i, 1)), accum],
      i$0 = caml_call2(Base_Import[93], i, 1),
      i = i$0,
      accum = accum$0;
    }
   }
   function rev_filter_map(l, f){
    var l$0 = l, accum = 0;
    for(;;){
     if(! l$0) return accum;
     var tl = l$0[2], hd = l$0[1], match = caml_call1(f, hd);
     if(match)
      var x = match[1], accum$0 = [0, x, accum], l$0 = tl, accum = accum$0;
     else
      var l$0 = tl;
    }
   }
   function filter_map(l, f){
    var l$0 = l;
    for(;;){
     if(! l$0) return 0;
     var tl = l$0[2], hd = l$0[1], match = caml_call1(f, hd);
     if(match){
      var
       x = match[1],
       block = [0, x, 24029],
       dst = block,
       offset = 1,
       l$1 = tl;
      for(;;){
       if(! l$1){dst[1 + offset] = 0; return block;}
       var tl$0 = l$1[2], hd$0 = l$1[1], match$0 = caml_call1(f, hd$0);
       if(match$0){
        var x$0 = match$0[1], dst$0 = [0, x$0, 24029];
        dst[1 + offset] = dst$0;
        var dst = dst$0, offset = 1, l$1 = tl$0;
       }
       else
        var l$1 = tl$0;
      }
     }
     else
      var l$0 = tl;
    }
   }
   function rev_filter_mapi(l, f){
    var i = 0, l$0 = l, accum = 0;
    for(;;){
     if(! l$0) return accum;
     var tl = l$0[2], hd = l$0[1], match = caml_call2(f, i, hd);
     if(match)
      var
       x = match[1],
       accum$0 = [0, x, accum],
       i$0 = caml_call2(Base_Import[91], i, 1),
       i = i$0,
       l$0 = tl,
       accum = accum$0;
     else
      var i$1 = caml_call2(Base_Import[91], i, 1), i = i$1, l$0 = tl;
    }
   }
   function filter_mapi(l, f){
    var pos = 0, l$0 = l;
    for(;;){
     if(! l$0) return 0;
     var tl = l$0[2], hd = l$0[1], match = caml_call2(f, pos, hd);
     if(match) break;
     var pos$1 = caml_call2(Base_Import[91], pos, 1), pos = pos$1, l$0 = tl;
    }
    var
     x = match[1],
     block = [0, x, 24029],
     pos$0 = caml_call2(Base_Import[91], pos, 1),
     dst = block,
     offset = 1,
     pos$2 = pos$0,
     l$1 = tl;
    for(;;){
     if(! l$1){dst[1 + offset] = 0; return block;}
     var tl$0 = l$1[2], hd$0 = l$1[1], match$0 = caml_call2(f, pos$2, hd$0);
     if(match$0){
      var x$0 = match$0[1], block$0 = [0, x$0, 24029];
      dst[1 + offset] = block$0;
      var
       pos$3 = caml_call2(Base_Import[91], pos$2, 1),
       dst = block$0,
       offset = 1,
       pos$2 = pos$3,
       l$1 = tl$0;
     }
     else
      var
       pos$4 = caml_call2(Base_Import[91], pos$2, 1),
       pos$2 = pos$4,
       l$1 = tl$0;
    }
   }
   function filter_opt(l){return filter_map(l, function(_V_){return _V_;});}
   function partition3_map(t, f){
    var t$0 = t, fst = 0, snd = 0, trd = 0;
    for(;;){
     if(! t$0){
      var _T_ = caml_call1(rev, trd), _U_ = caml_call1(rev, snd);
      return [0, caml_call1(rev, fst), _U_, _T_];
     }
     var t$1 = t$0[2], x = t$0[1], match = caml_call1(f, x), _S_ = match[1];
     if(4152137 === _S_)
      var y = match[2], snd$0 = [0, y, snd], t$0 = t$1, snd = snd$0;
     else if(4202758 <= _S_)
      var y$0 = match[2], trd$0 = [0, y$0, trd], t$0 = t$1, trd = trd$0;
     else
      var y$1 = match[2], fst$0 = [0, y$1, fst], t$0 = t$1, fst = fst$0;
    }
   }
   function partition_tf(t, f){
    function f$0(x){return caml_call1(f, x) ? [0, x] : [1, x];}
    return caml_call2(partition_map, t, f$0);
   }
   function partition_result(t){
    return caml_call2(partition_map, t, Base_Result[38]);
   }
   function t_of_sexp$0(of_a_028, of_b_029, x_037){
    function _P_(sexp_035){
     if(1 === sexp_035[0]){
      var _Q_ = sexp_035[1];
      if(_Q_){
       var _R_ = _Q_[2];
       if(_R_ && ! _R_[2]){
        var
         arg1_032 = _R_[1],
         arg0_031 = _Q_[1],
         res0_033 = caml_call1(of_a_028, arg0_031),
         res1_034 = caml_call1(of_b_029, arg1_032);
        return [0, res0_033, res1_034];
       }
      }
     }
     return caml_call3
             (Sexplib0_Sexp_conv_error[4], error_source_036, 2, sexp_035);
    }
    return caml_call2(Base_Import[173], _P_, x_037);
   }
   function sexp_of_t$1(of_a_038, of_b_039, x_044){
    function _O_(param){
     var
      arg1_041 = param[2],
      arg0_040 = param[1],
      res0_042 = caml_call1(of_a_038, arg0_040),
      res1_043 = caml_call1(of_b_039, arg1_041);
     return [1, [0, res0_042, [0, res1_043, 0]]];
    }
    return caml_call2(Base_Import[149], _O_, x_044);
   }
   function t_sexp_grammar$0(a_sexp_grammar, b_sexp_grammar){
    var
     _N_ =
       caml_call1
        (Base_Import[194],
         [2,
          [0,
           [5, [0, Sexplib0_Sexp_grammar[6], _o_, a_sexp_grammar]],
           [0, [5, [0, Sexplib0_Sexp_grammar[7], _p_, b_sexp_grammar]], 0]]]);
    return [5, [0, Sexplib0_Sexp_grammar[5], _q_, _N_]];
   }
   function pair_of_group(list){
    if(! list) throw caml_maybe_attach_backtrace([0, Assert_failure, _r_], 1);
    var k = list[1][1];
    return [0, k, map(list, Base_Import[127])];
   }
   function group$0(alist, equal){
    return map
            (group
              (alist,
               function(param, _M_){
                var y = _M_[1], x = param[1];
                return 1 - caml_call2(equal, x, y);
               }),
             pair_of_group);
   }
   function sort_and_group$0(alist, compare){
    return map
            (sort_and_group
              (alist,
               function(param, _L_){
                var y = _L_[1], x = param[1];
                return caml_call2(compare, x, y);
               }),
             pair_of_group);
   }
   function find$0(t, equal, key){
    var
     match =
       find
        (t,
         function(param){
          var key$0 = param[1];
          return caml_call2(equal, key, key$0);
         });
    if(! match) return 0;
    var x = match[1];
    return [0, caml_call1(Base_Import[127], x)];
   }
   var not_found$3 = [0, Base_Import[297], _s_];
   function find_exn$0(t, equal, key){
    var t$0 = t;
    for(;;){
     if(! t$0) throw caml_maybe_attach_backtrace(not_found$3, 1);
     var t$1 = t$0[2], match = t$0[1], value = match[2], key$0 = match[1];
     if(caml_call2(equal, key, key$0)) return value;
     var t$0 = t$1;
    }
   }
   function mem$0(t, equal, key){return find$0(t, equal, key) ? 1 : 0;}
   function remove(t, equal, key){
    return filter
            (t,
             function(param){
              var key$0 = param[1];
              return 1 - caml_call2(equal, key, key$0);
             });
   }
   function add(t, equal, key, value){
    return [0, [0, key, value], remove(t, equal, key)];
   }
   function inverse(t){
    return map
            (t,
             function(param){
              var y = param[2], x = param[1];
              return [0, y, x];
             });
   }
   function map$2(t, f){
    return map
            (t,
             function(param){
              var value = param[2], key = param[1];
              return [0, key, caml_call1(f, value)];
             });
   }
   function sub(l, pos, len){
    var _H_ = pos < 0 ? 1 : 0;
    if(_H_)
     var _I_ = _H_;
    else{
     var _J_ = len < 0 ? 1 : 0;
     if(_J_)
      var _I_ = _J_;
     else
      var
       _K_ = caml_call1(length, l),
       _I_ = caml_call2(Base_Import[93], _K_, len) < pos ? 1 : 0;
    }
    if(_I_) caml_call1(Base_Import[126], cst_List_sub);
    var stop = caml_call2(Base_Import[91], pos, len), i = 0, l$0 = l;
    for(;;){
     if(! l$0) return 0;
     var tl = l$0[2], hd = l$0[1];
     if(i >= pos) break;
     var i$0 = caml_call2(Base_Import[91], i, 1), i = i$0, l$0 = tl;
    }
    if(i >= stop) return 0;
    var
     block = [0, hd, 24029],
     i$1 = caml_call2(Base_Import[91], i, 1),
     dst = block,
     offset = 1,
     i$2 = i$1,
     l$1 = tl;
    for(;;){
     if(l$1){
      var tl$0 = l$1[2], hd$0 = l$1[1];
      if(i$2 < pos){
       var i$3 = caml_call2(Base_Import[91], i$2, 1), i$2 = i$3, l$1 = tl$0;
       continue;
      }
      if(i$2 < stop){
       var block$0 = [0, hd$0, 24029];
       dst[1 + offset] = block$0;
       var
        i$4 = caml_call2(Base_Import[91], i$2, 1),
        dst = block$0,
        offset = 1,
        i$2 = i$4,
        l$1 = tl$0;
       continue;
      }
      dst[1 + offset] = 0;
     }
     else
      dst[1 + offset] = 0;
     return block;
    }
   }
   function split_n(t_orig, n){
    if(0 >= n) return [0, 0, t_orig];
    var n$0 = n, t = t_orig, accum = 0;
    for(;;){
     if(! t) return [0, t_orig, 0];
     var tl = t[2], hd = t[1];
     if(0 === n$0) return [0, caml_call1(rev, accum), t];
     var
      accum$0 = [0, hd, accum],
      n$1 = caml_call2(Base_Import[93], n$0, 1),
      n$0 = n$1,
      t = tl,
      accum = accum$0;
    }
   }
   function take(t_orig, n){
    if(0 >= n) return 0;
    var n$0 = n, t = t_orig, accum = 0;
    for(;;){
     if(! t) return t_orig;
     var tl = t[2], hd = t[1];
     if(0 === n$0) return caml_call1(rev, accum);
     var
      accum$0 = [0, hd, accum],
      n$1 = caml_call2(Base_Import[93], n$0, 1),
      n$0 = n$1,
      t = tl,
      accum = accum$0;
    }
   }
   function drop(t, n){
    var t$0 = t, n$0 = n;
    for(;;){
     if(t$0){
      var tl = t$0[2];
      if(0 < n$0){
       var n$1 = caml_call2(Base_Import[93], n$0, 1), t$0 = tl, n$0 = n$1;
       continue;
      }
     }
     return t$0;
    }
   }
   function chunks_of(l, length){
    if(length <= 0) caml_call3(invalid_argf, _t_, length, 0);
    var acc = 0, l$0 = l;
    for(;;){
     if(! l$0) return caml_call1(rev, acc);
     var
      match = split_n(l$0, length),
      l$1 = match[2],
      sublist = match[1],
      acc$0 = [0, sublist, acc],
      acc = acc$0,
      l$0 = l$1;
    }
   }
   function split_while(xs, f){
    var acc = 0, t = xs;
    for(;;){
     if(t){
      var tl = t[2], hd = t[1];
      if(caml_call1(f, hd)){
       var acc$0 = [0, hd, acc], acc = acc$0, t = tl;
       continue;
      }
     }
     return [0, caml_call1(rev, acc), t];
    }
   }
   function take_while(xs, f){
    var acc = 0, param = xs;
    for(;;){
     if(param){
      var tl = param[2], hd = param[1];
      if(caml_call1(f, hd)){
       var acc$0 = [0, hd, acc], acc = acc$0, param = tl;
       continue;
      }
     }
     return caml_call1(rev, acc);
    }
   }
   function drop_while(t, f){
    var t$0 = t;
    for(;;){
     if(t$0){
      var tl = t$0[2], hd = t$0[1];
      if(caml_call1(f, hd)){var t$0 = tl; continue;}
     }
     return t$0;
    }
   }
   function drop_last(t){
    var match = caml_call1(rev, t);
    if(! match) return 0;
    var lst = match[2];
    return [0, caml_call1(rev, lst)];
   }
   function drop_last_exn(t){
    var match = drop_last(t);
    if(! match)
     return caml_call1(Base_Import[124], cst_List_drop_last_exn_empty_l);
    var lst = match[1];
    return lst;
   }
   function cartesian_product(list1, list2){
    if(caml_call1(is_empty, list2)) return 0;
    var l1 = list1;
    for(;;){
     if(! l1) return 0;
     var l1$0 = l1[2], x1 = l1[1];
     if(list2) break;
     var l1 = l1$0;
    }
    var
     l2 = list2[2],
     x2 = list2[1],
     block = [0, [0, x1, x2], 24029],
     dst = block,
     offset = 1,
     x1$1 = x1,
     l1$2 = l1$0,
     l2$0 = l2;
    for(;;)
     if(l2$0){
      var l2$1 = l2$0[2], x2$0 = l2$0[1], dst$0 = [0, [0, x1$1, x2$0], 24029];
      dst[1 + offset] = dst$0;
      var dst = dst$0, offset = 1, l2$0 = l2$1;
     }
     else{
      if(! l1$2){dst[1 + offset] = 0; return block;}
      var
       l1$1 = l1$2[2],
       x1$0 = l1$2[1],
       x1$1 = x1$0,
       l1$2 = l1$1,
       l2$0 = list2;
     }
   }
   function concat(l){return caml_call3(fold_right, l, append, 0);}
   function concat_no_order(l){
    return caml_call3
            (fold,
             l,
             0,
             function(acc, l){return caml_call2(rev_append, l, acc);});
   }
   function cons(x, l){return [0, x, l];}
   function is_sorted(l, compare){
    var l$0 = l;
    for(;;){
     if(l$0){
      var rest = l$0[2];
      if(rest){
       var
        x2 = rest[1],
        x1 = l$0[1],
        _G_ = caml_call2(compare, x1, x2) <= 0 ? 1 : 0;
       if(! _G_) return _G_;
       var l$0 = rest;
       continue;
      }
     }
     return 1;
    }
   }
   function is_sorted_strictly(l, compare){
    var l$0 = l;
    for(;;){
     if(l$0){
      var rest = l$0[2];
      if(rest){
       var
        x2 = rest[1],
        x1 = l$0[1],
        _F_ = caml_call2(compare, x1, x2) < 0 ? 1 : 0;
       if(! _F_) return _F_;
       var l$0 = rest;
       continue;
      }
     }
     return 1;
    }
   }
   var Infix = [0, append];
   function permute(opt, list){
    if(opt)
     var sth = opt[1], random_state = sth;
    else
     var random_state = Base_Random[19][1];
    if(list){
     var _E_ = list[2];
     if(_E_){
      if(_E_[2]){
       var arr = caml_call1(Base_Array0[14], list);
       caml_call4(Base_Array_permute[25], [0, random_state], 0, 0, arr);
       return caml_call1(Base_Array0[16], arr);
      }
      var y = _E_[1], x = list[1];
      return caml_call1(Base_Random[19][17], random_state)
              ? [0, y, [0, x, 0]]
              : list;
     }
    }
    return list;
   }
   function random_element_exn(opt, list){
    if(opt)
     var sth = opt[1], random_state = sth;
    else
     var random_state = Base_Random[19][1];
    if(caml_call1(is_empty, list))
     return caml_call1(Base_Import[124], cst_List_random_element_exn_em);
    var _D_ = caml_call1(length, list);
    return nth_exn(list, caml_call2(Base_Random[19][7], random_state, _D_));
   }
   function random_element(opt, list){
    if(opt)
     var sth = opt[1], random_state = sth;
    else
     var random_state = Base_Random[19][1];
    try{
     var _B_ = [0, random_element_exn([0, random_state], list)];
     return _B_;
    }
    catch(_C_){return 0;}
   }
   function compare$0(cmp, a, b){
    var a$0 = a, b$0 = b;
    for(;;){
     if(! a$0) return b$0 ? -1 : 0;
     if(! b$0) return 1;
     var
      ys = b$0[2],
      y = b$0[1],
      xs = a$0[2],
      x = a$0[1],
      n = caml_call2(cmp, x, y);
     if(0 !== n) return n;
     var a$0 = xs, b$0 = ys;
    }
   }
   function compare_local$0(cmp, a, b){
    var a$0 = a, b$0 = b;
    for(;;){
     if(! a$0) return b$0 ? -1 : 0;
     if(! b$0) return 1;
     var
      ys = b$0[2],
      y = b$0[1],
      xs = a$0[2],
      x = a$0[1],
      n = caml_call2(cmp, x, y);
     if(0 !== n) return n;
     var a$0 = xs, b$0 = ys;
    }
   }
   var hash_fold_t = Base_Import[212];
   function equal_with_local_closure(equal, t1, t2){
    var t1$0 = t1, t2$0 = t2;
    for(;;){
     if(t1$0){
      if(t2$0){
       var
        t2$1 = t2$0[2],
        x2 = t2$0[1],
        t1$1 = t1$0[2],
        x1 = t1$0[1],
        _A_ = caml_call2(equal, x1, x2);
       if(! _A_) return _A_;
       var t1$0 = t1$1, t2$0 = t2$1;
       continue;
      }
     }
     else if(! t2$0) return 1;
     return 0;
    }
   }
   function equal(f, x, y){return equal_with_local_closure(f, x, y);}
   function equal_local(equal_a_local, t1, t2){
    var t1$0 = t1, t2$0 = t2;
    for(;;){
     if(t1$0){
      if(t2$0){
       var
        t2$1 = t2$0[2],
        x2 = t2$0[1],
        t1$1 = t1$0[2],
        x1 = t1$0[1],
        _z_ = caml_call2(equal_a_local, x1, x2);
       if(! _z_) return _z_;
       var t1$0 = t1$1, t2$0 = t2$1;
       continue;
      }
     }
     else if(! t2$0) return 1;
     return 0;
    }
   }
   function transpose(rows$0){
    var rows = rows$0, columns = 0, do_rev = 1;
    for(;;){
     var t = rows, column_acc = 0, trimmed_rows = 0, found_empty = 0;
     for(;;){
      if(! t) break;
      var match = t[1];
      if(match)
       var
        tl = t[2],
        xs = match[2],
        x = match[1],
        trimmed = [0, xs, trimmed_rows],
        column_acc$0 = [0, x, column_acc],
        t = tl,
        column_acc = column_acc$0,
        trimmed_rows = trimmed;
      else
       var tl$0 = t[2], t = tl$0, found_empty = 1;
     }
     if(! column_acc && ! trimmed_rows) return [0, caml_call1(rev, columns)];
     if(found_empty) return 0;
     var
      column = do_rev ? caml_call1(rev, column_acc) : column_acc,
      do_rev$0 = 1 - do_rev,
      columns$0 = [0, column, columns],
      rows = trimmed_rows,
      columns = columns$0,
      do_rev = do_rev$0;
    }
   }
   var
    Transpose_got_lists_of_differe =
      [248, cst_Base_List_Transpose_got_li, runtime.caml_fresh_oo_id(0)];
   function _u_(param){
    if(param[1] !== Transpose_got_lists_of_differe)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _w_], 1);
    var
     arg0_045 = param[2],
     res0_046 = caml_call2(Base_Import[149], Base_Import[139], arg0_045);
    return [1, [0, _v_, [0, res0_046, 0]]];
   }
   caml_call4
    (Sexplib0_Sexp_conv[72][1], 0, 0, Transpose_got_lists_of_differe, _u_);
   function transpose_exn(l){
    var match = transpose(l);
    if(! match)
     throw caml_maybe_attach_backtrace
            ([0, Transpose_got_lists_of_differe, map(l, length)], 1);
    var l$0 = match[1];
    return l$0;
   }
   function intersperse(t, sep){
    if(! t) return 0;
    var xs = t[2], x = t[1], _y_ = 0;
    return [0,
            x,
            caml_call3
             (fold_right,
              xs,
              function(y, acc){return [0, sep, [0, y, acc]];},
              _y_)];
   }
   function fold_result(t, init, f){
    return caml_call4(Base_Container[8], fold, init, f, t);
   }
   function fold_until(t, init, f, finish){
    return caml_call5(Base_Container[9], fold, init, f, finish, t);
   }
   function is_suffix(list, suffix, equal_elt){
    var
     list_len = caml_call1(length, list),
     suffix_len = caml_call1(length, suffix),
     _x_ = suffix_len <= list_len ? 1 : 0;
    return _x_
            ? equal_with_local_closure
              (equal_elt,
               drop(list, caml_call2(Base_Import[93], list_len, suffix_len)),
               suffix)
            : _x_;
   }
   var
    Base_List =
      [0,
       compare$0,
       compare_local$0,
       globalize,
       hash_fold_t,
       t_of_sexp,
       sexp_of_t,
       t_sexp_grammar,
       of_list,
       of_array,
       append,
       concat,
       filter,
       filter_map,
       concat_map,
       partition_tf,
       partition_map,
       mem,
       is_empty,
       iter,
       fold,
       fold_result,
       fold_until,
       exists,
       for_all,
       count,
       sum,
       find,
       find_map,
       to_list,
       to_array,
       min_elt,
       max_elt,
       foldi,
       iteri,
       existsi,
       for_alli,
       counti,
       findi,
       find_mapi,
       init,
       mapi,
       filteri,
       filter_mapi,
       concat_mapi,
       length,
       invariant,
       [0,
        both,
        symbol,
        symbol$1,
        symbol$0,
        apply,
        map2$0,
        map3$0,
        [0, symbol$2, symbol$4, symbol$3, symbol_map],
        symbol_bind,
        symbol_map,
        [0, symbol_bind, symbol_map],
        concat_map,
        singleton,
        map,
        join,
        ignore_m,
        all,
        all_unit,
        [0, singleton, symbol_bind, symbol_map, Let_syntax]],
       symbol_bind,
       symbol_map,
       Monad_infix,
       concat_map,
       singleton,
       map,
       join,
       ignore_m,
       all,
       all_unit,
       Let_syntax$0,
       [0, compare, compare_local, sexp_of_t$0],
       singleton,
       nth,
       nth_exn,
       rev,
       rev_append,
       unordered_append,
       rev_map,
       iter2_exn,
       iter2,
       rev_map2_exn,
       rev_map2,
       fold2_exn,
       fold2,
       fold_right2_exn,
       fold_right2,
       for_all2_exn,
       for_all2,
       exists2_exn,
       exists2,
       rev_filter,
       partition3_map,
       partition_result,
       split_n,
       stable_sort,
       stable_sort,
       merge,
       hd,
       tl,
       hd_exn,
       tl_exn,
       findi_exn,
       find_exn,
       find_map_exn,
       find_mapi_exn,
       folding_map,
       folding_mapi,
       fold_map,
       fold_mapi,
       map2_exn,
       map2,
       rev_map3_exn,
       rev_map3,
       map3_exn,
       map3,
       rev_map_append,
       fold_right,
       fold,
       unzip,
       unzip3,
       zip,
       zip_exn,
       rev_mapi,
       reduce_exn,
       reduce,
       reduce_balanced,
       reduce_balanced_exn,
       group,
       groupi,
       sort_and_group,
       chunks_of,
       last,
       last_exn,
       is_prefix,
       is_suffix,
       find_consecutive_duplicate,
       remove_consecutive_duplicates,
       dedup_and_sort,
       stable_dedup,
       find_a_dup,
       contains_dup,
       find_all_dups,
       all_equal,
       range$0,
       range,
       rev_filter_map,
       rev_filter_mapi,
       filter_opt,
       [0,
        t_of_sexp$0,
        sexp_of_t$1,
        t_sexp_grammar$0,
        add,
        find$0,
        find_exn$0,
        mem$0,
        remove,
        map$2,
        inverse,
        group$0,
        sort_and_group$0],
       sub,
       take,
       drop,
       take_while,
       drop_while,
       split_while,
       drop_last,
       drop_last_exn,
       concat_no_order,
       cons,
       cartesian_product,
       permute,
       random_element,
       random_element_exn,
       is_sorted,
       is_sorted_strictly,
       equal,
       equal_local,
       Infix,
       transpose,
       transpose_exn,
       intersperse];
   runtime.caml_register_global(62, Base_List, "Base__List");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Info
//# unitInfo: Requires: Base__Exn, Base__Hash, Base__Import, Base__Info_intf, Base__List, Base__Pretty_printer, Base__Printf, Base__Sexp, Base__Source_code_position0, Base__String0, CamlinternalLazy, Sexplib0__Sexp_conv, Stdlib__Format, Stdlib__Printexc
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$1 = "",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_obj_tag = runtime.caml_obj_tag,
    caml_trampoline = runtime.caml_trampoline,
    caml_trampoline_return = runtime.caml_trampoline_return,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$0 = cst$1,
    cst = cst$1,
    _j_ = [0, [0, "cycle while computing message"]],
    t_sexp_grammar = [0, "Info.t"],
    module_name = "Base.Info",
    Stdlib_Format = global_data.Stdlib__Format,
    Base_Exn = global_data.Base__Exn,
    Stdlib_Printexc = global_data.Stdlib__Printexc,
    Assert_failure = global_data.Assert_failure,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Base_Printf = global_data.Base__Printf,
    Base_Sexp = global_data.Base__Sexp,
    Base_Hash = global_data.Base__Hash,
    Base_Import = global_data.Base__Import,
    Base_List = global_data.Base__List,
    Base_Source_code_position0 = global_data.Base__Source_code_position0,
    Base_String0 = global_data.Base__String0,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Base_Pretty_printer = global_data.Base__Pretty_printer,
    _l_ = [0, "src/info.ml", 261, 6],
    _a_ = [0, "Could_not_construct"],
    _b_ = [0, "String"],
    _c_ = [0, "Exn"],
    _d_ = [0, "Sexp"],
    _e_ = [0, "Tag_sexp"],
    _f_ = [0, "Tag_t"],
    _g_ = [0, "Tag_arg"],
    _h_ = [0, "Of_list"],
    _i_ = [0, "With_backtrace"],
    cst_Base_Info_Exn = "Base__Info.Exn";
   function sexp_of_t(param){
    switch(param[0]){
      case 0:
       var arg0_001 = param[1], res0_002 = caml_call1(Base_Sexp[5], arg0_001);
       return [1, [0, _a_, [0, res0_002, 0]]];
      case 1:
       var
        arg0_003 = param[1],
        res0_004 = caml_call1(Base_Import[136], arg0_003);
       return [1, [0, _b_, [0, res0_004, 0]]];
      case 2:
       var
        arg0_005 = param[1],
        res0_006 = caml_call1(Base_Import[198], arg0_005);
       return [1, [0, _c_, [0, res0_006, 0]]];
      case 3:
       var arg0_007 = param[1], res0_008 = caml_call1(Base_Sexp[5], arg0_007);
       return [1, [0, _d_, [0, res0_008, 0]]];
      case 4:
       var
        arg2_011 = param[3],
        arg1_010 = param[2],
        arg0_009 = param[1],
        res0_012 = caml_call1(Base_Import[136], arg0_009),
        res1_013 = caml_call1(Base_Sexp[5], arg1_010),
        res2_014 =
          caml_call2
           (Base_Import[146], Base_Source_code_position0[9], arg2_011);
       return [1, [0, _e_, [0, res0_012, [0, res1_013, [0, res2_014, 0]]]]];
      case 5:
       var
        arg1_016 = param[2],
        arg0_015 = param[1],
        res0_017 = caml_call1(Base_Import[136], arg0_015),
        res1_018 = sexp_of_t(arg1_016);
       return [1, [0, _f_, [0, res0_017, [0, res1_018, 0]]]];
      case 6:
       var
        arg2_021 = param[3],
        arg1_020 = param[2],
        arg0_019 = param[1],
        res0_022 = caml_call1(Base_Import[136], arg0_019),
        res1_023 = caml_call1(Base_Sexp[5], arg1_020),
        res2_024 = sexp_of_t(arg2_021);
       return [1, [0, _g_, [0, res0_022, [0, res1_023, [0, res2_024, 0]]]]];
      case 7:
       var
        arg1_026 = param[2],
        arg0_025 = param[1],
        res0_027 = caml_call2(Base_Import[146], Base_Import[139], arg0_025),
        res1_028 = caml_call2(Base_Import[149], sexp_of_t, arg1_026);
       return [1, [0, _h_, [0, res0_027, [0, res1_028, 0]]]];
      default:
       var
        arg1_030 = param[2],
        arg0_029 = param[1],
        res0_031 = sexp_of_t(arg0_029),
        res1_032 = caml_call1(Base_Import[136], arg1_030);
       return [1, [0, _i_, [0, res0_031, [0, res1_032, 0]]]];
    }
   }
   function to_sexps_hum(t, ac){
    switch(t[0]){
      case 0:
       return [0, sexp_of_t(t), ac];
      case 1:
       var string = t[1]; return [0, [0, string], ac];
      case 2:
       var exn = t[1]; return [0, caml_call1(Base_Exn[1], exn), ac];
      case 3:
       var sexp = t[1]; return [0, sexp, ac];
      case 4:
       var here = t[3], sexp$0 = t[2], tag = t[1];
       if(here)
        var
         here$0 = here[1],
         _T_ = [0, caml_call1(Base_Source_code_position0[9], here$0), 0];
       else
        var _T_ = 0;
       return [0, [1, [0, [0, tag], [0, sexp$0, _T_]]], ac];
      case 5:
       var t$0 = t[2], tag$0 = t[1];
       return [0, [1, [0, [0, tag$0], to_sexps_hum(t$0, 0)]], ac];
      case 6:
       var
        t$1 = t[3],
        sexp$1 = t[2],
        tag$1 = t[1],
        body = [0, sexp$1, to_sexps_hum(t$1, 0)];
       return 0 === runtime.caml_ml_string_length(tag$1)
               ? [0, [1, body], ac]
               : [0, [1, [0, [0, tag$1], body]], ac];
      case 7:
       var
        ts = t[2],
        _U_ = function(ac, t){return to_sexps_hum(t, ac);},
        _V_ = caml_call1(Base_List[63], ts);
       return caml_call3(Base_List[20], _V_, ac, _U_);
      default:
       var
        backtrace = t[2],
        t$2 = t[1],
        _W_ = caml_call1(Base_String0[22], backtrace),
        _X_ = [0, caml_call2(Base_Import[149], Base_Import[136], _W_), 0];
       return [0, [1, [0, to_sexp_hum(t$2), _X_]], ac];
    }
   }
   function to_sexp_hum(t){
    var sexps = to_sexps_hum(t, 0);
    if(sexps && ! sexps[2]){var sexp = sexps[1]; return sexp;}
    return [1, sexps];
   }
   function globalize_info(param){return param;}
   function compute_info$0(counter, info, stack){
    var info$0 = info, stack$0 = stack;
    for(;;){
     var match = info$0[1];
     if(typeof match === "number"){
      if(counter >= 50)
       return caml_trampoline_return(compute_message, [0, _j_, stack$0]);
      var counter$1 = counter + 1 | 0;
      return compute_message(counter$1, _j_, stack$0);
     }
     if(0 !== match[0]){
      var message = match[1];
      if(counter >= 50)
       return caml_trampoline_return(compute_message, [0, message, stack$0]);
      var counter$2 = counter + 1 | 0;
      return compute_message(counter$2, message, stack$0);
     }
     var cons = match[1];
     info$0[1] = 0;
     var stack$1 = [0, [0, info$0], stack$0];
     switch(cons[0]){
       case 0:
        var lazy_info = cons[1];
        try{
         var _R_ = caml_obj_tag(lazy_info);
         a:
         if(250 === _R_)
          var info$1 = lazy_info[1];
         else{
          if(246 !== _R_ && 244 !== _R_){var info$1 = lazy_info; break a;}
          var info$1 = caml_call1(CamlinternalLazy[2], lazy_info);
         }
        }
        catch(exn$0){
         var
          exn = caml_wrap_exception(exn$0),
          _Q_ = [0, caml_call1(Base_Exn[1], exn)];
         if(counter >= 50)
          return caml_trampoline_return(compute_message, [0, _Q_, stack$1]);
         var counter$3 = counter + 1 | 0;
         return compute_message(counter$3, _Q_, stack$1);
        }
        var info$0 = info$1, stack$0 = stack$1;
        break;
       case 1:
        var infos = cons[1], _S_ = 0;
        if(counter >= 50)
         return caml_trampoline_return
                 (compute_info_list, [0, infos, _S_, stack$1]);
        var counter$0 = counter + 1 | 0;
        return compute_info_list(counter$0, infos, _S_, stack$1);
       case 2:
        var
         info$2 = cons[3],
         arg = cons[2],
         tag = cons[1],
         stack$2 = [0, [1, tag, arg], stack$1],
         info$0 = info$2,
         stack$0 = stack$2;
        break;
       default:
        var
         info$3 = cons[2],
         tag$0 = cons[1],
         stack$3 = [0, [2, tag$0], stack$1],
         info$0 = info$3,
         stack$0 = stack$3;
     }
    }
   }
   function compute_info_list(counter, fwd_prefix, rev_suffix, stack){
    if(fwd_prefix){
     var
      fwd_prefix$0 = fwd_prefix[2],
      info = fwd_prefix[1],
      _N_ = [0, [3, fwd_prefix$0, rev_suffix], stack];
     if(counter >= 50)
      return caml_trampoline_return(compute_info$0, [0, info, _N_]);
     var counter$0 = counter + 1 | 0;
     return compute_info$0(counter$0, info, _N_);
    }
    function _O_(tail, message){
     if(7 !== message[0]) return [0, message, tail];
     var messages = message[2];
     return caml_call2(Base_Import[111], messages, tail);
    }
    var
     infos = caml_call3(Base_List[20], rev_suffix, 0, _O_),
     _P_ = [7, 0, infos];
    if(counter >= 50)
     return caml_trampoline_return(compute_message, [0, _P_, stack]);
    var counter$1 = counter + 1 | 0;
    return compute_message(counter$1, _P_, stack);
   }
   function compute_message(counter, message, stack){
    var message$0 = message, stack$0 = stack;
    for(;;){
     if(! stack$0) return message$0;
     var match = stack$0[1];
     switch(match[0]){
       case 0:
        var stack$1 = stack$0[2], info = match[1];
        info[1] = [1, message$0];
        var stack$0 = stack$1;
        break;
       case 1:
        var
         stack$2 = stack$0[2],
         arg = match[2],
         tag = match[1],
         message$1 = [6, tag, arg, message$0],
         message$0 = message$1,
         stack$0 = stack$2;
        break;
       case 2:
        var
         stack$3 = stack$0[2],
         tag$0 = match[1],
         message$2 = [5, tag$0, message$0],
         message$0 = message$2,
         stack$0 = stack$3;
        break;
       default:
        var
         stack$4 = stack$0[2],
         rev_suffix = match[2],
         fwd_prefix = match[1],
         _M_ = [0, message$0, rev_suffix];
        if(counter >= 50)
         return caml_trampoline_return
                 (compute_info_list, [0, fwd_prefix, _M_, stack$4]);
        var counter$0 = counter + 1 | 0;
        return compute_info_list(counter$0, fwd_prefix, _M_, stack$4);
     }
    }
   }
   function compute_info(info, stack){
    return caml_trampoline(compute_info$0(0, info, stack));
   }
   function to_message(info){return compute_info(info, 0);}
   function of_message(message){return [0, [1, message]];}
   function of_cons(cons){return [0, [0, cons]];}
   function of_lazy_cons(lazy_cons){
    return of_cons
            ([0,
              [246,
               function(_J_){
                var _K_ = caml_obj_tag(lazy_cons);
                a:
                if(250 === _K_)
                 var _L_ = lazy_cons[1];
                else{
                 if(246 !== _K_ && 244 !== _K_){var _L_ = lazy_cons; break a;}
                 var _L_ = caml_call1(CamlinternalLazy[2], lazy_cons);
                }
                return of_cons(_L_);
               }]]);
   }
   function of_lazy_message(lazy_message){
    return of_cons
            ([0,
              [246,
               function(_G_){
                var _H_ = caml_obj_tag(lazy_message);
                a:
                if(250 === _H_)
                 var _I_ = lazy_message[1];
                else{
                 if(246 !== _H_ && 244 !== _H_){
                  var _I_ = lazy_message;
                  break a;
                 }
                 var _I_ = caml_call1(CamlinternalLazy[2], lazy_message);
                }
                return of_message(_I_);
               }]]);
   }
   function invariant(param){return 0;}
   function sexp_of_t$0(t){return to_sexp_hum(to_message(t));}
   function t_of_sexp(sexp){return of_message([3, sexp]);}
   function compare(t1, t2){
    var _E_ = sexp_of_t$0(t2), _F_ = sexp_of_t$0(t1);
    return caml_call2(Base_Sexp[7], _F_, _E_);
   }
   function compare_local(t1, t2){return compare(t1, t2);}
   function equal(t1, t2){
    var _C_ = sexp_of_t$0(t2), _D_ = sexp_of_t$0(t1);
    return caml_call2(Base_Sexp[6], _D_, _C_);
   }
   function equal_local(t1, t2){return equal(t1, t2);}
   function hash_fold_t(state, t){
    var _B_ = sexp_of_t$0(t);
    return caml_call2(Base_Sexp[2], state, _B_);
   }
   function hash(t){return caml_call3(Base_Hash[14], 0, hash_fold_t, t);}
   function to_string_hum(t){
    var message = to_message(t);
    if(1 === message[0]){var s = message[1]; return s;}
    var _A_ = to_sexp_hum(message);
    return caml_call2(Base_Sexp[16], 0, _A_);
   }
   function to_string_mach(t){
    var _z_ = sexp_of_t$0(t);
    return caml_call1(Base_Sexp[17], _z_);
   }
   function of_lazy(l){
    return of_lazy_message
            ([246,
              function(_w_){
               var _x_ = caml_obj_tag(l);
               a:
               if(250 === _x_)
                var _y_ = l[1];
               else{
                if(246 !== _x_ && 244 !== _x_){var _y_ = l; break a;}
                var _y_ = caml_call1(CamlinternalLazy[2], l);
               }
               return [1, _y_];
              }]);
   }
   function of_lazy_sexp(l){
    return of_lazy_message
            ([246,
              function(_t_){
               var _u_ = caml_obj_tag(l);
               a:
               if(250 === _u_)
                var _v_ = l[1];
               else{
                if(246 !== _u_ && 244 !== _u_){var _v_ = l; break a;}
                var _v_ = caml_call1(CamlinternalLazy[2], l);
               }
               return [3, _v_];
              }]);
   }
   function of_lazy_t(lazy_info){return of_cons([0, lazy_info]);}
   function of_string(message){return of_message([1, message]);}
   function createf(format){
    return caml_call2(Base_Printf[4], of_string, format);
   }
   function of_thunk(f){
    return of_lazy_message
            ([246, function(param){return [1, caml_call1(f, 0)];}]);
   }
   function create(here, strict, tag, x, sexp_of_x){
    return strict
            ? of_message([4, tag, caml_call1(sexp_of_x, x), here])
            : of_lazy_message
              ([246,
                function(param){
                 return [4, tag, caml_call1(sexp_of_x, x), here];
                }]);
   }
   function create_s(sexp){return of_message([3, sexp]);}
   function tag(t, tag){return of_cons([3, tag, t]);}
   function tag_s_lazy(t, tag){
    return of_lazy_cons
            ([246,
              function(_q_){
               var _r_ = caml_obj_tag(tag);
               a:
               if(250 === _r_)
                var _s_ = tag[1];
               else{
                if(246 !== _r_ && 244 !== _r_){var _s_ = tag; break a;}
                var _s_ = caml_call1(CamlinternalLazy[2], tag);
               }
               return [2, cst, _s_, t];
              }]);
   }
   function tag_s(t, tag){return of_cons([2, cst$0, tag, t]);}
   function tag_arg(t, tag, x, sexp_of_x){
    return of_lazy_cons
            ([246,
              function(param){return [2, tag, caml_call1(sexp_of_x, x), t];}]);
   }
   function of_list(ts){return of_cons([1, ts]);}
   var Exn = [248, cst_Base_Info_Exn, runtime.caml_fresh_oo_id(0)];
   function _k_(param){
    if(param[1] !== Exn)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _l_], 1);
    var t = param[2];
    return sexp_of_t$0(t);
   }
   caml_call4(Sexplib0_Sexp_conv[72][1], 0, 0, Exn, _k_);
   function to_exn(info){
    var _o_ = info[1];
    a:
    {
     if(typeof _o_ !== "number" && 1 === _o_[0]){var _p_ = 1; break a;}
     var _p_ = 0;
    }
    if(! _p_) return [0, Exn, info];
    var match = to_message(info);
    if(2 !== match[0]) return [0, Exn, info];
    var exn = match[1];
    return exn;
   }
   function of_exn(backtrace, exn){
    if(backtrace){
     var match = backtrace[1];
     if(typeof match === "number")
      var _n_ = [0, caml_call1(Stdlib_Printexc[6], 0)];
     else
      var s = match[2], _n_ = [0, s];
     var backtrace$0 = _n_;
    }
    else
     var backtrace$0 = 0;
    if(exn[1] === Exn){
     var t = exn[2];
     if(! backtrace$0) return t;
     var backtrace$1 = backtrace$0[1];
     return of_lazy_message
             ([246, function(param){return [8, to_message(t), backtrace$1];}]);
    }
    if(! backtrace$0) return of_message([2, exn]);
    var backtrace$2 = backtrace$0[1];
    return of_lazy_message
            ([246,
              function(param){
               return [8, [3, caml_call1(Base_Exn[1], exn)], backtrace$2];
              }]);
   }
   function pp(ppf, t){
    var _m_ = to_string_hum(t);
    return caml_call2(Stdlib_Format[13], ppf, _m_);
   }
   var
    include = caml_call1(Base_Pretty_printer[3], [0, pp, module_name]),
    pp$0 = include[1],
    Base_Info =
      [0,
       compare,
       compare_local,
       equal,
       equal_local,
       globalize_info,
       hash_fold_t,
       hash,
       t_of_sexp,
       sexp_of_t$0,
       t_sexp_grammar,
       invariant,
       to_string_hum,
       to_string_mach,
       of_string,
       of_lazy,
       of_lazy_sexp,
       of_thunk,
       of_lazy_t,
       create,
       create_s,
       createf,
       tag,
       tag_s,
       tag_s_lazy,
       tag_arg,
       of_list,
       of_exn,
       to_exn,
       pp$0,
       [0, sexp_of_t, to_message, of_message]];
   runtime.caml_register_global(30, Base_Info, "Base__Info");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Error
//# unitInfo: Requires: Base__Info, Base__Pretty_printer
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    t_sexp_grammar = [0, "Error.t"],
    module_name = "Base.Error",
    Base_Info = global_data.Base__Info,
    Base_Pretty_printer = global_data.Base__Pretty_printer,
    compare = Base_Info[1],
    compare_local = Base_Info[2],
    equal = Base_Info[3],
    equal_local = Base_Info[4],
    globalize = Base_Info[5],
    hash_fold_t = Base_Info[6],
    hash = Base_Info[7],
    t_of_sexp = Base_Info[8],
    sexp_of_t = Base_Info[9],
    invariant = Base_Info[11],
    to_string_hum = Base_Info[12],
    to_string_mach = Base_Info[13],
    of_string = Base_Info[14],
    of_lazy = Base_Info[15],
    of_lazy_sexp = Base_Info[16],
    of_thunk = Base_Info[17],
    of_lazy_t = Base_Info[18],
    create = Base_Info[19],
    create_s = Base_Info[20],
    createf = Base_Info[21],
    tag = Base_Info[22],
    tag_s = Base_Info[23],
    tag_s_lazy = Base_Info[24],
    tag_arg = Base_Info[25],
    of_list = Base_Info[26],
    of_exn = Base_Info[27],
    to_exn = Base_Info[28],
    pp = Base_Info[29],
    Internal_repr = Base_Info[30];
   function raise(t){
    throw caml_maybe_attach_backtrace(caml_call1(to_exn, t), 1);
   }
   function raise_s(sexp){return raise(caml_call1(create_s, sexp));}
   function to_info(t){return t;}
   function of_info(t){return t;}
   var
    include = caml_call1(Base_Pretty_printer[3], [0, pp, module_name]),
    pp$0 = include[1],
    Base_Error =
      [0,
       compare,
       compare_local,
       equal,
       equal_local,
       globalize,
       hash_fold_t,
       hash,
       t_of_sexp,
       sexp_of_t,
       t_sexp_grammar,
       invariant,
       to_string_hum,
       to_string_mach,
       of_string,
       of_lazy,
       of_lazy_sexp,
       of_thunk,
       of_lazy_t,
       create,
       create_s,
       createf,
       tag,
       tag_s,
       tag_s_lazy,
       tag_arg,
       of_list,
       of_exn,
       to_exn,
       pp$0,
       Internal_repr,
       raise,
       raise_s,
       to_info,
       of_info];
   runtime.caml_register_global(4, Base_Error, "Base__Error");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Invariant
//# unitInfo: Requires: Base__Error, Base__Field, Base__Import, Base__Invariant_intf, Base__Sexp, Base__Source_code_position0
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$1 = "",
    cst_exn$1 = "exn",
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = cst$1,
    cst$0 = cst$1,
    Base_Field = global_data.Base__Field,
    Base_Import = global_data.Base__Import,
    Base_Sexp = global_data.Base__Sexp,
    Base_Source_code_position0 = global_data.Base__Source_code_position0,
    Base_Error = global_data.Base__Error,
    raise_s = Base_Error[32],
    cst_exn$0 = cst_exn$1,
    cst_field = "field",
    cst_problem_with_field = "problem with field",
    cst_exn = cst_exn$1,
    cst_invariant_failed = "invariant failed";
   function invariant(here, t, sexp_of_t, f){
    try{var _h_ = caml_call1(f, 0); return _h_;}
    catch(exn$0){
     var
      exn = caml_wrap_exception(exn$0),
      _e_ = [0, [0, cst, caml_call1(sexp_of_t, t)], 0],
      _f_ = [0, [0, cst_exn, caml_call1(Base_Import[198], exn)], _e_],
      _g_ =
        [0, [0, cst$0, caml_call1(Base_Source_code_position0[9], here)], _f_];
     return caml_call1
             (raise_s, caml_call2(Base_Sexp[10], cst_invariant_failed, _g_));
    }
   }
   function check_field(t, f, field){
    try{
     var _d_ = caml_call1(f, caml_call2(Base_Field[3], field, t));
     return _d_;
    }
    catch(exn$0){
     var
      exn = caml_wrap_exception(exn$0),
      _a_ = [0, [0, cst_exn$0, caml_call1(Base_Import[198], exn)], 0],
      _b_ = caml_call1(Base_Field[2], field),
      _c_ = [0, [0, cst_field, caml_call1(Base_Import[136], _b_)], _a_];
     return caml_call1
             (raise_s, caml_call2(Base_Sexp[10], cst_problem_with_field, _c_));
    }
   }
   var Base_Invariant = [0, invariant, check_field];
   runtime.caml_register_global(12, Base_Invariant, "Base__Invariant");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Or_error
//# unitInfo: Requires: Base__Applicative, Base__Error, Base__Import, Base__List, Base__Printf, Base__Result, Base__With_return
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_List = global_data.Base__List,
    Base_Error = global_data.Base__Error,
    Base_With_return = global_data.Base__With_return,
    Assert_failure = global_data.Assert_failure,
    Base_Result = global_data.Base__Result,
    Base_Import = global_data.Base__Import,
    Base_Printf = global_data.Base__Printf,
    Base_Applicative = global_data.Base__Applicative,
    _b_ = [0, "src/or_error.ml", 192, 21],
    cst_unimplemented = "unimplemented",
    _a_ = [0, 3553398];
   function compare_local(cmp_a, a_007, b_008){
    return caml_call4(Base_Result[5], cmp_a, Base_Error[2], a_007, b_008);
   }
   function compare(cmp_a, a_001, b_002){
    return caml_call4(Base_Result[4], cmp_a, Base_Error[1], a_001, b_002);
   }
   function equal_local(cmp_a, a_019, b_020){
    return caml_call4(Base_Result[7], cmp_a, Base_Error[4], a_019, b_020);
   }
   function equal(cmp_a, a_013, b_014){
    return caml_call4(Base_Result[6], cmp_a, Base_Error[3], a_013, b_014);
   }
   function globalize(globalize_a_026, x_027){
    return caml_call3(Base_Result[9], globalize_a_026, Base_Error[5], x_027);
   }
   function hash_fold_t(hash_fold_a, hsv, arg){
    return caml_call4(Base_Result[8], hash_fold_a, Base_Error[6], hsv, arg);
   }
   function t_of_sexp(of_a_030, x_032){
    return caml_call3(Base_Result[1], of_a_030, Base_Error[8], x_032);
   }
   function sexp_of_t(of_a_033, x_034){
    return caml_call3(Base_Result[2], of_a_033, Base_Error[9], x_034);
   }
   function t_sexp_grammar(a_sexp_grammar){
    return caml_call2(Base_Result[3], a_sexp_grammar, Base_Error[10]);
   }
   var
    symbol_bind = Base_Result[10],
    symbol_map = Base_Result[11],
    bind = Base_Result[14],
    ignore_m = Base_Result[17],
    join = Base_Result[16],
    map = Base_Result[33],
    return$0 = Base_Result[15];
   function invariant(invariant_a, t){
    if(0 === t[0]){var a = t[1]; return caml_call1(invariant_a, a);}
    var error = t[1];
    return caml_call1(Base_Error[11], error);
   }
   function map2(a, b, f){
    if(0 === a[0]){
     var x = a[1];
     if(0 === b[0]){var y = b[1]; return [0, caml_call2(f, x, y)];}
     var e = b;
    }
    else{
     var e1 = a[1];
     if(0 !== b[0]){
      var e2 = b[1];
      return [1, caml_call1(Base_Error[26], [0, e1, [0, e2, 0]])];
     }
     var e = a;
    }
    return e;
   }
   var
    map$0 = [0, -198771759, map],
    For_applicative =
      caml_call1(Base_Applicative[16], [0, return$0, map2, map$0]),
    symbol = For_applicative[6],
    symbol$0 = For_applicative[5],
    symbol$1 = For_applicative[4],
    apply = For_applicative[8],
    both = For_applicative[3],
    map3 = For_applicative[10],
    include = Base_Result[13],
    symbol_bind$0 = include[1],
    symbol_map$0 = include[2],
    Open_on_rhs = [0],
    ok = Base_Result[26],
    is_ok = Base_Result[24],
    is_error = Base_Result[25];
   function try_with(opt, f){
    if(opt) var sth = opt[1], backtrace = sth; else var backtrace = 0;
    try{var _v_ = [0, caml_call1(f, 0)]; return _v_;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0), _u_ = backtrace ? _a_ : 0;
     return [1, caml_call2(Base_Error[27], _u_, exn)];
    }
   }
   function try_with_join(backtrace, f){
    return caml_call1(join, try_with(backtrace, f));
   }
   function ok_exn(param){
    if(0 === param[0]){var x = param[1]; return x;}
    var err = param[1];
    return caml_call1(Base_Error[31], err);
   }
   function of_exn(backtrace, exn){
    return [1, caml_call2(Base_Error[27], backtrace, exn)];
   }
   function of_exn_result(backtrace, z){
    if(0 === z[0]) return z;
    var exn = z[1];
    return of_exn(backtrace, exn);
   }
   var of_option = Base_Result[30];
   function error(here, strict, message, a, sexp_of_a){
    return [1,
            caml_call5(Base_Error[19], here, strict, message, a, sexp_of_a)];
   }
   function error_s(sexp){return [1, caml_call1(Base_Error[20], sexp)];}
   function error_string(message){
    return [1, caml_call1(Base_Error[14], message)];
   }
   function errorf(format){
    return caml_call2(Base_Printf[4], error_string, format);
   }
   function tag(t, tag){
    var _r_ = Base_Error[22];
    function _s_(_t_){return caml_call2(_r_, _t_, tag);}
    return caml_call2(Base_Result[34], t, _s_);
   }
   function tag_s(t, tag){
    var _o_ = Base_Error[23];
    function _p_(_q_){return caml_call2(_o_, _q_, tag);}
    return caml_call2(Base_Result[34], t, _p_);
   }
   function tag_s_lazy(t, tag){
    var _l_ = Base_Error[24];
    function _m_(_n_){return caml_call2(_l_, _n_, tag);}
    return caml_call2(Base_Result[34], t, _m_);
   }
   function tag_arg(t, message, a, sexp_of_a){
    function _k_(e){
     return caml_call4(Base_Error[25], e, message, a, sexp_of_a);
    }
    return caml_call2(Base_Result[34], t, _k_);
   }
   function unimplemented(s){
    return error(0, 0, cst_unimplemented, s, Base_Import[136]);
   }
   function combine_internal(list, on_ok, on_error){
    var match = caml_call1(Base_Result[36], list);
    if(0 === match[0]){var x = match[1]; return [0, caml_call1(on_ok, x)];}
    var errs = match[1];
    return [1, caml_call1(on_error, errs)];
   }
   function ignore_unit_list(param){return 0;}
   function error_of_list_if_necessary(list){
    if(list && ! list[2]){var e = list[1]; return e;}
    return caml_call1(Base_Error[26], list);
   }
   function all(list){
    return combine_internal
            (list, function(_j_){return _j_;}, error_of_list_if_necessary);
   }
   function all_unit(list){
    return combine_internal
            (list, ignore_unit_list, error_of_list_if_necessary);
   }
   function combine_errors(list){
    var _h_ = Base_Error[26];
    return combine_internal(list, function(_i_){return _i_;}, _h_);
   }
   function combine_errors_unit(list){
    return combine_internal(list, ignore_unit_list, Base_Error[26]);
   }
   function filter_ok_at_least_one(l){
    var
     match = caml_call2(Base_List[16], l, Base_Result[38]),
     errs = match[2],
     ok = match[1];
    return ok ? [0, ok] : [1, caml_call1(Base_Error[26], errs)];
   }
   function find_ok(l){
    var match = caml_call2(Base_List[28], l, Base_Result[26]);
    if(match){var x = match[1]; return [0, x];}
    function _f_(param){
     if(0 === param[0])
      throw caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1);
     var err = param[1];
     return err;
    }
    var _g_ = caml_call2(Base_List[53], l, _f_);
    return [1, caml_call1(Base_Error[26], _g_)];
   }
   function find_map_ok(l, f){
    function _c_(param){
     function _d_(elt){
      var x = caml_call1(f, elt);
      if(0 === x[0]) return caml_call1(param, x);
      var err = x[1];
      return err;
     }
     var _e_ = caml_call2(Base_List[53], l, _d_);
     return [1, caml_call1(Base_Error[26], _e_)];
    }
    return caml_call1(Base_With_return[1], _c_);
   }
   var
    map$1 = Base_Result[33],
    iter = Base_Result[31],
    iter_error = Base_Result[32],
    Base_Or_error =
      [0,
       compare,
       compare_local,
       equal,
       equal_local,
       globalize,
       hash_fold_t,
       t_of_sexp,
       sexp_of_t,
       t_sexp_grammar,
       both,
       symbol$1,
       symbol$0,
       symbol,
       apply,
       map2,
       map3,
       For_applicative[13],
       invariant,
       symbol_bind,
       symbol_map,
       Base_Result[13],
       bind,
       return$0,
       join,
       ignore_m,
       all,
       all_unit,
       [0,
        return$0,
        symbol_bind$0,
        symbol_map$0,
        [0, return$0, bind, map, both, Open_on_rhs]],
       is_ok,
       is_error,
       try_with,
       try_with_join,
       ok,
       ok_exn,
       of_exn,
       of_exn_result,
       of_option,
       error,
       error_s,
       error_string,
       errorf,
       tag,
       tag_s,
       tag_s_lazy,
       tag_arg,
       unimplemented,
       map$1,
       iter,
       iter_error,
       combine_errors,
       combine_errors_unit,
       filter_ok_at_least_one,
       find_ok,
       find_map_ok];
   runtime.caml_register_global(11, Base_Or_error, "Base__Or_error");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Sign0
//# unitInfo: Requires: Base__Hash, Base__Import, Base__Poly0, Sexplib0__Sexp_conv_error
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Neg = "Neg",
    cst_Pos = "Pos",
    cst_Zero = "Zero",
    cst_neg = "neg",
    cst_pos = "pos",
    cst_zero = "zero",
    caml_int_compare = runtime.caml_int_compare,
    caml_string_notequal = runtime.caml_string_notequal;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    error_source_003 = "sign0.ml.t",
    t_sexp_grammar =
      [3,
       [0,
        2,
        [0,
         [1, [0, cst_Neg, 0]],
         [0, [1, [0, cst_Zero, 0]], [0, [1, [0, cst_Pos, 0]], 0]]]]],
    all = [0, 0, [0, 1, [0, 2, 0]]],
    module_name = "Base.Sign",
    Base_Import = global_data.Base__Import,
    Base_Poly0 = global_data.Base__Poly0,
    Base_Hash = global_data.Base__Hash,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    _a_ = [0, cst_Neg],
    _b_ = [0, cst_Zero],
    _c_ = [0, cst_Pos];
   function t_of_sexp(sexp_004){
    a:
    {
     if(0 === sexp_004[0]){
      var _f_ = sexp_004[1];
      b:
      if(caml_string_notequal(_f_, cst_Neg)){
       c:
       if(caml_string_notequal(_f_, cst_Pos)){
        if(caml_string_notequal(_f_, cst_Zero)){
         if(! caml_string_notequal(_f_, cst_neg)) break b;
         if(! caml_string_notequal(_f_, cst_pos)) break c;
         if(caml_string_notequal(_f_, cst_zero)) break a;
        }
        return 1;
       }
       return 2;
      }
      return 0;
     }
     var _g_ = sexp_004[1];
     if(! _g_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_003, sexp_004);
     var _h_ = _g_[1];
     if(0 !== _h_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_003, sexp_004);
     var _i_ = _h_[1];
     b:
     if(caml_string_notequal(_i_, cst_Neg)){
      c:
      if(caml_string_notequal(_i_, cst_Pos)){
       if(caml_string_notequal(_i_, cst_Zero)){
        if(! caml_string_notequal(_i_, cst_neg)) break b;
        if(! caml_string_notequal(_i_, cst_pos)) break c;
        if(caml_string_notequal(_i_, cst_zero)) break a;
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_003, sexp_004);
   }
   function sexp_of_t(param){
    switch(param){case 0: return _a_;case 1: return _b_;default: return _c_;
    }
   }
   var compare_local = caml_int_compare, compare = caml_int_compare;
   function hash_fold_t(hsv, arg){
    switch(arg){
      case 0:
       var _e_ = 0; break;
      case 1:
       var _e_ = 1; break;
      default: var _e_ = 2;
    }
    return caml_call2(Base_Hash[3], hsv, _e_);
   }
   function symbol(x, y){return x < y ? 1 : 0;}
   function symbol$0(x, y){return x <= y ? 1 : 0;}
   function symbol$1(x, y){return x !== y ? 1 : 0;}
   function symbol$2(x, y){return x === y ? 1 : 0;}
   function symbol$3(x, y){return y < x ? 1 : 0;}
   function symbol$4(x, y){return y <= x ? 1 : 0;}
   function ascending(x, y){return caml_call2(Base_Poly0[1], x, y);}
   function descending(x, y){return caml_call2(Base_Poly0[2], x, y);}
   var compare$0 = caml_int_compare;
   function equal(x, y){return x === y ? 1 : 0;}
   function equal_local(x, y){return x === y ? 1 : 0;}
   function max(x, y){return y <= x ? x : y;}
   function min(x, y){return x <= y ? x : y;}
   var
    Replace_polymorphic_compare =
      [0,
       symbol,
       symbol$0,
       symbol$1,
       symbol$2,
       symbol$3,
       symbol$4,
       ascending,
       descending,
       compare$0,
       equal,
       equal_local,
       max,
       min];
   function of_string(s){return t_of_sexp(caml_call1(Base_Import[136], s));}
   function to_string(t){
    var _d_ = sexp_of_t(t);
    return caml_call1(Base_Import[160], _d_);
   }
   function to_int(param){
    switch(param){case 0: return -1;case 1: return 0;default: return 1;
    }
   }
   function of_int(n){return 0 <= n ? 0 === n ? 1 : 2 : 0;}
   var
    Base_Sign0 =
      [0,
       t_of_sexp,
       sexp_of_t,
       t_sexp_grammar,
       compare_local,
       compare,
       hash_fold_t,
       all,
       Replace_polymorphic_compare,
       of_string,
       to_string,
       to_int,
       to_int,
       module_name,
       of_int];
   runtime.caml_register_global(23, Base_Sign0, "Base__Sign0");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Comparable_intf
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Base_Comparable_intf = [0];
   runtime.caml_register_global
    (0, Base_Comparable_intf, "Base__Comparable_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Comparable
//# unitInfo: Requires: Base__Comparable_intf, Base__Comparator, Base__Or_error, Base__Poly0, Base__Sexp, Base__Sign0
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_clamp_requires_min_max$1 = "clamp requires [min <= max]",
    cst_max$1 = "max",
    cst_min$1 = "min",
    cst_src_comparable_ml = "src/comparable.ml",
    caml_compare = runtime.caml_compare,
    caml_equal = runtime.caml_equal,
    caml_greaterthan = runtime.caml_greaterthan,
    caml_lessequal = runtime.caml_lessequal,
    caml_lessthan = runtime.caml_lessthan,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_Comparator = global_data.Base__Comparator,
    Base_Sexp = global_data.Base__Sexp,
    Base_Or_error = global_data.Base__Or_error,
    Assert_failure = global_data.Assert_failure,
    Base_Poly0 = global_data.Base__Poly0,
    Base_Sign0 = global_data.Base__Sign0,
    cst_max$0 = cst_max$1,
    cst_min$0 = cst_min$1,
    cst_clamp_requires_min_max$0 = cst_clamp_requires_min_max$1,
    _b_ = [0, cst_src_comparable_ml, 135, 4],
    cst_max = cst_max$1,
    cst_min = cst_min$1,
    cst_clamp_requires_min_max = cst_clamp_requires_min_max$1,
    _a_ = [0, cst_src_comparable_ml, 47, 4];
   function geq(cmp, a, b){return 0 <= caml_call2(cmp, a, b) ? 1 : 0;}
   function leq(cmp, a, b){return caml_call2(cmp, a, b) <= 0 ? 1 : 0;}
   function equal(cmp, a, b){return 0 === caml_call2(cmp, a, b) ? 1 : 0;}
   function min(cmp, t$0, t){return leq(cmp, t$0, t) ? t$0 : t;}
   function max(cmp, t$0, t){return geq(cmp, t$0, t) ? t$0 : t;}
   function Infix(T){
    function symbol(a, b){
     var cmp = T[1];
     return 0 < caml_call2(cmp, a, b) ? 1 : 0;
    }
    function symbol$0(a, b){
     var cmp = T[1];
     return caml_call2(cmp, a, b) < 0 ? 1 : 0;
    }
    function symbol$1(a, b){return geq(T[1], a, b);}
    function symbol$2(a, b){return leq(T[1], a, b);}
    function symbol$3(a, b){return equal(T[1], a, b);}
    function symbol$4(a, b){
     var cmp = T[1];
     return 0 !== caml_call2(cmp, a, b) ? 1 : 0;
    }
    return [0, symbol$1, symbol$2, symbol$3, symbol, symbol$0, symbol$4];
   }
   function Comparisons(T){
    var
     include = Infix(T),
     symbol = include[1],
     symbol$0 = include[2],
     symbol$1 = include[3],
     symbol$2 = include[4],
     symbol$3 = include[5],
     symbol$4 = include[6],
     compare = T[1];
    function min$0(t$0, t){return min(compare, t$0, t);}
    function max$0(t$0, t){return max(compare, t$0, t);}
    return [0,
            symbol,
            symbol$0,
            symbol$1,
            symbol$2,
            symbol$3,
            symbol$4,
            symbol$1,
            compare,
            min$0,
            max$0];
   }
   function Make_using_comparator(T){
    var
     sexp_of_t = T[1],
     comparator = T[2],
     compare = comparator[1],
     Replace_polymorphic_compare = Comparisons([0, compare]),
     symbol = Replace_polymorphic_compare[1],
     symbol$0 = Replace_polymorphic_compare[2],
     symbol$1 = Replace_polymorphic_compare[3],
     symbol$2 = Replace_polymorphic_compare[4],
     symbol$3 = Replace_polymorphic_compare[5],
     symbol$4 = Replace_polymorphic_compare[6],
     equal = Replace_polymorphic_compare[7],
     compare$0 = Replace_polymorphic_compare[8],
     min = Replace_polymorphic_compare[9],
     max = Replace_polymorphic_compare[10];
    function descending(t$0, t){return caml_call2(compare$0, t, t$0);}
    function between(t, low, high){
     var _s_ = caml_call2(symbol$0, low, t);
     return _s_ ? caml_call2(symbol$0, t, high) : _s_;
    }
    function clamp_unchecked(t, min, max){
     return caml_call2(symbol$3, t, min)
             ? min
             : caml_call2(symbol$0, t, max) ? t : max;
    }
    function clamp_exn(t, min, max){
     if(caml_call2(symbol$0, min, max)) return clamp_unchecked(t, min, max);
     throw caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1);
    }
    function clamp(t, min, max){
     if(! caml_call2(symbol$2, min, max))
      return [0, clamp_unchecked(t, min, max)];
     var
      _p_ = [0, [0, cst_max$0, caml_call1(sexp_of_t, max)], 0],
      _q_ = [0, [0, cst_min$0, caml_call1(sexp_of_t, min)], _p_],
      _r_ = caml_call2(Base_Sexp[10], cst_clamp_requires_min_max$0, _q_);
     return caml_call1(Base_Or_error[39], _r_);
    }
    return [0,
            symbol,
            symbol$0,
            symbol$1,
            symbol$2,
            symbol$3,
            symbol$4,
            equal,
            compare$0,
            min,
            max,
            compare$0,
            descending,
            between,
            clamp_exn,
            clamp,
            comparator];
   }
   function Make(T){
    var
     sexp_of_t = T[2],
     include = caml_call1(Base_Comparator[7], T),
     comparator = include[1];
    return Make_using_comparator([0, sexp_of_t, comparator]);
   }
   function Inherit(C, T){
    var sexp_of_t = T[1];
    function compare(t$0, t){
     var _n_ = caml_call1(T[2], t), _o_ = caml_call1(T[2], t$0);
     return caml_call2(C[1], _o_, _n_);
    }
    return Make([0, compare, sexp_of_t]);
   }
   function lexicographic(cmps, x, y){
    var param = cmps;
    for(;;){
     if(! param) return 0;
     var cmps$0 = param[2], cmp = param[1], res = caml_call2(cmp, x, y);
     if(0 !== res) return res;
     var param = cmps$0;
    }
   }
   function lift(cmp, f, x, y){
    var _m_ = caml_call1(f, y);
    return caml_call2(cmp, caml_call1(f, x), _m_);
   }
   function reverse(cmp, x, y){return caml_call2(cmp, y, x);}
   function compare_reversed(cmp, x, y){return caml_call2(cmp, y, x);}
   function _c_(_i_){
    var _j_ = _i_[3], _k_ = _i_[1];
    function is_positive(t){return 0 < caml_call2(_k_, t, _j_) ? 1 : 0;}
    function is_non_negative(t){return 0 <= caml_call2(_k_, t, _j_) ? 1 : 0;}
    function is_negative(t){return caml_call2(_k_, t, _j_) < 0 ? 1 : 0;}
    function is_non_positive(t){return caml_call2(_k_, t, _j_) <= 0 ? 1 : 0;}
    function sign(t){
     var _l_ = caml_call2(_k_, t, _j_);
     return caml_call1(Base_Sign0[14], _l_);
    }
    return [0,
            is_positive,
            is_non_negative,
            is_negative,
            is_non_positive,
            sign];
   }
   var
    Base_Comparable =
      [0,
       lexicographic,
       lift,
       reverse,
       compare_reversed,
       equal,
       max,
       min,
       Infix,
       Comparisons,
       Inherit,
       Make,
       Make_using_comparator,
       function(T){
        var
         sexp_of_t = T[1],
         ascending = Base_Poly0[1],
         descending = Base_Poly0[2],
         min = Base_Poly0[3],
         max = Base_Poly0[4];
        function between(t, low, high){
         var
          _g_ = caml_lessequal(low, t),
          _h_ = _g_ ? caml_lessequal(t, high) : _g_;
         return _h_;
        }
        function clamp_unchecked(t, min, max){
         return caml_lessthan(t, min) ? min : caml_lessequal(t, max) ? t : max;
        }
        function clamp_exn(t, min, max){
         if(caml_lessequal(min, max)) return clamp_unchecked(t, min, max);
         throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
        }
        function clamp(t, min, max){
         if(! caml_greaterthan(min, max))
          return [0, clamp_unchecked(t, min, max)];
         var
          _d_ = [0, [0, cst_max, caml_call1(T[1], max)], 0],
          _e_ = [0, [0, cst_min, caml_call1(T[1], min)], _d_],
          _f_ = caml_call2(Base_Sexp[10], cst_clamp_requires_min_max, _e_);
         return caml_call1(Base_Or_error[39], _f_);
        }
        var
         include =
           caml_call1(Base_Comparator[7], [0, caml_compare, sexp_of_t]),
         comparator = include[1];
        return [0,
                runtime.caml_greaterequal,
                caml_lessequal,
                caml_equal,
                caml_greaterthan,
                caml_lessthan,
                runtime.caml_notequal,
                caml_equal,
                caml_compare,
                min,
                max,
                ascending,
                descending,
                between,
                clamp_exn,
                clamp,
                comparator];
       },
       _c_];
   runtime.caml_register_global(14, Base_Comparable, "Base__Comparable");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Hashable_intf
//# unitInfo: Requires: Base__Import
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Base_Import = global_data.Base__Import,
    _a_ = [0, "_"];
   function equal(a, b){
    var _b_ = a === b ? 1 : 0;
    if(_b_)
     var _c_ = _b_;
    else{
     var _d_ = a[1] === b[1] ? 1 : 0;
     if(_d_)
      var
       _e_ = a[2] === b[2] ? 1 : 0,
       _c_ = _e_ ? a[3] === b[3] ? 1 : 0 : _e_;
     else
      var _c_ = _d_;
    }
    return _c_;
   }
   var
    hash_param = Base_Import[85][105][30],
    hash = Base_Import[85][105][28],
    poly = [0, hash, runtime.caml_compare, function(param){return _a_;}];
   function of_key(Key){return [0, Key[3], Key[1], Key[2]];}
   function to_key(param){
    var sexp_of_t = param[3], compare = param[2], hash = param[1];
    return [0, compare, sexp_of_t, hash];
   }
   var
    Hashable = [0, equal, hash_param, hash, poly, of_key, to_key],
    equal$0 = Hashable[1],
    hash_param$0 = Hashable[2],
    hash$0 = Hashable[3],
    poly$0 = Hashable[4],
    of_key$0 = Hashable[5],
    to_key$0 = Hashable[6],
    Base_Hashable_intf =
      [0, Hashable, equal$0, hash_param$0, hash$0, poly$0, of_key$0, to_key$0];
   runtime.caml_register_global(2, Base_Hashable_intf, "Base__Hashable_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Hashable
//# unitInfo: Requires: Base__Hashable_intf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Base_Hashable_intf = global_data.Base__Hashable_intf,
    equal = Base_Hashable_intf[2],
    hash_param = Base_Hashable_intf[3],
    hash = Base_Hashable_intf[4],
    poly = Base_Hashable_intf[5],
    of_key = Base_Hashable_intf[6],
    to_key = Base_Hashable_intf[7],
    Base_Hashable = [0, equal, poly, of_key, to_key, hash_param, hash];
   runtime.caml_register_global(1, Base_Hashable, "Base__Hashable");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Stringable
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Base_Stringable = [0];
   runtime.caml_register_global(0, Base_Stringable, "Base__Stringable");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Identifiable_intf
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Base_Identifiable_intf = [0];
   runtime.caml_register_global
    (0, Base_Identifiable_intf, "Base__Identifiable_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Identifiable
//# unitInfo: Requires: Base__Comparable, Base__Identifiable_intf, Base__Pretty_printer
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_Comparable = global_data.Base__Comparable,
    Base_Pretty_printer = global_data.Base__Pretty_printer;
   function _a_(T){
    var
     hash_fold_t = T[2],
     hash = T[3],
     t_of_sexp = T[4],
     sexp_of_t = T[5],
     of_string = T[6],
     to_string = T[7],
     _c_ = caml_call1(Base_Comparable[12], [0, T[5], T[9]]),
     symbol = _c_[1],
     symbol$0 = _c_[2],
     symbol$1 = _c_[3],
     symbol$2 = _c_[4],
     symbol$3 = _c_[5],
     symbol$4 = _c_[6],
     equal = _c_[7],
     compare = _c_[8],
     min = _c_[9],
     max = _c_[10],
     ascending = _c_[11],
     descending = _c_[12],
     between = _c_[13],
     clamp_exn = _c_[14],
     clamp = _c_[15],
     comparator = _c_[16],
     include = caml_call1(Base_Pretty_printer[2], [0, T[8], T[7]]),
     pp = include[1],
     hashable = [0, hash, compare, sexp_of_t];
    return [0,
            hash_fold_t,
            hash,
            t_of_sexp,
            sexp_of_t,
            of_string,
            to_string,
            symbol,
            symbol$0,
            symbol$1,
            symbol$2,
            symbol$3,
            symbol$4,
            equal,
            compare,
            min,
            max,
            ascending,
            descending,
            between,
            clamp_exn,
            clamp,
            comparator,
            pp,
            hashable];
   }
   var
    Base_Identifiable =
      [0,
       function(T){
        var
         hash_fold_t = T[2],
         hash = T[3],
         t_of_sexp = T[4],
         sexp_of_t = T[5],
         of_string = T[6],
         to_string = T[7],
         _b_ = caml_call1(Base_Comparable[11], [0, T[1], T[5]]),
         symbol = _b_[1],
         symbol$0 = _b_[2],
         symbol$1 = _b_[3],
         symbol$2 = _b_[4],
         symbol$3 = _b_[5],
         symbol$4 = _b_[6],
         equal = _b_[7],
         compare = _b_[8],
         min = _b_[9],
         max = _b_[10],
         ascending = _b_[11],
         descending = _b_[12],
         between = _b_[13],
         clamp_exn = _b_[14],
         clamp = _b_[15],
         comparator = _b_[16],
         include = caml_call1(Base_Pretty_printer[2], [0, T[8], T[7]]),
         pp = include[1],
         hashable = [0, hash, compare, sexp_of_t];
        return [0,
                hash_fold_t,
                hash,
                t_of_sexp,
                sexp_of_t,
                of_string,
                to_string,
                symbol,
                symbol$0,
                symbol$1,
                symbol$2,
                symbol$3,
                symbol$4,
                equal,
                compare,
                min,
                max,
                ascending,
                descending,
                between,
                clamp_exn,
                clamp,
                comparator,
                pp,
                hashable];
       },
       _a_];
   runtime.caml_register_global(2, Base_Identifiable, "Base__Identifiable");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Unit
//# unitInfo: Requires: Base__Identifiable, Base__Import
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, cst$0 = "()";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = cst$0,
    all = [0, 0, 0],
    module_name = "Base.Unit",
    Base_Import = global_data.Base__Import,
    Base_Identifiable = global_data.Base__Identifiable,
    globalize = Base_Import[290],
    hash_fold_t = Base_Import[210],
    func = Base_Import[224],
    cst_Base_Unit_of_string_expect = "Base.Unit.of_string: () expected";
   function hash(x){return caml_call1(func, x);}
   var
    t_of_sexp = Base_Import[158],
    sexp_of_t = Base_Import[134],
    t_sexp_grammar = Base_Import[180];
   function compare(param, _c_){return 0;}
   function compare_local(param, _b_){return 0;}
   function equal_local(param, _a_){return 1;}
   function of_string(param){
    return runtime.caml_string_notequal(param, cst$0)
            ? caml_call1(Base_Import[124], cst_Base_Unit_of_string_expect)
            : 0;
   }
   function to_string(param){return cst;}
   var
    include =
      caml_call1
       (Base_Identifiable[1],
        [0,
         compare,
         hash_fold_t,
         hash,
         t_of_sexp,
         sexp_of_t,
         of_string,
         to_string,
         module_name]),
    hash_fold_t$0 = include[1],
    hash$0 = include[2],
    t_of_sexp$0 = include[3],
    sexp_of_t$0 = include[4],
    of_string$0 = include[5],
    to_string$0 = include[6],
    symbol = include[7],
    symbol$0 = include[8],
    symbol$1 = include[9],
    symbol$2 = include[10],
    symbol$3 = include[11],
    symbol$4 = include[12],
    equal = include[13],
    compare$0 = include[14],
    min = include[15],
    max = include[16],
    ascending = include[17],
    descending = include[18],
    between = include[19],
    clamp_exn = include[20],
    clamp = include[21],
    comparator = include[22],
    pp = include[23],
    hashable = include[24];
   function invariant(param){return 0;}
   var
    Base_Unit =
      [0,
       all,
       globalize,
       t_sexp_grammar,
       hash_fold_t$0,
       hash$0,
       t_of_sexp$0,
       sexp_of_t$0,
       of_string$0,
       to_string$0,
       symbol,
       symbol$0,
       symbol$1,
       symbol$2,
       symbol$3,
       symbol$4,
       equal,
       compare$0,
       min,
       max,
       ascending,
       descending,
       between,
       clamp_exn,
       clamp,
       comparator,
       pp,
       hashable,
       equal_local,
       compare_local,
       invariant];
   runtime.caml_register_global(7, Base_Unit, "Base__Unit");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Ordered_collection_common
//# unitInfo: Requires: Base__Error, Base__Ordered_collection_common0, Stdlib
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Base_Error = global_data.Base__Error,
    Base_Ordered_collection_common =
      global_data.Base__Ordered_collection_common0,
    get_pos_len_exn = Base_Ordered_collection_common[1],
    check_pos_len_exn = Base_Ordered_collection_common[2],
    Private = Base_Ordered_collection_common[3];
   function get_pos_len(pos, len, param, total_length){
    try{
     var _a_ = [0, caml_call4(get_pos_len_exn, pos, len, 0, total_length)];
     return _a_;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn[1] !== Stdlib[6]) throw caml_maybe_attach_backtrace(exn, 0);
     var s = exn[2];
     return [1, caml_call1(Base_Error[14], s)];
    }
   }
   var
    Base_Ordered_collection_common$0 =
      [0, get_pos_len_exn, check_pos_len_exn, Private, get_pos_len];
   runtime.caml_register_global
    (3, Base_Ordered_collection_common$0, "Base__Ordered_collection_common");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Binary_search
//# unitInfo: Requires: Base__Import, Base__Ordered_collection_common
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_Import = global_data.Base__Import,
    Base_Ordered_collection_common =
      global_data.Base__Ordered_collection_common;
   function find_first_satisfying(pos, len, t, get, length, pred){
    var
     _e_ = caml_call1(length, t),
     match = caml_call4(Base_Ordered_collection_common[1], pos, len, 0, _e_),
     len$0 = match[2],
     pos$0 = match[1],
     _f_ = caml_call2(Base_Import[91], pos$0, len$0),
     hi$0 = caml_call2(Base_Import[93], _f_, 1),
     lo$1 = pos$0,
     hi = hi$0;
    for(;;){
     if(8 >= caml_call2(Base_Import[93], hi, lo$1)) break;
     var
      _c_ = caml_call2(Base_Import[93], hi, lo$1),
      _d_ = caml_call2(Base_Import[95], _c_, 2),
      mid = caml_call2(Base_Import[91], lo$1, _d_);
     if(caml_call1(pred, caml_call2(get, t, mid)))
      var hi = mid;
     else
      var lo$2 = caml_call2(Base_Import[91], mid, 1), lo$1 = lo$2;
    }
    var lo = lo$1;
    for(;;){
     if(hi < lo) return 0;
     if(caml_call1(pred, caml_call2(get, t, lo))) return [0, lo];
     var lo$0 = caml_call2(Base_Import[91], lo, 1), lo = lo$0;
    }
   }
   function find_last_satisfying(pos, len, t, pred, get, length){
    var
     _a_ = caml_call1(length, t),
     match = caml_call4(Base_Ordered_collection_common[1], pos, len, 0, _a_),
     len$0 = match[2],
     pos$0 = match[1];
    if(0 === len$0) return 0;
    var
     match$0 =
       find_first_satisfying
        ([0, pos$0],
         [0, len$0],
         t,
         get,
         length,
         function(x){return 1 - caml_call1(pred, x);});
    if(match$0){
     var i = match$0[1];
     return i === pos$0 ? 0 : [0, caml_call2(Base_Import[93], i, 1)];
    }
    var _b_ = caml_call2(Base_Import[91], pos$0, len$0);
    return [0, caml_call2(Base_Import[93], _b_, 1)];
   }
   function binary_search(pos, len, t, length, get, compare, how, v){
    if(-839473056 <= how)
     return 200870407 <= how
             ? 926943384
               <= how
               ? find_first_satisfying
                 (pos,
                  len,
                  t,
                  get,
                  length,
                  function(x){return 0 <= caml_call2(compare, x, v) ? 1 : 0;})
               : find_last_satisfying
                 (pos,
                  len,
                  t,
                  function(x){return caml_call2(compare, x, v) < 0 ? 1 : 0;},
                  get,
                  length)
             : -253007807
               <= how
               ? find_last_satisfying
                 (pos,
                  len,
                  t,
                  function(x){return caml_call2(compare, x, v) <= 0 ? 1 : 0;},
                  get,
                  length)
               : find_first_satisfying
                 (pos,
                  len,
                  t,
                  get,
                  length,
                  function(x){return 0 < caml_call2(compare, x, v) ? 1 : 0;});
    if(-1055410545 <= how){
     var
      match =
        find_last_satisfying
         (pos,
          len,
          t,
          function(x){return caml_call2(compare, x, v) <= 0 ? 1 : 0;},
          get,
          length);
     if(match){
      var x = match[1];
      if(0 === caml_call2(compare, caml_call2(get, t, x), v)) return [0, x];
     }
     return 0;
    }
    var
     match$0 =
       find_first_satisfying
        (pos,
         len,
         t,
         get,
         length,
         function(x){return 0 <= caml_call2(compare, x, v) ? 1 : 0;});
    if(match$0){
     var x$0 = match$0[1];
     if(0 === caml_call2(compare, caml_call2(get, t, x$0), v))
      return [0, x$0];
    }
    return 0;
   }
   function binary_search_segmented(pos, len, t, length, get, segment_of, how){
    function is_left(x){
     return 847852583 <= caml_call1(segment_of, x) ? 1 : 0;
    }
    function is_right(x){return 1 - is_left(x);}
    return 125585502 <= how
            ? find_last_satisfying(pos, len, t, is_left, get, length)
            : find_first_satisfying(pos, len, t, get, length, is_right);
   }
   var Base_Binary_search = [0, binary_search, binary_search_segmented];
   runtime.caml_register_global(2, Base_Binary_search, "Base__Binary_search");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Binary_searchable_intf
(function(globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    all =
      [0,
       200870407,
       [0,
        -253007807,
        [0, -1055410545, [0, -1056898635, [0, 926943384, [0, -839473056, 0]]]]]],
    all$0 = [0, 125585502, [0, -63348021, 0]],
    Which_target_by_key = [0, all],
    Which_target_by_segment = [0, all$0],
    Base_Binary_searchable_intf =
      [0, Which_target_by_key, Which_target_by_segment];
   runtime.caml_register_global
    (2, Base_Binary_searchable_intf, "Base__Binary_searchable_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Binary_searchable
//# unitInfo: Requires: Base__Binary_search, Base__Binary_searchable_intf
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    Base_Binary_search = global_data.Base__Binary_search;
   function Make_gen(T){
    var get = T[1], length = T[2];
    function binary_search(pos, len, t, compare, how, v){
     return caml_call8
             (Base_Binary_search[1],
              pos,
              len,
              t,
              length,
              get,
              compare,
              how,
              v);
    }
    function binary_search_segmented(pos, len, t, segment_of, how){
     return caml_call7
             (Base_Binary_search[2],
              pos,
              len,
              t,
              length,
              get,
              segment_of,
              how);
    }
    return [0, , , binary_search, binary_search_segmented];
   }
   function _a_(T){
    var get = T[1], length = T[2], _c_ = Make_gen([0, get, length]);
    return [0, _c_[3], _c_[4]];
   }
   var
    Base_Binary_searchable =
      [0,
       function(T){
        var get = T[1], length = T[2], _b_ = Make_gen([0, get, length]);
        return [0, _b_[3], _b_[4]];
       },
       _a_];
   runtime.caml_register_global
    (1, Base_Binary_searchable, "Base__Binary_searchable");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Blit_intf
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Base_Blit_intf = [0];
   runtime.caml_register_global(0, Base_Blit_intf, "Base__Blit_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Bytes0
//# unitInfo: Requires: Base__Import0, Base__Int_conversions, Base__Sys0, Base__Uchar0, Stdlib__BytesLabels
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_bytes_unsafe_get = runtime.caml_bytes_unsafe_get,
    caml_bytes_unsafe_set = runtime.caml_bytes_unsafe_set,
    caml_create_bytes = runtime.caml_create_bytes,
    caml_ml_bytes_length = runtime.caml_ml_bytes_length;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_Import0 = global_data.Base__Import0,
    Base_Sys0 = global_data.Base__Sys0,
    Base_Uchar0 = global_data.Base__Uchar0,
    Base_Int_conversions = global_data.Base__Int_conversions,
    Stdlib_BytesLabels = global_data.Stdlib__BytesLabels,
    Primitives = [0],
    max_length = Base_Sys0[10],
    blit = Stdlib_BytesLabels[11],
    blit_string = Stdlib_BytesLabels[12],
    compare = Stdlib_BytesLabels[40],
    copy = Stdlib_BytesLabels[4],
    create = caml_create_bytes,
    set_uchar_utf_8 = Stdlib_BytesLabels[51],
    set_uchar_utf_16le = Stdlib_BytesLabels[57],
    set_uchar_utf_16be = Stdlib_BytesLabels[54],
    cst_Bytes_create_local = "Bytes.create_local";
   function set_utf_32_uchar(set_int32, bytes, idx, uchar){
    var
     _o_ = caml_call1(Base_Uchar0[8], uchar),
     _p_ = caml_call1(Base_Int_conversions[3], _o_);
    caml_call1(caml_call2(set_int32, bytes, idx), _p_);
    return 4;
   }
   var _a_ = Stdlib_BytesLabels[83];
   function set_uchar_utf_32le(_l_, _m_, _n_){
    return set_utf_32_uchar(_a_, _l_, _m_, _n_);
   }
   var _b_ = Stdlib_BytesLabels[82];
   function set_uchar_utf_32be(_i_, _j_, _k_){
    return set_utf_32_uchar(_b_, _i_, _j_, _k_);
   }
   function create_local(len){
    if(Base_Sys0[10] < len)
     caml_call1(Base_Import0[126], cst_Bytes_create_local);
    return runtime.Base_unsafe_create_local_bytes(len);
   }
   var fill = Stdlib_BytesLabels[10], make = Stdlib_BytesLabels[1];
   function map(t, f){
    var l = caml_ml_bytes_length(t);
    if(0 === l) return t;
    var
     r = caml_create_bytes(l),
     _g_ = caml_call2(Base_Import0[93], l, 1),
     _f_ = 0;
    if(_g_ >= 0){
     var i = _f_;
     for(;;){
      caml_bytes_unsafe_set(r, i, caml_call1(f, caml_bytes_unsafe_get(t, i)));
      var _h_ = i + 1 | 0;
      if(_g_ === i) break;
      var i = _h_;
     }
    }
    return r;
   }
   function mapi(t, f){
    var l = caml_ml_bytes_length(t);
    if(0 === l) return t;
    var
     r = caml_create_bytes(l),
     _d_ = caml_call2(Base_Import0[93], l, 1),
     _c_ = 0;
    if(_d_ >= 0){
     var i = _c_;
     for(;;){
      caml_bytes_unsafe_set
       (r, i, caml_call2(f, i, caml_bytes_unsafe_get(t, i)));
      var _e_ = i + 1 | 0;
      if(_d_ === i) break;
      var i = _e_;
     }
    }
    return r;
   }
   var
    sub = Stdlib_BytesLabels[7],
    to_string = Stdlib_BytesLabels[6],
    of_string = Stdlib_BytesLabels[5],
    Base_Bytes0 =
      [0,
       Primitives,
       max_length,
       blit,
       blit_string,
       compare,
       copy,
       create,
       set_uchar_utf_8,
       set_uchar_utf_16le,
       set_uchar_utf_16be,
       set_utf_32_uchar,
       set_uchar_utf_32le,
       set_uchar_utf_32be,
       create_local,
       fill,
       make,
       map,
       mapi,
       sub,
       to_string,
       of_string];
   runtime.caml_register_global(6, Base_Bytes0, "Base__Bytes0");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Blit
//# unitInfo: Requires: Base__Blit_intf, Base__Import, Base__Ordered_collection_common
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_string_of_bytes = runtime.caml_string_of_bytes;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_Import = global_data.Base__Import,
    Base_Ordered_collection_common =
      global_data.Base__Ordered_collection_common;
   function Make_gen(Src, Dst){
    var unsafe_blit = Dst[3];
    function blit(src, src_pos, dst, dst_pos, len){
     var _o_ = caml_call1(Src[1], src);
     caml_call3(Base_Ordered_collection_common[2], src_pos, len, _o_);
     var _p_ = caml_call1(Dst[1], dst);
     caml_call3(Base_Ordered_collection_common[2], dst_pos, len, _p_);
     var _q_ = 0 < len ? 1 : 0;
     return _q_
             ? caml_call5(unsafe_blit, src, src_pos, dst, dst_pos, len)
             : _q_;
    }
    function blito(src, opt, _m_, dst, _l_, param){
     if(opt) var sth = opt[1], src_pos = sth; else var src_pos = 0;
     if(_m_)
      var sth$0 = _m_[1], src_len = sth$0;
     else
      var
       _n_ = caml_call1(Src[1], src),
       src_len = caml_call2(Base_Import[93], _n_, src_pos);
     if(_l_) var sth$1 = _l_[1], dst_pos = sth$1; else var dst_pos = 0;
     return blit(src, src_pos, dst, dst_pos, src_len);
    }
    function sub(src, pos, len){
     var _k_ = caml_call1(Src[1], src);
     caml_call3(Base_Ordered_collection_common[2], pos, len, _k_);
     var dst = caml_call2(Dst[2], len, src);
     if(0 < len) caml_call5(unsafe_blit, src, pos, dst, 0, len);
     return dst;
    }
    function subo(opt, len, src){
     if(opt) var sth = opt[1], pos = sth; else var pos = 0;
     if(len)
      var i = len[1], i$0 = i;
     else
      var
       _j_ = caml_call1(Src[1], src),
       i$0 = caml_call2(Base_Import[93], _j_, pos);
     return sub(src, pos, i$0);
    }
    return [0, unsafe_blit, blit, blito, sub, subo];
   }
   function Make_to_string(T, To_bytes){
    function sub(src, pos, len){
     return caml_string_of_bytes(caml_call3(To_bytes[4], src, pos, len));
    }
    function subo(pos, len, src){
     return caml_string_of_bytes(caml_call3(To_bytes[5], pos, len, src));
    }
    return [0, sub, subo];
   }
   function _a_(_h_){
    var _i_ = Make_gen([0, _h_[2]], [0, _h_[2], _h_[1], _h_[3]]);
    return [0, _i_[2], _i_[3], _i_[1], _i_[4], _i_[5]];
   }
   function _b_(_e_){
    var _f_ = [0, _e_[2], _e_[1], _e_[3]], _g_ = Make_gen([0, _f_[1]], _f_);
    return [0, _g_[2], _g_[3], _g_[1], _g_[4], _g_[5]];
   }
   function _c_(Src, Dst){
    var length = Dst[1];
    function create_like(len, param){return caml_call1(Dst[2], len);}
    var
     unsafe_blit = Dst[3],
     length$0 = Src[1],
     _d_ = Make_gen([0, length$0], [0, length, create_like, unsafe_blit]);
    return [0, _d_[2], _d_[3], _d_[1], _d_[4], _d_[5]];
   }
   var
    Base_Blit =
      [0,
       function(Sequence){
        function create_like(len, param){return caml_call1(Sequence[2], len);}
        var
         length = Sequence[1],
         unsafe_blit = Sequence[3],
         include =
           Make_gen([0, length], [0, length, create_like, unsafe_blit]),
         unsafe_blit$0 = include[1],
         blit = include[2],
         blito = include[3],
         sub = include[4],
         subo = include[5];
        return [0, blit, blito, unsafe_blit$0, sub, subo];
       },
       _c_,
       Make_to_string,
       _b_,
       _a_];
   runtime.caml_register_global(2, Base_Blit, "Base__Blit");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Bool
//# unitInfo: Requires: Base__Bool0, Base__Comparator, Base__Import, Base__Or_error, Base__Pretty_printer, Base__Printf, Base__Sexp
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_src_bool_ml = "src/bool.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_string_notequal = runtime.caml_string_notequal;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    all = [0, 0, [0, 1, 0]],
    module_name = "Base.Bool",
    Base_Import = global_data.Base__Import,
    Base_Sexp = global_data.Base__Sexp,
    Base_Or_error = global_data.Base__Or_error,
    Assert_failure = global_data.Assert_failure,
    Base_Printf = global_data.Base__Printf,
    Base_Comparator = global_data.Base__Comparator,
    Base_Pretty_printer = global_data.Base__Pretty_printer,
    invalid_argf = Base_Printf[7],
    compare = Base_Import[225],
    globalize = Base_Import[281],
    hash_fold_t = Base_Import[207],
    func = Base_Import[221],
    cst_max = "max",
    cst_min = "min",
    cst_clamp_requires_min_max = "clamp requires [min <= max]",
    _b_ = [0, cst_src_bool_ml, 59, 2],
    _a_ =
      [0,
       [11, "Bool.of_string: expected true or false but got ", [2, 0, 0]],
       "Bool.of_string: expected true or false but got %s"],
    _c_ = [0, cst_src_bool_ml, 86, 9];
   function hash(x){return caml_call1(func, x);}
   var
    t_of_sexp = Base_Import[159],
    sexp_of_t = Base_Import[135],
    t_sexp_grammar = Base_Import[181],
    hashable = [0, hash, compare, sexp_of_t];
   function of_string(s){
    return caml_string_notequal(s, "false")
            ? caml_string_notequal
               (s, "true")
              ? caml_call3(invalid_argf, _a_, s, 0)
              : 1
            : 0;
   }
   var
    to_string = Base_Import[85][30],
    include = caml_call1(Base_Comparator[7], [0, compare, sexp_of_t]),
    comparator = include[1],
    include$0 =
      caml_call1(Base_Pretty_printer[2], [0, module_name, to_string]),
    pp = include$0[1];
   function invariant(param){return 0;}
   function between(t, low, high){
    var _k_ = caml_call2(Base_Import[105][2], low, t);
    return _k_ ? caml_call2(Base_Import[105][2], t, high) : _k_;
   }
   function clamp_unchecked(t, min, max){
    return caml_call2(Base_Import[105][1], t, min)
            ? min
            : caml_call2(Base_Import[105][2], t, max) ? t : max;
   }
   function clamp_exn(t, min, max){
    if(caml_call2(Base_Import[105][2], min, max))
     return clamp_unchecked(t, min, max);
    throw caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1);
   }
   function clamp(t, min, max){
    if(! caml_call2(Base_Import[105][5], min, max))
     return [0, clamp_unchecked(t, min, max)];
    var
     _h_ = [0, [0, cst_max, caml_call1(sexp_of_t, max)], 0],
     _i_ = [0, [0, cst_min, caml_call1(sexp_of_t, min)], _h_],
     _j_ = caml_call2(Base_Sexp[10], cst_clamp_requires_min_max, _i_);
    return caml_call1(Base_Or_error[39], _j_);
   }
   function to_int(x){return caml_call1(Base_Import[86], x);}
   function symbol(a, b){
    var _f_ = to_int(b), _g_ = to_int(a);
    return caml_call2(Base_Import[118], _g_, _f_);
   }
   function symbol$0(a, b){
    var _d_ = to_int(b), _e_ = to_int(a);
    return caml_call2(Base_Import[116], _e_, _d_);
   }
   if(1 === to_int(1) && 0 === to_int(0)){
    var
     include$1 = Base_Import[105],
     symbol$1 = include$1[1],
     symbol$2 = include$1[2],
     symbol$3 = include$1[3],
     symbol$4 = include$1[4],
     symbol$5 = include$1[5],
     symbol$6 = include$1[6],
     ascending = include$1[7],
     descending = include$1[8],
     compare$0 = include$1[9],
     compare_local = include$1[10],
     equal = include$1[11],
     equal_local = include$1[12],
     max = include$1[13],
     min = include$1[14],
     Base_Bool =
       [0,
        all,
        globalize,
        t_sexp_grammar,
        hash_fold_t,
        hash,
        t_of_sexp,
        sexp_of_t,
        of_string,
        to_string,
        symbol$6,
        symbol$2,
        symbol$4,
        symbol$5,
        symbol$1,
        symbol$3,
        equal,
        compare$0,
        min,
        max,
        ascending,
        descending,
        between,
        clamp_exn,
        clamp,
        comparator,
        pp,
        hashable,
        compare_local,
        equal_local,
        invariant,
        to_int,
        [0, symbol$0, symbol]];
    runtime.caml_register_global(17, Base_Bool, "Base__Bool");
    return;
   }
   throw caml_maybe_attach_backtrace([0, Assert_failure, _c_], 1);
  }
  (globalThis));

//# unitInfo: Provides: Base__Either_intf
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Base_Either_intf = [0];
   runtime.caml_register_global(0, Base_Either_intf, "Base__Either_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Either
//# unitInfo: Requires: Base__Applicative, Base__Either0, Base__Either_intf, Base__List0, Base__Monad, Base__With_return
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    Base_With_return = global_data.Base__With_return,
    Base_List0 = global_data.Base__List0,
    Base_Monad = global_data.Base__Monad,
    Base_Applicative = global_data.Base__Applicative,
    Base_Either0 = global_data.Base__Either0,
    compare_local = Base_Either0[1],
    compare = Base_Either0[2],
    hash_fold_t = Base_Either0[3],
    t_of_sexp = Base_Either0[4],
    sexp_of_t = Base_Either0[5],
    t_sexp_grammar = Base_Either0[6];
   function swap(param){
    if(0 === param[0]){var x = param[1]; return [1, x];}
    var x$0 = param[1];
    return [0, x$0];
   }
   function is_first(param){return 0 === param[0] ? 1 : 0;}
   function is_second(param){return 0 === param[0] ? 0 : 1;}
   function value(param){var x = param[1]; return x;}
   function value_map(t, first, second){
    if(0 === t[0]){var x = t[1]; return caml_call1(first, x);}
    var x$0 = t[1];
    return caml_call1(second, x$0);
   }
   function map(t, first, second){
    if(0 === t[0]){var x = t[1]; return [0, caml_call1(first, x)];}
    var x$0 = t[1];
    return [1, caml_call1(second, x$0)];
   }
   function first(x){return [0, x];}
   function second(x){return [1, x];}
   function equal(eq1, eq2, t1, t2){
    if(0 === t1[0]){
     var x = t1[1];
     if(0 === t2[0]){var y = t2[1]; return caml_call2(eq1, x, y);}
    }
    else{
     var x$0 = t1[1];
     if(0 !== t2[0]){var y$0 = t2[1]; return caml_call2(eq2, x$0, y$0);}
    }
    return 0;
   }
   function local_equal(eq1, eq2, t1, t2){
    if(0 === t1[0]){
     var x = t1[1];
     if(0 === t2[0]){var y = t2[1]; return caml_call2(eq1, x, y);}
    }
    else{
     var x$0 = t1[1];
     if(0 !== t2[0]){var y$0 = t2[1]; return caml_call2(eq2, x$0, y$0);}
    }
    return 0;
   }
   function invariant(f, s, param){
    if(0 === param[0]){var x = param[1]; return caml_call1(f, x);}
    var y = param[1];
    return caml_call1(s, y);
   }
   function Make_focused(M){
    var
     return$0 = M[1],
     other = M[2],
     focus = M[3],
     combine = M[4],
     bind = M[5],
     map =
       [0,
        -198771759,
        function(t, f){
         var
          res =
            caml_call2
             (bind,
              t,
              function(x){return caml_call1(return$0, caml_call1(f, x));});
         return res;
        }],
     include = caml_call1(Base_Monad[6], [0, bind, map, return$0]),
     symbol_bind = include[1],
     Let_syntax = include[3],
     Monad_infix = include[4],
     bind$0 = include[5],
     return$1 = include[6],
     join = include[8],
     ignore_m = include[9],
     map$0 = [0, -198771759, include[7]];
    function map2(t1, t2, f){
     return caml_call2
             (bind$0,
              t1,
              function(x){
               return caml_call2
                       (bind$0,
                        t2,
                        function(y){
                         return caml_call1(return$1, caml_call2(f, x, y));
                        });
              });
    }
    var
     App = caml_call1(Base_Applicative[17], [0, return$1, map2, map$0]),
     return$2 = App[1],
     map$1 = App[2],
     both = App[3],
     symbol = App[4],
     symbol$0 = App[5],
     symbol$1 = App[6],
     symbol_map = App[7],
     apply = App[8],
     map2$0 = App[9],
     map3 = App[10],
     all = App[11],
     all_unit = App[12],
     Applicative_infix = App[13];
    function combine_all(ts$1, f){
     var acc$1 = 0, param$0 = ts$1;
     for(;;){
      if(! param$0)
       return caml_call1(return$2, caml_call1(Base_List0[19], acc$1));
      var
       ts$0 = param$0[2],
       t$0 = param$0[1],
       match$0 = caml_call1(focus, t$0);
      if(0 !== match$0[0]) break;
      var acc$2 = [0, match$0[1], acc$1], acc$1 = acc$2, param$0 = ts$0;
     }
     var acc$3 = match$0[1], acc = acc$3, param = ts$0;
     for(;;){
      if(! param) return caml_call1(other, acc);
      var ts = param[2], t = param[1], match = caml_call1(focus, t);
      if(0 === match[0])
       var param = ts;
      else
       var acc$0 = caml_call2(f, acc, match[1]), acc = acc$0, param = ts;
     }
    }
    function combine_all_unit(ts$1, f){
     var param$0 = ts$1;
     for(;;){
      if(! param$0) return caml_call1(return$2, 0);
      var
       ts$0 = param$0[2],
       t$0 = param$0[1],
       match$0 = caml_call1(focus, t$0);
      if(0 !== match$0[0]) break;
      var param$0 = ts$0;
     }
     var acc$1 = match$0[1], acc = acc$1, param = ts$0;
     for(;;){
      if(! param) return caml_call1(other, acc);
      var ts = param[2], t = param[1], match = caml_call1(focus, t);
      if(0 === match[0])
       var param = ts;
      else
       var acc$0 = caml_call2(f, acc, match[1]), acc = acc$0, param = ts;
     }
    }
    function to_option(t){
     var match = caml_call1(focus, t);
     return 0 === match[0] ? [0, match[1]] : 0;
    }
    function value(t, default$0){
     var match = caml_call1(focus, t);
     return 0 === match[0] ? match[1] : default$0;
    }
    function with_return(f){
     function _a_(ret){
      return caml_call1
              (other,
               caml_call1(f, caml_call2(Base_With_return[3], ret, return$2)));
     }
     return caml_call1(Base_With_return[1], _a_);
    }
    return [0,
            ,
            ,
            combine,
            symbol_bind,
            Let_syntax,
            Monad_infix,
            bind$0,
            join,
            ignore_m,
            ,
            return$2,
            map$1,
            both,
            symbol,
            symbol$0,
            symbol$1,
            symbol_map,
            apply,
            map2$0,
            map3,
            all,
            all_unit,
            Applicative_infix,
            combine_all,
            combine_all_unit,
            to_option,
            value,
            with_return];
   }
   function focus(t){
    if(0 === t[0]){var x = t[1]; return [0, x];}
    var y = t[1];
    return [1, y];
   }
   function combine(t1, t2, f, other){
    if(0 === t1[0]){
     var x = t1[1];
     if(0 === t2[0]){var y = t2[1]; return [0, caml_call2(f, x, y)];}
     var x$0 = t2[1];
    }
    else{
     var x$1 = t1[1];
     if(0 !== t2[0]){
      var y$0 = t2[1];
      return [1, caml_call2(other, x$1, y$0)];
     }
     var x$0 = x$1;
    }
    return [1, x$0];
   }
   function bind(t, f){
    if(0 !== t[0]) return t;
    var x = t[1];
    return caml_call1(f, x);
   }
   var First = Make_focused([0, first, second, focus, combine, bind]);
   function focus$0(t){
    if(0 === t[0]){var y = t[1]; return [1, y];}
    var x = t[1];
    return [0, x];
   }
   function combine$0(t1, t2, f, other){
    if(0 === t1[0]){
     var x = t1[1];
     if(0 === t2[0]){var y = t2[1]; return [0, caml_call2(other, x, y)];}
     var x$0 = x;
    }
    else{
     var x$1 = t1[1];
     if(0 !== t2[0]){var y$0 = t2[1]; return [1, caml_call2(f, x$1, y$0)];}
     var x$0 = t2[1];
    }
    return [0, x$0];
   }
   function bind$0(t, f){
    if(0 === t[0]) return t;
    var x = t[1];
    return caml_call1(f, x);
   }
   var
    Second = Make_focused([0, second, first, focus$0, combine$0, bind$0]),
    Export = [0],
    Base_Either =
      [0,
       compare,
       compare_local,
       hash_fold_t,
       t_of_sexp,
       sexp_of_t,
       t_sexp_grammar,
       invariant,
       swap,
       value,
       value_map,
       value_map,
       map,
       equal,
       local_equal,
       [0,
        First[4],
        First[5],
        First[6],
        First[7],
        First[8],
        First[9],
        First[11],
        First[12],
        First[13],
        First[14],
        First[15],
        First[16],
        First[17],
        First[18],
        First[19],
        First[20],
        First[21],
        First[22],
        First[23],
        First[27],
        First[26],
        First[28],
        First[3],
        First[24],
        First[25]],
       [0,
        Second[4],
        Second[5],
        Second[6],
        Second[7],
        Second[8],
        Second[9],
        Second[11],
        Second[12],
        Second[13],
        Second[14],
        Second[15],
        Second[16],
        Second[17],
        Second[18],
        Second[19],
        Second[20],
        Second[21],
        Second[22],
        Second[23],
        Second[27],
        Second[26],
        Second[28],
        Second[3],
        Second[24],
        Second[25]],
       is_first,
       is_second,
       first,
       second,
       Export];
   runtime.caml_register_global(5, Base_Either, "Base__Either");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Option
//# unitInfo: Requires: Base__Applicative, Base__Error, Base__Import, Base__Monad, Base__Source_code_position0
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Base_Source_code_position0 = global_data.Base__Source_code_position0,
    Base_Error = global_data.Base__Error,
    Base_Import = global_data.Base__Import,
    Base_Monad = global_data.Base__Monad,
    Base_Applicative = global_data.Base__Applicative,
    compare_local = Base_Import[265],
    compare = Base_Import[237],
    globalize = Base_Import[294],
    hash_fold_t = Base_Import[211],
    t_of_sexp = Base_Import[170],
    sexp_of_t = Base_Import[146],
    cst_Option_value_exn = "Option.value_exn",
    cst_Option_value_exn_None = "Option.value_exn None";
   function t_sexp_grammar(a_sexp_grammar){
    return caml_call1(Base_Import[193], a_sexp_grammar);
   }
   function is_none(param){return param ? 0 : 1;}
   function is_some(param){return param ? 1 : 0;}
   function value_map(o, default$0, f){
    if(! o) return default$0;
    var x = o[1];
    return caml_call1(f, x);
   }
   function iter(o, f){
    if(! o) return 0;
    var a = o[1];
    return caml_call1(f, a);
   }
   function invariant(f, t){return iter(t, f);}
   function call(x, f){
    if(! f) return 0;
    var f$0 = f[1];
    return caml_call1(f$0, x);
   }
   function value(t, default$0){
    if(! t) return default$0;
    var x = t[1];
    return x;
   }
   function value_exn(here, error, message, t){
    if(t){var x = t[1]; return x;}
    if(here){
     var p = here[1];
     if(error)
      var
       e = error[1],
       _e_ =
         caml_call2
          (Base_Import[147], Base_Error[9], Base_Source_code_position0[9]),
       _f_ = value(message, cst),
       _g_ = caml_call5(Base_Error[19], 0, 0, _f_, [0, e, p], _e_);
     else if(message)
      var
       m = message[1],
       _g_ =
         caml_call5(Base_Error[19], 0, 0, m, p, Base_Source_code_position0[9]);
     else
      var
       _g_ =
         caml_call5
          (Base_Error[19],
           0,
           0,
           cst_Option_value_exn,
           p,
           Base_Source_code_position0[9]);
     var error$0 = _g_;
    }
    else if(error){
     var e$0 = error[1];
     if(message)
      var m$0 = message[1], _h_ = caml_call2(Base_Error[22], e$0, m$0);
     else
      var _h_ = e$0;
     var error$0 = _h_;
    }
    else if(message)
     var m$1 = message[1], error$0 = caml_call1(Base_Error[14], m$1);
    else
     var error$0 = caml_call1(Base_Error[14], cst_Option_value_exn_None);
    return caml_call1(Base_Error[31], error$0);
   }
   function value_or_thunk(o, default$0){
    if(! o) return caml_call1(default$0, 0);
    var x = o[1];
    return x;
   }
   function to_array(t){if(! t) return [0]; var x = t[1]; return [0, x];}
   function to_list(t){if(! t) return 0; var x = t[1]; return [0, x, 0];}
   function for_all(t, f){
    if(! t) return 1;
    var x = t[1];
    return caml_call1(f, x);
   }
   function exists(t, f){
    if(! t) return 0;
    var x = t[1];
    return caml_call1(f, x);
   }
   function mem(t, a, equal){
    if(! t) return 0;
    var a$0 = t[1];
    return caml_call2(equal, a, a$0);
   }
   function length(t){return t ? 1 : 0;}
   function fold(t, init, f){
    if(! t) return init;
    var x = t[1];
    return caml_call2(f, init, x);
   }
   function find(t, f){
    if(! t) return 0;
    var x = t[1];
    return caml_call1(f, x) ? t : 0;
   }
   function find_map(t, f){
    if(! t) return 0;
    var a = t[1];
    return caml_call1(f, a);
   }
   function equal(f, t$0, t){
    if(t$0){
     if(t){var x = t[1], x$0 = t$0[1]; return caml_call2(f, x$0, x);}
    }
    else if(! t) return 1;
    return 0;
   }
   function equal_local(f, t$0, t){
    if(t$0){
     if(t){var x = t[1], x$0 = t$0[1]; return caml_call2(f, x$0, x);}
    }
    else if(! t) return 1;
    return 0;
   }
   function some(x){return [0, x];}
   function first_some(x, y){return x ? x : y;}
   function some_if(cond, x){return cond ? [0, x] : 0;}
   function merge(a, b, f){
    if(a){
     if(b){var b$0 = b[1], a$0 = a[1]; return [0, caml_call2(f, a$0, b$0)];}
     var x = a;
    }
    else
     var x = b;
    return x;
   }
   function filter(t, f){
    if(t){var v = t[1]; if(caml_call1(f, v)) return t;}
    return 0;
   }
   function try_with(f){
    try{var x = caml_call1(f, 0);}catch(_d_){return 0;}
    return [0, x];
   }
   function try_with_join(f){
    try{var x = caml_call1(f, 0); return x;}catch(_c_){return 0;}
   }
   function _a_(t, f){
    if(! t) return 0;
    var a = t[1];
    return [0, caml_call1(f, a)];
   }
   function return$0(x){return [0, x];}
   var map = [0, -198771759, _a_];
   function bind(o, f){
    if(! o) return 0;
    var x = o[1];
    return caml_call1(f, x);
   }
   var
    include = caml_call1(Base_Monad[5], [0, bind, return$0, map]),
    symbol_bind = include[1],
    Monad_infix = include[3],
    bind$0 = include[4],
    join = include[7],
    ignore_m = include[8],
    Let_syntax = include[11],
    _b_ = include[6];
   function return$1(x){return [0, x];}
   var map$0 = [0, -198771759, _b_];
   function map2(x, y, f){
    if(x && y){
     var y$0 = y[1], x$0 = x[1];
     return [0, caml_call2(f, x$0, y$0)];
    }
    return 0;
   }
   var
    include$0 = caml_call1(Base_Applicative[16], [0, return$1, map2, map$0]),
    return$2 = include$0[1],
    map$1 = include$0[2],
    both = include$0[3],
    symbol = include$0[4],
    symbol$0 = include$0[5],
    symbol$1 = include$0[6],
    symbol_map = include$0[7],
    apply = include$0[8],
    map2$0 = include$0[9],
    map3 = include$0[10],
    all = include$0[11],
    all_unit = include$0[12],
    Applicative_infix = include$0[13],
    Base_Option =
      [0,
       compare,
       compare_local,
       globalize,
       hash_fold_t,
       t_sexp_grammar,
       equal,
       equal_local,
       invariant,
       t_of_sexp,
       sexp_of_t,
       both,
       symbol,
       symbol$0,
       symbol$1,
       apply,
       map2$0,
       map3,
       Applicative_infix,
       symbol_bind,
       symbol_map,
       Monad_infix,
       bind$0,
       return$2,
       map$1,
       join,
       ignore_m,
       all,
       all_unit,
       Let_syntax,
       value,
       value_exn,
       value_map,
       value_or_thunk,
       fold,
       mem,
       length,
       iter,
       exists,
       for_all,
       find,
       find_map,
       to_list,
       to_array,
       call,
       merge,
       filter,
       try_with,
       try_with_join,
       some,
       first_some,
       some_if,
       is_none,
       is_some];
   runtime.caml_register_global(8, Base_Option, "Base__Option");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Ppx_enumerate_lib
(function(globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Enumerable = [0],
    Base_Ppx_enumerate_lib = [0, Enumerable];
   runtime.caml_register_global
    (0, Base_Ppx_enumerate_lib, "Base__Ppx_enumerate_lib");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Sequence
//# unitInfo: Requires: Base__Array0, Base__Bool, Base__Container, Base__Hash, Base__Import, Base__List1, Base__Monad, Base__Result, CamlinternalLazy, Sexplib0__Sexp_conv_error
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Both$0 = "Both",
    cst_Left$0 = "Left",
    cst_Right$0 = "Right",
    cst_Sequence_nth$1 = "Sequence.nth",
    cst_both = "both",
    cst_left = "left",
    cst_right = "right",
    cst_state = "state",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_obj_tag = runtime.caml_obj_tag,
    caml_string_notequal = runtime.caml_string_notequal;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    error_source_057 = "sequence.ml.Merge_with_duplicates_element.t",
    Base_List1 = global_data.Base__List1,
    Base_Import = global_data.Base__Import,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Base_Result = global_data.Base__Result,
    Base_Container = global_data.Base__Container,
    Base_Bool = global_data.Base__Bool,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Base_Hash = global_data.Base__Hash,
    Assert_failure = global_data.Assert_failure,
    Base_Array0 = global_data.Base__Array0,
    Base_Monad = global_data.Base__Monad,
    _m_ = [0, 0],
    cst_Bug_This_branch_should_be_ = "Bug: This branch should be unreachable",
    cst_Sequence_cycle_list_exn = "Sequence.cycle_list_exn",
    cst_Sequence_drop = "Sequence.drop",
    cst_Sequence_take = "Sequence.take",
    cst_Sequence_sub = "Sequence.sub",
    cst_Sequence_reduce_exn = "Sequence.reduce_exn",
    cst_Sequence_find_exn = "Sequence.find_exn",
    cst_Sequence_chunks_exn = "Sequence.chunks_exn",
    cst_Sequence_tl_exn = "Sequence.tl_exn",
    cst_hd_exn = "hd_exn",
    cst_Both = cst_Both$0,
    cst_Right = cst_Right$0,
    cst_Left = cst_Left$0,
    _j_ = [0, cst_Left$0],
    _k_ = [0, cst_Right$0],
    _l_ = [0, cst_Both$0],
    cst_Sequence_nth$0 = cst_Sequence_nth$1,
    cst_Sequence_nth = cst_Sequence_nth$1,
    _i_ = [0, "src/sequence.ml", 304, 14],
    _h_ = [0, 0, 0],
    _a_ = [0, "Done"],
    _b_ = [0, cst_state],
    _c_ = [0, "Skip"],
    _d_ = [0, cst_state],
    _e_ = [0, "value"],
    _f_ = [0, "Yield"];
   function sexp_of_t(of_a_001, of_s_002, param){
    if(typeof param === "number") return _a_;
    if(0 === param[0]){
     var
      state_004 = param[1],
      arg_005 = caml_call1(of_s_002, state_004),
      bnds_003 = [0, [1, [0, _b_, [0, arg_005, 0]]], 0];
     return [1, [0, _c_, bnds_003]];
    }
    var
     state_009 = param[2],
     value_007 = param[1],
     arg_010 = caml_call1(of_s_002, state_009),
     bnds_006 = [0, [1, [0, _d_, [0, arg_010, 0]]], 0],
     arg_008 = caml_call1(of_a_001, value_007),
     bnds_006$0 = [0, [1, [0, _e_, [0, arg_008, 0]]], bnds_006];
    return [1, [0, _f_, bnds_006$0]];
   }
   var Step = [0, sexp_of_t], T = [0];
   function globalize(param, _ac_){
    var next = _ac_[2], state = _ac_[1];
    return [0, state, next];
   }
   function view(t){return t;}
   function next_step(param){
    var f = param[2], s = param[1], match = caml_call1(f, s);
    if(typeof match === "number") return 0;
    if(0 === match[0]){var s$0 = match[1]; return [0, [0, s$0, f]];}
    var s$1 = match[2], a = match[1];
    return [1, a, [0, s$1, f]];
   }
   function delayed_fold_step(s, init, f, finish){
    function loop(s, next, finish, f, acc){
     var match = caml_call1(next, s);
     if(typeof match === "number") return caml_call1(finish, acc);
     if(0 === match[0]){
      var s$0 = match[1];
      return caml_call3
              (f,
               acc,
               0,
               function(_ab_){return loop(s$0, next, finish, f, _ab_);});
     }
     var s$1 = match[2], a = match[1];
     return caml_call3
             (f,
              acc,
              [0, a],
              function(_aa_){return loop(s$1, next, finish, f, _aa_);});
    }
    var next = s[2], s$0 = s[1];
    return loop(s$0, next, finish, f, init);
   }
   function unfold_step(init, f){return [0, init, f];}
   function unfold(init, f){
    return [0,
            init,
            function(s){
             var match = caml_call1(f, s);
             if(! match) return 0;
             var match$0 = match[1], s$0 = match$0[2], a = match$0[1];
             return [1, a, s$0];
            }];
   }
   function unfold_with(s, init, f){
    var next = s[2], s$0 = s[1];
    return [0,
            [0, init, s$0],
            function(param){
             var s = param[2], seed = param[1], match = caml_call1(next, s);
             if(typeof match === "number") return 0;
             if(0 === match[0]){
              var s$0 = match[1];
              return [0, [0, seed, s$0]];
             }
             var
              s$1 = match[2],
              a = match[1],
              match$0 = caml_call2(f, seed, a);
             if(typeof match$0 === "number") return 0;
             if(0 === match$0[0]){
              var seed$0 = match$0[1];
              return [0, [0, seed$0, s$1]];
             }
             var seed$1 = match$0[2], a$0 = match$0[1];
             return [1, a$0, [0, seed$1, s$1]];
            }];
   }
   function unfold_with_and_finish
   (s, init, running_step, inner_finished, finishing_step){
    var next = s[2], s$0 = s[1];
    return [0,
            [0, -172306698, [0, init, s$0]],
            function(state){
             if(301075099 <= state[1]){
              var
               state$0 = state[2],
               match = caml_call1(finishing_step, state$0);
              if(typeof match === "number") return 0;
              if(0 === match[0]){
               var state$1 = match[1];
               return [0, [0, 301075099, state$1]];
              }
              var state$2 = match[2], y = match[1];
              return [1, y, [0, 301075099, state$2]];
             }
             var
              match$0 = state[2],
              inner_state = match$0[2],
              state$3 = match$0[1],
              match$1 = caml_call1(next, inner_state);
             if(typeof match$1 === "number")
              return [0, [0, 301075099, caml_call1(inner_finished, state$3)]];
             if(0 === match$1[0]){
              var inner_state$0 = match$1[1];
              return [0, [0, -172306698, [0, state$3, inner_state$0]]];
             }
             var
              inner_state$1 = match$1[2],
              x = match$1[1],
              match$2 = caml_call2(running_step, state$3, x);
             if(typeof match$2 === "number") return 0;
             if(0 === match$2[0]){
              var state$4 = match$2[1];
              return [0, [0, -172306698, [0, state$4, inner_state$1]]];
             }
             var state$5 = match$2[2], y$0 = match$2[1];
             return [1, y$0, [0, -172306698, [0, state$5, inner_state$1]]];
            }];
   }
   function of_list(l){
    return [0,
            l,
            function(param){
             if(! param) return 0;
             var l = param[2], x = param[1];
             return [1, x, l];
            }];
   }
   function fold(t, init, f){
    var next = t[2], seed$2 = t[1], seed = seed$2, v = init;
    for(;;){
     var match = caml_call1(next, seed);
     if(typeof match === "number") return v;
     if(0 === match[0])
      var seed$0 = match[1], seed = seed$0;
     else
      var
       seed$1 = match[2],
       a = match[1],
       v$0 = caml_call2(f, v, a),
       seed = seed$1,
       v = v$0;
    }
   }
   function to_list_rev(t){
    return fold(t, 0, function(l, x){return [0, x, l];});
   }
   function to_list(param){
    var next = param[2], s = param[1], s$0 = s;
    for(;;){
     var match = caml_call1(next, s$0);
     if(typeof match === "number") return 0;
     if(0 !== match[0]) break;
     var s$1 = match[1], s$0 = s$1;
    }
    var
     s$2 = match[2],
     a = match[1],
     block = [0, a, 24029],
     dst = block,
     offset = 1,
     s$3 = s$2;
    for(;;){
     var match$0 = caml_call1(next, s$3);
     if(typeof match$0 === "number"){dst[1 + offset] = 0; return block;}
     if(0 === match$0[0])
      var s$4 = match$0[1], s$3 = s$4;
     else{
      var s$5 = match$0[2], a$0 = match$0[1], dst$0 = [0, a$0, 24029];
      dst[1 + offset] = dst$0;
      var dst = dst$0, offset = 1, s$3 = s$5;
     }
    }
   }
   function sexp_of_t$0(sexp_of_a, t){
    var _$_ = to_list(t);
    return caml_call2(Base_Import[149], sexp_of_a, _$_);
   }
   function range(opt, ___, _Z_, start_v, stop_v){
    if(opt) var sth = opt[1], stride = sth; else var stride = 1;
    if(___) var sth$0 = ___[1], start = sth$0; else var start = 104758188;
    if(_Z_) var sth$1 = _Z_[1], stop = sth$1; else var stop = -160346914;
    var
     step =
       104758188 <= stop
        ? 0
          <= stride
          ? function
           (i){
            return stop_v < i
                    ? 0
                    : [1, i, caml_call2(Base_Import[91], i, stride)];
           }
          : function
           (i){
            return i < stop_v
                    ? 0
                    : [1, i, caml_call2(Base_Import[91], i, stride)];
           }
        : 0
          <= stride
          ? function
           (i){
            return stop_v <= i
                    ? 0
                    : [1, i, caml_call2(Base_Import[91], i, stride)];
           }
          : function
           (i){
            return i <= stop_v
                    ? 0
                    : [1, i, caml_call2(Base_Import[91], i, stride)];
           },
     init =
       104758188 <= start
        ? start_v
        : caml_call2(Base_Import[91], start_v, stride);
    return [0, init, step];
   }
   function of_lazy(t_lazy){
    return [0,
            t_lazy,
            function(t_lazy){
             var _Y_ = caml_obj_tag(t_lazy);
             a:
             if(250 === _Y_)
              var match = t_lazy[1];
             else{
              if(246 !== _Y_ && 244 !== _Y_){var match = t_lazy; break a;}
              var match = caml_call1(CamlinternalLazy[2], t_lazy);
             }
             var next = match[2], s = match[1], match$0 = caml_call1(next, s);
             if(typeof match$0 === "number") return 0;
             if(0 === match$0[0]){
              var s$0 = match$0[1], v = [0, s$0, next];
              return [0, v];
             }
             var s$1 = match$0[2], x = match$0[1], v$0 = [0, s$1, next];
             return [1, x, v$0];
            }];
   }
   function _g_(t, f){
    var next = t[2], seed = t[1];
    return [0,
            seed,
            function(seed){
             var match = caml_call1(next, seed);
             if(typeof match === "number") return 0;
             if(0 === match[0]){var s = match[1]; return [0, s];}
             var s$0 = match[2], a = match[1];
             return [1, caml_call1(f, a), s$0];
            }];
   }
   function mapi(t, f){
    var next = t[2], s = t[1];
    return [0,
            [0, 0, s],
            function(param){
             var s = param[2], i = param[1], match = caml_call1(next, s);
             if(typeof match === "number") return 0;
             if(0 === match[0]){var s$0 = match[1]; return [0, [0, i, s$0]];}
             var
              s$1 = match[2],
              a = match[1],
              _X_ = [0, caml_call2(Base_Import[91], i, 1), s$1];
             return [1, caml_call2(f, i, a), _X_];
            }];
   }
   function folding_map(t, init, f){
    return unfold_with
            (t,
             init,
             function(acc, x){
              var
               match = caml_call2(f, acc, x),
               x$0 = match[2],
               acc$0 = match[1];
              return [1, x$0, acc$0];
             });
   }
   function folding_mapi(t, init, f){
    return unfold_with
            (t,
             [0, 0, init],
             function(param, x){
              var
               acc = param[2],
               i = param[1],
               match = caml_call3(f, i, acc, x),
               x$0 = match[2],
               acc$0 = match[1];
              return [1, x$0, [0, caml_call2(Base_Import[91], i, 1), acc$0]];
             });
   }
   function filter(t, f){
    var next = t[2], seed = t[1];
    return [0,
            seed,
            function(seed){
             var match = caml_call1(next, seed);
             if(typeof match === "number") return 0;
             if(0 === match[0]){var s = match[1]; return [0, s];}
             var a = match[1], s$0 = match[2];
             if(caml_call1(f, a)) return [1, a, s$0];
             var s$1 = match[2];
             return [0, s$1];
            }];
   }
   function filteri(t, f){
    var _V_ = Base_Import[127];
    function _W_(param){
     var s = param[2], i = param[1];
     return caml_call2(f, i, s);
    }
    return _g_(filter(mapi(t, function(i, s){return [0, i, s];}), _W_), _V_);
   }
   function length(t){
    var next = t[2], seed = t[1], i = 0, s = seed;
    for(;;){
     var match = caml_call1(next, s);
     if(typeof match === "number") return i;
     if(0 === match[0])
      var s$0 = match[1], s = s$0;
     else
      var
       s$1 = match[2],
       i$0 = caml_call2(Base_Import[91], i, 1),
       i = i$0,
       s = s$1;
    }
   }
   function to_array(t){
    var
     match =
       fold
        (t,
         _h_,
         function(param, x){
          var i = param[2], l = param[1];
          return [0, [0, x, l], caml_call2(Base_Import[91], i, 1)];
         }),
     len = match[2],
     l = match[1];
    if(! l) return [0];
    var
     l$0 = l[2],
     x = l[1],
     a = caml_call2(Base_Array0[4], len, x),
     i$1 = caml_call2(Base_Import[93], len, 2),
     i = i$1,
     l$1 = l$0;
    for(;;){
     if(! l$1){
      if(-1 === i) return a;
      throw caml_maybe_attach_backtrace([0, Assert_failure, _i_], 1);
     }
     var l$2 = l$1[2], x$0 = l$1[1];
     runtime.caml_check_bound(a, i)[1 + i] = x$0;
     var i$0 = caml_call2(Base_Import[93], i, 1), i = i$0, l$1 = l$2;
    }
   }
   function find(t, f){
    var next = t[2], seed = t[1], s = seed;
    for(;;){
     var match = caml_call1(next, s);
     if(typeof match === "number") return 0;
     if(0 === match[0])
      var s$0 = match[1];
     else{
      var a = match[1];
      if(caml_call1(f, a)) return [0, a];
      var s$0 = match[2];
     }
     var s = s$0;
    }
   }
   function find_map(t, f){
    var next = t[2], seed = t[1], s = seed;
    for(;;){
     var match = caml_call1(next, s);
     if(typeof match === "number") return 0;
     if(0 === match[0])
      var s$0 = match[1], s = s$0;
     else{
      var s$1 = match[2], a = match[1], some_b = caml_call1(f, a);
      if(some_b) return some_b;
      var s = s$1;
     }
    }
   }
   function find_mapi(t, f){
    var next = t[2], seed = t[1], s = seed, i = 0;
    for(;;){
     var match = caml_call1(next, s);
     if(typeof match === "number") return 0;
     if(0 === match[0])
      var s$0 = match[1], s = s$0;
     else{
      var s$1 = match[2], a = match[1], some_b = caml_call2(f, i, a);
      if(some_b) return some_b;
      var i$0 = caml_call2(Base_Import[91], i, 1), s = s$1, i = i$0;
     }
    }
   }
   function for_all(t, f){
    var next = t[2], seed = t[1], s = seed;
    for(;;){
     var match = caml_call1(next, s);
     if(typeof match === "number") return 1;
     if(0 === match[0])
      var s$0 = match[1];
     else{
      var a = match[1];
      if(! caml_call1(f, a)) return 0;
      var s$0 = match[2];
     }
     var s = s$0;
    }
   }
   function for_alli(t, f){
    var next = t[2], seed = t[1], s = seed, i = 0;
    for(;;){
     var match = caml_call1(next, s);
     if(typeof match === "number") return 1;
     if(0 === match[0])
      var s$0 = match[1], s = s$0;
     else{
      var a = match[1];
      if(! caml_call2(f, i, a)) return 0;
      var
       s$1 = match[2],
       i$0 = caml_call2(Base_Import[91], i, 1),
       s = s$1,
       i = i$0;
     }
    }
   }
   function exists(t, f){
    var next = t[2], seed = t[1], s = seed;
    for(;;){
     var match = caml_call1(next, s);
     if(typeof match === "number") return 0;
     if(0 === match[0])
      var s$0 = match[1];
     else{var a = match[1]; if(caml_call1(f, a)) return 1; var s$0 = match[2];
     }
     var s = s$0;
    }
   }
   function existsi(t, f){
    var next = t[2], seed = t[1], s = seed, i = 0;
    for(;;){
     var match = caml_call1(next, s);
     if(typeof match === "number") return 0;
     if(0 === match[0])
      var s$0 = match[1], s = s$0;
     else{
      var a = match[1];
      if(caml_call2(f, i, a)) return 1;
      var
       s$1 = match[2],
       i$0 = caml_call2(Base_Import[91], i, 1),
       s = s$1,
       i = i$0;
     }
    }
   }
   function iter(t, f){
    var next = t[2], seed$2 = t[1], seed = seed$2;
    for(;;){
     var match = caml_call1(next, seed);
     if(typeof match === "number") return 0;
     if(0 === match[0])
      var seed$0 = match[1], seed = seed$0;
     else{
      var seed$1 = match[2], a = match[1];
      caml_call1(f, a);
      var seed = seed$1;
     }
    }
   }
   function is_empty(t){
    var next = t[2], seed = t[1], s = seed;
    for(;;){
     var match = caml_call1(next, s);
     if(typeof match === "number") return 1;
     if(0 !== match[0]) return 0;
     var s$0 = match[1], s = s$0;
    }
   }
   function mem(t, a, equal){
    var next = t[2], seed = t[1], s = seed;
    for(;;){
     var match = caml_call1(next, s);
     if(typeof match === "number") return 0;
     if(0 === match[0])
      var s$0 = match[1];
     else{
      var b = match[1];
      if(caml_call2(equal, a, b)) return 1;
      var s$0 = match[2];
     }
     var s = s$0;
    }
   }
   var empty = [0, 0, function(param){return 0;}];
   function bind(t, f){
    return [0,
            [0, empty, t],
            function(param){
             var
              rest = param[2],
              match = param[1],
              next = match[2],
              seed = match[1],
              match$0 = caml_call1(next, seed);
             if(typeof match$0 === "number"){
              var
               next$0 = rest[2],
               seed$0 = rest[1],
               match$1 = caml_call1(next$0, seed$0);
              if(typeof match$1 === "number") return 0;
              if(0 === match$1[0]){
               var s = match$1[1];
               return [0, [0, empty, [0, s, next$0]]];
              }
              var s$0 = match$1[2], a = match$1[1];
              return [0, [0, caml_call1(f, a), [0, s$0, next$0]]];
             }
             if(0 === match$0[0]){
              var s$1 = match$0[1];
              return [0, [0, [0, s$1, next], rest]];
             }
             var s$2 = match$0[2], a$0 = match$0[1];
             return [1, a$0, [0, [0, s$2, next], rest]];
            }];
   }
   function return$0(x){
    return [0,
            [0, x],
            function(param){
             if(! param) return 0;
             var x = param[1];
             return [1, x, 0];
            }];
   }
   var
    map = [0, -198771759, _g_],
    include = caml_call1(Base_Monad[1], [0, bind, return$0, map]),
    symbol_bind = include[1],
    symbol_map = include[2],
    Monad_infix = include[3],
    bind$0 = include[4],
    return$1 = include[5],
    map$0 = include[6],
    join = include[7],
    ignore_m = include[8],
    all = include[9],
    all_unit = include[10],
    Let_syntax = include[11];
   function nth(s, n){
    if(0 > n) return 0;
    var next = s[2], s$3 = s[1], i = n, s$0 = s$3;
    for(;;){
     var match = caml_call1(next, s$0);
     if(typeof match === "number") return 0;
     if(0 === match[0])
      var s$1 = match[1], s$0 = s$1;
     else{
      var s$2 = match[2], a = match[1];
      if(0 === i) return [0, a];
      var i$0 = caml_call2(Base_Import[93], i, 1), i = i$0, s$0 = s$2;
     }
    }
   }
   function nth_exn(s, n){
    if(0 > n) return caml_call1(Base_Import[126], cst_Sequence_nth$0);
    var match = nth(s, n);
    if(! match) return caml_call1(Base_Import[124], cst_Sequence_nth);
    var x = match[1];
    return x;
   }
   function compare_local(cmp_a, cmp_b, a_023, b_024){
    if(a_023 === b_024) return 0;
    switch(a_023[0]){
      case 0:
       var a_025 = a_023[1];
       if(0 !== b_024[0]) return -1;
       var b_026 = b_024[1];
       return caml_call2(cmp_a, a_025, b_026);
      case 1:
       var a_027 = a_023[1];
       switch(b_024[0]){
         case 0: break;
         case 1:
          var b_028 = b_024[1]; return caml_call2(cmp_b, a_027, b_028);
         default: return -1;
       }
       break;
      default:
       var a_031 = a_023[2], a_029 = a_023[1];
       switch(b_024[0]){
         case 0: break;
         case 1:
          return 1;
         default:
          var
           b_032 = b_024[2],
           b_030 = b_024[1],
           n = caml_call2(cmp_a, a_029, b_030);
          return 0 === n ? caml_call2(cmp_b, a_031, b_032) : n;
       }
    }
    return 1;
   }
   function compare(cmp_a, cmp_b, a_013, b_014){
    if(a_013 === b_014) return 0;
    switch(a_013[0]){
      case 0:
       var a_015 = a_013[1];
       if(0 !== b_014[0]) return -1;
       var b_016 = b_014[1];
       return caml_call2(cmp_a, a_015, b_016);
      case 1:
       var a_017 = a_013[1];
       switch(b_014[0]){
         case 0: break;
         case 1:
          var b_018 = b_014[1]; return caml_call2(cmp_b, a_017, b_018);
         default: return -1;
       }
       break;
      default:
       var a_021 = a_013[2], a_019 = a_013[1];
       switch(b_014[0]){
         case 0: break;
         case 1:
          return 1;
         default:
          var
           b_022 = b_014[2],
           b_020 = b_014[1],
           n = caml_call2(cmp_a, a_019, b_020);
          return 0 === n ? caml_call2(cmp_b, a_021, b_022) : n;
       }
    }
    return 1;
   }
   function equal_local(cmp_a, cmp_b, a_043, b_044){
    if(a_043 === b_044) return 1;
    switch(a_043[0]){
      case 0:
       var a_045 = a_043[1];
       if(0 !== b_044[0]) return 0;
       var b_046 = b_044[1];
       return caml_call2(cmp_a, a_045, b_046);
      case 1:
       var a_047 = a_043[1];
       switch(b_044[0]){
         case 0: break;
         case 1:
          var b_048 = b_044[1]; return caml_call2(cmp_b, a_047, b_048);
         default: return 0;
       }
       break;
      default:
       var a_051 = a_043[2], a_049 = a_043[1];
       switch(b_044[0]){
         case 0: break;
         case 1:
          return 0;
         default:
          var
           b_052 = b_044[2],
           b_050 = b_044[1],
           _U_ = caml_call2(cmp_a, a_049, b_050);
          return _U_ ? caml_call2(cmp_b, a_051, b_052) : _U_;
       }
    }
    return 0;
   }
   function equal(cmp_a, cmp_b, a_033, b_034){
    if(a_033 === b_034) return 1;
    switch(a_033[0]){
      case 0:
       var a_035 = a_033[1];
       if(0 !== b_034[0]) return 0;
       var b_036 = b_034[1];
       return caml_call2(cmp_a, a_035, b_036);
      case 1:
       var a_037 = a_033[1];
       switch(b_034[0]){
         case 0: break;
         case 1:
          var b_038 = b_034[1]; return caml_call2(cmp_b, a_037, b_038);
         default: return 0;
       }
       break;
      default:
       var a_041 = a_033[2], a_039 = a_033[1];
       switch(b_034[0]){
         case 0: break;
         case 1:
          return 0;
         default:
          var
           b_042 = b_034[2],
           b_040 = b_034[1],
           _T_ = caml_call2(cmp_a, a_039, b_040);
          return _T_ ? caml_call2(cmp_b, a_041, b_042) : _T_;
       }
    }
    return 0;
   }
   function hash_fold_t(hash_fold_a, hash_fold_b, hsv, arg){
    switch(arg[0]){
      case 0:
       var a0 = arg[1], hsv$0 = caml_call2(Base_Hash[3], hsv, 0);
       return caml_call2(hash_fold_a, hsv$0, a0);
      case 1:
       var a0$0 = arg[1], hsv$1 = caml_call2(Base_Hash[3], hsv, 1);
       return caml_call2(hash_fold_b, hsv$1, a0$0);
      default:
       var
        a1 = arg[2],
        a0$1 = arg[1],
        hsv$2 = caml_call2(Base_Hash[3], hsv, 2),
        hsv$3 = caml_call2(hash_fold_a, hsv$2, a0$1);
       return caml_call2(hash_fold_b, hsv$3, a1);
    }
   }
   function t_of_sexp(of_a_053, of_b_054, sexp_059){
    a:
    {
     if(0 === sexp_059[0]){
      var _P_ = sexp_059[1];
      b:
      if(caml_string_notequal(_P_, cst_Both$0)){
       c:
       if(caml_string_notequal(_P_, cst_Left$0)){
        if(caml_string_notequal(_P_, cst_Right$0)){
         if(! caml_string_notequal(_P_, cst_both)) break b;
         if(! caml_string_notequal(_P_, cst_left)) break c;
         if(caml_string_notequal(_P_, cst_right)) break a;
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[9], error_source_057, sexp_059);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[9], error_source_057, sexp_059);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[9], error_source_057, sexp_059);
     }
     var _Q_ = sexp_059[1];
     if(! _Q_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_057, sexp_059);
     var _R_ = _Q_[1];
     if(0 !== _R_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_057, sexp_059);
     var tag_060 = _R_[1];
     b:
     if(caml_string_notequal(tag_060, cst_Both$0)){
      c:
      if(caml_string_notequal(tag_060, cst_Left$0)){
       if(caml_string_notequal(tag_060, cst_Right$0)){
        if(! caml_string_notequal(tag_060, cst_both)) break b;
        if(! caml_string_notequal(tag_060, cst_left)) break c;
        if(caml_string_notequal(tag_060, cst_right)) break a;
       }
       var sexp_args_066 = _Q_[2];
       if(sexp_args_066 && ! sexp_args_066[2]){
        var
         arg0_067 = sexp_args_066[1],
         res0_068 = caml_call1(of_b_054, arg0_067);
        return [1, res0_068];
       }
       return caml_call3
               (Sexplib0_Sexp_conv_error[8],
                error_source_057,
                tag_060,
                sexp_059);
      }
      var sexp_args_061 = _Q_[2];
      if(sexp_args_061 && ! sexp_args_061[2]){
       var
        arg0_062 = sexp_args_061[1],
        res0_063 = caml_call1(of_a_053, arg0_062);
       return [0, res0_063];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[8],
               error_source_057,
               tag_060,
               sexp_059);
     }
     var sexp_args_071 = _Q_[2];
     if(sexp_args_071){
      var _S_ = sexp_args_071[2];
      if(_S_ && ! _S_[2]){
       var
        arg1_073 = _S_[1],
        arg0_072 = sexp_args_071[1],
        res0_074 = caml_call1(of_a_053, arg0_072),
        res1_075 = caml_call1(of_b_054, arg1_073);
       return [2, res0_074, res1_075];
      }
     }
     return caml_call3
             (Sexplib0_Sexp_conv_error[8],
              error_source_057,
              tag_060,
              sexp_059);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_057, sexp_059);
   }
   function sexp_of_t$1(of_a_078, of_b_079, param){
    switch(param[0]){
      case 0:
       var arg0_080 = param[1], res0_081 = caml_call1(of_a_078, arg0_080);
       return [1, [0, _j_, [0, res0_081, 0]]];
      case 1:
       var arg0_082 = param[1], res0_083 = caml_call1(of_b_079, arg0_082);
       return [1, [0, _k_, [0, res0_083, 0]]];
      default:
       var
        arg1_085 = param[2],
        arg0_084 = param[1],
        res0_086 = caml_call1(of_a_078, arg0_084),
        res1_087 = caml_call1(of_b_079, arg1_085);
       return [1, [0, _l_, [0, res0_086, [0, res1_087, 0]]]];
    }
   }
   function t_sexp_grammar(a_sexp_grammar, b_sexp_grammar){
    return [3,
            [0,
             2,
             [0,
              [1, [0, cst_Left, [0, [0, a_sexp_grammar, 0]]]],
              [0,
               [1, [0, cst_Right, [0, [0, b_sexp_grammar, 0]]]],
               [0,
                [1,
                 [0,
                  cst_Both,
                  [0, [0, a_sexp_grammar, [0, b_sexp_grammar, 0]]]]],
                0]]]]];
   }
   function merge_with_duplicates(param, _O_, compare){
    var next2 = _O_[2], s2 = _O_[1], next1 = param[2], s1 = param[1];
    function next(param){
     var s1 = param[1];
     if(typeof s1 === "number"){
      var match = param[2];
      if(typeof match === "number") return 0;
      if(0 !== match[0]){
       var s2$0 = match[2], b = match[1];
       return [1, [1, b], [0, 0, [0, s2$0]]];
      }
     }
     else{
      if(0 === s1[0]){
       var s2$1 = param[2], s1$0 = s1[1];
       return [0, [0, caml_call1(next1, s1$0), s2$1]];
      }
      var s2$2 = param[2], s1$1 = s1[2], a = s1[1];
      if(typeof s2$2 === "number") return [1, [0, a], [0, [0, s1$1], 0]];
      if(0 !== s2$2[0]){
       var
        s2$3 = s2$2[2],
        b$0 = s2$2[1],
        comparison = caml_call2(compare, a, b$0);
       return 0 <= comparison
               ? 0
                 === comparison
                 ? [1, [2, a, b$0], [0, [0, s1$1], [0, s2$3]]]
                 : [1, [1, b$0], [0, s1, [0, s2$3]]]
               : [1, [0, a], [0, [0, s1$1], s2$2]];
      }
     }
     var s2 = param[2][1];
     return [0, [0, s1, caml_call1(next2, s2)]];
    }
    return [0, [0, [0, s1], [0, s2]], next];
   }
   function merge_deduped_and_sorted(s1, s2, compare){
    function _N_(param){var x = param[1]; return x;}
    return caml_call2(map$0, merge_with_duplicates(s1, s2, compare), _N_);
   }
   function merge_sorted(param, _M_, compare){
    var next2 = _M_[2], s2 = _M_[1], next1 = param[2], s1 = param[1];
    function next(param){
     var s1 = param[1];
     if(typeof s1 === "number"){
      var match = param[2];
      if(typeof match === "number") return 0;
      if(0 !== match[0]){
       var s2$0 = match[2], b = match[1];
       return [1, b, [0, 0, [0, s2$0]]];
      }
     }
     else{
      if(0 === s1[0]){
       var s2$1 = param[2], s1$0 = s1[1];
       return [0, [0, caml_call1(next1, s1$0), s2$1]];
      }
      var s2$2 = param[2], s1$1 = s1[2], a = s1[1];
      if(typeof s2$2 === "number") return [1, a, [0, [0, s1$1], 0]];
      if(0 !== s2$2[0]){
       var
        s2$3 = s2$2[2],
        b$0 = s2$2[1],
        comparison = caml_call2(compare, a, b$0);
       return 0 < comparison
               ? [1, b$0, [0, s1, [0, s2$3]]]
               : [1, a, [0, [0, s1$1], s2$2]];
      }
     }
     var s2 = param[2][1];
     return [0, [0, s1, caml_call1(next2, s2)]];
    }
    return [0, [0, [0, s1], [0, s2]], next];
   }
   function hd(s){
    var next = s[2], s$2 = s[1], s$0 = s$2;
    for(;;){
     var match = caml_call1(next, s$0);
     if(typeof match === "number") return 0;
     if(0 !== match[0]){var a = match[1]; return [0, a];}
     var s$1 = match[1], s$0 = s$1;
    }
   }
   function hd_exn(s){
    var match = hd(s);
    if(! match) return caml_call1(Base_Import[124], cst_hd_exn);
    var a = match[1];
    return a;
   }
   function tl(s){
    var next = s[2], s$2 = s[1], s$0 = s$2;
    for(;;){
     var match = caml_call1(next, s$0);
     if(typeof match === "number")
      var match$0 = 0;
     else{
      if(0 === match[0]){var s$1 = match[1], s$0 = s$1; continue;}
      var a = match[2], match$0 = [0, a];
     }
     if(! match$0) return 0;
     var s$3 = match$0[1];
     return [0, [0, s$3, next]];
    }
   }
   function tl_eagerly_exn(s){
    var match = tl(s);
    if(! match) return caml_call1(Base_Import[124], cst_Sequence_tl_exn);
    var s$0 = match[1];
    return s$0;
   }
   function lift_identity(next, s){
    var match = caml_call1(next, s);
    if(typeof match === "number") return 0;
    if(0 === match[0]){var s$0 = match[1]; return [0, [0, 316735838, s$0]];}
    var s$1 = match[2], a = match[1];
    return [1, a, [0, 316735838, s$1]];
   }
   function next(s){
    var next = s[2], s$3 = s[1], s$0 = s$3;
    for(;;){
     var match = caml_call1(next, s$0);
     if(typeof match === "number") return 0;
     if(0 !== match[0]){
      var s$2 = match[2], a = match[1];
      return [0, [0, a, [0, s$2, next]]];
     }
     var s$1 = match[1], s$0 = s$1;
    }
   }
   function filter_opt(s){
    var next = s[2], s$0 = s[1];
    return [0,
            s$0,
            function(s){
             var match = caml_call1(next, s);
             if(typeof match === "number") return 0;
             if(0 === match[0]){var s$0 = match[1]; return [0, s$0];}
             var match$0 = match[1];
             if(match$0){
              var s$1 = match[2], a = match$0[1];
              return [1, a, s$1];
             }
             var s$2 = match[2];
             return [0, s$2];
            }];
   }
   function filter_map(s, f){return filter_opt(caml_call2(map$0, s, f));}
   function filter_mapi(s, f){
    function _L_(param){
     var s = param[2], i = param[1];
     return caml_call2(f, i, s);
    }
    return filter_map(mapi(s, function(i, s){return [0, i, s];}), _L_);
   }
   function split_n(s, n){
    var next = s[2], s$3 = s[1], s$0 = s$3, i = n, accum = 0;
    for(;;){
     if(0 >= i) return [0, caml_call1(Base_List1[19], accum), [0, s$0, next]];
     var match = caml_call1(next, s$0);
     if(typeof match === "number")
      return [0, caml_call1(Base_List1[19], accum), empty];
     if(0 === match[0])
      var s$1 = match[1], s$0 = s$1;
     else
      var
       s$2 = match[2],
       a = match[1],
       accum$0 = [0, a, accum],
       i$0 = caml_call2(Base_Import[93], i, 1),
       s$0 = s$2,
       i = i$0,
       accum = accum$0;
    }
   }
   function chunks_exn(t, n){
    return 0 < n
            ? [0,
              t,
              function(t){
               var match = split_n(t, n), xs = match[1];
               if(! xs) return 0;
               var t$0 = match[2];
               return [1, xs, t$0];
              }]
            : caml_call1(Base_Import[126], cst_Sequence_chunks_exn);
   }
   function findi(t, f){
    var next = t[2], seed = t[1], s = seed, i = 0;
    for(;;){
     var match = caml_call1(next, s);
     if(typeof match === "number") return 0;
     if(0 === match[0])
      var s$0 = match[1], s = s$0;
     else{
      var a = match[1];
      if(caml_call2(f, i, a)) return [0, [0, i, a]];
      var
       s$1 = match[2],
       i$0 = caml_call2(Base_Import[91], i, 1),
       s = s$1,
       i = i$0;
     }
    }
   }
   function find_exn(s, f){
    var match = find(s, f);
    if(! match) return caml_call1(Base_Import[124], cst_Sequence_find_exn);
    var x = match[1];
    return x;
   }
   function append(s1, s2){
    var next2 = s2[2], s2$0 = s2[1], next1 = s1[2], s1$0 = s1[1];
    return [0,
            [0, 472258093, s1$0],
            function(param){
             if(472258093 <= param[1]){
              var s1 = param[2], match = caml_call1(next1, s1);
              if(typeof match === "number") return [0, [0, -630817751, s2$0]];
              if(0 === match[0]){
               var s1$0 = match[1];
               return [0, [0, 472258093, s1$0]];
              }
              var s1$1 = match[2], a = match[1];
              return [1, a, [0, 472258093, s1$1]];
             }
             var s2 = param[2], match$0 = caml_call1(next2, s2);
             if(typeof match$0 === "number") return 0;
             if(0 === match$0[0]){
              var s2$1 = match$0[1];
              return [0, [0, -630817751, s2$1]];
             }
             var s2$2 = match$0[2], a$0 = match$0[1];
             return [1, a$0, [0, -630817751, s2$2]];
            }];
   }
   function concat_map(s, f){return caml_call2(bind$0, s, f);}
   function concat(s){return concat_map(s, function(_K_){return _K_;});}
   function concat_mapi(s, f){
    function _J_(param){
     var s = param[2], i = param[1];
     return caml_call2(f, i, s);
    }
    return concat_map(mapi(s, function(i, s){return [0, i, s];}), _J_);
   }
   function zip(param, _H_){
    var next2 = _H_[2], s2 = _H_[1], next1 = param[2], s1 = param[1];
    function next(param){
     var _I_ = param[1];
     if(typeof _I_ !== "number"){
      if(1 === _I_[0]){
       var match = param[2], s1$0 = _I_[2], a = _I_[1];
       if(typeof match !== "number"){
        if(0 === match[0]){
         var s2$0 = param[2][1];
         return [0, [0, _I_, caml_call1(next2, s2$0)]];
        }
        var s2$1 = match[2], b = match[1];
        return [1, [0, a, b], [0, [0, s1$0], [0, s2$1]]];
       }
      }
      if(typeof param[2] !== "number"){
       var s2 = param[2], s1 = _I_[1];
       return [0, [0, caml_call1(next1, s1), s2]];
      }
     }
     return 0;
    }
    return [0, [0, [0, s1], [0, s2]], next];
   }
   function zip_full(param, _G_){
    var next2 = _G_[2], s2 = _G_[1], next1 = param[2], s1 = param[1];
    function next(param){
     var s1 = param[1];
     if(typeof s1 === "number"){
      var match = param[2];
      if(typeof match === "number") return 0;
      if(0 !== match[0]){
       var s2$0 = match[2], b = match[1];
       return [1, [0, -57574468, b], [0, 0, caml_call1(next2, s2$0)]];
      }
     }
     else{
      if(0 === s1[0]){
       var s2$1 = param[2], s1$0 = s1[1];
       return [0, [0, caml_call1(next1, s1$0), s2$1]];
      }
      var match$0 = param[2], s1$1 = s1[2], a = s1[1];
      if(typeof match$0 === "number")
       return [1, [0, 847852583, a], [0, caml_call1(next1, s1$1), 0]];
      if(0 !== match$0[0]){
       var s2$2 = match$0[2], b$0 = match$0[1];
       return [1, [0, 737457313, [0, a, b$0]], [0, [0, s1$1], [0, s2$2]]];
      }
     }
     var s2 = param[2][1];
     return [0, [0, s1, caml_call1(next2, s2)]];
    }
    return [0, [0, [0, s1], [0, s2]], next];
   }
   function bounded_length(param, at_most){
    var next = param[2], seed = param[1], i = 0, seed$0 = seed;
    for(;;){
     if(at_most < i) return 85047514;
     var match = caml_call1(next, seed$0);
     if(typeof match === "number") return [0, 16394, i];
     if(0 === match[0])
      var seed$1 = match[1], seed$0 = seed$1;
     else
      var
       seed$2 = match[2],
       i$0 = caml_call2(Base_Import[91], i, 1),
       i = i$0,
       seed$0 = seed$2;
    }
   }
   function length_is_bounded_by(opt, max, t){
    if(opt) var sth = opt[1], min = sth; else var min = -1;
    if(max){
     var max$0 = max[1], match$0 = bounded_length(t, max$0);
     if(typeof match$0 !== "number" && 16394 === match$0[1]){var len = match$0[2]; if(min <= len) return 1;}
     return 0;
    }
    var next = t[2], s = t[1], s$0 = s, acc = 0;
    for(;;){
     if(min <= acc) return 1;
     var match = caml_call1(next, s$0);
     if(typeof match === "number") return 0;
     if(0 === match[0])
      var s$1 = match[1], s$0 = s$1;
     else
      var
       s$2 = match[2],
       acc$0 = caml_call2(Base_Import[91], acc, 1),
       s$0 = s$2,
       acc = acc$0;
    }
   }
   function iteri(s, f){
    function _F_(param){
     var s = param[2], i = param[1];
     return caml_call2(f, i, s);
    }
    return iter(mapi(s, function(i, s){return [0, i, s];}), _F_);
   }
   function foldi(s, init, f){
    function _E_(acc, param){
     var s = param[2], i = param[1];
     return caml_call3(f, i, acc, s);
    }
    return fold(mapi(s, function(i, s){return [0, i, s];}), init, _E_);
   }
   function reduce(s, f){
    var match = next(s);
    if(! match) return 0;
    var match$0 = match[1], s$0 = match$0[2], a = match$0[1];
    return [0, fold(s$0, a, f)];
   }
   function reduce_exn(s, f){
    var match = reduce(s, f);
    if(! match) return caml_call1(Base_Import[124], cst_Sequence_reduce_exn);
    var res = match[1];
    return res;
   }
   function group(param, break$0){
    var next = param[2], s = param[1];
    return [0,
            [0, [0, 0, s]],
            function(param){
             if(! param) return 0;
             var
              match = param[1],
              s = match[2],
              acc = match[1],
              match$0 = caml_call1(next, s);
             if(typeof match$0 !== "number" && 0 === match$0[0]){
              var s$2 = match$0[1];
              return [0, [0, [0, acc, s$2]]];
             }
             if(acc){
              if(typeof match$0 === "number")
               return [1, caml_call1(Base_List1[19], acc), 0];
              var s$0 = match$0[2], cur = match$0[1], prev = acc[1];
              return caml_call2(break$0, prev, cur)
                      ? [1,
                        caml_call1(Base_List1[19], acc),
                        [0, [0, [0, cur, 0], s$0]]]
                      : [0, [0, [0, [0, cur, acc], s$0]]];
             }
             if(typeof match$0 === "number") return 0;
             var s$1 = match$0[2], cur$0 = match$0[1];
             return [0, [0, [0, [0, cur$0, 0], s$1]]];
            }];
   }
   function find_consecutive_duplicate(param, equal){
    var next = param[2], s = param[1], last_elt = 0, s$0 = s;
    for(;;){
     var match = caml_call1(next, s$0);
     if(typeof match === "number") return 0;
     if(0 === match[0])
      var s$1 = match[1], s$0 = s$1;
     else{
      var s$2 = match[2], a = match[1];
      if(last_elt){
       var b = last_elt[1];
       if(caml_call2(equal, a, b)) return [0, [0, b, a]];
      }
      var last_elt$0 = [0, a], last_elt = last_elt$0, s$0 = s$2;
     }
    }
   }
   function remove_consecutive_duplicates(s, equal){
    return unfold_with
            (s,
             0,
             function(prev, a){
              if(prev){
               var b = prev[1];
               if(caml_call2(equal, a, b)) return [0, [0, a]];
              }
              return [1, a, [0, a]];
             });
   }
   function count(s, f){
    return fold
            (s,
             0,
             function(acc, elt){
              var
               _C_ = caml_call1(f, elt),
               _D_ = caml_call1(Base_Bool[31], _C_);
              return caml_call2(Base_Import[91], acc, _D_);
             });
   }
   function counti(t, f){
    return foldi
            (t,
             0,
             function(i, acc, elt){
              var
               _A_ = caml_call2(f, i, elt),
               _B_ = caml_call1(Base_Bool[31], _A_);
              return caml_call2(Base_Import[91], acc, _B_);
             });
   }
   function sum(m, t, f){return caml_call4(Base_Container[7], fold, m, t, f);}
   function min_elt(t, compare){
    return caml_call3(Base_Container[3], fold, t, compare);
   }
   function max_elt(t, compare){
    return caml_call3(Base_Container[4], fold, t, compare);
   }
   function init(n, f){
    return [0,
            0,
            function(i){
             if(n <= i) return 0;
             var _z_ = caml_call2(Base_Import[91], i, 1);
             return [1, caml_call1(f, i), _z_];
            }];
   }
   function sub(s, pos, len){
    var _x_ = pos < 0 ? 1 : 0, _y_ = _x_ || (len < 0 ? 1 : 0);
    if(_y_) caml_call1(Base_Import[124], cst_Sequence_sub);
    var next = s[2], s$0 = s[1];
    return [0,
            [0, 0, s$0],
            function(param){
             var s = param[2], i = param[1];
             if(len <= caml_call2(Base_Import[93], i, pos)) return 0;
             var match = caml_call1(next, s);
             if(typeof match === "number") return 0;
             if(0 === match[0]){var s$0 = match[1]; return [0, [0, i, s$0]];}
             var a = match[1], s$1 = match[2];
             if(pos <= i)
              return [1, a, [0, caml_call2(Base_Import[91], i, 1), s$1]];
             var s$2 = match[2];
             return [0, [0, caml_call2(Base_Import[91], i, 1), s$2]];
            }];
   }
   function take(s, len){
    if(len < 0) caml_call1(Base_Import[124], cst_Sequence_take);
    var next = s[2], s$0 = s[1];
    return [0,
            [0, 0, s$0],
            function(param){
             var s = param[2], i = param[1];
             if(len <= i) return 0;
             var match = caml_call1(next, s);
             if(typeof match === "number") return 0;
             if(0 === match[0]){var s$0 = match[1]; return [0, [0, i, s$0]];}
             var s$1 = match[2], a = match[1];
             return [1, a, [0, caml_call2(Base_Import[91], i, 1), s$1]];
            }];
   }
   function drop(s, len){
    if(len < 0) caml_call1(Base_Import[124], cst_Sequence_drop);
    var next = s[2], s$0 = s[1];
    return [0,
            [0, 0, s$0],
            function(param){
             var s = param[2], i = param[1], match = caml_call1(next, s);
             if(typeof match === "number") return 0;
             if(0 === match[0]){var s$0 = match[1]; return [0, [0, i, s$0]];}
             var a = match[1], s$1 = match[2];
             if(len <= i)
              return [1, a, [0, caml_call2(Base_Import[91], i, 1), s$1]];
             var s$2 = match[2];
             return [0, [0, caml_call2(Base_Import[91], i, 1), s$2]];
            }];
   }
   function take_while(s, f){
    var next = s[2], s$0 = s[1];
    return [0,
            s$0,
            function(s){
             var match = caml_call1(next, s);
             if(typeof match === "number") return 0;
             if(0 === match[0]){var s$0 = match[1]; return [0, s$0];}
             var a = match[1], s$1 = match[2];
             return caml_call1(f, a) ? [1, a, s$1] : 0;
            }];
   }
   function drop_while(s, f){
    var next = s[2], s$0 = s[1];
    return [0,
            [0, -557110719, s$0],
            function(param){
             if(316735838 <= param[1]){
              var s = param[2];
              return lift_identity(next, s);
             }
             var s$0 = param[2], match = caml_call1(next, s$0);
             if(typeof match === "number") return 0;
             if(0 === match[0]){
              var s$1 = match[1];
              return [0, [0, -557110719, s$1]];
             }
             var a = match[1], s$2 = match[2];
             if(caml_call1(f, a)) return [0, [0, -557110719, s$2]];
             var s$3 = match[2];
             return [1, a, [0, 316735838, s$3]];
            }];
   }
   function shift_right(s, x){
    var next = s[2], seed = s[1];
    return [0,
            [0, -433944719, [0, seed, x]],
            function(param){
             if(316735838 <= param[1]){
              var s = param[2];
              return lift_identity(next, s);
             }
             var match = param[2], x = match[2], seed = match[1];
             return [1, x, [0, 316735838, seed]];
            }];
   }
   function shift_right_with_list(s, l){return append(of_list(l), s);}
   var Infix = [0, append];
   function intersperse(s, sep){
    var next = s[2], s$0 = s[1];
    return [0,
            [0, 815032112, s$0],
            function(param){
             var _w_ = param[1];
             if(815032112 === _w_){
              var s = param[2], match = caml_call1(next, s);
              if(typeof match === "number") return 0;
              if(0 === match[0]){
               var s$0 = match[1];
               return [0, [0, 815032112, s$0]];
              }
              var s$1 = match[2], a = match[1];
              return [1, a, [0, 951752159, s$1]];
             }
             if(951752159 > _w_){
              var match$1 = param[2], s$5 = match$1[2], a$1 = match$1[1];
              return [1, a$1, [0, 951752159, s$5]];
             }
             var s$2 = param[2], match$0 = caml_call1(next, s$2);
             if(typeof match$0 === "number") return 0;
             if(0 === match$0[0]){
              var s$3 = match$0[1];
              return [0, [0, 951752159, s$3]];
             }
             var s$4 = match$0[2], a$0 = match$0[1];
             return [1, sep, [0, -571577571, [0, a$0, s$4]]];
            }];
   }
   function repeat(x){return [0, x, function(x){return [1, x, x];}];}
   function cycle_list_exn(xs){
    if(caml_call1(Base_List1[22], xs))
     caml_call1(Base_Import[126], cst_Sequence_cycle_list_exn);
    var s = of_list(xs);
    function _v_(param){return s;}
    return concat_map(repeat(0), _v_);
   }
   function cartesian_product(sa, sb){
    return concat_map(sa, function(a){return zip(repeat(a), sb);});
   }
   function singleton(x){return caml_call1(return$1, x);}
   function delayed_fold(s, init, f, finish){
    return delayed_fold_step
            (s,
             init,
             function(acc, option, k){
              if(! option) return caml_call1(k, acc);
              var a = option[1];
              return caml_call3(f, acc, a, k);
             },
             finish);
   }
   function fold_m(bind, return$0, t, init, f){
    return delayed_fold_step
            (t,
             init,
             function(acc, option, k){
              if(! option)
               return caml_call2(bind, caml_call1(return$0, acc), k);
              var a = option[1];
              return caml_call2(bind, caml_call2(f, acc, a), k);
             },
             return$0);
   }
   function iter_m(bind, return$0, t, f){
    return delayed_fold_step
            (t,
             0,
             function(param, option, k){
              if(! option)
               return caml_call2(bind, caml_call1(return$0, 0), k);
              var a = option[1];
              return caml_call2(bind, caml_call1(f, a), k);
             },
             return$0);
   }
   function fold_until(s, init, f, finish){
    var next = s[2], s$3 = s[1], s$0 = s$3, acc = init;
    for(;;){
     var match = caml_call1(next, s$0);
     if(typeof match === "number") return caml_call1(finish, acc);
     if(0 === match[0])
      var s$1 = match[1], s$0 = s$1;
     else{
      var s$2 = match[2], a = match[1], match$0 = caml_call2(f, acc, a);
      if(0 !== match$0[0]){var x = match$0[1]; return x;}
      var acc$0 = match$0[1], s$0 = s$2, acc = acc$0;
     }
    }
   }
   function fold_result(s, init, f){
    var next = s[2], s$3 = s[1], s$0 = s$3, acc = init;
    for(;;){
     var match = caml_call1(next, s$0);
     if(typeof match === "number") return caml_call1(Base_Result[15], acc);
     if(0 === match[0])
      var s$1 = match[1], s$0 = s$1;
     else{
      var s$2 = match[2], a = match[1], e = caml_call2(f, acc, a);
      if(0 !== e[0]) return e;
      var acc$0 = e[1], s$0 = s$2, acc = acc$0;
     }
    }
   }
   function force_eagerly(t){return of_list(to_list(t));}
   function memoize(param){
    var next = param[2], s = param[1];
    function memoize(s){
     return [0,
             [246,
              function(_u_){
               var s$0 = s;
               for(;;){
                var match = caml_call1(next, s$0);
                if(typeof match === "number") return 0;
                if(0 !== match[0]){
                 var s$2 = match[2], a = match[1];
                 return [1, a, memoize(s$2)];
                }
                var s$1 = match[1], s$0 = s$1;
               }
              }]];
    }
    function _s_(param){
     var l = param[1], _t_ = caml_obj_tag(l);
     if(250 === _t_) return l[1];
     if(246 !== _t_ && 244 !== _t_) return l;
     return caml_call1(CamlinternalLazy[2], l);
    }
    return [0, memoize(s), _s_];
   }
   function drop_eagerly(s, len){
    var next = s[2], s$3 = s[1], i = 0, s$0 = s$3;
    for(;;){
     if(len <= i) return [0, s$0, next];
     var match = caml_call1(next, s$0);
     if(typeof match === "number") return empty;
     if(0 === match[0])
      var s$1 = match[1], s$0 = s$1;
     else
      var
       s$2 = match[2],
       i$0 = caml_call2(Base_Import[91], i, 1),
       i = i$0,
       s$0 = s$2;
    }
   }
   function drop_while_option(param, f){
    var next = param[2], s = param[1], s$0 = s;
    for(;;){
     var match = caml_call1(next, s$0);
     if(typeof match === "number") return 0;
     if(0 === match[0])
      var s$1 = match[1], s$0 = s$1;
     else{
      var s$2 = match[2], x = match[1];
      if(! caml_call1(f, x)) return [0, [0, x, [0, s$2, next]]];
      var s$0 = s$2;
     }
    }
   }
   function skip_loop(s, next){
    var s$0 = s;
    for(;;){
     var next$0 = caml_call1(next, s$0);
     if(typeof next$0 !== "number" && 0 === next$0[0]){var state = next$0[1], s$0 = state; continue;}
     return next$0;
    }
   }
   function compare$0(compare_a, param, r){
    var
     next_r = r[2],
     s_r$1 = r[1],
     next_l = param[2],
     s_l$1 = param[1],
     s_l = s_l$1,
     s_r = s_r$1;
    for(;;){
     var l = skip_loop(s_l, next_l), r$0 = skip_loop(s_r, next_r);
     if(typeof l === "number"){
      if(typeof r$0 === "number") return 0;
      if(1 === r$0[0]) return -1;
     }
     else if(1 === l[0]){
      if(typeof r$0 === "number") return 1;
      if(1 === r$0[0]){
       var c = caml_call2(compare_a, l[1], r$0[1]);
       if(0 !== c) return c;
       var s_r$0 = r$0[2], s_l$0 = l[2], s_l = s_l$0, s_r = s_r$0;
       continue;
      }
     }
     return caml_call1(Base_Import[124], cst_Bug_This_branch_should_be_);
    }
   }
   function compare_local$0(compare_a_local, t1, t2){
    var _q_ = globalize(0, t2), _r_ = globalize(0, t1);
    return compare$0
            (function(x, y){return caml_call2(compare_a_local, x, y);},
             _r_,
             _q_);
   }
   function equal$0(equal_a, t1, t2){
    function _p_(param){
     if(737457313 !== param[1]) return 0;
     var match = param[2], a2 = match[2], a1 = match[1];
     return caml_call2(equal_a, a1, a2);
    }
    return for_all(zip_full(t1, t2), _p_);
   }
   function equal_local$0(equal_a_local, t1, t2){
    var _n_ = globalize(0, t2), _o_ = globalize(0, t1);
    return equal$0
            (function(x, y){return caml_call2(equal_a_local, x, y);},
             _o_,
             _n_);
   }
   function round_robin(list){
    function next(param){
     var done_stack = param[2], todo_stack = param[1];
     if(! todo_stack)
      return caml_call1(Base_List1[22], done_stack)
              ? 0
              : [0, [0, caml_call1(Base_List1[19], done_stack), 0]];
     var
      todo_stack$0 = todo_stack[2],
      match = todo_stack[1],
      f = match[2],
      s = match[1],
      match$0 = caml_call1(f, s);
     if(typeof match$0 === "number")
      return [0, [0, todo_stack$0, done_stack]];
     if(0 === match$0[0]){
      var s$0 = match$0[1];
      return [0, [0, [0, [0, s$0, f], todo_stack$0], done_stack]];
     }
     var s$1 = match$0[2], x = match$0[1];
     return [1, x, [0, todo_stack$0, [0, [0, s$1, f], done_stack]]];
    }
    var state = [0, list, 0];
    return [0, state, next];
   }
   function interleave(param){
    var f1 = param[2], s1 = param[1];
    function next(param){
     var s1 = param[3], done_stack = param[2], todo_stack = param[1];
     if(todo_stack){
      var
       todo_stack$0 = todo_stack[2],
       match = todo_stack[1],
       f2 = match[2],
       s2 = match[1],
       match$0 = caml_call1(f2, s2);
      if(typeof match$0 === "number")
       return [0, [0, todo_stack$0, done_stack, s1]];
      if(0 === match$0[0]){
       var s2$0 = match$0[1];
       return [0, [0, todo_stack$0, [0, [0, s2$0, f2], done_stack], s1]];
      }
      var s2$1 = match$0[2], x = match$0[1];
      return [1, x, [0, todo_stack$0, [0, [0, s2$1, f2], done_stack], s1]];
     }
     var match$1 = caml_call1(f1, s1);
     if(typeof match$1 === "number")
      return done_stack
              ? [0, [0, caml_call1(Base_List1[19], done_stack), 0, s1]]
              : 0;
     if(0 === match$1[0]){
      var s1$0 = match$1[1];
      return [0, [0, caml_call1(Base_List1[19], done_stack), 0, s1$0]];
     }
     var s1$1 = match$1[2], t = match$1[1];
     return [0, [0, caml_call1(Base_List1[19], [0, t, done_stack]), 0, s1$1]];
    }
    var state = [0, 0, 0, s1];
    return [0, state, next];
   }
   function interleaved_cartesian_product(s1, s2){
    return interleave
            (caml_call2
              (map$0,
               s1,
               function(x1){
                return caml_call2
                        (map$0, s2, function(x2){return [0, x1, x2];});
               }));
   }
   function of_seq(seq){
    return [0,
            seq,
            function(seq){
             var match = caml_call1(seq, 0);
             if(! match) return 0;
             var tl = match[2], hd = match[1];
             return [1, hd, tl];
            }];
   }
   function to_seq(param){
    var next = param[2], state = param[1];
    function loop(state){
     var state$0 = state;
     for(;;){
      var match = caml_call1(next, state$0);
      if(typeof match === "number") return 0;
      if(0 !== match[0]){
       var state$2 = match[2], hd = match[1];
       return [0, hd, function(param){return loop(state$2);}];
      }
      var state$1 = match[1], state$0 = state$1;
     }
    }
    return function(param){return loop(state);};
   }
   function return$2(x, k){return caml_call1(k, x);}
   function bind$1(m, f, k){
    return caml_call1
            (m,
             function(a){var m = caml_call1(f, a); return caml_call1(m, k);});
   }
   var
    map$1 =
      [0,
       -198771759,
       function(m, f, k){
        return caml_call1
                (m, function(a){return caml_call1(k, caml_call1(f, a));});
       }],
    include$0 = caml_call1(Base_Monad[2], [0, bind$1, map$1, return$2]),
    symbol_bind$0 = include$0[1],
    symbol_map$0 = include$0[2],
    Let_syntax$0 = include$0[3],
    Monad_infix$0 = include$0[4],
    bind$2 = include$0[5],
    return$3 = include$0[6],
    map$2 = include$0[7],
    join$0 = include$0[8],
    ignore_m$0 = include$0[9],
    all$0 = include$0[10],
    all_unit$0 = include$0[11];
   function yield$0(e, k){return [0, [1, e, k]];}
   function of_sequence(sequence){
    return delayed_fold
            (sequence,
             0,
             function(param, x, k, f){
              return [0, [1, x, function(param){return caml_call2(k, 0, f);}]];
             },
             return$3);
   }
   function run(t){
    function init(param){return caml_call1(t, function(param){return _m_;});}
    function f(thunk){return caml_call1(thunk, 0)[1];}
    return [0, init, f];
   }
   var
    Base_Sequence =
      [0,
       globalize,
       sexp_of_t$0,
       equal$0,
       equal_local$0,
       compare$0,
       compare_local$0,
       mem,
       length,
       is_empty,
       iter,
       fold,
       fold_result,
       fold_until,
       exists,
       for_all,
       count,
       sum,
       find,
       find_map,
       to_list,
       to_array,
       min_elt,
       max_elt,
       foldi,
       iteri,
       existsi,
       counti,
       findi,
       find_mapi,
       symbol_bind,
       symbol_map,
       Monad_infix,
       bind$0,
       return$1,
       map$0,
       join,
       ignore_m,
       all,
       all_unit,
       Let_syntax,
       empty,
       next,
       Step,
       unfold_step,
       unfold,
       unfold_with,
       unfold_with_and_finish,
       nth,
       nth_exn,
       folding_map,
       folding_mapi,
       mapi,
       filteri,
       filter,
       merge_deduped_and_sorted,
       merge_sorted,
       [0,
        compare,
        compare_local,
        equal,
        equal_local,
        hash_fold_t,
        t_of_sexp,
        sexp_of_t$1,
        t_sexp_grammar],
       merge_with_duplicates,
       hd,
       hd_exn,
       tl,
       tl_eagerly_exn,
       find_exn,
       for_alli,
       append,
       concat,
       concat_map,
       concat_mapi,
       interleave,
       round_robin,
       zip,
       zip_full,
       reduce_exn,
       reduce,
       group,
       find_consecutive_duplicate,
       remove_consecutive_duplicates,
       range,
       init,
       filter_map,
       filter_mapi,
       filter_opt,
       sub,
       take,
       drop,
       drop_eagerly,
       take_while,
       drop_while,
       drop_while_option,
       split_n,
       chunks_exn,
       shift_right,
       shift_right_with_list,
       drop,
       Infix,
       cartesian_product,
       interleaved_cartesian_product,
       intersperse,
       cycle_list_exn,
       repeat,
       singleton,
       delayed_fold,
       fold_m,
       iter_m,
       to_list_rev,
       of_list,
       of_lazy,
       memoize,
       force_eagerly,
       bounded_length,
       length_is_bounded_by,
       of_seq,
       to_seq,
       [0,
        symbol_bind$0,
        symbol_map$0,
        Let_syntax$0,
        Monad_infix$0,
        bind$2,
        return$3,
        map$2,
        join$0,
        ignore_m$0,
        all$0,
        all_unit$0,
        yield$0,
        of_sequence,
        run],
       [0, next_step, delayed_fold_step, T, view]];
   runtime.caml_register_global(51, Base_Sequence, "Base__Sequence");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Sexpable
//# unitInfo: Requires: Base__Import, Sexplib0__Sexp_grammar, Sexplib0__Sexpable
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_Import = global_data.Base__Import,
    Sexplib0_Sexp_grammar = global_data.Sexplib0__Sexp_grammar,
    cst_Sexpable_Of_stringable_t_o =
      "Sexpable.Of_stringable.t_of_sexp expected an atom, but got a list";
   function Of_sexpable(Sexpable, M){
    function t_of_sexp(sexp){
     var s = caml_call1(Sexpable[1], sexp);
     try{var _i_ = caml_call1(M[2], s); return _i_;}
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      return caml_call2(Base_Import[157], exn, sexp);
     }
    }
    function sexp_of_t(t){
     var _h_ = caml_call1(M[1], t);
     return caml_call1(Sexpable[2], _h_);
    }
    return [0, t_of_sexp, sexp_of_t];
   }
   function Of_sexpable1(Sexpable, M){
    function t_of_sexp(a_of_sexp, sexp){
     var s = caml_call2(Sexpable[1], a_of_sexp, sexp);
     try{var _g_ = caml_call1(M[2], s); return _g_;}
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      return caml_call2(Base_Import[157], exn, sexp);
     }
    }
    function sexp_of_t(sexp_of_a, t){
     var _f_ = caml_call1(M[1], t);
     return caml_call2(Sexpable[2], sexp_of_a, _f_);
    }
    return [0, t_of_sexp, sexp_of_t];
   }
   function Of_sexpable2(Sexpable, M){
    function t_of_sexp(a_of_sexp, b_of_sexp, sexp){
     var s = caml_call3(Sexpable[1], a_of_sexp, b_of_sexp, sexp);
     try{var _e_ = caml_call1(M[2], s); return _e_;}
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      return caml_call2(Base_Import[157], exn, sexp);
     }
    }
    function sexp_of_t(sexp_of_a, sexp_of_b, t){
     var _d_ = caml_call1(M[1], t);
     return caml_call3(Sexpable[2], sexp_of_a, sexp_of_b, _d_);
    }
    return [0, t_of_sexp, sexp_of_t];
   }
   function Of_sexpable3(Sexpable, M){
    function t_of_sexp(a_of_sexp, b_of_sexp, c_of_sexp, sexp){
     var s = caml_call4(Sexpable[1], a_of_sexp, b_of_sexp, c_of_sexp, sexp);
     try{var _c_ = caml_call1(M[2], s); return _c_;}
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      return caml_call2(Base_Import[157], exn, sexp);
     }
    }
    function sexp_of_t(sexp_of_a, sexp_of_b, sexp_of_c, t){
     var _b_ = caml_call1(M[1], t);
     return caml_call4(Sexpable[2], sexp_of_a, sexp_of_b, sexp_of_c, _b_);
    }
    return [0, t_of_sexp, sexp_of_t];
   }
   function Of_stringable(M){
    function t_of_sexp(sexp){
     if(0 !== sexp[0])
      return caml_call2
              (Base_Import[156], cst_Sexpable_Of_stringable_t_o, sexp);
     var s = sexp[1];
     try{var _a_ = caml_call1(M[1], s); return _a_;}
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      return caml_call2(Base_Import[157], exn, sexp);
     }
    }
    function sexp_of_t(t){return [0, caml_call1(M[2], t)];}
    var
     t_sexp_grammar = caml_call1(Sexplib0_Sexp_grammar[1], Base_Import[182]);
    return [0, t_sexp_grammar, t_of_sexp, sexp_of_t];
   }
   var
    Base_Sexpable =
      [0,
       Of_sexpable,
       Of_sexpable1,
       Of_sexpable2,
       Of_sexpable3,
       Of_stringable];
   runtime.caml_register_global(3, Base_Sexpable, "Base__Sexpable");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Array
//# unitInfo: Requires: Base__Array0, Base__Array_permute, Base__Binary_searchable, Base__Blit, Base__Bool, Base__Container, Base__Import, Base__List, Base__Option, Base__Ordered_collection_common, Base__Random, Base__Sequence
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_src_array_ml = "src/array.ml",
    caml_check_bound = runtime.caml_check_bound,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    Assert_failure = global_data.Assert_failure,
    Base_Import = global_data.Base__Import,
    Base_Sequence = global_data.Base__Sequence,
    Base_Random = global_data.Base__Random,
    Base_Option = global_data.Base__Option,
    Base_List = global_data.Base__List,
    Base_Bool = global_data.Base__Bool,
    Base_Container = global_data.Base__Container,
    Base_Ordered_collection_common =
      global_data.Base__Ordered_collection_common,
    Base_Array0 = global_data.Base__Array0,
    Base_Array_permute = global_data.Base__Array_permute,
    Base_Binary_searchable = global_data.Base__Binary_searchable,
    Base_Blit = global_data.Base__Blit,
    invalid_argf = Base_Array0[1],
    max_length = Base_Array0[3],
    create = Base_Array0[4],
    create_local = Base_Array0[5],
    create_float_uninitialized = Base_Array0[6],
    append = Base_Array0[7],
    concat = Base_Array0[9],
    copy = Base_Array0[10],
    fill = Base_Array0[11],
    init = Base_Array0[12],
    make_matrix = Base_Array0[13],
    of_list = Base_Array0[14],
    sub = Base_Array0[15],
    to_list = Base_Array0[16],
    fold = Base_Array0[17],
    fold_right = Base_Array0[18],
    iter = Base_Array0[19],
    iteri = Base_Array0[20],
    map = Base_Array0[21],
    mapi = Base_Array0[22],
    stable_sort = Base_Array0[23],
    swap = Base_Array0[24],
    compare_local = Base_Import[263],
    compare = Base_Import[235],
    globalize = Base_Import[291],
    t_of_sexp = Base_Import[174],
    sexp_of_t = Base_Import[150],
    _g_ = [0, cst_src_array_ml, 917, 6],
    cst_Array_transpose_exn = "Array.transpose_exn",
    cst_Array_zip_exn = "Array.zip_exn",
    cst_Array_random_element_exn_e = "Array.random_element_exn: empty array",
    cst_Array_reduce_exn = "Array.reduce_exn",
    _d_ = [0, "Array.find_exn: not found"],
    _c_ = [0, "Array.findi_exn: not found"],
    cst_Array_for_all2_exn = "Array.for_all2_exn",
    cst_Array_exists2_exn = "Array.exists2_exn",
    cst_Array_fold2_exn = "Array.fold2_exn",
    cst_Array_map2_exn = "Array.map2_exn",
    cst_Array_iter2_exn = "Array.iter2_exn",
    _b_ =
      [0,
       [11,
        "length mismatch in ",
        [2, 0, [11, ": ", [4, 0, 0, 0, [11, " <> ", [4, 0, 0, 0, 0]]]]]],
       "length mismatch in %s: %d <> %d"],
    _a_ = [0, cst_src_array_ml, 486, 14],
    _e_ = [0, "Array.find_map_exn: not found"],
    _f_ = [0, "Array.find_mapi_exn: not found"];
   function t_sexp_grammar(a_sexp_grammar){
    return caml_call1(Base_Import[195], a_sexp_grammar);
   }
   function Sorter(S){
    var get = S[1], set = S[2], length = S[3];
    function swap(arr, i, j){
     var tmp = caml_call2(get, arr, i);
     caml_call3(set, arr, i, caml_call2(get, arr, j));
     return caml_call3(set, arr, j, tmp);
    }
    function sort(arr, compare, left, right){
     var _a0_ = caml_call2(Base_Import[91], left, 1);
     if(right >= _a0_){
      var pos = _a0_;
      for(;;){
       var v = caml_call2(get, arr, pos), final_pos = pos;
       for(;;){
        var i_next = caml_call2(Base_Import[93], final_pos, 1);
        if(left > i_next) break;
        if(0 >= caml_call2(compare, caml_call2(get, arr, i_next), v)) break;
        caml_call3(set, arr, final_pos, caml_call2(get, arr, i_next));
        var final_pos = i_next;
       }
       caml_call3(set, arr, final_pos, v);
       var _a1_ = pos + 1 | 0;
       if(right === pos) break;
       var pos = _a1_;
      }
     }
     return 0;
    }
    var Insertion_sort = [0, sort];
    function heapify(arr, compare, root, left, right){
     var root$0 = root;
     for(;;){
      var
       relative_root = caml_call2(Base_Import[93], root$0, left),
       _aT_ = caml_call2(Base_Import[88], 2, relative_root),
       _aU_ = caml_call2(Base_Import[91], _aT_, left),
       left_child = caml_call2(Base_Import[91], _aU_, 1),
       _aV_ = caml_call2(Base_Import[88], 2, relative_root),
       _aW_ = caml_call2(Base_Import[91], _aV_, left),
       right_child = caml_call2(Base_Import[91], _aW_, 2);
      a:
      {
       if(left_child <= right){
        var _aX_ = caml_call2(get, arr, root$0);
        if(0 < caml_call2(compare, caml_call2(get, arr, left_child), _aX_)){var largest = left_child; break a;}
       }
       var largest = root$0;
      }
      a:
      {
       if(right_child <= right){
        var _aY_ = caml_call2(get, arr, largest);
        if(0 < caml_call2(compare, caml_call2(get, arr, right_child), _aY_)){var largest$0 = right_child; break a;}
       }
       var largest$0 = largest;
      }
      var _aZ_ = largest$0 !== root$0 ? 1 : 0;
      if(! _aZ_) return _aZ_;
      swap(arr, root$0, largest$0);
      var root$0 = largest$0;
     }
    }
    function sort$0(arr, compare, left, right){
     var
      _aO_ = caml_call2(Base_Import[91], left, right),
      _aP_ = caml_call2(Base_Import[95], _aO_, 2);
     if(_aP_ >= left){
      var i = _aP_;
      for(;;){
       heapify(arr, compare, i, left, right);
       var _aQ_ = i - 1 | 0;
       if(left === i) break;
       var i = _aQ_;
      }
     }
     var _aR_ = caml_call2(Base_Import[91], left, 1);
     if(right >= _aR_){
      var i$0 = right;
      for(;;){
       swap(arr, left, i$0);
       heapify(arr, compare, left, left, caml_call2(Base_Import[93], i$0, 1));
       var _aS_ = i$0 - 1 | 0;
       if(_aR_ === i$0) break;
       var i$0 = _aS_;
      }
     }
     return 0;
    }
    var Heap_sort = [0, sort$0];
    function five_element_sort(arr, compare, m1, m2, m3, m4, m5){
     function compare_and_swap(i, j){
      var
       _aM_ = caml_call2(get, arr, j),
       _aN_ = 0 < caml_call2(compare, caml_call2(get, arr, i), _aM_) ? 1 : 0;
      return _aN_ ? swap(arr, i, j) : _aN_;
     }
     compare_and_swap(m1, m2);
     compare_and_swap(m4, m5);
     compare_and_swap(m1, m3);
     compare_and_swap(m2, m3);
     compare_and_swap(m1, m4);
     compare_and_swap(m3, m4);
     compare_and_swap(m2, m5);
     compare_and_swap(m2, m3);
     return compare_and_swap(m4, m5);
    }
    function intro_sort(arr, max_depth, compare, left, right){
     var max_depth$0 = max_depth, left$0 = left;
     for(;;){
      var
       _aL_ = caml_call2(Base_Import[93], right, left$0),
       len = caml_call2(Base_Import[91], _aL_, 1);
      if(32 >= len)
       return caml_call4(Insertion_sort[1], arr, compare, left$0, right);
      if(0 > max_depth$0)
       return caml_call4(Heap_sort[1], arr, compare, left$0, right);
      var
       max_depth$1 = caml_call2(Base_Import[93], max_depth$0, 1),
       _aK_ = caml_call2(Base_Import[93], right, left$0),
       sixth = caml_call2(Base_Import[95], _aK_, 6),
       m1 = caml_call2(Base_Import[91], left$0, sixth),
       m2 = caml_call2(Base_Import[91], m1, sixth),
       m3 = caml_call2(Base_Import[91], m2, sixth),
       m4 = caml_call2(Base_Import[91], m3, sixth),
       m5 = caml_call2(Base_Import[91], m4, sixth);
      five_element_sort(arr, compare, m1, m2, m3, m4, m5);
      var
       m2_val = caml_call2(get, arr, m2),
       m3_val = caml_call2(get, arr, m3),
       m4_val = caml_call2(get, arr, m4),
       match =
         0 === caml_call2(compare, m2_val, m3_val)
          ? [0, m2_val, m3_val, 1]
          : 0
            === caml_call2(compare, m3_val, m4_val)
            ? [0, m3_val, m4_val, 1]
            : [0, m2_val, m4_val, 0],
       middle_sorted = match[3],
       pivot2 = match[2],
       pivot1 = match[1],
       l$0 = left$0,
       p$1 = left$0,
       r$2 = right;
      for(;;){
       if(r$2 < p$1) break;
       var pv = caml_call2(get, arr, p$1);
       if(0 <= caml_call2(compare, pv, pivot1))
        if(0 < caml_call2(compare, pv, pivot2)){
         var r = r$2;
         for(;;){
          if(p$1 >= r) break;
          if(0 >= caml_call2(compare, caml_call2(get, arr, r), pivot2)) break;
          var r$0 = caml_call2(Base_Import[93], r, 1), r = r$0;
         }
         swap(arr, r, p$1);
         var r$1 = caml_call2(Base_Import[93], r, 1), r$2 = r$1;
        }
        else
         var p = caml_call2(Base_Import[91], p$1, 1), p$1 = p;
       else{
        swap(arr, p$1, l$0);
        var
         p$0 = caml_call2(Base_Import[91], p$1, 1),
         l = caml_call2(Base_Import[91], l$0, 1),
         l$0 = l,
         p$1 = p$0;
       }
      }
      intro_sort
       (arr,
        max_depth$1,
        compare,
        left$0,
        caml_call2(Base_Import[93], l$0, 1));
      if(1 - middle_sorted) intro_sort(arr, max_depth$1, compare, l$0, r$2);
      var
       left$1 = caml_call2(Base_Import[91], r$2, 1),
       max_depth$0 = max_depth$1,
       left$0 = left$1;
     }
    }
    function sort$1(arr, compare, left, right){
     return intro_sort(arr, 32, compare, left, right);
    }
    var Intro_sort = [0, sort$1, five_element_sort];
    function sort$2(pos, len, arr, compare){
     var
      _aH_ = caml_call1(length, arr),
      match = caml_call4(Base_Ordered_collection_common[1], pos, len, 0, _aH_),
      len$0 = match[2],
      pos$0 = match[1],
      _aI_ = caml_call2(Base_Import[91], pos$0, len$0),
      _aJ_ = caml_call2(Base_Import[93], _aI_, 1);
     return caml_call4(Intro_sort[1], arr, compare, pos$0, _aJ_);
    }
    return [0, , , , , Insertion_sort, Heap_sort, Intro_sort, sort$2];
   }
   function get(_aG_, _aF_){return _aG_[1 + _aF_];}
   function set(_aE_, _aD_, _aC_){_aE_[1 + _aD_] = _aC_; return 0;}
   function length(_aB_){return _aB_.length - 1;}
   var Sort = Sorter([0, get, set, length]), sort = Sort[8];
   function of_array(t){return t;}
   function to_array(t){return t;}
   function is_empty(t){return 0 === t.length - 1 ? 1 : 0;}
   function is_sorted(t, compare){
    var
     i = [0, caml_call2(Base_Import[93], t.length - 1, 1)],
     result = [0, 1];
    for(;;){
     if(0 < i[1] && result[1]){
      var
       elt_i = t[1 + i[1]],
       elt_i_minus_1 = t[1 + caml_call2(Base_Import[93], i[1], 1)];
      if(0 < caml_call2(compare, elt_i_minus_1, elt_i)) result[1] = 0;
      i[1] += -1;
      continue;
     }
     return result[1];
    }
   }
   function is_sorted_strictly(t, compare){
    var
     i = [0, caml_call2(Base_Import[93], t.length - 1, 1)],
     result = [0, 1];
    for(;;){
     if(0 < i[1] && result[1]){
      var
       elt_i = t[1 + i[1]],
       elt_i_minus_1 = t[1 + caml_call2(Base_Import[93], i[1], 1)];
      if(0 <= caml_call2(compare, elt_i_minus_1, elt_i)) result[1] = 0;
      i[1] += -1;
      continue;
     }
     return result[1];
    }
   }
   function merge(a1, a2, compare){
    var l1 = a1.length - 1, l2 = a2.length - 1;
    if(0 === l1) return caml_call1(copy, a2);
    if(0 === l2) return caml_call1(copy, a1);
    var _aw_ = a1[1 + caml_call2(Base_Import[93], l1, 1)];
    if(0 <= caml_call2(compare, a2[1], _aw_))
     return caml_call2(append, a1, a2);
    var _ax_ = a2[1 + caml_call2(Base_Import[93], l2, 1)];
    if(0 < caml_call2(compare, a1[1], _ax_))
     return caml_call2(append, a2, a1);
    var
     len = caml_call2(Base_Import[91], l1, l2),
     merged = caml_call2(create, len, a1[1]),
     a1_index = [0, 0],
     a2_index = [0, 0],
     _az_ = caml_call2(Base_Import[93], len, 1),
     _ay_ = 0;
    if(_az_ >= 0){
     var i = _ay_;
     for(;;){
      var
       use_a1 =
         l1 === a1_index[1]
          ? 0
          : l2
            === a2_index[1]
            ? 1
            : caml_call2
               (compare, a1[1 + a1_index[1]], a2[1 + a2_index[1]])
              <= 0
              ? 1
              : 0;
      if(use_a1){
       merged[1 + i] = a1[1 + a1_index[1]];
       a1_index[1] = caml_call2(Base_Import[91], a1_index[1], 1);
      }
      else{
       merged[1 + i] = a2[1 + a2_index[1]];
       a2_index[1] = caml_call2(Base_Import[91], a2_index[1], 1);
      }
      var _aA_ = i + 1 | 0;
      if(_az_ === i) break;
      var i = _aA_;
     }
    }
    return merged;
   }
   function copy_matrix(_av_){return caml_call2(map, _av_, copy);}
   function folding_map(t, init, f){
    var acc = [0, init];
    return caml_call2
            (map,
             t,
             function(x){
              var
               match = caml_call2(f, acc[1], x),
               y = match[2],
               new_acc = match[1];
              acc[1] = new_acc;
              return y;
             });
   }
   function fold_map(t, init, f){
    var
     acc = [0, init],
     result =
       caml_call2
        (map,
         t,
         function(x){
          var
           match = caml_call2(f, acc[1], x),
           y = match[2],
           new_acc = match[1];
          acc[1] = new_acc;
          return y;
         });
    return [0, acc[1], result];
   }
   function fold_result(t, init, f){
    return caml_call4(Base_Container[8], fold, init, f, t);
   }
   function fold_until(t, init, f, finish){
    return caml_call5(Base_Container[9], fold, init, f, finish, t);
   }
   function sum(m, t, f){return caml_call4(Base_Container[7], fold, m, t, f);}
   function extremal_element(t, compare, keep_left_if){
    if(is_empty(t)) return 0;
    var
     result = [0, t[1]],
     _as_ = caml_call2(Base_Import[93], t.length - 1, 1),
     _ar_ = 1;
    if(_as_ >= 1){
     var i = _ar_;
     for(;;){
      var x = t[1 + i], _at_ = result[1];
      result[1] =
       runtime.caml_csel_value
        (caml_call1(keep_left_if, caml_call2(compare, x, result[1])), x, _at_);
      var _au_ = i + 1 | 0;
      if(_as_ === i) break;
      var i = _au_;
     }
    }
    return [0, result[1]];
   }
   function min_elt(t, compare){
    return extremal_element
            (t,
             compare,
             function(compare_result){return compare_result < 0 ? 1 : 0;});
   }
   function max_elt(t, compare){
    return extremal_element
            (t,
             compare,
             function(compare_result){return 0 < compare_result ? 1 : 0;});
   }
   function foldi(t, init, f){
    var
     acc = [0, init],
     _ap_ = caml_call2(Base_Import[93], t.length - 1, 1),
     _ao_ = 0;
    if(_ap_ >= 0){
     var i = _ao_;
     for(;;){
      acc[1] = caml_call3(f, i, acc[1], t[1 + i]);
      var _aq_ = i + 1 | 0;
      if(_ap_ === i) break;
      var i = _aq_;
     }
    }
    return acc[1];
   }
   function folding_mapi(t, init, f){
    var acc = [0, init];
    return caml_call2
            (mapi,
             t,
             function(i, x){
              var
               match = caml_call3(f, i, acc[1], x),
               y = match[2],
               new_acc = match[1];
              acc[1] = new_acc;
              return y;
             });
   }
   function fold_mapi(t, init, f){
    var
     acc = [0, init],
     result =
       caml_call2
        (mapi,
         t,
         function(i, x){
          var
           match = caml_call3(f, i, acc[1], x),
           y = match[2],
           new_acc = match[1];
          acc[1] = new_acc;
          return y;
         });
    return [0, acc[1], result];
   }
   function count(t, f){
    var
     result = [0, 0],
     _ak_ = caml_call2(Base_Import[93], t.length - 1, 1),
     _aj_ = 0;
    if(_ak_ >= 0){
     var i = _aj_;
     for(;;){
      var
       _al_ = caml_call1(f, t[1 + i]),
       _am_ = caml_call1(Base_Bool[31], _al_);
      result[1] = caml_call2(Base_Import[91], result[1], _am_);
      var _an_ = i + 1 | 0;
      if(_ak_ === i) break;
      var i = _an_;
     }
    }
    return result[1];
   }
   function counti(t, f){
    var
     result = [0, 0],
     _af_ = caml_call2(Base_Import[93], t.length - 1, 1),
     _ae_ = 0;
    if(_af_ >= 0){
     var i = _ae_;
     for(;;){
      var
       _ag_ = caml_call2(f, i, t[1 + i]),
       _ah_ = caml_call1(Base_Bool[31], _ag_);
      result[1] = caml_call2(Base_Import[91], result[1], _ah_);
      var _ai_ = i + 1 | 0;
      if(_af_ === i) break;
      var i = _ai_;
     }
    }
    return result[1];
   }
   function concat_map(t, f){
    return caml_call1(concat, caml_call1(to_list, caml_call2(map, t, f)));
   }
   function concat_mapi(t, f){
    return caml_call1(concat, caml_call1(to_list, caml_call2(mapi, t, f)));
   }
   function rev_inplace(t){
    var i = [0, 0], j = [0, caml_call2(Base_Import[93], t.length - 1, 1)];
    for(;;){
     if(i[1] >= j[1]) return 0;
     caml_call3(swap, t, i[1], j[1]);
     i[1]++;
     j[1] += -1;
    }
   }
   function rev(t){
    var t$0 = caml_call1(copy, t);
    rev_inplace(t$0);
    return t$0;
   }
   function of_list_rev(l){
    if(! l) return [0];
    var
     l$0 = l[2],
     a = l[1],
     _ab_ = caml_call1(Base_List[45], l$0),
     len = caml_call2(Base_Import[91], 1, _ab_),
     t = caml_call2(create, len, a),
     r = [0, l$0],
     _ac_ = caml_call2(Base_Import[93], len, 2);
    if(_ac_ >= 0){
     var i = _ac_;
     for(;;){
      var match = r[1];
      if(! match)
       throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
      var l$1 = match[2], a$0 = match[1];
      caml_check_bound(t, i)[1 + i] = a$0;
      r[1] = l$1;
      var _ad_ = i - 1 | 0;
      if(0 === i) break;
      var i = _ad_;
     }
    }
    return t;
   }
   function of_list_map(xs, f){
    if(! xs) return [0];
    var
     tl = xs[2],
     hd = xs[1],
     _$_ = caml_call1(f, hd),
     _aa_ = caml_call1(Base_List[45], tl),
     a = caml_call2(create, caml_call2(Base_Import[91], 1, _aa_), _$_),
     i = 1,
     param = tl;
    for(;;){
     if(! param) return a;
     var tl$0 = param[2], hd$0 = param[1];
     a[1 + i] = caml_call1(f, hd$0);
     var i$0 = caml_call2(Base_Import[91], i, 1), i = i$0, param = tl$0;
    }
   }
   function of_list_mapi(xs, f){
    if(! xs) return [0];
    var
     tl = xs[2],
     hd = xs[1],
     _Z_ = caml_call2(f, 0, hd),
     ___ = caml_call1(Base_List[45], tl),
     a = caml_call2(create, caml_call2(Base_Import[91], 1, ___), _Z_),
     i = 1,
     param = tl;
    for(;;){
     if(! param) return a;
     var tl$0 = param[2], hd$0 = param[1];
     a[1 + i] = caml_call2(f, i, hd$0);
     var i$0 = caml_call2(Base_Import[91], i, 1), i = i$0, param = tl$0;
    }
   }
   function of_list_rev_map(xs, f){
    var t = of_list_map(xs, f);
    rev_inplace(t);
    return t;
   }
   function of_list_rev_mapi(xs, f){
    var t = of_list_mapi(xs, f);
    rev_inplace(t);
    return t;
   }
   function filter_mapi(t, f){
    var
     r = [0, [0]],
     k = [0, 0],
     _X_ = caml_call2(Base_Import[93], t.length - 1, 1),
     _W_ = 0;
    if(_X_ >= 0){
     var i = _W_;
     for(;;){
      var match = caml_call2(f, i, t[1 + i]);
      if(match){
       var a = match[1];
       if(0 === k[1]) r[1] = caml_call2(create, t.length - 1, a);
       r[1][1 + k[1]] = a;
       k[1]++;
      }
      var _Y_ = i + 1 | 0;
      if(_X_ === i) break;
      var i = _Y_;
     }
    }
    return k[1] === t.length - 1
            ? r[1]
            : 0 < k[1] ? caml_call3(sub, r[1], 0, k[1]) : [0];
   }
   function filter_map(t, f){
    return filter_mapi(t, function(i, a){return caml_call1(f, a);});
   }
   function filter_opt(t){return filter_map(t, function(_V_){return _V_;});}
   function check_length2_exn(name, t1, t2){
    var n1 = t1.length - 1, n2 = t2.length - 1, _U_ = n1 !== n2 ? 1 : 0;
    return _U_ ? caml_call5(invalid_argf, _b_, name, n1, n2, 0) : _U_;
   }
   function iter2_exn(t1, t2, f){
    check_length2_exn(cst_Array_iter2_exn, t1, t2);
    return caml_call2
            (iteri, t1, function(i, x1){return caml_call2(f, x1, t2[1 + i]);});
   }
   function map2_exn(t1, t2, f){
    check_length2_exn(cst_Array_map2_exn, t1, t2);
    return caml_call2
            (init,
             t1.length - 1,
             function(i){return caml_call2(f, t1[1 + i], t2[1 + i]);});
   }
   function fold2_exn(t1, t2, init, f){
    check_length2_exn(cst_Array_fold2_exn, t1, t2);
    return foldi
            (t1,
             init,
             function(i, ac, x){return caml_call3(f, ac, x, t2[1 + i]);});
   }
   function filter(t, f){
    return filter_map(t, function(x){return caml_call1(f, x) ? [0, x] : 0;});
   }
   function filteri(t, f){
    return filter_mapi
            (t, function(i, x){return caml_call2(f, i, x) ? [0, x] : 0;});
   }
   function exists(t, f){
    var
     i = [0, caml_call2(Base_Import[93], t.length - 1, 1)],
     result = [0, 0];
    for(;;){
     if(0 <= i[1] && ! result[1]){
      if(caml_call1(f, t[1 + i[1]])){result[1] = 1; continue;}
      i[1] += -1;
      continue;
     }
     return result[1];
    }
   }
   function existsi(t, f){
    var
     i = [0, caml_call2(Base_Import[93], t.length - 1, 1)],
     result = [0, 0];
    for(;;){
     if(0 <= i[1] && ! result[1]){
      if(caml_call2(f, i[1], t[1 + i[1]])){result[1] = 1; continue;}
      i[1] += -1;
      continue;
     }
     return result[1];
    }
   }
   function mem(t, a, equal){return exists(t, caml_call1(equal, a));}
   function for_all(t, f){
    var
     i = [0, caml_call2(Base_Import[93], t.length - 1, 1)],
     result = [0, 1];
    for(;;){
     if(0 <= i[1] && result[1]){
      if(caml_call1(f, t[1 + i[1]])){i[1] += -1; continue;}
      result[1] = 0;
      continue;
     }
     return result[1];
    }
   }
   function for_alli(t, f){
    var
     length = t.length - 1,
     i = [0, caml_call2(Base_Import[93], length, 1)],
     result = [0, 1];
    for(;;){
     if(0 <= i[1] && result[1]){
      if(caml_call2(f, i[1], t[1 + i[1]])){i[1] += -1; continue;}
      result[1] = 0;
      continue;
     }
     return result[1];
    }
   }
   function exists2_exn(t1, t2, f){
    check_length2_exn(cst_Array_exists2_exn, t1, t2);
    var
     i = [0, caml_call2(Base_Import[93], t1.length - 1, 1)],
     result = [0, 0];
    for(;;){
     if(0 <= i[1] && ! result[1]){
      if(caml_call2(f, t1[1 + i[1]], t2[1 + i[1]])){result[1] = 1; continue;}
      i[1] += -1;
      continue;
     }
     return result[1];
    }
   }
   function for_all2_local_exn(t1, t2, f){
    check_length2_exn(cst_Array_for_all2_exn, t1, t2);
    var
     i = [0, caml_call2(Base_Import[93], t1.length - 1, 1)],
     result = [0, 1];
    for(;;){
     if(0 <= i[1] && result[1]){
      if(caml_call2(f, t1[1 + i[1]], t2[1 + i[1]])){i[1] += -1; continue;}
      result[1] = 0;
      continue;
     }
     return result[1];
    }
   }
   function for_all2_exn(t1, t2, f){return for_all2_local_exn(t1, t2, f);}
   function equal_local(equal, t1, t2){
    var _T_ = t1.length - 1 === t2.length - 1 ? 1 : 0;
    return _T_ ? for_all2_local_exn(t1, t2, equal) : _T_;
   }
   function equal(equal, t1, t2){return equal_local(equal, t1, t2);}
   function map_inplace(t, f){
    var _R_ = caml_call2(Base_Import[93], t.length - 1, 1), _Q_ = 0;
    if(_R_ >= 0){
     var i = _Q_;
     for(;;){
      t[1 + i] = caml_call1(f, t[1 + i]);
      var _S_ = i + 1 | 0;
      if(_R_ === i) break;
      var i = _S_;
     }
    }
    return 0;
   }
   function findi_internal(t, f, if_found, if_not_found){
    var length = t.length - 1;
    if(0 === length) return caml_call1(if_not_found, 0);
    var i = [0, 0], found = [0, 0], value_found = [0, t[1]];
    for(;;){
     if(! found[1] && i[1] < length){
      var value = t[1 + i[1]];
      if(caml_call2(f, i[1], value)){
       value_found[1] = value;
       found[1] = 1;
      }
      else
       i[1]++;
      continue;
     }
     return found[1]
             ? caml_call2(if_found, i[1], value_found[1])
             : caml_call1(if_not_found, 0);
    }
   }
   function findi(t, f){
    function _P_(param){return 0;}
    return findi_internal
            (t, f, function(i, value){return [0, [0, i, value]];}, _P_);
   }
   function findi_exn(t, f){
    function _O_(param){
     throw caml_maybe_attach_backtrace([0, Base_Import[297], _c_], 1);
    }
    return findi_internal
            (t, f, function(i, value){return [0, i, value];}, _O_);
   }
   function find_exn(t, f){
    function _M_(param){
     throw caml_maybe_attach_backtrace([0, Base_Import[297], _d_], 1);
    }
    function _N_(param, value){return value;}
    return findi_internal
            (t, function(i, x){return caml_call1(f, x);}, _N_, _M_);
   }
   function find(t, f){
    function _K_(param){var x = param[2]; return x;}
    var _L_ = findi(t, function(i, x){return caml_call1(f, x);});
    return caml_call2(Base_Option[24], _L_, _K_);
   }
   function find_map(t, f){
    var length = t.length - 1;
    if(0 === length) return 0;
    var i = [0, 0], value_found = [0, 0];
    for(;;){
     if(caml_call1(Base_Option[52], value_found[1]) && i[1] < length){
      var value = t[1 + i[1]];
      value_found[1] = caml_call1(f, value);
      i[1]++;
      continue;
     }
     return value_found[1];
    }
   }
   var not_found = [0, Base_Import[297], _e_];
   function find_map_exn(t, f){
    var match = find_map(t, f);
    if(! match) throw caml_maybe_attach_backtrace(not_found, 1);
    var x = match[1];
    return x;
   }
   function find_mapi(t, f){
    var length = t.length - 1;
    if(0 === length) return 0;
    var i = [0, 0], value_found = [0, 0];
    for(;;){
     if(caml_call1(Base_Option[52], value_found[1]) && i[1] < length){
      var value = t[1 + i[1]];
      value_found[1] = caml_call2(f, i[1], value);
      i[1]++;
      continue;
     }
     return value_found[1];
    }
   }
   var not_found$0 = [0, Base_Import[297], _f_];
   function find_mapi_exn(t, f){
    var match = find_mapi(t, f);
    if(! match) throw caml_maybe_attach_backtrace(not_found$0, 1);
    var x = match[1];
    return x;
   }
   function find_consecutive_duplicate(t, equal){
    var n = t.length - 1;
    if(1 >= n) return 0;
    var result = [0, 0], i = [0, 1], prev = [0, t[1]];
    for(;;){
     if(i[1] >= n) return result[1];
     var cur = t[1 + i[1]];
     if(caml_call2(equal, cur, prev[1])){
      result[1] = [0, [0, prev[1], cur]];
      i[1] = n;
     }
     else{prev[1] = cur; i[1]++;}
    }
   }
   function reduce(t, f){
    if(0 === t.length - 1) return 0;
    var
     r = [0, t[1]],
     _I_ = caml_call2(Base_Import[93], t.length - 1, 1),
     _H_ = 1;
    if(_I_ >= 1){
     var i = _H_;
     for(;;){
      r[1] = caml_call2(f, r[1], t[1 + i]);
      var _J_ = i + 1 | 0;
      if(_I_ === i) break;
      var i = _J_;
     }
    }
    return [0, r[1]];
   }
   function reduce_exn(t, f){
    var match = reduce(t, f);
    if(! match) return caml_call1(Base_Import[126], cst_Array_reduce_exn);
    var v = match[1];
    return v;
   }
   var permute = Base_Array_permute[25];
   function random_element_exn(opt, t){
    if(opt)
     var sth = opt[1], random_state = sth;
    else
     var random_state = Base_Random[19][1];
    if(is_empty(t))
     return caml_call1(Base_Import[124], cst_Array_random_element_exn_e);
    var _G_ = caml_call2(Base_Random[19][7], random_state, t.length - 1);
    return caml_check_bound(t, _G_)[1 + _G_];
   }
   function random_element(opt, t){
    if(opt)
     var sth = opt[1], random_state = sth;
    else
     var random_state = Base_Random[19][1];
    try{var _E_ = [0, random_element_exn([0, random_state], t)]; return _E_;}
    catch(_F_){return 0;}
   }
   function zip(t1, t2){
    return t1.length - 1 !== t2.length - 1
            ? 0
            : [0, map2_exn(t1, t2, function(x1, x2){return [0, x1, x2];})];
   }
   function zip_exn(t1, t2){
    return t1.length - 1 !== t2.length - 1
            ? caml_call1(Base_Import[124], cst_Array_zip_exn)
            : map2_exn(t1, t2, function(x1, x2){return [0, x1, x2];});
   }
   function unzip(t){
    var n = t.length - 1;
    if(0 === n) return [0, [0], [0]];
    var
     match = caml_check_bound(t, 0)[1],
     y = match[2],
     x = match[1],
     res1 = caml_call2(create, n, x),
     res2 = caml_call2(create, n, y),
     _C_ = caml_call2(Base_Import[93], n, 1),
     _B_ = 1;
    if(_C_ >= 1){
     var i = _B_;
     for(;;){
      var
       match$0 = caml_check_bound(t, i)[1 + i],
       y$0 = match$0[2],
       x$0 = match$0[1];
      caml_check_bound(res1, i)[1 + i] = x$0;
      caml_check_bound(res2, i)[1 + i] = y$0;
      var _D_ = i + 1 | 0;
      if(_C_ === i) break;
      var i = _D_;
     }
    }
    return [0, res1, res2];
   }
   function sorted_copy(t, compare){
    var t1 = caml_call1(copy, t);
    sort(0, 0, t1, compare);
    return t1;
   }
   function partition_mapi(t, f){
    var
     both = caml_call2(mapi, t, f),
     firsts =
       filter_map
        (both,
         function(param){
          if(0 !== param[0]) return 0;
          var x = param[1];
          return [0, x];
         }),
     seconds =
       filter_map
        (both,
         function(param){
          if(0 === param[0]) return 0;
          var x = param[1];
          return [0, x];
         });
    return [0, firsts, seconds];
   }
   function partitioni_tf(t, f){
    return partition_mapi
            (t, function(i, x){return caml_call2(f, i, x) ? [0, x] : [1, x];});
   }
   function partition_map(t, f){
    return partition_mapi(t, function(param, x){return caml_call1(f, x);});
   }
   function partition_tf(t, f){
    return partitioni_tf(t, function(param, x){return caml_call1(f, x);});
   }
   function last(t){
    var _A_ = caml_call2(Base_Import[93], t.length - 1, 1);
    return caml_check_bound(t, _A_)[1 + _A_];
   }
   function to_sequence_mutable(t){
    function _y_(i){
     if(t.length - 1 <= i) return 0;
     var _z_ = caml_call2(Base_Import[91], i, 1);
     return [1, caml_check_bound(t, i)[1 + i], _z_];
    }
    return caml_call2(Base_Sequence[44], 0, _y_);
   }
   function to_sequence(t){return to_sequence_mutable(caml_call1(copy, t));}
   function cartesian_product(t1, t2){
    if(! is_empty(t1) && ! is_empty(t2)){
     var
      n1 = t1.length - 1,
      n2 = t2.length - 1,
      _n_ = caml_check_bound(t2, 0)[1],
      _o_ = [0, caml_check_bound(t1, 0)[1], _n_],
      t = caml_call2(create, caml_call2(Base_Import[88], n1, n2), _o_),
      r = [0, 0],
      _q_ = caml_call2(Base_Import[93], n1, 1),
      _p_ = 0;
     if(_q_ >= 0){
      var i1 = _p_;
      for(;;){
       var _s_ = caml_call2(Base_Import[93], n2, 1), _r_ = 0;
       if(_s_ >= 0){
        var i2 = _r_;
        for(;;){
         var
          _u_ = caml_check_bound(t2, i2)[1 + i2],
          _v_ = [0, caml_check_bound(t1, i1)[1 + i1], _u_],
          _w_ = r[1];
         caml_check_bound(t, _w_)[1 + _w_] = _v_;
         r[1]++;
         var _x_ = i2 + 1 | 0;
         if(_s_ === i2) break;
         var i2 = _x_;
        }
       }
       var _t_ = i1 + 1 | 0;
       if(_q_ === i1) break;
       var i1 = _t_;
      }
     }
     return t;
    }
    return [0];
   }
   function transpose(tt){
    if(0 === tt.length - 1) return [0, [0]];
    var width = tt.length - 1, depth = caml_check_bound(tt, 0)[1].length - 1;
    return exists(tt, function(t){return t.length - 1 !== depth ? 1 : 0;})
            ? 0
            : [0,
              caml_call2
               (init,
                depth,
                function(d){
                 return caml_call2
                         (init,
                          width,
                          function(w){
                           return caml_check_bound(caml_check_bound(tt, w)[1 + w], d)
                                   [1 + d];
                          });
                })];
   }
   function transpose_exn(tt){
    var match = transpose(tt);
    if(! match) return caml_call1(Base_Import[126], cst_Array_transpose_exn);
    var tt$0 = match[1];
    return tt$0;
   }
   function get$0(_m_, _l_){return caml_check_bound(_m_, _l_)[1 + _l_];}
   function length$0(_k_){return _k_.length - 1;}
   var
    include = caml_call1(Base_Binary_searchable[2], [0, get$0, length$0]),
    binary_search = include[1],
    binary_search_segmented = include[2];
   function length$1(_j_){return _j_.length - 1;}
   function create_like(len, t){
    if(0 === len) return [0];
    if(0 < t.length - 1)
     return caml_call2(create, len, caml_check_bound(t, 0)[1]);
    throw caml_maybe_attach_backtrace([0, Assert_failure, _g_], 1);
   }
   var
    unsafe_blit = runtime.caml_array_blit,
    include$0 =
      caml_call1(Base_Blit[4], [0, create_like, length$1, unsafe_blit]),
    blit = include$0[1],
    blito = include$0[2],
    unsafe_blit$0 = include$0[3],
    sub$0 = include$0[4],
    subo = include$0[5];
   function invariant(invariant_a, t){
    return caml_call2(iter, t, invariant_a);
   }
   function _h_(_i_){return [0, Sorter(_i_)[8]];}
   var
    Base_Array =
      [0,
       compare,
       compare_local,
       globalize,
       t_of_sexp,
       sexp_of_t,
       t_sexp_grammar,
       binary_search,
       binary_search_segmented,
       of_list,
       of_array,
       append,
       map,
       filter,
       filter_map,
       concat_map,
       partition_tf,
       partition_map,
       mem,
       is_empty,
       iter,
       fold,
       fold_result,
       fold_until,
       exists,
       for_all,
       count,
       sum,
       find,
       find_map,
       to_list,
       to_array,
       min_elt,
       max_elt,
       foldi,
       iteri,
       existsi,
       for_alli,
       counti,
       findi,
       find_mapi,
       init,
       mapi,
       filteri,
       filter_mapi,
       concat_mapi,
       invariant,
       max_length,
       create,
       create_local,
       create_float_uninitialized,
       make_matrix,
       copy_matrix,
       concat,
       copy,
       fill,
       blit,
       blito,
       unsafe_blit$0,
       sub$0,
       subo,
       folding_map,
       folding_mapi,
       fold_map,
       fold_mapi,
       fold_right,
       sort,
       stable_sort,
       is_sorted,
       is_sorted_strictly,
       merge,
       partitioni_tf,
       cartesian_product,
       transpose,
       transpose_exn,
       filter_opt,
       iter2_exn,
       map2_exn,
       fold2_exn,
       for_all2_exn,
       exists2_exn,
       swap,
       rev_inplace,
       rev,
       of_list_rev,
       of_list_map,
       of_list_mapi,
       of_list_rev_map,
       of_list_rev_mapi,
       map_inplace,
       find_exn,
       find_map_exn,
       findi_exn,
       find_mapi_exn,
       find_consecutive_duplicate,
       reduce,
       reduce_exn,
       permute,
       random_element,
       random_element_exn,
       zip,
       zip_exn,
       unzip,
       sorted_copy,
       last,
       equal,
       equal_local,
       to_sequence,
       to_sequence_mutable,
       [0, [0, Sort[5], Sort[6], Sort[7]], _h_]];
   runtime.caml_register_global(29, Base_Array, "Base__Array");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Floatable
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Base_Floatable = [0];
   runtime.caml_register_global(0, Base_Floatable, "Base__Floatable");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Float0
//# unitInfo: Requires: Base__Import, Base__Import0, Base__Option, Base__Printf, Ocaml_intrinsics_kernel__Float, Stdlib__Float, Stdlib__Int64
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_src_float0_ml = "src/float0.ml",
    caml_int64_bits_of_float = runtime.caml_int64_bits_of_float,
    caml_int64_float_of_bits = runtime.caml_int64_float_of_bits,
    caml_int64_neg = runtime.caml_int64_neg,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_Import = global_data.Base__Import,
    Assert_failure = global_data.Assert_failure,
    Base_Option = global_data.Base__Option,
    Base_Printf = global_data.Base__Printf,
    Stdlib_Float = global_data.Stdlib__Float,
    _g_ = [0, cst_src_float0_ml, 186, 4],
    _f_ = [0, cst_src_float0_ml, 190, 4],
    _d_ = runtime.caml_int64_create_lo_mi_hi(16777215, 16777215, 65535),
    _e_ = runtime.caml_int64_create_lo_mi_hi(1, 0, 0),
    _c_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _b_ = [0, runtime.caml_int64_create_lo_mi_hi(0, 0, 0)],
    _a_ =
      [0,
       [8,
        [0, 0, 0],
        0,
        0,
        [12,
         32,
         [12,
          37,
          [12,
           32,
           [8,
            [0, 0, 0],
            0,
            0,
            [11, " in float0.ml: modulus should be positive", 0]]]]]],
       "%f %% %f in float0.ml: modulus should be positive"];
   function ceil(_p_){return Math.ceil(_p_);}
   function floor(_o_){return Math.floor(_o_);}
   function mod_float(_n_, _m_){return _n_ % _m_;}
   var
    modf = runtime.caml_modf_float,
    float_of_string = runtime.caml_float_of_string,
    float_of_string_opt = Base_Import[85][36],
    nan = Base_Import[85][24],
    infinity = Base_Import[85][22],
    neg_infinity = Base_Import[85][23],
    max_finite_value = Base_Import[85][25],
    epsilon_float = Base_Import[85][27],
    classify_float = runtime.caml_classify_float;
   function abs_float(_l_){return Math.abs(_l_);}
   var is_integer = Stdlib_Float[18];
   function symbol(_k_, _j_){return Math.pow(_k_, _j_);}
   function symbol$0(a, b){
    if(b < 0.) caml_call4(Base_Printf[7], _a_, a, b, 0);
    var m = a % b;
    return m < 0. ? caml_call2(Base_Import[92], m, b) : m;
   }
   var frexp = runtime.caml_frexp_float, ldexp = runtime.caml_ldexp_float;
   function is_nan(x){return x != x ? 1 : 0;}
   function to_int64_preserve_order(t){
    return t != t
            ? 0
            : t
              == 0.
              ? _b_
              : 0.
                < t
                ? [0, caml_int64_bits_of_float(t)]
                : [0,
                  caml_int64_neg
                   (caml_int64_bits_of_float(caml_call1(Base_Import[114], t)))];
   }
   function to_int64_preserve_order_exn(x){
    var _i_ = to_int64_preserve_order(x);
    return caml_call4(Base_Option[31], 0, 0, 0, _i_);
   }
   function of_int64_preserve_order(x){
    return runtime.caml_greaterequal(x, _c_)
            ? caml_int64_float_of_bits(x)
            : caml_call1
              (Base_Import[114], caml_int64_float_of_bits(caml_int64_neg(x)));
   }
   function one_ulp(dir, t){
    var match = to_int64_preserve_order(t);
    if(! match) return Base_Import[85][24];
    var x = match[1], _h_ = 759637122 <= dir ? _d_ : _e_;
    return of_int64_preserve_order(runtime.caml_int64_add(x, _h_));
   }
   function upper_bound_for_int(num_bits){
    var exp = caml_call2(Base_Import[93], num_bits, 1);
    return one_ulp(759637122, Math.pow(2., exp));
   }
   function is_x_minus_one_exact(x){
    return 1
           -
            runtime.caml_equal
             (caml_int64_bits_of_float(x),
              caml_int64_bits_of_float(caml_call2(Base_Import[94], x, 1.)));
   }
   function lower_bound_for_int(num_bits){
    var
     exp = caml_call2(Base_Import[93], num_bits, 1),
     min_int_as_float = caml_call1(Base_Import[114], Math.pow(2., exp));
    if(53 <= caml_call2(Base_Import[93], num_bits, 1)){
     if(is_x_minus_one_exact(min_int_as_float))
      throw caml_maybe_attach_backtrace([0, Assert_failure, _f_], 1);
     return min_int_as_float;
    }
    if(is_x_minus_one_exact(min_int_as_float))
     return one_ulp(19067, caml_call2(Base_Import[94], min_int_as_float, 1.));
    throw caml_maybe_attach_backtrace([0, Assert_failure, _g_], 1);
   }
   function min(a, b){return runtime.caml_sse2_float64_min_bytecode(a, b);}
   function max(a, b){return runtime.caml_sse2_float64_max_bytecode(a, b);}
   var Intrinsics_with_weird_nan_beha = [0, min, max];
   function clamp_unchecked
   (to_clamp_maybe_nan, min_which_is_not_nan, max_which_is_not_nan){
    var
     t_maybe_nan =
       caml_call2
        (Intrinsics_with_weird_nan_beha[2],
         min_which_is_not_nan,
         to_clamp_maybe_nan);
    return caml_call2
            (Intrinsics_with_weird_nan_beha[1],
             max_which_is_not_nan,
             t_maybe_nan);
   }
   var x = 0.;
   function box(f){return caml_call2(Base_Import[92], f, x);}
   var
    include = Base_Import[108],
    ascending = include[1],
    descending = include[2],
    compare_local = include[3],
    equal_local = include[4],
    max$0 = include[5],
    min$0 = include[6],
    Base_Float0 =
      [0,
       ceil,
       floor,
       mod_float,
       modf,
       float_of_string,
       float_of_string_opt,
       nan,
       infinity,
       neg_infinity,
       max_finite_value,
       epsilon_float,
       classify_float,
       abs_float,
       is_integer,
       symbol,
       symbol$0,
       frexp,
       ldexp,
       is_nan,
       to_int64_preserve_order,
       to_int64_preserve_order_exn,
       of_int64_preserve_order,
       one_ulp,
       upper_bound_for_int,
       is_x_minus_one_exact,
       lower_bound_for_int,
       Intrinsics_with_weird_nan_beha,
       clamp_unchecked,
       box,
       ascending,
       descending,
       compare_local,
       equal_local,
       max$0,
       min$0];
   runtime.caml_register_global(21, Base_Float0, "Base__Float0");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Intable
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Base_Intable = [0];
   runtime.caml_register_global(0, Base_Intable, "Base__Intable");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Int_intf
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Base_Int_intf = [0];
   runtime.caml_register_global(0, Base_Int_intf, "Base__Int_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Pow_overflow_bounds
//# unitInfo: Requires: Base__Array0, Base__Import, Base__Int_conversions
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_int64_to_int32 = runtime.caml_int64_to_int32,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    overflow_bound_max_int63_on_in =
      runtime.caml_int64_create_lo_mi_hi(16777215, 16777215, 16383),
    overflow_bound_max_int64_value =
      runtime.caml_int64_create_lo_mi_hi(16777215, 16777215, 32767),
    Base_Import = global_data.Base__Import,
    Base_Int_conversions = global_data.Base__Int_conversions,
    Assert_failure = global_data.Assert_failure,
    Base_Array0 = global_data.Base__Array0,
    int32_positive_overflow_bounds =
      [0,
        2147483647,
        2147483647,
        46340,
        1290,
        215,
        73,
        35,
        21,
        14,
        10,
        8,
        7,
        5,
        5,
        4,
        4,
        3,
        3,
        3,
        3,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1].slice
       (),
    overflow_bound_max_int_value = caml_call2(Base_Import[120], -1, 1),
    switcher = Base_Int_conversions[30] - 31 | 0,
    _g_ = [0, "src/pow_overflow_bounds.ml", 216, 9],
    _a_ = runtime.caml_int64_create_lo_mi_hi(16777215, 127, 0),
    _b_ = runtime.caml_int64_create_lo_mi_hi(16777215, 16777215, 16383),
    _c_ = runtime.caml_int64_create_lo_mi_hi(16777215, 16777215, 16383),
    _i_ =
      [0,
       1073741823,
       1073741823,
       32767,
       1023,
       181,
       63,
       31,
       19,
       13,
       10,
       7,
       6,
       5,
       4,
       4,
       3,
       3,
       3,
       3,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1],
    _d_ =
      [0,
       runtime.caml_int64_create_lo_mi_hi(16777215, 16777215, 16383),
       runtime.caml_int64_create_lo_mi_hi(16777215, 16777215, 16383),
       runtime.caml_int64_create_lo_mi_hi(16777215, 127, 0),
       runtime.caml_int64_create_lo_mi_hi(1664510, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(46340, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(5404, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(1290, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(463, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(215, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(118, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(73, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(49, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(35, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(27, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(21, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(17, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(14, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(12, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(10, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(9, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(8, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(7, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(7, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(6, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(5, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(5, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(5, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(4, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(4, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(4, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(4, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(3, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(3, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(3, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(3, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(3, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(3, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(3, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(3, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(3, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(2, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(2, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(2, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(2, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(2, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(2, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(2, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(2, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(2, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(2, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(2, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(2, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(2, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(2, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(2, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(2, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(2, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(2, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(2, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(2, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(2, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(2, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(1, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(1, 0, 0)],
    _e_ =
      [0,
       runtime.caml_int64_create_lo_mi_hi(16777215, 16777215, 32767),
       runtime.caml_int64_create_lo_mi_hi(16777215, 16777215, 32767),
       runtime.caml_int64_create_lo_mi_hi(324403, 181, 0),
       runtime.caml_int64_create_lo_mi_hi(2097151, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(55108, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(6208, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(1448, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(511, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(234, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(127, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(78, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(52, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(38, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(28, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(22, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(18, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(15, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(13, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(11, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(9, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(8, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(7, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(7, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(6, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(6, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(5, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(5, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(5, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(4, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(4, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(4, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(4, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(3, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(3, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(3, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(3, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(3, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(3, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(3, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(3, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(2, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(2, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(2, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(2, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(2, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(2, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(2, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(2, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(2, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(2, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(2, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(2, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(2, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(2, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(2, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(2, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(2, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(2, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(2, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(2, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(2, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(2, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(2, 0, 0),
       runtime.caml_int64_create_lo_mi_hi(1, 0, 0)],
    _f_ =
      [0,
       runtime.caml_int64_create_lo_mi_hi(1, 0, 32768),
       runtime.caml_int64_create_lo_mi_hi(1, 0, 32768),
       runtime.caml_int64_create_lo_mi_hi(16452813, 16777034, 65535),
       runtime.caml_int64_create_lo_mi_hi(14680065, 16777215, 65535),
       runtime.caml_int64_create_lo_mi_hi(16722108, 16777215, 65535),
       runtime.caml_int64_create_lo_mi_hi(16771008, 16777215, 65535),
       runtime.caml_int64_create_lo_mi_hi(16775768, 16777215, 65535),
       runtime.caml_int64_create_lo_mi_hi(16776705, 16777215, 65535),
       runtime.caml_int64_create_lo_mi_hi(16776982, 16777215, 65535),
       runtime.caml_int64_create_lo_mi_hi(16777089, 16777215, 65535),
       runtime.caml_int64_create_lo_mi_hi(16777138, 16777215, 65535),
       runtime.caml_int64_create_lo_mi_hi(16777164, 16777215, 65535),
       runtime.caml_int64_create_lo_mi_hi(16777178, 16777215, 65535),
       runtime.caml_int64_create_lo_mi_hi(16777188, 16777215, 65535),
       runtime.caml_int64_create_lo_mi_hi(16777194, 16777215, 65535),
       runtime.caml_int64_create_lo_mi_hi(16777198, 16777215, 65535),
       runtime.caml_int64_create_lo_mi_hi(16777201, 16777215, 65535),
       runtime.caml_int64_create_lo_mi_hi(16777203, 16777215, 65535),
       runtime.caml_int64_create_lo_mi_hi(16777205, 16777215, 65535),
       runtime.caml_int64_create_lo_mi_hi(16777207, 16777215, 65535),
       runtime.caml_int64_create_lo_mi_hi(16777208, 16777215, 65535),
       runtime.caml_int64_create_lo_mi_hi(16777209, 16777215, 65535),
       runtime.caml_int64_create_lo_mi_hi(16777209, 16777215, 65535),
       runtime.caml_int64_create_lo_mi_hi(16777210, 16777215, 65535),
       runtime.caml_int64_create_lo_mi_hi(16777210, 16777215, 65535),
       runtime.caml_int64_create_lo_mi_hi(16777211, 16777215, 65535),
       runtime.caml_int64_create_lo_mi_hi(16777211, 16777215, 65535),
       runtime.caml_int64_create_lo_mi_hi(16777211, 16777215, 65535),
       runtime.caml_int64_create_lo_mi_hi(16777212, 16777215, 65535),
       runtime.caml_int64_create_lo_mi_hi(16777212, 16777215, 65535),
       runtime.caml_int64_create_lo_mi_hi(16777212, 16777215, 65535),
       runtime.caml_int64_create_lo_mi_hi(16777212, 16777215, 65535),
       runtime.caml_int64_create_lo_mi_hi(16777213, 16777215, 65535),
       runtime.caml_int64_create_lo_mi_hi(16777213, 16777215, 65535),
       runtime.caml_int64_create_lo_mi_hi(16777213, 16777215, 65535),
       runtime.caml_int64_create_lo_mi_hi(16777213, 16777215, 65535),
       runtime.caml_int64_create_lo_mi_hi(16777213, 16777215, 65535),
       runtime.caml_int64_create_lo_mi_hi(16777213, 16777215, 65535),
       runtime.caml_int64_create_lo_mi_hi(16777213, 16777215, 65535),
       runtime.caml_int64_create_lo_mi_hi(16777213, 16777215, 65535),
       runtime.caml_int64_create_lo_mi_hi(16777214, 16777215, 65535),
       runtime.caml_int64_create_lo_mi_hi(16777214, 16777215, 65535),
       runtime.caml_int64_create_lo_mi_hi(16777214, 16777215, 65535),
       runtime.caml_int64_create_lo_mi_hi(16777214, 16777215, 65535),
       runtime.caml_int64_create_lo_mi_hi(16777214, 16777215, 65535),
       runtime.caml_int64_create_lo_mi_hi(16777214, 16777215, 65535),
       runtime.caml_int64_create_lo_mi_hi(16777214, 16777215, 65535),
       runtime.caml_int64_create_lo_mi_hi(16777214, 16777215, 65535),
       runtime.caml_int64_create_lo_mi_hi(16777214, 16777215, 65535),
       runtime.caml_int64_create_lo_mi_hi(16777214, 16777215, 65535),
       runtime.caml_int64_create_lo_mi_hi(16777214, 16777215, 65535),
       runtime.caml_int64_create_lo_mi_hi(16777214, 16777215, 65535),
       runtime.caml_int64_create_lo_mi_hi(16777214, 16777215, 65535),
       runtime.caml_int64_create_lo_mi_hi(16777214, 16777215, 65535),
       runtime.caml_int64_create_lo_mi_hi(16777214, 16777215, 65535),
       runtime.caml_int64_create_lo_mi_hi(16777214, 16777215, 65535),
       runtime.caml_int64_create_lo_mi_hi(16777214, 16777215, 65535),
       runtime.caml_int64_create_lo_mi_hi(16777214, 16777215, 65535),
       runtime.caml_int64_create_lo_mi_hi(16777214, 16777215, 65535),
       runtime.caml_int64_create_lo_mi_hi(16777214, 16777215, 65535),
       runtime.caml_int64_create_lo_mi_hi(16777214, 16777215, 65535),
       runtime.caml_int64_create_lo_mi_hi(16777214, 16777215, 65535),
       runtime.caml_int64_create_lo_mi_hi(16777214, 16777215, 65535),
       runtime.caml_int64_create_lo_mi_hi(16777215, 16777215, 65535)],
    overflow_bound_max_int32_value = 2147483647;
   if(1 < switcher >>> 0){
    if(32 !== switcher)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _g_], 1);
    var
     int_positive_overflow_bounds =
       [0,
        caml_int64_to_int32(_c_),
        caml_int64_to_int32(_b_),
        caml_int64_to_int32(_a_),
        1664510,
        46340,
        5404,
        1290,
        463,
        215,
        118,
        73,
        49,
        35,
        27,
        21,
        17,
        14,
        12,
        10,
        9,
        8,
        7,
        7,
        6,
        5,
        5,
        5,
        4,
        4,
        4,
        4,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        1,
        1];
   }
   else if(switcher)
    var
     _h_ = function(_j_){return _j_;},
     int_positive_overflow_bounds =
       caml_call2(Base_Array0[21], int32_positive_overflow_bounds, _h_);
   else
    var int_positive_overflow_bounds = _i_.slice();
   var
    int63_on_int64_positive_overfl = _d_.slice(),
    int64_positive_overflow_bounds = _e_.slice(),
    int64_negative_overflow_bounds = _f_.slice(),
    Base_Pow_overflow_bounds =
      [0,
       overflow_bound_max_int32_value,
       int32_positive_overflow_bounds,
       overflow_bound_max_int_value,
       int_positive_overflow_bounds,
       overflow_bound_max_int63_on_in,
       int63_on_int64_positive_overfl,
       overflow_bound_max_int64_value,
       int64_positive_overflow_bounds,
       int64_negative_overflow_bounds];
   runtime.caml_register_global
    (16, Base_Pow_overflow_bounds, "Base__Pow_overflow_bounds");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Int_math
//# unitInfo: Requires: Base__Import, Base__Pow_overflow_bounds, Base__Printf, Stdlib__Int64
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_exponent_can_not_be_negati = "exponent can not be negative",
    cst_integer_overflow_in_pow = "integer overflow in pow",
    caml_check_bound = runtime.caml_check_bound,
    caml_greaterthan = runtime.caml_greaterthan,
    caml_int64_to_int32 = runtime.caml_int64_to_int32,
    caml_lessthan = runtime.caml_lessthan;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_Import = global_data.Base__Import,
    Base_Pow_overflow_bounds = global_data.Base__Pow_overflow_bounds,
    Base_Printf = global_data.Base__Printf,
    Stdlib_Int64 = global_data.Stdlib__Int64,
    invalid_argf = Base_Printf[7],
    _m_ =
      [0,
       [2,
        0,
        [11,
         " /",
         [12,
          37,
          [12,
           32,
           [2, 0, [11, " in core_int.ml: divisor should be positive", 0]]]]]],
       "%s /%% %s in core_int.ml: divisor should be positive"],
    _l_ =
      [0,
       [2,
        0,
        [12,
         32,
         [12,
          37,
          [12,
           32,
           [2, 0, [11, " in core_int.ml: modulus should be positive", 0]]]]]],
       "%s %% %s in core_int.ml: modulus should be positive"],
    _i_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _j_ = runtime.caml_int64_create_lo_mi_hi(1, 0, 0),
    _k_ = runtime.caml_int64_create_lo_mi_hi(63, 0, 0),
    _c_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _d_ = runtime.caml_int64_create_lo_mi_hi(1, 0, 0),
    _h_ = runtime.caml_int64_create_lo_mi_hi(16777215, 16777215, 65535),
    _e_ = runtime.caml_int64_create_lo_mi_hi(63, 0, 0),
    _f_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _g_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _b_ =
      [0, [11, cst_integer_overflow_in_pow, 0], cst_integer_overflow_in_pow],
    _a_ =
      [0,
       [11, cst_exponent_can_not_be_negati, 0],
       cst_exponent_can_not_be_negati];
   function negative_exponent(param){
    return caml_call2(Base_Printf[7], _a_, 0);
   }
   function overflow(param){return caml_call2(Base_Printf[7], _b_, 0);}
   function int_pow(base, exponent){
    if(exponent < 0) negative_exponent(0);
    var _J_ = 1 < caml_call1(Base_Import[123], base) ? 1 : 0;
    if(_J_){
     var _K_ = 63 < exponent ? 1 : 0;
     if(_K_)
      var _L_ = _K_;
     else
      var
       _M_ =
         caml_check_bound(Base_Pow_overflow_bounds[4], exponent)[1 + exponent],
       _L_ = _M_ < caml_call1(Base_Import[123], base) ? 1 : 0;
    }
    else
     var _L_ = _J_;
    if(_L_) overflow(0);
    return runtime.Base_int_math_int_pow_stub(base, exponent);
   }
   var abs = Stdlib_Int64[8];
   function int64_pow(base, exponent){
    if(caml_lessthan(exponent, _c_)) negative_exponent(0);
    var
     _A_ = caml_greaterthan(base, _d_),
     _B_ = _A_ || caml_lessthan(base, _h_);
    if(_B_){
     var _C_ = caml_greaterthan(exponent, _e_);
     if(_C_)
      var _D_ = _C_;
     else{
      var _E_ = runtime.caml_greaterequal(base, _f_);
      if(_E_)
       var
        _F_ = caml_int64_to_int32(exponent),
        _G_ =
          caml_greaterthan
           (base, caml_check_bound(Base_Pow_overflow_bounds[8], _F_)[1 + _F_]);
      else
       var _G_ = _E_;
      if(_G_)
       var _D_ = _G_;
      else{
       var _H_ = caml_lessthan(base, _g_);
       if(_H_)
        var
         _I_ = caml_int64_to_int32(exponent),
         _D_ =
           caml_lessthan
            (base,
             caml_check_bound(Base_Pow_overflow_bounds[9], _I_)[1 + _I_]);
       else
        var _D_ = _H_;
      }
     }
    }
    else
     var _D_ = _B_;
    if(_D_) overflow(0);
    return runtime.Base_int_math_int64_pow_stub(base, exponent);
   }
   function int63_pow_on_int64(base, exponent){
    if(caml_lessthan(exponent, _i_)) negative_exponent(0);
    var _v_ = caml_greaterthan(caml_call1(abs, base), _j_);
    if(_v_){
     var _w_ = caml_greaterthan(exponent, _k_);
     if(_w_)
      var _x_ = _w_;
     else
      var
       _y_ = caml_int64_to_int32(exponent),
       _z_ = caml_check_bound(Base_Pow_overflow_bounds[6], _y_)[1 + _y_],
       _x_ = caml_greaterthan(caml_call1(abs, base), _z_);
    }
    else
     var _x_ = _v_;
    if(_x_) overflow(0);
    return runtime.Base_int_math_int64_pow_stub(base, exponent);
   }
   var
    Private = [0, int_pow, int64_pow, int63_pow_on_int64],
    Base_Int_math =
      [0,
       function(X){
        function symbol(x, y){
         if(caml_call2(X[11], y, X[18])){
          var _u_ = caml_call1(X[4], y);
          caml_call4(invalid_argf, _l_, caml_call1(X[4], x), _u_, 0);
         }
         var rval = caml_call2(X[20], x, y);
         return caml_call2(X[14], rval, X[18])
                 ? caml_call2(X[5], rval, y)
                 : rval;
        }
        var one = caml_call1(X[19], 1);
        function symbol$0(x, y){
         if(caml_call2(X[11], y, X[18])){
          var _r_ = caml_call1(X[4], y);
          caml_call4(invalid_argf, _m_, caml_call1(X[4], x), _r_, 0);
         }
         if(! caml_call2(X[14], x, X[18])) return caml_call2(X[8], x, y);
         var _s_ = caml_call2(X[5], x, one), _t_ = caml_call2(X[8], _s_, y);
         return caml_call2(X[6], _t_, one);
        }
        function symbol$1(x, y){
         var _p_ = caml_call1(X[2], y), _q_ = caml_call1(X[2], x);
         return caml_call2(Base_Import[96], _q_, _p_);
        }
        function round_down(i, modulus){
         var _o_ = symbol(i, modulus);
         return caml_call2(X[6], i, _o_);
        }
        function round_up(i, modulus){
         var remainder = symbol(i, modulus);
         if(caml_call2(X[12], remainder, X[18])) return i;
         var _n_ = caml_call2(X[5], i, modulus);
         return caml_call2(X[6], _n_, remainder);
        }
        function round_towards_zero(i, to_multiple_of){
         return caml_call2(X[12], i, X[18])
                 ? X[18]
                 : caml_call2
                    (X[13], i, X[18])
                   ? round_down(i, to_multiple_of)
                   : round_up(i, to_multiple_of);
        }
        function round_nearest(i, modulus){
         var
          remainder = symbol(i, modulus),
          modulus_minus_remainder = caml_call2(X[6], modulus, remainder);
         return caml_call2(X[11], modulus_minus_remainder, remainder)
                 ? caml_call2(X[5], i, modulus_minus_remainder)
                 : caml_call2(X[6], i, remainder);
        }
        function round(opt, i, to_multiple_of){
         if(opt) var sth = opt[1], dir = sth; else var dir = 857423934;
         return 857423934 <= dir
                 ? 1003109192
                   <= dir
                   ? round_towards_zero(i, to_multiple_of)
                   : round_nearest(i, to_multiple_of)
                 : 759637122
                   <= dir
                   ? round_down(i, to_multiple_of)
                   : round_up(i, to_multiple_of);
        }
        return [0,
                symbol,
                symbol$0,
                symbol$1,
                round,
                round_towards_zero,
                round_down,
                round_up,
                round_nearest];
       },
       Private];
   runtime.caml_register_global(17, Base_Int_math, "Base__Int_math");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Staged
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function stage(_b_){return _b_;}
   function unstage(_a_){return _a_;}
   var Base_Staged = [0, stage, unstage];
   runtime.caml_register_global(0, Base_Staged, "Base__Staged");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Bytes_intf
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Base_Bytes_intf = [0];
   runtime.caml_register_global(0, Base_Bytes_intf, "Base__Bytes_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Char
//# unitInfo: Requires: Base__Array0, Base__Char0, Base__Comparable, Base__Error, Base__Hash, Base__Identifiable, Base__Import, Base__Sexp, Base__String0, Stdlib__Format
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    module_name = "Base.Char",
    Base_Import = global_data.Base__Import,
    Base_Hash = global_data.Base__Hash,
    Base_Sexp = global_data.Base__Sexp,
    Base_Error = global_data.Base__Error,
    Stdlib_Format = global_data.Stdlib__Format,
    Base_String0 = global_data.Base__String0,
    Base_Char0 = global_data.Base__Char0,
    Base_Identifiable = global_data.Base__Identifiable,
    Base_Array0 = global_data.Base__Array0,
    Base_Comparable = global_data.Base__Comparable,
    failwithf = Base_Char0[1],
    escaped = Base_Char0[2],
    lowercase = Base_Char0[3],
    to_int = Base_Char0[4],
    unsafe_of_int = Base_Char0[5],
    uppercase = Base_Char0[6],
    min_value = Base_Char0[8],
    max_value = Base_Char0[9],
    of_int = Base_Char0[10],
    of_int_exn = Base_Char0[11],
    compare = Base_Import[226],
    hash_fold_t = Base_Import[205],
    func = Base_Import[219],
    cst_char = "char",
    cst_Char_get_hex_digit_exn_not =
      "Char.get_hex_digit_exn: not a hexadecimal digit",
    _d_ =
      [0,
       [11, "Char.get_digit_exn ", [1, [11, ": not a digit", 0]]],
       "Char.get_digit_exn %C: not a digit"],
    _b_ = [0, [1, 0], "%C"],
    _a_ = [0, [11, "Char.of_string: ", [3, 0, 0]], "Char.of_string: %S"];
   function hash(x){return caml_call1(func, x);}
   var
    globalize = Base_Import[282],
    t_of_sexp = Base_Import[162],
    sexp_of_t = Base_Import[138],
    t_sexp_grammar = Base_Import[184];
   function to_string(t){return caml_call2(Base_String0[8], 1, t);}
   function of_string(s){
    return 1 === runtime.caml_ml_string_length(s)
            ? runtime.caml_string_get(s, 0)
            : caml_call3(failwithf, _a_, s, 0);
   }
   var
    include =
      caml_call1
       (Base_Identifiable[1],
        [0,
         compare,
         hash_fold_t,
         hash,
         t_of_sexp,
         sexp_of_t,
         of_string,
         to_string,
         module_name]),
    hash_fold_t$0 = include[1],
    hash$0 = include[2],
    t_of_sexp$0 = include[3],
    sexp_of_t$0 = include[4],
    of_string$0 = include[5],
    to_string$0 = include[6],
    between = include[19],
    clamp_exn = include[20],
    clamp = include[21],
    comparator = include[22],
    hashable = include[24];
   function pp(fmt, c){return caml_call3(Stdlib_Format[137], fmt, _b_, c);}
   function invariant(param){return 0;}
   var
    _c_ = caml_call2(Base_Array0[12], 256, unsafe_of_int),
    all = caml_call1(Base_Array0[16], _c_);
   function is_lowercase(param){return 25 < param - 97 >>> 0 ? 0 : 1;}
   function is_uppercase(param){return 25 < param - 65 >>> 0 ? 0 : 1;}
   function is_print(param){return 94 < param - 32 >>> 0 ? 0 : 1;}
   function is_whitespace(param){
    a:
    {
     if(14 <= param){if(32 === param) break a;} else if(9 <= param) break a;
     return 0;
    }
    return 1;
   }
   function is_digit(param){return 9 < param - 48 >>> 0 ? 0 : 1;}
   function is_alpha(param){
    a:
    {
     if(91 <= param){
      if(25 < param - 97 >>> 0) break a;
     }
     else if(65 > param) break a;
     return 1;
    }
    return 0;
   }
   function is_alphanum(param){
    var _v_ = param - 48 | 0;
    a:
    {
     if(42 < _v_ >>> 0){
      if(25 < _v_ - 49 >>> 0) break a;
     }
     else if(6 >= _v_ - 10 >>> 0) break a;
     return 1;
    }
    return 0;
   }
   function get_digit_unsafe(t){
    var _t_ = caml_call1(to_int, 48), _u_ = caml_call1(to_int, t);
    return caml_call2(Base_Import[93], _u_, _t_);
   }
   function get_digit_exn(t){
    return is_digit(t)
            ? get_digit_unsafe(t)
            : caml_call3(failwithf, _d_, t, 0);
   }
   function get_digit(t){return is_digit(t) ? [0, get_digit_unsafe(t)] : 0;}
   function is_hex_digit(param){
    var _s_ = param - 48 | 0;
    a:
    {
     if(22 < _s_ >>> 0){
      if(5 < _s_ - 49 >>> 0) break a;
     }
     else if(6 >= _s_ - 10 >>> 0) break a;
     return 1;
    }
    return 0;
   }
   function is_hex_digit_lower(param){
    a:
    {
     if(58 <= param){
      if(5 < param - 97 >>> 0) break a;
     }
     else if(48 > param) break a;
     return 1;
    }
    return 0;
   }
   function is_hex_digit_upper(param){
    a:
    {
     if(58 <= param){
      if(5 < param - 65 >>> 0) break a;
     }
     else if(48 > param) break a;
     return 1;
    }
    return 0;
   }
   function get_hex_digit_exn(t){
    if(65 <= t){
     if(97 <= t){
      if(103 > t){
       var
        _k_ = caml_call1(to_int, 97),
        _l_ = caml_call1(to_int, t),
        _m_ = caml_call2(Base_Import[93], _l_, _k_);
       return caml_call2(Base_Import[91], _m_, 10);
      }
     }
     else if(71 > t){
      var
       _n_ = caml_call1(to_int, 65),
       _o_ = caml_call1(to_int, t),
       _p_ = caml_call2(Base_Import[93], _o_, _n_);
      return caml_call2(Base_Import[91], _p_, 10);
     }
    }
    else if(9 >= t - 48 >>> 0){
     var _q_ = caml_call1(to_int, 48), _r_ = caml_call1(to_int, t);
     return caml_call2(Base_Import[93], _r_, _q_);
    }
    var
     _i_ = [0, [0, cst_char, caml_call1(sexp_of_t$0, t)], 0],
     _j_ = caml_call2(Base_Sexp[10], cst_Char_get_hex_digit_exn_not, _i_);
    return caml_call1(Base_Error[32], _j_);
   }
   function get_hex_digit(t){
    return is_hex_digit(t) ? [0, get_hex_digit_exn(t)] : 0;
   }
   var
    symbol = Base_Import[106][6],
    symbol$0 = Base_Import[106][2],
    symbol$1 = Base_Import[106][4],
    symbol$2 = Base_Import[106][5],
    symbol$3 = Base_Import[106][1],
    symbol$4 = Base_Import[106][3],
    O = [0, symbol, symbol$0, symbol$1, symbol$2, symbol$3, symbol$4],
    t_of_sexp$1 = Base_Import[162],
    sexp_of_t$1 = Base_Import[138],
    t_sexp_grammar$0 = Base_Import[184];
   function compare$0(c1, c2){
    var _g_ = caml_call1(lowercase, c2), _h_ = caml_call1(lowercase, c1);
    return caml_call2(Base_Import[106][9], _h_, _g_);
   }
   function compare_local(c1, c2){return compare$0(c1, c2);}
   function hash_fold_t$1(state, t){
    var _f_ = caml_call1(lowercase, t);
    return caml_call2(Base_Import[205], state, _f_);
   }
   function hash$1(t){return caml_call3(Base_Hash[14], 0, hash_fold_t$1, t);}
   var
    include$0 = caml_call1(Base_Comparable[11], [0, compare$0, sexp_of_t$1]),
    symbol$5 = include$0[1],
    symbol$6 = include$0[2],
    symbol$7 = include$0[3],
    symbol$8 = include$0[4],
    symbol$9 = include$0[5],
    symbol$10 = include$0[6],
    equal = include$0[7],
    compare$1 = include$0[8],
    min = include$0[9],
    max = include$0[10],
    ascending = include$0[11],
    descending = include$0[12],
    between$0 = include$0[13],
    clamp_exn$0 = include$0[14],
    clamp$0 = include$0[15],
    comparator$0 = include$0[16];
   function equal_local(t1, t2){
    var _e_ = compare_local(t1, t2);
    return caml_call2(Base_Import[242], _e_, 0);
   }
   var
    include$1 = Base_Import[106],
    symbol$11 = include$1[1],
    symbol$12 = include$1[2],
    symbol$13 = include$1[3],
    symbol$14 = include$1[4],
    symbol$15 = include$1[5],
    symbol$16 = include$1[6],
    ascending$0 = include$1[7],
    descending$0 = include$1[8],
    compare$2 = include$1[9],
    compare_local$0 = include$1[10],
    equal$0 = include$1[11],
    equal_local$0 = include$1[12],
    max$0 = include$1[13],
    min$0 = include$1[14],
    Base_Char =
      [0,
       all,
       globalize,
       t_sexp_grammar,
       hash_fold_t$0,
       hash$0,
       t_of_sexp$0,
       sexp_of_t$0,
       of_string$0,
       to_string$0,
       symbol$16,
       symbol$12,
       symbol$14,
       symbol$15,
       symbol$11,
       symbol$13,
       equal$0,
       compare$2,
       min$0,
       max$0,
       ascending$0,
       descending$0,
       between,
       clamp_exn,
       clamp,
       comparator,
       pp,
       hashable,
       equal_local$0,
       compare_local$0,
       invariant,
       O,
       to_int,
       of_int,
       of_int_exn,
       unsafe_of_int,
       escaped,
       lowercase,
       uppercase,
       is_digit,
       is_lowercase,
       is_uppercase,
       is_alpha,
       is_alphanum,
       is_print,
       is_whitespace,
       get_digit,
       get_digit_exn,
       is_hex_digit,
       is_hex_digit_lower,
       is_hex_digit_upper,
       get_hex_digit,
       get_hex_digit_exn,
       min_value,
       max_value,
       [0,
        hash_fold_t$1,
        hash$1,
        t_of_sexp$1,
        sexp_of_t$1,
        t_sexp_grammar$0,
        symbol$5,
        symbol$6,
        symbol$7,
        symbol$8,
        symbol$9,
        symbol$10,
        equal,
        compare$1,
        min,
        max,
        ascending,
        descending,
        between$0,
        clamp_exn$0,
        clamp$0,
        comparator$0,
        equal_local,
        compare_local]];
   runtime.caml_register_global(16, Base_Char, "Base__Char");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Bytes_tr
//# unitInfo: Requires: Base__Bytes0, Base__Char, Base__Import0
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_bytes_unsafe_get = runtime.caml_bytes_unsafe_get,
    caml_bytes_unsafe_set = runtime.caml_bytes_unsafe_set,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_unsafe_get = runtime.caml_string_unsafe_get;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_Char = global_data.Base__Char,
    Base_Bytes0 = global_data.Base__Bytes0,
    Base_Import0 = global_data.Base__Import0;
   function tr_create_map(target, replacement){
    var tr_map = caml_call1(Base_Bytes0[7], 256), i$3 = 0;
    for(;;){
     caml_bytes_unsafe_set(tr_map, i$3, caml_call1(Base_Char[34], i$3));
     var _j_ = i$3 + 1 | 0;
     if(255 === i$3) break;
     var i$3 = _j_;
    }
    var
     _b_ =
       caml_call2
        (Base_Import0[97][4],
         caml_ml_string_length(target),
         caml_ml_string_length(replacement))
       - 1
       | 0,
     _a_ = 0;
    if(_b_ >= 0){
     var i$2 = _a_;
     for(;;){
      var
       index$0 =
         caml_call1(Base_Char[32], caml_string_unsafe_get(target, i$2));
      caml_bytes_unsafe_set
       (tr_map, index$0, caml_string_unsafe_get(replacement, i$2));
      var _i_ = i$2 + 1 | 0;
      if(_b_ === i$2) break;
      var i$2 = _i_;
     }
    }
    var
     last_replacement =
       caml_string_unsafe_get
        (replacement, caml_ml_string_length(replacement) - 1 | 0),
     _c_ =
       caml_call2
        (Base_Import0[97][4],
         caml_ml_string_length(target),
         caml_ml_string_length(replacement)),
     _d_ = caml_ml_string_length(target) - 1 | 0;
    if(_d_ >= _c_){
     var i$1 = _c_;
     for(;;){
      var
       index = caml_call1(Base_Char[32], caml_string_unsafe_get(target, i$1));
      caml_bytes_unsafe_set(tr_map, index, last_replacement);
      var _h_ = i$1 + 1 | 0;
      if(_d_ === i$1) break;
      var i$1 = _h_;
     }
    }
    var
     first_target = runtime.caml_string_get(target, 0),
     _f_ =
       caml_bytes_unsafe_get(tr_map, caml_call1(Base_Char[32], first_target));
    if(! caml_call2(Base_Char[15], _f_, first_target)){
     var i = 0;
     for(;;){
      if(256 === i)
       var _g_ = 0;
      else{
       var _e_ = caml_call1(Base_Char[34], i);
       if(! caml_call2(Base_Char[15], caml_bytes_unsafe_get(tr_map, i), _e_)){var i$0 = i + 1 | 0, i = i$0; continue;}
       var _g_ = 1;
      }
      if(_g_) break;
      return 0;
     }
    }
    return [0, runtime.caml_string_of_bytes(tr_map)];
   }
   var Base_Bytes_tr = [0, tr_create_map];
   runtime.caml_register_global(3, Base_Bytes_tr, "Base__Bytes_tr");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__String_intf
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Base_String_intf = [0];
   runtime.caml_register_global(0, Base_String_intf, "Base__String_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__String
//# unitInfo: Requires: Base__Array0, Base__Bytes0, Base__Bytes_tr, Base__Char, Base__Comparable, Base__Comparator, Base__Container, Base__Error, Base__Hash, Base__Identifiable, Base__Import, Base__Indexed_container, Base__Int0, Base__List, Base__Option, Base__Or_error, Base__Ordered_collection_common, Base__Printf, Base__Sequence, Base__Sexp, Base__Sexpable, Base__Staged, Base__String0, Base__String_intf, Base__Uchar0, CamlinternalLazy, Stdlib__Format
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$15 = "",
    cst_case_sensitive = "case_sensitive",
    cst_char$1 = "char",
    cst_escape_char$1 = "escape_char",
    cst_pattern = "pattern",
    cst_pos$2 = "pos",
    cst_src_string_ml = "src/string.ml",
    cst_str$1 = "str",
    caml_blit_string = runtime.caml_blit_string,
    caml_bytes_set = runtime.caml_bytes_set,
    caml_bytes_unsafe_set = runtime.caml_bytes_unsafe_set,
    caml_check_bound = runtime.caml_check_bound,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_bytes_length = runtime.caml_ml_bytes_length,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_get = runtime.caml_string_get,
    caml_string_of_bytes = runtime.caml_string_of_bytes,
    caml_string_unsafe_get = runtime.caml_string_unsafe_get,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    cst$14 = cst$15,
    cst$13 = cst$15,
    cst$12 = cst$15,
    cst$11 = cst$15,
    cst$10 = cst$15,
    cst$8 = cst$15,
    cst$9 = cst$15,
    cst$6 = cst$15,
    cst$7 = cst$15,
    cst$5 = cst$15,
    cst$4 = cst$15,
    cst$3 = cst$15,
    cst$2 = cst$15,
    cst$1 = cst$15,
    cst$0 = cst$15,
    cst = cst$15,
    codec_name = "UTF-8",
    module_name = "Base.String.Utf8",
    codec_name$0 = "UTF-16LE",
    module_name$0 = "Base.String.Utf16le",
    codec_name$1 = "UTF-16BE",
    module_name$1 = "Base.String.Utf16be",
    codec_name$2 = "UTF-32LE",
    module_name$2 = "Base.String.Utf32le",
    codec_name$3 = "UTF-32BE",
    module_name$3 = "Base.String.Utf32be",
    Base_Char = global_data.Base__Char,
    Base_Import = global_data.Base__Import,
    Base_Uchar0 = global_data.Base__Uchar0,
    Base_Bytes0 = global_data.Base__Bytes0,
    Assert_failure = global_data.Assert_failure,
    Base_List = global_data.Base__List,
    Base_Sequence = global_data.Base__Sequence,
    Base_Sexp = global_data.Base__Sexp,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Base_Printf = global_data.Base__Printf,
    Base_Sexpable = global_data.Base__Sexpable,
    Base_Identifiable = global_data.Base__Identifiable,
    Base_Indexed_container = global_data.Base__Indexed_container,
    Base_Or_error = global_data.Base__Or_error,
    Base_Option = global_data.Base__Option,
    Base_Array0 = global_data.Base__Array0,
    Base_Int0 = global_data.Base__Int0,
    Stdlib_Format = global_data.Stdlib__Format,
    Base_Bytes_tr = global_data.Base__Bytes_tr,
    Base_Container = global_data.Base__Container,
    Base_Hash = global_data.Base__Hash,
    Base_Ordered_collection_common =
      global_data.Base__Ordered_collection_common,
    Base_String0 = global_data.Base__String0,
    Base_Error = global_data.Base__Error,
    Base_Staged = global_data.Base__Staged,
    Base_Comparator = global_data.Base__Comparator,
    Base_Comparable = global_data.Base__Comparable,
    max_length = Base_String0[2],
    symbol = Base_String0[3],
    capitalize = Base_String0[4],
    compare = Base_String0[5],
    escaped = Base_String0[6],
    lowercase = Base_String0[7],
    make = Base_String0[8],
    uncapitalize = Base_String0[10],
    uppercase = Base_String0[11],
    is_valid_utf_8 = Base_String0[12],
    is_valid_utf_16le = Base_String0[13],
    is_valid_utf_16be = Base_String0[14],
    get_utf_8_uchar = Base_String0[15],
    get_utf_16le_uchar = Base_String0[16],
    get_utf_16be_uchar = Base_String0[17],
    get_utf_32le_uchar = Base_String0[18],
    get_utf_32be_uchar = Base_String0[19],
    concat = Base_String0[20],
    iter = Base_String0[21],
    split_lines = Base_String0[22],
    invalid_argf = Base_Printf[7],
    raise_s = Base_Error[32],
    stage = Base_Staged[1],
    globalize = Base_Import[289],
    hash_fold_t = Base_Import[208],
    func = Base_Import[222],
    _N_ = [0, cst$15],
    _M_ = [0, cst_src_string_ml, 2020, 4],
    _L_ = [0, cst_src_string_ml, 2006, 4],
    _K_ = [0, cst_src_string_ml, 1996, 4],
    cst_pos$1 = cst_pos$2,
    _J_ =
      [0,
       [2,
        0,
        [11, ".get: invalid ", [2, 0, [11, " encoding at given position", 0]]]],
       "%s.get: invalid %s encoding at given position"],
    cst_of_string_invalid = ".of_string: invalid ",
    cst_max = "max",
    cst_min = "min",
    cst_clamp_requires_min_max = "clamp requires [min <= max]",
    _I_ = [0, cst_src_string_ml, 1872, 2],
    _H_ = [0, cst_src_string_ml, 1858, 19],
    cst_char$0 = cst_char$1,
    cst_pos$0 = cst_pos$2,
    cst_escape_char$0 = cst_escape_char$1,
    cst_str$0 = cst_str$1,
    cst_rindex_from_exn_not_found = "rindex_from_exn: not found",
    cst_rindex_from = "rindex_from",
    cst_char = cst_char$1,
    cst_pos = cst_pos$2,
    cst_escape_char = cst_escape_char$1,
    cst_str = cst_str$1,
    cst_index_from_exn_not_found = "index_from_exn: not found",
    cst_index_from = "index_from",
    cst_is_char_literal = "is_char_literal",
    cst_is_char_escaped = "is_char_escaped",
    cst_is_char_escaping = "is_char_escaping",
    _G_ = [0, [2, 0, [11, ": out of bounds", 0]], "%s: out of bounds"],
    cst_escapeworthy_map = "escapeworthy_map",
    cst_c_to = "c_to",
    cst_c_from = "c_from",
    cst_escapeworthy_map_not_one_t = "escapeworthy_map not one-to-one",
    _F_ = [0, cst$15, cst$15],
    _E_ = [0, [3, 0, 0], "%S"],
    _D_ =
      [0,
       [11, "String.chop_suffix_exn ", [3, 0, [12, 32, [3, 0, 0]]]],
       "String.chop_suffix_exn %S %S"],
    _C_ =
      [0,
       [11, "String.chop_prefix_exn ", [3, 0, [12, 32, [3, 0, 0]]]],
       "String.chop_prefix_exn %S %S"],
    _B_ = [0, cst_src_string_ml, 925, 4],
    cst_tr_multi_replacement_is_em = "tr_multi replacement is empty string",
    _A_ = [0, cst_src_string_ml, 761, 17],
    cst_suffix = "suffix",
    cst_prefix = "prefix",
    cst_drop_suffix = "drop_suffix",
    cst_drop_prefix = "drop_prefix",
    cst_expecting_nonnegative_argu = " expecting nonnegative argument",
    _z_ = [0, "String.rsplit2_exn: not found"],
    _y_ = [0, "String.lsplit2_exn: not found"],
    _x_ = [0, [11, "String.init ", [4, 0, 0, 0, 0]], "String.init %d"],
    _p_ =
      [0,
       [11,
        "String.is_substring_at: invalid index ",
        [4, 0, 0, 0, [11, " for string of length ", [4, 0, 0, 0, 0]]]],
       "String.is_substring_at: invalid index %d for string of length %d"],
    _g_ = [0, "kmp_array"],
    _h_ = [0, cst_case_sensitive],
    _i_ = [0, cst_pattern],
    cst_substring = "substring",
    cst_Substring_not_found = "Substring not found",
    _e_ = [0, cst_case_sensitive],
    _f_ = [0, cst_pattern],
    cst_String_rindex_from_exn = "String.rindex_from_exn",
    _d_ = [0, "String.rindex_from_exn: not found"],
    _c_ = [0, "String.rindex_exn: not found"],
    cst_String_index_from_exn = "String.index_from_exn",
    _b_ = [0, "String.index_from_exn: not found"],
    _a_ = [0, "String.index_exn: not found"];
   function hash(x){return caml_call1(func, x);}
   var
    t_of_sexp = Base_Import[160],
    sexp_of_t = Base_Import[136],
    t_sexp_grammar = Base_Import[182],
    hashable = [0, hash, compare, sexp_of_t],
    include = caml_call1(Base_Comparator[7], [0, compare, sexp_of_t]),
    comparator = include[1];
   function invariant(param){return 0;}
   function unsafe_sub(src, pos, len){
    if(0 === len) return cst;
    var dst = caml_call1(Base_Bytes0[7], len);
    caml_blit_string(src, pos, dst, 0, len);
    return caml_string_of_bytes(dst);
   }
   function sub(src, pos, len){
    if(0 === pos && len === caml_ml_string_length(src)) return src;
    caml_call3
     (Base_Ordered_collection_common[2], pos, len, caml_ml_string_length(src));
    return unsafe_sub(src, pos, len);
   }
   function subo(opt, len, src){
    if(opt) var sth = opt[1], pos = sth; else var pos = 0;
    if(len)
     var i = len[1], i$0 = i;
    else
     var i$0 = caml_call2(Base_Import[93], caml_ml_string_length(src), pos);
    return sub(src, pos, i$0);
   }
   function contains(opt, len, t, char$0){
    if(opt) var sth = opt[1], pos$1 = sth; else var pos$1 = 0;
    var
     total_length = caml_ml_string_length(t),
     _eG_ = caml_call2(Base_Import[93], total_length, pos$1),
     len$0 = caml_call2(Base_Option[30], len, _eG_);
    caml_call3(Base_Ordered_collection_common[2], pos$1, len$0, total_length);
    var end = caml_call2(Base_Import[91], pos$1, len$0), pos = pos$1;
    for(;;){
     var _eD_ = pos < end ? 1 : 0;
     if(_eD_){
      var
       _eE_ =
         caml_call2(Base_Char[16], caml_string_unsafe_get(t, pos), char$0);
      if(! _eE_){
       var pos$0 = caml_call2(Base_Import[91], pos, 1), pos = pos$0;
       continue;
      }
      var _eF_ = _eE_;
     }
     else
      var _eF_ = _eD_;
     return _eF_;
    }
   }
   function is_empty(t){return 0 === caml_ml_string_length(t) ? 1 : 0;}
   function index_from_internal(string, len, not_found, found, char$0, pos){
    var pos$0 = pos;
    for(;;){
     if(len <= pos$0) return caml_call1(not_found, 0);
     if
      (caml_call2
        (Base_Char[16], caml_string_unsafe_get(string, pos$0), char$0))
      return caml_call1(found, pos$0);
     var pos$1 = caml_call2(Base_Import[91], pos$0, 1), pos$0 = pos$1;
    }
   }
   function index(t, char$0){
    var _eB_ = 0, _eC_ = Base_Option[49];
    return index_from_internal
            (t,
             caml_ml_string_length(t),
             function(param){return 0;},
             _eC_,
             char$0,
             _eB_);
   }
   function index_exn(t, char$0){
    var _ey_ = 0;
    function _ez_(_eA_){return _eA_;}
    return index_from_internal
            (t,
             caml_ml_string_length(t),
             function(param){
              throw caml_maybe_attach_backtrace([0, Base_Import[297], _a_], 1);
             },
             _ez_,
             char$0,
             _ey_);
   }
   function index_from(t, pos, char$0){
    var _ex_ = Base_Option[49];
    return index_from_internal
            (t,
             caml_ml_string_length(t),
             function(param){return 0;},
             _ex_,
             char$0,
             pos);
   }
   function not_found(param){
    throw caml_maybe_attach_backtrace([0, Base_Import[297], _b_], 1);
   }
   function index_from_exn(t, pos, char$0){
    var len = caml_ml_string_length(t);
    if(0 <= pos && len >= pos)
     return index_from_internal
             (t, len, not_found, function(_ew_){return _ew_;}, char$0, pos);
    return caml_call1(Base_Import[126], cst_String_index_from_exn);
   }
   function rindex_from_internal(string, char$0, found, not_found, pos){
    var pos$0 = pos;
    for(;;){
     if(0 > pos$0) return caml_call1(not_found, 0);
     if
      (caml_call2
        (Base_Char[16], caml_string_unsafe_get(string, pos$0), char$0))
      return caml_call1(found, pos$0);
     var pos$1 = caml_call2(Base_Import[93], pos$0, 1), pos$0 = pos$1;
    }
   }
   function rindex(t, char$0){
    var _eu_ = caml_call2(Base_Import[93], caml_ml_string_length(t), 1);
    function _ev_(param){return 0;}
    return rindex_from_internal(t, char$0, Base_Option[49], _ev_, _eu_);
   }
   function rindex_exn(t, char$0){
    var _er_ = caml_call2(Base_Import[93], caml_ml_string_length(t), 1);
    function _es_(param){
     throw caml_maybe_attach_backtrace([0, Base_Import[297], _c_], 1);
    }
    return rindex_from_internal
            (t, char$0, function(_et_){return _et_;}, _es_, _er_);
   }
   function rindex_from(t, pos, char$0){
    function _eq_(param){return 0;}
    return rindex_from_internal(t, char$0, Base_Option[49], _eq_, pos);
   }
   function not_found$0(param){
    throw caml_maybe_attach_backtrace([0, Base_Import[297], _d_], 1);
   }
   function rindex_from_exn(t, pos, char$0){
    if(-1 <= pos && caml_ml_string_length(t) > pos)
     return rindex_from_internal
             (t, char$0, function(_ep_){return _ep_;}, not_found$0, pos);
    return caml_call1(Base_Import[126], cst_String_rindex_from_exn);
   }
   function sexp_of_t$0(param){
    var
     case_sensitive = param[2],
     pattern = param[1],
     _eo_ =
       [0,
        [1, [0, _e_, [0, caml_call1(Base_Import[135], case_sensitive), 0]]],
        0];
    return [1,
            [0,
             [1, [0, _f_, [0, caml_call1(Base_Import[136], pattern), 0]]],
             _eo_]];
   }
   function pattern(t){return t[1];}
   function case_sensitive(t){return t[2];}
   function kmp_internal_loop
   (matched_chars, next_text_char, pattern, kmp_array, char_equal){
    var matched_chars$0 = [0, matched_chars];
    for(;;){
     if
      (0 < matched_chars$0[1]
       &&
        !
        caml_call2
         (char_equal,
          next_text_char,
          caml_string_unsafe_get(pattern, matched_chars$0[1]))){
      matched_chars$0[1] =
       kmp_array[1 + caml_call2(Base_Import[93], matched_chars$0[1], 1)];
      continue;
     }
     if
      (caml_call2
        (char_equal,
         next_text_char,
         caml_string_unsafe_get(pattern, matched_chars$0[1])))
      matched_chars$0[1] = caml_call2(Base_Import[91], matched_chars$0[1], 1);
     return matched_chars$0[1];
    }
   }
   function get_char_equal(case_sensitive){
    return case_sensitive ? Base_Char[16] : Base_Char[55][12];
   }
   function create(pattern, case_sensitive){
    var
     n = caml_ml_string_length(pattern),
     kmp_array = caml_call2(Base_Array0[4], n, -1);
    if(0 < n){
     var char_equal = get_char_equal(case_sensitive);
     kmp_array[1] = 0;
     var
      matched_chars = [0, 0],
      _em_ = caml_call2(Base_Import[93], n, 1),
      _el_ = 1;
     if(_em_ >= 1){
      var i = _el_;
      for(;;){
       matched_chars[1] =
        kmp_internal_loop
         (matched_chars[1],
          caml_string_unsafe_get(pattern, i),
          pattern,
          kmp_array,
          char_equal);
       kmp_array[1 + i] = matched_chars[1];
       var _en_ = i + 1 | 0;
       if(_em_ === i) break;
       var i = _en_;
      }
     }
    }
    return [0, pattern, case_sensitive, kmp_array];
   }
   function index_internal(opt, param){
    if(opt) var sth = opt[1], pos = sth; else var pos = 0;
    var kmp_array = param[3], case_sensitive = param[2], pattern = param[1];
    return function(text){
     if
      (0 <= pos
       &&
        caml_call2
         (Base_Import[93],
          caml_ml_string_length(text),
          caml_ml_string_length(pattern))
        >= pos){
      var
       char_equal = get_char_equal(case_sensitive),
       j = [0, pos],
       matched_chars = [0, 0],
       k = caml_ml_string_length(pattern),
       n = caml_ml_string_length(text);
      for(;;){
       if(j[1] < n && matched_chars[1] < k){
        var next_text_char = caml_string_unsafe_get(text, j[1]);
        matched_chars[1] =
         kmp_internal_loop
          (matched_chars[1], next_text_char, pattern, kmp_array, char_equal);
        j[1] = caml_call2(Base_Import[91], j[1], 1);
        continue;
       }
       return matched_chars[1] === k
               ? caml_call2(Base_Import[93], j[1], k)
               : -1;
      }
     }
     return -1;};
   }
   function matches(t, str){return 0 <= index_internal(0, t)(str) ? 1 : 0;}
   function index$0(pos, t, in$0){
    var p = index_internal(pos, t)(in$0);
    return 0 <= p ? [0, p] : 0;
   }
   function index_exn$0(pos, t, in$0){
    var p = index_internal(pos, t)(in$0);
    if(0 <= p) return p;
    var _ek_ = [0, [0, cst_substring, caml_call1(Base_Import[136], t[1])], 0];
    return caml_call1
            (raise_s,
             caml_call2(Base_Sexp[10], cst_Substring_not_found, _ek_));
   }
   function index_all(param, may_overlap, text){
    var kmp_array = param[3], case_sensitive = param[2], pattern = param[1];
    if(0 === caml_ml_string_length(pattern)){
     var
      _ee_ = function(_ej_){return _ej_;},
      _ef_ = caml_call2(Base_Import[91], 1, caml_ml_string_length(text));
     return caml_call2(Base_List[40], _ef_, _ee_);
    }
    var
     char_equal = get_char_equal(case_sensitive),
     matched_chars = [0, 0],
     k = caml_ml_string_length(pattern),
     n = caml_ml_string_length(text),
     found = [0, 0],
     _eg_ = 0;
    if(n >= 0){
     var j = _eg_;
     for(;;){
      if(matched_chars[1] === k){
       var _eh_ = found[1];
       found[1] = [0, caml_call2(Base_Import[93], j, k), _eh_];
       matched_chars[1] =
        may_overlap ? kmp_array[1 + caml_call2(Base_Import[93], k, 1)] : 0;
      }
      if(j < n){
       var next_text_char = caml_string_unsafe_get(text, j);
       matched_chars[1] =
        kmp_internal_loop
         (matched_chars[1], next_text_char, pattern, kmp_array, char_equal);
      }
      var _ei_ = j + 1 | 0;
      if(n === j) break;
      var j = _ei_;
     }
    }
    return caml_call1(Base_List[63], found[1]);
   }
   function replace_first(pos, t, s, with$0){
    var match = index$0(pos, t, s);
    if(! match) return s;
    var
     i = match[1],
     len_s = caml_ml_string_length(s),
     len_t = caml_ml_string_length(t[1]),
     len_with = caml_ml_string_length(with$0),
     _d__ = caml_call2(Base_Import[91], len_s, len_with),
     _d$_ = caml_call2(Base_Import[93], _d__, len_t),
     dst = caml_call1(Base_Bytes0[7], _d$_);
    caml_call5(Base_Bytes0[4], s, 0, dst, 0, i);
    caml_call5(Base_Bytes0[4], with$0, 0, dst, i, len_with);
    var
     _ea_ = caml_call2(Base_Import[93], len_s, i),
     _eb_ = caml_call2(Base_Import[93], _ea_, len_t),
     _ec_ = caml_call2(Base_Import[91], i, len_with),
     _ed_ = caml_call2(Base_Import[91], i, len_t);
    caml_call5(Base_Bytes0[4], s, _ed_, dst, _ec_, _eb_);
    return caml_string_of_bytes(dst);
   }
   function replace_all(t, s, with$0){
    var matches = index_all(t, 0, s);
    if(! matches) return s;
    var
     len_s = caml_ml_string_length(s),
     len_t = caml_ml_string_length(t[1]),
     len_with = caml_ml_string_length(with$0),
     num_matches = caml_call1(Base_List[45], matches),
     _d2_ = caml_call2(Base_Import[93], len_with, len_t),
     _d3_ = caml_call2(Base_Import[88], _d2_, num_matches),
     _d4_ = caml_call2(Base_Import[91], len_s, _d3_),
     dst = caml_call1(Base_Bytes0[7], _d4_),
     next_dst_pos = [0, 0],
     next_src_pos = [0, 0];
    function _d5_(i){
     var len = caml_call2(Base_Import[93], i, next_src_pos[1]);
     caml_call5(Base_Bytes0[4], s, next_src_pos[1], dst, next_dst_pos[1], len);
     var _d7_ = caml_call2(Base_Import[91], next_dst_pos[1], len);
     caml_call5(Base_Bytes0[4], with$0, 0, dst, _d7_, len_with);
     var _d8_ = caml_call2(Base_Import[91], next_dst_pos[1], len);
     next_dst_pos[1] = caml_call2(Base_Import[91], _d8_, len_with);
     var _d9_ = caml_call2(Base_Import[91], next_src_pos[1], len);
     next_src_pos[1] = caml_call2(Base_Import[91], _d9_, len_t);
     return 0;
    }
    caml_call2(Base_List[19], matches, _d5_);
    var _d6_ = caml_call2(Base_Import[93], len_s, next_src_pos[1]);
    caml_call5(Base_Bytes0[4], s, next_src_pos[1], dst, next_dst_pos[1], _d6_);
    return caml_string_of_bytes(dst);
   }
   function split_on(t, s){
    var
     pattern_len = caml_ml_string_length(t[1]),
     matches = index_all(t, 0, s);
    function _dX_(i, j){
     var
      _d0_ = caml_call2(Base_Import[93], j, i),
      _d1_ = caml_call2(Base_Import[93], _d0_, pattern_len);
     return sub(s, caml_call2(Base_Import[91], i, pattern_len), _d1_);
    }
    var
     _dY_ =
       caml_call2(Base_Import[111], matches, [0, caml_ml_string_length(s), 0]),
     _dZ_ = [0, caml_call1(Base_Import[113], pattern_len), matches];
    return caml_call3(Base_List[98], _dZ_, _dY_, _dX_);
   }
   function equal_local(a_003, b_004){
    if(a_003 === b_004) return 1;
    var _dU_ = caml_call2(Base_Import[274], a_003[1], b_004[1]);
    if(_dU_){
     var _dV_ = caml_call2(Base_Import[267], a_003[2], b_004[2]);
     if(_dV_)
      return caml_call3
              (Base_Import[277], Base_Import[270], a_003[3], b_004[3]);
     var _dW_ = _dV_;
    }
    else
     var _dW_ = _dU_;
    return _dW_;
   }
   function equal(a, b){return equal_local(a, b);}
   function sexp_of_t$1(param){
    var
     kmp_array_012 = param[3],
     case_sensitive_010 = param[2],
     pattern_008 = param[1],
     arg_013 = caml_call2(Base_Import[150], Base_Import[139], kmp_array_012),
     bnds_007 = [0, [1, [0, _g_, [0, arg_013, 0]]], 0],
     arg_011 = caml_call1(Base_Import[135], case_sensitive_010),
     bnds_007$0 = [0, [1, [0, _h_, [0, arg_011, 0]]], bnds_007],
     arg_009 = caml_call1(Base_Import[136], pattern_008),
     bnds_007$1 = [0, [1, [0, _i_, [0, arg_009, 0]]], bnds_007$0];
    return [1, bnds_007$1];
   }
   function representation(_dT_){return _dT_;}
   function substr_index_gen(case_sensitive, pos, t, pattern){return index$0(pos, create(pattern, case_sensitive), t);
   }
   function substr_index_exn_gen(case_sensitive, pos, t, pattern){return index_exn$0(pos, create(pattern, case_sensitive), t);
   }
   function substr_index_all_gen(case_sensitive, t, may_overlap, pattern){return index_all(create(pattern, case_sensitive), may_overlap, t);
   }
   function substr_replace_first_gen(case_sensitive, pos, t, pattern){
    var _dR_ = create(pattern, case_sensitive);
    return function(_dS_){return replace_first(pos, _dR_, t, _dS_);};
   }
   function substr_replace_all_gen(case_sensitive, t, pattern){
    var _dP_ = create(pattern, case_sensitive);
    return function(_dQ_){return replace_all(_dP_, t, _dQ_);};
   }
   function is_substring_gen(case_sensitive, t, substring){
    var _dO_ = substr_index_gen(case_sensitive, 0, t, substring);
    return caml_call1(Base_Option[53], _dO_);
   }
   var _j_ = 1;
   function substr_index(_dL_, _dM_, _dN_){
    return substr_index_gen(_j_, _dL_, _dM_, _dN_);
   }
   var _k_ = 1;
   function substr_index_exn(_dI_, _dJ_, _dK_){
    return substr_index_exn_gen(_k_, _dI_, _dJ_, _dK_);
   }
   var _l_ = 1;
   function substr_index_all(_dF_, _dG_, _dH_){
    return substr_index_all_gen(_l_, _dF_, _dG_, _dH_);
   }
   var _m_ = 1;
   function substr_replace_first(_dC_, _dD_, _dE_){
    return substr_replace_first_gen(_m_, _dC_, _dD_, _dE_);
   }
   var _n_ = 1;
   function substr_replace_all(_dA_, _dB_){
    return substr_replace_all_gen(_n_, _dA_, _dB_);
   }
   var _o_ = 1;
   function is_substring(_dy_, _dz_){
    return is_substring_gen(_o_, _dy_, _dz_);
   }
   function is_substring_at_gen(str, str_pos$1, sub, char_equal){
    var
     str_len = caml_ml_string_length(str),
     sub_len = caml_ml_string_length(sub),
     _dv_ = str_pos$1 < 0 ? 1 : 0,
     _dw_ = _dv_ || (str_len < str_pos$1 ? 1 : 0);
    if(_dw_) caml_call4(invalid_argf, _p_, str_pos$1, str_len, 0);
    var
     _dx_ = caml_call2(Base_Import[91], str_pos$1, sub_len) <= str_len ? 1 : 0;
    if(! _dx_) return _dx_;
    var str_pos = str_pos$1, sub_pos = 0;
    for(;;){
     if(sub_pos === sub_len) return 1;
     if
      (!
       caml_call2
        (char_equal,
         caml_string_unsafe_get(str, str_pos),
         caml_string_unsafe_get(sub, sub_pos)))
      return 0;
     var
      sub_pos$0 = caml_call2(Base_Import[91], sub_pos, 1),
      str_pos$0 = caml_call2(Base_Import[91], str_pos, 1),
      str_pos = str_pos$0,
      sub_pos = sub_pos$0;
    }
   }
   function is_suffix_gen(string, suffix, char_equal){
    var
     string_len = caml_ml_string_length(string),
     suffix_len = caml_ml_string_length(suffix),
     _du_ = suffix_len <= string_len ? 1 : 0;
    return _du_
            ? is_substring_at_gen
              (string,
               caml_call2(Base_Import[93], string_len, suffix_len),
               suffix,
               char_equal)
            : _du_;
   }
   function is_prefix_gen(string, prefix, char_equal){
    var
     string_len = caml_ml_string_length(string),
     prefix_len = caml_ml_string_length(prefix),
     _dt_ = prefix_len <= string_len ? 1 : 0;
    return _dt_ ? is_substring_at_gen(string, 0, prefix, char_equal) : _dt_;
   }
   var
    t_of_sexp$0 = Base_Import[160],
    sexp_of_t$2 = Base_Import[136],
    t_sexp_grammar$0 = Base_Import[182];
   function compare_local(string1, string2){
    if(string1 === string2) return 0;
    var
     len2 = caml_ml_string_length(string2),
     len1 = caml_ml_string_length(string1),
     pos = 0;
    for(;;){
     if(pos === len1) return pos === len2 ? 0 : -1;
     if(pos === len2) return 1;
     var
      c2 = caml_string_unsafe_get(string2, pos),
      c1 = caml_string_unsafe_get(string1, pos),
      _dr_ = caml_call1(Base_Char[37], c2),
      _ds_ = caml_call1(Base_Char[37], c1),
      c = caml_call2(Base_Char[17], _ds_, _dr_);
     if(0 !== c) return c;
     var pos$0 = caml_call2(Base_Import[91], pos, 1), pos = pos$0;
    }
   }
   function compare$0(a, b){return compare_local(a, b);}
   function hash_fold_t$0(state, t){
    var
     len = caml_ml_string_length(t),
     state$0 = [0, caml_call2(Base_Import[206], state, len)],
     _do_ = caml_call2(Base_Import[93], len, 1),
     _dn_ = 0;
    if(_do_ >= 0){
     var pos = _dn_;
     for(;;){
      var _dp_ = caml_call1(Base_Char[37], caml_string_unsafe_get(t, pos));
      state$0[1] = caml_call2(Base_Import[205], state$0[1], _dp_);
      var _dq_ = pos + 1 | 0;
      if(_do_ === pos) break;
      var pos = _dq_;
     }
    }
    return state$0[1];
   }
   function hash$0(t){return caml_call3(Base_Hash[14], 0, hash_fold_t$0, t);}
   function is_suffix(s, suffix){
    return is_suffix_gen(s, suffix, Base_Char[55][12]);
   }
   function is_prefix(s, prefix){
    return is_prefix_gen(s, prefix, Base_Char[55][12]);
   }
   var _q_ = 0;
   function substr_index$0(_dk_, _dl_, _dm_){
    return substr_index_gen(_q_, _dk_, _dl_, _dm_);
   }
   var _r_ = 0;
   function substr_index_exn$0(_dh_, _di_, _dj_){
    return substr_index_exn_gen(_r_, _dh_, _di_, _dj_);
   }
   var _s_ = 0;
   function substr_index_all$0(_de_, _df_, _dg_){
    return substr_index_all_gen(_s_, _de_, _df_, _dg_);
   }
   var _t_ = 0;
   function substr_replace_first$0(_db_, _dc_, _dd_){
    return substr_replace_first_gen(_t_, _db_, _dc_, _dd_);
   }
   var _u_ = 0;
   function substr_replace_all$0(_c$_, _da_){
    return substr_replace_all_gen(_u_, _c$_, _da_);
   }
   var _v_ = 0;
   function is_substring$0(_c9_, _c__){
    return is_substring_gen(_v_, _c9_, _c__);
   }
   var _w_ = Base_Char[55][12];
   function is_substring_at(_c6_){
    return function(_c7_){
     return function(_c8_){
      return is_substring_at_gen(_c6_, _c7_, _c8_, _w_);};};
   }
   var
    include$0 = caml_call1(Base_Comparable[11], [0, compare$0, sexp_of_t$2]),
    symbol$0 = include$0[1],
    symbol$1 = include$0[2],
    symbol$2 = include$0[3],
    symbol$3 = include$0[4],
    symbol$4 = include$0[5],
    symbol$5 = include$0[6],
    equal$0 = include$0[7],
    compare$1 = include$0[8],
    min = include$0[9],
    max = include$0[10],
    ascending = include$0[11],
    descending = include$0[12],
    between = include$0[13],
    clamp_exn = include$0[14],
    clamp = include$0[15],
    comparator$0 = include$0[16];
   function of_string(_c5_){return _c5_;}
   function to_string(_c4_){return _c4_;}
   function init(n, f){
    if(n < 0) caml_call3(invalid_argf, _x_, n, 0);
    var
     t = caml_call1(Base_Bytes0[7], n),
     _c2_ = caml_call2(Base_Import[93], n, 1),
     _c1_ = 0;
    if(_c2_ >= 0){
     var i = _c1_;
     for(;;){
      caml_bytes_set(t, i, caml_call1(f, i));
      var _c3_ = i + 1 | 0;
      if(_c2_ === i) break;
      var i = _c3_;
     }
    }
    return caml_string_of_bytes(t);
   }
   function to_list(s){
    var
     i$1 = caml_call2(Base_Import[93], caml_ml_string_length(s), 1),
     acc = 0,
     i = i$1;
    for(;;){
     if(0 > i) return acc;
     var
      i$0 = caml_call2(Base_Import[93], i, 1),
      acc$0 = [0, caml_string_get(s, i), acc],
      acc = acc$0,
      i = i$0;
    }
   }
   function to_list_rev(s){
    var len = caml_ml_string_length(s), acc = 0, i = 0;
    for(;;){
     if(i === len) return acc;
     var
      i$0 = caml_call2(Base_Import[91], i, 1),
      acc$0 = [0, caml_string_get(s, i), acc],
      acc = acc$0,
      i = i$0;
    }
   }
   function rev(t){
    var
     len = caml_ml_string_length(t),
     res = caml_call1(Base_Bytes0[7], len),
     _cY_ = caml_call2(Base_Import[93], len, 1),
     _cX_ = 0;
    if(_cY_ >= 0){
     var i = _cX_;
     for(;;){
      var _cZ_ = caml_call2(Base_Import[93], len, 1);
      caml_bytes_unsafe_set
       (res,
        i,
        caml_string_unsafe_get(t, caml_call2(Base_Import[93], _cZ_, i)));
      var _c0_ = i + 1 | 0;
      if(_cY_ === i) break;
      var i = _c0_;
     }
    }
    return caml_string_of_bytes(res);
   }
   function not_found$1(param){
    throw caml_maybe_attach_backtrace([0, Base_Import[297], _y_], 1);
   }
   function lsplit2_exn(line, delim){
    var
     len = caml_ml_string_length(line),
     _cS_ = 0,
     pos =
       index_from_internal
        (line, len, not_found$1, function(_cW_){return _cW_;}, delim, _cS_),
     _cT_ = caml_call2(Base_Import[93], len, pos),
     _cU_ = caml_call2(Base_Import[93], _cT_, 1),
     _cV_ = sub(line, caml_call2(Base_Import[91], pos, 1), _cU_);
    return [0, sub(line, 0, pos), _cV_];
   }
   function not_found$2(param){
    throw caml_maybe_attach_backtrace([0, Base_Import[297], _z_], 1);
   }
   function rsplit2_exn(line, delim){
    var
     len = caml_ml_string_length(line),
     _cN_ = caml_call2(Base_Import[93], len, 1),
     pos =
       rindex_from_internal
        (line, delim, function(_cR_){return _cR_;}, not_found$2, _cN_),
     _cO_ = caml_call2(Base_Import[93], len, pos),
     _cP_ = caml_call2(Base_Import[93], _cO_, 1),
     _cQ_ = sub(line, caml_call2(Base_Import[91], pos, 1), _cP_);
    return [0, sub(line, 0, pos), _cQ_];
   }
   function lsplit2(line, on){
    try{var _cL_ = [0, lsplit2_exn(line, on)]; return _cL_;}
    catch(_cM_){
     var _cK_ = caml_wrap_exception(_cM_);
     if(_cK_[1] !== Base_Import[297] && _cK_ !== Base_Import[85][8])
      throw caml_maybe_attach_backtrace(_cK_, 0);
     return 0;
    }
   }
   function rsplit2(line, on){
    try{var _cI_ = [0, rsplit2_exn(line, on)]; return _cI_;}
    catch(_cJ_){
     var _cH_ = caml_wrap_exception(_cJ_);
     if(_cH_[1] !== Base_Import[297] && _cH_ !== Base_Import[85][8])
      throw caml_maybe_attach_backtrace(_cH_, 0);
     return 0;
    }
   }
   function char_list_mem(l, c){
    var l$0 = l;
    for(;;){
     if(! l$0) return 0;
     var tl = l$0[2], hd = l$0[1], _cG_ = caml_call2(Base_Char[16], hd, c);
     if(_cG_) return _cG_;
     var l$0 = tl;
    }
   }
   function split_gen(str, on){
    if(552554919 <= on[1])
     var l = on[2], is_delim = function(c){return char_list_mem(l, c);};
    else
     var
      c = on[2],
      is_delim = function(c$0){return caml_call2(Base_Char[16], c$0, c);};
    var
     last_pos = caml_ml_string_length(str),
     pos$1 = caml_call2(Base_Import[93], last_pos, 1),
     acc = 0,
     last_pos$1 = last_pos,
     last_pos$0 = pos$1;
    for(;;){
     if(-1 === last_pos$0) return [0, sub(str, 0, last_pos$1), acc];
     if(is_delim(caml_string_get(str, last_pos$0)))
      var
       pos1 = caml_call2(Base_Import[91], last_pos$0, 1),
       sub_str = sub(str, pos1, caml_call2(Base_Import[93], last_pos$1, pos1)),
       pos = caml_call2(Base_Import[93], last_pos$0, 1),
       acc$0 = [0, sub_str, acc],
       acc = acc$0,
       last_pos$1 = last_pos$0,
       last_pos$0 = pos;
     else
      var
       pos$0 = caml_call2(Base_Import[93], last_pos$0, 1),
       last_pos$0 = pos$0;
    }
   }
   function split(str, on){return split_gen(str, [0, -1044422954, on]);}
   function split_on_chars(str, chars){
    return split_gen(str, [0, 552554919, chars]);
   }
   function is_suffix$0(s, suffix){
    return is_suffix_gen(s, suffix, Base_Char[16]);
   }
   function is_prefix$0(s, prefix){
    return is_prefix_gen(s, prefix, Base_Char[16]);
   }
   function is_substring_at$0(s, pos, substring){
    return is_substring_at_gen(s, pos, substring, Base_Char[16]);
   }
   function wrap_sub_n(t, n, name, pos, len, on_error){
    if(0 <= n)
     try{var _cD_ = sub(t, pos, len); return _cD_;}
     catch(_cF_){return on_error;}
    var _cE_ = caml_call2(symbol, name, cst_expecting_nonnegative_argu);
    return caml_call1(Base_Import[126], _cE_);
   }
   function drop_prefix(t, n){
    return wrap_sub_n
            (t,
             n,
             cst_drop_prefix,
             n,
             caml_call2(Base_Import[93], caml_ml_string_length(t), n),
             cst$0);
   }
   function drop_suffix(t, n){
    return wrap_sub_n
            (t,
             n,
             cst_drop_suffix,
             0,
             caml_call2(Base_Import[93], caml_ml_string_length(t), n),
             cst$1);
   }
   function prefix(t, n){return wrap_sub_n(t, n, cst_prefix, 0, n, t);}
   function suffix(t, n){
    return wrap_sub_n
            (t,
             n,
             cst_suffix,
             caml_call2(Base_Import[93], caml_ml_string_length(t), n),
             n,
             t);
   }
   function lfindi(opt, t, f){
    if(opt) var sth = opt[1], pos = sth; else var pos = 0;
    var n = caml_ml_string_length(t), i = pos;
    for(;;){
     if(i === n) return 0;
     if(caml_call2(f, i, caml_string_get(t, i))) return [0, i];
     var i$0 = caml_call2(Base_Import[91], i, 1), i = i$0;
    }
   }
   function find(t, f){
    var match = lfindi(0, t, function(param, c){return caml_call1(f, c);});
    if(! match) return 0;
    var i = match[1];
    return [0, caml_string_get(t, i)];
   }
   function find_map(t, f){
    var n = caml_ml_string_length(t), i = 0;
    for(;;){
     if(i === n) return 0;
     var res = caml_call1(f, caml_string_get(t, i));
     if(res) return res;
     var i$0 = caml_call2(Base_Import[91], i, 1), i = i$0;
    }
   }
   function rfindi(pos, t, f){
    if(pos)
     var pos$0 = pos[1], pos$1 = pos$0;
    else
     var pos$1 = caml_call2(Base_Import[93], caml_ml_string_length(t), 1);
    var i = pos$1;
    for(;;){
     if(0 > i) return 0;
     if(caml_call2(f, i, caml_string_get(t, i))) return [0, i];
     var i$0 = caml_call2(Base_Import[93], i, 1), i = i$0;
    }
   }
   function last_non_drop(drop, t){
    return rfindi(0, t, function(param, c){return 1 - caml_call1(drop, c);});
   }
   function rstrip(opt, t){
    if(opt) var sth = opt[1], drop = sth; else var drop = Base_Char[45];
    var match = last_non_drop(drop, t);
    if(! match) return cst$2;
    var i = match[1];
    return i === caml_call2(Base_Import[93], caml_ml_string_length(t), 1)
            ? t
            : prefix(t, caml_call2(Base_Import[91], i, 1));
   }
   function first_non_drop(drop, t){
    return lfindi(0, t, function(param, c){return 1 - caml_call1(drop, c);});
   }
   function lstrip(opt, t){
    if(opt) var sth = opt[1], drop = sth; else var drop = Base_Char[45];
    var match = first_non_drop(drop, t);
    if(! match) return cst$3;
    var n = match[1];
    return 0 === n ? t : drop_prefix(t, n);
   }
   function strip(opt, t){
    if(opt) var sth = opt[1], drop = sth; else var drop = Base_Char[45];
    var length = caml_ml_string_length(t);
    a:
    if(0 !== length){
     if
      (!
       caml_call1(drop, caml_string_get(t, 0))
       &&
        !
        caml_call1
         (drop, caml_string_get(t, caml_call2(Base_Import[93], length, 1))))
      break a;
     var match = first_non_drop(drop, t);
     if(! match) return cst$4;
     var first = match[1], match$0 = last_non_drop(drop, t);
     if(! match$0)
      throw caml_maybe_attach_backtrace([0, Assert_failure, _A_], 1);
     var last = match$0[1], _cC_ = caml_call2(Base_Import[93], last, first);
     return sub(t, first, caml_call2(Base_Import[91], _cC_, 1));
    }
    return t;
   }
   function mapi(t, f){
    var
     l = caml_ml_string_length(t),
     t$0 = caml_call1(Base_Bytes0[7], l),
     _cA_ = caml_call2(Base_Import[93], l, 1),
     _cz_ = 0;
    if(_cA_ >= 0){
     var i = _cz_;
     for(;;){
      caml_bytes_unsafe_set(t$0, i, caml_call2(f, i, caml_string_get(t, i)));
      var _cB_ = i + 1 | 0;
      if(_cA_ === i) break;
      var i = _cB_;
     }
    }
    return caml_string_of_bytes(t$0);
   }
   function map(t, f){
    var
     l = caml_ml_string_length(t),
     t$0 = caml_call1(Base_Bytes0[7], l),
     _cx_ = caml_call2(Base_Import[93], l, 1),
     _cw_ = 0;
    if(_cx_ >= 0){
     var i = _cw_;
     for(;;){
      caml_bytes_unsafe_set(t$0, i, caml_call1(f, caml_string_get(t, i)));
      var _cy_ = i + 1 | 0;
      if(_cx_ === i) break;
      var i = _cy_;
     }
    }
    return caml_string_of_bytes(t$0);
   }
   function to_array(s){
    function _cv_(i){return caml_string_get(s, i);}
    return caml_call2(Base_Array0[12], caml_ml_string_length(s), _cv_);
   }
   function exists(s, f){
    var len = caml_ml_string_length(s), i = 0;
    for(;;){
     var _cs_ = i < len ? 1 : 0;
     if(_cs_){
      var _ct_ = caml_call1(f, caml_string_get(s, i));
      if(! _ct_){
       var i$0 = caml_call2(Base_Import[91], i, 1), i = i$0;
       continue;
      }
      var _cu_ = _ct_;
     }
     else
      var _cu_ = _cs_;
     return _cu_;
    }
   }
   function for_all(s, f){
    var len = caml_ml_string_length(s), i = 0;
    for(;;){
     var _cp_ = i === len ? 1 : 0;
     if(_cp_)
      var _cq_ = _cp_;
     else{
      var _cr_ = caml_call1(f, caml_string_get(s, i));
      if(_cr_){
       var i$0 = caml_call2(Base_Import[91], i, 1), i = i$0;
       continue;
      }
      var _cq_ = _cr_;
     }
     return _cq_;
    }
   }
   function fold(t, init, f){
    var len = caml_ml_string_length(t), i = 0, ac = init;
    for(;;){
     if(i === len) return ac;
     var
      ac$0 = caml_call2(f, ac, caml_string_get(t, i)),
      i$0 = caml_call2(Base_Import[91], i, 1),
      i = i$0,
      ac = ac$0;
    }
   }
   function foldi(t, init, f){
    var len = caml_ml_string_length(t), i = 0, ac = init;
    for(;;){
     if(i === len) return ac;
     var
      ac$0 = caml_call3(f, i, ac, caml_string_get(t, i)),
      i$0 = caml_call2(Base_Import[91], i, 1),
      i = i$0,
      ac = ac$0;
    }
   }
   function iteri(t, f){
    var
     _cn_ = caml_call2(Base_Import[93], caml_ml_string_length(t), 1),
     _cm_ = 0;
    if(_cn_ >= 0){
     var i = _cm_;
     for(;;){
      caml_call2(f, i, caml_string_unsafe_get(t, i));
      var _co_ = i + 1 | 0;
      if(_cn_ === i) break;
      var i = _co_;
     }
    }
    return 0;
   }
   function count(t, f){return caml_call3(Base_Container[2], fold, t, f);}
   function sum(m, t, f){return caml_call4(Base_Container[7], fold, m, t, f);}
   function min_elt(t){return caml_call2(Base_Container[3], fold, t);}
   function max_elt(t){return caml_call2(Base_Container[4], fold, t);}
   function fold_result(t, init, f){
    return caml_call4(Base_Container[8], fold, init, f, t);
   }
   function fold_until(t, init, f, finish){
    return caml_call5(Base_Container[9], fold, init, f, finish, t);
   }
   function find_mapi(t, f){
    return caml_call3(Base_Indexed_container[7], iteri, t, f);
   }
   function findi(t, f){
    return caml_call3(Base_Indexed_container[6], iteri, t, f);
   }
   function counti(t, f){
    return caml_call3(Base_Indexed_container[3], foldi, t, f);
   }
   function for_alli(t, f){
    return caml_call3(Base_Indexed_container[5], iteri, t, f);
   }
   function existsi(t, f){
    return caml_call3(Base_Indexed_container[4], iteri, t, f);
   }
   function mem(t, c){
    var len = caml_ml_string_length(t), i = 0;
    for(;;){
     var _cj_ = i < len ? 1 : 0;
     if(_cj_){
      var _ck_ = caml_call2(Base_Char[16], c, caml_string_unsafe_get(t, i));
      if(! _ck_){
       var i$0 = caml_call2(Base_Import[91], i, 1), i = i$0;
       continue;
      }
      var _cl_ = _ck_;
     }
     else
      var _cl_ = _cj_;
     return _cl_;
    }
   }
   function tr(target, replacement, s){
    return caml_call2(Base_Char[16], target, replacement)
            ? s
            : mem
               (s, target)
              ? map
                (s,
                 function(c){
                  return caml_call2(Base_Char[16], c, target)
                          ? replacement
                          : c;
                 })
              : s;
   }
   function tr_multi(target, replacement){
    if(is_empty(target))
     return caml_call1(stage, function(_ci_){return _ci_;});
    if(is_empty(replacement))
     return caml_call1(Base_Import[126], cst_tr_multi_replacement_is_em);
    var match = caml_call2(Base_Bytes_tr[1], target, replacement);
    if(! match) return caml_call1(stage, function(_ch_){return _ch_;});
    var tr_map = match[1];
    return caml_call1
            (stage,
             function(s){
              return exists
                       (s,
                        function(c){
                         var
                          _cg_ =
                            caml_string_unsafe_get(tr_map, caml_call1(Base_Char[32], c));
                         return caml_call2(Base_Char[15], c, _cg_);
                        })
                      ? map
                        (s,
                         function(c){
                          return caml_string_unsafe_get
                                  (tr_map, caml_call1(Base_Char[32], c));
                         })
                      : s;
             });
   }
   function concat_array(sep, ar){
    return caml_call2(concat, sep, caml_call1(Base_Array0[16], ar));
   }
   function concat_map(sep, s, f){
    var _cf_ = to_array(s);
    return concat_array(sep, caml_call2(Base_Array0[21], _cf_, f));
   }
   function concat_mapi(sep, t, f){
    var _ce_ = to_array(t);
    return concat_array(sep, caml_call2(Base_Array0[22], _ce_, f));
   }
   function concat_lines(opt, lines$3){
    if(opt) var sth = opt[1], crlf = sth; else var crlf = 0;
    var newline_len = crlf ? 2 : 1, lines = lines$3, sum = 0;
    for(;;){
     if(! lines) break;
     var
      lines$0 = lines[2],
      line = lines[1],
      _cd_ = caml_call2(Base_Import[91], sum, caml_ml_string_length(line)),
      sum$0 = caml_call2(Base_Import[91], _cd_, newline_len),
      lines = lines$0,
      sum = sum$0;
    }
    var buf = caml_call1(Base_Bytes0[7], sum), lines$1 = lines$3, written = 0;
    for(;;){
     if(! lines$1){
      if(written === sum) return caml_string_of_bytes(buf);
      throw caml_maybe_attach_backtrace([0, Assert_failure, _B_], 1);
     }
     var lines$2 = lines$1[2], line$0 = lines$1[1];
     caml_blit_string(line$0, 0, buf, written, caml_ml_string_length(line$0));
     var
      pos =
        caml_call2(Base_Import[91], written, caml_ml_string_length(line$0)),
      pos$0 =
        crlf
         ? (caml_bytes_unsafe_set
            (buf, pos, 13),
           caml_call2(Base_Import[91], pos, 1))
         : pos;
     caml_bytes_unsafe_set(buf, pos$0, 10);
     var
      pos$1 = caml_call2(Base_Import[91], pos$0, 1),
      lines$1 = lines$2,
      written = pos$1;
    }
   }
   function filter(t, f){
    var n = caml_ml_string_length(t), i = [0, 0];
    for(;;){
     if(i[1] >= n) break;
     if(! caml_call1(f, caml_string_get(t, i[1]))) break;
     i[1]++;
    }
    if(i[1] === n) return t;
    var
     _cb_ = caml_call2(Base_Import[93], n, 1),
     out = caml_call1(Base_Bytes0[7], _cb_);
    caml_call5(Base_Bytes0[4], t, 0, out, 0, i[1]);
    var out_pos = [0, i[1]];
    i[1]++;
    for(;;){
     if(i[1] >= n){
      var
       out$0 = caml_string_of_bytes(out),
       _cc_ = caml_call2(Base_Import[93], n, 1);
      return out_pos[1] === _cc_ ? out$0 : sub(out$0, 0, out_pos[1]);
     }
     var c = caml_string_get(t, i[1]);
     if(caml_call1(f, c)){caml_bytes_set(out, out_pos[1], c); out_pos[1]++;}
     i[1]++;
    }
   }
   function filteri(t, f){
    var n = caml_ml_string_length(t), i = [0, 0];
    for(;;){
     if(i[1] >= n) break;
     var _b__ = caml_string_get(t, i[1]);
     if(! caml_call2(f, i[1], _b__)) break;
     i[1]++;
    }
    if(i[1] === n) return t;
    var
     _b$_ = caml_call2(Base_Import[93], n, 1),
     out = caml_call1(Base_Bytes0[7], _b$_);
    caml_call5(Base_Bytes0[4], t, 0, out, 0, i[1]);
    var out_pos = [0, i[1]];
    i[1]++;
    for(;;){
     if(i[1] >= n){
      var
       out$0 = caml_string_of_bytes(out),
       _ca_ = caml_call2(Base_Import[93], n, 1);
      return out_pos[1] === _ca_ ? out$0 : sub(out$0, 0, out_pos[1]);
     }
     var c = caml_string_get(t, i[1]);
     if(caml_call2(f, i[1], c)){
      caml_bytes_set(out, out_pos[1], c);
      out_pos[1]++;
     }
     i[1]++;
    }
   }
   function chop_prefix(s, prefix){
    return is_prefix$0(s, prefix)
            ? [0, drop_prefix(s, caml_ml_string_length(prefix))]
            : 0;
   }
   function chop_prefix_if_exists(s, prefix){
    return is_prefix$0(s, prefix)
            ? drop_prefix(s, caml_ml_string_length(prefix))
            : s;
   }
   function chop_prefix_exn(s, prefix){
    var match = chop_prefix(s, prefix);
    if(! match) return caml_call4(invalid_argf, _C_, s, prefix, 0);
    var str = match[1];
    return str;
   }
   function chop_suffix(s, suffix){
    return is_suffix$0(s, suffix)
            ? [0, drop_suffix(s, caml_ml_string_length(suffix))]
            : 0;
   }
   function chop_suffix_if_exists(s, suffix){
    return is_suffix$0(s, suffix)
            ? drop_suffix(s, caml_ml_string_length(suffix))
            : s;
   }
   function chop_suffix_exn(s, suffix){
    var match = chop_suffix(s, suffix);
    if(! match) return caml_call4(invalid_argf, _D_, s, suffix, 0);
    var str = match[1];
    return str;
   }
   function shorter(a, b){
    return caml_ml_string_length(a) <= caml_ml_string_length(b) ? a : b;
   }
   function shortest(list){
    if(! list) return cst$5;
    var rest = list[2], first = list[1];
    return caml_call3(Base_List[20], rest, first, shorter);
   }
   function pos_from_left(param, i){return i;}
   function pos_from_right(t, i){
    var _b9_ = caml_call2(Base_Import[93], caml_ml_string_length(t), i);
    return caml_call2(Base_Import[93], _b9_, 1);
   }
   function common_generic2_length_loop(a, b, get_pos, max_len, len_so_far){
    var len_so_far$0 = len_so_far;
    for(;;){
     if(max_len <= len_so_far$0) return max_len;
     var
      _b7_ = caml_string_unsafe_get(b, caml_call2(get_pos, b, len_so_far$0)),
      _b8_ = caml_string_unsafe_get(a, caml_call2(get_pos, a, len_so_far$0));
     if(! caml_call2(Base_Char[16], _b8_, _b7_)) return len_so_far$0;
     var
      len_so_far$1 = caml_call2(Base_Import[91], len_so_far$0, 1),
      len_so_far$0 = len_so_far$1;
    }
   }
   function common_generic2_length(a, b, get_pos){
    var
     max_len =
       caml_call2
        (Base_Import[101], caml_ml_string_length(a), caml_ml_string_length(b));
    return common_generic2_length_loop(a, b, get_pos, max_len, 0);
   }
   function common_generic_length_loop(first, list, get_pos, max_len){
    var first$0 = first, list$0 = list, max_len$0 = max_len;
    for(;;){
     if(! list$0) return max_len$0;
     var
      rest = list$0[2],
      second = list$0[1],
      max_len$1 =
        common_generic2_length_loop(first$0, second, get_pos, max_len$0, 0),
      first$0 = second,
      list$0 = rest,
      max_len$0 = max_len$1;
    }
   }
   function common_generic_length(list, get_pos){
    if(! list) return 0;
    var
     rest = list[2],
     first = list[1],
     max_len = caml_ml_string_length(shortest(list));
    return common_generic_length_loop(first, rest, get_pos, max_len);
   }
   function common_generic2(a, b, get_pos, take){
    var len = common_generic2_length(a, b, get_pos);
    return caml_call2(take, shorter(a, b), len);
   }
   function common_generic(list, get_pos, take){
    if(! list) return cst$7;
    var
     rest = list[2],
     first = list[1],
     s = shortest(list),
     max_len = caml_ml_string_length(s);
    if(0 === max_len) return cst$6;
    var len = common_generic_length_loop(first, rest, get_pos, max_len);
    return caml_call2(take, s, len);
   }
   function common_prefix(list){
    return common_generic(list, pos_from_left, prefix);
   }
   function common_suffix(list){
    return common_generic(list, pos_from_right, suffix);
   }
   function common_prefix2(a, b){
    return common_generic2(a, b, pos_from_left, prefix);
   }
   function common_suffix2(a, b){
    return common_generic2(a, b, pos_from_right, suffix);
   }
   function common_prefix_length(list){
    return common_generic_length(list, pos_from_left);
   }
   function common_suffix_length(list){
    return common_generic_length(list, pos_from_right);
   }
   function common_prefix2_length(a, b){
    return common_generic2_length(a, b, pos_from_left);
   }
   function common_suffix2_length(a, b){
    return common_generic2_length(a, b, pos_from_right);
   }
   function pp(ppf, string){
    return caml_call3(Stdlib_Format[137], ppf, _E_, string);
   }
   function of_char(c){return caml_call2(make, 1, c);}
   function of_char_list(l){
    var
     _b5_ = caml_call1(Base_List[45], l),
     t = caml_call1(Base_Bytes0[7], _b5_);
    function _b6_(i, c){return caml_bytes_set(t, i, c);}
    caml_call2(Base_List[34], l, _b6_);
    return caml_string_of_bytes(t);
   }
   function of_array(a){
    return init
            (a.length - 1,
             function(_b4_){return caml_check_bound(a, _b4_)[1 + _b4_];});
   }
   function to_sequence(t){
    var len = caml_ml_string_length(t);
    function _b3_(pos){
     return len <= pos
             ? 0
             : [1,
               caml_string_unsafe_get(t, pos),
               caml_call2(Base_Import[91], pos, 1)];
    }
    return caml_call2(Base_Sequence[44], 0, _b3_);
   }
   function of_sequence(s){
    return of_char_list(caml_call1(Base_Sequence[20], s));
   }
   function pad_right(opt, s, len){
    if(opt) var sth = opt[1], char$0 = sth; else var char$0 = 32;
    var src_len = caml_ml_string_length(s);
    if(len <= src_len) return s;
    var res = caml_call1(Base_Bytes0[7], len);
    caml_call5(Base_Bytes0[4], s, 0, res, 0, src_len);
    var _b2_ = caml_call2(Base_Import[93], len, src_len);
    caml_call4(Base_Bytes0[15], res, src_len, _b2_, char$0);
    return caml_string_of_bytes(res);
   }
   function pad_left(opt, s, len){
    if(opt) var sth = opt[1], char$0 = sth; else var char$0 = 32;
    var src_len = caml_ml_string_length(s);
    if(len <= src_len) return s;
    var
     res = caml_call1(Base_Bytes0[7], len),
     _b0_ = caml_call2(Base_Import[93], len, src_len);
    caml_call5(Base_Bytes0[4], s, 0, res, _b0_, src_len);
    var _b1_ = caml_call2(Base_Import[93], len, src_len);
    caml_call4(Base_Bytes0[15], res, 0, _b1_, char$0);
    return caml_string_of_bytes(res);
   }
   function local_copy_prefix(src, prefix_len, buffer_len){
    var dst = caml_call1(Base_Bytes0[14], buffer_len);
    caml_blit_string(src, 0, dst, 0, prefix_len);
    return dst;
   }
   function local_copy_to_string(buf, pos){
    var str = caml_string_of_bytes(buf);
    return unsafe_sub(str, 0, pos);
   }
   function filter_mapi(src, f){
    var src_len = caml_ml_string_length(src);
    a:
    {
     var pos = 0;
     for(;;){
      if(pos === src_len) return src;
      var
       c1 = caml_string_unsafe_get(src, pos),
       src_pos$0 = caml_call1(Base_Int0[8], pos),
       option = caml_call2(f, pos, c1);
      if(! option) break a;
      var c2 = option[1];
      if(! caml_call2(Base_Char[16], c1, c2)) break;
      var pos = src_pos$0;
     }
    }
    var copy = local_copy_prefix(src, pos, src_len);
    if(option){
     var c$0 = option[1];
     caml_bytes_unsafe_set(copy, pos, c$0);
     var dst_pos$0 = src_pos$0;
    }
    else
     var dst_pos$0 = pos;
    var
     dst_pos = [0, dst_pos$0],
     _bY_ = caml_call2(Base_Import[93], src_len, 1);
    if(_bY_ >= src_pos$0){
     var src_pos = src_pos$0;
     for(;;){
      var
       match = caml_call2(f, src_pos, caml_string_unsafe_get(src, src_pos));
      if(match){
       var c = match[1];
       caml_bytes_unsafe_set(copy, dst_pos[1], c);
       dst_pos[1]++;
      }
      var _bZ_ = src_pos + 1 | 0;
      if(_bY_ === src_pos) break;
      var src_pos = _bZ_;
     }
    }
    return local_copy_to_string(copy, dst_pos[1]);
   }
   function filter_map(t, f){
    return filter_mapi(t, function(param, c){return caml_call1(f, c);});
   }
   function partition_map_difference
   (src, f, len, src_pos$0, fst_pos$0, snd_pos$0, either){
    var
     fsts = local_copy_prefix(src, fst_pos$0, len),
     snds = local_copy_prefix(src, snd_pos$0, len);
    if(0 === either[0]){
     var c$1 = either[1];
     caml_bytes_unsafe_set(fsts, fst_pos$0, c$1);
     var
      snd_pos$1 = snd_pos$0,
      fst_pos$1 = caml_call2(Base_Import[91], fst_pos$0, 1);
    }
    else{
     var c$2 = either[1];
     caml_bytes_unsafe_set(snds, snd_pos$0, c$2);
     var
      snd_pos$2 = caml_call2(Base_Import[91], snd_pos$0, 1),
      snd_pos$1 = snd_pos$2,
      fst_pos$1 = fst_pos$0;
    }
    var
     src_pos$1 = caml_call2(Base_Import[91], src_pos$0, 1),
     fst_pos = [0, fst_pos$1],
     snd_pos = [0, snd_pos$1],
     _bV_ = caml_call2(Base_Import[93], len, 1);
    if(_bV_ >= src_pos$1){
     var src_pos = src_pos$1;
     for(;;){
      var match = caml_call1(f, caml_string_unsafe_get(src, src_pos));
      if(0 === match[0]){
       var c = match[1];
       caml_bytes_unsafe_set(fsts, fst_pos[1], c);
       fst_pos[1]++;
      }
      else{
       var c$0 = match[1];
       caml_bytes_unsafe_set(snds, snd_pos[1], c$0);
       snd_pos[1]++;
      }
      var _bX_ = src_pos + 1 | 0;
      if(_bV_ === src_pos) break;
      var src_pos = _bX_;
     }
    }
    var _bW_ = local_copy_to_string(snds, snd_pos[1]);
    return [0, local_copy_to_string(fsts, fst_pos[1]), _bW_];
   }
   function partition_map(src, f){
    var len = caml_ml_string_length(src);
    if(0 === len) return _F_;
    var c1$1 = caml_string_unsafe_get(src, 0), either$1 = caml_call1(f, c1$1);
    if(0 === either$1[0]){
     var c2$1 = either$1[1];
     if(caml_call2(Base_Char[16], c1$1, c2$1)){
      var pos = 1;
      for(;;){
       if(pos === len) return [0, src, cst$8];
       var c1 = caml_string_unsafe_get(src, pos), either = caml_call1(f, c1);
       if(0 === either[0]){
        var c2 = either[1];
        if(caml_call2(Base_Char[16], c1, c2)){
         var pos$0 = caml_call2(Base_Import[91], pos, 1), pos = pos$0;
         continue;
        }
       }
       return partition_map_difference(src, f, len, pos, pos, 0, either);
      }
     }
    }
    else{
     var c2$2 = either$1[1];
     if(caml_call2(Base_Char[16], c1$1, c2$2)){
      var pos$1 = 1;
      for(;;){
       if(pos$1 === len) return [0, cst$9, src];
       var
        c1$0 = caml_string_unsafe_get(src, pos$1),
        either$0 = caml_call1(f, c1$0);
       if(1 === either$0[0]){
        var c2$0 = either$0[1];
        if(caml_call2(Base_Char[16], c1$0, c2$0)){
         var pos$2 = caml_call2(Base_Import[91], pos$1, 1), pos$1 = pos$2;
         continue;
        }
       }
       return partition_map_difference(src, f, len, pos$1, 0, pos$1, either$0);
      }
     }
    }
    return partition_map_difference(src, f, len, 0, 0, 0, either$1);
   }
   function partition_tf(t, f){
    return partition_map
            (t, function(c){return caml_call1(f, c) ? [0, c] : [1, c];});
   }
   function edit_distance(s1, s2){
    if(caml_ml_string_length(s1) <= caml_ml_string_length(s2))
     var s2$0 = s2, s1$0 = s1;
    else
     var s2$0 = s1, s1$0 = s2;
    var
     _br_ = caml_call2(Base_Import[91], 1, caml_ml_string_length(s1$0)),
     _bs_ = caml_call2(Base_Import[88], 2, _br_),
     table = caml_call2(Base_Array0[5], _bs_, 0);
    function at(i, j){
     var
      _bT_ = caml_call2(Base_Import[122], j, 2),
      _bU_ = caml_call2(Base_Import[88], i, 2);
     return caml_call2(Base_Import[91], _bU_, _bT_);
    }
    var _bu_ = caml_ml_string_length(s1$0), _bt_ = 1;
    if(_bu_ >= 1){
     var i$0 = _bt_;
     for(;;){
      var _bR_ = at(i$0, 0);
      caml_check_bound(table, _bR_)[1 + _bR_] = i$0;
      var _bS_ = i$0 + 1 | 0;
      if(_bu_ === i$0) break;
      var i$0 = _bS_;
     }
    }
    var _bw_ = caml_ml_string_length(s2$0), _bv_ = 1;
    if(_bw_ >= 1){
     var j = _bv_;
     for(;;){
      var _by_ = at(0, j);
      caml_check_bound(table, _by_)[1 + _by_] = j;
      var _bA_ = caml_ml_string_length(s1$0), _bz_ = 1;
      if(_bA_ >= 1){
       var i = _bz_;
       for(;;){
        var
         _bC_ = caml_string_get(s2$0, caml_call2(Base_Import[93], j, 1)),
         _bD_ = caml_string_get(s1$0, caml_call2(Base_Import[93], i, 1));
        if(caml_call2(Base_Char[16], _bD_, _bC_)){
         var
          _bE_ = caml_call2(Base_Import[93], j, 1),
          _bF_ = at(caml_call2(Base_Import[93], i, 1), _bE_),
          _bG_ = caml_check_bound(table, _bF_)[1 + _bF_],
          _bH_ = at(i, j);
         caml_check_bound(table, _bH_)[1 + _bH_] = _bG_;
        }
        else{
         var
          _bJ_ = caml_call2(Base_Import[93], j, 1),
          _bK_ = at(caml_call2(Base_Import[93], i, 1), _bJ_),
          sub = caml_check_bound(table, _bK_)[1 + _bK_],
          _bL_ = at(caml_call2(Base_Import[93], i, 1), j),
          add = caml_check_bound(table, _bL_)[1 + _bL_],
          _bM_ = at(i, caml_call2(Base_Import[93], j, 1)),
          del = caml_check_bound(table, _bM_)[1 + _bM_],
          _bN_ = caml_call2(Base_Import[101], add, del),
          _bO_ = caml_call2(Base_Import[101], sub, _bN_),
          _bP_ = caml_call2(Base_Import[91], 1, _bO_),
          _bQ_ = at(i, j);
         caml_check_bound(table, _bQ_)[1 + _bQ_] = _bP_;
        }
        var _bI_ = i + 1 | 0;
        if(_bA_ === i) break;
        var i = _bI_;
       }
      }
      var _bB_ = j + 1 | 0;
      if(_bw_ === j) break;
      var j = _bB_;
     }
    }
    var _bx_ = at(caml_ml_string_length(s1$0), caml_ml_string_length(s2$0));
    return caml_check_bound(table, _bx_)[1 + _bx_];
   }
   function build_and_validate_escapeworth
   (escapeworthy_map, escape_char, func){
    var
     escapeworthy_map$0 =
       caml_call3
         (Base_List[137][7], escapeworthy_map, Base_Char[16], escape_char)
        ? escapeworthy_map
        : [0, [0, escape_char, escape_char], escapeworthy_map],
     arr = caml_call2(Base_Array0[4], 256, -1),
     vals = caml_call2(Base_Array0[4], 256, 0),
     param = escapeworthy_map$0;
    for(;;){
     if(! param) return [0, arr];
     var l = param[2], match = param[1], c_to = match[2], c_from = match[1];
     if(919809722 <= func)
      var v = c_from, k = caml_call1(Base_Char[32], c_to);
     else
      var k$0 = caml_call1(Base_Char[32], c_from), v = c_to, k = k$0;
     if(-1 !== caml_check_bound(arr, k)[1 + k]) break;
     var _bj_ = caml_call1(Base_Char[32], v);
     if(caml_check_bound(vals, _bj_)[1 + _bj_]) break;
     var _bp_ = caml_call1(Base_Char[32], v);
     caml_check_bound(arr, k)[1 + k] = _bp_;
     var _bq_ = caml_call1(Base_Char[32], v);
     caml_check_bound(vals, _bq_)[1 + _bq_] = 1;
     var param = l;
    }
    var
     _bk_ = caml_call2(Base_Import[147], Base_Import[138], Base_Import[138]),
     _bl_ =
       [0,
        [0,
         cst_escapeworthy_map,
         caml_call2(Base_Import[149], _bk_, escapeworthy_map$0)],
        0],
     _bm_ = [0, [0, cst_c_to, caml_call1(Base_Import[138], c_to)], _bl_],
     _bn_ = [0, [0, cst_c_from, caml_call1(Base_Import[138], c_from)], _bm_],
     _bo_ = caml_call2(Base_Sexp[10], cst_escapeworthy_map_not_one_t, _bn_);
    return caml_call1(Base_Or_error[39], _bo_);
   }
   function escape_gen(escapeworthy_map, escape_char){
    var
     x =
       build_and_validate_escapeworth
        (escapeworthy_map, escape_char, 258914209);
    if(0 !== x[0]) return x;
    var escapeworthy = x[1];
    return [0,
            function(src){
             var
              to_escape_len = [0, 0],
              to_escape =
                foldi
                 (src,
                  0,
                  function(i, acc, c){
                   var
                    _bi_ = caml_call1(Base_Char[32], c),
                    n = caml_check_bound(escapeworthy, _bi_)[1 + _bi_];
                   return -1 === n
                           ? acc
                           : (to_escape_len
                              [1]++,
                             [0, [0, i, caml_call1(Base_Char[35], n)], acc]);
                  });
             if(! to_escape) return src;
             var
              last_idx = caml_ml_string_length(src),
              last_dst_pos =
                caml_call2(Base_Import[91], last_idx, to_escape_len[1]),
              dst = caml_call1(Base_Bytes0[7], last_dst_pos),
              last_idx$0 = last_idx,
              last_dst_pos$0 = last_dst_pos,
              param = to_escape;
             for(;;){
              if(! param){
               caml_call5(Base_Bytes0[4], src, 0, dst, 0, last_idx$0);
               return caml_string_of_bytes(dst);
              }
              var
               to_escape$0 = param[2],
               match = param[1],
               escaped_char = match[2],
               last_idx$1 = match[1],
               _bg_ = caml_call2(Base_Import[93], last_idx$0, last_idx$1),
               len = caml_call2(Base_Import[93], _bg_, 1),
               dst_pos = caml_call2(Base_Import[93], last_dst_pos$0, len),
               _bh_ = caml_call2(Base_Import[91], last_idx$1, 1);
              caml_call5(Base_Bytes0[4], src, _bh_, dst, dst_pos, len);
              var last_dst_pos$1 = caml_call2(Base_Import[93], dst_pos, 2);
              caml_bytes_set(dst, last_dst_pos$1, escape_char);
              caml_bytes_set
               (dst,
                caml_call2(Base_Import[91], last_dst_pos$1, 1),
                escaped_char);
              var
               last_idx$0 = last_idx$1,
               last_dst_pos$0 = last_dst_pos$1,
               param = to_escape$0;
             }
            }];
   }
   function escape_gen_exn(escapeworthy_map, escape_char){
    var _bf_ = escape_gen(escapeworthy_map, escape_char);
    return caml_call1(stage, caml_call1(Base_Or_error[34], _bf_));
   }
   function escape(escapeworthy, escape_char){
    var
     _bd_ = caml_call2(Base_List[126], escapeworthy, Base_Char[17]),
     _be_ = Base_List[53],
     escapeworthy_map = caml_call2(_be_, _bd_, function(c){return [0, c, c];});
    return escape_gen_exn(escapeworthy_map, escape_char);
   }
   function unescape_gen(escapeworthy_map, escape_char){
    var
     x =
       build_and_validate_escapeworth
        (escapeworthy_map, escape_char, 919809722);
    if(0 !== x[0]) return x;
    var escapeworthy = x[1];
    return [0,
            function(src){
             var i = 0, status = -512962225, to_unescape = 0;
             for(;;){
              if(caml_ml_string_length(src) <= i) break;
              if(-512962225 <= status)
               var
                _a7_ = caml_string_get(src, i),
                status$0 =
                  caml_call2(Base_Char[16], _a7_, escape_char)
                   ? -767030498
                   : -512962225;
              else
               var status$0 = -244189789;
              var
               acc =
                 -512962225 <= status$0 ? to_unescape : [0, i, to_unescape],
               i$0 = caml_call2(Base_Import[91], i, 1),
               i = i$0,
               status = status$0,
               to_unescape = acc;
             }
             if(! to_unescape) return src;
             var
              to_unescape$0 = to_unescape[2],
              idx = to_unescape[1],
              _a8_ = caml_call1(Base_List[45], to_unescape),
              _a9_ =
                caml_call2(Base_Import[93], caml_ml_string_length(src), _a8_),
              dst = caml_call1(Base_Bytes0[7], _a9_);
             function loop(last_idx, last_dst_pos, param){
              var
               last_idx$0 = last_idx,
               last_dst_pos$0 = last_dst_pos,
               param$0 = param;
              for(;;){
               if(! param$0)
                return caml_call5(Base_Bytes0[4], src, 0, dst, 0, last_idx$0);
               var
                to_unescape = param$0[2],
                last_idx$1 = param$0[1],
                _a__ = caml_call2(Base_Import[93], last_idx$0, last_idx$1),
                len = caml_call2(Base_Import[93], _a__, 2),
                dst_pos = caml_call2(Base_Import[93], last_dst_pos$0, len),
                _a$_ = caml_call2(Base_Import[91], last_idx$1, 2);
               caml_call5(Base_Bytes0[4], src, _a$_, dst, dst_pos, len);
               var
                last_dst_pos$1 = caml_call2(Base_Import[93], dst_pos, 1),
                _ba_ =
                  caml_string_get
                   (src, caml_call2(Base_Import[91], last_idx$1, 1)),
                _bb_ = caml_call1(Base_Char[32], _ba_),
                n = caml_check_bound(escapeworthy, _bb_)[1 + _bb_],
                _bc_ =
                  -1 === n
                   ? caml_string_get
                     (src, caml_call2(Base_Import[91], last_idx$1, 1))
                   : caml_call1(Base_Char[35], n);
               caml_bytes_set(dst, last_dst_pos$1, _bc_);
               var
                last_idx$0 = last_idx$1,
                last_dst_pos$0 = last_dst_pos$1,
                param$0 = to_unescape;
              }
             }
             if
              (idx
               < caml_call2(Base_Import[93], caml_ml_string_length(src), 1))
              loop
               (caml_ml_string_length(src),
                caml_ml_bytes_length(dst),
                to_unescape);
             else
              loop
               (caml_call2(Base_Import[93], caml_ml_string_length(src), 1),
                caml_ml_bytes_length(dst),
                to_unescape$0);
             return caml_string_of_bytes(dst);
            }];
   }
   function unescape_gen_exn(escapeworthy_map, escape_char){
    var _a6_ = unescape_gen(escapeworthy_map, escape_char);
    return caml_call1(stage, caml_call1(Base_Or_error[34], _a6_));
   }
   function unescape(escape_char){return unescape_gen_exn(0, escape_char);}
   function preceding_escape_chars(str, escape_char, pos){
    var p$1 = caml_call2(Base_Import[93], pos, 1), p = p$1, cnt = 0;
    for(;;){
     if(0 <= p){
      var _a5_ = caml_string_get(str, p);
      if(! caml_call2(Base_Char[15], _a5_, escape_char)){
       var
        cnt$0 = caml_call2(Base_Import[91], cnt, 1),
        p$0 = caml_call2(Base_Import[93], p, 1),
        p = p$0,
        cnt = cnt$0;
       continue;
      }
     }
     return cnt;
    }
   }
   function update_escape_status(str, escape_char, i, param){
    if(-512962225 > param) return -244189789;
    var _a4_ = caml_string_get(str, i);
    return caml_call2(Base_Char[16], _a4_, escape_char)
            ? -767030498
            : -512962225;
   }
   function escape_status(str, escape_char, pos){
    var
     _a2_ = preceding_escape_chars(str, escape_char, pos),
     odd = 1 === caml_call2(Base_Import[122], _a2_, 2) ? 1 : 0,
     _a3_ = caml_string_get(str, pos),
     match = caml_call2(Base_Char[16], _a3_, escape_char);
    return odd ? -244189789 : match ? -767030498 : -512962225;
   }
   function check_bound(str, pos, function_name){
    var
     _a0_ = caml_ml_string_length(str) <= pos ? 1 : 0,
     _a1_ = _a0_ || (pos < 0 ? 1 : 0);
    return _a1_ ? caml_call3(invalid_argf, _G_, function_name, 0) : _a1_;
   }
   function is_char_escaping(str, escape_char, pos){
    check_bound(str, pos, cst_is_char_escaping);
    return -512962225 <= escape_status(str, escape_char, pos) ? 0 : 1;
   }
   function is_char_escaped(str, escape_char, pos){
    check_bound(str, pos, cst_is_char_escaped);
    return -244189789 <= escape_status(str, escape_char, pos) ? 1 : 0;
   }
   function is_char_literal(str, escape_char, pos){
    check_bound(str, pos, cst_is_char_literal);
    return -512962225 === escape_status(str, escape_char, pos) ? 1 : 0;
   }
   function index_from$0(str, escape_char, pos, char$0){
    check_bound(str, pos, cst_index_from);
    var
     status$1 = escape_status(str, escape_char, pos),
     i = pos,
     status = status$1;
    for(;;){
     if(pos <= i){
      var _aY_ = -512962225 === status ? 1 : 0;
      if(_aY_){
       var _aZ_ = caml_string_get(str, i);
       if(caml_call2(Base_Char[16], _aZ_, char$0)) return [0, i];
      }
     }
     var i$0 = caml_call2(Base_Import[91], i, 1);
     if(caml_ml_string_length(str) <= i$0) return 0;
     var
      status$0 = update_escape_status(str, escape_char, i$0, status),
      i = i$0,
      status = status$0;
    }
   }
   function index_from_exn$0(str, escape_char, pos, char$0){
    var match = index_from$0(str, escape_char, pos, char$0);
    if(match){var pos$0 = match[1]; return pos$0;}
    var
     _aU_ = [0, [0, cst_char, caml_call1(Base_Import[138], char$0)], 0],
     _aV_ = [0, [0, cst_pos, caml_call1(Base_Import[139], pos)], _aU_],
     _aW_ =
       [0,
        [0, cst_escape_char, caml_call1(Base_Import[138], escape_char)],
        _aV_],
     _aX_ = [0, [0, cst_str, caml_call1(sexp_of_t, str)], _aW_];
    return caml_call1
            (raise_s,
             caml_call2(Base_Sexp[10], cst_index_from_exn_not_found, _aX_));
   }
   function index$1(str, escape_char, char$0){
    return index_from$0(str, escape_char, 0, char$0);
   }
   function index_exn$1(str, escape_char, char$0){
    return index_from_exn$0(str, escape_char, 0, char$0);
   }
   function rindex_from$0(str, escape_char, pos, char$0){
    check_bound(str, pos, cst_rindex_from);
    if(caml_call2(Base_Char[16], char$0, escape_char)) return 0;
    var pos$0 = pos;
    for(;;){
     if(0 > pos$0) return 0;
     var escape_chars = preceding_escape_chars(str, escape_char, pos$0);
     if(0 === caml_call2(Base_Import[122], escape_chars, 2)){
      var _aS_ = caml_string_get(str, pos$0);
      if(caml_call2(Base_Char[16], _aS_, char$0)) return [0, pos$0];
     }
     var
      _aT_ = caml_call2(Base_Import[93], pos$0, escape_chars),
      pos$1 = caml_call2(Base_Import[93], _aT_, 1),
      pos$0 = pos$1;
    }
   }
   function rindex_from_exn$0(str, escape_char, pos, char$0){
    var match = rindex_from$0(str, escape_char, pos, char$0);
    if(match){var pos$0 = match[1]; return pos$0;}
    var
     _aO_ = [0, [0, cst_char$0, caml_call1(Base_Import[138], char$0)], 0],
     _aP_ = [0, [0, cst_pos$0, caml_call1(Base_Import[139], pos)], _aO_],
     _aQ_ =
       [0,
        [0, cst_escape_char$0, caml_call1(Base_Import[138], escape_char)],
        _aP_],
     _aR_ = [0, [0, cst_str$0, caml_call1(sexp_of_t, str)], _aQ_];
    return caml_call1
            (raise_s,
             caml_call2(Base_Sexp[10], cst_rindex_from_exn_not_found, _aR_));
   }
   function rindex$0(str, escape_char, char$0){
    return is_empty(str)
            ? 0
            : rindex_from$0
              (str,
               escape_char,
               caml_call2(Base_Import[93], caml_ml_string_length(str), 1),
               char$0);
   }
   function rindex_exn$0(str, escape_char, char$0){
    return rindex_from_exn$0
            (str,
             escape_char,
             caml_call2(Base_Import[93], caml_ml_string_length(str), 1),
             char$0);
   }
   function split_gen$0(str, escape_char, on){
    if(552554919 <= on[1])
     var l = on[2], is_delim = function(c){return char_list_mem(l, c);};
    else
     var
      c = on[2],
      is_delim = function(c$0){return caml_call2(Base_Char[16], c$0, c);};
    var
     len = caml_ml_string_length(str),
     acc = 0,
     status = -512962225,
     last_pos = 0,
     pos = 0;
    for(;;){
     if(pos === len){
      var
       _aM_ =
         [0,
          sub(str, last_pos, caml_call2(Base_Import[93], len, last_pos)),
          acc];
      return caml_call1(Base_List[63], _aM_);
     }
     var
      status$0 = update_escape_status(str, escape_char, pos, status),
      _aN_ = -512962225 === status$0 ? 1 : 0;
     if(_aN_ && is_delim(caml_string_get(str, pos))){
      var
       sub_str =
         sub(str, last_pos, caml_call2(Base_Import[93], pos, last_pos)),
       pos$0 = caml_call2(Base_Import[91], pos, 1),
       last_pos$0 = caml_call2(Base_Import[91], pos, 1),
       acc$0 = [0, sub_str, acc],
       acc = acc$0,
       status = status$0,
       last_pos = last_pos$0,
       pos = pos$0;
      continue;
     }
     var
      pos$1 = caml_call2(Base_Import[91], pos, 1),
      status = status$0,
      pos = pos$1;
    }
   }
   function split$0(str, on){
    var _aK_ = [0, -1044422954, on];
    return function(_aL_){return split_gen$0(str, _aL_, _aK_);};
   }
   function split_on_chars$0(str, chars){
    var _aI_ = [0, 552554919, chars];
    return function(_aJ_){return split_gen$0(str, _aJ_, _aI_);};
   }
   function split_at(str, pos){
    var
     _aF_ = caml_call2(Base_Import[93], caml_ml_string_length(str), pos),
     _aG_ = caml_call2(Base_Import[93], _aF_, 1),
     _aH_ = sub(str, caml_call2(Base_Import[91], pos, 1), _aG_);
    return [0, sub(str, 0, pos), _aH_];
   }
   function lsplit2$0(str, on, escape_char){
    function _aD_(x){return split_at(str, x);}
    var _aE_ = index$1(str, escape_char, on);
    return caml_call2(Base_Option[24], _aE_, _aD_);
   }
   function rsplit2$0(str, on, escape_char){
    function _aB_(x){return split_at(str, x);}
    var _aC_ = rindex$0(str, escape_char, on);
    return caml_call2(Base_Option[24], _aC_, _aB_);
   }
   function lsplit2_exn$0(str, on, escape_char){
    return split_at(str, index_exn$1(str, escape_char, on));
   }
   function rsplit2_exn$0(str, on, escape_char){
    return split_at(str, rindex_exn$0(str, escape_char, on));
   }
   function last_non_drop_literal(drop, escape_char, t){
    return rfindi
            (0,
             t,
             function(i, c){
              var _ay_ = 1 - caml_call1(drop, c);
              if(_ay_)
               var _az_ = _ay_;
              else{
               var _aA_ = is_char_escaping(t, escape_char, i);
               if(! _aA_) return is_char_escaped(t, escape_char, i);
               var _az_ = _aA_;
              }
              return _az_;
             });
   }
   function first_non_drop_literal(drop, escape_char, t){
    return lfindi
            (0,
             t,
             function(i, c){
              var _av_ = 1 - caml_call1(drop, c);
              if(_av_)
               var _aw_ = _av_;
              else{
               var _ax_ = is_char_escaping(t, escape_char, i);
               if(! _ax_) return is_char_escaped(t, escape_char, i);
               var _aw_ = _ax_;
              }
              return _aw_;
             });
   }
   function rstrip_literal(opt, t, escape_char){
    if(opt) var sth = opt[1], drop = sth; else var drop = Base_Char[45];
    var match = last_non_drop_literal(drop, escape_char, t);
    if(! match) return cst$10;
    var i = match[1];
    return i === caml_call2(Base_Import[93], caml_ml_string_length(t), 1)
            ? t
            : prefix(t, caml_call2(Base_Import[91], i, 1));
   }
   function lstrip_literal(opt, t, escape_char){
    if(opt) var sth = opt[1], drop = sth; else var drop = Base_Char[45];
    var match = first_non_drop_literal(drop, escape_char, t);
    if(! match) return cst$11;
    var n = match[1];
    return 0 === n ? t : drop_prefix(t, n);
   }
   function strip_literal(opt, t, escape_char){
    if(opt) var sth = opt[1], drop = sth; else var drop = Base_Char[45];
    var length = caml_ml_string_length(t);
    a:
    if(0 !== length){
     if
      (!
       caml_call1(drop, caml_string_get(t, 0))
       &&
        !
        caml_call1
         (drop, caml_string_get(t, caml_call2(Base_Import[93], length, 1))))
      break a;
     var match = first_non_drop_literal(drop, escape_char, t);
     if(! match) return cst$12;
     var
      first = match[1],
      match$0 = last_non_drop_literal(drop, escape_char, t);
     if(! match$0)
      throw caml_maybe_attach_backtrace([0, Assert_failure, _H_], 1);
     var last = match$0[1], _au_ = caml_call2(Base_Import[93], last, first);
     return sub(t, first, caml_call2(Base_Import[91], _au_, 1));
    }
    return t;
   }
   function between$0(t, low, high){
    var _at_ = caml_call2(Base_Import[109][2], low, t);
    return _at_ ? caml_call2(Base_Import[109][2], t, high) : _at_;
   }
   function clamp_unchecked(t, min, max){
    return caml_call2(Base_Import[109][1], t, min)
            ? min
            : caml_call2(Base_Import[109][2], t, max) ? t : max;
   }
   function clamp_exn$0(t, min, max){
    if(caml_call2(Base_Import[109][2], min, max))
     return clamp_unchecked(t, min, max);
    throw caml_maybe_attach_backtrace([0, Assert_failure, _I_], 1);
   }
   function clamp$0(t, min, max){
    if(! caml_call2(Base_Import[109][5], min, max))
     return [0, clamp_unchecked(t, min, max)];
    var
     _aq_ = [0, [0, cst_max, caml_call1(sexp_of_t, max)], 0],
     _ar_ = [0, [0, cst_min, caml_call1(sexp_of_t, min)], _aq_],
     _as_ = caml_call2(Base_Sexp[10], cst_clamp_requires_min_max, _ar_);
    return caml_call1(Base_Or_error[39], _as_);
   }
   function create$0(opt, pattern){
    if(opt)
     var sth = opt[1], case_sensitive = sth;
    else
     var case_sensitive = 1;
    return create(pattern, case_sensitive);
   }
   function Make_utf(Format){
    var
     codec_name = Format[1],
     is_valid = Format[3],
     raise_get_message =
       [246,
        function(_ap_){
         return caml_call3(Base_Printf[2], _J_, Format[2], Format[1]);
        }];
    function raise_get(t, pos){
     var
      _am_ =
        [0,
         [0, cst$13, [0, t]],
         [0, [0, cst_pos$1, caml_call1(Base_Import[139], pos)], 0]],
      _an_ = runtime.caml_obj_tag(raise_get_message);
     a:
     if(250 === _an_)
      var _ao_ = raise_get_message[1];
     else{
      if(246 !== _an_ && 244 !== _an_){var _ao_ = raise_get_message; break a;}
      var _ao_ = caml_call1(CamlinternalLazy[2], raise_get_message);
     }
     return caml_call1(raise_s, caml_call2(Base_Sexp[10], _ao_, _am_));
    }
    function get(t, byte_pos){
     var decode = caml_call2(Format[5], t, byte_pos);
     return caml_call1(Base_Uchar0[18], decode)
             ? caml_call1(Base_Uchar0[19], decode)
             : raise_get(t, byte_pos);
    }
    function to_string(_al_){return _al_;}
    function of_string_unchecked(_ak_){return _ak_;}
    var
     raise_of_string_message =
       caml_call2
        (concat,
         0,
         [0, Format[2], [0, cst_of_string_invalid, [0, codec_name, 0]]]);
    function raise_of_string(string){
     return caml_call1
             (raise_s,
              caml_call2
               (Base_Sexp[10],
                raise_of_string_message,
                [0, [0, cst$14, [0, string]], 0]));
    }
    function of_string(string){
     return caml_call1(is_valid, string) ? string : raise_of_string(string);
    }
    var
     include = caml_call1(Base_Sexpable[5], [0, of_string, to_string]),
     t_sexp_grammar = include[1],
     t_of_sexp = include[2],
     sexp_of_t = include[3],
     compare = Base_Import[109][9];
    function hash(_aj_){return runtime.Base_hash_string(_aj_);}
    var
     module_name = Format[2],
     include$0 =
       caml_call1
        (Base_Identifiable[1],
         [0,
          compare,
          hash_fold_t,
          hash,
          t_of_sexp,
          sexp_of_t,
          of_string,
          to_string,
          module_name]),
     hash_fold_t$0 = include$0[1],
     hash$0 = include$0[2],
     t_of_sexp$0 = include$0[3],
     sexp_of_t$0 = include$0[4],
     of_string$0 = include$0[5],
     to_string$0 = include$0[6],
     symbol = include$0[7],
     symbol$0 = include$0[8],
     symbol$1 = include$0[9],
     symbol$2 = include$0[10],
     symbol$3 = include$0[11],
     symbol$4 = include$0[12],
     equal = include$0[13],
     compare$0 = include$0[14],
     min = include$0[15],
     max = include$0[16],
     ascending = include$0[17],
     descending = include$0[18],
     between = include$0[19],
     clamp_exn = include$0[20],
     clamp = include$0[21],
     comparator = include$0[22],
     pp = include$0[23],
     hashable = include$0[24];
    function to_sequence(t){
     var len = caml_ml_string_length(t);
     function _ag_(byte_pos){
      if(len <= byte_pos) return 0;
      var
       decode = caml_call2(Format[5], t, byte_pos),
       _ah_ = caml_call1(Base_Uchar0[20], decode),
       _ai_ = caml_call2(Base_Import[91], byte_pos, _ah_);
      return [0, [0, caml_call1(Base_Uchar0[19], decode), _ai_]];
     }
     return caml_call2(Base_Sequence[45], 0, _ag_);
    }
    function fold(t, acc, f){
     var len = caml_ml_string_length(t), byte_pos = 0, acc$0 = acc;
     for(;;){
      if(byte_pos === len) return acc$0;
      var
       decode = caml_call2(Format[5], t, byte_pos),
       acc$1 = caml_call2(f, acc$0, caml_call1(Base_Uchar0[19], decode)),
       _af_ = caml_call1(Base_Uchar0[20], decode),
       byte_pos$0 = caml_call2(Base_Import[91], byte_pos, _af_),
       byte_pos = byte_pos$0,
       acc$0 = acc$1;
     }
    }
    function sanitize(t){
     var
      len =
        fold
         (t,
          0,
          function(pos, uchar){
           var _ae_ = caml_call1(Format[4], uchar);
           return caml_call2(Base_Import[91], pos, _ae_);
          }),
      bytes = caml_call1(Base_Bytes0[7], len),
      pos =
        fold
         (t,
          0,
          function(pos, uchar){
           var _ad_ = caml_call3(Format[6], bytes, pos, uchar);
           return caml_call2(Base_Import[91], pos, _ad_);
          });
     if(pos === len) return caml_string_of_bytes(bytes);
     throw caml_maybe_attach_backtrace([0, Assert_failure, _K_], 1);
    }
    function of_list(uchars){
     function _$_(n, u){
      var _ac_ = caml_call1(Format[4], u);
      return caml_call2(Base_Import[91], n, _ac_);
     }
     var
      len = caml_call3(Base_List[20], uchars, 0, _$_),
      bytes = caml_call1(Base_Bytes0[7], len);
     function _aa_(pos, uchar){
      var _ab_ = caml_call3(Format[6], bytes, pos, uchar);
      return caml_call2(Base_Import[91], pos, _ab_);
     }
     var pos = caml_call3(Base_List[20], uchars, 0, _aa_);
     if(pos === len) return caml_string_of_bytes(bytes);
     throw caml_maybe_attach_backtrace([0, Assert_failure, _L_], 1);
    }
    function of_array(uchars){
     var
      len = [0, 0],
      _S_ = caml_call2(Base_Import[93], uchars.length - 1, 1),
      _R_ = 0;
     if(_S_ >= 0){
      var i$0 = _R_;
      for(;;){
       var
        _Y_ = caml_check_bound(uchars, i$0)[1 + i$0],
        _Z_ = caml_call1(Format[4], _Y_);
       len[1] = caml_call2(Base_Import[91], len[1], _Z_);
       var ___ = i$0 + 1 | 0;
       if(_S_ === i$0) break;
       var i$0 = ___;
      }
     }
     var
      bytes = caml_call1(Base_Bytes0[7], len[1]),
      pos = [0, 0],
      _U_ = caml_call2(Base_Import[93], uchars.length - 1, 1),
      _T_ = 0;
     if(_U_ >= 0){
      var i = _T_;
      for(;;){
       var
        _V_ = caml_check_bound(uchars, i)[1 + i],
        _W_ = caml_call3(Format[6], bytes, pos[1], _V_);
       pos[1] = caml_call2(Base_Import[91], pos[1], _W_);
       var _X_ = i + 1 | 0;
       if(_U_ === i) break;
       var i = _X_;
      }
     }
     if(pos[1] === len[1]) return caml_string_of_bytes(bytes);
     throw caml_maybe_attach_backtrace([0, Assert_failure, _M_], 1);
    }
    function concat$0(list){return caml_call2(concat, _N_, list);}
    function split(t, on){
     var len = caml_ml_string_length(t), until = 0, start$1 = 0;
     for(;;){
      if(until === len)
       return [0,
               sub(t, start$1, caml_call2(Base_Import[93], until, start$1)),
               0];
      var
       uchar = get(t, until),
       _P_ = caml_call1(Format[4], uchar),
       until$0 = caml_call2(Base_Import[91], until, _P_);
      if(caml_call2(Base_Uchar0[11], uchar, on)) break;
      var until = until$0;
     }
     var
      block =
        [0,
         sub(t, start$1, caml_call2(Base_Import[93], until, start$1)),
         24029],
      dst = block,
      offset = 1,
      start = until$0,
      until$1 = until$0;
     for(;;){
      if(until$1 === len){
       dst[1 + offset] =
        [0, sub(t, start, caml_call2(Base_Import[93], until$1, start)), 0];
       return block;
      }
      var
       uchar$0 = get(t, until$1),
       _Q_ = caml_call1(Format[4], uchar$0),
       start$0 = caml_call2(Base_Import[91], until$1, _Q_);
      if(caml_call2(Base_Uchar0[11], uchar$0, on)){
       var
        dst$0 =
          [0,
           sub(t, start, caml_call2(Base_Import[93], until$1, start)),
           24029];
       dst[1 + offset] = dst$0;
       var dst = dst$0, offset = 1, start = start$0, until$1 = start$0;
      }
      else
       var until$1 = start$0;
     }
    }
    var
     C =
       caml_call1
        (Base_Indexed_container[12],
         [0,
          [0, Base_Uchar0[11]],
          of_list,
          of_array,
          concat$0,
          fold,
          -304398144,
          -304398144,
          -304398144,
          -304398144,
          348729712,
          -637740141]),
     append = C[3],
     concat_map = C[8],
     concat_mapi = C[39],
     count = C[20],
     counti = C[32],
     exists = C[18],
     existsi = C[30],
     filter = C[6],
     filter_map = C[7],
     filter_mapi = C[38],
     filteri = C[37],
     find = C[22],
     find_map = C[23],
     find_mapi = C[34],
     findi = C[33],
     fold_result = C[16],
     fold_until = C[17],
     foldi = C[28],
     for_all = C[19],
     for_alli = C[31],
     init = C[35],
     is_empty = C[13],
     iter = C[14],
     iteri = C[29],
     length = C[12],
     map = C[5],
     mapi = C[36],
     max_elt = C[27],
     mem = C[11],
     min_elt = C[26],
     partition_map = C[10],
     partition_tf = C[9],
     sum = C[21],
     to_array = C[25],
     to_list = C[24];
    return [0,
            codec_name,
            is_valid,
            ,
            ,
            get,
            of_string_unchecked,
            ,
            ,
            t_sexp_grammar,
            hash_fold_t$0,
            hash$0,
            t_of_sexp$0,
            sexp_of_t$0,
            of_string$0,
            to_string$0,
            symbol,
            symbol$0,
            symbol$1,
            symbol$2,
            symbol$3,
            symbol$4,
            equal,
            compare$0,
            min,
            max,
            ascending,
            descending,
            between,
            clamp_exn,
            clamp,
            comparator,
            pp,
            hashable,
            to_sequence,
            fold,
            sanitize,
            of_list,
            of_array,
            concat$0,
            split,
            ,
            append,
            concat_map,
            concat_mapi,
            count,
            counti,
            exists,
            existsi,
            filter,
            filter_map,
            filter_mapi,
            filteri,
            find,
            find_map,
            find_mapi,
            findi,
            fold_result,
            fold_until,
            foldi,
            for_all,
            for_alli,
            init,
            is_empty,
            iter,
            iteri,
            length,
            map,
            mapi,
            max_elt,
            mem,
            min_elt,
            partition_map,
            partition_tf,
            sum,
            to_array,
            to_list,
            length];
   }
   var
    byte_length = Base_Uchar0[16],
    set = Base_Bytes0[8],
    Utf8 =
      Make_utf
       ([0,
         codec_name,
         module_name,
         is_valid_utf_8,
         byte_length,
         get_utf_8_uchar,
         set]),
    byte_length$0 = Base_Uchar0[17],
    set$0 = Base_Bytes0[9],
    Utf16le =
      Make_utf
       ([0,
         codec_name$0,
         module_name$0,
         is_valid_utf_16le,
         byte_length$0,
         get_utf_16le_uchar,
         set$0]),
    byte_length$1 = Base_Uchar0[17],
    set$1 = Base_Bytes0[10],
    Utf16be =
      Make_utf
       ([0,
         codec_name$1,
         module_name$1,
         is_valid_utf_16be,
         byte_length$1,
         get_utf_16be_uchar,
         set$1]);
   function Make_utf32(Format){
    function byte_length(param){return 4;}
    var
     codec_name = Format[1],
     module_name = Format[2],
     set = Format[4],
     get_decode_result = Format[3];
    function is_valid(t){
     var len = caml_ml_string_length(t);
     if(0 !== caml_call2(Base_Import[122], len, 4)) return 0;
     var byte_pos = 0;
     for(;;){
      if(byte_pos >= len) return 1;
      var
       result = caml_call2(Format[3], t, byte_pos),
       _O_ = caml_call1(Base_Uchar0[18], result);
      if(! _O_) return _O_;
      var
       byte_pos$0 = caml_call2(Base_Import[91], byte_pos, 4),
       byte_pos = byte_pos$0;
     }
    }
    return Make_utf
            ([0,
              codec_name,
              module_name,
              is_valid,
              byte_length,
              get_decode_result,
              set]);
   }
   var
    set$2 = Base_Bytes0[12],
    Utf32le =
      Make_utf32([0, codec_name$2, module_name$2, get_utf_32le_uchar, set$2]),
    set$3 = Base_Bytes0[13],
    Utf32be =
      Make_utf32([0, codec_name$3, module_name$3, get_utf_32be_uchar, set$3]),
    include$1 = Base_Import[109],
    symbol$6 = include$1[1],
    symbol$7 = include$1[2],
    symbol$8 = include$1[3],
    symbol$9 = include$1[4],
    symbol$10 = include$1[5],
    symbol$11 = include$1[6],
    ascending$0 = include$1[7],
    descending$0 = include$1[8],
    compare$2 = include$1[9],
    compare_local$0 = include$1[10],
    equal$1 = include$1[11],
    equal_local$0 = include$1[12],
    max$0 = include$1[13],
    min$0 = include$1[14],
    Base_String =
      [0,
       globalize,
       t_sexp_grammar,
       sub,
       unsafe_sub,
       subo,
       of_char_list,
       of_array,
       symbol,
       map,
       filter,
       filter_map,
       partition_tf,
       partition_map,
       is_empty,
       iter,
       fold,
       fold_result,
       fold_until,
       exists,
       for_all,
       count,
       sum,
       find,
       find_map,
       to_list,
       to_array,
       min_elt,
       max_elt,
       foldi,
       iteri,
       existsi,
       for_alli,
       counti,
       findi,
       find_mapi,
       init,
       mapi,
       filteri,
       filter_mapi,
       hash_fold_t,
       t_of_sexp,
       sexp_of_t,
       of_string,
       to_string,
       symbol$11,
       symbol$7,
       symbol$9,
       symbol$10,
       symbol$6,
       symbol$8,
       compare$2,
       min$0,
       max$0,
       ascending$0,
       descending$0,
       between$0,
       clamp_exn$0,
       clamp$0,
       comparator,
       pp,
       hashable,
       compare_local$0,
       invariant,
       max_length,
       mem,
       make,
       symbol,
       concat,
       escaped,
       contains,
       uppercase,
       lowercase,
       capitalize,
       uncapitalize,
       [0,
        hash_fold_t$0,
        hash$0,
        t_of_sexp$0,
        sexp_of_t$2,
        t_sexp_grammar$0,
        symbol$0,
        symbol$1,
        symbol$2,
        symbol$3,
        symbol$4,
        symbol$5,
        equal$0,
        compare$1,
        min,
        max,
        ascending,
        descending,
        between,
        clamp_exn,
        clamp,
        comparator$0,
        compare_local,
        is_suffix,
        is_prefix,
        is_substring$0,
        is_substring_at,
        substr_index$0,
        substr_index_exn$0,
        substr_index_all$0,
        substr_replace_first$0,
        substr_replace_all$0],
       index,
       index_exn,
       index_from,
       index_from_exn,
       rindex,
       rindex_exn,
       rindex_from,
       rindex_from_exn,
       to_sequence,
       of_sequence,
       [0,
        sexp_of_t$0,
        create$0,
        pattern,
        case_sensitive,
        matches,
        index$0,
        index_exn$0,
        index_all,
        replace_first,
        replace_all,
        split_on,
        [0, equal, equal_local, sexp_of_t$1, representation]],
       substr_index,
       substr_index_exn,
       substr_index_all,
       substr_replace_first,
       substr_replace_all,
       is_substring,
       is_substring_at$0,
       to_list_rev,
       rev,
       is_suffix$0,
       is_prefix$0,
       lsplit2_exn,
       rsplit2_exn,
       lsplit2,
       rsplit2,
       split,
       split_on_chars,
       split_lines,
       lfindi,
       rfindi,
       lstrip,
       rstrip,
       strip,
       concat_map,
       concat_mapi,
       tr,
       tr_multi,
       chop_suffix_exn,
       chop_prefix_exn,
       chop_suffix,
       chop_prefix,
       chop_suffix_if_exists,
       chop_prefix_if_exists,
       suffix,
       prefix,
       drop_suffix,
       drop_prefix,
       common_suffix,
       common_prefix,
       common_suffix_length,
       common_prefix_length,
       common_suffix2,
       common_prefix2,
       common_suffix2_length,
       common_prefix2_length,
       concat_array,
       concat_lines,
       equal$1,
       equal_local$0,
       of_char,
       of_char_list,
       pad_left,
       pad_right,
       edit_distance,
       [0,
        escape_gen_exn,
        escape_gen,
        escape,
        unescape_gen_exn,
        unescape_gen,
        unescape,
        is_char_escaping,
        is_char_escaped,
        is_char_literal,
        index$1,
        index_exn$1,
        rindex$0,
        rindex_exn$0,
        index_from$0,
        index_from_exn$0,
        rindex_from$0,
        rindex_from_exn$0,
        split$0,
        split_on_chars$0,
        lsplit2$0,
        lsplit2_exn$0,
        rsplit2$0,
        rsplit2_exn$0,
        lstrip_literal,
        rstrip_literal,
        strip_literal],
       [0,
        Utf8[9],
        Utf8[10],
        Utf8[11],
        Utf8[12],
        Utf8[13],
        Utf8[14],
        Utf8[15],
        Utf8[16],
        Utf8[17],
        Utf8[18],
        Utf8[19],
        Utf8[20],
        Utf8[21],
        Utf8[22],
        Utf8[23],
        Utf8[24],
        Utf8[25],
        Utf8[26],
        Utf8[27],
        Utf8[28],
        Utf8[29],
        Utf8[30],
        Utf8[31],
        Utf8[32],
        Utf8[33],
        Utf8[37],
        Utf8[38],
        Utf8[42],
        Utf8[39],
        Utf8[67],
        Utf8[49],
        Utf8[50],
        Utf8[43],
        Utf8[73],
        Utf8[72],
        Utf8[70],
        Utf8[63],
        Utf8[64],
        Utf8[35],
        Utf8[57],
        Utf8[58],
        Utf8[47],
        Utf8[60],
        Utf8[45],
        Utf8[74],
        Utf8[53],
        Utf8[54],
        Utf8[76],
        Utf8[75],
        Utf8[71],
        Utf8[69],
        Utf8[59],
        Utf8[65],
        Utf8[48],
        Utf8[61],
        Utf8[46],
        Utf8[56],
        Utf8[55],
        Utf8[62],
        Utf8[68],
        Utf8[52],
        Utf8[51],
        Utf8[44],
        Utf8[34],
        Utf8[2],
        Utf8[36],
        Utf8[5],
        Utf8[6],
        Utf8[40],
        Utf8[1],
        Utf8[77],
        Utf8[66]],
       [0,
        Utf16le[9],
        Utf16le[10],
        Utf16le[11],
        Utf16le[12],
        Utf16le[13],
        Utf16le[14],
        Utf16le[15],
        Utf16le[16],
        Utf16le[17],
        Utf16le[18],
        Utf16le[19],
        Utf16le[20],
        Utf16le[21],
        Utf16le[22],
        Utf16le[23],
        Utf16le[24],
        Utf16le[25],
        Utf16le[26],
        Utf16le[27],
        Utf16le[28],
        Utf16le[29],
        Utf16le[30],
        Utf16le[31],
        Utf16le[32],
        Utf16le[33],
        Utf16le[37],
        Utf16le[38],
        Utf16le[42],
        Utf16le[39],
        Utf16le[67],
        Utf16le[49],
        Utf16le[50],
        Utf16le[43],
        Utf16le[73],
        Utf16le[72],
        Utf16le[70],
        Utf16le[63],
        Utf16le[64],
        Utf16le[35],
        Utf16le[57],
        Utf16le[58],
        Utf16le[47],
        Utf16le[60],
        Utf16le[45],
        Utf16le[74],
        Utf16le[53],
        Utf16le[54],
        Utf16le[76],
        Utf16le[75],
        Utf16le[71],
        Utf16le[69],
        Utf16le[59],
        Utf16le[65],
        Utf16le[48],
        Utf16le[61],
        Utf16le[46],
        Utf16le[56],
        Utf16le[55],
        Utf16le[62],
        Utf16le[68],
        Utf16le[52],
        Utf16le[51],
        Utf16le[44],
        Utf16le[34],
        Utf16le[2],
        Utf16le[36],
        Utf16le[5],
        Utf16le[6],
        Utf16le[40],
        Utf16le[1],
        Utf16le[77],
        Utf16le[66]],
       [0,
        Utf16be[9],
        Utf16be[10],
        Utf16be[11],
        Utf16be[12],
        Utf16be[13],
        Utf16be[14],
        Utf16be[15],
        Utf16be[16],
        Utf16be[17],
        Utf16be[18],
        Utf16be[19],
        Utf16be[20],
        Utf16be[21],
        Utf16be[22],
        Utf16be[23],
        Utf16be[24],
        Utf16be[25],
        Utf16be[26],
        Utf16be[27],
        Utf16be[28],
        Utf16be[29],
        Utf16be[30],
        Utf16be[31],
        Utf16be[32],
        Utf16be[33],
        Utf16be[37],
        Utf16be[38],
        Utf16be[42],
        Utf16be[39],
        Utf16be[67],
        Utf16be[49],
        Utf16be[50],
        Utf16be[43],
        Utf16be[73],
        Utf16be[72],
        Utf16be[70],
        Utf16be[63],
        Utf16be[64],
        Utf16be[35],
        Utf16be[57],
        Utf16be[58],
        Utf16be[47],
        Utf16be[60],
        Utf16be[45],
        Utf16be[74],
        Utf16be[53],
        Utf16be[54],
        Utf16be[76],
        Utf16be[75],
        Utf16be[71],
        Utf16be[69],
        Utf16be[59],
        Utf16be[65],
        Utf16be[48],
        Utf16be[61],
        Utf16be[46],
        Utf16be[56],
        Utf16be[55],
        Utf16be[62],
        Utf16be[68],
        Utf16be[52],
        Utf16be[51],
        Utf16be[44],
        Utf16be[34],
        Utf16be[2],
        Utf16be[36],
        Utf16be[5],
        Utf16be[6],
        Utf16be[40],
        Utf16be[1],
        Utf16be[77],
        Utf16be[66]],
       [0,
        Utf32le[9],
        Utf32le[10],
        Utf32le[11],
        Utf32le[12],
        Utf32le[13],
        Utf32le[14],
        Utf32le[15],
        Utf32le[16],
        Utf32le[17],
        Utf32le[18],
        Utf32le[19],
        Utf32le[20],
        Utf32le[21],
        Utf32le[22],
        Utf32le[23],
        Utf32le[24],
        Utf32le[25],
        Utf32le[26],
        Utf32le[27],
        Utf32le[28],
        Utf32le[29],
        Utf32le[30],
        Utf32le[31],
        Utf32le[32],
        Utf32le[33],
        Utf32le[37],
        Utf32le[38],
        Utf32le[42],
        Utf32le[39],
        Utf32le[67],
        Utf32le[49],
        Utf32le[50],
        Utf32le[43],
        Utf32le[73],
        Utf32le[72],
        Utf32le[70],
        Utf32le[63],
        Utf32le[64],
        Utf32le[35],
        Utf32le[57],
        Utf32le[58],
        Utf32le[47],
        Utf32le[60],
        Utf32le[45],
        Utf32le[74],
        Utf32le[53],
        Utf32le[54],
        Utf32le[76],
        Utf32le[75],
        Utf32le[71],
        Utf32le[69],
        Utf32le[59],
        Utf32le[65],
        Utf32le[48],
        Utf32le[61],
        Utf32le[46],
        Utf32le[56],
        Utf32le[55],
        Utf32le[62],
        Utf32le[68],
        Utf32le[52],
        Utf32le[51],
        Utf32le[44],
        Utf32le[34],
        Utf32le[2],
        Utf32le[36],
        Utf32le[5],
        Utf32le[6],
        Utf32le[40],
        Utf32le[1],
        Utf32le[77],
        Utf32le[66]],
       [0,
        Utf32be[9],
        Utf32be[10],
        Utf32be[11],
        Utf32be[12],
        Utf32be[13],
        Utf32be[14],
        Utf32be[15],
        Utf32be[16],
        Utf32be[17],
        Utf32be[18],
        Utf32be[19],
        Utf32be[20],
        Utf32be[21],
        Utf32be[22],
        Utf32be[23],
        Utf32be[24],
        Utf32be[25],
        Utf32be[26],
        Utf32be[27],
        Utf32be[28],
        Utf32be[29],
        Utf32be[30],
        Utf32be[31],
        Utf32be[32],
        Utf32be[33],
        Utf32be[37],
        Utf32be[38],
        Utf32be[42],
        Utf32be[39],
        Utf32be[67],
        Utf32be[49],
        Utf32be[50],
        Utf32be[43],
        Utf32be[73],
        Utf32be[72],
        Utf32be[70],
        Utf32be[63],
        Utf32be[64],
        Utf32be[35],
        Utf32be[57],
        Utf32be[58],
        Utf32be[47],
        Utf32be[60],
        Utf32be[45],
        Utf32be[74],
        Utf32be[53],
        Utf32be[54],
        Utf32be[76],
        Utf32be[75],
        Utf32be[71],
        Utf32be[69],
        Utf32be[59],
        Utf32be[65],
        Utf32be[48],
        Utf32be[61],
        Utf32be[46],
        Utf32be[56],
        Utf32be[55],
        Utf32be[62],
        Utf32be[68],
        Utf32be[52],
        Utf32be[51],
        Utf32be[44],
        Utf32be[34],
        Utf32be[2],
        Utf32be[36],
        Utf32be[5],
        Utf32be[6],
        Utf32be[40],
        Utf32be[1],
        Utf32be[77],
        Utf32be[66]]];
   runtime.caml_register_global(114, Base_String, "Base__String");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Bytes
//# unitInfo: Requires: Base__Array0, Base__Blit, Base__Bytes0, Base__Bytes_intf, Base__Bytes_tr, Base__Char, Base__Comparator, Base__Import, Base__List, Base__Or_error, Base__Ordered_collection_common, Base__Pretty_printer, Base__Printf, Base__Sexp, Base__Staged, Stdlib__Format
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_bytes_get = runtime.caml_bytes_get,
    caml_bytes_unsafe_get = runtime.caml_bytes_unsafe_get,
    caml_bytes_unsafe_set = runtime.caml_bytes_unsafe_set,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_bytes_length = runtime.caml_ml_bytes_length,
    caml_ml_string_length = runtime.caml_ml_string_length;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    module_name = "Base.Bytes",
    Base_Char = global_data.Base__Char,
    Base_Import = global_data.Base__Import,
    Base_Ordered_collection_common =
      global_data.Base__Ordered_collection_common,
    Base_Sexp = global_data.Base__Sexp,
    Base_Or_error = global_data.Base__Or_error,
    Assert_failure = global_data.Assert_failure,
    Base_Bytes_tr = global_data.Base__Bytes_tr,
    Base_Array0 = global_data.Base__Array0,
    Base_List = global_data.Base__List,
    Base_Printf = global_data.Base__Printf,
    Stdlib_Format = global_data.Stdlib__Format,
    Base_Staged = global_data.Base__Staged,
    Base_Bytes0 = global_data.Base__Bytes0,
    Base_Blit = global_data.Base__Blit,
    Base_Comparator = global_data.Base__Comparator,
    Base_Pretty_printer = global_data.Base__Pretty_printer,
    stage = Base_Staged[1],
    globalize = Base_Import[288],
    t_of_sexp = Base_Import[161],
    sexp_of_t = Base_Import[137],
    t_sexp_grammar = Base_Import[183],
    max_length = Base_Bytes0[2],
    compare = Base_Bytes0[5],
    copy = Base_Bytes0[6],
    create = Base_Bytes0[7],
    set_uchar_utf_8 = Base_Bytes0[8],
    set_uchar_utf_16le = Base_Bytes0[9],
    set_uchar_utf_16be = Base_Bytes0[10],
    set_uchar_utf_32le = Base_Bytes0[12],
    set_uchar_utf_32be = Base_Bytes0[13],
    create_local = Base_Bytes0[14],
    fill = Base_Bytes0[15],
    make = Base_Bytes0[16],
    map = Base_Bytes0[17],
    mapi = Base_Bytes0[18],
    to_string = Base_Bytes0[20],
    of_string = Base_Bytes0[21],
    cst_max = "max",
    cst_min = "min",
    cst_clamp_requires_min_max = "clamp requires [min <= max]",
    _c_ = [0, "src/bytes.ml", 130, 2],
    cst_tr_multi_replacement_is_th =
      "tr_multi: replacement is the empty string",
    _b_ = [0, [11, "Bytes.init ", [4, 0, 0, 0, 0]], "Bytes.init %d"],
    _a_ = [0, [3, 0, 0], "%S"];
   function pp(fmt, t){
    var _y_ = caml_call1(to_string, t);
    return caml_call3(Stdlib_Format[137], fmt, _a_, _y_);
   }
   function create$0(len){return caml_call1(create, len);}
   var
    To_bytes =
      caml_call1
       (Base_Blit[1],
        [0, caml_ml_bytes_length, create$0, runtime.caml_blit_bytes]),
    blit = To_bytes[1],
    blito = To_bytes[2],
    unsafe_blit = To_bytes[3],
    sub = To_bytes[4],
    subo = To_bytes[5],
    comparator = caml_call1(Base_Comparator[7], [0, compare, sexp_of_t])[1],
    include = caml_call1(Base_Pretty_printer[3], [0, pp, module_name]),
    pp$0 = include[1],
    To_string = caml_call1(caml_call1(Base_Blit[3], [0]), To_bytes);
   function create$1(len){return caml_call1(create, len);}
   var
    length = caml_ml_bytes_length,
    unsafe_blit$0 = runtime.caml_blit_string,
    length$0 = caml_ml_string_length,
    From_string =
      caml_call1
       (caml_call1(Base_Blit[2], [0, length$0]),
        [0, length, create$1, unsafe_blit$0]);
   function invariant(param){return 0;}
   function init(n, f){
    if(n < 0) caml_call3(Base_Printf[7], _b_, n, 0);
    var
     t = caml_call1(create, n),
     _w_ = caml_call2(Base_Import[93], n, 1),
     _v_ = 0;
    if(_w_ >= 0){
     var i = _v_;
     for(;;){
      caml_bytes_unsafe_set(t, i, caml_call1(f, i));
      var _x_ = i + 1 | 0;
      if(_w_ === i) break;
      var i = _x_;
     }
    }
    return t;
   }
   function of_char_list(l){
    var t = caml_call1(create, caml_call1(Base_List[45], l));
    function _u_(i, c){return runtime.caml_bytes_set(t, i, c);}
    caml_call2(Base_List[34], l, _u_);
    return t;
   }
   function to_list(t){
    var
     i$1 = caml_call2(Base_Import[93], caml_ml_bytes_length(t), 1),
     i = i$1,
     acc = 0;
    for(;;){
     if(0 > i) return acc;
     var
      acc$0 = [0, caml_bytes_unsafe_get(t, i), acc],
      i$0 = caml_call2(Base_Import[93], i, 1),
      i = i$0,
      acc = acc$0;
    }
   }
   function to_array(t){
    function _t_(i){return caml_bytes_unsafe_get(t, i);}
    return caml_call2(Base_Array0[12], caml_ml_bytes_length(t), _t_);
   }
   function map$0(t, f){return caml_call2(map, t, f);}
   function mapi$0(t, f){return caml_call2(mapi, t, f);}
   function fold(t, init, f){
    var len = caml_ml_bytes_length(t), pos = 0, acc = init;
    for(;;){
     if(pos === len) return acc;
     var
      acc$0 = caml_call2(f, acc, caml_bytes_unsafe_get(t, pos)),
      pos$0 = caml_call2(Base_Import[91], pos, 1),
      pos = pos$0,
      acc = acc$0;
    }
   }
   function foldi(t, init, f){
    var len = caml_ml_bytes_length(t), pos = 0, acc = init;
    for(;;){
     if(pos === len) return acc;
     var
      acc$0 = caml_call3(f, pos, acc, caml_bytes_unsafe_get(t, pos)),
      pos$0 = caml_call2(Base_Import[91], pos, 1),
      pos = pos$0,
      acc = acc$0;
    }
   }
   function tr(target, replacement, s){
    var
     _r_ = caml_call2(Base_Import[93], caml_ml_bytes_length(s), 1),
     _q_ = 0;
    if(_r_ >= 0){
     var i = _q_;
     for(;;){
      if(caml_call2(Base_Char[16], caml_bytes_unsafe_get(s, i), target))
       caml_bytes_unsafe_set(s, i, replacement);
      var _s_ = i + 1 | 0;
      if(_r_ === i) break;
      var i = _s_;
     }
    }
    return 0;
   }
   function tr_multi(target, replacement){
    if(0 === caml_ml_string_length(target))
     return caml_call1(stage, function(_p_){return 0;});
    if(0 === caml_ml_string_length(replacement))
     return caml_call1(Base_Import[126], cst_tr_multi_replacement_is_th);
    var match = caml_call2(Base_Bytes_tr[1], target, replacement);
    if(! match) return caml_call1(stage, function(_o_){return 0;});
    var tr_map = match[1];
    return caml_call1
            (stage,
             function(s){
              var
               _m_ = caml_call2(Base_Import[93], caml_ml_bytes_length(s), 1),
               _l_ = 0;
              if(_m_ >= 0){
               var i = _l_;
               for(;;){
                caml_bytes_unsafe_set
                 (s,
                  i,
                  runtime.caml_string_unsafe_get
                   (tr_map,
                    caml_call1(Base_Char[32], caml_bytes_unsafe_get(s, i))));
                var _n_ = i + 1 | 0;
                if(_m_ === i) break;
                var i = _n_;
               }
              }
              return 0;
             });
   }
   function between(t, low, high){
    var _k_ = caml_call2(Base_Import[110][2], low, t);
    return _k_ ? caml_call2(Base_Import[110][2], t, high) : _k_;
   }
   function clamp_unchecked(t, min, max){
    return caml_call2(Base_Import[110][1], t, min)
            ? min
            : caml_call2(Base_Import[110][2], t, max) ? t : max;
   }
   function clamp_exn(t, min, max){
    if(caml_call2(Base_Import[110][2], min, max))
     return clamp_unchecked(t, min, max);
    throw caml_maybe_attach_backtrace([0, Assert_failure, _c_], 1);
   }
   function clamp(t, min, max){
    if(! caml_call2(Base_Import[110][5], min, max))
     return [0, clamp_unchecked(t, min, max)];
    var
     _h_ = [0, [0, cst_max, caml_call1(sexp_of_t, max)], 0],
     _i_ = [0, [0, cst_min, caml_call1(sexp_of_t, min)], _h_],
     _j_ = caml_call2(Base_Sexp[10], cst_clamp_requires_min_max, _i_);
    return caml_call1(Base_Or_error[39], _j_);
   }
   function contains(pos, len, t, char$0){
    var
     match =
       caml_call4
        (Base_Ordered_collection_common[1],
         pos,
         len,
         0,
         caml_ml_bytes_length(t)),
     len$0 = match[2],
     pos$0 = match[1],
     last = caml_call2(Base_Import[91], pos$0, len$0),
     i = pos$0;
    for(;;){
     var _d_ = i < last ? 1 : 0;
     if(_d_){
      var
       _e_ = caml_bytes_get(t, i),
       _f_ = caml_call2(Base_Char[16], _e_, char$0);
      if(! _f_){
       var i$0 = caml_call2(Base_Import[91], i, 1), i = i$0;
       continue;
      }
      var _g_ = _f_;
     }
     else
      var _g_ = _d_;
     return _g_;
    }
   }
   var
    Utf8 = [0, set_uchar_utf_8],
    Utf16le = [0, set_uchar_utf_16le],
    Utf16be = [0, set_uchar_utf_16be],
    Utf32le = [0, set_uchar_utf_32le],
    Utf32be = [0, set_uchar_utf_32be],
    include$0 = Base_Import[110],
    symbol = include$0[1],
    symbol$0 = include$0[2],
    symbol$1 = include$0[3],
    symbol$2 = include$0[4],
    symbol$3 = include$0[5],
    symbol$4 = include$0[6],
    ascending = include$0[7],
    descending = include$0[8],
    compare$0 = include$0[9],
    compare_local = include$0[10],
    equal = include$0[11],
    equal_local = include$0[12],
    max = include$0[13],
    min = include$0[14],
    Base_Bytes =
      [0,
       globalize,
       t_of_sexp,
       sexp_of_t,
       t_sexp_grammar,
       blit,
       blito,
       unsafe_blit,
       sub,
       subo,
       symbol$4,
       symbol$0,
       symbol$2,
       symbol$3,
       symbol,
       symbol$1,
       equal,
       compare$0,
       min,
       max,
       ascending,
       descending,
       between,
       clamp_exn,
       clamp,
       comparator,
       compare_local,
       equal_local,
       of_string,
       to_string,
       pp$0,
       invariant,
       To_string,
       From_string,
       create,
       create_local,
       make,
       map$0,
       mapi$0,
       copy,
       init,
       of_char_list,
       caml_bytes_get,
       fill,
       tr,
       tr_multi,
       to_list,
       to_array,
       fold,
       foldi,
       contains,
       max_length,
       Utf8,
       Utf16le,
       Utf16be,
       Utf32le,
       Utf32be];
   runtime.caml_register_global(24, Base_Bytes, "Base__Bytes");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Hex_lexer
//# unitInfo: Requires: Stdlib__Lexing
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, cst = "";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    ocaml_lex_tables =
      [0,
       "\0\0\0\0\x01\0\x01\0\x02\0\x1b\0R\0i\0",
       "\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\x01\0",
       "\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff",
       "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02\0\0\0\0\0\x01\0\x03\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\0\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\0\0\0\0\0\0\x06\0\x04\0\0\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x06\0\x04\0\x05\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\0\0\0\0\0\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x07\0\0\0\x07\0\x07\0\x07\0\x07\0\x07\0\x
       "\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\0\0\x02\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\xff\xff\xff\xff\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\xff\xff\xff\xff\xff\xff\x01\0\x03\0\xff\xff\xff\xff\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\xff\xff\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\0\x03\0\x05\0\xff\xff\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\xff\xff\xff\xff\xff\xff\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x07\0\xff\xff\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff",
       cst,
       cst,
       cst,
       cst,
       cst,
       cst],
    Stdlib_Lexing = global_data.Stdlib__Lexing;
   function parse_hex(lexbuf){
    var ocaml_lex_state = 0;
    for(;;){
     var
      ocaml_lex_state$0 =
        caml_call3
         (Stdlib_Lexing[20], ocaml_lex_tables, ocaml_lex_state, lexbuf);
     if(0 === ocaml_lex_state$0){
      var
       body =
         caml_call3(Stdlib_Lexing[16], lexbuf, lexbuf[5] + 3 | 0, lexbuf[6]);
      return [0, body];
     }
     if(1 === ocaml_lex_state$0){
      var
       body$0 =
         caml_call3(Stdlib_Lexing[16], lexbuf, lexbuf[5] + 2 | 0, lexbuf[6]);
      return [1, body$0];
     }
     caml_call1(lexbuf[1], lexbuf);
     var ocaml_lex_state = ocaml_lex_state$0;
    }
   }
   var Base_Hex_lexer = [0, parse_hex];
   runtime.caml_register_global(2, Base_Hex_lexer, "Base__Hex_lexer");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Int_string_conversions
//# unitInfo: Requires: Base__Bytes, Base__Char, Base__Hex_lexer, Base__Import, Base__Option, Base__Printf, Base__Sexp, Base__Sexpable, Base__String, Stdlib__Lexing
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_0b$1 = "0b",
    caml_bytes_set = runtime.caml_bytes_set,
    caml_string_get = runtime.caml_string_get;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_Import = global_data.Base__Import,
    Base_Char = global_data.Base__Char,
    Base_String = global_data.Base__String,
    Base_Hex_lexer = global_data.Base__Hex_lexer,
    Stdlib_Lexing = global_data.Stdlib__Lexing,
    Base_Option = global_data.Base__Option,
    Base_Printf = global_data.Base__Printf,
    Base_Sexpable = global_data.Base__Sexpable,
    Base_Bytes = global_data.Base__Bytes,
    Base_Sexp = global_data.Base__Sexp,
    cst_0b$0 = cst_0b$1,
    cst_0b = cst_0b$1,
    cst_0 = "0",
    _a_ =
      [0,
       [2, 0, [11, ".of_string: invalid input ", [3, 0, 0]]],
       "%s.of_string: invalid input %S"],
    cst_0x = "-0x",
    cst_0x$0 = "0x";
   function insert_delimiter_every(input, delimiter, chars_per_delimiter){
    var input_length = runtime.caml_ml_string_length(input);
    if(input_length <= chars_per_delimiter) return input;
    var match = caml_string_get(input, 0);
    a:
    {
     if(43 !== match && 45 !== match){var has_sign = 0; break a;}
     var has_sign = 1;
    }
    var
     num_digits =
       has_sign ? caml_call2(Base_Import[93], input_length, 1) : input_length,
     _A_ = caml_call2(Base_Import[93], num_digits, 1),
     num_delimiters = caml_call2(Base_Import[95], _A_, chars_per_delimiter),
     output_length = caml_call2(Base_Import[91], input_length, num_delimiters),
     output = caml_call1(Base_Bytes[34], output_length),
     input_pos = [0, caml_call2(Base_Import[93], input_length, 1)],
     output_pos = [0, caml_call2(Base_Import[93], output_length, 1)],
     num_chars_until_delimiter = [0, chars_per_delimiter],
     first_digit_pos = has_sign ? 1 : 0;
    for(;;){
     if(first_digit_pos > input_pos[1]){
      if(has_sign) caml_bytes_set(output, 0, caml_string_get(input, 0));
      return runtime.caml_string_of_bytes(output);
     }
     if(0 === num_chars_until_delimiter[1]){
      caml_bytes_set(output, output_pos[1], delimiter);
      output_pos[1] += -1;
      num_chars_until_delimiter[1] = chars_per_delimiter;
     }
     var _B_ = caml_string_get(input, input_pos[1]);
     caml_bytes_set(output, output_pos[1], _B_);
     input_pos[1] += -1;
     output_pos[1] += -1;
     num_chars_until_delimiter[1] += -1;
    }
   }
   function insert_delimiter(input, delimiter){
    return insert_delimiter_every(input, delimiter, 3);
   }
   function insert_underscores(input){return insert_delimiter(input, 95);}
   var sexp_of_int_style = Base_Sexp[20];
   function _b_(_j_){
    var
     func = _j_[6],
     hash_fold_t = _j_[5],
     compare_local = _j_[2],
     _k_ = _j_[12],
     _l_ = _j_[13],
     _m_ = _j_[11],
     _n_ = _j_[10],
     _o_ = _j_[9],
     _p_ = _j_[8],
     _q_ = _j_[7],
     _r_ = _j_[4];
    function compare(a, b){return caml_call2(compare_local, a, b);}
    function hash(x){return caml_call1(func, x);}
    function to_string_suffix(t){
     if(caml_call2(_r_, t, _l_))
      var bits = 0;
     else
      var
       _u_ = caml_call1(_q_, t),
       bits = caml_call2(Base_Import[93], _m_, _u_);
     if(0 === bits) return cst_0;
     function _v_(char_index){
      var
       _w_ = caml_call2(Base_Import[93], bits, char_index),
       bit_index = caml_call2(Base_Import[93], _w_, 1),
       bit = caml_call2(_o_, caml_call2(_p_, t, bit_index), _k_),
       _x_ = caml_call1(_n_, bit),
       _y_ = caml_call1(Base_Char[32], 48),
       _z_ = caml_call2(Base_Import[91], _y_, _x_);
      return caml_call1(Base_Char[35], _z_);
     }
     return caml_call2(Base_String[36], bits, _v_);
    }
    function to_string(t){
     var _t_ = to_string_suffix(t);
     return caml_call2(Base_Import[112], cst_0b, _t_);
    }
    function to_string_hum(opt, t){
     if(opt) var sth = opt[1], delimiter = sth; else var delimiter = 95;
     var _s_ = insert_delimiter_every(to_string_suffix(t), delimiter, 4);
     return caml_call2(Base_Import[112], cst_0b$0, _s_);
    }
    function sexp_of_t(t){return [0, to_string_hum(0, t)];}
    return [0,
            [0,
             sexp_of_t,
             compare,
             compare_local,
             hash_fold_t,
             hash,
             to_string,
             to_string_hum]];
   }
   function _c_(I){
    var compare_local = I[2];
    function compare(a, b){return caml_call2(compare_local, a, b);}
    var hash_fold_t = I[3], func = I[4];
    function hash(x){return caml_call1(func, x);}
    var chars_per_delimiter = 4;
    function to_string(delimiter, t){
     if(delimiter)
      var
       delimiter$0 = delimiter[1],
       make_suffix =
         function(t){
          return insert_delimiter_every
                  (caml_call1(I[5], t), delimiter$0, chars_per_delimiter);
         };
     else
      var make_suffix = I[5];
     if(caml_call2(I[8], t, I[7])){
      var _h_ = caml_call1(make_suffix, caml_call1(I[9], t));
      return caml_call2(Base_Import[112], cst_0x, _h_);
     }
     var _i_ = caml_call1(make_suffix, t);
     return caml_call2(Base_Import[112], cst_0x$0, _i_);
    }
    function to_string$0(t){return to_string(0, t);}
    function to_string_hum(opt, t){
     if(opt) var sth = opt[1], delimiter = sth; else var delimiter = 95;
     return to_string([0, delimiter], t);
    }
    function invalid(str){
     return caml_call4(Base_Printf[6], _a_, I[10], str, 0);
    }
    function of_string_with_delimiter(str){
     function _f_(c){return caml_call2(Base_Char[15], c, 95);}
     var _g_ = caml_call2(Base_String[10], str, _f_);
     return caml_call1(I[6], _g_);
    }
    function of_string(str){
     var lex = caml_call2(Stdlib_Lexing[3], 0, str);
     function _d_(param){return caml_call1(Base_Hex_lexer[1], lex);}
     var result = caml_call1(Base_Option[47], _d_);
     if(lex[6] !== lex[3]) return invalid(str);
     if(! result) return invalid(str);
     var match = result[1];
     if(0 === match[0]){
      var body = match[1], _e_ = of_string_with_delimiter(body);
      return caml_call1(I[9], _e_);
     }
     var body$0 = match[1];
     return of_string_with_delimiter(body$0);
    }
    var
     include = caml_call1(Base_Sexpable[5], [0, of_string, to_string$0]),
     t_sexp_grammar = include[1],
     t_of_sexp = include[2],
     sexp_of_t = include[3];
    return [0,
            [0,
             t_of_sexp,
             sexp_of_t,
             t_sexp_grammar,
             compare,
             compare_local,
             hash_fold_t,
             hash,
             of_string,
             to_string$0,
             to_string_hum]];
   }
   var
    Base_Int_string_conversions =
      [0,
       function(I){
        var chars_per_delimiter = 3;
        function to_string_hum(opt, t){
         if(opt) var sth = opt[1], delimiter = sth; else var delimiter = 95;
         return insert_delimiter_every
                 (caml_call1(I[1], t), delimiter, chars_per_delimiter);
        }
        function sexp_of_t(t){
         var
          s = caml_call1(I[1], t),
          s$0 =
            1009018843 <= sexp_of_int_style[1]
             ? s
             : insert_delimiter_every(s, 95, chars_per_delimiter);
         return [0, s$0];
        }
        return [0, to_string_hum, sexp_of_t];
       },
       _c_,
       _b_,
       sexp_of_int_style,
       insert_delimiter_every,
       insert_delimiter,
       insert_underscores];
   runtime.caml_register_global
    (16, Base_Int_string_conversions, "Base__Int_string_conversions");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Popcount
//# unitInfo: Requires: Stdlib__Nativeint
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_int64_add = runtime.caml_int64_add,
    caml_int64_and = runtime.caml_int64_and,
    caml_int64_of_int32 = runtime.caml_int64_of_int32,
    caml_int64_shift_right_unsigne = runtime.caml_int64_shift_right_unsigned,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    global_data = runtime.caml_get_global_data(),
    m1 = runtime.caml_int64_create_lo_mi_hi(5592405, 5592405, 21845),
    m2 = runtime.caml_int64_create_lo_mi_hi(3355443, 3355443, 13107),
    m4 = runtime.caml_int64_create_lo_mi_hi(986895, 986895, 3855),
    h01 = runtime.caml_int64_create_lo_mi_hi(65793, 65793, 257),
    mask = runtime.caml_int64_create_lo_mi_hi(16777215, 255, 0),
    Stdlib_Nativeint = global_data.Stdlib__Nativeint,
    Assert_failure = global_data.Assert_failure,
    _b_ = [0, "src/popcount.ml", 45, 9];
   function int64_popcount(x){
    var
     x$0 =
       runtime.caml_int64_sub
        (x, caml_int64_and(caml_int64_shift_right_unsigne(x, 1), m1)),
     x$1 =
       caml_int64_add
        (caml_int64_and(x$0, m2),
         caml_int64_and(caml_int64_shift_right_unsigne(x$0, 2), m2)),
     x$2 =
       caml_int64_and
        (caml_int64_add(x$1, caml_int64_shift_right_unsigne(x$1, 4)), m4);
    return runtime.caml_int64_to_int32
            (caml_int64_shift_right_unsigne
              (runtime.caml_int64_mul(x$2, h01), 56));
   }
   function int32_popcount(x){
    return int64_popcount(caml_int64_and(caml_int64_of_int32(x), mask));
   }
   var _a_ = Stdlib_Nativeint[9];
   if(32 === _a_)
    var nativeint_popcount = function(x){return int32_popcount(x);};
   else{
    if(64 !== _a_)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1);
    var
     nativeint_popcount =
       function(x){return int64_popcount(caml_int64_of_int32(x));};
   }
   var
    Base_Popcount =
      [0,
       function(_c_){return runtime.Base_int_math_int_popcount(_c_);},
       int32_popcount,
       int64_popcount,
       nativeint_popcount];
   runtime.caml_register_global(8, Base_Popcount, "Base__Popcount");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Sign
//# unitInfo: Requires: Base__Identifiable, Base__Import, Base__Sign0
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_Import = global_data.Base__Import,
    Base_Sign0 = global_data.Base__Sign0,
    Base_Identifiable = global_data.Base__Identifiable,
    t_sexp_grammar = Base_Sign0[3],
    compare_local = Base_Sign0[4],
    all = Base_Sign0[7],
    Replace_polymorphic_compare = Base_Sign0[8],
    to_int = Base_Sign0[11],
    of_int = Base_Sign0[14],
    _a_ =
      caml_call1
       (Base_Identifiable[1],
        [0,
         Base_Sign0[5],
         Base_Sign0[6],
         Base_Sign0[12],
         Base_Sign0[1],
         Base_Sign0[2],
         Base_Sign0[9],
         Base_Sign0[10],
         Base_Sign0[13]]),
    hash_fold_t = _a_[1],
    hash = _a_[2],
    t_of_sexp = _a_[3],
    sexp_of_t = _a_[4],
    of_string = _a_[5],
    to_string = _a_[6],
    between = _a_[19],
    clamp_exn = _a_[20],
    clamp = _a_[21],
    comparator = _a_[22],
    pp = _a_[23],
    hashable = _a_[24],
    cst_negative = "negative",
    cst_zero = "zero",
    cst_positive = "positive";
   function to_string_hum(param){
    switch(param){
      case 0:
       return cst_negative;
      case 1:
       return cst_zero;
      default: return cst_positive;
    }
   }
   function to_float(param){
    switch(param){case 0: return -1.;case 1: return 0.;default: return 1.;
    }
   }
   function flip(param){
    switch(param){case 0: return 2;case 1: return 1;default: return 0;
    }
   }
   function symbol(t$0, t){
    var _b_ = caml_call1(to_int, t), _c_ = caml_call1(to_int, t$0);
    return caml_call1(of_int, caml_call2(Base_Import[88], _c_, _b_));
   }
   var
    symbol$0 = Replace_polymorphic_compare[1],
    symbol$1 = Replace_polymorphic_compare[2],
    symbol$2 = Replace_polymorphic_compare[3],
    symbol$3 = Replace_polymorphic_compare[4],
    symbol$4 = Replace_polymorphic_compare[5],
    symbol$5 = Replace_polymorphic_compare[6],
    ascending = Replace_polymorphic_compare[7],
    descending = Replace_polymorphic_compare[8],
    compare = Replace_polymorphic_compare[9],
    equal = Replace_polymorphic_compare[10],
    equal_local = Replace_polymorphic_compare[11],
    max = Replace_polymorphic_compare[12],
    min = Replace_polymorphic_compare[13],
    Base_Sign =
      [0,
       all,
       t_sexp_grammar,
       hash_fold_t,
       hash,
       t_of_sexp,
       sexp_of_t,
       of_string,
       to_string,
       symbol$5,
       symbol$1,
       symbol$3,
       symbol$4,
       symbol$0,
       symbol$2,
       equal,
       compare,
       min,
       max,
       ascending,
       descending,
       between,
       clamp_exn,
       clamp,
       comparator,
       pp,
       hashable,
       compare_local,
       equal_local,
       to_string_hum,
       of_int,
       to_int,
       to_float,
       flip,
       symbol];
   runtime.caml_register_global(9, Base_Sign, "Base__Sign");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Int
//# unitInfo: Requires: Base__Comparable, Base__Comparator, Base__Error, Base__Float0, Base__Import, Base__Int0, Base__Int_conversions, Base__Int_intf, Base__Int_math, Base__Int_string_conversions, Base__Or_error, Base__Popcount, Base__Pretty_printer, Base__Printf, Base__Sexp, Base__Sign, Stdlib__Scanf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$1 = "",
    cst_x = "%x",
    cst_argument_must_be_strictly_ = "argument must be strictly positive",
    caml_div = runtime.caml_div,
    caml_int_compare = runtime.caml_int_compare,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$0 = cst$1,
    cst = cst$1,
    module_name = "Base.Int.Hex",
    module_name$0 = "Base.Int",
    Base_Import = global_data.Base__Import,
    Base_Printf = global_data.Base__Printf,
    Base_Sexp = global_data.Base__Sexp,
    Base_Or_error = global_data.Base__Or_error,
    Assert_failure = global_data.Assert_failure,
    Stdlib_Scanf = global_data.Stdlib__Scanf,
    Base_Float0 = global_data.Base__Float0,
    Base_Int0 = global_data.Base__Int0,
    Base_Int_conversions = global_data.Base__Int_conversions,
    Base_Comparator = global_data.Base__Comparator,
    Base_Comparable = global_data.Base__Comparable,
    Base_Int_string_conversions = global_data.Base__Int_string_conversions,
    Base_Pretty_printer = global_data.Base__Pretty_printer,
    Base_Int_math = global_data.Base__Int_math,
    Base_Error = global_data.Base__Error,
    Base_Sign = global_data.Base__Sign,
    Base_Popcount = global_data.Base__Popcount,
    to_string = Base_Int0[1],
    of_string = Base_Int0[2],
    of_string_opt = Base_Int0[3],
    globalize = Base_Import[284],
    hash_fold_t = Base_Import[206],
    func = Base_Import[220],
    _u_ =
      [0,
       [2,
        0,
        [11,
         " /",
         [12,
          37,
          [12,
           32,
           [2, 0, [11, " in core_int.ml: divisor should be positive", 0]]]]]],
       "%s /%% %s in core_int.ml: divisor should be positive"],
    _t_ =
      [0,
       [2,
        0,
        [12,
         32,
         [12,
          37,
          [12,
           32,
           [2, 0, [11, " in core_int.ml: modulus should be positive", 0]]]]]],
       "%s %% %s in core_int.ml: modulus should be positive"],
    cst_Int_ceil_log2_got_invalid_ = "[Int.ceil_log2] got invalid input",
    cst_Int_floor_log2_got_invalid = "[Int.floor_log2] got invalid input",
    _g_ =
      [0,
       [11, cst_argument_must_be_strictly_, 0],
       cst_argument_must_be_strictly_],
    cst_max = "max",
    cst_min = "min",
    cst_clamp_requires_min_max = "clamp requires [min <= max]",
    _f_ = [0, "src/int.ml", 111, 2],
    _e_ = [0, [4, 6, 0, 0, 0], cst_x],
    _d_ = [0, [4, 6, 0, 0, 0], cst_x],
    _b_ =
      [0,
       [11,
        "Int.of_float: argument (",
        [8, [0, 0, 0], 0, 0, [11, ") is out of range or NaN", 0]]],
       "Int.of_float: argument (%f) is out of range or NaN"],
    _a_ = [0, [11, "Int.of_string: ", [3, 0, 0]], "Int.of_string: %S"];
   function hash(x){return caml_call1(func, x);}
   var
    t_of_sexp = Base_Import[163],
    sexp_of_t = Base_Import[139],
    t_sexp_grammar = Base_Import[185],
    hashable = [0, hash, caml_int_compare, sexp_of_t],
    compare = caml_int_compare;
   function of_string$0(s){
    try{var _aL_ = caml_call1(of_string, s); return _aL_;}
    catch(_aM_){return caml_call3(Base_Printf[6], _a_, s, 0);}
   }
   var
    num_bits = Base_Int_conversions[30],
    float_lower_bound = caml_call1(Base_Float0[26], num_bits),
    float_upper_bound = caml_call1(Base_Float0[24], num_bits);
   function to_float(_aK_){return _aK_;}
   function of_float_unchecked(_aJ_){return _aJ_ | 0;}
   function of_float(f){
    if(float_lower_bound <= f && f <= float_upper_bound) return f | 0;
    var _aI_ = caml_call1(Base_Float0[29], f);
    return caml_call3(Base_Printf[7], _b_, _aI_, 0);
   }
   var
    comparator = caml_call1(Base_Comparator[7], [0, compare, sexp_of_t])[1],
    _c_ = caml_call1(Base_Comparable[14], [0, compare, sexp_of_t, 0]),
    is_positive = _c_[1],
    is_non_negative = _c_[2],
    is_negative = _c_[3],
    is_non_positive = _c_[4],
    include = caml_call1(Base_Int_string_conversions[1], [0, to_string]),
    to_string_hum = include[1],
    sexp_of_t$0 = include[2],
    compare_local = Base_Import[256],
    zero = 0,
    one = 1,
    minus_one = -1;
   function compare$0(a, b){return caml_call2(compare_local, a, b);}
   var hash_fold_t$0 = Base_Import[206], func$0 = Base_Import[220];
   function hash$0(x){return caml_call1(func$0, x);}
   var neg = Base_Import[113];
   function symbol(_aH_, _aG_){return _aH_ < _aG_ ? 1 : 0;}
   function to_string$0(i){return caml_call2(Base_Printf[2], _d_, i);}
   function of_string$1(s){
    function _aE_(_aF_){return _aF_;}
    return caml_call3(Stdlib_Scanf[5], s, _e_, _aE_);
   }
   var
    include$0 =
      caml_call1
       (Base_Int_string_conversions[2],
        [0,
         compare$0,
         compare_local,
         hash_fold_t$0,
         hash$0,
         to_string$0,
         of_string$1,
         zero,
         symbol,
         neg,
         module_name]),
    Hex = include$0[1],
    include$1 =
      caml_call1(Base_Pretty_printer[2], [0, module_name$0, to_string]),
    pp = include$1[1];
   function invariant(param){return 0;}
   function between(t, low, high){
    var _aC_ = low <= t ? 1 : 0, _aD_ = _aC_ ? t <= high ? 1 : 0 : _aC_;
    return _aD_;
   }
   function clamp_unchecked(t, min, max){
    var _aB_ = caml_call2(Base_Import[97][4], t, max);
    return caml_call1(caml_call1(Base_Import[97][3], min), _aB_);
   }
   function clamp_exn(t, min, max){
    if(min <= max) return clamp_unchecked(t, min, max);
    throw caml_maybe_attach_backtrace([0, Assert_failure, _f_], 1);
   }
   function clamp(t, min, max){
    if(max >= min) return [0, clamp_unchecked(t, min, max)];
    var
     _ay_ = [0, [0, cst_max, caml_call1(sexp_of_t, max)], 0],
     _az_ = [0, [0, cst_min, caml_call1(sexp_of_t, min)], _ay_],
     _aA_ = caml_call2(Base_Sexp[10], cst_clamp_requires_min_max, _az_);
    return caml_call1(Base_Or_error[39], _aA_);
   }
   function pred(i){return caml_call2(Base_Import[93], i, 1);}
   function succ(i){return caml_call2(Base_Import[91], i, 1);}
   function to_int(i){return i;}
   function of_int_exn(i){return i;}
   var
    max_value = Base_Import[85][19],
    min_value = Base_Import[85][20],
    of_int32 = Base_Int_conversions[6],
    of_int32_exn = Base_Int_conversions[7],
    to_int32 = Base_Int_conversions[1],
    to_int32_exn = Base_Int_conversions[2],
    of_int64 = Base_Int_conversions[12],
    of_int64_exn = Base_Int_conversions[13],
    to_int64 = Base_Int_conversions[4],
    of_nativeint = Base_Int_conversions[23],
    of_nativeint_exn = Base_Int_conversions[24],
    to_nativeint = Base_Int_conversions[5],
    max_value_30_bits = 1073741823;
   function abs(x){return caml_call1(Base_Import[123], x);}
   function rem(a, b){return caml_call2(Base_Import[122], a, b);}
   function incr(_ax_){_ax_[1]++; return 0;}
   function decr(_aw_){_aw_[1] += -1; return 0;}
   function shift_right(a, b){return caml_call2(Base_Import[115], a, b);}
   function shift_right_logical(a, b){
    return caml_call2(Base_Import[120], a, b);
   }
   function shift_left(a, b){return caml_call2(Base_Import[119], a, b);}
   function bit_not(a){return caml_call1(Base_Import[117], a);}
   function bit_or(a, b){return caml_call2(Base_Import[118], a, b);}
   function bit_and(a, b){return caml_call2(Base_Import[116], a, b);}
   function bit_xor(a, b){return caml_call2(Base_Import[121], a, b);}
   var pow = Base_Int_math[2][1];
   function symbol$0(b, e){return caml_call2(pow, b, e);}
   var raise_s = Base_Error[32];
   function non_positive_argument(param){
    return caml_call2(Base_Printf[7], _g_, 0);
   }
   function ceil_pow2(x){
    if(x <= 0) non_positive_argument(0);
    var
     x$0 = caml_call2(Base_Import[93], x, 1),
     _aq_ = caml_call2(Base_Import[120], x$0, 1),
     x$1 = caml_call2(Base_Import[118], x$0, _aq_),
     _ar_ = caml_call2(Base_Import[120], x$1, 2),
     x$2 = caml_call2(Base_Import[118], x$1, _ar_),
     _as_ = caml_call2(Base_Import[120], x$2, 4),
     x$3 = caml_call2(Base_Import[118], x$2, _as_),
     _at_ = caml_call2(Base_Import[120], x$3, 8),
     x$4 = caml_call2(Base_Import[118], x$3, _at_),
     _au_ = caml_call2(Base_Import[120], x$4, 16),
     x$5 = caml_call2(Base_Import[118], x$4, _au_),
     _av_ = caml_call2(Base_Import[120], x$5, 32),
     x$6 = caml_call2(Base_Import[118], x$5, _av_);
    return caml_call2(Base_Import[91], x$6, 1);
   }
   function floor_pow2(x){
    if(x <= 0) non_positive_argument(0);
    var
     _aj_ = caml_call2(Base_Import[120], x, 1),
     x$0 = caml_call2(Base_Import[118], x, _aj_),
     _ak_ = caml_call2(Base_Import[120], x$0, 2),
     x$1 = caml_call2(Base_Import[118], x$0, _ak_),
     _al_ = caml_call2(Base_Import[120], x$1, 4),
     x$2 = caml_call2(Base_Import[118], x$1, _al_),
     _am_ = caml_call2(Base_Import[120], x$2, 8),
     x$3 = caml_call2(Base_Import[118], x$2, _am_),
     _an_ = caml_call2(Base_Import[120], x$3, 16),
     x$4 = caml_call2(Base_Import[118], x$3, _an_),
     _ao_ = caml_call2(Base_Import[120], x$4, 32),
     x$5 = caml_call2(Base_Import[118], x$4, _ao_),
     _ap_ = caml_call2(Base_Import[120], x$5, 1);
    return caml_call2(Base_Import[93], x$5, _ap_);
   }
   function is_pow2(x){
    if(x <= 0) non_positive_argument(0);
    var _ai_ = caml_call2(Base_Import[93], x, 1);
    return 0 === caml_call2(Base_Import[116], x, _ai_) ? 1 : 0;
   }
   function floor_log2(i){
    if(i <= 0){
     var _af_ = [0, [0, cst, caml_call1(Base_Import[139], i)], 0];
     caml_call1
      (raise_s,
       caml_call2(Base_Sexp[10], cst_Int_floor_log2_got_invalid, _af_));
    }
    var
     _ag_ = runtime.Base_int_math_int_clz(i),
     _ah_ = caml_call2(Base_Import[93], num_bits, 1);
    return caml_call2(Base_Import[93], _ah_, _ag_);
   }
   function ceil_log2(i){
    if(i <= 0){
     var _ad_ = [0, [0, cst$0, caml_call1(Base_Import[139], i)], 0];
     caml_call1
      (raise_s,
       caml_call2(Base_Sexp[10], cst_Int_ceil_log2_got_invalid_, _ad_));
    }
    if(1 === i) return 0;
    var
     _ae_ = runtime.Base_int_math_int_clz(caml_call2(Base_Import[93], i, 1));
    return caml_call2(Base_Import[93], num_bits, _ae_);
   }
   var
    sign = Base_Sign[30],
    popcount = Base_Popcount[1],
    compare_local$0 = Base_Import[256];
   function compare$1(a, b){return caml_call2(compare_local$0, a, b);}
   var equal_local = Base_Import[270];
   function equal(a, b){return caml_call2(equal_local, a, b);}
   var hash_fold_t$1 = Base_Import[206], func$1 = Base_Import[220];
   function hash$1(x){return caml_call1(func$1, x);}
   var land = Base_Import[116], lsr = Base_Import[120];
   function clz(_ac_){return runtime.Base_int_math_int_clz(_ac_);}
   var
    Binary =
      caml_call1
        (Base_Int_string_conversions[3],
         [0,
          compare$1,
          compare_local$0,
          equal,
          equal_local,
          hash_fold_t$1,
          hash$1,
          clz,
          lsr,
          land,
          to_int,
          num_bits,
          one,
          zero])
       [1];
   function _h_(_ab_){return - _ab_ | 0;}
   function _i_(_aa_, _$_){return _aa_ !== _$_ ? 1 : 0;}
   function _j_(___, _Z_){return ___ < _Z_ ? 1 : 0;}
   function _k_(_Y_, _X_){return _X_ < _Y_ ? 1 : 0;}
   function _l_(_W_, _V_){return _W_ === _V_ ? 1 : 0;}
   function _m_(_U_, _T_){return _U_ <= _T_ ? 1 : 0;}
   function _n_(_S_, _R_){return _R_ <= _S_ ? 1 : 0;}
   function _o_(_Q_){return - _Q_ | 0;}
   var _p_ = caml_div, _q_ = runtime.caml_mul;
   function _r_(_P_, _O_){return _P_ - _O_ | 0;}
   var
    _s_ =
      [0,
       of_float,
       to_float,
       of_string$0,
       to_string,
       function(_N_, _M_){return _N_ + _M_ | 0;},
       _r_,
       _q_,
       _p_,
       _o_,
       _n_,
       _m_,
       _l_,
       _k_,
       _j_,
       _i_,
       abs,
       _h_,
       zero,
       of_int_exn,
       rem],
    F = caml_call1(Base_Int_math[1], _s_),
    round = F[4],
    round_towards_zero = F[5],
    round_down = F[6],
    round_up = F[7],
    round_nearest = F[8];
   function symbol$1(x, y){
    if(y <= 0){
     var _K_ = caml_call1(to_string, y), _L_ = caml_call1(to_string, x);
     caml_call4(Base_Printf[7], _t_, _L_, _K_, 0);
    }
    var rval = rem(x, y);
    return rval < 0 ? rval + y | 0 : rval;
   }
   function symbol$2(x, y){
    if(y <= 0){
     var _I_ = caml_call1(to_string, y), _J_ = caml_call1(to_string, x);
     caml_call4(Base_Printf[7], _u_, _J_, _I_, 0);
    }
    return x < 0 ? caml_div(x + 1 | 0, y) - 1 | 0 : caml_div(x, y);
   }
   function symbol$3(x, y){return caml_call2(Base_Import[96], x, y);}
   var
    lnot = Base_Import[117],
    include$2 = Base_Import[97],
    ascending = include$2[1],
    descending = include$2[2],
    max = include$2[3],
    min = include$2[4],
    _v_ = [0, [0, F[1], F[2], F[3]]],
    _w_ = [0, symbol$0, lnot, abs, zero, symbol$1, symbol$2, symbol$3];
   function _x_(_H_){return runtime.Base_int_math_int_ctz(_H_);}
   function _y_(_G_){return runtime.Base_int_math_int_clz(_G_);}
   function _z_(_F_, _E_){return _F_ === _E_ ? 1 : 0;}
   var
    _A_ = caml_int_compare,
    _B_ = caml_int_compare,
    Base_Int =
      [0,
       globalize,
       t_sexp_grammar,
       of_float,
       to_float,
       of_int_exn,
       to_int,
       hash_fold_t,
       hash,
       t_of_sexp,
       sexp_of_t$0,
       of_string$0,
       to_string,
       function(_D_, _C_){return _D_ === _C_ ? 1 : 0;},
       _B_,
       min,
       max,
       ascending,
       descending,
       between,
       clamp_exn,
       clamp,
       comparator,
       pp,
       hashable,
       is_positive,
       is_non_negative,
       is_negative,
       is_non_positive,
       sign,
       _A_,
       _z_,
       invariant,
       Hex,
       Binary,
       of_string_opt,
       to_string_hum,
       one,
       minus_one,
       rem,
       round,
       round_towards_zero,
       round_down,
       round_up,
       round_nearest,
       succ,
       pred,
       pow,
       bit_and,
       bit_or,
       bit_xor,
       bit_not,
       popcount,
       shift_left,
       shift_right,
       decr,
       incr,
       of_int32_exn,
       to_int32_exn,
       of_int64_exn,
       to_int64,
       of_nativeint_exn,
       to_nativeint,
       of_float_unchecked,
       num_bits,
       max_value,
       min_value,
       shift_right_logical,
       ceil_pow2,
       floor_pow2,
       ceil_log2,
       floor_log2,
       is_pow2,
       _y_,
       _x_,
       _w_,
       symbol$0,
       lnot,
       abs,
       zero,
       symbol$1,
       symbol$2,
       symbol$3,
       max_value_30_bits,
       of_int_exn,
       to_int,
       of_int32,
       to_int32,
       of_int64,
       of_nativeint,
       to_nativeint,
       _v_];
   runtime.caml_register_global(34, Base_Int, "Base__Int");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Sys
//# unitInfo: Requires: Base__Sys0
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Base_Sys0 = global_data.Base__Sys0,
    backend_type = Base_Sys0[1],
    interactive = Base_Sys0[2],
    os_type = Base_Sys0[3],
    unix = Base_Sys0[4],
    win32 = Base_Sys0[5],
    cygwin = Base_Sys0[6],
    word_size_in_bits = Base_Sys0[7],
    int_size_in_bits = Base_Sys0[8],
    big_endian = Base_Sys0[9],
    max_string_length = Base_Sys0[10],
    max_array_length = Base_Sys0[11],
    runtime_variant = Base_Sys0[12],
    runtime_parameters = Base_Sys0[13],
    argv = Base_Sys0[14],
    get_argv = Base_Sys0[15],
    ocaml_version = Base_Sys0[16],
    enable_runtime_warnings = Base_Sys0[17],
    runtime_warnings_enabled = Base_Sys0[18],
    getenv_exn = Base_Sys0[20],
    getenv = Base_Sys0[21],
    Base_Sys =
      [0,
       get_argv,
       argv,
       interactive,
       os_type,
       unix,
       win32,
       cygwin,
       backend_type,
       word_size_in_bits,
       int_size_in_bits,
       big_endian,
       max_string_length,
       max_array_length,
       runtime_variant,
       runtime_parameters,
       ocaml_version,
       enable_runtime_warnings,
       runtime_warnings_enabled,
       getenv,
       getenv_exn];
   runtime.caml_register_global(1, Base_Sys, "Base__Sys");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Obj_local
//# unitInfo: Requires: Base__Sys, Sexplib0__Sexp_conv_error
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Heap = "Heap",
    cst_Immediate = "Immediate",
    cst_Stack = "Stack",
    cst_heap = "heap",
    cst_immediate = "immediate",
    cst_stack = "stack",
    caml_string_notequal = runtime.caml_string_notequal;
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    error_source_003 = "obj_local.ml.stack_or_heap",
    Base_Sys = global_data.Base__Sys,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    _a_ = [0, cst_Immediate],
    _b_ = [0, cst_Stack],
    _c_ = [0, cst_Heap];
   function size(t){return t.length - 1;}
   function stack_or_heap_of_sexp(sexp_004){
    a:
    {
     if(0 === sexp_004[0]){
      var _e_ = sexp_004[1];
      b:
      if(caml_string_notequal(_e_, cst_Heap)){
       c:
       if(caml_string_notequal(_e_, cst_Immediate)){
        if(caml_string_notequal(_e_, cst_Stack)){
         if(! caml_string_notequal(_e_, cst_heap)) break b;
         if(! caml_string_notequal(_e_, cst_immediate)) break c;
         if(caml_string_notequal(_e_, cst_stack)) break a;
        }
        return 1;
       }
       return 0;
      }
      return 2;
     }
     var _f_ = sexp_004[1];
     if(! _f_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_003, sexp_004);
     var _g_ = _f_[1];
     if(0 !== _g_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_003, sexp_004);
     var _h_ = _g_[1];
     b:
     if(caml_string_notequal(_h_, cst_Heap)){
      c:
      if(caml_string_notequal(_h_, cst_Immediate)){
       if(caml_string_notequal(_h_, cst_Stack)){
        if(! caml_string_notequal(_h_, cst_heap)) break b;
        if(! caml_string_notequal(_h_, cst_immediate)) break c;
        if(caml_string_notequal(_h_, cst_stack)) break a;
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_003, sexp_004);
   }
   function sexp_of_stack_or_heap(param){
    switch(param){case 0: return _a_;case 1: return _b_;default: return _c_;
    }
   }
   var compare_stack_or_heap = runtime.caml_int_compare;
   function stack_or_heap(repr){
    if(typeof repr === "number") return 0;
    var _d_ = Base_Sys[8];
    return typeof _d_ === "number"
            ? _d_ ? 2 : runtime.caml_dummy_obj_is_stack(repr) ? 1 : 2
            : 2;
   }
   var
    Base_Obj_local =
      [0,
       size,
       sexp_of_stack_or_heap,
       stack_or_heap_of_sexp,
       compare_stack_or_heap,
       stack_or_heap];
   runtime.caml_register_global(18, Base_Obj_local, "Base__Obj_local");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Obj_array
//# unitInfo: Requires: Base__Array0, Base__Blit, Base__Import, Base__Int0, Base__String0, Stdlib__Obj
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_check_bound = runtime.caml_check_bound,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_obj_tag = runtime.caml_obj_tag;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_Import = global_data.Base__Import,
    Stdlib_Obj = global_data.Stdlib__Obj,
    Base_Array0 = global_data.Base__Array0,
    Base_Int0 = global_data.Base__Int0,
    Base_String0 = global_data.Base__String0,
    Assert_failure = global_data.Assert_failure,
    Base_Blit = global_data.Base__Blit,
    _b_ = [0, ">", 0],
    cst_Obj_array_t_of_length = "<Obj_array.t of length ",
    _c_ = [0, ""],
    _a_ = [0, "src/obj_array.ml", 12, 2];
   function invariant(t){
    var _t_ = Stdlib_Obj[17];
    if(caml_obj_tag(t) !== _t_) return 0;
    throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
   }
   function length(_s_){return _s_.length - 1;}
   function sexp_of_t(t){
    var
     _r_ =
       [0,
        cst_Obj_array_t_of_length,
        [0, caml_call1(Base_Int0[1], t.length - 1), _b_]];
    return [0, caml_call2(Base_String0[20], _c_, _r_)];
   }
   var zero_obj = 0;
   function create_zero(len){
    return caml_call2(Base_Array0[4], len, zero_obj);
   }
   var empty = [0];
   function get(t, i){return caml_check_bound(t, i)[1 + i];}
   function unsafe_get(t, i){return t[1 + i];}
   function unsafe_set_with_caml_modify(t, i, obj){t[1 + i] = obj; return 0;}
   function set_with_caml_modify(t, i, obj){
    caml_check_bound(t, i)[1 + i] = obj;
    return 0;
   }
   function unsafe_set_int_assuming_curren(t, i, int$0){t[1 + i] = int$0; return 0;
   }
   function set(t, i, obj){
    var old_obj = get(t, i);
    if(typeof old_obj === "number" && typeof obj === "number")
     return unsafe_set_int_assuming_curren(t, i, obj);
    var _q_ = 1 - (old_obj === obj ? 1 : 0);
    return _q_ ? unsafe_set_with_caml_modify(t, i, obj) : _q_;
   }
   function unsafe_set(t, i, obj){
    var old_obj = t[1 + i];
    if(typeof old_obj === "number" && typeof obj === "number")
     return unsafe_set_int_assuming_curren(t, i, obj);
    var _p_ = 1 - (old_obj === obj ? 1 : 0);
    return _p_ ? unsafe_set_with_caml_modify(t, i, obj) : _p_;
   }
   function unsafe_set_omit_phys_equal_che(t, i, obj){
    var old_obj = t[1 + i];
    if(typeof old_obj === "number" && typeof obj === "number")
     return unsafe_set_int_assuming_curren(t, i, obj);
    return unsafe_set_with_caml_modify(t, i, obj);
   }
   function swap(t, i, j){
    var a = get(t, i), b = get(t, j);
    unsafe_set(t, i, b);
    return unsafe_set(t, j, a);
   }
   function create(len, x){
    if(typeof x !== "number"){
     var _l_ = Stdlib_Obj[16];
     if(caml_obj_tag(x) === _l_){
      var
       t = create_zero(len),
       _n_ = caml_call2(Base_Import[93], len, 1),
       _m_ = 0;
      if(_n_ >= 0){
       var i = _m_;
       for(;;){
        unsafe_set_with_caml_modify(t, i, x);
        var _o_ = i + 1 | 0;
        if(_n_ === i) break;
        var i = _o_;
       }
      }
      return t;
     }
    }
    return caml_call2(Base_Array0[4], len, x);
   }
   function singleton(obj){return create(1, obj);}
   function unsafe_set_assuming_currently_(t, i, obj){
    return typeof obj === "number"
            ? unsafe_set_int_assuming_curren(t, i, obj)
            : unsafe_set_with_caml_modify(t, i, obj);
   }
   function unsafe_set_int(t, i, int$0){
    var old_obj = t[1 + i];
    return typeof old_obj === "number"
            ? unsafe_set_int_assuming_curren(t, i, int$0)
            : unsafe_set_with_caml_modify(t, i, int$0);
   }
   function unsafe_clear_if_pointer(t, i){
    var old_obj = t[1 + i], _k_ = 1 - (typeof old_obj === "number" ? 1 : 0);
    return _k_ ? unsafe_set_with_caml_modify(t, i, 0) : _k_;
   }
   function unsafe_blit(src, src_pos, dst, dst_pos, len){
    if(dst_pos < src_pos){
     var _e_ = caml_call2(Base_Import[93], len, 1), _d_ = 0;
     if(_e_ >= 0){
      var i = _d_;
      for(;;){
       var _f_ = src[1 + caml_call2(Base_Import[91], src_pos, i)];
       unsafe_set(dst, caml_call2(Base_Import[91], dst_pos, i), _f_);
       var _g_ = i + 1 | 0;
       if(_e_ === i) break;
       var i = _g_;
      }
     }
     return 0;
    }
    var _h_ = caml_call2(Base_Import[93], len, 1);
    if(_h_ >= 0){
     var i$0 = _h_;
     for(;;){
      var _i_ = src[1 + caml_call2(Base_Import[91], src_pos, i$0)];
      unsafe_set(dst, caml_call2(Base_Import[91], dst_pos, i$0), _i_);
      var _j_ = i$0 - 1 | 0;
      if(0 === i$0) break;
      var i$0 = _j_;
     }
    }
    return 0;
   }
   var
    include = caml_call1(Base_Blit[1], [0, length, create_zero, unsafe_blit]),
    blit = include[1],
    blito = include[2],
    unsafe_blit$0 = include[3],
    subo = include[5];
   function copy(src){
    var dst = create_zero(src.length - 1);
    caml_call6(blito, src, 0, 0, dst, 0, 0);
    return dst;
   }
   var
    sub = Base_Array0[15],
    Base_Obj_array =
      [0,
       sexp_of_t,
       blit,
       blito,
       unsafe_blit$0,
       subo,
       invariant,
       create,
       create_zero,
       copy,
       singleton,
       empty,
       length,
       get,
       unsafe_get,
       set,
       unsafe_set,
       swap,
       set_with_caml_modify,
       unsafe_set_assuming_currently_,
       unsafe_set_int_assuming_curren,
       unsafe_set_int,
       unsafe_set_omit_phys_equal_che,
       unsafe_set_with_caml_modify,
       unsafe_clear_if_pointer,
       sub];
   runtime.caml_register_global(12, Base_Obj_array, "Base__Obj_array");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Uniform_array
//# unitInfo: Requires: Base__Array, Base__Binary_searchable, Base__Blit, Base__Container, Base__Import, Base__Int, Base__List, Base__Obj_array, Base__Option, Base__Sexpable, Sexplib0__Sexp_grammar, Stdlib__Obj
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_src_uniform_array_ml = "src/uniform_array.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    Base_Import = global_data.Base__Import,
    Base_Container = global_data.Base__Container,
    Assert_failure = global_data.Assert_failure,
    Base_Array = global_data.Base__Array,
    Sexplib0_Sexp_grammar = global_data.Sexplib0__Sexp_grammar,
    Base_Option = global_data.Base__Option,
    Base_List = global_data.Base__List,
    Base_Int = global_data.Base__Int,
    Stdlib_Obj = global_data.Stdlib__Obj,
    Base_Obj_array = global_data.Base__Obj_array,
    Base_Sexpable = global_data.Base__Sexpable,
    Base_Blit = global_data.Base__Blit,
    Base_Binary_searchable = global_data.Base__Binary_searchable,
    empty = Base_Obj_array[11],
    _b_ = [0, cst_src_uniform_array_ml, 347, 6],
    cst_Array_map2_exn = "Array.map2_exn",
    cst_Array_fold2_exn = "Array.fold2_exn",
    cst_Uniform_array_init = "Uniform_array.init",
    _a_ = [0, cst_src_uniform_array_ml, 80, 2];
   function unsafe_create_uninitialized(len){
    return caml_call1(Base_Obj_array[8], len);
   }
   function create_obj_array(len){return caml_call1(Base_Obj_array[8], len);}
   function create(len, x){return caml_call2(Base_Obj_array[7], len, x);}
   function singleton(x){return caml_call1(Base_Obj_array[10], x);}
   function swap(t, i, j){return caml_call3(Base_Obj_array[17], t, i, j);}
   function get(arr, i){return caml_call2(Base_Obj_array[13], arr, i);}
   function set(arr, i, x){return caml_call3(Base_Obj_array[15], arr, i, x);}
   function unsafe_get_local(arr, i){
    return caml_call2(Base_Obj_array[14], arr, i);
   }
   function unsafe_get(arr, i){return unsafe_get_local(arr, i);}
   function unsafe_set(arr, i, x){
    return caml_call3(Base_Obj_array[16], arr, i, x);
   }
   function unsafe_set_int(arr, i, x){
    return caml_call3(Base_Obj_array[21], arr, i, x);
   }
   function unsafe_set_int_assuming_curren(arr, i, x){return caml_call3(Base_Obj_array[20], arr, i, x);
   }
   function unsafe_set_assuming_currently_(arr, i, x){return caml_call3(Base_Obj_array[19], arr, i, x);
   }
   function unsafe_to_array_inplace_promis(arr){return arr;}
   var
    length = Base_Obj_array[12],
    unsafe_blit = Base_Obj_array[4],
    copy = Base_Obj_array[9];
   function unsafe_set_omit_phys_equal_che(t, i, x){return caml_call3(Base_Obj_array[22], t, i, x);
   }
   function unsafe_set_with_caml_modify(t, i, x){
    return caml_call3(Base_Obj_array[23], t, i, x);
   }
   function set_with_caml_modify(t, i, x){
    return caml_call3(Base_Obj_array[18], t, i, x);
   }
   var unsafe_clear_if_pointer = Base_Obj_array[24], sub = Base_Obj_array[25];
   function invariant(t){
    var _aq_ = Stdlib_Obj[17];
    if(runtime.caml_obj_tag(t) !== _aq_) return 0;
    throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
   }
   function init(l, f){
    if(0 > l) return caml_call1(Base_Import[126], cst_Uniform_array_init);
    var
     res = unsafe_create_uninitialized(l),
     _ao_ = caml_call2(Base_Import[93], l, 1),
     _an_ = 0;
    if(_ao_ >= 0){
     var i = _an_;
     for(;;){
      unsafe_set(res, i, caml_call1(f, i));
      var _ap_ = i + 1 | 0;
      if(_ao_ === i) break;
      var i = _ap_;
     }
    }
    return res;
   }
   function of_array(arr){
    return init(arr.length - 1, function(_am_){return arr[1 + _am_];});
   }
   function map(a, f){
    function _al_(i){return caml_call1(f, unsafe_get(a, i));}
    return init(caml_call1(length, a), _al_);
   }
   function mapi(a, f){
    function _ak_(i){return caml_call2(f, i, unsafe_get(a, i));}
    return init(caml_call1(length, a), _ak_);
   }
   function iter(a, f){
    var
     _ah_ = caml_call1(length, a),
     _ai_ = caml_call2(Base_Import[93], _ah_, 1),
     _ag_ = 0;
    if(_ai_ >= 0){
     var i = _ag_;
     for(;;){
      caml_call1(f, unsafe_get(a, i));
      var _aj_ = i + 1 | 0;
      if(_ai_ === i) break;
      var i = _aj_;
     }
    }
    return 0;
   }
   function iteri(a, f){
    var
     _ad_ = caml_call1(length, a),
     _ae_ = caml_call2(Base_Import[93], _ad_, 1),
     _ac_ = 0;
    if(_ae_ >= 0){
     var i = _ac_;
     for(;;){
      caml_call2(f, i, unsafe_get(a, i));
      var _af_ = i + 1 | 0;
      if(_ae_ === i) break;
      var i = _af_;
     }
    }
    return 0;
   }
   function foldi(a, init, f){
    var
     acc = [0, init],
     ___ = caml_call1(length, a),
     _$_ = caml_call2(Base_Import[93], ___, 1),
     _Z_ = 0;
    if(_$_ >= 0){
     var i = _Z_;
     for(;;){
      var _aa_ = unsafe_get(a, i);
      acc[1] = caml_call3(f, i, acc[1], _aa_);
      var _ab_ = i + 1 | 0;
      if(_$_ === i) break;
      var i = _ab_;
     }
    }
    return acc[1];
   }
   function fold(t, init, f){
    var
     r = [0, init],
     _V_ = caml_call1(length, t),
     _W_ = caml_call2(Base_Import[93], _V_, 1),
     _U_ = 0;
    if(_W_ >= 0){
     var i = _U_;
     for(;;){
      var _X_ = unsafe_get(t, i);
      r[1] = caml_call2(f, r[1], _X_);
      var _Y_ = i + 1 | 0;
      if(_W_ === i) break;
      var i = _Y_;
     }
    }
    return r[1];
   }
   function to_list(t){
    function _R_(_T_){return get(t, _T_);}
    var _S_ = caml_call1(length, t);
    return caml_call2(Base_List[40], _S_, _R_);
   }
   function of_list(l){
    var
     len = caml_call1(Base_List[45], l),
     res = unsafe_create_uninitialized(len);
    function _Q_(i, x){return set(res, i, x);}
    caml_call2(Base_List[34], l, _Q_);
    return res;
   }
   function of_list_rev(l){
    var
     len = caml_call1(Base_List[45], l),
     res = unsafe_create_uninitialized(len);
    function _O_(i, x){
     var _P_ = caml_call2(Base_Import[93], len, i);
     return set(res, caml_call2(Base_Import[93], _P_, 1), x);
    }
    caml_call2(Base_List[34], l, _O_);
    return res;
   }
   function to_array(t){
    function _M_(i){return unsafe_get(t, i);}
    var _N_ = caml_call1(length, t);
    return caml_call2(Base_Array[41], _N_, _M_);
   }
   function exists(t, f){
    var
     _L_ = caml_call1(length, t),
     i = [0, caml_call2(Base_Import[93], _L_, 1)],
     result = [0, 0];
    for(;;){
     if(0 <= i[1] && ! result[1]){
      if(caml_call1(f, unsafe_get(t, i[1]))){result[1] = 1; continue;}
      i[1] += -1;
      continue;
     }
     return result[1];
    }
   }
   function existsi(t, f){
    var
     _J_ = caml_call1(length, t),
     i = [0, caml_call2(Base_Import[93], _J_, 1)],
     result = [0, 0];
    for(;;){
     if(0 <= i[1] && ! result[1]){
      var _K_ = unsafe_get(t, i[1]);
      if(caml_call2(f, i[1], _K_)){result[1] = 1; continue;}
      i[1] += -1;
      continue;
     }
     return result[1];
    }
   }
   function for_all(t, f){
    var
     _I_ = caml_call1(length, t),
     i = [0, caml_call2(Base_Import[93], _I_, 1)],
     result = [0, 1];
    for(;;){
     if(0 <= i[1] && result[1]){
      if(caml_call1(f, unsafe_get(t, i[1]))){i[1] += -1; continue;}
      result[1] = 0;
      continue;
     }
     return result[1];
    }
   }
   function for_alli(t, f){
    var
     length$0 = caml_call1(length, t),
     i = [0, caml_call2(Base_Import[93], length$0, 1)],
     result = [0, 1];
    for(;;){
     if(0 <= i[1] && result[1]){
      var _H_ = unsafe_get(t, i[1]);
      if(caml_call2(f, i[1], _H_)){i[1] += -1; continue;}
      result[1] = 0;
      continue;
     }
     return result[1];
    }
   }
   function filter_mapi(t, f){
    var
     r = [0, empty],
     k = [0, 0],
     _D_ = caml_call1(length, t),
     _E_ = caml_call2(Base_Import[93], _D_, 1),
     _C_ = 0;
    if(_E_ >= 0){
     var i = _C_;
     for(;;){
      var match = caml_call2(f, i, unsafe_get(t, i));
      if(match){
       var a = match[1];
       if(0 === k[1]) r[1] = create(caml_call1(length, t), a);
       unsafe_set(r[1], k[1], a);
       k[1]++;
      }
      var _G_ = i + 1 | 0;
      if(_E_ === i) break;
      var i = _G_;
     }
    }
    var _F_ = caml_call1(length, t);
    return k[1] === _F_
            ? r[1]
            : 0 < k[1] ? caml_call3(sub, r[1], 0, k[1]) : empty;
   }
   function filteri(t, f){
    return filter_mapi
            (t, function(i, x){return caml_call2(f, i, x) ? [0, x] : 0;});
   }
   function filter_map(t, f){
    return filter_mapi(t, function(i, a){return caml_call1(f, a);});
   }
   function filter(t, f){
    return filter_map(t, function(x){return caml_call1(f, x) ? [0, x] : 0;});
   }
   function fold2_exn(t1, t2, init, f){
    var len = caml_call1(length, t1);
    if(caml_call1(length, t2) !== len)
     caml_call1(Base_Import[126], cst_Array_fold2_exn);
    var acc = [0, init], _y_ = caml_call2(Base_Import[93], len, 1), _x_ = 0;
    if(_y_ >= 0){
     var i = _x_;
     for(;;){
      var _z_ = unsafe_get(t2, i), _A_ = unsafe_get(t1, i);
      acc[1] = caml_call3(f, acc[1], _A_, _z_);
      var _B_ = i + 1 | 0;
      if(_y_ === i) break;
      var i = _B_;
     }
    }
    return acc[1];
   }
   function map2_exn(t1, t2, f){
    var len = caml_call1(length, t1);
    if(caml_call1(length, t2) !== len)
     caml_call1(Base_Import[126], cst_Array_map2_exn);
    return init
            (len,
             function(i){
              var _w_ = unsafe_get(t2, i);
              return caml_call2(f, unsafe_get(t1, i), _w_);
             });
   }
   function concat(ts){
    function _n_(t){return caml_call1(length, t);}
    function _o_(_v_, _u_){return _v_ + _u_ | 0;}
    var
     total_len = caml_call3(Base_List[26], [0, Base_Int[79], _o_], ts, _n_),
     res = unsafe_create_uninitialized(total_len);
    function _p_(so_far, t){
     var
      len = caml_call1(length, t),
      _r_ = caml_call2(Base_Import[93], len, 1),
      _q_ = 0;
     if(_r_ >= 0){
      var i = _q_;
      for(;;){
       var _s_ = get(t, i);
       set(res, caml_call2(Base_Import[91], so_far, i), _s_);
       var _t_ = i + 1 | 0;
       if(_r_ === i) break;
       var i = _t_;
      }
     }
     return caml_call2(Base_Import[91], so_far, len);
    }
    caml_call3(Base_List[20], ts, 0, _p_);
    return res;
   }
   function concat_mapi(t, f){
    var _m_ = to_list(t);
    return concat(caml_call2(Base_List[41], _m_, f));
   }
   function concat_map(t, f){
    var _l_ = to_list(t);
    return concat(caml_call2(Base_List[53], _l_, f));
   }
   function partition_map(t, f){
    var
     right = [0, empty],
     left = [0, empty],
     right_idx = [0, 0],
     left_idx = [0, 0];
    function append(data, idx, value){
     if(0 === idx[1]) data[1] = create(caml_call1(length, t), value);
     unsafe_set(data[1], idx[1], value);
     idx[1]++;
     return;
    }
    var
     _g_ = caml_call1(length, t),
     _h_ = caml_call2(Base_Import[93], _g_, 1),
     _f_ = 0;
    if(_h_ >= 0){
     var i = _f_;
     for(;;){
      var match = caml_call1(f, unsafe_get(t, i));
      if(0 === match[0]){
       var a = match[1];
       append(left, left_idx, a);
      }
      else{var a$0 = match[1]; append(right, right_idx, a$0);}
      var _j_ = i + 1 | 0;
      if(_h_ === i) break;
      var i = _j_;
     }
    }
    function trim(data, idx){
     var _k_ = caml_call1(length, t);
     return idx[1] === _k_
             ? data[1]
             : 0 < idx[1] ? caml_call3(sub, data[1], 0, idx[1]) : empty;
    }
    var _i_ = trim(right, right_idx);
    return [0, trim(left, left_idx), _i_];
   }
   function find_map(t, f){
    var length$0 = caml_call1(length, t);
    if(0 === length$0) return 0;
    var i = [0, 0], value_found = [0, 0];
    for(;;){
     if(caml_call1(Base_Option[52], value_found[1]) && i[1] < length$0){
      var value = unsafe_get(t, i[1]);
      value_found[1] = caml_call1(f, value);
      i[1]++;
      continue;
     }
     return value_found[1];
    }
   }
   function find_mapi(t, f){
    var length$0 = caml_call1(length, t);
    if(0 === length$0) return 0;
    var i = [0, 0], value_found = [0, 0];
    for(;;){
     if(caml_call1(Base_Option[52], value_found[1]) && i[1] < length$0){
      var value = unsafe_get(t, i[1]);
      value_found[1] = caml_call2(f, i[1], value);
      i[1]++;
      continue;
     }
     return value_found[1];
    }
   }
   function find(t, f){
    function _d_(param){var x = param[2]; return x;}
    var length$0 = caml_call1(length, t);
    if(0 === length$0)
     var _e_ = 0;
    else{
     var i = [0, 0], found = [0, 0], value_found = [0, unsafe_get(t, 0)];
     for(;;){
      if(! found[1] && i[1] < length$0){
       var value = unsafe_get(t, i[1]);
       if(caml_call1(f, value)){
        value_found[1] = value;
        found[1] = 1;
       }
       else
        i[1]++;
       continue;
      }
      if(found[1]){var _e_ = [0, [0, i[1], value_found[1]]]; break;}
      var _e_ = 0;
      break;
     }
    }
    return caml_call2(Base_Option[24], _e_, _d_);
   }
   function findi(t, f){
    var len = caml_call1(length, t), i = 0;
    for(;;){
     if(len <= i) return 0;
     var x = unsafe_get(t, i);
     if(caml_call2(f, i, x)) return [0, [0, i, x]];
     var i$0 = caml_call2(Base_Import[91], i, 1), i = i$0;
    }
   }
   function t_sexp_grammar(grammar){
    var _c_ = caml_call1(Base_Array[6], grammar);
    return caml_call1(Sexplib0_Sexp_grammar[1], _c_);
   }
   var
    include =
      caml_call1
       (caml_call1(Base_Sexpable[2], [0, Base_Array[4], Base_Array[5]]),
        [0, to_array, of_array]),
    t_of_sexp = include[1],
    sexp_of_t = include[2];
   function create_like(len, t){
    if(0 === len) return empty;
    if(0 < caml_call1(length, t)) return create(len, get(t, 0));
    throw caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1);
   }
   var
    include$0 =
      caml_call1(Base_Blit[4], [0, create_like, length, unsafe_blit]),
    blit = include$0[1],
    blito = include$0[2],
    unsafe_blit$0 = include$0[3],
    sub$0 = include$0[4],
    subo = include$0[5];
   function min_elt(t, compare){
    return caml_call3(Base_Container[3], fold, t, compare);
   }
   function max_elt(t, compare){
    return caml_call3(Base_Container[4], fold, t, compare);
   }
   function compare_local(compare_elt, a, b){
    if(a === b) return 0;
    var
     len_a = caml_call1(length, a),
     len_b = caml_call1(length, b),
     ret = runtime.caml_int_compare(len_a, len_b);
    if(0 !== ret) return ret;
    var i = 0;
    for(;;){
     if(i === len_a) return 0;
     var
      l = unsafe_get_local(a, i),
      r = unsafe_get_local(b, i),
      res = caml_call2(compare_elt, l, r);
     if(0 !== res) return res;
     var i$0 = caml_call2(Base_Import[91], i, 1), i = i$0;
    }
   }
   function compare(compare_elt, a, b){
    return compare_local(compare_elt, a, b);
   }
   var
    Sort = caml_call1(Base_Array[109][2], [0, unsafe_get, unsafe_set, length]),
    sort = Sort[1],
    include$1 = caml_call1(Base_Binary_searchable[2], [0, unsafe_get, length]),
    binary_search = include$1[1],
    binary_search_segmented = include$1[2],
    Base_Uniform_array =
      [0,
       t_of_sexp,
       sexp_of_t,
       t_sexp_grammar,
       compare,
       compare_local,
       invariant,
       empty,
       create,
       singleton,
       init,
       length,
       get,
       unsafe_get,
       unsafe_get_local,
       set,
       unsafe_set,
       swap,
       unsafe_set_omit_phys_equal_che,
       unsafe_set_with_caml_modify,
       set_with_caml_modify,
       map,
       mapi,
       iter,
       iteri,
       fold,
       foldi,
       unsafe_to_array_inplace_promis,
       of_array,
       to_array,
       of_list,
       of_list_rev,
       to_list,
       blit,
       blito,
       unsafe_blit$0,
       sub$0,
       subo,
       copy,
       exists,
       existsi,
       for_all,
       for_alli,
       concat,
       concat_map,
       concat_mapi,
       partition_map,
       filter,
       filteri,
       filter_map,
       filter_mapi,
       find,
       findi,
       find_map,
       find_mapi,
       map2_exn,
       fold2_exn,
       min_elt,
       max_elt,
       sort,
       binary_search,
       binary_search_segmented,
       unsafe_create_uninitialized,
       create_obj_array,
       unsafe_set_assuming_currently_,
       unsafe_set_int_assuming_curren,
       unsafe_set_int,
       unsafe_clear_if_pointer];
   runtime.caml_register_global(18, Base_Uniform_array, "Base__Uniform_array");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Uchar_intf
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Base_Uchar_intf = [0];
   runtime.caml_register_global(0, Base_Uchar_intf, "Base__Uchar_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Uchar
//# unitInfo: Requires: Base__Bytes0, Base__Comparable, Base__Error, Base__Hash, Base__Hashable, Base__Import, Base__Pretty_printer, Base__Printf, Base__Sexp, Base__String0, Base__Uchar0, Base__Uchar_intf, Sexplib0__Sexp_grammar, Stdlib, Stdlib__Scanf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_U = "U+",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    module_name = "Base.Uchar",
    codec_name = "UTF-8",
    module_name$0 = "Base.Uchar.Utf8",
    codec_name$0 = "UTF-16LE",
    module_name$1 = "Base.Uchar.Utf16le",
    codec_name$1 = "UTF-16BE",
    module_name$2 = "Base.Uchar.Utf16be",
    codec_name$2 = "UTF-32LE",
    module_name$3 = "Base.Uchar.Utf32le",
    codec_name$3 = "UTF-32BE",
    module_name$4 = "Base.Uchar.Utf32be",
    Base_Sexp = global_data.Base__Sexp,
    Base_Error = global_data.Base__Error,
    Base_Bytes0 = global_data.Base__Bytes0,
    Assert_failure = global_data.Assert_failure,
    Base_Import = global_data.Base__Import,
    Base_Hashable = global_data.Base__Hashable,
    Base_Uchar0 = global_data.Base__Uchar0,
    Stdlib = global_data.Stdlib,
    Stdlib_Scanf = global_data.Stdlib__Scanf,
    Base_Printf = global_data.Base__Printf,
    Base_Hash = global_data.Base__Hash,
    Sexplib0_Sexp_grammar = global_data.Sexplib0__Sexp_grammar,
    Base_Pretty_printer = global_data.Base__Pretty_printer,
    Base_Comparable = global_data.Base__Comparable,
    Base_String0 = global_data.Base__String0,
    failwithf = Base_Printf[6],
    is_valid = Base_Uchar0[3],
    is_char = Base_Uchar0[4],
    unsafe_to_char = Base_Uchar0[5],
    unsafe_of_int = Base_Uchar0[6],
    to_int = Base_Uchar0[8],
    of_char = Base_Uchar0[9],
    compare = Base_Uchar0[10],
    min_value = Base_Uchar0[12],
    max_value = Base_Uchar0[13],
    byte_order_mark = Base_Uchar0[14],
    replacement_char = Base_Uchar0[15],
    utf_8_byte_length = Base_Uchar0[16],
    utf_16_byte_length = Base_Uchar0[17],
    cst_string = "string",
    _h_ = [0, "src/uchar.ml", 134, 4],
    cst_of_string_expected_a_singl =
      ".of_string: expected a single Unicode character",
    _g_ =
      [0,
       "Uchar.Decode_result.uchar_exn was called on an invalid decode result"],
    _f_ =
      [0,
       [11,
        "Uchar.to_char_exn got a non latin-1 character: U+",
        [4, 8, [0, 2, 4], 0, 0]],
       "Uchar.to_char_exn got a non latin-1 character: U+%04X"],
    _e_ =
      [0,
       [11,
        "Uchar.of_int_exn got a invalid Unicode scalar value: ",
        [4, 8, [0, 2, 4], 0, 0]],
       "Uchar.of_int_exn got a invalid Unicode scalar value: %04X"],
    _d_ = [0, [11, "Uchar.pred_exn: ", [2, 0, 0]], "Uchar.pred_exn: %s"],
    _c_ = [0, [11, "Uchar.succ_exn: ", [2, 0, 0]], "Uchar.succ_exn: %s"],
    _b_ = [0, [11, cst_U, [4, 8, 0, 0, 0]], "U+%X"],
    cst_Uchar_t_of_sexp_atom_of_th =
      "Uchar.t_of_sexp: atom of the form U+XXXX needed",
    cst_Uchar_t_of_sexp_atom_neede = "Uchar.t_of_sexp: atom needed",
    _a_ = [0, [11, cst_U, [4, 8, [0, 2, 4], 0, 0]], "U+%04X"];
   function hash_fold_t(state, t){
    var _y_ = caml_call1(to_int, t);
    return caml_call2(Base_Hash[3], state, _y_);
   }
   function hash(t){return caml_call3(Base_Hash[14], 0, hash_fold_t, t);}
   function to_string_internal(t){
    var _x_ = caml_call1(to_int, t);
    return caml_call2(Base_Printf[2], _a_, _x_);
   }
   function sexp_of_t(t){return [0, to_string_internal(t)];}
   function t_of_sexp(sexp){
    if(0 !== sexp[0])
     return caml_call2(Base_Import[156], cst_Uchar_t_of_sexp_atom_neede, sexp);
    var s = sexp[1];
    try{
     var
      _u_ = function(i){return caml_call1(Base_Uchar0[7], i);},
      _v_ = caml_call3(Stdlib_Scanf[5], s, _b_, _u_);
     return _v_;
    }
    catch(_w_){
     return caml_call2(Base_Import[156], cst_Uchar_t_of_sexp_atom_of_th, sexp);
    }
   }
   var
    t_sexp_grammar = caml_call1(Sexplib0_Sexp_grammar[1], Base_Import[182]),
    include =
      caml_call1(Base_Pretty_printer[2], [0, module_name, to_string_internal]),
    pp = include[1],
    include$0 = caml_call1(Base_Comparable[11], [0, compare, sexp_of_t]),
    between = include$0[13],
    clamp_exn = include$0[14],
    clamp = include$0[15],
    comparator = include$0[16];
   function invariant(param){return 0;}
   function succ_exn(c){
    try{var _t_ = caml_call1(Base_Uchar0[1], c); return _t_;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn[1] !== Stdlib[6]) throw caml_maybe_attach_backtrace(exn, 0);
     var msg = exn[2];
     return caml_call3(failwithf, _c_, msg, 0);
    }
   }
   function succ(c){
    try{var _r_ = [0, caml_call1(Base_Uchar0[1], c)]; return _r_;}
    catch(_s_){
     var _q_ = caml_wrap_exception(_s_);
     if(_q_[1] === Stdlib[6]) return 0;
     throw caml_maybe_attach_backtrace(_q_, 0);
    }
   }
   function pred_exn(c){
    try{var _p_ = caml_call1(Base_Uchar0[2], c); return _p_;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn[1] !== Stdlib[6]) throw caml_maybe_attach_backtrace(exn, 0);
     var msg = exn[2];
     return caml_call3(failwithf, _d_, msg, 0);
    }
   }
   function pred(c){
    try{var _n_ = [0, caml_call1(Base_Uchar0[2], c)]; return _n_;}
    catch(_o_){
     var _m_ = caml_wrap_exception(_o_);
     if(_m_[1] === Stdlib[6]) return 0;
     throw caml_maybe_attach_backtrace(_m_, 0);
    }
   }
   function of_scalar(i){
    return caml_call1(is_valid, i) ? [0, caml_call1(unsafe_of_int, i)] : 0;
   }
   function of_scalar_exn(i){
    return caml_call1(is_valid, i)
            ? caml_call1(unsafe_of_int, i)
            : caml_call3(failwithf, _e_, i, 0);
   }
   function to_scalar(t){return caml_call1(Base_Uchar0[8], t);}
   function to_char(c){
    return caml_call1(is_char, c) ? [0, caml_call1(unsafe_to_char, c)] : 0;
   }
   function to_char_exn(c){
    return caml_call1(is_char, c)
            ? caml_call1(unsafe_to_char, c)
            : caml_call3(failwithf, _f_, caml_call1(to_int, c), 0);
   }
   var compare$0 = runtime.caml_int_compare;
   function equal(_l_, _k_){return _l_ === _k_ ? 1 : 0;}
   function hash_fold_t$0(state, t){
    var _j_ = caml_call1(Base_Hashable[6], t);
    return caml_call2(Base_Import[206], state, _j_);
   }
   var
    hash$0 = Base_Hashable[6],
    is_valid$0 = Base_Uchar0[18],
    bytes_consumed = Base_Uchar0[20],
    uchar_or_replacement_char = Base_Uchar0[19];
   function sexp_of_t$0(t){
    return sexp_of_t(caml_call1(uchar_or_replacement_char, t));
   }
   function uchar(t){
    return caml_call1(is_valid$0, t)
            ? [0, caml_call1(uchar_or_replacement_char, t)]
            : 0;
   }
   function uchar_exn(t){
    return caml_call1(is_valid$0, t)
            ? caml_call1(uchar_or_replacement_char, t)
            : caml_call1(Base_Error[32], _g_);
   }
   function Make_utf(Format){
    var codec_name = Format[1], byte_length = Format[3];
    function to_string(t){
     var
      len = caml_call1(byte_length, t),
      bytes = caml_call1(Base_Bytes0[7], len),
      pos = caml_call3(Format[5], bytes, 0, t);
     if(pos === len) return runtime.caml_string_of_bytes(bytes);
     throw caml_maybe_attach_backtrace([0, Assert_failure, _h_], 1);
    }
    var
     of_string_message =
       caml_call2(Base_Import[112], Format[2], cst_of_string_expected_a_singl);
    function of_string(string){
     var
      decode = caml_call2(Format[4], string, 0),
      string_len = runtime.caml_ml_string_length(string),
      decode_len = caml_call1(bytes_consumed, decode);
     if(string_len === decode_len && caml_call1(is_valid$0, decode))
      return caml_call1(uchar_or_replacement_char, decode);
     var
      _i_ =
        caml_call2
         (Base_Sexp[10],
          of_string_message,
          [0, [0, cst_string, [0, string]], 0]);
     return caml_call1(Base_Error[32], _i_);
    }
    return [0, of_string, to_string, byte_length, codec_name];
   }
   var
    get_decode_result = Base_String0[15],
    set = Base_Bytes0[8],
    Utf8 =
      Make_utf
       ([0,
         codec_name,
         module_name$0,
         utf_8_byte_length,
         get_decode_result,
         set]),
    get_decode_result$0 = Base_String0[16],
    set$0 = Base_Bytes0[9],
    Utf16le =
      Make_utf
       ([0,
         codec_name$0,
         module_name$1,
         utf_16_byte_length,
         get_decode_result$0,
         set$0]),
    get_decode_result$1 = Base_String0[17],
    set$1 = Base_Bytes0[10],
    Utf16be =
      Make_utf
       ([0,
         codec_name$1,
         module_name$2,
         utf_16_byte_length,
         get_decode_result$1,
         set$1]);
   function byte_length(param){return 4;}
   var
    get_decode_result$2 = Base_String0[18],
    set$2 = Base_Bytes0[12],
    Utf32le =
      Make_utf
       ([0,
         codec_name$2,
         module_name$3,
         byte_length,
         get_decode_result$2,
         set$2]);
   function byte_length$0(param){return 4;}
   var
    get_decode_result$3 = Base_String0[19],
    set$3 = Base_Bytes0[13],
    Utf32be =
      Make_utf
       ([0,
         codec_name$3,
         module_name$4,
         byte_length$0,
         get_decode_result$3,
         set$3]),
    include$1 = Base_Import[107],
    symbol = include$1[1],
    symbol$0 = include$1[2],
    symbol$1 = include$1[3],
    symbol$2 = include$1[4],
    symbol$3 = include$1[5],
    symbol$4 = include$1[6],
    ascending = include$1[7],
    descending = include$1[8],
    compare$1 = include$1[9],
    equal$0 = include$1[10],
    compare_local = include$1[11],
    equal_local = include$1[12],
    max = include$1[13],
    min = include$1[14],
    Base_Uchar =
      [0,
       hash_fold_t,
       hash,
       t_of_sexp,
       sexp_of_t,
       t_sexp_grammar,
       symbol$4,
       symbol$0,
       symbol$2,
       symbol$3,
       symbol,
       symbol$1,
       equal$0,
       compare$1,
       min,
       max,
       ascending,
       descending,
       between,
       clamp_exn,
       clamp,
       comparator,
       compare_local,
       equal_local,
       pp,
       invariant,
       succ,
       succ_exn,
       pred,
       pred_exn,
       is_char,
       to_char,
       to_char_exn,
       of_char,
       is_valid,
       of_scalar,
       of_scalar_exn,
       to_scalar,
       utf_8_byte_length,
       utf_16_byte_length,
       min_value,
       max_value,
       byte_order_mark,
       replacement_char,
       [0,
        compare$0,
        equal,
        hash_fold_t$0,
        hash$0,
        sexp_of_t$0,
        is_valid$0,
        bytes_consumed,
        uchar,
        uchar_exn,
        uchar_or_replacement_char],
       Utf8,
       Utf16le,
       Utf16be,
       Utf32le,
       Utf32be];
   runtime.caml_register_global(38, Base_Uchar, "Base__Uchar");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Type_equal_intf
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function Type_equal_defns(Type_equal){
    function Composition_preserves_injectiv(M1, M2){
     function strip(e){
      var _a_ = caml_call1(M2[1], e);
      return caml_call1(M1[1], _a_);
     }
     return [0, strip];
    }
    return [0, Composition_preserves_injectiv];
   }
   function Type_equal_id_defns(Id){return [0];}
   var Base_Type_equal_intf = [0, Type_equal_defns, Type_equal_id_defns];
   runtime.caml_register_global
    (0, Base_Type_equal_intf, "Base__Type_equal_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Type_equal
//# unitInfo: Requires: Base__Comparable, Base__Error, Base__Hash, Base__Import, Base__Sexp, Base__Type_equal_intf, Stdlib__Obj
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_T = "T",
    caml_fresh_oo_id = runtime.caml_fresh_oo_id,
    caml_update_dummy = runtime.caml_update_dummy;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Base_Import = global_data.Base__Import,
    Base_Sexp = global_data.Base__Sexp,
    Base_Error = global_data.Base__Error,
    Stdlib_Obj = global_data.Stdlib__Obj,
    Base_Hash = global_data.Base__Hash,
    Base_Type_equal_intf = global_data.Base__Type_equal_intf,
    Base_Comparable = global_data.Base__Comparable,
    _g_ = [0, 0],
    cst_Base_Type_equal_Id_Create3 = "Base__Type_equal.Id.Create3(T).T3",
    _f_ = [0, 0],
    cst_Base_Type_equal_Id_Create2 = "Base__Type_equal.Id.Create2(T).T2",
    _e_ = [0, 0],
    cst_Base_Type_equal_Id_Create1 = "Base__Type_equal.Id.Create1(T).T1",
    _d_ = [0, 0],
    cst_Base_Type_equal_Id_Create0 = "Base__Type_equal.Id.Create0(T).T0",
    cst_Type_equal_Id_same_witness =
      "Type_equal.Id.same_witness_exn got different ids",
    _c_ = [0, cst_T],
    _b_ = [0, 0, 0],
    _a_ = [0, cst_T];
   function sexp_of_t(of_a_001, of_b_002, param){return _a_;}
   var
    include = caml_call1(Base_Type_equal_intf[1], [0]),
    Composition_preserves_injectiv = include[1],
    refl = 0;
   function sym(param){return 0;}
   function trans(param, _E_){return 0;}
   function conv(param, a){return a;}
   function Lift(X){function lift(param){return 0;} return [0, lift];}
   function Lift2(X){function lift(param, _D_){return 0;} return [0, lift];}
   function Lift3(X){
    function lift(param, _C_, _B_){return 0;}
    return [0, lift];
   }
   function detuple2(param){return _b_;}
   function tuple2(param, _A_){return 0;}
   function compare(a_005, b_006){
    if(a_005 === b_006) return 0;
    var
     b_010 = b_006[2],
     b_008 = b_006[1],
     a_009 = a_005[2],
     a_007 = a_005[1],
     n = caml_call2(Base_Import[228], a_007, b_008);
    return 0 === n ? caml_call3(Base_Import[236], compare, a_009, b_010) : n;
   }
   var
    hash_fold_t = function _z_(_x_, _y_){return _z_.fun(_x_, _y_);},
    hash = function _w_(_v_){return _w_.fun(_v_);};
   caml_update_dummy
    (hash_fold_t,
     function(hsv, arg){
      var
       a1 = arg[2],
       a0 = arg[1],
       hsv$0 = caml_call2(Base_Import[206], hsv, a0);
      return caml_call3(Base_Import[212], hash_fold_t, hsv$0, a1);
     });
   caml_update_dummy
    (hash,
     function(arg){
      var
       hsv = caml_call2(Base_Hash[11], 0, 0),
       _u_ = caml_call2(hash_fold_t, hsv, arg);
      return caml_call1(Base_Hash[9], _u_);
     });
   function sexp_of_t$0(param){
    var
     arg1_014 = param[2],
     arg0_013 = param[1],
     res0_015 = caml_call1(Base_Import[139], arg0_013),
     res1_016 = caml_call2(Base_Import[149], sexp_of_t$0, arg1_014);
    return [1, [0, _c_, [0, res0_015, [0, res1_016, 0]]]];
   }
   var
    include$0 = caml_call1(Base_Comparable[11], [0, compare, sexp_of_t$0]),
    symbol = include$0[1],
    symbol$0 = include$0[2],
    symbol$1 = include$0[3],
    symbol$2 = include$0[4],
    symbol$3 = include$0[5],
    symbol$4 = include$0[6],
    equal = include$0[7],
    compare$0 = include$0[8],
    min = include$0[9],
    max = include$0[10],
    ascending = include$0[11],
    descending = include$0[12],
    between = include$0[13],
    clamp_exn = include$0[14],
    clamp = include$0[15],
    comparator = include$0[16];
   function create(key, args){
    var
     _t_ = caml_call1(Stdlib_Obj[23][1], key),
     tag = caml_call1(Stdlib_Obj[23][3], _t_);
    return [0, tag, args];
   }
   function uid(A){return A[2];}
   function name(A){return A[3];}
   function sexp_of_t$1(param, A){return A[4];}
   function to_sexp(A){return A[1];}
   function hash$0(t){return caml_call1(hash, t[2]);}
   function hash_fold_t$0(state, t){
    return caml_call2(hash_fold_t, state, t[2]);
   }
   function same_witness(A, B){return caml_call1(A[6], B[5]);}
   function same_witness_exn(t1, t2){
    var match = same_witness(t1, t2);
    if(match){var equal = match[1]; return equal;}
    var _l_ = 0, _m_ = [0, t1, t2];
    function _n_(_s_){return _s_[4];}
    function _o_(_r_){return _r_[4];}
    var
     _p_ = [0, [0, cst, caml_call3(Base_Import[147], _o_, _n_, _m_)], _l_],
     _q_ = caml_call2(Base_Sexp[10], cst_Type_equal_Id_same_witness, _p_);
    return caml_call1(Base_Error[32], _q_);
   }
   function same(t1, t2){return same_witness(t1, t2) ? 1 : 0;}
   caml_call1(Base_Type_equal_intf[2], [0]);
   function Create0(T){
    var
     T0 = [248, cst_Base_Type_equal_Id_Create0, caml_fresh_oo_id(0)],
     id_name = T[2],
     id_sexp = [0, id_name],
     sexp_of_t = T[1],
     uid = create(T0, 0);
    function type_equal(otherkey){return otherkey === T0 ? _d_ : 0;}
    var type_equal_id = [0, sexp_of_t, uid, id_name, id_sexp, T0, type_equal];
    return [0, , type_equal_id];
   }
   function create$0(name, sexp_of_t){
    return Create0([0, sexp_of_t, name])[2];
   }
   function _h_(T){
    var T3 = [248, cst_Base_Type_equal_Id_Create3, caml_fresh_oo_id(0)];
    function type_equal_id(A, B, C){
     var
      id_name = T[2],
      id_sexp = [1, [0, [0, id_name], [0, A[4], [0, B[4], [0, C[4], 0]]]]];
     function sexp_of_t(t){return caml_call4(T[1], A[1], B[1], C[1], t);}
     var
      type_key = [0, T3, A[5], B[5], C[5]],
      uid = create(type_key, [0, A[2], [0, B[2], [0, C[2], 0]]]);
     function type_equal(otherkey){
      if(otherkey[1] !== T3) return 0;
      var
       ckey = otherkey[4],
       bkey = otherkey[3],
       akey = otherkey[2],
       match = caml_call1(A[6], akey),
       match$0 = caml_call1(B[6], bkey),
       match$1 = caml_call1(C[6], ckey);
      if(match && match$0 && match$1) return _g_;
      return 0;
     }
     return [0, sexp_of_t, uid, id_name, id_sexp, type_key, type_equal];
    }
    return [0, type_equal_id];
   }
   function _i_(T){
    var T2 = [248, cst_Base_Type_equal_Id_Create2, caml_fresh_oo_id(0)];
    function type_equal_id(A, B){
     var
      id_name = T[2],
      id_sexp = [1, [0, [0, id_name], [0, A[4], [0, B[4], 0]]]];
     function sexp_of_t(t){return caml_call3(T[1], A[1], B[1], t);}
     var
      type_key = [0, T2, A[5], B[5]],
      uid = create(type_key, [0, A[2], [0, B[2], 0]]);
     function type_equal(otherkey){
      if(otherkey[1] !== T2) return 0;
      var
       bkey = otherkey[3],
       akey = otherkey[2],
       match = caml_call1(A[6], akey),
       match$0 = caml_call1(B[6], bkey);
      if(match && match$0) return _f_;
      return 0;
     }
     return [0, sexp_of_t, uid, id_name, id_sexp, type_key, type_equal];
    }
    return [0, type_equal_id];
   }
   function _j_(T){
    var T1 = [248, cst_Base_Type_equal_Id_Create1, caml_fresh_oo_id(0)];
    function type_equal_id(A){
     var id_name = T[2], id_sexp = [1, [0, [0, id_name], [0, A[4], 0]]];
     function sexp_of_t(t){return caml_call2(T[1], A[1], t);}
     var type_key = [0, T1, A[5]], uid = create(type_key, [0, A[2], 0]);
     function type_equal(otherkey){
      if(otherkey[1] !== T1) return 0;
      var akey = otherkey[2];
      return caml_call1(A[6], akey) ? _e_ : 0;
     }
     return [0, sexp_of_t, uid, id_name, id_sexp, type_key, type_equal];
    }
    return [0, type_equal_id];
   }
   var
    Base_Type_equal =
      [0,
       sexp_of_t,
       Composition_preserves_injectiv,
       refl,
       sym,
       trans,
       conv,
       Lift,
       Lift2,
       Lift3,
       detuple2,
       tuple2,
       [0,
        sexp_of_t$1,
        [0,
         hash_fold_t,
         hash,
         sexp_of_t$0,
         symbol,
         symbol$0,
         symbol$1,
         symbol$2,
         symbol$3,
         symbol$4,
         equal,
         compare$0,
         min,
         max,
         ascending,
         descending,
         between,
         clamp_exn,
         clamp,
         comparator],
        uid,
        create$0,
        hash$0,
        name,
        to_sexp,
        hash_fold_t$0,
        same,
        same_witness,
        same_witness_exn,
        function(_k_){return [0, Create0(_k_)[2]];},
        _j_,
        _i_,
        _h_]];
   runtime.caml_register_global(20, Base_Type_equal, "Base__Type_equal");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Stack_intf
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Base_Stack_intf = [0];
   runtime.caml_register_global(0, Base_Stack_intf, "Base__Stack_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Option_array
//# unitInfo: Requires: Base__Array, Base__Blit, Base__Import, Base__Indexed_container, Base__Option, Base__Sexpable, Base__Uniform_array, Sexplib0__Sexp_grammar, Stdlib__Obj
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_Array = global_data.Base__Array,
    Base_Import = global_data.Base__Import,
    Base_Uniform_array = global_data.Base__Uniform_array,
    Base_Option = global_data.Base__Option,
    Sexplib0_Sexp_grammar = global_data.Sexplib0__Sexp_grammar,
    Stdlib_Obj = global_data.Stdlib__Obj,
    Base_Sexpable = global_data.Base__Sexpable,
    Base_Indexed_container = global_data.Base__Indexed_container,
    Base_Blit = global_data.Base__Blit,
    none_substitute = runtime.caml_obj_block(Stdlib_Obj[14], 1),
    cst_Option_array_get_some_exn_ =
      "Option_array.get_some_exn: the element is [None]",
    none = 24791911;
   function is_none(x){return x === 24791911 ? 1 : 0;}
   function is_some(x){return 1 - (x === 24791911 ? 1 : 0);}
   function some(x){return x === 24791911 ? none_substitute : x;}
   function value_unsafe(x){return x === none_substitute ? none : x;}
   function value_exn(x){
    return is_some(x)
            ? value_unsafe(x)
            : caml_call1(Base_Import[124], cst_Option_array_get_some_exn_);
   }
   function of_sexpable(param){
    if(! param) return none;
    var x = param[1];
    return some(x);
   }
   function to_sexpable(x){return is_some(x) ? [0, value_unsafe(x)] : 0;}
   var
    include =
      caml_call1
       (caml_call1(Base_Sexpable[2], [0, Base_Option[9], Base_Option[10]]),
        [0, to_sexpable, of_sexpable]),
    t_of_sexp = include[1],
    sexp_of_t = include[2];
   function t_of_sexp$0(of_a_001, x_003){
    var _A_ = caml_call1(t_of_sexp, of_a_001);
    return caml_call2(Base_Uniform_array[1], _A_, x_003);
   }
   function sexp_of_t$0(of_a_004, x_005){
    var _z_ = caml_call1(sexp_of_t, of_a_004);
    return caml_call2(Base_Uniform_array[2], _z_, x_005);
   }
   function t_sexp_grammar(a_sexp_grammar){
    var
     _x_ = caml_call1(Base_Option[5], a_sexp_grammar),
     _y_ = caml_call1(Sexplib0_Sexp_grammar[1], _x_);
    return caml_call1(Base_Uniform_array[3], _y_);
   }
   var empty = Base_Uniform_array[7];
   function create(len){return caml_call2(Base_Uniform_array[8], len, none);}
   function init(n, f){
    function _w_(i){return of_sexpable(caml_call1(f, i));}
    return caml_call2(Base_Uniform_array[10], n, _w_);
   }
   function init_some(n, f){
    function _v_(i){return some(caml_call1(f, i));}
    return caml_call2(Base_Uniform_array[10], n, _v_);
   }
   var _a_ = Base_Uniform_array[11];
   function get(t, i){
    return to_sexpable(caml_call2(Base_Uniform_array[12], t, i));
   }
   function get_local(t, i){
    var x = caml_call2(Base_Uniform_array[12], t, i);
    return is_some(x) ? [0, value_unsafe(x)] : 0;
   }
   function get_some_exn(t, i){
    return value_exn(caml_call2(Base_Uniform_array[12], t, i));
   }
   function is_none$0(t, i){
    return caml_call2(Base_Uniform_array[12], t, i) === 24791911 ? 1 : 0;
   }
   function is_some$0(t, i){
    return is_some(caml_call2(Base_Uniform_array[12], t, i));
   }
   function set(t, i, x){
    var _u_ = of_sexpable(x);
    return caml_call3(Base_Uniform_array[15], t, i, _u_);
   }
   function set_some(t, i, x){
    var _t_ = some(x);
    return caml_call3(Base_Uniform_array[15], t, i, _t_);
   }
   function set_none(t, i){
    return caml_call3(Base_Uniform_array[15], t, i, none);
   }
   function swap(t, i, j){return caml_call3(Base_Uniform_array[17], t, i, j);}
   function unsafe_get(t, i){
    return to_sexpable(caml_call2(Base_Uniform_array[13], t, i));
   }
   function unsafe_get_some_exn(t, i){
    return value_exn(caml_call2(Base_Uniform_array[13], t, i));
   }
   function unsafe_get_some_assuming_some(t, i){
    return value_unsafe(caml_call2(Base_Uniform_array[13], t, i));
   }
   function unsafe_is_some(t, i){
    return is_some(caml_call2(Base_Uniform_array[13], t, i));
   }
   function unsafe_set(t, i, x){
    var _s_ = of_sexpable(x);
    return caml_call3(Base_Uniform_array[16], t, i, _s_);
   }
   function unsafe_set_some(t, i, x){
    var _r_ = some(x);
    return caml_call3(Base_Uniform_array[16], t, i, _r_);
   }
   function unsafe_set_none(t, i){
    return caml_call3(Base_Uniform_array[16], t, i, none);
   }
   function clear(t){
    var
     _o_ = caml_call1(_a_, t),
     _p_ = caml_call2(Base_Import[93], _o_, 1),
     _n_ = 0;
    if(_p_ >= 0){
     var i = _n_;
     for(;;){
      unsafe_set_none(t, i);
      var _q_ = i + 1 | 0;
      if(_p_ === i) break;
      var i = _q_;
     }
    }
    return 0;
   }
   function _b_(input, f){
    var
     _k_ = caml_call1(_a_, input),
     _l_ = caml_call2(Base_Import[93], _k_, 1),
     _j_ = 0;
    if(_l_ >= 0){
     var i = _j_;
     for(;;){
      caml_call2(f, i, unsafe_get(input, i));
      var _m_ = i + 1 | 0;
      if(_l_ === i) break;
      var i = _m_;
     }
    }
    return 0;
   }
   function _c_(input, f){
    return _b_(input, function(param, x){return caml_call1(f, x);});
   }
   function _d_(input, init, f){
    var acc = [0, init];
    _b_
     (input,
      function(i, elem){acc[1] = caml_call3(f, i, acc[1], elem); return 0;});
    return acc[1];
   }
   function fold(input, init, f){
    return _d_
            (input,
             init,
             function(param, acc, x){return caml_call2(f, acc, x);});
   }
   var
    foldi = [0, -198771759, _d_],
    iter = [0, -198771759, _c_],
    iteri = [0, -198771759, _b_],
    length = [0, -198771759, _a_],
    include$0 =
      caml_call1
       (Base_Indexed_container[10], [0, fold, iter, length, iteri, foldi]),
    is_empty = include$0[2],
    mem = include$0[3],
    iter$0 = include$0[4],
    fold$0 = include$0[5],
    fold_result = include$0[6],
    fold_until = include$0[7],
    exists = include$0[8],
    for_all = include$0[9],
    count = include$0[10],
    sum = include$0[11],
    find = include$0[12],
    find_map = include$0[13],
    to_list = include$0[14],
    min_elt = include$0[16],
    max_elt = include$0[17],
    foldi$0 = include$0[18],
    iteri$0 = include$0[19],
    existsi = include$0[20],
    for_alli = include$0[21],
    counti = include$0[22],
    findi = include$0[23],
    find_mapi = include$0[24],
    length$0 = Base_Uniform_array[11];
   function map(input, f){
    var output = create(caml_call1(length$0, input));
    caml_call2
     (iteri$0,
      input,
      function(i, elem){return unsafe_set(output, i, caml_call1(f, elem));});
    return output;
   }
   function map_some(input, f){
    var
     len = caml_call1(length$0, input),
     output = create(len),
     _h_ = caml_call2(Base_Import[93], len, 1),
     _g_ = 0;
    if(_h_ >= 0){
     var i = _g_;
     for(;;){
      var opt = caml_call2(Base_Uniform_array[13], input, i);
      if(is_some(opt)){
       var x = value_unsafe(opt);
       unsafe_set_some(output, i, caml_call1(f, x));
      }
      var _i_ = i + 1 | 0;
      if(_h_ === i) break;
      var i = _i_;
     }
    }
    return output;
   }
   function of_array(array){
    return init(array.length - 1, function(i){return array[1 + i];});
   }
   function of_array_some(array){
    return init_some(array.length - 1, function(i){return array[1 + i];});
   }
   function to_array(t){
    function _e_(i){return unsafe_get(t, i);}
    var _f_ = caml_call1(length$0, t);
    return caml_call2(Base_Array[41], _f_, _e_);
   }
   function create_like(len, param){return create(len);}
   var
    unsafe_blit = Base_Uniform_array[35],
    include$1 =
      caml_call1(Base_Blit[5], [0, create_like, length$0, unsafe_blit]),
    blit = include$1[1],
    blito = include$1[2],
    unsafe_blit$0 = include$1[3],
    sub = include$1[4],
    subo = include$1[5],
    copy = Base_Uniform_array[38],
    Base_Option_array =
      [0,
       t_of_sexp$0,
       sexp_of_t$0,
       t_sexp_grammar,
       empty,
       create,
       is_empty,
       mem,
       iter$0,
       fold$0,
       fold_result,
       fold_until,
       exists,
       for_all,
       count,
       sum,
       find,
       find_map,
       to_list,
       min_elt,
       max_elt,
       foldi$0,
       iteri$0,
       existsi,
       for_alli,
       counti,
       findi,
       find_mapi,
       length$0,
       init_some,
       init,
       of_array,
       of_array_some,
       to_array,
       get,
       get_local,
       get_some_exn,
       is_none$0,
       is_some$0,
       unsafe_get,
       unsafe_get_some_exn,
       unsafe_get_some_assuming_some,
       unsafe_is_some,
       set,
       set_some,
       set_none,
       swap,
       clear,
       map,
       map_some,
       unsafe_set,
       unsafe_set_some,
       unsafe_set_none,
       blit,
       blito,
       unsafe_blit$0,
       sub,
       subo,
       copy,
       [0,
        [0,
         t_of_sexp,
         sexp_of_t,
         none,
         some,
         is_none,
         is_some,
         value_exn,
         value_unsafe,
         to_sexpable,
         of_sexpable]]];
   runtime.caml_register_global(10, Base_Option_array, "Base__Option_array");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Stack
//# unitInfo: Requires: Base__Container, Base__Error, Base__Exn, Base__Import, Base__List, Base__Option_array, Base__Sexp, Base__Stack_intf, Sexplib0__Sexp_grammar
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_src_stack_ml = "src/stack.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_Import = global_data.Base__Import,
    Base_Option_array = global_data.Base__Option_array,
    Base_Exn = global_data.Base__Exn,
    Base_Error = global_data.Base__Error,
    Base_List = global_data.Base__List,
    Sexplib0_Sexp_grammar = global_data.Sexplib0__Sexp_grammar,
    Assert_failure = global_data.Assert_failure,
    Base_Sexp = global_data.Base__Sexp,
    Base_Container = global_data.Base__Container,
    raise_s = Base_Error[32],
    _e_ = [0, cst_src_stack_ml, 109, 14],
    _d_ = [0, cst_src_stack_ml, 41, 4],
    _c_ = [0, cst_src_stack_ml, 48, 6],
    cst_stack = "stack",
    cst_exn = "exn",
    cst_Stack_invariant_failed = "Stack.invariant failed",
    _a_ = [0, "elts"],
    _b_ = [0, "length"],
    cst_Stack_pop_of_empty_stack = "Stack.pop of empty stack",
    cst_Stack_top_of_empty_stack = "Stack.top of empty stack";
   function capacity(t){return caml_call1(Base_Option_array[28], t[2]);}
   function invariant(invariant_a, t){
    var length = t[1], elts = t[2];
    try{
     if(0 <= length && length <= caml_call1(Base_Option_array[28], elts)){
      var _P_ = caml_call2(Base_Import[93], length, 1), _O_ = 0;
      if(_P_ >= 0){
       var i$0 = _O_;
       for(;;){
        caml_call1(invariant_a, caml_call2(Base_Option_array[36], elts, i$0));
        var _U_ = i$0 + 1 | 0;
        if(_P_ === i$0) break;
        var i$0 = _U_;
       }
      }
      var
       _Q_ = caml_call1(Base_Option_array[28], elts),
       _R_ = caml_call2(Base_Import[93], _Q_, 1);
      if(_R_ >= length){
       var i = length;
       for(;;){
        if(caml_call2(Base_Option_array[38], elts, i))
         throw caml_maybe_attach_backtrace([0, Assert_failure, _c_], 1);
        var _T_ = i + 1 | 0;
        if(_R_ === i) break;
        var i = _T_;
       }
      }
      var _S_ = 0;
      return _S_;
     }
     throw caml_maybe_attach_backtrace([0, Assert_failure, _d_], 1);
    }
    catch(exn$0){
     var
      exn = caml_wrap_exception(exn$0),
      of_a_001 = Base_Import[152],
      length_003 = t[1],
      elts_005 = t[2],
      arg_006 = caml_call2(Base_Option_array[2], of_a_001, elts_005),
      bnds_002 = [0, [1, [0, _a_, [0, arg_006, 0]]], 0],
      arg_004 = caml_call1(Base_Import[139], length_003),
      bnds_002$0 = [0, [1, [0, _b_, [0, arg_004, 0]]], bnds_002],
      _N_ =
        [0,
         [0, cst_exn, caml_call1(Base_Exn[1], exn)],
         [0, [0, cst_stack, [1, bnds_002$0]], 0]];
     return caml_call1
             (raise_s,
              caml_call2(Base_Sexp[10], cst_Stack_invariant_failed, _N_));
    }
   }
   function create(param){return [0, 0, Base_Option_array[4]];}
   function length(t){return t[1];}
   function is_empty(t){return 0 === t[1] ? 1 : 0;}
   function fold(t, init, f){
    var r = [0, init], _K_ = caml_call2(Base_Import[93], t[1], 1);
    if(_K_ >= 0){
     var i = _K_;
     for(;;){
      var _L_ = caml_call2(Base_Option_array[36], t[2], i);
      r[1] = caml_call2(f, r[1], _L_);
      var _M_ = i - 1 | 0;
      if(0 === i) break;
      var i = _M_;
     }
    }
    return r[1];
   }
   function iter(t, f){
    var _I_ = caml_call2(Base_Import[93], t[1], 1);
    if(_I_ >= 0){
     var i = _I_;
     for(;;){
      caml_call1(f, caml_call2(Base_Option_array[36], t[2], i));
      var _J_ = i - 1 | 0;
      if(0 === i) break;
      var i = _J_;
     }
    }
    return 0;
   }
   var
    iter$0 = [0, -198771759, iter],
    length$0 = [0, -198771759, length],
    C = caml_call1(Base_Container[17], [0, fold, iter$0, length$0]),
    mem = C[1],
    exists = C[8],
    for_all = C[9],
    count = C[10],
    sum = C[11],
    find = C[12],
    find_map = C[13],
    to_list = C[14],
    to_array = C[15],
    min_elt = C[16],
    max_elt = C[17],
    fold_result = C[6],
    fold_until = C[7];
   function of_list(l){
    if(caml_call1(Base_List[18], l)) return create(0);
    var
     length = caml_call1(Base_List[45], l),
     _F_ = caml_call2(Base_Import[88], 2, length),
     elts = caml_call1(Base_Option_array[5], _F_),
     r = [0, l],
     _G_ = caml_call2(Base_Import[93], length, 1);
    if(_G_ >= 0){
     var i = _G_;
     for(;;){
      var match = r[1];
      if(! match)
       throw caml_maybe_attach_backtrace([0, Assert_failure, _e_], 1);
      var l$0 = match[2], a = match[1];
      caml_call3(Base_Option_array[44], elts, i, a);
      r[1] = l$0;
      var _H_ = i - 1 | 0;
      if(0 === i) break;
      var i = _H_;
     }
    }
    return [0, length, elts];
   }
   function sexp_of_t(sexp_of_a, t){
    var _E_ = caml_call1(to_list, t);
    return caml_call2(Base_List[6], sexp_of_a, _E_);
   }
   function t_of_sexp(a_of_sexp, sexp){
    return of_list(caml_call2(Base_List[5], a_of_sexp, sexp));
   }
   function t_sexp_grammar(grammar){
    var _D_ = caml_call1(Base_List[7], grammar);
    return caml_call1(Sexplib0_Sexp_grammar[1], _D_);
   }
   function resize(t, size){
    var arr = caml_call1(Base_Option_array[5], size);
    caml_call5(Base_Option_array[53], t[2], 0, arr, 0, t[1]);
    t[2] = arr;
    return 0;
   }
   function set_capacity(t, new_capacity){
    var
     new_capacity$0 = caml_call2(Base_Import[100], new_capacity, t[1]),
     _C_ = new_capacity$0 !== capacity(t) ? 1 : 0;
    return _C_ ? resize(t, new_capacity$0) : _C_;
   }
   function push(t, a){
    var _A_ = caml_call1(Base_Option_array[28], t[2]);
    if(t[1] === _A_){
     var _B_ = caml_call2(Base_Import[91], t[1], 1);
     resize(t, caml_call2(Base_Import[88], 2, _B_));
    }
    caml_call3(Base_Option_array[44], t[2], t[1], a);
    t[1] = caml_call2(Base_Import[91], t[1], 1);
    return 0;
   }
   function pop_nonempty(t){
    var
     i = caml_call2(Base_Import[93], t[1], 1),
     result = caml_call2(Base_Option_array[36], t[2], i);
    caml_call2(Base_Option_array[45], t[2], i);
    t[1] = i;
    return result;
   }
   var pop_error = caml_call1(Base_Error[14], cst_Stack_pop_of_empty_stack);
   function pop(t){return is_empty(t) ? 0 : [0, pop_nonempty(t)];}
   function pop_exn(t){
    return is_empty(t)
            ? caml_call1(Base_Error[31], pop_error)
            : pop_nonempty(t);
   }
   function top_nonempty(t){
    var _z_ = caml_call2(Base_Import[93], t[1], 1);
    return caml_call2(Base_Option_array[36], t[2], _z_);
   }
   var top_error = caml_call1(Base_Error[14], cst_Stack_top_of_empty_stack);
   function top(t){return is_empty(t) ? 0 : [0, top_nonempty(t)];}
   function top_exn(t){
    return is_empty(t)
            ? caml_call1(Base_Error[31], top_error)
            : top_nonempty(t);
   }
   function copy(param){
    var length = param[1], elts = param[2];
    return [0, length, caml_call1(Base_Option_array[58], elts)];
   }
   function clear(t){
    var _u_ = 0 < t[1] ? 1 : 0;
    if(_u_){
     var _w_ = caml_call2(Base_Import[93], t[1], 1), _v_ = 0;
     if(_w_ >= 0){
      var i = _v_;
      for(;;){
       caml_call2(Base_Option_array[45], t[2], i);
       var _y_ = i + 1 | 0;
       if(_w_ === i) break;
       var i = _y_;
      }
     }
     t[1] = 0;
     var _x_ = 0;
    }
    else
     var _x_ = _u_;
    return _x_;
   }
   function until_empty(t, f){
    for(;;){
     var _t_ = 0 < t[1] ? 1 : 0;
     if(! _t_) return _t_;
     caml_call1(f, pop_nonempty(t));
    }
   }
   function filter_map(t, f){
    var
     t_result = create(0),
     _r_ = caml_call2(Base_Import[93], t[1], 1),
     _q_ = 0;
    if(_r_ >= 0){
     var i = _q_;
     for(;;){
      var match = caml_call1(f, caml_call2(Base_Option_array[36], t[2], i));
      if(match){var x = match[1]; push(t_result, x);}
      var _s_ = i + 1 | 0;
      if(_r_ === i) break;
      var i = _s_;
     }
    }
    return t_result;
   }
   function filter(t, f){
    var
     t_result = create(0),
     _o_ = caml_call2(Base_Import[93], t[1], 1),
     _n_ = 0;
    if(_o_ >= 0){
     var i = _n_;
     for(;;){
      var x = caml_call2(Base_Option_array[36], t[2], i);
      if(caml_call1(f, x)) push(t_result, x);
      var _p_ = i + 1 | 0;
      if(_o_ === i) break;
      var i = _p_;
     }
    }
    return t_result;
   }
   function filter_inplace(t, f){
    var write_index = [0, 0];
    function _f_(param){
     var _k_ = write_index[1], _l_ = caml_call2(Base_Import[93], t[1], 1);
     if(_l_ >= _k_){
      var i = _k_;
      for(;;){
       caml_call2(Base_Option_array[52], t[2], i);
       var _m_ = i + 1 | 0;
       if(_l_ === i) break;
       var i = _m_;
      }
     }
     t[1] = write_index[1];
     return 0;
    }
    function _g_(param){
     var _i_ = caml_call2(Base_Import[93], t[1], 1), _h_ = 0;
     if(_i_ >= 0){
      var read_index = _h_;
      for(;;){
       var x = caml_call2(Base_Option_array[41], t[2], read_index);
       if(caml_call1(f, x)){
        if(write_index[1] < read_index)
         caml_call3(Base_Option_array[51], t[2], write_index[1], x);
        write_index[1]++;
       }
       var _j_ = read_index + 1 | 0;
       if(_i_ === read_index) break;
       var read_index = _j_;
      }
     }
     return 0;
    }
    return caml_call2(Base_Exn[13], _g_, _f_);
   }
   function singleton(x){var t = create(0); push(t, x); return t;}
   var
    Base_Stack =
      [0,
       t_of_sexp,
       sexp_of_t,
       t_sexp_grammar,
       invariant,
       mem,
       length,
       is_empty,
       iter,
       fold,
       fold_result,
       fold_until,
       exists,
       for_all,
       count,
       sum,
       find,
       find_map,
       to_list,
       to_array,
       min_elt,
       max_elt,
       of_list,
       create,
       singleton,
       push,
       pop,
       pop_exn,
       top,
       top_exn,
       clear,
       copy,
       until_empty,
       filter_map,
       filter,
       filter_inplace,
       capacity,
       set_capacity];
   runtime.caml_register_global(19, Base_Stack, "Base__Stack");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Source_code_position
//# unitInfo: Requires: Base__Comparable, Base__Import, Base__Int, Base__Source_code_position0, Base__String
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_Import = global_data.Base__Import,
    Base_Int = global_data.Base__Int,
    Base_Source_code_position0 = global_data.Base__Source_code_position0,
    Base_Comparable = global_data.Base__Comparable;
   function hash_override(param){
    var
     pos_cnum = param[4],
     pos_bol = param[3],
     pos_lnum = param[2],
     pos_fname = param[1],
     _b_ = caml_call1(Base_Int[8], pos_cnum),
     _c_ = caml_call1(Base_Int[8], pos_bol),
     _d_ = caml_call1(Base_Int[8], pos_lnum),
     _e_ = runtime.Base_hash_string(pos_fname),
     _f_ = caml_call2(Base_Import[121], _e_, _d_),
     _g_ = caml_call2(Base_Import[121], _f_, _c_);
    return caml_call2(Base_Import[121], _g_, _b_);
   }
   var
    compare_local = Base_Source_code_position0[2],
    hash_fold_t = Base_Source_code_position0[4],
    comparator = Base_Source_code_position0[6],
    to_string = Base_Source_code_position0[8],
    sexp_of_t = Base_Source_code_position0[9],
    include = caml_call1(Base_Comparable[12], [0, sexp_of_t, comparator]),
    symbol = include[1],
    symbol$0 = include[2],
    symbol$1 = include[3],
    symbol$2 = include[4],
    symbol$3 = include[5],
    symbol$4 = include[6],
    equal = include[7],
    compare = include[8],
    min = include[9],
    max = include[10],
    ascending = include[11],
    descending = include[12],
    between = include[13],
    clamp_exn = include[14],
    clamp = include[15],
    comparator$0 = include[16];
   function equal_local(a, b){
    var _a_ = caml_call2(compare_local, a, b);
    return caml_call2(Base_Import[242], _a_, 0);
   }
   function of_pos(param){
    var pos_cnum = param[3], pos_lnum = param[2], pos_fname = param[1];
    return [0, pos_fname, pos_lnum, 0, pos_cnum];
   }
   var
    Base_Source_code_position =
      [0,
       hash_fold_t,
       hash_override,
       sexp_of_t,
       symbol,
       symbol$0,
       symbol$1,
       symbol$2,
       symbol$3,
       symbol$4,
       equal,
       compare,
       min,
       max,
       ascending,
       descending,
       between,
       clamp_exn,
       clamp,
       comparator$0,
       equal_local,
       compare_local,
       to_string,
       of_pos];
   runtime.caml_register_global
    (4, Base_Source_code_position, "Base__Source_code_position");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Sign_or_nan
//# unitInfo: Requires: Base__Hash, Base__Identifiable, Base__Import, Base__Poly0, Base__Sign, Sexplib0__Sexp_conv_error
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Nan = "Nan",
    cst_Neg = "Neg",
    cst_Pos = "Pos",
    cst_Zero = "Zero",
    cst_nan = "nan",
    cst_neg = "neg",
    cst_pos = "pos",
    cst_zero$0 = "zero",
    caml_int_compare = runtime.caml_int_compare,
    caml_string_notequal = runtime.caml_string_notequal;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    error_source_003 = "sign_or_nan.ml.T.t",
    t_sexp_grammar =
      [3,
       [0,
        2,
        [0,
         [1, [0, cst_Neg, 0]],
         [0,
          [1, [0, cst_Zero, 0]],
          [0, [1, [0, cst_Pos, 0]], [0, [1, [0, cst_Nan, 0]], 0]]]]]],
    all = [0, 0, [0, 1, [0, 2, [0, 3, 0]]]],
    module_name = "Base.Sign_or_nan",
    Base_Sign = global_data.Base__Sign,
    Base_Import = global_data.Base__Import,
    Base_Poly0 = global_data.Base__Poly0,
    Base_Hash = global_data.Base__Hash,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Base_Identifiable = global_data.Base__Identifiable,
    cst_negative = "negative",
    cst_zero = cst_zero$0,
    cst_positive = "positive",
    cst_not_a_number = "not-a-number",
    cst_Base_Sign_or_nan_to_sign_e = "Base.Sign_or_nan.to_sign_exn: Nan",
    _a_ = [0, cst_Neg],
    _b_ = [0, cst_Zero],
    _c_ = [0, cst_Pos],
    _d_ = [0, cst_Nan];
   function t_of_sexp(sexp_004){
    a:
    {
     if(0 === sexp_004[0]){
      var _l_ = sexp_004[1];
      b:
      if(caml_string_notequal(_l_, cst_Nan)){
       c:
       if(caml_string_notequal(_l_, cst_Neg)){
        d:
        if(caml_string_notequal(_l_, cst_Pos)){
         if(caml_string_notequal(_l_, cst_Zero)){
          if(! caml_string_notequal(_l_, cst_nan)) break b;
          if(! caml_string_notequal(_l_, cst_neg)) break c;
          if(! caml_string_notequal(_l_, cst_pos)) break d;
          if(caml_string_notequal(_l_, cst_zero$0)) break a;
         }
         return 1;
        }
        return 2;
       }
       return 0;
      }
      return 3;
     }
     var _m_ = sexp_004[1];
     if(! _m_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_003, sexp_004);
     var _n_ = _m_[1];
     if(0 !== _n_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_003, sexp_004);
     var _o_ = _n_[1];
     b:
     if(caml_string_notequal(_o_, cst_Nan)){
      c:
      if(caml_string_notequal(_o_, cst_Neg)){
       d:
       if(caml_string_notequal(_o_, cst_Pos)){
        if(caml_string_notequal(_o_, cst_Zero)){
         if(! caml_string_notequal(_o_, cst_nan)) break b;
         if(! caml_string_notequal(_o_, cst_neg)) break c;
         if(! caml_string_notequal(_o_, cst_pos)) break d;
         if(caml_string_notequal(_o_, cst_zero$0)) break a;
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_003, sexp_004);
   }
   function sexp_of_t(param){
    switch(param){
      case 0:
       return _a_;
      case 1:
       return _b_;
      case 2:
       return _c_;
      default: return _d_;
    }
   }
   var compare = caml_int_compare;
   function hash_fold_t(hsv, arg){
    switch(arg){
      case 0:
       var _k_ = 0; break;
      case 1:
       var _k_ = 1; break;
      case 2:
       var _k_ = 2; break;
      default: var _k_ = 3;
    }
    return caml_call2(Base_Hash[3], hsv, _k_);
   }
   function hash(arg){
    var hsv = caml_call2(Base_Hash[11], 0, 0), _j_ = hash_fold_t(hsv, arg);
    return caml_call1(Base_Hash[9], _j_);
   }
   function of_string(s){return t_of_sexp(caml_call1(Base_Import[136], s));}
   function to_string(t){
    var _i_ = sexp_of_t(t);
    return caml_call1(Base_Import[160], _i_);
   }
   function symbol(x, y){return x < y ? 1 : 0;}
   function symbol$0(x, y){return x <= y ? 1 : 0;}
   function symbol$1(x, y){return x !== y ? 1 : 0;}
   function symbol$2(x, y){return x === y ? 1 : 0;}
   function symbol$3(x, y){return y < x ? 1 : 0;}
   function symbol$4(x, y){return y <= x ? 1 : 0;}
   function ascending(x, y){return caml_call2(Base_Poly0[1], x, y);}
   function descending(x, y){return caml_call2(Base_Poly0[2], x, y);}
   var compare$0 = caml_int_compare, compare_local = caml_int_compare;
   function equal(x, y){return x === y ? 1 : 0;}
   function equal_local(x, y){return x === y ? 1 : 0;}
   function max(x, y){return y <= x ? x : y;}
   function min(x, y){return x <= y ? x : y;}
   var
    _e_ =
      caml_call1
       (Base_Identifiable[1],
        [0,
         compare,
         hash_fold_t,
         hash,
         t_of_sexp,
         sexp_of_t,
         of_string,
         to_string,
         module_name]),
    hash_fold_t$0 = _e_[1],
    hash$0 = _e_[2],
    t_of_sexp$0 = _e_[3],
    sexp_of_t$0 = _e_[4],
    of_string$0 = _e_[5],
    to_string$0 = _e_[6],
    between = _e_[19],
    clamp_exn = _e_[20],
    clamp = _e_[21],
    comparator = _e_[22],
    pp = _e_[23],
    hashable = _e_[24];
   function of_sign(param){
    switch(param){case 0: return 0;case 1: return 1;default: return 2;
    }
   }
   function to_sign_exn(param){
    switch(param){
      case 0:
       return 0;
      case 1:
       return 1;
      case 2:
       return 2;
      default:
       return caml_call1(Base_Import[126], cst_Base_Sign_or_nan_to_sign_e);
    }
   }
   function of_int(n){return of_sign(caml_call1(Base_Sign[30], n));}
   function to_int_exn(t){
    var _h_ = to_sign_exn(t);
    return caml_call1(Base_Sign[31], _h_);
   }
   function flip(param){
    switch(param){
      case 0:
       return 2;
      case 1:
       return 1;
      case 2:
       return 0;
      default: return 3;
    }
   }
   function symbol$5(t$0, t){
    if(3 > t$0 && 3 > t){
     var _f_ = to_sign_exn(t), _g_ = to_sign_exn(t$0);
     return of_sign(caml_call2(Base_Sign[34], _g_, _f_));
    }
    return 3;
   }
   function to_string_hum(param){
    switch(param){
      case 0:
       return cst_negative;
      case 1:
       return cst_zero;
      case 2:
       return cst_positive;
      default: return cst_not_a_number;
    }
   }
   var
    Base_Sign_or_nan =
      [0,
       all,
       t_sexp_grammar,
       hash_fold_t$0,
       hash$0,
       t_of_sexp$0,
       sexp_of_t$0,
       of_string$0,
       to_string$0,
       symbol$4,
       symbol$0,
       symbol$2,
       symbol$3,
       symbol,
       symbol$1,
       equal,
       compare$0,
       min,
       max,
       ascending,
       descending,
       between,
       clamp_exn,
       clamp,
       comparator,
       pp,
       hashable,
       compare_local,
       equal_local,
       to_string_hum,
       of_int,
       to_int_exn,
       of_sign,
       to_sign_exn,
       flip,
       symbol$5];
   runtime.caml_register_global(35, Base_Sign_or_nan, "Base__Sign_or_nan");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Sexp_with_comparable
//# unitInfo: Requires: Base__Comparable, Base__Sexp
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_Sexp = global_data.Base__Sexp,
    Base_Comparable = global_data.Base__Comparable,
    _a_ = caml_call1(Base_Comparable[11], [0, Base_Sexp[7], Base_Sexp[5]]),
    symbol = _a_[1],
    symbol$0 = _a_[2],
    symbol$1 = _a_[3],
    symbol$2 = _a_[4],
    symbol$3 = _a_[5],
    symbol$4 = _a_[6],
    min = _a_[9],
    max = _a_[10],
    ascending = _a_[11],
    descending = _a_[12],
    between = _a_[13],
    clamp_exn = _a_[14],
    clamp = _a_[15],
    comparator = _a_[16],
    globalize = Base_Sexp[1],
    hash_fold_t = Base_Sexp[2],
    hash = Base_Sexp[3],
    t_of_sexp = Base_Sexp[4],
    sexp_of_t = Base_Sexp[5],
    equal = Base_Sexp[6],
    compare = Base_Sexp[7],
    Not_found_s = Base_Sexp[8],
    Of_sexp_error = Base_Sexp[9],
    message = Base_Sexp[10],
    default_indent = Base_Sexp[11],
    pp_hum = Base_Sexp[12],
    pp_hum_indent = Base_Sexp[13],
    pp_mach = Base_Sexp[14],
    pp = Base_Sexp[15],
    to_string_hum = Base_Sexp[16],
    to_string_mach = Base_Sexp[17],
    to_string = Base_Sexp[18],
    of_float_style = Base_Sexp[19],
    of_int_style = Base_Sexp[20],
    equal_local = Base_Sexp[22],
    compare_local = Base_Sexp[23],
    t_sexp_grammar = Base_Sexp[24],
    invariant = Base_Sexp[25],
    of_string = Base_Sexp[26],
    Base_Sexp_with_comparable =
      [0,
       globalize,
       hash_fold_t,
       hash,
       t_of_sexp,
       sexp_of_t,
       Not_found_s,
       Of_sexp_error,
       message,
       default_indent,
       pp_hum,
       pp_hum_indent,
       pp_mach,
       pp,
       to_string_hum,
       to_string_mach,
       to_string,
       of_float_style,
       of_int_style,
       t_sexp_grammar,
       invariant,
       of_string,
       symbol,
       symbol$0,
       symbol$1,
       symbol$2,
       symbol$3,
       symbol$4,
       equal,
       compare,
       min,
       max,
       ascending,
       descending,
       between,
       clamp_exn,
       clamp,
       comparator,
       compare_local,
       equal_local];
   runtime.caml_register_global
    (2, Base_Sexp_with_comparable, "Base__Sexp_with_comparable");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Dictionary_immutable_intf
(function(globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Definitions = [0],
    Base_Dictionary_immutable_intf = [0, Definitions];
   runtime.caml_register_global
    (0, Base_Dictionary_immutable_intf, "Base__Dictionary_immutable_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Dictionary_immutable
//# unitInfo: Requires: Base__Dictionary_immutable_intf
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Base_Dictionary_immutable = [0];
   runtime.caml_register_global
    (0, Base_Dictionary_immutable, "Base__Dictionary_immutable");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Hasher
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Base_Hasher = [0];
   runtime.caml_register_global(0, Base_Hasher, "Base__Hasher");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Maybe_bound
//# unitInfo: Requires: Base__Hash, Base__Import, Base__List, Sexplib0__Sexp_conv_error
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Above_upper_bound = "Above_upper_bound",
    cst_Below_lower_bound = "Below_lower_bound",
    cst_Excl$0 = "Excl",
    cst_In_range = "In_range",
    cst_Incl$0 = "Incl",
    cst_Unbounded = "Unbounded",
    cst_above_upper_bound = "above_upper_bound",
    cst_below_lower_bound = "below_lower_bound",
    cst_excl = "excl",
    cst_in_range = "in_range",
    cst_incl = "incl",
    cst_unbounded = "unbounded",
    caml_int_compare = runtime.caml_int_compare,
    caml_string_notequal = runtime.caml_string_notequal;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    error_source_006 = "maybe_bound.ml.t",
    error_source_033 = "maybe_bound.ml.interval_comparison",
    interval_comparison_sexp_gramm =
      [3,
       [0,
        2,
        [0,
         [1, [0, cst_Below_lower_bound, 0]],
         [0,
          [1, [0, cst_In_range, 0]],
          [0, [1, [0, cst_Above_upper_bound, 0]], 0]]]]],
    Base_Import = global_data.Base__Import,
    Base_Hash = global_data.Base__Hash,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Base_List = global_data.Base__List,
    cst_Maybe_bound_compare_to_int =
      "Maybe_bound.compare_to_interval_exn: lower bound > upper bound",
    _f_ = [0, cst_Below_lower_bound],
    _g_ = [0, cst_In_range],
    _h_ = [0, cst_Above_upper_bound],
    _e_ = [0, [1, [0, cst_Unbounded, 0]], 0],
    cst_Excl = cst_Excl$0,
    cst_Incl = cst_Incl$0,
    _b_ = [0, cst_Unbounded],
    _c_ = [0, cst_Incl$0],
    _d_ = [0, cst_Excl$0],
    _a_ = [0, 0, 0];
   function all(all_of_a){
    var l = all_of_a, acc = 0;
    for(;;){
     if(! l) break;
     var
      l$0 = l[2],
      enumerate_002 = l[1],
      acc$0 = [0, [1, enumerate_002], acc],
      l = l$0,
      acc = acc$0;
    }
    var
     _r_ = caml_call1(Base_List[63], acc),
     l$1 = all_of_a,
     acc$1 = 0,
     _s_ = caml_call2(Base_List[10], _r_, _a_);
    for(;;){
     if(! l$1){
      var _t_ = caml_call1(Base_List[63], acc$1);
      return caml_call2(Base_List[10], _t_, _s_);
     }
     var
      l$2 = l$1[2],
      enumerate_001 = l$1[1],
      acc$2 = [0, [0, enumerate_001], acc$1],
      l$1 = l$2,
      acc$1 = acc$2;
    }
   }
   function t_of_sexp(of_a_003, sexp_008){
    a:
    {
     if(0 === sexp_008[0]){
      var _o_ = sexp_008[1];
      b:
      if(caml_string_notequal(_o_, cst_Excl$0)){
       c:
       if(caml_string_notequal(_o_, cst_Incl$0)){
        if(caml_string_notequal(_o_, cst_Unbounded)){
         if(! caml_string_notequal(_o_, cst_excl)) break b;
         if(! caml_string_notequal(_o_, cst_incl)) break c;
         if(caml_string_notequal(_o_, cst_unbounded)) break a;
        }
        return 0;
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[9], error_source_006, sexp_008);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[9], error_source_006, sexp_008);
     }
     var _p_ = sexp_008[1];
     if(! _p_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_006, sexp_008);
     var _q_ = _p_[1];
     if(0 !== _q_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_006, sexp_008);
     var tag_009 = _q_[1];
     b:
     if(caml_string_notequal(tag_009, cst_Excl$0)){
      c:
      if(caml_string_notequal(tag_009, cst_Incl$0)){
       if(caml_string_notequal(tag_009, cst_Unbounded)){
        if(! caml_string_notequal(tag_009, cst_excl)) break b;
        if(! caml_string_notequal(tag_009, cst_incl)) break c;
        if(caml_string_notequal(tag_009, cst_unbounded)) break a;
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[7], error_source_006, sexp_008);
      }
      var sexp_args_010 = _p_[2];
      if(sexp_args_010 && ! sexp_args_010[2]){
       var
        arg0_011 = sexp_args_010[1],
        res0_012 = caml_call1(of_a_003, arg0_011);
       return [0, res0_012];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[8],
               error_source_006,
               tag_009,
               sexp_008);
     }
     var sexp_args_015 = _p_[2];
     if(sexp_args_015 && ! sexp_args_015[2]){
      var
       arg0_016 = sexp_args_015[1],
       res0_017 = caml_call1(of_a_003, arg0_016);
      return [1, res0_017];
     }
     return caml_call3
             (Sexplib0_Sexp_conv_error[8],
              error_source_006,
              tag_009,
              sexp_008);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_006, sexp_008);
   }
   function sexp_of_t(of_a_019, param){
    if(typeof param === "number") return _b_;
    if(0 === param[0]){
     var arg0_020 = param[1], res0_021 = caml_call1(of_a_019, arg0_020);
     return [1, [0, _c_, [0, res0_021, 0]]];
    }
    var arg0_022 = param[1], res0_023 = caml_call1(of_a_019, arg0_022);
    return [1, [0, _d_, [0, res0_023, 0]]];
   }
   function t_sexp_grammar(a_sexp_grammar){
    return [3,
            [0,
             2,
             [0,
              [1, [0, cst_Incl, [0, [0, a_sexp_grammar, 0]]]],
              [0, [1, [0, cst_Excl, [0, [0, a_sexp_grammar, 0]]]], _e_]]]];
   }
   function globalize(globalize_a_026, x_027){
    if(typeof x_027 === "number") return x_027;
    if(0 === x_027[0]){
     var arg_029 = x_027[1];
     return [0, caml_call1(globalize_a_026, arg_029)];
    }
    var arg_030 = x_027[1];
    return [1, caml_call1(globalize_a_026, arg_030)];
   }
   function interval_comparison_of_sexp(sexp_034){
    a:
    {
     if(0 === sexp_034[0]){
      var _k_ = sexp_034[1];
      b:
      if(caml_string_notequal(_k_, cst_Above_upper_bound)){
       c:
       if(caml_string_notequal(_k_, cst_Below_lower_bound)){
        if(caml_string_notequal(_k_, cst_In_range)){
         if(! caml_string_notequal(_k_, cst_above_upper_bound)) break b;
         if(! caml_string_notequal(_k_, cst_below_lower_bound)) break c;
         if(caml_string_notequal(_k_, cst_in_range)) break a;
        }
        return 1;
       }
       return 0;
      }
      return 2;
     }
     var _l_ = sexp_034[1];
     if(! _l_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_033, sexp_034);
     var _m_ = _l_[1];
     if(0 !== _m_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_033, sexp_034);
     var _n_ = _m_[1];
     b:
     if(caml_string_notequal(_n_, cst_Above_upper_bound)){
      c:
      if(caml_string_notequal(_n_, cst_Below_lower_bound)){
       if(caml_string_notequal(_n_, cst_In_range)){
        if(! caml_string_notequal(_n_, cst_above_upper_bound)) break b;
        if(! caml_string_notequal(_n_, cst_below_lower_bound)) break c;
        if(caml_string_notequal(_n_, cst_in_range)) break a;
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[7], error_source_033, sexp_034);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_033, sexp_034);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[7], error_source_033, sexp_034);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_033, sexp_034);
   }
   function sexp_of_interval_comparison(param){
    switch(param){case 0: return _f_;case 1: return _g_;default: return _h_;
    }
   }
   var
    compare_interval_comparison_lo = caml_int_compare,
    compare_interval_comparison = caml_int_compare;
   function hash_fold_interval_comparison(hsv, arg){
    switch(arg){
      case 0:
       var _j_ = 0; break;
      case 1:
       var _j_ = 1; break;
      default: var _j_ = 2;
    }
    return caml_call2(Base_Hash[3], hsv, _j_);
   }
   function hash_interval_comparison(arg){
    var
     hsv = caml_call2(Base_Hash[11], 0, 0),
     _i_ = hash_fold_interval_comparison(hsv, arg);
    return caml_call1(Base_Hash[9], _i_);
   }
   function map(t, f){
    if(typeof t === "number") return 0;
    if(0 === t[0]){var incl = t[1]; return [0, caml_call1(f, incl)];}
    var excl = t[1];
    return [1, caml_call1(f, excl)];
   }
   function is_lower_bound(t, a, compare){
    if(typeof t === "number") return 1;
    if(0 === t[0]){
     var incl = t[1];
     return caml_call2(compare, incl, a) <= 0 ? 1 : 0;
    }
    var excl = t[1];
    return caml_call2(compare, excl, a) < 0 ? 1 : 0;
   }
   function is_upper_bound(t, a, compare){
    if(typeof t === "number") return 1;
    if(0 === t[0]){
     var incl = t[1];
     return caml_call2(compare, a, incl) <= 0 ? 1 : 0;
    }
    var excl = t[1];
    return caml_call2(compare, a, excl) < 0 ? 1 : 0;
   }
   function bounds_crossed(lower, upper, compare){
    if(typeof lower === "number") return 0;
    var lower$0 = lower[1];
    if(typeof upper === "number") return 0;
    var upper$0 = upper[1];
    return 0 < caml_call2(compare, lower$0, upper$0) ? 1 : 0;
   }
   function compare_to_interval_exn(lower, upper, a, compare){
    if(bounds_crossed(lower, upper, compare))
     caml_call1(Base_Import[124], cst_Maybe_bound_compare_to_int);
    return is_lower_bound(lower, a, compare)
            ? is_upper_bound(upper, a, compare) ? 1 : 2
            : 0;
   }
   function interval_contains_exn(lower, upper, a, compare){
    return 1 === compare_to_interval_exn(lower, upper, a, compare) ? 1 : 0;
   }
   var
    Base_Maybe_bound =
      [0,
       all,
       t_of_sexp,
       sexp_of_t,
       t_sexp_grammar,
       globalize,
       map,
       is_lower_bound,
       is_upper_bound,
       interval_contains_exn,
       bounds_crossed,
       sexp_of_interval_comparison,
       interval_comparison_of_sexp,
       interval_comparison_sexp_gramm,
       compare_interval_comparison,
       compare_interval_comparison_lo,
       hash_fold_interval_comparison,
       hash_interval_comparison,
       compare_to_interval_exn];
   runtime.caml_register_global(42, Base_Maybe_bound, "Base__Maybe_bound");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Map_intf
//# unitInfo: Requires: Sexplib0__Sexp_conv_error
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Left$0 = "Left",
    cst_Right$0 = "Right",
    cst_Unequal$0 = "Unequal",
    caml_compare = runtime.caml_compare,
    caml_equal = runtime.caml_equal,
    caml_int_compare = runtime.caml_int_compare,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_string_notequal = runtime.caml_string_notequal,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    error_source_057 = "map_intf.ml.Symmetric_diff_element.t",
    all = [0, 0, [0, 1, 0]],
    all$0 = [0, 0, [0, 1, 0]],
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    _k_ = [0, "Unfinished"],
    _l_ = [0, "Finished"],
    _i_ = [0, "Stop"],
    _j_ = [0, "Continue"],
    _g_ = [0, cst_Left$0],
    _h_ = [0, cst_Right$0],
    _f_ = [0, "Both"],
    cst_Unequal = cst_Unequal$0,
    cst_Right = cst_Right$0,
    cst_Left = cst_Left$0,
    _d_ = [0, cst_Unequal$0],
    _e_ = [0, cst_Right$0],
    _c_ = [0, cst_Left$0],
    _a_ = [0, "Duplicate"],
    _b_ = [0, "Ok"];
   function compare(cmp_a, a_001, b_002){
    if(a_001 === b_002) return 0;
    if(typeof a_001 === "number"){
     if(typeof b_002 === "number" && -1024851605 === b_002) return 0;
    }
    else if(typeof b_002 !== "number" && 17724 === b_002[1]){
     var right_004 = b_002[2], left_003 = a_001[2];
     return caml_call2(cmp_a, left_003, right_004);
    }
    return caml_compare(a_001, b_002);
   }
   function equal(cmp_a, a_005, b_006){
    if(a_005 === b_006) return 1;
    if(typeof a_005 === "number"){
     if(typeof b_006 === "number" && -1024851605 === b_006) return 1;
    }
    else if(typeof b_006 !== "number" && 17724 === b_006[1]){
     var right_008 = b_006[2], left_007 = a_005[2];
     return caml_call2(cmp_a, left_007, right_008);
    }
    return caml_equal(a_005, b_006);
   }
   function sexp_of_t(of_a_009, param){
    if(typeof param === "number") return _a_;
    var v_010 = param[2];
    return [1, [0, _b_, [0, caml_call1(of_a_009, v_010), 0]]];
   }
   var
    Or_duplicate = [0, compare, equal, sexp_of_t],
    Without_comparator = [0],
    With_comparator = [0],
    With_first_class_module = [0];
   function compare$0(cmp_k, cmp_v, a_011, b_012){
    var
     t_014 = a_011[2],
     t_013 = a_011[1],
     t_016 = b_012[2],
     t_015 = b_012[1],
     n = caml_call2(cmp_k, t_013, t_015);
    if(0 !== n) return n;
    if(t_014 === t_016) return 0;
    var _O_ = t_014[1];
    if(847852583 === _O_){
     if(typeof t_016 !== "number" && 847852583 === t_016[1]){
      var right_018 = t_016[2], left_017 = t_014[2];
      return caml_call2(cmp_v, left_017, right_018);
     }
    }
    else
     if(1013247643 <= _O_){
      if(typeof t_016 !== "number" && 1013247643 === t_016[1]){
       var
        right_022 = t_016[2],
        left_021 = t_014[2],
        t_024 = left_021[2],
        t_023 = left_021[1],
        t_026 = right_022[2],
        t_025 = right_022[1],
        n$0 = caml_call2(cmp_v, t_023, t_025);
       return 0 === n$0 ? caml_call2(cmp_v, t_024, t_026) : n$0;
      }
     }
     else if(typeof t_016 !== "number" && -57574468 === t_016[1]){
      var right_020 = t_016[2], left_019 = t_014[2];
      return caml_call2(cmp_v, left_019, right_020);
     }
    return caml_compare(t_014, t_016);
   }
   function equal$0(cmp_k, cmp_v, a_027, b_028){
    var
     t_030 = a_027[2],
     t_029 = a_027[1],
     t_032 = b_028[2],
     t_031 = b_028[1],
     _K_ = caml_call2(cmp_k, t_029, t_031);
    if(_K_){
     if(t_030 === t_032) return 1;
     var _L_ = t_030[1];
     if(847852583 === _L_){
      if(typeof t_032 !== "number" && 847852583 === t_032[1]){
       var right_034 = t_032[2], left_033 = t_030[2];
       return caml_call2(cmp_v, left_033, right_034);
      }
     }
     else
      if(1013247643 <= _L_){
       if(typeof t_032 !== "number" && 1013247643 === t_032[1]){
        var
         right_038 = t_032[2],
         left_037 = t_030[2],
         t_040 = left_037[2],
         t_039 = left_037[1],
         t_042 = right_038[2],
         t_041 = right_038[1],
         _N_ = caml_call2(cmp_v, t_039, t_041);
        return _N_ ? caml_call2(cmp_v, t_040, t_042) : _N_;
       }
      }
      else if(typeof t_032 !== "number" && -57574468 === t_032[1]){
       var right_036 = t_032[2], left_035 = t_030[2];
       return caml_call2(cmp_v, left_035, right_036);
      }
     var _M_ = caml_equal(t_030, t_032);
    }
    else
     var _M_ = _K_;
    return _M_;
   }
   function t_of_sexp(of_k_043, of_v_044, sexp_071){
    if(1 === sexp_071[0]){
     var _v_ = sexp_071[1];
     if(_v_){
      var _w_ = _v_[2];
      if(_w_ && ! _w_[2]){
       var
        arg1_068 = _w_[1],
        arg0_067 = _v_[1],
        res0_069 = caml_call1(of_k_043, arg0_067);
       try{
        if(0 === arg1_068[0])
         var
          atom_047 = arg1_068[1],
          _y_ =
            caml_string_notequal(atom_047, cst_Left$0)
             ? caml_string_notequal
                (atom_047, cst_Right$0)
               ? caml_string_notequal
                  (atom_047, cst_Unequal$0)
                 ? caml_call1(Sexplib0_Sexp_conv_error[23], 0)
                 : caml_call2
                   (Sexplib0_Sexp_conv_error[27], error_source_057, arg1_068)
               : caml_call2
                 (Sexplib0_Sexp_conv_error[27], error_source_057, arg1_068)
             : caml_call2
               (Sexplib0_Sexp_conv_error[27], error_source_057, arg1_068),
          _z_ = _y_;
        else{
         var _A_ = arg1_068[1];
         if(_A_){
          var match = _A_[1];
          if(0 === match[0]){
           var sexp_args_050 = _A_[2], atom_047$0 = match[1];
           if(caml_string_notequal(atom_047$0, cst_Left$0))
            if(caml_string_notequal(atom_047$0, cst_Right$0))
             if(caml_string_notequal(atom_047$0, cst_Unequal$0))
              var _B_ = caml_call1(Sexplib0_Sexp_conv_error[23], 0);
             else{
              a:
              {
               if(sexp_args_050 && ! sexp_args_050[2]){
                var arg0_058 = sexp_args_050[1];
                b:
                {
                 if(1 === arg0_058[0]){
                  var _F_ = arg0_058[1];
                  if(_F_){
                   var _G_ = _F_[2];
                   if(_G_ && ! _G_[2]){
                    var
                     arg1_053 = _G_[1],
                     arg0_052 = _F_[1],
                     res0_054 = caml_call1(of_v_044, arg0_052),
                     res1_055 = caml_call1(of_v_044, arg1_053),
                     res0_059 = [0, res0_054, res1_055];
                    break b;
                   }
                  }
                 }
                 var
                  res0_059 =
                    caml_call3
                     (Sexplib0_Sexp_conv_error[4], error_source_057, 2, arg0_058);
                }
                var _E_ = [0, 1013247643, res0_059];
                break a;
               }
               var
                _E_ =
                  caml_call3
                   (Sexplib0_Sexp_conv_error[26],
                    error_source_057,
                    atom_047$0,
                    arg1_068);
              }
              var _B_ = _E_;
             }
            else{
             a:
             {
              if(sexp_args_050 && ! sexp_args_050[2]){
               var
                arg0_061 = sexp_args_050[1],
                res0_062 = caml_call1(of_v_044, arg0_061),
                _H_ = [0, -57574468, res0_062];
               break a;
              }
              var
               _H_ =
                 caml_call3
                  (Sexplib0_Sexp_conv_error[26],
                   error_source_057,
                   atom_047$0,
                   arg1_068);
             }
             var _B_ = _H_;
            }
           else{
            a:
            {
             if(sexp_args_050 && ! sexp_args_050[2]){
              var
               arg0_064 = sexp_args_050[1],
               res0_065 = caml_call1(of_v_044, arg0_064),
               _I_ = [0, 847852583, res0_065];
              break a;
             }
             var
              _I_ =
                caml_call3
                 (Sexplib0_Sexp_conv_error[26],
                  error_source_057,
                  atom_047$0,
                  arg1_068);
            }
            var _B_ = _I_;
           }
           var _C_ = _B_;
          }
          else
           var
            _C_ =
              caml_call2
               (Sexplib0_Sexp_conv_error[28], error_source_057, arg1_068);
          var _D_ = _C_;
         }
         else
          var
           _D_ =
             caml_call2
              (Sexplib0_Sexp_conv_error[29], error_source_057, arg1_068);
         var _z_ = _D_;
        }
        var res1_070 = _z_;
       }
       catch(_J_){
        var _x_ = caml_wrap_exception(_J_);
        if(_x_ !== Sexplib0_Sexp_conv_error[22])
         throw caml_maybe_attach_backtrace(_x_, 0);
        var
         res1_070 =
           caml_call2
            (Sexplib0_Sexp_conv_error[24], error_source_057, arg1_068);
       }
       return [0, res0_069, res1_070];
      }
     }
    }
    return caml_call3
            (Sexplib0_Sexp_conv_error[4], error_source_057, 2, sexp_071);
   }
   function sexp_of_t$0(of_k_072, of_v_073, param){
    var
     arg1_082 = param[2],
     arg0_081 = param[1],
     res0_083 = caml_call1(of_k_072, arg0_081),
     _u_ = arg1_082[1];
    if(847852583 === _u_)
     var
      v_074 = arg1_082[2],
      res1_084 = [1, [0, _c_, [0, caml_call1(of_v_073, v_074), 0]]];
    else if(1013247643 <= _u_)
     var
      v_076 = arg1_082[2],
      arg1_078 = v_076[2],
      arg0_077 = v_076[1],
      res0_079 = caml_call1(of_v_073, arg0_077),
      res1_080 = caml_call1(of_v_073, arg1_078),
      res1_084 = [1, [0, _d_, [0, [1, [0, res0_079, [0, res1_080, 0]]], 0]]];
    else
     var
      v_075 = arg1_082[2],
      res1_084 = [1, [0, _e_, [0, caml_call1(of_v_073, v_075), 0]]];
    return [1, [0, res0_083, [0, res1_084, 0]]];
   }
   function t_sexp_grammar(k_sexp_grammar, v_sexp_grammar){
    return [2,
            [0,
             k_sexp_grammar,
             [0,
              [3,
               [0,
                1,
                [0,
                 [1, [0, cst_Left, [0, [0, v_sexp_grammar, 0]]]],
                 [0,
                  [1, [0, cst_Right, [0, [0, v_sexp_grammar, 0]]]],
                  [0,
                   [1,
                    [0,
                     cst_Unequal,
                     [0,
                      [0, [2, [0, v_sexp_grammar, [0, v_sexp_grammar, 0]]], 0]]]],
                   0]]]]],
              0]]];
   }
   var
    Symmetric_diff_element =
      [0, compare$0, equal$0, t_of_sexp, sexp_of_t$0, t_sexp_grammar];
   function compare$1(cmp_left, cmp_right, a_085, b_086){
    if(a_085 === b_086) return 0;
    var _t_ = a_085[1];
    if(737457313 === _t_){
     if(typeof b_086 !== "number" && 737457313 === b_086[1]){
      var
       right_092 = b_086[2],
       left_091 = a_085[2],
       t_094 = left_091[2],
       t_093 = left_091[1],
       t_096 = right_092[2],
       t_095 = right_092[1],
       n = caml_call2(cmp_left, t_093, t_095);
      return 0 === n ? caml_call2(cmp_right, t_094, t_096) : n;
     }
    }
    else
     if(847852583 <= _t_){
      if(typeof b_086 !== "number" && 847852583 === b_086[1]){
       var right_088 = b_086[2], left_087 = a_085[2];
       return caml_call2(cmp_left, left_087, right_088);
      }
     }
     else if(typeof b_086 !== "number" && -57574468 === b_086[1]){
      var right_090 = b_086[2], left_089 = a_085[2];
      return caml_call2(cmp_right, left_089, right_090);
     }
    return caml_compare(a_085, b_086);
   }
   function equal$1(cmp_left, cmp_right, a_097, b_098){
    if(a_097 === b_098) return 1;
    var _r_ = a_097[1];
    if(737457313 === _r_){
     if(typeof b_098 !== "number" && 737457313 === b_098[1]){
      var
       right_104 = b_098[2],
       left_103 = a_097[2],
       t_106 = left_103[2],
       t_105 = left_103[1],
       t_108 = right_104[2],
       t_107 = right_104[1],
       _s_ = caml_call2(cmp_left, t_105, t_107);
      return _s_ ? caml_call2(cmp_right, t_106, t_108) : _s_;
     }
    }
    else
     if(847852583 <= _r_){
      if(typeof b_098 !== "number" && 847852583 === b_098[1]){
       var right_100 = b_098[2], left_099 = a_097[2];
       return caml_call2(cmp_left, left_099, right_100);
      }
     }
     else if(typeof b_098 !== "number" && -57574468 === b_098[1]){
      var right_102 = b_098[2], left_101 = a_097[2];
      return caml_call2(cmp_right, left_101, right_102);
     }
    return caml_equal(a_097, b_098);
   }
   function sexp_of_t$1(of_left_109, of_right_110, param){
    var _q_ = param[1];
    if(737457313 === _q_){
     var
      v_113 = param[2],
      arg1_115 = v_113[2],
      arg0_114 = v_113[1],
      res0_116 = caml_call1(of_left_109, arg0_114),
      res1_117 = caml_call1(of_right_110, arg1_115);
     return [1, [0, _f_, [0, [1, [0, res0_116, [0, res1_117, 0]]], 0]]];
    }
    if(847852583 <= _q_){
     var v_111 = param[2];
     return [1, [0, _g_, [0, caml_call1(of_left_109, v_111), 0]]];
    }
    var v_112 = param[2];
    return [1, [0, _h_, [0, caml_call1(of_right_110, v_112), 0]]];
   }
   var
    Merge_element = [0, compare$1, equal$1, sexp_of_t$1],
    compare$2 = caml_int_compare;
   function equal$2(_p_, _o_){return _p_ === _o_ ? 1 : 0;}
   function sexp_of_t$2(param){return param ? _i_ : _j_;}
   var
    Continue_or_stop = [0, compare$2, all, equal$2, sexp_of_t$2],
    compare$3 = caml_int_compare;
   function equal$3(_n_, _m_){return _n_ === _m_ ? 1 : 0;}
   function sexp_of_t$3(param){return param ? _k_ : _l_;}
   var
    Finished_or_unfinished = [0, compare$3, all$0, equal$3, sexp_of_t$3],
    Base_Map_intf =
      [0,
       Or_duplicate,
       Without_comparator,
       With_comparator,
       With_first_class_module,
       Symmetric_diff_element,
       Merge_element,
       Continue_or_stop,
       Finished_or_unfinished];
   runtime.caml_register_global(25, Base_Map_intf, "Base__Map_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Set_intf
(function(globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Named = [0],
    Base_Set_intf = [0, Named];
   runtime.caml_register_global(0, Base_Set_intf, "Base__Set_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Set
//# unitInfo: Requires: Base__Array, Base__Comparator, Base__Container, Base__Exn, Base__Fn, Base__Hash, Base__Import, Base__List, Base__Option, Base__Or_error, Base__Sequence, Base__Set_intf, Base__Sexp, Base__With_return, Sexplib0__Sexp_conv, Sexplib0__Sexp_grammar
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_of_sorted_array_duplicated$1 = "of_sorted_array: duplicated elements",
    cst_src_set_ml = "src/set.ml",
    caml_check_bound = runtime.caml_check_bound,
    caml_fresh_oo_id = runtime.caml_fresh_oo_id,
    caml_int_compare = runtime.caml_int_compare,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    Base_Hash = global_data.Base__Hash,
    Base_Import = global_data.Base__Import,
    Sexplib0_Sexp_grammar = global_data.Sexplib0__Sexp_grammar,
    Base_Or_error = global_data.Base__Or_error,
    Base_Container = global_data.Base__Container,
    Base_List = global_data.Base__List,
    Base_Comparator = global_data.Base__Comparator,
    Base_Sexp = global_data.Base__Sexp,
    Assert_failure = global_data.Assert_failure,
    Base_Array = global_data.Base__Array,
    Base_Sequence = global_data.Base__Sequence,
    Base_Fn = global_data.Base__Fn,
    Base_Option = global_data.Base__Option,
    Base_Exn = global_data.Base__Exn,
    Base_With_return = global_data.Base__With_return,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    with_return = Base_With_return[1],
    _v_ = [0, "_"],
    cst_Set_remove_min_elt = "Set.remove_min_elt",
    _p_ = [0, 0, 0],
    _q_ = [0, 0, 0],
    _u_ = [0, 0],
    cst_invalid_elements = "invalid_elements",
    cst_is_not_a_subset_of = " is not a subset of ",
    cst_Set_t_of_sexp_duplicate_el = "Set.t_of_sexp: duplicate element in set",
    cst_Set_t_of_sexp_list_needed = "Set.t_of_sexp: list needed",
    _t_ = [0, cst_src_set_ml, 1120, 8],
    cst_Set_find_exn_failed_to_fin =
      "Set.find_exn failed to find a matching element",
    _r_ = [0, 0, 0],
    _o_ = [0, 0, 0, 0],
    _m_ = [0, "set.ml.Tree0.Set_max_elt_exn_of_empty_set"],
    _n_ = [0, cst_src_set_ml, 289, 13],
    _j_ = [0, "set.ml.Tree0.Set_min_elt_exn_of_empty_set"],
    _k_ = [0, cst_src_set_ml, 276, 13],
    _a_ = [0, cst_src_set_ml, 169, 17],
    _b_ = [0, cst_src_set_ml, 170, 28],
    _c_ = [0, cst_src_set_ml, 176, 21],
    _d_ = [0, cst_src_set_ml, 178, 12],
    _e_ = [0, cst_src_set_ml, 185, 17],
    _f_ = [0, cst_src_set_ml, 186, 28],
    _g_ = [0, cst_src_set_ml, 192, 21],
    _h_ = [0, cst_src_set_ml, 194, 12],
    cst_of_sorted_array_duplicated = cst_of_sorted_array_duplicated$1,
    cst_of_sorted_array_elements_a =
      "of_sorted_array: elements are not ordered",
    cst_of_sorted_array_duplicated$0 = cst_of_sorted_array_duplicated$1,
    cst_Base_Set_Tree0_Same = "Base__Set.Tree0.Same",
    cst_Base_Set_Tree0_Set_min_elt =
      "Base__Set.Tree0.Set_min_elt_exn_of_empty_set",
    cst_Base_Set_Tree0_Set_max_elt =
      "Base__Set.Tree0.Set_max_elt_exn_of_empty_set",
    _s_ = [0, "Set.choose_exn: empty set"];
   function height(param){
    if(typeof param === "number") return 0;
    if(0 === param[0]) return 1;
    var h = param[4];
    return h;
   }
   function length(param){
    if(typeof param === "number") return 0;
    if(0 === param[0]) return 1;
    var s = param[5];
    return s;
   }
   function in_range(lower, upper, compare_elt, v){
    if(lower)
     var
      lower$0 = lower[1],
      _bM_ = caml_call2(compare_elt, lower$0, v) < 0 ? 1 : 0;
    else
     var _bM_ = 1;
    if(_bM_){
     if(upper){
      var upper$0 = upper[1];
      return caml_call2(compare_elt, v, upper$0) < 0 ? 1 : 0;
     }
     var _bN_ = 1;
    }
    else
     var _bN_ = _bM_;
    return _bN_;
   }
   function loop(lower, upper, compare_elt, t){
    var lower$0 = lower, t$0 = t;
    for(;;){
     if(typeof t$0 === "number") return 1;
     if(0 === t$0[0]){
      var v = t$0[1];
      return in_range(lower$0, upper, compare_elt, v);
     }
     var
      n = t$0[5],
      h = t$0[4],
      r = t$0[3],
      v$0 = t$0[2],
      l = t$0[1],
      hl = height(l),
      hr = height(r),
      _bB_ = caml_call2(Base_Import[93], hl, hr),
      _bC_ = caml_call1(Base_Import[123], _bB_) <= 2 ? 1 : 0;
     if(_bC_){
      var
       _bD_ = caml_call2(Base_Import[100], hl, hr),
       _bE_ = h === caml_call2(Base_Import[91], _bD_, 1) ? 1 : 0;
      if(_bE_){
       var
        _bF_ = length(r),
        _bG_ = length(l),
        _bH_ = caml_call2(Base_Import[91], _bG_, _bF_),
        _bI_ = n === caml_call2(Base_Import[91], _bH_, 1) ? 1 : 0;
       if(_bI_){
        var _bJ_ = in_range(lower$0, upper, compare_elt, v$0);
        if(_bJ_){
         var _bK_ = loop(lower$0, [0, v$0], compare_elt, l);
         if(_bK_){
          var lower$1 = [0, v$0], lower$0 = lower$1, t$0 = r;
          continue;
         }
         var _bL_ = _bK_;
        }
        else
         var _bL_ = _bJ_;
       }
       else
        var _bL_ = _bI_;
      }
      else
       var _bL_ = _bE_;
     }
     else
      var _bL_ = _bC_;
     return _bL_;
    }
   }
   function invariants(t, compare_elt){return loop(0, 0, compare_elt, t);}
   function is_empty(param){return typeof param === "number" ? 1 : 0;}
   function create(l, v, r){
    var
     hl = height(l),
     hr = height(r),
     h =
       hr <= hl
        ? caml_call2(Base_Import[91], hl, 1)
        : caml_call2(Base_Import[91], hr, 1);
    if(1 === h) return [0, v];
    var
     sl = length(l),
     sr = length(r),
     _bA_ = caml_call2(Base_Import[91], sl, sr);
    return [1, l, v, r, h, caml_call2(Base_Import[91], _bA_, 1)];
   }
   function of_increasing_iterator_uncheck(len, f){
    function loop(n, f, i){
     if(3 >= n >>> 0)
      switch(n){
        case 0:
         return 0;
        case 1:
         var k$0 = caml_call1(f, i); return [0, k$0];
        case 2:
         var
          kl = caml_call1(f, i),
          k$1 = caml_call1(f, caml_call2(Base_Import[91], i, 1));
         return create([0, kl], k$1, 0);
        default:
         var
          kl$0 = caml_call1(f, i),
          k$2 = caml_call1(f, caml_call2(Base_Import[91], i, 1)),
          kr = caml_call1(f, caml_call2(Base_Import[91], i, 2));
         return create([0, kl$0], k$2, [0, kr]);
      }
     var
      left_length = caml_call2(Base_Import[120], n, 1),
      _by_ = caml_call2(Base_Import[93], n, left_length),
      right_length = caml_call2(Base_Import[93], _by_, 1),
      left = loop(left_length, f, i),
      k = caml_call1(f, caml_call2(Base_Import[91], i, left_length)),
      _bz_ = caml_call2(Base_Import[91], i, left_length),
      right = loop(right_length, f, caml_call2(Base_Import[91], _bz_, 1));
     return create(left, k, right);
    }
    return loop(len, f, 0);
   }
   function of_sorted_array_unchecked(array, compare_elt){
    var array_length = array.length - 1;
    a:
    {
     if(2 <= array_length){
      var _bv_ = caml_check_bound(array, 1)[2];
      if(0 <= caml_call2(compare_elt, caml_check_bound(array, 0)[1], _bv_)){
       var
        next =
          function(i){
           var
            _bw_ = caml_call2(Base_Import[93], array_length, 1),
            _bx_ = caml_call2(Base_Import[93], _bw_, i);
           return caml_check_bound(array, _bx_)[1 + _bx_];
          };
       break a;
      }
     }
     var next = function(i){return caml_check_bound(array, i)[1 + i];};
    }
    return of_increasing_iterator_uncheck(array_length, next);
   }
   function of_sorted_array(array, compare_elt){
    var len = array.length - 1;
    if(1 !== len && len)
     return caml_call1
             (with_return,
              function(r){
               var
                _bp_ = caml_check_bound(array, 1)[2],
                i =
                  caml_call2(compare_elt, caml_check_bound(array, 0)[1], _bp_),
                increasing =
                  0 === i
                   ? caml_call1
                     (r,
                      caml_call1
                       (Base_Or_error[40], cst_of_sorted_array_duplicated))
                   : i < 0 ? 1 : 0,
                _br_ = caml_call2(Base_Import[93], array.length - 1, 2),
                _bq_ = 1;
               if(_br_ >= 1){
                var i$0 = _bq_;
                for(;;){
                 var
                  _bs_ = caml_call2(Base_Import[91], i$0, 1),
                  _bt_ = caml_check_bound(array, _bs_)[1 + _bs_],
                  i$1 =
                    caml_call2
                     (compare_elt, caml_check_bound(array, i$0)[1 + i$0], _bt_);
                 if(0 === i$1)
                  caml_call1
                   (r,
                    caml_call1
                     (Base_Or_error[40], cst_of_sorted_array_duplicated$0));
                 else if((i$1 < 0 ? 1 : 0) !== increasing)
                  caml_call1
                   (r,
                    caml_call1
                     (Base_Or_error[40], cst_of_sorted_array_elements_a));
                 var _bu_ = i$0 + 1 | 0;
                 if(_br_ === i$0) break;
                 var i$0 = _bu_;
                }
               }
               return [0, of_sorted_array_unchecked(array, compare_elt)];
              });
    return [0, of_sorted_array_unchecked(array, compare_elt)];
   }
   function bal(l, v, r){
    var hl = height(l), hr = height(r);
    if(caml_call2(Base_Import[91], hr, 2) < hl){
     if(typeof l === "number")
      throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
     if(0 === l[0])
      throw caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1);
     var lr = l[3], lv = l[2], ll = l[1], _bj_ = height(lr);
     if(_bj_ <= height(ll)) return create(ll, lv, create(lr, v, r));
     if(typeof lr === "number")
      throw caml_maybe_attach_backtrace([0, Assert_failure, _c_], 1);
     if(0 !== lr[0]){
      var lrr = lr[3], lrv$0 = lr[2], lrl = lr[1], _bl_ = create(lrr, v, r);
      return create(create(ll, lv, lrl), lrv$0, _bl_);
     }
     var lrv = lr[1];
     if(! is_empty(ll))
      throw caml_maybe_attach_backtrace([0, Assert_failure, _d_], 1);
     var _bk_ = create(0, v, r);
     return create(create(ll, lv, 0), lrv, _bk_);
    }
    if(caml_call2(Base_Import[91], hl, 2) >= hr) return create(l, v, r);
    if(typeof r === "number")
     throw caml_maybe_attach_backtrace([0, Assert_failure, _e_], 1);
    if(0 === r[0])
     throw caml_maybe_attach_backtrace([0, Assert_failure, _f_], 1);
    var rr = r[3], rv = r[2], rl = r[1], _bm_ = height(rl);
    if(_bm_ <= height(rr)) return create(create(l, v, rl), rv, rr);
    if(typeof rl === "number")
     throw caml_maybe_attach_backtrace([0, Assert_failure, _g_], 1);
    if(0 !== rl[0]){
     var rlr = rl[3], rlv$0 = rl[2], rll = rl[1], _bo_ = create(rlr, rv, rr);
     return create(create(l, v, rll), rlv$0, _bo_);
    }
    var rlv = rl[1];
    if(! is_empty(rr))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _h_], 1);
    var _bn_ = create(0, rv, rr);
    return create(create(l, v, 0), rlv, _bn_);
   }
   var Same = [248, cst_Base_Set_Tree0_Same, caml_fresh_oo_id(0)];
   function add(t, x, compare_elt){
    function aux(param){
     if(typeof param === "number") return [0, x];
     if(0 === param[0]){
      var v = param[1], c = caml_call2(compare_elt, x, v);
      return 0 === c
              ? caml_call1(Base_Exn[6], Same)
              : 0 <= c ? create(0, v, [0, x]) : create([0, x], v, 0);
     }
     var
      r = param[3],
      v$0 = param[2],
      l = param[1],
      c$0 = caml_call2(compare_elt, x, v$0);
     return 0 === c$0
             ? caml_call1(Base_Exn[6], Same)
             : 0 <= c$0 ? bal(l, v$0, aux(r)) : bal(aux(l), v$0, r);
    }
    try{var _bh_ = aux(t); return _bh_;}
    catch(_bi_){
     var _bg_ = caml_wrap_exception(_bi_);
     if(_bg_ === Same) return t;
     throw caml_maybe_attach_backtrace(_bg_, 0);
    }
   }
   function add_min(x, t){
    if(typeof t === "number") return [0, x];
    if(0 === t[0]) return [1, 0, x, t, 2, 2];
    var r = t[3], v = t[2], l = t[1];
    return bal(add_min(x, l), v, r);
   }
   function add_max(t, x){
    if(typeof t === "number") return [0, x];
    if(0 === t[0]) return [1, t, x, 0, 2, 2];
    var r = t[3], v = t[2], l = t[1];
    return bal(l, v, add_max(r, x));
   }
   function join(l, v, r){
    if(typeof l === "number") return add_min(v, r);
    if(1 === l[0]){
     var lh = l[4], lr = l[3], lv$0 = l[2], ll = l[1];
     if(typeof r !== "number"){
      if(0 === r[0]){var rv = r[1]; return add_max(add_max(l, v), rv);}
      var rh = r[4], rr = r[3], rv$0 = r[2], rl = r[1];
      return caml_call2(Base_Import[91], rh, 2) < lh
              ? bal(ll, lv$0, join(lr, v, r))
              : caml_call2
                 (Base_Import[91], lh, 2)
                < rh
                ? bal(join(l, v, rl), rv$0, rr)
                : create(l, v, r);
     }
    }
    if(typeof r === "number") return add_max(l, v);
    var lv = l[1];
    return add_min(lv, add_min(v, r));
   }
   function min_elt(param){
    var param$0 = param;
    for(;;){
     if(typeof param$0 === "number") return 0;
     if(0 === param$0[0])
      var v = param$0[1];
     else{
      var l = param$0[1];
      if(typeof l !== "number"){var param$0 = l; continue;}
      var v = param$0[2];
     }
     return [0, v];
    }
   }
   var
    Set_min_elt_exn_of_empty_set =
      [248, cst_Base_Set_Tree0_Set_min_elt, caml_fresh_oo_id(0)];
   function _i_(param){
    if(param === Set_min_elt_exn_of_empty_set) return _j_;
    throw caml_maybe_attach_backtrace([0, Assert_failure, _k_], 1);
   }
   caml_call4
    (Sexplib0_Sexp_conv[72][1], 0, 0, Set_min_elt_exn_of_empty_set, _i_);
   var
    Set_max_elt_exn_of_empty_set =
      [248, cst_Base_Set_Tree0_Set_max_elt, caml_fresh_oo_id(0)];
   function _l_(param){
    if(param === Set_max_elt_exn_of_empty_set) return _m_;
    throw caml_maybe_attach_backtrace([0, Assert_failure, _n_], 1);
   }
   caml_call4
    (Sexplib0_Sexp_conv[72][1], 0, 0, Set_max_elt_exn_of_empty_set, _l_);
   function min_elt_exn(t){
    var match = min_elt(t);
    if(! match)
     throw caml_maybe_attach_backtrace(Set_min_elt_exn_of_empty_set, 1);
    var v = match[1];
    return v;
   }
   function fold_until(t, init, f, finish){
    function fold_until_helper(f, t, acc){
     var t$0 = t, acc$0 = acc;
     for(;;){
      if(typeof t$0 === "number") return [0, acc$0];
      if(0 === t$0[0]){
       var value = t$0[1];
       return caml_call2(f, acc$0, value);
      }
      var
       right = t$0[3],
       value$0 = t$0[2],
       left = t$0[1],
       x = fold_until_helper(f, left, acc$0);
      if(0 !== x[0]) return x;
      var acc$1 = x[1], x$0 = caml_call2(f, acc$1, value$0);
      if(0 !== x$0[0]) return x$0;
      var acc$2 = x$0[1], t$0 = right, acc$0 = acc$2;
     }
    }
    var match = fold_until_helper(f, t, init);
    if(0 === match[0]){var x = match[1]; return caml_call1(finish, x);}
    var x$0 = match[1];
    return x$0;
   }
   function max_elt(param){
    var param$0 = param;
    for(;;){
     if(typeof param$0 === "number") return 0;
     if(0 === param$0[0])
      var v = param$0[1];
     else{
      if(typeof param$0[3] !== "number"){
       var r = param$0[3], param$0 = r;
       continue;
      }
      var v = param$0[2];
     }
     return [0, v];
    }
   }
   function max_elt_exn(t){
    var match = max_elt(t);
    if(! match)
     throw caml_maybe_attach_backtrace(Set_max_elt_exn_of_empty_set, 1);
    var v = match[1];
    return v;
   }
   function remove_min_elt(param){
    if(typeof param === "number")
     return caml_call1(Base_Import[126], cst_Set_remove_min_elt);
    if(0 === param[0]) return 0;
    var l = param[1];
    if(typeof l === "number"){var r = param[3]; return r;}
    var r$0 = param[3], v = param[2];
    return bal(remove_min_elt(l), v, r$0);
   }
   function merge(t1, t2){
    if(typeof t1 === "number") return t2;
    if(typeof t2 === "number") return t1;
    var _bf_ = remove_min_elt(t2);
    return bal(t1, min_elt_exn(t2), _bf_);
   }
   function concat(t1, t2){
    if(typeof t1 === "number")
     var t = t2;
    else{
     if(typeof t2 !== "number"){
      var _be_ = remove_min_elt(t2);
      return join(t1, min_elt_exn(t2), _be_);
     }
     var t = t1;
    }
    return t;
   }
   function split(t, x, compare_elt){
    function split(t){
     if(typeof t === "number") return _o_;
     if(0 === t[0]){
      var v = t[1], c = caml_call2(compare_elt, x, v);
      return 0 === c
              ? [0, 0, [0, v], 0]
              : 0 <= c ? [0, [0, v], 0, 0] : [0, 0, 0, [0, v]];
     }
     var
      r = t[3],
      v$0 = t[2],
      l = t[1],
      c$0 = caml_call2(compare_elt, x, v$0);
     if(0 === c$0) return [0, l, [0, v$0], r];
     if(0 <= c$0){
      var
       match = split(r),
       rr = match[3],
       maybe_elt = match[2],
       lr = match[1];
      return [0, join(l, v$0, lr), maybe_elt, rr];
     }
     var
      match$0 = split(l),
      rl = match$0[3],
      maybe_elt$0 = match$0[2],
      ll = match$0[1];
     return [0, ll, maybe_elt$0, join(rl, v$0, r)];
    }
    return split(t);
   }
   function split_le_gt(t, x, compare_elt){
    if(typeof t === "number") return _p_;
    if(0 === t[0]){
     var v = t[1];
     return 0 <= caml_call2(compare_elt, x, v)
             ? [0, [0, v], 0]
             : [0, 0, [0, v]];
    }
    var r = t[3], v$0 = t[2], l = t[1], c = caml_call2(compare_elt, x, v$0);
    if(0 === c) return [0, add_max(l, v$0), r];
    if(0 <= c){
     var match = split_le_gt(r, x, compare_elt), rr = match[2], lr = match[1];
     return [0, join(l, v$0, lr), rr];
    }
    var
     match$0 = split_le_gt(l, x, compare_elt),
     rl = match$0[2],
     ll = match$0[1];
    return [0, ll, join(rl, v$0, r)];
   }
   function split_lt_ge(t, x, compare_elt){
    if(typeof t === "number") return _q_;
    if(0 === t[0]){
     var v = t[1];
     return 0 < caml_call2(compare_elt, x, v)
             ? [0, [0, v], 0]
             : [0, 0, [0, v]];
    }
    var r = t[3], v$0 = t[2], l = t[1], c = caml_call2(compare_elt, x, v$0);
    if(0 === c) return [0, l, add_min(v$0, r)];
    if(0 <= c){
     var match = split_lt_ge(r, x, compare_elt), rr = match[2], lr = match[1];
     return [0, join(l, v$0, lr), rr];
    }
    var
     match$0 = split_lt_ge(l, x, compare_elt),
     rl = match$0[2],
     ll = match$0[1];
    return [0, ll, join(rl, v$0, r)];
   }
   var empty_without_value_restrictio = 0;
   function mem(t, x, compare_elt){
    var t$0 = t;
    for(;;){
     if(typeof t$0 === "number") return 0;
     if(0 === t$0[0]){
      var v = t$0[1], c = caml_call2(compare_elt, x, v);
      return 0 === c ? 1 : 0;
     }
     var
      r = t$0[3],
      v$0 = t$0[2],
      l = t$0[1],
      c$0 = caml_call2(compare_elt, x, v$0),
      _bd_ = 0 === c$0 ? 1 : 0;
     if(_bd_) return _bd_;
     var r$0 = 0 <= c$0 ? r : l, t$0 = r$0;
    }
   }
   function remove(t, x, compare_elt){
    function aux(t){
     if(typeof t === "number") return caml_call1(Base_Exn[6], Same);
     if(0 === t[0]){
      var v = t[1];
      return 0 === caml_call2(compare_elt, x, v)
              ? 0
              : caml_call1(Base_Exn[6], Same);
     }
     var r = t[3], v$0 = t[2], l = t[1], c = caml_call2(compare_elt, x, v$0);
     return 0 === c
             ? merge(l, r)
             : 0 <= c ? bal(l, v$0, aux(r)) : bal(aux(l), v$0, r);
    }
    try{var _bb_ = aux(t); return _bb_;}
    catch(_bc_){
     var _ba_ = caml_wrap_exception(_bc_);
     if(_ba_ === Same) return t;
     throw caml_maybe_attach_backtrace(_ba_, 0);
    }
   }
   function remove_index(t, i, param){
    function aux(t, i){
     if(typeof t === "number") return caml_call1(Base_Exn[6], Same);
     if(0 === t[0]) return 0 === i ? 0 : caml_call1(Base_Exn[6], Same);
     var
      r = t[3],
      v = t[2],
      l = t[1],
      l_size = length(l),
      c = caml_int_compare(i, l_size);
     if(0 === c) return merge(l, r);
     if(0 > c) return bal(aux(l, i), v, r);
     var _a$_ = caml_call2(Base_Import[93], i, l_size);
     return bal(l, v, aux(r, caml_call2(Base_Import[93], _a$_, 1)));
    }
    try{var _a9_ = aux(t, i); return _a9_;}
    catch(_a__){
     var _a8_ = caml_wrap_exception(_a__);
     if(_a8_ === Same) return t;
     throw caml_maybe_attach_backtrace(_a8_, 0);
    }
   }
   function union(s1, s2, compare_elt){
    function union(s1, s2){
     var s1$0 = s1, s2$0 = s2;
     for(;;){
      if(s1$0 === s2$0) return s1$0;
      if(typeof s1$0 === "number")
       var t = s2$0;
      else{
       if(1 === s1$0[0]){
        var h1 = s1$0[4], r1 = s1$0[3], v1$0 = s1$0[2], l1 = s1$0[1];
        if(typeof s2$0 !== "number"){
         if(0 === s2$0[0]){
          var v2 = s2$0[1], s2$1 = [1, 0, v2, 0, 1, 1], s2$0 = s2$1;
          continue;
         }
         var h2 = s2$0[4], r2 = s2$0[3], v2$0 = s2$0[2], l2 = s2$0[1];
         if(h2 <= h1){
          if(1 === h2) return add(s1$0, v2$0, compare_elt);
          var
           match = split(s2$0, v1$0, compare_elt),
           r2$0 = match[3],
           l2$0 = match[1],
           _a6_ = union(r1, r2$0);
          return join(union(l1, l2$0), v1$0, _a6_);
         }
         if(1 === h1) return add(s2$0, v1$0, compare_elt);
         var
          match$0 = split(s1$0, v2$0, compare_elt),
          r1$0 = match$0[3],
          l1$0 = match$0[1],
          _a7_ = union(r1$0, r2);
         return join(union(l1$0, l2), v2$0, _a7_);
        }
       }
       if(typeof s2$0 !== "number"){
        var v1 = s1$0[1], s1$1 = [1, 0, v1, 0, 1, 1], s1$0 = s1$1;
        continue;
       }
       var t = s1$0;
      }
      return t;
     }
    }
    return union(s1, s2);
   }
   function union_list(comparator, to_tree, xs){
    var compare_elt = comparator[1];
    function _a5_(ac, x){
     return union(ac, caml_call1(to_tree, x), compare_elt);
    }
    return caml_call3(Base_List[20], xs, empty_without_value_restrictio, _a5_);
   }
   function inter(s1, s2, compare_elt){
    function inter(s1, s2){
     if(s1 === s2) return s1;
     if(typeof s1 !== "number" && typeof s2 !== "number"){
      a:
      {
       if(typeof s1 !== "number" && 0 !== s1[0]){
        if(typeof s2 !== "number" && 0 !== s2[0]){
         var
          r1 = s1[3],
          v1 = s1[2],
          l1 = s1[1],
          _a2_ = split(s2, v1, compare_elt),
          match = _a2_[2],
          l2 = _a2_[1];
         if(match){
          var r2 = _a2_[3], v1$0 = match[1], _a3_ = inter(r1, r2);
          return join(inter(l1, l2), v1$0, _a3_);
         }
         var r2$0 = _a2_[3], _a4_ = inter(r1, r2$0);
         return concat(inter(l1, l2), _a4_);
        }
        var other_set = s1, singleton = s2, elt = s2[1];
        break a;
       }
       var other_set = s2, singleton = s1, elt = s1[1];
      }
      return mem(other_set, elt, compare_elt) ? singleton : 0;
     }
     return 0;
    }
    return inter(s1, s2);
   }
   function diff(s1, s2, compare_elt){
    function diff(s1, s2){
     var s1$0 = s1;
     for(;;){
      if(s1$0 === s2) return 0;
      if(typeof s1$0 === "number") return 0;
      if(typeof s2 === "number") return s1$0;
      if(typeof s1$0 !== "number" && 0 !== s1$0[0]){
       var
        r1 = s1$0[3],
        v1$0 = s1$0[2],
        l1 = s1$0[1],
        _aZ_ = split(s2, v1$0, compare_elt),
        l2 = _aZ_[1];
       if(_aZ_[2]){
        var r2 = _aZ_[3], _a0_ = diff(r1, r2);
        return concat(diff(l1, l2), _a0_);
       }
       var r2$0 = _aZ_[3], _a1_ = diff(r1, r2$0);
       return join(diff(l1, l2), v1$0, _a1_);
      }
      var v1 = s1$0[1], s1$1 = [1, 0, v1, 0, 1, 1], s1$0 = s1$1;
     }
    }
    return diff(s1, s2);
   }
   function cons(s, e){
    var s$0 = s, e$0 = e;
    for(;;){
     if(typeof s$0 === "number") return e$0;
     if(0 === s$0[0]){var v = s$0[1]; return [0, v, 0, e$0];}
     var
      r = s$0[3],
      v$0 = s$0[2],
      l = s$0[1],
      e$1 = [0, v$0, r, e$0],
      s$0 = l,
      e$0 = e$1;
    }
   }
   function cons_right(s, e){
    var s$0 = s, e$0 = e;
    for(;;){
     if(typeof s$0 === "number") return e$0;
     if(0 === s$0[0]){var v = s$0[1]; return [0, v, 0, e$0];}
     var
      r = s$0[3],
      v$0 = s$0[2],
      l = s$0[1],
      e$1 = [0, v$0, l, e$0],
      s$0 = r,
      e$0 = e$1;
    }
   }
   function of_set(s){return cons(s, 0);}
   function iter(f, param){
    var param$0 = param;
    for(;;){
     if(! param$0) return 0;
     var enum$0 = param$0[3], tree = param$0[2], a = param$0[1];
     caml_call1(f, a);
     var param$0 = cons(tree, enum$0);
    }
   }
   function symmetric_diff(t1, t2, compare_elt){
    function step(state){
     var left = state[1];
     if(! left){
      var match = state[2];
      if(! match) return 0;
      var enum$0 = match[3], tree = match[2], elt$0 = match[1];
      return [1, [1, elt$0], [0, 0, cons(tree, enum$0)]];
     }
     var right = state[2], enum1 = left[3], tree1 = left[2], elt = left[1];
     if(! right) return [1, [0, elt], [0, cons(tree1, enum1), 0]];
     var
      enum2 = right[3],
      tree2 = right[2],
      a2 = right[1],
      compare_result = caml_call2(compare_elt, elt, a2);
     if(0 !== compare_result)
      return 0 <= compare_result
              ? [1, [1, a2], [0, left, cons(tree2, enum2)]]
              : [1, [0, elt], [0, cons(tree1, enum1), right]];
     if(tree1 === tree2)
      var next_state = [0, enum1, enum2];
     else
      var
       _aY_ = cons(tree2, enum2),
       next_state = [0, cons(tree1, enum1), _aY_];
     return [0, next_state];
    }
    var _aW_ = of_set(t2), _aX_ = [0, of_set(t1), _aW_];
    return caml_call2(Base_Sequence[44], _aX_, step);
   }
   function to_sequence
   (comparator, opt, greater_or_equal_to, less_or_equal_to, t$3){
    if(opt) var sth = opt[1], order = sth; else var order = 608542111;
    function inclusive_bound(side, t, bound){
     var
      compare_elt = comparator[1],
      match = split(t, bound, compare_elt),
      r = match[3],
      maybe = match[2],
      l = match[1],
      t$0 = caml_call1(side, [0, l, r]);
     if(! maybe) return t$0;
     var elt = maybe[1];
     return add(t$0, elt, compare_elt);
    }
    if(608542111 <= order){
     var
      _aO_ = Base_Import[125],
      _aP_ = function(_aU_, _aV_){return inclusive_bound(_aO_, _aU_, _aV_);},
      t$4 = caml_call3(Base_Option[34], less_or_equal_to, t$3, _aP_),
      next =
        function(enum$0){
         if(! enum$0) return 0;
         var e = enum$0[3], t = enum$0[2], k = enum$0[1];
         return [1, k, cons(t, e)];
        };
     if(greater_or_equal_to){
      var
       key = greater_or_equal_to[1],
       compare = comparator[1],
       t = t$4,
       e = 0;
      for(;;){
       if(typeof t === "number"){var init = e; break;}
       if(0 === t[0])
        var v = t[1], t$0 = [1, 0, v, 0, 1, 1], t = t$0;
       else{
        var l = t[1], r = t[3], v$0 = t[2];
        if(0 <= caml_call2(compare, v$0, key))
         var r$0 = t[3], v$1 = t[2], e$0 = [0, v$1, r$0, e], t = l, e = e$0;
        else
         var t = r;
       }
      }
     }
     else
      var init = of_set(t$4);
     return caml_call2(Base_Sequence[44], init, next);
    }
    var _aQ_ = Base_Import[127];
    function _aR_(_aS_, _aT_){return inclusive_bound(_aQ_, _aS_, _aT_);}
    var t$5 = caml_call3(Base_Option[34], greater_or_equal_to, t$3, _aR_);
    function next$0(enum$0){
     if(! enum$0) return 0;
     var e = enum$0[3], t = enum$0[2], k = enum$0[1];
     return [1, k, cons_right(t, e)];
    }
    if(less_or_equal_to){
     var
      key$0 = less_or_equal_to[1],
      compare$0 = comparator[1],
      t$1 = t$5,
      e$1 = 0;
     for(;;){
      if(typeof t$1 === "number"){var init$0 = e$1; break;}
      if(0 === t$1[0])
       var v$2 = t$1[1], t$2 = [1, 0, v$2, 0, 1, 1], t$1 = t$2;
      else{
       var l$0 = t$1[1], v$3 = t$1[2];
       if(0 < caml_call2(compare$0, v$3, key$0))
        var t$1 = l$0;
       else
        var
         r$1 = t$1[3],
         v$4 = t$1[2],
         e$2 = [0, v$4, l$0, e$1],
         t$1 = r$1,
         e$1 = e$2;
      }
     }
    }
    else
     var init$0 = cons_right(t$5, 0);
    return caml_call2(Base_Sequence[44], init$0, next$0);
   }
   function find_first_satisfying(t, f){
    var t$0 = t;
    for(;;){
     if(typeof t$0 === "number") return 0;
     if(0 === t$0[0]){var v = t$0[1]; return caml_call1(f, v) ? [0, v] : 0;}
     var r = t$0[3], v$0 = t$0[2], l = t$0[1];
     if(caml_call1(f, v$0)){
      var x = find_first_satisfying(l, f);
      return x ? x : [0, v$0];
     }
     var t$0 = r;
    }
   }
   function find_last_satisfying(t, f){
    var t$0 = t;
    for(;;){
     if(typeof t$0 === "number") return 0;
     if(0 === t$0[0]){var v = t$0[1]; return caml_call1(f, v) ? [0, v] : 0;}
     var r = t$0[3], v$0 = t$0[2], l = t$0[1];
     if(caml_call1(f, v$0)){
      var x = find_last_satisfying(r, f);
      return x ? x : [0, v$0];
     }
     var t$0 = l;
    }
   }
   function binary_search(t, compare, how, v){
    if(-839473056 <= how)
     return 200870407 <= how
             ? 926943384
               <= how
               ? find_first_satisfying
                 (t,
                  function(x){return 0 <= caml_call2(compare, x, v) ? 1 : 0;})
               : find_last_satisfying
                 (t,
                  function(x){return caml_call2(compare, x, v) < 0 ? 1 : 0;})
             : -253007807
               <= how
               ? find_last_satisfying
                 (t,
                  function(x){return caml_call2(compare, x, v) <= 0 ? 1 : 0;})
               : find_first_satisfying
                 (t,
                  function(x){return 0 < caml_call2(compare, x, v) ? 1 : 0;});
    if(-1055410545 <= how){
     var
      elt =
        find_last_satisfying
         (t, function(x){return caml_call2(compare, x, v) <= 0 ? 1 : 0;});
     if(elt){var x = elt[1]; if(0 === caml_call2(compare, x, v)) return elt;}
     return 0;
    }
    var
     elt$0 =
       find_first_satisfying
        (t, function(x){return 0 <= caml_call2(compare, x, v) ? 1 : 0;});
    if(elt$0){
     var x$0 = elt$0[1];
     if(0 === caml_call2(compare, x$0, v)) return elt$0;
    }
    return 0;
   }
   function binary_search_segmented(t, segment_of, how){
    function is_left(x){
     return 847852583 <= caml_call1(segment_of, x) ? 1 : 0;
    }
    function is_right(x){return 1 - is_left(x);}
    return 125585502 <= how
            ? find_last_satisfying(t, is_left)
            : find_first_satisfying(t, is_right);
   }
   function merge_to_sequence
   (comparator, opt, greater_or_equal_to, less_or_equal_to, t$0, t){
    if(opt) var sth = opt[1], order = sth; else var order = 608542111;
    var
     _aL_ =
       608542111 <= order
        ? comparator[1]
        : caml_call1(Base_Fn[6], comparator[1]),
     _aM_ =
       to_sequence
        (comparator, [0, order], greater_or_equal_to, less_or_equal_to, t),
     _aN_ =
       to_sequence
        (comparator, [0, order], greater_or_equal_to, less_or_equal_to, t$0);
    return caml_call3(Base_Sequence[58], _aN_, _aM_, _aL_);
   }
   function compare(compare_elt, s1, s2){
    var e2$2 = of_set(s2), e1$2 = of_set(s1), e1 = e1$2, e2 = e2$2;
    for(;;){
     if(! e1) return e2 ? -1 : 0;
     if(! e2) return 1;
     var
      e2$0 = e2[3],
      r2 = e2[2],
      v2 = e2[1],
      e1$0 = e1[3],
      r1 = e1[2],
      v1 = e1[1],
      c = caml_call2(compare_elt, v1, v2);
     if(0 !== c) return c;
     if(r1 === r2)
      var e1 = e1$0, e2 = e2$0;
     else
      var e2$1 = cons(r2, e2$0), e1$1 = cons(r1, e1$0), e1 = e1$1, e2 = e2$1;
    }
   }
   function iter2(s1, s2, compare_elt, f){
    var t2$2 = of_set(s2), t1$2 = of_set(s1), t1 = t1$2, t2 = t2$2;
    for(;;){
     if(! t1)
      return t2
              ? iter
                (function(a){return caml_call1(f, [0, -57574468, a]);}, t2)
              : 0;
     if(! t2)
      return iter(function(a){return caml_call1(f, [0, 847852583, a]);}, t1);
     var
      enum2 = t2[3],
      tree2 = t2[2],
      a2 = t2[1],
      enum1 = t1[3],
      tree1 = t1[2],
      a1 = t1[1],
      compare_result = caml_call2(compare_elt, a1, a2);
     if(0 === compare_result){
      caml_call1(f, [0, 737457313, [0, a1, a2]]);
      var
       t2$0 = cons(tree2, enum2),
       t1$0 = cons(tree1, enum1),
       t1 = t1$0,
       t2 = t2$0;
     }
     else if(0 <= compare_result){
      caml_call1(f, [0, -57574468, a2]);
      var t2$1 = cons(tree2, enum2), t2 = t2$1;
     }
     else{
      caml_call1(f, [0, 847852583, a1]);
      var t1$1 = cons(tree1, enum1), t1 = t1$1;
     }
    }
   }
   function equal(s1, s2, compare_elt){
    return 0 === compare(compare_elt, s1, s2) ? 1 : 0;
   }
   function is_subset(s1, s2, compare_elt){
    function is_subset(s1, s2){
     var s1$0 = s1, s2$0 = s2;
     for(;;){
      if(typeof s1$0 === "number") return 1;
      if(1 === s1$0[0]){
       var r1 = s1$0[3], v1$0 = s1$0[2], l1 = s1$0[1];
       if(typeof s2$0 !== "number"){
        if(0 === s2$0[0]){
         var v2 = s2$0[1];
         if(typeof l1 === "number" && typeof r1 === "number")
          return 0 === caml_call2(compare_elt, v1$0, v2) ? 1 : 0;
         return 0;
        }
        var
         r2 = s2$0[3],
         v2$0 = s2$0[2],
         l2 = s2$0[1],
         c = caml_call2(compare_elt, v1$0, v2$0);
        if(0 !== c){
         if(0 <= c){
          var _aJ_ = is_subset([1, 0, v1$0, r1, 0, 0], r2);
          if(! _aJ_) return _aJ_;
          var s1$0 = l1;
          continue;
         }
         var _aK_ = is_subset([1, l1, v1$0, 0, 0, 0], l2);
         if(! _aK_) return _aK_;
         var s1$0 = r1;
         continue;
        }
        var _aG_ = s1$0 === s2$0 ? 1 : 0;
        if(_aG_)
         var _aH_ = _aG_;
        else{
         var _aI_ = is_subset(l1, l2);
         if(_aI_){var s1$0 = r1, s2$0 = r2; continue;}
         var _aH_ = _aI_;
        }
        return _aH_;
       }
      }
      if(typeof s2$0 === "number") return 0;
      var v1 = s1$0[1];
      return mem(s2$0, v1, compare_elt);
     }
    }
    return is_subset(s1, s2);
   }
   function are_disjoint(s1, s2, compare_elt){
    var s1$0 = s1, s2$0 = s2;
    for(;;){
     if(typeof s1$0 !== "number" && typeof s2$0 !== "number"){
      a:
      {
       if(typeof s1$0 !== "number" && 0 !== s1$0[0]){
        if(typeof s2$0 !== "number" && 0 !== s2$0[0]){
         var r1 = s1$0[3], v1 = s1$0[2], l1 = s1$0[1];
         if(s1$0 === s2$0) return 0;
         var _aE_ = split(s2$0, v1, compare_elt), l2 = _aE_[1];
         if(_aE_[2]) return 0;
         var r2 = _aE_[3], _aF_ = are_disjoint(l1, l2, compare_elt);
         if(! _aF_) return _aF_;
         var s1$0 = r1, s2$0 = r2;
         continue;
        }
        var other_set = s1$0, elt = s2$0[1];
        break a;
       }
       var other_set = s2$0, elt = s1$0[1];
      }
      return 1 - mem(other_set, elt, compare_elt);
     }
     return 1;
    }
   }
   function iter$0(t, f){
    function iter(param){
     var param$0 = param;
     for(;;){
      if(typeof param$0 === "number") return 0;
      if(0 === param$0[0]){var v = param$0[1]; return caml_call1(f, v);}
      var r = param$0[3], v$0 = param$0[2], l = param$0[1];
      iter(l);
      caml_call1(f, v$0);
      var param$0 = r;
     }
    }
    return iter(t);
   }
   function fold(s, accu, f){
    var s$0 = s, accu$0 = accu;
    for(;;){
     if(typeof s$0 === "number") return accu$0;
     if(0 === s$0[0]){var v = s$0[1]; return caml_call2(f, accu$0, v);}
     var
      r = s$0[3],
      v$0 = s$0[2],
      l = s$0[1],
      accu$1 = caml_call2(f, fold(l, accu$0, f), v$0),
      s$0 = r,
      accu$0 = accu$1;
    }
   }
   function count(t, f){return caml_call3(Base_Container[2], fold, t, f);}
   function sum(m, t, f){return caml_call4(Base_Container[7], fold, m, t, f);}
   function fold_right(s, accu, f){
    var s$0 = s, accu$0 = accu;
    for(;;){
     if(typeof s$0 === "number") return accu$0;
     if(0 === s$0[0]){var v = s$0[1]; return caml_call2(f, v, accu$0);}
     var
      r = s$0[3],
      v$0 = s$0[2],
      l = s$0[1],
      accu$1 = caml_call2(f, v$0, fold_right(r, accu$0, f)),
      s$0 = l,
      accu$0 = accu$1;
    }
   }
   function for_all(t, p){
    var t$0 = t;
    for(;;){
     if(typeof t$0 === "number") return 1;
     if(0 === t$0[0]){var v = t$0[1]; return caml_call1(p, v);}
     var r = t$0[3], v$0 = t$0[2], l = t$0[1], _aB_ = caml_call1(p, v$0);
     if(_aB_){
      var _aC_ = for_all(l, p);
      if(_aC_){var t$0 = r; continue;}
      var _aD_ = _aC_;
     }
     else
      var _aD_ = _aB_;
     return _aD_;
    }
   }
   function exists(t, p){
    var t$0 = t;
    for(;;){
     if(typeof t$0 === "number") return 0;
     if(0 === t$0[0]){var v = t$0[1]; return caml_call1(p, v);}
     var r = t$0[3], v$0 = t$0[2], l = t$0[1], _ay_ = caml_call1(p, v$0);
     if(_ay_)
      var _az_ = _ay_;
     else{
      var _aA_ = exists(l, p);
      if(! _aA_){var t$0 = r; continue;}
      var _az_ = _aA_;
     }
     return _az_;
    }
   }
   function filter(s, p){
    function filt(t){
     if(typeof t === "number") return 0;
     if(0 === t[0]){var v = t[1]; return caml_call1(p, v) ? t : 0;}
     var
      r = t[3],
      v$0 = t[2],
      l = t[1],
      l$0 = filt(l),
      keep_v = caml_call1(p, v$0),
      r$0 = filt(r);
     if(keep_v && l === l$0 && r === r$0) return t;
     return keep_v ? join(l$0, v$0, r$0) : concat(l$0, r$0);
    }
    return filt(s);
   }
   function filter_map(s, p, compare_elt){
    function filt(accu, param){
     var accu$0 = accu, param$0 = param;
     for(;;){
      if(typeof param$0 === "number") return accu$0;
      if(0 === param$0[0]){
       var v = param$0[1], match = caml_call1(p, v);
       if(! match) return accu$0;
       var v$0 = match[1];
       return add(accu$0, v$0, compare_elt);
      }
      var
       r = param$0[3],
       v$1 = param$0[2],
       l = param$0[1],
       match$0 = caml_call1(p, v$1);
      if(match$0)
       var v$2 = match$0[1], _ax_ = add(accu$0, v$2, compare_elt);
      else
       var _ax_ = accu$0;
      var accu$1 = filt(_ax_, l), accu$0 = accu$1, param$0 = r;
     }
    }
    return filt(0, s);
   }
   function partition_tf(s, p){
    function loop(t){
     if(typeof t === "number") return _r_;
     if(0 === t[0]){
      var v = t[1];
      return caml_call1(p, v) ? [0, t, 0] : [0, 0, t];
     }
     var
      r = t[3],
      v$0 = t[2],
      l = t[1],
      match = loop(l),
      l_f = match[2],
      l_t = match[1],
      keep_v_t = caml_call1(p, v$0),
      match$0 = loop(r),
      r_f = match$0[2],
      r_t = match$0[1];
     function mk(keep_v, l$0, r$0){
      if(keep_v && l === l$0 && r === r$0) return t;
      return keep_v ? join(l$0, v$0, r$0) : concat(l$0, r$0);
     }
     var _aw_ = mk(1 - keep_v_t, l_f, r_f);
     return [0, mk(keep_v_t, l_t, r_t), _aw_];
    }
    return loop(s);
   }
   function elements_aux(accu, param){
    var accu$0 = accu, param$0 = param;
    for(;;){
     if(typeof param$0 === "number") return accu$0;
     if(0 === param$0[0]){var v = param$0[1]; return [0, v, accu$0];}
     var
      r = param$0[3],
      v$0 = param$0[2],
      l = param$0[1],
      accu$1 = [0, v$0, elements_aux(accu$0, r)],
      accu$0 = accu$1,
      param$0 = l;
    }
   }
   function elements(s){return elements_aux(0, s);}
   function choose(t){
    if(typeof t === "number") return 0;
    if(0 === t[0]){var v = t[1]; return [0, v];}
    var v$0 = t[2];
    return [0, v$0];
   }
   var not_found = [0, Base_Import[297], _s_];
   function choose_exn(t){
    var match = choose(t);
    if(! match) throw caml_maybe_attach_backtrace(not_found, 1);
    var v = match[1];
    return v;
   }
   function of_list(lst, compare_elt){
    function _av_(t, x){return add(t, x, compare_elt);}
    return caml_call3
            (Base_List[20], lst, empty_without_value_restrictio, _av_);
   }
   function of_sequence(sequence, compare_elt){
    function _au_(t, x){return add(t, x, compare_elt);}
    return caml_call3
            (Base_Sequence[11],
             sequence,
             empty_without_value_restrictio,
             _au_);
   }
   function to_list(s){return elements(s);}
   function of_array(a, compare_elt){
    function _at_(t, x){return add(t, x, compare_elt);}
    return caml_call3(Base_Array[21], a, empty_without_value_restrictio, _at_);
   }
   function to_array(param){
    if(typeof param === "number") return [0];
    if(0 === param[0]){var v = param[1]; return [0, v];}
    var
     s = param[5],
     r = param[3],
     v$0 = param[2],
     l = param[1],
     res = caml_call2(Base_Array[48], s, v$0),
     pos_ref = [0, 0];
    function loop(param){
     var param$0 = param;
     for(;;){
      if(typeof param$0 === "number") return;
      if(0 === param$0[0]){
       var v = param$0[1], _ar_ = pos_ref[1];
       caml_check_bound(res, _ar_)[1 + _ar_] = v;
       pos_ref[1]++;
       return;
      }
      var r = param$0[3], v$0 = param$0[2], l = param$0[1];
      loop(l);
      var _as_ = pos_ref[1];
      caml_check_bound(res, _as_)[1 + _as_] = v$0;
      pos_ref[1]++;
      var param$0 = r;
     }
    }
    loop(l);
    pos_ref[1]++;
    loop(r);
    return res;
   }
   function map(t, f, compare_elt){
    return fold
            (t,
             empty_without_value_restrictio,
             function(t, x){return add(t, caml_call1(f, x), compare_elt);});
   }
   function group_by(set, equiv){
    var set$0 = set, equiv_classes = 0;
    for(;;){
     if(is_empty(set$0)) return equiv_classes;
     var
      x = choose_exn(set$0),
      match =
        partition_tf
         (set$0,
          function(x){
            return function(elt){
             var _aq_ = x === elt ? 1 : 0;
             return _aq_ ? _aq_ : caml_call2(equiv, x, elt);};
           }
           (x)),
      not_equiv_x = match[2],
      equiv_x = match[1],
      equiv_classes$0 = [0, equiv_x, equiv_classes],
      set$0 = not_equiv_x,
      equiv_classes = equiv_classes$0;
    }
   }
   function find(t, f){
    var t$0 = t;
    for(;;){
     if(typeof t$0 === "number") return 0;
     if(0 === t$0[0]){var v = t$0[1]; return caml_call1(f, v) ? [0, v] : 0;}
     var r = t$0[3], v$0 = t$0[2], l = t$0[1];
     if(caml_call1(f, v$0)) return [0, v$0];
     var r$0 = find(l, f);
     if(r$0) return r$0;
     var t$0 = r;
    }
   }
   function find_map(t, f){
    var t$0 = t;
    for(;;){
     if(typeof t$0 === "number") return 0;
     if(0 === t$0[0]){var v = t$0[1]; return caml_call1(f, v);}
     var r = t$0[3], v$0 = t$0[2], l = t$0[1], r$0 = caml_call1(f, v$0);
     if(r$0) return r$0;
     var r$1 = find_map(l, f);
     if(r$1) return r$1;
     var t$0 = r;
    }
   }
   function find_exn(t, f){
    var match = find(t, f);
    if(! match)
     return caml_call1(Base_Import[124], cst_Set_find_exn_failed_to_fin);
    var e = match[1];
    return e;
   }
   function nth(t, i){
    var t$0 = t, i$0 = i;
    for(;;){
     if(typeof t$0 === "number") return 0;
     if(0 === t$0[0]){var v = t$0[1]; return 0 === i$0 ? [0, v] : 0;}
     var s = t$0[5], r = t$0[3], v$0 = t$0[2], l = t$0[1];
     if(s <= i$0) return 0;
     var l_size = length(l), c = caml_int_compare(i$0, l_size);
     if(0 <= c){
      if(0 === c) return [0, v$0];
      var
       _ap_ = caml_call2(Base_Import[93], i$0, l_size),
       i$1 = caml_call2(Base_Import[93], _ap_, 1),
       t$0 = r,
       i$0 = i$1;
     }
     else
      var t$0 = l;
    }
   }
   function stable_dedup_list(xs, compare_elt){
    var
     xs$0 = xs,
     leftovers = 0,
     already_seen = empty_without_value_restrictio;
    for(;;){
     if(! xs$0) return caml_call1(Base_List[63], leftovers);
     var tl = xs$0[2], hd = xs$0[1];
     if(mem(already_seen, hd, compare_elt))
      var xs$0 = tl;
     else
      var
       already_seen$0 = add(already_seen, hd, compare_elt),
       leftovers$0 = [0, hd, leftovers],
       xs$0 = tl,
       leftovers = leftovers$0,
       already_seen = already_seen$0;
    }
   }
   function t_of_sexp_direct(a_of_sexp, sexp, compare_elt){
    if(0 === sexp[0])
     return caml_call2(Base_Import[156], cst_Set_t_of_sexp_list_needed, sexp);
    var
     lst = sexp[1],
     elt_lst = caml_call2(Base_List[53], lst, a_of_sexp),
     set = of_list(elt_lst, compare_elt),
     _an_ = caml_call1(Base_List[45], lst);
    if(length(set) === _an_) return set;
    var set$0 = [0, empty_without_value_restrictio];
    function _ao_(el_sexp, el){
     return mem(set$0[1], el, compare_elt)
             ? caml_call2
               (Base_Import[156], cst_Set_t_of_sexp_duplicate_el, el_sexp)
             : (set$0[1] = add(set$0[1], el, compare_elt), 0);
    }
    caml_call3(Base_List[67], lst, elt_lst, _ao_);
    throw caml_maybe_attach_backtrace([0, Assert_failure, _t_], 1);
   }
   function sexp_of_t(sexp_of_a, t){
    return [1,
            fold_right
             (t,
              0,
              function(el, acc){return [0, caml_call1(sexp_of_a, el), acc];})];
   }
   function is_subset$0(subset, superset, sexp_of_elt, compare_elt){
    var invalid_elements = diff(subset[1], superset[1], compare_elt);
    if(is_empty(invalid_elements)) return _u_;
    var
     invalid_elements_sexp = sexp_of_t(sexp_of_elt, invalid_elements),
     _ak_ = caml_call2(Base_Import[112], cst_is_not_a_subset_of, superset[2]),
     _al_ = caml_call2(Base_Import[112], subset[2], _ak_),
     _am_ =
       caml_call2
        (Base_Sexp[10],
         _al_,
         [0, [0, cst_invalid_elements, invalid_elements_sexp], 0]);
    return caml_call1(Base_Or_error[39], _am_);
   }
   function like(param, tree){
    var comparator = param[1];
    return [0, comparator, tree];
   }
   function like_maybe_no_op(old_t, tree){
    var old_tree = old_t[2], comparator = old_t[1];
    return old_tree === tree ? old_t : [0, comparator, tree];
   }
   function compare_elt(t){return t[1][1];}
   function comparator(t){return t[1];}
   function comparator_s(t){return caml_call1(Base_Comparator[5], t[1]);}
   function invariants$0(t){
    var _aj_ = compare_elt(t);
    return invariants(t[2], _aj_);
   }
   function length$0(t){return length(t[2]);}
   function is_empty$0(t){return is_empty(t[2]);}
   function elements$0(t){return elements(t[2]);}
   function min_elt$0(t){return min_elt(t[2]);}
   function min_elt_exn$0(t){return min_elt_exn(t[2]);}
   function max_elt$0(t){return max_elt(t[2]);}
   function max_elt_exn$0(t){return max_elt_exn(t[2]);}
   function choose$0(t){return choose(t[2]);}
   function choose_exn$0(t){return choose_exn(t[2]);}
   function to_list$0(t){return to_list(t[2]);}
   function to_array$0(t){return to_array(t[2]);}
   function fold$0(t, init, f){return fold(t[2], init, f);}
   function fold_until$0(t, init, f, finish){
    return fold_until(t[2], init, f, finish);
   }
   function fold_right$0(t, init, f){return fold_right(t[2], init, f);}
   function fold_result(t, init, f){
    return caml_call4(Base_Container[8], fold$0, init, f, t);
   }
   function iter$1(t, f){return iter$0(t[2], f);}
   function iter2$0(a, b, f){
    var _ai_ = compare_elt(a);
    return iter2(a[2], b[2], _ai_, f);
   }
   function exists$0(t, f){return exists(t[2], f);}
   function for_all$0(t, f){return for_all(t[2], f);}
   function count$0(t, f){return count(t[2], f);}
   function sum$0(m, t, f){return sum(m, t[2], f);}
   function find$0(t, f){return find(t[2], f);}
   function find_exn$0(t, f){return find_exn(t[2], f);}
   function find_map$0(t, f){return find_map(t[2], f);}
   function mem$0(t, a){var _ah_ = compare_elt(t); return mem(t[2], a, _ah_);}
   function filter$0(t, f){return like_maybe_no_op(t, filter(t[2], f));}
   function add$0(t, a){
    var _ag_ = compare_elt(t);
    return like(t, add(t[2], a, _ag_));
   }
   function remove$0(t, a){
    var _af_ = compare_elt(t);
    return like(t, remove(t[2], a, _af_));
   }
   function union$0(t1, t2){
    var _ae_ = compare_elt(t1);
    return like(t1, union(t1[2], t2[2], _ae_));
   }
   function inter$0(t1, t2){
    var _ad_ = compare_elt(t1);
    return like(t1, inter(t1[2], t2[2], _ad_));
   }
   function diff$0(t1, t2){
    var _ac_ = compare_elt(t1);
    return like(t1, diff(t1[2], t2[2], _ac_));
   }
   function symmetric_diff$0(t1, t2){
    var _ab_ = compare_elt(t1);
    return symmetric_diff(t1[2], t2[2], _ab_);
   }
   function compare_direct(t1, t2){
    var _$_ = t2[2], _aa_ = t1[2];
    return compare(compare_elt(t1), _aa_, _$_);
   }
   function equal$0(t1, t2){
    var ___ = compare_elt(t1);
    return equal(t1[2], t2[2], ___);
   }
   function is_subset$1(t, of){
    var _Z_ = compare_elt(t);
    return is_subset(t[2], of[2], _Z_);
   }
   function are_disjoint$0(t1, t2){
    var _Y_ = compare_elt(t1);
    return are_disjoint(t1[2], t2[2], _Y_);
   }
   function to_named_tree(named){return [0, named[1][2], named[2]];}
   function is_subset$2(subset, superset){
    var
     _V_ = compare_elt(subset[1]),
     _W_ = subset[1][1][2],
     _X_ = to_named_tree(superset);
    return is_subset$0(to_named_tree(subset), _X_, _W_, _V_);
   }
   function equal$1(t1, t2){
    var
     _T_ = [0, is_subset$2(t2, t1), 0],
     _U_ = [0, is_subset$2(t1, t2), _T_];
    return caml_call1(Base_Or_error[51], _U_);
   }
   function partition_tf$0(t, f){
    var
     match = partition_tf(t[2], f),
     tree_f = match[2],
     tree_t = match[1],
     _S_ = like_maybe_no_op(t, tree_f);
    return [0, like_maybe_no_op(t, tree_t), _S_];
   }
   function split$0(t, a){
    var
     _Q_ = compare_elt(t),
     match = split(t[2], a, _Q_),
     tree2 = match[3],
     b = match[2],
     tree1 = match[1],
     _R_ = like(t, tree2);
    return [0, like(t, tree1), b, _R_];
   }
   function split_le_gt$0(t, a){
    var
     _O_ = compare_elt(t),
     match = split_le_gt(t[2], a, _O_),
     tree2 = match[2],
     tree1 = match[1],
     _P_ = like(t, tree2);
    return [0, like(t, tree1), _P_];
   }
   function split_lt_ge$0(t, a){
    var
     _M_ = compare_elt(t),
     match = split_lt_ge(t[2], a, _M_),
     tree2 = match[2],
     tree1 = match[1],
     _N_ = like(t, tree2);
    return [0, like(t, tree1), _N_];
   }
   function group_by$0(t, equiv){
    function _J_(_L_){return like(t, _L_);}
    var _K_ = group_by(t[2], equiv);
    return caml_call2(Base_List[53], _K_, _J_);
   }
   function nth$0(t, i){return nth(t[2], i);}
   function remove_index$0(t, i){
    var _I_ = compare_elt(t);
    return like(t, remove_index(t[2], i, _I_));
   }
   function sexp_of_t$0(sexp_of_a, param, t){return sexp_of_t(sexp_of_a, t[2]);
   }
   function to_sequence$0(order, greater_or_equal_to, less_or_equal_to, t){
    return to_sequence
            (t[1], order, greater_or_equal_to, less_or_equal_to, t[2]);
   }
   function binary_search$0(t, compare, how, v){
    return binary_search(t[2], compare, how, v);
   }
   function binary_search_segmented$0(t, segment_of, how){
    return binary_search_segmented(t[2], segment_of, how);
   }
   function merge_to_sequence$0
   (order, greater_or_equal_to, less_or_equal_to, t$0, t){
    return merge_to_sequence
            (t$0[1],
             order,
             greater_or_equal_to,
             less_or_equal_to,
             t$0[2],
             t[2]);
   }
   function hash_fold_direct(hash_fold_elem, state, t){
    var t$0 = t[2], _H_ = length(t$0);
    return fold(t$0, caml_call2(Base_Import[206], state, _H_), hash_fold_elem);
   }
   function compare$0(param, _G_, t1, t2){return compare_direct(t1, t2);}
   function t_of_sexp_direct$0(comparator, a_of_sexp, sexp){
    return t_of_sexp_direct(a_of_sexp, sexp, comparator[1]);
   }
   function empty(param){return empty_without_value_restrictio;}
   function singleton(param, e){return [0, e];}
   function length$1(t){return length(t);}
   function invariants$1(comparator, t){return invariants(t, comparator[1]);}
   function is_empty$1(t){return is_empty(t);}
   function elements$1(t){return elements(t);}
   function min_elt$1(t){return min_elt(t);}
   function min_elt_exn$1(t){return min_elt_exn(t);}
   function max_elt$1(t){return max_elt(t);}
   function max_elt_exn$1(t){return max_elt_exn(t);}
   function choose$1(t){return choose(t);}
   function choose_exn$1(t){return choose_exn(t);}
   function to_list$1(t){return to_list(t);}
   function to_array$1(t){return to_array(t);}
   function iter$2(t, f){return iter$0(t, f);}
   function exists$1(t, f){return exists(t, f);}
   function for_all$1(t, f){return for_all(t, f);}
   function count$1(t, f){return count(t, f);}
   function sum$1(m, t, f){return sum(m, t, f);}
   function find$1(t, f){return find(t, f);}
   function find_exn$1(t, f){return find_exn(t, f);}
   function find_map$1(t, f){return find_map(t, f);}
   function fold$1(t, init, f){return fold(t, init, f);}
   function fold_until$1(t, init, f, finish){return fold_until(t, init, f, finish);
   }
   function fold_right$1(t, init, f){return fold_right(t, init, f);}
   function map$0(comparator, t, f){return map(t, f, comparator[1]);}
   function filter$1(t, f){return filter(t, f);}
   function filter_map$0(comparator, t, f){
    return filter_map(t, f, comparator[1]);
   }
   function partition_tf$1(t, f){return partition_tf(t, f);}
   function iter2$1(comparator, a, b, f){
    return iter2(a, b, comparator[1], f);
   }
   function mem$1(comparator, t, a){return mem(t, a, comparator[1]);}
   function add$1(comparator, t, a){return add(t, a, comparator[1]);}
   function remove$1(comparator, t, a){return remove(t, a, comparator[1]);}
   function union$1(comparator, t1, t2){return union(t1, t2, comparator[1]);}
   function inter$1(comparator, t1, t2){return inter(t1, t2, comparator[1]);}
   function diff$1(comparator, t1, t2){return diff(t1, t2, comparator[1]);}
   function symmetric_diff$1(comparator, t1, t2){
    return symmetric_diff(t1, t2, comparator[1]);
   }
   function compare_direct$0(comparator, t1, t2){return compare(comparator[1], t1, t2);
   }
   function equal$2(comparator, t1, t2){return equal(t1, t2, comparator[1]);}
   function is_subset$3(comparator, t, of){
    return is_subset(t, of, comparator[1]);
   }
   function are_disjoint$1(comparator, t1, t2){
    return are_disjoint(t1, t2, comparator[1]);
   }
   function of_list$0(comparator, l){return of_list(l, comparator[1]);}
   function of_sequence$0(comparator, s){
    return of_sequence(s, comparator[1]);
   }
   function of_array$0(comparator, a){return of_array(a, comparator[1]);}
   function of_sorted_array_unchecked$0(comparator, a){
    return of_sorted_array_unchecked(a, comparator[1]);
   }
   function of_increasing_iterator_uncheck$0(param, len, f){return of_increasing_iterator_uncheck(len, f);
   }
   function of_sorted_array$0(comparator, a){
    return of_sorted_array(a, comparator[1]);
   }
   function union_list$0(comparator, l){
    return union_list(comparator, function(_F_){return _F_;}, l);
   }
   function stable_dedup_list$0(comparator, xs){
    return stable_dedup_list(xs, comparator[1]);
   }
   function group_by$1(t, equiv){return group_by(t, equiv);}
   function split$1(comparator, t, a){return split(t, a, comparator[1]);}
   function split_le_gt$1(comparator, t, a){
    return split_le_gt(t, a, comparator[1]);
   }
   function split_lt_ge$1(comparator, t, a){
    return split_lt_ge(t, a, comparator[1]);
   }
   function nth$1(t, i){return nth(t, i);}
   function remove_index$1(comparator, t, i){
    return remove_index(t, i, comparator[1]);
   }
   function sexp_of_t$1(sexp_of_a, param, t){return sexp_of_t(sexp_of_a, t);}
   function to_tree(t){return t;}
   function of_tree(param, t){return t;}
   function to_sequence$1
   (comparator, order, greater_or_equal_to, less_or_equal_to, t){
    return to_sequence
            (comparator, order, greater_or_equal_to, less_or_equal_to, t);
   }
   function binary_search$1(param, t, compare, how, v){return binary_search(t, compare, how, v);
   }
   function binary_search_segmented$1(param, t, segment_of, how){return binary_search_segmented(t, segment_of, how);
   }
   function merge_to_sequence$1
   (comparator, order, greater_or_equal_to, less_or_equal_to, t$0, t){
    return merge_to_sequence
            (comparator, order, greater_or_equal_to, less_or_equal_to, t$0, t);
   }
   function fold_result$0(t, init, f){
    return caml_call4(Base_Container[8], fold$1, init, f, t);
   }
   function is_subset$4(comparator, t1, t2){
    return is_subset$0(t1, t2, comparator[2], comparator[1]);
   }
   function equal$3(comparator, t1, t2){
    var
     compare_elt = comparator[1],
     sexp_of_elt = comparator[2],
     _D_ = [0, is_subset$0(t2, t1, sexp_of_elt, compare_elt), 0],
     _E_ = [0, is_subset$0(t1, t2, sexp_of_elt, compare_elt), _D_];
    return caml_call1(Base_Or_error[51], _E_);
   }
   var Named = [0, is_subset$4, equal$3];
   function to_tree$0(t){return t[2];}
   function of_tree$0(comparator, tree){return [0, comparator, tree];}
   function t_of_sexp_direct$1(comparator, a_of_sexp, sexp){
    return [0, comparator, t_of_sexp_direct(a_of_sexp, sexp, comparator[1])];
   }
   function empty$0(comparator){
    return [0, comparator, empty_without_value_restrictio];
   }
   function Empty_without_value_restrictio(Elt){
    var empty = [0, Elt[1], empty_without_value_restrictio];
    return [0, empty];
   }
   function singleton$0(comparator, e){return [0, comparator, [0, e]];}
   function union_list$1(comparator, l){
    return [0, comparator, union_list(comparator, to_tree$0, l)];
   }
   function of_sorted_array_unchecked$1(comparator, array){
    var tree = of_sorted_array_unchecked(array, comparator[1]);
    return [0, comparator, tree];
   }
   function of_increasing_iterator_uncheck$1(comparator, len, f){
    return [0, comparator, of_increasing_iterator_uncheck(len, f)];
   }
   function of_sorted_array$1(comparator, array){
    function _B_(tree){return [0, comparator, tree];}
    var _C_ = of_sorted_array(array, comparator[1]);
    return caml_call2(Base_Or_error[21][2], _C_, _B_);
   }
   function of_list$1(comparator, l){
    return [0, comparator, of_list(l, comparator[1])];
   }
   function of_sequence$1(comparator, s){
    return [0, comparator, of_sequence(s, comparator[1])];
   }
   function of_array$1(comparator, a){
    return [0, comparator, of_array(a, comparator[1])];
   }
   function stable_dedup_list$1(comparator, xs){
    return stable_dedup_list(xs, comparator[1]);
   }
   function map$1(comparator, t, f){
    return [0, comparator, map(t[2], f, comparator[1])];
   }
   function filter_map$1(comparator, t, f){
    return [0, comparator, filter_map(t[2], f, comparator[1])];
   }
   var to_comparator = Base_Comparator[4];
   function empty$1(m){return empty$0(caml_call1(to_comparator, m));}
   function singleton$1(m, a){
    return singleton$0(caml_call1(to_comparator, m), a);
   }
   function union_list$2(m, a){
    return union_list$1(caml_call1(to_comparator, m), a);
   }
   function of_sorted_array_unchecked$2(m, a){
    return of_sorted_array_unchecked$1(caml_call1(to_comparator, m), a);
   }
   function of_increasing_iterator_uncheck$2(m, len, f){
    return of_increasing_iterator_uncheck$1
            (caml_call1(to_comparator, m), len, f);
   }
   function of_sorted_array$2(m, a){
    return of_sorted_array$1(caml_call1(to_comparator, m), a);
   }
   function of_list$2(m, a){
    return of_list$1(caml_call1(to_comparator, m), a);
   }
   function of_sequence$2(m, a){
    return of_sequence$1(caml_call1(to_comparator, m), a);
   }
   function of_array$2(m, a){
    return of_array$1(caml_call1(to_comparator, m), a);
   }
   function stable_dedup_list$2(m, a){
    return stable_dedup_list$1(caml_call1(to_comparator, m), a);
   }
   function map$2(m, a, f){return map$1(caml_call1(to_comparator, m), a, f);}
   function filter_map$2(m, a, f){
    return filter_map$1(caml_call1(to_comparator, m), a, f);
   }
   function of_tree$1(m, t){return [0, caml_call1(to_comparator, m), t];}
   function M(Elt){return [0];}
   function sexp_of_m_t(Elt, t){
    function _A_(param){return _v_;}
    return sexp_of_t$0(Elt[1], _A_, t);
   }
   function m_t_of_sexp(Elt, sexp){
    return t_of_sexp_direct$1(Elt[2], Elt[1], sexp);
   }
   function m_t_sexp_grammar(Elt){
    var _z_ = caml_call1(Base_Import[194], Elt[1]);
    return caml_call1(Sexplib0_Sexp_grammar[1], _z_);
   }
   function compare_m_t(param, t1, t2){return compare_direct(t1, t2);}
   function equal_m_t(param, t1, t2){return equal$0(t1, t2);}
   function hash_fold_m_t(Elt, state){
    var _x_ = Elt[1];
    return function(_y_){return hash_fold_direct(_x_, state, _y_);};
   }
   function hash_m_t(folder, t){
    var state = hash_fold_m_t(folder, caml_call2(Base_Hash[11], 0, 0))(t);
    return caml_call1(Base_Hash[9], state);
   }
   var
    comparator$0 = Base_Comparator[2][1],
    include = Empty_without_value_restrictio(Base_Comparator[2]),
    empty$2 = include[1];
   function singleton$2(a){return singleton$0(comparator$0, a);}
   function union_list$3(a){return union_list$1(comparator$0, a);}
   function of_sorted_array_unchecked$3(a){
    return of_sorted_array_unchecked$1(comparator$0, a);
   }
   function of_increasing_iterator_uncheck$3(len, f){
    return of_increasing_iterator_uncheck$1(comparator$0, len, f);
   }
   function of_sorted_array$3(a){return of_sorted_array$1(comparator$0, a);}
   function of_list$3(a){return of_list$1(comparator$0, a);}
   function of_sequence$3(a){return of_sequence$1(comparator$0, a);}
   function of_array$3(a){return of_array$1(comparator$0, a);}
   function stable_dedup_list$3(a){
    return stable_dedup_list$1(comparator$0, a);
   }
   function map$3(a, f){return map$1(comparator$0, a, f);}
   function filter_map$3(a, f){return filter_map$1(comparator$0, a, f);}
   function of_tree$2(tree){return [0, comparator$0, tree];}
   function to_tree$1(t){return t[2];}
   var
    _w_ = Base_Sequence[57],
    Base_Set =
      [0,
       compare$0,
       invariants$0,
       comparator_s,
       comparator,
       empty$1,
       singleton$1,
       length$0,
       is_empty$0,
       mem$0,
       add$0,
       remove$0,
       union$0,
       union_list$2,
       inter$0,
       diff$0,
       symmetric_diff$0,
       compare_direct,
       hash_fold_direct,
       equal$0,
       exists$0,
       for_all$0,
       count$0,
       sum$0,
       find$0,
       find_map$0,
       find_exn$0,
       nth$0,
       remove_index$0,
       is_subset$1,
       are_disjoint$0,
       [0, is_subset$2, equal$1],
       of_list$2,
       of_sequence$2,
       of_array$2,
       to_list$0,
       to_array$0,
       of_sorted_array$2,
       of_sorted_array_unchecked$2,
       of_increasing_iterator_uncheck$2,
       stable_dedup_list$2,
       map$2,
       filter_map$2,
       filter$0,
       fold$0,
       fold_result,
       fold_until$0,
       fold_right$0,
       iter$1,
       iter2$0,
       partition_tf$0,
       elements$0,
       min_elt$0,
       min_elt_exn$0,
       max_elt$0,
       max_elt_exn$0,
       choose$0,
       choose_exn$0,
       split$0,
       split_le_gt$0,
       split_lt_ge$0,
       group_by$0,
       to_sequence$0,
       binary_search$0,
       binary_search_segmented$0,
       [0, _w_[1], _w_[6], _w_[7]],
       merge_to_sequence$0,
       M,
       sexp_of_m_t,
       m_t_of_sexp,
       m_t_sexp_grammar,
       compare_m_t,
       equal_m_t,
       hash_fold_m_t,
       hash_m_t,
       [0,
        sexp_of_t$0,
        t_of_sexp_direct$1,
        [0,
         sexp_of_t$1,
         t_of_sexp_direct$0,
         length$1,
         is_empty$1,
         iter$2,
         fold$1,
         fold_result$0,
         exists$1,
         for_all$1,
         count$1,
         sum$1,
         find$1,
         find_map$1,
         to_list$1,
         to_array$1,
         invariants$1,
         mem$1,
         add$1,
         remove$1,
         union$1,
         inter$1,
         diff$1,
         symmetric_diff$1,
         compare_direct$0,
         equal$2,
         is_subset$3,
         are_disjoint$1,
         Named,
         fold_until$1,
         fold_right$1,
         iter2$1,
         filter$1,
         partition_tf$1,
         elements$1,
         min_elt$1,
         min_elt_exn$1,
         max_elt$1,
         max_elt_exn$1,
         choose$1,
         choose_exn$1,
         split$1,
         split_le_gt$1,
         split_lt_ge$1,
         group_by$1,
         find_exn$1,
         nth$1,
         remove_index$1,
         to_tree,
         to_sequence$1,
         binary_search$1,
         binary_search_segmented$1,
         merge_to_sequence$1,
         empty,
         singleton,
         union_list$0,
         of_list$0,
         of_sequence$0,
         of_array$0,
         of_sorted_array$0,
         of_sorted_array_unchecked$0,
         of_increasing_iterator_uncheck$0,
         stable_dedup_list$0,
         map$0,
         filter_map$0,
         of_tree,
         empty_without_value_restrictio],
        length$0,
        is_empty$0,
        iter$1,
        fold$0,
        fold_result,
        exists$0,
        for_all$0,
        count$0,
        sum$0,
        find$0,
        find_map$0,
        to_list$0,
        to_array$0,
        invariants$0,
        mem$0,
        add$0,
        remove$0,
        union$0,
        inter$0,
        diff$0,
        symmetric_diff$0,
        compare_direct,
        equal$0,
        is_subset$1,
        are_disjoint$0,
        [0, is_subset$2, equal$1],
        fold_until$0,
        fold_right$0,
        iter2$0,
        filter$0,
        partition_tf$0,
        elements$0,
        min_elt$0,
        min_elt_exn$0,
        max_elt$0,
        max_elt_exn$0,
        choose$0,
        choose_exn$0,
        split$0,
        split_le_gt$0,
        split_lt_ge$0,
        group_by$0,
        find_exn$0,
        nth$0,
        remove_index$0,
        to_tree$0,
        to_sequence$0,
        binary_search$0,
        binary_search_segmented$0,
        merge_to_sequence$0,
        empty$0,
        singleton$0,
        union_list$1,
        of_list$1,
        of_sequence$1,
        of_array$1,
        of_sorted_array$1,
        of_sorted_array_unchecked$1,
        of_increasing_iterator_uncheck$1,
        stable_dedup_list$1,
        map$1,
        filter_map$1,
        of_tree$0,
        comparator_s,
        comparator,
        hash_fold_direct,
        Empty_without_value_restrictio],
       to_tree$0,
       of_tree$1,
       [0,
        length$0,
        is_empty$0,
        iter$1,
        fold$0,
        fold_result,
        exists$0,
        for_all$0,
        count$0,
        sum$0,
        find$0,
        find_map$0,
        to_list$0,
        to_array$0,
        invariants$0,
        mem$0,
        add$0,
        remove$0,
        union$0,
        inter$0,
        diff$0,
        symmetric_diff$0,
        compare_direct,
        equal$0,
        is_subset$1,
        are_disjoint$0,
        [0, is_subset$2, equal$1],
        fold_until$0,
        fold_right$0,
        iter2$0,
        filter$0,
        partition_tf$0,
        elements$0,
        min_elt$0,
        min_elt_exn$0,
        max_elt$0,
        max_elt_exn$0,
        choose$0,
        choose_exn$0,
        split$0,
        split_le_gt$0,
        split_lt_ge$0,
        group_by$0,
        find_exn$0,
        nth$0,
        remove_index$0,
        to_tree$1,
        to_sequence$0,
        binary_search$0,
        binary_search_segmented$0,
        merge_to_sequence$0,
        empty$2,
        singleton$2,
        union_list$3,
        of_list$3,
        of_sequence$3,
        of_array$3,
        of_sorted_array$3,
        of_sorted_array_unchecked$3,
        of_increasing_iterator_uncheck$3,
        stable_dedup_list$3,
        map$3,
        filter_map$3,
        of_tree$2]];
   runtime.caml_register_global(48, Base_Set, "Base__Set");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Ref
//# unitInfo: Requires: Base__Exn, Base__Import, Base__List
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_Exn = global_data.Base__Exn,
    Base_List = global_data.Base__List,
    Base_Import = global_data.Base__Import,
    compare_local = Base_Import[266],
    compare = Base_Import[238],
    equal_local = Base_Import[280],
    equal = Base_Import[252],
    globalize = Base_Import[296],
    t_of_sexp = Base_Import[168],
    sexp_of_t = Base_Import[144];
   function t_sexp_grammar(a_sexp_grammar){
    return caml_call1(Base_Import[191], a_sexp_grammar);
   }
   function swap(t1, t2){
    var tmp = t1[1];
    t1[1] = t2[1];
    t2[1] = tmp;
    return 0;
   }
   function replace(t, f){t[1] = caml_call1(f, t[1]); return 0;}
   function set_temporarily(t, a, f){
    var restore_to = t[1];
    t[1] = a;
    function _b_(param){t[1] = restore_to; return 0;}
    return caml_call2(Base_Exn[13], f, _b_);
   }
   function set(param){var a = param[2], r = param[1]; r[1] = a; return 0;}
   function sets(ts){return caml_call2(Base_List[19], ts, set);}
   function snapshot(param){var r = param[1]; return [0, r, r[1]];}
   function sets_temporarily(and_values, f){
    var restore_to = caml_call2(Base_List[53], and_values, snapshot);
    sets(and_values);
    function _a_(param){return sets(restore_to);}
    return caml_call2(Base_Exn[13], f, _a_);
   }
   var
    Base_Ref =
      [0,
       compare,
       compare_local,
       equal,
       equal_local,
       globalize,
       t_of_sexp,
       sexp_of_t,
       t_sexp_grammar,
       swap,
       replace,
       set_temporarily,
       [0, set, sets, snapshot],
       sets_temporarily];
   runtime.caml_register_global(3, Base_Ref, "Base__Ref");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Queue_intf
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Base_Queue_intf = [0];
   runtime.caml_register_global(0, Base_Queue_intf, "Base__Queue_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Queue
//# unitInfo: Requires: Base__Array, Base__Error, Base__Import, Base__Indexed_container, Base__Int, Base__List, Base__Option_array, Base__Sexp, Sexplib0__Sexp_grammar, Stdlib__Queue
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_length$2 = "length",
    cst_src_queue_ml = "src/queue.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Base_List = global_data.Base__List,
    Sexplib0_Sexp_grammar = global_data.Sexplib0__Sexp_grammar,
    Base_Import = global_data.Base__Import,
    Base_Option_array = global_data.Base__Option_array,
    Base_Array = global_data.Base__Array,
    Base_Int = global_data.Base__Int,
    Base_Sexp = global_data.Base__Sexp,
    Base_Error = global_data.Base__Error,
    Assert_failure = global_data.Assert_failure,
    Stdlib_Queue = global_data.Stdlib__Queue,
    Base_Indexed_container = global_data.Base__Indexed_container,
    _q_ = [0, 1],
    cst_length$1 = cst_length$2,
    cst_Queue_init_negative_length = "Queue.init: negative length",
    _p_ = [0, cst_src_queue_ml, 507, 2],
    cst_length$0 = cst_length$2,
    cst_Queue_blit_transfer_negati = "Queue.blit_transfer: negative length",
    _o_ = [0, cst_src_queue_ml, 212, 2],
    cst_capacity = "capacity",
    cst_cannot_have_queue_with_neg =
      "cannot have queue with negative capacity",
    _n_ = [0, cst_src_queue_ml, 171, 2],
    _m_ = [0, cst_src_queue_ml, 172, 2],
    _l_ = [0, cst_src_queue_ml, 174, 2],
    _k_ = [0, cst_src_queue_ml, 175, 2],
    _j_ = [0, cst_src_queue_ml, 176, 2],
    _i_ = [0, cst_src_queue_ml, 177, 2],
    _h_ = [0, cst_src_queue_ml, 178, 2],
    _g_ = [0, cst_src_queue_ml, 184, 9],
    _f_ = [0, "_"],
    cst_mutation_of_queue_during_i = "mutation of queue during iteration",
    cst_length = cst_length$2,
    cst_index = "index",
    cst_Queue_index_out_of_bounds = "Queue index out of bounds",
    _a_ = [0, "elts"],
    _b_ = [0, cst_length$2],
    _c_ = [0, "mask"],
    _d_ = [0, "front"],
    _e_ = [0, "num_mutations"];
   function globalize(param, t){
    var _a9_ = caml_call1(Base_Option_array[58], t[5]);
    return [0, t[1], t[2], t[3], t[4], _a9_];
   }
   function inc_num_mutations(t){
    t[1] = caml_call2(Base_Import[91], t[1], 1);
    return;
   }
   function capacity(t){return caml_call2(Base_Import[91], t[3], 1);}
   function elts_index(t, i){
    var _a7_ = t[3], _a8_ = caml_call2(Base_Import[91], t[2], i);
    return caml_call2(Base_Import[116], _a8_, _a7_);
   }
   function unsafe_get(t, i){
    var _a6_ = elts_index(t, i);
    return caml_call2(Base_Option_array[40], t[5], _a6_);
   }
   function unsafe_set(t, i, a){
    var _a5_ = elts_index(t, i);
    return caml_call3(Base_Option_array[51], t[5], _a5_, a);
   }
   function check_index_exn(t, i){
    var _a0_ = i < 0 ? 1 : 0, _a1_ = _a0_ || (t[4] <= i ? 1 : 0);
    if(! _a1_) return _a1_;
    var
     _a2_ = [0, [0, cst_length, caml_call1(Base_Int[10], t[4])], 0],
     _a3_ = [0, [0, cst_index, caml_call1(Base_Int[10], i)], _a2_],
     _a4_ = caml_call2(Base_Sexp[10], cst_Queue_index_out_of_bounds, _a3_);
    return caml_call1(Base_Error[32], _a4_);
   }
   function get(t, i){check_index_exn(t, i); return unsafe_get(t, i);}
   function set(t, i, a){
    check_index_exn(t, i);
    inc_num_mutations(t);
    return unsafe_set(t, i, a);
   }
   function is_empty(t){return 0 === t[4] ? 1 : 0;}
   function length(param){var length = param[4]; return length;}
   function ensure_no_mutation(t, num_mutations){
    var _aZ_ = t[1] !== num_mutations ? 1 : 0;
    if(! _aZ_) return _aZ_;
    var param = globalize(0, t), _aX_ = 0;
    function of_a_001(param){return _f_;}
    var
     num_mutations_003 = param[1],
     front_005 = param[2],
     mask_007 = param[3],
     length_009 = param[4],
     elts_011 = param[5],
     arg_012 = caml_call2(Base_Option_array[2], of_a_001, elts_011),
     bnds_002 = [0, [1, [0, _a_, [0, arg_012, 0]]], 0],
     arg_010 = caml_call1(Base_Import[139], length_009),
     bnds_002$0 = [0, [1, [0, _b_, [0, arg_010, 0]]], bnds_002],
     arg_008 = caml_call1(Base_Import[139], mask_007),
     bnds_002$1 = [0, [1, [0, _c_, [0, arg_008, 0]]], bnds_002$0],
     arg_006 = caml_call1(Base_Import[139], front_005),
     bnds_002$2 = [0, [1, [0, _d_, [0, arg_006, 0]]], bnds_002$1],
     arg_004 = caml_call1(Base_Import[139], num_mutations_003),
     bnds_002$3 = [0, [1, [0, _e_, [0, arg_004, 0]]], bnds_002$2],
     _aY_ =
       caml_call2
        (Base_Sexp[10],
         cst_mutation_of_queue_during_i,
         [0, [0, cst, [1, bnds_002$3]], _aX_]);
    return caml_call1(Base_Error[32], _aY_);
   }
   function compare_local(compare_elt, t1, t2){
    if(t1 === t2) return 0;
    var mut2 = t2[1], mut1 = t1[1], len2 = t2[4], len1 = t1[4], pos = 0;
    for(;;){
     var match = pos === len2 ? 1 : 0;
     if(pos === len1) return match ? 0 : -1;
     if(match) return 1;
     var
      _aW_ = unsafe_get(t2, pos),
      x = caml_call2(compare_elt, unsafe_get(t1, pos), _aW_);
     ensure_no_mutation(t1, mut1);
     ensure_no_mutation(t2, mut2);
     if(0 !== x) return x;
     var pos$0 = caml_call2(Base_Import[91], pos, 1), pos = pos$0;
    }
   }
   function compare(compare_elt, t1, t2){
    return compare_local(compare_elt, t1, t2);
   }
   function equal_local(equal_elt, t1, t2){
    var _aT_ = t1 === t2 ? 1 : 0;
    if(_aT_)
     var _aU_ = _aT_;
    else{
     var len1 = t1[4], len2 = t2[4], _aV_ = len1 === len2 ? 1 : 0;
     if(_aV_){
      var mut2 = t2[1], mut1 = t1[1], pos = 0;
      for(;;){
       var _aQ_ = pos === len1 ? 1 : 0;
       if(_aQ_)
        var _aR_ = _aQ_;
       else{
        var
         _aS_ = unsafe_get(t2, pos),
         b = caml_call2(equal_elt, unsafe_get(t1, pos), _aS_);
        ensure_no_mutation(t1, mut1);
        ensure_no_mutation(t2, mut2);
        if(b){
         var pos$0 = caml_call2(Base_Import[91], pos, 1), pos = pos$0;
         continue;
        }
        var _aR_ = b;
       }
       return _aR_;
      }
     }
     var _aU_ = _aV_;
    }
    return _aU_;
   }
   function equal(equal_elt, t1, t2){return equal_local(equal_elt, t1, t2);}
   function invariant(invariant_a, t){
    var num_mutations = t[1], front = t[2], length = t[4], elts = t[5];
    if(0 > front)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _n_], 1);
    if(front >= capacity(t))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _m_], 1);
    var capacity$0 = capacity(t);
    if(capacity$0 !== caml_call1(Base_Option_array[28], elts))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _l_], 1);
    if(1 > capacity$0)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _k_], 1);
    if(! caml_call1(Base_Int[72], capacity$0))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _j_], 1);
    if(0 > length)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _i_], 1);
    if(length > capacity$0)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _h_], 1);
    var _aO_ = caml_call2(Base_Import[93], capacity$0, 1), _aN_ = 0;
    if(_aO_ >= 0){
     var i = _aN_;
     for(;;){
      if(i < t[4]){
       caml_call1(invariant_a, unsafe_get(t, i));
       ensure_no_mutation(t, num_mutations);
      }
      else{
       var _aM_ = elts_index(t, i);
       if(caml_call2(Base_Option_array[42], t[5], _aM_))
        throw caml_maybe_attach_backtrace([0, Assert_failure, _g_], 1);
      }
      var _aP_ = i + 1 | 0;
      if(_aO_ === i) break;
      var i = _aP_;
     }
    }
    return 0;
   }
   function create(capacity, param){
    if(capacity){
     var capacity$0 = capacity[1];
     if(0 <= capacity$0)
      var _aI_ = 0 === capacity$0 ? 1 : caml_call1(Base_Int[68], capacity$0);
     else
      var
       _aK_ = [0, [0, cst_capacity, caml_call1(Base_Int[10], capacity$0)], 0],
       _aL_ = caml_call2(Base_Sexp[10], cst_cannot_have_queue_with_neg, _aK_),
       _aI_ = caml_call1(Base_Error[32], _aL_);
     var capacity$1 = _aI_;
    }
    else
     var capacity$1 = 2;
    var _aJ_ = caml_call1(Base_Option_array[5], capacity$1);
    return [0, 0, 0, caml_call2(Base_Import[93], capacity$1, 1), 0, _aJ_];
   }
   function blit_to_array(src, dst){
    var _aE_ = caml_call1(Base_Option_array[28], dst);
    if(src[4] > _aE_)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _o_], 1);
    var
     _aF_ = src[2],
     _aG_ = capacity(src),
     _aH_ = caml_call2(Base_Import[93], _aG_, _aF_),
     front_len = caml_call2(Base_Int[15], src[4], _aH_),
     rest_len = caml_call2(Base_Import[93], src[4], front_len);
    caml_call5(Base_Option_array[53], src[5], src[2], dst, 0, front_len);
    return caml_call5
            (Base_Option_array[53], src[5], 0, dst, front_len, rest_len);
   }
   function set_capacity_internal(t, new_capacity){
    var dst = caml_call1(Base_Option_array[5], new_capacity);
    blit_to_array(t, dst);
    t[2] = 0;
    t[3] = caml_call2(Base_Import[93], new_capacity, 1);
    t[5] = dst;
    return 0;
   }
   function set_capacity(t, desired_capacity){
    inc_num_mutations(t);
    var
     _aB_ = caml_call2(Base_Import[100], desired_capacity, t[4]),
     _aC_ = caml_call2(Base_Import[100], 1, _aB_),
     new_capacity = caml_call1(Base_Int[68], _aC_),
     _aD_ = new_capacity !== capacity(t) ? 1 : 0;
    return _aD_ ? set_capacity_internal(t, new_capacity) : _aD_;
   }
   function enqueue(t, a){
    inc_num_mutations(t);
    var _aA_ = capacity(t);
    if(t[4] === _aA_)
     set_capacity_internal(t, caml_call2(Base_Import[88], 2, t[4]));
    unsafe_set(t, t[4], a);
    t[4] = caml_call2(Base_Import[91], t[4], 1);
    return 0;
   }
   function enqueue_front(t, a){
    inc_num_mutations(t);
    var _ax_ = capacity(t);
    if(t[4] === _ax_)
     set_capacity_internal(t, caml_call2(Base_Import[88], 2, t[4]));
    var
     _ay_ = t[3],
     _az_ = caml_call2(Base_Import[93], t[2], 1),
     front = caml_call2(Base_Import[116], _az_, _ay_);
    t[2] = front;
    t[4] = caml_call2(Base_Import[91], t[4], 1);
    return unsafe_set(t, 0, a);
   }
   function dequeue_nonempty(t){
    inc_num_mutations(t);
    var
     elts = t[5],
     front = t[2],
     res = caml_call2(Base_Option_array[36], elts, front);
    caml_call2(Base_Option_array[45], elts, front);
    t[2] = elts_index(t, 1);
    t[4] = caml_call2(Base_Import[93], t[4], 1);
    return res;
   }
   function back_index(t){
    return elts_index(t, caml_call2(Base_Import[93], t[4], 1));
   }
   function dequeue_back_nonempty(t){
    inc_num_mutations(t);
    var
     elts = t[5],
     back = back_index(t),
     res = caml_call2(Base_Option_array[36], elts, back);
    caml_call2(Base_Option_array[45], elts, back);
    t[4] = caml_call2(Base_Import[93], t[4], 1);
    return res;
   }
   function dequeue_exn(t){
    if(is_empty(t)) throw caml_maybe_attach_backtrace(Stdlib_Queue[1], 1);
    return dequeue_nonempty(t);
   }
   function dequeue(t){return is_empty(t) ? 0 : [0, dequeue_nonempty(t)];}
   function dequeue_and_ignore_exn(t){dequeue_exn(t); return 0;}
   function dequeue_back_exn(t){
    if(is_empty(t)) throw caml_maybe_attach_backtrace(Stdlib_Queue[1], 1);
    return dequeue_back_nonempty(t);
   }
   function dequeue_back(t){
    return is_empty(t) ? 0 : [0, dequeue_back_nonempty(t)];
   }
   function front_nonempty(t){
    return caml_call2(Base_Option_array[40], t[5], t[2]);
   }
   function back_nonempty(t){
    var _aw_ = back_index(t);
    return caml_call2(Base_Option_array[40], t[5], _aw_);
   }
   function last_nonempty(t){
    return unsafe_get(t, caml_call2(Base_Import[93], t[4], 1));
   }
   function peek(t){return is_empty(t) ? 0 : [0, front_nonempty(t)];}
   function peek_exn(t){
    if(is_empty(t)) throw caml_maybe_attach_backtrace(Stdlib_Queue[1], 1);
    return front_nonempty(t);
   }
   function peek_back(t){return is_empty(t) ? 0 : [0, back_nonempty(t)];}
   function peek_back_exn(t){
    if(is_empty(t)) throw caml_maybe_attach_backtrace(Stdlib_Queue[1], 1);
    return back_nonempty(t);
   }
   function last(t){return is_empty(t) ? 0 : [0, last_nonempty(t)];}
   function last_exn(t){
    if(is_empty(t)) throw caml_maybe_attach_backtrace(Stdlib_Queue[1], 1);
    return last_nonempty(t);
   }
   function drain(t, f, while$0){
    for(;;){
     if(! is_empty(t) && caml_call1(while$0, front_nonempty(t))){caml_call1(f, dequeue_nonempty(t)); continue;}
     return 0;
    }
   }
   function clear(t){
    inc_num_mutations(t);
    var _ar_ = 0 < t[4] ? 1 : 0;
    if(_ar_){
     var _at_ = caml_call2(Base_Import[93], t[4], 1), _as_ = 0;
     if(_at_ >= 0){
      var i = _as_;
      for(;;){
       var _aq_ = elts_index(t, i);
       caml_call2(Base_Option_array[52], t[5], _aq_);
       var _av_ = i + 1 | 0;
       if(_at_ === i) break;
       var i = _av_;
      }
     }
     t[4] = 0;
     t[2] = 0;
     var _au_ = 0;
    }
    else
     var _au_ = _ar_;
    return _au_;
   }
   function blit_transfer(src, dst, len, param){
    inc_num_mutations(src);
    inc_num_mutations(dst);
    if(len){
     var len$0 = len[1];
     if(len$0 < 0){
      var
       _aa_ = [0, [0, cst_length$0, caml_call1(Base_Int[10], len$0)], 0],
       _ab_ = caml_call2(Base_Sexp[10], cst_Queue_blit_transfer_negati, _aa_);
      caml_call1(Base_Error[32], _ab_);
     }
     var len$1 = caml_call2(Base_Import[101], len$0, src[4]);
    }
    else
     var len$1 = src[4];
    var _ac_ = 0 < len$1 ? 1 : 0;
    if(_ac_){
     var
      _ad_ = caml_call2(Base_Import[91], dst[4], len$1),
      _ae_ = capacity(dst);
     set_capacity(dst, caml_call2(Base_Import[100], _ae_, _ad_));
     var
      dst_start = caml_call2(Base_Import[91], dst[2], dst[4]),
      _ag_ = caml_call2(Base_Import[93], len$1, 1),
      _af_ = 0;
     if(_ag_ >= 0){
      var i = _af_;
      for(;;){
       var
        _ak_ = src[3],
        _al_ = caml_call2(Base_Import[91], src[2], i),
        src_i = caml_call2(Base_Import[116], _al_, _ak_),
        _am_ = dst[3],
        _an_ = caml_call2(Base_Import[91], dst_start, i),
        dst_i = caml_call2(Base_Import[116], _an_, _am_),
        _ao_ = caml_call2(Base_Option_array[40], src[5], src_i);
       caml_call3(Base_Option_array[51], dst[5], dst_i, _ao_);
       caml_call2(Base_Option_array[52], src[5], src_i);
       var _ap_ = i + 1 | 0;
       if(_ag_ === i) break;
       var i = _ap_;
      }
     }
     dst[4] = caml_call2(Base_Import[91], dst[4], len$1);
     var _ah_ = src[3], _ai_ = caml_call2(Base_Import[91], src[2], len$1);
     src[2] = caml_call2(Base_Import[116], _ai_, _ah_);
     src[4] = caml_call2(Base_Import[93], src[4], len$1);
     var _aj_ = 0;
    }
    else
     var _aj_ = _ac_;
    return _aj_;
   }
   function enqueue_all(t, l){
    var
     _Y_ = caml_call1(Base_List[45], l),
     _Z_ = caml_call2(Base_Import[91], t[4], _Y_),
     ___ = capacity(t);
    set_capacity(t, caml_call2(Base_Int[16], ___, _Z_));
    function _$_(x){return enqueue(t, x);}
    return caml_call2(Base_List[19], l, _$_);
   }
   function fold(t, init, f){
    if(0 === t[4]) return init;
    var
     num_mutations = t[1],
     r = [0, init],
     _V_ = caml_call2(Base_Import[93], t[4], 1),
     _U_ = 0;
    if(_V_ >= 0){
     var i = _U_;
     for(;;){
      var _W_ = unsafe_get(t, i);
      r[1] = caml_call2(f, r[1], _W_);
      ensure_no_mutation(t, num_mutations);
      var _X_ = i + 1 | 0;
      if(_V_ === i) break;
      var i = _X_;
     }
    }
    return r[1];
   }
   function foldi(t, init, f){
    var i = [0, 0];
    return fold
            (t,
             init,
             function(acc, a){
              var acc$0 = caml_call3(f, i[1], acc, a);
              i[1] = caml_call2(Base_Import[91], i[1], 1);
              return acc$0;
             });
   }
   function iter(t, f){
    var
     num_mutations = t[1],
     _S_ = caml_call2(Base_Import[93], t[4], 1),
     _R_ = 0;
    if(_S_ >= 0){
     var i = _R_;
     for(;;){
      caml_call1(f, unsafe_get(t, i));
      ensure_no_mutation(t, num_mutations);
      var _T_ = i + 1 | 0;
      if(_S_ === i) break;
      var i = _T_;
     }
    }
    return 0;
   }
   function iteri(t, f){
    var
     num_mutations = t[1],
     _P_ = caml_call2(Base_Import[93], t[4], 1),
     _O_ = 0;
    if(_P_ >= 0){
     var i = _O_;
     for(;;){
      caml_call2(f, i, unsafe_get(t, i));
      ensure_no_mutation(t, num_mutations);
      var _Q_ = i + 1 | 0;
      if(_P_ === i) break;
      var i = _Q_;
     }
    }
    return 0;
   }
   function to_list(t){
    var result = [0, 0], _L_ = caml_call2(Base_Import[93], t[4], 1);
    if(_L_ >= 0){
     var i = _L_;
     for(;;){
      var _M_ = result[1];
      result[1] = [0, unsafe_get(t, i), _M_];
      var _N_ = i - 1 | 0;
      if(0 === i) break;
      var i = _N_;
     }
    }
    return result[1];
   }
   var
    iter$0 = [0, -198771759, iter],
    length$0 = [0, -198771759, length],
    foldi$0 = [0, -198771759, foldi],
    iteri$0 = [0, -198771759, iteri],
    C =
      caml_call1
       (Base_Indexed_container[8],
        [0, fold, iter$0, length$0, iteri$0, foldi$0]),
    count = C[10],
    exists = C[8],
    find = C[12],
    find_map = C[13],
    fold_result = C[6],
    fold_until = C[7],
    for_all = C[9],
    max_elt = C[17],
    mem = C[1],
    min_elt = C[16],
    sum = C[11],
    counti = C[22],
    existsi = C[20],
    find_mapi = C[24],
    findi = C[23],
    for_alli = C[21];
   function concat_map(t, f){
    var t_result = create(0, 0);
    iter
     (t,
      function(a){
       function _J_(b){return enqueue(t_result, b);}
       var _K_ = caml_call1(f, a);
       return caml_call2(Base_List[19], _K_, _J_);
      });
    return t_result;
   }
   function concat_mapi(t, f){
    var t_result = create(0, 0);
    iteri
     (t,
      function(i, a){
       function _H_(b){return enqueue(t_result, b);}
       var _I_ = caml_call2(f, i, a);
       return caml_call2(Base_List[19], _I_, _H_);
      });
    return t_result;
   }
   function filter_map(t, f){
    var t_result = create(0, 0);
    iter
     (t,
      function(a){
       var match = caml_call1(f, a);
       if(! match) return 0;
       var b = match[1];
       return enqueue(t_result, b);
      });
    return t_result;
   }
   function filter_mapi(t, f){
    var t_result = create(0, 0);
    iteri
     (t,
      function(i, a){
       var match = caml_call2(f, i, a);
       if(! match) return 0;
       var b = match[1];
       return enqueue(t_result, b);
      });
    return t_result;
   }
   function filter(t, f){
    var t_result = create(0, 0);
    iter
     (t,
      function(a){
       var _G_ = caml_call1(f, a);
       return _G_ ? enqueue(t_result, a) : _G_;
      });
    return t_result;
   }
   function filteri(t, f){
    var t_result = create(0, 0);
    iteri
     (t,
      function(i, a){
       var _F_ = caml_call2(f, i, a);
       return _F_ ? enqueue(t_result, a) : _F_;
      });
    return t_result;
   }
   function filter_inplace(t, f){
    var t2 = filter(t, f);
    clear(t);
    return blit_transfer(t2, t, 0, 0);
   }
   function filteri_inplace(t, f){
    var t2 = filteri(t, f);
    clear(t);
    return blit_transfer(t2, t, 0, 0);
   }
   function copy(src){
    var dst = create([0, src[4]], 0);
    blit_to_array(src, dst[5]);
    dst[4] = src[4];
    return dst;
   }
   function of_list(l){
    var t = create([0, caml_call1(Base_List[45], l)], 0);
    function _E_(x){return enqueue(t, x);}
    caml_call2(Base_List[19], l, _E_);
    return t;
   }
   function init(len, f){
    if(len < 0){
     var
      _y_ = [0, [0, cst_length$1, caml_call1(Base_Int[10], len)], 0],
      _z_ = caml_call2(Base_Sexp[10], cst_Queue_init_negative_length, _y_);
     caml_call1(Base_Error[32], _z_);
    }
    var t = create([0, len], 0);
    if(len > caml_call1(Base_Option_array[28], t[5]))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _p_], 1);
    var _B_ = caml_call2(Base_Import[93], len, 1), _A_ = 0;
    if(_B_ >= 0){
     var i = _A_;
     for(;;){
      var _C_ = caml_call1(f, i);
      caml_call3(Base_Option_array[51], t[5], i, _C_);
      var _D_ = i + 1 | 0;
      if(_B_ === i) break;
      var i = _D_;
     }
    }
    t[4] = len;
    return t;
   }
   function of_array(a){
    return init(a.length - 1, function(_x_){return a[1 + _x_];});
   }
   function to_array(t){
    function _w_(i){return unsafe_get(t, i);}
    return caml_call2(Base_Array[41], t[4], _w_);
   }
   function map(ta, f){
    var num_mutations = ta[1], tb = create([0, ta[4]], 0);
    tb[4] = ta[4];
    var _u_ = caml_call2(Base_Import[93], ta[4], 1), _t_ = 0;
    if(_u_ >= 0){
     var i = _t_;
     for(;;){
      var b = caml_call1(f, unsafe_get(ta, i));
      ensure_no_mutation(ta, num_mutations);
      caml_call3(Base_Option_array[51], tb[5], i, b);
      var _v_ = i + 1 | 0;
      if(_u_ === i) break;
      var i = _v_;
     }
    }
    return tb;
   }
   function mapi(t, f){
    var i = [0, 0];
    return map
            (t,
             function(a){
              var result = caml_call2(f, i[1], a);
              i[1] = caml_call2(Base_Import[91], i[1], 1);
              return result;
             });
   }
   function singleton(x){var t = create(_q_, 0); enqueue(t, x); return t;}
   function sexp_of_t(sexp_of_a, t){
    var _s_ = to_list(t);
    return caml_call1(caml_call1(Base_List[6], sexp_of_a), _s_);
   }
   function t_of_sexp(a_of_sexp, sexp){
    return of_list(caml_call2(Base_List[5], a_of_sexp, sexp));
   }
   function t_sexp_grammar(grammar){
    var _r_ = caml_call1(Base_List[7], grammar);
    return caml_call1(Sexplib0_Sexp_grammar[1], _r_);
   }
   function start(q){return q[1];}
   function assert_no_mutation_since_start(t, q){return ensure_no_mutation(q, t);
   }
   var
    Iteration = [0, start, assert_no_mutation_since_start],
    Base_Queue =
      [0,
       compare,
       compare_local,
       globalize,
       t_of_sexp,
       sexp_of_t,
       t_sexp_grammar,
       mem,
       length,
       is_empty,
       iter,
       fold,
       fold_result,
       fold_until,
       exists,
       for_all,
       count,
       sum,
       find,
       find_map,
       to_list,
       to_array,
       min_elt,
       max_elt,
       foldi,
       iteri,
       existsi,
       for_alli,
       counti,
       findi,
       find_mapi,
       singleton,
       of_list,
       of_array,
       init,
       enqueue,
       enqueue_all,
       dequeue,
       dequeue_exn,
       dequeue_and_ignore_exn,
       drain,
       peek,
       peek_exn,
       clear,
       copy,
       map,
       mapi,
       concat_map,
       concat_mapi,
       filter_map,
       filter_mapi,
       filter,
       filteri,
       filter_inplace,
       filteri_inplace,
       equal,
       equal_local,
       invariant,
       create,
       last,
       last_exn,
       enqueue_front,
       dequeue_back,
       dequeue_back_exn,
       peek_back,
       peek_back_exn,
       blit_transfer,
       get,
       set,
       capacity,
       set_capacity,
       Iteration];
   runtime.caml_register_global(39, Base_Queue, "Base__Queue");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Nothing
//# unitInfo: Requires: Base__Identifiable, Base__Import, Sexplib0__Sexp_conv_error
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    t_sexp_grammar = [4, 0],
    module_name = "Base.Nothing",
    Base_Import = global_data.Base__Import,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Match_failure = global_data.Match_failure,
    Base_Identifiable = global_data.Base__Identifiable,
    cst_Base_Nothing_of_string_not = "Base.Nothing.of_string: not supported",
    cst_Base_Nothing_t = "Base.Nothing.t",
    _a_ = [0, "src/nothing.ml", 6, 31];
   function unreachable_code_local(param){
    throw caml_maybe_attach_backtrace([0, Match_failure, _a_], 1);
   }
   function unreachable_code(x){return unreachable_code_local(x);}
   var all = 0;
   function hash_fold_t(param, t){return unreachable_code(t);}
   function compare(a, param){return unreachable_code(a);}
   function compare_local(a, param){return unreachable_code(a);}
   function equal_local(a, param){return unreachable_code(a);}
   function t_of_sexp(sexp){
    return caml_call2(Sexplib0_Sexp_conv_error[30], cst_Base_Nothing_t, sexp);
   }
   function of_string(param){
    return caml_call1(Base_Import[124], cst_Base_Nothing_of_string_not);
   }
   var
    include =
      caml_call1
       (Base_Identifiable[1],
        [0,
         compare,
         hash_fold_t,
         unreachable_code,
         t_of_sexp,
         unreachable_code,
         of_string,
         unreachable_code,
         module_name]),
    hash_fold_t$0 = include[1],
    hash = include[2],
    t_of_sexp$0 = include[3],
    sexp_of_t = include[4],
    of_string$0 = include[5],
    to_string = include[6],
    symbol = include[7],
    symbol$0 = include[8],
    symbol$1 = include[9],
    symbol$2 = include[10],
    symbol$3 = include[11],
    symbol$4 = include[12],
    equal = include[13],
    compare$0 = include[14],
    min = include[15],
    max = include[16],
    ascending = include[17],
    descending = include[18],
    between = include[19],
    clamp_exn = include[20],
    clamp = include[21],
    comparator = include[22],
    pp = include[23],
    hashable = include[24];
   function must_be_none(param){return 0;}
   function must_be_empty(param){return 0;}
   function must_be_ok(param){var ok = param[1]; return ok;}
   function must_be_error(param){var error = param[1]; return error;}
   function must_be_first(param){var first = param[1]; return first;}
   function must_be_second(param){var second = param[1]; return second;}
   var
    Base_Nothing =
      [0,
       all,
       unreachable_code,
       t_sexp_grammar,
       unreachable_code,
       unreachable_code_local,
       hash_fold_t$0,
       hash,
       t_of_sexp$0,
       sexp_of_t,
       of_string$0,
       to_string,
       symbol,
       symbol$0,
       symbol$1,
       symbol$2,
       symbol$3,
       symbol$4,
       equal,
       compare$0,
       min,
       max,
       ascending,
       descending,
       between,
       clamp_exn,
       clamp,
       comparator,
       pp,
       hashable,
       equal_local,
       compare_local,
       must_be_none,
       must_be_empty,
       must_be_ok,
       must_be_error,
       must_be_first,
       must_be_second];
   runtime.caml_register_global(9, Base_Nothing, "Base__Nothing");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Nativeint
//# unitInfo: Requires: Base__Comparable, Base__Comparator, Base__Error, Base__Float0, Base__Import, Base__Int_conversions, Base__Int_math, Base__Int_string_conversions, Base__Or_error, Base__Popcount, Base__Pretty_printer, Base__Printf, Base__Sexp, Base__Word_size, Stdlib__Nativeint, Stdlib__Scanf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$1 = "",
    cst_nx = "%nx",
    cst_argument_must_be_strictly_ = "argument must be strictly positive",
    caml_lessequal = runtime.caml_lessequal,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$0 = cst$1,
    cst = cst$1,
    module_name = "Base.Nativeint.Hex",
    module_name$0 = "Base.Nativeint",
    Base_Int_math = global_data.Base__Int_math,
    Base_Import = global_data.Base__Import,
    Base_Sexp = global_data.Base__Sexp,
    Base_Or_error = global_data.Base__Or_error,
    Assert_failure = global_data.Assert_failure,
    Stdlib_Nativeint = global_data.Stdlib__Nativeint,
    Base_Printf = global_data.Base__Printf,
    Base_Float0 = global_data.Base__Float0,
    Stdlib_Scanf = global_data.Stdlib__Scanf,
    Base_Comparator = global_data.Base__Comparator,
    Base_Comparable = global_data.Base__Comparable,
    Base_Int_string_conversions = global_data.Base__Int_string_conversions,
    Base_Pretty_printer = global_data.Base__Pretty_printer,
    Base_Word_size = global_data.Base__Word_size,
    Base_Error = global_data.Base__Error,
    Base_Popcount = global_data.Base__Popcount,
    Base_Int_conversions = global_data.Base__Int_conversions,
    include = Base_Import[104],
    compare = include[9],
    globalize = Base_Import[287],
    hash_fold_t = Base_Import[202],
    func = Base_Import[216],
    cst_max = "max",
    cst_min = "min",
    cst_clamp_requires_min_max = "clamp requires [min <= max]",
    _f_ = [0, "src/nativeint.ml", 206, 2],
    cst_Nativeint_ceil_log2_got_in = "[Nativeint.ceil_log2] got invalid input",
    cst_Nativeint_floor_log2_got_i =
      "[Nativeint.floor_log2] got invalid input",
    _e_ =
      [0,
       [11, cst_argument_must_be_strictly_, 0],
       cst_argument_must_be_strictly_],
    _d_ =
      [0,
       [11,
        "Nativeint.of_float: argument (",
        [8, [0, 0, 0], 0, 0, [11, ") is out of range or NaN", 0]]],
       "Nativeint.of_float: argument (%f) is out of range or NaN"],
    _c_ = [0, [6, 6, 0, 0, 0], cst_nx],
    _b_ = [0, [6, 6, 0, 0, 0], cst_nx];
   function hash(x){return caml_call1(func, x);}
   var
    t_of_sexp = Base_Import[167],
    sexp_of_t = Base_Import[143],
    t_sexp_grammar = Base_Import[189],
    hashable = [0, hash, compare, sexp_of_t],
    compare$0 = Base_Import[104][9],
    to_string = Stdlib_Nativeint[15],
    of_string = runtime.caml_int_of_string,
    of_string_opt = Stdlib_Nativeint[14],
    comparator = caml_call1(Base_Comparator[7], [0, compare$0, sexp_of_t])[1],
    zero = Stdlib_Nativeint[1],
    _a_ = caml_call1(Base_Comparable[14], [0, compare$0, sexp_of_t, zero]),
    is_positive = _a_[1],
    is_non_negative = _a_[2],
    is_negative = _a_[3],
    is_non_positive = _a_[4],
    sign = _a_[5],
    include$0 = caml_call1(Base_Int_string_conversions[1], [0, to_string]),
    to_string_hum = include$0[1],
    sexp_of_t$0 = include$0[2],
    compare_local = Base_Import[259];
   function compare$1(a, b){return caml_call2(compare_local, a, b);}
   var hash_fold_t$0 = Base_Import[202], func$0 = Base_Import[216];
   function hash$0(x){return caml_call1(func$0, x);}
   var zero$0 = Stdlib_Nativeint[1];
   function neg(___){return - ___ | 0;}
   var symbol = Base_Import[104][1];
   function to_string$0(i){return caml_call2(Base_Printf[2], _b_, i);}
   function of_string$0(s){
    function _Y_(_Z_){return _Z_;}
    return caml_call3(Stdlib_Scanf[5], s, _c_, _Y_);
   }
   var
    include$1 =
      caml_call1
       (Base_Int_string_conversions[2],
        [0,
         compare$1,
         compare_local,
         hash_fold_t$0,
         hash$0,
         to_string$0,
         of_string$0,
         zero$0,
         symbol,
         neg,
         module_name]),
    Hex = include$1[1],
    include$2 =
      caml_call1(Base_Pretty_printer[2], [0, module_name$0, to_string]),
    pp = include$2[1];
   function invariant(param){return 0;}
   var
    num_bits = caml_call1(Base_Word_size[2], Base_Word_size[3]),
    float_lower_bound = caml_call1(Base_Float0[26], num_bits),
    float_upper_bound = caml_call1(Base_Float0[24], num_bits);
   function shift_right_logical(_X_, _W_){return _X_ >>> _W_ | 0;}
   function shift_right(_V_, _U_){return _V_ >> _U_;}
   function shift_left(_T_, _S_){return _T_ << _S_;}
   var bit_not = Stdlib_Nativeint[12];
   function bit_xor(_R_, _Q_){return _R_ ^ _Q_;}
   function bit_or(_P_, _O_){return _P_ | _O_;}
   function bit_and(_N_, _M_){return _N_ & _M_;}
   var
    min_value = Stdlib_Nativeint[11],
    max_value = Stdlib_Nativeint[10],
    abs = Stdlib_Nativeint[8],
    pred = Stdlib_Nativeint[7],
    succ = Stdlib_Nativeint[6],
    rem = runtime.caml_mod;
   function symbol$0(_L_){return - _L_ | 0;}
   var
    minus_one = Stdlib_Nativeint[3],
    one = Stdlib_Nativeint[2],
    zero$1 = Stdlib_Nativeint[1];
   function to_float(_K_){return _K_;}
   function of_float_unchecked(_J_){return _J_ | 0;}
   function of_float(f){
    if(float_lower_bound <= f && f <= float_upper_bound) return f | 0;
    var _I_ = caml_call1(Base_Float0[29], f);
    return caml_call3(Base_Printf[7], _d_, _I_, 0);
   }
   var raise_s = Base_Error[32];
   function non_positive_argument(param){
    return caml_call2(Base_Printf[7], _e_, 0);
   }
   function lsr(_H_, _G_){return _H_ >>> _G_ | 0;}
   function land(_F_, _E_){return _F_ & _E_;}
   function ceil_pow2(x){
    if(caml_call2(Base_Import[104][2], x, 0)) non_positive_argument(0);
    var
     x$0 = caml_call1(Stdlib_Nativeint[7], x),
     x$1 = x$0 | x$0 >>> 1 | 0,
     x$2 = x$1 | x$1 >>> 2 | 0,
     x$3 = x$2 | x$2 >>> 4 | 0,
     x$4 = x$3 | x$3 >>> 8 | 0,
     x$5 = x$4 | x$4 >>> 16 | 0,
     x$6 = x$5 | x$5 >>> 32 | 0;
    return caml_call1(Stdlib_Nativeint[6], x$6);
   }
   function floor_pow2(x){
    if(caml_call2(Base_Import[104][2], x, 0)) non_positive_argument(0);
    var
     x$0 = x | x >>> 1 | 0,
     x$1 = x$0 | x$0 >>> 2 | 0,
     x$2 = x$1 | x$1 >>> 4 | 0,
     x$3 = x$2 | x$2 >>> 8 | 0,
     x$4 = x$3 | x$3 >>> 16 | 0,
     x$5 = x$4 | x$4 >>> 32 | 0;
    return x$5 - (x$5 >>> 1 | 0) | 0;
   }
   function is_pow2(x){
    if(caml_call2(Base_Import[104][2], x, 0)) non_positive_argument(0);
    var _D_ = x & caml_call1(Stdlib_Nativeint[7], x);
    return caml_call2(Base_Import[104][4], _D_, 0);
   }
   function floor_log2(i){
    if(caml_lessequal(i, Stdlib_Nativeint[1])){
     var _A_ = [0, [0, cst, caml_call1(Base_Import[143], i)], 0];
     caml_call1
      (raise_s,
       caml_call2(Base_Sexp[10], cst_Nativeint_floor_log2_got_i, _A_));
    }
    var
     _B_ = runtime.Base_int_math_nativeint_clz(i),
     _C_ = caml_call2(Base_Import[93], num_bits, 1);
    return caml_call2(Base_Import[93], _C_, _B_);
   }
   function ceil_log2(i){
    if(caml_lessequal(i, Stdlib_Nativeint[1])){
     var _y_ = [0, [0, cst$0, caml_call1(Base_Import[143], i)], 0];
     caml_call1
      (raise_s,
       caml_call2(Base_Sexp[10], cst_Nativeint_ceil_log2_got_in, _y_));
    }
    if(caml_call2(Stdlib_Nativeint[18], i, Stdlib_Nativeint[2])) return 0;
    var
     _z_ =
       runtime.Base_int_math_nativeint_clz(caml_call1(Stdlib_Nativeint[7], i));
    return caml_call2(Base_Import[93], num_bits, _z_);
   }
   function between(t, low, high){
    var _x_ = caml_call2(Base_Import[104][2], low, t);
    return _x_ ? caml_call2(Base_Import[104][2], t, high) : _x_;
   }
   function clamp_unchecked(t, min, max){
    var _w_ = caml_call2(Base_Import[104][14], t, max);
    return caml_call1(caml_call1(Base_Import[104][13], min), _w_);
   }
   function clamp_exn(t, min, max){
    if(caml_call2(Base_Import[104][2], min, max))
     return clamp_unchecked(t, min, max);
    throw caml_maybe_attach_backtrace([0, Assert_failure, _f_], 1);
   }
   function clamp(t, min, max){
    if(! caml_call2(Base_Import[104][5], min, max))
     return [0, clamp_unchecked(t, min, max)];
    var
     _t_ = [0, [0, cst_max, caml_call1(sexp_of_t, max)], 0],
     _u_ = [0, [0, cst_min, caml_call1(sexp_of_t, min)], _t_],
     _v_ = caml_call2(Base_Sexp[10], cst_clamp_requires_min_max, _u_);
    return caml_call1(Base_Or_error[39], _v_);
   }
   var symbol$1 = runtime.caml_div, symbol$2 = runtime.caml_mul;
   function symbol$3(_s_, _r_){return _s_ - _r_ | 0;}
   function symbol$4(_q_, _p_){return _q_ + _p_ | 0;}
   function incr(r){r[1] = r[1] + one | 0; return 0;}
   function decr(r){r[1] = r[1] - one | 0; return 0;}
   function of_nativeint(t){return t;}
   function to_nativeint(t){return t;}
   var
    popcount = Base_Popcount[4],
    of_int_exn = Base_Int_conversions[5],
    to_int = Base_Int_conversions[23],
    to_int_exn = Base_Int_conversions[24],
    to_int_trunc = Base_Int_conversions[25],
    of_int32 = Base_Int_conversions[10],
    to_int32 = Base_Int_conversions[26],
    to_int32_exn = Base_Int_conversions[27],
    of_int64 = Base_Int_conversions[18],
    of_int64_exn = Base_Int_conversions[19],
    of_int64_trunc = Base_Int_conversions[20],
    to_int64 = Base_Int_conversions[29];
   function pow(b, e){
    var _n_ = caml_call1(to_int_exn, e), _o_ = caml_call1(to_int_exn, b);
    return caml_call1(of_int_exn, caml_call2(Base_Int_math[2][1], _o_, _n_));
   }
   function symbol$5(b, e){return pow(b, e);}
   var compare_local$0 = Base_Import[259];
   function compare$2(a, b){return caml_call2(compare_local$0, a, b);}
   var equal_local = Base_Import[273];
   function equal(a, b){return caml_call2(equal_local, a, b);}
   var hash_fold_t$1 = Base_Import[202], func$1 = Base_Import[216];
   function hash$1(x){return caml_call1(func$1, x);}
   function clz(_m_){return runtime.Base_int_math_nativeint_clz(_m_);}
   var
    Binary =
      caml_call1
        (Base_Int_string_conversions[3],
         [0,
          compare$2,
          compare_local$0,
          equal,
          equal_local,
          hash_fold_t$1,
          hash$1,
          clz,
          lsr,
          land,
          to_int_exn,
          num_bits,
          one,
          zero$1])
       [1],
    _g_ = Base_Import[104],
    symbol$6 = _g_[3],
    symbol$7 = _g_[1],
    symbol$8 = _g_[5],
    symbol$9 = _g_[4],
    symbol$10 = _g_[2],
    symbol$11 = _g_[6],
    include$3 =
      caml_call1
       (Base_Int_math[1],
        [0,
         of_float,
         to_float,
         of_string,
         to_string,
         symbol$4,
         symbol$3,
         symbol$2,
         symbol$1,
         symbol$0,
         symbol$11,
         symbol$10,
         symbol$9,
         symbol$8,
         symbol$7,
         symbol$6,
         abs,
         symbol$0,
         zero$1,
         of_int_exn,
         rem]),
    symbol$12 = include$3[1],
    symbol$13 = include$3[2],
    symbol$14 = include$3[3],
    round = include$3[4],
    round_towards_zero = include$3[5],
    round_down = include$3[6],
    round_up = include$3[7],
    round_nearest = include$3[8],
    include$4 = Base_Import[104],
    symbol$15 = include$4[1],
    symbol$16 = include$4[2],
    symbol$17 = include$4[3],
    symbol$18 = include$4[4],
    symbol$19 = include$4[5],
    symbol$20 = include$4[6],
    ascending = include$4[7],
    descending = include$4[8],
    compare$3 = include$4[9],
    compare_local$1 = include$4[10],
    equal$0 = include$4[11],
    equal_local$0 = include$4[12],
    max = include$4[13],
    min = include$4[14],
    _h_ = runtime.caml_int32_bswap,
    _i_ =
      [0,
       symbol$4,
       symbol$3,
       symbol$2,
       symbol$1,
       symbol$0,
       symbol$5,
       symbol$11,
       symbol$10,
       symbol$9,
       symbol$8,
       symbol$7,
       symbol$6,
       abs,
       symbol$0,
       zero$1,
       symbol$12,
       symbol$13,
       symbol$14,
       bit_and,
       bit_or,
       bit_xor,
       bit_not,
       shift_left,
       shift_right,
       shift_right_logical];
   function _j_(_l_){return runtime.Base_int_math_nativeint_ctz(_l_);}
   var
    Base_Nativeint =
      [0,
       globalize,
       t_sexp_grammar,
       of_float,
       to_float,
       of_int_exn,
       to_int_exn,
       hash_fold_t,
       hash,
       t_of_sexp,
       sexp_of_t$0,
       of_string,
       to_string,
       symbol$20,
       symbol$16,
       symbol$18,
       symbol$19,
       symbol$15,
       symbol$17,
       equal$0,
       compare$3,
       min,
       max,
       ascending,
       descending,
       between,
       clamp_exn,
       clamp,
       comparator,
       pp,
       hashable,
       is_positive,
       is_non_negative,
       is_negative,
       is_non_positive,
       sign,
       compare_local$1,
       equal_local$0,
       invariant,
       Hex,
       Binary,
       of_string_opt,
       to_string_hum,
       zero$1,
       one,
       minus_one,
       symbol$4,
       symbol$3,
       symbol$2,
       symbol$5,
       symbol$0,
       symbol$0,
       symbol$13,
       symbol$12,
       symbol$1,
       rem,
       symbol$14,
       bit_and,
       bit_or,
       bit_xor,
       bit_not,
       shift_left,
       shift_right,
       round,
       round_towards_zero,
       round_down,
       round_up,
       round_nearest,
       abs,
       succ,
       pred,
       pow,
       bit_and,
       bit_or,
       bit_xor,
       bit_not,
       popcount,
       shift_left,
       shift_right,
       decr,
       incr,
       of_int32,
       to_int32_exn,
       of_int64_exn,
       to_int64,
       of_nativeint,
       to_nativeint,
       of_float_unchecked,
       num_bits,
       max_value,
       min_value,
       shift_right_logical,
       shift_right_logical,
       ceil_pow2,
       floor_pow2,
       ceil_log2,
       floor_log2,
       is_pow2,
       function(_k_){return runtime.Base_int_math_nativeint_clz(_k_);},
       _j_,
       _i_,
       of_int_exn,
       to_int,
       of_int32,
       to_int32,
       of_nativeint,
       to_nativeint,
       of_int64,
       to_int_trunc,
       of_int64_trunc,
       _h_];
   runtime.caml_register_global(35, Base_Nativeint, "Base__Nativeint");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Map
//# unitInfo: Requires: Base__Comparator, Base__Error, Base__Exn, Base__Import, Base__List0, Base__Map_intf, Base__Maybe_bound, Base__Option, Base__Or_error, Base__Result, Base__Sequence, Base__Sexp, Base__Uniform_array, Base__With_return, Sexplib0__Sexp_conv, Sexplib0__Sexp_grammar
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Map_bal$3 = "Map.bal",
    cst_Map_of$1 = "Map.of_",
    cst_key$1 = "key",
    cst_of_sorted_array_duplicated$1 = "of_sorted_array: duplicated elements",
    cst_src_map_ml = "src/map.ml",
    caml_check_bound = runtime.caml_check_bound,
    caml_fresh_oo_id = runtime.caml_fresh_oo_id,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    name = "alist",
    name$0 = "sequence",
    Sexplib0_Sexp_grammar = global_data.Sexplib0__Sexp_grammar,
    Base_Comparator = global_data.Base__Comparator,
    Base_Result = global_data.Base__Result,
    Base_Or_error = global_data.Base__Or_error,
    Base_Error = global_data.Base__Error,
    Base_Option = global_data.Base__Option,
    Base_Import = global_data.Base__Import,
    Base_Exn = global_data.Base__Exn,
    Base_Sexp = global_data.Base__Sexp,
    Base_List0 = global_data.Base__List0,
    Assert_failure = global_data.Assert_failure,
    Base_Uniform_array = global_data.Base__Uniform_array,
    Base_Sequence = global_data.Base__Sequence,
    Base_Maybe_bound = global_data.Base__Maybe_bound,
    Base_Map_intf = global_data.Base__Map_intf,
    Base_With_return = global_data.Base__With_return,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Symmetric_diff_element = Base_Map_intf[5],
    include = Base_Map_intf[8],
    compare = include[1],
    all = include[2],
    equal = include[3],
    sexp_of_t = include[4],
    _x_ = [1, 0],
    _y_ = [1, 0],
    _z_ = [1, 0],
    _w_ = [0, "_"],
    _v_ = [0, "Map.Build_increasing.add: non-increasing key"],
    _h_ = [0, 0, 0, 0],
    cst_Map_remove_min_elt = "Map.remove_min_elt",
    _s_ = [0, 0],
    cst_key$0 = cst_key$1,
    cst_Map_map_keys_exn_duplicate = "Map.map_keys_exn: duplicate key",
    cst_Map_t_of_sexp_direct_dupli = "Map.t_of_sexp_direct: duplicate key",
    _u_ = [0, cst_src_map_ml, 1967, 6],
    cst_Map_of_iteri_exn_duplicate = "Map.of_iteri_exn: duplicate key",
    _t_ = [0, 0],
    cst_Map_merge_disjoint_exn_dup = "Map.merge_disjoint_exn: duplicate key",
    cst_Map_of_list_with_key_exn_d = "Map.of_list_with_key_exn: duplicate key",
    cst_Map_of_list_with_key_or_er =
      "Map.of_list_with_key_or_error: duplicate key",
    cst_exn_duplicate_key = "_exn: duplicate key",
    cst_Map_of$0 = cst_Map_of$1,
    cst_or_error_duplicate_key = "_or_error: duplicate key",
    cst_Map_of = cst_Map_of$1,
    _r_ = [0, cst_src_map_ml, 1145, 17],
    _q_ = [0, 0, 0],
    _o_ = [0, "map.ml.Tree0.Map_max_elt_exn_of_empty_map"],
    _p_ = [0, cst_src_map_ml, 677, 13],
    _l_ = [0, "map.ml.Tree0.Map_min_elt_exn_of_empty_map"],
    _m_ = [0, cst_src_map_ml, 664, 13],
    _j_ = [0, "Map.find_exn: not found"],
    _i_ = [0, cst_src_map_ml, 578, 4],
    cst_of_increasing_sequence_non =
      "of_increasing_sequence: non-increasing key",
    _g_ = [0, cst_src_map_ml, 480, 21],
    _f_ = [1, 0],
    cst_key = cst_key$1,
    cst_Map_add_exn_got_key_alread = "[Map.add_exn] got key already present",
    cst_Map_bal = cst_Map_bal$3,
    _d_ = [0, cst_src_map_ml, 248, 18],
    cst_Map_bal$0 = cst_Map_bal$3,
    cst_Map_bal$1 = cst_Map_bal$3,
    _e_ = [0, cst_src_map_ml, 263, 18],
    cst_Map_bal$2 = cst_Map_bal$3,
    cst_of_sorted_array_duplicated = cst_of_sorted_array_duplicated$1,
    cst_of_sorted_array_elements_a =
      "of_sorted_array: elements are not ordered",
    cst_of_sorted_array_duplicated$0 = cst_of_sorted_array_duplicated$1,
    _b_ = [0, "map.ml.Duplicate"],
    _c_ = [0, cst_src_map_ml, 67, 11],
    cst_Base_Map_Duplicate = "Base__Map.Duplicate",
    cst_Base_Map_Tree0_Map_min_elt =
      "Base__Map.Tree0.Map_min_elt_exn_of_empty_map",
    cst_Base_Map_Tree0_Map_max_elt =
      "Base__Map.Tree0.Map_max_elt_exn_of_empty_map";
   function of_continue_or_stop(_dV_){return _dV_;}
   function to_continue_or_stop(_dU_){return _dU_;}
   var
    Finished_or_unfinished =
      [0,
       compare,
       all,
       equal,
       sexp_of_t,
       of_continue_or_stop,
       to_continue_or_stop],
    include$0 = Base_Map_intf[6],
    compare$0 = include$0[1],
    equal$0 = include$0[2],
    sexp_of_t$0 = include$0[3];
   function left(param){
    var _dT_ = param[1];
    if(737457313 === _dT_)
     var left = param[2][1];
    else{if(847852583 > _dT_) return 0; var left = param[2];}
    return [0, left];
   }
   function right(param){
    var _dS_ = param[1];
    if(737457313 === _dS_)
     var right = param[2][2];
    else{if(847852583 <= _dS_) return 0; var right = param[2];}
    return [0, right];
   }
   function left_value(t, default$0){
    var _dR_ = t[1];
    if(737457313 === _dR_)
     var left = t[2][1];
    else{if(847852583 > _dR_) return default$0; var left = t[2];}
    return left;
   }
   function right_value(t, default$0){
    var _dQ_ = t[1];
    if(737457313 === _dQ_)
     var right = t[2][2];
    else{if(847852583 <= _dQ_) return default$0; var right = t[2];}
    return right;
   }
   function values(t, left_default, right_default){
    var _dP_ = t[1];
    if(737457313 === _dP_){
     var match = t[2], right = match[2], left = match[1];
     return [0, left, right];
    }
    if(847852583 <= _dP_){
     var left$0 = t[2];
     return [0, left$0, right_default];
    }
    var right$0 = t[2];
    return [0, left_default, right$0];
   }
   var
    Merge_element =
      [0,
       compare$0,
       equal$0,
       sexp_of_t$0,
       left,
       right,
       left_value,
       right_value,
       values],
    with_return = Base_With_return[1],
    Duplicate = [248, cst_Base_Map_Duplicate, caml_fresh_oo_id(0)];
   function _a_(param){
    if(param === Duplicate) return _b_;
    throw caml_maybe_attach_backtrace([0, Assert_failure, _c_], 1);
   }
   caml_call4(Sexplib0_Sexp_conv[72][1], 0, 0, Duplicate, _a_);
   function globalize(param){
    var length = param[2], tree = param[1];
    return [0, tree, length];
   }
   function height(param){
    if(typeof param === "number") return 0;
    if(0 === param[0]) return 1;
    var h = param[5];
    return h;
   }
   function in_range(lower, upper, compare_key, k){
    if(lower)
     var
      lower$0 = lower[1],
      _dN_ = caml_call2(compare_key, lower$0, k) < 0 ? 1 : 0;
    else
     var _dN_ = 1;
    if(_dN_){
     if(upper){
      var upper$0 = upper[1];
      return caml_call2(compare_key, k, upper$0) < 0 ? 1 : 0;
     }
     var _dO_ = 1;
    }
    else
     var _dO_ = _dN_;
    return _dO_;
   }
   function loop(lower, upper, compare_key, t){
    var lower$0 = lower, t$0 = t;
    for(;;){
     if(typeof t$0 === "number") return 1;
     if(0 === t$0[0]){
      var k = t$0[1];
      return in_range(lower$0, upper, compare_key, k);
     }
     var
      h = t$0[5],
      r = t$0[4],
      k$0 = t$0[2],
      l = t$0[1],
      hl = height(l),
      hr = height(r),
      _dG_ = caml_call2(Base_Import[93], hl, hr),
      _dH_ = caml_call1(Base_Import[123], _dG_) <= 2 ? 1 : 0;
     if(_dH_){
      var
       _dI_ = caml_call2(Base_Import[100], hl, hr),
       _dJ_ = h === caml_call2(Base_Import[91], _dI_, 1) ? 1 : 0;
      if(_dJ_){
       var _dK_ = in_range(lower$0, upper, compare_key, k$0);
       if(_dK_){
        var _dL_ = loop(lower$0, [0, k$0], compare_key, l);
        if(_dL_){
         var lower$1 = [0, k$0], lower$0 = lower$1, t$0 = r;
         continue;
        }
        var _dM_ = _dL_;
       }
       else
        var _dM_ = _dK_;
      }
      else
       var _dM_ = _dJ_;
     }
     else
      var _dM_ = _dH_;
     return _dM_;
    }
   }
   function invariants(t, compare_key){return loop(0, 0, compare_key, t);}
   function create_with_heights(hl, hr, l, x, d, r){
    if(0 === hl && 0 === hr) return [0, x, d];
    var
     _dF_ =
       hr <= hl
        ? caml_call2(Base_Import[91], hl, 1)
        : caml_call2(Base_Import[91], hr, 1);
    return [1, l, x, d, r, _dF_];
   }
   function create(l, x, d, r){
    var _dE_ = height(r);
    return create_with_heights(height(l), _dE_, l, x, d, r);
   }
   function of_increasing_iterator_uncheck(len, f){
    function loop(n, f, i){
     if(3 >= n >>> 0)
      switch(n){
        case 0:
         return 0;
        case 1:
         var match$0 = caml_call1(f, i), v$0 = match$0[2], k$0 = match$0[1];
         return [0, k$0, v$0];
        case 2:
         var
          match$1 = caml_call1(f, i),
          vl = match$1[2],
          kl = match$1[1],
          match$2 = caml_call1(f, caml_call2(Base_Import[91], i, 1)),
          v$1 = match$2[2],
          k$1 = match$2[1];
         return [1, [0, kl, vl], k$1, v$1, 0, 2];
        default:
         var
          match$3 = caml_call1(f, i),
          vl$0 = match$3[2],
          kl$0 = match$3[1],
          match$4 = caml_call1(f, caml_call2(Base_Import[91], i, 1)),
          v$2 = match$4[2],
          k$2 = match$4[1],
          match$5 = caml_call1(f, caml_call2(Base_Import[91], i, 2)),
          vr = match$5[2],
          kr = match$5[1];
         return [1, [0, kl$0, vl$0], k$2, v$2, [0, kr, vr], 2];
      }
     var
      left_length = caml_call2(Base_Import[120], n, 1),
      _dC_ = caml_call2(Base_Import[93], n, left_length),
      right_length = caml_call2(Base_Import[93], _dC_, 1),
      left = loop(left_length, f, i),
      match = caml_call1(f, caml_call2(Base_Import[91], i, left_length)),
      v = match[2],
      k = match[1],
      _dD_ = caml_call2(Base_Import[91], i, left_length),
      right = loop(right_length, f, caml_call2(Base_Import[91], _dD_, 1));
     return create(left, k, v, right);
    }
    return loop(len, f, 0);
   }
   function of_sorted_array_unchecked(array, compare_key){
    var array_length = array.length - 1;
    a:
    {
     if(2 <= array_length){
      var
       k0 = caml_check_bound(array, 0)[1][1],
       k1 = caml_check_bound(array, 1)[2][1];
      if(caml_call2(compare_key, k0, k1) >= 0){
       var
        next =
          function(i){
           var
            _dA_ = caml_call2(Base_Import[93], array_length, 1),
            _dB_ = caml_call2(Base_Import[93], _dA_, i);
           return caml_check_bound(array, _dB_)[1 + _dB_];
          };
       break a;
      }
     }
     var next = function(i){return caml_check_bound(array, i)[1 + i];};
    }
    return [0,
            of_increasing_iterator_uncheck(array_length, next),
            array_length];
   }
   function of_sorted_array(array, compare_key){
    var len = array.length - 1;
    if(1 !== len && len)
     return caml_call1
             (with_return,
              function(r){
               var
                _dq_ = caml_check_bound(array, 1)[2],
                _dr_ = caml_call1(Base_Import[125], _dq_),
                _ds_ = caml_check_bound(array, 0)[1],
                i =
                  caml_call2
                   (compare_key, caml_call1(Base_Import[125], _ds_), _dr_),
                increasing =
                  0 === i
                   ? caml_call1
                     (r,
                      caml_call1
                       (Base_Or_error[40], cst_of_sorted_array_duplicated))
                   : i < 0 ? 1 : 0,
                _du_ = caml_call2(Base_Import[93], array.length - 1, 2),
                _dt_ = 1;
               if(_du_ >= 1){
                var i$0 = _dt_;
                for(;;){
                 var
                  _dv_ = caml_call2(Base_Import[91], i$0, 1),
                  _dw_ = caml_check_bound(array, _dv_)[1 + _dv_],
                  _dx_ = caml_call1(Base_Import[125], _dw_),
                  _dy_ = caml_check_bound(array, i$0)[1 + i$0],
                  i$1 =
                    caml_call2
                     (compare_key, caml_call1(Base_Import[125], _dy_), _dx_);
                 if(0 === i$1)
                  caml_call1
                   (r,
                    caml_call1
                     (Base_Or_error[40], cst_of_sorted_array_duplicated$0));
                 else if((i$1 < 0 ? 1 : 0) !== increasing)
                  caml_call1
                   (r,
                    caml_call1
                     (Base_Or_error[40], cst_of_sorted_array_elements_a));
                 var _dz_ = i$0 + 1 | 0;
                 if(_du_ === i$0) break;
                 var i$0 = _dz_;
                }
               }
               return [0,
                       globalize(of_sorted_array_unchecked(array, compare_key))];
              });
    return [0, globalize(of_sorted_array_unchecked(array, compare_key))];
   }
   function bal(l, x, d, r){
    var hl = height(l), hr = height(r);
    if(caml_call2(Base_Import[91], hr, 2) < hl){
     if(typeof l === "number")
      return caml_call1(Base_Import[126], cst_Map_bal);
     if(0 === l[0])
      throw caml_maybe_attach_backtrace([0, Assert_failure, _d_], 1);
     var lr = l[4], ld = l[3], lv = l[2], ll = l[1], _dk_ = height(lr);
     if(_dk_ <= height(ll)) return create(ll, lv, ld, create(lr, x, d, r));
     if(typeof lr === "number")
      return caml_call1(Base_Import[126], cst_Map_bal$0);
     if(0 === lr[0]){
      var lrd = lr[2], lrv = lr[1], _dl_ = create(0, x, d, r);
      return create(create(ll, lv, ld, 0), lrv, lrd, _dl_);
     }
     var
      lrr = lr[4],
      lrd$0 = lr[3],
      lrv$0 = lr[2],
      lrl = lr[1],
      _dm_ = create(lrr, x, d, r);
     return create(create(ll, lv, ld, lrl), lrv$0, lrd$0, _dm_);
    }
    if(caml_call2(Base_Import[91], hl, 2) >= hr)
     return create_with_heights(hl, hr, l, x, d, r);
    if(typeof r === "number")
     return caml_call1(Base_Import[126], cst_Map_bal$1);
    if(0 === r[0])
     throw caml_maybe_attach_backtrace([0, Assert_failure, _e_], 1);
    var rr = r[4], rd = r[3], rv = r[2], rl = r[1], _dn_ = height(rl);
    if(_dn_ <= height(rr)) return create(create(l, x, d, rl), rv, rd, rr);
    if(typeof rl === "number")
     return caml_call1(Base_Import[126], cst_Map_bal$2);
    if(0 === rl[0]){
     var rld = rl[2], rlv = rl[1], _do_ = create(0, rv, rd, rr);
     return create(create(l, x, d, 0), rlv, rld, _do_);
    }
    var
     rlr = rl[4],
     rld$0 = rl[3],
     rlv$0 = rl[2],
     rll = rl[1],
     _dp_ = create(rlr, rv, rd, rr);
    return create(create(l, x, d, rll), rlv$0, rld$0, _dp_);
   }
   var empty_without_value_restrictio = 0;
   function is_empty(param){return typeof param === "number" ? 1 : 0;}
   function raise_key_already_present(key, sexp_of_key){
    var
     _di_ = [0, [0, cst_key, caml_call1(sexp_of_key, key)], 0],
     _dj_ = caml_call2(Base_Sexp[10], cst_Map_add_exn_got_key_alread, _di_);
    return caml_call1(Base_Error[32], _dj_);
   }
   function find_and_add_or_set
   (t, length, x, data, compare_key, sexp_of_key, add_or_set){
    if(typeof t === "number")
     return [0, [0, x, data], caml_call2(Base_Import[91], length, 1)];
    if(0 === t[0]){
     var d = t[2], v = t[1], c = caml_call2(compare_key, x, v);
     if(0 === c)
      switch(add_or_set){
        case 0:
         return caml_call1(Base_Exn[6], Duplicate);
        case 1:
         return raise_key_already_present(x, sexp_of_key);
        default: return [0, [0, x, data], length];
      }
     return 0 <= c
             ? [0,
               [1, 0, v, d, [0, x, data], 2],
               caml_call2(Base_Import[91], length, 1)]
             : [0,
               [1, [0, x, data], v, d, 0, 2],
               caml_call2(Base_Import[91], length, 1)];
    }
    var
     h = t[5],
     r = t[4],
     d$0 = t[3],
     v$0 = t[2],
     l = t[1],
     c$0 = caml_call2(compare_key, x, v$0);
    if(0 === c$0)
     switch(add_or_set){
       case 0:
        return caml_call1(Base_Exn[6], Duplicate);
       case 1:
        return raise_key_already_present(x, sexp_of_key);
       default: return [0, [1, l, x, data, r, h], length];
     }
    if(0 <= c$0)
     var
      match =
        find_and_add_or_set
         (r, length, x, data, compare_key, sexp_of_key, add_or_set),
      length$0 = match[2],
      r$0 = match[1],
      length$1 = length$0,
      r$1 = r$0,
      l$0 = l;
    else
     var
      match$0 =
        find_and_add_or_set
         (l, length, x, data, compare_key, sexp_of_key, add_or_set),
      length$2 = match$0[2],
      l$1 = match$0[1],
      length$1 = length$2,
      r$1 = r,
      l$0 = l$1;
    return [0, bal(l$0, v$0, d$0, r$1), length$1];
   }
   function set_min(key, data, t){
    if(typeof t === "number") return [0, key, data];
    if(0 === t[0]){
     var d = t[2], v = t[1];
     return [1, [0, key, data], v, d, 0, 2];
    }
    var
     r = t[4],
     d$0 = t[3],
     v$0 = t[2],
     l = t[1],
     l$0 = set_min(key, data, l);
    return bal(l$0, v$0, d$0, r);
   }
   function set_max(t, key, data){
    if(typeof t === "number") return [0, key, data];
    if(0 === t[0]){
     var d = t[2], v = t[1];
     return [1, 0, v, d, [0, key, data], 2];
    }
    var
     r = t[4],
     d$0 = t[3],
     v$0 = t[2],
     l = t[1],
     r$0 = set_max(r, key, data);
    return bal(l, v$0, d$0, r$0);
   }
   function add_exn(t, length, key, data, compare_key, sexp_of_key){
    return find_and_add_or_set
            (t, length, key, data, compare_key, sexp_of_key, 1);
   }
   function add_exn_internal(t, length, key, data, compare_key, sexp_of_key){
    return find_and_add_or_set
            (t, length, key, data, compare_key, sexp_of_key, 0);
   }
   function set(t, length, key, data, compare_key){
    var _dh_ = 2;
    return find_and_add_or_set
            (t,
             length,
             key,
             data,
             compare_key,
             function(param){return _f_;},
             _dh_);
   }
   var empty = 0;
   function max_key(param){
    if(! param) return 0;
    var key = param[1][1];
    return [0, key];
   }
   function add_unchecked(t, key, data){return [0, [0, key, data], t];}
   function to_tree_unchecked(list){
    if(! list) return 0;
    if(list[2]){
     var
      len = caml_call1(Base_List0[5], list),
      list$0 = [0, list],
      loop =
        function(len){
         var _c__ = list$0[1], switcher = len - 1 | 0;
         if(2 >= switcher >>> 0)
          switch(switcher){
            case 0:
             if(_c__){
              var
               tail$0 = _c__[2],
               match$0 = _c__[1],
               data = match$0[2],
               key = match$0[1];
              list$0[1] = tail$0;
              return [0, key, data];
             }
             break;
            case 1:
             if(_c__){
              var _db_ = _c__[2];
              if(_db_){
               var
                tail$1 = _db_[2],
                _dc_ = _db_[1],
                d1 = _dc_[2],
                k1 = _dc_[1],
                match$1 = _c__[1],
                d2 = match$1[2],
                k2 = match$1[1];
               list$0[1] = tail$1;
               return [1, 0, k1, d1, [0, k2, d2], 2];
              }
             }
             break;
            default:
             if(_c__){
              var _dd_ = _c__[2];
              if(_dd_){
               var _de_ = _dd_[2];
               if(_de_){
                var
                 tail$2 = _de_[2],
                 _df_ = _de_[1],
                 d1$0 = _df_[2],
                 k1$0 = _df_[1],
                 _dg_ = _dd_[1],
                 d2$0 = _dg_[2],
                 k2$0 = _dg_[1],
                 match$2 = _c__[1],
                 d3 = match$2[2],
                 k3 = match$2[1];
                list$0[1] = tail$2;
                return [1, [0, k1$0, d1$0], k2$0, d2$0, [0, k3, d3], 2];
               }
              }
             }
          }
         var
          nr = caml_call2(Base_Import[95], len, 2),
          _c$_ = caml_call2(Base_Import[93], len, nr),
          nl = caml_call2(Base_Import[93], _c$_, 1),
          r = loop(nr),
          _da_ = list$0[1];
         if(! _da_)
          throw caml_maybe_attach_backtrace([0, Assert_failure, _g_], 1);
         var tail = _da_[2], match = _da_[1], d = match[2], k = match[1];
         list$0[1] = tail;
         var l = loop(nl);
         return create(l, k, d, r);
        };
     return loop(len);
    }
    var match = list[1], data = match[2], key = match[1];
    return [0, key, data];
   }
   function of_increasing_sequence(seq, compare_key){
    return caml_call1
            (with_return,
             function(param){
              function _c7_(param$0, _c8_){
               var
                data = _c8_[2],
                key = _c8_[1],
                length = param$0[2],
                builder = param$0[1],
                match = max_key(builder);
               if(match){
                var prev_key = match[1];
                if(0 <= caml_call2(compare_key, prev_key, key))
                 return caml_call1
                         (param,
                          caml_call1
                           (Base_Or_error[40], cst_of_increasing_sequence_non));
               }
               var _c9_ = caml_call2(Base_Import[91], length, 1);
               return [0, add_unchecked(builder, key, data), _c9_];
              }
              var
               match = caml_call3(Base_Sequence[11], seq, [0, empty, 0], _c7_),
               length = match[2],
               builder = match[1];
              return [0, [0, to_tree_unchecked(builder), length]];
             });
   }
   function join(l, k, d, r){
    if(typeof l === "number") return set_min(k, d, r);
    if(1 === l[0]){
     var lh = l[5], lr = l[4], ld$0 = l[3], lk$0 = l[2], ll = l[1];
     if(typeof r !== "number"){
      if(0 === r[0]){
       var rd = r[2], rk = r[1];
       return set_max(set_max(l, k, d), rk, rd);
      }
      var rh = r[5], rr = r[4], rd$0 = r[3], rk$0 = r[2], rl = r[1];
      if(caml_call2(Base_Import[91], rh, 3) < lh)
       var r$0 = join(lr, k, d, r), d$0 = ld$0, k$0 = lk$0, l$0 = ll;
      else if(caml_call2(Base_Import[91], lh, 3) < rh)
       var r$0 = rr, d$0 = rd$0, k$0 = rk$0, l$0 = join(l, k, d, rl);
      else
       var r$0 = r, d$0 = d, k$0 = k, l$0 = l;
      return bal(l$0, k$0, d$0, r$0);
     }
    }
    if(typeof r === "number") return set_max(l, k, d);
    var ld = l[2], lk = l[1];
    return set_min(lk, ld, set_min(k, d, r));
   }
   function split_gen(t, x, compare_key){
    if(typeof t === "number") return _h_;
    if(0 === t[0]){
     var d = t[2], k = t[1], cmp = caml_call1(compare_key, k);
     return 0 === cmp
             ? [0, 0, [0, [0, k, d]], 0]
             : 0 <= cmp ? [0, t, 0, 0] : [0, 0, 0, t];
    }
    var
     r = t[4],
     d$0 = t[3],
     k$0 = t[2],
     l = t[1],
     cmp$0 = caml_call1(compare_key, k$0);
    if(0 === cmp$0) return [0, l, [0, [0, k$0, d$0]], r];
    if(0 <= cmp$0){
     var
      match = split_gen(r, x, compare_key),
      rr = match[3],
      maybe = match[2],
      rl = match[1];
     return [0, join(l, k$0, d$0, rl), maybe, rr];
    }
    var
     match$0 = split_gen(l, x, compare_key),
     lr = match$0[3],
     maybe$0 = match$0[2],
     ll = match$0[1];
    return [0, ll, maybe$0, join(lr, k$0, d$0, r)];
   }
   function split(t, x, compare_key){
    return split_gen(t, x, function(y){return caml_call2(compare_key, x, y);});
   }
   function split_and_reinsert_boundary(t, into, x, compare_key){
    var
     _c6_ =
       847852583 <= into
        ? function
         (y){
          var res = caml_call2(compare_key, x, y);
          return 0 === res ? 1 : res;
         }
        : function
         (y){
          var res = caml_call2(compare_key, x, y);
          return 0 === res ? -1 : res;
         },
     match = split_gen(t, x, _c6_),
     right = match[3],
     boundary_opt = match[2],
     left = match[1];
    if(caml_call1(Base_Option[52], boundary_opt)) return [0, left, right];
    throw caml_maybe_attach_backtrace([0, Assert_failure, _i_], 1);
   }
   function split_range(t, lower_bound, upper_bound, compare_key){
    if
     (caml_call3(Base_Maybe_bound[10], lower_bound, upper_bound, compare_key))
     return [0,
             empty_without_value_restrictio,
             empty_without_value_restrictio,
             empty_without_value_restrictio];
    if(typeof lower_bound === "number")
     var mid_and_right = t, left = empty_without_value_restrictio;
    else if(0 === lower_bound[0])
     var
      lb$1 = lower_bound[1],
      _c4_ = split_and_reinsert_boundary(t, -57574468, lb$1, compare_key),
      mid_and_right = _c4_[2],
      left = _c4_[1];
    else
     var
      lb$2 = lower_bound[1],
      _c5_ = split_and_reinsert_boundary(t, 847852583, lb$2, compare_key),
      mid_and_right$0 = _c5_[2],
      left$0 = _c5_[1],
      mid_and_right = mid_and_right$0,
      left = left$0;
    if(typeof upper_bound === "number")
     var right = empty_without_value_restrictio, mid = mid_and_right;
    else if(0 === upper_bound[0])
     var
      lb = upper_bound[1],
      _c2_ =
        split_and_reinsert_boundary(mid_and_right, 847852583, lb, compare_key),
      right = _c2_[2],
      mid = _c2_[1];
    else
     var
      lb$0 = upper_bound[1],
      _c3_ =
        split_and_reinsert_boundary
         (mid_and_right, -57574468, lb$0, compare_key),
      right$0 = _c3_[2],
      mid$0 = _c3_[1],
      right = right$0,
      mid = mid$0;
    return [0, left, mid, right];
   }
   function find(t, x, compare_key){
    var t$0 = t;
    for(;;){
     if(typeof t$0 === "number") return 0;
     if(0 === t$0[0]){
      var d = t$0[2], v = t$0[1];
      return 0 === caml_call2(compare_key, x, v) ? [0, d] : 0;
     }
     var
      r = t$0[4],
      d$0 = t$0[3],
      v$0 = t$0[2],
      l = t$0[1],
      c = caml_call2(compare_key, x, v$0);
     if(0 === c) return [0, d$0];
     var r$0 = 0 <= c ? r : l, t$0 = r$0;
    }
   }
   function add_multi(t, length, key, data, compare_key){
    var
     _c1_ = find(t, key, compare_key),
     data$0 = [0, data, caml_call2(Base_Option[30], _c1_, 0)];
    return set(t, length, key, data$0, compare_key);
   }
   function find_multi(t, x, compare_key){
    var match = find(t, x, compare_key);
    if(! match) return 0;
    var l = match[1];
    return l;
   }
   function if_not_found(key, sexp_of_key){
    var _c0_ = [1, [0, _j_, [0, caml_call1(sexp_of_key, key), 0]]];
    throw caml_maybe_attach_backtrace([0, Base_Import[297], _c0_], 1);
   }
   function find_exn(t, x, compare_key, sexp_of_key){
    var t$0 = t;
    for(;;){
     if(typeof t$0 === "number") return if_not_found(x, sexp_of_key);
     if(0 === t$0[0]){
      var d = t$0[2], v = t$0[1];
      return 0 === caml_call2(compare_key, x, v)
              ? d
              : if_not_found(x, sexp_of_key);
     }
     var
      r = t$0[4],
      d$0 = t$0[3],
      v$0 = t$0[2],
      l = t$0[1],
      c = caml_call2(compare_key, x, v$0);
     if(0 === c) return d$0;
     var r$0 = 0 <= c ? r : l, t$0 = r$0;
    }
   }
   function mem(t, x, compare_key){
    var _cZ_ = find(t, x, compare_key);
    return caml_call1(Base_Option[53], _cZ_);
   }
   function min_elt(param){
    var param$0 = param;
    for(;;){
     if(typeof param$0 === "number") return 0;
     if(0 === param$0[0]){
      var d = param$0[2], k = param$0[1];
      return [0, [0, k, d]];
     }
     var l = param$0[1];
     if(typeof l === "number"){
      var d$0 = param$0[3], k$0 = param$0[2];
      return [0, [0, k$0, d$0]];
     }
     var param$0 = l;
    }
   }
   var
    Map_min_elt_exn_of_empty_map =
      [248, cst_Base_Map_Tree0_Map_min_elt, caml_fresh_oo_id(0)];
   function _k_(param){
    if(param === Map_min_elt_exn_of_empty_map) return _l_;
    throw caml_maybe_attach_backtrace([0, Assert_failure, _m_], 1);
   }
   caml_call4
    (Sexplib0_Sexp_conv[72][1], 0, 0, Map_min_elt_exn_of_empty_map, _k_);
   var
    Map_max_elt_exn_of_empty_map =
      [248, cst_Base_Map_Tree0_Map_max_elt, caml_fresh_oo_id(0)];
   function _n_(param){
    if(param === Map_max_elt_exn_of_empty_map) return _o_;
    throw caml_maybe_attach_backtrace([0, Assert_failure, _p_], 1);
   }
   caml_call4
    (Sexplib0_Sexp_conv[72][1], 0, 0, Map_max_elt_exn_of_empty_map, _n_);
   function min_elt_exn(t){
    var match = min_elt(t);
    if(! match)
     throw caml_maybe_attach_backtrace(Map_min_elt_exn_of_empty_map, 1);
    var v = match[1];
    return v;
   }
   function max_elt(param){
    var param$0 = param;
    for(;;){
     if(typeof param$0 === "number") return 0;
     if(0 === param$0[0]){
      var d = param$0[2], k = param$0[1];
      return [0, [0, k, d]];
     }
     if(typeof param$0[4] === "number"){
      var d$0 = param$0[3], k$0 = param$0[2];
      return [0, [0, k$0, d$0]];
     }
     var r = param$0[4], param$0 = r;
    }
   }
   function max_elt_exn(t){
    var match = max_elt(t);
    if(! match)
     throw caml_maybe_attach_backtrace(Map_max_elt_exn_of_empty_map, 1);
    var v = match[1];
    return v;
   }
   function remove_min_elt(t){
    if(typeof t === "number")
     return caml_call1(Base_Import[126], cst_Map_remove_min_elt);
    if(0 === t[0]) return 0;
    var l = t[1];
    if(typeof l === "number"){var r = t[4]; return r;}
    var r$0 = t[4], d = t[3], x = t[2];
    return bal(remove_min_elt(l), x, d, r$0);
   }
   function append(lower_part, upper_part, compare_key){
    var match = max_elt(lower_part), match$0 = min_elt(upper_part);
    if(! match) return [0, 17724, upper_part];
    if(! match$0) return [0, 17724, lower_part];
    var
     _cY_ = match$0[1],
     v = _cY_[2],
     min_upper = _cY_[1],
     max_lower = match[1][1];
    if(0 <= caml_call2(compare_key, max_lower, min_upper)) return 838882908;
    var upper_part_without_min = remove_min_elt(upper_part);
    return [0, 17724, join(lower_part, min_upper, v, upper_part_without_min)];
   }
   function go(t, min, max, init, f, compare_key){
    var t$0 = t, init$0 = init;
    for(;;){
     if(typeof t$0 === "number") return init$0;
     if(0 === t$0[0]){
      var d = t$0[2], k = t$0[1];
      if
       (0 <= caml_call2(compare_key, k, min)
        && 0 >= caml_call2(compare_key, k, max))
       return caml_call3(f, k, d, init$0);
      return init$0;
     }
     var
      r = t$0[4],
      d$0 = t$0[3],
      k$0 = t$0[2],
      l = t$0[1],
      c_min = caml_call2(compare_key, k$0, min);
     if(0 <= c_min)
      if(0 === c_min)
       var init$1 = caml_call3(f, k$0, d$0, init$0), t$0 = r, init$0 = init$1;
      else{
       var
        z = go(l, min, max, init$0, f, compare_key),
        c_max = caml_call2(compare_key, k$0, max);
       if(0 < c_max) return z;
       var init$2 = caml_call3(f, k$0, d$0, z);
       if(0 === c_max) return init$2;
       var t$0 = r, init$0 = init$2;
      }
     else
      var t$0 = r;
    }
   }
   function fold_range_inclusive(t, min, max, init, f, compare_key){
    return 0 < caml_call2(compare_key, min, max)
            ? init
            : go(t, min, max, init, f, compare_key);
   }
   function range_to_alist(t, min, max, compare_key){
    var
     _cX_ =
       fold_range_inclusive
        (t,
         min,
         max,
         0,
         function(key, data, l){return [0, [0, key, data], l];},
         compare_key);
    return caml_call1(Base_List0[19], _cX_);
   }
   function concat_unchecked(t1, t2){
    if(typeof t1 === "number") return t2;
    if(typeof t2 === "number") return t1;
    var match = min_elt_exn(t2), d = match[2], x = match[1];
    return bal(t1, x, d, remove_min_elt(t2));
   }
   function concat_and_balance_unchecked(t1, t2){
    if(typeof t1 === "number") return t2;
    if(typeof t2 === "number") return t1;
    var match = min_elt_exn(t2), d = match[2], x = match[1];
    return join(t1, x, d, remove_min_elt(t2));
   }
   function remove(t, x, length, compare_key){
    if(typeof t === "number") return [0, t, length];
    if(0 === t[0]){
     var v = t[1];
     return 0 === caml_call2(compare_key, x, v)
             ? [0, 0, caml_call2(Base_Import[93], length, 1)]
             : [0, t, length];
    }
    var
     r = t[4],
     d = t[3],
     v$0 = t[2],
     l = t[1],
     c = caml_call2(compare_key, x, v$0);
    if(0 === c){
     var _cW_ = caml_call2(Base_Import[93], length, 1);
     return [0, concat_unchecked(l, r), _cW_];
    }
    if(0 <= c)
     var
      match = remove(r, x, length, compare_key),
      length$0 = match[2],
      r$0 = match[1],
      length$1 = length$0,
      r$1 = r$0,
      l$0 = l;
    else
     var
      match$0 = remove(l, x, length, compare_key),
      length$2 = match$0[2],
      l$1 = match$0[1],
      length$1 = length$2,
      r$1 = r,
      l$0 = l$1;
    return length === length$1
            ? [0, t, length]
            : [0, bal(l$0, v$0, d, r$1), length$1];
   }
   function change(t, key, f, length, compare_key){
    if(typeof t === "number"){
     var match = caml_call1(f, 0);
     if(! match) return [0, 0, length];
     var data = match[1];
     return [0, [0, key, data], caml_call2(Base_Import[91], length, 1)];
    }
    if(0 === t[0]){
     var d = t[2], v = t[1], c = caml_call2(compare_key, key, v);
     if(0 === c){
      var match$0 = caml_call1(f, [0, d]);
      if(! match$0) return [0, 0, caml_call2(Base_Import[93], length, 1)];
      var d$0 = match$0[1];
      return [0, [0, v, d$0], length];
     }
     if(0 <= c){
      var
       match$1 = change(0, key, f, length, compare_key),
       length$0 = match$1[2],
       r = match$1[1];
      return r === t ? [0, t, length$0] : [0, bal(0, v, d, r), length$0];
     }
     var
      match$2 = change(0, key, f, length, compare_key),
      length$1 = match$2[2],
      l = match$2[1];
     return l === t ? [0, t, length$1] : [0, bal(l, v, d, 0), length$1];
    }
    var
     h = t[5],
     r$0 = t[4],
     d$1 = t[3],
     v$0 = t[2],
     l$0 = t[1],
     c$0 = caml_call2(compare_key, key, v$0);
    if(0 === c$0){
     var match$3 = caml_call1(f, [0, d$1]);
     if(match$3){
      var data$0 = match$3[1];
      return [0, [1, l$0, key, data$0, r$0, h], length];
     }
     var _cV_ = caml_call2(Base_Import[93], length, 1);
     return [0, concat_unchecked(l$0, r$0), _cV_];
    }
    if(0 <= c$0){
     var
      match$4 = change(r$0, key, f, length, compare_key),
      length$2 = match$4[2],
      r$1 = match$4[1];
     return r$1 === r$0
             ? [0, t, length$2]
             : [0, bal(l$0, v$0, d$1, r$1), length$2];
    }
    var
     match$5 = change(l$0, key, f, length, compare_key),
     length$3 = match$5[2],
     l$1 = match$5[1];
    return l$1 === l$0
            ? [0, t, length$3]
            : [0, bal(l$1, v$0, d$1, r$0), length$3];
   }
   function update(t, key, f, length, compare_key){
    if(typeof t === "number"){
     var data = caml_call1(f, 0);
     return [0, [0, key, data], caml_call2(Base_Import[91], length, 1)];
    }
    if(0 === t[0]){
     var d = t[2], v = t[1], c = caml_call2(compare_key, key, v);
     if(0 === c){
      var d$0 = caml_call1(f, [0, d]);
      return [0, [0, v, d$0], length];
     }
     if(0 <= c){
      var
       match = update(0, key, f, length, compare_key),
       length$0 = match[2],
       r = match[1];
      return [0, bal(0, v, d, r), length$0];
     }
     var
      match$0 = update(0, key, f, length, compare_key),
      length$1 = match$0[2],
      l = match$0[1];
     return [0, bal(l, v, d, 0), length$1];
    }
    var
     h = t[5],
     r$0 = t[4],
     d$1 = t[3],
     v$0 = t[2],
     l$0 = t[1],
     c$0 = caml_call2(compare_key, key, v$0);
    if(0 === c$0){
     var data$0 = caml_call1(f, [0, d$1]);
     return [0, [1, l$0, key, data$0, r$0, h], length];
    }
    if(0 <= c$0){
     var
      match$1 = update(r$0, key, f, length, compare_key),
      length$2 = match$1[2],
      r$1 = match$1[1];
     return [0, bal(l$0, v$0, d$1, r$1), length$2];
    }
    var
     match$2 = update(l$0, key, f, length, compare_key),
     length$3 = match$2[2],
     l$1 = match$2[1];
    return [0, bal(l$1, v$0, d$1, r$0), length$3];
   }
   function remove_multi(t, key, length, compare_key){
    return change
            (t,
             key,
             function(param){
              if(param){
               var _cU_ = param[1];
               if(_cU_){
                var non_empty_tail = _cU_[2];
                if(non_empty_tail) return [0, non_empty_tail];
               }
              }
              return 0;
             },
             length,
             compare_key);
   }
   function iter_keys(t, f){
    var t$0 = t;
    for(;;){
     if(typeof t$0 === "number") return 0;
     if(0 === t$0[0]){var v = t$0[1]; return caml_call1(f, v);}
     var r = t$0[4], v$0 = t$0[2], l = t$0[1];
     iter_keys(l, f);
     caml_call1(f, v$0);
     var t$0 = r;
    }
   }
   function iter(t, f){
    var t$0 = t;
    for(;;){
     if(typeof t$0 === "number") return 0;
     if(0 === t$0[0]){var d = t$0[2]; return caml_call1(f, d);}
     var r = t$0[4], d$0 = t$0[3], l = t$0[1];
     iter(l, f);
     caml_call1(f, d$0);
     var t$0 = r;
    }
   }
   function iteri(t, f){
    var t$0 = t;
    for(;;){
     if(typeof t$0 === "number") return 0;
     if(0 === t$0[0]){var d = t$0[2], v = t$0[1]; return caml_call2(f, v, d);}
     var r = t$0[4], d$0 = t$0[3], v$0 = t$0[2], l = t$0[1];
     iteri(l, f);
     caml_call2(f, v$0, d$0);
     var t$0 = r;
    }
   }
   function iteri_until_loop(t, f){
    var t$0 = t;
    for(;;){
     if(typeof t$0 === "number") return 0;
     if(0 === t$0[0]){var d = t$0[2], v = t$0[1]; return caml_call2(f, v, d);}
     var r = t$0[4], d$0 = t$0[3], v$0 = t$0[2], l = t$0[1];
     if(iteri_until_loop(l, f)) return 1;
     if(caml_call2(f, v$0, d$0)) return 1;
     var t$0 = r;
    }
   }
   function iteri_until(t, f){
    var _cT_ = iteri_until_loop(t, f);
    return caml_call1(Finished_or_unfinished[5], _cT_);
   }
   function map(t, f){
    if(typeof t === "number") return 0;
    if(0 === t[0]){var d = t[2], v = t[1]; return [0, v, caml_call1(f, d)];}
    var
     h = t[5],
     r = t[4],
     d$0 = t[3],
     v$0 = t[2],
     l = t[1],
     l$0 = map(l, f),
     d$1 = caml_call1(f, d$0),
     r$0 = map(r, f);
    return [1, l$0, v$0, d$1, r$0, h];
   }
   function mapi(t, f){
    if(typeof t === "number") return 0;
    if(0 === t[0]){
     var d = t[2], v = t[1];
     return [0, v, caml_call2(f, v, d)];
    }
    var
     h = t[5],
     r = t[4],
     d$0 = t[3],
     v$0 = t[2],
     l = t[1],
     l$0 = mapi(l, f),
     d$1 = caml_call2(f, v$0, d$0),
     r$0 = mapi(r, f);
    return [1, l$0, v$0, d$1, r$0, h];
   }
   function fold(t, accu, f){
    var t$0 = t, accu$0 = accu;
    for(;;){
     if(typeof t$0 === "number") return accu$0;
     if(0 === t$0[0]){
      var d = t$0[2], v = t$0[1];
      return caml_call3(f, v, d, accu$0);
     }
     var
      r = t$0[4],
      d$0 = t$0[3],
      v$0 = t$0[2],
      l = t$0[1],
      accu$1 = caml_call3(f, v$0, d$0, fold(l, accu$0, f)),
      t$0 = r,
      accu$0 = accu$1;
    }
   }
   function fold_until(t, init, f, finish){
    function fold_until_loop(t, acc, f){
     var t$0 = t, acc$0 = acc;
     for(;;){
      if(typeof t$0 === "number") return [0, acc$0];
      if(0 === t$0[0]){
       var d = t$0[2], v = t$0[1];
       return caml_call3(f, v, d, acc$0);
      }
      var
       r = t$0[4],
       d$0 = t$0[3],
       v$0 = t$0[2],
       l = t$0[1],
       match = fold_until_loop(l, acc$0, f);
      if(0 !== match[0]){var final$1 = match[1]; return [1, final$1];}
      var acc$1 = match[1], match$0 = caml_call3(f, v$0, d$0, acc$1);
      if(0 !== match$0[0]){var final$0 = match$0[1]; return [1, final$0];}
      var acc$2 = match$0[1], t$0 = r, acc$0 = acc$2;
     }
    }
    var match = fold_until_loop(t, init, f);
    if(0 === match[0]){var acc = match[1]; return caml_call1(finish, acc);}
    var stop = match[1];
    return stop;
   }
   function fold_right(t, accu, f){
    var t$0 = t, accu$0 = accu;
    for(;;){
     if(typeof t$0 === "number") return accu$0;
     if(0 === t$0[0]){
      var d = t$0[2], v = t$0[1];
      return caml_call3(f, v, d, accu$0);
     }
     var
      r = t$0[4],
      d$0 = t$0[3],
      v$0 = t$0[2],
      l = t$0[1],
      accu$1 = caml_call3(f, v$0, d$0, fold_right(r, accu$0, f)),
      t$0 = l,
      accu$0 = accu$1;
    }
   }
   function filter_mapi(t, f, len){
    if(typeof t === "number") return 0;
    if(0 === t[0]){
     var d = t[2], v = t[1], match = caml_call2(f, v, d);
     if(match){var new_data = match[1]; return [0, v, new_data];}
     len[1] += -1;
     return 0;
    }
    var
     r = t[4],
     d$0 = t[3],
     v$0 = t[2],
     l = t[1],
     l$0 = filter_mapi(l, f, len),
     new_data$0 = caml_call2(f, v$0, d$0),
     r$0 = filter_mapi(r, f, len);
    if(new_data$0){
     var new_data$1 = new_data$0[1];
     return join(l$0, v$0, new_data$1, r$0);
    }
    len[1] += -1;
    return concat_and_balance_unchecked(l$0, r$0);
   }
   function filteri(t, f, len){
    if(typeof t === "number") return 0;
    if(0 === t[0]){
     var d = t[2], v = t[1];
     return caml_call2(f, v, d) ? t : (len[1] += -1, 0);
    }
    var
     r = t[4],
     d$0 = t[3],
     v$0 = t[2],
     l = t[1],
     l$0 = filteri(l, f, len),
     keep_data = caml_call2(f, v$0, d$0),
     r$0 = filteri(r, f, len);
    if(l === l$0 && keep_data && r === r$0) return t;
    return keep_data
            ? join(l$0, v$0, d$0, r$0)
            : (len[1] += -1, concat_and_balance_unchecked(l$0, r$0));
   }
   function filter(t, f, len){
    return filteri(t, function(param, data){return caml_call1(f, data);}, len);
   }
   function filter_keys(t, f, len){
    return filteri(t, function(key, param){return caml_call1(f, key);}, len);
   }
   function filter_map(t, f, len){
    return filter_mapi
            (t, function(param, data){return caml_call1(f, data);}, len);
   }
   function partition_mapi(t, f){
    var
     match =
       fold
        (t,
         [0, empty, empty],
         function(key, data, param){
          var t2 = param[2], t1 = param[1], match = caml_call2(f, key, data);
          if(0 === match[0]){
           var x = match[1];
           return [0, add_unchecked(t1, key, x), t2];
          }
          var y = match[1];
          return [0, t1, add_unchecked(t2, key, y)];
         }),
     t2 = match[2],
     t1 = match[1],
     _cS_ = to_tree_unchecked(t2);
    return [0, to_tree_unchecked(t1), _cS_];
   }
   function partition_map(t, f){
    return partition_mapi
            (t, function(param, data){return caml_call1(f, data);});
   }
   function partitioni_tf(t, f){
    function loop(t, f){
     if(typeof t === "number") return _q_;
     if(0 === t[0]){
      var d = t[2], v = t[1];
      return caml_call2(f, v, d) ? [0, t, 0] : [0, 0, t];
     }
     var
      r = t[4],
      d$0 = t[3],
      v$0 = t[2],
      l = t[1],
      match = loop(l, f),
      l_f = match[2],
      l_t = match[1],
      keep_data_t = caml_call2(f, v$0, d$0),
      match$0 = loop(r, f),
      r_f = match$0[2],
      r_t = match$0[1];
     function mk(l$0, keep_data, r$0){
      if(l === l$0 && keep_data && r === r$0) return t;
      return keep_data
              ? join(l$0, v$0, d$0, r$0)
              : concat_and_balance_unchecked(l$0, r$0);
     }
     var _cR_ = mk(l_f, 1 - keep_data_t, r_f);
     return [0, mk(l_t, keep_data_t, r_t), _cR_];
    }
    return loop(t, f);
   }
   function partition_tf(t, f){
    return partitioni_tf
            (t, function(param, data){return caml_call1(f, data);});
   }
   function cons(t, e){
    var t$0 = t, e$0 = e;
    for(;;){
     if(typeof t$0 === "number") return e$0;
     if(0 === t$0[0]){var d = t$0[2], v = t$0[1]; return [0, v, d, 0, e$0];}
     var
      r = t$0[4],
      d$0 = t$0[3],
      v$0 = t$0[2],
      l = t$0[1],
      e$1 = [0, v$0, d$0, r, e$0],
      t$0 = l,
      e$0 = e$1;
    }
   }
   function cons_right(t, e){
    var t$0 = t, e$0 = e;
    for(;;){
     if(typeof t$0 === "number") return e$0;
     if(0 === t$0[0]){var d = t$0[2], v = t$0[1]; return [0, v, d, 0, e$0];}
     var
      r = t$0[4],
      d$0 = t$0[3],
      v$0 = t$0[2],
      l = t$0[1],
      e$1 = [0, v$0, d$0, l, e$0],
      t$0 = r,
      e$0 = e$1;
    }
   }
   function of_tree(tree){return cons(tree, 0);}
   function step_deeper_exn(tree, e){
    if(typeof tree === "number")
     throw caml_maybe_attach_backtrace([0, Assert_failure, _r_], 1);
    if(0 === tree[0]){
     var d = tree[2], v = tree[1];
     return [0, 0, [0, v, d, 0, e]];
    }
    var r = tree[4], d$0 = tree[3], v$0 = tree[2], l = tree[1];
    return [0, l, [0, v$0, d$0, r, e]];
   }
   function drop_phys_equal_prefix(tree1, acc1, tree2, acc2){
    var tree1$0 = tree1, acc1$0 = acc1, tree2$0 = tree2, acc2$0 = acc2;
    for(;;){
     if(tree1$0 === tree2$0) return [0, acc1$0, acc2$0];
     var h2 = height(tree2$0), h1 = height(tree1$0);
     if(h2 === h1)
      var
       match = step_deeper_exn(tree1$0, acc1$0),
       acc1$1 = match[2],
       tree1$1 = match[1],
       match$0 = step_deeper_exn(tree2$0, acc2$0),
       acc2$1 = match$0[2],
       tree2$1 = match$0[1],
       tree1$0 = tree1$1,
       acc1$0 = acc1$1,
       tree2$0 = tree2$1,
       acc2$0 = acc2$1;
     else if(h1 < h2)
      var
       match$1 = step_deeper_exn(tree2$0, acc2$0),
       acc2$2 = match$1[2],
       tree2$2 = match$1[1],
       tree2$0 = tree2$2,
       acc2$0 = acc2$2;
     else
      var
       match$2 = step_deeper_exn(tree1$0, acc1$0),
       acc1$2 = match$2[2],
       tree1$2 = match$2[1],
       tree1$0 = tree1$2,
       acc1$0 = acc1$2;
    }
   }
   function fold$0(init, f, param){
    var init$0 = init, param$0 = param;
    for(;;){
     if(! param$0) return init$0;
     var
      enum$0 = param$0[4],
      tree = param$0[3],
      data = param$0[2],
      key = param$0[1],
      next = caml_call3(f, key, data, init$0),
      init$0 = next,
      param$0 = cons(tree, enum$0);
    }
   }
   function fold2(compare_key, t1, t2, init, f){
    var t1$0 = t1, t2$0 = t2, curr = init;
    for(;;){
     if(! t1$0)
      return t2$0
              ? fold$0
                (curr,
                 function(key, data, acc){
                  return caml_call3(f, key, [0, -57574468, data], acc);
                 },
                 t2$0)
              : curr;
     if(! t2$0)
      return fold$0
              (curr,
               function(key, data, acc){
                return caml_call3(f, key, [0, 847852583, data], acc);
               },
               t1$0);
     var
      enum2 = t2$0[4],
      tree2 = t2$0[3],
      v2 = t2$0[2],
      k2 = t2$0[1],
      enum1 = t1$0[4],
      tree1 = t1$0[3],
      v1 = t1$0[2],
      k1 = t1$0[1],
      compare_result = caml_call2(compare_key, k1, k2);
     if(0 === compare_result)
      var
       next = caml_call3(f, k1, [0, 737457313, [0, v1, v2]], curr),
       t2$1 = cons(tree2, enum2),
       t1$1 = cons(tree1, enum1),
       t1$0 = t1$1,
       t2$0 = t2$1,
       curr = next;
     else if(0 <= compare_result)
      var
       next$0 = caml_call3(f, k2, [0, -57574468, v2], curr),
       t2$2 = cons(tree2, enum2),
       t2$0 = t2$2,
       curr = next$0;
     else
      var
       next$1 = caml_call3(f, k1, [0, 847852583, v1], curr),
       t1$2 = cons(tree1, enum1),
       t1$0 = t1$2,
       curr = next$1;
    }
   }
   function symmetric_diff(t1, t2, compare_key, data_equal){
    function step(state){
     var left = state[1];
     if(left){
      var
       right = state[2],
       enum1 = left[4],
       tree1 = left[3],
       data = left[2],
       key = left[1];
      if(! right)
       return [1, [0, key, [0, 847852583, data]], [0, cons(tree1, enum1), 0]];
      var
       enum2 = right[4],
       tree2 = right[3],
       v2 = right[2],
       k2 = right[1],
       compare_result = caml_call2(compare_key, key, k2);
      if(0 !== compare_result)
       return 0 <= compare_result
               ? [1,
                 [0, k2, [0, -57574468, v2]],
                 [0, left, cons(tree2, enum2)]]
               : [1,
                 [0, key, [0, 847852583, data]],
                 [0, cons(tree1, enum1), right]];
      var next_state = drop_phys_equal_prefix(tree1, enum1, tree2, enum2);
      return caml_call2(data_equal, data, v2)
              ? [0, next_state]
              : [1, [0, key, [0, 1013247643, [0, data, v2]]], next_state];
     }
     var match = state[2];
     if(! match) return 0;
     var
      enum$0 = match[4],
      tree = match[3],
      data$0 = match[2],
      key$0 = match[1];
     return [1,
             [0, key$0, [0, -57574468, data$0]],
             [0, 0, cons(tree, enum$0)]];
    }
    var _cQ_ = drop_phys_equal_prefix(t1, 0, t2, 0);
    return caml_call2(Base_Sequence[44], _cQ_, step);
   }
   function to_sequence
   (comparator, opt, keys_greater_or_equal_to, keys_less_or_equal_to, t$3){
    if(opt) var sth = opt[1], order = sth; else var order = -542431297;
    function inclusive_bound(side, t, bound){
     var
      compare_key = comparator[1],
      match = split(t, bound, compare_key),
      r = match[3],
      maybe = match[2],
      l = match[1],
      t$0 = caml_call1(side, [0, l, r]);
     if(! maybe) return t$0;
     var match$0 = maybe[1], data = match$0[2], key = match$0[1];
     return set(t$0, 0, key, data, compare_key)[1];
    }
    if(511974747 <= order){
     var
      _cI_ = Base_Import[127],
      _cJ_ = function(_cO_, _cP_){return inclusive_bound(_cI_, _cO_, _cP_);},
      tree = caml_call3(Base_Option[34], keys_greater_or_equal_to, t$3, _cJ_),
      next$0 =
        function(enum$0){
         if(! enum$0) return 0;
         var e = enum$0[4], t = enum$0[3], v = enum$0[2], k = enum$0[1];
         return [1, [0, k, v], cons_right(t, e)];
        };
     if(keys_less_or_equal_to){
      var
       key$0 = keys_less_or_equal_to[1],
       compare$0 = comparator[1],
       t$1 = tree,
       e$1 = 0;
      for(;;){
       if(typeof t$1 === "number"){var init$0 = e$1; break;}
       if(0 === t$1[0])
        var
         d$1 = t$1[2],
         v$2 = t$1[1],
         t$2 = [1, 0, v$2, d$1, 0, 1],
         t$1 = t$2;
       else{
        var l$0 = t$1[1], v$3 = t$1[2];
        if(0 < caml_call2(compare$0, v$3, key$0))
         var t$1 = l$0;
        else
         var
          r$1 = t$1[4],
          d$2 = t$1[3],
          v$4 = t$1[2],
          e$2 = [0, v$4, d$2, l$0, e$1],
          t$1 = r$1,
          e$1 = e$2;
       }
      }
     }
     else
      var init$0 = cons_right(tree, 0);
     return caml_call2(Base_Sequence[44], init$0, next$0);
    }
    var _cK_ = Base_Import[125];
    function _cL_(_cM_, _cN_){return inclusive_bound(_cK_, _cM_, _cN_);}
    var t$4 = caml_call3(Base_Option[34], keys_less_or_equal_to, t$3, _cL_);
    function next(enum$0){
     if(! enum$0) return 0;
     var e = enum$0[4], t = enum$0[3], v = enum$0[2], k = enum$0[1];
     return [1, [0, k, v], cons(t, e)];
    }
    if(keys_greater_or_equal_to){
     var
      key = keys_greater_or_equal_to[1],
      compare = comparator[1],
      t = t$4,
      e = 0;
     for(;;){
      if(typeof t === "number"){var init = e; break;}
      if(0 === t[0])
       var d = t[2], v = t[1], t$0 = [1, 0, v, d, 0, 1], t = t$0;
      else{
       var l = t[1], r = t[4], v$0 = t[2];
       if(0 <= caml_call2(compare, v$0, key))
        var
         r$0 = t[4],
         d$0 = t[3],
         v$1 = t[2],
         e$0 = [0, v$1, d$0, r$0, e],
         t = l,
         e = e$0;
       else
        var t = r;
      }
     }
    }
    else
     var init = of_tree(t$4);
    return caml_call2(Base_Sequence[44], init, next);
   }
   function compare$1(compare_key, compare_data, t1$0, t2$0){
    var
     match$0 = drop_phys_equal_prefix(t1$0, 0, t2$0, 0),
     e2$1 = match$0[2],
     e1$1 = match$0[1],
     t1 = e1$1,
     t2 = e2$1;
    for(;;){
     if(! t1) return t2 ? -1 : 0;
     if(! t2) return 1;
     var
      e2 = t2[4],
      r2 = t2[3],
      d2 = t2[2],
      v2 = t2[1],
      e1 = t1[4],
      r1 = t1[3],
      d1 = t1[2],
      v1 = t1[1],
      c = caml_call2(compare_key, v1, v2);
     if(0 !== c) return c;
     var c$0 = caml_call2(compare_data, d1, d2);
     if(0 !== c$0) return c$0;
     var
      match = drop_phys_equal_prefix(r1, e1, r2, e2),
      e2$0 = match[2],
      e1$0 = match[1],
      t1 = e1$0,
      t2 = e2$0;
    }
   }
   function equal$1(compare_key, compare_data, t1$0, t2$0){
    var
     match$0 = drop_phys_equal_prefix(t1$0, 0, t2$0, 0),
     e2$1 = match$0[2],
     e1$1 = match$0[1],
     t1 = e1$1,
     t2 = e2$1;
    for(;;){
     if(t1){
      if(t2){
       var
        e2 = t2[4],
        r2 = t2[3],
        d2 = t2[2],
        v2 = t2[1],
        e1 = t1[4],
        r1 = t1[3],
        d1 = t1[2],
        v1 = t1[1],
        _cF_ = 0 === caml_call2(compare_key, v1, v2) ? 1 : 0;
       if(_cF_){
        var _cG_ = caml_call2(compare_data, d1, d2);
        if(_cG_){
         var
          match = drop_phys_equal_prefix(r1, e1, r2, e2),
          e2$0 = match[2],
          e1$0 = match[1],
          t1 = e1$0,
          t2 = e2$0;
         continue;
        }
        var _cH_ = _cG_;
       }
       else
        var _cH_ = _cF_;
       return _cH_;
      }
     }
     else if(! t2) return 1;
     return 0;
    }
   }
   function iter2(t1, t2, f, compare_key){
    function _cD_(key, data, param){return caml_call2(f, key, data);}
    var _cE_ = of_tree(t2);
    return fold2(compare_key, of_tree(t1), _cE_, 0, _cD_);
   }
   function fold2$0(t1, t2, init, f, compare_key){
    var _cC_ = of_tree(t2);
    return fold2(compare_key, of_tree(t1), _cC_, init, f);
   }
   function fold_symmetric_diff(t1, t2, compare_key, data_equal, init, f){
    function add(acc, k, v){
     return caml_call2(f, acc, [0, k, [0, -57574468, v]]);
    }
    function remove(acc, k, v){
     return caml_call2(f, acc, [0, k, [0, 847852583, v]]);
    }
    function delta(acc, k, v$0, v){
     return caml_call2(data_equal, v$0, v)
             ? acc
             : caml_call2(f, acc, [0, k, [0, 1013247643, [0, v$0, v]]]);
    }
    function loop(t$0, t, acc$3){
     var t1 = t$0, t2 = t, init = acc$3;
     for(;;){
      if(t1 === t2) return init;
      if(typeof t1 === "number")
       return fold
               (t2,
                init,
                function(key, data, acc){return add(acc, key, data);});
      a:
      {
       if(0 === t1[0]){
        var v = t1[2], k = t1[1];
        if(typeof t2 === "number") break a;
        if(0 === t2[0]){
         var v$0 = t2[2], k$0 = t2[1], x = caml_call2(compare_key, k, k$0);
         if(0 === x) return delta(init, k, v, v$0);
         if(0 <= x){
          var acc$4 = add(init, k$0, v$0);
          return remove(acc$4, k, v);
         }
         var acc$5 = remove(init, k, v);
         return add(acc$5, k$0, v$0);
        }
       }
       else{
        var r = t1[4], v$1 = t1[3], k$1 = t1[2], l = t1[1];
        if(typeof t2 === "number") break a;
        if(0 !== t2[0]){
         var r$0 = t2[4], v$2 = t2[3], k$2 = t2[2], l$0 = t2[1];
         if(0 === caml_call2(compare_key, k$1, k$2)){
          var
           acc$6 = loop(l, l$0, init),
           acc$7 = delta(acc$6, k$1, v$1, v$2),
           t1 = r,
           t2 = r$0,
           init = acc$7;
          continue;
         }
        }
       }
       var
        add$0 =
          function(acc, k, v){
           return caml_call2(f, acc, [0, k, [0, -57574468, v]]);
          },
        remove$0 =
          function(acc, k, v){
           return caml_call2(f, acc, [0, k, [0, 847852583, v]]);
          },
        match$0 = drop_phys_equal_prefix(t1, 0, t2, 0),
        right$1 = match$0[2],
        left$1 = match$0[1],
        left = left$1,
        right = right$1,
        acc = init;
       for(;;){
        if(! left)
         return fold$0
                 (acc,
                  function(key, data, acc){return add$0(acc, key, data);},
                  right);
        if(! right)
         return fold$0
                 (acc,
                  function(key, data, acc){return remove$0(acc, key, data);},
                  left);
        var
         enum2 = right[4],
         tree2 = right[3],
         v2 = right[2],
         k2 = right[1],
         enum1 = left[4],
         tree1 = left[3],
         v1 = left[2],
         k1 = left[1],
         compare_result = caml_call2(compare_key, k1, k2);
        if(0 === compare_result)
         var
          acc$0 =
            caml_call2(data_equal, v1, v2)
             ? acc
             : caml_call2(f, acc, [0, k1, [0, 1013247643, [0, v1, v2]]]),
          match = drop_phys_equal_prefix(tree1, enum1, tree2, enum2),
          enum2$0 = match[2],
          enum1$0 = match[1],
          left = enum1$0,
          right = enum2$0,
          acc = acc$0;
        else if(0 <= compare_result)
         var
          acc$1 = add$0(acc, k2, v2),
          right$0 = cons(tree2, enum2),
          right = right$0,
          acc = acc$1;
        else
         var
          acc$2 = remove$0(acc, k1, v1),
          left$0 = cons(tree1, enum1),
          left = left$0,
          acc = acc$2;
       }
      }
      return fold
              (t1,
               init,
               function(key, data, acc){return remove(acc, key, data);});
     }
    }
    return loop(t1, t2, init);
   }
   function length(param){
    if(typeof param === "number") return 0;
    if(0 === param[0]) return 1;
    var
     r = param[4],
     l = param[1],
     _cz_ = length(r),
     _cA_ = length(l),
     _cB_ = caml_call2(Base_Import[91], _cA_, _cz_);
    return caml_call2(Base_Import[91], _cB_, 1);
   }
   function keys(t){
    return fold_right
            (t, 0, function(key, param, list){return [0, key, list];});
   }
   function data(t){
    return fold_right
            (t, 0, function(param, data, list){return [0, data, list];});
   }
   function of_foldable(fold, foldable, init, f, compare_key){
    return caml_call3
            (fold,
             foldable,
             [0, empty_without_value_restrictio, 0],
             function(param, _cy_){
              var
               data = _cy_[2],
               key = _cy_[1],
               length = param[2],
               accum = param[1],
               match = find(accum, key, compare_key);
              if(match)
               var prev = match[1], prev_data = prev;
              else
               var prev_data = init;
              var data$0 = caml_call2(f, prev_data, data);
              return globalize(set(accum, length, key, data$0, compare_key));
             });
   }
   function Of_foldable(M){
    function of_foldable_fold(foldable, init, f, compare_key){
     return of_foldable(M[2], foldable, init, f, compare_key);
    }
    function of_foldable_reduce(foldable, f, compare_key){
     function _cw_(param, _cx_){
      var
       data = _cx_[2],
       key = _cx_[1],
       length = param[2],
       accum = param[1],
       match = find(accum, key, compare_key);
      if(match)
       var prev = match[1], new_data = caml_call2(f, prev, data);
      else
       var new_data = data;
      return globalize(set(accum, length, key, new_data, compare_key));
     }
     return caml_call3
             (M[2], foldable, [0, empty_without_value_restrictio, 0], _cw_);
    }
    function of_foldable$0(foldable, compare_key){
     return caml_call1
             (with_return,
              function(r){
               function _cu_(param, _cv_){
                var
                 data = _cv_[2],
                 key = _cv_[1],
                 length = param[2],
                 t = param[1],
                 acc = set(t, length, key, data, compare_key),
                 length$0 = acc[2];
                return length === length$0
                        ? caml_call1(r, [0, -1048878709, key])
                        : globalize(acc);
               }
               var
                map =
                  caml_call3
                   (M[2],
                    foldable,
                    [0, empty_without_value_restrictio, 0],
                    _cu_);
               return [0, 17724, map];
              });
    }
    function of_foldable_or_error(foldable, comparator){
     var match = of_foldable$0(foldable, comparator[1]);
     if(17724 <= match[1]){var x = match[2]; return [0, x];}
     var
      key = match[2],
      _cr_ = comparator[2],
      _cs_ = caml_call2(Base_Import[112], M[1], cst_or_error_duplicate_key),
      _ct_ = caml_call2(Base_Import[112], cst_Map_of, _cs_);
     return caml_call5(Base_Or_error[38], 0, 0, _ct_, key, _cr_);
    }
    function of_foldable_exn(foldable, comparator){
     var match = of_foldable$0(foldable, comparator[1]);
     if(17724 <= match[1]){var x = match[2]; return x;}
     var
      key = match[2],
      _cn_ = comparator[2],
      _co_ = caml_call2(Base_Import[112], M[1], cst_exn_duplicate_key),
      _cp_ = caml_call2(Base_Import[112], cst_Map_of$0, _co_),
      _cq_ = caml_call5(Base_Error[19], 0, 0, _cp_, key, _cn_);
     return caml_call1(Base_Error[31], _cq_);
    }
    function of_foldable_multi(foldable, compare_key){
     function _cl_(l, x){return [0, x, l];}
     var alist = caml_call3(M[2], foldable, 0, _cl_);
     function _cm_(l, x){return [0, x, l];}
     return of_foldable(Base_List0[8], alist, 0, _cm_, compare_key);
    }
    return [0,
            of_foldable_fold,
            of_foldable_reduce,
            of_foldable$0,
            of_foldable_or_error,
            of_foldable_exn,
            of_foldable_multi];
   }
   var
    fold$1 = Base_List0[8],
    Of_alist = Of_foldable([0, name, fold$1]),
    of_alist_fold = Of_alist[1],
    of_alist_reduce = Of_alist[2],
    of_alist = Of_alist[3],
    of_alist_or_error = Of_alist[4],
    of_alist_exn = Of_alist[5],
    of_alist_multi = Of_alist[6],
    fold$2 = Base_Sequence[11],
    Of_sequence = Of_foldable([0, name$0, fold$2]),
    of_sequence_fold = Of_sequence[1],
    of_sequence_reduce = Of_sequence[2],
    of_sequence = Of_sequence[3],
    of_sequence_or_error = Of_sequence[4],
    of_sequence_exn = Of_sequence[5],
    of_sequence_multi = Of_sequence[6];
   function of_list_with_key(list, get_key, compare_key){
    return caml_call1
            (with_return,
             function(r){
              function _ck_(param, data){
               var
                length = param[2],
                t = param[1],
                key = caml_call1(get_key, data),
                acc = set(t, length, key, data, compare_key),
                new_length = acc[2];
               return length === new_length
                       ? caml_call1(r, [0, -1048878709, key])
                       : globalize(acc);
              }
              var
               map =
                 caml_call3
                  (Base_List0[8],
                   list,
                   [0, empty_without_value_restrictio, 0],
                   _ck_);
              return [0, 17724, map];
             });
   }
   function of_list_with_key_or_error(list, get_key, comparator){
    var match = of_list_with_key(list, get_key, comparator[1]);
    if(17724 <= match[1]){var x = match[2]; return [0, x];}
    var key = match[2];
    return caml_call5
            (Base_Or_error[38],
             0,
             0,
             cst_Map_of_list_with_key_or_er,
             key,
             comparator[2]);
   }
   function of_list_with_key_exn(list, get_key, comparator){
    var match = of_list_with_key(list, get_key, comparator[1]);
    if(17724 <= match[1]){var x = match[2]; return x;}
    var
     key = match[2],
     _cj_ =
       caml_call5
        (Base_Error[19],
         0,
         0,
         cst_Map_of_list_with_key_exn_d,
         key,
         comparator[2]);
    return caml_call1(Base_Error[31], _cj_);
   }
   function of_list_with_key_multi(list, get_key, compare_key){
    var list$0 = caml_call1(Base_List0[19], list);
    function _ci_(param, data){
     var length = param[2], t = param[1], key = caml_call1(get_key, data);
     return globalize
             (update
               (t,
                key,
                function(option){
                 var list = caml_call2(Base_Option[30], option, 0);
                 return [0, data, list];
                },
                length,
                compare_key));
    }
    return caml_call3
            (Base_List0[8],
             list$0,
             [0, empty_without_value_restrictio, 0],
             _ci_);
   }
   function of_list_with_key_fold(list, get_key, init, f, compare_key){
    function _ch_(param, data){
     var length = param[2], t = param[1], key = caml_call1(get_key, data);
     return globalize
             (update
               (t,
                key,
                function(param){
                 if(! param) return caml_call2(f, init, data);
                 var prev = param[1];
                 return caml_call2(f, prev, data);
                },
                length,
                compare_key));
    }
    return caml_call3
            (Base_List0[8],
             list,
             [0, empty_without_value_restrictio, 0],
             _ch_);
   }
   function of_list_with_key_reduce(list, get_key, f, compare_key){
    function _cg_(param, data){
     var length = param[2], t = param[1], key = caml_call1(get_key, data);
     return globalize
             (update
               (t,
                key,
                function(param){
                 if(! param) return data;
                 var prev = param[1];
                 return caml_call2(f, prev, data);
                },
                length,
                compare_key));
    }
    return caml_call3
            (Base_List0[8],
             list,
             [0, empty_without_value_restrictio, 0],
             _cg_);
   }
   function for_all(t, f){
    return caml_call1
            (with_return,
             function(r){
              iter
               (t,
                function(data){
                 var _cf_ = 1 - caml_call1(f, data);
                 return _cf_ ? caml_call1(r, 0) : _cf_;
                });
              return 1;
             });
   }
   function for_alli(t, f){
    return caml_call1
            (with_return,
             function(r){
              iteri
               (t,
                function(key, data){
                 var _ce_ = 1 - caml_call2(f, key, data);
                 return _ce_ ? caml_call1(r, 0) : _ce_;
                });
              return 1;
             });
   }
   function exists(t, f){
    return caml_call1
            (with_return,
             function(r){
              iter
               (t,
                function(data){
                 var _cd_ = caml_call1(f, data);
                 return _cd_ ? caml_call1(r, 1) : _cd_;
                });
              return 0;
             });
   }
   function existsi(t, f){
    return caml_call1
            (with_return,
             function(r){
              iteri
               (t,
                function(key, data){
                 var _cc_ = caml_call2(f, key, data);
                 return _cc_ ? caml_call1(r, 1) : _cc_;
                });
              return 0;
             });
   }
   function count(t, f){
    return fold
            (t,
             0,
             function(param, data, acc){
              return caml_call1(f, data)
                      ? caml_call2(Base_Import[91], acc, 1)
                      : acc;
             });
   }
   function counti(t, f){
    return fold
            (t,
             0,
             function(key, data, acc){
              return caml_call2(f, key, data)
                      ? caml_call2(Base_Import[91], acc, 1)
                      : acc;
             });
   }
   function sum(M, t, f){
    function _ca_(param, data, acc){
     var _cb_ = caml_call1(f, data);
     return caml_call2(M[2], _cb_, acc);
    }
    return fold(t, M[1], _ca_);
   }
   function sumi(M, t, f){
    function _b__(key, data, acc){
     var _b$_ = caml_call2(f, key, data);
     return caml_call2(M[2], _b$_, acc);
    }
    return fold(t, M[1], _b__);
   }
   function to_alist(opt, t){
    if(opt) var sth = opt[1], key_order = sth; else var key_order = 608542111;
    return 608542111 <= key_order
            ? fold_right
              (t, 0, function(key, data, x){return [0, [0, key, data], x];})
            : fold
              (t, 0, function(key, data, x){return [0, [0, key, data], x];});
   }
   function merge(t1, t2, f, compare_key){
    var
     _b7_ = length(t2),
     _b8_ = length(t1),
     _b9_ = caml_call2(Base_Import[91], _b8_, _b7_),
     elts = caml_call1(Base_Uniform_array[62], _b9_),
     i = [0, 0];
    iter2
     (t1,
      t2,
      function(key, values){
       var match = caml_call2(f, key, values);
       if(! match) return 0;
       var value = match[1];
       caml_call3(Base_Uniform_array[15], elts, i[1], [0, key, value]);
       i[1]++;
       return 0;
      },
      compare_key);
    var len = i[1];
    function get(i){return caml_call2(Base_Uniform_array[12], elts, i);}
    var tree = of_increasing_iterator_uncheck(len, get);
    return [0, tree, len];
   }
   function merge_large_first
   (length_large, t_large, t_small, call, combine, compare_key){
    return fold
            (t_small,
             [0, t_large, length_large],
             function(key, data, param){
              var length = param[2], t = param[1];
              return globalize
                      (update
                        (t,
                         key,
                         function(param){
                          if(! param) return data;
                          var data$0 = param[1];
                          return caml_call4(call, combine, key, data$0, data);
                         },
                         length,
                         compare_key));
             });
   }
   function call(f, key, x, y){return caml_call3(f, key, x, y);}
   function swap(f, key, x, y){return caml_call3(f, key, y, x);}
   function merge_skewed(t1, t2, length1, length2, combine, compare_key){
    return length2 <= length1
            ? merge_large_first(length1, t1, t2, call, combine, compare_key)
            : merge_large_first(length2, t2, t1, swap, combine, compare_key);
   }
   function merge_disjoint_exn(t1, t2, length1, length2, comparator){
    var _b4_ = comparator[1];
    return merge_skewed
            (t1,
             t2,
             length1,
             length2,
             function(key, param, _b5_){
              var
               _b6_ =
                 caml_call5
                  (Base_Error[19],
                   0,
                   0,
                   cst_Map_merge_disjoint_exn_dup,
                   key,
                   comparator[2]);
              return caml_call1(Base_Error[31], _b6_);
             },
             _b4_);
   }
   function repackage(marker, k, v){return marker ? [0, [0, k, v]] : 0;}
   function closest_key(t$0, dir, k$0, compare_key){
    var t = t$0, found_marker = 0, found_key = 0, found_value = 0;
    for(;;){
     if(typeof t === "number")
      return repackage(found_marker, found_key, found_value);
     if(0 === t[0]) break;
     var
      r = t[4],
      found_value$0 = t[3],
      found_key$0 = t[2],
      l = t[1],
      c$0 = caml_call2(compare_key, found_key$0, k$0);
     if(0 === c$0)
      return -640801497 === dir
              ? is_empty
                 (l)
                ? repackage(found_marker, found_key, found_value)
                : max_elt(l)
              : -779285465
                <= dir
                ? [0, [0, found_key$0, found_value$0]]
                : is_empty
                   (r)
                  ? repackage(found_marker, found_key, found_value)
                  : min_elt(r);
     if(-640801497 !== dir && 927731004 > dir){
      if(0 < c$0){
       var
        t = l,
        found_marker = 1,
        found_key = found_key$0,
        found_value = found_value$0;
       continue;
      }
      var t = r;
      continue;
     }
     if(0 <= c$0)
      var t = l;
     else
      var
       t = r,
       found_marker = 1,
       found_key = found_key$0,
       found_value = found_value$0;
    }
    var
     v = t[2],
     k = t[1],
     c = caml_call2(compare_key, k, k$0),
     _b3_ =
       521507869 <= dir
        ? 927731004 <= dir ? c <= 0 ? 1 : 0 : 0 <= c ? 1 : 0
        : -640801497 <= dir ? c < 0 ? 1 : 0 : 0 < c ? 1 : 0;
    return _b3_
            ? [0, [0, k, v]]
            : repackage(found_marker, found_key, found_value);
   }
   function rank(t, k, compare_key){
    var t$0 = t;
    for(;;){
     if(typeof t$0 === "number") return 0;
     if(0 === t$0[0]){
      var k$0 = t$0[1];
      return 0 === caml_call2(compare_key, k$0, k) ? _s_ : 0;
     }
     var
      r = t$0[4],
      k$1 = t$0[2],
      l = t$0[1],
      c = caml_call2(compare_key, k$1, k);
     if(0 === c) return [0, length(l)];
     if(0 >= c){
      var
       _bZ_ =
         function(rank){
          var _b1_ = length(l), _b2_ = caml_call2(Base_Import[91], rank, 1);
          return caml_call2(Base_Import[91], _b2_, _b1_);
         },
       _b0_ = rank(r, k, compare_key);
      return caml_call2(Base_Option[24], _b0_, _bZ_);
     }
     var t$0 = l;
    }
   }
   function nth(num_to_search, param){
    var param$0 = param;
    for(;;){
     if(typeof param$0 === "number") return 0;
     if(0 === param$0[0]){
      var v = param$0[2], k = param$0[1];
      return 0 === num_to_search[1]
              ? [0, [0, k, v]]
              : (num_to_search[1] += -1, 0);
     }
     var
      r = param$0[4],
      v$0 = param$0[3],
      k$0 = param$0[2],
      l = param$0[1],
      some = nth(num_to_search, l);
     if(some) return some;
     if(0 === num_to_search[1]) return [0, [0, k$0, v$0]];
     num_to_search[1] += -1;
     var param$0 = r;
    }
   }
   function nth$0(t, n){return nth([0, n], t);}
   function find_first_satisfying(t, f){
    var t$0 = t;
    for(;;){
     if(typeof t$0 === "number") return 0;
     if(0 === t$0[0]){
      var v = t$0[2], k = t$0[1];
      return caml_call2(f, k, v) ? [0, [0, k, v]] : 0;
     }
     var r = t$0[4], v$0 = t$0[3], k$0 = t$0[2], l = t$0[1];
     if(caml_call2(f, k$0, v$0)){
      var x = find_first_satisfying(l, f);
      return x ? x : [0, [0, k$0, v$0]];
     }
     var t$0 = r;
    }
   }
   function find_last_satisfying(t, f){
    var t$0 = t;
    for(;;){
     if(typeof t$0 === "number") return 0;
     if(0 === t$0[0]){
      var v = t$0[2], k = t$0[1];
      return caml_call2(f, k, v) ? [0, [0, k, v]] : 0;
     }
     var r = t$0[4], v$0 = t$0[3], k$0 = t$0[2], l = t$0[1];
     if(caml_call2(f, k$0, v$0)){
      var x = find_last_satisfying(r, f);
      return x ? x : [0, [0, k$0, v$0]];
     }
     var t$0 = l;
    }
   }
   function binary_search(t, compare, how, v){
    if(-839473056 <= how)
     return 200870407 <= how
             ? 926943384
               <= how
               ? find_first_satisfying
                 (t,
                  function(key, data){
                   return 0 <= caml_call3(compare, key, data, v) ? 1 : 0;
                  })
               : find_last_satisfying
                 (t,
                  function(key, data){
                   return caml_call3(compare, key, data, v) < 0 ? 1 : 0;
                  })
             : -253007807
               <= how
               ? find_last_satisfying
                 (t,
                  function(key, data){
                   return caml_call3(compare, key, data, v) <= 0 ? 1 : 0;
                  })
               : find_first_satisfying
                 (t,
                  function(key, data){
                   return 0 < caml_call3(compare, key, data, v) ? 1 : 0;
                  });
    if(-1055410545 <= how){
     var
      pair =
        find_last_satisfying
         (t,
          function(key, data){
           return caml_call3(compare, key, data, v) <= 0 ? 1 : 0;
          });
     if(pair){
      var match = pair[1], data = match[2], key = match[1];
      if(0 === caml_call3(compare, key, data, v)) return pair;
     }
     return 0;
    }
    var
     pair$0 =
       find_first_satisfying
        (t,
         function(key, data){
          return 0 <= caml_call3(compare, key, data, v) ? 1 : 0;
         });
    if(pair$0){
     var match$0 = pair$0[1], data$0 = match$0[2], key$0 = match$0[1];
     if(0 === caml_call3(compare, key$0, data$0, v)) return pair$0;
    }
    return 0;
   }
   function binary_search_segmented(t, segment_of, how){
    function is_left(key, data){
     return 847852583 <= caml_call2(segment_of, key, data) ? 1 : 0;
    }
    function is_right(key, data){return 1 - is_left(key, data);}
    return 125585502 <= how
            ? find_last_satisfying(t, is_left)
            : find_first_satisfying(t, is_right);
   }
   function binary_search_one_sided_bound
   (t, maybe_bound, compare, if_exclusive, if_inclusive){
    function find_bound(t, how, bound, compare){
     var match = binary_search(t, compare, how, bound);
     if(! match) return 0;
     var bound$0 = match[1][1];
     return [0, [0, bound$0]];
    }
    if(typeof maybe_bound === "number") return _t_;
    if(0 === maybe_bound[0]){
     var bound = maybe_bound[1];
     return find_bound(t, if_inclusive, bound, compare);
    }
    var bound$0 = maybe_bound[1];
    return find_bound(t, if_exclusive, bound$0, compare);
   }
   function binary_search_two_sided_bounds
   (t, compare, lower_bound, upper_bound){
    var
     match =
       binary_search_one_sided_bound
        (t, lower_bound, compare, -839473056, 926943384);
    if(! match) return 0;
    var
     lower_bound$0 = match[1],
     match$0 =
       binary_search_one_sided_bound
        (t, upper_bound, compare, 200870407, -253007807);
    if(! match$0) return 0;
    var upper_bound$0 = match$0[1];
    return [0, [0, lower_bound$0, upper_bound$0]];
   }
   function of_iteri(iteri, compare_key){
    var acc = [0, 0, [0, empty_without_value_restrictio, 0]];
    caml_call1
     (iteri,
      function(key, data){
       var
        match = acc[2],
        length = match[2],
        map = match[1],
        pair = set(map, length, key, data, compare_key),
        length$0 = pair[2];
       if(length === length$0 && caml_call1(Base_Option[52], acc[1])){acc[1] = [0, key]; return 0;}
       acc[2] = globalize(pair);
       return 0;
      });
    var match = acc[1];
    if(! match) return [0, 17724, acc[2]];
    var key = match[1];
    return [0, -1048878709, key];
   }
   function of_iteri_exn(iteri, comparator){
    var match = of_iteri(iteri, comparator[1]);
    if(17724 <= match[1]){var v = match[2]; return v;}
    var
     key = match[2],
     _bY_ =
       caml_call5
        (Base_Error[19],
         0,
         0,
         cst_Map_of_iteri_exn_duplicate,
         key,
         comparator[2]);
    return caml_call1(Base_Error[31], _bY_);
   }
   function t_of_sexp_direct(key_of_sexp, value_of_sexp, sexp, comparator){
    var
     _bO_ = caml_call2(Base_Import[171], key_of_sexp, value_of_sexp),
     alist = caml_call2(Base_Import[173], _bO_, sexp),
     compare_key = comparator[1],
     match = of_alist(alist, compare_key);
    if(17724 <= match[1]){var v = match[2]; return v;}
    var k = match[2];
    function _bP_(_bX_){return _bX_;}
    function _bQ_(_bW_){return _bW_;}
    var
     _bR_ = caml_call2(Base_Import[171], _bQ_, _bP_),
     alist_sexps = caml_call2(Base_Import[173], _bR_, sexp),
     found_first_k = [0, 0];
    function _bS_(param, _bT_){
     var
      k2_sexp = _bT_[1],
      k2 = param[1],
      _bU_ = 0 === caml_call2(compare_key, k, k2) ? 1 : 0;
     if(_bU_){
      if(found_first_k[1])
       return caml_call2
               (Base_Import[156], cst_Map_t_of_sexp_direct_dupli, k2_sexp);
      found_first_k[1] = 1;
      var _bV_ = 0;
     }
     else
      var _bV_ = _bU_;
     return _bV_;
    }
    caml_call3(Base_List0[13], alist, alist_sexps, _bS_);
    throw caml_maybe_attach_backtrace([0, Assert_failure, _u_], 1);
   }
   function sexp_of_t$1(sexp_of_key, sexp_of_value, t){
    function f(key, data, acc){
     var _bN_ = [0, caml_call1(sexp_of_value, data), 0];
     return [0, [1, [0, caml_call1(sexp_of_key, key), _bN_]], acc];
    }
    return [1, fold_right(t, 0, f)];
   }
   function combine_errors(t, sexp_of_key){
    var
     match = partition_map(t, Base_Result[38]),
     errors = match[2],
     oks = match[1];
    if(is_empty(errors)) return [0, oks];
    var _bM_ = sexp_of_t$1(sexp_of_key, Base_Error[9], errors);
    return caml_call1(Base_Or_error[39], _bM_);
   }
   function unzip(t){
    var _bL_ = map(t, Base_Import[127]);
    return [0, map(t, Base_Import[125]), _bL_];
   }
   function map_keys(t1, f, param){
    var sexp_of_key = param[2], compare_key = param[1];
    return caml_call1
            (with_return,
             function(param){
              return [0,
                      17724,
                      fold
                       (t1,
                        [0, empty_without_value_restrictio, 0],
                        function(key, data, param$0){
                         var
                          length = param$0[2],
                          t2 = param$0[1],
                          key$0 = caml_call1(f, key);
                         try{
                          var
                           _bJ_ =
                             globalize
                              (add_exn_internal
                                (t2, length, key$0, data, compare_key, sexp_of_key));
                          return _bJ_;
                         }
                         catch(_bK_){
                          var _bI_ = caml_wrap_exception(_bK_);
                          if(_bI_ === Duplicate)
                           return caml_call1(param, [0, -1048878709, key$0]);
                          throw caml_maybe_attach_backtrace(_bI_, 0);
                         }
                        })];
             });
   }
   function map_keys_exn(t, f, comparator){
    var match = map_keys(t, f, comparator);
    if(17724 <= match[1]){var result = match[2]; return result;}
    var
     key = match[2],
     sexp_of_key = comparator[2],
     _bG_ = [0, [0, cst_key$0, caml_call1(sexp_of_key, key)], 0],
     _bH_ = caml_call2(Base_Sexp[10], cst_Map_map_keys_exn_duplicate, _bG_);
    return caml_call1(Base_Error[32], _bH_);
   }
   function transpose_keys(outer_comparator, inner_comparator, outer_t){
    return fold
            (outer_t,
             [0, empty_without_value_restrictio, 0],
             function(outer_key, inner_t, acc){
              return fold
                      (inner_t,
                       acc,
                       function(inner_key, data, param){
                        var
                         acc_len = param[2],
                         acc = param[1],
                         _bF_ = inner_comparator[1];
                        return globalize
                                (update
                                  (acc,
                                   inner_key,
                                   function(param){
                                    if(! param) return [0, [0, outer_key, data], 1];
                                    var match = param[1], elt_len = match[2], elt = match[1];
                                    return globalize
                                            (set(elt, elt_len, outer_key, data, outer_comparator[1]));
                                   },
                                   acc_len,
                                   _bF_));
                       });
             });
   }
   function Make_applicative_traversals(A){
    function mapi(t, f){
     if(typeof t === "number") return caml_call1(A[1], 0);
     if(0 === t[0]){
      var
       d = t[2],
       v = t[1],
       _bA_ = function(new_data){return [0, v, new_data];},
       _bB_ = caml_call2(f, v, d);
      return caml_call2(A[2], _bB_, _bA_);
     }
     var h = t[5], r = t[4], d$0 = t[3], v$0 = t[2], l = t[1];
     function _bC_(param){return mapi(l, f);}
     var l$0 = caml_call1(A[14], _bC_), d$1 = caml_call2(f, v$0, d$0);
     function _bD_(param){return mapi(r, f);}
     var r$0 = caml_call1(A[14], _bD_);
     function _bE_(l, d, r){return [1, l, v$0, d, r, h];}
     return caml_call4(A[10], l$0, d$1, r$0, _bE_);
    }
    function filter_mapi(t, f){
     function tree_filter_mapi(t, f){
      if(typeof t === "number") return caml_call1(A[1], [0, 0, 0]);
      if(0 === t[0]){
       var
        d = t[2],
        v = t[1],
        _bo_ =
          function(param){
           if(! param) return [0, 0, 0];
           var new_data = param[1];
           return [0, [0, v, new_data], 1];
          },
        _bp_ = caml_call2(f, v, d);
       return caml_call2(A[2], _bp_, _bo_);
      }
      var r = t[4], d$0 = t[3], v$0 = t[2], l = t[1];
      function _bq_(param, new_data, _bw_){
       var r_len = _bw_[2], r = _bw_[1], l_len = param[2], l = param[1];
       if(new_data){
        var
         new_data$0 = new_data[1],
         _bx_ = caml_call2(Base_Import[91], l_len, r_len),
         _by_ = caml_call2(Base_Import[91], _bx_, 1);
        return [0, join(l, v$0, new_data$0, r), _by_];
       }
       var _bz_ = caml_call2(Base_Import[91], l_len, r_len);
       return [0, concat_and_balance_unchecked(l, r), _bz_];
      }
      function _br_(param){return tree_filter_mapi(r, f);}
      var _bs_ = caml_call1(A[14], _br_), _bt_ = caml_call2(f, v$0, d$0);
      function _bu_(param){return tree_filter_mapi(l, f);}
      var _bv_ = caml_call1(A[14], _bu_);
      return caml_call4(A[10], _bv_, _bt_, _bs_, _bq_);
     }
     return tree_filter_mapi(t, f);
    }
    return [0, mapi, filter_mapi];
   }
   function compare_key(t){return t[1][1];}
   function like(param, _bn_){
    var length = _bn_[2], tree = _bn_[1], comparator = param[1];
    return [0, comparator, tree, length];
   }
   function like_maybe_no_op(old_t, param){
    var
     length = param[2],
     tree = param[1],
     old_tree = old_t[2],
     comparator = old_t[1];
    return old_tree === tree ? old_t : [0, comparator, tree, length];
   }
   function with_same_length(param, tree){
    var length = param[3], comparator = param[1];
    return [0, comparator, tree, length];
   }
   function of_like_tree(t, tree){
    var _bm_ = length(tree);
    return [0, t[1], tree, _bm_];
   }
   function of_like_tree_maybe_no_op(t, tree){
    if(t[2] === tree) return t;
    var _bl_ = length(tree);
    return [0, t[1], tree, _bl_];
   }
   function of_tree$0(comparator, tree){
    return [0, comparator, tree, length(tree)];
   }
   function comparator(t){return t[1];}
   function to_tree(t){return t[2];}
   function invariants$0(t){
    var _bh_ = compare_key(t), _bi_ = invariants(t[2], _bh_);
    if(_bi_)
     var _bj_ = t[3], _bk_ = length(t[2]) === _bj_ ? 1 : 0;
    else
     var _bk_ = _bi_;
    return _bk_;
   }
   function is_empty$0(t){return is_empty(t[2]);}
   function length$0(t){return t[3];}
   function set$0(t, key, data){
    var _bg_ = compare_key(t);
    return like(t, set(t[2], t[3], key, data, _bg_));
   }
   function add_exn$0(t, key, data){
    var _be_ = t[1][2], _bf_ = compare_key(t);
    return like(t, add_exn(t[2], t[3], key, data, _bf_, _be_));
   }
   function add(t, key, data){
    try{
     var
      _ba_ = t[1][2],
      _bb_ = compare_key(t),
      result = like(t, add_exn_internal(t[2], t[3], key, data, _bb_, _ba_));
    }
    catch(_bd_){
     var _bc_ = caml_wrap_exception(_bd_);
     if(_bc_ === Duplicate) return -1024851605;
     throw caml_maybe_attach_backtrace(_bc_, 0);
    }
    return [0, 17724, result];
   }
   function add_multi$0(t, key, data){
    var _a$_ = compare_key(t);
    return like(t, add_multi(t[2], t[3], key, data, _a$_));
   }
   function remove_multi$0(t, key){
    var _a__ = compare_key(t);
    return like(t, remove_multi(t[2], key, t[3], _a__));
   }
   function find_multi$0(t, key){
    var _a9_ = compare_key(t);
    return find_multi(t[2], key, _a9_);
   }
   function change$0(t, key, f){
    var _a8_ = compare_key(t);
    return like(t, change(t[2], key, f, t[3], _a8_));
   }
   function update$0(t, key, f){
    var _a7_ = compare_key(t);
    return like(t, update(t[2], key, f, t[3], _a7_));
   }
   function find_exn$0(t, key){
    var _a5_ = t[1][2], _a6_ = compare_key(t);
    return find_exn(t[2], key, _a6_, _a5_);
   }
   function find$0(t, key){
    var _a4_ = compare_key(t);
    return find(t[2], key, _a4_);
   }
   function remove$0(t, key){
    var _a3_ = compare_key(t);
    return like_maybe_no_op(t, remove(t[2], key, t[3], _a3_));
   }
   function mem$0(t, key){
    var _a2_ = compare_key(t);
    return mem(t[2], key, _a2_);
   }
   function iter_keys$0(t, f){return iter_keys(t[2], f);}
   function iter$0(t, f){return iter(t[2], f);}
   function iteri$0(t, f){return iteri(t[2], f);}
   function iteri_until$0(t, f){return iteri_until(t[2], f);}
   function iter2$0(t1, t2, f){
    var _a1_ = compare_key(t1);
    return iter2(t1[2], t2[2], f, _a1_);
   }
   function map$0(t, f){return with_same_length(t, map(t[2], f));}
   function mapi$0(t, f){return with_same_length(t, mapi(t[2], f));}
   function fold$3(t, init, f){return fold(t[2], init, f);}
   function fold_until$0(t, init, f, finish){
    return fold_until(t[2], init, f, finish);
   }
   function fold_right$0(t, init, f){return fold_right(t[2], init, f);}
   function fold2$1(t1, t2, init, f){
    var _a0_ = compare_key(t1);
    return fold2$0(t1[2], t2[2], init, f, _a0_);
   }
   function filter_keys$0(t, f){
    var len = [0, t[3]], tree = filter_keys(t[2], f, len);
    return like_maybe_no_op(t, [0, tree, len[1]]);
   }
   function filter$0(t, f){
    var len = [0, t[3]], tree = filter(t[2], f, len);
    return like_maybe_no_op(t, [0, tree, len[1]]);
   }
   function filteri$0(t, f){
    var len = [0, t[3]], tree = filteri(t[2], f, len);
    return like_maybe_no_op(t, [0, tree, len[1]]);
   }
   function filter_map$0(t, f){
    var len = [0, t[3]], tree = filter_map(t[2], f, len);
    return like(t, [0, tree, len[1]]);
   }
   function filter_mapi$0(t, f){
    var len = [0, t[3]], tree = filter_mapi(t[2], f, len);
    return like(t, [0, tree, len[1]]);
   }
   function of_like_tree2(t, param){
    var t2 = param[2], t1 = param[1], _aZ_ = of_like_tree(t, t2);
    return [0, of_like_tree(t, t1), _aZ_];
   }
   function of_like_tree2_maybe_no_op(t, param){
    var t2 = param[2], t1 = param[1], _aY_ = of_like_tree_maybe_no_op(t, t2);
    return [0, of_like_tree_maybe_no_op(t, t1), _aY_];
   }
   function partition_mapi$0(t, f){
    return of_like_tree2(t, partition_mapi(t[2], f));
   }
   function partition_map$0(t, f){
    return of_like_tree2(t, partition_map(t[2], f));
   }
   function partitioni_tf$0(t, f){
    return of_like_tree2_maybe_no_op(t, partitioni_tf(t[2], f));
   }
   function partition_tf$0(t, f){
    return of_like_tree2_maybe_no_op(t, partition_tf(t[2], f));
   }
   function combine_errors$0(t){
    function _aV_(_aX_){return of_like_tree(t, _aX_);}
    var _aW_ = combine_errors(t[2], t[1][2]);
    return caml_call2(Base_Or_error[47], _aW_, _aV_);
   }
   function unzip$0(t){return of_like_tree2(t, unzip(t[2]));}
   function compare_direct(compare_data, t1, t2){
    var _aT_ = t2[2], _aU_ = t1[2];
    return compare$1(compare_key(t1), compare_data, _aU_, _aT_);
   }
   function equal$2(compare_data, t1, t2){
    var _aR_ = t2[2], _aS_ = t1[2];
    return equal$1(compare_key(t1), compare_data, _aS_, _aR_);
   }
   function keys$0(t){return keys(t[2]);}
   function data$0(t){return data(t[2]);}
   function to_alist$0(key_order, t){return to_alist(key_order, t[2]);}
   function symmetric_diff$0(t1, t2, data_equal){
    var _aQ_ = compare_key(t1);
    return symmetric_diff(t1[2], t2[2], _aQ_, data_equal);
   }
   function fold_symmetric_diff$0(t1, t2, data_equal, init, f){
    var _aP_ = compare_key(t1);
    return fold_symmetric_diff(t1[2], t2[2], _aP_, data_equal, init, f);
   }
   function merge$0(t1, t2, f){
    var _aO_ = compare_key(t1);
    return like(t1, merge(t1[2], t2[2], f, _aO_));
   }
   function merge_disjoint_exn$0(t1, t2){
    return like(t1, merge_disjoint_exn(t1[2], t2[2], t1[3], t2[3], t1[1]));
   }
   function merge_skewed$0(t1, t2, combine){
    var
     _aM_ = compare_key(t1),
     _aN_ = merge_skewed(t1[2], t2[2], t1[3], t2[3], combine, _aM_),
     t1$0 = t2[3] <= t1[3] ? t1 : t2;
    return like_maybe_no_op(t1$0, _aN_);
   }
   function min_elt$0(t){return min_elt(t[2]);}
   function min_elt_exn$0(t){return min_elt_exn(t[2]);}
   function max_elt$0(t){return max_elt(t[2]);}
   function max_elt_exn$0(t){return max_elt_exn(t[2]);}
   function for_all$0(t, f){return for_all(t[2], f);}
   function for_alli$0(t, f){return for_alli(t[2], f);}
   function exists$0(t, f){return exists(t[2], f);}
   function existsi$0(t, f){return existsi(t[2], f);}
   function count$0(t, f){return count(t[2], f);}
   function counti$0(t, f){return counti(t[2], f);}
   function sum$0(m, t, f){return sum(m, t[2], f);}
   function sumi$0(m, t, f){return sumi(m, t[2], f);}
   function split$0(t, k){
    var
     _aK_ = compare_key(t),
     match = split(t[2], k, _aK_),
     r = match[3],
     maybe = match[2],
     l = match[1],
     comparator = t[1],
     both_len =
       caml_call1(Base_Option[53], maybe)
        ? caml_call2(Base_Import[93], t[3], 1)
        : t[3],
     _aL_ = height(r);
    if(height(l) < _aL_){
     var l$0 = of_tree$0(comparator, l);
     return [0,
             l$0,
             maybe,
             [0, comparator, r, caml_call2(Base_Import[93], both_len, l$0[3])]];
    }
    var r$0 = of_tree$0(comparator, r);
    return [0,
            [0, comparator, l, caml_call2(Base_Import[93], both_len, r$0[3])],
            maybe,
            r$0];
   }
   function split_and_reinsert_boundary$0(t, into, k){
    var
     _aI_ = compare_key(t),
     match = split_and_reinsert_boundary(t[2], into, k, _aI_),
     r = match[2],
     l = match[1],
     comparator = t[1],
     _aJ_ = height(r);
    if(height(l) < _aJ_){
     var l$0 = of_tree$0(comparator, l);
     return [0,
             l$0,
             [0, comparator, r, caml_call2(Base_Import[93], t[3], l$0[3])]];
    }
    var r$0 = of_tree$0(comparator, r);
    return [0,
            [0, comparator, l, caml_call2(Base_Import[93], t[3], r$0[3])],
            r$0];
   }
   function split_le_gt(t, k){
    return split_and_reinsert_boundary$0(t, 847852583, k);
   }
   function split_lt_ge(t, k){
    return split_and_reinsert_boundary$0(t, -57574468, k);
   }
   function subrange(t, lower_bound, upper_bound){
    var
     _aE_ = compare_key(t),
     match = split_range(t[2], lower_bound, upper_bound, _aE_),
     right = match[3],
     mid = match[2],
     left = match[1],
     h_l = height(left),
     h_r = height(right),
     outer_joined_height =
       h_l === h_r
        ? caml_call2(Base_Import[91], h_l, 1)
        : caml_call2(Base_Import[100], h_l, h_r);
    if(outer_joined_height >= height(mid)) return of_tree$0(t[1], mid);
    var
     _aF_ = length(right),
     _aG_ = length(left),
     _aH_ = caml_call2(Base_Import[91], _aG_, _aF_),
     mid_length = caml_call2(Base_Import[93], t[3], _aH_);
    return [0, t[1], mid, mid_length];
   }
   function append$0(lower_part, upper_part){
    var
     _aC_ = compare_key(lower_part),
     match = append(lower_part[2], upper_part[2], _aC_);
    if(typeof match === "number") return 838882908;
    var
     tree = match[2],
     _aD_ = caml_call2(Base_Import[91], lower_part[3], upper_part[3]);
    return [0, 17724, [0, lower_part[1], tree, _aD_]];
   }
   function fold_range_inclusive$0(t, min, max, init, f){
    var _aB_ = compare_key(t);
    return fold_range_inclusive(t[2], min, max, init, f, _aB_);
   }
   function range_to_alist$0(t, min, max){
    var _aA_ = compare_key(t);
    return range_to_alist(t[2], min, max, _aA_);
   }
   function closest_key$0(t, dir, key){
    var _az_ = compare_key(t);
    return closest_key(t[2], dir, key, _az_);
   }
   function nth$1(t, n){return nth$0(t[2], n);}
   function nth_exn(t, n){
    var _ay_ = nth$1(t, n);
    return caml_call4(Base_Option[31], 0, 0, 0, _ay_);
   }
   function rank$0(t, key){
    var _ax_ = compare_key(t);
    return rank(t[2], key, _ax_);
   }
   function sexp_of_t$2(sexp_of_k, sexp_of_v, param, t){return sexp_of_t$1(sexp_of_k, sexp_of_v, t[2]);
   }
   function to_sequence$0
   (order, keys_greater_or_equal_to, keys_less_or_equal_to, t){
    return to_sequence
            (t[1],
             order,
             keys_greater_or_equal_to,
             keys_less_or_equal_to,
             t[2]);
   }
   function binary_search$0(t, compare, how, v){
    return binary_search(t[2], compare, how, v);
   }
   function binary_search_segmented$0(t, segment_of, how){
    return binary_search_segmented(t[2], segment_of, how);
   }
   function hash_fold_direct(hash_fold_key, hash_fold_data, state, t){
    var t$0 = t[2];
    function _av_(key, data, state){
     return caml_call2
             (hash_fold_data, caml_call2(hash_fold_key, state, key), data);
    }
    var _aw_ = length(t$0);
    return fold(t$0, caml_call2(Base_Import[206], state, _aw_), _av_);
   }
   function binary_search_subrange(t, compare, lower_bound, upper_bound){
    var
     match =
       binary_search_two_sided_bounds(t[2], compare, lower_bound, upper_bound);
    if(! match) return like_maybe_no_op(t, [0, 0, 0]);
    var
     match$0 = match[1],
     upper_bound$0 = match$0[2],
     lower_bound$0 = match$0[1];
    return subrange(t, lower_bound$0, upper_bound$0);
   }
   function Make_applicative_traversals$0(A){
    var Tree_traversals = Make_applicative_traversals(A);
    function mapi(t, f){
     function _at_(new_tree){return with_same_length(t, new_tree);}
     var _au_ = Tree_traversals[1].call(null, t[2], f);
     return caml_call2(A[2], _au_, _at_);
    }
    function filter_mapi(t, f){
     function _ar_(new_tree_with_length){
      return like(t, new_tree_with_length);
     }
     var _as_ = Tree_traversals[2].call(null, t[2], f);
     return caml_call2(A[2], _as_, _ar_);
    }
    return [0, , mapi, filter_mapi];
   }
   function empty$0(param){return empty_without_value_restrictio;}
   function of_tree$1(param, tree){return tree;}
   function singleton(param, k, v){return [0, k, v];}
   function of_sorted_array_unchecked$0(comparator, array){
    return of_sorted_array_unchecked(array, comparator[1])[1];
   }
   function of_sorted_array$0(comparator, array){
    var
     _ap_ = of_sorted_array(array, comparator[1]),
     _aq_ = Base_Or_error[47];
    return caml_call2(_aq_, _ap_, function(x){return x[1];});
   }
   function of_alist$0(comparator, alist){
    var d = of_alist(alist, comparator[1]);
    if(17724 > d[1]) return d;
    var tree = d[2][1];
    return [0, 17724, tree];
   }
   function of_alist_or_error$0(comparator, alist){
    var _an_ = of_alist_or_error(alist, comparator), _ao_ = Base_Or_error[47];
    return caml_call2(_ao_, _an_, function(x){return x[1];});
   }
   function of_alist_exn$0(comparator, alist){
    return of_alist_exn(alist, comparator)[1];
   }
   function of_alist_multi$0(comparator, alist){
    return of_alist_multi(alist, comparator[1])[1];
   }
   function of_alist_fold$0(comparator, alist, init, f){
    return of_alist_fold(alist, init, f, comparator[1])[1];
   }
   function of_alist_reduce$0(comparator, alist, f){
    return of_alist_reduce(alist, f, comparator[1])[1];
   }
   function of_iteri$0(comparator, iteri){
    var d = of_iteri(iteri, comparator[1]);
    if(17724 > d[1]) return d;
    var tree = d[2][1];
    return [0, 17724, tree];
   }
   function of_iteri_exn$0(comparator, iteri){
    return of_iteri_exn(iteri, comparator)[1];
   }
   function of_increasing_iterator_uncheck$0(required_by_intf, len, f){return of_increasing_iterator_uncheck(len, f);
   }
   function of_increasing_sequence$0(comparator, seq){
    function _al_(x){return x[1];}
    var _am_ = of_increasing_sequence(seq, comparator[1]);
    return caml_call2(Base_Or_error[47], _am_, _al_);
   }
   function of_sequence$0(comparator, seq){
    var d = of_sequence(seq, comparator[1]);
    if(17724 > d[1]) return d;
    var tree = d[2][1];
    return [0, 17724, tree];
   }
   function of_sequence_or_error$0(comparator, seq){
    var
     _aj_ = of_sequence_or_error(seq, comparator),
     _ak_ = Base_Or_error[47];
    return caml_call2(_ak_, _aj_, function(x){return x[1];});
   }
   function of_sequence_exn$0(comparator, seq){
    return of_sequence_exn(seq, comparator)[1];
   }
   function of_sequence_multi$0(comparator, seq){
    return of_sequence_multi(seq, comparator[1])[1];
   }
   function of_sequence_fold$0(comparator, seq, init, f){
    return of_sequence_fold(seq, init, f, comparator[1])[1];
   }
   function of_sequence_reduce$0(comparator, seq, f){
    return of_sequence_reduce(seq, f, comparator[1])[1];
   }
   function of_list_with_key$0(comparator, list, get_key){
    var d = of_list_with_key(list, get_key, comparator[1]);
    if(17724 > d[1]) return d;
    var tree = d[2][1];
    return [0, 17724, tree];
   }
   function of_list_with_key_or_error$0(comparator, list, get_key){
    var
     _ah_ = of_list_with_key_or_error(list, get_key, comparator),
     _ai_ = Base_Or_error[47];
    return caml_call2(_ai_, _ah_, function(x){return x[1];});
   }
   function of_list_with_key_exn$0(comparator, list, get_key){
    return of_list_with_key_exn(list, get_key, comparator)[1];
   }
   function of_list_with_key_multi$0(comparator, list, get_key){
    return of_list_with_key_multi(list, get_key, comparator[1])[1];
   }
   function of_list_with_key_fold$0(comparator, list, get_key, init, f){
    return of_list_with_key_fold(list, get_key, init, f, comparator[1])[1];
   }
   function of_list_with_key_reduce$0(comparator, list, get_key, f){
    return of_list_with_key_reduce(list, get_key, f, comparator[1])[1];
   }
   function to_tree$0(t){return t;}
   function invariants$1(comparator, t){return invariants(t, comparator[1]);}
   function is_empty$1(t){return is_empty(t);}
   function length$1(t){return length(t);}
   function set$1(comparator, t, key, data){
    return set(t, 0, key, data, comparator[1])[1];
   }
   function add_exn$1(comparator, t, key, data){
    return add_exn(t, 0, key, data, comparator[1], comparator[2])[1];
   }
   function add$0(comparator, t, key, data){
    try{
     var
      _af_ =
        [0,
         17724,
         add_exn_internal(t, 0, key, data, comparator[1], comparator[2])[1]];
     return _af_;
    }
    catch(_ag_){return -1024851605;}
   }
   function add_multi$1(comparator, t, key, data){
    return add_multi(t, 0, key, data, comparator[1])[1];
   }
   function remove_multi$1(comparator, t, key){
    return remove_multi(t, key, 0, comparator[1])[1];
   }
   function find_multi$1(comparator, t, key){
    return find_multi(t, key, comparator[1]);
   }
   function change$1(comparator, t, key, f){
    return change(t, key, f, 0, comparator[1])[1];
   }
   function update$1(comparator, t, key, f){
    return change$1
            (comparator,
             t,
             key,
             function(data){return [0, caml_call1(f, data)];});
   }
   function find_exn$1(comparator, t, key){
    return find_exn(t, key, comparator[1], comparator[2]);
   }
   function find$1(comparator, t, key){return find(t, key, comparator[1]);}
   function remove$1(comparator, t, key){
    return remove(t, key, 0, comparator[1])[1];
   }
   function mem$1(comparator, t, key){return mem(t, key, comparator[1]);}
   function iter_keys$1(t, f){return iter_keys(t, f);}
   function iter$1(t, f){return iter(t, f);}
   function iteri$1(t, f){return iteri(t, f);}
   function iteri_until$1(t, f){return iteri_until(t, f);}
   function iter2$1(comparator, t1, t2, f){
    return iter2(t1, t2, f, comparator[1]);
   }
   function map$1(t, f){return map(t, f);}
   function mapi$1(t, f){return mapi(t, f);}
   function fold$4(t, init, f){return fold(t, init, f);}
   function fold_until$1(t, init, f, finish){return fold_until(t, init, f, finish);
   }
   function fold_right$1(t, init, f){return fold_right(t, init, f);}
   function fold2$2(comparator, t1, t2, init, f){
    return fold2$0(t1, t2, init, f, comparator[1]);
   }
   function filter_keys$1(t, f){return filter_keys(t, f, [0, 0]);}
   function filter$1(t, f){return filter(t, f, [0, 0]);}
   function filteri$1(t, f){return filteri(t, f, [0, 0]);}
   function filter_map$1(t, f){return filter_map(t, f, [0, 0]);}
   function filter_mapi$1(t, f){return filter_mapi(t, f, [0, 0]);}
   function partition_mapi$1(t, f){return partition_mapi(t, f);}
   function partition_map$1(t, f){return partition_map(t, f);}
   function partitioni_tf$1(t, f){return partitioni_tf(t, f);}
   function partition_tf$1(t, f){return partition_tf(t, f);}
   function combine_errors$1(comparator, t){
    return combine_errors(t, comparator[2]);
   }
   function compare_direct$0(comparator, compare_data, t1, t2){return compare$1(comparator[1], compare_data, t1, t2);
   }
   function equal$3(comparator, compare_data, t1, t2){
    return equal$1(comparator[1], compare_data, t1, t2);
   }
   function keys$1(t){return keys(t);}
   function data$1(t){return data(t);}
   function to_alist$1(key_order, t){return to_alist(key_order, t);}
   function symmetric_diff$1(comparator, t1, t2, data_equal){
    return symmetric_diff(t1, t2, comparator[1], data_equal);
   }
   function fold_symmetric_diff$1(comparator, t1, t2, data_equal, init, f){
    return fold_symmetric_diff(t1, t2, comparator[1], data_equal, init, f);
   }
   function merge$1(comparator, t1, t2, f){
    return merge(t1, t2, f, comparator[1])[1];
   }
   function merge_disjoint_exn$1(comparator, t1, t2){
    var _ae_ = length$1(t2);
    return merge_disjoint_exn(t1, t2, length$1(t1), _ae_, comparator)[1];
   }
   function merge_skewed$1(comparator, t1, t2, combine){
    var _ac_ = comparator[1], _ad_ = length$1(t2);
    return merge_skewed(t1, t2, length$1(t1), _ad_, combine, _ac_)[1];
   }
   function min_elt$1(t){return min_elt(t);}
   function min_elt_exn$1(t){return min_elt_exn(t);}
   function max_elt$1(t){return max_elt(t);}
   function max_elt_exn$1(t){return max_elt_exn(t);}
   function for_all$1(t, f){return for_all(t, f);}
   function for_alli$1(t, f){return for_alli(t, f);}
   function exists$1(t, f){return exists(t, f);}
   function existsi$1(t, f){return existsi(t, f);}
   function count$1(t, f){return count(t, f);}
   function counti$1(t, f){return counti(t, f);}
   function sum$1(m, t, f){return sum(m, t, f);}
   function sumi$1(m, t, f){return sumi(m, t, f);}
   function split$1(comparator, t, k){return split(t, k, comparator[1]);}
   function split_le_gt$0(comparator, t, k){
    return split_and_reinsert_boundary(t, 847852583, k, comparator[1]);
   }
   function split_lt_ge$0(comparator, t, k){
    return split_and_reinsert_boundary(t, -57574468, k, comparator[1]);
   }
   function append$1(comparator, lower_part, upper_part){
    return append(lower_part, upper_part, comparator[1]);
   }
   function subrange$0(comparator, t, lower_bound, upper_bound){
    var ret = split_range(t, lower_bound, upper_bound, comparator[1])[2];
    return ret;
   }
   function fold_range_inclusive$1(comparator, t, min, max, init, f){
    return fold_range_inclusive(t, min, max, init, f, comparator[1]);
   }
   function range_to_alist$1(comparator, t, min, max){
    return range_to_alist(t, min, max, comparator[1]);
   }
   function closest_key$1(comparator, t, dir, key){
    return closest_key(t, dir, key, comparator[1]);
   }
   function nth$2(t, n){return nth$0(t, n);}
   function nth_exn$0(t, n){
    var _ab_ = nth$2(t, n);
    return caml_call4(Base_Option[31], 0, 0, 0, _ab_);
   }
   function rank$1(comparator, t, key){return rank(t, key, comparator[1]);}
   function sexp_of_t$3(sexp_of_k, sexp_of_v, param, t){return sexp_of_t$1(sexp_of_k, sexp_of_v, t);
   }
   function t_of_sexp_direct$0(comparator, k_of_sexp, v_of_sexp, sexp){
    return t_of_sexp_direct(k_of_sexp, v_of_sexp, sexp, comparator)[1];
   }
   function to_sequence$1
   (comparator, order, keys_greater_or_equal_to, keys_less_or_equal_to, t){
    return to_sequence
            (comparator,
             order,
             keys_greater_or_equal_to,
             keys_less_or_equal_to,
             t);
   }
   function binary_search$1(param, t, compare, how, v){return binary_search(t, compare, how, v);
   }
   function binary_search_segmented$1(param, t, segment_of, how){return binary_search_segmented(t, segment_of, how);
   }
   function binary_search_subrange$0
   (comparator, t, compare, lower_bound, upper_bound){
    var
     match =
       binary_search_two_sided_bounds(t, compare, lower_bound, upper_bound);
    if(! match) return 0;
    var
     match$0 = match[1],
     upper_bound$0 = match$0[2],
     lower_bound$0 = match$0[1];
    return subrange$0(comparator, t, lower_bound$0, upper_bound$0);
   }
   function map_keys$0(comparator, t, f){
    var dup = map_keys(t, f, comparator);
    if(17724 > dup[1]) return dup;
    var t$0 = dup[2][1];
    return [0, 17724, t$0];
   }
   function map_keys_exn$0(comparator, t, f){
    return map_keys_exn(t, f, comparator)[1];
   }
   function transpose_keys$0(outer_comparator, inner_comparator, t){
    var _aa_ = transpose_keys(outer_comparator, inner_comparator, t)[1];
    return map$1(_aa_, function(x){return x[1];});
   }
   function add_exn$2(t, comparator, key, data){
    var match = max_key(t);
    if(match){
     var prev_key = match[1];
     if(0 <= caml_call2(comparator[1], prev_key, key))
      return caml_call1(Base_Error[32], _v_);
    }
    return add_unchecked(t, key, data);
   }
   function to_tree$1(t){return to_tree_unchecked(t);}
   var Build_increasing = [0, empty, add_exn$2, to_tree$1];
   function empty$1(comparator){
    return [0, comparator, empty_without_value_restrictio, 0];
   }
   function singleton$0(comparator, k, v){return [0, comparator, [0, k, v], 1];
   }
   function of_tree0(comparator, param){
    var length = param[2], tree = param[1];
    return [0, comparator, tree, length];
   }
   function of_tree$2(comparator, tree){
    return of_tree0(comparator, [0, tree, length(tree)]);
   }
   function of_sorted_array_unchecked$1(comparator, array){
    return of_tree0
            (comparator, of_sorted_array_unchecked(array, comparator[1]));
   }
   function of_sorted_array$1(comparator, array){
    function ___(tree){return of_tree0(comparator, tree);}
    var _$_ = of_sorted_array(array, comparator[1]);
    return caml_call2(Base_Or_error[47], _$_, ___);
   }
   function of_alist$1(comparator, alist){
    var z = of_alist(alist, comparator[1]);
    if(17724 > z[1]) return z;
    var match = z[2], length = match[2], tree = match[1];
    return [0, 17724, [0, comparator, tree, length]];
   }
   function of_alist_or_error$1(comparator, alist){
    function _Y_(tree){return of_tree0(comparator, tree);}
    var _Z_ = of_alist_or_error(alist, comparator);
    return caml_call2(Base_Result[33], _Z_, _Y_);
   }
   function of_alist_exn$1(comparator, alist){
    return of_tree0(comparator, of_alist_exn(alist, comparator));
   }
   function of_alist_multi$1(comparator, alist){
    return of_tree0(comparator, of_alist_multi(alist, comparator[1]));
   }
   function of_alist_fold$1(comparator, alist, init, f){
    return of_tree0(comparator, of_alist_fold(alist, init, f, comparator[1]));
   }
   function of_alist_reduce$1(comparator, alist, f){
    return of_tree0(comparator, of_alist_reduce(alist, f, comparator[1]));
   }
   function of_iteri$1(comparator, iteri){
    var z = of_iteri(iteri, comparator[1]);
    if(17724 > z[1]) return z;
    var tree_length = z[2];
    return [0, 17724, of_tree0(comparator, tree_length)];
   }
   function of_iteri_exn$1(comparator, iteri){
    return of_tree0(comparator, of_iteri_exn(iteri, comparator));
   }
   function of_increasing_iterator_uncheck$1(comparator, len, f){
    return of_tree0
            (comparator, [0, of_increasing_iterator_uncheck(len, f), len]);
   }
   function of_increasing_sequence$1(comparator, seq){
    function _W_(x){return of_tree0(comparator, x);}
    var _X_ = of_increasing_sequence(seq, comparator[1]);
    return caml_call2(Base_Or_error[47], _X_, _W_);
   }
   function of_sequence$1(comparator, seq){
    var z = of_sequence(seq, comparator[1]);
    if(17724 > z[1]) return z;
    var match = z[2], length = match[2], tree = match[1];
    return [0, 17724, [0, comparator, tree, length]];
   }
   function of_sequence_or_error$1(comparator, seq){
    function _U_(tree){return of_tree0(comparator, tree);}
    var _V_ = of_sequence_or_error(seq, comparator);
    return caml_call2(Base_Result[33], _V_, _U_);
   }
   function of_sequence_exn$1(comparator, seq){
    return of_tree0(comparator, of_sequence_exn(seq, comparator));
   }
   function of_sequence_multi$1(comparator, seq){
    return of_tree0(comparator, of_sequence_multi(seq, comparator[1]));
   }
   function of_sequence_fold$1(comparator, seq, init, f){
    return of_tree0(comparator, of_sequence_fold(seq, init, f, comparator[1]));
   }
   function of_sequence_reduce$1(comparator, seq, f){
    return of_tree0(comparator, of_sequence_reduce(seq, f, comparator[1]));
   }
   function of_list_with_key$1(comparator, list, get_key){
    var z = of_list_with_key(list, get_key, comparator[1]);
    if(17724 > z[1]) return z;
    var match = z[2], length = match[2], tree = match[1];
    return [0, 17724, [0, comparator, tree, length]];
   }
   function of_list_with_key_or_error$1(comparator, list, get_key){
    function _S_(tree){return of_tree0(comparator, tree);}
    var _T_ = of_list_with_key_or_error(list, get_key, comparator);
    return caml_call2(Base_Result[33], _T_, _S_);
   }
   function of_list_with_key_exn$1(comparator, list, get_key){
    return of_tree0
            (comparator, of_list_with_key_exn(list, get_key, comparator));
   }
   function of_list_with_key_multi$1(comparator, list, get_key){
    return of_tree0
            (comparator, of_list_with_key_multi(list, get_key, comparator[1]));
   }
   function of_list_with_key_fold$1(comparator, list, get_key, init, f){
    return of_tree0
            (comparator,
             of_list_with_key_fold(list, get_key, init, f, comparator[1]));
   }
   function of_list_with_key_reduce$1(comparator, list, get_key, f){
    return of_tree0
            (comparator,
             of_list_with_key_reduce(list, get_key, f, comparator[1]));
   }
   function t_of_sexp_direct$1(comparator, k_of_sexp, v_of_sexp, sexp){
    return of_tree0
            (comparator,
             t_of_sexp_direct(k_of_sexp, v_of_sexp, sexp, comparator));
   }
   function map_keys$1(comparator, t, f){
    var dup = map_keys(t[2], f, comparator);
    if(17724 > dup[1]) return dup;
    var pair = dup[2];
    return [0, 17724, of_tree0(comparator, pair)];
   }
   function map_keys_exn$1(comparator, t, f){
    return of_tree0(comparator, map_keys_exn(t[2], f, comparator));
   }
   function transpose_keys$1(inner_comparator, t){
    var
     outer_comparator = t[1],
     _R_ =
       of_tree0
        (inner_comparator,
         transpose_keys
          (outer_comparator, inner_comparator, map(t[2], to_tree)));
    return map$0(_R_, function(x){return of_tree0(outer_comparator, x);});
   }
   function Empty_without_value_restrictio(K){
    var empty = [0, K[1], empty_without_value_restrictio, 0];
    return [0, empty];
   }
   function comparator_s(t){return caml_call1(Base_Comparator[5], t[1]);}
   var to_comparator = Base_Comparator[4];
   function of_tree$3(m, tree){
    return of_tree$0(caml_call1(to_comparator, m), tree);
   }
   function empty$2(m){return empty$1(caml_call1(to_comparator, m));}
   function singleton$1(m, a){
    var _P_ = caml_call1(to_comparator, m);
    return function(_Q_){return singleton$0(_P_, a, _Q_);};
   }
   function of_alist$2(m, a){
    return of_alist$1(caml_call1(to_comparator, m), a);
   }
   function of_alist_or_error$2(m, a){
    return of_alist_or_error$1(caml_call1(to_comparator, m), a);
   }
   function of_alist_exn$2(m, a){
    return of_alist_exn$1(caml_call1(to_comparator, m), a);
   }
   function of_alist_multi$2(m, a){
    return of_alist_multi$1(caml_call1(to_comparator, m), a);
   }
   function of_alist_fold$2(m, a, init, f){
    return of_alist_fold$1(caml_call1(to_comparator, m), a, init, f);
   }
   function of_alist_reduce$2(m, a, f){
    return of_alist_reduce$1(caml_call1(to_comparator, m), a, f);
   }
   function of_sorted_array_unchecked$2(m, a){
    return of_sorted_array_unchecked$1(caml_call1(to_comparator, m), a);
   }
   function of_sorted_array$2(m, a){
    return of_sorted_array$1(caml_call1(to_comparator, m), a);
   }
   function of_iteri$2(m, iteri){
    return of_iteri$1(caml_call1(to_comparator, m), iteri);
   }
   function of_iteri_exn$2(m, iteri){
    return of_iteri_exn$1(caml_call1(to_comparator, m), iteri);
   }
   function of_increasing_iterator_uncheck$2(m, len, f){
    return of_increasing_iterator_uncheck$1
            (caml_call1(to_comparator, m), len, f);
   }
   function of_increasing_sequence$2(m, seq){
    return of_increasing_sequence$1(caml_call1(to_comparator, m), seq);
   }
   function of_sequence$2(m, s){
    return of_sequence$1(caml_call1(to_comparator, m), s);
   }
   function of_sequence_or_error$2(m, s){
    return of_sequence_or_error$1(caml_call1(to_comparator, m), s);
   }
   function of_sequence_exn$2(m, s){
    return of_sequence_exn$1(caml_call1(to_comparator, m), s);
   }
   function of_sequence_multi$2(m, s){
    return of_sequence_multi$1(caml_call1(to_comparator, m), s);
   }
   function of_sequence_fold$2(m, s, init, f){
    return of_sequence_fold$1(caml_call1(to_comparator, m), s, init, f);
   }
   function of_sequence_reduce$2(m, s, f){
    return of_sequence_reduce$1(caml_call1(to_comparator, m), s, f);
   }
   function of_list_with_key$2(m, l, get_key){
    return of_list_with_key$1(caml_call1(to_comparator, m), l, get_key);
   }
   function of_list_with_key_or_error$2(m, l, get_key){
    return of_list_with_key_or_error$1
            (caml_call1(to_comparator, m), l, get_key);
   }
   function of_list_with_key_exn$2(m, l, get_key){
    return of_list_with_key_exn$1(caml_call1(to_comparator, m), l, get_key);
   }
   function of_list_with_key_multi$2(m, l, get_key){
    return of_list_with_key_multi$1(caml_call1(to_comparator, m), l, get_key);
   }
   function of_list_with_key_fold$2(m, l, get_key, init, f){
    return of_list_with_key_fold$1
            (caml_call1(to_comparator, m), l, get_key, init, f);
   }
   function of_list_with_key_reduce$2(m, l, get_key, f){
    return of_list_with_key_reduce$1
            (caml_call1(to_comparator, m), l, get_key, f);
   }
   function map_keys$2(m, t, f){
    return map_keys$1(caml_call1(to_comparator, m), t, f);
   }
   function map_keys_exn$2(m, t, f){
    return map_keys_exn$1(caml_call1(to_comparator, m), t, f);
   }
   function transpose_keys$2(m, t){
    return transpose_keys$1(caml_call1(to_comparator, m), t);
   }
   function M(K){return [0];}
   function sexp_of_m_t(K, sexp_of_v, t){
    function _O_(param){return _w_;}
    return sexp_of_t$2(K[1], sexp_of_v, _O_, t);
   }
   function m_t_of_sexp(K, v_of_sexp, sexp){
    return t_of_sexp_direct$1(K[2], K[1], v_of_sexp, sexp);
   }
   function m_t_sexp_grammar(K, v_grammar){
    return [5,
            [0,
             Sexplib0_Sexp_grammar[5],
             _z_,
             [2,
              [1,
               [2,
                [0,
                 [5, [0, Sexplib0_Sexp_grammar[6], _y_, K[1]]],
                 [0, [5, [0, Sexplib0_Sexp_grammar[7], _x_, v_grammar]], 0]]]]]]];
   }
   function compare_m_t(param, compare_v, t1, t2){return compare_direct(compare_v, t1, t2);
   }
   function equal_m_t(param, equal_v, t1, t2){return equal$2(equal_v, t1, t2);
   }
   function hash_fold_m_t(K, hash_fold_v, state){
    var _M_ = K[1];
    return function(_N_){
     return hash_fold_direct(_M_, hash_fold_v, state, _N_);};
   }
   var comparator$0 = Base_Comparator[2][1];
   function of_tree$4(tree){return [0, comparator$0, tree, length(tree)];}
   var
    include$1 = Empty_without_value_restrictio(Base_Comparator[2]),
    empty$3 = include$1[1];
   function singleton$2(a){
    return function(_L_){return singleton$0(comparator$0, a, _L_);};
   }
   function of_alist$3(a){return of_alist$1(comparator$0, a);}
   function of_alist_or_error$3(a){
    return of_alist_or_error$1(comparator$0, a);
   }
   function of_alist_exn$3(a){return of_alist_exn$1(comparator$0, a);}
   function of_alist_multi$3(a){return of_alist_multi$1(comparator$0, a);}
   function of_alist_fold$3(a, init, f){
    return of_alist_fold$1(comparator$0, a, init, f);
   }
   function of_alist_reduce$3(a, f){
    return of_alist_reduce$1(comparator$0, a, f);
   }
   function of_sorted_array_unchecked$3(a){
    return of_sorted_array_unchecked$1(comparator$0, a);
   }
   function of_sorted_array$3(a){return of_sorted_array$1(comparator$0, a);}
   function of_iteri$3(iteri){return of_iteri$1(comparator$0, iteri);}
   function of_iteri_exn$3(iteri){return of_iteri_exn$1(comparator$0, iteri);}
   function of_increasing_iterator_uncheck$3(len, f){
    return of_increasing_iterator_uncheck$1(comparator$0, len, f);
   }
   function of_increasing_sequence$3(seq){
    return of_increasing_sequence$1(comparator$0, seq);
   }
   function of_sequence$3(s){return of_sequence$1(comparator$0, s);}
   function of_sequence_or_error$3(s){
    return of_sequence_or_error$1(comparator$0, s);
   }
   function of_sequence_exn$3(s){return of_sequence_exn$1(comparator$0, s);}
   function of_sequence_multi$3(s){
    return of_sequence_multi$1(comparator$0, s);
   }
   function of_sequence_fold$3(s, init, f){
    return of_sequence_fold$1(comparator$0, s, init, f);
   }
   function of_sequence_reduce$3(s, f){
    return of_sequence_reduce$1(comparator$0, s, f);
   }
   function of_list_with_key$3(l, get_key){
    return of_list_with_key$1(comparator$0, l, get_key);
   }
   function of_list_with_key_or_error$3(l, get_key){
    return of_list_with_key_or_error$1(comparator$0, l, get_key);
   }
   function of_list_with_key_exn$3(l, get_key){
    return of_list_with_key_exn$1(comparator$0, l, get_key);
   }
   function of_list_with_key_multi$3(l, get_key){
    return of_list_with_key_multi$1(comparator$0, l, get_key);
   }
   function of_list_with_key_fold$3(l, get_key, init, f){
    return of_list_with_key_fold$1(comparator$0, l, get_key, init, f);
   }
   function of_list_with_key_reduce$3(l, get_key, f){
    return of_list_with_key_reduce$1(comparator$0, l, get_key, f);
   }
   function map_keys$3(t, f){return map_keys$1(comparator$0, t, f);}
   function map_keys_exn$3(t, f){return map_keys_exn$1(comparator$0, t, f);}
   function transpose_keys$3(t){return transpose_keys$1(comparator$0, t);}
   var
    _A_ =
      [0,
       empty$3,
       singleton$2,
       map_keys$3,
       map_keys_exn$3,
       transpose_keys$3,
       of_sorted_array$3,
       of_sorted_array_unchecked$3,
       of_increasing_iterator_uncheck$3,
       of_alist$3,
       of_alist_or_error$3,
       of_alist_exn$3,
       of_alist_multi$3,
       of_alist_fold$3,
       of_alist_reduce$3,
       of_increasing_sequence$3,
       of_sequence$3,
       of_sequence_or_error$3,
       of_sequence_exn$3,
       of_sequence_multi$3,
       of_sequence_fold$3,
       of_sequence_reduce$3,
       of_list_with_key$3,
       of_list_with_key_or_error$3,
       of_list_with_key_exn$3,
       of_list_with_key_multi$3,
       of_list_with_key_fold$3,
       of_list_with_key_reduce$3,
       of_iteri$3,
       of_iteri_exn$3,
       of_tree$4,
       invariants$0,
       is_empty$0,
       length$0,
       add,
       add_exn$0,
       set$0,
       add_multi$0,
       remove_multi$0,
       find_multi$0,
       change$0,
       update$0,
       find$0,
       find_exn$0,
       remove$0,
       mem$0,
       iter_keys$0,
       iter$0,
       iteri$0,
       iteri_until$0,
       iter2$0,
       map$0,
       mapi$0,
       fold$3,
       fold_until$0,
       fold_right$0,
       fold2$1,
       filter_keys$0,
       filter$0,
       filteri$0,
       filter_map$0,
       filter_mapi$0,
       partition_mapi$0,
       partition_map$0,
       partitioni_tf$0,
       partition_tf$0,
       combine_errors$0,
       unzip$0,
       compare_direct,
       equal$2,
       keys$0,
       data$0,
       to_alist$0,
       merge$0,
       merge_disjoint_exn$0,
       merge_skewed$0,
       symmetric_diff$0,
       fold_symmetric_diff$0,
       min_elt$0,
       min_elt_exn$0,
       max_elt$0,
       max_elt_exn$0,
       for_all$0,
       for_alli$0,
       exists$0,
       existsi$0,
       count$0,
       counti$0,
       sum$0,
       sumi$0,
       split$0,
       split_le_gt,
       split_lt_ge,
       append$0,
       subrange,
       fold_range_inclusive$0,
       range_to_alist$0,
       closest_key$0,
       nth$1,
       nth_exn,
       rank$0,
       to_tree,
       to_sequence$0,
       binary_search$0,
       binary_search_segmented$0,
       binary_search_subrange,
       function(_J_){
        var _K_ = Make_applicative_traversals$0(_J_);
        return [0, _K_[2], _K_[3]];
       }];
   function _B_(_H_){
    var _I_ = Make_applicative_traversals$0(_H_);
    return [0, _I_[2], _I_[3]];
   }
   var
    _C_ =
      [0,
       sexp_of_t$2,
       t_of_sexp_direct$1,
       [0,
        sexp_of_t$3,
        t_of_sexp_direct$0,
        empty$0,
        singleton,
        map_keys$0,
        map_keys_exn$0,
        transpose_keys$0,
        of_sorted_array$0,
        of_sorted_array_unchecked$0,
        of_increasing_iterator_uncheck$0,
        of_alist$0,
        of_alist_or_error$0,
        of_alist_exn$0,
        of_alist_multi$0,
        of_alist_fold$0,
        of_alist_reduce$0,
        of_increasing_sequence$0,
        of_sequence$0,
        of_sequence_or_error$0,
        of_sequence_exn$0,
        of_sequence_multi$0,
        of_sequence_fold$0,
        of_sequence_reduce$0,
        of_list_with_key$0,
        of_list_with_key_or_error$0,
        of_list_with_key_exn$0,
        of_list_with_key_multi$0,
        of_list_with_key_fold$0,
        of_list_with_key_reduce$0,
        of_iteri$0,
        of_iteri_exn$0,
        of_tree$1,
        invariants$1,
        is_empty$1,
        length$1,
        add$0,
        add_exn$1,
        set$1,
        add_multi$1,
        remove_multi$1,
        find_multi$1,
        change$1,
        update$1,
        find$1,
        find_exn$1,
        remove$1,
        mem$1,
        iter_keys$1,
        iter$1,
        iteri$1,
        iteri_until$1,
        iter2$1,
        map$1,
        mapi$1,
        fold$4,
        fold_until$1,
        fold_right$1,
        fold2$2,
        filter_keys$1,
        filter$1,
        filteri$1,
        filter_map$1,
        filter_mapi$1,
        partition_mapi$1,
        partition_map$1,
        partitioni_tf$1,
        partition_tf$1,
        combine_errors$1,
        unzip,
        compare_direct$0,
        equal$3,
        keys$1,
        data$1,
        to_alist$1,
        merge$1,
        merge_disjoint_exn$1,
        merge_skewed$1,
        symmetric_diff$1,
        fold_symmetric_diff$1,
        min_elt$1,
        min_elt_exn$1,
        max_elt$1,
        max_elt_exn$1,
        for_all$1,
        for_alli$1,
        exists$1,
        existsi$1,
        count$1,
        counti$1,
        sum$1,
        sumi$1,
        split$1,
        split_le_gt$0,
        split_lt_ge$0,
        append$1,
        subrange$0,
        fold_range_inclusive$1,
        range_to_alist$1,
        closest_key$1,
        nth$2,
        nth_exn$0,
        rank$1,
        to_tree$0,
        to_sequence$1,
        binary_search$1,
        binary_search_segmented$1,
        binary_search_subrange$0,
        function(A){
         var Tree0_traversals = Make_applicative_traversals(A);
         function mapi(t, f){return Tree0_traversals[1].call(null, t, f);}
         function filter_mapi(t, f){
          function _F_(x){return x[1];}
          var _G_ = Tree0_traversals[2].call(null, t, f);
          return caml_call2(A[2], _G_, _F_);
         }
         return [0, mapi, filter_mapi];
        },
        empty_without_value_restrictio,
        Build_increasing],
       empty$1,
       singleton$0,
       map_keys$1,
       map_keys_exn$1,
       transpose_keys$1,
       of_sorted_array$1,
       of_sorted_array_unchecked$1,
       of_increasing_iterator_uncheck$1,
       of_alist$1,
       of_alist_or_error$1,
       of_alist_exn$1,
       of_alist_multi$1,
       of_alist_fold$1,
       of_alist_reduce$1,
       of_increasing_sequence$1,
       of_sequence$1,
       of_sequence_or_error$1,
       of_sequence_exn$1,
       of_sequence_multi$1,
       of_sequence_fold$1,
       of_sequence_reduce$1,
       of_list_with_key$1,
       of_list_with_key_or_error$1,
       of_list_with_key_exn$1,
       of_list_with_key_multi$1,
       of_list_with_key_fold$1,
       of_list_with_key_reduce$1,
       of_iteri$1,
       of_iteri_exn$1,
       of_tree$2,
       invariants$0,
       is_empty$0,
       length$0,
       add,
       add_exn$0,
       set$0,
       add_multi$0,
       remove_multi$0,
       find_multi$0,
       change$0,
       update$0,
       find$0,
       find_exn$0,
       remove$0,
       mem$0,
       iter_keys$0,
       iter$0,
       iteri$0,
       iteri_until$0,
       iter2$0,
       map$0,
       mapi$0,
       fold$3,
       fold_until$0,
       fold_right$0,
       fold2$1,
       filter_keys$0,
       filter$0,
       filteri$0,
       filter_map$0,
       filter_mapi$0,
       partition_mapi$0,
       partition_map$0,
       partitioni_tf$0,
       partition_tf$0,
       combine_errors$0,
       unzip$0,
       compare_direct,
       equal$2,
       keys$0,
       data$0,
       to_alist$0,
       merge$0,
       merge_disjoint_exn$0,
       merge_skewed$0,
       symmetric_diff$0,
       fold_symmetric_diff$0,
       min_elt$0,
       min_elt_exn$0,
       max_elt$0,
       max_elt_exn$0,
       for_all$0,
       for_alli$0,
       exists$0,
       existsi$0,
       count$0,
       counti$0,
       sum$0,
       sumi$0,
       split$0,
       split_le_gt,
       split_lt_ge,
       append$0,
       subrange,
       fold_range_inclusive$0,
       range_to_alist$0,
       closest_key$0,
       nth$1,
       nth_exn,
       rank$0,
       to_tree,
       to_sequence$0,
       binary_search$0,
       binary_search_segmented$0,
       binary_search_subrange,
       _B_,
       comparator,
       hash_fold_direct,
       Empty_without_value_restrictio],
    Base_Map =
      [0,
       Finished_or_unfinished,
       Merge_element,
       invariants$0,
       comparator_s,
       comparator,
       empty$2,
       singleton$1,
       of_alist$2,
       of_alist_or_error$2,
       of_alist_exn$2,
       of_alist_multi$2,
       of_alist_fold$2,
       of_alist_reduce$2,
       of_iteri$2,
       of_iteri_exn$2,
       of_sorted_array$2,
       of_sorted_array_unchecked$2,
       of_increasing_iterator_uncheck$2,
       of_increasing_sequence$2,
       of_sequence$2,
       of_sequence_or_error$2,
       of_sequence_exn$2,
       of_sequence_multi$2,
       of_sequence_fold$2,
       of_sequence_reduce$2,
       of_list_with_key$2,
       of_list_with_key_or_error$2,
       of_list_with_key_exn$2,
       of_list_with_key_multi$2,
       of_list_with_key_fold$2,
       of_list_with_key_reduce$2,
       is_empty$0,
       length$0,
       set$0,
       add,
       add_exn$0,
       add_multi$0,
       remove_multi$0,
       find_multi$0,
       change$0,
       update$0,
       find$0,
       find_exn$0,
       remove$0,
       mem$0,
       iter_keys$0,
       iter$0,
       iteri$0,
       iteri_until$0,
       iter2$0,
       map$0,
       mapi$0,
       map_keys$2,
       map_keys_exn$2,
       fold$3,
       fold_until$0,
       fold_right$0,
       fold2$1,
       filter_keys$0,
       filter$0,
       filteri$0,
       filter_map$0,
       filter_mapi$0,
       partition_mapi$0,
       partition_map$0,
       partitioni_tf$0,
       partition_tf$0,
       combine_errors$0,
       unzip$0,
       compare_direct,
       hash_fold_direct,
       equal$2,
       keys$0,
       data$0,
       to_alist$0,
       merge$0,
       merge_disjoint_exn$0,
       merge_skewed$0,
       Symmetric_diff_element,
       symmetric_diff$0,
       fold_symmetric_diff$0,
       min_elt$0,
       min_elt_exn$0,
       max_elt$0,
       max_elt_exn$0,
       transpose_keys$2,
       for_all$0,
       for_alli$0,
       exists$0,
       existsi$0,
       count$0,
       counti$0,
       sum$0,
       sumi$0,
       split$0,
       split_le_gt,
       split_lt_ge,
       append$0,
       subrange,
       fold_range_inclusive$0,
       range_to_alist$0,
       closest_key$0,
       nth$1,
       nth_exn,
       rank$0,
       to_sequence$0,
       binary_search$0,
       binary_search_segmented$0,
       binary_search_subrange,
       function(_D_){
        var _E_ = Make_applicative_traversals$0(_D_);
        return [0, _E_[2], _E_[3]];
       },
       M,
       sexp_of_m_t,
       m_t_of_sexp,
       m_t_sexp_grammar,
       compare_m_t,
       equal_m_t,
       hash_fold_m_t,
       _C_,
       _A_,
       of_tree$3,
       to_tree];
   runtime.caml_register_global(67, Base_Map, "Base__Map");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Linked_queue0
//# unitInfo: Requires: Stdlib__Queue
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Queue = global_data.Stdlib__Queue,
    create = Stdlib_Queue[2],
    clear = Stdlib_Queue[11],
    copy = Stdlib_Queue[12],
    is_empty = Stdlib_Queue[13],
    length = Stdlib_Queue[14],
    peek = Stdlib_Queue[8],
    pop = Stdlib_Queue[7],
    push = Stdlib_Queue[4],
    transfer = Stdlib_Queue[17];
   function iter(t, f){
    var caml_iter = Stdlib_Queue[15];
    return caml_call2(caml_iter, f, t);
   }
   function fold(t, init, f){
    var caml_fold = Stdlib_Queue[16];
    return caml_call3(caml_fold, f, init, t);
   }
   var
    Base_Linked_queue0 =
      [0,
       create,
       clear,
       copy,
       is_empty,
       length,
       peek,
       pop,
       push,
       transfer,
       iter,
       fold];
   runtime.caml_register_global(1, Base_Linked_queue0, "Base__Linked_queue0");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Linked_queue
//# unitInfo: Requires: Base__Array, Base__Import, Base__Indexed_container, Base__Linked_queue0, Base__List, Sexplib0__Sexp_grammar
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_List = global_data.Base__List,
    Sexplib0_Sexp_grammar = global_data.Sexplib0__Sexp_grammar,
    Base_Import = global_data.Base__Import,
    Base_Array = global_data.Base__Array,
    Base_Linked_queue0 = global_data.Base__Linked_queue0,
    Base_Indexed_container = global_data.Base__Indexed_container,
    create = Base_Linked_queue0[1],
    clear = Base_Linked_queue0[2],
    copy = Base_Linked_queue0[3],
    is_empty = Base_Linked_queue0[4],
    length = Base_Linked_queue0[5],
    iter = Base_Linked_queue0[10],
    fold = Base_Linked_queue0[11];
   function enqueue(t, x){return caml_call2(Base_Linked_queue0[8], x, t);}
   function dequeue(t){
    return caml_call1(is_empty, t)
            ? 0
            : [0, caml_call1(Base_Linked_queue0[7], t)];
   }
   var dequeue_exn = Base_Linked_queue0[7];
   function dequeue_and_ignore_exn(t){caml_call1(dequeue_exn, t); return 0;}
   function peek(t){
    return caml_call1(is_empty, t)
            ? 0
            : [0, caml_call1(Base_Linked_queue0[6], t)];
   }
   var peek_exn = Base_Linked_queue0[6];
   function drain(t, f, while$0){
    for(;;){
     if
      (!
       caml_call1(is_empty, t)
       && caml_call1(while$0, caml_call1(peek_exn, t))){
      caml_call1(f, caml_call1(dequeue_exn, t));
      continue;
     }
     return 0;
    }
   }
   var
    iter$0 = [0, -198771759, iter],
    length$0 = [0, -198771759, length],
    C =
      caml_call1
       (Base_Indexed_container[8],
        [0, fold, iter$0, length$0, -304398144, -304398144]),
    count = C[10],
    exists = C[8],
    find = C[12],
    find_map = C[13],
    fold_result = C[6],
    fold_until = C[7],
    for_all = C[9],
    max_elt = C[17],
    mem = C[1],
    min_elt = C[16],
    sum = C[11],
    to_list = C[14],
    counti = C[22],
    existsi = C[20],
    find_mapi = C[24],
    findi = C[23],
    foldi = C[18],
    for_alli = C[21],
    iteri = C[19];
   function transfer(src, dst){
    return caml_call2(Base_Linked_queue0[9], src, dst);
   }
   function concat_map(t, f){
    var res = caml_call1(create, 0);
    caml_call2
     (iter,
      t,
      function(a){
       function _o_(b){return enqueue(res, b);}
       var _p_ = caml_call1(f, a);
       return caml_call2(Base_List[19], _p_, _o_);
      });
    return res;
   }
   function concat_mapi(t, f){
    var res = caml_call1(create, 0);
    caml_call2
     (iteri,
      t,
      function(i, a){
       function _m_(b){return enqueue(res, b);}
       var _n_ = caml_call2(f, i, a);
       return caml_call2(Base_List[19], _n_, _m_);
      });
    return res;
   }
   function filter_map(t, f){
    var res = caml_call1(create, 0);
    caml_call2
     (iter,
      t,
      function(a){
       var match = caml_call1(f, a);
       if(! match) return 0;
       var b = match[1];
       return enqueue(res, b);
      });
    return res;
   }
   function filter_mapi(t, f){
    var res = caml_call1(create, 0);
    caml_call2
     (iteri,
      t,
      function(i, a){
       var match = caml_call2(f, i, a);
       if(! match) return 0;
       var b = match[1];
       return enqueue(res, b);
      });
    return res;
   }
   function filter(t, f){
    var res = caml_call1(create, 0);
    caml_call2
     (iter,
      t,
      function(a){
       var _l_ = caml_call1(f, a);
       return _l_ ? enqueue(res, a) : _l_;
      });
    return res;
   }
   function filteri(t, f){
    var res = caml_call1(create, 0);
    caml_call2
     (iteri,
      t,
      function(i, a){
       var _k_ = caml_call2(f, i, a);
       return _k_ ? enqueue(res, a) : _k_;
      });
    return res;
   }
   function map(t, f){
    var res = caml_call1(create, 0);
    caml_call2(iter, t, function(a){return enqueue(res, caml_call1(f, a));});
    return res;
   }
   function mapi(t, f){
    var res = caml_call1(create, 0);
    caml_call2
     (iteri, t, function(i, a){return enqueue(res, caml_call2(f, i, a));});
    return res;
   }
   function filter_inplace(q, f){
    var q$0 = filter(q, f);
    caml_call1(clear, q);
    return transfer(q$0, q);
   }
   function filteri_inplace(q, f){
    var q$0 = filteri(q, f);
    caml_call1(clear, q);
    return transfer(q$0, q);
   }
   function enqueue_all(t, list){
    function _j_(x){return enqueue(t, x);}
    return caml_call2(Base_List[19], list, _j_);
   }
   function of_list(list){
    var t = caml_call1(create, 0);
    function _i_(x){return enqueue(t, x);}
    caml_call2(Base_List[19], list, _i_);
    return t;
   }
   function of_array(array){
    var t = caml_call1(create, 0);
    function _h_(x){return enqueue(t, x);}
    caml_call2(Base_Array[20], array, _h_);
    return t;
   }
   function init(len, f){
    var
     t = caml_call1(create, 0),
     _f_ = caml_call2(Base_Import[93], len, 1),
     _e_ = 0;
    if(_f_ >= 0){
     var i = _e_;
     for(;;){
      enqueue(t, caml_call1(f, i));
      var _g_ = i + 1 | 0;
      if(_f_ === i) break;
      var i = _g_;
     }
    }
    return t;
   }
   function to_array(t){
    var len = caml_call1(length, t);
    if(0 === len) return [0];
    var
     _c_ = caml_call1(peek_exn, t),
     arr = caml_call2(Base_Array[48], len, _c_),
     i = [0, 0];
    caml_call2
     (iter,
      t,
      function(v){
       var _d_ = i[1];
       runtime.caml_check_bound(arr, _d_)[1 + _d_] = v;
       i[1]++;
       return 0;
      });
    return arr;
   }
   function t_of_sexp(a_of_sexp, sexp){
    return of_list(caml_call2(Base_Import[173], a_of_sexp, sexp));
   }
   function sexp_of_t(sexp_of_a, t){
    var _b_ = caml_call1(to_list, t);
    return caml_call2(Base_Import[149], sexp_of_a, _b_);
   }
   function t_sexp_grammar(grammar){
    var _a_ = caml_call1(Base_List[7], grammar);
    return caml_call1(Sexplib0_Sexp_grammar[1], _a_);
   }
   function singleton(a){
    var t = caml_call1(create, 0);
    enqueue(t, a);
    return t;
   }
   var
    Base_Linked_queue =
      [0,
       t_of_sexp,
       sexp_of_t,
       t_sexp_grammar,
       mem,
       length,
       is_empty,
       iter,
       fold,
       fold_result,
       fold_until,
       exists,
       for_all,
       count,
       sum,
       find,
       find_map,
       to_list,
       to_array,
       min_elt,
       max_elt,
       foldi,
       iteri,
       existsi,
       for_alli,
       counti,
       findi,
       find_mapi,
       singleton,
       of_list,
       of_array,
       init,
       enqueue,
       enqueue_all,
       dequeue,
       dequeue_exn,
       dequeue_and_ignore_exn,
       drain,
       peek,
       peek_exn,
       clear,
       copy,
       map,
       mapi,
       concat_map,
       concat_mapi,
       filter_map,
       filter_mapi,
       filter,
       filteri,
       filter_inplace,
       filteri_inplace,
       create,
       transfer];
   runtime.caml_register_global(6, Base_Linked_queue, "Base__Linked_queue");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Int64
//# unitInfo: Requires: Base__Comparable, Base__Comparator, Base__Error, Base__Float0, Base__Import, Base__Int_conversions, Base__Int_math, Base__Int_string_conversions, Base__Or_error, Base__Popcount, Base__Pretty_printer, Base__Printf, Base__Sexp, Stdlib__Int64, Stdlib__Scanf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$1 = "",
    cst_Lx = "%Lx",
    cst_argument_must_be_strictly_ = "argument must be strictly positive",
    caml_equal = runtime.caml_equal,
    caml_greaterthan = runtime.caml_greaterthan,
    caml_int64_add = runtime.caml_int64_add,
    caml_int64_and = runtime.caml_int64_and,
    caml_int64_bswap = runtime.caml_int64_bswap,
    caml_int64_compare = runtime.caml_int64_compare,
    caml_int64_neg = runtime.caml_int64_neg,
    caml_int64_of_float = runtime.caml_int64_of_float,
    caml_int64_of_int32 = runtime.caml_int64_of_int32,
    caml_int64_or = runtime.caml_int64_or,
    caml_int64_shift_right_unsigne = runtime.caml_int64_shift_right_unsigned,
    caml_int64_sub = runtime.caml_int64_sub,
    caml_lessequal = runtime.caml_lessequal,
    caml_lessthan = runtime.caml_lessthan,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$0 = cst$1,
    cst = cst$1,
    module_name = "Base.Int64.Hex",
    module_name$0 = "Base.Int64",
    Stdlib_Scanf = global_data.Stdlib__Scanf,
    Base_Printf = global_data.Base__Printf,
    Stdlib_Int64 = global_data.Stdlib__Int64,
    Base_Import = global_data.Base__Import,
    Base_Sexp = global_data.Base__Sexp,
    Base_Or_error = global_data.Base__Or_error,
    Assert_failure = global_data.Assert_failure,
    Base_Float0 = global_data.Base__Float0,
    Base_Comparator = global_data.Base__Comparator,
    Base_Int_math = global_data.Base__Int_math,
    Base_Comparable = global_data.Base__Comparable,
    Base_Popcount = global_data.Base__Popcount,
    Base_Int_conversions = global_data.Base__Int_conversions,
    Base_Error = global_data.Base__Error,
    Base_Int_string_conversions = global_data.Base__Int_string_conversions,
    Base_Pretty_printer = global_data.Base__Pretty_printer,
    globalize = Base_Import[286],
    hash_fold_t = Base_Import[203],
    func = Base_Import[217],
    _e_ = [0, [7, 6, 0, 0, 0], cst_Lx],
    _d_ = [0, [7, 6, 0, 0, 0], cst_Lx],
    cst_Int64_ceil_log2_got_invali = "[Int64.ceil_log2] got invalid input",
    cst_Int64_floor_log2_got_inval = "[Int64.floor_log2] got invalid input",
    _c_ =
      [0,
       [11, cst_argument_must_be_strictly_, 0],
       cst_argument_must_be_strictly_],
    cst_max = "max",
    cst_min = "min",
    cst_clamp_requires_min_max = "clamp requires [min <= max]",
    _b_ = [0, "src/int64.ml", 115, 2],
    _a_ =
      [0,
       [11,
        "Int64.of_float: argument (",
        [8, [0, 0, 0], 0, 0, [11, ") is out of range or NaN", 0]]],
       "Int64.of_float: argument (%f) is out of range or NaN"];
   function hash(x){return caml_call1(func, x);}
   var
    t_of_sexp = Base_Import[166],
    sexp_of_t = Base_Import[142],
    t_sexp_grammar = Base_Import[188],
    hashable = [0, hash, Stdlib_Int64[15], sexp_of_t];
   function compare(_I_, _H_){return caml_int64_compare(_I_, _H_);}
   var
    to_string = Stdlib_Int64[14],
    of_string = runtime.caml_int64_of_string,
    of_string_opt = Stdlib_Int64[13],
    include = caml_call1(Base_Comparator[7], [0, compare, sexp_of_t]),
    comparator = include[1],
    float_lower_bound = caml_call1(Base_Float0[26], 64),
    float_upper_bound = caml_call1(Base_Float0[24], 64),
    shift_right_logical = caml_int64_shift_right_unsigne,
    shift_right = runtime.caml_int64_shift_right,
    shift_left = runtime.caml_int64_shift_left,
    bit_not = Stdlib_Int64[11],
    bit_xor = runtime.caml_int64_xor,
    bit_or = caml_int64_or,
    bit_and = caml_int64_and,
    min_value = Stdlib_Int64[10],
    max_value = Stdlib_Int64[9],
    abs = Stdlib_Int64[8],
    pred = Stdlib_Int64[7],
    succ = Stdlib_Int64[6],
    symbol = Base_Int_math[2][2],
    rem = runtime.caml_int64_mod,
    neg = caml_int64_neg,
    minus_one = Stdlib_Int64[3],
    one = Stdlib_Int64[2],
    zero = Stdlib_Int64[1],
    to_float = runtime.caml_int64_to_float,
    of_float_unchecked = caml_int64_of_float,
    num_bits = 64;
   function of_float(f){
    if(float_lower_bound <= f && f <= float_upper_bound)
     return caml_int64_of_float(f);
    var _G_ = caml_call1(Base_Float0[29], f);
    return caml_call3(Base_Printf[7], _a_, _G_, 0);
   }
   function bswap16(x){
    return caml_int64_shift_right_unsigne(caml_int64_bswap(x), 48);
   }
   function bswap32(x){
    return caml_int64_shift_right_unsigne(caml_int64_bswap(x), 32);
   }
   function bswap48(x){
    return caml_int64_shift_right_unsigne(caml_int64_bswap(x), 16);
   }
   var
    include$0 = caml_call1(Base_Comparable[14], [0, compare, sexp_of_t, zero]),
    is_positive = include$0[1],
    is_non_negative = include$0[2],
    is_negative = include$0[3],
    is_non_positive = include$0[4],
    sign = include$0[5];
   function invariant(param){return 0;}
   function between(t, low, high){
    var
     _E_ = caml_lessequal(low, t),
     _F_ = _E_ ? caml_lessequal(t, high) : _E_;
    return _F_;
   }
   function clamp_unchecked(t, min, max){
    var _D_ = caml_call2(Base_Import[103][4], t, max);
    return caml_call1(caml_call1(Base_Import[103][3], min), _D_);
   }
   function clamp_exn(t, min, max){
    if(caml_lessequal(min, max)) return clamp_unchecked(t, min, max);
    throw caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1);
   }
   function clamp(t, min, max){
    if(! caml_greaterthan(min, max)) return [0, clamp_unchecked(t, min, max)];
    var
     _A_ = [0, [0, cst_max, caml_call1(sexp_of_t, max)], 0],
     _B_ = [0, [0, cst_min, caml_call1(sexp_of_t, min)], _A_],
     _C_ = caml_call2(Base_Sexp[10], cst_clamp_requires_min_max, _B_);
    return caml_call1(Base_Or_error[39], _C_);
   }
   function incr(r){r[1] = caml_int64_add(r[1], one); return 0;}
   function decr(r){r[1] = caml_int64_sub(r[1], one); return 0;}
   function of_int64_exn(_z_){return _z_;}
   function to_int64(t){return t;}
   var
    popcount = Base_Popcount[3],
    of_int_exn = caml_int64_of_int32,
    to_int = Base_Int_conversions[12],
    to_int_exn = Base_Int_conversions[13],
    of_int32_exn = caml_int64_of_int32,
    to_int32 = Base_Int_conversions[15],
    to_int32_exn = Base_Int_conversions[16],
    of_nativeint_exn = caml_int64_of_int32,
    to_nativeint = Base_Int_conversions[18],
    to_nativeint_exn = Base_Int_conversions[19],
    raise_s = Base_Error[32];
   function non_positive_argument(param){
    return caml_call2(Base_Printf[7], _c_, 0);
   }
   var lsr = caml_int64_shift_right_unsigne, land = caml_int64_and;
   function ceil_pow2(x){
    if(caml_lessequal(x, Stdlib_Int64[1])) non_positive_argument(0);
    var
     x$0 = caml_call1(Stdlib_Int64[7], x),
     x$1 = caml_int64_or(x$0, caml_int64_shift_right_unsigne(x$0, 1)),
     x$2 = caml_int64_or(x$1, caml_int64_shift_right_unsigne(x$1, 2)),
     x$3 = caml_int64_or(x$2, caml_int64_shift_right_unsigne(x$2, 4)),
     x$4 = caml_int64_or(x$3, caml_int64_shift_right_unsigne(x$3, 8)),
     x$5 = caml_int64_or(x$4, caml_int64_shift_right_unsigne(x$4, 16)),
     x$6 = caml_int64_or(x$5, caml_int64_shift_right_unsigne(x$5, 32));
    return caml_call1(Stdlib_Int64[6], x$6);
   }
   function floor_pow2(x){
    if(caml_lessequal(x, Stdlib_Int64[1])) non_positive_argument(0);
    var
     x$0 = caml_int64_or(x, caml_int64_shift_right_unsigne(x, 1)),
     x$1 = caml_int64_or(x$0, caml_int64_shift_right_unsigne(x$0, 2)),
     x$2 = caml_int64_or(x$1, caml_int64_shift_right_unsigne(x$1, 4)),
     x$3 = caml_int64_or(x$2, caml_int64_shift_right_unsigne(x$2, 8)),
     x$4 = caml_int64_or(x$3, caml_int64_shift_right_unsigne(x$3, 16)),
     x$5 = caml_int64_or(x$4, caml_int64_shift_right_unsigne(x$4, 32));
    return caml_int64_sub(x$5, caml_int64_shift_right_unsigne(x$5, 1));
   }
   function is_pow2(x){
    if(caml_lessequal(x, Stdlib_Int64[1])) non_positive_argument(0);
    var _y_ = Stdlib_Int64[1];
    return caml_equal(caml_int64_and(x, caml_call1(Stdlib_Int64[7], x)), _y_);
   }
   function floor_log2(i){
    if(caml_lessequal(i, Stdlib_Int64[1])){
     var _v_ = [0, [0, cst, caml_call1(Base_Import[142], i)], 0];
     caml_call1
      (raise_s,
       caml_call2(Base_Sexp[10], cst_Int64_floor_log2_got_inval, _v_));
    }
    var
     _w_ = runtime.Base_int_math_int64_clz(i),
     _x_ = caml_call2(Base_Import[93], num_bits, 1);
    return caml_call2(Base_Import[93], _x_, _w_);
   }
   function ceil_log2(i){
    if(caml_lessequal(i, Stdlib_Int64[1])){
     var _t_ = [0, [0, cst$0, caml_call1(Base_Import[142], i)], 0];
     caml_call1
      (raise_s,
       caml_call2(Base_Sexp[10], cst_Int64_ceil_log2_got_invali, _t_));
    }
    if(caml_call2(Stdlib_Int64[17], i, Stdlib_Int64[2])) return 0;
    var _u_ = runtime.Base_int_math_int64_clz(caml_call1(Stdlib_Int64[7], i));
    return caml_call2(Base_Import[93], num_bits, _u_);
   }
   var
    include$1 = caml_call1(Base_Int_string_conversions[1], [0, to_string]),
    to_string_hum = include$1[1],
    sexp_of_t$0 = include$1[2],
    compare_local = Base_Import[258];
   function compare$0(a, b){return caml_call2(compare_local, a, b);}
   var hash_fold_t$0 = Base_Import[203], func$0 = Base_Import[217];
   function hash$0(x){return caml_call1(func$0, x);}
   var symbol$0 = caml_lessthan;
   function to_string$0(i){return caml_call2(Base_Printf[2], _d_, i);}
   function of_string$0(s){
    function _r_(_s_){return _s_;}
    return caml_call3(Stdlib_Scanf[5], s, _e_, _r_);
   }
   var
    include$2 =
      caml_call1
       (Base_Int_string_conversions[2],
        [0,
         compare$0,
         compare_local,
         hash_fold_t$0,
         hash$0,
         to_string$0,
         of_string$0,
         zero,
         symbol$0,
         neg,
         module_name]),
    Hex = include$2[1],
    compare_local$0 = Base_Import[258];
   function compare$1(a, b){return caml_call2(compare_local$0, a, b);}
   var equal_local = Base_Import[272];
   function equal(a, b){return caml_call2(equal_local, a, b);}
   var hash_fold_t$1 = Base_Import[203], func$1 = Base_Import[217];
   function hash$1(x){return caml_call1(func$1, x);}
   function clz(_q_){return runtime.Base_int_math_int64_clz(_q_);}
   var
    include$3 =
      caml_call1
       (Base_Int_string_conversions[3],
        [0,
         compare$1,
         compare_local$0,
         equal,
         equal_local,
         hash_fold_t$1,
         hash$1,
         clz,
         lsr,
         land,
         to_int_exn,
         num_bits,
         one,
         zero]),
    Binary = include$3[1],
    pp = caml_call1(Base_Pretty_printer[2], [0, module_name$0, to_string])[1],
    include$4 =
      caml_call1
       (Base_Int_math[1],
        [0,
         of_float,
         to_float,
         of_string,
         to_string,
         caml_int64_add,
         caml_int64_sub,
         runtime.caml_int64_mul,
         runtime.caml_int64_div,
         caml_int64_neg,
         runtime.caml_greaterequal,
         caml_lessequal,
         caml_equal,
         caml_greaterthan,
         caml_lessthan,
         runtime.caml_notequal,
         abs,
         caml_int64_neg,
         zero,
         of_int_exn,
         rem]),
    symbol$1 = include$4[1],
    symbol$2 = include$4[2],
    symbol$3 = include$4[3],
    round = include$4[4],
    round_towards_zero = include$4[5],
    round_down = include$4[6],
    round_up = include$4[7],
    round_nearest = include$4[8],
    include$5 = Base_Import[103],
    ascending = include$5[1],
    descending = include$5[2],
    max = include$5[3],
    min = include$5[4],
    _f_ = [0, symbol, bit_not, abs, zero, symbol$1, symbol$2, symbol$3];
   function _g_(_p_){return runtime.Base_int_math_int64_ctz(_p_);}
   function _h_(_o_){return runtime.Base_int_math_int64_clz(_o_);}
   var _i_ = caml_equal;
   function _j_(_n_, _m_){return caml_int64_compare(_n_, _m_);}
   var
    Base_Int64 =
      [0,
       globalize,
       t_sexp_grammar,
       of_float,
       to_float,
       of_int_exn,
       to_int_exn,
       hash_fold_t,
       hash,
       t_of_sexp,
       sexp_of_t$0,
       of_string,
       to_string,
       caml_equal,
       function(_l_, _k_){return caml_int64_compare(_l_, _k_);},
       min,
       max,
       ascending,
       descending,
       between,
       clamp_exn,
       clamp,
       comparator,
       pp,
       hashable,
       is_positive,
       is_non_negative,
       is_negative,
       is_non_positive,
       sign,
       _j_,
       _i_,
       invariant,
       Hex,
       Binary,
       of_string_opt,
       to_string_hum,
       one,
       minus_one,
       rem,
       round,
       round_towards_zero,
       round_down,
       round_up,
       round_nearest,
       succ,
       pred,
       symbol,
       bit_and,
       bit_or,
       bit_xor,
       bit_not,
       popcount,
       shift_left,
       shift_right,
       decr,
       incr,
       of_int32_exn,
       to_int32_exn,
       of_int64_exn,
       to_int64,
       of_nativeint_exn,
       to_nativeint_exn,
       of_float_unchecked,
       num_bits,
       max_value,
       min_value,
       shift_right_logical,
       ceil_pow2,
       floor_pow2,
       ceil_log2,
       floor_log2,
       is_pow2,
       _h_,
       _g_,
       _f_,
       symbol,
       bit_not,
       abs,
       zero,
       symbol$1,
       symbol$2,
       symbol$3,
       to_int,
       to_int32,
       to_nativeint,
       bswap16,
       bswap32,
       bswap48];
   runtime.caml_register_global(30, Base_Int64, "Base__Int64");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Int63_emul
//# unitInfo: Requires: Base__Comparable, Base__Comparator, Base__Float0, Base__Import, Base__Int64, Base__Int_conversions, Base__Int_math, Base__Int_string_conversions, Base__Or_error, Base__Popcount, Base__Pretty_printer, Base__Printf, Base__Sexp, Base__String, Stdlib__Int64
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_src_int63_emul_ml = "src/int63_emul.ml",
    caml_equal = runtime.caml_equal,
    caml_greaterequal = runtime.caml_greaterequal,
    caml_greaterthan = runtime.caml_greaterthan,
    caml_int64_add = runtime.caml_int64_add,
    caml_int64_and = runtime.caml_int64_and,
    caml_int64_compare = runtime.caml_int64_compare,
    caml_int64_mul = runtime.caml_int64_mul,
    caml_int64_neg = runtime.caml_int64_neg,
    caml_int64_of_float = runtime.caml_int64_of_float,
    caml_int64_of_string = runtime.caml_int64_of_string,
    caml_int64_shift_right = runtime.caml_int64_shift_right,
    caml_int64_shift_right_unsigne = runtime.caml_int64_shift_right_unsigned,
    caml_int64_sub = runtime.caml_int64_sub,
    caml_lessequal = runtime.caml_lessequal,
    caml_lessthan = runtime.caml_lessthan,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_notequal = runtime.caml_notequal,
    caml_string_get = runtime.caml_string_get;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    mask = runtime.caml_int64_create_lo_mi_hi(16777214, 16777215, 65535),
    module_name = "Base.Int63.Hex",
    module_name$0 = "Base.Int63",
    Base_Import = global_data.Base__Import,
    Base_Printf = global_data.Base__Printf,
    Base_Int_conversions = global_data.Base__Int_conversions,
    Base_Sexp = global_data.Base__Sexp,
    Base_Or_error = global_data.Base__Or_error,
    Assert_failure = global_data.Assert_failure,
    Base_Float0 = global_data.Base__Float0,
    Base_Int64 = global_data.Base__Int64,
    Base_String = global_data.Base__String,
    Stdlib_Int64 = global_data.Stdlib__Int64,
    Base_Popcount = global_data.Base__Popcount,
    Base_Comparator = global_data.Base__Comparator,
    Base_Int_math = global_data.Base__Int_math,
    Base_Comparable = global_data.Base__Comparable,
    Base_Int_string_conversions = global_data.Base__Int_string_conversions,
    Base_Pretty_printer = global_data.Base__Pretty_printer,
    include = Base_Import[103],
    max = include[3],
    min = include[4],
    compare_local = Base_Import[258],
    cst_0x = "0x",
    _l_ = [0, [7, 6, 0, 0, 0], "%Lx"],
    cst_max = "max",
    cst_min = "min",
    cst_clamp_requires_min_max = "clamp requires [min <= max]",
    _k_ = [0, cst_src_int63_emul_ml, 334, 2],
    _i_ =
      [0,
       [11,
        "Int63.of_float: argument (",
        [8, [0, 0, 0], 0, 0, [11, ") is out of range or NaN", 0]]],
       "Int63.of_float: argument (%f) is out of range or NaN"],
    _h_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _g_ =
      [0,
       [11, "Int63.of_string: invalid input ", [3, 0, 0]],
       "Int63.of_string: invalid input %S"],
    _e_ = [0, cst_src_int63_emul_ml, 117, 20],
    _d_ = runtime.caml_int64_create_lo_mi_hi(2, 0, 0),
    _c_ = runtime.caml_int64_create_lo_mi_hi(2, 0, 0),
    _b_ = runtime.caml_int64_create_lo_mi_hi(2, 0, 0),
    _a_ = runtime.caml_int64_create_lo_mi_hi(2, 0, 0),
    _f_ = runtime.caml_int64_create_lo_mi_hi(1, 0, 0);
   function compare(a, b){return caml_call2(compare_local, a, b);}
   var
    globalize = Base_Import[286],
    hash_fold_t = Base_Import[203],
    sexp_of_t = Base_Import[142],
    t_sexp_grammar = Base_Import[188],
    include$0 = caml_call1(Base_Comparator[7], [0, compare, sexp_of_t]),
    comparator = include$0[1];
   function wrap_exn(x){
    caml_call1(Base_Int_conversions[21], x);
    return caml_int64_mul(x, _a_);
   }
   function wrap_modulo(x){return caml_int64_mul(x, _c_);}
   function unwrap(x){return caml_int64_shift_right(x, 1);}
   function m(x){return caml_int64_and(x, mask);}
   function invariant(t){
    if(caml_equal(m(t), t)) return 0;
    throw caml_maybe_attach_backtrace([0, Assert_failure, _e_], 1);
   }
   var
    symbol = caml_int64_add,
    symbol$0 = caml_int64_sub,
    symbol$1 = caml_int64_neg;
   function abs(x){return caml_call1(Stdlib_Int64[8], x);}
   var one = wrap_exn(_f_);
   function succ(a){return caml_int64_add(a, one);}
   function pred(a){return caml_int64_sub(a, one);}
   var min_value = m(Stdlib_Int64[10]), max_value = m(Stdlib_Int64[9]);
   function bit_not(x){return m(caml_call1(Stdlib_Int64[11], x));}
   var
    bit_and = caml_int64_and,
    bit_xor = runtime.caml_int64_xor,
    bit_or = runtime.caml_int64_or,
    shift_left = runtime.caml_int64_shift_left;
   function shift_right(x, i){return m(caml_int64_shift_right(x, i));}
   function shift_right_logical(x, i){
    return m(caml_int64_shift_right_unsigne(x, i));
   }
   var f = Base_Int_math[2][3];
   function pow(a, b){
    return caml_int64_mul
            (caml_call2
              (f, caml_int64_shift_right(a, 1), caml_int64_shift_right(b, 1)),
             _d_);
   }
   function symbol$2(a, b){
    return caml_int64_mul(a, caml_int64_shift_right(b, 1));
   }
   function symbol$3(a, b){return wrap_modulo(runtime.caml_int64_div(a, b));}
   var rem = runtime.caml_int64_mod;
   function popcount(x){return caml_call1(Base_Popcount[3], x);}
   function to_int64(t){return caml_int64_shift_right(t, 1);}
   function of_int64(t){
    return caml_call1(Base_Int_conversions[22], t)
            ? [0, caml_int64_mul(t, _b_)]
            : 0;
   }
   function of_int64_exn(t){return wrap_exn(t);}
   function of_int64_trunc(t){return wrap_modulo(t);}
   function t_of_sexp(x){return wrap_exn(caml_call1(Base_Import[166], x));}
   function sexp_of_t$0(x){
    return caml_call1(Base_Import[142], caml_int64_shift_right(x, 1));
   }
   function compare$0(x, y){return compare(x, y);}
   function compare_local$0(x, y){return caml_call2(compare_local, x, y);}
   var equal_local = caml_equal;
   function is_pow2(x){
    return caml_call1(Base_Int64[72], caml_int64_shift_right(x, 1));
   }
   function clz(x){return caml_call1(Base_Int64[73], x);}
   function ctz(x){
    return caml_call1(Base_Int64[74], caml_int64_shift_right(x, 1));
   }
   function floor_pow2(x){
    return wrap_exn(caml_call1(Base_Int64[69], caml_int64_shift_right(x, 1)));
   }
   function ceil_pow2(x){
    return wrap_exn(caml_call1(Base_Int64[69], caml_int64_shift_right(x, 1)));
   }
   function floor_log2(x){
    return caml_call1(Base_Int64[71], caml_int64_shift_right(x, 1));
   }
   function ceil_log2(x){
    return caml_call1(Base_Int64[70], caml_int64_shift_right(x, 1));
   }
   function hash(x){return caml_call1(Base_Import[85][105][28], x);}
   var hashable = [0, hash, compare$0, sexp_of_t$0];
   function invalid_str(x){return caml_call3(Base_Printf[6], _g_, x, 0);}
   function to_string(x){
    return caml_call1(Stdlib_Int64[14], caml_int64_shift_right(x, 1));
   }
   function of_string_raw(str){
    var len = caml_ml_string_length(str);
    a:
    if(0 < len){
     var switcher = caml_string_get(str, 0) - 43 | 0;
     if(2 >= switcher >>> 0)
      switch(switcher){
        case 0:
         var sign = 4003188, pos = 1; break a;
        case 1: break;
        default: var sign = 3901488, pos = 1; break a;
      }
     var sign = 4003188, pos = 0;
    }
    else
     var sign = 4003188, pos = 0;
    if(caml_call2(Base_Import[91], pos, 2) < len)
     var
      c1 = caml_string_get(str, pos),
      c2 = caml_string_get(str, caml_call2(Base_Import[91], pos, 1)),
      match = 48 === c1 ? 9 < c2 - 48 >>> 0 ? [0, , 0] : [0, , 1] : [0, , 1];
    else
     var match = [0, , 1];
    var signedness = match[2];
    if(signedness) return of_int64_exn(caml_int64_of_string(str));
    if(4003188 <= sign)
     var pos_str = str;
    else
     var
      _E_ = caml_call2(Base_Import[93], caml_ml_string_length(str), 1),
      pos_str = caml_call3(Base_String[3], str, 1, _E_);
    var int64 = caml_int64_of_string(pos_str);
    if(caml_lessthan(int64, _h_)) invalid_str(str);
    var int63 = wrap_modulo(int64);
    return 4003188 <= sign ? int63 : caml_int64_neg(int63);
   }
   function of_string(str){
    try{var _C_ = of_string_raw(str); return _C_;}
    catch(_D_){return invalid_str(str);}
   }
   function of_string_opt(str){
    try{var t = of_string_raw(str);}catch(_B_){return 0;}
    return [0, t];
   }
   function bswap16(t){
    return wrap_modulo
            (caml_call1(Base_Int64[86], caml_int64_shift_right(t, 1)));
   }
   function bswap32(t){
    return wrap_modulo
            (caml_call1(Base_Int64[87], caml_int64_shift_right(t, 1)));
   }
   function bswap48(t){
    return wrap_modulo
            (caml_call1(Base_Int64[88], caml_int64_shift_right(t, 1)));
   }
   var
    float_lower_bound = caml_call1(Base_Float0[26], 63),
    float_upper_bound = caml_call1(Base_Float0[24], 63),
    minus_one = wrap_exn(Stdlib_Int64[3]),
    one$0 = wrap_exn(Stdlib_Int64[2]),
    zero = wrap_exn(Stdlib_Int64[1]),
    num_bits = 63;
   function to_float(x){
    return runtime.caml_int64_to_float(caml_int64_shift_right(x, 1));
   }
   function of_float_unchecked(x){return wrap_modulo(caml_int64_of_float(x));}
   function of_float(t){
    if(float_lower_bound <= t && t <= float_upper_bound)
     return wrap_modulo(caml_int64_of_float(t));
    var _A_ = caml_call1(Base_Float0[29], t);
    return caml_call3(Base_Printf[7], _i_, _A_, 0);
   }
   var
    _j_ = caml_call1(Base_Comparable[14], [0, compare$0, sexp_of_t$0, zero]),
    is_positive = _j_[1],
    is_non_negative = _j_[2],
    is_negative = _j_[3],
    is_non_positive = _j_[4],
    sign = _j_[5];
   function between(t, low, high){
    var
     _y_ = caml_lessequal(low, t),
     _z_ = _y_ ? caml_lessequal(t, high) : _y_;
    return _z_;
   }
   function clamp_unchecked(t, min$0, max$0){
    var _x_ = caml_call2(min, t, max$0);
    return caml_call1(caml_call1(max, min$0), _x_);
   }
   function clamp_exn(t, min, max){
    if(caml_lessequal(min, max)) return clamp_unchecked(t, min, max);
    throw caml_maybe_attach_backtrace([0, Assert_failure, _k_], 1);
   }
   function clamp(t, min, max){
    if(! caml_greaterthan(min, max)) return [0, clamp_unchecked(t, min, max)];
    var
     _u_ = [0, [0, cst_max, sexp_of_t$0(max)], 0],
     _v_ = [0, [0, cst_min, sexp_of_t$0(min)], _u_],
     _w_ = caml_call2(Base_Sexp[10], cst_clamp_requires_min_max, _v_);
    return caml_call1(Base_Or_error[39], _w_);
   }
   function symbol$4(b, e){return pow(b, e);}
   function incr(r){r[1] = caml_int64_add(r[1], one$0); return 0;}
   function decr(r){r[1] = caml_int64_sub(r[1], one$0); return 0;}
   function of_int(x){
    return wrap_exn(caml_call1(Base_Int_conversions[4], x));
   }
   function of_int_exn(x){return of_int(x);}
   function to_int(x){
    return caml_call1(Base_Int_conversions[12], caml_int64_shift_right(x, 1));
   }
   function to_int_exn(x){
    return caml_call1(Base_Int_conversions[13], caml_int64_shift_right(x, 1));
   }
   function to_int_trunc(x){
    return caml_call1(Base_Int_conversions[14], caml_int64_shift_right(x, 1));
   }
   function of_int32(x){
    return wrap_exn(caml_call1(Base_Int_conversions[9], x));
   }
   function of_int32_exn(x){return of_int32(x);}
   function to_int32(x){
    return caml_call1(Base_Int_conversions[15], caml_int64_shift_right(x, 1));
   }
   function to_int32_exn(x){
    return caml_call1(Base_Int_conversions[16], caml_int64_shift_right(x, 1));
   }
   function to_int32_trunc(x){
    return caml_call1(Base_Int_conversions[17], caml_int64_shift_right(x, 1));
   }
   function of_nativeint(x){
    return of_int64(caml_call1(Base_Int_conversions[29], x));
   }
   function of_nativeint_exn(x){
    return wrap_exn(caml_call1(Base_Int_conversions[29], x));
   }
   function of_nativeint_trunc(x){
    return of_int64_trunc(caml_call1(Base_Int_conversions[29], x));
   }
   function to_nativeint(x){
    return caml_call1(Base_Int_conversions[18], caml_int64_shift_right(x, 1));
   }
   function to_nativeint_exn(x){
    return caml_call1(Base_Int_conversions[19], caml_int64_shift_right(x, 1));
   }
   function to_nativeint_trunc(x){
    return caml_call1(Base_Int_conversions[20], caml_int64_shift_right(x, 1));
   }
   var
    include$1 = caml_call1(Base_Int_string_conversions[1], [0, to_string]),
    to_string_hum = include$1[1],
    sexp_of_t$1 = include$1[2];
   function compare$1(a, b){return compare_local$0(a, b);}
   function hash$0(x){return hash(x);}
   var symbol$5 = caml_lessthan;
   function to_string$0(i){
    return caml_call2
            (Base_Printf[2], _l_, caml_int64_shift_right_unsigne(i, 1));
   }
   function of_string$0(s){
    return of_string(caml_call2(Base_Import[112], cst_0x, s));
   }
   var
    include$2 =
      caml_call1
       (Base_Int_string_conversions[2],
        [0,
         compare$1,
         compare_local$0,
         hash_fold_t,
         hash$0,
         to_string$0,
         of_string$0,
         zero,
         symbol$5,
         symbol$1,
         module_name]),
    Hex = include$2[1];
   function to_string$1(x){return to_string(x);}
   var
    pp =
      caml_call1(Base_Pretty_printer[2], [0, module_name$0, to_string$1])[1],
    symbol$6 = caml_notequal,
    symbol$7 = caml_lessthan,
    symbol$8 = caml_greaterthan,
    symbol$9 = caml_equal,
    symbol$10 = caml_lessequal,
    symbol$11 = caml_greaterequal,
    include$3 =
      caml_call1
       (Base_Int_math[1],
        [0,
         of_float,
         to_float,
         of_string,
         to_string,
         symbol,
         symbol$0,
         symbol$2,
         symbol$3,
         symbol$1,
         symbol$11,
         symbol$10,
         symbol$9,
         symbol$8,
         symbol$7,
         symbol$6,
         abs,
         symbol$1,
         zero,
         of_int_exn,
         rem]),
    symbol$12 = include$3[1],
    symbol$13 = include$3[2],
    symbol$14 = include$3[3],
    round = include$3[4],
    round_towards_zero = include$3[5],
    round_down = include$3[6],
    round_up = include$3[7],
    round_nearest = include$3[8];
   function compare$2(a, b){return compare_local$0(a, b);}
   var equal = caml_equal;
   function hash$1(x){return hash(x);}
   var
    include$4 =
      caml_call1
       (Base_Int_string_conversions[3],
        [0,
         compare$2,
         compare_local$0,
         equal,
         equal_local,
         hash_fold_t,
         hash$1,
         clz,
         shift_right_logical,
         bit_and,
         to_int_exn,
         num_bits,
         one$0,
         zero]),
    Binary = include$4[1],
    Repr = [0],
    include$5 = Base_Import[103],
    ascending = include$5[1],
    descending = include$5[2],
    max$0 = include$5[3],
    min$0 = include$5[4],
    repr = 1,
    _m_ = [0, wrap_exn, unwrap],
    _n_ =
      [0,
       symbol,
       symbol$0,
       symbol$2,
       symbol$3,
       symbol$1,
       symbol$4,
       symbol$11,
       symbol$10,
       symbol$9,
       symbol$8,
       symbol$7,
       symbol$6,
       abs,
       symbol$1,
       zero,
       symbol$12,
       symbol$13,
       symbol$14,
       bit_and,
       bit_or,
       bit_xor,
       bit_not,
       shift_left,
       shift_right,
       shift_right_logical],
    _o_ = caml_equal;
   function _p_(_t_, _s_){return caml_int64_compare(_t_, _s_);}
   var
    Base_Int63_emul =
      [0,
       globalize,
       t_sexp_grammar,
       of_float,
       to_float,
       of_int_exn,
       to_int_exn,
       hash_fold_t,
       hash,
       t_of_sexp,
       sexp_of_t$1,
       of_string,
       to_string,
       caml_greaterequal,
       caml_lessequal,
       caml_equal,
       caml_greaterthan,
       caml_lessthan,
       caml_notequal,
       caml_equal,
       function(_r_, _q_){return caml_int64_compare(_r_, _q_);},
       min$0,
       max$0,
       ascending,
       descending,
       between,
       clamp_exn,
       clamp,
       comparator,
       pp,
       hashable,
       is_positive,
       is_non_negative,
       is_negative,
       is_non_positive,
       sign,
       _p_,
       _o_,
       invariant,
       Hex,
       Binary,
       of_string_opt,
       to_string_hum,
       zero,
       one$0,
       minus_one,
       symbol,
       symbol$0,
       symbol$2,
       symbol$4,
       symbol$1,
       symbol$1,
       symbol$13,
       symbol$12,
       symbol$3,
       rem,
       symbol$14,
       bit_and,
       bit_or,
       bit_xor,
       bit_not,
       shift_left,
       shift_right,
       round,
       round_towards_zero,
       round_down,
       round_up,
       round_nearest,
       abs,
       succ,
       pred,
       pow,
       bit_and,
       bit_or,
       bit_xor,
       bit_not,
       popcount,
       shift_left,
       shift_right,
       decr,
       incr,
       of_int32_exn,
       to_int32_exn,
       of_int64_exn,
       to_int64,
       of_nativeint_exn,
       to_nativeint_exn,
       of_float_unchecked,
       num_bits,
       max_value,
       min_value,
       shift_right_logical,
       shift_right_logical,
       ceil_pow2,
       floor_pow2,
       ceil_log2,
       floor_log2,
       is_pow2,
       clz,
       ctz,
       _n_,
       of_int,
       to_int,
       to_int_trunc,
       of_int32,
       to_int32,
       to_int32_trunc,
       of_int64,
       of_int64_trunc,
       of_nativeint,
       to_nativeint,
       of_nativeint_trunc,
       to_nativeint_trunc,
       bswap16,
       bswap32,
       bswap48,
       _m_,
       Repr,
       repr];
   runtime.caml_register_global(34, Base_Int63_emul, "Base__Int63_emul");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Int32
//# unitInfo: Requires: Base__Bool0, Base__Comparable, Base__Comparator, Base__Error, Base__Float0, Base__Import, Base__Int_conversions, Base__Int_math, Base__Int_string_conversions, Base__Or_error, Base__Popcount, Base__Pretty_printer, Base__Printf, Base__Sexp, Stdlib__Int32, Stdlib__Scanf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$1 = "",
    cst_lx = "%lx",
    cst_argument_must_be_strictly_ = "argument must be strictly positive",
    caml_equal = runtime.caml_equal,
    caml_greaterequal = runtime.caml_greaterequal,
    caml_greaterthan = runtime.caml_greaterthan,
    caml_int32_bswap = runtime.caml_int32_bswap,
    caml_lessequal = runtime.caml_lessequal,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$0 = cst$1,
    cst = cst$1,
    module_name = "Base.Int32.Hex",
    module_name$0 = "Base.Int32",
    Stdlib_Scanf = global_data.Stdlib__Scanf,
    Base_Printf = global_data.Base__Printf,
    Stdlib_Int32 = global_data.Stdlib__Int32,
    Base_Import = global_data.Base__Import,
    Base_Sexp = global_data.Base__Sexp,
    Base_Int_math = global_data.Base__Int_math,
    Base_Or_error = global_data.Base__Or_error,
    Assert_failure = global_data.Assert_failure,
    Base_Float0 = global_data.Base__Float0,
    Base_Comparator = global_data.Base__Comparator,
    Base_Comparable = global_data.Base__Comparable,
    Base_Popcount = global_data.Base__Popcount,
    Base_Int_conversions = global_data.Base__Int_conversions,
    Base_Error = global_data.Base__Error,
    Base_Int_string_conversions = global_data.Base__Int_string_conversions,
    Base_Pretty_printer = global_data.Base__Pretty_printer,
    globalize = Base_Import[285],
    hash_fold_t = Base_Import[204],
    func = Base_Import[218],
    _e_ = [0, [5, 6, 0, 0, 0], cst_lx],
    _d_ = [0, [5, 6, 0, 0, 0], cst_lx],
    cst_Int32_ceil_log2_got_invali = "[Int32.ceil_log2] got invalid input",
    cst_Int32_floor_log2_got_inval = "[Int32.floor_log2] got invalid input",
    _c_ =
      [0,
       [11, cst_argument_must_be_strictly_, 0],
       cst_argument_must_be_strictly_],
    cst_max = "max",
    cst_min = "min",
    cst_clamp_requires_min_max = "clamp requires [min <= max]",
    _b_ = [0, "src/int32.ml", 103, 4],
    _a_ =
      [0,
       [11,
        "Int32.of_float: argument (",
        [8, [0, 0, 0], 0, 0, [11, ") is out of range or NaN", 0]]],
       "Int32.of_float: argument (%f) is out of range or NaN"];
   function hash(x){return caml_call1(func, x);}
   var
    t_of_sexp = Base_Import[165],
    sexp_of_t = Base_Import[141],
    t_sexp_grammar = Base_Import[187],
    hashable = [0, hash, Stdlib_Int32[15], sexp_of_t];
   function ascending(x, y){return caml_call2(Stdlib_Int32[15], x, y);}
   var
    to_string = Stdlib_Int32[14],
    of_string = runtime.caml_int_of_string,
    of_string_opt = Stdlib_Int32[13],
    include = caml_call1(Base_Comparator[7], [0, ascending, sexp_of_t]),
    comparator = include[1],
    float_lower_bound = caml_call1(Base_Float0[26], 32),
    float_upper_bound = caml_call1(Base_Float0[24], 32),
    float_of_bits = runtime.caml_int32_float_of_bits,
    bits_of_float = runtime.caml_int32_bits_of_float,
    num_bits = 32;
   function shift_right_logical(_X_, _W_){return _X_ >>> _W_ | 0;}
   function shift_right(_V_, _U_){return _V_ >> _U_;}
   function shift_left(_T_, _S_){return _T_ << _S_;}
   var bit_not = Stdlib_Int32[11];
   function bit_xor(_R_, _Q_){return _R_ ^ _Q_;}
   function bit_or(_P_, _O_){return _P_ | _O_;}
   function bit_and(_N_, _M_){return _N_ & _M_;}
   var
    min_value = Stdlib_Int32[10],
    max_value = Stdlib_Int32[9],
    abs = Stdlib_Int32[8],
    pred = Stdlib_Int32[7],
    succ = Stdlib_Int32[6],
    rem = runtime.caml_mod;
   function symbol(_L_){return - _L_ | 0;}
   var
    minus_one = Stdlib_Int32[3],
    one = Stdlib_Int32[2],
    zero = Stdlib_Int32[1],
    compare_local = runtime.caml_compare;
   function to_float(_K_){return _K_;}
   function of_float_unchecked(_J_){return _J_ | 0;}
   function of_float(f){
    if(float_lower_bound <= f && f <= float_upper_bound) return f | 0;
    var _I_ = caml_call1(Base_Float0[29], f);
    return caml_call3(Base_Printf[7], _a_, _I_, 0);
   }
   var
    include$0 =
      caml_call1(Base_Comparable[14], [0, ascending, sexp_of_t, zero]),
    is_positive = include$0[1],
    is_non_negative = include$0[2],
    is_negative = include$0[3],
    is_non_positive = include$0[4],
    sign = include$0[5],
    symbol$0 = caml_greaterequal,
    symbol$1 = caml_lessequal,
    symbol$2 = caml_equal,
    symbol$3 = caml_greaterthan,
    symbol$4 = runtime.caml_lessthan,
    symbol$5 = runtime.caml_notequal;
   function descending(x, y){return ascending(y, x);}
   function min(x, y){
    return runtime.caml_csel_value(caml_lessequal(x, y), x, y);
   }
   function max(x, y){
    return runtime.caml_csel_value(caml_greaterequal(x, y), x, y);
   }
   var equal = caml_equal, equal_local = caml_equal;
   function between(t, low, high){
    var _H_ = caml_lessequal(low, t);
    return _H_ ? caml_lessequal(t, high) : _H_;
   }
   function clamp_unchecked(t, min$0, max$0){return max(min$0, min(t, max$0));
   }
   function clamp_exn(t, min, max){
    if(caml_lessequal(min, max)) return clamp_unchecked(t, min, max);
    throw caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1);
   }
   function clamp(t, min, max){
    if(! caml_greaterthan(min, max)) return [0, clamp_unchecked(t, min, max)];
    var
     _E_ = [0, [0, cst_max, caml_call1(sexp_of_t, max)], 0],
     _F_ = [0, [0, cst_min, caml_call1(sexp_of_t, min)], _E_],
     _G_ = caml_call2(Base_Sexp[10], cst_clamp_requires_min_max, _F_);
    return caml_call1(Base_Or_error[39], _G_);
   }
   function invariant(param){return 0;}
   var symbol$6 = runtime.caml_div, symbol$7 = runtime.caml_mul;
   function symbol$8(_D_, _C_){return _D_ - _C_ | 0;}
   function symbol$9(_B_, _A_){return _B_ + _A_ | 0;}
   function incr(r){r[1] = r[1] + one | 0; return 0;}
   function decr(r){r[1] = r[1] - one | 0; return 0;}
   function of_int32(t){return t;}
   function to_int32(t){return t;}
   var
    popcount = Base_Popcount[2],
    of_int = Base_Int_conversions[1],
    of_int_exn = Base_Int_conversions[2],
    of_int_trunc = Base_Int_conversions[3],
    to_int = Base_Int_conversions[6],
    to_int_exn = Base_Int_conversions[7],
    to_int_trunc = Base_Int_conversions[8],
    of_int64 = Base_Int_conversions[15],
    of_int64_exn = Base_Int_conversions[16],
    of_int64_trunc = Base_Int_conversions[17],
    to_int64 = Base_Int_conversions[9],
    of_nativeint = Base_Int_conversions[26],
    of_nativeint_exn = Base_Int_conversions[27],
    of_nativeint_trunc = Base_Int_conversions[28],
    to_nativeint = Base_Int_conversions[10];
   function pow(b, e){
    var _y_ = caml_call1(to_int_exn, e), _z_ = caml_call1(to_int_exn, b);
    return caml_call1(of_int_exn, caml_call2(Base_Int_math[2][1], _z_, _y_));
   }
   function symbol$10(b, e){return pow(b, e);}
   function bswap16(x){return caml_int32_bswap(x) >>> 16 | 0;}
   var raise_s = Base_Error[32];
   function non_positive_argument(param){
    return caml_call2(Base_Printf[7], _c_, 0);
   }
   function lsr(_x_, _w_){return _x_ >>> _w_ | 0;}
   function land(_v_, _u_){return _v_ & _u_;}
   function ceil_pow2(x){
    if(caml_call2(Base_Import[102][2], x, Stdlib_Int32[1]))
     non_positive_argument(0);
    var
     x$0 = caml_call1(Stdlib_Int32[7], x),
     x$1 = x$0 | x$0 >>> 1 | 0,
     x$2 = x$1 | x$1 >>> 2 | 0,
     x$3 = x$2 | x$2 >>> 4 | 0,
     x$4 = x$3 | x$3 >>> 8 | 0,
     x$5 = x$4 | x$4 >>> 16 | 0;
    return caml_call1(Stdlib_Int32[6], x$5);
   }
   function floor_pow2(x){
    if(caml_call2(Base_Import[102][2], x, Stdlib_Int32[1]))
     non_positive_argument(0);
    var
     x$0 = x | x >>> 1 | 0,
     x$1 = x$0 | x$0 >>> 2 | 0,
     x$2 = x$1 | x$1 >>> 4 | 0,
     x$3 = x$2 | x$2 >>> 8 | 0,
     x$4 = x$3 | x$3 >>> 16 | 0;
    return x$4 - (x$4 >>> 1 | 0) | 0;
   }
   function is_pow2(x){
    if(caml_call2(Base_Import[102][2], x, Stdlib_Int32[1]))
     non_positive_argument(0);
    var _s_ = Stdlib_Int32[1], _t_ = x & caml_call1(Stdlib_Int32[7], x);
    return caml_call2(Base_Import[102][4], _t_, _s_);
   }
   function floor_log2(i){
    if(caml_call2(Base_Import[102][2], i, Stdlib_Int32[1])){
     var _p_ = [0, [0, cst, caml_call1(Base_Import[141], i)], 0];
     caml_call1
      (raise_s,
       caml_call2(Base_Sexp[10], cst_Int32_floor_log2_got_inval, _p_));
    }
    var
     _q_ = runtime.Base_int_math_int32_clz(i),
     _r_ = caml_call2(Base_Import[93], num_bits, 1);
    return caml_call2(Base_Import[93], _r_, _q_);
   }
   function ceil_log2(i){
    if(caml_call2(Base_Import[102][2], i, Stdlib_Int32[1])){
     var _n_ = [0, [0, cst$0, caml_call1(Base_Import[141], i)], 0];
     caml_call1
      (raise_s,
       caml_call2(Base_Sexp[10], cst_Int32_ceil_log2_got_invali, _n_));
    }
    if(caml_call2(Stdlib_Int32[17], i, Stdlib_Int32[2])) return 0;
    var _o_ = runtime.Base_int_math_int32_clz(caml_call1(Stdlib_Int32[7], i));
    return caml_call2(Base_Import[93], num_bits, _o_);
   }
   var
    include$1 = caml_call1(Base_Int_string_conversions[1], [0, to_string]),
    to_string_hum = include$1[1],
    sexp_of_t$0 = include$1[2],
    compare_local$0 = Base_Import[257];
   function compare(a, b){return caml_call2(compare_local$0, a, b);}
   var hash_fold_t$0 = Base_Import[204], func$0 = Base_Import[218];
   function hash$0(x){return caml_call1(func$0, x);}
   function to_string$0(i){return caml_call2(Base_Printf[2], _d_, i);}
   function of_string$0(s){
    function _l_(_m_){return _m_;}
    return caml_call3(Stdlib_Scanf[5], s, _e_, _l_);
   }
   var
    include$2 =
      caml_call1
       (Base_Int_string_conversions[2],
        [0,
         compare,
         compare_local$0,
         hash_fold_t$0,
         hash$0,
         to_string$0,
         of_string$0,
         zero,
         symbol$4,
         symbol,
         module_name]),
    Hex = include$2[1],
    compare_local$1 = Base_Import[257];
   function compare$0(a, b){return caml_call2(compare_local$1, a, b);}
   var equal_local$0 = Base_Import[271];
   function equal$0(a, b){return caml_call2(equal_local$0, a, b);}
   var hash_fold_t$1 = Base_Import[204], func$1 = Base_Import[218];
   function hash$1(x){return caml_call1(func$1, x);}
   function clz(_k_){return runtime.Base_int_math_int32_clz(_k_);}
   var
    include$3 =
      caml_call1
       (Base_Int_string_conversions[3],
        [0,
         compare$0,
         compare_local$1,
         equal$0,
         equal_local$0,
         hash_fold_t$1,
         hash$1,
         clz,
         lsr,
         land,
         to_int_exn,
         num_bits,
         one,
         zero]),
    Binary = include$3[1],
    pp = caml_call1(Base_Pretty_printer[2], [0, module_name$0, to_string])[1],
    include$4 =
      caml_call1
       (Base_Int_math[1],
        [0,
         of_float,
         to_float,
         of_string,
         to_string,
         symbol$9,
         symbol$8,
         symbol$7,
         symbol$6,
         symbol,
         symbol$0,
         symbol$1,
         symbol$2,
         symbol$3,
         symbol$4,
         symbol$5,
         abs,
         symbol,
         zero,
         of_int_exn,
         rem]),
    symbol$11 = include$4[1],
    symbol$12 = include$4[2],
    symbol$13 = include$4[3],
    round = include$4[4],
    round_towards_zero = include$4[5],
    round_down = include$4[6],
    round_up = include$4[7],
    round_nearest = include$4[8],
    _f_ = caml_int32_bswap,
    _g_ =
      [0,
       symbol$9,
       symbol$8,
       symbol$7,
       symbol$6,
       symbol,
       symbol$10,
       symbol$0,
       symbol$1,
       symbol$2,
       symbol$3,
       symbol$4,
       symbol$5,
       abs,
       symbol,
       zero,
       symbol$11,
       symbol$12,
       symbol$13,
       bit_and,
       bit_or,
       bit_xor,
       bit_not,
       shift_left,
       shift_right,
       shift_right_logical];
   function _h_(_j_){return runtime.Base_int_math_int32_ctz(_j_);}
   var
    Base_Int32 =
      [0,
       globalize,
       t_sexp_grammar,
       of_float,
       to_float,
       of_int_exn,
       to_int_exn,
       hash_fold_t,
       hash,
       t_of_sexp,
       sexp_of_t$0,
       of_string,
       to_string,
       symbol$0,
       symbol$1,
       symbol$2,
       symbol$3,
       symbol$4,
       symbol$5,
       equal,
       ascending,
       min,
       max,
       ascending,
       descending,
       between,
       clamp_exn,
       clamp,
       comparator,
       pp,
       hashable,
       is_positive,
       is_non_negative,
       is_negative,
       is_non_positive,
       sign,
       compare_local,
       equal_local,
       invariant,
       Hex,
       Binary,
       of_string_opt,
       to_string_hum,
       zero,
       one,
       minus_one,
       symbol$9,
       symbol$8,
       symbol$7,
       symbol$10,
       symbol,
       symbol,
       symbol$12,
       symbol$11,
       symbol$6,
       rem,
       symbol$13,
       bit_and,
       bit_or,
       bit_xor,
       bit_not,
       shift_left,
       shift_right,
       round,
       round_towards_zero,
       round_down,
       round_up,
       round_nearest,
       abs,
       succ,
       pred,
       pow,
       bit_and,
       bit_or,
       bit_xor,
       bit_not,
       popcount,
       shift_left,
       shift_right,
       decr,
       incr,
       of_int32,
       to_int32,
       of_int64_exn,
       to_int64,
       of_nativeint_exn,
       to_nativeint,
       of_float_unchecked,
       num_bits,
       max_value,
       min_value,
       shift_right_logical,
       shift_right_logical,
       ceil_pow2,
       floor_pow2,
       ceil_log2,
       floor_log2,
       is_pow2,
       function(_i_){return runtime.Base_int_math_int32_clz(_i_);},
       _h_,
       _g_,
       of_int,
       to_int,
       of_int32,
       to_int32,
       of_nativeint,
       to_nativeint,
       of_int64,
       of_int_trunc,
       to_int_trunc,
       of_nativeint_trunc,
       of_int64_trunc,
       bits_of_float,
       float_of_bits,
       bswap16,
       _f_];
   runtime.caml_register_global(30, Base_Int32, "Base__Int32");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Int63
//# unitInfo: Requires: Base__Bool, Base__Error, Base__Import, Base__Int, Base__Int63_emul, Base__Int64, Base__Random, Base__Sexp, Base__Sys0, Base__Word_size
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_product$1 = "product",
    cst_t$3 = "t",
    cst_u$3 = "u",
    caml_div = runtime.caml_div,
    caml_int64_of_int32 = runtime.caml_int64_of_int32,
    caml_int64_to_int32 = runtime.caml_int64_to_int32,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_mul = runtime.caml_mul;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Base_Word_size = global_data.Base__Word_size,
    Base_Int = global_data.Base__Int,
    Base_Sexp = global_data.Base__Sexp,
    Base_Random = global_data.Base__Random,
    Base_Import = global_data.Base__Import,
    Base_Bool = global_data.Base__Bool,
    Base_Int64 = global_data.Base__Int64,
    Base_Error = global_data.Base__Error,
    Base_Int63_emul = global_data.Base__Int63_emul,
    Base_Sys0 = global_data.Base__Sys0,
    Assert_failure = global_data.Assert_failure,
    raise_s = Base_Error[32],
    include = caml_call1(caml_call1(Base_Sys0[19], [0]), [0]),
    t_sexp_grammar = Base_Int[2],
    of_float = Base_Int[3],
    to_float = Base_Int[4],
    of_int_exn = Base_Int[5],
    to_int_exn = Base_Int[6],
    hash_fold_t = Base_Int[7],
    hash = Base_Int[8],
    t_of_sexp = Base_Int[9],
    sexp_of_t = Base_Int[10],
    of_string = Base_Int[11],
    to_string = Base_Int[12],
    equal = Base_Int[13],
    compare = Base_Int[14],
    min = Base_Int[15],
    max = Base_Int[16],
    ascending = Base_Int[17],
    descending = Base_Int[18],
    between = Base_Int[19],
    clamp_exn = Base_Int[20],
    clamp = Base_Int[21],
    comparator = Base_Int[22],
    pp = Base_Int[23],
    hashable = Base_Int[24],
    is_positive = Base_Int[25],
    is_non_negative = Base_Int[26],
    is_negative = Base_Int[27],
    is_non_positive = Base_Int[28],
    sign = Base_Int[29],
    compare_local = Base_Int[30],
    equal_local = Base_Int[31],
    invariant = Base_Int[32],
    Hex = Base_Int[33],
    Binary = Base_Int[34],
    of_string_opt = Base_Int[35],
    to_string_hum = Base_Int[36],
    one = Base_Int[37],
    minus_one = Base_Int[38],
    rem = Base_Int[39],
    round = Base_Int[40],
    round_towards_zero = Base_Int[41],
    round_down = Base_Int[42],
    round_up = Base_Int[43],
    round_nearest = Base_Int[44],
    succ = Base_Int[45],
    pred = Base_Int[46],
    pow = Base_Int[47],
    bit_and = Base_Int[48],
    bit_or = Base_Int[49],
    bit_xor = Base_Int[50],
    bit_not = Base_Int[51],
    popcount = Base_Int[52],
    shift_left = Base_Int[53],
    shift_right = Base_Int[54],
    decr = Base_Int[55],
    incr = Base_Int[56],
    of_int32_exn = Base_Int[57],
    to_int32_exn = Base_Int[58],
    of_int64_exn = Base_Int[59],
    to_int64 = Base_Int[60],
    of_nativeint_exn = Base_Int[61],
    to_nativeint_exn = Base_Int[62],
    of_float_unchecked = Base_Int[63],
    num_bits = Base_Int[64],
    max_value = Base_Int[65],
    min_value = Base_Int[66],
    shift_right_logical = Base_Int[67],
    ceil_pow2 = Base_Int[68],
    floor_pow2 = Base_Int[69],
    ceil_log2 = Base_Int[70],
    is_pow2 = Base_Int[72],
    clz = Base_Int[73],
    ctz = Base_Int[74],
    O = Base_Int[75],
    symbol = Base_Int[76],
    lnot = Base_Int[77],
    abs = Base_Int[78],
    zero = Base_Int[79],
    symbol$0 = Base_Int[80],
    symbol$1 = Base_Int[81],
    symbol$2 = Base_Int[82],
    of_int = Base_Int[84],
    to_int32 = Base_Int[87],
    of_int64 = Base_Int[88],
    of_nativeint = Base_Int[89],
    _b_ = Base_Int[90],
    cst_Int_floor_log2_got_invalid = "[Int.floor_log2] got invalid input",
    cst_neg_overflow = "neg overflow",
    cst_abs_overflow = "abs overflow",
    cst_product$0 = cst_product$1,
    cst_u$2 = cst_u$3,
    cst_t$2 = cst_t$3,
    cst_overflow$2 = "( / ) overflow",
    cst_product = cst_product$1,
    cst_u$1 = cst_u$3,
    cst_t$1 = cst_t$3,
    cst_overflow$1 = "( * ) overflow",
    cst_diff = "diff",
    cst_u$0 = cst_u$3,
    cst_t$0 = cst_t$3,
    cst_overflow$0 = "( - ) overflow",
    cst_sum = "sum",
    cst_u = cst_u$3,
    cst_t = cst_t$3,
    cst_overflow = "( + ) overflow",
    _c_ = [0, "src/int63.ml", 110, 9],
    _a_ = include[1];
   function to_int(x){return [0, x];}
   function to_int_trunc(x){return x;}
   function to_nativeint_trunc(x){return caml_call1(_b_, x);}
   function to_nativeint(x){return [0, caml_call1(_b_, x)];}
   var repr = 0;
   function bswap32(t){
    return caml_int64_to_int32
            (caml_call1(Base_Int64[87], caml_int64_of_int32(t)));
   }
   function bswap48(t){
    return caml_int64_to_int32
            (caml_call1(Base_Int64[88], caml_int64_of_int32(t)));
   }
   if(_a_)
    var
     include$0 =
       [0,
        Base_Int63_emul[2],
        Base_Int63_emul[3],
        Base_Int63_emul[4],
        Base_Int63_emul[5],
        Base_Int63_emul[6],
        Base_Int63_emul[7],
        Base_Int63_emul[8],
        Base_Int63_emul[9],
        Base_Int63_emul[10],
        Base_Int63_emul[11],
        Base_Int63_emul[12],
        Base_Int63_emul[13],
        Base_Int63_emul[14],
        Base_Int63_emul[15],
        Base_Int63_emul[16],
        Base_Int63_emul[17],
        Base_Int63_emul[18],
        Base_Int63_emul[19],
        Base_Int63_emul[20],
        Base_Int63_emul[21],
        Base_Int63_emul[22],
        Base_Int63_emul[23],
        Base_Int63_emul[24],
        Base_Int63_emul[25],
        Base_Int63_emul[26],
        Base_Int63_emul[27],
        Base_Int63_emul[28],
        Base_Int63_emul[29],
        Base_Int63_emul[30],
        Base_Int63_emul[31],
        Base_Int63_emul[32],
        Base_Int63_emul[33],
        Base_Int63_emul[34],
        Base_Int63_emul[35],
        Base_Int63_emul[36],
        Base_Int63_emul[37],
        Base_Int63_emul[38],
        Base_Int63_emul[39],
        Base_Int63_emul[40],
        Base_Int63_emul[41],
        Base_Int63_emul[42],
        Base_Int63_emul[43],
        Base_Int63_emul[44],
        Base_Int63_emul[45],
        Base_Int63_emul[46],
        Base_Int63_emul[47],
        Base_Int63_emul[48],
        Base_Int63_emul[49],
        Base_Int63_emul[50],
        Base_Int63_emul[51],
        Base_Int63_emul[52],
        Base_Int63_emul[53],
        Base_Int63_emul[54],
        Base_Int63_emul[55],
        Base_Int63_emul[56],
        Base_Int63_emul[57],
        Base_Int63_emul[58],
        Base_Int63_emul[59],
        Base_Int63_emul[60],
        Base_Int63_emul[61],
        Base_Int63_emul[62],
        Base_Int63_emul[63],
        Base_Int63_emul[64],
        Base_Int63_emul[65],
        Base_Int63_emul[66],
        Base_Int63_emul[67],
        Base_Int63_emul[68],
        Base_Int63_emul[69],
        Base_Int63_emul[70],
        Base_Int63_emul[71],
        Base_Int63_emul[72],
        Base_Int63_emul[73],
        Base_Int63_emul[74],
        Base_Int63_emul[75],
        Base_Int63_emul[76],
        Base_Int63_emul[77],
        Base_Int63_emul[78],
        Base_Int63_emul[79],
        Base_Int63_emul[80],
        Base_Int63_emul[81],
        Base_Int63_emul[82],
        Base_Int63_emul[83],
        Base_Int63_emul[84],
        Base_Int63_emul[85],
        Base_Int63_emul[86],
        Base_Int63_emul[88],
        Base_Int63_emul[89],
        Base_Int63_emul[90],
        Base_Int63_emul[91],
        Base_Int63_emul[92],
        Base_Int63_emul[93],
        Base_Int63_emul[94],
        Base_Int63_emul[95],
        ,
        Base_Int63_emul[97],
        Base_Int63_emul[98],
        Base_Int63_emul[99],
        Base_Int63_emul[100],
        Base_Int63_emul[101],
        Base_Int63_emul[102],
        Base_Int63_emul[103],
        Base_Int63_emul[104],
        Base_Int63_emul[105],
        Base_Int63_emul[106],
        Base_Int63_emul[107],
        Base_Int63_emul[108],
        Base_Int63_emul[109],
        Base_Int63_emul[110],
        Base_Int63_emul[111],
        Base_Int63_emul[112],
        Base_Int63_emul[87],
        Base_Int63_emul[118],
        Base_Int63_emul[113],
        Base_Int63_emul[114],
        Base_Int63_emul[115]];
   else
    var
     _d_ = runtime.caml_bswap16,
     _e_ = function(_bp_){return _bp_;},
     _f_ = caml_int64_to_int32,
     _g_ = function(_bo_){return _bo_;},
     _h_ = function(_bn_, _bm_){return _bn_ >>> _bm_ | 0;},
     _i_ = function(_bl_, _bk_){return _bl_ >> _bk_;},
     _j_ = function(_bj_, _bi_){return _bj_ << _bi_;},
     _k_ = O[2],
     _l_ = function(_bh_, _bg_){return _bh_ ^ _bg_;},
     _m_ = function(_bf_, _be_){return _bf_ | _be_;},
     _n_ = function(_bd_, _bc_){return _bd_ & _bc_;},
     _o_ = O[7],
     _p_ = O[6],
     _q_ = O[5],
     _r_ = O[4],
     _s_ = function(_bb_){return - _bb_ | 0;},
     _t_ = O[3],
     _u_ = function(_ba_, _a$_){return _ba_ !== _a$_ ? 1 : 0;},
     _v_ = function(_a__, _a9_){return _a__ < _a9_ ? 1 : 0;},
     _w_ = function(_a8_, _a7_){return _a7_ < _a8_ ? 1 : 0;},
     _x_ = function(_a6_, _a5_){return _a6_ === _a5_ ? 1 : 0;},
     _y_ = function(_a4_, _a3_){return _a4_ <= _a3_ ? 1 : 0;},
     _z_ = function(_a2_, _a1_){return _a1_ <= _a2_ ? 1 : 0;},
     _A_ = O[1],
     _B_ = function(_a0_){return - _a0_ | 0;},
     _C_ = caml_div,
     _D_ = caml_mul,
     _E_ = function(_aZ_, _aY_){return _aZ_ - _aY_ | 0;},
     _F_ =
       [0,
        function(_aX_, _aW_){return _aX_ + _aW_ | 0;},
        _E_,
        _D_,
        _C_,
        _B_,
        _A_,
        _z_,
        _y_,
        _x_,
        _w_,
        _v_,
        _u_,
        _t_,
        _s_,
        _r_,
        _q_,
        _p_,
        _o_,
        _n_,
        _m_,
        _l_,
        _k_,
        _j_,
        _i_,
        _h_],
     _G_ = function(_aV_, _aU_){return _aV_ >>> _aU_ | 0;},
     _H_ = function(_aT_, _aS_){return _aT_ >> _aS_;},
     _I_ = function(_aR_, _aQ_){return _aR_ << _aQ_;},
     _J_ = function(_aP_, _aO_){return _aP_ ^ _aO_;},
     _K_ = function(_aN_, _aM_){return _aN_ | _aM_;},
     _L_ = function(_aL_, _aK_){return _aL_ & _aK_;},
     _M_ = caml_div,
     _N_ = function(_aJ_){return - _aJ_ | 0;},
     _O_ = function(_aI_){return - _aI_ | 0;},
     _P_ = caml_mul,
     _Q_ = function(_aH_, _aG_){return _aH_ - _aG_ | 0;},
     _R_ = function(_aF_, _aE_){return _aF_ + _aE_ | 0;},
     _S_ = function(_aD_, _aC_){return _aD_ !== _aC_ ? 1 : 0;},
     _T_ = function(_aB_, _aA_){return _aB_ < _aA_ ? 1 : 0;},
     _U_ = function(_az_, _ay_){return _ay_ < _az_ ? 1 : 0;},
     _V_ = function(_ax_, _aw_){return _ax_ === _aw_ ? 1 : 0;},
     _W_ = function(_av_, _au_){return _av_ <= _au_ ? 1 : 0;},
     include$0 =
       [0,
        t_sexp_grammar,
        of_float,
        to_float,
        of_int_exn,
        to_int_exn,
        hash_fold_t,
        hash,
        t_of_sexp,
        sexp_of_t,
        of_string,
        to_string,
        function(_at_, _as_){return _as_ <= _at_ ? 1 : 0;},
        _W_,
        _V_,
        _U_,
        _T_,
        _S_,
        equal,
        compare,
        min,
        max,
        ascending,
        descending,
        between,
        clamp_exn,
        clamp,
        comparator,
        pp,
        hashable,
        is_positive,
        is_non_negative,
        is_negative,
        is_non_positive,
        sign,
        compare_local,
        equal_local,
        invariant,
        Hex,
        Binary,
        of_string_opt,
        to_string_hum,
        zero,
        one,
        minus_one,
        _R_,
        _Q_,
        _P_,
        symbol,
        _O_,
        _N_,
        symbol$1,
        symbol$0,
        _M_,
        rem,
        symbol$2,
        _L_,
        _K_,
        _J_,
        lnot,
        _I_,
        _H_,
        round,
        round_towards_zero,
        round_down,
        round_up,
        round_nearest,
        abs,
        succ,
        pred,
        pow,
        bit_and,
        bit_or,
        bit_xor,
        bit_not,
        popcount,
        shift_left,
        shift_right,
        decr,
        incr,
        of_int32_exn,
        to_int32_exn,
        of_int64_exn,
        to_int64,
        of_nativeint_exn,
        to_nativeint_exn,
        num_bits,
        max_value,
        min_value,
        _G_,
        shift_right_logical,
        ceil_pow2,
        floor_pow2,
        ceil_log2,
        ,
        is_pow2,
        clz,
        ctz,
        _F_,
        of_int,
        to_int,
        to_int_trunc,
        of_int32_exn,
        to_int32,
        _g_,
        of_int64,
        _f_,
        of_nativeint,
        to_nativeint,
        _e_,
        to_nativeint_trunc,
        of_float_unchecked,
        repr,
        _d_,
        bswap32,
        bswap48];
   var
    t_sexp_grammar$0 = include$0[1],
    of_float$0 = include$0[2],
    to_float$0 = include$0[3],
    of_int_exn$0 = include$0[4],
    to_int_exn$0 = include$0[5],
    hash_fold_t$0 = include$0[6],
    hash$0 = include$0[7],
    t_of_sexp$0 = include$0[8],
    sexp_of_t$0 = include$0[9],
    of_string$0 = include$0[10],
    to_string$0 = include$0[11],
    symbol$3 = include$0[12],
    symbol$4 = include$0[13],
    symbol$5 = include$0[14],
    symbol$6 = include$0[15],
    symbol$7 = include$0[16],
    symbol$8 = include$0[17],
    equal$0 = include$0[18],
    compare$0 = include$0[19],
    min$0 = include$0[20],
    max$0 = include$0[21],
    ascending$0 = include$0[22],
    descending$0 = include$0[23],
    between$0 = include$0[24],
    clamp_exn$0 = include$0[25],
    clamp$0 = include$0[26],
    comparator$0 = include$0[27],
    pp$0 = include$0[28],
    hashable$0 = include$0[29],
    is_positive$0 = include$0[30],
    is_non_negative$0 = include$0[31],
    is_negative$0 = include$0[32],
    is_non_positive$0 = include$0[33],
    sign$0 = include$0[34],
    compare_local$0 = include$0[35],
    equal_local$0 = include$0[36],
    invariant$0 = include$0[37],
    Hex$0 = include$0[38],
    Binary$0 = include$0[39],
    of_string_opt$0 = include$0[40],
    to_string_hum$0 = include$0[41],
    zero$0 = include$0[42],
    one$0 = include$0[43],
    minus_one$0 = include$0[44],
    symbol$9 = include$0[45],
    symbol$10 = include$0[46],
    symbol$11 = include$0[47],
    symbol$12 = include$0[48],
    neg = include$0[49],
    symbol$13 = include$0[50],
    symbol$14 = include$0[51],
    symbol$15 = include$0[52],
    symbol$16 = include$0[53],
    rem$0 = include$0[54],
    symbol$17 = include$0[55],
    land = include$0[56],
    lor = include$0[57],
    lxor = include$0[58],
    lnot$0 = include$0[59],
    lsl = include$0[60],
    asr = include$0[61],
    round$0 = include$0[62],
    round_towards_zero$0 = include$0[63],
    round_down$0 = include$0[64],
    round_up$0 = include$0[65],
    round_nearest$0 = include$0[66],
    abs$0 = include$0[67],
    succ$0 = include$0[68],
    pred$0 = include$0[69],
    pow$0 = include$0[70],
    bit_and$0 = include$0[71],
    bit_or$0 = include$0[72],
    bit_xor$0 = include$0[73],
    bit_not$0 = include$0[74],
    popcount$0 = include$0[75],
    shift_left$0 = include$0[76],
    shift_right$0 = include$0[77],
    decr$0 = include$0[78],
    incr$0 = include$0[79],
    of_int32_exn$0 = include$0[80],
    to_int32_exn$0 = include$0[81],
    of_int64_exn$0 = include$0[82],
    to_int64$0 = include$0[83],
    of_nativeint_exn$0 = include$0[84],
    to_nativeint_exn$0 = include$0[85],
    num_bits$0 = include$0[86],
    max_value$0 = include$0[87],
    min_value$0 = include$0[88],
    lsr = include$0[89],
    shift_right_logical$0 = include$0[90],
    ceil_pow2$0 = include$0[91],
    floor_pow2$0 = include$0[92],
    ceil_log2$0 = include$0[93],
    is_pow2$0 = include$0[95],
    clz$0 = include$0[96],
    ctz$0 = include$0[97],
    O$0 = include$0[98],
    of_int$0 = include$0[99],
    to_int$0 = include$0[100],
    to_int_trunc$0 = include$0[101],
    of_int32 = include$0[102],
    to_int32$0 = include$0[103],
    to_int32_trunc = include$0[104],
    of_int64$0 = include$0[105],
    of_int64_trunc = include$0[106],
    of_nativeint$0 = include$0[107],
    to_nativeint$0 = include$0[108],
    of_nativeint_trunc = include$0[109],
    to_nativeint_trunc$0 = include$0[110],
    of_float_unchecked$0 = include$0[111],
    repr$0 = include$0[112],
    bswap16 = include$0[113],
    bswap32$0 = include$0[114],
    bswap48$0 = include$0[115];
   function symbol$18(t, u){
    var
     sum = caml_call2(symbol$9, t, u),
     _ao_ = caml_call2(bit_xor$0, t, caml_call1(bit_not$0, sum));
    if
     (caml_call2
       (symbol$7,
        caml_call2(bit_or$0, caml_call2(bit_xor$0, t, u), _ao_),
        zero$0))
     return sum;
    var
     _ap_ = [0, [0, cst_sum, caml_call1(sexp_of_t$0, sum)], 0],
     _aq_ = [0, [0, cst_u, caml_call1(sexp_of_t$0, u)], _ap_],
     _ar_ = [0, [0, cst_t, caml_call1(sexp_of_t$0, t)], _aq_];
    return caml_call1(raise_s, caml_call2(Base_Sexp[10], cst_overflow, _ar_));
   }
   function symbol$19(t, u){
    var
     diff = caml_call2(symbol$10, t, u),
     pos_diff = caml_call2(symbol$6, t, u);
    if(caml_call2(symbol$8, t, u)){
     var _ak_ = caml_call1(is_positive$0, diff);
     if(caml_call2(Base_Bool[15], pos_diff, _ak_)){
      var
       _al_ = [0, [0, cst_diff, caml_call1(sexp_of_t$0, diff)], 0],
       _am_ = [0, [0, cst_u$0, caml_call1(sexp_of_t$0, u)], _al_],
       _an_ = [0, [0, cst_t$0, caml_call1(sexp_of_t$0, t)], _am_];
      return caml_call1
              (raise_s, caml_call2(Base_Sexp[10], cst_overflow$0, _an_));
     }
    }
    return diff;
   }
   var negative_one = caml_call1(of_int$0, -1);
   function div_would_overflow(t, u){
    var _aj_ = caml_call2(symbol$5, t, min_value$0);
    return _aj_ ? caml_call2(symbol$5, u, negative_one) : _aj_;
   }
   function symbol$20(t, u){
    var product = caml_call2(symbol$11, t, u);
    a:
    if(caml_call2(symbol$8, u, zero$0)){
     if
      (!
       div_would_overflow(product, u)
       && ! caml_call2(symbol$8, caml_call2(symbol$16, product, u), t))
      break a;
     var
      _ag_ = [0, [0, cst_product, caml_call1(sexp_of_t$0, product)], 0],
      _ah_ = [0, [0, cst_u$1, caml_call1(sexp_of_t$0, u)], _ag_],
      _ai_ = [0, [0, cst_t$1, caml_call1(sexp_of_t$0, t)], _ah_];
     return caml_call1
             (raise_s, caml_call2(Base_Sexp[10], cst_overflow$1, _ai_));
    }
    return product;
   }
   function symbol$21(t, u){
    if(! div_would_overflow(t, u)) return caml_call2(symbol$16, t, u);
    var
     _ad_ =
       [0,
        [0,
         cst_product$0,
         caml_call1(sexp_of_t$0, caml_call2(symbol$16, t, u))],
        0],
     _ae_ = [0, [0, cst_u$2, caml_call1(sexp_of_t$0, u)], _ad_],
     _af_ = [0, [0, cst_t$2, caml_call1(sexp_of_t$0, t)], _ae_];
    return caml_call1
            (raise_s, caml_call2(Base_Sexp[10], cst_overflow$2, _af_));
   }
   function abs$1(t){
    return caml_call2(symbol$5, t, min_value$0)
            ? caml_call1(Base_Import[124], cst_abs_overflow)
            : caml_call1(abs$0, t);
   }
   function neg$0(t){
    return caml_call2(symbol$5, t, min_value$0)
            ? caml_call1(Base_Import[124], cst_neg_overflow)
            : caml_call1(neg, t);
   }
   if(63 !== num_bits$0)
    throw caml_maybe_attach_backtrace([0, Assert_failure, _c_], 1);
   function random_of_int(opt, bound){
    if(opt)
     var sth = opt[1], state = sth;
    else
     var state = Base_Random[19][1];
    var _ac_ = caml_call1(to_int_exn$0, bound);
    return caml_call1(of_int$0, caml_call2(Base_Random[19][7], state, _ac_));
   }
   function random_of_int64(opt, bound){
    if(opt)
     var sth = opt[1], state = sth;
    else
     var state = Base_Random[19][1];
    var _ab_ = caml_call1(to_int64$0, bound);
    return caml_call1
            (of_int64_exn$0, caml_call2(Base_Random[19][10], state, _ab_));
   }
   var random_of_int$0 = Base_Word_size[3] ? random_of_int : random_of_int64;
   function random_incl_of_int(opt, lo, hi){
    if(opt)
     var sth = opt[1], state = sth;
    else
     var state = Base_Random[19][1];
    var
     _$_ = caml_call1(to_int_exn$0, hi),
     _aa_ = caml_call1(to_int_exn$0, lo);
    return caml_call1
            (of_int$0, caml_call3(Base_Random[19][12], state, _aa_, _$_));
   }
   function random_incl_of_int64(opt, lo, hi){
    if(opt)
     var sth = opt[1], state = sth;
    else
     var state = Base_Random[19][1];
    var _Z_ = caml_call1(to_int64$0, hi), ___ = caml_call1(to_int64$0, lo);
    return caml_call1
            (of_int64_exn$0, caml_call3(Base_Random[19][15], state, ___, _Z_));
   }
   var
    random_incl =
      Base_Word_size[3] ? random_incl_of_int : random_incl_of_int64;
   function floor_log2(t){
    if(Base_Word_size[3]){
     var _X_ = caml_call1(to_int_exn$0, t);
     return caml_call1(Base_Int[71], _X_);
    }
    if(caml_call2(symbol$4, t, zero$0)){
     var _Y_ = [0, [0, cst, caml_call1(sexp_of_t$0, t)], 0];
     caml_call1
      (raise_s,
       caml_call2(Base_Sexp[10], cst_Int_floor_log2_got_invalid, _Y_));
    }
    var floor_log2 = [0, num_bits$0 - 2 | 0];
    for(;;){
     if
      (!
       caml_call2
        (equal$0,
         zero$0,
         caml_call2
          (bit_and$0, t, caml_call2(shift_left$0, one$0, floor_log2[1]))))
      return floor_log2[1];
     floor_log2[1] = floor_log2[1] - 1 | 0;
    }
   }
   var
    Base_Int63 =
      [0,
       t_sexp_grammar$0,
       of_float$0,
       to_float$0,
       of_int_exn$0,
       to_int_exn$0,
       hash_fold_t$0,
       hash$0,
       t_of_sexp$0,
       sexp_of_t$0,
       of_string$0,
       to_string$0,
       symbol$3,
       symbol$4,
       symbol$5,
       symbol$6,
       symbol$7,
       symbol$8,
       equal$0,
       compare$0,
       min$0,
       max$0,
       ascending$0,
       descending$0,
       between$0,
       clamp_exn$0,
       clamp$0,
       comparator$0,
       pp$0,
       hashable$0,
       is_positive$0,
       is_non_negative$0,
       is_negative$0,
       is_non_positive$0,
       sign$0,
       compare_local$0,
       equal_local$0,
       invariant$0,
       Hex$0,
       Binary$0,
       of_string_opt$0,
       to_string_hum$0,
       zero$0,
       one$0,
       minus_one$0,
       symbol$9,
       symbol$10,
       symbol$11,
       symbol$12,
       neg,
       symbol$13,
       symbol$14,
       symbol$15,
       symbol$16,
       rem$0,
       symbol$17,
       land,
       lor,
       lxor,
       lnot$0,
       lsl,
       asr,
       round$0,
       round_towards_zero$0,
       round_down$0,
       round_up$0,
       round_nearest$0,
       abs$0,
       succ$0,
       pred$0,
       pow$0,
       bit_and$0,
       bit_or$0,
       bit_xor$0,
       bit_not$0,
       popcount$0,
       shift_left$0,
       shift_right$0,
       decr$0,
       incr$0,
       of_int32_exn$0,
       to_int32_exn$0,
       of_int64_exn$0,
       to_int64$0,
       of_nativeint_exn$0,
       to_nativeint_exn$0,
       of_float_unchecked$0,
       num_bits$0,
       max_value$0,
       min_value$0,
       lsr,
       shift_right_logical$0,
       ceil_pow2$0,
       floor_pow2$0,
       ceil_log2$0,
       is_pow2$0,
       clz$0,
       ctz$0,
       O$0,
       [0, symbol$18, symbol$19, symbol$20, symbol$21, abs$1, neg$0],
       of_int$0,
       to_int$0,
       of_int32,
       to_int32$0,
       of_int64$0,
       of_nativeint$0,
       to_nativeint$0,
       to_int_trunc$0,
       to_int32_trunc,
       of_int64_trunc,
       of_nativeint_trunc,
       to_nativeint_trunc$0,
       bswap16,
       bswap32$0,
       bswap48$0,
       random_of_int$0,
       random_incl,
       floor_log2,
       [0, Base_Int63_emul[117], repr$0]];
   runtime.caml_register_global(32, Base_Int63, "Base__Int63");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Dictionary_mutable_intf
(function(globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Merge_into_action = [0],
    Definitions = [0, Merge_into_action],
    Base_Dictionary_mutable_intf = [0, Definitions];
   runtime.caml_register_global
    (0, Base_Dictionary_mutable_intf, "Base__Dictionary_mutable_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Dictionary_mutable
//# unitInfo: Requires: Base__Dictionary_mutable_intf
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Base_Dictionary_mutable = [0];
   runtime.caml_register_global
    (0, Base_Dictionary_mutable, "Base__Dictionary_mutable");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Hashtbl_intf
(function(globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Key = [0],
    Base_Hashtbl_intf = [0, Key];
   runtime.caml_register_global(0, Base_Hashtbl_intf, "Base__Hashtbl_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Avltree
//# unitInfo: Requires: Base__Error, Base__Import, Base__Sexp
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_src_avltree_ml = "src/avltree.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    Base_Sexp = global_data.Base__Sexp,
    Assert_failure = global_data.Assert_failure,
    Base_Import = global_data.Base__Import,
    Base_Error = global_data.Base__Error,
    raise_s = Base_Error[32],
    cst_Avltree_choose_exn_of_empt = "[Avltree.choose_exn] of empty hashtbl",
    _j_ = [0, cst_src_avltree_ml, 389, 15],
    _k_ = [0, cst_src_avltree_ml, 406, 20],
    _g_ = [0, cst_src_avltree_ml, 129, 30],
    _f_ = [0, cst_src_avltree_ml, 110, 26],
    _i_ = [0, cst_src_avltree_ml, 163, 30],
    _h_ = [0, cst_src_avltree_ml, 145, 26],
    _e_ = [0, cst_src_avltree_ml, 87, 22],
    _d_ = [0, cst_src_avltree_ml, 66, 6],
    _c_ = [0, cst_src_avltree_ml, 67, 6],
    _b_ = [0, cst_src_avltree_ml, 56, 6],
    _a_ = [0, cst_src_avltree_ml, 50, 6];
   function max(x, y){return y < x ? x : y;}
   var empty = 0;
   function is_empty(param){return typeof param === "number" ? 1 : 0;}
   function height(param){
    if(typeof param === "number") return 0;
    if(0 !== param[0]) return 1;
    var height = param[4];
    return height;
   }
   function invariant(t, compare){
    function inv(param){
     if(typeof param !== "number" && 0 === param[0]){
      var
       left = param[1],
       key = param[2],
       h = param[4],
       right = param[5],
       hr = height(right),
       hl = height(left);
      inv(left);
      inv(right);
      if(typeof left !== "number"){
       var left_key = 0 === left[0] ? left[2] : left[1];
       if(0 <= caml_call2(compare, left_key, key))
        throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
      }
      if(typeof right !== "number"){
       var right_key = 0 === right[0] ? right[2] : right[1];
       if(0 >= caml_call2(compare, right_key, key))
        throw caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1);
      }
      var _E_ = max(hl, hr);
      if(h !== caml_call2(Base_Import[91], _E_, 1))
       throw caml_maybe_attach_backtrace([0, Assert_failure, _d_], 1);
      var _F_ = caml_call2(Base_Import[93], hl, hr);
      if(2 < caml_call1(Base_Import[123], _F_))
       throw caml_maybe_attach_backtrace([0, Assert_failure, _c_], 1);
      return 0;
     }
     return 0;
    }
    return inv(t);
   }
   function update_height(x){
    if(typeof x !== "number" && 0 === x[0]){
     var
      left = x[1],
      old_height = x[4],
      right = x[5],
      _C_ = height(right),
      _D_ = max(height(left), _C_),
      new_height = caml_call2(Base_Import[91], _D_, 1);
     if(new_height !== old_height) x[4] = new_height;
     return;
    }
    throw caml_maybe_attach_backtrace([0, Assert_failure, _e_], 1);
   }
   function balance(root_node){
    if(typeof root_node !== "number" && 0 === root_node[0]){
     var
      left_node = root_node[1],
      right_node = root_node[5],
      hl = height(left_node),
      hr = height(right_node);
     if(caml_call2(Base_Import[91], hr, 2) < hl){
      if(typeof left_node !== "number" && 0 === left_node[0]){
       var
        left_node_left = left_node[1],
        left_node_right = left_node[5],
        _A_ = height(left_node_right);
       if(_A_ <= height(left_node_left)){
        root_node[1] = left_node_right;
        left_node[5] = root_node;
        update_height(root_node);
        update_height(left_node);
        return left_node;
       }
       if(typeof left_node_right !== "number" && 0 === left_node_right[0]){
        var lr_left = left_node_right[1], lr_right = left_node_right[5];
        left_node[5] = lr_left;
        root_node[1] = lr_right;
        left_node_right[5] = root_node;
        left_node_right[1] = left_node;
        update_height(left_node);
        update_height(root_node);
        update_height(left_node_right);
        return left_node_right;
       }
       throw caml_maybe_attach_backtrace([0, Assert_failure, _g_], 1);
      }
      throw caml_maybe_attach_backtrace([0, Assert_failure, _f_], 1);
     }
     if(caml_call2(Base_Import[91], hl, 2) >= hr){update_height(root_node); return root_node;
     }
     if(typeof right_node !== "number" && 0 === right_node[0]){
      var
       right_node_left = right_node[1],
       right_node_right = right_node[5],
       _B_ = height(right_node_left);
      if(_B_ <= height(right_node_right)){
       root_node[5] = right_node_left;
       right_node[1] = root_node;
       update_height(root_node);
       update_height(right_node);
       return right_node;
      }
      if(typeof right_node_left !== "number" && 0 === right_node_left[0]){
       var rl_left = right_node_left[1], rl_right = right_node_left[5];
       right_node[1] = rl_right;
       root_node[5] = rl_left;
       right_node_left[1] = root_node;
       right_node_left[5] = right_node;
       update_height(right_node);
       update_height(root_node);
       update_height(right_node_left);
       return right_node_left;
      }
      throw caml_maybe_attach_backtrace([0, Assert_failure, _i_], 1);
     }
     throw caml_maybe_attach_backtrace([0, Assert_failure, _h_], 1);
    }
    return root_node;
   }
   function add(t, replace, compare, added, k, v){
    if(typeof t === "number"){added[1] = 1; return [1, k, v];}
    if(0 !== t[0]){
     var k$1 = t[1], c$0 = caml_call2(compare, k$1, k);
     if(0 !== c$0){
      added[1] = 1;
      return 0 <= c$0 ? [0, 0, k, v, 2, t] : [0, t, k, v, 2, 0];
     }
     added[1] = 0;
     if(replace) t[2] = v;
     return t;
    }
    var
     left = t[1],
     k$0 = t[2],
     right = t[5],
     c = caml_call2(compare, k, k$0);
    if(0 === c){added[1] = 0; if(replace) t[3] = v; return t;}
    if(0 <= c){
     var right$0 = add(right, replace, compare, added, k, v);
     if(1 - (right$0 === right ? 1 : 0)) t[5] = right$0;
    }
    else{
     var left$0 = add(left, replace, compare, added, k, v);
     if(1 - (left$0 === left ? 1 : 0)) t[1] = left$0;
    }
    return added[1] ? balance(t) : t;
   }
   function first(t){
    var t$0 = t;
    for(;;){
     if(typeof t$0 === "number") return 0;
     if(0 === t$0[0]){
      var l = t$0[1];
      if(typeof l !== "number"){var t$0 = l; continue;}
      var v = t$0[3], k = t$0[2];
     }
     else
      var k$0 = t$0[1], v$0 = t$0[2], v = v$0, k = k$0;
     return [0, [0, k, v]];
    }
   }
   function last(t){
    var t$0 = t;
    for(;;){
     if(typeof t$0 === "number") return 0;
     if(0 === t$0[0]){
      var _y_ = t$0[2], _z_ = t$0[3];
      if(typeof t$0[5] !== "number"){var r = t$0[5], t$0 = r; continue;}
      var v = _z_, k = _y_;
     }
     else
      var k$0 = t$0[1], v$0 = t$0[2], v = v$0, k = k$0;
     return [0, [0, k, v]];
    }
   }
   function findi_and_call_impl
   (t,
    compare,
    k,
    arg1,
    arg2,
    call_if_found,
    call_if_not_found,
    if_found,
    if_not_found){
    var t$0 = t;
    for(;;){
     if(typeof t$0 === "number")
      return caml_call4(call_if_not_found, if_not_found, k, arg1, arg2);
     if(0 !== t$0[0]){
      var k$1 = t$0[1], v$0 = t$0[2];
      return 0 === caml_call2(compare, k, k$1)
              ? caml_call5(call_if_found, if_found, k$1, v$0, arg1, arg2)
              : caml_call4(call_if_not_found, if_not_found, k, arg1, arg2);
     }
     var
      left = t$0[1],
      k$0 = t$0[2],
      v = t$0[3],
      right = t$0[5],
      c = caml_call2(compare, k, k$0);
     if(0 === c)
      return caml_call5(call_if_found, if_found, k$0, v, arg1, arg2);
     var right$0 = 0 <= c ? right : left, t$0 = right$0;
    }
   }
   function call_if_found(if_found, param, data, _x_, _w_){return caml_call1(if_found, data);
   }
   function call_if_not_found(if_not_found, key, param, _v_){return caml_call1(if_not_found, key);
   }
   function find_and_call(t, compare, k, if_found, if_not_found){
    return findi_and_call_impl
            (t,
             compare,
             k,
             0,
             0,
             call_if_found,
             call_if_not_found,
             if_found,
             if_not_found);
   }
   function call_if_found$0(if_found, key, data, param, _u_){return caml_call2(if_found, key, data);
   }
   function call_if_not_found$0(if_not_found, key, param, _t_){return caml_call1(if_not_found, key);
   }
   function findi_and_call(t, compare, k, if_found, if_not_found){
    return findi_and_call_impl
            (t,
             compare,
             k,
             0,
             0,
             call_if_found$0,
             call_if_not_found$0,
             if_found,
             if_not_found);
   }
   function call_if_found$1(if_found, param, data, arg, _s_){return caml_call2(if_found, data, arg);
   }
   function call_if_not_found$1(if_not_found, key, arg, param){return caml_call2(if_not_found, key, arg);
   }
   function find_and_call1(t, compare, k, a, if_found, if_not_found){
    return findi_and_call_impl
            (t,
             compare,
             k,
             a,
             0,
             call_if_found$1,
             call_if_not_found$1,
             if_found,
             if_not_found);
   }
   function call_if_found$2(if_found, key, data, arg, param){return caml_call3(if_found, key, data, arg);
   }
   function call_if_not_found$2(if_not_found, key, arg, param){return caml_call2(if_not_found, key, arg);
   }
   function findi_and_call1(t, compare, k, a, if_found, if_not_found){
    return findi_and_call_impl
            (t,
             compare,
             k,
             a,
             0,
             call_if_found$2,
             call_if_not_found$2,
             if_found,
             if_not_found);
   }
   function call_if_found$3(if_found, param, data, arg1, arg2){return caml_call3(if_found, data, arg1, arg2);
   }
   function call_if_not_found$3(if_not_found, key, arg1, arg2){return caml_call3(if_not_found, key, arg1, arg2);
   }
   function find_and_call2(t, compare, k, a, b, if_found, if_not_found){
    return findi_and_call_impl
            (t,
             compare,
             k,
             a,
             b,
             call_if_found$3,
             call_if_not_found$3,
             if_found,
             if_not_found);
   }
   function call_if_found$4(if_found, key, data, arg1, arg2){return caml_call4(if_found, key, data, arg1, arg2);
   }
   function call_if_not_found$4(if_not_found, key, arg1, arg2){return caml_call3(if_not_found, key, arg1, arg2);
   }
   function findi_and_call2(t, compare, k, a, b, if_found, if_not_found){
    return findi_and_call_impl
            (t,
             compare,
             k,
             a,
             b,
             call_if_found$4,
             call_if_not_found$4,
             if_found,
             if_not_found);
   }
   function if_found(v){return [0, v];}
   function if_not_found(param){return 0;}
   function find(t, compare, k){
    return find_and_call(t, compare, k, if_found, if_not_found);
   }
   function if_found$0(param){return 1;}
   function if_not_found$0(param){return 0;}
   function mem(t, compare, k){
    return find_and_call(t, compare, k, if_found$0, if_not_found$0);
   }
   var
    remove =
      function _r_(_n_, _o_, _p_, _q_){return _r_.fun(_n_, _o_, _p_, _q_);};
   function remove_min_elt(tree){
    if(typeof tree === "number")
     throw caml_maybe_attach_backtrace([0, Assert_failure, _j_], 1);
    if(0 !== tree[0]) return 0;
    var left = tree[1];
    if(typeof left === "number"){var right = tree[5]; return right;}
    if(1 === left[0]){
     var k = tree[2], v = tree[3];
     if(typeof tree[5] === "number") return [1, k, v];
    }
    tree[1] = remove_min_elt(left);
    return balance(tree);
   }
   runtime.caml_update_dummy
    (remove,
     function(t, removed, compare, k$0){
      if(typeof t === "number"){removed[1] = 0; return 0;}
      if(0 !== t[0]){
       var k$2 = t[1];
       return 0 === caml_call2(compare, k$0, k$2)
               ? (removed[1] = 1, 0)
               : (removed[1] = 0, t);
      }
      var
       left$0 = t[1],
       k$1 = t[2],
       right = t[5],
       c = caml_call2(compare, k$0, k$1);
      if(0 !== c){
       if(0 <= c){
        var right$0 = caml_call4(remove, right, removed, compare, k$0);
        if(1 - (right$0 === right ? 1 : 0)) t[5] = right$0;
       }
       else{
        var left$1 = caml_call4(remove, left$0, removed, compare, k$0);
        if(1 - (left$1 === left$0 ? 1 : 0)) t[1] = left$1;
       }
       return removed[1] ? balance(t) : t;
      }
      removed[1] = 1;
      if(typeof left$0 === "number") return right;
      if(typeof right === "number") return left$0;
      var tree = right;
      for(;;){
       if(typeof tree === "number")
        var tree$0 = 0;
       else if(0 === tree[0]){
        var left = tree[1];
        if(typeof left !== "number"){var tree = left; continue;}
        var tree$0 = tree;
       }
       else
        var tree$0 = tree;
       if(typeof tree$0 === "number")
        throw caml_maybe_attach_backtrace([0, Assert_failure, _k_], 1);
       if(0 === tree$0[0]){
        tree$0[5] = remove_min_elt(right);
        tree$0[1] = left$0;
        var tree$1 = tree$0;
       }
       else
        var
         k = tree$0[1],
         v = tree$0[2],
         t2 = remove_min_elt(right),
         _l_ = height(t2),
         _m_ = max(height(left$0), _l_),
         tree$1 = [0, left$0, k, v, caml_call2(Base_Import[91], _m_, 1), t2];
       return balance(tree$1);
      }
     });
   function fold(t, init, f){
    var t$0 = t, init$0 = init;
    for(;;){
     if(typeof t$0 === "number") return init$0;
     if(0 !== t$0[0]){
      var key$4 = t$0[1], data$4 = t$0[2];
      return caml_call3(f, key$4, data$4, init$0);
     }
     var left = t$0[1];
     if(typeof left === "number"){
      var key = t$0[2], data = t$0[3], match = t$0[5];
      if(typeof match !== "number" && 0 !== match[0]){
       var rkey = match[1], rdata = match[2];
       return caml_call3(f, rkey, rdata, caml_call3(f, key, data, init$0));
      }
     }
     else{
      if(0 === left[0]){
       var key$1 = t$0[2], data$1 = t$0[3], match$0 = t$0[5];
       if(typeof match$0 !== "number" && 0 !== match$0[0]){
        var rkey$0 = match$0[1], rdata$0 = match$0[2];
        return caml_call3
                (f,
                 rkey$0,
                 rdata$0,
                 caml_call3(f, key$1, data$1, fold(left, init$0, f)));
       }
      }
      else{
       var
        lkey$0 = left[1],
        ldata$0 = left[2],
        key$3 = t$0[2],
        data$3 = t$0[3],
        match$1 = t$0[5];
       if(typeof match$1 === "number")
        return caml_call3
                (f, key$3, data$3, caml_call3(f, lkey$0, ldata$0, init$0));
       if(0 !== match$1[0]){
        var rkey$1 = match$1[1], rdata$1 = match$1[2];
        return caml_call3
                (f,
                 rkey$1,
                 rdata$1,
                 caml_call3
                  (f, key$3, data$3, caml_call3(f, lkey$0, ldata$0, init$0)));
       }
      }
      if(typeof left !== "number" && 1 === left[0]){
       var
        lkey = left[1],
        ldata = left[2],
        key$2 = t$0[2],
        data$2 = t$0[3],
        right$0 = t$0[5],
        init$2 =
          caml_call3(f, key$2, data$2, caml_call3(f, lkey, ldata, init$0)),
        t$0 = right$0,
        init$0 = init$2;
       continue;
      }
     }
     var
      key$0 = t$0[2],
      data$0 = t$0[3],
      right = t$0[5],
      init$1 = caml_call3(f, key$0, data$0, fold(left, init$0, f)),
      t$0 = right,
      init$0 = init$1;
    }
   }
   function iter(t, f){
    var t$0 = t;
    for(;;){
     if(typeof t$0 === "number") return 0;
     if(0 !== t$0[0]){
      var key$0 = t$0[1], data$0 = t$0[2];
      return caml_call2(f, key$0, data$0);
     }
     var left = t$0[1], key = t$0[2], data = t$0[3], right = t$0[5];
     iter(left, f);
     caml_call2(f, key, data);
     var t$0 = right;
    }
   }
   function mapi_inplace(t, f){
    var t$0 = t;
    for(;;){
     if(typeof t$0 === "number") return 0;
     if(0 !== t$0[0]){
      var key$0 = t$0[1], value$0 = t$0[2];
      t$0[2] = caml_call2(f, key$0, value$0);
      return 0;
     }
     var left = t$0[1], key = t$0[2], value = t$0[3], right = t$0[5];
     mapi_inplace(left, f);
     t$0[3] = caml_call2(f, key, value);
     var t$0 = right;
    }
   }
   function choose_exn(param){
    if(typeof param === "number")
     return caml_call1
             (raise_s,
              caml_call2(Base_Sexp[10], cst_Avltree_choose_exn_of_empt, 0));
    if(0 === param[0])
     var value = param[3], key = param[2];
    else
     var key$0 = param[1], value$0 = param[2], value = value$0, key = key$0;
    return [0, key, value];
   }
   var
    Base_Avltree =
      [0,
       empty,
       is_empty,
       invariant,
       add,
       first,
       last,
       find,
       find_and_call,
       find_and_call1,
       find_and_call2,
       findi_and_call,
       findi_and_call1,
       findi_and_call2,
       mem,
       remove,
       fold,
       iter,
       mapi_inplace,
       choose_exn];
   runtime.caml_register_global(16, Base_Avltree, "Base__Avltree");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Hashtbl
//# unitInfo: Requires: Base__Array, Base__Avltree, Base__Error, Base__Hashable, Base__Hashtbl_intf, Base__Import, Base__Int, Base__List, Base__Option, Base__Or_error, Base__Random, Base__Sexp, Base__With_return, Sexplib0__Sexp_grammar
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_src_hashtbl_ml = "src/hashtbl.ml",
    caml_check_bound = runtime.caml_check_bound,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_Avltree = global_data.Base__Avltree,
    Base_Import = global_data.Base__Import,
    Base_Hashable = global_data.Base__Hashable,
    Base_Array = global_data.Base__Array,
    Base_List = global_data.Base__List,
    Base_Or_error = global_data.Base__Or_error,
    Base_Sexp = global_data.Base__Sexp,
    Sexplib0_Sexp_grammar = global_data.Sexplib0__Sexp_grammar,
    Assert_failure = global_data.Assert_failure,
    Base_Error = global_data.Base__Error,
    Base_Option = global_data.Base__Option,
    Base_Random = global_data.Base__Random,
    Base_Int = global_data.Base__Int,
    Base_With_return = global_data.Base__With_return,
    with_return = Base_With_return[1],
    hash_param = Base_Hashable[5],
    hash = Base_Hashable[6],
    raise_s = Base_Error[32],
    cst_Hashtbl_merge_different_ha =
      "Hashtbl.merge: different 'hashable' values",
    cst_keys = "keys",
    cst_Hashtbl_create_with_key_du = "Hashtbl.create_with_key: duplicate keys",
    cst_Hashtbl_t_of_sexp_duplicat = "Hashtbl.t_of_sexp: duplicate key",
    _c_ = [0, cst_src_hashtbl_ml, 582, 4],
    cst_Hashtbl_of_alist_exn_dupli = "Hashtbl.of_alist_exn: duplicate key",
    _b_ = [0, "Hashtbl.find_exn: not found"],
    _a_ = [0, cst_src_hashtbl_ml, 333, 2],
    cst_Hashtbl_choose_randomly_ex =
      "[Hashtbl.choose_randomly_exn] of empty hashtbl",
    cst_Hashtbl_choose_exn_of_empt = "[Hashtbl.choose_exn] of empty hashtbl",
    cst_Hashtbl_add_exn_got_key_al = "Hashtbl.add_exn got key already present",
    cst_Hashtbl_mutation_not_allow =
      "Hashtbl: mutation not allowed during iteration";
   function sexp_of_key(t){return t[4][3];}
   function compare_key(t){return t[4][2];}
   function ensure_mutation_allowed(t){
    var _aM_ = 1 - t[5];
    return _aM_
            ? caml_call1(Base_Import[124], cst_Hashtbl_mutation_not_allow)
            : _aM_;
   }
   function without_mutating(t, f){
    if(! t[5]) return caml_call1(f, 0);
    t[5] = 0;
    try{var x = caml_call1(f, 0);}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     t[5] = 1;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
    t[5] = 1;
    return x;
   }
   var max_table_length = caml_call1(Base_Int[69], Base_Array[47]);
   function create(opt, _aK_, hashable, param){
    if(opt)
     var sth = opt[1], growth_allowed = sth;
    else
     var growth_allowed = 1;
    if(_aK_) var sth$0 = _aK_[1], size = sth$0; else var size = 0;
    var
     _aL_ = caml_call2(Base_Int[16], 1, size),
     size$0 = caml_call2(Base_Int[15], _aL_, max_table_length),
     size$1 = caml_call1(Base_Int[68], size$0);
    return [0,
            caml_call2(Base_Array[48], size$1, Base_Avltree[1]),
            0,
            growth_allowed,
            hashable,
            1];
   }
   function slot(t, key){
    var
     hash = caml_call1(t[4][1], key),
     _aJ_ = caml_call2(Base_Import[93], t[1].length - 1, 1);
    return caml_call2(Base_Import[116], hash, _aJ_);
   }
   function add_worker(t, replace, key, data){
    var
     i = slot(t, key),
     root = caml_check_bound(t[1], i)[1 + i],
     added = [0, 0],
     _aI_ = compare_key(t),
     new_root =
       caml_call6(Base_Avltree[4], root, replace, _aI_, added, key, data);
    if(added[1]) t[2] = caml_call2(Base_Import[91], t[2], 1);
    if(1 - (new_root === root ? 1 : 0))
     caml_check_bound(t[1], i)[1 + i] = new_root;
    return added[1];
   }
   function maybe_resize_table(t){
    var
     len = t[1].length - 1,
     should_grow = len < t[2] ? 1 : 0,
     _az_ = should_grow ? t[3] : should_grow;
    if(_az_){
     var
      _aA_ = caml_call2(Base_Import[88], len, 2),
      new_array_length = caml_call2(Base_Int[15], _aA_, max_table_length),
      _aB_ = len < new_array_length ? 1 : 0;
     if(_aB_){
      var
       new_table =
         caml_call2(Base_Array[48], new_array_length, Base_Avltree[1]),
       old_table = t[1];
      t[1] = new_table;
      t[2] = 0;
      var
       f = function(key, data){add_worker(t, 1, key, data); return 0;},
       _aD_ = caml_call2(Base_Import[93], old_table.length - 1, 1),
       _aC_ = 0;
      if(_aD_ >= 0){
       var i = _aC_;
       for(;;){
        var _aG_ = caml_check_bound(old_table, i)[1 + i];
        caml_call2(Base_Avltree[17], _aG_, f);
        var _aH_ = i + 1 | 0;
        if(_aD_ === i) break;
        var i = _aH_;
       }
      }
      var _aE_ = 0;
     }
     else
      var _aE_ = _aB_;
     var _aF_ = _aE_;
    }
    else
     var _aF_ = _az_;
    return _aF_;
   }
   function capacity(t){return t[1].length - 1;}
   function set(t, key, data){
    ensure_mutation_allowed(t);
    add_worker(t, 1, key, data);
    return maybe_resize_table(t);
   }
   function add(t, key, data){
    ensure_mutation_allowed(t);
    var added = add_worker(t, 0, key, data);
    return added ? (maybe_resize_table(t), 17724) : -1024851605;
   }
   function add_exn(t, key, data){
    if(17724 <= add(t, key, data)) return 0;
    var
     sexp_of_key$0 = sexp_of_key(t),
     error =
       caml_call5
        (Base_Error[19],
         0,
         0,
         cst_Hashtbl_add_exn_got_key_al,
         key,
         sexp_of_key$0);
    return caml_call1(Base_Error[31], error);
   }
   function clear(t){
    ensure_mutation_allowed(t);
    var _aw_ = caml_call2(Base_Import[93], t[1].length - 1, 1), _av_ = 0;
    if(_aw_ >= 0){
     var i = _av_;
     for(;;){
      var _ax_ = Base_Avltree[1];
      caml_check_bound(t[1], i)[1 + i] = _ax_;
      var _ay_ = i + 1 | 0;
      if(_aw_ === i) break;
      var i = _ay_;
     }
    }
    t[2] = 0;
    return 0;
   }
   function find_and_call(t, key, if_found, if_not_found){
    var _at_ = slot(t, key), tree = caml_check_bound(t[1], _at_)[1 + _at_];
    if(typeof tree === "number") return caml_call1(if_not_found, key);
    if(0 === tree[0]){
     var _au_ = compare_key(t);
     return caml_call5
             (Base_Avltree[8], tree, _au_, key, if_found, if_not_found);
    }
    var k = tree[1], v = tree[2];
    return 0 === caml_call2(compare_key(t), k, key)
            ? caml_call1(if_found, v)
            : caml_call1(if_not_found, key);
   }
   function find_and_call1(t, key, a, if_found, if_not_found){
    var _ar_ = slot(t, key), tree = caml_check_bound(t[1], _ar_)[1 + _ar_];
    if(typeof tree === "number") return caml_call2(if_not_found, key, a);
    if(0 === tree[0]){
     var _as_ = compare_key(t);
     return caml_call6
             (Base_Avltree[9], tree, _as_, key, a, if_found, if_not_found);
    }
    var k = tree[1], v = tree[2];
    return 0 === caml_call2(compare_key(t), k, key)
            ? caml_call2(if_found, v, a)
            : caml_call2(if_not_found, key, a);
   }
   function find_and_call2(t, key, a, b, if_found, if_not_found){
    var _ap_ = slot(t, key), tree = caml_check_bound(t[1], _ap_)[1 + _ap_];
    if(typeof tree === "number") return caml_call3(if_not_found, key, a, b);
    if(0 === tree[0]){
     var _aq_ = compare_key(t);
     return caml_call7
             (Base_Avltree[10], tree, _aq_, key, a, b, if_found, if_not_found);
    }
    var k = tree[1], v = tree[2];
    return 0 === caml_call2(compare_key(t), k, key)
            ? caml_call3(if_found, v, a, b)
            : caml_call3(if_not_found, key, a, b);
   }
   function findi_and_call(t, key, if_found, if_not_found){
    var _an_ = slot(t, key), tree = caml_check_bound(t[1], _an_)[1 + _an_];
    if(typeof tree === "number") return caml_call1(if_not_found, key);
    if(0 === tree[0]){
     var _ao_ = compare_key(t);
     return caml_call5
             (Base_Avltree[11], tree, _ao_, key, if_found, if_not_found);
    }
    var k = tree[1], v = tree[2];
    return 0 === caml_call2(compare_key(t), k, key)
            ? caml_call2(if_found, k, v)
            : caml_call1(if_not_found, key);
   }
   function findi_and_call1(t, key, a, if_found, if_not_found){
    var _al_ = slot(t, key), tree = caml_check_bound(t[1], _al_)[1 + _al_];
    if(typeof tree === "number") return caml_call2(if_not_found, key, a);
    if(0 === tree[0]){
     var _am_ = compare_key(t);
     return caml_call6
             (Base_Avltree[12], tree, _am_, key, a, if_found, if_not_found);
    }
    var k = tree[1], v = tree[2];
    return 0 === caml_call2(compare_key(t), k, key)
            ? caml_call3(if_found, k, v, a)
            : caml_call2(if_not_found, key, a);
   }
   function findi_and_call2(t, key, a, b, if_found, if_not_found){
    var _aj_ = slot(t, key), tree = caml_check_bound(t[1], _aj_)[1 + _aj_];
    if(typeof tree === "number") return caml_call3(if_not_found, key, a, b);
    if(0 === tree[0]){
     var _ak_ = compare_key(t);
     return caml_call7
             (Base_Avltree[13], tree, _ak_, key, a, b, if_found, if_not_found);
    }
    var k = tree[1], v = tree[2];
    return 0 === caml_call2(compare_key(t), k, key)
            ? caml_call4(if_found, k, v, a, b)
            : caml_call3(if_not_found, key, a, b);
   }
   function if_found(v){return [0, v];}
   function if_not_found(param){return 0;}
   function find(t, key){
    return find_and_call(t, key, if_found, if_not_found);
   }
   function mem(t, key){
    var _ah_ = slot(t, key), tree = caml_check_bound(t[1], _ah_)[1 + _ah_];
    if(typeof tree === "number") return 0;
    if(0 === tree[0]){
     var _ai_ = compare_key(t);
     return caml_call3(Base_Avltree[14], tree, _ai_, key);
    }
    var k = tree[1];
    return 0 === caml_call2(compare_key(t), k, key) ? 1 : 0;
   }
   function remove(t, key){
    ensure_mutation_allowed(t);
    var
     i = slot(t, key),
     root = caml_check_bound(t[1], i)[1 + i],
     removed = [0, 0],
     _ae_ = compare_key(t),
     new_root = caml_call4(Base_Avltree[15], root, removed, _ae_, key);
    if(1 - (root === new_root ? 1 : 0))
     caml_check_bound(t[1], i)[1 + i] = new_root;
    var
     _af_ = removed[1],
     _ag_ = _af_ ? (t[2] = caml_call2(Base_Import[93], t[2], 1), 0) : _af_;
    return _ag_;
   }
   function length(t){return t[2];}
   function is_empty(t){return 0 === t[2] ? 1 : 0;}
   function fold(t, init, f){
    if(0 === t[2]) return init;
    var n = t[1].length - 1, acc = [0, init], m = t[5];
    try{
     t[5] = 0;
     var _ac_ = caml_call2(Base_Import[93], n, 1), _ab_ = 0;
     if(_ac_ >= 0){
      var i = _ab_;
      for(;;){
       var bucket = t[1][1 + i];
       if(typeof bucket !== "number")
        if(0 === bucket[0])
         acc[1] = caml_call3(Base_Avltree[16], bucket, acc[1], f);
        else{
         var key = bucket[1], data = bucket[2];
         acc[1] = caml_call3(f, key, data, acc[1]);
        }
       var _ad_ = i + 1 | 0;
       if(_ac_ === i) break;
       var i = _ad_;
      }
     }
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     t[5] = m;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
    t[5] = m;
    return acc[1];
   }
   function iteri(t, f){
    if(0 === t[2]) return 0;
    var n = t[1].length - 1, m = t[5];
    try{
     t[5] = 0;
     var _$_ = caml_call2(Base_Import[93], n, 1), ___ = 0;
     if(_$_ >= 0){
      var i = ___;
      for(;;){
       var bucket = t[1][1 + i];
       if(typeof bucket !== "number")
        if(0 === bucket[0])
         caml_call2(Base_Avltree[17], bucket, f);
        else{var key = bucket[1], data = bucket[2]; caml_call2(f, key, data);}
       var _aa_ = i + 1 | 0;
       if(_$_ === i) break;
       var i = _aa_;
      }
     }
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     t[5] = m;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
    t[5] = m;
    return 0;
   }
   function iter(t, f){
    return iteri(t, function(param, data){return caml_call1(f, data);});
   }
   function iter_keys(t, f){
    return iteri(t, function(key, param){return caml_call1(f, key);});
   }
   function choose_nonempty(table, i){
    var i$0 = i;
    for(;;){
     var avltree = table[1 + i$0];
     if(! caml_call1(Base_Avltree[2], avltree))
      return caml_call1(Base_Avltree[19], avltree);
     var
      _Y_ = caml_call2(Base_Import[93], table.length - 1, 1),
      _Z_ = caml_call2(Base_Import[91], i$0, 1),
      i$1 = caml_call2(Base_Import[116], _Z_, _Y_),
      i$0 = i$1;
    }
   }
   function choose_exn(t){
    if(0 === t[2])
     caml_call1
      (raise_s, caml_call2(Base_Sexp[10], cst_Hashtbl_choose_exn_of_empt, 0));
    return choose_nonempty(t[1], 0);
   }
   function choose(t){return is_empty(t) ? 0 : [0, choose_nonempty(t[1], 0)];}
   function choose_randomly_nonempty(random_state, t){
    var
     start_idx = caml_call2(Base_Random[19][7], random_state, t[1].length - 1);
    return choose_nonempty(t[1], start_idx);
   }
   function choose_randomly(opt, t){
    if(opt)
     var sth = opt[1], random_state = sth;
    else
     var random_state = Base_Random[19][1];
    return is_empty(t) ? 0 : [0, choose_randomly_nonempty(random_state, t)];
   }
   function choose_randomly_exn(opt, t){
    if(opt)
     var sth = opt[1], random_state = sth;
    else
     var random_state = Base_Random[19][1];
    if(0 === t[2])
     caml_call1
      (raise_s, caml_call2(Base_Sexp[10], cst_Hashtbl_choose_randomly_ex, 0));
    return choose_randomly_nonempty(random_state, t);
   }
   function invariant(invariant_key, invariant_data, t){
    var _U_ = caml_call2(Base_Import[93], t[1].length - 1, 1), _T_ = 0;
    if(_U_ >= 0){
     var i = _T_;
     for(;;){
      var _V_ = compare_key(t), _W_ = caml_check_bound(t[1], i)[1 + i];
      caml_call2(Base_Avltree[3], _W_, _V_);
      var _X_ = i + 1 | 0;
      if(_U_ === i) break;
      var i = _X_;
     }
    }
    var
     real_len =
       fold
        (t,
         0,
         function(key, data, i){
          caml_call1(invariant_key, key);
          caml_call1(invariant_data, data);
          return caml_call2(Base_Import[91], i, 1);
         });
    if(real_len === t[2]) return 0;
    throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
   }
   function if_found$0(v, param){return v;}
   function if_not_found$0(k, t){
    var _S_ = [1, [0, _b_, [0, caml_call1(t[4][3], k), 0]]];
    throw caml_maybe_attach_backtrace([0, Base_Import[297], _S_], 1);
   }
   function find_exn(t, key){
    return find_and_call1(t, key, t, if_found$0, if_not_found$0);
   }
   function existsi(t, f){
    return caml_call1
            (with_return,
             function(r){
              iteri
               (t,
                function(key, data){
                 var _R_ = caml_call2(f, key, data);
                 return _R_ ? caml_call1(r, 1) : _R_;
                });
              return 0;
             });
   }
   function exists(t, f){
    return existsi(t, function(param, data){return caml_call1(f, data);});
   }
   function for_alli(t, f){
    return 1
           -
            existsi
             (t, function(key, data){return 1 - caml_call2(f, key, data);});
   }
   function for_all(t, f){
    return 1
           -
            existsi(t, function(param, data){return 1 - caml_call1(f, data);});
   }
   function counti(t, f){
    return fold
            (t,
             0,
             function(key, data, acc){
              return caml_call2(f, key, data)
                      ? caml_call2(Base_Import[91], acc, 1)
                      : acc;
             });
   }
   function count(t, f){
    return fold
            (t,
             0,
             function(param, data, acc){
              return caml_call1(f, data)
                      ? caml_call2(Base_Import[91], acc, 1)
                      : acc;
             });
   }
   function mapi(t, f){
    var new_t = create([0, t[3]], [0, t[2]], t[4], 0);
    iteri
     (t,
      function(key, data){return set(new_t, key, caml_call2(f, key, data));});
    return new_t;
   }
   function map(t, f){
    return mapi(t, function(param, data){return caml_call1(f, data);});
   }
   function copy(t){return map(t, function(_Q_){return _Q_;});}
   function filter_mapi(t, f){
    var new_t = create([0, t[3]], [0, t[2]], t[4], 0);
    iteri
     (t,
      function(key, data){
       var match = caml_call2(f, key, data);
       if(! match) return 0;
       var new_data = match[1];
       return set(new_t, key, new_data);
      });
    return new_t;
   }
   function filter_map(t, f){
    return filter_mapi(t, function(param, data){return caml_call1(f, data);});
   }
   function filteri(t, f){
    return filter_mapi
            (t,
             function(key, data){
              return caml_call2(f, key, data) ? [0, data] : 0;
             });
   }
   function filter(t, f){
    return filteri(t, function(param, data){return caml_call1(f, data);});
   }
   function filter_keys(t, f){
    return filteri(t, function(key, param){return caml_call1(f, key);});
   }
   function partition_mapi(t, f){
    var
     t0 = create([0, t[3]], [0, t[2]], t[4], 0),
     t1 = create([0, t[3]], [0, t[2]], t[4], 0);
    iteri
     (t,
      function(key, data){
       var match = caml_call2(f, key, data);
       if(0 === match[0]){
        var new_data = match[1];
        return set(t0, key, new_data);
       }
       var new_data$0 = match[1];
       return set(t1, key, new_data$0);
      });
    return [0, t0, t1];
   }
   function partition_map(t, f){
    return partition_mapi
            (t, function(param, data){return caml_call1(f, data);});
   }
   function partitioni_tf(t, f){
    return partition_mapi
            (t,
             function(key, data){
              return caml_call2(f, key, data) ? [0, data] : [1, data];
             });
   }
   function partition_tf(t, f){
    return partitioni_tf
            (t, function(param, data){return caml_call1(f, data);});
   }
   function find_or_add(t, id, default$0){
    function _P_(key){
     var default$1 = caml_call1(default$0, 0);
     set(t, key, default$1);
     return default$1;
    }
    return find_and_call(t, id, function(data){return data;}, _P_);
   }
   function findi_or_add(t, id, default$0){
    function _O_(key){
     var default$1 = caml_call1(default$0, key);
     set(t, key, default$1);
     return default$1;
    }
    return find_and_call(t, id, function(data){return data;}, _O_);
   }
   function find_and_remove(t, id){
    var result = find(t, id);
    if(caml_call1(Base_Option[53], result)) remove(t, id);
    return result;
   }
   function change(t, id, f){
    var match = caml_call1(f, find(t, id));
    if(! match) return remove(t, id);
    var data = match[1];
    return set(t, id, data);
   }
   function update_and_return(t, id, f){
    var data = caml_call1(f, find(t, id));
    set(t, id, data);
    return data;
   }
   function update(t, id, f){update_and_return(t, id, f); return 0;}
   function incr_by(remove_if_zero, t, key, by){
    return remove_if_zero
            ? change
              (t,
               key,
               function(opt){
                var
                 _N_ = caml_call2(Base_Option[30], opt, 0),
                 n = caml_call2(Base_Import[91], by, _N_);
                return 0 === n ? 0 : [0, n];
               })
            : update
              (t,
               key,
               function(param){
                if(! param) return by;
                var i = param[1];
                return caml_call2(Base_Import[91], by, i);
               });
   }
   function incr(opt, _M_, t, key){
    if(opt) var sth = opt[1], by = sth; else var by = 1;
    if(_M_)
     var sth$0 = _M_[1], remove_if_zero = sth$0;
    else
     var remove_if_zero = 0;
    return incr_by(remove_if_zero, t, key, by);
   }
   function decr(opt, _L_, t, key){
    if(opt) var sth = opt[1], by = sth; else var by = 1;
    if(_L_)
     var sth$0 = _L_[1], remove_if_zero = sth$0;
    else
     var remove_if_zero = 0;
    return incr_by(remove_if_zero, t, key, caml_call1(Base_Import[113], by));
   }
   function add_multi(t, key, data){
    return update
            (t,
             key,
             function(param){
              if(! param) return [0, data, 0];
              var l = param[1];
              return [0, data, l];
             });
   }
   function remove_multi(t, key){
    var match = find(t, key);
    if(! match) return 0;
    var _K_ = match[1];
    if(_K_ && _K_[2]){var tl = _K_[2]; return set(t, key, tl);}
    return remove(t, key);
   }
   function find_multi(t, key){
    var match = find(t, key);
    if(! match) return 0;
    var l = match[1];
    return l;
   }
   function create_mapped
   (growth_allowed, size, hashable, get_key, get_data, rows){
    if(size)
     var s = size[1], size$0 = s;
    else
     var size$0 = caml_call1(Base_List[45], rows);
    var
     res = create(growth_allowed, [0, size$0], hashable, 0),
     dupes = [0, 0];
    function _J_(r){
     var key = caml_call1(get_key, r), data = caml_call1(get_data, r);
     return mem(res, key)
             ? (dupes[1] = [0, key, dupes[1]], 0)
             : set(res, key, data);
    }
    caml_call2(Base_List[19], rows, _J_);
    var keys = dupes[1];
    return keys
            ? [0, 175765640, caml_call2(Base_List[126], keys, hashable[2])]
            : [0, 17724, res];
   }
   function of_alist(growth_allowed, size, hashable, lst){
    var
     match =
       create_mapped
        (growth_allowed,
         size,
         hashable,
         Base_Import[125],
         Base_Import[127],
         lst);
    if(175765640 <= match[1]){
     var k = match[2];
     return [0, -1048878709, caml_call1(Base_List[88], k)];
    }
    var t = match[2];
    return [0, 17724, t];
   }
   function of_alist_report_all_dups(growth_allowed, size, hashable, lst){
    return create_mapped
            (growth_allowed,
             size,
             hashable,
             Base_Import[125],
             Base_Import[127],
             lst);
   }
   function of_alist_or_error(growth_allowed, size, hashable, lst){
    var match = of_alist(growth_allowed, size, hashable, lst);
    if(17724 <= match[1]){var v = match[2]; return [0, v];}
    var key = match[2], sexp_of_key = hashable[3];
    return caml_call5
            (Base_Or_error[38],
             0,
             0,
             cst_Hashtbl_of_alist_exn_dupli,
             key,
             sexp_of_key);
   }
   function of_alist_exn(growth_allowed, size, hashable, lst){
    var match = of_alist_or_error(growth_allowed, size, hashable, lst);
    if(0 === match[0]){var v = match[1]; return v;}
    var e = match[1];
    return caml_call1(Base_Error[31], e);
   }
   function of_alist_multi(growth_allowed, size$0, hashable, rows){
    var get_data = Base_Import[127], get_key = Base_Import[125];
    if(size$0)
     var s = size$0[1], size = s;
    else
     var size = caml_call1(Base_List[45], rows);
    var res = create(growth_allowed, [0, size], hashable, 0);
    function _I_(r){
     var key = caml_call1(get_key, r), data = caml_call1(get_data, r);
     return add_multi(res, key, data);
    }
    caml_call2(Base_List[19], rows, _I_);
    return res;
   }
   function to_alist(t){
    return fold
            (t,
             0,
             function(key, data, list){return [0, [0, key, data], list];});
   }
   function sexp_of_t(sexp_of_key, sexp_of_data, t){
    var
     _D_ = to_alist(t),
     _E_ = Base_List[83],
     _F_ =
       caml_call2
        (_E_,
         _D_,
         function(param, _H_){
          var k2 = _H_[1], k1 = param[1];
          return caml_call2(t[4][2], k1, k2);
         }),
     _G_ = caml_call2(Base_Import[147], sexp_of_key, sexp_of_data);
    return caml_call1(caml_call1(Base_Import[149], _G_), _F_);
   }
   function t_of_sexp(hashable, k_of_sexp, d_of_sexp, sexp){
    var
     _t_ = caml_call2(Base_Import[171], k_of_sexp, d_of_sexp),
     alist = caml_call2(Base_Import[173], _t_, sexp),
     match =
       of_alist(0, [0, caml_call1(Base_List[45], alist)], hashable, alist);
    if(17724 <= match[1]){var v = match[2]; return v;}
    var k = match[2];
    function _u_(_C_){return _C_;}
    function _v_(_B_){return _B_;}
    var
     _w_ = caml_call2(Base_Import[171], _v_, _u_),
     alist_sexps = caml_call2(Base_Import[173], _w_, sexp),
     found_first_k = [0, 0];
    function _x_(param, _y_){
     var
      k2_sexp = _y_[1],
      k2 = param[1],
      _z_ = 0 === caml_call2(hashable[2], k, k2) ? 1 : 0;
     if(_z_){
      if(found_first_k[1])
       return caml_call2
               (Base_Import[156], cst_Hashtbl_t_of_sexp_duplicat, k2_sexp);
      found_first_k[1] = 1;
      var _A_ = 0;
     }
     else
      var _A_ = _z_;
     return _A_;
    }
    caml_call3(Base_List[67], alist, alist_sexps, _x_);
    throw caml_maybe_attach_backtrace([0, Assert_failure, _c_], 1);
   }
   function t_sexp_grammar(k_grammar, v_grammar){
    var _s_ = caml_call2(Base_List[137][3], k_grammar, v_grammar);
    return caml_call1(Sexplib0_Sexp_grammar[1], _s_);
   }
   function keys(t){
    return fold(t, 0, function(key, param, acc){return [0, key, acc];});
   }
   function data(t){
    return fold(t, 0, function(param, data, list){return [0, data, list];});
   }
   function group
   (growth_allowed, size, hashable, get_key, get_data, combine, rows){
    var groups = create(growth_allowed, size, hashable, 0);
    function _r_(row){
     var
      key = caml_call1(get_key, row),
      data = caml_call1(get_data, row),
      match = find(groups, key);
     if(match)
      var old = match[1], data$0 = caml_call2(combine, old, data);
     else
      var data$0 = data;
     return set(groups, key, data$0);
    }
    caml_call2(Base_List[19], rows, _r_);
    return groups;
   }
   function create_with_key(growth_allowed, size, hashable, get_key, rows){
    return create_mapped
            (growth_allowed,
             size,
             hashable,
             get_key,
             function(_q_){return _q_;},
             rows);
   }
   function create_with_key_or_error
   (growth_allowed, size, hashable, get_key, rows){
    var
     match = create_with_key(growth_allowed, size, hashable, get_key, rows);
    if(175765640 <= match[1]){
     var
      keys = match[2],
      sexp_of_key = hashable[3],
      _o_ =
        [0, [0, cst_keys, caml_call2(Base_Import[149], sexp_of_key, keys)], 0],
      _p_ = caml_call2(Base_Sexp[10], cst_Hashtbl_create_with_key_du, _o_);
     return caml_call1(Base_Or_error[39], _p_);
    }
    var t = match[2];
    return [0, t];
   }
   function create_with_key_exn(growth_allowed, size, hashable, get_key, rows){
    var
     _n_ =
       create_with_key_or_error(growth_allowed, size, hashable, get_key, rows);
    return caml_call1(Base_Or_error[34], _n_);
   }
   function maybe_set(t, key, f, d){
    var match = caml_call2(f, key, d);
    if(! match) return 0;
    var v = match[1];
    return set(t, key, v);
   }
   function merge(t_left, t_right, f){
    if(1 - caml_call2(Base_Hashable[1], t_left[4], t_right[4]))
     caml_call1(Base_Import[126], cst_Hashtbl_merge_different_ha);
    var new_t = create([0, t_left[3]], [0, t_left[2]], t_left[4], 0);
    without_mutating
     (t_left,
      function(param){
       return without_mutating
               (t_right,
                function(param){
                 iteri
                  (t_left,
                   function(key, left){
                    var match = find(t_right, key);
                    if(! match)
                     return maybe_set(new_t, key, f, [0, 847852583, left]);
                    var right = match[1];
                    return maybe_set
                            (new_t, key, f, [0, 737457313, [0, left, right]]);
                   });
                 return iteri
                         (t_right,
                          function(key, right){
                           return find(t_left, key)
                                   ? 0
                                   : maybe_set(new_t, key, f, [0, -57574468, right]);
                          });
                });
      });
    return new_t;
   }
   function merge_into(src, dst, f){
    return iteri
            (src,
             function(key, data){
              var
               dst_data = find(dst, key),
               action =
                 without_mutating
                  (dst,
                   function(param){return caml_call3(f, key, data, dst_data);});
              if(! action) return remove(dst, key);
              var data$0 = action[1];
              if(! dst_data) return set(dst, key, data$0);
              var
               dst_data$0 = dst_data[1],
               _m_ = 1 - (dst_data$0 === data$0 ? 1 : 0);
              return _m_ ? set(dst, key, data$0) : _m_;
             });
   }
   function filteri_inplace(t, f){
    var
     to_remove =
       fold
        (t,
         0,
         function(key, data, ac){
          return caml_call2(f, key, data) ? ac : [0, key, ac];
         });
    function _l_(key){return remove(t, key);}
    return caml_call2(Base_List[19], to_remove, _l_);
   }
   function filter_inplace(t, f){
    return filteri_inplace
            (t, function(param, data){return caml_call1(f, data);});
   }
   function filter_keys_inplace(t, f){
    return filteri_inplace
            (t, function(key, param){return caml_call1(f, key);});
   }
   function filter_mapi_inplace(t, f){
    var
     map_results =
       fold
        (t,
         0,
         function(key, data, ac){
          return [0, [0, key, caml_call2(f, key, data)], ac];
         });
    function _k_(param){
     var result = param[2], key = param[1];
     if(! result) return remove(t, key);
     var data = result[1];
     return set(t, key, data);
    }
    return caml_call2(Base_List[19], map_results, _k_);
   }
   function filter_map_inplace(t, f){
    return filter_mapi_inplace
            (t, function(param, data){return caml_call1(f, data);});
   }
   function mapi_inplace(t, f){
    ensure_mutation_allowed(t);
    return without_mutating
            (t,
             function(param){
              var _h_ = Base_Avltree[18];
              function _i_(_j_){return caml_call2(_h_, _j_, f);}
              return caml_call2(Base_Array[20], t[1], _i_);
             });
   }
   function map_inplace(t, f){
    return mapi_inplace(t, function(param, data){return caml_call1(f, data);});
   }
   function similar(equal, t$0, t){
    var _f_ = t$0[2] === t[2] ? 1 : 0;
    return _f_
            ? caml_call1
              (with_return,
               function(r){
                without_mutating
                 (t,
                  function(param){
                   return iteri
                           (t$0,
                            function(key, data){
                             var match = find(t, key);
                             if(! match) return caml_call1(r, 0);
                             var
                              data$0 = match[1],
                              _g_ = 1 - caml_call2(equal, data, data$0);
                             return _g_ ? caml_call1(r, 0) : _g_;
                            });
                  });
                return 1;
               })
            : _f_;
   }
   function Creators(Key){
    var hashable = Key[1];
    function create$0(growth_allowed, size, param){
     return create(growth_allowed, size, hashable, 0);
    }
    function of_alist$0(growth_allowed, size, l){
     return of_alist(growth_allowed, size, hashable, l);
    }
    function of_alist_report_all_dups$0(growth_allowed, size, l){
     return of_alist_report_all_dups(growth_allowed, size, hashable, l);
    }
    function of_alist_or_error$0(growth_allowed, size, l){
     return of_alist_or_error(growth_allowed, size, hashable, l);
    }
    function of_alist_exn$0(growth_allowed, size, l){
     return of_alist_exn(growth_allowed, size, hashable, l);
    }
    function t_of_sexp$0(k_of_sexp, d_of_sexp, sexp){
     return t_of_sexp(hashable, k_of_sexp, d_of_sexp, sexp);
    }
    function of_alist_multi$0(growth_allowed, size, l){
     return of_alist_multi(growth_allowed, size, hashable, l);
    }
    function create_mapped$0(growth_allowed, size, get_key, get_data, l){
     return create_mapped
             (growth_allowed, size, hashable, get_key, get_data, l);
    }
    function create_with_key$0(growth_allowed, size, get_key, l){
     return create_with_key(growth_allowed, size, hashable, get_key, l);
    }
    function create_with_key_or_error$0(growth_allowed, size, get_key, l){
     return create_with_key_or_error
             (growth_allowed, size, hashable, get_key, l);
    }
    function create_with_key_exn$0(growth_allowed, size, get_key, l){
     return create_with_key_exn(growth_allowed, size, hashable, get_key, l);
    }
    function group$0(growth_allowed, size, get_key, get_data, combine, l){
     return group
             (growth_allowed, size, hashable, get_key, get_data, combine, l);
    }
    return [0,
            t_of_sexp$0,
            create$0,
            of_alist$0,
            of_alist_report_all_dups$0,
            of_alist_or_error$0,
            of_alist_exn$0,
            of_alist_multi$0,
            create_mapped$0,
            create_with_key$0,
            create_with_key_or_error$0,
            create_with_key_exn$0,
            group$0];
   }
   var
    hashable = Base_Hashable[2],
    _d_ = Creators([0, hashable]),
    t_of_sexp$0 = _d_[1],
    create$0 = _d_[2],
    of_alist$0 = _d_[3],
    of_alist_report_all_dups$0 = _d_[4],
    of_alist_or_error$0 = _d_[5],
    of_alist_exn$0 = _d_[6],
    of_alist_multi$0 = _d_[7],
    create_mapped$0 = _d_[8],
    create_with_key$0 = _d_[9],
    create_with_key_or_error$0 = _d_[10],
    create_with_key_exn$0 = _d_[11],
    group$0 = _d_[12];
   function hashable$0(t){return t[4];}
   var Private = [0, hashable$0];
   function create$1(growth_allowed, size, m){
    return create(growth_allowed, size, caml_call1(Base_Hashable[3], m), 0);
   }
   function of_alist$1(growth_allowed, size, m, l){
    return of_alist(growth_allowed, size, caml_call1(Base_Hashable[3], m), l);
   }
   function of_alist_report_all_dups$1(growth_allowed, size, m, l){
    return of_alist_report_all_dups
            (growth_allowed, size, caml_call1(Base_Hashable[3], m), l);
   }
   function of_alist_or_error$1(growth_allowed, size, m, l){
    return of_alist_or_error
            (growth_allowed, size, caml_call1(Base_Hashable[3], m), l);
   }
   function of_alist_exn$1(growth_allowed, size, m, l){
    return of_alist_exn
            (growth_allowed, size, caml_call1(Base_Hashable[3], m), l);
   }
   function of_alist_multi$1(growth_allowed, size, m, l){
    return of_alist_multi
            (growth_allowed, size, caml_call1(Base_Hashable[3], m), l);
   }
   function create_mapped$1(growth_allowed, size, m, get_key, get_data, l){
    return create_mapped
            (growth_allowed,
             size,
             caml_call1(Base_Hashable[3], m),
             get_key,
             get_data,
             l);
   }
   function create_with_key$1(growth_allowed, size, m, get_key, l){
    return create_with_key
            (growth_allowed,
             size,
             caml_call1(Base_Hashable[3], m),
             get_key,
             l);
   }
   function create_with_key_or_error$1(growth_allowed, size, m, get_key, l){
    return create_with_key_or_error
            (growth_allowed,
             size,
             caml_call1(Base_Hashable[3], m),
             get_key,
             l);
   }
   function create_with_key_exn$1(growth_allowed, size, m, get_key, l){
    return create_with_key_exn
            (growth_allowed,
             size,
             caml_call1(Base_Hashable[3], m),
             get_key,
             l);
   }
   function group$1(growth_allowed, size, m, get_key, get_data, combine, l){
    return group
            (growth_allowed,
             size,
             caml_call1(Base_Hashable[3], m),
             get_key,
             get_data,
             combine,
             l);
   }
   function hashable_s(t){return caml_call1(Base_Hashable[4], t[4]);}
   function M(K){return [0];}
   function sexp_of_m_t(K, sexp_of_v, t){
    return sexp_of_t(K[1], sexp_of_v, t);
   }
   function m_t_of_sexp(K, v_of_sexp, sexp){
    var _e_ = K[1];
    return t_of_sexp
            (caml_call1(Base_Hashable[3], [0, K[2], K[3], K[4]]),
             _e_,
             v_of_sexp,
             sexp);
   }
   function m_t_sexp_grammar(K, v_grammar){
    return t_sexp_grammar(K[1], v_grammar);
   }
   function equal_m_t(param, equal_v, t1, t2){return similar(equal_v, t1, t2);
   }
   var
    Base_Hashtbl =
      [0,
       hash,
       hash_param,
       sexp_of_t,
       create$1,
       of_alist$1,
       of_alist_report_all_dups$1,
       of_alist_or_error$1,
       of_alist_exn$1,
       of_alist_multi$1,
       create_mapped$1,
       create_with_key$1,
       create_with_key_or_error$1,
       create_with_key_exn$1,
       group$1,
       sexp_of_key,
       clear,
       copy,
       fold,
       iter_keys,
       iter,
       iteri,
       existsi,
       exists,
       for_alli,
       for_all,
       counti,
       count,
       length,
       capacity,
       is_empty,
       mem,
       remove,
       choose,
       choose_exn,
       choose_randomly,
       choose_randomly_exn,
       set,
       add,
       add_exn,
       change,
       update,
       update_and_return,
       map,
       mapi,
       filter_map,
       filter_mapi,
       filter_keys,
       filter,
       filteri,
       partition_map,
       partition_mapi,
       partition_tf,
       partitioni_tf,
       find_or_add,
       findi_or_add,
       find,
       find_exn,
       find_and_call,
       find_and_call1,
       find_and_call2,
       findi_and_call,
       findi_and_call1,
       findi_and_call2,
       find_and_remove,
       merge,
       merge_into,
       keys,
       data,
       filter_keys_inplace,
       filter_inplace,
       filteri_inplace,
       map_inplace,
       mapi_inplace,
       filter_map_inplace,
       filter_mapi_inplace,
       similar,
       similar,
       to_alist,
       incr,
       decr,
       add_multi,
       remove_multi,
       find_multi,
       hashable_s,
       invariant,
       Creators,
       [0,
        t_of_sexp$0,
        sexp_of_t,
        t_sexp_grammar,
        hashable,
        invariant,
        create$0,
        of_alist$0,
        of_alist_report_all_dups$0,
        of_alist_or_error$0,
        of_alist_exn$0,
        of_alist_multi$0,
        create_mapped$0,
        create_with_key$0,
        create_with_key_or_error$0,
        create_with_key_exn$0,
        group$0,
        sexp_of_key,
        clear,
        copy,
        fold,
        iter_keys,
        iter,
        iteri,
        existsi,
        exists,
        for_alli,
        for_all,
        counti,
        count,
        length,
        capacity,
        is_empty,
        mem,
        remove,
        choose,
        choose_exn,
        choose_randomly,
        choose_randomly_exn,
        set,
        add,
        add_exn,
        change,
        update,
        update_and_return,
        map,
        mapi,
        filter_map,
        filter_mapi,
        filter_keys,
        filter,
        filteri,
        partition_map,
        partition_mapi,
        partition_tf,
        partitioni_tf,
        find_or_add,
        findi_or_add,
        find,
        find_exn,
        find_and_call,
        find_and_call1,
        find_and_call2,
        findi_and_call,
        findi_and_call1,
        findi_and_call2,
        find_and_remove,
        merge,
        merge_into,
        keys,
        data,
        filter_keys_inplace,
        filter_inplace,
        filteri_inplace,
        map_inplace,
        mapi_inplace,
        filter_map_inplace,
        filter_mapi_inplace,
        similar,
        similar,
        to_alist,
        incr,
        decr,
        add_multi,
        remove_multi,
        find_multi],
       M,
       sexp_of_m_t,
       m_t_of_sexp,
       m_t_sexp_grammar,
       equal_m_t,
       Private];
   runtime.caml_register_global(26, Base_Hashtbl, "Base__Hashtbl");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Hash_set_intf
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Base_Hash_set_intf = [0];
   runtime.caml_register_global(0, Base_Hash_set_intf, "Base__Hash_set_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Hash_set
//# unitInfo: Requires: Base__Array, Base__Container, Base__Hash_set_intf, Base__Hashable, Base__Hashtbl, Base__Import, Base__List, Base__Or_error, Base__With_return, Sexplib0__Sexp_grammar
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_Import = global_data.Base__Import,
    Sexplib0_Sexp_grammar = global_data.Sexplib0__Sexp_grammar,
    Base_List = global_data.Base__List,
    Base_Hashable = global_data.Base__Hashable,
    Base_Hashtbl = global_data.Base__Hashtbl,
    Base_Array = global_data.Base__Array,
    Base_Container = global_data.Base__Container,
    Base_Or_error = global_data.Base__Or_error,
    Base_With_return = global_data.Base__With_return,
    hashable_s = Base_Hashtbl[84],
    hashable = Base_Hashtbl[93][1],
    poly_hashable = Base_Hashtbl[87][4],
    with_return = Base_With_return[1],
    clear = Base_Hashtbl[16],
    length = Base_Hashtbl[28],
    mem = Base_Hashtbl[31],
    cst_Hash_set_t_of_sexp_got_a_d =
      "Hash_set.t_of_sexp got a duplicate element",
    cst_Hash_set_t_of_sexp_require = "Hash_set.t_of_sexp requires a list",
    _c_ = [0, 0],
    _b_ = [0, 0],
    cst_element_not_in_set = "element not in set",
    cst_element_already_exists = "element already exists",
    _a_ = [0, 0];
   function is_empty(t){return caml_call1(Base_Hashtbl[30], t);}
   function find_map(t, f){
    return caml_call1
            (with_return,
             function(r){
              function _C_(elt){
               var o = caml_call1(f, elt);
               return o ? caml_call1(r, o) : 0;
              }
              caml_call2(Base_Hashtbl[19], t, _C_);
              return 0;
             });
   }
   function find(t, f){
    return find_map(t, function(a){return caml_call1(f, a) ? [0, a] : 0;});
   }
   function add(t, k){return caml_call3(Base_Hashtbl[37], t, k, 0);}
   function strict_add(t, k){
    return caml_call2(mem, t, k)
            ? caml_call1(Base_Or_error[40], cst_element_already_exists)
            : (caml_call3(Base_Hashtbl[37], t, k, 0), _a_);
   }
   function strict_add_exn(t, k){
    var _B_ = strict_add(t, k);
    return caml_call1(Base_Or_error[34], _B_);
   }
   var remove = Base_Hashtbl[32];
   function strict_remove(t, k){
    if(caml_call2(mem, t, k)){caml_call2(remove, t, k); return _b_;}
    var _A_ = caml_call1(Base_Hashtbl[15], t);
    return caml_call5(Base_Or_error[38], 0, 0, cst_element_not_in_set, k, _A_);
   }
   function strict_remove_exn(t, k){
    var _z_ = strict_remove(t, k);
    return caml_call1(Base_Or_error[34], _z_);
   }
   function fold(t, init, f){
    function _y_(key, param, acc){return caml_call2(f, acc, key);}
    return caml_call3(Base_Hashtbl[18], t, init, _y_);
   }
   function iter(t, f){return caml_call2(Base_Hashtbl[19], t, f);}
   function count(t, f){return caml_call3(Base_Container[2], fold, t, f);}
   function sum(m, t, f){return caml_call4(Base_Container[7], fold, m, t, f);}
   function min_elt(t, compare){
    return caml_call3(Base_Container[3], fold, t, compare);
   }
   function max_elt(t, compare){
    return caml_call3(Base_Container[4], fold, t, compare);
   }
   function fold_result(t, init, f){
    return caml_call4(Base_Container[8], fold, init, f, t);
   }
   function fold_until(t, init, f, finish){
    return caml_call5(Base_Container[9], fold, init, f, finish, t);
   }
   var to_list = Base_Hashtbl[67];
   function sexp_of_t(sexp_of_e, t){
    var
     _w_ = caml_call1(to_list, t),
     func = Base_List[83],
     _x_ = caml_call2(func, _w_, caml_call1(hashable, t)[2]);
    return caml_call2(Base_Import[149], sexp_of_e, _x_);
   }
   function to_array(t){
    var
     len = caml_call1(length, t),
     index = [0, caml_call2(Base_Import[93], len, 1)];
    return fold
            (t,
             [0],
             function(acc, key){
              if(0 === acc.length - 1)
               return caml_call2(Base_Array[48], len, key);
              index[1] = caml_call2(Base_Import[93], index[1], 1);
              var _v_ = index[1];
              runtime.caml_check_bound(acc, _v_)[1 + _v_] = key;
              return acc;
             });
   }
   function exists(t, f){
    function _u_(key, param){return caml_call1(f, key);}
    return caml_call2(Base_Hashtbl[22], t, _u_);
   }
   function for_all(t, f){
    function _t_(key, param){return 1 - caml_call1(f, key);}
    return 1 - caml_call2(Base_Hashtbl[22], t, _t_);
   }
   function equal(t1, t2){
    function _r_(param, _s_){return 1;}
    return caml_call3(Base_Hashtbl[76], _r_, t1, t2);
   }
   function copy(t){return caml_call1(Base_Hashtbl[17], t);}
   function filter(t, f){
    function _q_(key, param){return caml_call1(f, key);}
    return caml_call2(Base_Hashtbl[49], t, _q_);
   }
   function union(t1, t2){
    function _o_(param, _p_){return _c_;}
    return caml_call3(Base_Hashtbl[65], t1, t2, _o_);
   }
   function diff(t1, t2){
    return filter
            (t1,
             function(key){return 1 - caml_call2(Base_Hashtbl[31], t2, key);});
   }
   function inter(t1, t2){
    var _m_ = caml_call1(length, t2);
    if(_m_ < caml_call1(length, t1))
     var larger = t1, smaller = t2;
    else
     var larger = t2, smaller = t1;
    function _n_(key, param){
     return caml_call2(Base_Hashtbl[31], larger, key);
    }
    return caml_call2(Base_Hashtbl[49], smaller, _n_);
   }
   function filter_inplace(t, f){
    var
     to_remove =
       fold(t, 0, function(ac, x){return caml_call1(f, x) ? ac : [0, x, ac];});
    function _l_(x){return caml_call2(remove, t, x);}
    return caml_call2(Base_List[19], to_remove, _l_);
   }
   function of_hashtbl_keys(hashtbl){
    function _j_(_k_){return 0;}
    return caml_call2(Base_Hashtbl[43], hashtbl, _j_);
   }
   function to_hashtbl(t, f){
    function _i_(key, param){return caml_call1(f, key);}
    return caml_call2(Base_Hashtbl[44], t, _i_);
   }
   function create(growth_allowed, size, m){
    return caml_call3(Base_Hashtbl[4], growth_allowed, size, m);
   }
   function of_list(growth_allowed, size, m, l){
    if(size)
     var x = size[1], size$0 = x;
    else
     var size$0 = caml_call1(Base_List[45], l);
    var t = caml_call3(Base_Hashtbl[4], growth_allowed, [0, size$0], m);
    function _h_(k){return add(t, k);}
    caml_call2(Base_List[19], l, _h_);
    return t;
   }
   function t_of_sexp(m, e_of_sexp, sexp){
    if(0 === sexp[0])
     return caml_call2(Base_Import[156], cst_Hash_set_t_of_sexp_require, sexp);
    var
     list = sexp[1],
     t = create(0, [0, caml_call1(Base_List[45], list)], m);
    function _g_(sexp){
     var e = caml_call1(e_of_sexp, sexp);
     return 0 === strict_add(t, e)[0]
             ? 0
             : caml_call2
               (Base_Import[156], cst_Hash_set_t_of_sexp_got_a_d, sexp);
    }
    caml_call2(Base_List[19], list, _g_);
    return t;
   }
   function Creators(Elt){
    function create$0(growth_allowed, size, param){
     return create(growth_allowed, size, caml_call1(Base_Hashable[4], Elt[1]));
    }
    function of_list$0(growth_allowed, size, l){
     return of_list
             (growth_allowed, size, caml_call1(Base_Hashable[4], Elt[1]), l);
    }
    function t_of_sexp$0(e_of_sexp, sexp){
     return t_of_sexp(caml_call1(Base_Hashable[4], Elt[1]), e_of_sexp, sexp);
    }
    return [0, t_of_sexp$0, create$0, of_list$0];
   }
   var
    _d_ = Creators([0, poly_hashable]),
    t_of_sexp$0 = _d_[1],
    create$0 = _d_[2],
    of_list$0 = _d_[3];
   function t_sexp_grammar(grammar){
    var _f_ = caml_call1(Base_List[7], grammar);
    return caml_call1(Sexplib0_Sexp_grammar[1], _f_);
   }
   function M(Elt){return [0];}
   function sexp_of_m_t(Elt, t){return sexp_of_t(Elt[1], t);}
   function m_t_of_sexp(Elt, sexp){
    return t_of_sexp([0, Elt[2], Elt[3], Elt[4]], Elt[1], sexp);
   }
   function m_t_sexp_grammar(Elt){
    var _e_ = caml_call1(Base_Import[194], Elt[1]);
    return caml_call1(Sexplib0_Sexp_grammar[1], _e_);
   }
   function equal_m_t(param, t1, t2){return equal(t1, t2);}
   var
    hashable$0 = Base_Hashtbl[93][1],
    Private = [0, hashable$0],
    Base_Hash_set =
      [0,
       sexp_of_t,
       create,
       of_list,
       length,
       is_empty,
       iter,
       fold,
       fold_result,
       fold_until,
       exists,
       for_all,
       count,
       sum,
       find,
       find_map,
       to_list,
       to_array,
       min_elt,
       max_elt,
       mem,
       copy,
       add,
       strict_add,
       strict_add_exn,
       remove,
       strict_remove,
       strict_remove_exn,
       clear,
       equal,
       filter,
       filter_inplace,
       inter,
       union,
       diff,
       of_hashtbl_keys,
       to_hashtbl,
       hashable_s,
       [0,
        t_of_sexp$0,
        sexp_of_t,
        t_sexp_grammar,
        create$0,
        of_list$0,
        length,
        is_empty,
        iter,
        fold,
        fold_result,
        fold_until,
        exists,
        for_all,
        count,
        sum,
        find,
        find_map,
        to_list,
        to_array,
        min_elt,
        max_elt,
        mem,
        copy,
        add,
        strict_add,
        strict_add_exn,
        remove,
        strict_remove,
        strict_remove_exn,
        clear,
        equal,
        filter,
        filter_inplace,
        inter,
        union,
        diff,
        of_hashtbl_keys,
        to_hashtbl],
       Creators,
       M,
       sexp_of_m_t,
       m_t_of_sexp,
       m_t_sexp_grammar,
       equal_m_t,
       Private];
   runtime.caml_register_global(16, Base_Hash_set, "Base__Hash_set");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Float
//# unitInfo: Requires: Base__Bytes0, Base__Char, Base__Comparable, Base__Comparator, Base__Error, Base__Float0, Base__Import, Base__Int, Base__Int63, Base__Int64, Base__Int_string_conversions, Base__Or_error, Base__Pretty_printer, Base__Printf, Base__Sexp, Base__String, Base__Word_size, Sexplib0__Sexp_conv_error, Stdlib__Int64
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$4 = "",
    cst_out_of_range_0 = " out of range [0, ",
    cst_s_1e = "%s%.1e",
    cst_is_too_large = ") is too large",
    cst_is_too_small_or_NaN = ") is too small or NaN",
    cst$5 = ".",
    cst_Float_int63_round_down_exn = "Float.int63_round_down_exn: argument (",
    cst_Float_int63_round_nearest_ =
      "Float.int63_round_nearest_portable_alloc_exn: argument (",
    cst_Float_int63_round_up_exn_a = "Float.int63_round_up_exn: argument (",
    cst_Float_iround_down_exn_argu = "Float.iround_down_exn: argument (",
    cst_Float_iround_nearest_exn_a = "Float.iround_nearest_exn: argument (",
    cst_Float_iround_nearest_exn_a$0 =
      "Float.iround_nearest_exn: argument (%f) is too large",
    cst_Float_iround_up_exn_argume = "Float.iround_up_exn: argument (",
    cst_Infinite = "Infinite",
    cst_Nan = "Nan",
    cst_Normal = "Normal",
    cst_Subnormal = "Subnormal",
    cst_Zero = "Zero",
    cst_infinite = "infinite",
    cst_nan$1 = "nan",
    cst_normal = "normal",
    cst_src_float_ml = "src/float.ml",
    cst_subnormal = "subnormal",
    cst_zero = "zero",
    caml_bytes_set = runtime.caml_bytes_set,
    caml_float_compare = runtime.caml_float_compare,
    caml_format_float = runtime.caml_format_float,
    caml_int64_bits_of_float = runtime.caml_int64_bits_of_float,
    caml_int64_or = runtime.caml_int64_or,
    caml_int_compare = runtime.caml_int_compare,
    caml_log10_float = runtime.caml_log10_float,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_string_compare = runtime.caml_string_compare,
    caml_string_notequal = runtime.caml_string_notequal;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$3 = cst$4,
    cst$2 = cst$4,
    cst$1 = "-",
    cst$0 = cst$5,
    cst = cst$5,
    all = [0, 0, [0, 1, [0, 2, [0, 3, [0, 4, 0]]]]],
    error_source_007 = "float.ml.Class.t",
    t_sexp_grammar$0 =
      [3,
       [0,
        2,
        [0,
         [1, [0, cst_Infinite, 0]],
         [0,
          [1, [0, cst_Nan, 0]],
          [0,
           [1, [0, cst_Normal, 0]],
           [0, [1, [0, cst_Subnormal, 0]], [0, [1, [0, cst_Zero, 0]], 0]]]]]]],
    module_name = "Base.Float",
    Base_Printf = global_data.Base__Printf,
    Base_Or_error = global_data.Base__Or_error,
    Base_Int = global_data.Base__Int,
    Base_Int63 = global_data.Base__Int63,
    Stdlib_Int64 = global_data.Stdlib__Int64,
    Base_Int64 = global_data.Base__Int64,
    Base_Sexp = global_data.Base__Sexp,
    Base_Error = global_data.Base__Error,
    Assert_failure = global_data.Assert_failure,
    Base_Import = global_data.Base__Import,
    Base_String = global_data.Base__String,
    Base_Bytes0 = global_data.Base__Bytes0,
    Base_Char = global_data.Base__Char,
    Base_Int_string_conversions = global_data.Base__Int_string_conversions,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Base_Float0 = global_data.Base__Float0,
    Base_Comparator = global_data.Base__Comparator,
    Base_Word_size = global_data.Base__Word_size,
    Base_Comparable = global_data.Base__Comparable,
    Base_Pretty_printer = global_data.Base__Pretty_printer,
    round_up = Base_Float0[1],
    round_down = Base_Float0[2],
    mod_float = Base_Float0[3],
    modf = Base_Float0[4],
    float_of_string = Base_Float0[5],
    float_of_string_opt = Base_Float0[6],
    nan = Base_Float0[7],
    max_value = Base_Float0[8],
    neg_infinity = Base_Float0[9],
    max_finite_value = Base_Float0[10],
    epsilon_float = Base_Float0[11],
    classify_float = Base_Float0[12],
    abs_float = Base_Float0[13],
    is_integer = Base_Float0[14],
    symbol = Base_Float0[15],
    symbol$0 = Base_Float0[16],
    frexp = Base_Float0[17],
    ldexp = Base_Float0[18],
    is_nan = Base_Float0[19],
    to_int64_preserve_order = Base_Float0[20],
    to_int64_preserve_order_exn = Base_Float0[21],
    of_int64_preserve_order = Base_Float0[22],
    one_ulp = Base_Float0[23],
    upper_bound_for_int = Base_Float0[24],
    lower_bound_for_int = Base_Float0[26],
    clamp_unchecked = Base_Float0[28],
    box = Base_Float0[29],
    raise_s = Base_Error[32],
    hash_fold_t = Base_Import[209],
    func = Base_Import[223],
    _R_ = [0, [8, [0, 0, 4], 0, [0, 8], 0], "%.8G"],
    _P_ =
      [0,
       [11,
        "exponent ",
        [4, 0, 0, 0, [11, cst_out_of_range_0, [4, 0, 0, 0, [12, 93, 0]]]]],
       "exponent %d out of range [0, %d]"],
    _Q_ =
      [0,
       [11,
        "mantissa ",
        [2, 0, [11, cst_out_of_range_0, [2, 0, [12, 93, 0]]]]],
       "mantissa %s out of range [0, %s]"],
    cst_Float_sign_exn_of_NAN = "Float.sign_exn of NAN",
    cst_max = "max",
    cst_min = "min",
    cst_clamp_requires_min_max = "clamp requires [min <= max]",
    _L_ = [0, cst_src_float_ml, 865, 2],
    _K_ =
      [0,
       [11,
        "Float.round_significant: invalid argument significant_digits:",
        [4, 0, 0, 0, 0]],
       "Float.round_significant: invalid argument significant_digits:%d"],
    _J_ = [0, [8, [0, 0, 3], 0, 1, 0], "%.*g"],
    _I_ = [0, "p"],
    cst_t = "t",
    cst_g = "g",
    cst_m = "m",
    cst_k = "k",
    _F_ = [0, cst_src_float_ml, 703, 8],
    _E_ = [0, cst_src_float_ml, 706, 8],
    _A_ = [0, cst_src_float_ml, 713, 8],
    _B_ = [0, cst_src_float_ml, 714, 8],
    _C_ = [0, [2, 0, [4, 0, 0, 0, [2, 0, [12, 32, 0]]]], "%s%d%s "],
    _D_ = [0, [2, 0, [4, 0, 0, 0, [2, 0, [4, 0, 0, 0, 0]]]], "%s%d%s%d"],
    _z_ = [0, cst_src_float_ml, 690, 8],
    cst_0 = ".0",
    _G_ = [0, [2, 0, [8, [0, 0, 1], 0, [0, 1], 0]], cst_s_1e],
    _H_ = [0, [2, 0, [8, [0, 0, 1], 0, [0, 1], 0]], cst_s_1e],
    cst_inf$1 = "-inf  ",
    cst_inf$2 = "inf  ",
    cst_nan$0 = "nan  ",
    cst_sexp = "sexp",
    cst_sexp_of_float_produced_str = "[sexp_of_float] produced strange sexp",
    _w_ =
      [0,
       [11, "to_string_hum: invalid argument ~decimals=", [4, 0, 0, 0, 0]],
       "to_string_hum: invalid argument ~decimals=%d"],
    _x_ = [0, [8, [0, 1, 0], 0, 1, 0], "%+.*f"],
    _y_ = [0, [8, [0, 0, 0], 0, 1, 0], "%.*f"],
    cst_inf = "inf",
    cst_inf$0 = "-inf",
    cst_nan = cst_nan$1,
    _r_ = [0, cst_Infinite],
    _s_ = [0, cst_Nan],
    _t_ = [0, cst_Normal],
    _u_ = [0, cst_Subnormal],
    _v_ = [0, cst_Zero],
    _p_ =
      [0,
       [11,
        cst_Float_int63_round_nearest_,
        [8, [0, 0, 0], 0, 0, [11, cst_is_too_large, 0]]],
       "Float.int63_round_nearest_portable_alloc_exn: argument (%f) is too large"],
    _q_ =
      [0,
       [11,
        cst_Float_int63_round_nearest_,
        [8, [0, 0, 0], 0, 0, [11, cst_is_too_small_or_NaN, 0]]],
       "Float.int63_round_nearest_portable_alloc_exn: argument (%f) is too small or NaN"],
    _n_ =
      [0,
       [11,
        cst_Float_int63_round_down_exn,
        [8, [0, 0, 0], 0, 0, [11, cst_is_too_large, 0]]],
       "Float.int63_round_down_exn: argument (%f) is too large"],
    _o_ =
      [0,
       [11,
        cst_Float_int63_round_down_exn,
        [8, [0, 0, 0], 0, 0, [11, cst_is_too_small_or_NaN, 0]]],
       "Float.int63_round_down_exn: argument (%f) is too small or NaN"],
    _l_ =
      [0,
       [11,
        cst_Float_int63_round_up_exn_a,
        [8, [0, 0, 0], 0, 0, [11, cst_is_too_large, 0]]],
       "Float.int63_round_up_exn: argument (%f) is too large"],
    _m_ =
      [0,
       [11,
        cst_Float_int63_round_up_exn_a,
        [8, [0, 0, 0], 0, 0, [11, cst_is_too_small_or_NaN, 0]]],
       "Float.int63_round_up_exn: argument (%f) is too small or NaN"],
    _j_ =
      [0,
       [11,
        cst_Float_iround_nearest_exn_a,
        [8, [0, 0, 0], 0, 0, [11, cst_is_too_large, 0]]],
       cst_Float_iround_nearest_exn_a$0],
    _k_ =
      [0,
       [11,
        cst_Float_iround_nearest_exn_a,
        [8, [0, 0, 0], 0, 0, [11, cst_is_too_small_or_NaN, 0]]],
       "Float.iround_nearest_exn: argument (%f) is too small or NaN"],
    _h_ =
      [0,
       [11,
        cst_Float_iround_nearest_exn_a,
        [8, [0, 0, 0], 0, 0, [11, cst_is_too_large, 0]]],
       cst_Float_iround_nearest_exn_a$0],
    _i_ =
      [0,
       [11,
        cst_Float_iround_nearest_exn_a,
        [8, [0, 0, 0], 0, 0, [11, ") is too small", 0]]],
       "Float.iround_nearest_exn: argument (%f) is too small"],
    _f_ =
      [0,
       [11,
        "Float.iround_towards_zero_exn: argument (",
        [8, [0, 0, 0], 0, 0, [11, ") is out of range or NaN", 0]]],
       "Float.iround_towards_zero_exn: argument (%f) is out of range or NaN"],
    _d_ =
      [0,
       [11,
        cst_Float_iround_down_exn_argu,
        [8, [0, 0, 0], 0, 0, [11, cst_is_too_large, 0]]],
       "Float.iround_down_exn: argument (%f) is too large"],
    _e_ =
      [0,
       [11,
        cst_Float_iround_down_exn_argu,
        [8, [0, 0, 0], 0, 0, [11, cst_is_too_small_or_NaN, 0]]],
       "Float.iround_down_exn: argument (%f) is too small or NaN"],
    _b_ =
      [0,
       [11,
        cst_Float_iround_up_exn_argume,
        [8, [0, 0, 0], 0, 0, [11, cst_is_too_large, 0]]],
       "Float.iround_up_exn: argument (%f) is too large"],
    _c_ =
      [0,
       [11,
        cst_Float_iround_up_exn_argume,
        [8, [0, 0, 0], 0, 0, [11, cst_is_too_small_or_NaN, 0]]],
       "Float.iround_up_exn: argument (%f) is too small or NaN"],
    _a_ = [0, [11, "Float.of_string ", [2, 0, 0]], "Float.of_string %s"];
   function hash(x){return caml_call1(func, x);}
   var
    globalize = Base_Import[283],
    t_of_sexp = Base_Import[164],
    sexp_of_t = Base_Import[140],
    t_sexp_grammar = Base_Import[186],
    hashable = [0, hash, caml_float_compare, sexp_of_t],
    compare = caml_float_compare,
    include = caml_call1(Base_Comparator[7], [0, compare, sexp_of_t]),
    comparator = include[1];
   function invariant(param){return 0;}
   function to_float(x){return x;}
   function of_float(x){return x;}
   function of_string(s){
    try{var _a3_ = caml_call1(float_of_string, s); return _a3_;}
    catch(_a4_){return caml_call3(Base_Printf[7], _a_, s, 0);}
   }
   function to_string(x){
    var
     y = caml_format_float("%.15g", x),
     y$0 =
       caml_call1(float_of_string, y) == x ? y : caml_format_float("%.17g", x),
     l = runtime.caml_ml_string_length(y$0),
     i = 0;
    for(;;){
     if(l <= i) return caml_call2(Base_Import[112], y$0, cst);
     var match = runtime.caml_string_get(y$0, i);
     a:
     {
      if(48 <= match){if(58 > match) break a;} else if(45 === match) break a;
      return y$0;
     }
     var i$0 = caml_call2(Base_Import[91], i, 1), i = i$0;
    }
   }
   var
    min_positive_subnormal_value = caml_call2(symbol, 2., -1074.),
    min_positive_normal_value = caml_call2(symbol, 2., -1022.),
    of_int = Base_Int[4],
    to_int = Base_Int[3],
    zero = 0.,
    one = 1.,
    minus_one = -1.,
    pi = 3.141592653589793,
    sqrt_pi = 1.772453850905516,
    sqrt_2pi = 2.5066282746310007,
    euler = 0.5772156649015329;
   function of_int63(i){return caml_call1(Base_Int63[3], i);}
   var
    of_int64 = runtime.caml_int64_to_float,
    to_int64 = runtime.caml_int64_of_float,
    iround_lbound = caml_call1(lower_bound_for_int, Base_Int[64]),
    iround_ubound = caml_call1(upper_bound_for_int, Base_Int[64]);
   function iround_up(t){
    if(! (0. < t))
     return iround_lbound <= t ? [0, caml_call1(Base_Int[63], t)] : 0;
    var t$0 = caml_call1(round_up, t);
    return t$0 <= iround_ubound ? [0, caml_call1(Base_Int[63], t$0)] : 0;
   }
   function iround_up_exn(t){
    if(0. < t){
     var t$0 = caml_call1(round_up, t);
     if(t$0 <= iround_ubound) return caml_call1(Base_Int[63], t$0);
     var _a1_ = caml_call1(box, t);
     return caml_call3(Base_Printf[7], _b_, _a1_, 0);
    }
    if(iround_lbound <= t) return caml_call1(Base_Int[63], t);
    var _a2_ = caml_call1(box, t);
    return caml_call3(Base_Printf[7], _c_, _a2_, 0);
   }
   function iround_down(t){
    if(0. <= t)
     return t <= iround_ubound ? [0, caml_call1(Base_Int[63], t)] : 0;
    var t$0 = caml_call1(round_down, t);
    return iround_lbound <= t$0 ? [0, caml_call1(Base_Int[63], t$0)] : 0;
   }
   function iround_down_exn(t){
    if(0. <= t){
     if(t <= iround_ubound) return caml_call1(Base_Int[63], t);
     var _aZ_ = caml_call1(box, t);
     return caml_call3(Base_Printf[7], _d_, _aZ_, 0);
    }
    var t$0 = caml_call1(round_down, t);
    if(iround_lbound <= t$0) return caml_call1(Base_Int[63], t$0);
    var _a0_ = caml_call1(box, t);
    return caml_call3(Base_Printf[7], _e_, _a0_, 0);
   }
   function iround_towards_zero(t){
    if(iround_lbound <= t && t <= iround_ubound)
     return [0, caml_call1(Base_Int[63], t)];
    return 0;
   }
   function iround_towards_zero_exn(t){
    if(iround_lbound <= t && t <= iround_ubound)
     return caml_call1(Base_Int[63], t);
    var _aY_ = caml_call1(box, t);
    return caml_call3(Base_Printf[7], _f_, _aY_, 0);
   }
   var
    _g_ = caml_call2(symbol, 2., 52.),
    round_nearest_lb = caml_call1(Base_Import[114], _g_),
    round_nearest_ub = caml_call2(symbol, 2., 52.),
    one_ulp_less_than_half = caml_call2(one_ulp, 759637122, 0.5);
   function add_half_for_round_nearest(t){
    var _aX_ = t == one_ulp_less_than_half ? one_ulp_less_than_half : 0.5;
    return caml_call2(Base_Import[92], t, _aX_);
   }
   function iround_nearest_32(t){
    if(0. <= t){
     var t$0 = add_half_for_round_nearest(t);
     return t$0 <= iround_ubound ? [0, caml_call1(Base_Int[63], t$0)] : 0;
    }
    var t$1 = caml_call1(round_down, caml_call2(Base_Import[92], t, 0.5));
    return iround_lbound <= t$1 ? [0, caml_call1(Base_Int[63], t$1)] : 0;
   }
   function iround_nearest_64(t){
    if(0. <= t){
     if(! (t < round_nearest_ub))
      return t <= iround_ubound ? [0, caml_call1(Base_Int[63], t)] : 0;
     var _aV_ = add_half_for_round_nearest(t);
     return [0, caml_call1(Base_Int[63], _aV_)];
    }
    if(! (round_nearest_lb < t))
     return iround_lbound <= t ? [0, caml_call1(Base_Int[63], t)] : 0;
    var _aW_ = caml_call1(round_down, caml_call2(Base_Import[92], t, 0.5));
    return [0, caml_call1(Base_Int[63], _aW_)];
   }
   var
    iround_nearest_64$0 =
      Base_Word_size[3] ? iround_nearest_64 : iround_nearest_32;
   function iround_nearest_exn_32(t){
    if(0. <= t){
     var t$0 = add_half_for_round_nearest(t);
     if(t$0 <= iround_ubound) return caml_call1(Base_Int[63], t$0);
     var _aT_ = caml_call1(box, t);
     return caml_call3(Base_Printf[7], _h_, _aT_, 0);
    }
    var t$1 = caml_call1(round_down, caml_call2(Base_Import[92], t, 0.5));
    if(iround_lbound <= t$1) return caml_call1(Base_Int[63], t$1);
    var _aU_ = caml_call1(box, t);
    return caml_call3(Base_Printf[7], _i_, _aU_, 0);
   }
   function iround_nearest_exn_64(t){
    if(0. <= t){
     if(t < round_nearest_ub){
      var _aP_ = add_half_for_round_nearest(t);
      return caml_call1(Base_Int[63], _aP_);
     }
     if(t <= iround_ubound) return caml_call1(Base_Int[63], t);
     var _aQ_ = caml_call1(box, t);
     return caml_call3(Base_Printf[7], _j_, _aQ_, 0);
    }
    if(round_nearest_lb < t){
     var _aR_ = caml_call1(round_down, caml_call2(Base_Import[92], t, 0.5));
     return caml_call1(Base_Int[63], _aR_);
    }
    if(iround_lbound <= t) return caml_call1(Base_Int[63], t);
    var _aS_ = caml_call1(box, t);
    return caml_call3(Base_Printf[7], _k_, _aS_, 0);
   }
   var
    iround_nearest_exn =
      Base_Word_size[3] ? iround_nearest_exn_64 : iround_nearest_exn_32;
   function iround_exn(opt, t){
    if(opt) var sth = opt[1], dir = sth; else var dir = 857423934;
    return 857423934 <= dir
            ? 1003109192
              <= dir
              ? iround_towards_zero_exn(t)
              : iround_nearest_exn(t)
            : 759637122 <= dir ? iround_down_exn(t) : iround_up_exn(t);
   }
   function iround(opt, t){
    if(opt) var sth = opt[1], dir = sth; else var dir = 857423934;
    try{var _aN_ = [0, iround_exn([0, dir], t)]; return _aN_;}
    catch(_aO_){return 0;}
   }
   function is_inf(t){
    return caml_call2(Base_Import[96], 1., t) == 0. ? 1 : 0;
   }
   function is_finite(t){
    return caml_call2(Base_Import[94], t, t) == 0. ? 1 : 0;
   }
   function min_inan(x, y){
    return caml_call1(is_nan, y)
            ? x
            : caml_call1(is_nan, x) ? y : x < y ? x : y;
   }
   function max_inan(x, y){
    return caml_call1(is_nan, y)
            ? x
            : caml_call1(is_nan, x) ? y : y < x ? x : y;
   }
   var
    add = Base_Import[92],
    sub = Base_Import[94],
    neg = Base_Import[114],
    scale = Base_Import[90];
   function square(x){return caml_call2(Base_Import[90], x, x);}
   function fractional(t){return caml_call1(Base_Import[125], t);}
   function integral(t){return caml_call1(Base_Import[127], t);}
   function round_towards_zero(t){
    return 0. <= t ? caml_call1(round_down, t) : caml_call1(round_up, t);
   }
   function round_nearest_inline(t){
    if(round_nearest_lb < t && t < round_nearest_ub)
     return caml_call1(round_down, add_half_for_round_nearest(t));
    return caml_call2(Base_Import[92], t, 0.);
   }
   function round_nearest(t){return round_nearest_inline(t);}
   function round_nearest_half_to_even(t){
    if(! (t <= round_nearest_lb) && ! (round_nearest_ub <= t)){
     var
      floor = caml_call1(round_down, t),
      ceil_or_succ = caml_call2(Base_Import[92], floor, 1.),
      diff_floor = caml_call2(Base_Import[94], t, floor),
      diff_ceil = caml_call2(Base_Import[94], ceil_or_succ, t);
     return diff_floor < diff_ceil
             ? floor
             : diff_ceil
               < diff_floor
               ? ceil_or_succ
               : caml_call2(mod_float, floor, 2.) == 0. ? floor : ceil_or_succ;
    }
    return caml_call2(Base_Import[92], t, 0.);
   }
   var
    int63_round_lbound = caml_call1(lower_bound_for_int, Base_Int63[87]),
    int63_round_ubound = caml_call1(upper_bound_for_int, Base_Int63[87]);
   function int63_round_up_exn(t){
    if(0. < t){
     var t$0 = caml_call1(round_up, t);
     if(t$0 <= int63_round_ubound) return caml_call1(Base_Int63[86], t$0);
     var _aL_ = caml_call1(Base_Float0[29], t);
     return caml_call3(Base_Printf[7], _l_, _aL_, 0);
    }
    if(int63_round_lbound <= t) return caml_call1(Base_Int63[86], t);
    var _aM_ = caml_call1(Base_Float0[29], t);
    return caml_call3(Base_Printf[7], _m_, _aM_, 0);
   }
   function int63_round_down_exn(t){
    if(0. <= t){
     if(t <= int63_round_ubound) return caml_call1(Base_Int63[86], t);
     var _aJ_ = caml_call1(Base_Float0[29], t);
     return caml_call3(Base_Printf[7], _n_, _aJ_, 0);
    }
    var t$0 = caml_call1(round_down, t);
    if(int63_round_lbound <= t$0) return caml_call1(Base_Int63[86], t$0);
    var _aK_ = caml_call1(Base_Float0[29], t);
    return caml_call3(Base_Printf[7], _o_, _aK_, 0);
   }
   function int63_round_nearest_portable_a(t0){
    var t = round_nearest_inline(t0);
    if(0. < t){
     if(t <= int63_round_ubound) return caml_call1(Base_Int63[86], t);
     var _aH_ = caml_call1(box, t0);
     return caml_call3(Base_Printf[7], _p_, _aH_, 0);
    }
    if(int63_round_lbound <= t) return caml_call1(Base_Int63[86], t);
    var _aI_ = caml_call1(box, t0);
    return caml_call3(Base_Printf[7], _q_, _aI_, 0);
   }
   function int63_round_nearest_arch64_noa(f){
    var _aG_ = iround_nearest_exn(f);
    return caml_call1(Base_Int63[100], _aG_);
   }
   var
    int63_round_nearest_exn =
      Base_Word_size[3]
       ? int63_round_nearest_arch64_noa
       : int63_round_nearest_portable_a;
   function round(opt, t){
    if(opt) var sth = opt[1], dir = sth; else var dir = 857423934;
    return 857423934 <= dir
            ? 1003109192 <= dir ? round_towards_zero(t) : round_nearest(t)
            : 759637122
              <= dir
              ? caml_call1(round_down, t)
              : caml_call1(round_up, t);
   }
   var compare_local = caml_int_compare, compare$0 = caml_int_compare;
   function t_of_sexp$0(sexp_008){
    a:
    {
     if(0 === sexp_008[0]){
      var _aA_ = sexp_008[1], _aB_ = caml_string_compare(_aA_, cst_infinite);
      b:
      {
       c:
       {
        d:
        {
         e:
         {
          if(0 <= _aB_){
           if(0 < _aB_){
            if(! caml_string_notequal(_aA_, cst_nan$1)) break e;
            if(! caml_string_notequal(_aA_, cst_normal)) break d;
            if(! caml_string_notequal(_aA_, cst_subnormal)) break c;
            if(caml_string_notequal(_aA_, cst_zero)) break a;
            break b;
           }
          }
          else if(caml_string_notequal(_aA_, cst_Infinite)){
           if(! caml_string_notequal(_aA_, cst_Nan)) break e;
           if(! caml_string_notequal(_aA_, cst_Normal)) break d;
           if(! caml_string_notequal(_aA_, cst_Subnormal)) break c;
           if(caml_string_notequal(_aA_, cst_Zero)) break a;
           break b;
          }
          return 0;
         }
         return 1;
        }
        return 2;
       }
       return 3;
      }
      return 4;
     }
     var _aC_ = sexp_008[1];
     if(! _aC_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_007, sexp_008);
     var _aD_ = _aC_[1];
     if(0 !== _aD_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_007, sexp_008);
     var _aE_ = _aD_[1], _aF_ = caml_string_compare(_aE_, cst_infinite);
     b:
     {
      c:
      {
       d:
       {
        e:
        {
         if(0 <= _aF_){
          if(0 < _aF_){
           if(! caml_string_notequal(_aE_, cst_nan$1)) break e;
           if(! caml_string_notequal(_aE_, cst_normal)) break d;
           if(! caml_string_notequal(_aE_, cst_subnormal)) break c;
           if(caml_string_notequal(_aE_, cst_zero)) break a;
           break b;
          }
         }
         else if(caml_string_notequal(_aE_, cst_Infinite)){
          if(! caml_string_notequal(_aE_, cst_Nan)) break e;
          if(! caml_string_notequal(_aE_, cst_Normal)) break d;
          if(! caml_string_notequal(_aE_, cst_Subnormal)) break c;
          if(caml_string_notequal(_aE_, cst_Zero)) break a;
          break b;
         }
         return caml_call2
                 (Sexplib0_Sexp_conv_error[7], error_source_007, sexp_008);
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[7], error_source_007, sexp_008);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[7], error_source_007, sexp_008);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_007, sexp_008);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[7], error_source_007, sexp_008);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_007, sexp_008);
   }
   function sexp_of_t$0(param){
    switch(param){
      case 0:
       return _r_;
      case 1:
       return _s_;
      case 2:
       return _t_;
      case 3:
       return _u_;
      default: return _v_;
    }
   }
   function to_string$0(t){
    var _az_ = sexp_of_t$0(t);
    return caml_call1(Base_Import[160], _az_);
   }
   function of_string$0(s){
    return t_of_sexp$0(caml_call1(Base_Import[136], s));
   }
   function classify(t){
    switch(caml_call1(classify_float, t)){
      case 0:
       return 2;
      case 1:
       return 3;
      case 2:
       return 4;
      case 3:
       return 0;
      default: return 1;
    }
   }
   function insert_underscores(opt, _aw_, string){
    if(opt) var sth = opt[1], delimiter = sth; else var delimiter = 95;
    if(_aw_) var sth$0 = _aw_[1], strip_zero = sth$0; else var strip_zero = 0;
    var match = caml_call2(Base_String[100], string, 46);
    if(! match)
     return caml_call2(Base_Int_string_conversions[6], string, delimiter);
    var
     match$0 = match[1],
     right = match$0[2],
     left = match$0[1],
     left$0 = caml_call2(Base_Int_string_conversions[6], left, delimiter);
    if(strip_zero)
     var
      _ax_ = [0, function(c){return caml_call2(Base_Char[12], c, 48);}],
      right$0 = caml_call2(Base_String[108], _ax_, right);
    else
     var right$0 = right;
    if(! caml_string_notequal(right$0, cst$4)) return left$0;
    var _ay_ = caml_call2(Base_Import[112], cst$0, right$0);
    return caml_call2(Base_Import[112], left$0, _ay_);
   }
   function to_string_hum(delimiter, opt, strip_zero, _av_, f){
    if(opt) var sth = opt[1], decimals = sth; else var decimals = 3;
    if(_av_)
     var sth$0 = _av_[1], explicit_plus = sth$0;
    else
     var explicit_plus = 0;
    if(decimals < 0) caml_call3(Base_Printf[7], _w_, decimals, 0);
    var match = classify(f);
    if(1 === match) return cst_nan;
    if(! match) return 0. < f ? cst_inf : cst_inf$0;
    var
     s =
       explicit_plus
        ? caml_call3(Base_Printf[2], _x_, decimals, f)
        : caml_call3(Base_Printf[2], _y_, decimals, f);
    return insert_underscores(delimiter, strip_zero, s);
   }
   function sexp_of_t$1(t){
    var sexp = caml_call1(sexp_of_t, t);
    if(1009018843 <= Base_Sexp[19][1]) return sexp;
    if(0 === sexp[0]){
     var string = sexp[1];
     return caml_call4(Base_String[70], 0, 0, string, 69)
             ? sexp
             : [0, insert_underscores(0, 0, string)];
    }
    var _au_ = [0, [0, cst_sexp, caml_call1(Base_Sexp[5], sexp)], 0];
    return caml_call1
            (raise_s,
             caml_call2(Base_Sexp[10], cst_sexp_of_float_produced_str, _au_));
   }
   function to_padded_compact_string_custo
   (t, opt, kilo, mega, giga, tera, peta, param){
    if(opt) var sth = opt[1], prefix = sth; else var prefix = cst$2;
    var match = classify(t);
    if(1 === match) return cst_nan$0;
    if(! match) return t < 0. ? cst_inf$1 : cst_inf$2;
    function go(t){
     function conv(mag, numerator, denominator){
      a:
      {
       if(denominator == 100. && 999.95 <= numerator) break a;
       if
        (100000. <= denominator
         &&
          round_nearest(caml_call2(Base_Import[90], denominator, 9.9995))
          <= numerator)
        break a;
       throw caml_maybe_attach_backtrace([0, Assert_failure, _F_], 1);
      }
      if
       (!
        (numerator
        < round_nearest(caml_call2(Base_Import[90], denominator, 9999.5))))
       throw caml_maybe_attach_backtrace([0, Assert_failure, _E_], 1);
      var
       k =
         caml_call1
          (round_down, caml_call2(Base_Import[96], numerator, denominator)),
       lower = caml_call2(Base_Import[90], denominator, k),
       _at_ = caml_call2(Base_Import[92], k, 1.),
       higher = caml_call2(Base_Import[90], denominator, _at_),
       diff_right = caml_call2(Base_Import[94], higher, numerator),
       diff_left = caml_call2(Base_Import[94], numerator, lower),
       k$0 = iround_nearest_exn(k),
       k$1 =
         diff_right < diff_left
          ? caml_call2(Base_Import[91], k$0, 1)
          : diff_left
            < diff_right
            ? k$0
            : 0
              === caml_call2(Base_Import[122], k$0, 2)
              ? k$0
              : caml_call2(Base_Import[91], k$0, 1),
       d = caml_call2(Base_Import[122], k$1, 10),
       i = caml_call2(Base_Import[95], k$1, 10);
      if(0 <= i && 1000 > i){
       if(0 <= d && 10 > d)
        return 0 === d
                ? caml_call4(Base_Printf[2], _C_, prefix, i, mag)
                : caml_call5(Base_Printf[2], _D_, prefix, i, mag, d);
       throw caml_maybe_attach_backtrace([0, Assert_failure, _B_], 1);
      }
      throw caml_maybe_attach_backtrace([0, Assert_failure, _A_], 1);
     }
     if(! (t < 999.95)){
      if(t < 999950.) return conv(kilo, t, 100.);
      if(t < 999950000.) return conv(mega, t, 100000.);
      if(t < 999950000000.) return conv(giga, t, 100000000.);
      if(t < 999950000000000.) return conv(tera, t, 100000000000.);
      if(! peta) return caml_call3(Base_Printf[2], _H_, prefix, t);
      var peta$0 = peta[1];
      return t < 999950000000000000.
              ? conv(peta$0, t, 100000000000000.)
              : caml_call3(Base_Printf[2], _G_, prefix, t);
     }
     if(0. <= t && t < 999.95){
      var
       x = caml_call2(Base_Import[112], prefix, caml_format_float("%.1f", t));
      if(! caml_call2(Base_String[96], x, cst_0)) return x;
      var
       x$0 = caml_call1(Base_Bytes0[21], x),
       n = runtime.caml_ml_bytes_length(x$0);
      caml_bytes_set(x$0, caml_call2(Base_Import[93], n, 1), 32);
      caml_bytes_set(x$0, caml_call2(Base_Import[93], n, 2), 32);
      return runtime.caml_string_of_bytes(x$0);
     }
     throw caml_maybe_attach_backtrace([0, Assert_failure, _z_], 1);
    }
    if(0. <= t) return go(t);
    var _as_ = go(caml_call1(Base_Import[114], t));
    return caml_call2(Base_Import[112], cst$1, _as_);
   }
   function to_padded_compact_string(t){
    return to_padded_compact_string_custo
            (t, 0, cst_k, cst_m, cst_g, cst_t, _I_, 0);
   }
   function int_pow(x, n){
    if(0 === n) return 1.;
    var
     x$0 = [0, caml_call2(Base_Import[92], x, -0.)],
     n$0 = [0, n],
     accum = [0, 1.];
    if(n$0[1] < 0){
     x$0[1] = caml_call2(Base_Import[96], 1., x$0[1]);
     n$0[1] = caml_call1(Base_Import[113], n$0[1]);
     if(n$0[1] < 0){accum[1] = x$0[1]; n$0[1] += -1;}
    }
    for(;;){
     if(1 >= n$0[1]) return caml_call2(Base_Import[90], x$0[1], accum[1]);
     if(0 !== caml_call2(Base_Import[116], n$0[1], 1))
      accum[1] = caml_call2(Base_Import[90], x$0[1], accum[1]);
     x$0[1] = caml_call2(Base_Import[90], x$0[1], x$0[1]);
     n$0[1] = caml_call2(Base_Import[120], n$0[1], 1);
    }
   }
   function round_gen(x, how){
    if(x == 0.) return 0.;
    if(! is_finite(x)) return x;
    if(555917426 <= how[1])
     var
      sd = how[2],
      _ao_ =
        caml_call1
         (to_int,
          caml_call1(round_up, caml_log10_float(caml_call1(abs_float, x)))),
      dd = caml_call2(Base_Import[93], sd, _ao_),
      dd$0 = dd,
      sd$0 = sd;
    else
     var
      dd$1 = how[2],
      _ar_ =
        caml_call1
         (to_int,
          caml_call1(round_up, caml_log10_float(caml_call1(abs_float, x)))),
      sd$1 = caml_call2(Base_Import[91], dd$1, _ar_),
      dd$0 = dd$1,
      sd$0 = sd$1;
    if(0 > sd$0) return 0.;
    if(17 <= sd$0) return x;
    var abs_dd = caml_call1(Base_Int[78], dd$0);
    if(22 >= abs_dd && 16 > sd$0){
     var order = int_pow(10., abs_dd);
     if(0 <= dd$0){
      var
       _ap_ =
         round_nearest_half_to_even(caml_call2(Base_Import[90], x, order));
      return caml_call2(Base_Import[96], _ap_, order);
     }
     var
      _aq_ = round_nearest_half_to_even(caml_call2(Base_Import[96], x, order));
     return caml_call2(Base_Import[90], _aq_, order);
    }
    return of_string(caml_call3(Base_Printf[2], _J_, sd$0, x));
   }
   function round_significant(x, significant_digits){
    return 0 < significant_digits
            ? round_gen(x, [0, 555917426, significant_digits])
            : caml_call3(Base_Printf[7], _K_, significant_digits, 0);
   }
   function round_decimal(x, decimal_digits){
    return round_gen(x, [0, -352548012, decimal_digits]);
   }
   function between(t, low, high){
    var _am_ = low <= t ? 1 : 0, _an_ = _am_ ? t <= high ? 1 : 0 : _am_;
    return _an_;
   }
   function clamp_exn(t, min, max){
    if(min <= max) return caml_call3(clamp_unchecked, t, min, max);
    throw caml_maybe_attach_backtrace([0, Assert_failure, _L_], 1);
   }
   function clamp(t, min, max){
    if(min <= max) return [0, caml_call3(clamp_unchecked, t, min, max)];
    var
     _aj_ = [0, [0, cst_max, caml_call1(sexp_of_t, max)], 0],
     _ak_ = [0, [0, cst_min, caml_call1(sexp_of_t, min)], _aj_],
     _al_ = caml_call2(Base_Sexp[10], cst_clamp_requires_min_max, _ak_);
    return caml_call1(Base_Or_error[39], _al_);
   }
   var
    symbol$1 = Base_Import[92],
    symbol$2 = Base_Import[94],
    symbol$3 = Base_Import[90],
    symbol$4 = Base_Import[96],
    symbol$5 = Base_Import[114];
   function sign_exn(t){
    if(0. < t) return 2;
    if(t < 0.) return 0;
    if(t == 0.) return 1;
    var
     _ah_ = [0, [0, cst$3, sexp_of_t$1(t)], 0],
     _ai_ = caml_call2(Base_Sexp[10], cst_Float_sign_exn_of_NAN, _ah_);
    return caml_call1(Base_Error[32], _ai_);
   }
   function sign_or_nan(t){return 0. < t ? 2 : t < 0. ? 0 : t == 0. ? 1 : 3;}
   function ieee_negative(t){
    var bits = caml_int64_bits_of_float(t);
    return runtime.caml_lessthan(bits, Stdlib_Int64[1]);
   }
   var
    _M_ = Base_Int64[37],
    exponent_mask64 =
      runtime.caml_int64_sub
       (caml_call2(Base_Int64[53], Base_Int64[37], 11), _M_),
    exponent_mask = caml_call1(Base_Int64[6], exponent_mask64),
    _N_ = Base_Int63[43],
    _O_ = caml_call2(Base_Int63[76], Base_Int63[43], 52),
    mantissa_mask = caml_call2(Base_Int63[46], _O_, _N_),
    mantissa_mask64 = caml_call1(Base_Int63[83], mantissa_mask),
    mantissa_bits = 52;
   function ieee_exponent(t){
    var
     bits = caml_int64_bits_of_float(t),
     _ag_ = caml_call2(Base_Int64[67], bits, mantissa_bits);
    return runtime.caml_int64_to_int32
            (caml_call2(Base_Int64[48], _ag_, exponent_mask64));
   }
   function ieee_mantissa(t){
    var bits = caml_int64_bits_of_float(t);
    return caml_call1
            (Base_Int63[109], runtime.caml_int64_and(bits, mantissa_mask64));
   }
   function create_ieee_exn(negative, exponent, mantissa){
    if(caml_call2(Base_Int[48], exponent, exponent_mask) !== exponent)
     return caml_call4(Base_Printf[6], _P_, exponent, exponent_mask, 0);
    var _ad_ = caml_call2(Base_Int63[71], mantissa, mantissa_mask);
    if(caml_call2(Base_Int63[17], _ad_, mantissa)){
     var
      _ae_ = caml_call1(Base_Int63[11], mantissa_mask),
      _af_ = caml_call1(Base_Int63[11], mantissa);
     return caml_call4(Base_Printf[6], _Q_, _af_, _ae_, 0);
    }
    var
     sign_bits = negative ? Stdlib_Int64[10] : Stdlib_Int64[1],
     expt_bits =
       runtime.caml_int64_shift_left
        (runtime.caml_int64_of_int32(exponent), 52),
     mant_bits = caml_call1(Base_Int63[83], mantissa),
     bits = caml_int64_or(sign_bits, caml_int64_or(expt_bits, mant_bits));
    return runtime.caml_int64_float_of_bits(bits);
   }
   function create_ieee(negative, exponent, mantissa){
    function _ac_(param){
     return create_ieee_exn(negative, exponent, mantissa);
    }
    return caml_call2(Base_Or_error[31], 0, _ac_);
   }
   function to_string$1(x){return caml_call2(Base_Printf[2], _R_, x);}
   function sexp_of_t$2(x){return [0, to_string$1(x)];}
   function of_string$1(x){return of_string(x);}
   var
    include$0 = caml_call1(Base_Comparable[14], [0, compare, sexp_of_t, zero]),
    sign = include$0[5];
   function is_positive(t){return 0. < t ? 1 : 0;}
   function is_non_negative(t){return 0. <= t ? 1 : 0;}
   function is_negative(t){return t < 0. ? 1 : 0;}
   function is_non_positive(t){return t <= 0. ? 1 : 0;}
   var
    include$1 =
      caml_call1(Base_Pretty_printer[2], [0, module_name, to_string]),
    pp = include$1[1];
   function symbol$6(_ab_, _aa_){return _ab_ != _aa_ ? 1 : 0;}
   function symbol$7(_$_, ___){return _$_ < ___ ? 1 : 0;}
   function symbol$8(_Z_, _Y_){return _Y_ < _Z_ ? 1 : 0;}
   function symbol$9(_X_, _W_){return _X_ == _W_ ? 1 : 0;}
   function symbol$10(_V_, _U_){return _V_ <= _U_ ? 1 : 0;}
   function symbol$11(_T_, _S_){return _S_ <= _T_ ? 1 : 0;}
   function of_float$0(x){return x;}
   var
    specialized_hash = Base_Import[223],
    Private =
      [0,
       box,
       clamp_unchecked,
       lower_bound_for_int,
       upper_bound_for_int,
       specialized_hash,
       one_ulp_less_than_half,
       int63_round_nearest_portable_a,
       int63_round_nearest_arch64_noa,
       iround_nearest_exn_64],
    include$2 = Base_Import[108],
    ascending = include$2[1],
    descending = include$2[2],
    compare_local$0 = include$2[3],
    equal_local = include$2[4];
   function min(x, y){
    if(! (x < y) && ! caml_call1(is_nan, x)) return y;
    return x;
   }
   function max(x, y){
    if(! (y < x) && ! caml_call1(is_nan, x)) return y;
    return x;
   }
   var
    Base_Float =
      [0,
       globalize,
       t_sexp_grammar,
       of_float,
       to_float,
       hash_fold_t,
       hash,
       t_of_sexp,
       sexp_of_t$1,
       of_string,
       ascending,
       descending,
       between,
       clamp_exn,
       clamp,
       comparator,
       pp,
       hashable,
       float_of_string_opt,
       is_positive,
       is_non_negative,
       is_negative,
       is_non_positive,
       equal_local,
       compare_local$0,
       invariant,
       min,
       max,
       nan,
       max_value,
       neg_infinity,
       max_value,
       neg_infinity,
       zero,
       one,
       minus_one,
       pi,
       sqrt_pi,
       sqrt_2pi,
       euler,
       epsilon_float,
       max_finite_value,
       min_positive_subnormal_value,
       min_positive_normal_value,
       to_int64_preserve_order,
       to_int64_preserve_order_exn,
       of_int64_preserve_order,
       one_ulp,
       of_int,
       to_int,
       of_int63,
       of_int64,
       to_int64,
       round,
       iround,
       iround_exn,
       round_towards_zero,
       round_down,
       round_up,
       round_nearest,
       round_nearest_half_to_even,
       iround_towards_zero,
       iround_down,
       iround_up,
       iround_nearest_64$0,
       iround_towards_zero_exn,
       iround_down_exn,
       iround_up_exn,
       iround_nearest_exn,
       int63_round_down_exn,
       int63_round_up_exn,
       int63_round_nearest_exn,
       iround_lbound,
       iround_ubound,
       int63_round_lbound,
       int63_round_ubound,
       round_significant,
       round_decimal,
       is_nan,
       is_inf,
       is_finite,
       is_integer,
       min_inan,
       max_inan,
       symbol$1,
       symbol$2,
       symbol$4,
       symbol$0,
       symbol$3,
       symbol,
       symbol$5,
       [0, fractional, integral],
       modf,
       mod_float,
       add,
       sub,
       neg,
       scale,
       abs_float,
       [0,
        symbol$1,
        symbol$2,
        symbol$3,
        symbol$4,
        symbol$0,
        symbol,
        symbol$5,
        symbol$11,
        symbol$10,
        symbol$9,
        symbol$8,
        symbol$7,
        symbol$6,
        abs_float,
        neg,
        zero,
        of_int,
        of_float$0],
       [0, symbol$1, symbol$2, symbol$3, symbol$4, symbol$0, symbol, symbol$5],
       to_string,
       to_string_hum,
       to_padded_compact_string,
       to_padded_compact_string_custo,
       int_pow,
       square,
       ldexp,
       frexp,
       [0,
        compare$0,
        compare_local,
        all,
        t_of_sexp$0,
        sexp_of_t$0,
        t_sexp_grammar$0,
        of_string$0,
        to_string$0],
       classify,
       sign,
       sign_exn,
       sign_or_nan,
       create_ieee,
       create_ieee_exn,
       ieee_negative,
       ieee_exponent,
       ieee_mantissa,
       [0, t_of_sexp, sexp_of_t$2, t_sexp_grammar, of_string$1, to_string$1],
       Private];
   runtime.caml_register_global(191, Base_Float, "Base__Float");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Fieldslib
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Base_Fieldslib = [0];
   runtime.caml_register_global(0, Base_Fieldslib, "Base__Fieldslib");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Buffer_intf
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Base_Buffer_intf = [0];
   runtime.caml_register_global(0, Base_Buffer_intf, "Base__Buffer_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Buffer
//# unitInfo: Requires: Base__Blit, Base__Buffer_intf, Base__Bytes, Base__Import, Stdlib__Buffer
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_Bytes = global_data.Base__Bytes,
    Base_Import = global_data.Base__Import,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Base_Blit = global_data.Base__Blit,
    create = Stdlib_Buffer[1],
    contents = Stdlib_Buffer[2],
    to_bytes = Stdlib_Buffer[3],
    nth = Stdlib_Buffer[6],
    length = Stdlib_Buffer[7],
    clear = Stdlib_Buffer[8],
    reset = Stdlib_Buffer[9],
    add_char = Stdlib_Buffer[12],
    add_string = Stdlib_Buffer[16],
    add_bytes = Stdlib_Buffer[17],
    add_buffer = Stdlib_Buffer[21],
    _a_ = Stdlib_Buffer[18],
    _b_ = Stdlib_Buffer[19];
   function add_substring(t, s, pos, len){
    return caml_call4(_a_, t, s, pos, len);
   }
   function add_subbytes(t, s, pos, len){
    return caml_call4(_b_, t, s, pos, len);
   }
   function sexp_of_t(t){
    var _c_ = caml_call1(contents, t);
    return caml_call1(Base_Import[136], _c_);
   }
   var
    caml_buffer_length = Stdlib_Buffer[7],
    caml_buffer_blit = Stdlib_Buffer[5];
   function create$0(len){return caml_call1(Base_Bytes[34], len);}
   var length$0 = runtime.caml_ml_bytes_length;
   function unsafe_blit(src, src_pos, dst, dst_pos, len){
    return caml_call5(caml_buffer_blit, src, src_pos, dst, dst_pos, len);
   }
   var
    To_bytes =
      caml_call1
       (caml_call1(Base_Blit[2], [0, caml_buffer_length]),
        [0, length$0, create$0, unsafe_blit]),
    blit = To_bytes[1],
    blito = To_bytes[2],
    unsafe_blit$0 = To_bytes[3],
    sub = To_bytes[4],
    subo = To_bytes[5],
    To_string = caml_call1(caml_call1(Base_Blit[3], [0]), To_bytes),
    Base_Buffer =
      [0,
       sexp_of_t,
       create,
       contents,
       to_bytes,
       blit,
       blito,
       unsafe_blit$0,
       sub,
       subo,
       To_string,
       nth,
       length,
       clear,
       reset,
       add_char,
       add_string,
       add_substring,
       add_bytes,
       add_subbytes,
       add_buffer];
   runtime.caml_register_global(4, Base_Buffer, "Base__Buffer");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base__Backtrace
//# unitInfo: Requires: Base__Exn, Base__Int, Base__List, Base__String, Base__Sys0, Stdlib__Printexc
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    elided_message = "<backtrace elided in test>",
    Base_Exn = global_data.Base__Exn,
    Base_Sys0 = global_data.Base__Sys0,
    Base_String = global_data.Base__String,
    Base_List = global_data.Base__List,
    Stdlib_Printexc = global_data.Stdlib__Printexc,
    Base_Int = global_data.Base__Int,
    elide = [0, 0],
    cst_b = "b",
    cst_OCAMLRUNPARAM = "OCAMLRUNPARAM";
   function get(opt, param){
    if(opt)
     var sth = opt[1], at_most_num_frames = sth;
    else
     var at_most_num_frames = Base_Int[65];
    return runtime.caml_get_current_callstack(at_most_num_frames);
   }
   function to_string(t){
    return elide[1] ? elided_message : caml_call1(Stdlib_Printexc[14], t);
   }
   function to_string_list(t){
    var _i_ = to_string(t);
    return caml_call1(Base_String[104], _i_);
   }
   function sexp_of_t(t){
    function _g_(x){return [0, x];}
    var _h_ = to_string_list(t);
    return [1, caml_call2(Base_List[53], _h_, _g_)];
   }
   var set_recording = Stdlib_Printexc[7], am_recording = Stdlib_Printexc[8];
   function most_recent(param){return caml_call1(Stdlib_Printexc[12], 0);}
   function most_recent_for_exn(exn){
    return caml_call1(Base_Exn[18], exn) ? [0, most_recent(0)] : 0;
   }
   function with_recording(b, f){
    var saved = caml_call1(am_recording, 0);
    caml_call1(set_recording, b);
    function _f_(param){return caml_call1(set_recording, saved);}
    return caml_call2(Base_Exn[13], f, _f_);
   }
   function initialize_module(param){
    var match = caml_call1(Base_Sys0[21], cst_OCAMLRUNPARAM);
    if(match)
     var
      x = match[1],
      _a_ = Base_String[97],
      _b_ = function(_e_){return caml_call2(_a_, _e_, cst_b);},
      _c_ = caml_call2(Base_String[102], x, 44),
      ocamlrunparam_mentions_backtra = caml_call2(Base_List[23], _c_, _b_);
    else
     var ocamlrunparam_mentions_backtra = 0;
    var _d_ = 1 - ocamlrunparam_mentions_backtra;
    return _d_ ? caml_call1(set_recording, 1) : _d_;
   }
   var
    Base_Backtrace =
      [0,
       sexp_of_t,
       get,
       to_string,
       to_string_list,
       elide,
       [0,
        am_recording,
        set_recording,
        with_recording,
        most_recent,
        most_recent_for_exn],
       initialize_module];
   runtime.caml_register_global(9, Base_Backtrace, "Base__Backtrace");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base
//# unitInfo: Requires: Base__Array, Base__Backtrace, Base__Bool, Base__Bytes, Base__Char, Base__Container_intf, Base__Error, Base__Exn, Base__Float, Base__Import, Base__Int, Base__Int32, Base__Int64, Base__Int_conversions, Base__Int_string_conversions, Base__List, Base__Nativeint, Base__Option, Base__Ref, Base__Sexp_with_comparable, Base__String, Base__T, Base__Unit, Shadow_stdlib
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_Ref = global_data.Base__Ref,
    Base_Option = global_data.Base__Option,
    Base_List = global_data.Base__List,
    Base_Array = global_data.Base__Array,
    Shadow_stdlib = global_data.Shadow_stdlib,
    Base_Sexp_with_comparable = global_data.Base__Sexp_with_comparable,
    Base_Int_conversions = global_data.Base__Int_conversions,
    Base_Int_string_conversions = global_data.Base__Int_string_conversions,
    Base_Import = global_data.Base__Import,
    Base_Bool = global_data.Base__Bool,
    Base_Char = global_data.Base__Char,
    Base_Exn = global_data.Base__Exn,
    Base_Float = global_data.Base__Float,
    Base_Int = global_data.Base__Int,
    Base_Int32 = global_data.Base__Int32,
    Base_Int64 = global_data.Base__Int64,
    Base_Nativeint = global_data.Base__Nativeint,
    Base_String = global_data.Base__String,
    Base_Bytes = global_data.Base__Bytes,
    Base_Unit = global_data.Base__Unit,
    Base_Error = global_data.Base__Error,
    Base_Container_intf = global_data.Base__Container_intf,
    Base_Backtrace = global_data.Base__Backtrace,
    Exit = Shadow_stdlib[3],
    Not_found = Shadow_stdlib[4],
    max_int = Shadow_stdlib[8],
    min_int = Shadow_stdlib[9],
    infinity = Shadow_stdlib[11],
    neg_infinity = Shadow_stdlib[12],
    nan = Shadow_stdlib[13],
    max_float = Shadow_stdlib[14],
    min_float = Shadow_stdlib[15],
    epsilon_float = Shadow_stdlib[16],
    char_of_int = Shadow_stdlib[18],
    string_of_bool = Shadow_stdlib[19],
    bool_of_string_opt = Shadow_stdlib[20],
    bool_of_string = Shadow_stdlib[21],
    string_of_int = Shadow_stdlib[22],
    int_of_string_opt = Shadow_stdlib[23],
    string_of_float = Shadow_stdlib[24],
    float_of_string_opt = Shadow_stdlib[25],
    stdin = Shadow_stdlib[27],
    stdout = Shadow_stdlib[28],
    stderr = Shadow_stdlib[29],
    print_char = Shadow_stdlib[30],
    print_string = Shadow_stdlib[31],
    print_bytes = Shadow_stdlib[32],
    print_int = Shadow_stdlib[33],
    print_float = Shadow_stdlib[34],
    print_endline = Shadow_stdlib[35],
    print_newline = Shadow_stdlib[36],
    prerr_char = Shadow_stdlib[37],
    prerr_string = Shadow_stdlib[38],
    prerr_bytes = Shadow_stdlib[39],
    prerr_int = Shadow_stdlib[40],
    prerr_float = Shadow_stdlib[41],
    prerr_endline = Shadow_stdlib[42],
    prerr_newline = Shadow_stdlib[43],
    read_line = Shadow_stdlib[44],
    read_int_opt = Shadow_stdlib[45],
    read_int = Shadow_stdlib[46],
    read_float_opt = Shadow_stdlib[47],
    read_float = Shadow_stdlib[48],
    open_out = Shadow_stdlib[49],
    open_out_bin = Shadow_stdlib[50],
    open_out_gen = Shadow_stdlib[51],
    flush = Shadow_stdlib[52],
    flush_all = Shadow_stdlib[53],
    output_char = Shadow_stdlib[54],
    output_string = Shadow_stdlib[55],
    output_bytes = Shadow_stdlib[56],
    output = Shadow_stdlib[57],
    output_substring = Shadow_stdlib[58],
    output_byte = Shadow_stdlib[59],
    output_binary_int = Shadow_stdlib[60],
    output_value = Shadow_stdlib[61],
    seek_out = Shadow_stdlib[62],
    pos_out = Shadow_stdlib[63],
    out_channel_length = Shadow_stdlib[64],
    close_out = Shadow_stdlib[65],
    close_out_noerr = Shadow_stdlib[66],
    set_binary_mode_out = Shadow_stdlib[67],
    open_in = Shadow_stdlib[68],
    open_in_bin = Shadow_stdlib[69],
    open_in_gen = Shadow_stdlib[70],
    input_char = Shadow_stdlib[71],
    input_line = Shadow_stdlib[72],
    input = Shadow_stdlib[73],
    really_input = Shadow_stdlib[74],
    really_input_string = Shadow_stdlib[75],
    input_byte = Shadow_stdlib[76],
    input_binary_int = Shadow_stdlib[77],
    input_value = Shadow_stdlib[78],
    seek_in = Shadow_stdlib[79],
    pos_in = Shadow_stdlib[80],
    in_channel_length = Shadow_stdlib[81],
    close_in = Shadow_stdlib[82],
    close_in_noerr = Shadow_stdlib[83],
    set_binary_mode_in = Shadow_stdlib[84],
    string_of_format = Shadow_stdlib[85],
    symbol = Shadow_stdlib[86],
    exit = Shadow_stdlib[87],
    at_exit = Shadow_stdlib[88],
    valid_float_lexem = Shadow_stdlib[89],
    unsafe_really_input = Shadow_stdlib[90],
    do_at_exit = Shadow_stdlib[91],
    do_domain_local_at_exit = Shadow_stdlib[92],
    globalize = Base_Sexp_with_comparable[1],
    hash_fold_t = Base_Sexp_with_comparable[2],
    hash = Base_Sexp_with_comparable[3],
    t_of_sexp = Base_Sexp_with_comparable[4],
    sexp_of_t = Base_Sexp_with_comparable[5],
    Not_found_s = Base_Sexp_with_comparable[6],
    Of_sexp_error = Base_Sexp_with_comparable[7],
    message = Base_Sexp_with_comparable[8],
    default_indent = Base_Sexp_with_comparable[9],
    pp_hum = Base_Sexp_with_comparable[10],
    pp_hum_indent = Base_Sexp_with_comparable[11],
    pp_mach = Base_Sexp_with_comparable[12],
    pp = Base_Sexp_with_comparable[13],
    to_string_hum = Base_Sexp_with_comparable[14],
    to_string_mach = Base_Sexp_with_comparable[15],
    to_string = Base_Sexp_with_comparable[16],
    of_float_style = Base_Sexp_with_comparable[17],
    of_int_style = Base_Sexp_with_comparable[18],
    t_sexp_grammar = Base_Sexp_with_comparable[19],
    invariant = Base_Sexp_with_comparable[20],
    of_string = Base_Sexp_with_comparable[21],
    symbol$0 = Base_Sexp_with_comparable[22],
    symbol$1 = Base_Sexp_with_comparable[23],
    symbol$2 = Base_Sexp_with_comparable[24],
    symbol$3 = Base_Sexp_with_comparable[25],
    symbol$4 = Base_Sexp_with_comparable[26],
    symbol$5 = Base_Sexp_with_comparable[27],
    equal = Base_Sexp_with_comparable[28],
    compare = Base_Sexp_with_comparable[29],
    min = Base_Sexp_with_comparable[30],
    max = Base_Sexp_with_comparable[31],
    ascending = Base_Sexp_with_comparable[32],
    descending = Base_Sexp_with_comparable[33],
    between = Base_Sexp_with_comparable[34],
    clamp_exn = Base_Sexp_with_comparable[35],
    clamp = Base_Sexp_with_comparable[36],
    comparator = Base_Sexp_with_comparable[37],
    compare_local = Base_Sexp_with_comparable[38],
    equal_local = Base_Sexp_with_comparable[39],
    Sexp =
      [0,
       globalize,
       hash_fold_t,
       hash,
       t_of_sexp,
       sexp_of_t,
       Not_found_s,
       Of_sexp_error,
       message,
       default_indent,
       pp_hum,
       pp_hum_indent,
       pp_mach,
       pp,
       to_string_hum,
       to_string_mach,
       to_string,
       of_float_style,
       of_int_style,
       t_sexp_grammar,
       invariant,
       of_string,
       symbol$0,
       symbol$1,
       symbol$2,
       symbol$3,
       symbol$4,
       symbol$5,
       equal,
       compare,
       min,
       max,
       ascending,
       descending,
       between,
       clamp_exn,
       clamp,
       comparator,
       compare_local,
       equal_local],
    int_to_int32 = Base_Int_conversions[1],
    int_to_int32_exn = Base_Int_conversions[2],
    int_to_int32_trunc = Base_Int_conversions[3],
    int_to_int64 = Base_Int_conversions[4],
    int_to_nativeint = Base_Int_conversions[5],
    int32_to_int = Base_Int_conversions[6],
    int32_to_int_exn = Base_Int_conversions[7],
    int32_to_int_trunc = Base_Int_conversions[8],
    int32_to_int64 = Base_Int_conversions[9],
    int32_to_nativeint = Base_Int_conversions[10],
    int32_is_representable_as_int = Base_Int_conversions[11],
    int64_to_int = Base_Int_conversions[12],
    int64_to_int_exn = Base_Int_conversions[13],
    int64_to_int_trunc = Base_Int_conversions[14],
    int64_to_int32 = Base_Int_conversions[15],
    int64_to_int32_exn = Base_Int_conversions[16],
    int64_to_int32_trunc = Base_Int_conversions[17],
    int64_to_nativeint = Base_Int_conversions[18],
    int64_to_nativeint_exn = Base_Int_conversions[19],
    int64_to_nativeint_trunc = Base_Int_conversions[20],
    int64_fit_on_int63_exn = Base_Int_conversions[21],
    int64_is_representable_as_int6 = Base_Int_conversions[22],
    nativeint_to_int = Base_Int_conversions[23],
    nativeint_to_int_exn = Base_Int_conversions[24],
    nativeint_to_int_trunc = Base_Int_conversions[25],
    nativeint_to_int32 = Base_Int_conversions[26],
    nativeint_to_int32_exn = Base_Int_conversions[27],
    nativeint_to_int32_trunc = Base_Int_conversions[28],
    nativeint_to_int64 = Base_Int_conversions[29],
    num_bits_int = Base_Int_conversions[30],
    num_bits_int32 = Base_Int_conversions[31],
    num_bits_int64 = Base_Int_conversions[32],
    num_bits_nativeint = Base_Int_conversions[33],
    Make = Base_Int_string_conversions[1],
    Make_hex = Base_Int_string_conversions[2],
    Make_binary = Base_Int_string_conversions[3],
    sexp_of_int_style = Base_Int_string_conversions[4],
    insert_delimiter_every = Base_Int_string_conversions[5],
    insert_delimiter = Base_Int_string_conversions[6],
    insert_underscores = Base_Int_string_conversions[7],
    Int_conversions =
      [0,
       int_to_int32,
       int_to_int32_exn,
       int_to_int32_trunc,
       int_to_int64,
       int_to_nativeint,
       int32_to_int,
       int32_to_int_exn,
       int32_to_int_trunc,
       int32_to_int64,
       int32_to_nativeint,
       int32_is_representable_as_int,
       int64_to_int,
       int64_to_int_exn,
       int64_to_int_trunc,
       int64_to_int32,
       int64_to_int32_exn,
       int64_to_int32_trunc,
       int64_to_nativeint,
       int64_to_nativeint_exn,
       int64_to_nativeint_trunc,
       int64_fit_on_int63_exn,
       int64_is_representable_as_int6,
       nativeint_to_int,
       nativeint_to_int_exn,
       nativeint_to_int_trunc,
       nativeint_to_int32,
       nativeint_to_int32_exn,
       nativeint_to_int32_trunc,
       nativeint_to_int64,
       num_bits_int,
       num_bits_int32,
       num_bits_int64,
       num_bits_nativeint,
       Make,
       Make_hex,
       Make_binary,
       sexp_of_int_style,
       insert_delimiter_every,
       insert_delimiter,
       insert_underscores],
    am_testing = Base_Import[129],
    Exported_for_specific_uses = [0, am_testing],
    compare_array_local = Base_Array[2],
    compare_array = Base_Array[1],
    equal_array_local = Base_Array[106],
    equal_array = Base_Array[105],
    globalize_array = Base_Array[3],
    array_of_sexp = Base_Array[4],
    sexp_of_array = Base_Array[5];
   function array_sexp_grammar(a_sexp_grammar){
    return caml_call1(Base_Array[6], a_sexp_grammar);
   }
   var compare_bool_local = Base_Bool[28];
   function compare_bool(a, b){return caml_call2(compare_bool_local, a, b);}
   var equal_bool_local = Base_Bool[29];
   function equal_bool(a, b){return caml_call2(equal_bool_local, a, b);}
   var
    globalize_bool = Base_Bool[2],
    hash_fold_bool = Base_Bool[4],
    func = Base_Bool[5];
   function hash_bool(x){return caml_call1(func, x);}
   var
    bool_of_sexp = Base_Bool[6],
    sexp_of_bool = Base_Bool[7],
    bool_sexp_grammar = Base_Bool[3],
    compare_char_local = Base_Char[29];
   function compare_char(a, b){return caml_call2(compare_char_local, a, b);}
   var equal_char_local = Base_Char[28];
   function equal_char(a, b){return caml_call2(equal_char_local, a, b);}
   var
    globalize_char = Base_Char[2],
    hash_fold_char = Base_Char[4],
    func$0 = Base_Char[5];
   function hash_char(x){return caml_call1(func$0, x);}
   var
    char_of_sexp = Base_Char[6],
    sexp_of_char = Base_Char[7],
    char_sexp_grammar = Base_Char[3],
    sexp_of_exn = Base_Exn[1],
    compare_float_local = Base_Float[24];
   function compare_float(a, b){return caml_call2(compare_float_local, a, b);}
   var equal_float_local = Base_Float[23];
   function equal_float(a, b){return caml_call2(equal_float_local, a, b);}
   var
    globalize_float = Base_Float[1],
    hash_fold_float = Base_Float[5],
    func$1 = Base_Float[6];
   function hash_float(x){return caml_call1(func$1, x);}
   var
    float_of_sexp = Base_Float[7],
    sexp_of_float = Base_Float[8],
    float_sexp_grammar = Base_Float[2],
    compare_int_local = Base_Int[30];
   function compare_int(a, b){return caml_call2(compare_int_local, a, b);}
   var equal_int_local = Base_Int[31];
   function equal_int(a, b){return caml_call2(equal_int_local, a, b);}
   var
    globalize_int = Base_Int[1],
    hash_fold_int = Base_Int[7],
    func$2 = Base_Int[8];
   function hash_int(x){return caml_call1(func$2, x);}
   var
    int_of_sexp = Base_Int[9],
    sexp_of_int = Base_Int[10],
    int_sexp_grammar = Base_Int[2],
    compare_int32_local = Base_Int32[36];
   function compare_int32(a, b){return caml_call2(compare_int32_local, a, b);}
   var equal_int32_local = Base_Int32[37];
   function equal_int32(a, b){return caml_call2(equal_int32_local, a, b);}
   var
    globalize_int32 = Base_Int32[1],
    hash_fold_int32 = Base_Int32[7],
    func$3 = Base_Int32[8];
   function hash_int32(x){return caml_call1(func$3, x);}
   var
    int32_of_sexp = Base_Int32[9],
    sexp_of_int32 = Base_Int32[10],
    int32_sexp_grammar = Base_Int32[2],
    compare_int64_local = Base_Int64[30];
   function compare_int64(a, b){return caml_call2(compare_int64_local, a, b);}
   var equal_int64_local = Base_Int64[31];
   function equal_int64(a, b){return caml_call2(equal_int64_local, a, b);}
   var
    globalize_int64 = Base_Int64[1],
    hash_fold_int64 = Base_Int64[7],
    func$4 = Base_Int64[8];
   function hash_int64(x){return caml_call1(func$4, x);}
   var
    int64_of_sexp = Base_Int64[9],
    sexp_of_int64 = Base_Int64[10],
    int64_sexp_grammar = Base_Int64[2],
    compare_list_local = Base_List[2],
    compare_list = Base_List[1],
    equal_list_local = Base_List[155],
    equal_list = Base_List[154],
    globalize_list = Base_List[3],
    hash_fold_list = Base_List[4],
    list_of_sexp = Base_List[5],
    sexp_of_list = Base_List[6];
   function list_sexp_grammar(a_sexp_grammar){
    return caml_call1(Base_List[7], a_sexp_grammar);
   }
   var compare_nativeint_local = Base_Nativeint[36];
   function compare_nativeint(a, b){
    return caml_call2(compare_nativeint_local, a, b);
   }
   var equal_nativeint_local = Base_Nativeint[37];
   function equal_nativeint(a, b){
    return caml_call2(equal_nativeint_local, a, b);
   }
   var
    globalize_nativeint = Base_Nativeint[1],
    hash_fold_nativeint = Base_Nativeint[7],
    func$5 = Base_Nativeint[8];
   function hash_nativeint(x){return caml_call1(func$5, x);}
   var
    nativeint_of_sexp = Base_Nativeint[9],
    sexp_of_nativeint = Base_Nativeint[10],
    nativeint_sexp_grammar = Base_Nativeint[2],
    compare_option_local = Base_Option[2],
    compare_option = Base_Option[1],
    equal_option_local = Base_Option[7],
    equal_option = Base_Option[6],
    globalize_option = Base_Option[3],
    hash_fold_option = Base_Option[4],
    option_of_sexp = Base_Option[9],
    sexp_of_option = Base_Option[10];
   function option_sexp_grammar(a_sexp_grammar){
    return caml_call1(Base_Option[5], a_sexp_grammar);
   }
   var
    compare_ref_local = Base_Ref[2],
    compare_ref = Base_Ref[1],
    equal_ref_local = Base_Ref[4],
    equal_ref = Base_Ref[3],
    globalize_ref = Base_Ref[5],
    ref_of_sexp = Base_Ref[6],
    sexp_of_ref = Base_Ref[7];
   function ref_sexp_grammar(a_sexp_grammar){
    return caml_call1(Base_Ref[8], a_sexp_grammar);
   }
   var compare_string_local = Base_String[62];
   function compare_string(a, b){
    return caml_call2(compare_string_local, a, b);
   }
   var equal_string_local = Base_String[135];
   function equal_string(a, b){return caml_call2(equal_string_local, a, b);}
   var globalize_string = Base_String[1], hash_fold_string = Base_String[40];
   function hash_string(x){return runtime.Base_hash_string(x);}
   var
    string_of_sexp = Base_String[41],
    sexp_of_string = Base_String[42],
    string_sexp_grammar = Base_String[2],
    compare_bytes_local = Base_Bytes[26];
   function compare_bytes(a, b){return caml_call2(compare_bytes_local, a, b);}
   var equal_bytes_local = Base_Bytes[27];
   function equal_bytes(a, b){return caml_call2(equal_bytes_local, a, b);}
   var
    globalize_bytes = Base_Bytes[1],
    bytes_of_sexp = Base_Bytes[2],
    sexp_of_bytes = Base_Bytes[3],
    bytes_sexp_grammar = Base_Bytes[4],
    compare_unit_local = Base_Unit[29];
   function compare_unit(a, b){return caml_call2(compare_unit_local, a, b);}
   var equal_unit_local = Base_Unit[28];
   function equal_unit(a, b){return caml_call2(equal_unit_local, a, b);}
   var
    globalize_unit = Base_Unit[2],
    hash_fold_unit = Base_Unit[4],
    func$6 = Base_Unit[5];
   function hash_unit(x){return caml_call1(func$6, x);}
   var
    unit_of_sexp = Base_Unit[6],
    sexp_of_unit = Base_Unit[7],
    unit_sexp_grammar = Base_Unit[3],
    symbol$6 = Base_List[156][1],
    _a_ = Base_Int[75],
    symbol$7 = _a_[1],
    lnot = _a_[2],
    abs = _a_[3],
    zero = _a_[4],
    symbol$8 = _a_[5],
    symbol$9 = _a_[6],
    symbol$10 = _a_[7],
    _b_ = Base_Import[97],
    ascending$0 = _b_[1],
    descending$0 = _b_[2],
    max$0 = _b_[3],
    min$0 = _b_[4],
    include = Base_Float[100],
    symbol$11 = include[1],
    symbol$12 = include[2],
    symbol$13 = include[3],
    symbol$14 = include[4],
    symbol$15 = include[5],
    symbol$16 = include[6],
    symbol$17 = include[7],
    symbol$18 = Base_String[67],
    fst = Base_Import[125],
    snd = Base_Import[127],
    failwith = Base_Import[124],
    invalid_arg = Base_Import[126],
    raise_s = Base_Error[32],
    Export =
      [0,
       compare_array_local,
       compare_array,
       equal_array_local,
       equal_array,
       globalize_array,
       array_of_sexp,
       sexp_of_array,
       array_sexp_grammar,
       compare_bool_local,
       compare_bool,
       equal_bool_local,
       equal_bool,
       globalize_bool,
       hash_fold_bool,
       hash_bool,
       bool_of_sexp,
       sexp_of_bool,
       bool_sexp_grammar,
       compare_char_local,
       compare_char,
       equal_char_local,
       equal_char,
       globalize_char,
       hash_fold_char,
       hash_char,
       char_of_sexp,
       sexp_of_char,
       char_sexp_grammar,
       sexp_of_exn,
       compare_float_local,
       compare_float,
       equal_float_local,
       equal_float,
       globalize_float,
       hash_fold_float,
       hash_float,
       float_of_sexp,
       sexp_of_float,
       float_sexp_grammar,
       compare_int_local,
       compare_int,
       equal_int_local,
       equal_int,
       globalize_int,
       hash_fold_int,
       hash_int,
       int_of_sexp,
       sexp_of_int,
       int_sexp_grammar,
       compare_int32_local,
       compare_int32,
       equal_int32_local,
       equal_int32,
       globalize_int32,
       hash_fold_int32,
       hash_int32,
       int32_of_sexp,
       sexp_of_int32,
       int32_sexp_grammar,
       compare_int64_local,
       compare_int64,
       equal_int64_local,
       equal_int64,
       globalize_int64,
       hash_fold_int64,
       hash_int64,
       int64_of_sexp,
       sexp_of_int64,
       int64_sexp_grammar,
       compare_list_local,
       compare_list,
       equal_list_local,
       equal_list,
       globalize_list,
       hash_fold_list,
       list_of_sexp,
       sexp_of_list,
       list_sexp_grammar,
       compare_nativeint_local,
       compare_nativeint,
       equal_nativeint_local,
       equal_nativeint,
       globalize_nativeint,
       hash_fold_nativeint,
       hash_nativeint,
       nativeint_of_sexp,
       sexp_of_nativeint,
       nativeint_sexp_grammar,
       compare_option_local,
       compare_option,
       equal_option_local,
       equal_option,
       globalize_option,
       hash_fold_option,
       option_of_sexp,
       sexp_of_option,
       option_sexp_grammar,
       compare_ref_local,
       compare_ref,
       equal_ref_local,
       equal_ref,
       globalize_ref,
       ref_of_sexp,
       sexp_of_ref,
       ref_sexp_grammar,
       compare_string_local,
       compare_string,
       equal_string_local,
       equal_string,
       globalize_string,
       hash_fold_string,
       hash_string,
       string_of_sexp,
       sexp_of_string,
       string_sexp_grammar,
       compare_bytes_local,
       compare_bytes,
       equal_bytes_local,
       equal_bytes,
       globalize_bytes,
       bytes_of_sexp,
       sexp_of_bytes,
       bytes_sexp_grammar,
       compare_unit_local,
       compare_unit,
       equal_unit_local,
       equal_unit,
       globalize_unit,
       hash_fold_unit,
       hash_unit,
       unit_of_sexp,
       sexp_of_unit,
       unit_sexp_grammar,
       symbol$6,
       symbol$7,
       lnot,
       abs,
       zero,
       symbol$8,
       symbol$9,
       symbol$10,
       ascending$0,
       descending$0,
       max$0,
       min$0,
       symbol$11,
       symbol$12,
       symbol$13,
       symbol$14,
       symbol$15,
       symbol$16,
       symbol$17,
       symbol$18,
       fst,
       snd,
       failwith,
       invalid_arg,
       raise_s],
    compare_array_local$0 = Export[1],
    compare_array$0 = Export[2],
    equal_array_local$0 = Export[3],
    equal_array$0 = Export[4],
    globalize_array$0 = Export[5],
    array_of_sexp$0 = Export[6],
    sexp_of_array$0 = Export[7],
    array_sexp_grammar$0 = Export[8],
    compare_bool_local$0 = Export[9],
    compare_bool$0 = Export[10],
    equal_bool_local$0 = Export[11],
    equal_bool$0 = Export[12],
    globalize_bool$0 = Export[13],
    hash_fold_bool$0 = Export[14],
    hash_bool$0 = Export[15],
    bool_of_sexp$0 = Export[16],
    sexp_of_bool$0 = Export[17],
    bool_sexp_grammar$0 = Export[18],
    compare_char_local$0 = Export[19],
    compare_char$0 = Export[20],
    equal_char_local$0 = Export[21],
    equal_char$0 = Export[22],
    globalize_char$0 = Export[23],
    hash_fold_char$0 = Export[24],
    hash_char$0 = Export[25],
    char_of_sexp$0 = Export[26],
    sexp_of_char$0 = Export[27],
    char_sexp_grammar$0 = Export[28],
    sexp_of_exn$0 = Export[29],
    compare_float_local$0 = Export[30],
    compare_float$0 = Export[31],
    equal_float_local$0 = Export[32],
    equal_float$0 = Export[33],
    globalize_float$0 = Export[34],
    hash_fold_float$0 = Export[35],
    hash_float$0 = Export[36],
    float_of_sexp$0 = Export[37],
    sexp_of_float$0 = Export[38],
    float_sexp_grammar$0 = Export[39],
    compare_int_local$0 = Export[40],
    compare_int$0 = Export[41],
    equal_int_local$0 = Export[42],
    equal_int$0 = Export[43],
    globalize_int$0 = Export[44],
    hash_fold_int$0 = Export[45],
    hash_int$0 = Export[46],
    int_of_sexp$0 = Export[47],
    sexp_of_int$0 = Export[48],
    int_sexp_grammar$0 = Export[49],
    compare_int32_local$0 = Export[50],
    compare_int32$0 = Export[51],
    equal_int32_local$0 = Export[52],
    equal_int32$0 = Export[53],
    globalize_int32$0 = Export[54],
    hash_fold_int32$0 = Export[55],
    hash_int32$0 = Export[56],
    int32_of_sexp$0 = Export[57],
    sexp_of_int32$0 = Export[58],
    int32_sexp_grammar$0 = Export[59],
    compare_int64_local$0 = Export[60],
    compare_int64$0 = Export[61],
    equal_int64_local$0 = Export[62],
    equal_int64$0 = Export[63],
    globalize_int64$0 = Export[64],
    hash_fold_int64$0 = Export[65],
    hash_int64$0 = Export[66],
    int64_of_sexp$0 = Export[67],
    sexp_of_int64$0 = Export[68],
    int64_sexp_grammar$0 = Export[69],
    compare_list_local$0 = Export[70],
    compare_list$0 = Export[71],
    equal_list_local$0 = Export[72],
    equal_list$0 = Export[73],
    globalize_list$0 = Export[74],
    hash_fold_list$0 = Export[75],
    list_of_sexp$0 = Export[76],
    sexp_of_list$0 = Export[77],
    list_sexp_grammar$0 = Export[78],
    compare_nativeint_local$0 = Export[79],
    compare_nativeint$0 = Export[80],
    equal_nativeint_local$0 = Export[81],
    equal_nativeint$0 = Export[82],
    globalize_nativeint$0 = Export[83],
    hash_fold_nativeint$0 = Export[84],
    hash_nativeint$0 = Export[85],
    nativeint_of_sexp$0 = Export[86],
    sexp_of_nativeint$0 = Export[87],
    nativeint_sexp_grammar$0 = Export[88],
    compare_option_local$0 = Export[89],
    compare_option$0 = Export[90],
    equal_option_local$0 = Export[91],
    equal_option$0 = Export[92],
    globalize_option$0 = Export[93],
    hash_fold_option$0 = Export[94],
    option_of_sexp$0 = Export[95],
    sexp_of_option$0 = Export[96],
    option_sexp_grammar$0 = Export[97],
    compare_ref_local$0 = Export[98],
    compare_ref$0 = Export[99],
    equal_ref_local$0 = Export[100],
    equal_ref$0 = Export[101],
    globalize_ref$0 = Export[102],
    ref_of_sexp$0 = Export[103],
    sexp_of_ref$0 = Export[104],
    ref_sexp_grammar$0 = Export[105],
    compare_string_local$0 = Export[106],
    compare_string$0 = Export[107],
    equal_string_local$0 = Export[108],
    equal_string$0 = Export[109],
    globalize_string$0 = Export[110],
    hash_fold_string$0 = Export[111],
    hash_string$0 = Export[112],
    string_of_sexp$0 = Export[113],
    sexp_of_string$0 = Export[114],
    string_sexp_grammar$0 = Export[115],
    compare_bytes_local$0 = Export[116],
    compare_bytes$0 = Export[117],
    equal_bytes_local$0 = Export[118],
    equal_bytes$0 = Export[119],
    globalize_bytes$0 = Export[120],
    bytes_of_sexp$0 = Export[121],
    sexp_of_bytes$0 = Export[122],
    bytes_sexp_grammar$0 = Export[123],
    compare_unit_local$0 = Export[124],
    compare_unit$0 = Export[125],
    equal_unit_local$0 = Export[126],
    equal_unit$0 = Export[127],
    globalize_unit$0 = Export[128],
    hash_fold_unit$0 = Export[129],
    hash_unit$0 = Export[130],
    unit_of_sexp$0 = Export[131],
    sexp_of_unit$0 = Export[132],
    unit_sexp_grammar$0 = Export[133],
    symbol$19 = Export[134],
    symbol$20 = Export[135],
    lnot$0 = Export[136],
    abs$0 = Export[137],
    zero$0 = Export[138],
    symbol$21 = Export[139],
    symbol$22 = Export[140],
    symbol$23 = Export[141],
    ascending$1 = Export[142],
    descending$1 = Export[143],
    max$1 = Export[144],
    min$1 = Export[145],
    symbol$24 = Export[146],
    symbol$25 = Export[147],
    symbol$26 = Export[148],
    symbol$27 = Export[149],
    symbol$28 = Export[150],
    symbol$29 = Export[151],
    symbol$30 = Export[152],
    symbol$31 = Export[153],
    fst$0 = Export[154],
    snd$0 = Export[155],
    failwith$0 = Export[156],
    invalid_arg$0 = Export[157],
    raise_s$0 = Export[158],
    include$0 = Base_Container_intf[1],
    Continue_or_stop = include$0[1],
    Not_found_s$0 = Base_Import[297];
   caml_call1(Base_Backtrace[7], 0);
   var
    Caml = [0],
    Base =
      [0,
       Exit,
       Not_found,
       max_int,
       min_int,
       infinity,
       neg_infinity,
       nan,
       max_float,
       min_float,
       epsilon_float,
       char_of_int,
       string_of_bool,
       bool_of_string_opt,
       bool_of_string,
       string_of_int,
       int_of_string_opt,
       string_of_float,
       float_of_string_opt,
       stdin,
       stdout,
       stderr,
       print_char,
       print_string,
       print_bytes,
       print_int,
       print_float,
       print_endline,
       print_newline,
       prerr_char,
       prerr_string,
       prerr_bytes,
       prerr_int,
       prerr_float,
       prerr_endline,
       prerr_newline,
       read_line,
       read_int_opt,
       read_int,
       read_float_opt,
       read_float,
       open_out,
       open_out_bin,
       open_out_gen,
       flush,
       flush_all,
       output_char,
       output_string,
       output_bytes,
       output,
       output_substring,
       output_byte,
       output_binary_int,
       output_value,
       seek_out,
       pos_out,
       out_channel_length,
       close_out,
       close_out_noerr,
       set_binary_mode_out,
       open_in,
       open_in_bin,
       open_in_gen,
       input_char,
       input_line,
       input,
       really_input,
       really_input_string,
       input_byte,
       input_binary_int,
       input_value,
       seek_in,
       pos_in,
       in_channel_length,
       close_in,
       close_in_noerr,
       set_binary_mode_in,
       string_of_format,
       symbol,
       exit,
       at_exit,
       valid_float_lexem,
       unsafe_really_input,
       do_at_exit,
       do_domain_local_at_exit,
       Sexp,
       Int_conversions,
       Exported_for_specific_uses,
       Export,
       compare_array_local$0,
       compare_array$0,
       equal_array_local$0,
       equal_array$0,
       globalize_array$0,
       array_of_sexp$0,
       sexp_of_array$0,
       array_sexp_grammar$0,
       compare_bool_local$0,
       compare_bool$0,
       equal_bool_local$0,
       equal_bool$0,
       globalize_bool$0,
       hash_fold_bool$0,
       hash_bool$0,
       bool_of_sexp$0,
       sexp_of_bool$0,
       bool_sexp_grammar$0,
       compare_char_local$0,
       compare_char$0,
       equal_char_local$0,
       equal_char$0,
       globalize_char$0,
       hash_fold_char$0,
       hash_char$0,
       char_of_sexp$0,
       sexp_of_char$0,
       char_sexp_grammar$0,
       sexp_of_exn$0,
       compare_float_local$0,
       compare_float$0,
       equal_float_local$0,
       equal_float$0,
       globalize_float$0,
       hash_fold_float$0,
       hash_float$0,
       float_of_sexp$0,
       sexp_of_float$0,
       float_sexp_grammar$0,
       compare_int_local$0,
       compare_int$0,
       equal_int_local$0,
       equal_int$0,
       globalize_int$0,
       hash_fold_int$0,
       hash_int$0,
       int_of_sexp$0,
       sexp_of_int$0,
       int_sexp_grammar$0,
       compare_int32_local$0,
       compare_int32$0,
       equal_int32_local$0,
       equal_int32$0,
       globalize_int32$0,
       hash_fold_int32$0,
       hash_int32$0,
       int32_of_sexp$0,
       sexp_of_int32$0,
       int32_sexp_grammar$0,
       compare_int64_local$0,
       compare_int64$0,
       equal_int64_local$0,
       equal_int64$0,
       globalize_int64$0,
       hash_fold_int64$0,
       hash_int64$0,
       int64_of_sexp$0,
       sexp_of_int64$0,
       int64_sexp_grammar$0,
       compare_list_local$0,
       compare_list$0,
       equal_list_local$0,
       equal_list$0,
       globalize_list$0,
       hash_fold_list$0,
       list_of_sexp$0,
       sexp_of_list$0,
       list_sexp_grammar$0,
       compare_nativeint_local$0,
       compare_nativeint$0,
       equal_nativeint_local$0,
       equal_nativeint$0,
       globalize_nativeint$0,
       hash_fold_nativeint$0,
       hash_nativeint$0,
       nativeint_of_sexp$0,
       sexp_of_nativeint$0,
       nativeint_sexp_grammar$0,
       compare_option_local$0,
       compare_option$0,
       equal_option_local$0,
       equal_option$0,
       globalize_option$0,
       hash_fold_option$0,
       option_of_sexp$0,
       sexp_of_option$0,
       option_sexp_grammar$0,
       compare_ref_local$0,
       compare_ref$0,
       equal_ref_local$0,
       equal_ref$0,
       globalize_ref$0,
       ref_of_sexp$0,
       sexp_of_ref$0,
       ref_sexp_grammar$0,
       compare_string_local$0,
       compare_string$0,
       equal_string_local$0,
       equal_string$0,
       globalize_string$0,
       hash_fold_string$0,
       hash_string$0,
       string_of_sexp$0,
       sexp_of_string$0,
       string_sexp_grammar$0,
       compare_bytes_local$0,
       compare_bytes$0,
       equal_bytes_local$0,
       equal_bytes$0,
       globalize_bytes$0,
       bytes_of_sexp$0,
       sexp_of_bytes$0,
       bytes_sexp_grammar$0,
       compare_unit_local$0,
       compare_unit$0,
       equal_unit_local$0,
       equal_unit$0,
       globalize_unit$0,
       hash_fold_unit$0,
       hash_unit$0,
       unit_of_sexp$0,
       sexp_of_unit$0,
       unit_sexp_grammar$0,
       symbol$19,
       symbol$20,
       lnot$0,
       abs$0,
       zero$0,
       symbol$21,
       symbol$22,
       symbol$23,
       ascending$1,
       descending$1,
       max$1,
       min$1,
       symbol$24,
       symbol$25,
       symbol$26,
       symbol$27,
       symbol$28,
       symbol$29,
       symbol$30,
       symbol$31,
       fst$0,
       snd$0,
       failwith$0,
       invalid_arg$0,
       raise_s$0,
       Continue_or_stop,
       Not_found_s$0,
       Caml];
   runtime.caml_register_global(23, Base, "Base");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
