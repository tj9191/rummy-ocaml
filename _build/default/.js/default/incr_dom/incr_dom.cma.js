// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Incr_dom__
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Incr_dom = [0],
    Incr_dom$0 = [0, Incr_dom];
   runtime.caml_register_global(0, Incr_dom$0, "Incr_dom__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incr_dom__Component
//# unitInfo: Requires: Core__Option, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Incr_dom_Component$0 = "Incr_dom__Component",
    cst_incr_dom$0 = "incr_dom";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Core_Option = global_data.Core__Option,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incr_dom_Component$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incr_dom$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/component.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_incr_dom$0, "component.ml");
   var
    cst_incr_dom = cst_incr_dom$0,
    cst_Incr_dom_Component = cst_Incr_dom_Component$0;
   function extra(r){return r[5];}
   function on_display(r){return r[4];}
   function view(r){return r[3];}
   function update_visibility(r){return r[2];}
   function apply_action(r){return r[1];}
   function create_with_extra
   (apply_action, update_visibility, on_display, extra, model, view){
    function _g_(param, _l_, _k_){return model;}
    var apply_action$0 = caml_call2(Core_Option[39], apply_action, _g_);
    function _h_(param){return model;}
    var
     update_visibility$0 = caml_call2(Core_Option[39], update_visibility, _h_);
    function _i_(param, _j_){return 0;}
    var on_display$0 = caml_call2(Core_Option[39], on_display, _i_);
    return [0, apply_action$0, update_visibility$0, view, on_display$0, extra];
   }
   function create(_c_, _b_, _a_){
    var _d_ = 0;
    return function(_e_, _f_){
     return create_with_extra(_c_, _b_, _a_, _d_, _e_, _f_);};
   }
   caml_call1(Ppx_inline_test_lib[7], cst_incr_dom);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incr_dom_Component);
   var
    Incr_dom_Component =
      [0,
       apply_action,
       update_visibility,
       view,
       extra,
       on_display,
       create,
       create_with_extra];
   runtime.caml_register_global
    (12, Incr_dom_Component, cst_Incr_dom_Component$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incr_dom__Incr
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Ui_incr
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Incr_dom_Incr = "Incr_dom__Incr",
    cst_incr_dom = "incr_dom";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Ui_incr = global_data.Ui_incr;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incr_dom_Incr);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incr_dom);
   caml_call1(Ppx_expect_runtime[1][1], "src/incr.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_incr_dom, "incr.ml");
   var
    Incr = Ui_incr[1],
    clock = Ui_incr[2],
    sexp_of_state_witness = Ui_incr[3],
    State = Ui_incr[4],
    sexp_of_t = Ui_incr[5],
    invariant = Ui_incr[6],
    is_const = Ui_incr[7],
    is_valid = Ui_incr[8],
    is_necessary = Ui_incr[9],
    const$0 = Ui_incr[10],
    return$0 = Ui_incr[11],
    map = Ui_incr[12],
    symbol_map = Ui_incr[13],
    map2 = Ui_incr[14],
    map3 = Ui_incr[15],
    map4 = Ui_incr[16],
    map5 = Ui_incr[17],
    map6 = Ui_incr[18],
    map7 = Ui_incr[19],
    map8 = Ui_incr[20],
    map9 = Ui_incr[21],
    map10 = Ui_incr[22],
    map11 = Ui_incr[23],
    map12 = Ui_incr[24],
    map13 = Ui_incr[25],
    map14 = Ui_incr[26],
    map15 = Ui_incr[27],
    bind = Ui_incr[28],
    symbol_bind = Ui_incr[29],
    bind2 = Ui_incr[30],
    bind3 = Ui_incr[31],
    bind4 = Ui_incr[32],
    Infix = Ui_incr[33],
    join = Ui_incr[34],
    if$0 = Ui_incr[35],
    freeze = Ui_incr[36],
    depend_on = Ui_incr[37],
    necessary_if_alive = Ui_incr[38],
    for_all = Ui_incr[39],
    exists = Ui_incr[40],
    all = Ui_incr[41],
    both = Ui_incr[42],
    array_fold = Ui_incr[43],
    reduce_balanced = Ui_incr[44],
    Unordered_array_fold_update = Ui_incr[45],
    unordered_array_fold = Ui_incr[46],
    opt_unordered_array_fold = Ui_incr[47],
    sum = Ui_incr[48],
    opt_sum = Ui_incr[49],
    sum_int = Ui_incr[50],
    sum_float = Ui_incr[51],
    Scope = Ui_incr[52],
    Var = Ui_incr[53],
    Observer = Ui_incr[54],
    observe = Ui_incr[55],
    Update = Ui_incr[56],
    on_update = Ui_incr[57],
    stabilize = Ui_incr[58],
    am_stabilizing = Ui_incr[59],
    Cutoff = Ui_incr[60],
    set_cutoff = Ui_incr[61],
    get_cutoff = Ui_incr[62],
    lazy_from_fun = Ui_incr[63],
    default_hash_table_initial_siz = Ui_incr[64],
    memoize_fun = Ui_incr[65],
    memoize_fun_by_key = Ui_incr[66],
    weak_memoize_fun = Ui_incr[67],
    weak_memoize_fun_by_key = Ui_incr[68],
    user_info = Ui_incr[69],
    set_user_info = Ui_incr[70],
    append_user_info_graphviz = Ui_incr[71],
    Node_value = Ui_incr[72],
    node_value = Ui_incr[73],
    Packed = Ui_incr[74],
    pack = Ui_incr[75],
    save_dot = Ui_incr[76],
    save_dot_to_file = Ui_incr[77],
    Let_syntax = Ui_incr[78],
    Before_or_after = Ui_incr[79],
    Clock = Ui_incr[80],
    Expert = Ui_incr[81],
    Map = Ui_incr[82],
    Select = Ui_incr[83];
   caml_call1(Ppx_inline_test_lib[7], cst_incr_dom);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incr_dom_Incr);
   var
    Incr_dom_Incr =
      [0,
       Incr,
       clock,
       sexp_of_state_witness,
       State,
       sexp_of_t,
       invariant,
       is_const,
       is_valid,
       is_necessary,
       const$0,
       return$0,
       map,
       symbol_map,
       map2,
       map3,
       map4,
       map5,
       map6,
       map7,
       map8,
       map9,
       map10,
       map11,
       map12,
       map13,
       map14,
       map15,
       bind,
       symbol_bind,
       bind2,
       bind3,
       bind4,
       Infix,
       join,
       if$0,
       freeze,
       depend_on,
       necessary_if_alive,
       for_all,
       exists,
       all,
       both,
       array_fold,
       reduce_balanced,
       Unordered_array_fold_update,
       unordered_array_fold,
       opt_unordered_array_fold,
       sum,
       opt_sum,
       sum_int,
       sum_float,
       Scope,
       Var,
       Observer,
       observe,
       Update,
       on_update,
       stabilize,
       am_stabilizing,
       Cutoff,
       set_cutoff,
       get_cutoff,
       lazy_from_fun,
       default_hash_table_initial_siz,
       memoize_fun,
       memoize_fun_by_key,
       weak_memoize_fun,
       weak_memoize_fun_by_key,
       user_info,
       set_user_info,
       append_user_info_graphviz,
       Node_value,
       node_value,
       Packed,
       pack,
       save_dot,
       save_dot_to_file,
       Let_syntax,
       Before_or_after,
       Clock,
       Expert,
       Map,
       Select];
   runtime.caml_register_global(12, Incr_dom_Incr, cst_Incr_dom_Incr);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incr_dom__App_intf
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Incr_dom_App_intf = "Incr_dom__App_intf",
    cst_incr_dom = "incr_dom";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incr_dom_App_intf);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incr_dom);
   caml_call1(Ppx_expect_runtime[1][1], "src/app_intf.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_incr_dom, "app_intf.ml");
   var Private = [0];
   caml_call1(Ppx_inline_test_lib[7], cst_incr_dom);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incr_dom_App_intf);
   var Incr_dom_App_intf = [0, Private];
   runtime.caml_register_global(11, Incr_dom_App_intf, cst_Incr_dom_App_intf);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incr_dom__Js_misc
//# unitInfo: Requires: Base__Binary_searchable, Bin_prot__Common, Bin_prot__Read, Bin_prot__Shape, Bin_prot__Write, Bin_shape, Core, Core__Float, Core__Option, Js_of_ocaml__Dom_html, Js_of_ocaml__Js, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv_error, Sexplib0__Sexp_conv_record
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Columns$1 = "Columns",
    cst_Incr_dom_Js_misc$0 = "Incr_dom__Js_misc",
    cst_Rows$1 = "Rows",
    cst_a$4 = "a",
    cst_bottom$1 = "bottom",
    cst_columns = "columns",
    cst_incr_dom$0 = "incr_dom",
    cst_left$1 = "left",
    cst_right$1 = "right",
    cst_rows = "rows",
    cst_rows_or_columns$1 = "rows_or_columns",
    cst_src_js_misc_ml_Rect_t$0 = "src/js_misc.ml.Rect.t",
    cst_src_js_misc_ml_rows_or_col$0 = "src/js_misc.ml.rows_or_columns",
    cst_t$1 = "t",
    cst_top$1 = "top",
    caml_string_notequal = runtime.caml_string_notequal;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    error_source_003 = cst_src_js_misc_ml_Rect_t$0,
    error_source_019 = cst_src_js_misc_ml_rows_or_col$0,
    descriptions = [0, [0, cst_Rows$1, 0], [0, [0, cst_Columns$1, 0], 0]],
    Core = global_data.Core,
    Core_Float = global_data.Core__Float,
    Core_Option = global_data.Core__Option,
    Js_of_ocaml_Dom_html = global_data.Js_of_ocaml__Dom_html,
    Base_Binary_searchable = global_data.Base__Binary_searchable,
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    Bin_prot_Read = global_data.Bin_prot__Read,
    Bin_prot_Common = global_data.Bin_prot__Common,
    Bin_prot_Write = global_data.Bin_prot__Write,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Bin_shape = global_data.Bin_shape,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Sexplib0_Sexp_conv_record = global_data.Sexplib0__Sexp_conv_record,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incr_dom_Js_misc$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incr_dom$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/js_misc.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_incr_dom$0, "js_misc.ml");
   var
    _E_ =
      [0,
       [11, "Element ", [2, 0, [11, " not found", 0]]],
       "Element %s not found"],
    cst_keep_in_view = "keep-in-view",
    cst_Columns$0 = cst_Columns$1,
    cst_Rows$0 = cst_Rows$1,
    _D_ = [0, 0],
    _C_ = [0, 0],
    _B_ = [1, cst_src_js_misc_ml_rows_or_col$0],
    cst_src_js_misc_ml_rows_or_col = cst_src_js_misc_ml_rows_or_col$0,
    _u_ = [0, cst_Columns$1],
    _v_ = [0, cst_Rows$1],
    cst_src_js_misc_ml_Rect_t = cst_src_js_misc_ml_Rect_t$0,
    cst_t$0 = cst_t$1,
    _a_ = [0, cst_right$1],
    _b_ = [0, cst_bottom$1],
    _c_ = [0, cst_left$1],
    _d_ = [0, cst_top$1],
    cst_right = cst_right$1,
    cst_bottom = cst_bottom$1,
    cst_left = cst_left$1,
    cst_top = cst_top$1,
    cst_a = cst_a$4,
    cst_src_js_misc_ml_9_14 = "src/js_misc.ml:9:14",
    cst_right$0 = cst_right$1,
    cst_a$0 = cst_a$4,
    cst_src_js_misc_ml_8_15 = "src/js_misc.ml:8:15",
    cst_bottom$0 = cst_bottom$1,
    cst_a$1 = cst_a$4,
    cst_src_js_misc_ml_7_13 = "src/js_misc.ml:7:13",
    cst_left$0 = cst_left$1,
    cst_a$2 = cst_a$4,
    cst_src_js_misc_ml_6_12 = "src/js_misc.ml:6:12",
    cst_top$0 = cst_top$1,
    cst_a$3 = cst_a$4,
    cst_t = cst_t$1,
    cst_src_js_misc_ml_5_2 = "src/js_misc.ml:5:2",
    _w_ = [0, [0, cst_Rows$1, 0], [0, [0, cst_Columns$1, 0], 0]],
    cst_rows_or_columns = cst_rows_or_columns$1,
    cst_src_js_misc_ml_25_0 = "src/js_misc.ml:25:0",
    cst_rows_or_columns$0 = cst_rows_or_columns$1,
    cst_Rows = cst_Rows$1,
    cst_Columns = cst_Columns$1,
    cst_incr_dom = cst_incr_dom$0,
    cst_Incr_dom_Js_misc = cst_Incr_dom_Js_misc$0;
   function t_of_sexp(of_a_001, x_004){
    function _an_(param){
     var
      _aq_ = param[2],
      _ar_ = _aq_[2],
      right = _ar_[2][1],
      bottom = _ar_[1],
      left = _aq_[1],
      top = param[1];
     return [0, top, left, bottom, right];
    }
    var _ao_ = 0;
    function _ap_(param){
     return caml_string_notequal(param, cst_bottom$1)
             ? caml_string_notequal
                (param, cst_left$1)
               ? caml_string_notequal
                  (param, cst_right$1)
                 ? caml_string_notequal(param, cst_top$1) ? -1 : 0
                 : 3
               : 1
             : 2;
    }
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_003,
             [0,
              cst_top,
              1,
              of_a_001,
              [0,
               cst_left,
               1,
               of_a_001,
               [0, cst_bottom, 1, of_a_001, [0, cst_right, 1, of_a_001, 0]]]],
             _ap_,
             _ao_,
             _an_,
             x_004);
   }
   function sexp_of_t(of_a_005, param){
    var
     right_013 = param[4],
     bottom_011 = param[3],
     left_009 = param[2],
     top_007 = param[1],
     arg_014 = caml_call1(of_a_005, right_013),
     bnds_006 = [0, [1, [0, _a_, [0, arg_014, 0]]], 0],
     arg_012 = caml_call1(of_a_005, bottom_011),
     bnds_006$0 = [0, [1, [0, _b_, [0, arg_012, 0]]], bnds_006],
     arg_010 = caml_call1(of_a_005, left_009),
     bnds_006$1 = [0, [1, [0, _c_, [0, arg_010, 0]]], bnds_006$0],
     arg_008 = caml_call1(of_a_005, top_007),
     bnds_006$2 = [0, [1, [0, _d_, [0, arg_008, 0]]], bnds_006$1];
    return [1, bnds_006$2];
   }
   var
    _e_ = caml_call1(Bin_shape[3][1], cst_a),
    _f_ = caml_call1(Bin_shape[4][1], cst_src_js_misc_ml_9_14),
    _g_ = [0, [0, cst_right$0, caml_call2(Bin_prot_Shape[11], _f_, _e_)], 0],
    _h_ = caml_call1(Bin_shape[3][1], cst_a$0),
    _i_ = caml_call1(Bin_shape[4][1], cst_src_js_misc_ml_8_15),
    _j_ =
      [0, [0, cst_bottom$0, caml_call2(Bin_prot_Shape[11], _i_, _h_)], _g_],
    _k_ = caml_call1(Bin_shape[3][1], cst_a$1),
    _l_ = caml_call1(Bin_shape[4][1], cst_src_js_misc_ml_7_13),
    _m_ = [0, [0, cst_left$0, caml_call2(Bin_prot_Shape[11], _l_, _k_)], _j_],
    _n_ = caml_call1(Bin_shape[3][1], cst_a$2),
    _o_ = caml_call1(Bin_shape[4][1], cst_src_js_misc_ml_6_12),
    _p_ = [0, [0, cst_top$0, caml_call2(Bin_prot_Shape[11], _o_, _n_)], _m_],
    _q_ = caml_call1(Bin_prot_Shape[4], _p_),
    _r_ = [0, caml_call1(Bin_shape[3][1], cst_a$3), 0],
    _s_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t), _r_, _q_], 0],
    _t_ = caml_call1(Bin_shape[4][1], cst_src_js_misc_ml_5_2),
    group = caml_call2(Bin_prot_Shape[2], _t_, _s_);
   function bin_shape_t(a){
    var _am_ = caml_call1(Bin_shape[2][1], cst_t$0);
    return caml_call1(caml_call2(Bin_prot_Shape[10], group, _am_), [0, a, 0]);
   }
   function bin_size_t(size_of_a, param){
    var
     v4 = param[4],
     v3 = param[3],
     v2 = param[2],
     v1 = param[1],
     _ai_ = caml_call1(size_of_a, v1),
     size = caml_call2(Bin_prot_Common[23], 0, _ai_),
     _aj_ = caml_call1(size_of_a, v2),
     size$0 = caml_call2(Bin_prot_Common[23], size, _aj_),
     _ak_ = caml_call1(size_of_a, v3),
     size$1 = caml_call2(Bin_prot_Common[23], size$0, _ak_),
     _al_ = caml_call1(size_of_a, v4);
    return caml_call2(Bin_prot_Common[23], size$1, _al_);
   }
   function bin_write_t(write_a, buf, pos, param){
    var
     v4 = param[4],
     v3 = param[3],
     v2 = param[2],
     v1 = param[1],
     pos$0 = caml_call3(write_a, buf, pos, v1),
     pos$1 = caml_call3(write_a, buf, pos$0, v2),
     pos$2 = caml_call3(write_a, buf, pos$1, v3);
    return caml_call3(write_a, buf, pos$2, v4);
   }
   function bin_writer_t(bin_writer_a){
    function _ae_(v){
     var _af_ = bin_writer_a[2];
     return function(_ag_, _ah_){return bin_write_t(_af_, v, _ag_, _ah_);};
    }
    return [0, function(v){return bin_size_t(bin_writer_a[1], v);}, _ae_];
   }
   function bin_read_t(of_a, buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19], cst_src_js_misc_ml_Rect_t, pos_ref[1]);
   }
   function bin_read_t$0(of_a, buf, pos_ref){
    var
     v_top = caml_call2(of_a, buf, pos_ref),
     v_left = caml_call2(of_a, buf, pos_ref),
     v_bottom = caml_call2(of_a, buf, pos_ref),
     v_right = caml_call2(of_a, buf, pos_ref);
    return [0, v_top, v_left, v_bottom, v_right];
   }
   function bin_reader_t(bin_reader_a){
    function _ad_(buf, pos_ref, vtag){
     return bin_read_t(bin_reader_a[1], buf, pos_ref, vtag);
    }
    return [0,
            function(buf, pos_ref){
             return bin_read_t$0(bin_reader_a[1], buf, pos_ref);
            },
            _ad_];
   }
   function bin_t(bin_a){
    var _ab_ = bin_reader_t(bin_a[3]), _ac_ = bin_writer_t(bin_a[2]);
    return [0, bin_shape_t(bin_a[1]), _ac_, _ab_];
   }
   function compare(cmp_a, a_015, b_016){
    if(a_015 === b_016) return 0;
    var n = caml_call2(cmp_a, a_015[1], b_016[1]);
    if(0 !== n) return n;
    var n$0 = caml_call2(cmp_a, a_015[2], b_016[2]);
    if(0 !== n$0) return n$0;
    var n$1 = caml_call2(cmp_a, a_015[3], b_016[3]);
    return 0 === n$1 ? caml_call2(cmp_a, a_015[4], b_016[4]) : n$1;
   }
   function right(r){return r[4];}
   function bottom(r){return r[3];}
   function left(r){return r[2];}
   function top(r){return r[1];}
   function map(t, f){
    var
     ___ = caml_call1(f, t[4]),
     _$_ = caml_call1(f, t[3]),
     _aa_ = caml_call1(f, t[2]);
    return [0, caml_call1(f, t[1]), _aa_, _$_, ___];
   }
   function int_height(t){return t[3] - t[1] | 0;}
   function int_width(t){return t[4] - t[2] | 0;}
   function float_height(t){return t[3] - t[1];}
   function float_width(t){return t[4] - t[2];}
   function round_float_rect(opt){
    if(opt) var sth = opt[1], round = sth; else var round = Core_Float[53];
    return function(_Z_){return map(_Z_, round);};
   }
   function rows_or_columns_of_sexp(sexp_020){
    a:
    {
     if(0 === sexp_020[0]){
      var _V_ = sexp_020[1];
      b:
      if(caml_string_notequal(_V_, cst_Columns$1)){
       if(caml_string_notequal(_V_, cst_Rows$1)){
        if(! caml_string_notequal(_V_, cst_columns)) break b;
        if(caml_string_notequal(_V_, cst_rows)) break a;
       }
       return 0;
      }
      return 1;
     }
     var _W_ = sexp_020[1];
     if(! _W_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_019, sexp_020);
     var _X_ = _W_[1];
     if(0 !== _X_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_019, sexp_020);
     var _Y_ = _X_[1];
     b:
     if(caml_string_notequal(_Y_, cst_Columns$1)){
      if(caml_string_notequal(_Y_, cst_Rows$1)){
       if(! caml_string_notequal(_Y_, cst_columns)) break b;
       if(caml_string_notequal(_Y_, cst_rows)) break a;
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_019, sexp_020);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[7], error_source_019, sexp_020);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_019, sexp_020);
   }
   function sexp_of_rows_or_columns(param){return param ? _u_ : _v_;}
   var
    _x_ = caml_call1(Bin_prot_Shape[5], _w_),
    _y_ =
      [0, [0, caml_call1(Bin_shape[2][1], cst_rows_or_columns), 0, _x_], 0],
    _z_ = caml_call1(Bin_shape[4][1], cst_src_js_misc_ml_25_0),
    group$0 = caml_call2(Bin_prot_Shape[2], _z_, _y_),
    _A_ = caml_call1(Bin_shape[2][1], cst_rows_or_columns$0),
    bin_shape_rows_or_columns =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$0, _A_), 0);
   function bin_size_rows_or_columns(param){return 1;}
   function bin_write_rows_or_columns(buf, pos, param){
    return param
            ? caml_call3(Bin_prot_Write[30], buf, pos, 1)
            : caml_call3(Bin_prot_Write[30], buf, pos, 0);
   }
   var
    bin_writer_rows_or_columns =
      [0, bin_size_rows_or_columns, bin_write_rows_or_columns];
   function bin_read_rows_or_columns(buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19], cst_src_js_misc_ml_rows_or_col, pos_ref[1]);
   }
   function bin_read_rows_or_columns$0(buf, pos_ref){
    var match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
    return 0 === match
            ? 0
            : 1
              === match
              ? 1
              : caml_call2(Bin_prot_Common[18], _B_, pos_ref[1]);
   }
   var
    bin_reader_rows_or_columns =
      [0, bin_read_rows_or_columns$0, bin_read_rows_or_columns],
    bin_rows_or_columns =
      [0,
       bin_shape_rows_or_columns,
       bin_writer_rows_or_columns,
       bin_reader_rows_or_columns],
    rows = 0,
    columns = 1;
   function is_rows(param){return param ? 0 : 1;}
   function is_columns(param){return param ? 1 : 0;}
   function rows_val(param){return param ? 0 : _C_;}
   function columns_val(param){return param ? _D_ : 0;}
   var
    rows$0 = [0, cst_Rows, 0, rows],
    columns$0 = [0, cst_Columns, 1, columns];
   function fold(init, rows_fun, columns_fun){
    return caml_call2
            (columns_fun, caml_call2(rows_fun, init, rows$0), columns$0);
   }
   function iter(rows_fun, columns_fun){
    caml_call1(rows_fun, rows$0);
    return caml_call1(columns_fun, columns$0);
   }
   function map$0(t, rows_fun, columns_fun){
    return t
            ? caml_call1(columns_fun, columns$0)
            : caml_call1(rows_fun, rows$0);
   }
   function make_matcher(rows_fun, columns_fun, compile_acc){
    var
     match = caml_call2(rows_fun, rows$0, compile_acc),
     compile_acc$0 = match[2],
     rows_gen = match[1],
     match$0 = caml_call2(columns_fun, columns$0, compile_acc$0),
     compile_acc$1 = match$0[2],
     columns_gen = match$0[1];
    function _S_(param){return caml_call1(rows_gen, 0);}
    function _T_(param){return caml_call1(columns_gen, 0);}
    return [0, function(_U_){return map$0(_U_, _S_, _T_);}, compile_acc$1];
   }
   function to_rank(param){return param ? 1 : 0;}
   function to_name(param){return param ? cst_Columns$0 : cst_Rows$0;}
   var
    Variants_of_rows_or_columns =
      [0,
       rows$0,
       columns$0,
       fold,
       iter,
       map$0,
       make_matcher,
       to_rank,
       to_name,
       descriptions],
    compare_rows_or_columns = runtime.caml_int_compare;
   function innerHeight(param){
    var t0 = Js_of_ocaml_Dom_html[8];
    return t0.innerHeight;
   }
   function innerWidth(param){
    var t1 = Js_of_ocaml_Dom_html[8];
    return t1.innerWidth;
   }
   function element_is_in_viewport(elt){
    var
     rect = elt.getBoundingClientRect(),
     _K_ = caml_call2(Core_Float[126], rect.top, 0.);
    if(_K_){
     var _L_ = caml_call2(Core_Float[126], rect.left, 0.);
     if(_L_){
      var
       _M_ = innerHeight(0),
       _N_ = caml_call1(Core_Float[33], _M_),
       _O_ = caml_call2(Core_Float[127], rect.bottom, _N_);
      if(_O_){
       var _P_ = innerWidth(0), _Q_ = caml_call1(Core_Float[33], _P_);
       return caml_call2(Core_Float[127], rect.right, _Q_);
      }
      var _R_ = _O_;
     }
     else
      var _R_ = _L_;
    }
    else
     var _R_ = _K_;
    return _R_;
   }
   function scroll(opt, param){
    if(opt) var sth = opt[1], id = sth; else var id = cst_keep_in_view;
    var match = caml_call1(Js_of_ocaml_Dom_html[3], id);
    if(! match) return 0;
    var elt = match[1], _J_ = 1 - element_is_in_viewport(elt);
    return _J_ ? elt.scrollIntoView(Js_of_ocaml_Js[7]) : _J_;
   }
   function viewport_rect_of_element(elt){
    var rect = elt.getBoundingClientRect();
    return [0, rect.top, rect.left, rect.bottom, rect.right];
   }
   function viewport_rect(param){
    var _I_ = innerWidth(0);
    return [0, 0, 0, innerHeight(0), _I_];
   }
   function client_rect_of_element(elt){
    var
     bounding_rect = viewport_rect_of_element(elt),
     _F_ = caml_call1(Core_Float[33], elt.clientWidth),
     _G_ = bounding_rect[2] + _F_,
     _H_ = caml_call1(Core_Float[33], elt.clientHeight);
    return [0,
            bounding_rect[1],
            bounding_rect[2],
            bounding_rect[1] + _H_,
            _G_];
   }
   function client_rect(param){
    var
     t18 = Js_of_ocaml_Dom_html[2],
     t19 = t18.documentElement,
     t16 = Js_of_ocaml_Dom_html[2],
     t17 = t16.documentElement;
    return [0, 0, 0, t17.clientHeight, t19.clientWidth];
   }
   function find_visible_range(length, nth_element_id, layout){
    if(caml_call2(Core[90], length, 0)) return 0;
    function element_search(search_by, mode, layout, x){
     function nth_element(n){
      var
       id = caml_call1(nth_element_id, n),
       match = caml_call1(Js_of_ocaml_Dom_html[3], id);
      if(! match) return caml_call3(Core[246], _E_, id, 0);
      var elt = match[1];
      return elt;
     }
     var
      first = viewport_rect_of_element(nth_element(0)),
      last = viewport_rect_of_element(nth_element(length - 1 | 0)),
      compare = Core_Float[133];
     function get(param, n){
      var
       is_ascending =
         layout
          ? caml_call2(Core_Float[127], first[2], last[2])
          : caml_call2(Core_Float[127], first[1], last[1]),
       n$0 = is_ascending ? n : (length - n | 0) - 1 | 0;
      return caml_call1(search_by, viewport_rect_of_element(nth_element(n$0)));
     }
     function length$0(param){return length;}
     return caml_call6
             (caml_call1(Base_Binary_searchable[1], [0, get, length$0])[1],
              0,
              0,
              0,
              compare,
              mode,
              x);
    }
    var viewport_rect$0 = viewport_rect(0);
    if(layout)
     var target = viewport_rect$0[2], search_by = right;
    else
     var target = viewport_rect$0[1], search_by = bottom;
    var
     first =
       element_search
        (search_by, -839473056, layout, caml_call1(Core_Float[33], target));
    if(layout)
     var target$0 = viewport_rect$0[4], search_by$0 = left;
    else
     var target$0 = viewport_rect$0[3], search_by$0 = top;
    var
     last =
       element_search
        (search_by$0, 200870407, layout, caml_call1(Core_Float[33], target$0));
    return caml_call2(Core_Option[23], first, last);
   }
   function get_scroll_container_js_expr(element){
    var
     doc = element.ownerDocument || document,
     win = doc.defaultView || window,
     re = /(auto|scroll)/;
    if(element === doc) return doc;
    var cur = element.parentNode;
    while(cur.parentNode){
     var style = win.getComputedStyle(cur);
     if(re.test(style.overflow + style.overflowY + style.overflowX))
      return cur;
     cur = cur.parentNode;
    }
    return doc;
   }
   function get_scroll_container(el){return get_scroll_container_js_expr(el);}
   caml_call1(Ppx_inline_test_lib[7], cst_incr_dom);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incr_dom_Js_misc);
   var
    Incr_dom_Js_misc =
      [0,
       [0,
        t_of_sexp,
        sexp_of_t,
        bin_shape_t,
        bin_size_t,
        bin_write_t,
        bin_read_t$0,
        bin_read_t,
        bin_writer_t,
        bin_reader_t,
        bin_t,
        compare,
        right,
        bottom,
        left,
        top,
        map,
        int_height,
        int_width,
        float_height,
        float_width],
       round_float_rect,
       viewport_rect,
       viewport_rect_of_element,
       client_rect,
       client_rect_of_element,
       element_is_in_viewport,
       scroll,
       sexp_of_rows_or_columns,
       rows_or_columns_of_sexp,
       bin_shape_rows_or_columns,
       bin_size_rows_or_columns,
       bin_write_rows_or_columns,
       bin_writer_rows_or_columns,
       bin_read_rows_or_columns$0,
       bin_read_rows_or_columns,
       bin_reader_rows_or_columns,
       bin_rows_or_columns,
       rows,
       columns,
       is_rows,
       is_columns,
       rows_val,
       columns_val,
       Variants_of_rows_or_columns,
       compare_rows_or_columns,
       find_visible_range,
       get_scroll_container];
   runtime.caml_register_global(102, Incr_dom_Js_misc, cst_Incr_dom_Js_misc$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incr_dom__Start_app
//# unitInfo: Requires: Async_js, Async_kernel, Async_kernel__Async_kernel_scheduler, Async_kernel__Deferred, Async_kernel__Ivar, CamlinternalLazy, CamlinternalOO, Core, Core__Blang, Core__Comparable, Core__Error, Core__Fn, Core__Hashtbl, Core__List, Core__Memo, Core__Option, Core__Or_error, Core__Queue, Core__Set, Core__Sexp, Core__String, Core__Time_ns, Css_gen, Incr_dom__Component, Incr_dom__Incr, Incr_dom__Js_misc, Javascript_profiling, Js_of_ocaml__Dom, Js_of_ocaml__Dom_html, Js_of_ocaml__Firebug, Js_of_ocaml__Js, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Ppx_sexp_conv_lib, Sexplib0__Sexp_conv, Stdio__In_channel, Ui_effect, Ui_incr, Ui_time_source, Vdom_file_download, Virtual_dom__Effect, Virtual_dom__Node, Virtual_dom__Vdom
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$3 = '"',
    cst_Incr_dom_Start_app$0 = "Incr_dom__Start_app",
    cst_apply_actions$1 = "apply actions",
    cst_before$1 = "before",
    cst_diff$1 = "diff",
    cst_incr_dom$0 = "incr_dom",
    cst_on_display$1 = "on_display",
    cst_patch$1 = "patch",
    cst_src_start_app_ml = "src/start_app.ml",
    cst_stabilize$5 = "stabilize",
    cst_stabilize_for_action$1 = "stabilize-for-action",
    cst_total$1 = "total",
    cst_update_visibility$1 = "update visibility",
    caml_js_wrap_callback = runtime.caml_js_wrap_callback,
    caml_jsstring_of_string = runtime.caml_jsstring_of_string,
    caml_string_of_jsstring = runtime.caml_string_of_jsstring;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    cst$2 = ": ",
    filename = "current_incr_dom_dot_graph.dot",
    cst$1 = "  ",
    cst = cst$3,
    cst$0 = cst$3,
    Virtual_dom_Node = global_data.Virtual_dom__Node,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Incr_dom_Component = global_data.Incr_dom__Component,
    Incr_dom_Incr = global_data.Incr_dom__Incr,
    Ui_time_source = global_data.Ui_time_source,
    Async_kernel_Deferred = global_data.Async_kernel__Deferred,
    Ui_effect = global_data.Ui_effect,
    Core_Queue = global_data.Core__Queue,
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    Core_Time_ns = global_data.Core__Time_ns,
    Core_String = global_data.Core__String,
    Core_Option = global_data.Core__Option,
    Js_of_ocaml_Firebug = global_data.Js_of_ocaml__Firebug,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Async_js = global_data.Async_js,
    Core = global_data.Core,
    Core_Blang = global_data.Core__Blang,
    Ppx_sexp_conv_lib = global_data.Ppx_sexp_conv_lib,
    Core_Hashtbl = global_data.Core__Hashtbl,
    Core_Error = global_data.Core__Error,
    Core_Or_error = global_data.Core__Or_error;
   global_data.CamlinternalOO;
   var
    Js_of_ocaml_Dom_html = global_data.Js_of_ocaml__Dom_html,
    Js_of_ocaml_Dom = global_data.Js_of_ocaml__Dom,
    Core_Memo = global_data.Core__Memo,
    Virtual_dom_Effect = global_data.Virtual_dom__Effect,
    Core_Fn = global_data.Core__Fn,
    Incr_dom_Js_misc = global_data.Incr_dom__Js_misc,
    Async_kernel = global_data.Async_kernel,
    Virtual_dom_Vdom = global_data.Virtual_dom__Vdom,
    Css_gen = global_data.Css_gen,
    Core_Set = global_data.Core__Set,
    Ui_incr = global_data.Ui_incr,
    Stdio_In_channel = global_data.Stdio__In_channel,
    Vdom_file_download = global_data.Vdom_file_download,
    Core_Sexp = global_data.Core__Sexp,
    Core_List = global_data.Core__List,
    Async_kernel_Ivar = global_data.Async_kernel__Ivar,
    Async_kernel_Async_kernel_sche =
      global_data.Async_kernel__Async_kernel_scheduler,
    Javascript_profiling = global_data.Javascript_profiling,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Core_Comparable = global_data.Core__Comparable;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incr_dom_Start_app$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incr_dom$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_start_app_ml);
   caml_call2(Ppx_inline_test_lib[6], cst_incr_dom$0, "start_app.ml");
   var
    cst_stabilize$1 = cst_stabilize$5,
    cst_stabilize$2 = cst_stabilize$5,
    cst_total = cst_total$1,
    cst_update_visibility = cst_update_visibility$1,
    cst_update_visibility$0 = cst_update_visibility$1,
    cst_apply_actions = cst_apply_actions$1,
    cst_apply_actions$0 = cst_apply_actions$1,
    cst_stabilize$3 = cst_stabilize$5,
    cst_stabilize$4 = cst_stabilize$5,
    cst_diff = cst_diff$1,
    cst_diff$0 = cst_diff$1,
    cst_patch = cst_patch$1,
    cst_patch$0 = cst_patch$1,
    cst_on_display = cst_on_display$1,
    cst_on_display$0 = cst_on_display$1,
    cst_total$0 = cst_total$1,
    cst_stabilize_for_action = cst_stabilize_for_action$1,
    cst_stabilize_for_action$0 = cst_stabilize_for_action$1,
    _k_ = [0, "action"],
    cst_Action = "Action",
    cst_custom_filter = "custom filter",
    cst_named_filter_blang_sexp_st =
      'named filter blang "%{sexp:string Blang.t}"',
    _i_ = [12, 34, 0],
    _j_ = [0, 0],
    cst_named_filter_blang = 'named filter blang "',
    cst_Exception_raised_by_s_Erro = "Exception raised by %s: %{Error#hum}",
    _h_ = [0, 0],
    cst_Exception_raised_by = "Exception raised by ",
    cst_stabilize = cst_stabilize$5,
    cst_stabilize$0 = cst_stabilize$5,
    cst_none = "none",
    cst_all = "all",
    _g_ = [0, [0, cst_src_start_app_ml, 461, 17163, 17204]],
    cst_scroll = "scroll",
    cst_resize = "resize",
    cst_disable_tab_index = "disable_tab_index",
    _e_ =
      [0,
       [11,
        'Available logging filters for "',
        [2, 0, [11, '":\n', [2, 0, 0]]]],
       'Available logging filters for "%s":\n%s'],
    cst_Debugging_prints_timing_in =
      "Debugging prints timing info to the console. It is disabled by default unless otherwise specified by the app.\nTo start debugging, type: startDebugging([app_id])\nTo stop debugging, type: stopDebugging([app_id])\n\n[app_id] is equal to the id of the element that the incr-dom app is bound to. If the page only has one app or you want to apply the action to all apps, you can pass in [null] (or for single-argument functions, omit it altogether).",
    cst_Profiling_is_disabled_by_d =
      "Profiling is disabled by default.\nTo start profiling, type: startProfiling([app_id])\nTo stop profiling, type: stopProfiling([app_id])",
    cst_Logging_prints_action_info =
      "Logging prints action info to the console. It is disabled by default. To start logging, type one of the following:\nstartLoggingAll([app_id]) - log all actions\nstartLogging(filter_name [, app_id]) - filter actions using a pre-defined named filter [filter_name]\nstartLogging(filter_name_blang [, app_id]) - filter actions using a blang of named filters [filter_name_blang]\nstartLoggingCustom(filter [, app_id]) - filter actions using a custom function [filter] from a string (the action sexp) to a bool\nTo stop logging, type: stopLogging([app_id])",
    cst_Action_Logging = "Action Logging",
    cst_Action_Profiling = "Action Profiling",
    cst_Debugging = "Debugging",
    cst_plain_text = "plain/text",
    _d_ =
      [0,
       [11,
        "Unable to find named filter(s): ",
        [2, 0, [11, ". Valid names are:\n", [2, 0, 0]]]],
       "Unable to find named filter(s): %s. Valid names are:\n%s"],
    _c_ =
      [0,
       [11,
        'Unable to find app with id "',
        [2, 0, [11, '". Valid app ids are: ', [2, 0, 0]]]],
       'Unable to find app with id "%s". Valid app ids are: %s'],
    cst_Incr_dom_Bonsai_Console = "Incr_dom / Bonsai Console",
    _b_ = [0, "\n"],
    _a_ = [0, ", "],
    cst_request_ids_already_set = "request_ids already set",
    cst_before$0 = cst_before$1,
    cst_after = "after",
    cst_before = cst_before$1,
    cst_incr_dom = cst_incr_dom$0,
    cst_Incr_dom_Start_app = cst_Incr_dom_Start_app$0;
   function print_errorf(fmt){
    function _a3_(s){
     return Js_of_ocaml_Firebug[1].error(caml_jsstring_of_string(s));
    }
    return caml_call2(Core[254], _a3_, fmt);
   }
   function request_animation_frame(callback){
    var
     current_context = caml_call1(Async_kernel_Async_kernel_sche[1], 0),
     request_ids = [0, 0];
    function callback$0(param){
     var _a1_ = request_ids[1];
     a:
     {
      if(typeof _a1_ === "number" && _a1_){var _a2_ = 1; break a;}
      var _a2_ = 0;
     }
     if(_a2_) return 0;
     var match = request_ids[1];
     if(typeof match === "number"){
      if(! match) request_ids[1] = 1;
     }
     else{
      var set_timeout_id = match[2], animation_frame_id = match[1];
      Js_of_ocaml_Dom_html[8].cancelAnimationFrame(animation_frame_id);
      Js_of_ocaml_Dom_html[8].clearTimeout(set_timeout_id);
      request_ids[1] = 1;
     }
     caml_call2(Async_kernel_Async_kernel_sche[2], current_context, callback);
     return 0;
    }
    var
     animation_callback =
       caml_js_wrap_callback(function(param){return callback$0(0);}),
     animation_frame_id =
       Js_of_ocaml_Dom_html[8].requestAnimationFrame(animation_callback),
     timeout_callback =
       caml_js_wrap_callback(function(param){return callback$0(0);}),
     set_timeout_id =
       Js_of_ocaml_Dom_html[8].setTimeout(timeout_callback, 1000.),
     _a0_ = request_ids[1];
    return typeof _a0_ === "number"
            ? _a0_
              ? (Js_of_ocaml_Dom_html
                  [8].cancelAnimationFrame
                 (animation_frame_id),
                Js_of_ocaml_Dom_html[8].clearTimeout(set_timeout_id))
              : (request_ids[1] = [0, animation_frame_id, set_timeout_id], 0)
            : caml_call1(Core[5], cst_request_ids_already_set);
   }
   function as_focusable(_aZ_){return _aZ_;}
   function mark_dirty(t){return caml_call2(Async_kernel_Ivar[16], t[1], 0);}
   function is_dirty(t){return caml_call1(Async_kernel_Ivar[18], t[1]);}
   function t_of_sexp(x_002){
    return caml_call2(Core_Blang[14], Core[559], x_002);
   }
   function sexp_of_t(x_003){
    return caml_call2(Core_Blang[15], Core[558], x_003);
   }
   function compare(a_004, b_005){
    function _aY_(a_006, b_007){return caml_call2(Core[551], a_006, b_007);}
    return caml_call3(Core_Blang[11], _aY_, a_004, b_005);
   }
   var
    include =
      caml_call1(Core_Comparable[12], [0, compare, t_of_sexp, sexp_of_t]),
    symbol = include[1],
    symbol$0 = include[2],
    symbol$1 = include[3],
    symbol$2 = include[4],
    symbol$3 = include[5],
    symbol$4 = include[6],
    equal = include[7],
    compare$0 = include[8],
    min = include[9],
    max = include[10],
    ascending = include[11],
    descending = include[12],
    between = include[13],
    clamp_exn = include[14],
    clamp = include[15],
    comparator = include[16],
    validate_lbound = include[17],
    validate_ubound = include[18],
    validate_bound = include[19],
    Replace_polymorphic_compare = include[20],
    Map = include[21],
    Set = include[22];
   function set_logging_filter(t, logging_filter){t[2][1] = logging_filter; return 0;
   }
   var
    global = Js_of_ocaml_Js[52][1],
    global_is_initialized = [0, 0],
    app_states = caml_call3(Core_String[164][5], 0, 0, 0);
   function single_line_string_list(strings){
    function _aV_(str){
     var _aX_ = caml_call2(Core[18], str, cst);
     return caml_call2(Core[18], cst$0, _aX_);
    }
    var _aW_ = caml_call2(Core_List[51], strings, _aV_);
    return caml_call2(Core_String[46], _a_, _aW_);
   }
   function multi_line_string_list(strings){
    function _aT_(str){return caml_call2(Core[18], cst$1, str);}
    var _aU_ = caml_call2(Core_List[51], strings, _aT_);
    return caml_call2(Core_String[46], _b_, _aU_);
   }
   function get_tag_name(node){
    var node$0 = node;
    for(;;){
     if(typeof node$0 !== "number")
      switch(node$0[0]){
        case 2:
         var e = node$0[1]; return [0, caml_call1(Virtual_dom_Node[1][1], e)];
        case 4:
         var t = node$0[2], _aS_ = runtime.caml_obj_tag(t);
         a:
         if(250 === _aS_)
          var node$1 = t[1];
         else{
          if(246 !== _aS_ && 244 !== _aS_){var node$1 = t; break a;}
          var node$1 = caml_call1(CamlinternalLazy[2], t);
         }
         var node$0 = node$1;
         continue;
      }
     return 0;
    }
   }
   var
    _f_ = caml_call1(Core_Time_ns[66], 0),
    time_source = caml_call1(Ui_time_source[1], _f_);
   function start_bonsai
   (opt, _s_, _r_, _q_, bind_to_element_with_id, initial_model, App){
    if(opt) var sth = opt[1], debug = sth; else var debug = 0;
    if(_s_)
     var sth$0 = _s_[1], stop = sth$0;
    else
     var stop = caml_call1(Async_kernel_Deferred[19], 0);
    if(_r_)
     var sth$1 = _r_[1], named_logging_filters = sth$1;
    else
     var named_logging_filters = 0;
    if(_q_)
     var sth$2 = _q_[1], simulate_body_focus_on_root_el = sth$2;
    else
     var simulate_body_focus_on_root_el = 1;
    caml_call1(Async_js[3], 0);
    function _t_(param){
     var
      model_v = caml_call2(Incr_dom_Incr[53][2], 0, initial_model),
      model = caml_call1(Incr_dom_Incr[53][4], model_v),
      model_from_last_display_v =
        caml_call2(Incr_dom_Incr[53][2], 0, initial_model),
      model_from_last_display =
        caml_call1(Incr_dom_Incr[53][4], model_from_last_display_v);
     function _y_(old_value, new_value){
      return caml_call2(App[1][1], old_value, new_value);
     }
     var cutoff = caml_call1(Incr_dom_Incr[60][3], _y_);
     caml_call2(Incr_dom_Incr[61], model, cutoff);
     caml_call2(Incr_dom_Incr[61], model_from_last_display, cutoff);
     var action_queue = caml_call2(Core_Queue[66], 0, 0);
     function handle(action){
      return caml_call2(Core_Queue[43], action_queue, action);
     }
     var
      Event = caml_call1(Ui_effect[19], [0, [0], handle]),
      visibility = [0, caml_call1(Async_kernel_Ivar[13], 0)];
     function viewport_changed(param){return mark_dirty(visibility);}
     caml_call1(Virtual_dom_Effect[22], [0, viewport_changed]);
     var
      _z_ = caml_call3(App[9], model, model_from_last_display, Event[1]),
      obs = caml_call2(Incr_dom_Incr[55], 0, _z_);
     function fetch(f, param){
      return caml_call1(f, caml_call1(Incr_dom_Incr[54][6], obs));
     }
     function _A_(param){var on_display = param[4]; return on_display;}
     function _B_(param){
      var update_visibility = param[3];
      return update_visibility;
     }
     function _C_(param){var apply_action = param[2]; return apply_action;}
     function _D_(param){var view = param[1]; return view;}
     function get_view(_aR_){return fetch(_D_, _aR_);}
     caml_call1(Incr_dom_Incr[58], 0);
     caml_call1(App[6], 0);
     var
      _E_ =
        [0, [0, cst_none, caml_call1(Core_Fn[1], 0)], named_logging_filters],
      _F_ = [0, [0, cst_all, caml_call1(Core_Fn[1], 1)], _E_],
      named_logging_filters$0 = caml_call3(Core_String[164][9], 0, 0, _F_),
      _G_ = caml_call1(Core_Hashtbl[67], named_logging_filters$0),
      filter_names = caml_call1(Core_String[160][8], _G_),
      _w_ = multi_line_string_list(caml_call1(Core_Set[39], filter_names)),
      app_init_message =
        caml_call3(Core[265], _e_, bind_to_element_with_id, _w_);
     if(global_is_initialized[1])
      Js_of_ocaml_Firebug[1].log(caml_jsstring_of_string(app_init_message));
     else{
      var
       with_app_id_opt =
         function(update_state, app_id_opt){
          var
           _aP_ = caml_call1(Js_of_ocaml_Js[5][10], app_id_opt),
           app_id_opt$0 =
             caml_call2(Core_Option[34], _aP_, caml_string_of_jsstring);
          if(! app_id_opt$0)
           return caml_call2(Core_Hashtbl[20], app_states, update_state);
          var
           app_id = app_id_opt$0[1],
           match = caml_call2(Core_Hashtbl[56], app_states, app_id);
          if(match){
           var state = match[1];
           return caml_call1(update_state, state);
          }
          var
           _aQ_ =
             single_line_string_list(caml_call1(Core_Hashtbl[67], app_states));
          return caml_call2(print_errorf(_c_), app_id, _aQ_);
         },
       update_logging_filter =
         function(logging_filter){
          function _aM_(_aO_){
           return set_logging_filter(_aO_, logging_filter);
          }
          return function(_aN_){return with_app_id_opt(_aM_, _aN_);};
         },
       update_should_profile =
         function(should_profile){
          function _aK_(t){t[3][1] = should_profile; return 0;}
          return function(_aL_){return with_app_id_opt(_aK_, _aL_);};
         },
       update_should_debug =
         function(should_debug){
          function _aI_(t){t[4][1] = should_debug; return 0;}
          return function(_aJ_){return with_app_id_opt(_aI_, _aJ_);};
         },
       t19 = caml_js_wrap_callback(update_logging_filter(0));
      global.startLoggingAll = t19;
      var
       t21 =
         caml_js_wrap_callback
          (function(blang_str){
            var blang_str$0 = caml_string_of_jsstring(blang_str);
            function _aC_(app_state){
             var
              _aE_ = caml_call1(Core_Sexp[76], blang_str$0),
              blang = caml_call2(Core_Blang[14], Core_String[134], _aE_);
             function _aF_(invalid_names, name){
              return caml_call2(Core_Set[11], app_state[1], name)
                      ? invalid_names
                      : caml_call2(Core_Set[12], invalid_names, name);
             }
             var
              invalid_names =
                caml_call3(Core_Blang[36], blang, Core_String[160][5], _aF_);
             if(caml_call1(Core_Set[10], invalid_names))
              return set_logging_filter(app_state, [0, blang]);
             var
              _aG_ =
                multi_line_string_list(caml_call1(Core_Set[39], app_state[1])),
              _aH_ =
                single_line_string_list
                 (caml_call1(Core_Set[39], invalid_names));
             return caml_call2(print_errorf(_d_), _aH_, _aG_);
            }
            return function(_aD_){return with_app_id_opt(_aC_, _aD_);};
           });
      global.startLogging = t21;
      var
       t23 =
         caml_js_wrap_callback
          (function(filter){
            function filter$0(action_sexp){
             return caml_call1
                     (filter,
                      caml_jsstring_of_string
                       (caml_call1(Core_Sexp[86], action_sexp)))
                    | 0;
            }
            return update_logging_filter([1, filter$0]);
           });
      global.startLoggingCustom = t23;
      var t25 = caml_js_wrap_callback(update_logging_filter(1));
      global.stopLogging = t25;
      var t27 = caml_js_wrap_callback(update_should_profile(1));
      global.startProfiling = t27;
      var t29 = caml_js_wrap_callback(update_should_profile(0));
      global.stopProfiling = t29;
      var t31 = caml_js_wrap_callback(update_should_debug(1));
      global.startDebugging = t31;
      var t33 = caml_js_wrap_callback(update_should_debug(0));
      global.stopDebugging = t33;
      var
       t35 =
         caml_js_wrap_callback
          (function(param){
            caml_call2(Ui_incr[77], 0, filename);
            var
             contents = caml_call1(Stdio_In_channel[25], filename),
             _aB_ =
               caml_call3
                (Vdom_file_download[2], filename, cst_plain_text, contents);
            return caml_call1(Vdom_file_download[3], _aB_);
           });
      global.saveIncrementalGraph = t35;
      var
       group =
         function(s, f){
          Js_of_ocaml_Firebug[1].groupCollapsed(caml_jsstring_of_string(s));
          caml_call1(f, 0);
          Js_of_ocaml_Firebug[1].groupEnd();
          return;
         },
       log =
         function(s){
          return Js_of_ocaml_Firebug[1].log(caml_jsstring_of_string(s));
         };
      group
       (cst_Incr_dom_Bonsai_Console,
        function(param){
         group
          (cst_Action_Logging,
           function(param){return log(cst_Logging_prints_action_info);});
         group
          (cst_Action_Profiling,
           function(param){return log(cst_Profiling_is_disabled_by_d);});
         group
          (cst_Debugging,
           function(param){return log(cst_Debugging_prints_timing_in);});
         return log(app_init_message);
        });
      global_is_initialized[1] = 1;
     }
     var
      logging_filter = [0, 1],
      should_profile = [0, 0],
      should_debug = [0, debug];
     caml_call3
      (Core_Hashtbl[37],
       app_states,
       bind_to_element_with_id,
       [0, filter_names, logging_filter, should_profile, should_debug]);
     function _x_(param){
      return caml_call2(Core_Hashtbl[32], app_states, bind_to_element_with_id);
     }
     caml_call2(Async_kernel[12], stop, _x_);
     function should_debug$0(param){return should_debug[1];}
     function should_profile$0(param){return should_profile[1];}
     var
      html = get_view(0),
      html_dom = caml_call1(Virtual_dom_Node[70], html),
      elem = caml_call1(Js_of_ocaml_Dom_html[4], bind_to_element_with_id),
      _H_ = caml_call1(Js_of_ocaml_Js[5][10], elem.parentNode),
      parent = caml_call4(Core_Option[40], _g_, 0, 0, _H_);
     caml_call3(Js_of_ocaml_Dom[3], parent, html_dom, elem);
     function call_viewport_changed_on_event(event_name, where){
      var _ax_ = Js_of_ocaml_Js[8];
      function _ay_(param){viewport_changed(0); return Js_of_ocaml_Js[7];}
      var
       _az_ = caml_call1(Js_of_ocaml_Dom[10], _ay_),
       _aA_ = caml_call1(Js_of_ocaml_Dom[14][1], event_name);
      caml_call4(Js_of_ocaml_Dom[16], where, _aA_, _az_, _ax_);
      return;
     }
     call_viewport_changed_on_event
      (cst_scroll, caml_call1(Incr_dom_Js_misc[28], html_dom));
     call_viewport_changed_on_event(cst_resize, Js_of_ocaml_Dom_html[8]);
     function _I_(state){
      var prev_html = [0, html], prev_elt = [0, html_dom];
      function refocus_root_element(param){
       var element = prev_elt[1];
       function _at_(element){
        return element.focus({preventScroll: Js_of_ocaml_Js[7]});
       }
       var
        _au_ = caml_call1(Js_of_ocaml_Dom_html[117][1], element),
        _av_ = caml_call1(Js_of_ocaml_Js[5][10], _au_),
        _aw_ = caml_call2(Core_Option[34], _av_, as_focusable);
       return caml_call2(Core_Option[46], _aw_, _at_);
      }
      function timer_start(s){
       var profile = should_profile$0(0), debug = should_debug$0(0);
       if(profile){
        var _as_ = caml_call2(Core[18], s, cst_before);
        caml_call1(Javascript_profiling[4][1], _as_);
       }
       if(! debug) return debug;
       Js_of_ocaml_Firebug[1].time(caml_jsstring_of_string(s));
       return;
      }
      function timer_stop(s){
       var profile = should_profile$0(0), debug = should_debug$0(0);
       if(profile){
        var
         before = caml_call2(Core[18], s, cst_before$0),
         after = caml_call2(Core[18], s, cst_after);
        caml_call1(Javascript_profiling[4][1], after);
        caml_call3(Javascript_profiling[4][2], s, before, after);
       }
       if(! debug) return debug;
       Js_of_ocaml_Firebug[1].timeEnd(caml_jsstring_of_string(s));
       return;
      }
      if(simulate_body_focus_on_root_el){
       var
        _N_ = Js_of_ocaml_Js[7],
        _O_ =
          function(t48){
           var related_target = t48.relatedTarget;
           if(1 - caml_call1(Js_of_ocaml_Js[5][5], related_target))
            refocus_root_element(0);
           return Js_of_ocaml_Js[7];
          },
        _P_ = caml_call1(Js_of_ocaml_Dom_html[10], _O_);
       caml_call4
        (Js_of_ocaml_Dom[16],
         Js_of_ocaml_Dom_html[8],
         Js_of_ocaml_Dom_html[15][35],
         _P_,
         _N_);
      }
      function safe_filter(name, filter, action){
       function _aq_(param){return caml_call1(filter, action);}
       var match = caml_call2(Core_Or_error[37], 0, _aq_);
       if(0 === match[0]){var should_log = match[1]; return should_log;}
       var err = match[1], _ar_ = 0;
       caml_call2
        (print_errorf
          ([0,
            [11,
             cst_Exception_raised_by,
             [2,
              0,
              [11,
               cst$2,
               [24,
                _h_,
                function(param, custom_printf_010){
                 return caml_call1(Core_Error[12], custom_printf_010);
                },
                _ar_]]]],
            cst_Exception_raised_by_s_Erro]),
         name,
         err);
       return 0;
      }
      function _Q_(blang){
       var filter = caml_call1(Core_Hashtbl[57], named_logging_filters$0);
       a:
       {
        if(typeof blang !== "number" && 4 === blang[0]){
         var name = blang[1], _ak_ = caml_call1(filter, name);
         break a;
        }
        var
         _ak_ =
           function(action){
            function _ap_(name){return caml_call2(filter, name, action);}
            return caml_call2(Core_Blang[64], blang, _ap_);
           };
       }
       var
        _al_ =
          [0,
           [11,
            cst_named_filter_blang,
            [24,
             _j_,
             function(param, custom_printf_012){
              var
               _ao_ = caml_call2(Core_Blang[15], Core[558], custom_printf_012);
              return caml_call2(Ppx_sexp_conv_lib[1][13], 0, _ao_);
             },
             _i_]],
           cst_named_filter_blang_sexp_st],
        _am_ = caml_call2(Core[265], _al_, blang);
       return function(_an_){return safe_filter(_am_, _ak_, _an_);};
      }
      var
       _R_ = Set[2],
       _S_ = Set[1],
       _T_ = Map[2],
       _U_ = Map[1],
       named_filter_blang_cache =
         caml_call2
          (Core_Memo[4],
           [0,
            symbol,
            symbol$0,
            symbol$1,
            symbol$2,
            symbol$3,
            symbol$4,
            equal,
            compare$0,
            min,
            max,
            ascending,
            descending,
            between,
            clamp_exn,
            clamp,
            comparator,
            validate_lbound,
            validate_ubound,
            validate_bound,
            Replace_polymorphic_compare,
            [0,
             [0, _U_[2], _U_[3]],
             Map[3],
             Map[4],
             Map[45],
             Map[5],
             Map[6],
             Map[7],
             Map[8],
             Map[9],
             Map[10],
             Map[11],
             Map[12],
             Map[13],
             Map[14],
             Map[15],
             Map[16],
             Map[17],
             Map[18],
             Map[19],
             Map[20],
             Map[21],
             Map[22],
             Map[23],
             Map[24],
             Map[25],
             Map[26],
             Map[27],
             Map[28],
             Map[29],
             Map[30],
             Map[31],
             Map[32],
             Map[33],
             Map[34],
             Map[35],
             Map[36],
             Map[37],
             [0, _T_[2], _T_[3], _T_[4], _T_[5]],
             Map[38],
             Map[39],
             Map[40],
             Map[41],
             Map[42],
             Map[43]],
            [0,
             [0, _S_[2], _S_[3]],
             Set[3],
             Set[4],
             Set[28],
             [0, _R_[2], _R_[3], _R_[4], _R_[5]],
             Set[5],
             Set[6],
             Set[7],
             Set[8],
             Set[9],
             Set[10],
             Set[11],
             Set[12],
             Set[13],
             Set[14],
             Set[15],
             Set[16],
             Set[17],
             Set[18],
             Set[19],
             Set[20],
             Set[21],
             Set[22],
             Set[23],
             Set[24],
             Set[25],
             Set[26]]],
           _Q_);
      function perform_update(param){
       timer_start(cst_stabilize$1);
       var
        date = new Js_of_ocaml_Js[26],
        _aa_ = date.getTime(),
        _ab_ = caml_call1(Core_Time_ns[1][81], _aa_),
        now = caml_call1(Core_Time_ns[76], _ab_);
       caml_call2(Incr_dom_Incr[80][8], Incr_dom_Incr[2], now);
       caml_call1(App[8], now);
       caml_call1(Incr_dom_Incr[58], 0);
       timer_stop(cst_stabilize$2);
       caml_call1(App[6], 0);
       timer_start(cst_total);
       timer_start(cst_update_visibility);
       if(is_dirty(visibility)){
        if(is_dirty(visibility))
         visibility[1] = caml_call1(Async_kernel_Ivar[12], 0);
        var
         _X_ = Ui_effect[21][2],
         _Y_ = caml_call1(Incr_dom_Incr[53][6], model_v),
         new_model = caml_call2(fetch(_B_, 0), _Y_, _X_);
        caml_call2(Incr_dom_Incr[53][3], model_v, new_model);
        timer_start(cst_stabilize);
        caml_call1(Incr_dom_Incr[58], 0);
        timer_stop(cst_stabilize$0);
        caml_call1(App[6], 0);
       }
       timer_stop(cst_update_visibility$0);
       timer_start(cst_apply_actions);
       var
        model$0 = caml_call1(Incr_dom_Incr[53][5], model_v),
        model = model$0;
       for(;;){
        var match$0 = caml_call1(Core_Queue[45], action_queue);
        if(! match$0) break;
        var action = match$0[1], match = logging_filter[1];
        if(typeof match === "number")
         var should_log_action = 0 === match ? 1 : 0;
        else if(0 === match[0])
         var
          blang = match[1],
          should_log_action =
            caml_call2(named_filter_blang_cache, blang, action);
        else
         var
          filter = match[1],
          should_log_action =
            safe_filter
             (cst_custom_filter,
              function(filter){
                return function(action){
                 return caml_call1(filter, caml_call1(App[2][1], action));};
               }
               (filter),
              action);
        if(should_log_action){
         var
          _Z_ = [0, [1, [0, _k_, [0, caml_call1(App[2][1], action), 0]]], 0],
          ___ = [1, [0, caml_call1(Sexplib0_Sexp_conv[7], cst_Action), _Z_]];
         caml_call1(Async_js[7], ___);
        }
        if(caml_call1(App[4], action)){
         caml_call2(Incr_dom_Incr[53][3], model_v, model);
         timer_start(cst_stabilize_for_action);
         caml_call1(Incr_dom_Incr[58], 0);
         timer_stop(cst_stabilize_for_action$0);
         caml_call1(App[6], 0);
        }
        else if(should_debug$0(0))
         Js_of_ocaml_Firebug[1].debug("action applied without stabilizing");
        var
         _$_ = Ui_effect[21][2],
         new_model$0 = caml_call4(fetch(_C_, 0), state, _$_, model, action);
        caml_call1(App[5], action);
        var model = new_model$0;
       }
       caml_call2(Incr_dom_Incr[53][3], model_v, model);
       timer_stop(cst_apply_actions$0);
       timer_start(cst_stabilize$3);
       caml_call1(Incr_dom_Incr[58], 0);
       timer_stop(cst_stabilize$4);
       caml_call1(App[6], 0);
       var html = get_view(0);
       if(simulate_body_focus_on_root_el){
        a:
        {
         if(typeof html !== "number" && 2 === html[0]){
          var
           element = html[1],
           _W_ = caml_call1(Virtual_dom_Node[1][2], element);
          if
           (1
            -
             caml_call2
              (Virtual_dom_Vdom[1][101][1], cst_disable_tab_index, _W_)){
           var
            add_new_attrs =
              function(attrs){
               var
                _ag_ = caml_call1(Virtual_dom_Vdom[1][42], 0),
                _ah_ = caml_call2(Virtual_dom_Vdom[1][12], _ag_, attrs),
                _ai_ = caml_call4(Css_gen[89], 0, 0, 870530776, 0),
                _aj_ = caml_call1(Virtual_dom_Vdom[1][32], _ai_);
               return caml_call2(Virtual_dom_Vdom[1][12], _aj_, _ah_);
              },
            _ac_ =
              [2, caml_call2(Virtual_dom_Node[1][5], element, add_new_attrs)];
           break a;
          }
         }
         var _ac_ = html;
        }
        var html$0 = _ac_;
       }
       else
        var html$0 = html;
       timer_start(cst_diff);
       var patch = caml_call2(Virtual_dom_Node[74][1], prev_html[1], html$0);
       timer_stop(cst_diff$0);
       if(1 - caml_call1(Virtual_dom_Node[74][3], patch))
        mark_dirty(visibility);
       timer_start(cst_patch);
       var elt = caml_call2(Virtual_dom_Node[74][2], patch, prev_elt[1]);
       timer_stop(cst_patch$0);
       timer_start(cst_on_display);
       var _ad_ = Ui_effect[21][2];
       caml_call2(fetch(_A_, 0), state, _ad_);
       timer_stop(cst_on_display$0);
       var _ae_ = caml_call1(Incr_dom_Incr[53][5], model_v);
       caml_call2(Incr_dom_Incr[53][3], model_from_last_display_v, _ae_);
       var
        old_tag_name = get_tag_name(prev_html[1]),
        new_tag_name = get_tag_name(html$0),
        tags_the_same =
          caml_call3
           (Core_Option[18], Core_String[145], old_tag_name, new_tag_name);
       prev_html[1] = html$0;
       prev_elt[1] = elt;
       timer_stop(cst_total$0);
       if(should_debug$0(0)) Js_of_ocaml_Firebug[1].debug("-------");
       var _af_ = 1 - tags_the_same;
       return _af_ ? refocus_root_element(0) : _af_;
      }
      function callback(param){
       return caml_call1(Async_kernel_Deferred[7], stop)
               ? 0
               : (perform_update(0), request_animation_frame(callback));
      }
      perform_update(0);
      var
       t55 = Js_of_ocaml_Dom_html[2],
       match = caml_call1(Js_of_ocaml_Js[5][10], t55.activeElement);
      if(match){
       var el = match[1], _V_ = caml_call1(Js_of_ocaml_Dom_html[117][7], el);
       if(caml_call1(Js_of_ocaml_Js[5][5], _V_)) refocus_root_element(0);
      }
      else
       refocus_root_element(0);
      request_animation_frame(callback);
      return caml_call1(Async_kernel_Deferred[19], 0);
     }
     var _J_ = caml_call1(Incr_dom_Incr[53][5], model_v);
     function _K_(a){
      var _M_ = caml_call1(Event[1], a);
      return caml_call1(Ui_effect[21][2], _M_);
     }
     var _L_ = caml_call2(App[7], _K_, _J_);
     return caml_call2(Async_kernel[23][2], _L_, _I_);
    }
    var
     _u_ = caml_call1(Async_js[5], 0),
     _v_ = caml_call2(Async_kernel[23][2], _u_, _t_);
    return caml_call1(Async_kernel[6], _v_);
   }
   var Private = [0, start_bonsai, time_source];
   function start(opt, _m_, _l_, bind_to_element_with_id, initial_model, App){
    if(opt) var sth = opt[1], debug = sth; else var debug = 0;
    if(_m_)
     var sth$0 = _m_[1], stop = sth$0;
    else
     var stop = caml_call1(Async_kernel_Deferred[19], 0);
    if(_l_)
     var sth$1 = _l_[1], named_logging_filters = sth$1;
    else
     var named_logging_filters = 0;
    var
     Model = App[1],
     Action = App[2],
     State = App[3],
     on_startup = App[4],
     _n_ = App[5];
    function action_requires_stabilization(param){return 1;}
    function on_action_application(param){return 0;}
    function on_stabilize(param){return 0;}
    function advance_clock_to(to){
     caml_call2(Ui_time_source[4], time_source, to);
     return caml_call1(Ui_time_source[12][1], time_source);
    }
    function create(model, old_model, inject){
     function _o_(component){
      var view = caml_call1(Incr_dom_Component[3], component);
      function apply_action(state, schedule_event, model, action){
       function schedule_action(a){
        return caml_call1(schedule_event, caml_call1(inject, a));
       }
       return caml_call4
               (Incr_dom_Component[1],
                component,
                action,
                state,
                schedule_action);
      }
      function update_visibility(model, schedule_event){
       function schedule_action(a){
        return caml_call1(schedule_event, caml_call1(inject, a));
       }
       return caml_call2(Incr_dom_Component[2], component, schedule_action);
      }
      function on_display(state, schedule_event){
       function schedule_action(a){
        return caml_call1(schedule_event, caml_call1(inject, a));
       }
       return caml_call3
               (Incr_dom_Component[5], component, state, schedule_action);
      }
      return [0, view, apply_action, update_visibility, on_display];
     }
     var _p_ = caml_call3(_n_, model, old_model, inject);
     return caml_call2(Incr_dom_Incr[78][4][6], _p_, _o_);
    }
    return start_bonsai
            ([0, debug],
             [0, stop],
             [0, named_logging_filters],
             0,
             bind_to_element_with_id,
             initial_model,
             [0,
              Model,
              Action,
              State,
              action_requires_stabilization,
              on_action_application,
              on_stabilize,
              on_startup,
              advance_clock_to,
              create]);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_incr_dom);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incr_dom_Start_app);
   var Incr_dom_Start_app = [0, start, Private];
   runtime.caml_register_global
    (146, Incr_dom_Start_app, cst_Incr_dom_Start_app$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incr_dom
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Virtual_dom
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Incr_dom = "Incr_dom",
    cst_incr_dom = "incr_dom";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Virtual_dom = global_data.Virtual_dom;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incr_dom);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incr_dom);
   caml_call1(Ppx_expect_runtime[1][1], "src/incr_dom.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_incr_dom, "incr_dom.ml");
   var Top_level_effects = Virtual_dom[1];
   caml_call1(Ppx_inline_test_lib[7], cst_incr_dom);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incr_dom);
   var Incr_dom = [0, Top_level_effects];
   runtime.caml_register_global(12, Incr_dom, cst_Incr_dom);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
