// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Timing_wheel__
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Timing_wheel = [0],
    Timing_wheel$0 = [0, Timing_wheel];
   runtime.caml_register_global(0, Timing_wheel$0, "Timing_wheel__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Timing_wheel__Import
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Timing_wheel_Import = "Timing_wheel__Import",
    cst_timing_wheel = "timing_wheel";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Timing_wheel_Import);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_timing_wheel);
   caml_call1(Ppx_expect_runtime[1][1], "timing_wheel/src/import.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_timing_wheel, "import.ml");
   caml_call1(Ppx_inline_test_lib[7], cst_timing_wheel);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Timing_wheel_Import);
   var Timing_wheel_Import = [0];
   runtime.caml_register_global
    (11, Timing_wheel_Import, cst_Timing_wheel_Import);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Timing_wheel__Timing_wheel_intf
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Timing_wheel_Timing_wheel_ = "Timing_wheel__Timing_wheel_intf",
    cst_timing_wheel = "timing_wheel";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Timing_wheel_Timing_wheel_);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_timing_wheel);
   caml_call1
    (Ppx_expect_runtime[1][1], "timing_wheel/src/timing_wheel_intf.ml");
   caml_call2
    (Ppx_inline_test_lib[6], cst_timing_wheel, "timing_wheel_intf.ml");
   caml_call1(Ppx_inline_test_lib[7], cst_timing_wheel);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Timing_wheel_Timing_wheel_);
   var Timing_wheel_Timing_wheel_intf = [0];
   runtime.caml_register_global
    (11, Timing_wheel_Timing_wheel_intf, cst_Timing_wheel_Timing_wheel_);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Timing_wheel
//# unitInfo: Requires: Base__Invariant, Base__Sexpable, Core, Core__Array, Core__Binable, Core__Int, Core__Int63, Core__List, Core__Time_ns, Core__Time_ns_alternate_sexp, Ppx_assert_lib__Runtime, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Sexplib0__Sexp_conv_record, Tuple_pool
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Timing_wheel$0 = "Timing_wheel",
    cst_Timing_wheel_max_alarm_tim$1 =
      "Timing_wheel.max_alarm_time_in_min_interval_exn of empty timing wheel",
    cst = "_",
    cst_alarm_precision$0 = "alarm_precision",
    cst_at = "at",
    cst_bits$0 = "bits",
    cst_bits_per_slot$0 = "bits_per_slot",
    cst_capacity$0 = "capacity",
    cst_config$0 = "config",
    cst_diff_max_min_allowed_key$0 = "diff_max_min_allowed_key",
    cst_elt_key_lower_bound$0 = "elt_key_lower_bound",
    cst_index$0 = "index",
    cst_interval_num = "interval_num",
    cst_key = "key",
    cst_keys_per_slot$0 = "keys_per_slot",
    cst_length$1 = "length",
    cst_level_bits$1 = "level_bits",
    cst_levels$0 = "levels",
    cst_max_allowed_alarm_time$0 = "max_allowed_alarm_time",
    cst_max_allowed_key$0 = "max_allowed_key",
    cst_max_interval_num$0 = "max_interval_num",
    cst_min_allowed_key$0 = "min_allowed_key",
    cst_min_elt$0 = "min_elt",
    cst_min_key_in_same_slot_mask$0 = "min_key_in_same_slot_mask",
    cst_now$0 = "now",
    cst_now_interval_num_start$0 = "now_interval_num_start",
    cst_pool$0 = "pool",
    cst_priority_queue$0 = "priority_queue",
    cst_slots$0 = "slots",
    cst_slots_mask$0 = "slots_mask",
    cst_start$0 = "start",
    cst_timing_wheel$0 = "timing_wheel",
    cst_timing_wheel_src_timing_wh = "timing_wheel/src/timing_wheel.ml",
    cst_value = "value",
    caml_check_bound = runtime.caml_check_bound,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_string_notequal = runtime.caml_string_notequal;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    pos$9 = "timing_wheel/src/timing_wheel.ml:1617:26",
    pos$8 = "timing_wheel/src/timing_wheel.ml:1614:26",
    pos$7 = "timing_wheel/src/timing_wheel.ml:1630:26",
    pos$6 = "timing_wheel/src/timing_wheel.ml:1635:26",
    arg_087 = [0, cst],
    pos$5 = "timing_wheel/src/timing_wheel.ml:993:32",
    pos$4 = "timing_wheel/src/timing_wheel.ml:990:32",
    pos$3 = "timing_wheel/src/timing_wheel.ml:900:31",
    pos$2 = "timing_wheel/src/timing_wheel.ml:907:30",
    pos$1 = "timing_wheel/src/timing_wheel.ml:918:31",
    pos$0 = "timing_wheel/src/timing_wheel.ml:936:32",
    pos = "timing_wheel/src/timing_wheel.ml:941:30",
    error_source_019 = "timing_wheel/src/timing_wheel.ml.Config.t",
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Core = global_data.Core,
    Core_Time_ns_alternate_sexp = global_data.Core__Time_ns_alternate_sexp,
    Assert_failure = global_data.Assert_failure,
    Ppx_assert_lib_Runtime = global_data.Ppx_assert_lib__Runtime,
    Base_Invariant = global_data.Base__Invariant,
    Core_Time_ns = global_data.Core__Time_ns,
    Core_List = global_data.Core__List,
    Core_Int63 = global_data.Core__Int63,
    Core_Array = global_data.Core__Array,
    Tuple_pool = global_data.Tuple_pool,
    Sexplib0_Sexp_conv_record = global_data.Sexplib0__Sexp_conv_record,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Core_Int = global_data.Core__Int,
    Core_Binable = global_data.Core__Binable,
    Base_Sexpable = global_data.Base__Sexpable;
   caml_call1(Ppx_module_timer_runtime[4], cst_Timing_wheel$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_timing_wheel$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_timing_wheel_src_timing_wh);
   caml_call2(Ppx_inline_test_lib[6], cst_timing_wheel$0, "timing_wheel.ml");
   var
    max_time = Core_Time_ns_alternate_sexp[37],
    min_time = Core_Time_ns_alternate_sexp[35],
    zero = Core_Int[59],
    to_int = Core_Int[65],
    t_of_sexp = Core_Int[76],
    sexp_of_t = Core_Int[77],
    symbol = Core_Int[81],
    symbol$0 = Core_Int[82],
    symbol$1 = Core_Int[84],
    equal = Core_Int[87],
    max_num_bits = Core_Int63[61] - 1 | 0,
    _b8_ = [0, cst],
    _b9_ = [0, cst_timing_wheel$0],
    cst_Timing_wheel_max_alarm_tim$0 = cst_Timing_wheel_max_alarm_tim$1,
    _b6_ = [0, cst],
    _b7_ = [0, cst_timing_wheel$0],
    cst_Timing_wheel_max_alarm_tim = cst_Timing_wheel_max_alarm_tim$1,
    _b4_ = [0, cst],
    _b5_ = [0, cst_timing_wheel$0],
    cst_Timing_wheel_min_alarm_int =
      "Timing_wheel.min_alarm_interval_num_exn of empty timing_wheel",
    cst_Timing_wheel_cannot_resche =
      "Timing_wheel cannot reschedule alarm not in timing wheel",
    _b2_ = [0, cst_now_interval_num_start$0],
    _b3_ = [0, cst_at],
    cst_Timing_wheel_cannot_schedu$0 =
      "Timing_wheel cannot schedule alarm before start of current interval",
    _b0_ = [0, cst_max_allowed_alarm_time$0],
    _b1_ = [0, cst_at],
    cst_Timing_wheel_cannot_schedu =
      "Timing_wheel cannot schedule alarm that far in the future",
    _bZ_ = [0, cst_timing_wheel_src_timing_wh, 1707, 53],
    _bY_ = [0, cst_start$0],
    cst_Timing_wheel_create_got_st =
      "Timing_wheel.create got start before the epoch",
    _bX_ = [0, cst_timing_wheel_src_timing_wh, 1680, 54],
    _bW_ = [0, cst_timing_wheel_src_timing_wh, 1674, 52],
    _bU_ = [0, cst],
    _bT_ = [0, cst_timing_wheel_src_timing_wh, 1640, 6],
    _bS_ = [0, cst_timing_wheel_src_timing_wh, 1644, 6],
    _bR_ = [0, cst_timing_wheel_src_timing_wh, 1646, 6],
    _bQ_ = [0, cst_timing_wheel_src_timing_wh, 1610, 11],
    _bP_ = [0, cst_timing_wheel_src_timing_wh, 1611, 11],
    _bO_ = [0, cst_timing_wheel_src_timing_wh, 1622, 11],
    _bN_ = [0, cst_timing_wheel_src_timing_wh, 1623, 11],
    _bM_ = [0, cst_timing_wheel_src_timing_wh, 1624, 11],
    _bV_ = [0, cst_timing_wheel_src_timing_wh, 1604, 57929, 57951],
    _bK_ = [0, "t.max_interval_num"],
    _bL_ = [0, cst_interval_num],
    cst_Timing_wheel_interval_num_$1 =
      "Timing_wheel.interval_num_start got too large interval_num",
    _bI_ = [0, "min_interval_num"],
    _bJ_ = [0, cst_interval_num],
    cst_Timing_wheel_interval_num_$0 =
      "Timing_wheel.interval_num_start got too small interval_num",
    _bH_ = [0, "time"],
    cst_Timing_wheel_interval_num_ =
      "Timing_wheel.interval_num got time too far in the past",
    _bF_ = [0, cst],
    _bG_ = [0, cst_timing_wheel$0],
    cst_Timing_wheel_next_alarm_fi$0 =
      "Timing_wheel.next_alarm_fires_at_exn with all alarms in max interval",
    _bD_ = [0, cst],
    _bE_ = [0, cst_timing_wheel$0],
    cst_Timing_wheel_next_alarm_fi =
      "Timing_wheel.next_alarm_fires_at_exn of empty timing wheel",
    _by_ = [0, "alarms"],
    _bz_ = [0, cst_now$0],
    _bA_ = [0, cst_max_interval_num$0],
    _bB_ = [0, cst_start$0],
    _bC_ = [0, cst_config$0],
    _bw_ = [0, cst_value],
    _bx_ = [0, cst_at],
    _be_ = [0, "max_allowed_alarm_interval_num"],
    _bf_ = [0, "min_allowed_alarm_interval_num"],
    _bg_ = [0, cst_interval_num],
    cst_Timing_wheel_add_at_interv =
      "Timing_wheel.add_at_interval_num got invalid interval num",
    _bb_ = [0, cst],
    _bc_ = [0, "level"],
    _bd_ = [0, cst_key],
    cst_Priority_queue_add_elt_key$0 =
      "Priority_queue.add_elt key out of level bounds",
    _a9_ = [0, cst_priority_queue$0],
    _a__ = [0, "max_allowed_key t"],
    _a$_ = [0, "min_allowed_key t"],
    _ba_ = [0, cst_key],
    cst_Priority_queue_add_elt_key =
      "Priority_queue.add_elt key out of bounds",
    _a7_ = [0, cst],
    _a4_ = [0, cst_timing_wheel_src_timing_wh, 965, 38],
    _a3_ = [0, cst_timing_wheel_src_timing_wh, 971, 15],
    _a2_ = [0, cst_timing_wheel_src_timing_wh, 972, 15],
    _a1_ = [0, cst_timing_wheel_src_timing_wh, 975, 13],
    _a0_ = [0, cst_timing_wheel_src_timing_wh, 976, 13],
    _aZ_ = [0, cst_timing_wheel_src_timing_wh, 979, 15],
    _aX_ = [0, cst_timing_wheel_src_timing_wh, 984, 15],
    _aY_ = [0, cst_timing_wheel_src_timing_wh, 982, 13],
    _a6_ = [0, cst_timing_wheel_src_timing_wh, 962, 6],
    _a5_ = [0, cst_timing_wheel_src_timing_wh, 963, 6],
    _aV_ = [0, cst],
    _aU_ = [0, cst_timing_wheel_src_timing_wh, 896, 38],
    _aT_ = [0, cst_timing_wheel_src_timing_wh, 897, 36],
    _aS_ = [0, cst_timing_wheel_src_timing_wh, 904, 15],
    _aR_ = [0, cst_timing_wheel_src_timing_wh, 912, 15],
    _aQ_ = [0, cst_timing_wheel_src_timing_wh, 925, 15],
    _aP_ = [0, cst_timing_wheel_src_timing_wh, 933, 15],
    _aO_ = [0, cst_timing_wheel_src_timing_wh, 954, 21],
    _aN_ = [0, cst_timing_wheel_src_timing_wh, 955, 21],
    _aM_ = [0, cst_timing_wheel_src_timing_wh, 956, 21],
    _aL_ = [0, cst_timing_wheel_src_timing_wh, 957, 21],
    _aW_ = [0, cst_timing_wheel_src_timing_wh, 893, 31661, 31687],
    _a8_ = [0, cst_timing_wheel_src_timing_wh, 960, 34764, 34788],
    _aI_ = [0, "elts"],
    _aJ_ = [0, cst_max_allowed_key$0],
    _aK_ = [0, cst_min_allowed_key$0],
    _aG_ = [0, cst_value],
    _aH_ = [0, cst_key],
    _aB_ = [0, cst_levels$0],
    _aC_ = [0, cst_elt_key_lower_bound$0],
    _aD_ = [0, cst_min_elt$0],
    _aE_ = [0, cst_pool$0],
    _aF_ = [0, cst_length$1],
    _ag_ = [0, cst_slots$0],
    _ah_ = [0, cst_max_allowed_key$0],
    _ai_ = [0, cst_min_allowed_key$0],
    _aj_ = [0, cst_length$1],
    _ak_ = [0, cst_diff_max_min_allowed_key$0],
    _al_ = [0, cst_min_key_in_same_slot_mask$0],
    _am_ = [0, cst_keys_per_slot$0],
    _an_ = [0, cst_bits_per_slot$0],
    _ao_ = [0, cst_slots_mask$0],
    _ap_ = [0, cst_bits$0],
    _aq_ = [0, cst_index$0],
    cst_Timing_wheel_got_invalid_a = "Timing_wheel got invalid alarm",
    _K_ = [0, cst],
    _J_ = [0, cst_timing_wheel_src_timing_wh, 646, 8],
    _I_ = [0, cst_timing_wheel_src_timing_wh, 649, 8],
    _H_ = [0, cst_timing_wheel_src_timing_wh, 651, 8],
    _L_ = [0, cst_timing_wheel_src_timing_wh, 645, 23075, 23101],
    _t_ = [0, 10, [0, 10, [0, 6, [0, 6, [0, 5, 0]]]]],
    _r_ = [0, cst_timing_wheel_src_timing_wh, 257, 6],
    _s_ = [0, cst_timing_wheel_src_timing_wh, 256, 8286, 8310],
    _o_ = [0, cst_capacity$0],
    _p_ = [0, cst_level_bits$1],
    _q_ = [0, cst_alarm_precision$0],
    cst_capacity = cst_capacity$0,
    cst_level_bits$0 = cst_level_bits$1,
    cst_alarm_precision = cst_alarm_precision$0,
    _h_ = [0, "span"],
    cst_Alarm_precision_of_span_fl =
      "[Alarm_precision.of_span_floor_pow2_ns] got non-positive span",
    cst_Alarm_precision_to_span_of =
      "[Alarm_precision.to_span] of negative power of two nanoseconds",
    _e_ = [0, "max_num_bits"],
    _f_ = [0, "got"],
    cst_Level_bits_create_exn_got_$0 =
      "Level_bits.create_exn got too many bits",
    cst_Level_bits_create_exn_got_ =
      "Level_bits.create_exn got nonpositive num bits",
    cst_Level_bits_create_exn_requ =
      "Level_bits.create_exn requires a nonempty list",
    _d_ = [0, cst_timing_wheel_src_timing_wh, 117, 6],
    _c_ = [0, cst_timing_wheel_src_timing_wh, 114, 4],
    _b_ = [0, cst_timing_wheel_src_timing_wh, 82, 4],
    _a_ = [0, cst_timing_wheel_src_timing_wh, 83, 4],
    _g_ = [0, 11, [0, 10, [0, 10, [0, 10, [0, 10, [0, 10, [0, 1, 0]]]]]]],
    cst_level_bits = cst_level_bits$1,
    cst_slots = cst_slots$0,
    cst_max_allowed_key = cst_max_allowed_key$0,
    cst_min_allowed_key = cst_min_allowed_key$0,
    cst_length = cst_length$1,
    cst_diff_max_min_allowed_key = cst_diff_max_min_allowed_key$0,
    cst_min_key_in_same_slot_mask = cst_min_key_in_same_slot_mask$0,
    cst_keys_per_slot = cst_keys_per_slot$0,
    cst_bits_per_slot = cst_bits_per_slot$0,
    cst_slots_mask = cst_slots_mask$0,
    cst_bits = cst_bits$0,
    cst_index = cst_index$0,
    cst_levels = cst_levels$0,
    cst_elt_key_lower_bound = cst_elt_key_lower_bound$0,
    cst_min_elt = cst_min_elt$0,
    cst_pool = cst_pool$0,
    cst_length$0 = cst_length$1,
    cst_priority_queue = cst_priority_queue$0,
    cst_max_allowed_alarm_time = cst_max_allowed_alarm_time$0,
    cst_now_interval_num_start = cst_now_interval_num_start$0,
    cst_now = cst_now$0,
    cst_max_interval_num = cst_max_interval_num$0,
    cst_start = cst_start$0,
    cst_config = cst_config$0,
    cst_timing_wheel = cst_timing_wheel$0,
    cst_Timing_wheel = cst_Timing_wheel$0,
    min_value = 0;
   function invariant(t){
    if(! caml_call2(symbol, t, min_value))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1);
    if(caml_call2(symbol$0, t, max_num_bits)) return 0;
    throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
   }
   function of_int(i){invariant(i); return i;}
   function symbol$2(t1, t2){var t = t1 + t2 | 0; invariant(t); return t;}
   function symbol$3(t1, t2){var t = t1 - t2 | 0; invariant(t); return t;}
   function pow2(t){return caml_call2(Core_Int63[50], Core_Int63[17], t);}
   function sexp_of_t$0(x_007){
    return caml_call2(Core[472], sexp_of_t, x_007);
   }
   function num_bits_internal(t){
    return caml_call3(Core_List[20], t, zero, symbol$2);
   }
   function num_bits(t){return num_bits_internal(t);}
   function invariant$0(t){
    if(caml_call1(Core_List[18], t))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _c_], 1);
    function _fA_(num_key_bits){
     invariant(num_key_bits);
     if(caml_call2(symbol$1, num_key_bits, zero)) return 0;
     throw caml_maybe_attach_backtrace([0, Assert_failure, _d_], 1);
    }
    caml_call2(Core_List[19], t, _fA_);
    return invariant(num_bits_internal(t));
   }
   function t_of_sexp$0(x_006){
    var t = caml_call2(Core[473], t_of_sexp, x_006);
    invariant$0(t);
    return t;
   }
   function create_exn(opt, x_008){
    if(opt)
     var sth = opt[1], extend_to_max_num_bits = sth;
    else
     var extend_to_max_num_bits = 0;
    if(caml_call1(Core_List[18], x_008))
     caml_call1(Core[6], cst_Level_bits_create_exn_requ);
    function _fo_(bits){return caml_call2(Core[89], bits, 0);}
    if(caml_call2(Core_List[23], x_008, _fo_)){
     var
      _fp_ = [0, caml_call2(Core[472], Core[389], x_008), 0],
      _fq_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Level_bits_create_exn_got_),
          _fp_]];
     caml_call1(Core[261], _fq_);
    }
    function _fr_(_fz_, _fy_){return _fz_ + _fy_ | 0;}
    var num_bits = caml_call3(Core_List[20], x_008, 0, _fr_);
    if(caml_call2(Core[91], num_bits, max_num_bits)){
     var
      _fs_ =
        [0, [1, [0, _e_, [0, caml_call1(Core[389], max_num_bits), 0]]], 0],
      _ft_ = [0, [1, [0, _f_, [0, caml_call1(Core[389], num_bits), 0]]], _fs_],
      _fu_ = [0, caml_call2(Core[472], Core[389], x_008), _ft_],
      _fv_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Level_bits_create_exn_got_$0),
          _fu_]];
     caml_call1(Core[261], _fv_);
    }
    if(extend_to_max_num_bits)
     var
      _fw_ = caml_call1(Core[242], 1),
      _fx_ = caml_call2(Core_List[40], max_num_bits - num_bits | 0, _fw_),
      ints = caml_call2(Core[156], x_008, _fx_);
    else
     var ints = x_008;
    return caml_call2(Core_List[51], ints, of_int);
   }
   var level_bits_default = create_exn(0, _g_), compare = Core[382];
   function equal$0(x_012, x_013){
    return 0 === caml_call2(compare, x_012, x_013) ? 1 : 0;
   }
   function num_key_bits(t){return of_int(t);}
   function to_sexpable(t){
    if(caml_call2(Core[92], t, 0)){
     var
      _fl_ = [0, caml_call1(Core[389], t), 0],
      _fm_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Alarm_precision_to_span_of),
          _fl_]];
     caml_call1(Core[261], _fm_);
    }
    var _fn_ = caml_call1(caml_call1(Core_Int63[50], Core_Int63[17]), t);
    return caml_call1(Core_Time_ns[1][137], _fn_);
   }
   function sexp_of_t$1(t){
    var _fk_ = to_sexpable(t);
    return caml_call1(Core_Time_ns[1][10], _fk_);
   }
   var
    one_nanosecond = 0,
    about_one_microsecond = 10,
    about_one_millisecond = 20,
    about_one_second = 30,
    about_one_day = 46;
   function mul(t, pow2){return t + pow2 | 0;}
   function div(t, pow2){return t - pow2 | 0;}
   function of_span_floor_pow2_ns(span){
    if(caml_call2(Core_Time_ns[1][16], span, Core_Time_ns[1][76])){
     var
      _fh_ =
        [0, [1, [0, _h_, [0, caml_call1(Core_Time_ns[1][10], span), 0]]], 0],
      _fi_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Alarm_precision_of_span_fl),
          _fh_]];
     caml_call1(Core[261], _fi_);
    }
    var _fj_ = caml_call1(Core_Time_ns[1][136], span);
    return caml_call1(Core_Int63[89], _fj_);
   }
   var
    _i_ = Core_Time_ns[1],
    _j_ =
      caml_call1
       (caml_call1
         (Core_Binable[6], [0, _i_[5], _i_[1], _i_[2], _i_[3], _i_[4]]),
        [0, to_sexpable, of_span_floor_pow2_ns]),
    bin_size_t = _j_[1],
    bin_write_t = _j_[2],
    bin_read_t = _j_[3],
    bin_read_t$0 = _j_[4],
    bin_shape_t = _j_[5],
    bin_writer_t = _j_[6],
    bin_reader_t = _j_[7],
    bin_t = _j_[8],
    _k_ = Core_Time_ns[1],
    include =
      caml_call1
       (caml_call1(Base_Sexpable[1], [0, _k_[9], _k_[10]]),
        [0, to_sexpable, of_span_floor_pow2_ns]),
    t_of_sexp$1 = include[1],
    sexp_of_t$2 = include[2],
    _l_ =
      [0,
       bin_size_t,
       bin_write_t,
       bin_read_t,
       bin_read_t$0,
       bin_shape_t,
       bin_writer_t,
       bin_reader_t,
       bin_t,
       compare,
       t_of_sexp$1,
       sexp_of_t$2];
   function level_bits(r){return r[2];}
   function _m_(r, v){return [0, r[1], v, r[3]];}
   var
    _n_ = 0,
    level_bits$0 =
      [0, function(param){return 0;}, cst_level_bits, _n_, level_bits, _m_];
   function t_of_sexp$2(x_021){
    function _fb_(param){
     var
      _fg_ = param[2],
      capacity = _fg_[2][1],
      level_bits = _fg_[1],
      alarm_precision = param[1];
     return [0, alarm_precision, level_bits, capacity];
    }
    var _fc_ = 0;
    function _fd_(param){
     return caml_string_notequal(param, cst_alarm_precision$0)
             ? caml_string_notequal
                (param, cst_capacity$0)
               ? caml_string_notequal(param, cst_level_bits$1) ? -1 : 1
               : 2
             : 0;
    }
    var
     _fe_ = [0, cst_capacity, 5, Core[390], 0],
     _ff_ =
       [0,
        cst_level_bits$0,
        [0, function(param){return level_bits_default;}],
        t_of_sexp$0,
        _fe_];
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_019,
             [0, cst_alarm_precision, 1, _l_[10], _ff_],
             _fd_,
             _fc_,
             _fb_,
             x_021);
   }
   function sexp_of_t$3(param){
    var
     capacity_027 = param[3],
     level_bits_025 = param[2],
     alarm_precision_023 = param[1],
     bnds_022 = 0;
    if(capacity_027)
     var
      v_028 = capacity_027[1],
      arg_030 = caml_call1(Core[389], v_028),
      bnd_029 = [1, [0, _o_, [0, arg_030, 0]]],
      bnds_022$0 = [0, bnd_029, bnds_022];
    else
     var bnds_022$0 = bnds_022;
    var
     arg_026 = sexp_of_t$0(level_bits_025),
     bnds_022$1 = [0, [1, [0, _p_, [0, arg_026, 0]]], bnds_022$0],
     arg_024 = caml_call1(_l_[11], alarm_precision_023),
     bnds_022$2 = [0, [1, [0, _q_, [0, arg_024, 0]]], bnds_022$1];
    return [1, bnds_022$2];
   }
   function alarm_precision(t){return to_sexpable(t[1]);}
   function max_num_level_bits(alarm_precision){
    return symbol$3(max_num_bits, num_key_bits(alarm_precision));
   }
   function invariant$1(t){
    function _e$_(param){
     var _fa_ = max_num_level_bits(t[1]);
     if(! caml_call2(symbol$0, num_bits_internal(t[2]), _fa_))
      throw caml_maybe_attach_backtrace([0, Assert_failure, _r_], 1);
     var level_bits_fun = caml_call2(Base_Invariant[2], t, invariant$0);
     caml_call1(level_bits_fun, level_bits$0);
     return 0;
    }
    return caml_call4(Base_Invariant[1], _s_, t, sexp_of_t$3, _e$_);
   }
   function create(capacity, opt, alarm_precision, param){
    if(opt)
     var sth = opt[1], level_bits = sth;
    else
     var level_bits = level_bits_default;
    var max_num_bits = max_num_level_bits(alarm_precision);
    if(caml_call2(symbol$0, num_bits_internal(level_bits), max_num_bits))
     var level_bits$0 = level_bits;
    else
     var
      loop =
        function(t, remaining){
         if(! t) return 0;
         var t$0 = t[2], b = t[1];
         return caml_call2(symbol, b, remaining)
                 ? [0, remaining, 0]
                 : [0, b, loop(t$0, symbol$3(remaining, b))];
        },
      level_bits$0 = loop(level_bits, max_num_bits);
    return [0, alarm_precision, level_bits$0, capacity];
   }
   function microsecond_precision(param){
    return create(0, [0, create_exn(0, _t_)], about_one_microsecond, 0);
   }
   function durations(t){
    function _e8_(num_bits_accum, level_num_bits){
     var
      num_bits_accum$0 =
        num_bits_accum + caml_call1(to_int, level_num_bits) | 0,
      _e__ =
        caml_call2(Core[90], num_bits_accum$0, Core_Int63[61] - 1 | 0)
         ? Core_Int63[62]
         : caml_call2(Core_Int63[50], Core_Int63[17], num_bits_accum$0),
      duration = caml_call1(Core_Time_ns[1][137], _e__);
     return [0, num_bits_accum$0, duration];
    }
    var _e9_ = caml_call1(to_int, num_key_bits(t[1]));
    return caml_call3(Core_List[90], t[2], _e9_, _e8_);
   }
   var compare$0 = Core_Int63[114], sexp_of_t$4 = Core_Int63[103];
   function create$0(level_bits){
    var _e6_ = Core_Int63[17], _e7_ = pow2(level_bits);
    return caml_call2(Core_Int63[20], _e7_, _e6_);
   }
   function num_keys(num_bits){return pow2(num_bits);}
   var
    one = Core_Int63[17],
    symbol$4 = Core_Int63[20],
    bit_not = Core_Int63[48],
    sexp_of_t$5 = Core_Int63[103],
    equal$1 = Core_Int63[113];
   function create$1(bits_per_slot){
    return caml_call1(bit_not, caml_call2(symbol$4, pow2(bits_per_slot), one));
   }
   var
    to_int_exn = Core_Int63[5],
    zero$0 = Core_Int63[16],
    one$0 = Core_Int63[17],
    symbol$5 = Core_Int63[19],
    symbol$6 = Core_Int63[21],
    succ = Core_Int63[42],
    pred = Core_Int63[43],
    max_value = Core_Int63[62],
    of_int$0 = Core_Int63[72],
    sexp_of_t$6 = Core_Int63[103],
    symbol$7 = Core_Int63[107],
    symbol$8 = Core_Int63[108],
    symbol$9 = Core_Int63[109],
    symbol$10 = Core_Int63[110],
    symbol$11 = Core_Int63[111],
    symbol$12 = Core_Int63[112],
    equal$2 = Core_Int63[113],
    compare$1 = Core_Int63[114],
    min = Core_Int63[115],
    max = Core_Int63[116],
    ascending = Core_Int63[117],
    descending = Core_Int63[118],
    between = Core_Int63[119],
    clamp_exn = Core_Int63[120],
    clamp = Core_Int63[121],
    Replace_polymorphic_compare = Core_Int63[122],
    comparator = Core_Int63[123],
    Map = Core_Int63[124],
    Set = Core_Int63[125],
    validate_lbound = Core_Int63[132],
    validate_ubound = Core_Int63[133],
    validate_bound = Core_Int63[134];
   function to_int63(t){return t;}
   function of_int63(i){return i;}
   function scale_int(t, i){
    return caml_call2(symbol$6, t, caml_call1(of_int$0, i));
   }
   var
    to_int_exn$0 = Core_Int63[5],
    zero$1 = Core_Int63[16],
    one$1 = Core_Int63[17],
    symbol$13 = Core_Int63[19],
    symbol$14 = Core_Int63[20],
    rem = Core_Int63[28],
    succ$0 = Core_Int63[42],
    pred$0 = Core_Int63[43],
    bit_and = Core_Int63[45],
    shift_right = Core_Int63[51],
    max_value$0 = Core_Int63[62],
    min_value$0 = Core_Int63[63],
    of_int$1 = Core_Int63[72],
    sexp_of_t$7 = Core_Int63[103],
    symbol$15 = Core_Int63[107],
    symbol$16 = Core_Int63[108],
    symbol$17 = Core_Int63[109],
    symbol$18 = Core_Int63[110],
    symbol$19 = Core_Int63[111],
    symbol$20 = Core_Int63[112],
    equal$3 = Core_Int63[113],
    compare$2 = Core_Int63[114],
    min$0 = Core_Int63[115],
    max$0 = Core_Int63[116],
    ascending$0 = Core_Int63[117],
    descending$0 = Core_Int63[118],
    between$0 = Core_Int63[119],
    clamp_exn$0 = Core_Int63[120],
    clamp$0 = Core_Int63[121],
    Replace_polymorphic_compare$0 = Core_Int63[122],
    comparator$0 = Core_Int63[123],
    Map$0 = Core_Int63[124],
    Set$0 = Core_Int63[125],
    hash_fold_t = Core_Int63[126],
    hash = Core_Int63[127],
    hashable = Core_Int63[128],
    Table = Core_Int63[129],
    Hash_set = Core_Int63[130],
    Hash_queue = Core_Int63[131],
    validate_lbound$0 = Core_Int63[132],
    validate_ubound$0 = Core_Int63[133],
    validate_bound$0 = Core_Int63[134];
   function of_int63$0(i){return i;}
   function to_int63$0(t){return t;}
   function add(t, i){return caml_call2(symbol$13, t, i);}
   function add_clamp_to_max(t, i){
    return caml_call2(symbol$18, t, caml_call2(symbol$14, max_value$0, i))
            ? max_value$0
            : caml_call2(symbol$13, t, i);
   }
   function sub(t, i){return caml_call2(symbol$14, t, i);}
   function diff(t1, t2){return caml_call2(symbol$14, t1, t2);}
   function min_key_in_same_slot(t, min_key_in_same_slot_mask){return caml_call2(bit_and, t, min_key_in_same_slot_mask);
   }
   var
    _w_ = Set$0[2],
    _x_ = Set$0[1],
    _z_ = Map$0[2],
    _A_ = Map$0[1],
    _C_ = Set[2],
    _D_ = Set[1],
    _E_ = Map[2],
    _F_ = Map[1],
    _G_ =
      [0,
       sexp_of_t$6,
       symbol$7,
       symbol$8,
       symbol$9,
       symbol$10,
       symbol$11,
       symbol$12,
       equal$2,
       compare$1,
       min,
       ascending,
       descending,
       between,
       clamp_exn,
       clamp,
       comparator,
       validate_lbound,
       validate_ubound,
       validate_bound,
       Replace_polymorphic_compare,
       [0,
        [0, _F_[9], _F_[10], _F_[11]],
        [0, _E_[9], _E_[10], _E_[11], _E_[12], _E_[13]],
        Map[3],
        Map[4],
        Map[5],
        Map[6],
        Map[7],
        Map[8],
        Map[9],
        Map[10],
        Map[11],
        Map[12],
        Map[13],
        Map[14],
        Map[15],
        Map[16],
        Map[17],
        Map[18],
        Map[19],
        Map[20],
        Map[21],
        Map[22],
        Map[23],
        Map[24],
        Map[25],
        Map[26],
        Map[27],
        Map[28],
        Map[29],
        Map[30],
        Map[31],
        Map[32],
        Map[33],
        Map[34],
        Map[35],
        Map[36],
        Map[37],
        Map[38],
        Map[39],
        Map[40],
        Map[41],
        Map[42],
        Map[43],
        Map[44],
        Map[45]],
       [0,
        [0, _D_[1], _D_[2], _D_[11]],
        [0, _C_[9], _C_[10], _C_[11], _C_[12], _C_[13]],
        Set[3],
        Set[4],
        Set[5],
        Set[6],
        Set[7],
        Set[8],
        Set[9],
        Set[10],
        Set[11],
        Set[12],
        Set[13],
        Set[14],
        Set[15],
        Set[16],
        Set[17],
        Set[18],
        Set[19],
        Set[20],
        Set[21],
        Set[22],
        Set[23],
        Set[24],
        Set[25],
        Set[26],
        Set[27],
        Set[28]],
       max,
       zero$0,
       one$0,
       max_value,
       of_int63,
       to_int63,
       of_int$0,
       to_int_exn,
       scale_int,
       pred,
       succ,
       symbol$5],
    _u_ =
      [0,
       Hash_set[1],
       Hash_set[2],
       Hash_set[3],
       Hash_set[4],
       Hash_set[5],
       Hash_set[6],
       Hash_set[7]],
    _v_ =
      [0,
       Table[1],
       Table[2],
       Table[3],
       Table[4],
       Table[5],
       Table[6],
       Table[7],
       Table[8],
       Table[9],
       Table[10],
       Table[11],
       Table[12],
       Table[13],
       Table[14],
       Table[15],
       Table[16],
       Table[17],
       Table[18]],
    _y_ =
      [0,
       [0, _x_[1], _x_[2], _x_[11]],
       [0, _w_[9], _w_[10], _w_[11], _w_[12], _w_[13]],
       Set$0[3],
       Set$0[4],
       Set$0[5],
       Set$0[6],
       Set$0[7],
       Set$0[8],
       Set$0[9],
       Set$0[10],
       Set$0[11],
       Set$0[12],
       Set$0[13],
       Set$0[14],
       Set$0[15],
       Set$0[16],
       Set$0[17],
       Set$0[18],
       Set$0[19],
       Set$0[20],
       Set$0[21],
       Set$0[22],
       Set$0[23],
       Set$0[24],
       Set$0[25],
       Set$0[26],
       Set$0[27],
       Set$0[28]],
    _B_ =
      [0,
       [0, _A_[9], _A_[10], _A_[11]],
       [0, _z_[9], _z_[10], _z_[11], _z_[12], _z_[13]],
       Map$0[3],
       Map$0[4],
       Map$0[5],
       Map$0[6],
       Map$0[7],
       Map$0[8],
       Map$0[9],
       Map$0[10],
       Map$0[11],
       Map$0[12],
       Map$0[13],
       Map$0[14],
       Map$0[15],
       Map$0[16],
       Map$0[17],
       Map$0[18],
       Map$0[19],
       Map$0[20],
       Map$0[21],
       Map$0[22],
       Map$0[23],
       Map$0[24],
       Map$0[25],
       Map$0[26],
       Map$0[27],
       Map$0[28],
       Map$0[29],
       Map$0[30],
       Map$0[31],
       Map$0[32],
       Map$0[33],
       Map$0[34],
       Map$0[35],
       Map$0[36],
       Map$0[37],
       Map$0[38],
       Map$0[39],
       Map$0[40],
       Map$0[41],
       Map$0[42],
       Map$0[43],
       Map$0[44],
       Map$0[45]];
   function sexp_of_pool_slots(of_a_033, x_034){
    function _e0_(_e5_){return sexp_of_pool_slots(of_a_033, _e5_);}
    var _e1_ = caml_call1(Tuple_pool[36][3][1], _e0_);
    function _e2_(_e4_){return sexp_of_pool_slots(of_a_033, _e4_);}
    var _e3_ = caml_call1(Tuple_pool[36][3][1], _e2_);
    return caml_call7
            (Tuple_pool[36][1][8],
             sexp_of_t$7,
             Core_Time_ns_alternate_sexp[98],
             of_a_033,
             Core[389],
             _e3_,
             _e1_,
             x_034);
   }
   function sexp_of_t$8(of_a_035, x_036){
    function _eY_(_eZ_){return sexp_of_pool_slots(of_a_035, _eZ_);}
    return caml_call2(Tuple_pool[36][3][1], _eY_, x_036);
   }
   var
    null$0 = Tuple_pool[36][3][4],
    null$1 = Tuple_pool[36][3][4],
    is_null = Tuple_pool[36][3][5],
    free = Tuple_pool[36][14];
   function key(p, t){
    return caml_call3(Tuple_pool[36][31], p, t, Tuple_pool[36][2][3]);
   }
   function at(p, t){
    return caml_call3(Tuple_pool[36][31], p, t, Tuple_pool[36][2][4]);
   }
   function value(p, t){
    return caml_call3(Tuple_pool[36][31], p, t, Tuple_pool[36][2][5]);
   }
   function level_index(p, t){
    return caml_call3(Tuple_pool[36][31], p, t, Tuple_pool[36][2][6]);
   }
   function prev(p, t){
    return caml_call3(Tuple_pool[36][31], p, t, Tuple_pool[36][2][7]);
   }
   function set_prev(p, t, x){
    return caml_call4(Tuple_pool[36][33], p, t, Tuple_pool[36][2][7], x);
   }
   function next(p, t){
    return caml_call3(Tuple_pool[36][31], p, t, Tuple_pool[36][2][8]);
   }
   function set_next(p, t, x){
    return caml_call4(Tuple_pool[36][33], p, t, Tuple_pool[36][2][8], x);
   }
   function is_valid(p, t){return caml_call2(Tuple_pool[36][6], p, t);}
   var grow = Tuple_pool[36][12], is_full = Tuple_pool[36][13];
   function of_external_exn(pool, t){
    if(is_valid(pool, t)) return t;
    var
     _eX_ = caml_call1(Sexplib0_Sexp_conv[7], cst_Timing_wheel_got_invalid_a);
    return caml_call1(Core[261], _eX_);
   }
   function link(pool, prev, next){
    set_next(pool, prev, next);
    return set_prev(pool, next, prev);
   }
   function iter(pool, first, f){
    var current = [0, first], continue$0 = [0, 1];
    for(;;){
     if(! continue$0[1]) return 0;
     var next$0 = next(pool, current[1]);
     caml_call1(f, current[1]);
     if(next$0 === first) continue$0[1] = 0; else current[1] = next$0;
    }
   }
   function min_alarm_time(pool, first, with_key){
    var
     min_alarm_time = [0, Core_Time_ns_alternate_sexp[37]],
     current = [0, first],
     continue$0 = [0, 1];
    for(;;){
     if(! continue$0[1]) return min_alarm_time[1];
     var next$0 = next(pool, current[1]);
     if(caml_call2(equal$3, key(pool, current[1]), with_key)){
      var _eV_ = min_alarm_time[1], _eW_ = at(pool, current[1]);
      min_alarm_time[1] =
       caml_call2(Core_Time_ns_alternate_sexp[108], _eW_, _eV_);
     }
     if(next$0 === first) continue$0[1] = 0; else current[1] = next$0;
    }
   }
   function slots(r){return r[11];}
   function max_allowed_key(r){return r[10];}
   function set_max_allowed_key(r, v){r[10] = v; return 0;}
   function min_allowed_key(r){return r[9];}
   function set_min_allowed_key(r, v){r[9] = v; return 0;}
   function length(r){return r[8];}
   function set_length(r, v){r[8] = v; return 0;}
   function diff_max_min_allowed_key(r){return r[7];}
   function min_key_in_same_slot_mask(r){return r[6];}
   function keys_per_slot(r){return r[5];}
   function bits_per_slot(r){return r[4];}
   function slots_mask(r){return r[3];}
   function bits(r){return r[2];}
   function index(r){return r[1];}
   function _M_(r, v){
    return [0, r[1], r[2], r[3], r[4], r[5], r[6], r[7], r[8], r[9], r[10], v];
   }
   var
    _N_ = 0,
    slots$0 = [0, function(param){return 0;}, cst_slots, _N_, slots, _M_];
   function _O_(r, v){
    return [0, r[1], r[2], r[3], r[4], r[5], r[6], r[7], r[8], r[9], v, r[11]];
   }
   var
    _P_ = [0, set_max_allowed_key],
    max_allowed_key$0 =
      [0,
       function(param){return 0;},
       cst_max_allowed_key,
       _P_,
       max_allowed_key,
       _O_];
   function _Q_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            v,
            r[10],
            r[11]];
   }
   var
    _R_ = [0, set_min_allowed_key],
    min_allowed_key$0 =
      [0,
       function(param){return 0;},
       cst_min_allowed_key,
       _R_,
       min_allowed_key,
       _Q_];
   function _S_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            v,
            r[9],
            r[10],
            r[11]];
   }
   var
    _T_ = [0, set_length],
    length$0 = [0, function(param){return 0;}, cst_length, _T_, length, _S_];
   function _U_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            v,
            r[8],
            r[9],
            r[10],
            r[11]];
   }
   var
    _V_ = 0,
    diff_max_min_allowed_key$0 =
      [0,
       function(param){return 0;},
       cst_diff_max_min_allowed_key,
       _V_,
       diff_max_min_allowed_key,
       _U_];
   function _W_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            v,
            r[7],
            r[8],
            r[9],
            r[10],
            r[11]];
   }
   var
    _X_ = 0,
    min_key_in_same_slot_mask$0 =
      [0,
       function(param){return 0;},
       cst_min_key_in_same_slot_mask,
       _X_,
       min_key_in_same_slot_mask,
       _W_];
   function _Y_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            v,
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11]];
   }
   var
    _Z_ = 0,
    keys_per_slot$0 =
      [0,
       function(param){return 0;},
       cst_keys_per_slot,
       _Z_,
       keys_per_slot,
       _Y_];
   function ___(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            v,
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11]];
   }
   var
    _$_ = 0,
    bits_per_slot$0 =
      [0,
       function(param){return 0;},
       cst_bits_per_slot,
       _$_,
       bits_per_slot,
       ___];
   function _aa_(r, v){
    return [0,
            r[1],
            r[2],
            v,
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11]];
   }
   var
    _ab_ = 0,
    slots_mask$0 =
      [0, function(param){return 0;}, cst_slots_mask, _ab_, slots_mask, _aa_];
   function _ac_(r, v){
    return [0,
            r[1],
            v,
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11]];
   }
   var
    _ad_ = 0,
    bits$0 = [0, function(param){return 0;}, cst_bits, _ad_, bits, _ac_];
   function _ae_(r, v){
    return [0,
            v,
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11]];
   }
   var
    _af_ = 0,
    index$0 = [0, function(param){return 0;}, cst_index, _af_, index, _ae_];
   function sexp_of_t$9(of_a_044, param){
    var
     diff_max_min_allowed_key_058 = param[7],
     min_key_in_same_slot_mask_056 = param[6],
     keys_per_slot_054 = param[5],
     bits_per_slot_052 = param[4],
     slots_mask_050 = param[3],
     bits_048 = param[2],
     index_046 = param[1],
     length_060 = param[8],
     min_allowed_key_062 = param[9],
     max_allowed_key_064 = param[10],
     slots_066 = param[11],
     arg_067 = caml_call1(Sexplib0_Sexp_conv[23], slots_066),
     bnds_045 = [0, [1, [0, _ag_, [0, arg_067, 0]]], 0],
     arg_065 = caml_call1(sexp_of_t$7, max_allowed_key_064),
     bnds_045$0 = [0, [1, [0, _ah_, [0, arg_065, 0]]], bnds_045],
     arg_063 = caml_call1(sexp_of_t$7, min_allowed_key_062),
     bnds_045$1 = [0, [1, [0, _ai_, [0, arg_063, 0]]], bnds_045$0],
     arg_061 = caml_call1(Core[389], length_060),
     bnds_045$2 = [0, [1, [0, _aj_, [0, arg_061, 0]]], bnds_045$1],
     arg_059 = caml_call1(_G_[1], diff_max_min_allowed_key_058),
     bnds_045$3 = [0, [1, [0, _ak_, [0, arg_059, 0]]], bnds_045$2],
     arg_057 = caml_call1(sexp_of_t$5, min_key_in_same_slot_mask_056),
     bnds_045$4 = [0, [1, [0, _al_, [0, arg_057, 0]]], bnds_045$3],
     arg_055 = caml_call1(_G_[1], keys_per_slot_054),
     bnds_045$5 = [0, [1, [0, _am_, [0, arg_055, 0]]], bnds_045$4],
     arg_053 = caml_call1(sexp_of_t, bits_per_slot_052),
     bnds_045$6 = [0, [1, [0, _an_, [0, arg_053, 0]]], bnds_045$5],
     arg_051 = caml_call1(sexp_of_t$4, slots_mask_050),
     bnds_045$7 = [0, [1, [0, _ao_, [0, arg_051, 0]]], bnds_045$6],
     arg_049 = caml_call1(sexp_of_t, bits_048),
     bnds_045$8 = [0, [1, [0, _ap_, [0, arg_049, 0]]], bnds_045$7],
     arg_047 = caml_call1(Core[389], index_046),
     bnds_045$9 = [0, [1, [0, _aq_, [0, arg_047, 0]]], bnds_045$8];
    return [1, bnds_045$9];
   }
   function slot(t, key){
    var slots_mask = t[3], bits_per_slot = t[4];
    return caml_call1
            (to_int_exn$0,
             caml_call2
              (bit_and,
               caml_call2(shift_right, key, bits_per_slot),
               slots_mask));
   }
   function next_slot(t, slot){
    var t$0 = t[3];
    return (slot + 1 | 0) & caml_call1(Core_Int63[5], t$0);
   }
   function min_key_in_same_slot$0(t, key){
    return min_key_in_same_slot(key, t[6]);
   }
   function compute_min_allowed_key(t, prev_level_max_allowed_key){
    return caml_call2(equal$3, prev_level_max_allowed_key, max_value$0)
            ? max_value$0
            : min_key_in_same_slot$0
              (t, caml_call1(succ$0, prev_level_max_allowed_key));
   }
   function levels(r){return r[5];}
   function elt_key_lower_bound(r){return r[4];}
   function set_elt_key_lower_bound(r, v){r[4] = v; return 0;}
   function min_elt(r){return r[3];}
   function set_min_elt(r, v){r[3] = v; return 0;}
   function pool(r){return r[2];}
   function set_pool(r, v){r[2] = v; return 0;}
   function length$1(r){return r[1];}
   function set_length$0(r, v){r[1] = v; return 0;}
   function _ar_(r, v){return [0, r[1], r[2], r[3], r[4], v];}
   var
    _as_ = 0,
    levels$0 = [0, function(param){return 0;}, cst_levels, _as_, levels, _ar_];
   function _at_(r, v){return [0, r[1], r[2], r[3], v, r[5]];}
   var
    _au_ = [0, set_elt_key_lower_bound],
    elt_key_lower_bound$0 =
      [0,
       function(param){return 0;},
       cst_elt_key_lower_bound,
       _au_,
       elt_key_lower_bound,
       _at_];
   function _av_(r, v){return [0, r[1], r[2], v, r[4], r[5]];}
   var
    _aw_ = [0, set_min_elt],
    min_elt$0 =
      [0, function(param){return 0;}, cst_min_elt, _aw_, min_elt, _av_];
   function _ax_(r, v){return [0, r[1], v, r[3], r[4], r[5]];}
   var
    _ay_ = [0, set_pool],
    pool$0 = [0, function(param){return 0;}, cst_pool, _ay_, pool, _ax_];
   function _az_(r, v){return [0, v, r[2], r[3], r[4], r[5]];}
   var
    _aA_ = [0, set_length$0],
    length$2 =
      [0, function(param){return 0;}, cst_length$0, _aA_, length$1, _az_];
   function is_empty(t){return caml_call2(Core[90], t[1], 0);}
   function num_levels(t){return t[5].length - 1;}
   function min_allowed_key$1(t){return caml_check_bound(t[5], 0)[1][9];}
   function max_allowed_key$1(t){
    var _eU_ = num_levels(t) - 1 | 0;
    return caml_check_bound(t[5], _eU_)[1 + _eU_][10];
   }
   function internal_iter(t, f){
    var _eM_ = caml_call2(Core[91], t[1], 0);
    if(_eM_){
     var
      pool = t[2],
      levels = t[5],
      _eO_ = levels.length - 1 - 1 | 0,
      _eN_ = 0;
     if(_eO_ >= 0){
      var level_index = _eN_;
      for(;;){
       var level = caml_check_bound(levels, level_index)[1 + level_index];
       if(caml_call2(Core[91], level[8], 0)){
        var slots = level[11], _eR_ = slots.length - 1 - 1 | 0, _eQ_ = 0;
        if(_eR_ >= 0){
         var slot_index = _eQ_;
         for(;;){
          var elt = caml_check_bound(slots, slot_index)[1 + slot_index];
          if(1 - caml_call1(is_null, elt)) iter(pool, elt, f);
          var _eT_ = slot_index + 1 | 0;
          if(_eR_ === slot_index) break;
          var slot_index = _eT_;
         }
        }
       }
       var _eS_ = level_index + 1 | 0;
       if(_eO_ === level_index) break;
       var level_index = _eS_;
      }
     }
     var _eP_ = 0;
    }
    else
     var _eP_ = _eM_;
    return _eP_;
   }
   function compute_diff_max_min_allowed_k(level_bits, bits_per_slot){
    var bits = symbol$2(level_bits, bits_per_slot);
    if(caml_call2(equal, bits, max_num_bits)) return _G_[26];
    var _eL_ = num_keys(bits);
    return caml_call1(_G_[32], _eL_);
   }
   function min_elt$1(t){
    if(is_empty(t)) return caml_call1(null$1, 0);
    if(! caml_call1(is_null, t[3])) return t[3];
    var
     pool = t[2],
     min_elt_already_found = [0, caml_call1(null$1, 0)],
     min_key_already_found = [0, max_value$0],
     level_index = [0, 0],
     num_levels$0 = num_levels(t);
    for(;;){
     if(! caml_call2(Core[92], level_index[1], num_levels$0)){
      t[3] = min_elt_already_found[1];
      t[4] = min_key_already_found[1];
      return t[3];
     }
     var
      _eI_ = level_index[1],
      level = caml_check_bound(t[5], _eI_)[1 + _eI_];
     if(caml_call2(symbol$18, level[9], min_key_already_found[1]))
      level_index[1] = num_levels$0;
     else if(caml_call2(Core[90], level[8], 0))
      level_index[1]++;
     else{
      var
       slots = level[11],
       slot_min_key =
         [0, min_key_in_same_slot$0(level, caml_call2(max$0, level[9], t[4]))],
       slot$0 = [0, slot(level, slot_min_key[1])];
      for(;;){
       var _eJ_ = slot$0[1];
       if(! caml_call1(is_null, caml_check_bound(slots, _eJ_)[1 + _eJ_]))
        break;
       if(! caml_call2(symbol$19, slot_min_key[1], min_key_already_found[1]))
        break;
       slot$0[1] = next_slot(level, slot$0[1]);
       slot_min_key[1] = add(slot_min_key[1], level[5]);
      }
      var _eK_ = slot$0[1], first = caml_check_bound(slots, _eK_)[1 + _eK_];
      if(1 - caml_call1(is_null, first)){
       var continue$0 = [0, 1], current = [0, first];
       for(;;){
        if(! continue$0[1]) break;
        var current_key = key(pool, current[1]);
        if(caml_call2(symbol$16, current_key, min_key_already_found[1])){
         min_elt_already_found[1] = current[1];
         min_key_already_found[1] = current_key;
        }
        var next$0 = next(pool, current[1]);
        a:
        {
         if(next$0 !== first && ! caml_call2(Core[90], level_index[1], 0)){current[1] = next$0; break a;}
         continue$0[1] = 0;
        }
       }
      }
      level_index[1]++;
     }
    }
   }
   function add_elt(x_114, to_add){
    var
     pool$0 = x_114[2],
     key$0 = key(pool$0, to_add),
     _eB_ = caml_call2(symbol$15, key$0, min_allowed_key$1(x_114)),
     _eC_ =
       _eB_ ? caml_call2(symbol$16, key$0, max_allowed_key$1(x_114)) : _eB_;
    if(1 - _eC_){
     var pool = x_114[2], r = [0, 0], _eq_ = 0, _er_ = 0;
     internal_iter
      (x_114,
       function(elt){
        var _eG_ = r[1], _eH_ = value(pool, elt);
        r[1] = [0, [0, key(pool, elt), _eH_], _eG_];
        return 0;
       });
     var
      elts_094 = caml_call1(Core_List[59], r[1]),
      max_allowed_key_092 = max_allowed_key$1(x_114),
      min_allowed_key_090 = min_allowed_key$1(x_114),
      bnds_089 = 0,
      _ep_ =
        function(param){
         var
          key_084 = param[1],
          bnds_083 = [0, [1, [0, _aG_, [0, arg_087, 0]]], 0],
          arg_085 = caml_call1(sexp_of_t$7, key_084),
          bnds_083$0 = [0, [1, [0, _aH_, [0, arg_085, 0]]], bnds_083];
         return [1, bnds_083$0];
        },
      arg_095 = caml_call2(Core[472], _ep_, elts_094),
      bnds_089$0 = [0, [1, [0, _aI_, [0, arg_095, 0]]], bnds_089],
      arg_093 = caml_call1(sexp_of_t$7, max_allowed_key_092),
      bnds_089$1 = [0, [1, [0, _aJ_, [0, arg_093, 0]]], bnds_089$0],
      arg_091 = caml_call1(sexp_of_t$7, min_allowed_key_090),
      bnds_089$2 = [0, [1, [0, _aK_, [0, arg_091, 0]]], bnds_089$1],
      _es_ =
        [0,
         [1,
          [0, _a__, [0, caml_call1(sexp_of_t$7, max_allowed_key$1(x_114)), 0]]],
         [0, [1, [0, _a9_, [0, [1, bnds_089$2], _er_]]], _eq_]],
      _et_ =
        [0,
         [1,
          [0, _a$_, [0, caml_call1(sexp_of_t$7, min_allowed_key$1(x_114)), 0]]],
         _es_],
      _eu_ = [0, [1, [0, _ba_, [0, caml_call1(sexp_of_t$7, key$0), 0]]], _et_],
      _ev_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Priority_queue_add_elt_key),
          _eu_]];
     caml_call1(Core[261], _ev_);
    }
    var level_index = [0, 0];
    for(;;){
     var _eD_ = level_index[1];
     if
      (!
       caml_call2
        (symbol$18, key$0, caml_check_bound(x_114[5], _eD_)[1 + _eD_][10]))
      break;
     level_index[1]++;
    }
    var
     level_index$0 = level_index[1],
     level = caml_check_bound(x_114[5], level_index$0)[1 + level_index$0],
     _eE_ = caml_call2(symbol$15, key$0, level[9]),
     _eF_ = _eE_ ? caml_call2(symbol$16, key$0, level[10]) : _eE_;
    if(1 - _eF_){
     var
      _ew_ = 0,
      _ex_ = 0,
      _ey_ =
        [0,
         [1,
          [0,
           _bc_,
           [0, sexp_of_t$9(function(param){return _bb_;}, level), _ex_]]],
         _ew_],
      _ez_ = [0, [1, [0, _bd_, [0, caml_call1(sexp_of_t$7, key$0), 0]]], _ey_],
      _eA_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Priority_queue_add_elt_key$0),
          _ez_]];
     caml_call1(Core[261], _eA_);
    }
    level[8] = level[8] + 1 | 0;
    caml_call4
     (Tuple_pool[36][33], pool$0, to_add, Tuple_pool[36][2][6], level_index$0);
    var
     slot$0 = slot(level, key$0),
     slots = level[11],
     first = caml_check_bound(slots, slot$0)[1 + slot$0];
    if(caml_call1(is_null, first)){
     caml_check_bound(slots, slot$0)[1 + slot$0] = to_add;
     return link(pool$0, to_add, to_add);
    }
    var prev$0 = prev(pool$0, first);
    link(pool$0, prev$0, to_add);
    return link(pool$0, to_add, first);
   }
   function internal_add_elt(t, elt){
    var key$0 = key(t[2], elt);
    if(caml_call2(symbol$19, key$0, t[4])){t[3] = elt; t[4] = key$0;}
    add_elt(t, elt);
    t[1] = t[1] + 1 | 0;
    return 0;
   }
   function ensure_valid_key(t, key){
    var
     _en_ = caml_call2(symbol$19, key, min_allowed_key$1(t)),
     _eo_ = _en_ || caml_call2(symbol$18, key, max_allowed_key$1(t));
    if(! _eo_) return _eo_;
    var
     _ej_ =
       [0,
        [1, [0, _be_, [0, caml_call1(sexp_of_t$7, max_allowed_key$1(t)), 0]]],
        0],
     _ek_ =
       [0,
        [1, [0, _bf_, [0, caml_call1(sexp_of_t$7, min_allowed_key$1(t)), 0]]],
        _ej_],
     _el_ = [0, [1, [0, _bg_, [0, caml_call1(sexp_of_t$7, key), 0]]], _ek_],
     _em_ =
       [1,
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_Timing_wheel_add_at_interv),
         _el_]];
    return caml_call1(Core[261], _em_);
   }
   function internal_add(t, key, at, value){
    ensure_valid_key(t, key);
    if(caml_call1(is_full, t[2])) t[2] = caml_call2(grow, 0, t[2]);
    var
     pool = t[2],
     _eh_ = caml_call1(null$1, 0),
     _ei_ = caml_call1(null$1, 0),
     elt =
       caml_call7(Tuple_pool[36][21], pool, key, at, value, -1, _ei_, _eh_);
    internal_add_elt(t, elt);
    return elt;
   }
   function internal_remove(t, elt){
    var pool = t[2], t2 = t[3];
    if(caml_call2(Tuple_pool[36][3][7], elt, t2))
     t[3] = caml_call1(null$1, 0);
    t[1] = t[1] - 1 | 0;
    var
     _ee_ = level_index(pool, elt),
     level = caml_check_bound(t[5], _ee_)[1 + _ee_];
    level[8] = level[8] - 1 | 0;
    var
     slots = level[11],
     slot$0 = slot(level, key(pool, elt)),
     first = caml_check_bound(slots, slot$0)[1 + slot$0];
    if(elt === next(pool, elt)){
     var _ef_ = caml_call1(null$1, 0);
     caml_check_bound(slots, slot$0)[1 + slot$0] = _ef_;
     return;
    }
    if(elt === first){
     var _eg_ = next(pool, elt);
     caml_check_bound(slots, slot$0)[1 + slot$0] = _eg_;
    }
    var _ec_ = next(pool, elt);
    set_next(pool, prev(pool, elt), _ec_);
    var _ed_ = prev(pool, elt);
    return set_prev(pool, next(pool, elt), _ed_);
   }
   var
    _bh_ =
      [0,
       _G_,
       sexp_of_t$7,
       symbol$15,
       symbol$16,
       symbol$17,
       symbol$18,
       symbol$19,
       symbol$20,
       equal$3,
       ascending$0,
       descending$0,
       between$0,
       clamp_exn$0,
       clamp$0,
       comparator$0,
       validate_lbound$0,
       validate_ubound$0,
       validate_bound$0,
       Replace_polymorphic_compare$0,
       _B_,
       _y_,
       compare$2,
       hash_fold_t,
       hash,
       hashable,
       _v_,
       _u_,
       Hash_queue,
       max$0,
       min$0,
       zero$1,
       one$1,
       min_value$0,
       max_value$0,
       of_int63$0,
       to_int63$0,
       of_int$1,
       to_int_exn$0,
       add,
       sub,
       diff,
       succ$0,
       pred$0,
       rem],
    min_interval_num = _bh_[31];
   function priority_queue(r){return r[7];}
   function max_allowed_alarm_time(r){return r[6];}
   function set_max_allowed_alarm_time(r, v){r[6] = v; return 0;}
   function now_interval_num_start(r){return r[5];}
   function set_now_interval_num_start(r, v){r[5] = v; return 0;}
   function now(r){return r[4];}
   function set_now(r, v){r[4] = v; return 0;}
   function max_interval_num(r){return r[3];}
   function start(r){return r[2];}
   function config(r){return r[1];}
   function _bi_(r, v){return [0, r[1], r[2], r[3], r[4], r[5], r[6], v];}
   var
    _bj_ = 0,
    priority_queue$0 =
      [0,
       function(param){return 0;},
       cst_priority_queue,
       _bj_,
       priority_queue,
       _bi_];
   function _bk_(r, v){return [0, r[1], r[2], r[3], r[4], r[5], v, r[7]];}
   var
    _bl_ = [0, set_max_allowed_alarm_time],
    max_allowed_alarm_time$0 =
      [0,
       function(param){return 0;},
       cst_max_allowed_alarm_time,
       _bl_,
       max_allowed_alarm_time,
       _bk_];
   function _bm_(r, v){return [0, r[1], r[2], r[3], r[4], v, r[6], r[7]];}
   var
    _bn_ = [0, set_now_interval_num_start],
    now_interval_num_start$0 =
      [0,
       function(param){return 0;},
       cst_now_interval_num_start,
       _bn_,
       now_interval_num_start,
       _bm_];
   function _bo_(r, v){return [0, r[1], r[2], r[3], v, r[5], r[6], r[7]];}
   var
    _bp_ = [0, set_now],
    now$0 = [0, function(param){return 0;}, cst_now, _bp_, now, _bo_];
   function _bq_(r, v){return [0, r[1], r[2], v, r[4], r[5], r[6], r[7]];}
   var
    _br_ = 0,
    max_interval_num$0 =
      [0,
       function(param){return 0;},
       cst_max_interval_num,
       _br_,
       max_interval_num,
       _bq_];
   function _bs_(r, v){return [0, r[1], v, r[3], r[4], r[5], r[6], r[7]];}
   var
    _bt_ = 0,
    start$0 = [0, function(param){return 0;}, cst_start, _bt_, start, _bs_];
   function _bu_(r, v){return [0, v, r[2], r[3], r[4], r[5], r[6], r[7]];}
   var
    _bv_ = 0,
    config$0 = [0, function(param){return 0;}, cst_config, _bv_, config, _bu_];
   function sexp_of_t_now(param, t){
    return caml_call1(Core_Time_ns_alternate_sexp[98], t[4]);
   }
   function alarm_precision$0(t){return alarm_precision(t[1]);}
   function at$0(tw, t){
    var p = tw[7], _eb_ = of_external_exn(p[2], t);
    return at(p[2], _eb_);
   }
   function value$0(tw, t){
    var p = tw[7], _ea_ = of_external_exn(p[2], t);
    return value(p[2], _ea_);
   }
   function interval_num(tw, t){
    var p = tw[7], _d$_ = of_external_exn(p[2], t);
    return key(p[2], _d$_);
   }
   function iter$0(t, f){var t$0 = t[7]; return internal_iter(t$0, f);}
   function compare$3(t1, t2){
    return caml_call2(Core_Time_ns_alternate_sexp[107], t1[1], t2[1]);
   }
   function sexp_of_t$10(sexp_of_a, t){
    var
     max_interval_num_146 = t[3],
     start_144 = t[2],
     config_142 = t[1],
     now_148 = t[4],
     r = [0, 0];
    iter$0
     (t,
      function(alarm){
       var _d__ = r[1], _d9_ = value$0(t, alarm);
       r[1] = [0, [0, at$0(t, alarm), _d9_], _d__];
       return 0;
      });
    var alarms_150 = caml_call2(Core_List[79], r[1], compare$3), bnds_141 = 0;
    function _d8_(param){
     var
      value_138 = param[2],
      at_136 = param[1],
      arg_139 = caml_call1(sexp_of_a, value_138),
      bnds_135 = [0, [1, [0, _bw_, [0, arg_139, 0]]], 0],
      arg_137 = caml_call1(Core_Time_ns_alternate_sexp[98], at_136),
      bnds_135$0 = [0, [1, [0, _bx_, [0, arg_137, 0]]], bnds_135];
     return [1, bnds_135$0];
    }
    var
     arg_151 = caml_call2(Core[472], _d8_, alarms_150),
     bnds_141$0 = [0, [1, [0, _by_, [0, arg_151, 0]]], bnds_141],
     arg_149 = caml_call1(Core_Time_ns_alternate_sexp[98], now_148),
     bnds_141$1 = [0, [1, [0, _bz_, [0, arg_149, 0]]], bnds_141$0],
     arg_147 = caml_call1(_bh_[2], max_interval_num_146),
     bnds_141$2 = [0, [1, [0, _bA_, [0, arg_147, 0]]], bnds_141$1],
     arg_145 = caml_call1(Core_Time_ns_alternate_sexp[98], start_144),
     bnds_141$3 = [0, [1, [0, _bB_, [0, arg_145, 0]]], bnds_141$2],
     arg_143 = sexp_of_t$3(config_142),
     bnds_141$4 = [0, [1, [0, _bC_, [0, arg_143, 0]]], bnds_141$3];
    return [1, bnds_141$4];
   }
   function length$3(t){return t[7][1];}
   function is_empty$0(t){
    var _d7_ = length$3(t);
    return caml_call2(Core[90], _d7_, 0);
   }
   function pool$1(t){return t[7][2];}
   function interval_num_internal(time, alarm_precision){
    var
     _d5_ = caml_call1(Core_Time_ns_alternate_sexp[53], time),
     _d6_ = caml_call2(Core_Int63[51], _d5_, alarm_precision);
    return caml_call1(_bh_[35], _d6_);
   }
   function interval_num_unchecked(t, time){
    return interval_num_internal(time, t[1][1]);
   }
   function interval_num$0(t, time){
    if(caml_call2(Core_Time_ns_alternate_sexp[104], time, min_time)){
     var
      _d3_ =
        [0,
         [1,
          [0, _bH_, [0, caml_call1(Core_Time_ns_alternate_sexp[98], time), 0]]],
         0],
      _d4_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Timing_wheel_interval_num_),
          _d3_]];
     caml_call1(Core[261], _d4_);
    }
    return interval_num_unchecked(t, time);
   }
   function interval_num_start_unchecked(t, interval_num){
    var
     interval_num$0 = caml_call1(_bh_[36], interval_num),
     t$0 = t[1][1],
     _d2_ = caml_call2(Core_Int63[50], interval_num$0, t$0);
    return caml_call1(Core_Time_ns_alternate_sexp[54], _d2_);
   }
   function interval_num_start(t, interval_num){
    if(caml_call2(_bh_[7], interval_num, min_interval_num)){
     var
      _dW_ =
        [0, [1, [0, _bI_, [0, caml_call1(_bh_[2], min_interval_num), 0]]], 0],
      _dX_ =
        [0, [1, [0, _bJ_, [0, caml_call1(_bh_[2], interval_num), 0]]], _dW_],
      _dY_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Timing_wheel_interval_num_$0),
          _dX_]];
     caml_call1(Core[261], _dY_);
    }
    if(caml_call2(_bh_[6], interval_num, t[3])){
     var
      _dZ_ = [0, [1, [0, _bK_, [0, caml_call1(_bh_[2], t[3]), 0]]], 0],
      _d0_ =
        [0, [1, [0, _bL_, [0, caml_call1(_bh_[2], interval_num), 0]]], _dZ_],
      _d1_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Timing_wheel_interval_num_$1),
          _d0_]];
     caml_call1(Core[261], _d1_);
    }
    return interval_num_start_unchecked(t, interval_num);
   }
   function next_alarm_fires_at_internal(t, key){
    return interval_num_start(t, caml_call1(_bh_[42], key));
   }
   function next_alarm_fires_at(t){
    var elt = min_elt$1(t[7]);
    if(caml_call1(is_null, elt)) return 0;
    var key$0 = key(pool$1(t), elt);
    return caml_call2(_bh_[9], key$0, t[3])
            ? 0
            : [0, next_alarm_fires_at_internal(t, key$0)];
   }
   function next_alarm_fires_at_exn(x_153){
    var elt = min_elt$1(x_153[7]);
    if(caml_call1(is_null, elt)){
     var
      _dO_ = 0,
      _dP_ = 0,
      _dQ_ =
        [0,
         [1,
          [0,
           _bE_,
           [0, sexp_of_t$10(function(param){return _bD_;}, x_153), _dP_]]],
         _dO_],
      _dR_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Timing_wheel_next_alarm_fi),
          _dQ_]];
     caml_call1(Core[261], _dR_);
    }
    var key$0 = key(pool$1(x_153), elt);
    if(caml_call2(_bh_[9], key$0, x_153[3])){
     var
      _dS_ = 0,
      _dT_ = 0,
      _dU_ =
        [0,
         [1,
          [0,
           _bG_,
           [0, sexp_of_t$10(function(param){return _bF_;}, x_153), _dT_]]],
         _dS_],
      _dV_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Timing_wheel_next_alarm_fi$0),
          _dU_]];
     caml_call1(Core[261], _dV_);
    }
    return next_alarm_fires_at_internal(x_153, key$0);
   }
   function compute_max_allowed_alarm_time(t){
    var max_allowed_key = max_allowed_key$1(t[7]);
    if(caml_call2(_bh_[3], max_allowed_key, t[3])) return max_time;
    var
     _dK_ = Core_Time_ns[1][68],
     _dL_ = alarm_precision$0(t),
     _dM_ = caml_call2(Core_Time_ns[1][102], _dL_, _dK_),
     _dN_ = interval_num_start_unchecked(t, max_allowed_key);
    return caml_call2(Core_Time_ns_alternate_sexp[43], _dN_, _dM_);
   }
   function now_interval_num(t){return min_allowed_key$1(t[7]);}
   function max_allowed_alarm_interval_num(t){return interval_num$0(t, t[6]);}
   function interval_start(t, time){
    return interval_num_start_unchecked(t, interval_num$0(t, time));
   }
   function invariant$2(invariant_a, t){
    function _c5_(param){
     function check(f){return caml_call2(Base_Invariant[2], t, f);}
     var
      priority_queue_fun =
        check
         (function(t){
           var pool = t[2];
           function _de_(param){
            function check(f){return caml_call2(Base_Invariant[2], t, f);}
            if(! caml_call2(symbol$15, min_allowed_key$1(t), zero$1))
             throw caml_maybe_attach_backtrace([0, Assert_failure, _a6_], 1);
            var _dk_ = min_allowed_key$1(t);
            if(! caml_call2(symbol$15, max_allowed_key$1(t), _dk_))
             throw caml_maybe_attach_backtrace([0, Assert_failure, _a5_], 1);
            var
             levels_fun =
               check
                (function(levels){
                  var _dq_ = num_levels(t);
                  if(! caml_call2(Core[91], _dq_, 0))
                   throw caml_maybe_attach_backtrace
                          ([0, Assert_failure, _aY_], 1);
                  function _dr_(level_index$0, level){
                   if(! caml_call2(Core[90], level_index$0, level[1]))
                    throw caml_maybe_attach_backtrace
                           ([0, Assert_failure, _aX_], 1);
                   function _ds_(param){
                    function check(f){
                     return caml_call2(Base_Invariant[2], level, f);
                    }
                    var
                     slots_fun =
                       check
                        (function(slots){
                          function _dz_(elt){
                           var _dC_ = 1 - caml_call1(is_null, elt);
                           if(! _dC_) return _dC_;
                           function _dA_(param){
                            if(! is_valid(pool, elt))
                             throw caml_maybe_attach_backtrace
                                    ([0, Assert_failure, _J_], 1);
                            caml_call1(invariant_a, value(pool, elt));
                            var n = next(pool, elt);
                            if(! caml_call1(is_null, n)){
                             var _dJ_ = prev(pool, n);
                             if(! caml_call2(Tuple_pool[36][3][7], elt, _dJ_))
                              throw caml_maybe_attach_backtrace
                                     ([0, Assert_failure, _I_], 1);
                            }
                            var p = prev(pool, elt);
                            if(! caml_call1(is_null, p)){
                             var _dI_ = next(pool, p);
                             if(! caml_call2(Tuple_pool[36][3][7], elt, _dI_))
                              throw caml_maybe_attach_backtrace
                                     ([0, Assert_failure, _H_], 1);
                            }
                            return 0;
                           }
                           function _dB_(x_041){
                            return sexp_of_t$8(function(param){return _K_;}, x_041);
                           }
                           caml_call4(Base_Invariant[1], _L_, elt, _dB_, _dA_);
                           return iter
                                   (pool,
                                    elt,
                                    function(elt){
                                     var _dD_ = level[9];
                                     if(! caml_call2(symbol$15, key(pool, elt), _dD_))
                                      throw caml_maybe_attach_backtrace
                                             ([0, Assert_failure, _aO_], 1);
                                     var _dE_ = level[10];
                                     if(! caml_call2(symbol$16, key(pool, elt), _dE_))
                                      throw caml_maybe_attach_backtrace
                                             ([0, Assert_failure, _aN_], 1);
                                     var _dF_ = t[4];
                                     if(! caml_call2(symbol$15, key(pool, elt), _dF_))
                                      throw caml_maybe_attach_backtrace
                                             ([0, Assert_failure, _aM_], 1);
                                     var _dG_ = level[1], _dH_ = level_index(pool, elt);
                                     if(caml_call2(Core[90], _dH_, _dG_))
                                      return caml_call1(invariant_a, value(pool, elt));
                                     throw caml_maybe_attach_backtrace
                                            ([0, Assert_failure, _aL_], 1);
                                    });
                          }
                          return caml_call2(Core_Array[35], slots, _dz_);
                         }),
                     max_allowed_key_fun =
                       check
                        (function(max_allowed_key){
                          var
                           expect = add_clamp_to_max(level[9], level[7]),
                           equal = 0,
                           message = 0,
                           here = 0;
                          function comparator(a_107, b_108){
                           return caml_call2(compare$2, a_107, b_108);
                          }
                          return caml_call8
                                  (Ppx_assert_lib_Runtime[3],
                                   pos,
                                   sexp_of_t$7,
                                   comparator,
                                   here,
                                   message,
                                   equal,
                                   expect,
                                   max_allowed_key);
                         }),
                     min_allowed_key_fun =
                       check
                        (function(min_allowed_key){
                          if(! caml_call2(symbol$15, min_allowed_key, zero$1))
                           throw caml_maybe_attach_backtrace
                                  ([0, Assert_failure, _aP_], 1);
                          var
                           _dy_ = caml_call2(symbol$19, min_allowed_key, max_value$0);
                          if(! _dy_) return _dy_;
                          var
                           got = caml_call2(rem, min_allowed_key, level[5]),
                           expect = _G_[24],
                           sexpifier = _G_[1],
                           equal = 0,
                           message = 0,
                           here = 0;
                          function comparator(a_105, b_106){
                           return caml_call2(_G_[9], a_105, b_106);
                          }
                          return caml_call8
                                  (Ppx_assert_lib_Runtime[3],
                                   pos$0,
                                   sexpifier,
                                   comparator,
                                   here,
                                   message,
                                   equal,
                                   expect,
                                   got);
                         }),
                     length_fun =
                       check
                        (function(length){
                          function _dw_(n, first){
                           if(caml_call1(is_null, first)) return n;
                           var r = [0, 0], current = [0, first], continue$0 = [0, 1];
                           for(;;){
                            if(! continue$0[1]) return n + r[1] | 0;
                            r[1]++;
                            var next$0 = next(pool, current[1]);
                            if(next$0 === first)
                             continue$0[1] = 0;
                            else
                             current[1] = next$0;
                           }
                          }
                          var _dx_ = caml_call3(Core_Array[36], level[11], 0, _dw_);
                          if(caml_call2(Core[90], length, _dx_)) return 0;
                          throw caml_maybe_attach_backtrace
                                 ([0, Assert_failure, _aQ_], 1);
                         }),
                     expect = compute_diff_max_min_allowed_k(level[2], level[4]),
                     diff_max_min_allowed_key_fun =
                       check
                        (function(eta){
                          var sexpifier = _G_[1], equal = 0, message = 0, here = 0;
                          function comparator(a_103, b_104){
                           return caml_call2(_G_[9], a_103, b_104);
                          }
                          return caml_call8
                                  (Ppx_assert_lib_Runtime[3],
                                   pos$1,
                                   sexpifier,
                                   comparator,
                                   here,
                                   message,
                                   equal,
                                   expect,
                                   eta);
                         }),
                     min_key_in_same_slot_mask_fun =
                       check
                        (function(min_key_in_same_slot_mask){
                          if
                           (caml_call2
                             (equal$1, min_key_in_same_slot_mask, create$1(level[4])))
                           return 0;
                          throw caml_maybe_attach_backtrace
                                 ([0, Assert_failure, _aR_], 1);
                         }),
                     keys_per_slot_fun =
                       check
                        (function(keys_per_slot){
                          var
                           expect = num_keys(level[4]),
                           sexpifier = _G_[1],
                           equal = 0,
                           message = 0,
                           here = 0;
                          function comparator(a_101, b_102){
                           return caml_call2(_G_[9], a_101, b_102);
                          }
                          return caml_call8
                                  (Ppx_assert_lib_Runtime[3],
                                   pos$2,
                                   sexpifier,
                                   comparator,
                                   here,
                                   message,
                                   equal,
                                   expect,
                                   keys_per_slot);
                         }),
                     bits_per_slot_fun =
                       check
                        (function(bits_per_slot){
                          if(caml_call2(symbol, bits_per_slot, zero)) return 0;
                          throw caml_maybe_attach_backtrace
                                 ([0, Assert_failure, _aS_], 1);
                         }),
                     expect$0 = create$0(level[2]),
                     slots_mask_fun =
                       check
                        (function(eta){
                          var equal = 0, message = 0, here = 0;
                          function comparator(a_099, b_100){
                           return caml_call2(compare$0, a_099, b_100);
                          }
                          return caml_call8
                                  (Ppx_assert_lib_Runtime[3],
                                   pos$3,
                                   sexp_of_t$4,
                                   comparator,
                                   here,
                                   message,
                                   equal,
                                   expect$0,
                                   eta);
                         }),
                     bits_fun =
                       check
                        (function(bits){
                          if(caml_call2(symbol$1, bits, zero)) return 0;
                          throw caml_maybe_attach_backtrace
                                 ([0, Assert_failure, _aT_], 1);
                         }),
                     index_fun =
                       check
                        (function(index){
                          if(caml_call2(Core[88], index, 0)) return 0;
                          throw caml_maybe_attach_backtrace
                                 ([0, Assert_failure, _aU_], 1);
                         });
                    caml_call1(index_fun, index$0);
                    caml_call1(bits_fun, bits$0);
                    caml_call1(slots_mask_fun, slots_mask$0);
                    caml_call1(bits_per_slot_fun, bits_per_slot$0);
                    caml_call1(keys_per_slot_fun, keys_per_slot$0);
                    caml_call1
                     (min_key_in_same_slot_mask_fun, min_key_in_same_slot_mask$0);
                    caml_call1
                     (diff_max_min_allowed_key_fun, diff_max_min_allowed_key$0);
                    caml_call1(length_fun, length$0);
                    caml_call1(min_allowed_key_fun, min_allowed_key$0);
                    caml_call1(max_allowed_key_fun, max_allowed_key$0);
                    return caml_call1(slots_fun, slots$0);
                   }
                   function _dt_(x_098){
                    return sexp_of_t$9(function(param){return _aV_;}, x_098);
                   }
                   caml_call4(Base_Invariant[1], _aW_, level, _dt_, _ds_);
                   var _du_ = caml_call2(Core[91], level_index$0, 0);
                   if(! _du_) return _du_;
                   var
                    _dv_ = level_index$0 - 1 | 0,
                    prev_level = caml_check_bound(levels, _dv_)[1 + _dv_],
                    got = level[5],
                    expect = caml_call1(_G_[33], prev_level[7]),
                    sexpifier = _G_[1],
                    equal = 0,
                    message = 0,
                    here = 0;
                   function comparator(a_110, b_111){
                    return caml_call2(_G_[9], a_110, b_111);
                   }
                   caml_call8
                    (Ppx_assert_lib_Runtime[3],
                     pos$4,
                     sexpifier,
                     comparator,
                     here,
                     message,
                     equal,
                     expect,
                     got);
                   var
                    got$0 = level[9],
                    expect$0 = compute_min_allowed_key(level, prev_level[10]),
                    equal$0 = 0,
                    message$0 = 0,
                    here$0 = 0;
                   function comparator$0(a_112, b_113){
                    return caml_call2(compare$2, a_112, b_113);
                   }
                   return caml_call8
                           (Ppx_assert_lib_Runtime[3],
                            pos$5,
                            sexp_of_t$7,
                            comparator$0,
                            here$0,
                            message$0,
                            equal$0,
                            expect$0,
                            got$0);
                  }
                  return caml_call2(Core_Array[50], levels, _dr_);
                 }),
             elt_key_lower_bound_fun =
               check
                (function(elt_key_lower_bound){
                  if
                   (!
                    caml_call2
                     (symbol$15, elt_key_lower_bound, min_allowed_key$1(t)))
                   throw caml_maybe_attach_backtrace
                          ([0, Assert_failure, _a1_], 1);
                  if
                   (!
                    caml_call2
                     (symbol$16, elt_key_lower_bound, max_allowed_key$1(t)))
                   throw caml_maybe_attach_backtrace
                          ([0, Assert_failure, _a0_], 1);
                  var _dp_ = 1 - caml_call1(is_null, t[3]);
                  if(! _dp_) return _dp_;
                  if
                   (caml_call2(equal$3, elt_key_lower_bound, key(t[2], t[3])))
                   return 0;
                  throw caml_maybe_attach_backtrace
                         ([0, Assert_failure, _aZ_], 1);
                 }),
             min_elt_fun =
               check
                (function(elt){
                  var _dn_ = 1 - caml_call1(is_null, elt);
                  if(! _dn_) return _dn_;
                  if(! is_valid(t[2], elt))
                   throw caml_maybe_attach_backtrace
                          ([0, Assert_failure, _a3_], 1);
                  var _do_ = key(t[2], elt);
                  if(caml_call2(equal$3, t[4], _do_)) return 0;
                  throw caml_maybe_attach_backtrace
                         ([0, Assert_failure, _a2_], 1);
                 }),
             pool_fun =
               check
                (function(t){
                  function _dl_(_dm_){return 0;}
                  return caml_call2(Tuple_pool[36][5], _dl_, t);
                 }),
             length_fun =
               check
                (function(length){
                  if(caml_call2(Core[88], length, 0)) return 0;
                  throw caml_maybe_attach_backtrace
                         ([0, Assert_failure, _a4_], 1);
                 });
            caml_call1(length_fun, length$2);
            caml_call1(pool_fun, pool$0);
            caml_call1(min_elt_fun, min_elt$0);
            caml_call1(elt_key_lower_bound_fun, elt_key_lower_bound$0);
            return caml_call1(levels_fun, levels$0);
           }
           function _df_(x_109){
            function of_a_068(param){return _a7_;}
            var
             length_070 = x_109[1],
             pool_072 = x_109[2],
             min_elt_074 = x_109[3],
             elt_key_lower_bound_076 = x_109[4],
             levels_078 = x_109[5],
             bnds_069 = 0;
            function _dh_(_dj_){return sexp_of_t$9(of_a_068, _dj_);}
            var
             arg_079 = caml_call2(Core[301], _dh_, levels_078),
             bnds_069$0 = [0, [1, [0, _aB_, [0, arg_079, 0]]], bnds_069],
             arg_077 = caml_call1(sexp_of_t$7, elt_key_lower_bound_076),
             bnds_069$1 = [0, [1, [0, _aC_, [0, arg_077, 0]]], bnds_069$0],
             arg_075 = sexp_of_t$8(of_a_068, min_elt_074),
             bnds_069$2 = [0, [1, [0, _aD_, [0, arg_075, 0]]], bnds_069$1];
            function _dg_(_di_){return sexp_of_pool_slots(of_a_068, _di_);}
            var
             arg_073 = caml_call2(Tuple_pool[36][4], _dg_, pool_072),
             bnds_069$3 = [0, [1, [0, _aE_, [0, arg_073, 0]]], bnds_069$2],
             arg_071 = caml_call1(Core[389], length_070),
             bnds_069$4 = [0, [1, [0, _aF_, [0, arg_071, 0]]], bnds_069$3];
            return [1, bnds_069$4];
           }
           return caml_call4(Base_Invariant[1], _a8_, t, _df_, _de_);
          }),
      max_allowed_alarm_time_fun =
        check
         (function(max_allowed_alarm_time){
           var
            expect = compute_max_allowed_alarm_time(t),
            sexpifier = Core_Time_ns_alternate_sexp[98],
            equal = 0,
            message = 0,
            here = 0;
           function comparator(a_162, b_163){
            return caml_call2(Core_Time_ns_alternate_sexp[107], a_162, b_163);
           }
           return caml_call8
                   (Ppx_assert_lib_Runtime[3],
                    pos$6,
                    sexpifier,
                    comparator,
                    here,
                    message,
                    equal,
                    expect,
                    max_allowed_alarm_time);
          }),
      now_interval_num_start_fun =
        check
         (function(now_interval_num_start){
           var
            expect = interval_num_start(t, now_interval_num(t)),
            sexpifier = Core_Time_ns_alternate_sexp[98],
            equal = 0,
            message = 0,
            here = 0;
           function comparator(a_160, b_161){
            return caml_call2(Core_Time_ns_alternate_sexp[107], a_160, b_161);
           }
           return caml_call8
                   (Ppx_assert_lib_Runtime[3],
                    pos$7,
                    sexpifier,
                    comparator,
                    here,
                    message,
                    equal,
                    expect,
                    now_interval_num_start);
          }),
      now_fun =
        check
         (function(now){
           if(! caml_call2(Core_Time_ns_alternate_sexp[100], now, t[2]))
            throw caml_maybe_attach_backtrace([0, Assert_failure, _bO_], 1);
           if(! caml_call2(Core_Time_ns_alternate_sexp[101], now, max_time))
            throw caml_maybe_attach_backtrace([0, Assert_failure, _bN_], 1);
           var _dc_ = min_allowed_key$1(t[7]), _dd_ = interval_num$0(t, t[4]);
           if(caml_call2(_bh_[9], _dd_, _dc_)) return 0;
           throw caml_maybe_attach_backtrace([0, Assert_failure, _bM_], 1);
          }),
      max_interval_num_fun =
        check
         (function(max_interval_num){
           var
            got = interval_num$0(t, max_time),
            sexpifier = _bh_[2],
            equal = 0,
            message = 0,
            here = 0;
           function comparator(a_156, b_157){
            return caml_call2(_bh_[22], a_156, b_157);
           }
           caml_call8
            (Ppx_assert_lib_Runtime[3],
             pos$8,
             sexpifier,
             comparator,
             here,
             message,
             equal,
             max_interval_num,
             got);
           var
            got$0 = interval_num$0(t, interval_num_start(t, max_interval_num)),
            sexpifier$0 = _bh_[2],
            equal$0 = 0,
            message$0 = 0,
            here$0 = 0;
           function comparator$0(a_158, b_159){
            return caml_call2(_bh_[22], a_158, b_159);
           }
           return caml_call8
                   (Ppx_assert_lib_Runtime[3],
                    pos$9,
                    sexpifier$0,
                    comparator$0,
                    here$0,
                    message$0,
                    equal$0,
                    max_interval_num,
                    got$0);
          }),
      start_fun =
        check
         (function(start){
           if(! caml_call2(Core_Time_ns_alternate_sexp[100], start, min_time))
            throw caml_maybe_attach_backtrace([0, Assert_failure, _bQ_], 1);
           if(caml_call2(Core_Time_ns_alternate_sexp[101], start, max_time))
            return 0;
           throw caml_maybe_attach_backtrace([0, Assert_failure, _bP_], 1);
          }),
      config_fun = check(invariant$1);
     caml_call1(config_fun, config$0);
     caml_call1(start_fun, start$0);
     caml_call1(max_interval_num_fun, max_interval_num$0);
     caml_call1(now_fun, now$0);
     caml_call1(now_interval_num_start_fun, now_interval_num_start$0);
     caml_call1(max_allowed_alarm_time_fun, max_allowed_alarm_time$0);
     caml_call1(priority_queue_fun, priority_queue$0);
     return iter$0
             (t,
              function(alarm){
               var
                _c7_ = interval_num$0(t, at$0(t, alarm)),
                _c8_ = interval_num(t, alarm);
               if(! caml_call2(_bh_[9], _c8_, _c7_))
                throw caml_maybe_attach_backtrace
                       ([0, Assert_failure, _bT_], 1);
               var
                _c9_ = interval_start(t, t[4]),
                _c__ = interval_start(t, at$0(t, alarm));
               if(! caml_call2(Core_Time_ns_alternate_sexp[100], _c__, _c9_))
                throw caml_maybe_attach_backtrace
                       ([0, Assert_failure, _bS_], 1);
               var
                _c$_ = alarm_precision$0(t),
                _da_ = caml_call2(Core_Time_ns_alternate_sexp[46], t[4], _c$_),
                _db_ = at$0(t, alarm);
               if(caml_call2(Core_Time_ns_alternate_sexp[103], _db_, _da_))
                return 0;
               throw caml_maybe_attach_backtrace([0, Assert_failure, _bR_], 1);
              });
    }
    function _c6_(x_155){
     return sexp_of_t$10(function(param){return _bU_;}, x_155);
    }
    return caml_call4(Base_Invariant[1], _bV_, t, _c6_, _c5_);
   }
   var debug = 0;
   function advance_clock(t, to, handle_removed){
    var _c3_ = caml_call2(Core_Time_ns_alternate_sexp[103], to, t[4]);
    if(_c3_){
     t[4] = to;
     var t_min_allowed_key = interval_num_unchecked(t, to);
     t[5] = interval_num_start_unchecked(t, t_min_allowed_key);
     var t$0 = t[7];
     if(caml_call2(symbol$16, t_min_allowed_key, min_allowed_key$1(t$0)))
      var match = 0;
     else{
      var
       level_index = [0, 0],
       result = [0, 1],
       prev_level_max_allowed_key = [0, caml_call1(pred$0, t_min_allowed_key)],
       levels = t$0[5],
       num_levels$0 = num_levels(t$0);
      for(;;){
       if(! caml_call2(Core[92], level_index[1], num_levels$0)){
        if(caml_call2(symbol$18, t_min_allowed_key, t$0[4])){
         t$0[3] = caml_call1(null$1, 0);
         t$0[4] = min_allowed_key$1(t$0);
        }
        var match = result[1];
        break;
       }
       var
        _c2_ = level_index[1],
        level = caml_check_bound(levels, _c2_)[1 + _c2_],
        min_allowed_key_before = level[9],
        prev_level_max_allowed_key$0 = prev_level_max_allowed_key[1],
        desired_min_allowed_key =
          compute_min_allowed_key(level, prev_level_max_allowed_key$0),
        level_min_allowed_key =
          min_key_in_same_slot$0
           (level,
            caml_call2
             (min$0,
              desired_min_allowed_key,
              caml_call2(max$0, level[9], t$0[4]))),
        level_min_allowed_key$0 = [0, level_min_allowed_key],
        slot$0 = [0, slot(level, level_min_allowed_key$0[1])],
        keys_per_slot = level[5],
        slots = level[11];
       for(;;){
        if
         (!
          caml_call2
           (symbol$19, level_min_allowed_key$0[1], desired_min_allowed_key))
         break;
        if(caml_call2(Core[90], level[8], 0))
         level_min_allowed_key$0[1] = desired_min_allowed_key;
        else{
         var
          _cZ_ = slot$0[1],
          first = caml_check_bound(slots, _cZ_)[1 + _cZ_];
         if(1 - caml_call1(is_null, first)){
          var _c0_ = caml_call1(null$1, 0), _c1_ = slot$0[1];
          caml_check_bound(slots, _c1_)[1 + _c1_] = _c0_;
          var pool = t$0[2], current = [0, first], continue$0 = [0, 1];
          for(;;){
           if(! continue$0[1]) break;
           var next$0 = next(pool, current[1]);
           level[8] = level[8] - 1 | 0;
           if(caml_call2(symbol$15, key(pool, current[1]), t_min_allowed_key))
            add_elt(t$0, current[1]);
           else{
            t$0[1] = t$0[1] - 1 | 0;
            caml_call1(handle_removed, current[1]);
            caml_call2(free, pool, current[1]);
           }
           if(next$0 === first) continue$0[1] = 0; else current[1] = next$0;
          }
         }
         slot$0[1] = next_slot(level, slot$0[1]);
         level_min_allowed_key$0[1] =
          add_clamp_to_max(level_min_allowed_key$0[1], keys_per_slot);
        }
       }
       level[9] = desired_min_allowed_key;
       level[10] = add_clamp_to_max(desired_min_allowed_key, level[7]);
       if(caml_call2(equal$3, level[9], min_allowed_key_before)){level_index[1] = num_levels$0; result[1] = 0;}
       else{
        level_index[1] = level_index[1] + 1 | 0;
        prev_level_max_allowed_key[1] = level[10];
       }
      }
     }
     if(match){t[6] = compute_max_allowed_alarm_time(t); return 0;}
     var _c4_ = debug;
    }
    else
     var _c4_ = _c3_;
    return _c4_;
   }
   function advance_clock_stop_at_next_ala(t, to, handle_fired){
    var min_elt = min_elt$1(t[7]);
    if(caml_call1(is_null, min_elt))
     return advance_clock
             (t,
              to,
              function(param){
               throw caml_maybe_attach_backtrace([0, Assert_failure, _bW_], 1);
              });
    var key$0 = key(pool$1(t), min_elt), _cX_ = interval_num_start(t, key$0);
    if(caml_call2(Core_Time_ns_alternate_sexp[104], to, _cX_))
     return advance_clock
             (t,
              to,
              function(param){
               throw caml_maybe_attach_backtrace([0, Assert_failure, _bX_], 1);
              });
    var
     _cY_ = min_alarm_time(pool$1(t), min_elt, key$0),
     to$0 = caml_call2(Core_Time_ns_alternate_sexp[108], to, _cY_);
    return advance_clock(t, to$0, handle_fired);
   }
   function create$2(config, start){
    if
     (caml_call2
       (Core_Time_ns_alternate_sexp[104],
        start,
        Core_Time_ns_alternate_sexp[35])){
     var
      _cN_ =
        [0,
         [1,
          [0,
           _bY_,
           [0, caml_call1(Core_Time_ns_alternate_sexp[98], start), 0]]],
         0],
      _cO_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Timing_wheel_create_got_st),
          _cN_]];
     caml_call1(Core[261], _cO_);
    }
    var level_bits = config[2], capacity$0 = config[3];
    function _cJ_(index, param, level_bits){
     var
      levels = param[3],
      max_level_min_allowed_key = param[2],
      bits_per_slot = param[1],
      keys_per_slot = num_keys(bits_per_slot),
      diff_max_min_allowed_key =
        compute_diff_max_min_allowed_k(level_bits, bits_per_slot),
      min_key_in_same_slot_mask = create$1(bits_per_slot),
      min_allowed_key =
        min_key_in_same_slot
         (max_level_min_allowed_key, min_key_in_same_slot_mask),
      max_allowed_key =
        add_clamp_to_max(min_allowed_key, diff_max_min_allowed_key),
      _cR_ = caml_call1(null$1, 0),
      _cS_ = pow2(level_bits),
      _cT_ = caml_call1(Core_Int63[5], _cS_),
      _cU_ = caml_call2(Core_Array[63], _cT_, _cR_),
      level =
        [0,
         index,
         level_bits,
         create$0(level_bits),
         bits_per_slot,
         keys_per_slot,
         min_key_in_same_slot_mask,
         diff_max_min_allowed_key,
         0,
         min_allowed_key,
         max_allowed_key,
         _cU_],
      _cV_ = [0, level, levels],
      _cW_ =
        caml_call2(symbol$17, max_allowed_key, max_value$0)
         ? max_value$0
         : caml_call1(succ$0, max_allowed_key);
     return [0, symbol$2(level_bits, bits_per_slot), _cW_, _cV_];
    }
    var
     levels =
       caml_call3(Core_List[33], level_bits, [0, zero, zero$1, 0], _cJ_)[3],
     _cK_ = caml_call1(Core_Array[99], levels),
     _cL_ = caml_call1(null$1, 0);
    if(capacity$0)
     var sth = capacity$0[1], capacity = sth;
    else
     var capacity = 1;
    var
     _cM_ =
       [0,
        0,
        caml_call2(Tuple_pool[36][35], Tuple_pool[36][1][22], capacity),
        _cL_,
        zero$1,
        _cK_],
     _cP_ = Core_Time_ns_alternate_sexp[38],
     _cQ_ = Core_Time_ns_alternate_sexp[38],
     t =
       [0,
        config,
        start,
        interval_num_internal(max_time, config[1]),
        _cQ_,
        _cP_,
        max_time,
        _cM_];
    t[6] = compute_max_allowed_alarm_time(t);
    advance_clock
     (t,
      start,
      function(param){
       throw caml_maybe_attach_backtrace([0, Assert_failure, _bZ_], 1);
      });
    return t;
   }
   function add_at_interval_num(t, at, value){
    var _cI_ = interval_num_start(t, at);
    return internal_add(t[7], at, _cI_, value);
   }
   function ensure_can_schedule_alarm(t, at){
    if(caml_call2(Core_Time_ns_alternate_sexp[103], at, t[6])){
     var
      _cB_ =
        [0,
         [1,
          [0, _b0_, [0, caml_call1(Core_Time_ns_alternate_sexp[98], t[6]), 0]]],
         0],
      _cC_ =
        [0,
         [1,
          [0, _b1_, [0, caml_call1(Core_Time_ns_alternate_sexp[98], at), 0]]],
         _cB_],
      _cD_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Timing_wheel_cannot_schedu),
          _cC_]];
     caml_call1(Core[261], _cD_);
    }
    var _cH_ = caml_call2(Core_Time_ns_alternate_sexp[104], at, t[5]);
    if(! _cH_) return _cH_;
    var
     _cE_ =
       [0,
        [1,
         [0, _b2_, [0, caml_call1(Core_Time_ns_alternate_sexp[98], t[5]), 0]]],
        0],
     _cF_ =
       [0,
        [1,
         [0, _b3_, [0, caml_call1(Core_Time_ns_alternate_sexp[98], at), 0]]],
        _cE_],
     _cG_ =
       [1,
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_Timing_wheel_cannot_schedu$0),
         _cF_]];
    return caml_call1(Core[261], _cG_);
   }
   function add$0(t, at, value){
    ensure_can_schedule_alarm(t, at);
    var _cA_ = interval_num_unchecked(t, at);
    return internal_add(t[7], _cA_, at, value);
   }
   function remove(t, alarm){
    var t$0 = t[7], pool = t$0[2], elt = of_external_exn(pool, alarm);
    internal_remove(t$0, elt);
    return caml_call2(free, pool, elt);
   }
   function clear(t){
    var t$0 = t[7], _cr_ = 1 - is_empty(t$0);
    if(_cr_){
     t$0[1] = 0;
     var
      pool = t$0[2],
      free_elt = function(elt){return caml_call2(free, pool, elt);},
      levels = t$0[5],
      _ct_ = levels.length - 1 - 1 | 0,
      _cs_ = 0;
     if(_ct_ >= 0){
      var level_index = _cs_;
      for(;;){
       var level = caml_check_bound(levels, level_index)[1 + level_index];
       if(caml_call2(Core[91], level[8], 0)){
        level[8] = 0;
        var slots = level[11], _cw_ = slots.length - 1 - 1 | 0, _cv_ = 0;
        if(_cw_ >= 0){
         var slot_index = _cv_;
         for(;;){
          var elt = caml_check_bound(slots, slot_index)[1 + slot_index];
          if(1 - caml_call1(is_null, elt)){
           iter(pool, elt, free_elt);
           var _cy_ = caml_call1(null$1, 0);
           caml_check_bound(slots, slot_index)[1 + slot_index] = _cy_;
          }
          var _cz_ = slot_index + 1 | 0;
          if(_cw_ === slot_index) break;
          var slot_index = _cz_;
         }
        }
       }
       var _cx_ = level_index + 1 | 0;
       if(_ct_ === level_index) break;
       var level_index = _cx_;
      }
     }
     var _cu_ = 0;
    }
    else
     var _cu_ = _cr_;
    return _cu_;
   }
   function mem(t, alarm){var t$0 = t[7]; return is_valid(t$0[2], alarm);}
   function reschedule_gen(t, alarm, key, at){
    if(1 - mem(t, alarm)) caml_call1(Core[6], cst_Timing_wheel_cannot_resche);
    ensure_can_schedule_alarm(t, at);
    var t$0 = t[7];
    ensure_valid_key(t$0, key);
    var pool = t$0[2], elt = of_external_exn(pool, alarm);
    internal_remove(t$0, elt);
    caml_call4(Tuple_pool[36][33], pool, elt, Tuple_pool[36][2][3], key);
    caml_call4(Tuple_pool[36][33], pool, elt, Tuple_pool[36][2][4], at);
    return internal_add_elt(t$0, elt);
   }
   function reschedule(t, alarm, at){
    return reschedule_gen(t, alarm, interval_num_unchecked(t, at), at);
   }
   function reschedule_at_interval_num(t, alarm, at){
    return reschedule_gen(t, alarm, at, interval_num_start(t, at));
   }
   function min_alarm_interval_num(t){
    var elt = min_elt$1(t[7]);
    return caml_call1(is_null, elt) ? 0 : [0, key(pool$1(t), elt)];
   }
   function min_alarm_interval_num_exn(x_164){
    var elt = min_elt$1(x_164[7]);
    if(! caml_call1(is_null, elt)) return key(pool$1(x_164), elt);
    var
     _cn_ = 0,
     _co_ = 0,
     _cp_ =
       [0,
        [1,
         [0,
          _b5_,
          [0, sexp_of_t$10(function(param){return _b4_;}, x_164), _co_]]],
        _cn_],
     _cq_ =
       [1,
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_Timing_wheel_min_alarm_int),
         _cp_]];
    return caml_call1(Core[261], _cq_);
   }
   function max_alarm_time_in_list(t, first){
    var
     pool = pool$1(t),
     with_key = key(pool, first),
     max_alarm_time = [0, Core_Time_ns_alternate_sexp[35]],
     current = [0, first],
     continue$0 = [0, 1];
    for(;;){
     if(! continue$0[1]) return max_alarm_time[1];
     var next$0 = next(pool, current[1]);
     if(caml_call2(equal$3, key(pool, current[1]), with_key)){
      var _cl_ = max_alarm_time[1], _cm_ = at(pool, current[1]);
      max_alarm_time[1] =
       caml_call2(Core_Time_ns_alternate_sexp[109], _cm_, _cl_);
     }
     if(next$0 === first) continue$0[1] = 0; else current[1] = next$0;
    }
   }
   function min_alarm_time_in_list(t, elt){
    var pool = pool$1(t);
    return min_alarm_time(pool, elt, key(pool, elt));
   }
   function max_alarm_time_in_min_interval(t){
    var elt = min_elt$1(t[7]);
    return caml_call1(is_null, elt) ? 0 : [0, max_alarm_time_in_list(t, elt)];
   }
   function min_alarm_time_in_min_interval(t){
    var elt = min_elt$1(t[7]);
    return caml_call1(is_null, elt) ? 0 : [0, min_alarm_time_in_list(t, elt)];
   }
   function max_alarm_time_in_min_interval$0(x_165){
    var elt = min_elt$1(x_165[7]);
    if(caml_call1(is_null, elt)){
     var
      _ch_ = 0,
      _ci_ = 0,
      _cj_ =
        [0,
         [1,
          [0,
           _b7_,
           [0, sexp_of_t$10(function(param){return _b6_;}, x_165), _ci_]]],
         _ch_],
      _ck_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Timing_wheel_max_alarm_tim),
          _cj_]];
     caml_call1(Core[261], _ck_);
    }
    return max_alarm_time_in_list(x_165, elt);
   }
   function min_alarm_time_in_min_interval$0(x_166){
    var elt = min_elt$1(x_166[7]);
    if(caml_call1(is_null, elt)){
     var
      _cd_ = 0,
      _ce_ = 0,
      _cf_ =
        [0,
         [1,
          [0,
           _b9_,
           [0, sexp_of_t$10(function(param){return _b8_;}, x_166), _ce_]]],
         _cd_],
      _cg_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Timing_wheel_max_alarm_tim$0),
          _cf_]];
     caml_call1(Core[261], _cg_);
    }
    return min_alarm_time_in_list(x_166, elt);
   }
   function fire_past_alarms(t, handle_fired){
    var
     now = t[4],
     key = now_interval_num(t),
     t$0 = t[7],
     level = caml_check_bound(t$0[5], 0)[1],
     _b__ = caml_call2(Core[91], level[8], 0);
    if(_b__){
     var
      slot$0 = slot(level, key),
      slots = level[11],
      pool = t$0[2],
      first = [0, caml_check_bound(slots, slot$0)[1 + slot$0]],
      _b$_ = 1 - caml_call1(is_null, first[1]);
     if(_b$_){
      var current = [0, first[1]], continue$0 = [0, 1];
      for(;;){
       if(! continue$0[1]){var _cb_ = 0; break;}
       var elt = current[1], next$0 = next(pool, elt);
       if(next$0 === first[1]) continue$0[1] = 0; else current[1] = next$0;
       var _ca_ = at(pool, elt);
       if(caml_call2(Core_Time_ns_alternate_sexp[101], _ca_, now)){
        caml_call1(handle_fired, elt);
        internal_remove(t$0, elt);
        caml_call2(free, pool, elt);
        first[1] = caml_check_bound(slots, slot$0)[1 + slot$0];
       }
      }
     }
     else
      var _cb_ = _b$_;
     var _cc_ = _cb_;
    }
    else
     var _cc_ = _b__;
    return _cc_;
   }
   caml_call1(Ppx_inline_test_lib[7], cst_timing_wheel);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Timing_wheel);
   var
    Timing_wheel =
      [0,
       [0,
        compare,
        sexp_of_t$1,
        equal$0,
        of_span_floor_pow2_ns,
        of_span_floor_pow2_ns,
        to_sexpable,
        one_nanosecond,
        about_one_day,
        about_one_microsecond,
        about_one_millisecond,
        about_one_second,
        mul,
        div,
        _l_],
       sexp_of_t$10,
       sexp_of_t_now,
       _bh_,
       [0, sexp_of_t$8, null$0, at$0, interval_num, value$0],
       invariant$2,
       [0,
        t_of_sexp$0,
        sexp_of_t$0,
        invariant$0,
        max_num_bits,
        create_exn,
        level_bits_default,
        num_bits],
       [0,
        t_of_sexp$2,
        sexp_of_t$3,
        invariant$1,
        create,
        alarm_precision,
        level_bits,
        durations,
        microsecond_precision],
       create$2,
       alarm_precision$0,
       now,
       start,
       is_empty$0,
       length$3,
       iter$0,
       interval_num$0,
       now_interval_num,
       interval_num_start,
       interval_start,
       advance_clock,
       advance_clock_stop_at_next_ala,
       fire_past_alarms,
       max_allowed_alarm_time,
       now_interval_num,
       max_allowed_alarm_interval_num,
       add$0,
       add_at_interval_num,
       mem,
       remove,
       reschedule,
       reschedule_at_interval_num,
       clear,
       min_alarm_interval_num,
       min_alarm_interval_num_exn,
       max_alarm_time_in_min_interval,
       min_alarm_time_in_min_interval,
       max_alarm_time_in_min_interval$0,
       min_alarm_time_in_min_interval$0,
       next_alarm_fires_at,
       next_alarm_fires_at_exn,
       [0, max_time, interval_num_internal, [0, invariant, zero]]];
   runtime.caml_register_global(214, Timing_wheel, cst_Timing_wheel$0);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
