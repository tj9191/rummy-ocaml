// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Uri_sexp
//# unitInfo: Requires: Sexplib0__Sexp_conv, Sexplib0__Sexp_conv_error, Sexplib0__Sexp_conv_record, Uri
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst = "",
    cst_Authority = "Authority",
    cst_Custom = "Custom",
    cst_Fragment = "Fragment",
    cst_Generic = "Generic",
    cst_Host = "Host",
    cst_Path = "Path",
    cst_Query = "Query",
    cst_Query_key = "Query_key",
    cst_Query_value = "Query_value",
    cst_Scheme = "Scheme",
    cst_Userinfo = "Userinfo",
    cst_fragment$0 = "fragment",
    cst_host$0 = "host",
    cst_lib_sexp_uri_sexp_ml_Deriv = "lib_sexp/uri_sexp.ml.Derived.component",
    cst_path$0 = "path",
    cst_port$0 = "port",
    cst_query$0 = "query",
    cst_scheme$0 = "scheme",
    cst_userinfo$0 = "userinfo",
    caml_equal = runtime.caml_equal,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_string_compare = runtime.caml_string_compare,
    caml_string_notequal = runtime.caml_string_notequal,
    caml_update_dummy = runtime.caml_update_dummy,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    error_source_006 = cst_lib_sexp_uri_sexp_ml_Deriv,
    error_source_018 = cst_lib_sexp_uri_sexp_ml_Deriv,
    default_034 = cst,
    error_source_027 = "lib_sexp/uri_sexp.ml.Derived.t",
    default_062 = cst,
    Uri = global_data.Uri,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Sexplib0_Sexp_conv_record = global_data.Sexplib0__Sexp_conv_record,
    component_of_sexp = function _aa_(_$_){return _aa_.fun(_$_);},
    component_of_sexp$0 = function ___(_Z_){return ___.fun(_Z_);},
    _r_ = [0, cst_fragment$0],
    _q_ = [0, cst_query$0],
    _p_ = [0, cst_path$0],
    _o_ = [0, cst_port$0],
    _n_ = [0, cst_host$0],
    _m_ = [0, cst_userinfo$0],
    _l_ = [0, cst_scheme$0],
    cst_fragment = cst_fragment$0,
    cst_query = cst_query$0,
    cst_path = cst_path$0,
    cst_port = cst_port$0,
    cst_host = cst_host$0,
    cst_userinfo = cst_userinfo$0,
    cst_scheme = cst_scheme$0,
    _b_ = [0, cst_Path],
    _c_ = [0, cst_Host],
    _d_ = [0, cst_Query_value],
    _e_ = [0, cst_Generic],
    _a_ = [0, cst_Fragment],
    _g_ = [0, cst_Userinfo],
    _h_ = [0, cst_Scheme],
    _i_ = [0, cst_Query],
    _j_ = [0, cst_Query_key],
    _f_ = [0, cst_Authority],
    _k_ = [0, cst_Custom];
   caml_update_dummy
    (component_of_sexp,
     function(sexp_004){
      if(0 === sexp_004[0]){
       var
        atom_002 = sexp_004[1],
        switch$0 = caml_string_compare(atom_002, cst_Path);
       if(0 <= switch$0){
        if(0 >= switch$0) return 892015045;
        if(! caml_string_notequal(atom_002, cst_Query)) return -250086680;
        if(! caml_string_notequal(atom_002, cst_Query_key)) return -911188600;
        if(! caml_string_notequal(atom_002, cst_Query_value))
         return 795008922;
        if(! caml_string_notequal(atom_002, cst_Scheme)) return -178940859;
        if(! caml_string_notequal(atom_002, cst_Userinfo)) return -145160103;
       }
       else{
        if(! caml_string_notequal(atom_002, cst_Authority)) return -715788189;
        if(! caml_string_notequal(atom_002, cst_Custom))
         return caml_call2
                 (Sexplib0_Sexp_conv_error[27], error_source_006, sexp_004);
        if(! caml_string_notequal(atom_002, cst_Fragment)) return 127343600;
        if(! caml_string_notequal(atom_002, cst_Generic)) return 61643255;
        if(! caml_string_notequal(atom_002, cst_Host)) return 803994504;
       }
       return caml_call1(Sexplib0_Sexp_conv_error[23], 0);
      }
      var _V_ = sexp_004[1];
      if(! _V_)
       return caml_call2
               (Sexplib0_Sexp_conv_error[29], error_source_006, sexp_004);
      var match = _V_[1];
      if(0 !== match[0])
       return caml_call2
               (Sexplib0_Sexp_conv_error[28], error_source_006, sexp_004);
      var
       sexp_args_005 = _V_[2],
       atom_002$0 = match[1],
       switch$1 = caml_string_compare(atom_002$0, cst_Path);
      if(0 <= switch$1){
       if
        (0 >= switch$1
         ||
          !
          caml_string_notequal(atom_002$0, cst_Query)
          ||
           !
           caml_string_notequal(atom_002$0, cst_Query_key)
           ||
            !
            caml_string_notequal(atom_002$0, cst_Query_value)
            ||
             !
             caml_string_notequal(atom_002$0, cst_Scheme)
             || ! caml_string_notequal(atom_002$0, cst_Userinfo))
        return caml_call2
                (Sexplib0_Sexp_conv_error[25], error_source_006, sexp_004);
      }
      else{
       if(! caml_string_notequal(atom_002$0, cst_Authority))
        return caml_call2
                (Sexplib0_Sexp_conv_error[25], error_source_006, sexp_004);
       if(! caml_string_notequal(atom_002$0, cst_Custom)){
        if(sexp_args_005 && ! sexp_args_005[2]){
         var arg0_015 = sexp_args_005[1];
         a:
         {
          if(1 === arg0_015[0]){
           var _W_ = arg0_015[1];
           if(_W_){
            var _X_ = _W_[2];
            if(_X_){
             var _Y_ = _X_[2];
             if(_Y_ && ! _Y_[2]){
              var
               arg2_010 = _Y_[1],
               arg1_009 = _X_[1],
               arg0_008 = _W_[1],
               res0_011 = caml_call1(component_of_sexp$0, arg0_008),
               res1_012 = caml_call1(Sexplib0_Sexp_conv[31], arg1_009),
               res2_013 = caml_call1(Sexplib0_Sexp_conv[31], arg2_010),
               res0_016 = [0, res0_011, res1_012, res2_013];
              break a;
             }
            }
           }
          }
          var
           res0_016 =
             caml_call3
              (Sexplib0_Sexp_conv_error[4], error_source_006, 3, arg0_015);
         }
         return [0, -198771759, res0_016];
        }
        return caml_call3
                (Sexplib0_Sexp_conv_error[26],
                 error_source_006,
                 atom_002$0,
                 sexp_004);
       }
       if
        (!
         caml_string_notequal(atom_002$0, cst_Fragment)
         ||
          !
          caml_string_notequal(atom_002$0, cst_Generic)
          || ! caml_string_notequal(atom_002$0, cst_Host))
        return caml_call2
                (Sexplib0_Sexp_conv_error[25], error_source_006, sexp_004);
      }
      return caml_call1(Sexplib0_Sexp_conv_error[23], 0);
     });
   caml_update_dummy
    (component_of_sexp$0,
     function(sexp_017){
      try{var _T_ = caml_call1(component_of_sexp, sexp_017); return _T_;}
      catch(_U_){
       var _S_ = caml_wrap_exception(_U_);
       if(_S_ === Sexplib0_Sexp_conv_error[22])
        return caml_call2
                (Sexplib0_Sexp_conv_error[24], error_source_018, sexp_017);
       throw caml_maybe_attach_backtrace(_S_, 0);
      }
     });
   function sexp_of_component(param){
    if(typeof param === "number")
     return 61643255 <= param
             ? 127343600
               === param
               ? _a_
               : 803994504
                 <= param
                 ? 892015045 <= param ? _b_ : _c_
                 : 795008922 <= param ? _d_ : _e_
             : -715788189
               === param
               ? _f_
               : -178940859
                 <= param
                 ? -145160103 <= param ? _g_ : _h_
                 : -250086680 <= param ? _i_ : _j_;
    var
     v_019 = param[2],
     arg2_022 = v_019[3],
     arg1_021 = v_019[2],
     arg0_020 = v_019[1],
     res0_023 = sexp_of_component(arg0_020),
     res1_024 = caml_call1(Sexplib0_Sexp_conv[7], arg1_021),
     res2_025 = caml_call1(Sexplib0_Sexp_conv[7], arg2_022);
    return [1,
            [0,
             _k_,
             [0, [1, [0, res0_023, [0, res1_024, [0, res2_025, 0]]]], 0]]];
   }
   var
    default_028 = 0,
    default_035 = 0,
    default_036 = 0,
    default_037 = 0,
    default_038 = 0,
    default_042 = 0,
    default_047 = 0,
    default_052 = 0,
    default_057 = 0,
    default_075 = 0;
   function t_of_sexp(x_039){
    function _u_(param){
     var
      _N_ = param[2],
      _O_ = _N_[2],
      _P_ = _O_[2],
      _Q_ = _P_[2],
      _R_ = _Q_[2],
      fragment = _R_[2][1],
      query = _R_[1],
      path = _Q_[1],
      port = _P_[1],
      host = _O_[1],
      userinfo = _N_[1],
      scheme = param[1];
     return [0, scheme, userinfo, host, port, path, query, fragment];
    }
    var _v_ = 0;
    function _w_(param){
     return caml_string_notequal(param, cst_fragment$0)
             ? caml_string_notequal
                (param, cst_host$0)
               ? caml_string_notequal
                  (param, cst_path$0)
                 ? caml_string_notequal
                    (param, cst_port$0)
                   ? caml_string_notequal
                      (param, cst_query$0)
                     ? caml_string_notequal
                        (param, cst_scheme$0)
                       ? caml_string_notequal(param, cst_userinfo$0) ? -1 : 1
                       : 0
                     : 5
                   : 3
                 : 4
               : 2
             : 6;
    }
    var
     _x_ = 0,
     _y_ = caml_call1(Sexplib0_Sexp_conv[41], Sexplib0_Sexp_conv[31]),
     _z_ =
       [0, cst_fragment, [0, function(param){return default_028;}], _y_, _x_],
     _A_ =
       [0,
        cst_query,
        4,
        function(sexp_033){
         if(1 === sexp_033[0]){
          var _L_ = sexp_033[1];
          if(_L_){
           var _M_ = _L_[2];
           if(_M_ && ! _M_[2]){
            var
             arg1_030 = _M_[1],
             arg0_029 = _L_[1],
             res0_031 = caml_call1(Sexplib0_Sexp_conv[31], arg0_029),
             res1_032 =
               caml_call2
                (Sexplib0_Sexp_conv[44], Sexplib0_Sexp_conv[31], arg1_030);
            return [0, res0_031, res1_032];
           }
          }
         }
         return caml_call3
                 (Sexplib0_Sexp_conv_error[4], error_source_027, 2, sexp_033);
        },
        _z_],
     _B_ = Sexplib0_Sexp_conv[31],
     _C_ = [0, cst_path, [0, function(param){return default_034;}], _B_, _A_],
     _D_ = caml_call1(Sexplib0_Sexp_conv[41], Sexplib0_Sexp_conv[34]),
     _E_ = [0, cst_port, [0, function(param){return default_035;}], _D_, _C_],
     _F_ = caml_call1(Sexplib0_Sexp_conv[41], Sexplib0_Sexp_conv[31]),
     _G_ = [0, cst_host, [0, function(param){return default_036;}], _F_, _E_],
     _H_ = caml_call1(Sexplib0_Sexp_conv[41], Sexplib0_Sexp_conv[31]),
     _I_ =
       [0, cst_userinfo, [0, function(param){return default_037;}], _H_, _G_],
     _J_ = caml_call1(Sexplib0_Sexp_conv[41], Sexplib0_Sexp_conv[31]),
     _K_ =
       [0, cst_scheme, [0, function(param){return default_038;}], _J_, _I_],
     t =
       caml_call6
        (Sexplib0_Sexp_conv_record[3],
         error_source_027,
         _K_,
         _w_,
         _v_,
         _u_,
         x_039);
    return caml_call8
            (Uri[11], t[1], t[2], t[3], t[4], [0, t[5]], [0, t[6]], t[7], 0);
   }
   function sexp_of_t(t){
    var
     fragment_076 = caml_call1(Uri[41], t),
     query_067 = caml_call1(Uri[13], t),
     path_063 = caml_call2(Uri[26], 0, t),
     port_058 = caml_call1(Uri[39], t),
     host_053 = caml_call1(Uri[36], t),
     userinfo_048 = caml_call2(Uri[31], 0, t),
     scheme_043 = caml_call1(Uri[29], t),
     arg_078 =
       caml_call1
        (caml_call1(Sexplib0_Sexp_conv[17], Sexplib0_Sexp_conv[7]),
         fragment_076),
     bnds_040 = 0;
    if
     (caml_equal
       (caml_call1
         (caml_call1(Sexplib0_Sexp_conv[17], Sexplib0_Sexp_conv[7]),
          default_075),
        arg_078))
     var bnds_040$0 = bnds_040;
    else
     var
      bnd_077 = [1, [0, _r_, [0, arg_078, 0]]],
      bnds_040$0 = [0, bnd_077, bnds_040];
    var _s_ = query_067 ? 0 : 1;
    if(_s_)
     var bnds_040$1 = bnds_040$0;
    else
     var
      _t_ =
        function(param){
         var
          arg1_069 = param[2],
          arg0_068 = param[1],
          res0_070 = caml_call1(Sexplib0_Sexp_conv[7], arg0_068),
          res1_071 =
            caml_call2
             (Sexplib0_Sexp_conv[20], Sexplib0_Sexp_conv[7], arg1_069);
         return [1, [0, res0_070, [0, res1_071, 0]]];
        },
      arg_073 = caml_call1(caml_call1(Sexplib0_Sexp_conv[20], _t_), query_067),
      bnd_072 = [1, [0, _q_, [0, arg_073, 0]]],
      bnds_040$1 = [0, bnd_072, bnds_040$0];
    var arg_065 = caml_call1(Sexplib0_Sexp_conv[7], path_063);
    if(caml_equal(caml_call1(Sexplib0_Sexp_conv[7], default_062), arg_065))
     var bnds_040$2 = bnds_040$1;
    else
     var
      bnd_064 = [1, [0, _p_, [0, arg_065, 0]]],
      bnds_040$2 = [0, bnd_064, bnds_040$1];
    var
     arg_060 =
       caml_call1
        (caml_call1(Sexplib0_Sexp_conv[17], Sexplib0_Sexp_conv[10]), port_058);
    if
     (caml_equal
       (caml_call1
         (caml_call1(Sexplib0_Sexp_conv[17], Sexplib0_Sexp_conv[10]),
          default_057),
        arg_060))
     var bnds_040$3 = bnds_040$2;
    else
     var
      bnd_059 = [1, [0, _o_, [0, arg_060, 0]]],
      bnds_040$3 = [0, bnd_059, bnds_040$2];
    var
     arg_055 =
       caml_call1
        (caml_call1(Sexplib0_Sexp_conv[17], Sexplib0_Sexp_conv[7]), host_053);
    if
     (caml_equal
       (caml_call1
         (caml_call1(Sexplib0_Sexp_conv[17], Sexplib0_Sexp_conv[7]),
          default_052),
        arg_055))
     var bnds_040$4 = bnds_040$3;
    else
     var
      bnd_054 = [1, [0, _n_, [0, arg_055, 0]]],
      bnds_040$4 = [0, bnd_054, bnds_040$3];
    var
     arg_050 =
       caml_call1
        (caml_call1(Sexplib0_Sexp_conv[17], Sexplib0_Sexp_conv[7]),
         userinfo_048);
    if
     (caml_equal
       (caml_call1
         (caml_call1(Sexplib0_Sexp_conv[17], Sexplib0_Sexp_conv[7]),
          default_047),
        arg_050))
     var bnds_040$5 = bnds_040$4;
    else
     var
      bnd_049 = [1, [0, _m_, [0, arg_050, 0]]],
      bnds_040$5 = [0, bnd_049, bnds_040$4];
    var
     arg_045 =
       caml_call1
        (caml_call1(Sexplib0_Sexp_conv[17], Sexplib0_Sexp_conv[7]),
         scheme_043);
    if
     (caml_equal
       (caml_call1
         (caml_call1(Sexplib0_Sexp_conv[17], Sexplib0_Sexp_conv[7]),
          default_042),
        arg_045))
     var bnds_040$6 = bnds_040$5;
    else
     var
      bnd_044 = [1, [0, _l_, [0, arg_045, 0]]],
      bnds_040$6 = [0, bnd_044, bnds_040$5];
    return [1, bnds_040$6];
   }
   function compare(a, b){return caml_call2(Uri[2], a, b);}
   function equal(a, b){return caml_call2(Uri[3], a, b);}
   var
    Uri_sexp =
      [0,
       component_of_sexp$0,
       sexp_of_component,
       t_of_sexp,
       sexp_of_t,
       compare,
       equal];
   runtime.caml_register_global(63, Uri_sexp, "Uri_sexp");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLjAsImZpbGUiOiJ1cmlfc2V4cC5jbWEuanMiLCJzb3VyY2VSb290IjoiIiwibmFtZXMiOlsiZXJyb3Jfc291cmNlXzAwNiIsImVycm9yX3NvdXJjZV8wMTgiLCJkZWZhdWx0XzAzNCIsImVycm9yX3NvdXJjZV8wMjciLCJkZWZhdWx0XzA2MiIsImNvbXBvbmVudF9vZl9zZXhwIiwiY29tcG9uZW50X29mX3NleHAkMCIsInNleHBfMDA0IiwiYXRvbV8wMDIiLCJzZXhwX2FyZ3NfMDA1IiwiYXRvbV8wMDIkMCIsImFyZzBfMDE1IiwiYXJnMl8wMTAiLCJhcmcxXzAwOSIsImFyZzBfMDA4IiwicmVzMF8wMTEiLCJyZXMxXzAxMiIsInJlczJfMDEzIiwicmVzMF8wMTYiLCJzZXhwXzAxNyIsInNleHBfb2ZfY29tcG9uZW50Iiwidl8wMTkiLCJhcmcyXzAyMiIsImFyZzFfMDIxIiwiYXJnMF8wMjAiLCJyZXMwXzAyMyIsInJlczFfMDI0IiwicmVzMl8wMjUiLCJkZWZhdWx0XzAyOCIsImRlZmF1bHRfMDM1IiwiZGVmYXVsdF8wMzYiLCJkZWZhdWx0XzAzNyIsImRlZmF1bHRfMDM4IiwiZGVmYXVsdF8wNDIiLCJkZWZhdWx0XzA0NyIsImRlZmF1bHRfMDUyIiwiZGVmYXVsdF8wNTciLCJkZWZhdWx0XzA3NSIsInRfb2Zfc2V4cCIsInhfMDM5IiwiZnJhZ21lbnQiLCJxdWVyeSIsInBhdGgiLCJwb3J0IiwiaG9zdCIsInVzZXJpbmZvIiwic2NoZW1lIiwic2V4cF8wMzMiLCJhcmcxXzAzMCIsImFyZzBfMDI5IiwicmVzMF8wMzEiLCJyZXMxXzAzMiIsInQiLCJzZXhwX29mX3QiLCJmcmFnbWVudF8wNzYiLCJxdWVyeV8wNjciLCJwYXRoXzA2MyIsInBvcnRfMDU4IiwiaG9zdF8wNTMiLCJ1c2VyaW5mb18wNDgiLCJzY2hlbWVfMDQzIiwiYXJnXzA3OCIsImJuZHNfMDQwIiwiYm5kc18wNDAkMCIsImJuZF8wNzciLCJibmRzXzA0MCQxIiwiYXJnMV8wNjkiLCJhcmcwXzA2OCIsInJlczBfMDcwIiwicmVzMV8wNzEiLCJhcmdfMDczIiwiYm5kXzA3MiIsImFyZ18wNjUiLCJibmRzXzA0MCQyIiwiYm5kXzA2NCIsImFyZ18wNjAiLCJibmRzXzA0MCQzIiwiYm5kXzA1OSIsImFyZ18wNTUiLCJibmRzXzA0MCQ0IiwiYm5kXzA1NCIsImFyZ18wNTAiLCJibmRzXzA0MCQ1IiwiYm5kXzA0OSIsImFyZ18wNDUiLCJibmRzXzA0MCQ2IiwiYm5kXzA0NCIsImNvbXBhcmUiLCJhIiwiYiIsImVxdWFsIl0sInNvdXJjZXMiOlsiL1VzZXJzL3R5bGFubW9yYW4vLm9wYW0vNS4xLjEvbGliL3VyaS1zZXhwL3VyaV9zZXhwLm1sIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Rzs7Ozs7Rzs7Ozs7Rzs7Ozs7Rzs7Ozs7Rzs7Ozs7OztJQU9DQTtJQUFBQztJQWNBQztJQUFBQztJQUtTQzs7Ozs7SUFuQlRDO0lBNEJHQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0tBNUJIRDtjQUFpQkU7TUFBakIsU0FBaUJBOztRQUFBQyxXQUFBRDt1Q0FBQUM7OzBCQUFBO2tDQUFBQSxzQkFBQTtrQ0FBQUEsMEJBQUE7a0NBQUFBO1NBQUE7a0NBQUFBLHVCQUFBO2tDQUFBQSx5QkFBQTs7O2tDQUFBQSwwQkFBQTtrQ0FBQUE7U0FXTSxPQUFBO2dEQVh2QlIsa0JBQWlCTztrQ0FBQUMseUJBQUE7a0NBQUFBLHdCQUFBO2tDQUFBQSxxQkFBQTs7T0FBQSxPQUFBOztnQkFBQUQ7O09BQUEsT0FBQTs4Q0FBakJQLGtCQUFpQk87OztPQUFBLE9BQUE7OENBQWpCUCxrQkFBaUJPOztPQUFBRTtPQVdNQztzQ0FBQUE7Ozs7OzsrQkFBQUE7OztnQ0FBQUE7OztpQ0FBQUE7OztrQ0FBQUE7dUNBQUFBO1FBWE4sT0FBQTsrQ0FBakJWLGtCQUFpQk87OztpQ0FXTUc7UUFYTixPQUFBOytDQUFqQlYsa0JBQWlCTztpQ0FXTUc7V0FYTkQsbUJBQUFBO2FBV01FLFdBWE5GOzs7VUFXTSxTQUFBRTtxQkFBQUE7Ozs7OztjQUFBO2VBQUFDO2VBQUFDO2VBQUFDO2VBQUFDLFdBQUEsV0FpQnBCVCxxQkFqQm9CUTtlQUFBRSxXQUFBLG1DQUFBSDtlQUFBSSxXQUFBLG1DQUFBTDtlQUFBTSxlQUFBSCxVQUFBQyxVQUFBQzs7Ozs7OztXQUFBQzthQUFBOzRDQVh2QmxCLHFCQVd1Qlc7O1NBQUEsdUJBQUFPOztRQUFBLE9BQUE7O2lCQVh2QmxCO2lCQVd1QlU7aUJBWE5IOzs7OzhCQVdNRzs7OytCQUFBQTtvQ0FBQUE7UUFYTixPQUFBOytDQUFqQlYsa0JBQWlCTzs7TUFBQSxPQUFBO0tBWUU7O0tBZ0JoQkQ7Y0E1QkhhO01BQUEsSUFBQSxVQUFBLFdBQUFkLG1CQUFBYyxXQUFBOzs7O1FBQUEsT0FBQTsrQ0FBQWxCLGtCQUFBa0I7OztLQVltQjtZQWlCaEJDO0lBN0JIOzs7Ozs7Ozs7Ozs7Ozs7OztLQUFpQkM7S0FXTUMsV0FYTkQ7S0FXTUUsV0FYTkY7S0FXTUcsV0FYTkg7S0FXTUksV0FrQnBCTCxrQkFsQm9CSTtLQUFBRSw2Q0FBQUg7S0FBQUksNkNBQUFMOzs7O3lCQUFBRyxjQUFBQyxjQUFBQztHQUNKO0dBRW5CO0lBQUFDO0lBQUFDO0lBQUFDO0lBQUFDO0lBQUFDO0lBQ1NDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBR0FDO1lBVU5DLFVBQVVDOztLQWpCYjs7Ozs7O01BT1NDO01BREFDO01BREFDO01BREFDO01BREFDO01BREFDO01BREFDO0tBRFQsV0FDU0EsUUFDQUQsVUFDQUQsTUFDQUQsTUFDQUQsTUFDQUQsT0FDQUQ7SUFDVTtJQVJuQjs7S0FBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7O0lBUW1CO0lBUm5CO0tBQUE7S0FBQSxNQUFBO0tBQUE7NkNBQUEsT0FBQVosWUFRbUI7S0FSbkI7Ozs7aUJBTWlCbUI7U0FOakIsU0FNaUJBO29CQUFBQTs7OztZQUFBO2FBQUFDO2FBQUFDO2FBQUFDLFdBQUEsbUNBQUFEO2FBQUFFO2VBQUE7aUVBQUFIO1lBQUEsV0FBQUUsVUFBQUM7Ozs7U0FBQSxPQUFBOytDQU5qQmhELHFCQU1pQjRDO1FBRUU7O0tBUm5CO0tBQUEsd0NBQUEsT0FBQTdDLFlBUW1CO0tBUm5CLE1BQUE7S0FBQSx3Q0FBQSxPQUFBMkIsWUFRbUI7S0FSbkIsTUFBQTtLQUFBLHdDQUFBLE9BQUFDLFlBUW1CO0tBUm5CLE1BQUE7S0FBQTs2Q0FBQSxPQUFBQyxZQVFtQjtLQVJuQixNQUFBO0tBQUE7MkNBQUEsT0FBQUMsWUFRbUI7S0FVZm9CO09BbEJKOztTQUFBakQ7Ozs7O1NBaUJhb0M7SUFFYixPQUFBO3NCQURJYSxNQUFBQSxNQUFBQSxNQUFBQSxVQUFBQSxXQUFBQSxPQUFBQTtHQVNEO1lBRUFDLFVBQVVEO0lBQ2I7S0F2Qm1CRSxlQThCUCxvQkFSQ0Y7S0F2QklHLFlBOEJSLG9CQVBJSDtLQXhCRUksV0E4QlAsdUJBTktKO0tBekJFSyxXQThCUCxvQkFMS0w7S0ExQkVNLFdBOEJQLG9CQUpLTjtLQTNCTU8sZUE4QlAsdUJBSENQO0tBNUJJUSxhQThCUCxvQkFGR1I7S0F0Qk1TO09BQUE7U0FBQTtTQUFBUDtLQVBuQlE7SUFPbUI7TUFBQTtRQUFBO1VBQUE7VUFBVnpCO1FBQVV3QjtTQVBuQkUsYUFBQUQ7O0tBT21CO01BQUFFLDJCQUFBSDtNQVBuQkUsaUJBT21CQyxTQVBuQkY7SUFNaUIsVUFBQVA7O1NBTmpCVSxhQUFBRjs7S0FNaUI7OztTQUFBO1VBQUFHO1VBQUFDO1VBQUFDLDZDQUFBRDtVQUFBRTs7NkRBQUFIO3dCQUFBRSxjQUFBQztRQUFvQjtNQUFwQkMsVUFBQSxXQUFBLHlDQUFBZjtNQUFBZ0IsMkJBQUFEO01BTmpCTCxpQkFNaUJNLFNBTmpCUjtJQUtlLElBQUFTLFVBQUEsa0NBQUFoQjtJQUFBLEdBQUEsV0FBQSxrQ0FBTnBELGNBQU1vRTtTQUxmQyxhQUFBUjs7S0FLZTtNQUFBUywyQkFBQUY7TUFMZkMsaUJBS2VDLFNBTGZUO0lBSWU7S0FBQVU7T0FBQTtTQUFBLDREQUFBbEI7SUFBQTtNQUFBO1FBQUE7VUFBQTtVQUFOckI7UUFBTXVDO1NBSmZDLGFBQUFIOztLQUllO01BQUFJLDJCQUFBRjtNQUpmQyxpQkFJZUMsU0FKZko7SUFHZTtLQUFBSztPQUFBO1NBQUEsMkRBQUFwQjtJQUFBO01BQUE7UUFBQTtVQUFBO1VBQU52QjtRQUFNMkM7U0FIZkMsYUFBQUg7O0tBR2U7TUFBQUksMkJBQUFGO01BSGZDLGlCQUdlQyxTQUhmSjtJQUVtQjtLQUFBSztPQUFBO1NBQUE7U0FBQXRCO0lBQUE7TUFBQTtRQUFBO1VBQUE7VUFBVnpCO1FBQVUrQztTQUZuQkMsYUFBQUg7O0tBRW1CO01BQUFJLDJCQUFBRjtNQUZuQkMsaUJBRW1CQyxTQUZuQko7SUFDaUI7S0FBQUs7T0FBQTtTQUFBO1NBQUF4QjtJQUFBO01BQUE7UUFBQTtVQUFBO1VBQVIzQjtRQUFRbUQ7U0FEakJDLGFBQUFIOztLQUNpQjtNQUFBSSwyQkFBQUY7TUFEakJDLGlCQUNpQkMsU0FEakJKO0lBQUEsV0FBQUc7R0FzQ0M7WUFHRUUsUUFBUUMsR0FBRUMsR0FBSSxPQUFBLG1CQUFORCxHQUFFQyxHQUFtQjtZQUM3QkMsTUFBTUYsR0FBRUMsR0FBSSxPQUFBLG1CQUFORCxHQUFFQyxHQUFpQjs7OztPQTVCekJuRjtPQUNBYztPQUVBa0I7T0FZQWU7T0FZQWtDO09BQ0FHOzs7RSIsInNvdXJjZXNDb250ZW50IjpbIm9wZW4gVXJpXG5cbm1vZHVsZSBEZXJpdmVkID1cbnN0cnVjdFxuXG5cdG9wZW4gU2V4cGxpYjAuU2V4cF9jb252XG5cblx0dHlwZSBjb21wb25lbnQgPSBbXG5cdCAgfCBgU2NoZW1lXG5cdCAgfCBgQXV0aG9yaXR5XG5cdCAgfCBgVXNlcmluZm8gKCogc3ViY29tcG9uZW50IG9mIGF1dGhvcml0eSBpbiBzb21lIHNjaGVtZXMgKilcblx0ICB8IGBIb3N0ICgqIHN1YmNvbXBvbmVudCBvZiBhdXRob3JpdHkgaW4gc29tZSBzY2hlbWVzICopXG5cdCAgfCBgUGF0aFxuXHQgIHwgYFF1ZXJ5XG5cdCAgfCBgUXVlcnlfa2V5XG5cdCAgfCBgUXVlcnlfdmFsdWVcblx0ICB8IGBGcmFnbWVudFxuICAgICAgICAgIHwgYEdlbmVyaWNcbiAgICAgICAgICB8IGBDdXN0b20gb2YgKGNvbXBvbmVudCAqIHN0cmluZyAqIHN0cmluZylcblx0XSBbQEBkZXJpdmluZyBzZXhwXVxuXG5cdHR5cGUgdCA9IHtcbiAgICAgICAgICBzY2hlbWU6IHN0cmluZyBvcHRpb24gW0BkZWZhdWx0IE5vbmVdIFtAc2V4cF9kcm9wX2RlZmF1bHQuc2V4cF07XG4gICAgICAgICAgdXNlcmluZm86IHN0cmluZyBvcHRpb24gW0BkZWZhdWx0IE5vbmVdIFtAc2V4cF9kcm9wX2RlZmF1bHQuc2V4cF07XG4gICAgICAgICAgaG9zdDogc3RyaW5nIG9wdGlvbiBbQGRlZmF1bHQgTm9uZV0gW0BzZXhwX2Ryb3BfZGVmYXVsdC5zZXhwXTtcbiAgICAgICAgICBwb3J0OiBpbnQgb3B0aW9uIFtAZGVmYXVsdCBOb25lXSBbQHNleHBfZHJvcF9kZWZhdWx0LnNleHBdO1xuICAgICAgICAgIHBhdGg6IHN0cmluZyBbQGRlZmF1bHQgXCJcIl0gW0BzZXhwX2Ryb3BfZGVmYXVsdC5zZXhwXTtcbiAgICAgICAgICBxdWVyeTogKHN0cmluZyAqIHN0cmluZyBsaXN0KSBsaXN0IFtAc2V4cC5saXN0XTtcbiAgICAgICAgICBmcmFnbWVudDogc3RyaW5nIG9wdGlvbiBbQGRlZmF1bHQgTm9uZV0gW0BzZXhwX2Ryb3BfZGVmYXVsdC5zZXhwXVxuXHR9IFtAQGRlcml2aW5nIHNleHBdXG5cbmVuZFxuXG5vcGVuIERlcml2ZWRcblxubGV0IGNvbXBvbmVudF9vZl9zZXhwID0gY29tcG9uZW50X29mX3NleHBcbmxldCBzZXhwX29mX2NvbXBvbmVudCA9IHNleHBfb2ZfY29tcG9uZW50XG5cbmxldCB0X29mX3NleHAgc2V4cCA9XG5cdGxldCB0ID0gdF9vZl9zZXhwIHNleHAgaW5cblx0VXJpLm1ha2Vcblx0XHQ/c2NoZW1lOnQuc2NoZW1lXG5cdFx0P3VzZXJpbmZvOnQudXNlcmluZm9cblx0XHQ/aG9zdDp0Lmhvc3Rcblx0XHQ/cG9ydDp0LnBvcnRcblx0XHR+cGF0aDp0LnBhdGhcblx0XHR+cXVlcnk6dC5xdWVyeVxuXHRcdD9mcmFnbWVudDp0LmZyYWdtZW50XG5cdFx0KClcblxubGV0IHNleHBfb2ZfdCB0ID1cblx0c2V4cF9vZl90IHtcblx0XHRzY2hlbWUgPSBzY2hlbWUgdDtcblx0XHR1c2VyaW5mbyA9IHVzZXJpbmZvIHQ7XG5cdFx0aG9zdCA9IGhvc3QgdDtcblx0XHRwb3J0ID0gcG9ydCB0O1xuXHRcdHBhdGggPSBwYXRoIHQ7XG5cdFx0cXVlcnkgPSBxdWVyeSB0O1xuXHRcdGZyYWdtZW50ID0gZnJhZ21lbnQgdFxuXHR9XG5cbnR5cGUgY29tcG9uZW50ID0gVXJpLmNvbXBvbmVudFxubGV0IGNvbXBhcmUgYSBiID0gVXJpLmNvbXBhcmUgYSBiXG5sZXQgZXF1YWwgYSBiID0gVXJpLmVxdWFsIGEgYlxudHlwZSB0ID0gVXJpLnRcbiJdfQ==
