// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Incremental__
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Incremental = [0],
    Incremental$0 = [0, Incremental];
   runtime.caml_register_global(0, Incremental$0, "Incremental__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incremental__Before_or_after
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Incremental_Before_or_afte$0 = "Incremental__Before_or_after",
    cst_incremental$0 = "incremental";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incremental_Before_or_afte$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incremental$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/before_or_after.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_incremental$0, "before_or_after.ml");
   var
    _a_ = [0, "After"],
    _b_ = [0, "Before"],
    cst_incremental = cst_incremental$0,
    cst_Incremental_Before_or_afte = cst_Incremental_Before_or_afte$0;
   function sexp_of_t(param){return param ? _a_ : _b_;}
   caml_call1(Ppx_inline_test_lib[7], cst_incremental);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incremental_Before_or_afte);
   var Incremental_Before_or_after = [0, sexp_of_t];
   runtime.caml_register_global
    (13, Incremental_Before_or_after, cst_Incremental_Before_or_afte$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incremental__Import
//# unitInfo: Requires: Core, Core__Array, Core__String, Core__Time_ns, Core__Uniform_array, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Uopt
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Incremental_Import$0 = "Incremental__Import",
    cst_incremental$0 = "incremental";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Core_Array = global_data.Core__Array,
    Core = global_data.Core,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Core_String = global_data.Core__String,
    Core_Time_ns = global_data.Core__Time_ns,
    include = global_data.Uopt,
    Core_Uniform_array = global_data.Core__Uniform_array;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incremental_Import$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incremental$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/import.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_incremental$0, "import.ml");
   var
    concat = Core_String[46],
    cst_incremental = cst_incremental$0,
    cst_Incremental_Import = cst_Incremental_Import$0,
    debug = 0;
   function tag(arg0_001, arg1_002, sexp_of_a){
    var
     res0_003 = caml_call1(Core[558], arg0_001),
     res1_004 = caml_call1(sexp_of_a, arg1_002);
    return [1, [0, res0_003, [0, res1_004, 0]]];
   }
   var
    Span = Core_Time_ns[1],
    Ofday = Core_Time_ns[2],
    hash_fold_t = Core_Time_ns[3],
    hash = Core_Time_ns[4],
    typerep_of_t = Core_Time_ns[5],
    typename_of_t = Core_Time_ns[6],
    bin_size_t = Core_Time_ns[7],
    bin_write_t = Core_Time_ns[8],
    bin_read_t = Core_Time_ns[9],
    bin_read_t$0 = Core_Time_ns[10],
    bin_shape_t = Core_Time_ns[11],
    bin_writer_t = Core_Time_ns[12],
    bin_reader_t = Core_Time_ns[13],
    bin_t = Core_Time_ns[14],
    symbol = Core_Time_ns[15],
    symbol$0 = Core_Time_ns[16],
    symbol$1 = Core_Time_ns[17],
    symbol$2 = Core_Time_ns[18],
    symbol$3 = Core_Time_ns[19],
    symbol$4 = Core_Time_ns[20],
    equal = Core_Time_ns[21],
    compare = Core_Time_ns[22],
    min = Core_Time_ns[23],
    max = Core_Time_ns[24],
    Alternate_sexp = Core_Time_ns[25],
    Option = Core_Time_ns[26],
    quickcheck_generator = Core_Time_ns[27],
    quickcheck_observer = Core_Time_ns[28],
    quickcheck_shrinker = Core_Time_ns[29],
    gen_incl = Core_Time_ns[30],
    gen_uniform_incl = Core_Time_ns[31],
    is_earlier = Core_Time_ns[32],
    is_later = Core_Time_ns[33],
    of_date_ofday = Core_Time_ns[34],
    of_date_ofday_precise = Core_Time_ns[35],
    to_date_ofday = Core_Time_ns[36],
    to_date_ofday_precise = Core_Time_ns[37],
    to_date = Core_Time_ns[38],
    to_ofday = Core_Time_ns[39],
    reset_date_cache = Core_Time_ns[40],
    convert = Core_Time_ns[41],
    utc_offset = Core_Time_ns[42],
    to_filename_string = Core_Time_ns[43],
    of_filename_string = Core_Time_ns[44],
    to_string_abs = Core_Time_ns[45],
    to_string_abs_trimmed = Core_Time_ns[46],
    to_string_abs_parts = Core_Time_ns[47],
    to_string_trimmed = Core_Time_ns[48],
    to_sec_string = Core_Time_ns[49],
    to_sec_string_with_zone = Core_Time_ns[50],
    of_localized_string = Core_Time_ns[51],
    of_string_gen = Core_Time_ns[52],
    to_string_iso8601_basic = Core_Time_ns[53],
    occurrence = Core_Time_ns[54],
    of_string = Core_Time_ns[55],
    of_string_with_utc_offset = Core_Time_ns[56],
    to_string = Core_Time_ns[57],
    to_string_utc = Core_Time_ns[58],
    epoch = Core_Time_ns[59],
    min_value_representable = Core_Time_ns[60],
    max_value_representable = Core_Time_ns[61],
    min_value_for_1us_rounding = Core_Time_ns[62],
    max_value_for_1us_rounding = Core_Time_ns[63],
    min_value = Core_Time_ns[64],
    max_value = Core_Time_ns[65],
    now = Core_Time_ns[66],
    add = Core_Time_ns[67],
    add_saturating = Core_Time_ns[68],
    sub_saturating = Core_Time_ns[69],
    sub = Core_Time_ns[70],
    next = Core_Time_ns[71],
    prev = Core_Time_ns[72],
    diff = Core_Time_ns[73],
    abs_diff = Core_Time_ns[74],
    to_span_since_epoch = Core_Time_ns[75],
    of_span_since_epoch = Core_Time_ns[76],
    to_int63_ns_since_epoch = Core_Time_ns[77],
    of_int63_ns_since_epoch = Core_Time_ns[78],
    to_int_ns_since_epoch = Core_Time_ns[79],
    of_int_ns_since_epoch = Core_Time_ns[80],
    next_multiple = Core_Time_ns[81],
    prev_multiple = Core_Time_ns[82],
    round_up_to_us = Core_Time_ns[83],
    round_up_to_ms = Core_Time_ns[84],
    round_up_to_sec = Core_Time_ns[85],
    round_down_to_us = Core_Time_ns[86],
    round_down_to_ms = Core_Time_ns[87],
    round_down_to_sec = Core_Time_ns[88],
    random = Core_Time_ns[89],
    of_time = Core_Time_ns[90],
    to_time = Core_Time_ns[91],
    to_time_float_round_nearest = Core_Time_ns[92],
    to_time_float_round_nearest_mi = Core_Time_ns[93],
    of_time_float_round_nearest = Core_Time_ns[94],
    of_time_float_round_nearest_mi = Core_Time_ns[95],
    Utc = Core_Time_ns[96],
    O = Core_Time_ns[97],
    Stable = Core_Time_ns[98],
    Hash_queue = Core_Time_ns[99],
    Hash_set = Core_Time_ns[100],
    Map = Core_Time_ns[101],
    Replace_polymorphic_compare = Core_Time_ns[102],
    Set = Core_Time_ns[103],
    Table = Core_Time_ns[104],
    Zone = Core_Time_ns[105],
    arg_type = Core_Time_ns[106],
    comparator = Core_Time_ns[107],
    get_sexp_zone = Core_Time_ns[108],
    interruptible_pause = Core_Time_ns[109],
    of_date_ofday_zoned = Core_Time_ns[110],
    of_string_abs = Core_Time_ns[111],
    of_string_fix_proto = Core_Time_ns[112],
    pause = Core_Time_ns[113],
    pause_forever = Core_Time_ns[114],
    pp = Core_Time_ns[115],
    set_sexp_zone = Core_Time_ns[116],
    sexp_of_t_abs = Core_Time_ns[118],
    t_of_sexp = Core_Time_ns[119],
    t_of_sexp_abs = Core_Time_ns[120],
    to_date_ofday_zoned = Core_Time_ns[121],
    to_ofday_zoned = Core_Time_ns[122],
    to_string_fix_proto = Core_Time_ns[123],
    validate_bound = Core_Time_ns[124],
    validate_lbound = Core_Time_ns[125],
    validate_ubound = Core_Time_ns[126],
    sexp_of_t = Core_Time_ns[25][12],
    Time_ns =
      [0,
       Span,
       Ofday,
       hash_fold_t,
       hash,
       typerep_of_t,
       typename_of_t,
       bin_size_t,
       bin_write_t,
       bin_read_t,
       bin_read_t$0,
       bin_shape_t,
       bin_writer_t,
       bin_reader_t,
       bin_t,
       symbol,
       symbol$0,
       symbol$1,
       symbol$2,
       symbol$3,
       symbol$4,
       equal,
       compare,
       min,
       max,
       Alternate_sexp,
       Option,
       quickcheck_generator,
       quickcheck_observer,
       quickcheck_shrinker,
       gen_incl,
       gen_uniform_incl,
       is_earlier,
       is_later,
       of_date_ofday,
       of_date_ofday_precise,
       to_date_ofday,
       to_date_ofday_precise,
       to_date,
       to_ofday,
       reset_date_cache,
       convert,
       utc_offset,
       to_filename_string,
       of_filename_string,
       to_string_abs,
       to_string_abs_trimmed,
       to_string_abs_parts,
       to_string_trimmed,
       to_sec_string,
       to_sec_string_with_zone,
       of_localized_string,
       of_string_gen,
       to_string_iso8601_basic,
       occurrence,
       of_string,
       of_string_with_utc_offset,
       to_string,
       to_string_utc,
       epoch,
       min_value_representable,
       max_value_representable,
       min_value_for_1us_rounding,
       max_value_for_1us_rounding,
       min_value,
       max_value,
       now,
       add,
       add_saturating,
       sub_saturating,
       sub,
       next,
       prev,
       diff,
       abs_diff,
       to_span_since_epoch,
       of_span_since_epoch,
       to_int63_ns_since_epoch,
       of_int63_ns_since_epoch,
       to_int_ns_since_epoch,
       of_int_ns_since_epoch,
       next_multiple,
       prev_multiple,
       round_up_to_us,
       round_up_to_ms,
       round_up_to_sec,
       round_down_to_us,
       round_down_to_ms,
       round_down_to_sec,
       random,
       of_time,
       to_time,
       to_time_float_round_nearest,
       to_time_float_round_nearest_mi,
       of_time_float_round_nearest,
       of_time_float_round_nearest_mi,
       Utc,
       O,
       Stable,
       Hash_queue,
       Hash_set,
       Map,
       Replace_polymorphic_compare,
       Set,
       Table,
       Zone,
       arg_type,
       comparator,
       get_sexp_zone,
       interruptible_pause,
       of_date_ofday_zoned,
       of_string_abs,
       of_string_fix_proto,
       pause,
       pause_forever,
       pp,
       set_sexp_zone,
       sexp_of_t_abs,
       t_of_sexp,
       t_of_sexp_abs,
       to_date_ofday_zoned,
       to_ofday_zoned,
       to_string_fix_proto,
       validate_bound,
       validate_lbound,
       validate_ubound,
       sexp_of_t],
    bin_shape_t$0 = Core_Array[1],
    bin_size_t$0 = Core_Array[2],
    bin_write_t$0 = Core_Array[3],
    bin_read_t$1 = Core_Array[4],
    bin_read_t$2 = Core_Array[5],
    bin_writer_t$0 = Core_Array[6],
    bin_reader_t$0 = Core_Array[7],
    bin_t$0 = Core_Array[8],
    bin_size_t_local = Core_Array[9],
    bin_write_t_local = Core_Array[10],
    quickcheck_generator$0 = Core_Array[11],
    quickcheck_observer$0 = Core_Array[12],
    quickcheck_shrinker$0 = Core_Array[13],
    typerep_of_t$0 = Core_Array[14],
    typename_of_t$0 = Core_Array[15],
    compare$0 = Core_Array[16],
    compare_local = Core_Array[17],
    globalize = Core_Array[18],
    t_of_sexp$0 = Core_Array[19],
    sexp_of_t$0 = Core_Array[20],
    t_sexp_grammar = Core_Array[21],
    binary_search = Core_Array[22],
    binary_search_segmented = Core_Array[23],
    of_list = Core_Array[24],
    of_array = Core_Array[25],
    append = Core_Array[26],
    map = Core_Array[27],
    filter = Core_Array[28],
    filter_map = Core_Array[29],
    concat_map = Core_Array[30],
    partition_tf = Core_Array[31],
    partition_map = Core_Array[32],
    mem = Core_Array[33],
    is_empty = Core_Array[34],
    iter = Core_Array[35],
    fold = Core_Array[36],
    fold_result = Core_Array[37],
    fold_until = Core_Array[38],
    exists = Core_Array[39],
    for_all = Core_Array[40],
    count = Core_Array[41],
    sum = Core_Array[42],
    find = Core_Array[43],
    find_map = Core_Array[44],
    to_list = Core_Array[45],
    to_array = Core_Array[46],
    min_elt = Core_Array[47],
    max_elt = Core_Array[48],
    foldi = Core_Array[49],
    iteri = Core_Array[50],
    existsi = Core_Array[51],
    for_alli = Core_Array[52],
    counti = Core_Array[53],
    findi = Core_Array[54],
    find_mapi = Core_Array[55],
    init = Core_Array[56],
    mapi = Core_Array[57],
    filteri = Core_Array[58],
    filter_mapi = Core_Array[59],
    concat_mapi = Core_Array[60],
    invariant = Core_Array[61],
    max_length = Core_Array[62],
    create = Core_Array[63],
    create_local = Core_Array[64],
    create_float_uninitialized = Core_Array[65],
    make_matrix = Core_Array[66],
    copy_matrix = Core_Array[67],
    concat$0 = Core_Array[68],
    copy = Core_Array[69],
    fill = Core_Array[70],
    blit = Core_Array[71],
    blito = Core_Array[72],
    unsafe_blit = Core_Array[73],
    sub$0 = Core_Array[74],
    subo = Core_Array[75],
    folding_map = Core_Array[76],
    folding_mapi = Core_Array[77],
    fold_map = Core_Array[78],
    fold_mapi = Core_Array[79],
    fold_right = Core_Array[80],
    sort = Core_Array[81],
    stable_sort = Core_Array[82],
    is_sorted = Core_Array[83],
    is_sorted_strictly = Core_Array[84],
    merge = Core_Array[85],
    partitioni_tf = Core_Array[86],
    cartesian_product = Core_Array[87],
    transpose = Core_Array[88],
    transpose_exn = Core_Array[89],
    filter_opt = Core_Array[90],
    iter2_exn = Core_Array[91],
    map2_exn = Core_Array[92],
    fold2_exn = Core_Array[93],
    for_all2_exn = Core_Array[94],
    exists2_exn = Core_Array[95],
    swap = Core_Array[96],
    rev_inplace = Core_Array[97],
    rev = Core_Array[98],
    of_list_rev = Core_Array[99],
    of_list_map = Core_Array[100],
    of_list_mapi = Core_Array[101],
    of_list_rev_map = Core_Array[102],
    of_list_rev_mapi = Core_Array[103],
    map_inplace = Core_Array[104],
    find_exn = Core_Array[105],
    find_map_exn = Core_Array[106],
    findi_exn = Core_Array[107],
    find_mapi_exn = Core_Array[108],
    find_consecutive_duplicate = Core_Array[109],
    reduce = Core_Array[110],
    reduce_exn = Core_Array[111],
    permute = Core_Array[112],
    random_element = Core_Array[113],
    random_element_exn = Core_Array[114],
    zip = Core_Array[115],
    zip_exn = Core_Array[116],
    unzip = Core_Array[117],
    sorted_copy = Core_Array[118],
    last = Core_Array[119],
    equal$0 = Core_Array[120],
    equal_local = Core_Array[121],
    to_sequence = Core_Array[122],
    to_sequence_mutable = Core_Array[123],
    Int = Core_Array[124],
    Float = Core_Array[125],
    normalize = Core_Array[126],
    slice = Core_Array[127],
    nget = Core_Array[128],
    nset = Core_Array[129],
    Permissioned = Core_Array[130];
   function realloc(t, len, a){
    var new_t = caml_call2(create, len, a);
    caml_call5(Core_Array[71], t, 0, new_t, 0, t.length - 1);
    return new_t;
   }
   var
    Array =
      [0,
       bin_shape_t$0,
       bin_size_t$0,
       bin_write_t$0,
       bin_read_t$1,
       bin_read_t$2,
       bin_writer_t$0,
       bin_reader_t$0,
       bin_t$0,
       bin_size_t_local,
       bin_write_t_local,
       quickcheck_generator$0,
       quickcheck_observer$0,
       quickcheck_shrinker$0,
       typerep_of_t$0,
       typename_of_t$0,
       compare$0,
       compare_local,
       globalize,
       t_of_sexp$0,
       sexp_of_t$0,
       t_sexp_grammar,
       binary_search,
       binary_search_segmented,
       of_list,
       of_array,
       append,
       map,
       filter,
       filter_map,
       concat_map,
       partition_tf,
       partition_map,
       mem,
       is_empty,
       iter,
       fold,
       fold_result,
       fold_until,
       exists,
       for_all,
       count,
       sum,
       find,
       find_map,
       to_list,
       to_array,
       min_elt,
       max_elt,
       foldi,
       iteri,
       existsi,
       for_alli,
       counti,
       findi,
       find_mapi,
       init,
       mapi,
       filteri,
       filter_mapi,
       concat_mapi,
       invariant,
       max_length,
       create,
       create_local,
       create_float_uninitialized,
       make_matrix,
       copy_matrix,
       concat$0,
       copy,
       fill,
       blit,
       blito,
       unsafe_blit,
       sub$0,
       subo,
       folding_map,
       folding_mapi,
       fold_map,
       fold_mapi,
       fold_right,
       sort,
       stable_sort,
       is_sorted,
       is_sorted_strictly,
       merge,
       partitioni_tf,
       cartesian_product,
       transpose,
       transpose_exn,
       filter_opt,
       iter2_exn,
       map2_exn,
       fold2_exn,
       for_all2_exn,
       exists2_exn,
       swap,
       rev_inplace,
       rev,
       of_list_rev,
       of_list_map,
       of_list_mapi,
       of_list_rev_map,
       of_list_rev_mapi,
       map_inplace,
       find_exn,
       find_map_exn,
       findi_exn,
       find_mapi_exn,
       find_consecutive_duplicate,
       reduce,
       reduce_exn,
       permute,
       random_element,
       random_element_exn,
       zip,
       zip_exn,
       unzip,
       sorted_copy,
       last,
       equal$0,
       equal_local,
       to_sequence,
       to_sequence_mutable,
       Int,
       Float,
       normalize,
       slice,
       nget,
       nset,
       Permissioned,
       realloc],
    t_of_sexp$1 = include[1],
    sexp_of_t$1 = include[2],
    globalize$0 = include[3],
    invariant$0 = include[4],
    none = include[5],
    some = include[6],
    is_none = include[7],
    is_some = include[8],
    value_exn = include[9],
    value = include[10],
    some_if = include[11],
    unsafe_value = include[12],
    to_option = include[13],
    of_option = include[14],
    Optional_syntax = include[15],
    Local = include[16],
    Uopt =
      [0,
       t_of_sexp$1,
       sexp_of_t$1,
       globalize$0,
       invariant$0,
       none,
       some,
       is_none,
       is_some,
       value_exn,
       value,
       some_if,
       to_option,
       of_option,
       Optional_syntax,
       Local,
       unsafe_value],
    bin_shape_t$1 = Core_Uniform_array[1],
    bin_size_t$1 = Core_Uniform_array[2],
    bin_write_t$1 = Core_Uniform_array[3],
    bin_read_t$3 = Core_Uniform_array[4],
    bin_read_t$4 = Core_Uniform_array[5],
    bin_writer_t$1 = Core_Uniform_array[6],
    bin_reader_t$1 = Core_Uniform_array[7],
    bin_t$1 = Core_Uniform_array[8],
    t_of_sexp$2 = Core_Uniform_array[9],
    sexp_of_t$2 = Core_Uniform_array[10],
    t_sexp_grammar$0 = Core_Uniform_array[11],
    compare$1 = Core_Uniform_array[12],
    compare_local$0 = Core_Uniform_array[13],
    invariant$1 = Core_Uniform_array[14],
    empty = Core_Uniform_array[15],
    create$0 = Core_Uniform_array[16],
    singleton = Core_Uniform_array[17],
    init$0 = Core_Uniform_array[18],
    length = Core_Uniform_array[19],
    get = Core_Uniform_array[20],
    unsafe_get = Core_Uniform_array[21],
    unsafe_get_local = Core_Uniform_array[22],
    swap$0 = Core_Uniform_array[25],
    unsafe_set_omit_phys_equal_che = Core_Uniform_array[26],
    unsafe_set_with_caml_modify = Core_Uniform_array[27],
    set_with_caml_modify = Core_Uniform_array[28],
    map$0 = Core_Uniform_array[29],
    mapi$0 = Core_Uniform_array[30],
    iter$0 = Core_Uniform_array[31],
    iteri$0 = Core_Uniform_array[32],
    fold$0 = Core_Uniform_array[33],
    foldi$0 = Core_Uniform_array[34],
    unsafe_to_array_inplace_promis = Core_Uniform_array[35],
    of_array$0 = Core_Uniform_array[36],
    to_array$0 = Core_Uniform_array[37],
    of_list$0 = Core_Uniform_array[38],
    of_list_rev$0 = Core_Uniform_array[39],
    to_list$0 = Core_Uniform_array[40],
    blit$0 = Core_Uniform_array[41],
    blito$0 = Core_Uniform_array[42],
    unsafe_blit$0 = Core_Uniform_array[43],
    sub$1 = Core_Uniform_array[44],
    subo$0 = Core_Uniform_array[45],
    copy$0 = Core_Uniform_array[46],
    exists$0 = Core_Uniform_array[47],
    existsi$0 = Core_Uniform_array[48],
    for_all$0 = Core_Uniform_array[49],
    for_alli$0 = Core_Uniform_array[50],
    concat$1 = Core_Uniform_array[51],
    concat_map$0 = Core_Uniform_array[52],
    concat_mapi$0 = Core_Uniform_array[53],
    partition_map$0 = Core_Uniform_array[54],
    filter$0 = Core_Uniform_array[55],
    filteri$0 = Core_Uniform_array[56],
    filter_map$0 = Core_Uniform_array[57],
    filter_mapi$0 = Core_Uniform_array[58],
    find$0 = Core_Uniform_array[59],
    findi$0 = Core_Uniform_array[60],
    find_map$0 = Core_Uniform_array[61],
    find_mapi$0 = Core_Uniform_array[62],
    map2_exn$0 = Core_Uniform_array[63],
    fold2_exn$0 = Core_Uniform_array[64],
    min_elt$0 = Core_Uniform_array[65],
    max_elt$0 = Core_Uniform_array[66],
    sort$0 = Core_Uniform_array[67],
    binary_search$0 = Core_Uniform_array[68],
    binary_search_segmented$0 = Core_Uniform_array[69],
    unsafe_create_uninitialized = Core_Uniform_array[70],
    create_obj_array = Core_Uniform_array[71],
    unsafe_set_assuming_currently_ = Core_Uniform_array[72],
    unsafe_set_int_assuming_curren = Core_Uniform_array[73],
    unsafe_set_int = Core_Uniform_array[74],
    unsafe_clear_if_pointer = Core_Uniform_array[75];
   function realloc$0(t, len){
    var new_t = caml_call2(create$0, len, Uopt[5]);
    caml_call5(blit$0, t, 0, new_t, 0, caml_call1(length, t));
    return new_t;
   }
   var
    Uniform_array =
      [0,
       bin_shape_t$1,
       bin_size_t$1,
       bin_write_t$1,
       bin_read_t$3,
       bin_read_t$4,
       bin_writer_t$1,
       bin_reader_t$1,
       bin_t$1,
       t_of_sexp$2,
       sexp_of_t$2,
       t_sexp_grammar$0,
       compare$1,
       compare_local$0,
       invariant$1,
       empty,
       create$0,
       singleton,
       init$0,
       length,
       get,
       unsafe_get,
       unsafe_get_local,
       swap$0,
       unsafe_set_omit_phys_equal_che,
       unsafe_set_with_caml_modify,
       set_with_caml_modify,
       map$0,
       mapi$0,
       iter$0,
       iteri$0,
       fold$0,
       foldi$0,
       unsafe_to_array_inplace_promis,
       of_array$0,
       to_array$0,
       of_list$0,
       of_list_rev$0,
       to_list$0,
       blit$0,
       blito$0,
       unsafe_blit$0,
       sub$1,
       subo$0,
       copy$0,
       exists$0,
       existsi$0,
       for_all$0,
       for_alli$0,
       concat$1,
       concat_map$0,
       concat_mapi$0,
       partition_map$0,
       filter$0,
       filteri$0,
       filter_map$0,
       filter_mapi$0,
       find$0,
       findi$0,
       find_map$0,
       find_mapi$0,
       map2_exn$0,
       fold2_exn$0,
       min_elt$0,
       max_elt$0,
       sort$0,
       binary_search$0,
       binary_search_segmented$0,
       unsafe_create_uninitialized,
       create_obj_array,
       unsafe_set_assuming_currently_,
       unsafe_set_int_assuming_curren,
       unsafe_set_int,
       unsafe_clear_if_pointer,
       unsafe_set_with_caml_modify,
       set_with_caml_modify,
       realloc$0];
   caml_call1(Ppx_inline_test_lib[7], cst_incremental);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incremental_Import);
   var
    Incremental_Import =
      [0, debug, concat, tag, Time_ns, Array, Uopt, Uniform_array];
   runtime.caml_register_global
    (17, Incremental_Import, cst_Incremental_Import$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incremental__Cutoff
//# unitInfo: Requires: Base__Invariant, Core, Core__Sexp, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Sexplib0__Sexp_conv_error
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Always = "Always",
    cst_Compare = "Compare",
    cst_Equal = "Equal",
    cst_F = "F",
    cst_Incremental_Cutoff$0 = "Incremental__Cutoff",
    cst_Never = "Never",
    cst_Phys_equal = "Phys_equal",
    cst_always = "always",
    cst_compare = "compare",
    cst_equal = "equal",
    cst_f = "f",
    cst_incremental$0 = "incremental",
    cst_never = "never",
    cst_phys_equal = "phys_equal",
    cst_src_cutoff_ml = "src/cutoff.ml",
    caml_string_compare = runtime.caml_string_compare,
    caml_string_notequal = runtime.caml_string_notequal;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    error_source_012 = "src/cutoff.ml.For_analyzer.t",
    Core_Sexp = global_data.Core__Sexp,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Core = global_data.Core,
    Base_Invariant = global_data.Base__Invariant,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incremental_Cutoff$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incremental$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_cutoff_ml);
   caml_call2(Ppx_inline_test_lib[6], cst_incremental$0, "cutoff.ml");
   var
    _i_ = [0, cst_Always],
    _j_ = [0, cst_Never],
    _k_ = [0, cst_Phys_equal],
    _l_ = [0, cst_Compare],
    _m_ = [0, cst_Equal],
    _n_ = [0, cst_F],
    _g_ = [0, "_"],
    _h_ = [0, cst_src_cutoff_ml, 17, 409, 431],
    _a_ = [0, cst_Always],
    _b_ = [0, cst_Never],
    _c_ = [0, cst_Phys_equal],
    _d_ = [0, cst_Compare],
    _e_ = [0, cst_Equal],
    _f_ = [0, cst_F],
    cst_incremental = cst_incremental$0,
    cst_Incremental_Cutoff = cst_Incremental_Cutoff$0;
   function sexp_of_t(of_a_001, param){
    if(typeof param === "number")
     switch(param){case 0: return _a_;case 1: return _b_;default: return _c_;}
    switch(param[0]){
      case 0:
       var
        _A_ = function(_F_){return 0;},
        res0_003 = caml_call1(Sexplib0_Sexp_conv[24], _A_);
       return [1, [0, _d_, [0, res0_003, 0]]];
      case 1:
       var
        _B_ = function(_E_){return 0;},
        res0_005 = caml_call1(Sexplib0_Sexp_conv[24], _B_);
       return [1, [0, _e_, [0, res0_005, 0]]];
      default:
       var
        _C_ = function(_D_){return 0;},
        res0_007 = caml_call1(Sexplib0_Sexp_conv[24], _C_);
       return [1, [0, _f_, [0, res0_007, 0]]];
    }
   }
   function invariant(param, t){
    function _y_(param){return 0;}
    function _z_(x_009){
     return sexp_of_t(function(param){return _g_;}, x_009);
    }
    return caml_call4(Base_Invariant[1], _h_, t, _z_, _y_);
   }
   function create(f){return [2, f];}
   function of_compare(f){return [0, f];}
   function of_equal(f){return [1, f];}
   var poly_equal = [1, runtime.caml_equal], never = 1, always = 0;
   function should_cutoff(t, old_value, new_value){
    if(typeof t === "number")
     switch(t){
       case 0:
        return 1;
       case 1:
        return 0;
       default: return old_value === new_value ? 1 : 0;
     }
    switch(t[0]){
      case 0:
       var f = t[1], _x_ = caml_call2(f, old_value, new_value);
       return caml_call2(Core[90], _x_, 0);
      case 1:
       var f$0 = t[1]; return caml_call2(f$0, old_value, new_value);
      default: var f$1 = t[1]; return caml_call2(f$1, old_value, new_value);
    }
   }
   function equal(t1, t2){
    if(typeof t1 === "number")
     switch(t1){
       case 0:
        if(typeof t2 === "number" && ! t2) return 1; return 0;
       case 1:
        if(typeof t2 === "number" && 1 === t2) return 1; return 0;
       default: if(typeof t2 === "number" && 2 <= t2) return 1; return 0;
     }
    switch(t1[0]){
      case 0:
       var f1 = t1[1];
       if(typeof t2 !== "number" && 0 === t2[0]){
        var f2 = t2[1];
        return f1 === f2 ? 1 : 0;
       }
       return 0;
      case 1:
       var f1$0 = t1[1];
       if(typeof t2 !== "number" && 1 === t2[0]){
        var f2$0 = t2[1];
        return f1$0 === f2$0 ? 1 : 0;
       }
       return 0;
      default:
       var f1$1 = t1[1];
       if(typeof t2 !== "number" && 2 === t2[0]){
        var f2$1 = t2[1];
        return f1$1 === f2$1 ? 1 : 0;
       }
       return 0;
    }
   }
   var phys_equal = 2;
   function t_of_sexp(sexp_013){
    a:
    {
     if(0 === sexp_013[0]){
      var _r_ = sexp_013[1], _s_ = caml_string_compare(_r_, cst_always);
      b:
      {
       c:
       {
        d:
        {
         e:
         {
          f:
          {
           if(0 <= _s_){
            if(0 < _s_){
             if(! caml_string_notequal(_r_, cst_compare)) break f;
             if(! caml_string_notequal(_r_, cst_equal)) break e;
             if(! caml_string_notequal(_r_, cst_f)) break d;
             if(! caml_string_notequal(_r_, cst_never)) break c;
             if(caml_string_notequal(_r_, cst_phys_equal)) break a;
             break b;
            }
           }
           else if(caml_string_notequal(_r_, cst_Always)){
            if(! caml_string_notequal(_r_, cst_Compare)) break f;
            if(! caml_string_notequal(_r_, cst_Equal)) break e;
            if(! caml_string_notequal(_r_, cst_F)) break d;
            if(! caml_string_notequal(_r_, cst_Never)) break c;
            if(caml_string_notequal(_r_, cst_Phys_equal)) break a;
            break b;
           }
           return 0;
          }
          return 3;
         }
         return 4;
        }
        return 5;
       }
       return 1;
      }
      return 2;
     }
     var _t_ = sexp_013[1];
     if(! _t_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_012, sexp_013);
     var _u_ = _t_[1];
     if(0 !== _u_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_012, sexp_013);
     var _v_ = _u_[1], _w_ = caml_string_compare(_v_, cst_always);
     b:
     {
      c:
      {
       d:
       {
        e:
        {
         f:
         {
          if(0 <= _w_){
           if(0 < _w_){
            if(! caml_string_notequal(_v_, cst_compare)) break f;
            if(! caml_string_notequal(_v_, cst_equal)) break e;
            if(! caml_string_notequal(_v_, cst_f)) break d;
            if(! caml_string_notequal(_v_, cst_never)) break c;
            if(caml_string_notequal(_v_, cst_phys_equal)) break a;
            break b;
           }
          }
          else if(caml_string_notequal(_v_, cst_Always)){
           if(! caml_string_notequal(_v_, cst_Compare)) break f;
           if(! caml_string_notequal(_v_, cst_Equal)) break e;
           if(! caml_string_notequal(_v_, cst_F)) break d;
           if(! caml_string_notequal(_v_, cst_Never)) break c;
           if(caml_string_notequal(_v_, cst_Phys_equal)) break a;
           break b;
          }
          return caml_call2
                  (Sexplib0_Sexp_conv_error[7], error_source_012, sexp_013);
         }
         return caml_call2
                 (Sexplib0_Sexp_conv_error[7], error_source_012, sexp_013);
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[7], error_source_012, sexp_013);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[7], error_source_012, sexp_013);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_012, sexp_013);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[7], error_source_012, sexp_013);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_012, sexp_013);
   }
   function sexp_of_t$0(param){
    switch(param){
      case 0:
       return _i_;
      case 1:
       return _j_;
      case 2:
       return _k_;
      case 3:
       return _l_;
      case 4:
       return _m_;
      default: return _n_;
    }
   }
   function equal$0(_q_, _p_){return _q_ === _p_ ? 1 : 0;}
   function of_cutoff(c){
    if(typeof c === "number")
     switch(c){case 0: return 0;case 1: return 1;default: return 2;}
    switch(c[0]){case 0: return 3;case 1: return 4;default: return 5;
    }
   }
   function to_string(t){
    var _o_ = sexp_of_t$0(t);
    return caml_call1(Core_Sexp[86], _o_);
   }
   var
    For_analyzer = [0, t_of_sexp, sexp_of_t$0, equal$0, of_cutoff, to_string];
   caml_call1(Ppx_inline_test_lib[7], cst_incremental);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incremental_Cutoff);
   var
    Incremental_Cutoff =
      [0,
       sexp_of_t,
       invariant,
       create,
       of_compare,
       of_equal,
       always,
       never,
       phys_equal,
       poly_equal,
       equal,
       should_cutoff,
       For_analyzer];
   runtime.caml_register_global
    (55, Incremental_Cutoff, cst_Incremental_Cutoff$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incremental__Dot_user_info
//# unitInfo: Requires: Core, Core__Info, Core__List, Core__Map, Core__Set, Core__String, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv_error, Sexplib0__Sexp_conv_record
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$11 = '"',
    cst_Append = "Append",
    cst_Dot = "Dot",
    cst_Incremental_Dot_user_info$0 = "Incremental__Dot_user_info",
    cst_Info = "Info",
    cst_append = "append",
    cst_attributes$0 = "attributes",
    cst_dot = "dot",
    cst_incremental$0 = "incremental",
    cst_info = "info",
    cst_label$0 = "label",
    cst_new$0 = "new_",
    cst_prior$0 = "prior",
    cst$9 = "{",
    cst$10 = "|",
    cst$8 = "}",
    caml_string_notequal = runtime.caml_string_notequal;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$6 = cst$8,
    cst$7 = cst$9,
    cst$4 = cst$8,
    cst$5 = cst$9,
    cst$3 = "\\",
    cst = cst$11,
    cst$0 = '\\"',
    cst$1 = cst$11,
    cst$2 = cst$11,
    error_source_009 = "src/dot_user_info.ml.dot",
    error_source_018 = "src/dot_user_info.ml.t",
    Core_String = global_data.Core__String,
    Core_Info = global_data.Core__Info,
    Core_Set = global_data.Core__Set,
    Core_Map = global_data.Core__Map,
    Core = global_data.Core,
    Core_List = global_data.Core__List,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Sexplib0_Sexp_conv_record = global_data.Sexplib0__Sexp_conv_record,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incremental_Dot_user_info$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incremental$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/dot_user_info.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_incremental$0, "dot_user_info.ml");
   var
    _j_ = [0, [12, 32, [2, 0, [12, 61, [2, 0, 0]]]], " %s=%s"],
    _h_ = [0, cst$10],
    cst_Mrecord = "Mrecord",
    _i_ = [0, cst$10],
    _k_ = [0, " "],
    _l_ =
      [0,
       [11,
        "  ",
        [2,
         0,
         [11,
          " [shape=",
          [2, 0, [11, " label=", [2, 0, [12, 32, [2, 0, [12, 93, 0]]]]]]]]],
       "  %s [shape=%s label=%s %s]"],
    _c_ = [0, cst_Dot],
    _d_ = [0, cst_Info],
    _e_ = [0, cst_new$0],
    _f_ = [0, cst_prior$0],
    _g_ = [0, cst_Append],
    cst_new = cst_new$0,
    cst_prior = cst_prior$0,
    _a_ = [0, cst_attributes$0],
    _b_ = [0, cst_label$0],
    cst_attributes = cst_attributes$0,
    cst_label = cst_label$0,
    cst_incremental = cst_incremental$0,
    cst_Incremental_Dot_user_info = cst_Incremental_Dot_user_info$0;
   function t_of_sexp(x_006){return caml_call2(Core[473], Core[559], x_006);}
   function sexp_of_t(x_007){return caml_call2(Core[472], Core[558], x_007);}
   var comparator = caml_call1(Core_List[171], Core_String[158]);
   function dot_of_sexp(x_010){
    function _P_(param){
     var attributes = param[2][1], label = param[1];
     return [0, label, attributes];
    }
    var _Q_ = 0;
    function _R_(param){
     return caml_string_notequal(param, cst_attributes$0)
             ? caml_string_notequal(param, cst_label$0) ? -1 : 0
             : 1;
    }
    var
     _S_ =
       [0, cst_attributes, 1, caml_call1(Core_String[159][44], Core[559]), 0],
     _T_ =
       [0,
        cst_label,
        1,
        caml_call1(Core_Set[86], [0, t_of_sexp, comparator]),
        _S_];
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_009,
             _T_,
             _R_,
             _Q_,
             _P_,
             x_010);
   }
   function sexp_of_dot(param){
    var
     attributes_014 = param[2],
     label_012 = param[1],
     arg_015 = caml_call2(Core_String[159][45], Core[558], attributes_014),
     bnds_011 = [0, [1, [0, _a_, [0, arg_015, 0]]], 0],
     arg_013 = caml_call2(Core_Set[85], [0, sexp_of_t], label_012),
     bnds_011$0 = [0, [1, [0, _b_, [0, arg_013, 0]]], bnds_011];
    return [1, bnds_011$0];
   }
   var t_of_sexp$0 = function _O_(_N_){return _O_.fun(_N_);};
   runtime.caml_update_dummy
    (t_of_sexp$0,
     function(sexp_020){
      a:
      {
       if(0 === sexp_020[0]){
        var _H_ = sexp_020[1];
        b:
        if(caml_string_notequal(_H_, cst_Append)){
         c:
         if(caml_string_notequal(_H_, cst_Dot)){
          if(caml_string_notequal(_H_, cst_Info)){
           if(! caml_string_notequal(_H_, cst_append)) break b;
           if(! caml_string_notequal(_H_, cst_dot)) break c;
           if(caml_string_notequal(_H_, cst_info)) break a;
          }
          return caml_call2
                  (Sexplib0_Sexp_conv_error[9], error_source_018, sexp_020);
         }
         return caml_call2
                 (Sexplib0_Sexp_conv_error[9], error_source_018, sexp_020);
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[9], error_source_018, sexp_020);
       }
       var _I_ = sexp_020[1];
       if(! _I_)
        return caml_call2
                (Sexplib0_Sexp_conv_error[11], error_source_018, sexp_020);
       var _J_ = _I_[1];
       if(0 !== _J_[0])
        return caml_call2
                (Sexplib0_Sexp_conv_error[10], error_source_018, sexp_020);
       var tag_021 = _J_[1];
       b:
       if(caml_string_notequal(tag_021, cst_Append)){
        c:
        if(caml_string_notequal(tag_021, cst_Dot)){
         if(caml_string_notequal(tag_021, cst_Info)){
          if(! caml_string_notequal(tag_021, cst_append)) break b;
          if(! caml_string_notequal(tag_021, cst_dot)) break c;
          if(caml_string_notequal(tag_021, cst_info)) break a;
         }
         var sexp_args_027 = _I_[2];
         if(sexp_args_027 && ! sexp_args_027[2]){
          var
           arg0_028 = sexp_args_027[1],
           res0_029 = caml_call1(Core_Info[8], arg0_028);
          return [1, res0_029];
         }
         return caml_call3
                 (Sexplib0_Sexp_conv_error[8],
                  error_source_018,
                  tag_021,
                  sexp_020);
        }
        var sexp_args_022 = _I_[2];
        if(sexp_args_022 && ! sexp_args_022[2]){
         var arg0_023 = sexp_args_022[1], res0_024 = dot_of_sexp(arg0_023);
         return [0, res0_024];
        }
        return caml_call3
                (Sexplib0_Sexp_conv_error[8],
                 error_source_018,
                 tag_021,
                 sexp_020);
       }
       var
        sexps_031 = _I_[2],
        _K_ =
          function(param){
           var new$0 = param[2][1], prior = param[1];
           return [2, prior, new$0];
          },
        _L_ = 0,
        _M_ =
          function(param){
           return caml_string_notequal(param, cst_new$0)
                   ? caml_string_notequal(param, cst_prior$0) ? -1 : 0
                   : 1;
          };
       return caml_call7
               (Sexplib0_Sexp_conv_record[4],
                error_source_018,
                sexp_020,
                [0,
                 cst_prior,
                 1,
                 t_of_sexp$0,
                 [0, cst_new, 1, t_of_sexp$0, 0]],
                _M_,
                _L_,
                _K_,
                sexps_031);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[12], error_source_018, sexp_020);
     });
   function sexp_of_t$0(param){
    switch(param[0]){
      case 0:
       var arg0_032 = param[1], res0_033 = sexp_of_dot(arg0_032);
       return [1, [0, _c_, [0, res0_033, 0]]];
      case 1:
       var arg0_034 = param[1], res0_035 = caml_call1(Core_Info[9], arg0_034);
       return [1, [0, _d_, [0, res0_035, 0]]];
      default:
       var
        new_039 = param[2],
        prior_037 = param[1],
        arg_040 = sexp_of_t$0(new_039),
        bnds_036 = [0, [1, [0, _e_, [0, arg_040, 0]]], 0],
        arg_038 = sexp_of_t$0(prior_037),
        bnds_036$0 = [0, [1, [0, _f_, [0, arg_038, 0]]], bnds_036];
       return [1, [0, _g_, bnds_036$0]];
    }
   }
   function info(info){return [1, info];}
   function append(prior, new$0){return [2, prior, new$0];}
   function dot(label, attributes){
    var label$0 = caml_call2(Core_Set[8], [0, comparator], label);
    return [0, [0, label$0, attributes]];
   }
   function to_dot(param){
    switch(param[0]){
      case 0:
       var dot = param[1]; return dot;
      case 1:
       var
        i = param[1],
        _E_ = Core_String[159][5],
        _F_ = [0, caml_call1(Core_Info[12], i), 0];
       return [0, caml_call2(Core_Set[8], [0, comparator], _F_), _E_];
      default:
       var
        new$0 = param[2],
        prior = param[1],
        prior$0 = to_dot(prior),
        new$1 = to_dot(new$0),
        label = caml_call2(Core_Set[14], prior$0[1], new$1[1]),
        _G_ = function(param, left, right){return right;},
        attributes = caml_call3(Core_Map[86], prior$0[2], new$1[2], _G_);
       return [0, label, attributes];
    }
   }
   function escape_dot_string(s){
    var
     _C_ = caml_call3(Core_String[67], s, cst$1, cst$0),
     _D_ = caml_call2(Core[18], _C_, cst);
    return caml_call2(Core[18], cst$2, _D_);
   }
   function escape_record_label(s){
    function _z_(c){
     a:
     {
      if(62 <= c){
       var _A_ = c - 63 | 0;
       if(59 < _A_ >>> 0){if(63 <= _A_) break a;} else if(29 !== _A_) break a;
      }
      else if(32 !== c && 60 !== c) break a;
      var _B_ = caml_call1(Core_String[111], c);
      return caml_call2(Core[18], cst$3, _B_);
     }
     return caml_call1(Core_String[111], c);
    }
    return caml_call3(Core_String[86], 0, s, _z_);
   }
   function to_string(opt, name, param){
    if(opt) var sth = opt[1], shape = sth; else var shape = cst_Mrecord;
    var attributes = param[2], label = param[1];
    function _m_(cols){
     var
      _w_ = caml_call2(Core_List[51], cols, escape_record_label),
      _x_ = caml_call2(Core_String[46], _h_, _w_),
      _y_ = caml_call2(Core[18], _x_, cst$4);
     return caml_call2(Core[18], cst$5, _y_);
    }
    var
     _n_ = caml_call1(Core_Set[39], label),
     _o_ = caml_call2(Core_List[51], _n_, _m_),
     s = caml_call2(Core_String[46], _i_, _o_),
     _p_ = caml_call2(Core[18], s, cst$6),
     label$0 = caml_call2(Core[18], cst$7, _p_);
    function _q_(param){
     var
      v = param[2],
      k = param[1],
      _u_ = escape_dot_string(v),
      _v_ = escape_dot_string(k);
     return caml_call3(Core[265], _j_, _v_, _u_);
    }
    var
     _r_ = caml_call2(Core_Map[81], 0, attributes),
     _s_ = caml_call2(Core_List[51], _r_, _q_),
     attributes$0 = caml_call2(Core_String[46], _k_, _s_),
     _t_ = escape_dot_string(label$0);
    return caml_call5(Core[265], _l_, name, shape, _t_, attributes$0);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_incremental);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incremental_Dot_user_info);
   var
    Incremental_Dot_user_info =
      [0,
       sexp_of_dot,
       dot_of_sexp,
       t_of_sexp$0,
       sexp_of_t$0,
       info,
       dot,
       to_dot,
       append,
       to_string];
   runtime.caml_register_global
    (63, Incremental_Dot_user_info, cst_Incremental_Dot_user_info$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incremental__Node_id
//# unitInfo: Requires: Core__Int, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Incremental_Node_id$0 = "Incremental__Node_id",
    cst_incremental$0 = "incremental",
    cst_src_node_id_ml = "src/node_id.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Assert_failure = global_data.Assert_failure,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Core_Int = global_data.Core__Int;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incremental_Node_id$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incremental$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_node_id_ml);
   caml_call2(Ppx_inline_test_lib[6], cst_incremental$0, "node_id.ml");
   var
    incr = Core_Int[36],
    sexp_of_t = Core_Int[77],
    to_string = Core_Int[79],
    symbol = Core_Int[81],
    compare = Core_Int[88],
    hash_fold_t = Core_Int[100],
    hash = Core_Int[101],
    hashable = Core_Int[102],
    Table = Core_Int[103],
    Hash_set = Core_Int[104],
    Hash_queue = Core_Int[105],
    _a_ = [0, cst_src_node_id_ml, 5, 18],
    cst_incremental = cst_incremental$0,
    cst_Incremental_Node_id = cst_Incremental_Node_id$0;
   function invariant(t){
    if(caml_call2(symbol, t, 1)) return 0;
    throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
   }
   var r = [0, 0];
   function next(param){caml_call1(incr, r); return r[1];}
   caml_call1(Ppx_inline_test_lib[7], cst_incremental);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incremental_Node_id);
   var
    Incremental_Node_id =
      [0,
       sexp_of_t,
       compare,
       hash_fold_t,
       hash,
       hashable,
       [0,
        Table[1],
        Table[2],
        Table[3],
        Table[4],
        Table[5],
        Table[6],
        Table[7],
        Table[8],
        Table[9],
        Table[10],
        Table[11],
        Table[12],
        Table[13],
        Table[14],
        Table[15],
        Table[16],
        Table[17],
        Table[18]],
       [0,
        Hash_set[1],
        Hash_set[2],
        Hash_set[3],
        Hash_set[4],
        Hash_set[5],
        Hash_set[6],
        Hash_set[7]],
       Hash_queue,
       invariant,
       next,
       to_string];
   runtime.caml_register_global
    (14, Incremental_Node_id, cst_Incremental_Node_id$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incremental__Stabilization_num
//# unitInfo: Requires: Core__Int, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Incremental_Stabilization_$0 = "Incremental__Stabilization_num",
    cst_incremental$0 = "incremental",
    cst_src_stabilization_num_ml = "src/stabilization_num.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Assert_failure = global_data.Assert_failure,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Core_Int = global_data.Core__Int;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incremental_Stabilization_$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incremental$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_stabilization_num_ml);
   caml_call2
    (Ppx_inline_test_lib[6], cst_incremental$0, "stabilization_num.ml");
   var
    zero = Core_Int[59],
    to_int = Core_Int[65],
    sexp_of_t = Core_Int[77],
    symbol = Core_Int[81],
    symbol$0 = Core_Int[83],
    equal = Core_Int[87],
    compare = Core_Int[88],
    _a_ = [0, cst_src_stabilization_num_ml, 5, 18],
    cst_incremental = cst_incremental$0,
    cst_Incremental_Stabilization_ = cst_Incremental_Stabilization_$0;
   function invariant(t){
    if(caml_call2(symbol, t, -1)) return 0;
    throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
   }
   var none = -1;
   function is_none(t){return caml_call2(symbol$0, t, none);}
   function is_some(t){return caml_call2(symbol, t, 0);}
   function add1(t){return t + 1 | 0;}
   caml_call1(Ppx_inline_test_lib[7], cst_incremental);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incremental_Stabilization_);
   var
    _b_ = Core_Int[99],
    _c_ = _b_[2],
    _d_ = _b_[1],
    _e_ = Core_Int[98],
    _f_ = _e_[2],
    _g_ = _e_[1],
    Incremental_Stabilization_num =
      [0,
       compare,
       sexp_of_t,
       equal,
       invariant,
       none,
       zero,
       is_none,
       is_some,
       add1,
       to_int,
       [0,
        Core_Int[76],
        Core_Int[77],
        Core_Int[81],
        Core_Int[82],
        Core_Int[83],
        Core_Int[84],
        Core_Int[85],
        Core_Int[86],
        Core_Int[87],
        Core_Int[88],
        Core_Int[89],
        Core_Int[90],
        Core_Int[91],
        Core_Int[92],
        Core_Int[93],
        Core_Int[94],
        Core_Int[95],
        Core_Int[97],
        Core_Int[106],
        Core_Int[107],
        Core_Int[108],
        Core_Int[96],
        [0,
         [0, _g_[9], _g_[10], _g_[11]],
         [0, _f_[9], _f_[10], _f_[11], _f_[12], _f_[13]],
         _e_[3],
         _e_[4],
         _e_[5],
         _e_[6],
         _e_[7],
         _e_[8],
         _e_[9],
         _e_[10],
         _e_[11],
         _e_[12],
         _e_[13],
         _e_[14],
         _e_[15],
         _e_[16],
         _e_[17],
         _e_[18],
         _e_[19],
         _e_[20],
         _e_[21],
         _e_[22],
         _e_[23],
         _e_[24],
         _e_[25],
         _e_[26],
         _e_[27],
         _e_[28],
         _e_[29],
         _e_[30],
         _e_[31],
         _e_[32],
         _e_[33],
         _e_[34],
         _e_[35],
         _e_[36],
         _e_[37],
         _e_[38],
         _e_[39],
         _e_[40],
         _e_[41],
         _e_[42],
         _e_[43],
         _e_[44],
         _e_[45]],
        [0,
         [0, _d_[1], _d_[2], _d_[11]],
         [0, _c_[9], _c_[10], _c_[11], _c_[12], _c_[13]],
         _b_[3],
         _b_[4],
         _b_[5],
         _b_[6],
         _b_[7],
         _b_[8],
         _b_[9],
         _b_[10],
         _b_[11],
         _b_[12],
         _b_[13],
         _b_[14],
         _b_[15],
         _b_[16],
         _b_[17],
         _b_[18],
         _b_[19],
         _b_[20],
         _b_[21],
         _b_[22],
         _b_[23],
         _b_[24],
         _b_[25],
         _b_[26],
         _b_[27],
         _b_[28]],
        Core_Int[79]]];
   runtime.caml_register_global
    (14, Incremental_Stabilization_num, cst_Incremental_Stabilization_$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incremental__On_update_handler
//# unitInfo: Requires: Core, Incremental__Stabilization_num, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Changed = "Changed",
    cst_Incremental_On_update_hand$0 = "Incremental__On_update_handler",
    cst_Invalidated = "Invalidated",
    cst_Necessary = "Necessary",
    cst_Unnecessary = "Unnecessary",
    cst_incremental$0 = "incremental";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Incremental_Stabilization_num = global_data.Incremental__Stabilization_num,
    Core = global_data.Core,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incremental_On_update_hand$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incremental$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/on_update_handler.ml");
   caml_call2
    (Ppx_inline_test_lib[6], cst_incremental$0, "on_update_handler.ml");
   var
    _j_ = [0, "created_at"],
    _k_ = [0, "previous_update_kind"],
    _l_ = [0, "f"],
    _f_ = [0, cst_Invalidated],
    _g_ = [0, cst_Unnecessary],
    _h_ = [0, cst_Necessary],
    _i_ = [0, cst_Changed],
    _a_ = [0, "Never_been_updated"],
    _b_ = [0, cst_Necessary],
    _c_ = [0, cst_Changed],
    _d_ = [0, cst_Invalidated],
    _e_ = [0, cst_Unnecessary],
    cst_incremental = cst_incremental$0,
    cst_Incremental_On_update_hand = cst_Incremental_On_update_hand$0;
   function compare(cmp_a, a_001, b_002){
    if(a_001 === b_002) return 0;
    a:
    {
     if(typeof a_001 === "number"){
      if(0 === a_001){
       if(typeof b_002 === "number") return 0 === b_002 ? 0 : -1;
       if(0 === b_002[0]) break a;
      }
      else{
       if(typeof b_002 === "number") return 0 === b_002 ? 1 : 0;
       if(0 === b_002[0]) break a;
      }
      return 1;
     }
     if(0 === a_001[0]){
      var a_003 = a_001[1];
      if(typeof b_002 !== "number" && 0 === b_002[0]){
       var b_004 = b_002[1];
       return caml_call2(cmp_a, a_003, b_004);
      }
      return -1;
     }
     var a_007 = a_001[2], a_005 = a_001[1];
     if(typeof b_002 === "number") return -1;
     if(0 !== b_002[0]){
      var
       b_008 = b_002[2],
       b_006 = b_002[1],
       n = caml_call2(cmp_a, a_005, b_006);
      return 0 === n ? caml_call2(cmp_a, a_007, b_008) : n;
     }
    }
    return 1;
   }
   function sexp_of_t(of_a_009, param){
    if(typeof param === "number") return 0 === param ? _f_ : _g_;
    if(0 === param[0]){
     var arg0_010 = param[1], res0_011 = caml_call1(of_a_009, arg0_010);
     return [1, [0, _h_, [0, res0_011, 0]]];
    }
    var
     arg1_013 = param[2],
     arg0_012 = param[1],
     res0_014 = caml_call1(of_a_009, arg0_012),
     res1_015 = caml_call1(of_a_009, arg1_013);
    return [1, [0, _i_, [0, res0_014, [0, res1_015, 0]]]];
   }
   var Node_update = [0, compare, sexp_of_t];
   function sexp_of_t$0(of_a_017, param){
    var
     previous_update_kind_021 = param[2],
     created_at_023 = param[3],
     arg_024 = caml_call1(Incremental_Stabilization_num[2], created_at_023),
     bnds_018 = [0, [1, [0, _j_, [0, arg_024, 0]]], 0];
    switch(previous_update_kind_021){
      case 0:
       var arg_022 = _a_; break;
      case 1:
       var arg_022 = _b_; break;
      case 2:
       var arg_022 = _c_; break;
      case 3:
       var arg_022 = _d_; break;
      default: var arg_022 = _e_;
    }
    var bnds_018$0 = [0, [1, [0, _k_, [0, arg_022, 0]]], bnds_018];
    function _p_(_q_){return 0;}
    var
     arg_020 = caml_call1(Sexplib0_Sexp_conv[24], _p_),
     bnds_018$1 = [0, [1, [0, _l_, [0, arg_020, 0]]], bnds_018$0];
    return [1, bnds_018$1];
   }
   function create(f, created_at){return [0, f, 0, created_at];}
   function really_run(t, node_update){
    var
     _o_ =
       typeof node_update === "number"
        ? 0 === node_update ? 3 : 4
        : 0 === node_update[0] ? 1 : 2;
    t[2] = _o_;
    return caml_call1(t[1], node_update);
   }
   function run(t, node_update, now){
    var
     _m_ = caml_call2(Incremental_Stabilization_num[1], t[3], now),
     _n_ = caml_call2(Core[92], _m_, 0);
    if(! _n_) return _n_;
    a:
    {
     b:
     {
      switch(t[2]){
        case 0:
         if(typeof node_update === "number") break a;
         if(1 === node_update[0]) break b;
         break a;
        case 1:
         if(typeof node_update === "number" || 0 !== node_update[0]) break a;
         break;
        case 2:
         if(typeof node_update === "number" || 0 !== node_update[0]) break a;
         break;
        case 3:
         return 0;
        default:
         if(typeof node_update !== "number"){
          if(1 === node_update[0]) break b;
          break a;
         }
         if(1 !== node_update) break a;
      }
      return 0;
     }
     var a = node_update[2];
     return really_run(t, [0, a]);
    }
    return really_run(t, node_update);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_incremental);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incremental_On_update_hand);
   var
    Incremental_On_update_handler = [0, Node_update, sexp_of_t$0, create, run];
   runtime.caml_register_global
    (26, Incremental_On_update_handler, cst_Incremental_On_update_hand$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incremental__Raised_exn
//# unitInfo: Requires: Base__Backtrace, Base__Exn, Core, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Incremental_Raised_exn$0 = "Incremental__Raised_exn",
    cst_incremental$0 = "incremental";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_Exn = global_data.Base__Exn,
    Base_Backtrace = global_data.Base__Backtrace,
    Core = global_data.Core,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incremental_Raised_exn$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incremental$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/raised_exn.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_incremental$0, "raised_exn.ml");
   var
    _a_ = [0, "backtrace"],
    _b_ = [0, "exn"],
    cst_incremental = cst_incremental$0,
    cst_Incremental_Raised_exn = cst_Incremental_Raised_exn$0;
   function sexp_of_t(param){
    var
     backtrace_004 = param[2],
     exn_002 = param[1],
     arg_005 = caml_call1(Base_Backtrace[1], backtrace_004),
     bnds_001 = [0, [1, [0, _a_, [0, arg_005, 0]]], 0],
     arg_003 = caml_call1(Core[625], exn_002),
     bnds_001$0 = [0, [1, [0, _b_, [0, arg_003, 0]]], bnds_001];
    return [1, bnds_001$0];
   }
   function create(exn){return [0, exn, caml_call1(Base_Backtrace[6][4], 0)];}
   function reraise_with_message(param, msg){
    var backtrace = param[2], exn = param[1];
    return caml_call2(Base_Exn[7], [0, Base_Exn[4], msg, exn], backtrace);
   }
   function reraise(param){
    var backtrace = param[2], exn = param[1];
    return caml_call2(Base_Exn[7], exn, backtrace);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_incremental);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incremental_Raised_exn);
   var
    Incremental_Raised_exn =
      [0, sexp_of_t, create, reraise, reraise_with_message];
   runtime.caml_register_global
    (16, Incremental_Raised_exn, cst_Incremental_Raised_exn$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incremental__Types
//# unitInfo: Requires: CamlinternalMod, Core, Incremental__Import, Incremental__Node_id, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Incremental_Types$0 = "Incremental__Types",
    cst = "_",
    cst_incremental$0 = "incremental",
    cst_src_types_ml = "src/types.ml";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Core = global_data.Core,
    Incremental_Import = global_data.Incremental__Import,
    Incremental_Node_id = global_data.Incremental__Node_id,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    CamlinternalMod = global_data.CamlinternalMod;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incremental_Types$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incremental$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_types_ml);
   caml_call2(Ppx_inline_test_lib[6], cst_incremental$0, "types.ml");
   var
    Adjust_heights_heap =
      caml_call2(CamlinternalMod[1], [0, cst_src_types_ml, 22, 2], [0, [0]]),
    Alarm =
      caml_call2(CamlinternalMod[1], [0, cst_src_types_ml, 27, 2], [0, [0]]),
    Alarm_value =
      caml_call2
       (CamlinternalMod[1], [0, cst_src_types_ml, 43, 2], [0, [0, [0, [0]]]]),
    Array_fold =
      caml_call2(CamlinternalMod[1], [0, cst_src_types_ml, 52, 2], [0, [0]]),
    At =
      caml_call2(CamlinternalMod[1], [0, cst_src_types_ml, 62, 2], [0, [0]]),
    At_intervals =
      caml_call2(CamlinternalMod[1], [0, cst_src_types_ml, 73, 2], [0, [0]]),
    Bind =
      caml_call2(CamlinternalMod[1], [0, cst_src_types_ml, 86, 2], [0, [0]]),
    Clock =
      caml_call2(CamlinternalMod[1], [0, cst_src_types_ml, 96, 2], [0, [0]]),
    Expert =
      caml_call2(CamlinternalMod[1], [0, cst_src_types_ml, 117, 2], [0, [0]]),
    Freeze =
      caml_call2(CamlinternalMod[1], [0, cst_src_types_ml, 126, 2], [0, [0]]),
    If_then_else =
      caml_call2(CamlinternalMod[1], [0, cst_src_types_ml, 138, 2], [0, [0]]),
    Internal_observer =
      caml_call2
       (CamlinternalMod[1],
        [0, cst_src_types_ml, 165, 2],
        [0, [0, [0, [0]], [0, [0]]]]),
    Join =
      caml_call2(CamlinternalMod[1], [0, cst_src_types_ml, 175, 2], [0, [0]]),
    Kind =
      caml_call2(CamlinternalMod[1], [0, cst_src_types_ml, 416, 2], [0, [0]]),
    Node =
      caml_call2
       (CamlinternalMod[1],
        [0, cst_src_types_ml, 459, 6],
        [0, [0, 0, [0, [0, 0]], 0, 0, 0]]),
    Observer =
      caml_call2(CamlinternalMod[1], [0, cst_src_types_ml, 518, 2], [0, [0]]),
    Only_in_debug =
      caml_call2(CamlinternalMod[1], [0, cst_src_types_ml, 526, 2], [0, [0]]),
    Packed_weak_hashtbl =
      caml_call2(CamlinternalMod[1], [0, cst_src_types_ml, 531, 2], [0, [0]]),
    Recompute_heap =
      caml_call2(CamlinternalMod[1], [0, cst_src_types_ml, 540, 2], [0, [0]]),
    Run_on_update_handlers =
      caml_call2(CamlinternalMod[1], [0, cst_src_types_ml, 545, 2], [0, [0]]),
    Scope =
      caml_call2
       (CamlinternalMod[1], [0, cst_src_types_ml, 552, 6], [0, [0, 0]]),
    Snapshot =
      caml_call2(CamlinternalMod[1], [0, cst_src_types_ml, 572, 2], [0, [0]]),
    State =
      caml_call2(CamlinternalMod[1], [0, cst_src_types_ml, 605, 2], [0, [0]]),
    Status =
      caml_call2(CamlinternalMod[1], [0, cst_src_types_ml, 614, 2], [0, [0]]),
    Step_function_node =
      caml_call2(CamlinternalMod[1], [0, cst_src_types_ml, 628, 2], [0, [0]]),
    Unordered_array_fold =
      caml_call2(CamlinternalMod[1], [0, cst_src_types_ml, 642, 2], [0, [0]]),
    Var =
      caml_call2
       (CamlinternalMod[1], [0, cst_src_types_ml, 658, 2], [0, [0, [0, [0]]]]);
   caml_call3
    (CamlinternalMod[2], [0, [0]], Adjust_heights_heap, Adjust_heights_heap);
   caml_call3(CamlinternalMod[2], [0, [0]], Alarm, Alarm);
   caml_call3
    (CamlinternalMod[2], [0, [0, [0, [0]]]], Alarm_value, Alarm_value);
   caml_call3(CamlinternalMod[2], [0, [0]], Array_fold, Array_fold);
   caml_call3(CamlinternalMod[2], [0, [0]], At, At);
   caml_call3(CamlinternalMod[2], [0, [0]], At_intervals, At_intervals);
   caml_call3(CamlinternalMod[2], [0, [0]], Bind, Bind);
   caml_call3(CamlinternalMod[2], [0, [0]], Clock, Clock);
   caml_call3(CamlinternalMod[2], [0, [0]], Expert, Expert);
   caml_call3(CamlinternalMod[2], [0, [0]], Freeze, Freeze);
   caml_call3(CamlinternalMod[2], [0, [0]], If_then_else, If_then_else);
   caml_call3
    (CamlinternalMod[2],
     [0, [0, [0, [0]], [0, [0]]]],
     Internal_observer,
     Internal_observer);
   caml_call3(CamlinternalMod[2], [0, [0]], Join, Join);
   caml_call3(CamlinternalMod[2], [0, [0]], Kind, Kind);
   var
    _h_ = [0, cst],
    cst_Top = "Top",
    _a_ = [0, cst],
    cst_n = "n",
    _b_ = [0, [0, 0, [0, [0, 0]], 0, 0, 0]],
    _c_ = [0, [0]],
    _d_ = [0, [0]],
    _e_ = [0, [0]],
    _f_ = [0, [0]],
    _g_ = [0, [0]],
    _i_ = [0, [0, 0]],
    _j_ = [0, [0]],
    _k_ = [0, [0]],
    _l_ = [0, [0]],
    _m_ = [0, [0]],
    _n_ = [0, [0]],
    _o_ = [0, [0, [0, [0]]]],
    cst_incremental = cst_incremental$0,
    cst_Incremental_Types = cst_Incremental_Types$0;
   function sexp_of_node(param, t){
    var
     _w_ = [0, cst_n, [0, caml_call1(Incremental_Node_id[11], t[1]), 0]],
     _x_ = caml_call2(Incremental_Import[2], 0, _w_);
    return caml_call1(Core[558], _x_);
   }
   function sexp_of_t(x_003){
    return sexp_of_node(function(param){return _a_;}, x_003);
   }
   function is_valid(t){
    var _v_ = t[5];
    if(typeof _v_ === "number" && ! _v_) return 0;
    return 1;
   }
   function is_necessary(t){
    var _q_ = caml_call2(Core[91], t[9], 0);
    if(_q_)
     var _r_ = _q_;
    else{
     var _s_ = caml_call1(Incremental_Import[6][8], t[21]);
     if(_s_)
      var _r_ = _s_;
     else{
      var _t_ = t[5];
      a:
      {
       if(typeof _t_ !== "number" && 7 === _t_[0]){var _u_ = 1; break a;}
       var _u_ = 0;
      }
      var _r_ = _u_ || t[26];
     }
    }
    return _r_;
   }
   function type_equal_if_phys_same(t1, t2){return t1 === t2 ? [0, 0] : 0;}
   caml_call3
    (CamlinternalMod[2],
     _b_,
     Node,
     [0,
      sexp_of_node,
      [0, sexp_of_t],
      is_valid,
      is_necessary,
      type_equal_if_phys_same]);
   caml_call3(CamlinternalMod[2], _c_, Observer, Observer);
   caml_call3(CamlinternalMod[2], _d_, Only_in_debug, Only_in_debug);
   caml_call3
    (CamlinternalMod[2], _e_, Packed_weak_hashtbl, Packed_weak_hashtbl);
   caml_call3(CamlinternalMod[2], _f_, Recompute_heap, Recompute_heap);
   caml_call3
    (CamlinternalMod[2], _g_, Run_on_update_handlers, Run_on_update_handlers);
   function sexp_of_t$0(param){
    if(! param) return caml_call1(Core[558], cst_Top);
    var bind = param[1], x_004 = bind[1];
    function _p_(param){return _h_;}
    return caml_call2(Node[1], _p_, x_004);
   }
   caml_call3(CamlinternalMod[2], _i_, Scope, [0, sexp_of_t$0]);
   caml_call3(CamlinternalMod[2], _j_, Snapshot, Snapshot);
   caml_call3(CamlinternalMod[2], _k_, State, State);
   caml_call3(CamlinternalMod[2], _l_, Status, Status);
   caml_call3(CamlinternalMod[2], _m_, Step_function_node, Step_function_node);
   caml_call3
    (CamlinternalMod[2], _n_, Unordered_array_fold, Unordered_array_fold);
   caml_call3(CamlinternalMod[2], _o_, Var, Var);
   caml_call1(Ppx_inline_test_lib[7], cst_incremental);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incremental_Types);
   var
    Incremental_Types =
      [0,
       Adjust_heights_heap,
       Alarm,
       Alarm_value,
       Array_fold,
       At,
       At_intervals,
       Bind,
       Clock,
       Expert,
       Freeze,
       If_then_else,
       Internal_observer,
       Join,
       Kind,
       Node,
       Observer,
       Only_in_debug,
       Packed_weak_hashtbl,
       Recompute_heap,
       Run_on_update_handlers,
       Scope,
       Snapshot,
       State,
       Status,
       Step_function_node,
       Unordered_array_fold,
       Var];
   runtime.caml_register_global
    (100, Incremental_Types, cst_Incremental_Types$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incremental__Var
//# unitInfo: Requires: Base__Invariant, Incremental__Import, Incremental__Stabilization_num, Incremental__Types, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Incremental_Var$0 = "Incremental__Var",
    cst = "_",
    cst_incremental$0 = "incremental",
    cst_set_at$0 = "set_at",
    cst_src_var_ml = "src/var.ml",
    cst_value$0 = "value",
    cst_value_set_during_stabiliza$0 = "value_set_during_stabilization",
    cst_watch$0 = "watch",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Incremental_Import = global_data.Incremental__Import,
    Assert_failure = global_data.Assert_failure,
    Base_Invariant = global_data.Base__Invariant,
    Incremental_Stabilization_num = global_data.Incremental__Stabilization_num,
    Incremental_Types = global_data.Incremental__Types,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incremental_Var$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incremental$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_var_ml);
   caml_call2(Ppx_inline_test_lib[6], cst_incremental$0, "var.ml");
   var
    _q_ = [0, cst],
    _r_ = [0, "T"],
    _o_ = [0, cst],
    _n_ = [0, cst_src_var_ml, 32, 23],
    _m_ = [0, cst_src_var_ml, 33, 18],
    _p_ = [0, cst_src_var_ml, 22, 929, 951],
    _i_ = [0, cst_watch$0],
    _j_ = [0, cst_set_at$0],
    _k_ = [0, cst_value_set_during_stabiliza$0],
    _l_ = [0, cst_value$0],
    cst_watch = cst_watch$0,
    cst_set_at = cst_set_at$0,
    cst_value_set_during_stabiliza = cst_value_set_during_stabiliza$0,
    cst_value = cst_value$0,
    cst_incremental = cst_incremental$0,
    cst_Incremental_Var = cst_Incremental_Var$0;
   function watch(r){return r[4];}
   function set_at(r){return r[3];}
   function set_set_at(r, v){r[3] = v; return 0;}
   function value_set_during_stabilization(r){return r[2];}
   function set_value_set_during_stabiliza(r, v){r[2] = v; return 0;}
   function value(r){return r[1];}
   function set_value(r, v){r[1] = v; return 0;}
   function _a_(r, v){return [0, r[1], r[2], r[3], v];}
   var
    _b_ = 0,
    watch$0 = [0, function(param){return 0;}, cst_watch, _b_, watch, _a_];
   function _c_(r, v){return [0, r[1], r[2], v, r[4]];}
   var
    _d_ = [0, set_set_at],
    set_at$0 = [0, function(param){return 0;}, cst_set_at, _d_, set_at, _c_];
   function _e_(r, v){return [0, r[1], v, r[3], r[4]];}
   var
    _f_ = [0, set_value_set_during_stabiliza],
    value_set_during_stabilization$0 =
      [0,
       function(param){return 0;},
       cst_value_set_during_stabiliza,
       _f_,
       value_set_during_stabilization,
       _e_];
   function _g_(r, v){return [0, v, r[2], r[3], r[4]];}
   var
    _h_ = [0, set_value],
    value$0 = [0, function(param){return 0;}, cst_value, _h_, value, _g_];
   function sexp_of_var(of_a_001, param){
    var
     value_003 = param[1],
     value_set_during_stabilization = param[2],
     set_at_007 = param[3],
     watch_009 = param[4],
     arg_010 = caml_call2(Incremental_Types[15][1], of_a_001, watch_009),
     bnds_002 = [0, [1, [0, _i_, [0, arg_010, 0]]], 0],
     arg_008 = caml_call1(Incremental_Stabilization_num[2], set_at_007),
     bnds_002$0 = [0, [1, [0, _j_, [0, arg_008, 0]]], bnds_002],
     arg_006 =
       caml_call2
        (Incremental_Import[6][2], of_a_001, value_set_during_stabilization),
     bnds_002$1 = [0, [1, [0, _k_, [0, arg_006, 0]]], bnds_002$0],
     arg_004 = caml_call1(of_a_001, value_003),
     bnds_002$2 = [0, [1, [0, _l_, [0, arg_004, 0]]], bnds_002$1];
    return [1, bnds_002$2];
   }
   function invariant(invariant_a, t){
    function _s_(param){
     function check(f){return caml_call2(Base_Invariant[2], t, f);}
     var
      watch_fun =
        check
         (function(watch){
           var match = watch[5];
           if(typeof match === "number"){if(0 === match) return 0;}
           else if(16 === match[0]){
            var t$0 = match[1];
            if(t === t$0) return 0;
            throw caml_maybe_attach_backtrace([0, Assert_failure, _n_], 1);
           }
           throw caml_maybe_attach_backtrace([0, Assert_failure, _m_], 1);
          }),
      set_at_fun = check(Incremental_Stabilization_num[4]),
      value_set_during_stabilization =
        check(caml_call1(Incremental_Import[6][4], invariant_a)),
      value_fun = check(invariant_a);
     caml_call1(value_fun, value$0);
     caml_call1
      (value_set_during_stabilization, value_set_during_stabilization$0);
     caml_call1(set_at_fun, set_at$0);
     return caml_call1(watch_fun, watch$0);
    }
    function _t_(x_011){
     return sexp_of_var(function(param){return _o_;}, x_011);
    }
    return caml_call4(Base_Invariant[1], _p_, t, _t_, _s_);
   }
   function incr_state(t){return t[4][2];}
   function sexp_of_t(param){
    var res0_015 = sexp_of_var(function(param){return _q_;}, param);
    return [1, [0, _r_, [0, res0_015, 0]]];
   }
   function latest_value(t){
    return caml_call1(Incremental_Import[6][8], t[2])
            ? caml_call1(Incremental_Import[6][16], t[2])
            : t[1];
   }
   caml_call1(Ppx_inline_test_lib[7], cst_incremental);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incremental_Var);
   var
    Incremental_Var =
      [0, invariant, sexp_of_var, [0, sexp_of_t], latest_value, incr_state];
   runtime.caml_register_global(30, Incremental_Var, cst_Incremental_Var$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incremental__Unordered_array_fold
//# unitInfo: Requires: Base__Invariant, Core, Incremental__Import, Incremental__Types, Ppx_assert_lib__Runtime, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Incremental_Unordered_arra$0 = "Incremental__Unordered_array_fold",
    cst = "_",
    cst_children$0 = "children",
    cst_fold_value$0 = "fold_value",
    cst_full_compute_every_n_chang$0 = "full_compute_every_n_changes",
    cst_incremental$0 = "incremental",
    cst_init$0 = "init",
    cst_main$0 = "main",
    cst_num_changes_since_last_ful$0 = "num_changes_since_last_full_compute",
    cst_src_unordered_array_fold_m = "src/unordered_array_fold.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    pos = "src/unordered_array_fold.ml:56:26",
    Incremental_Types = global_data.Incremental__Types,
    Core = global_data.Core,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Incremental_Import = global_data.Incremental__Import,
    Assert_failure = global_data.Assert_failure,
    Ppx_assert_lib_Runtime = global_data.Ppx_assert_lib__Runtime,
    Base_Invariant = global_data.Base__Invariant,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incremental_Unordered_arra$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incremental$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_unordered_array_fold_m);
   caml_call2
    (Ppx_inline_test_lib[6], cst_incremental$0, "unordered_array_fold.ml");
   var
    _J_ = [0, cst],
    _I_ = [0, cst],
    _F_ = [0, cst],
    _G_ = [0, "child"],
    _H_ = [0, "child_index"],
    _K_ = [0, "unordered_array_fold"],
    cst_Unordered_array_fold_child =
      "[Unordered_array_fold.child_changed] mismatch",
    _D_ = [0, cst],
    _C_ = [0, cst],
    _B_ = [0, cst_src_unordered_array_fold_m, 42, 40],
    _A_ = [0, cst_src_unordered_array_fold_m, 43, 18],
    _z_ = [0, cst_src_unordered_array_fold_m, 66, 11],
    _y_ = [0, cst_src_unordered_array_fold_m, 52, 18],
    _x_ = [0, cst_src_unordered_array_fold_m, 62, 11],
    _w_ = [0, cst_src_unordered_array_fold_m, 63, 11],
    _E_ = [0, cst_src_unordered_array_fold_m, 35, 924, 946],
    _o_ = [0, cst_num_changes_since_last_ful$0],
    _p_ = [0, cst_fold_value$0],
    _q_ = [0, cst_children$0],
    _r_ = [0, cst_full_compute_every_n_chang$0],
    _s_ = [0, "update"],
    _t_ = [0, "f"],
    _u_ = [0, cst_init$0],
    _v_ = [0, cst_main$0],
    _a_ = [0, "F_inverse"],
    _b_ = [0, "Update"],
    cst_num_changes_since_last_ful = cst_num_changes_since_last_ful$0,
    cst_fold_value = cst_fold_value$0,
    cst_children = cst_children$0,
    cst_full_compute_every_n_chang = cst_full_compute_every_n_chang$0,
    cst_init = cst_init$0,
    cst_main = cst_main$0,
    cst_incremental = cst_incremental$0,
    cst_Incremental_Unordered_arra = cst_Incremental_Unordered_arra$0;
   function sexp_of_t(of_a_001, of_b_002, param){
    if(0 === param[0]){
     var
      _am_ = function(_ap_){return 0;},
      res0_004 = caml_call1(Sexplib0_Sexp_conv[24], _am_);
     return [1, [0, _a_, [0, res0_004, 0]]];
    }
    function _an_(_ao_){return 0;}
    var res0_006 = caml_call1(Sexplib0_Sexp_conv[24], _an_);
    return [1, [0, _b_, [0, res0_006, 0]]];
   }
   function num_changes_since_last_full_co(r){return r[8];}
   function set_num_changes_since_last_ful(r, v){r[8] = v; return 0;}
   function fold_value(r){return r[7];}
   function set_fold_value(r, v){r[7] = v; return 0;}
   function children(r){return r[6];}
   function full_compute_every_n_changes(r){return r[5];}
   function init(r){return r[2];}
   function main(r){return r[1];}
   function _c_(r, v){
    return [0, r[1], r[2], r[3], r[4], r[5], r[6], r[7], v];
   }
   var
    _d_ = [0, set_num_changes_since_last_ful],
    num_changes_since_last_full_co$0 =
      [0,
       function(param){return 0;},
       cst_num_changes_since_last_ful,
       _d_,
       num_changes_since_last_full_co,
       _c_];
   function _e_(r, v){
    return [0, r[1], r[2], r[3], r[4], r[5], r[6], v, r[8]];
   }
   var
    _f_ = [0, set_fold_value],
    fold_value$0 =
      [0, function(param){return 0;}, cst_fold_value, _f_, fold_value, _e_];
   function _g_(r, v){
    return [0, r[1], r[2], r[3], r[4], r[5], v, r[7], r[8]];
   }
   var
    _h_ = 0,
    children$0 =
      [0, function(param){return 0;}, cst_children, _h_, children, _g_];
   function _i_(r, v){
    return [0, r[1], r[2], r[3], r[4], v, r[6], r[7], r[8]];
   }
   var
    _j_ = 0,
    full_compute_every_n_changes$0 =
      [0,
       function(param){return 0;},
       cst_full_compute_every_n_chang,
       _j_,
       full_compute_every_n_changes,
       _i_];
   function _k_(r, v){
    return [0, r[1], v, r[3], r[4], r[5], r[6], r[7], r[8]];
   }
   var
    _l_ = 0,
    init$0 = [0, function(param){return 0;}, cst_init, _l_, init, _k_];
   function _m_(r, v){
    return [0, v, r[2], r[3], r[4], r[5], r[6], r[7], r[8]];
   }
   var
    _n_ = 0,
    main$0 = [0, function(param){return 0;}, cst_main, _n_, main, _m_];
   function sexp_of_t$0(of_a_009, of_acc_010, param){
    var
     children_022 = param[6],
     full_compute_every_n_changes_0 = param[5],
     init_014 = param[2],
     main_012 = param[1],
     fold_value_024 = param[7],
     num_changes_since_last_full_co = param[8],
     arg_027 = caml_call1(Core[389], num_changes_since_last_full_co),
     bnds_011 = [0, [1, [0, _o_, [0, arg_027, 0]]], 0],
     arg_025 =
       caml_call2(Incremental_Import[6][2], of_acc_010, fold_value_024),
     bnds_011$0 = [0, [1, [0, _p_, [0, arg_025, 0]]], bnds_011],
     _ah_ = caml_call1(Incremental_Types[15][1], of_a_009),
     arg_023 = caml_call2(Core[301], _ah_, children_022),
     bnds_011$1 = [0, [1, [0, _q_, [0, arg_023, 0]]], bnds_011$0],
     arg_021 = caml_call1(Core[389], full_compute_every_n_changes_0),
     bnds_011$2 = [0, [1, [0, _r_, [0, arg_021, 0]]], bnds_011$1];
    function _ai_(_al_){return 0;}
    var
     arg_019 = caml_call1(Sexplib0_Sexp_conv[24], _ai_),
     bnds_011$3 = [0, [1, [0, _s_, [0, arg_019, 0]]], bnds_011$2];
    function _aj_(_ak_){return 0;}
    var
     arg_017 = caml_call1(Sexplib0_Sexp_conv[24], _aj_),
     bnds_011$4 = [0, [1, [0, _t_, [0, arg_017, 0]]], bnds_011$3],
     arg_015 = caml_call1(of_acc_010, init_014),
     bnds_011$5 = [0, [1, [0, _u_, [0, arg_015, 0]]], bnds_011$4],
     arg_013 = caml_call2(Incremental_Types[15][1], of_acc_010, main_012),
     bnds_011$6 = [0, [1, [0, _v_, [0, arg_013, 0]]], bnds_011$5];
    return [1, bnds_011$6];
   }
   function invariant(invariant_a, invariant_acc, t){
    function _ac_(param){
     function check(f){return caml_call2(Base_Invariant[2], t, f);}
     var
      num_changes_since_last_full_co =
        check
         (function(num_changes_since_last_full_co){
           if(! caml_call2(Core[88], num_changes_since_last_full_co, 0))
            throw caml_maybe_attach_backtrace([0, Assert_failure, _x_], 1);
           if(caml_call2(Core[89], num_changes_since_last_full_co, t[5]))
            return 0;
           throw caml_maybe_attach_backtrace([0, Assert_failure, _w_], 1);
          }),
      fold_value_fun =
        check
         (function(fold_value){
           caml_call2(Incremental_Import[6][4], invariant_acc, fold_value);
           var
            got = caml_call1(Incremental_Import[6][8], fold_value),
            expect = caml_call2(Core[92], t[8], t[5]),
            sexpifier = Core[323],
            equal = 0,
            message = 0,
            here = 0;
           function comparator(a_029, b_030){
            return caml_call2(Core[316], a_029, b_030);
           }
           return caml_call8
                   (Ppx_assert_lib_Runtime[3],
                    pos,
                    sexpifier,
                    comparator,
                    here,
                    message,
                    equal,
                    expect,
                    got);
          }),
      children_fun =
        check
         (function(children){
           function _af_(child){
            caml_call2(Incremental_Import[6][4], invariant_a, child[4]);
            var _ag_ = caml_call2(Core[92], t[8], t[5]);
            if(! _ag_) return _ag_;
            if(caml_call1(Incremental_Import[6][8], child[4])) return 0;
            throw caml_maybe_attach_backtrace([0, Assert_failure, _y_], 1);
           }
           return caml_call2(Incremental_Import[5][35], children, _af_);
          }),
      full_compute_every_n_changes_f =
        check
         (function(full_compute_every_n_changes){
           if(caml_call2(Core[91], full_compute_every_n_changes, 0)) return 0;
           throw caml_maybe_attach_backtrace([0, Assert_failure, _z_], 1);
          }),
      init_fun = check(invariant_acc),
      main_fun =
        check
         (function(main){
           var match = main[5];
           if(typeof match === "number"){if(0 === match) return 0;}
           else if(15 === match[0]){
            var t$0 = match[1];
            if(t === t$0) return 0;
            throw caml_maybe_attach_backtrace([0, Assert_failure, _B_], 1);
           }
           throw caml_maybe_attach_backtrace([0, Assert_failure, _A_], 1);
          });
     caml_call1(main_fun, main$0);
     caml_call1(init_fun, init$0);
     caml_call1
      (full_compute_every_n_changes_f, full_compute_every_n_changes$0);
     caml_call1(children_fun, children$0);
     caml_call1(fold_value_fun, fold_value$0);
     return caml_call1
             (num_changes_since_last_full_co,
              num_changes_since_last_full_co$0);
    }
    function _ad_(x_028){
     function _ae_(param){return _C_;}
     return sexp_of_t$0(function(param){return _D_;}, _ae_, x_028);
    }
    return caml_call4(Base_Invariant[1], _E_, t, _ad_, _ac_);
   }
   function create
   (init, f, update$0, full_compute_every_n_changes, children, main){
    var _aa_ = Incremental_Import[6][5];
    if(0 === update$0[0])
     var
      f_inverse = update$0[1],
      _ab_ =
        function(fold_value, old_value, new_value){
         return caml_call2
                 (f, caml_call2(f_inverse, fold_value, old_value), new_value);
        };
    else
     var update = update$0[1], _ab_ = update;
    return [0,
            main,
            init,
            f,
            _ab_,
            full_compute_every_n_changes,
            children,
            _aa_,
            full_compute_every_n_changes];
   }
   function compute(t){
    if(caml_call2(Core[90], t[8], t[5])){
     t[8] = 0;
     var
      children = t[6],
      f = t[3],
      init = t[2],
      result = [0, init],
      _Z_ = children.length - 1 - 1 | 0,
      _Y_ = 0;
     if(_Z_ >= 0){
      var i = _Y_;
      for(;;){
       var ___ = caml_call1(Incremental_Import[6][9], children[1 + i][4]);
       result[1] = caml_call2(f, result[1], ___);
       var _$_ = i + 1 | 0;
       if(_Z_ === i) break;
       var i = _$_;
      }
     }
     t[7] = caml_call1(Incremental_Import[6][6], result[1]);
    }
    return caml_call1(Incremental_Import[6][9], t[7]);
   }
   function force_full_compute(t){
    t[7] = Incremental_Import[6][5];
    t[8] = t[5];
    return 0;
   }
   function child_changed(x_031, child, child_index, old_value_opt, new_value){
    var
     child_at_index =
       runtime.caml_check_bound(x_031[6], child_index)[1 + child_index];
    if(! caml_call2(Incremental_Types[15][5], child, child_at_index)){
     var
      _P_ = 0,
      _Q_ = 0,
      _R_ = function(param){return _F_;},
      _S_ =
        [0,
         [1,
          [0, _G_, [0, caml_call2(Incremental_Types[15][1], _R_, child), _Q_]]],
         _P_],
      _T_ =
        [0, [1, [0, _H_, [0, caml_call1(Core[389], child_index), 0]]], _S_],
      _U_ = 0,
      _V_ = function(param){return _I_;},
      _W_ =
        [0,
         [1,
          [0,
           _K_,
           [0, sexp_of_t$0(function(param){return _J_;}, _V_, x_031), _U_]]],
         _T_],
      _X_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Unordered_array_fold_child),
          _W_]];
     return caml_call1(Core[261], _X_);
    }
    if(caml_call2(Core[92], x_031[8], x_031[5] - 1 | 0)){
     x_031[8] = x_031[8] + 1 | 0;
     var
      _L_ = caml_call1(Incremental_Import[6][9], old_value_opt),
      _M_ = caml_call1(Incremental_Import[6][9], x_031[7]),
      _N_ = caml_call3(x_031[4], _M_, _L_, new_value);
     x_031[7] = caml_call1(Incremental_Import[6][6], _N_);
     return 0;
    }
    var _O_ = caml_call2(Core[92], x_031[8], x_031[5]);
    return _O_ ? force_full_compute(x_031) : _O_;
   }
   caml_call1(Ppx_inline_test_lib[7], cst_incremental);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incremental_Unordered_arra);
   var
    Incremental_Unordered_array_fo =
      [0,
       invariant,
       sexp_of_t$0,
       [0, sexp_of_t],
       create,
       compute,
       child_changed,
       force_full_compute];
   runtime.caml_register_global
    (53, Incremental_Unordered_array_fo, cst_Incremental_Unordered_arra$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incremental__Alarm
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Timing_wheel
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Incremental_Alarm$0 = "Incremental__Alarm",
    cst_incremental$0 = "incremental";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Timing_wheel = global_data.Timing_wheel,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incremental_Alarm$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incremental$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/alarm.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_incremental$0, "alarm.ml");
   var
    cst_incremental = cst_incremental$0,
    cst_Incremental_Alarm = cst_Incremental_Alarm$0;
   function sexp_of_t(x_001){
    return caml_call2(Timing_wheel[5][1], Sexplib0_Sexp_conv[23], x_001);
   }
   function invariant(param){return 0;}
   var null$0 = caml_call1(Timing_wheel[5][2], 0);
   caml_call1(Ppx_inline_test_lib[7], cst_incremental);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incremental_Alarm);
   var Incremental_Alarm = [0, sexp_of_t, invariant, null$0];
   runtime.caml_register_global
    (13, Incremental_Alarm, cst_Incremental_Alarm$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incremental__Step_function_node
//# unitInfo: Requires: Base__Invariant, Core__Sequence, Incremental__Alarm, Incremental__Import, Incremental__Stabilization_num, Incremental__Types, Incremental_step_function, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Incremental_Step_function_$0 = "Incremental__Step_function_node",
    cst_alarm$0 = "alarm",
    cst_alarm_value$0 = "alarm_value",
    cst_incremental$0 = "incremental",
    cst_main$0 = "main",
    cst_src_step_function_node_ml = "src/step_function_node.ml",
    cst_value$0 = "value",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Core_Sequence = global_data.Core__Sequence,
    Incremental_Import = global_data.Incremental__Import,
    Assert_failure = global_data.Assert_failure,
    Base_Invariant = global_data.Base__Invariant,
    Incremental_Alarm = global_data.Incremental__Alarm,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Incremental_Stabilization_num = global_data.Incremental__Stabilization_num,
    Incremental_step_function = global_data.Incremental_step_function,
    Incremental_Types = global_data.Incremental__Types,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incremental_Step_function_$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incremental$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_step_function_node_ml);
   caml_call2
    (Ppx_inline_test_lib[6], cst_incremental$0, "step_function_node.ml");
   var
    _u_ = [0, "_"],
    _t_ = [0, cst_src_step_function_node_ml, 30, 33],
    _s_ = [0, cst_src_step_function_node_ml, 31, 18],
    _q_ = [0, cst_src_step_function_node_ml, 41, 18],
    _r_ = [0, cst_src_step_function_node_ml, 40, 33],
    _v_ = [0, cst_src_step_function_node_ml, 22, 642, 664],
    _i_ = [0, "clock"],
    _j_ = [0, cst_alarm_value$0],
    _k_ = [0, cst_alarm$0],
    _l_ = [0, "upcoming_steps"],
    _m_ = [0, cst_value$0],
    _n_ = [0, "extracted_step_function_from_child_at"],
    _o_ = [0, "child"],
    _p_ = [0, cst_main$0],
    cst_alarm_value = cst_alarm_value$0,
    cst_alarm = cst_alarm$0,
    cst_value = cst_value$0,
    cst_main = cst_main$0,
    cst_incremental = cst_incremental$0,
    cst_Incremental_Step_function_ = cst_Incremental_Step_function_$0;
   function alarm_value(r){return r[7];}
   function set_alarm_value(r, v){r[7] = v; return 0;}
   function alarm(r){return r[6];}
   function set_alarm(r, v){r[6] = v; return 0;}
   function value(r){return r[4];}
   function set_value(r, v){r[4] = v; return 0;}
   function main(r){return r[1];}
   function _a_(r, v){
    return [0, r[1], r[2], r[3], r[4], r[5], r[6], v, r[8]];
   }
   var
    _b_ = [0, set_alarm_value],
    alarm_value$0 =
      [0, function(param){return 0;}, cst_alarm_value, _b_, alarm_value, _a_];
   function _c_(r, v){
    return [0, r[1], r[2], r[3], r[4], r[5], v, r[7], r[8]];
   }
   var
    _d_ = [0, set_alarm],
    alarm$0 = [0, function(param){return 0;}, cst_alarm, _d_, alarm, _c_];
   function _e_(r, v){
    return [0, r[1], r[2], r[3], v, r[5], r[6], r[7], r[8]];
   }
   var
    _f_ = [0, set_value],
    value$0 = [0, function(param){return 0;}, cst_value, _f_, value, _e_];
   function _g_(r, v){
    return [0, v, r[2], r[3], r[4], r[5], r[6], r[7], r[8]];
   }
   var
    _h_ = 0,
    main$0 = [0, function(param){return 0;}, cst_main, _h_, main, _g_];
   function sexp_of_t(of_a_001, param){
    var
     main_003 = param[1],
     child_005 = param[2],
     extracted_step_function_from_c = param[3],
     value_009 = param[4],
     upcoming_steps_011 = param[5],
     alarm_017 = param[6],
     alarm_value_019 = param[7],
     clock_021 = param[8],
     arg_022 = caml_call1(Sexplib0_Sexp_conv[23], clock_021),
     bnds_002 = [0, [1, [0, _i_, [0, arg_022, 0]]], 0],
     arg_020 = caml_call1(Sexplib0_Sexp_conv[23], alarm_value_019),
     bnds_002$0 = [0, [1, [0, _j_, [0, arg_020, 0]]], bnds_002],
     arg_018 = caml_call1(Incremental_Alarm[1], alarm_017),
     bnds_002$1 = [0, [1, [0, _k_, [0, arg_018, 0]]], bnds_002$0];
    function _z_(param){
     var
      arg1_014 = param[2],
      arg0_013 = param[1],
      res0_015 = caml_call1(Incremental_Import[4][126], arg0_013),
      res1_016 = caml_call1(of_a_001, arg1_014);
     return [1, [0, res0_015, [0, res1_016, 0]]];
    }
    var
     arg_012 = caml_call2(Core_Sequence[12], _z_, upcoming_steps_011),
     bnds_002$2 = [0, [1, [0, _l_, [0, arg_012, 0]]], bnds_002$1],
     arg_010 = caml_call2(Incremental_Import[6][2], of_a_001, value_009),
     bnds_002$3 = [0, [1, [0, _m_, [0, arg_010, 0]]], bnds_002$2],
     arg_008 =
       caml_call1
        (Incremental_Stabilization_num[2], extracted_step_function_from_c),
     bnds_002$4 = [0, [1, [0, _n_, [0, arg_008, 0]]], bnds_002$3],
     _A_ = caml_call1(Incremental_step_function[1], of_a_001),
     _B_ = caml_call1(Incremental_Types[15][1], _A_),
     arg_006 = caml_call2(Incremental_Import[6][2], _B_, child_005),
     bnds_002$5 = [0, [1, [0, _o_, [0, arg_006, 0]]], bnds_002$4],
     arg_004 = caml_call2(Incremental_Types[15][1], of_a_001, main_003),
     bnds_002$6 = [0, [1, [0, _p_, [0, arg_004, 0]]], bnds_002$5];
    return [1, bnds_002$6];
   }
   function invariant(invariant_a, t){
    function _x_(param){
     function check(f){return caml_call2(Base_Invariant[2], t, f);}
     var
      alarm_value_fun =
        check
         (function(alarm_value){
           var match = alarm_value[1];
           if(3 !== match[0])
            throw caml_maybe_attach_backtrace([0, Assert_failure, _q_], 1);
           var t2 = match[1];
           if(t === t2) return 0;
           throw caml_maybe_attach_backtrace([0, Assert_failure, _r_], 1);
          }),
      alarm_fun = check(Incremental_Alarm[2]),
      value_fun = check(caml_call1(Incremental_Import[6][4], invariant_a)),
      main_fun =
        check
         (function(main){
           var match = main[5];
           if(typeof match === "number"){if(0 === match) return 0;}
           else
            switch(match[0]){
              case 5:
               return 0;
              case 14:
               var t$0 = match[1];
               if(t === t$0) return 0;
               throw caml_maybe_attach_backtrace([0, Assert_failure, _t_], 1);
            }
           throw caml_maybe_attach_backtrace([0, Assert_failure, _s_], 1);
          });
     caml_call1(main_fun, main$0);
     caml_call1(value_fun, value$0);
     caml_call1(alarm_fun, alarm$0);
     caml_call1(alarm_value_fun, alarm_value$0);
     return 0;
    }
    function _y_(x_023){
     return sexp_of_t(function(param){return _u_;}, x_023);
    }
    return caml_call4(Base_Invariant[1], _v_, t, _y_, _x_);
   }
   function advance(t, to){
    var
     steps$0 = t[5],
     a1$0 = caml_call1(Incremental_Import[6][9], t[4]),
     a1 = a1$0,
     steps = steps$0;
    for(;;){
     var match = caml_call1(Core_Sequence[50], steps);
     if(match){
      var
       _w_ = match[1],
       steps2 = _w_[2],
       match$0 = _w_[1],
       a2 = match$0[2],
       step_at = match$0[1];
      if(caml_call2(Incremental_Import[4][15], to, step_at)){var a1 = a2, steps = steps2; continue;}
     }
     t[4] = caml_call1(Incremental_Import[6][6], a1);
     t[5] = steps;
     return 0;
    }
   }
   caml_call1(Ppx_inline_test_lib[7], cst_incremental);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incremental_Step_function_);
   var Incremental_Step_function_node = [0, invariant, sexp_of_t, advance];
   runtime.caml_register_global
    (42, Incremental_Step_function_node, cst_Incremental_Step_function_$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incremental__Array_fold
//# unitInfo: Requires: Base__Invariant, Core, Incremental__Import, Incremental__Types, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Incremental_Array_fold$0 = "Incremental__Array_fold",
    cst = "_",
    cst_children$0 = "children",
    cst_incremental$0 = "incremental",
    cst_init$0 = "init",
    cst_src_array_fold_ml = "src/array_fold.ml";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Incremental_Import = global_data.Incremental__Import,
    Base_Invariant = global_data.Base__Invariant,
    Incremental_Types = global_data.Incremental__Types,
    Core = global_data.Core,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incremental_Array_fold$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incremental$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_array_fold_ml);
   caml_call2(Ppx_inline_test_lib[6], cst_incremental$0, "array_fold.ml");
   var
    _i_ = [0, cst],
    _h_ = [0, cst],
    _j_ = [0, cst_src_array_fold_ml, 13, 269, 291],
    _e_ = [0, cst_children$0],
    _f_ = [0, "f"],
    _g_ = [0, cst_init$0],
    cst_children = cst_children$0,
    cst_init = cst_init$0,
    cst_incremental = cst_incremental$0,
    cst_Incremental_Array_fold = cst_Incremental_Array_fold$0;
   function children(r){return r[3];}
   function init(r){return r[1];}
   function _a_(r, v){return [0, r[1], r[2], v];}
   var
    _b_ = 0,
    children$0 =
      [0, function(param){return 0;}, cst_children, _b_, children, _a_];
   function _c_(r, v){return [0, v, r[2], r[3]];}
   var
    _d_ = 0,
    init$0 = [0, function(param){return 0;}, cst_init, _d_, init, _c_];
   function sexp_of_t(of_a_001, of_acc_002, param){
    var
     children_008 = param[3],
     init_004 = param[1],
     _s_ = caml_call1(Incremental_Types[15][1], of_a_001),
     arg_009 = caml_call2(Core[301], _s_, children_008),
     bnds_003 = [0, [1, [0, _e_, [0, arg_009, 0]]], 0];
    function _t_(_u_){return 0;}
    var
     arg_007 = caml_call1(Sexplib0_Sexp_conv[24], _t_),
     bnds_003$0 = [0, [1, [0, _f_, [0, arg_007, 0]]], bnds_003],
     arg_005 = caml_call1(of_acc_002, init_004),
     bnds_003$1 = [0, [1, [0, _g_, [0, arg_005, 0]]], bnds_003$0];
    return [1, bnds_003$1];
   }
   function invariant(invariant_a, invariant_acc, t){
    function _o_(param){
     function check(f){return caml_call2(Base_Invariant[2], t, f);}
     var
      children_fun =
        check
         (function(children){
           function _r_(child){
            return caml_call2(Incremental_Import[6][4], invariant_a, child[4]);
           }
           return caml_call2(Incremental_Import[5][35], children, _r_);
          }),
      init_fun = check(invariant_acc);
     caml_call1(init_fun, init$0);
     return caml_call1(children_fun, children$0);
    }
    function _p_(x_010){
     function _q_(param){return _h_;}
     return sexp_of_t(function(param){return _i_;}, _q_, x_010);
    }
    return caml_call4(Base_Invariant[1], _j_, t, _p_, _o_);
   }
   function compute(param){
    var
     children = param[3],
     f = param[2],
     init = param[1],
     result = [0, init],
     _l_ = children.length - 1 - 1 | 0,
     _k_ = 0;
    if(_l_ >= 0){
     var i = _k_;
     for(;;){
      var _m_ = caml_call1(Incremental_Import[6][9], children[1 + i][4]);
      result[1] = caml_call2(f, result[1], _m_);
      var _n_ = i + 1 | 0;
      if(_l_ === i) break;
      var i = _n_;
     }
    }
    return result[1];
   }
   caml_call1(Ppx_inline_test_lib[7], cst_incremental);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incremental_Array_fold);
   var Incremental_Array_fold = [0, sexp_of_t, invariant, compute];
   runtime.caml_register_global
    (25, Incremental_Array_fold, cst_Incremental_Array_fold$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incremental__At
//# unitInfo: Requires: Base__Invariant, Incremental__Alarm, Incremental__Before_or_after, Incremental__Import, Incremental__Types, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Incremental_At$0 = "Incremental__At",
    cst_alarm$0 = "alarm",
    cst_incremental$0 = "incremental",
    cst_main$0 = "main",
    cst_src_at_ml = "src/at.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Assert_failure = global_data.Assert_failure,
    Base_Invariant = global_data.Base__Invariant,
    Incremental_Alarm = global_data.Incremental__Alarm,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Incremental_Import = global_data.Incremental__Import,
    Incremental_Before_or_after = global_data.Incremental__Before_or_after,
    Incremental_Types = global_data.Incremental__Types,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incremental_At$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incremental$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_at_ml);
   caml_call2(Ppx_inline_test_lib[6], cst_incremental$0, "at.ml");
   var
    _j_ = [0, cst_src_at_ml, 23, 22],
    _i_ = [0, cst_src_at_ml, 24, 18],
    _k_ = [0, cst_src_at_ml, 15, 280, 302],
    _e_ = [0, "clock"],
    _f_ = [0, cst_alarm$0],
    _g_ = [0, "at"],
    _h_ = [0, cst_main$0],
    cst_alarm = cst_alarm$0,
    cst_main = cst_main$0,
    cst_incremental = cst_incremental$0,
    cst_Incremental_At = cst_Incremental_At$0;
   function alarm(r){return r[3];}
   function set_alarm(r, v){r[3] = v; return 0;}
   function main(r){return r[1];}
   function _a_(r, v){return [0, r[1], r[2], v, r[4]];}
   var
    _b_ = [0, set_alarm],
    alarm$0 = [0, function(param){return 0;}, cst_alarm, _b_, alarm, _a_];
   function _c_(r, v){return [0, v, r[2], r[3], r[4]];}
   var
    _d_ = 0,
    main$0 = [0, function(param){return 0;}, cst_main, _d_, main, _c_];
   function sexp_of_t(param){
    var
     at_004 = param[2],
     main_002 = param[1],
     alarm_006 = param[3],
     clock_008 = param[4],
     arg_009 = caml_call1(Sexplib0_Sexp_conv[23], clock_008),
     bnds_001 = [0, [1, [0, _e_, [0, arg_009, 0]]], 0],
     arg_007 = caml_call1(Incremental_Alarm[1], alarm_006),
     bnds_001$0 = [0, [1, [0, _f_, [0, arg_007, 0]]], bnds_001],
     arg_005 = caml_call1(Incremental_Import[4][126], at_004),
     bnds_001$1 = [0, [1, [0, _g_, [0, arg_005, 0]]], bnds_001$0],
     arg_003 =
       caml_call2
        (Incremental_Types[15][1], Incremental_Before_or_after[1], main_002),
     bnds_001$2 = [0, [1, [0, _h_, [0, arg_003, 0]]], bnds_001$1];
    return [1, bnds_001$2];
   }
   function invariant(t){
    function _l_(param){
     function check(f){return caml_call2(Base_Invariant[2], t, f);}
     var
      alarm_fun = check(Incremental_Alarm[2]),
      main_fun =
        check
         (function(main){
           var match = main[5];
           if(typeof match === "number"){if(0 === match) return 0;}
           else
            switch(match[0]){
              case 1:
               var t$0 = match[1];
               if(t === t$0) return 0;
               throw caml_maybe_attach_backtrace([0, Assert_failure, _j_], 1);
              case 5:
               if(match[1]) return 0; break;
            }
           throw caml_maybe_attach_backtrace([0, Assert_failure, _i_], 1);
          });
     caml_call1(main_fun, main$0);
     caml_call1(alarm_fun, alarm$0);
     return 0;
    }
    return caml_call4(Base_Invariant[1], _k_, t, sexp_of_t, _l_);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_incremental);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incremental_At);
   var Incremental_At = [0, invariant, sexp_of_t];
   runtime.caml_register_global(29, Incremental_At, cst_Incremental_At$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incremental__At_intervals
//# unitInfo: Requires: Base__Invariant, Core, Incremental__Alarm, Incremental__Import, Incremental__Types, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Incremental_At_intervals$0 = "Incremental__At_intervals",
    cst_alarm$0 = "alarm",
    cst_incremental$0 = "incremental",
    cst_interval$0 = "interval",
    cst_main$0 = "main",
    cst_src_at_intervals_ml = "src/at_intervals.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Assert_failure = global_data.Assert_failure,
    Incremental_Import = global_data.Incremental__Import,
    Base_Invariant = global_data.Base__Invariant,
    Incremental_Alarm = global_data.Incremental__Alarm,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Core = global_data.Core,
    Incremental_Types = global_data.Incremental__Types,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incremental_At_intervals$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incremental$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_at_intervals_ml);
   caml_call2(Ppx_inline_test_lib[6], cst_incremental$0, "at_intervals.ml");
   var
    _n_ = [0, cst_src_at_intervals_ml, 23, 32],
    _m_ = [0, cst_src_at_intervals_ml, 24, 18],
    _l_ = [0, cst_src_at_intervals_ml, 26, 40],
    _o_ = [0, cst_src_at_intervals_ml, 16, 309, 331],
    _g_ = [0, "clock"],
    _h_ = [0, cst_alarm$0],
    _i_ = [0, cst_interval$0],
    _j_ = [0, "base"],
    _k_ = [0, cst_main$0],
    cst_alarm = cst_alarm$0,
    cst_interval = cst_interval$0,
    cst_main = cst_main$0,
    cst_incremental = cst_incremental$0,
    cst_Incremental_At_intervals = cst_Incremental_At_intervals$0;
   function alarm(r){return r[4];}
   function set_alarm(r, v){r[4] = v; return 0;}
   function interval(r){return r[3];}
   function main(r){return r[1];}
   function _a_(r, v){return [0, r[1], r[2], r[3], v, r[5]];}
   var
    _b_ = [0, set_alarm],
    alarm$0 = [0, function(param){return 0;}, cst_alarm, _b_, alarm, _a_];
   function _c_(r, v){return [0, r[1], r[2], v, r[4], r[5]];}
   var
    _d_ = 0,
    interval$0 =
      [0, function(param){return 0;}, cst_interval, _d_, interval, _c_];
   function _e_(r, v){return [0, v, r[2], r[3], r[4], r[5]];}
   var
    _f_ = 0,
    main$0 = [0, function(param){return 0;}, cst_main, _f_, main, _e_];
   function sexp_of_t(param){
    var
     interval_006 = param[3],
     base_004 = param[2],
     main_002 = param[1],
     alarm_008 = param[4],
     clock_010 = param[5],
     arg_011 = caml_call1(Sexplib0_Sexp_conv[23], clock_010),
     bnds_001 = [0, [1, [0, _g_, [0, arg_011, 0]]], 0],
     arg_009 = caml_call1(Incremental_Alarm[1], alarm_008),
     bnds_001$0 = [0, [1, [0, _h_, [0, arg_009, 0]]], bnds_001],
     arg_007 = caml_call1(Incremental_Import[4][1][10], interval_006),
     bnds_001$1 = [0, [1, [0, _i_, [0, arg_007, 0]]], bnds_001$0],
     arg_005 = caml_call1(Incremental_Import[4][126], base_004),
     bnds_001$2 = [0, [1, [0, _j_, [0, arg_005, 0]]], bnds_001$1],
     arg_003 = caml_call2(Incremental_Types[15][1], Core[620], main_002),
     bnds_001$3 = [0, [1, [0, _k_, [0, arg_003, 0]]], bnds_001$2];
    return [1, bnds_001$3];
   }
   function invariant(t){
    function _p_(param){
     function check(f){return caml_call2(Base_Invariant[2], t, f);}
     var
      alarm_fun = check(Incremental_Alarm[2]),
      interval_fun =
        check
         (function(interval){
           if(caml_call1(Incremental_Import[4][1][34], interval)) return 0;
           throw caml_maybe_attach_backtrace([0, Assert_failure, _l_], 1);
          }),
      main_fun =
        check
         (function(main){
           var match = main[5];
           if(typeof match === "number"){if(0 === match) return 0;}
           else if(2 === match[0]){
            var t$0 = match[1];
            if(t === t$0) return 0;
            throw caml_maybe_attach_backtrace([0, Assert_failure, _n_], 1);
           }
           throw caml_maybe_attach_backtrace([0, Assert_failure, _m_], 1);
          });
     caml_call1(main_fun, main$0);
     caml_call1(interval_fun, interval$0);
     caml_call1(alarm_fun, alarm$0);
     return 0;
    }
    return caml_call4(Base_Invariant[1], _o_, t, sexp_of_t, _p_);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_incremental);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incremental_At_intervals);
   var Incremental_At_intervals = [0, invariant, sexp_of_t];
   runtime.caml_register_global
    (32, Incremental_At_intervals, cst_Incremental_At_intervals$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incremental__Bind
//# unitInfo: Requires: Base__Invariant, Core, Incremental__Import, Incremental__Types, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Incremental_Bind$0 = "Incremental__Bind",
    cst = "_",
    cst_all_nodes_created_on_rhs$0 = "all_nodes_created_on_rhs",
    cst_incremental$0 = "incremental",
    cst_lhs_change$0 = "lhs_change",
    cst_main$0 = "main",
    cst_rhs_scope$0 = "rhs_scope",
    cst_src_bind_ml = "src/bind.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Assert_failure = global_data.Assert_failure,
    Incremental_Types = global_data.Incremental__Types,
    Core = global_data.Core,
    Base_Invariant = global_data.Base__Invariant,
    Incremental_Import = global_data.Incremental__Import,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incremental_Bind$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incremental$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_bind_ml);
   caml_call2(Ppx_inline_test_lib[6], cst_incremental$0, "bind.ml");
   var
    _z_ = [0, cst],
    _y_ = [0, cst],
    _x_ = [0, cst_src_bind_ml, 52, 29],
    _w_ = [0, cst_src_bind_ml, 53, 18],
    _v_ = [0, cst_src_bind_ml, 58, 11],
    _u_ = [0, cst_src_bind_ml, 61, 35],
    _t_ = [0, cst_src_bind_ml, 62, 18],
    _r_ = [0, cst_src_bind_ml, 67, 23],
    _s_ = [0, cst_src_bind_ml, 66, 25],
    _q_ = [0, cst_src_bind_ml, 71, 13],
    _p_ = [0, cst_src_bind_ml, 72, 44],
    _A_ = [0, cst_src_bind_ml, 45, 1454, 1476],
    _i_ = [0, cst_all_nodes_created_on_rhs$0],
    _j_ = [0, cst_rhs_scope$0],
    _k_ = [0, "rhs"],
    _l_ = [0, cst_lhs_change$0],
    _m_ = [0, "lhs"],
    _n_ = [0, "f"],
    _o_ = [0, cst_main$0],
    cst_all_nodes_created_on_rhs = cst_all_nodes_created_on_rhs$0,
    cst_rhs_scope = cst_rhs_scope$0,
    cst_lhs_change = cst_lhs_change$0,
    cst_main = cst_main$0,
    cst_incremental = cst_incremental$0,
    cst_Incremental_Bind = cst_Incremental_Bind$0;
   function all_nodes_created_on_rhs(r){return r[7];}
   function set_all_nodes_created_on_rhs(r, v){r[7] = v; return 0;}
   function rhs_scope(r){return r[6];}
   function set_rhs_scope(r, v){r[6] = v; return 0;}
   function lhs_change(r){return r[4];}
   function main(r){return r[1];}
   function _a_(r, v){return [0, r[1], r[2], r[3], r[4], r[5], r[6], v];}
   var
    _b_ = [0, set_all_nodes_created_on_rhs],
    all_nodes_created_on_rhs$0 =
      [0,
       function(param){return 0;},
       cst_all_nodes_created_on_rhs,
       _b_,
       all_nodes_created_on_rhs,
       _a_];
   function _c_(r, v){return [0, r[1], r[2], r[3], r[4], r[5], v, r[7]];}
   var
    _d_ = [0, set_rhs_scope],
    rhs_scope$0 =
      [0, function(param){return 0;}, cst_rhs_scope, _d_, rhs_scope, _c_];
   function _e_(r, v){return [0, r[1], r[2], r[3], v, r[5], r[6], r[7]];}
   var
    _f_ = 0,
    lhs_change$0 =
      [0, function(param){return 0;}, cst_lhs_change, _f_, lhs_change, _e_];
   function _g_(r, v){return [0, v, r[2], r[3], r[4], r[5], r[6], r[7]];}
   var
    _h_ = 0,
    main$0 = [0, function(param){return 0;}, cst_main, _h_, main, _g_];
   function sexp_of_t(of_a_001, of_b_002, param){
    var
     main_004 = param[1],
     lhs_change_010 = param[4],
     lhs_008 = param[3],
     rhs_012 = param[5],
     rhs_scope_014 = param[6],
     all_nodes_created_on_rhs_016 = param[7],
     arg_017 =
       caml_call2
        (Incremental_Import[6][2],
         Incremental_Types[15][2][1],
         all_nodes_created_on_rhs_016),
     bnds_003 = [0, [1, [0, _i_, [0, arg_017, 0]]], 0],
     arg_015 = caml_call1(Incremental_Types[21][1], rhs_scope_014),
     bnds_003$0 = [0, [1, [0, _j_, [0, arg_015, 0]]], bnds_003],
     _G_ = caml_call1(Incremental_Types[15][1], of_b_002),
     arg_013 = caml_call2(Incremental_Import[6][2], _G_, rhs_012),
     bnds_003$1 = [0, [1, [0, _k_, [0, arg_013, 0]]], bnds_003$0],
     arg_011 = caml_call2(Incremental_Types[15][1], Core[620], lhs_change_010),
     bnds_003$2 = [0, [1, [0, _l_, [0, arg_011, 0]]], bnds_003$1],
     arg_009 = caml_call2(Incremental_Types[15][1], of_a_001, lhs_008),
     bnds_003$3 = [0, [1, [0, _m_, [0, arg_009, 0]]], bnds_003$2];
    function _H_(_I_){return 0;}
    var
     arg_007 = caml_call1(Sexplib0_Sexp_conv[24], _H_),
     bnds_003$4 = [0, [1, [0, _n_, [0, arg_007, 0]]], bnds_003$3],
     arg_005 = caml_call2(Incremental_Types[15][1], of_b_002, main_004),
     bnds_003$5 = [0, [1, [0, _o_, [0, arg_005, 0]]], bnds_003$4];
    return [1, bnds_003$5];
   }
   function is_valid(t){
    var _F_ = t[1][5];
    if(typeof _F_ === "number" && ! _F_) return 0;
    return 1;
   }
   function iter_nodes_created_on_rhs(t, f){
    var r = [0, t[7]];
    for(;;){
     if(! caml_call1(Incremental_Import[6][8], r[1])) return 0;
     var match = caml_call1(Incremental_Import[6][16], r[1]);
     r[1] = match[13];
     caml_call1(f, match);
    }
   }
   function invariant(invariant_a, invariant_b, t){
    function _B_(param){
     function check(f){return caml_call2(Base_Invariant[2], t, f);}
     var
      all_nodes_created_on_rhs_fun =
        check
         (function(param){
           return iter_nodes_created_on_rhs
                   (t,
                    function(node){
                     if(node[12] !== t[6])
                      throw caml_maybe_attach_backtrace
                             ([0, Assert_failure, _q_], 1);
                     var _E_ = caml_call1(Incremental_Types[15][4], node);
                     if(! _E_) return _E_;
                     if(caml_call2(Core[92], t[4][14], node[14])) return 0;
                     throw caml_maybe_attach_backtrace
                            ([0, Assert_failure, _p_], 1);
                    });
          }),
      rhs_scope_fun =
        check
         (function(param){
           if(! param)
            throw caml_maybe_attach_backtrace([0, Assert_failure, _s_], 1);
           var t$0 = param[1];
           if(t === t$0) return 0;
           throw caml_maybe_attach_backtrace([0, Assert_failure, _r_], 1);
          }),
      lhs_change_fun =
        check
         (function(lhs_change){
           if(lhs_change[12] !== t[1][12])
            throw caml_maybe_attach_backtrace([0, Assert_failure, _v_], 1);
           var match = lhs_change[5];
           if(typeof match === "number"){if(0 === match) return 0;}
           else if(3 === match[0]){
            var t$0 = match[1];
            if(t === t$0) return 0;
            throw caml_maybe_attach_backtrace([0, Assert_failure, _u_], 1);
           }
           throw caml_maybe_attach_backtrace([0, Assert_failure, _t_], 1);
          }),
      main_fun =
        check
         (function(main){
           var match = main[5];
           if(typeof match === "number"){if(0 === match) return 0;}
           else if(4 === match[0]){
            var t$0 = match[1];
            if(t === t$0) return 0;
            throw caml_maybe_attach_backtrace([0, Assert_failure, _x_], 1);
           }
           throw caml_maybe_attach_backtrace([0, Assert_failure, _w_], 1);
          });
     caml_call1(main_fun, main$0);
     caml_call1(lhs_change_fun, lhs_change$0);
     caml_call1(rhs_scope_fun, rhs_scope$0);
     return caml_call1
             (all_nodes_created_on_rhs_fun, all_nodes_created_on_rhs$0);
    }
    function _C_(x_018){
     function _D_(param){return _y_;}
     return sexp_of_t(function(param){return _z_;}, _D_, x_018);
    }
    return caml_call4(Base_Invariant[1], _A_, t, _C_, _B_);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_incremental);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incremental_Bind);
   var
    Incremental_Bind =
      [0, invariant, sexp_of_t, is_valid, iter_nodes_created_on_rhs];
   runtime.caml_register_global(43, Incremental_Bind, cst_Incremental_Bind$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incremental__Expert
//# unitInfo: Requires: Core, Core__Int, Incremental__Import, Incremental__Types, Ppx_assert_lib__Runtime, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Incremental_Expert$0 = "Incremental__Expert",
    cst_incremental$0 = "incremental",
    cst_src_expert_ml = "src/expert.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    pos$0 = "src/expert.ml:74:19",
    pos$1 = "src/expert.ml:67:22",
    pos = "src/expert.ml:60:21",
    Incremental_Import = global_data.Incremental__Import,
    Core = global_data.Core,
    Assert_failure = global_data.Assert_failure,
    Core_Int = global_data.Core__Int,
    Ppx_assert_lib_Runtime = global_data.Ppx_assert_lib__Runtime,
    Incremental_Types = global_data.Incremental__Types,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incremental_Expert$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incremental$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_expert_ml);
   caml_call2(Ppx_inline_test_lib[6], cst_incremental$0, "expert.ml");
   var
    _q_ = [0, cst_src_expert_ml, 140, 2],
    _p_ = [0, cst_src_expert_ml, 109, 2],
    _o_ = [0, cst_src_expert_ml, 102, 18],
    _m_ = [0, cst_src_expert_ml, 61, 15],
    _n_ = [0, cst_src_expert_ml, 53, 2],
    _f_ = [0, "will_fire_all_callbacks"],
    _g_ = [0, "num_invalid_children"],
    _h_ = [0, "force_stale"],
    _i_ = [0, "num_children"],
    _j_ = [0, "children"],
    _k_ = [0, "on_observability_change"],
    _l_ = [0, "f"],
    _d_ = [0, "_"],
    _e_ = [0, "E"],
    _a_ = [0, "index"],
    _b_ = [0, "on_change"],
    _c_ = [0, "child"],
    cst_incremental = cst_incremental$0,
    cst_Incremental_Expert = cst_Incremental_Expert$0;
   function sexp_of_edge(of_a_001, param){
    var
     child_003 = param[1],
     index_007 = param[3],
     arg_008 = caml_call2(Incremental_Import[6][2], Core[389], index_007),
     bnds_002 = [0, [1, [0, _a_, [0, arg_008, 0]]], 0];
    function _W_(_X_){return 0;}
    var
     arg_006 = caml_call1(Sexplib0_Sexp_conv[24], _W_),
     bnds_002$0 = [0, [1, [0, _b_, [0, arg_006, 0]]], bnds_002],
     arg_004 = caml_call2(Incremental_Types[15][1], of_a_001, child_003),
     bnds_002$1 = [0, [1, [0, _c_, [0, arg_004, 0]]], bnds_002$0];
    return [1, bnds_002$1];
   }
   function sexp_of_packed_edge(param){
    var res0_010 = sexp_of_edge(function(param){return _d_;}, param);
    return [1, [0, _e_, [0, res0_010, 0]]];
   }
   function sexp_of_t(of_a_011, param){
    var
     children_017 = param[3],
     num_children_019 = param[4],
     force_stale_021 = param[5],
     num_invalid_children_023 = param[6],
     will_fire_all_callbacks_025 = param[7],
     arg_026 = caml_call1(Core[323], will_fire_all_callbacks_025),
     bnds_012 = [0, [1, [0, _f_, [0, arg_026, 0]]], 0],
     arg_024 = caml_call1(Core[389], num_invalid_children_023),
     bnds_012$0 = [0, [1, [0, _g_, [0, arg_024, 0]]], bnds_012],
     arg_022 = caml_call1(Core[323], force_stale_021),
     bnds_012$1 = [0, [1, [0, _h_, [0, arg_022, 0]]], bnds_012$0],
     arg_020 = caml_call1(Core[389], num_children_019),
     bnds_012$2 = [0, [1, [0, _i_, [0, arg_020, 0]]], bnds_012$1],
     _R_ = caml_call1(Incremental_Import[6][2], sexp_of_packed_edge),
     arg_018 = caml_call2(Incremental_Import[7][10], _R_, children_017),
     bnds_012$3 = [0, [1, [0, _j_, [0, arg_018, 0]]], bnds_012$2];
    function _S_(_V_){return 0;}
    var
     arg_016 = caml_call1(Sexplib0_Sexp_conv[24], _S_),
     bnds_012$4 = [0, [1, [0, _k_, [0, arg_016, 0]]], bnds_012$3];
    function _T_(_U_){return 0;}
    var
     arg_014 = caml_call1(Sexplib0_Sexp_conv[24], _T_),
     bnds_012$5 = [0, [1, [0, _l_, [0, arg_014, 0]]], bnds_012$4];
    return [1, bnds_012$5];
   }
   function invariant(invariant_a, param){
    var
     children = param[3],
     num_children = param[4],
     _O_ = caml_call1(Incremental_Import[7][19], children);
    if(! caml_call2(Core[89], num_children, _O_))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _n_], 1);
    function _P_(expect, uopt){
     if(caml_call2(Core[92], expect, num_children)){
      var
       _Q_ = caml_call1(Incremental_Import[6][9], uopt)[3],
       got = caml_call1(Incremental_Import[6][9], _Q_),
       sexpifier = Core[389],
       equal = 0,
       message = 0,
       here = 0,
       comparator =
         function(a_027, b_028){return caml_call2(Core[382], a_027, b_028);};
      return caml_call8
              (Ppx_assert_lib_Runtime[3],
               pos,
               sexpifier,
               comparator,
               here,
               message,
               equal,
               expect,
               got);
     }
     if(caml_call1(Incremental_Import[6][7], uopt)) return 0;
     throw caml_maybe_attach_backtrace([0, Assert_failure, _m_], 1);
    }
    return caml_call2(Incremental_Import[7][30], children, _P_);
   }
   function invariant_about_num_invalid_ch(t, is_necessary){
    var children = t[3], num_children = t[4], num_invalid_children = t[6];
    if(! is_necessary){
     var
      sexpifier$0 = Core[389],
      expect$0 = 0,
      equal$0 = 0,
      message$0 = 0,
      here$0 = 0,
      comparator$0 =
        function(a_029, b_030){return caml_call2(Core[382], a_029, b_030);};
     return caml_call8
             (Ppx_assert_lib_Runtime[3],
              pos$1,
              sexpifier$0,
              comparator$0,
              here$0,
              message$0,
              equal$0,
              expect$0,
              num_invalid_children);
    }
    var count_invalid_children = [0, 0], _L_ = num_children - 1 | 0, _K_ = 0;
    if(_L_ >= 0){
     var i = _K_;
     for(;;){
      var
       _M_ = caml_call2(Incremental_Import[7][20], children, i),
       r = caml_call1(Incremental_Import[6][9], _M_);
      if(1 - caml_call1(Incremental_Types[15][3], r[1]))
       count_invalid_children[1]++;
      var _N_ = i + 1 | 0;
      if(_L_ === i) break;
      var i = _N_;
     }
    }
    var
     expect = count_invalid_children[1],
     sexpifier = Core[389],
     equal = 0,
     message = 0,
     here = 0;
    function comparator(a_031, b_032){
     return caml_call2(Core[382], a_031, b_032);
    }
    return caml_call8
            (Ppx_assert_lib_Runtime[3],
             pos$0,
             sexpifier,
             comparator,
             here,
             message,
             equal,
             expect,
             num_invalid_children);
   }
   function create(f, on_observability_change){
    return [0,
            f,
            on_observability_change,
            Incremental_Import[7][15],
            0,
            0,
            0,
            1];
   }
   function make_stale(t){return t[5] ? 534011858 : (t[5] = 1, 17724);}
   function incr_invalid_children(t){t[6] = t[6] + 1 | 0; return 0;}
   function decr_invalid_children(t){t[6] = t[6] - 1 | 0; return 0;}
   function add_child_edge(t, packed_edge){
    if(! caml_call1(Incremental_Import[6][7], packed_edge[3]))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _p_], 1);
    var _G_ = caml_call1(Incremental_Import[7][19], t[3]);
    if(caml_call2(Core[88], t[4], _G_)){
     if(Incremental_Import[1]){
      var _H_ = caml_call1(Incremental_Import[7][19], t[3]);
      if(! caml_call2(Core[90], t[4], _H_))
       throw caml_maybe_attach_backtrace([0, Assert_failure, _o_], 1);
     }
     var
      _I_ = 2 * caml_call1(Incremental_Import[7][19], t[3]) | 0,
      new_max = caml_call2(Core_Int[90], 2, _I_);
     t[3] = caml_call2(Incremental_Import[7][76], t[3], new_max);
    }
    var new_child_index = t[4];
    packed_edge[3] = caml_call1(Incremental_Import[6][6], new_child_index);
    var _J_ = caml_call1(Incremental_Import[6][6], packed_edge);
    caml_call3(Incremental_Import[7][75], t[3], new_child_index, _J_);
    t[4] = t[4] + 1 | 0;
    t[5] = 1;
    return new_child_index;
   }
   function swap_children(t, child_index1, child_index2){
    var
     _E_ = caml_call2(Incremental_Import[7][20], t[3], child_index1),
     edge1 = caml_call1(Incremental_Import[6][9], _E_),
     _F_ = caml_call2(Incremental_Import[7][20], t[3], child_index2),
     match = caml_call1(Incremental_Import[6][9], _F_);
    edge1[3] = caml_call1(Incremental_Import[6][6], child_index2);
    match[3] = caml_call1(Incremental_Import[6][6], child_index1);
    return caml_call3
            (Incremental_Import[7][23], t[3], child_index1, child_index2);
   }
   function last_child_edge_exn(t){
    var
     last_index = t[4] - 1 | 0,
     _D_ = caml_call2(Incremental_Import[7][20], t[3], last_index);
    return caml_call1(Incremental_Import[6][9], _D_);
   }
   function remove_last_child_edge_exn(t){
    var
     last_index = t[4] - 1 | 0,
     packed_edge_opt = caml_call2(Incremental_Import[7][20], t[3], last_index);
    caml_call3
     (Incremental_Import[7][75], t[3], last_index, Incremental_Import[6][5]);
    t[4] = last_index;
    t[5] = 1;
    if(! caml_call1(Incremental_Import[6][8], packed_edge_opt))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _q_], 1);
    var match = caml_call1(Incremental_Import[6][16], packed_edge_opt);
    match[3] = Incremental_Import[6][5];
    return 0;
   }
   function before_main_computation(t){
    if(caml_call2(Core[91], t[6], 0)) return 144245463;
    t[5] = 0;
    var will_fire_all_callbacks = t[7];
    t[7] = 0;
    if(will_fire_all_callbacks){
     var _z_ = t[4] - 1 | 0, _y_ = 0;
     if(_z_ >= 0){
      var i = _y_;
      for(;;){
       var
        _A_ = caml_call2(Incremental_Import[7][20], t[3], i),
        match = caml_call1(Incremental_Import[6][9], _A_),
        _B_ = caml_call1(Incremental_Import[6][9], match[1][4]);
       caml_call1(match[2], _B_);
       var _C_ = i + 1 | 0;
       if(_z_ === i) break;
       var i = _C_;
      }
     }
    }
    return 17724;
   }
   function observability_change(t, is_now_observable){
    caml_call1(t[2], is_now_observable);
    var
     _w_ = 1 - is_now_observable,
     _x_ = _w_ ? (t[7] = 1, t[6] = 0, 0) : _w_;
    return _x_;
   }
   function run_edge_callback(t, child_index){
    var _r_ = 1 - t[7];
    if(_r_){
     var
      _s_ = caml_call2(Incremental_Import[7][20], t[3], child_index),
      r = caml_call1(Incremental_Import[6][9], _s_),
      _t_ = caml_call1(Incremental_Import[6][8], r[1][4]);
     if(_t_){
      var _u_ = caml_call1(Incremental_Import[6][16], r[1][4]);
      return caml_call1(r[2], _u_);
     }
     var _v_ = _t_;
    }
    else
     var _v_ = _r_;
    return _v_;
   }
   caml_call1(Ppx_inline_test_lib[7], cst_incremental);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incremental_Expert);
   var
    Incremental_Expert =
      [0,
       invariant,
       sexp_of_t,
       sexp_of_edge,
       invariant_about_num_invalid_ch,
       create,
       make_stale,
       incr_invalid_children,
       decr_invalid_children,
       add_child_edge,
       swap_children,
       last_child_edge_exn,
       remove_last_child_edge_exn,
       before_main_computation,
       observability_change,
       run_edge_callback];
   runtime.caml_register_global
    (38, Incremental_Expert, cst_Incremental_Expert$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incremental__Sexp_of
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Incremental_Sexp_of = "Incremental__Sexp_of",
    cst_incremental = "incremental";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incremental_Sexp_of);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incremental);
   caml_call1(Ppx_expect_runtime[1][1], "src/sexp_of.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_incremental, "sexp_of.ml");
   caml_call1(Ppx_inline_test_lib[7], cst_incremental);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incremental_Sexp_of);
   var Incremental_Sexp_of = [0];
   runtime.caml_register_global
    (11, Incremental_Sexp_of, cst_Incremental_Sexp_of);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incremental__Scope
//# unitInfo: Requires: Incremental__Bind, Incremental__Import, Incremental__Types, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Incremental_Scope$0 = "Incremental__Scope",
    cst_incremental$0 = "incremental",
    cst_src_scope_ml = "src/scope.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Assert_failure = global_data.Assert_failure,
    Incremental_Import = global_data.Incremental__Import,
    Incremental_Types = global_data.Incremental__Types,
    Incremental_Bind = global_data.Incremental__Bind,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incremental_Scope$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incremental$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_scope_ml);
   caml_call2(Ppx_inline_test_lib[6], cst_incremental$0, "scope.ml");
   var
    include = Incremental_Types[21],
    sexp_of_t = include[1],
    _a_ = [0, cst_src_scope_ml, 37, 2],
    cst_incremental = cst_incremental$0,
    cst_Incremental_Scope = cst_Incremental_Scope$0,
    top = 0;
   function is_top(param){return param ? 0 : 1;}
   function invariant(param){
    if(! param) return 0;
    var bind = param[1];
    function _b_(_e_){return 0;}
    function _c_(_d_){return 0;}
    return caml_call3(Incremental_Bind[1], _c_, _b_, bind);
   }
   function height(param){
    if(! param) return -1;
    var bind = param[1];
    return bind[4][14];
   }
   function is_valid(param){
    if(! param) return 1;
    var bind = param[1];
    return caml_call1(Incremental_Bind[3], bind);
   }
   function is_necessary(param){
    if(! param) return 1;
    var bind = param[1];
    return caml_call1(Incremental_Types[15][4], bind[1]);
   }
   function add_node(t, node){
    if(node[12] !== t)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
    if(! t) return 0;
    var bind = t[1];
    node[13] = bind[7];
    bind[7] = caml_call1(Incremental_Import[6][6], node);
    return 0;
   }
   caml_call1(Ppx_inline_test_lib[7], cst_incremental);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incremental_Scope);
   var
    Incremental_Scope =
      [0,
       sexp_of_t,
       invariant,
       top,
       is_top,
       height,
       is_valid,
       is_necessary,
       add_node];
   runtime.caml_register_global
    (16, Incremental_Scope, cst_Incremental_Scope$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incremental__Freeze
//# unitInfo: Requires: Base__Invariant, Incremental__Scope, Incremental__Types, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Incremental_Freeze$0 = "Incremental__Freeze",
    cst_incremental$0 = "incremental",
    cst_main$0 = "main",
    cst_src_freeze_ml = "src/freeze.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Incremental_Scope = global_data.Incremental__Scope,
    Assert_failure = global_data.Assert_failure,
    Base_Invariant = global_data.Base__Invariant,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Incremental_Types = global_data.Incremental__Types,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incremental_Freeze$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incremental$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_freeze_ml);
   caml_call2(Ppx_inline_test_lib[6], cst_incremental$0, "freeze.ml");
   var
    _i_ = [0, "_"],
    _h_ = [0, cst_src_freeze_ml, 19, 11],
    _g_ = [0, cst_src_freeze_ml, 23, 26],
    _f_ = [0, cst_src_freeze_ml, 24, 18],
    _j_ = [0, cst_src_freeze_ml, 14, 255, 277],
    _c_ = [0, "only_freeze_when"],
    _d_ = [0, "child"],
    _e_ = [0, cst_main$0],
    cst_main = cst_main$0,
    cst_incremental = cst_incremental$0,
    cst_Incremental_Freeze = cst_Incremental_Freeze$0;
   function main(r){return r[1];}
   function _a_(r, v){return [0, v, r[2], r[3]];}
   var
    _b_ = 0,
    main$0 = [0, function(param){return 0;}, cst_main, _b_, main, _a_];
   function sexp_of_t(of_a_001, param){
    var child_005 = param[2], main_003 = param[1], bnds_002 = 0;
    function _m_(_n_){return 0;}
    var
     arg_008 = caml_call1(Sexplib0_Sexp_conv[24], _m_),
     bnds_002$0 = [0, [1, [0, _c_, [0, arg_008, 0]]], bnds_002],
     arg_006 = caml_call2(Incremental_Types[15][1], of_a_001, child_005),
     bnds_002$1 = [0, [1, [0, _d_, [0, arg_006, 0]]], bnds_002$0],
     arg_004 = caml_call2(Incremental_Types[15][1], of_a_001, main_003),
     bnds_002$2 = [0, [1, [0, _e_, [0, arg_004, 0]]], bnds_002$1];
    return [1, bnds_002$2];
   }
   function invariant(invariant_a, t){
    function _k_(param){
     function f(main){
      if(! caml_call1(Incremental_Scope[4], main[12]))
       throw caml_maybe_attach_backtrace([0, Assert_failure, _h_], 1);
      var match = main[5];
      if(typeof match === "number"){if(0 === match) return 0;}
      else
       switch(match[0]){
         case 5:
          return 0;
         case 7:
          var t$0 = match[1];
          if(t === t$0) return 0;
          throw caml_maybe_attach_backtrace([0, Assert_failure, _g_], 1);
       }
      throw caml_maybe_attach_backtrace([0, Assert_failure, _f_], 1);
     }
     var main_fun = caml_call2(Base_Invariant[2], t, f);
     caml_call1(main_fun, main$0);
     return 0;
    }
    function _l_(x_009){
     return sexp_of_t(function(param){return _i_;}, x_009);
    }
    return caml_call4(Base_Invariant[1], _j_, t, _l_, _k_);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_incremental);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incremental_Freeze);
   var Incremental_Freeze = [0, invariant, sexp_of_t];
   runtime.caml_register_global
    (27, Incremental_Freeze, cst_Incremental_Freeze$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incremental__If_then_else
//# unitInfo: Requires: Base__Invariant, Core, Incremental__Import, Incremental__Types, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Incremental_If_then_else$0 = "Incremental__If_then_else",
    cst_current_branch$0 = "current_branch",
    cst_incremental$0 = "incremental",
    cst_main$0 = "main",
    cst_src_if_then_else_ml = "src/if_then_else.ml",
    cst_test_change$0 = "test_change",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Assert_failure = global_data.Assert_failure,
    Incremental_Import = global_data.Incremental__Import,
    Base_Invariant = global_data.Base__Invariant,
    Incremental_Types = global_data.Incremental__Types,
    Core = global_data.Core,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incremental_If_then_else$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incremental$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_if_then_else_ml);
   caml_call2(Ppx_inline_test_lib[6], cst_incremental$0, "if_then_else.ml");
   var
    _q_ = [0, "_"],
    _p_ = [0, cst_src_if_then_else_ml, 26, 32],
    _o_ = [0, cst_src_if_then_else_ml, 33, 34],
    _n_ = [0, cst_src_if_then_else_ml, 34, 18],
    _m_ = [0, cst_src_if_then_else_ml, 40, 13],
    _r_ = [0, cst_src_if_then_else_ml, 19, 398, 420],
    _g_ = [0, "else_"],
    _h_ = [0, "then_"],
    _i_ = [0, cst_current_branch$0],
    _j_ = [0, cst_test_change$0],
    _k_ = [0, "test"],
    _l_ = [0, cst_main$0],
    cst_current_branch = cst_current_branch$0,
    cst_test_change = cst_test_change$0,
    cst_main = cst_main$0,
    cst_incremental = cst_incremental$0,
    cst_Incremental_If_then_else = cst_Incremental_If_then_else$0;
   function current_branch(r){return r[4];}
   function set_current_branch(r, v){r[4] = v; return 0;}
   function test_change(r){return r[3];}
   function main(r){return r[1];}
   function _a_(r, v){return [0, r[1], r[2], r[3], v, r[5], r[6]];}
   var
    _b_ = [0, set_current_branch],
    current_branch$0 =
      [0,
       function(param){return 0;},
       cst_current_branch,
       _b_,
       current_branch,
       _a_];
   function _c_(r, v){return [0, r[1], r[2], v, r[4], r[5], r[6]];}
   var
    _d_ = 0,
    test_change$0 =
      [0, function(param){return 0;}, cst_test_change, _d_, test_change, _c_];
   function _e_(r, v){return [0, v, r[2], r[3], r[4], r[5], r[6]];}
   var
    _f_ = 0,
    main$0 = [0, function(param){return 0;}, cst_main, _f_, main, _e_];
   function sexp_of_t(of_a_001, param){
    var
     test_change_007 = param[3],
     test_005 = param[2],
     main_003 = param[1],
     current_branch_009 = param[4],
     else_013 = param[6],
     then_011 = param[5],
     arg_014 = caml_call2(Incremental_Types[15][1], of_a_001, else_013),
     bnds_002 = [0, [1, [0, _g_, [0, arg_014, 0]]], 0],
     arg_012 = caml_call2(Incremental_Types[15][1], of_a_001, then_011),
     bnds_002$0 = [0, [1, [0, _h_, [0, arg_012, 0]]], bnds_002],
     _v_ = caml_call1(Incremental_Types[15][1], of_a_001),
     arg_010 = caml_call2(Incremental_Import[6][2], _v_, current_branch_009),
     bnds_002$1 = [0, [1, [0, _i_, [0, arg_010, 0]]], bnds_002$0],
     arg_008 =
       caml_call2(Incremental_Types[15][1], Core[620], test_change_007),
     bnds_002$2 = [0, [1, [0, _j_, [0, arg_008, 0]]], bnds_002$1],
     arg_006 = caml_call2(Incremental_Types[15][1], Core[323], test_005),
     bnds_002$3 = [0, [1, [0, _k_, [0, arg_006, 0]]], bnds_002$2],
     arg_004 = caml_call2(Incremental_Types[15][1], of_a_001, main_003),
     bnds_002$4 = [0, [1, [0, _l_, [0, arg_004, 0]]], bnds_002$3];
    return [1, bnds_002$4];
   }
   function invariant(invariant_a, t){
    function _s_(param){
     function check(f){return caml_call2(Base_Invariant[2], t, f);}
     var
      current_branch_fun =
        check
         (function(current_branch){
           var _u_ = caml_call1(Incremental_Import[6][8], current_branch);
           if(! _u_) return _u_;
           var
            current_branch$0 =
              caml_call1(Incremental_Import[6][9], current_branch);
           if(current_branch$0 !== t[5] && current_branch$0 !== t[6])
            throw caml_maybe_attach_backtrace([0, Assert_failure, _m_], 1);
           return 0;
          }),
      test_change_fun =
        check
         (function(test_change){
           var match = test_change[5];
           if(typeof match === "number"){if(0 === match) return 0;}
           else if(8 === match[0]){
            var t$0 = match[1];
            if(t === t$0) return 0;
            throw caml_maybe_attach_backtrace([0, Assert_failure, _o_], 1);
           }
           throw caml_maybe_attach_backtrace([0, Assert_failure, _n_], 1);
          }),
      main_fun =
        check
         (function(main){
           var match = main[5];
           if(typeof match === "number"){if(0 === match) return 0;}
           else if(9 === match[0]){
            var t$0 = match[1];
            if(t === t$0) return 0;
            throw caml_maybe_attach_backtrace([0, Assert_failure, _p_], 1);
           }
           return 0;
          });
     caml_call1(main_fun, main$0);
     caml_call1(test_change_fun, test_change$0);
     caml_call1(current_branch_fun, current_branch$0);
     return 0;
    }
    function _t_(x_015){
     return sexp_of_t(function(param){return _q_;}, x_015);
    }
    return caml_call4(Base_Invariant[1], _r_, t, _t_, _s_);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_incremental);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incremental_If_then_else);
   var Incremental_If_then_else = [0, invariant, sexp_of_t];
   runtime.caml_register_global
    (34, Incremental_If_then_else, cst_Incremental_If_then_else$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incremental__Join
//# unitInfo: Requires: Base__Invariant, Core, Incremental__Import, Incremental__Types, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Incremental_Join$0 = "Incremental__Join",
    cst_incremental$0 = "incremental",
    cst_lhs_change$0 = "lhs_change",
    cst_main$0 = "main",
    cst_src_join_ml = "src/join.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Assert_failure = global_data.Assert_failure,
    Base_Invariant = global_data.Base__Invariant,
    Incremental_Types = global_data.Incremental__Types,
    Incremental_Import = global_data.Incremental__Import,
    Core = global_data.Core,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incremental_Join$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incremental$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_join_ml);
   caml_call2(Ppx_inline_test_lib[6], cst_incremental$0, "join.ml");
   var
    _m_ = [0, "_"],
    _l_ = [0, cst_src_join_ml, 24, 29],
    _k_ = [0, cst_src_join_ml, 25, 18],
    _j_ = [0, cst_src_join_ml, 31, 35],
    _i_ = [0, cst_src_join_ml, 32, 18],
    _n_ = [0, cst_src_join_ml, 17, 338, 360],
    _e_ = [0, "rhs"],
    _f_ = [0, cst_lhs_change$0],
    _g_ = [0, "lhs"],
    _h_ = [0, cst_main$0],
    cst_lhs_change = cst_lhs_change$0,
    cst_main = cst_main$0,
    cst_incremental = cst_incremental$0,
    cst_Incremental_Join = cst_Incremental_Join$0;
   function lhs_change(r){return r[3];}
   function main(r){return r[1];}
   function _a_(r, v){return [0, r[1], r[2], v, r[4]];}
   var
    _b_ = 0,
    lhs_change$0 =
      [0, function(param){return 0;}, cst_lhs_change, _b_, lhs_change, _a_];
   function _c_(r, v){return [0, v, r[2], r[3], r[4]];}
   var
    _d_ = 0,
    main$0 = [0, function(param){return 0;}, cst_main, _d_, main, _c_];
   function sexp_of_t(of_a_001, param){
    var
     lhs_change_007 = param[3],
     lhs_005 = param[2],
     main_003 = param[1],
     rhs_009 = param[4],
     _q_ = caml_call1(Incremental_Types[15][1], of_a_001),
     arg_010 = caml_call2(Incremental_Import[6][2], _q_, rhs_009),
     bnds_002 = [0, [1, [0, _e_, [0, arg_010, 0]]], 0],
     arg_008 = caml_call2(Incremental_Types[15][1], Core[620], lhs_change_007),
     bnds_002$0 = [0, [1, [0, _f_, [0, arg_008, 0]]], bnds_002],
     _r_ = caml_call1(Incremental_Types[15][1], of_a_001),
     arg_006 = caml_call2(Incremental_Types[15][1], _r_, lhs_005),
     bnds_002$1 = [0, [1, [0, _g_, [0, arg_006, 0]]], bnds_002$0],
     arg_004 = caml_call2(Incremental_Types[15][1], of_a_001, main_003),
     bnds_002$2 = [0, [1, [0, _h_, [0, arg_004, 0]]], bnds_002$1];
    return [1, bnds_002$2];
   }
   function invariant(invariant_a, t){
    function _o_(param){
     function check(f){return caml_call2(Base_Invariant[2], t, f);}
     var
      lhs_change_fun =
        check
         (function(lhs_change){
           var match = lhs_change[5];
           if(typeof match === "number"){if(0 === match) return 0;}
           else if(10 === match[0]){
            var t$0 = match[1];
            if(t === t$0) return 0;
            throw caml_maybe_attach_backtrace([0, Assert_failure, _j_], 1);
           }
           throw caml_maybe_attach_backtrace([0, Assert_failure, _i_], 1);
          }),
      main_fun =
        check
         (function(main){
           var match = main[5];
           if(typeof match === "number"){if(0 === match) return 0;}
           else if(11 === match[0]){
            var t$0 = match[1];
            if(t === t$0) return 0;
            throw caml_maybe_attach_backtrace([0, Assert_failure, _l_], 1);
           }
           throw caml_maybe_attach_backtrace([0, Assert_failure, _k_], 1);
          });
     caml_call1(main_fun, main$0);
     caml_call1(lhs_change_fun, lhs_change$0);
     return 0;
    }
    function _p_(x_011){
     return sexp_of_t(function(param){return _m_;}, x_011);
    }
    return caml_call4(Base_Invariant[1], _n_, t, _p_, _o_);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_incremental);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incremental_Join);
   var Incremental_Join = [0, invariant, sexp_of_t];
   runtime.caml_register_global(30, Incremental_Join, cst_Incremental_Join$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incremental__Snapshot
//# unitInfo: Requires: Base__Invariant, Incremental__Import, Incremental__Scope, Incremental__Types, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Incremental_Snapshot$0 = "Incremental__Snapshot",
    cst_before$0 = "before",
    cst_incremental$0 = "incremental",
    cst_main$0 = "main",
    cst_src_snapshot_ml = "src/snapshot.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Incremental_Scope = global_data.Incremental__Scope,
    Assert_failure = global_data.Assert_failure,
    Base_Invariant = global_data.Base__Invariant,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Incremental_Types = global_data.Incremental__Types,
    Incremental_Import = global_data.Incremental__Import,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incremental_Snapshot$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incremental$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_snapshot_ml);
   caml_call2(Ppx_inline_test_lib[6], cst_incremental$0, "snapshot.ml");
   var
    _m_ = [0, "_"],
    _l_ = [0, cst_src_snapshot_ml, 21, 11],
    _k_ = [0, cst_src_snapshot_ml, 25, 28],
    _j_ = [0, cst_src_snapshot_ml, 26, 18],
    _n_ = [0, cst_src_snapshot_ml, 16, 302, 324],
    _e_ = [0, "clock"],
    _f_ = [0, "value_at"],
    _g_ = [0, cst_before$0],
    _h_ = [0, "at"],
    _i_ = [0, cst_main$0],
    cst_before = cst_before$0,
    cst_main = cst_main$0,
    cst_incremental = cst_incremental$0,
    cst_Incremental_Snapshot = cst_Incremental_Snapshot$0;
   function before(r){return r[3];}
   function main(r){return r[1];}
   function _a_(r, v){return [0, r[1], r[2], v, r[4], r[5]];}
   var
    _b_ = 0,
    before$0 = [0, function(param){return 0;}, cst_before, _b_, before, _a_];
   function _c_(r, v){return [0, v, r[2], r[3], r[4], r[5]];}
   var
    _d_ = 0,
    main$0 = [0, function(param){return 0;}, cst_main, _d_, main, _c_];
   function sexp_of_t(of_a_001, param){
    var
     clock_011 = param[5],
     value_at_009 = param[4],
     before_007 = param[3],
     at_005 = param[2],
     main_003 = param[1],
     arg_012 = caml_call1(Sexplib0_Sexp_conv[23], clock_011),
     bnds_002 = [0, [1, [0, _e_, [0, arg_012, 0]]], 0],
     arg_010 = caml_call2(Incremental_Types[15][1], of_a_001, value_at_009),
     bnds_002$0 = [0, [1, [0, _f_, [0, arg_010, 0]]], bnds_002],
     arg_008 = caml_call1(of_a_001, before_007),
     bnds_002$1 = [0, [1, [0, _g_, [0, arg_008, 0]]], bnds_002$0],
     arg_006 = caml_call1(Incremental_Import[4][126], at_005),
     bnds_002$2 = [0, [1, [0, _h_, [0, arg_006, 0]]], bnds_002$1],
     arg_004 = caml_call2(Incremental_Types[15][1], of_a_001, main_003),
     bnds_002$3 = [0, [1, [0, _i_, [0, arg_004, 0]]], bnds_002$2];
    return [1, bnds_002$3];
   }
   function invariant(invariant_a, t){
    function _o_(param){
     function check(f){return caml_call2(Base_Invariant[2], t, f);}
     var
      before_fun = check(invariant_a),
      main_fun =
        check
         (function(main){
           if(! caml_call1(Incremental_Scope[4], main[12]))
            throw caml_maybe_attach_backtrace([0, Assert_failure, _l_], 1);
           var match = main[5];
           if(typeof match === "number"){if(0 === match) return 0;}
           else
            switch(match[0]){
              case 5:
               return 0;
              case 13:
               var t$0 = match[1];
               if(t === t$0) return 0;
               throw caml_maybe_attach_backtrace([0, Assert_failure, _k_], 1);
            }
           throw caml_maybe_attach_backtrace([0, Assert_failure, _j_], 1);
          });
     caml_call1(main_fun, main$0);
     caml_call1(before_fun, before$0);
     return 0;
    }
    function _p_(x_013){
     return sexp_of_t(function(param){return _m_;}, x_013);
    }
    return caml_call4(Base_Invariant[1], _n_, t, _p_, _o_);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_incremental);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incremental_Snapshot);
   var Incremental_Snapshot = [0, invariant, sexp_of_t];
   runtime.caml_register_global
    (32, Incremental_Snapshot, cst_Incremental_Snapshot$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incremental__Kind
//# unitInfo: Requires: Core, Incremental__Array_fold, Incremental__At, Incremental__At_intervals, Incremental__Bind, Incremental__Expert, Incremental__Freeze, Incremental__If_then_else, Incremental__Import, Incremental__Join, Incremental__Snapshot, Incremental__Step_function_node, Incremental__Types, Incremental__Unordered_array_fold, Incremental__Var, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Array_fold$0 = "Array_fold",
    cst_At$0 = "At",
    cst_At_intervals$0 = "At_intervals",
    cst_Bind_lhs_change$0 = "Bind_lhs_change",
    cst_Bind_main$0 = "Bind_main",
    cst_Const$0 = "Const",
    cst_Expert$0 = "Expert",
    cst_Freeze$0 = "Freeze",
    cst_If_test_change$0 = "If_test_change",
    cst_If_then_else$0 = "If_then_else",
    cst_Incremental_Kind$0 = "Incremental__Kind",
    cst_Invalid$0 = "Invalid",
    cst_Join_lhs_change$0 = "Join_lhs_change",
    cst_Join_main$0 = "Join_main",
    cst_Map$0 = "Map",
    cst_Map10$0 = "Map10",
    cst_Map11$0 = "Map11",
    cst_Map12$0 = "Map12",
    cst_Map13$0 = "Map13",
    cst_Map14$0 = "Map14",
    cst_Map15$0 = "Map15",
    cst_Map2$0 = "Map2",
    cst_Map3$0 = "Map3",
    cst_Map4$0 = "Map4",
    cst_Map5$0 = "Map5",
    cst_Map6$0 = "Map6",
    cst_Map7$0 = "Map7",
    cst_Map8$0 = "Map8",
    cst_Map9$0 = "Map9",
    cst_Snapshot$0 = "Snapshot",
    cst_Step_function$0 = "Step_function",
    cst_Uninitialized$0 = "Uninitialized",
    cst_Unordered_array_fold$0 = "Unordered_array_fold",
    cst_Var$0 = "Var",
    cst = "_",
    cst_incremental$0 = "incremental",
    cst_src_kind_ml = "src/kind.ml",
    caml_check_bound = runtime.caml_check_bound;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Core = global_data.Core,
    Incremental_Import = global_data.Incremental__Import,
    Incremental_Array_fold = global_data.Incremental__Array_fold,
    Incremental_At = global_data.Incremental__At,
    Incremental_At_intervals = global_data.Incremental__At_intervals,
    Incremental_Bind = global_data.Incremental__Bind,
    Incremental_Expert = global_data.Incremental__Expert,
    Incremental_Freeze = global_data.Incremental__Freeze,
    Incremental_If_then_else = global_data.Incremental__If_then_else,
    Incremental_Join = global_data.Incremental__Join,
    Incremental_Snapshot = global_data.Incremental__Snapshot,
    Incremental_Step_function_node =
      global_data.Incremental__Step_function_node,
    Incremental_Unordered_array_fo =
      global_data.Incremental__Unordered_array_fold,
    Incremental_Var = global_data.Incremental__Var,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Incremental_Types = global_data.Incremental__Types,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incremental_Kind$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incremental$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_kind_ml);
   caml_call2(Ppx_inline_test_lib[6], cst_incremental$0, "kind.ml");
   var
    _bQ_ = [0, cst],
    cst_Kind_slow_get_child_got_in = "Kind.slow_get_child got invalid index",
    _bR_ = [0, cst_src_kind_ml, 602, 14347, 14361],
    cst_Invalid = cst_Invalid$0,
    cst_Uninitialized = cst_Uninitialized$0,
    cst_Array_fold = cst_Array_fold$0,
    cst_At = cst_At$0,
    cst_At_intervals = cst_At_intervals$0,
    cst_Bind_lhs_change = cst_Bind_lhs_change$0,
    cst_Bind_main = cst_Bind_main$0,
    cst_Const = cst_Const$0,
    cst_Expert = cst_Expert$0,
    cst_Freeze = cst_Freeze$0,
    cst_If_test_change = cst_If_test_change$0,
    cst_If_then_else = cst_If_then_else$0,
    cst_Join_lhs_change = cst_Join_lhs_change$0,
    cst_Join_main = cst_Join_main$0,
    cst_Map = cst_Map$0,
    cst_Snapshot = cst_Snapshot$0,
    cst_Step_function = cst_Step_function$0,
    cst_Unordered_array_fold = cst_Unordered_array_fold$0,
    cst_Var = cst_Var$0,
    cst_Map2 = cst_Map2$0,
    cst_Map3 = cst_Map3$0,
    cst_Map4 = cst_Map4$0,
    cst_Map5 = cst_Map5$0,
    cst_Map6 = cst_Map6$0,
    cst_Map7 = cst_Map7$0,
    cst_Map8 = cst_Map8$0,
    cst_Map9 = cst_Map9$0,
    cst_Map10 = cst_Map10$0,
    cst_Map11 = cst_Map11$0,
    cst_Map12 = cst_Map12$0,
    cst_Map13 = cst_Map13$0,
    cst_Map14 = cst_Map14$0,
    cst_Map15 = cst_Map15$0,
    _bO_ = [0, cst],
    _bN_ = [0, cst],
    _bM_ = [0, cst],
    _bL_ = [0, cst],
    _bK_ = [0, cst],
    _bJ_ = [0, cst],
    _bI_ = [0, cst],
    _bH_ = [0, cst],
    _bG_ = [0, cst],
    _bF_ = [0, cst],
    _bE_ = [0, cst],
    _bD_ = [0, cst],
    _bC_ = [0, cst],
    _bB_ = [0, cst],
    _bA_ = [0, cst],
    _by_ = [0, cst],
    _bx_ = [0, cst],
    _bw_ = [0, cst],
    _bv_ = [0, cst],
    _bu_ = [0, cst],
    _bt_ = [0, cst],
    _bs_ = [0, cst],
    _br_ = [0, cst],
    _bq_ = [0, cst],
    _bp_ = [0, cst],
    _bo_ = [0, cst],
    _bn_ = [0, cst],
    _bm_ = [0, cst],
    _bl_ = [0, cst],
    _bj_ = [0, cst],
    _bi_ = [0, cst],
    _bh_ = [0, cst],
    _bg_ = [0, cst],
    _bf_ = [0, cst],
    _be_ = [0, cst],
    _bd_ = [0, cst],
    _bc_ = [0, cst],
    _bb_ = [0, cst],
    _ba_ = [0, cst],
    _a$_ = [0, cst],
    _a__ = [0, cst],
    _a9_ = [0, cst],
    _a7_ = [0, cst],
    _a6_ = [0, cst],
    _a5_ = [0, cst],
    _a4_ = [0, cst],
    _a3_ = [0, cst],
    _a2_ = [0, cst],
    _a1_ = [0, cst],
    _a0_ = [0, cst],
    _aZ_ = [0, cst],
    _aY_ = [0, cst],
    _aX_ = [0, cst],
    _aW_ = [0, cst],
    _aU_ = [0, cst],
    _aT_ = [0, cst],
    _aS_ = [0, cst],
    _aR_ = [0, cst],
    _aQ_ = [0, cst],
    _aP_ = [0, cst],
    _aO_ = [0, cst],
    _aN_ = [0, cst],
    _aM_ = [0, cst],
    _aL_ = [0, cst],
    _aK_ = [0, cst],
    _aI_ = [0, cst],
    _aH_ = [0, cst],
    _aG_ = [0, cst],
    _aF_ = [0, cst],
    _aE_ = [0, cst],
    _aD_ = [0, cst],
    _aC_ = [0, cst],
    _aB_ = [0, cst],
    _aA_ = [0, cst],
    _az_ = [0, cst],
    _ax_ = [0, cst],
    _aw_ = [0, cst],
    _av_ = [0, cst],
    _au_ = [0, cst],
    _at_ = [0, cst],
    _as_ = [0, cst],
    _ar_ = [0, cst],
    _aq_ = [0, cst],
    _ap_ = [0, cst],
    _an_ = [0, cst],
    _am_ = [0, cst],
    _al_ = [0, cst],
    _ak_ = [0, cst],
    _aj_ = [0, cst],
    _ai_ = [0, cst],
    _ah_ = [0, cst],
    _ag_ = [0, cst],
    _ae_ = [0, cst],
    _ad_ = [0, cst],
    _ac_ = [0, cst],
    _ab_ = [0, cst],
    _aa_ = [0, cst],
    _$_ = [0, cst],
    ___ = [0, cst],
    _Y_ = [0, cst],
    _X_ = [0, cst],
    _W_ = [0, cst],
    _V_ = [0, cst],
    _U_ = [0, cst],
    _T_ = [0, cst],
    _R_ = [0, cst],
    _Q_ = [0, cst],
    _P_ = [0, cst],
    _O_ = [0, cst],
    _N_ = [0, cst],
    _L_ = [0, cst],
    _K_ = [0, cst],
    _J_ = [0, cst],
    _I_ = [0, cst],
    _G_ = [0, cst],
    _F_ = [0, cst],
    _E_ = [0, cst],
    _C_ = [0, cst],
    _B_ = [0, cst],
    _y_ = [0, cst],
    _u_ = [0, cst],
    _r_ = [0, cst],
    _o_ = [0, cst],
    _j_ = [0, cst],
    _h_ = [0, cst],
    _g_ = [0, cst],
    _c_ = [0, cst],
    _a_ = [0, cst_Invalid$0],
    _b_ = [0, cst_Uninitialized$0],
    _d_ = [0, cst_Array_fold$0],
    _e_ = [0, cst_At$0],
    _f_ = [0, cst_At_intervals$0],
    _i_ = [0, cst_Bind_lhs_change$0],
    _k_ = [0, cst_Bind_main$0],
    _l_ = [0, cst_Const$0],
    _m_ = [0, cst_Expert$0],
    _n_ = [0, cst_Freeze$0],
    _p_ = [0, cst_If_test_change$0],
    _q_ = [0, cst_If_then_else$0],
    _s_ = [0, cst_Join_lhs_change$0],
    _t_ = [0, cst_Join_main$0],
    _v_ = [0, cst_Map$0],
    _w_ = [0, cst_Snapshot$0],
    _x_ = [0, cst_Step_function$0],
    _z_ = [0, cst_Unordered_array_fold$0],
    _A_ = [0, cst_Var$0],
    _D_ = [0, cst_Map2$0],
    _H_ = [0, cst_Map3$0],
    _M_ = [0, cst_Map4$0],
    _S_ = [0, cst_Map5$0],
    _Z_ = [0, cst_Map6$0],
    _af_ = [0, cst_Map7$0],
    _ao_ = [0, cst_Map8$0],
    _ay_ = [0, cst_Map9$0],
    _aJ_ = [0, cst_Map10$0],
    _aV_ = [0, cst_Map11$0],
    _a8_ = [0, cst_Map12$0],
    _bk_ = [0, cst_Map13$0],
    _bz_ = [0, cst_Map14$0],
    _bP_ = [0, cst_Map15$0],
    cst_incremental = cst_incremental$0,
    cst_Incremental_Kind = cst_Incremental_Kind$0;
   function sexp_of_t(of_a_001, param){
    if(typeof param === "number") return 0 === param ? _a_ : _b_;
    switch(param[0]){
      case 0:
       var
        arg0_002 = param[1],
        _co_ = function(param){return _c_;},
        res0_003 =
          caml_call3(Incremental_Array_fold[1], _co_, of_a_001, arg0_002);
       return [1, [0, _d_, [0, res0_003, 0]]];
      case 1:
       var
        arg0_004 = param[1],
        res0_005 = caml_call1(Incremental_At[2], arg0_004);
       return [1, [0, _e_, [0, res0_005, 0]]];
      case 2:
       var
        arg0_006 = param[1],
        res0_007 = caml_call1(Incremental_At_intervals[2], arg0_006);
       return [1, [0, _f_, [0, res0_007, 0]]];
      case 3:
       var
        arg0_008 = param[1],
        _cp_ = function(param){return _g_;},
        _cq_ = function(param){return _h_;},
        res0_009 = caml_call3(Incremental_Bind[2], _cq_, _cp_, arg0_008);
       return [1, [0, _i_, [0, res0_009, 0]]];
      case 4:
       var
        arg0_010 = param[1],
        _cr_ = function(param){return _j_;},
        res0_011 = caml_call3(Incremental_Bind[2], _cr_, of_a_001, arg0_010);
       return [1, [0, _k_, [0, res0_011, 0]]];
      case 5:
       var arg0_012 = param[1], res0_013 = caml_call1(of_a_001, arg0_012);
       return [1, [0, _l_, [0, res0_013, 0]]];
      case 6:
       var
        arg0_014 = param[1],
        res0_015 = caml_call2(Incremental_Expert[2], of_a_001, arg0_014);
       return [1, [0, _m_, [0, res0_015, 0]]];
      case 7:
       var
        arg0_016 = param[1],
        res0_017 = caml_call2(Incremental_Freeze[2], of_a_001, arg0_016);
       return [1, [0, _n_, [0, res0_017, 0]]];
      case 8:
       var
        arg0_018 = param[1],
        _cs_ = function(param){return _o_;},
        res0_019 = caml_call2(Incremental_If_then_else[2], _cs_, arg0_018);
       return [1, [0, _p_, [0, res0_019, 0]]];
      case 9:
       var
        arg0_020 = param[1],
        res0_021 = caml_call2(Incremental_If_then_else[2], of_a_001, arg0_020);
       return [1, [0, _q_, [0, res0_021, 0]]];
      case 10:
       var
        arg0_022 = param[1],
        _ct_ = function(param){return _r_;},
        res0_023 = caml_call2(Incremental_Join[2], _ct_, arg0_022);
       return [1, [0, _s_, [0, res0_023, 0]]];
      case 11:
       var
        arg0_024 = param[1],
        res0_025 = caml_call2(Incremental_Join[2], of_a_001, arg0_024);
       return [1, [0, _t_, [0, res0_025, 0]]];
      case 12:
       var
        arg1_027 = param[2],
        _cu_ = function(_eQ_){return 0;},
        res0_028 = caml_call1(Sexplib0_Sexp_conv[24], _cu_),
        _cv_ = function(param){return _u_;},
        res1_029 = caml_call2(Incremental_Types[15][1], _cv_, arg1_027);
       return [1, [0, _v_, [0, res0_028, [0, res1_029, 0]]]];
      case 13:
       var
        arg0_030 = param[1],
        res0_031 = caml_call2(Incremental_Snapshot[2], of_a_001, arg0_030);
       return [1, [0, _w_, [0, res0_031, 0]]];
      case 14:
       var
        arg0_032 = param[1],
        res0_033 =
          caml_call2(Incremental_Step_function_node[2], of_a_001, arg0_032);
       return [1, [0, _x_, [0, res0_033, 0]]];
      case 15:
       var
        arg0_034 = param[1],
        _cw_ = function(param){return _y_;},
        res0_035 =
          caml_call3
           (Incremental_Unordered_array_fo[2], _cw_, of_a_001, arg0_034);
       return [1, [0, _z_, [0, res0_035, 0]]];
      case 16:
       var
        arg0_036 = param[1],
        res0_037 = caml_call2(Incremental_Var[2], of_a_001, arg0_036);
       return [1, [0, _A_, [0, res0_037, 0]]];
      case 17:
       var
        arg2_040 = param[3],
        arg1_039 = param[2],
        _cx_ = function(_eP_){return 0;},
        res0_041 = caml_call1(Sexplib0_Sexp_conv[24], _cx_),
        _cy_ = function(param){return _B_;},
        res1_042 = caml_call2(Incremental_Types[15][1], _cy_, arg1_039),
        _cz_ = function(param){return _C_;},
        res2_043 = caml_call2(Incremental_Types[15][1], _cz_, arg2_040);
       return [1, [0, _D_, [0, res0_041, [0, res1_042, [0, res2_043, 0]]]]];
      case 18:
       var
        arg3_047 = param[4],
        arg2_046 = param[3],
        arg1_045 = param[2],
        _cA_ = function(_eO_){return 0;},
        res0_048 = caml_call1(Sexplib0_Sexp_conv[24], _cA_),
        _cB_ = function(param){return _E_;},
        res1_049 = caml_call2(Incremental_Types[15][1], _cB_, arg1_045),
        _cC_ = function(param){return _F_;},
        res2_050 = caml_call2(Incremental_Types[15][1], _cC_, arg2_046),
        _cD_ = function(param){return _G_;},
        res3_051 = caml_call2(Incremental_Types[15][1], _cD_, arg3_047);
       return [1,
               [0,
                _H_,
                [0, res0_048, [0, res1_049, [0, res2_050, [0, res3_051, 0]]]]]];
      case 19:
       var
        arg4_056 = param[5],
        arg3_055 = param[4],
        arg2_054 = param[3],
        arg1_053 = param[2],
        _cE_ = function(_eN_){return 0;},
        res0_057 = caml_call1(Sexplib0_Sexp_conv[24], _cE_),
        _cF_ = function(param){return _I_;},
        res1_058 = caml_call2(Incremental_Types[15][1], _cF_, arg1_053),
        _cG_ = function(param){return _J_;},
        res2_059 = caml_call2(Incremental_Types[15][1], _cG_, arg2_054),
        _cH_ = function(param){return _K_;},
        res3_060 = caml_call2(Incremental_Types[15][1], _cH_, arg3_055),
        _cI_ = function(param){return _L_;},
        res4_061 = caml_call2(Incremental_Types[15][1], _cI_, arg4_056);
       return [1,
               [0,
                _M_,
                [0,
                 res0_057,
                 [0, res1_058, [0, res2_059, [0, res3_060, [0, res4_061, 0]]]]]]];
      case 20:
       var
        arg5_067 = param[6],
        arg4_066 = param[5],
        arg3_065 = param[4],
        arg2_064 = param[3],
        arg1_063 = param[2],
        _cJ_ = function(_eM_){return 0;},
        res0_068 = caml_call1(Sexplib0_Sexp_conv[24], _cJ_),
        _cK_ = function(param){return _N_;},
        res1_069 = caml_call2(Incremental_Types[15][1], _cK_, arg1_063),
        _cL_ = function(param){return _O_;},
        res2_070 = caml_call2(Incremental_Types[15][1], _cL_, arg2_064),
        _cM_ = function(param){return _P_;},
        res3_071 = caml_call2(Incremental_Types[15][1], _cM_, arg3_065),
        _cN_ = function(param){return _Q_;},
        res4_072 = caml_call2(Incremental_Types[15][1], _cN_, arg4_066),
        _cO_ = function(param){return _R_;},
        res5_073 = caml_call2(Incremental_Types[15][1], _cO_, arg5_067);
       return [1,
               [0,
                _S_,
                [0,
                 res0_068,
                 [0,
                  res1_069,
                  [0,
                   res2_070,
                   [0, res3_071, [0, res4_072, [0, res5_073, 0]]]]]]]];
      case 21:
       var
        arg6_080 = param[7],
        arg5_079 = param[6],
        arg4_078 = param[5],
        arg3_077 = param[4],
        arg2_076 = param[3],
        arg1_075 = param[2],
        _cP_ = function(_eL_){return 0;},
        res0_081 = caml_call1(Sexplib0_Sexp_conv[24], _cP_),
        _cQ_ = function(param){return _T_;},
        res1_082 = caml_call2(Incremental_Types[15][1], _cQ_, arg1_075),
        _cR_ = function(param){return _U_;},
        res2_083 = caml_call2(Incremental_Types[15][1], _cR_, arg2_076),
        _cS_ = function(param){return _V_;},
        res3_084 = caml_call2(Incremental_Types[15][1], _cS_, arg3_077),
        _cT_ = function(param){return _W_;},
        res4_085 = caml_call2(Incremental_Types[15][1], _cT_, arg4_078),
        _cU_ = function(param){return _X_;},
        res5_086 = caml_call2(Incremental_Types[15][1], _cU_, arg5_079),
        _cV_ = function(param){return _Y_;},
        res6_087 = caml_call2(Incremental_Types[15][1], _cV_, arg6_080);
       return [1,
               [0,
                _Z_,
                [0,
                 res0_081,
                 [0,
                  res1_082,
                  [0,
                   res2_083,
                   [0,
                    res3_084,
                    [0, res4_085, [0, res5_086, [0, res6_087, 0]]]]]]]]];
      case 22:
       var
        arg7_095 = param[8],
        arg6_094 = param[7],
        arg5_093 = param[6],
        arg4_092 = param[5],
        arg3_091 = param[4],
        arg2_090 = param[3],
        arg1_089 = param[2],
        _cW_ = function(_eK_){return 0;},
        res0_096 = caml_call1(Sexplib0_Sexp_conv[24], _cW_),
        _cX_ = function(param){return ___;},
        res1_097 = caml_call2(Incremental_Types[15][1], _cX_, arg1_089),
        _cY_ = function(param){return _$_;},
        res2_098 = caml_call2(Incremental_Types[15][1], _cY_, arg2_090),
        _cZ_ = function(param){return _aa_;},
        res3_099 = caml_call2(Incremental_Types[15][1], _cZ_, arg3_091),
        _c0_ = function(param){return _ab_;},
        res4_100 = caml_call2(Incremental_Types[15][1], _c0_, arg4_092),
        _c1_ = function(param){return _ac_;},
        res5_101 = caml_call2(Incremental_Types[15][1], _c1_, arg5_093),
        _c2_ = function(param){return _ad_;},
        res6_102 = caml_call2(Incremental_Types[15][1], _c2_, arg6_094),
        _c3_ = function(param){return _ae_;},
        res7_103 = caml_call2(Incremental_Types[15][1], _c3_, arg7_095);
       return [1,
               [0,
                _af_,
                [0,
                 res0_096,
                 [0,
                  res1_097,
                  [0,
                   res2_098,
                   [0,
                    res3_099,
                    [0,
                     res4_100,
                     [0, res5_101, [0, res6_102, [0, res7_103, 0]]]]]]]]]];
      case 23:
       var
        arg8_112 = param[9],
        arg7_111 = param[8],
        arg6_110 = param[7],
        arg5_109 = param[6],
        arg4_108 = param[5],
        arg3_107 = param[4],
        arg2_106 = param[3],
        arg1_105 = param[2],
        _c4_ = function(_eJ_){return 0;},
        res0_113 = caml_call1(Sexplib0_Sexp_conv[24], _c4_),
        _c5_ = function(param){return _ag_;},
        res1_114 = caml_call2(Incremental_Types[15][1], _c5_, arg1_105),
        _c6_ = function(param){return _ah_;},
        res2_115 = caml_call2(Incremental_Types[15][1], _c6_, arg2_106),
        _c7_ = function(param){return _ai_;},
        res3_116 = caml_call2(Incremental_Types[15][1], _c7_, arg3_107),
        _c8_ = function(param){return _aj_;},
        res4_117 = caml_call2(Incremental_Types[15][1], _c8_, arg4_108),
        _c9_ = function(param){return _ak_;},
        res5_118 = caml_call2(Incremental_Types[15][1], _c9_, arg5_109),
        _c__ = function(param){return _al_;},
        res6_119 = caml_call2(Incremental_Types[15][1], _c__, arg6_110),
        _c$_ = function(param){return _am_;},
        res7_120 = caml_call2(Incremental_Types[15][1], _c$_, arg7_111),
        _da_ = function(param){return _an_;},
        res8_121 = caml_call2(Incremental_Types[15][1], _da_, arg8_112);
       return [1,
               [0,
                _ao_,
                [0,
                 res0_113,
                 [0,
                  res1_114,
                  [0,
                   res2_115,
                   [0,
                    res3_116,
                    [0,
                     res4_117,
                     [0,
                      res5_118,
                      [0, res6_119, [0, res7_120, [0, res8_121, 0]]]]]]]]]]];
      case 24:
       var
        arg9_131 = param[10],
        arg8_130 = param[9],
        arg7_129 = param[8],
        arg6_128 = param[7],
        arg5_127 = param[6],
        arg4_126 = param[5],
        arg3_125 = param[4],
        arg2_124 = param[3],
        arg1_123 = param[2],
        _db_ = function(_eI_){return 0;},
        res0_132 = caml_call1(Sexplib0_Sexp_conv[24], _db_),
        _dc_ = function(param){return _ap_;},
        res1_133 = caml_call2(Incremental_Types[15][1], _dc_, arg1_123),
        _dd_ = function(param){return _aq_;},
        res2_134 = caml_call2(Incremental_Types[15][1], _dd_, arg2_124),
        _de_ = function(param){return _ar_;},
        res3_135 = caml_call2(Incremental_Types[15][1], _de_, arg3_125),
        _df_ = function(param){return _as_;},
        res4_136 = caml_call2(Incremental_Types[15][1], _df_, arg4_126),
        _dg_ = function(param){return _at_;},
        res5_137 = caml_call2(Incremental_Types[15][1], _dg_, arg5_127),
        _dh_ = function(param){return _au_;},
        res6_138 = caml_call2(Incremental_Types[15][1], _dh_, arg6_128),
        _di_ = function(param){return _av_;},
        res7_139 = caml_call2(Incremental_Types[15][1], _di_, arg7_129),
        _dj_ = function(param){return _aw_;},
        res8_140 = caml_call2(Incremental_Types[15][1], _dj_, arg8_130),
        _dk_ = function(param){return _ax_;},
        res9_141 = caml_call2(Incremental_Types[15][1], _dk_, arg9_131);
       return [1,
               [0,
                _ay_,
                [0,
                 res0_132,
                 [0,
                  res1_133,
                  [0,
                   res2_134,
                   [0,
                    res3_135,
                    [0,
                     res4_136,
                     [0,
                      res5_137,
                      [0,
                       res6_138,
                       [0, res7_139, [0, res8_140, [0, res9_141, 0]]]]]]]]]]]];
      case 25:
       var
        arg10_152 = param[11],
        arg9_151 = param[10],
        arg8_150 = param[9],
        arg7_149 = param[8],
        arg6_148 = param[7],
        arg5_147 = param[6],
        arg4_146 = param[5],
        arg3_145 = param[4],
        arg2_144 = param[3],
        arg1_143 = param[2],
        _dl_ = function(_eH_){return 0;},
        res0_153 = caml_call1(Sexplib0_Sexp_conv[24], _dl_),
        _dm_ = function(param){return _az_;},
        res1_154 = caml_call2(Incremental_Types[15][1], _dm_, arg1_143),
        _dn_ = function(param){return _aA_;},
        res2_155 = caml_call2(Incremental_Types[15][1], _dn_, arg2_144),
        _do_ = function(param){return _aB_;},
        res3_156 = caml_call2(Incremental_Types[15][1], _do_, arg3_145),
        _dp_ = function(param){return _aC_;},
        res4_157 = caml_call2(Incremental_Types[15][1], _dp_, arg4_146),
        _dq_ = function(param){return _aD_;},
        res5_158 = caml_call2(Incremental_Types[15][1], _dq_, arg5_147),
        _dr_ = function(param){return _aE_;},
        res6_159 = caml_call2(Incremental_Types[15][1], _dr_, arg6_148),
        _ds_ = function(param){return _aF_;},
        res7_160 = caml_call2(Incremental_Types[15][1], _ds_, arg7_149),
        _dt_ = function(param){return _aG_;},
        res8_161 = caml_call2(Incremental_Types[15][1], _dt_, arg8_150),
        _du_ = function(param){return _aH_;},
        res9_162 = caml_call2(Incremental_Types[15][1], _du_, arg9_151),
        _dv_ = function(param){return _aI_;},
        res10_163 = caml_call2(Incremental_Types[15][1], _dv_, arg10_152);
       return [1,
               [0,
                _aJ_,
                [0,
                 res0_153,
                 [0,
                  res1_154,
                  [0,
                   res2_155,
                   [0,
                    res3_156,
                    [0,
                     res4_157,
                     [0,
                      res5_158,
                      [0,
                       res6_159,
                       [0,
                        res7_160,
                        [0, res8_161, [0, res9_162, [0, res10_163, 0]]]]]]]]]]]]];
      case 26:
       var
        arg11_175 = param[12],
        arg10_174 = param[11],
        arg9_173 = param[10],
        arg8_172 = param[9],
        arg7_171 = param[8],
        arg6_170 = param[7],
        arg5_169 = param[6],
        arg4_168 = param[5],
        arg3_167 = param[4],
        arg2_166 = param[3],
        arg1_165 = param[2],
        _dw_ = function(_eG_){return 0;},
        res0_176 = caml_call1(Sexplib0_Sexp_conv[24], _dw_),
        _dx_ = function(param){return _aK_;},
        res1_177 = caml_call2(Incremental_Types[15][1], _dx_, arg1_165),
        _dy_ = function(param){return _aL_;},
        res2_178 = caml_call2(Incremental_Types[15][1], _dy_, arg2_166),
        _dz_ = function(param){return _aM_;},
        res3_179 = caml_call2(Incremental_Types[15][1], _dz_, arg3_167),
        _dA_ = function(param){return _aN_;},
        res4_180 = caml_call2(Incremental_Types[15][1], _dA_, arg4_168),
        _dB_ = function(param){return _aO_;},
        res5_181 = caml_call2(Incremental_Types[15][1], _dB_, arg5_169),
        _dC_ = function(param){return _aP_;},
        res6_182 = caml_call2(Incremental_Types[15][1], _dC_, arg6_170),
        _dD_ = function(param){return _aQ_;},
        res7_183 = caml_call2(Incremental_Types[15][1], _dD_, arg7_171),
        _dE_ = function(param){return _aR_;},
        res8_184 = caml_call2(Incremental_Types[15][1], _dE_, arg8_172),
        _dF_ = function(param){return _aS_;},
        res9_185 = caml_call2(Incremental_Types[15][1], _dF_, arg9_173),
        _dG_ = function(param){return _aT_;},
        res10_186 = caml_call2(Incremental_Types[15][1], _dG_, arg10_174),
        _dH_ = function(param){return _aU_;},
        res11_187 = caml_call2(Incremental_Types[15][1], _dH_, arg11_175);
       return [1,
               [0,
                _aV_,
                [0,
                 res0_176,
                 [0,
                  res1_177,
                  [0,
                   res2_178,
                   [0,
                    res3_179,
                    [0,
                     res4_180,
                     [0,
                      res5_181,
                      [0,
                       res6_182,
                       [0,
                        res7_183,
                        [0,
                         res8_184,
                         [0, res9_185, [0, res10_186, [0, res11_187, 0]]]]]]]]]]]]]];
      case 27:
       var
        arg12_200 = param[13],
        arg11_199 = param[12],
        arg10_198 = param[11],
        arg9_197 = param[10],
        arg8_196 = param[9],
        arg7_195 = param[8],
        arg6_194 = param[7],
        arg5_193 = param[6],
        arg4_192 = param[5],
        arg3_191 = param[4],
        arg2_190 = param[3],
        arg1_189 = param[2],
        _dI_ = function(_eF_){return 0;},
        res0_201 = caml_call1(Sexplib0_Sexp_conv[24], _dI_),
        _dJ_ = function(param){return _aW_;},
        res1_202 = caml_call2(Incremental_Types[15][1], _dJ_, arg1_189),
        _dK_ = function(param){return _aX_;},
        res2_203 = caml_call2(Incremental_Types[15][1], _dK_, arg2_190),
        _dL_ = function(param){return _aY_;},
        res3_204 = caml_call2(Incremental_Types[15][1], _dL_, arg3_191),
        _dM_ = function(param){return _aZ_;},
        res4_205 = caml_call2(Incremental_Types[15][1], _dM_, arg4_192),
        _dN_ = function(param){return _a0_;},
        res5_206 = caml_call2(Incremental_Types[15][1], _dN_, arg5_193),
        _dO_ = function(param){return _a1_;},
        res6_207 = caml_call2(Incremental_Types[15][1], _dO_, arg6_194),
        _dP_ = function(param){return _a2_;},
        res7_208 = caml_call2(Incremental_Types[15][1], _dP_, arg7_195),
        _dQ_ = function(param){return _a3_;},
        res8_209 = caml_call2(Incremental_Types[15][1], _dQ_, arg8_196),
        _dR_ = function(param){return _a4_;},
        res9_210 = caml_call2(Incremental_Types[15][1], _dR_, arg9_197),
        _dS_ = function(param){return _a5_;},
        res10_211 = caml_call2(Incremental_Types[15][1], _dS_, arg10_198),
        _dT_ = function(param){return _a6_;},
        res11_212 = caml_call2(Incremental_Types[15][1], _dT_, arg11_199),
        _dU_ = function(param){return _a7_;},
        res12_213 = caml_call2(Incremental_Types[15][1], _dU_, arg12_200);
       return [1,
               [0,
                _a8_,
                [0,
                 res0_201,
                 [0,
                  res1_202,
                  [0,
                   res2_203,
                   [0,
                    res3_204,
                    [0,
                     res4_205,
                     [0,
                      res5_206,
                      [0,
                       res6_207,
                       [0,
                        res7_208,
                        [0,
                         res8_209,
                         [0,
                          res9_210,
                          [0, res10_211, [0, res11_212, [0, res12_213, 0]]]]]]]]]]]]]]];
      case 28:
       var
        arg13_227 = param[14],
        arg12_226 = param[13],
        arg11_225 = param[12],
        arg10_224 = param[11],
        arg9_223 = param[10],
        arg8_222 = param[9],
        arg7_221 = param[8],
        arg6_220 = param[7],
        arg5_219 = param[6],
        arg4_218 = param[5],
        arg3_217 = param[4],
        arg2_216 = param[3],
        arg1_215 = param[2],
        _dV_ = function(_eE_){return 0;},
        res0_228 = caml_call1(Sexplib0_Sexp_conv[24], _dV_),
        _dW_ = function(param){return _a9_;},
        res1_229 = caml_call2(Incremental_Types[15][1], _dW_, arg1_215),
        _dX_ = function(param){return _a__;},
        res2_230 = caml_call2(Incremental_Types[15][1], _dX_, arg2_216),
        _dY_ = function(param){return _a$_;},
        res3_231 = caml_call2(Incremental_Types[15][1], _dY_, arg3_217),
        _dZ_ = function(param){return _ba_;},
        res4_232 = caml_call2(Incremental_Types[15][1], _dZ_, arg4_218),
        _d0_ = function(param){return _bb_;},
        res5_233 = caml_call2(Incremental_Types[15][1], _d0_, arg5_219),
        _d1_ = function(param){return _bc_;},
        res6_234 = caml_call2(Incremental_Types[15][1], _d1_, arg6_220),
        _d2_ = function(param){return _bd_;},
        res7_235 = caml_call2(Incremental_Types[15][1], _d2_, arg7_221),
        _d3_ = function(param){return _be_;},
        res8_236 = caml_call2(Incremental_Types[15][1], _d3_, arg8_222),
        _d4_ = function(param){return _bf_;},
        res9_237 = caml_call2(Incremental_Types[15][1], _d4_, arg9_223),
        _d5_ = function(param){return _bg_;},
        res10_238 = caml_call2(Incremental_Types[15][1], _d5_, arg10_224),
        _d6_ = function(param){return _bh_;},
        res11_239 = caml_call2(Incremental_Types[15][1], _d6_, arg11_225),
        _d7_ = function(param){return _bi_;},
        res12_240 = caml_call2(Incremental_Types[15][1], _d7_, arg12_226),
        _d8_ = function(param){return _bj_;},
        res13_241 = caml_call2(Incremental_Types[15][1], _d8_, arg13_227);
       return [1,
               [0,
                _bk_,
                [0,
                 res0_228,
                 [0,
                  res1_229,
                  [0,
                   res2_230,
                   [0,
                    res3_231,
                    [0,
                     res4_232,
                     [0,
                      res5_233,
                      [0,
                       res6_234,
                       [0,
                        res7_235,
                        [0,
                         res8_236,
                         [0,
                          res9_237,
                          [0,
                           res10_238,
                           [0, res11_239, [0, res12_240, [0, res13_241, 0]]]]]]]]]]]]]]]];
      case 29:
       var
        arg14_256 = param[15],
        arg13_255 = param[14],
        arg12_254 = param[13],
        arg11_253 = param[12],
        arg10_252 = param[11],
        arg9_251 = param[10],
        arg8_250 = param[9],
        arg7_249 = param[8],
        arg6_248 = param[7],
        arg5_247 = param[6],
        arg4_246 = param[5],
        arg3_245 = param[4],
        arg2_244 = param[3],
        arg1_243 = param[2],
        _d9_ = function(_eD_){return 0;},
        res0_257 = caml_call1(Sexplib0_Sexp_conv[24], _d9_),
        _d__ = function(param){return _bl_;},
        res1_258 = caml_call2(Incremental_Types[15][1], _d__, arg1_243),
        _d$_ = function(param){return _bm_;},
        res2_259 = caml_call2(Incremental_Types[15][1], _d$_, arg2_244),
        _ea_ = function(param){return _bn_;},
        res3_260 = caml_call2(Incremental_Types[15][1], _ea_, arg3_245),
        _eb_ = function(param){return _bo_;},
        res4_261 = caml_call2(Incremental_Types[15][1], _eb_, arg4_246),
        _ec_ = function(param){return _bp_;},
        res5_262 = caml_call2(Incremental_Types[15][1], _ec_, arg5_247),
        _ed_ = function(param){return _bq_;},
        res6_263 = caml_call2(Incremental_Types[15][1], _ed_, arg6_248),
        _ee_ = function(param){return _br_;},
        res7_264 = caml_call2(Incremental_Types[15][1], _ee_, arg7_249),
        _ef_ = function(param){return _bs_;},
        res8_265 = caml_call2(Incremental_Types[15][1], _ef_, arg8_250),
        _eg_ = function(param){return _bt_;},
        res9_266 = caml_call2(Incremental_Types[15][1], _eg_, arg9_251),
        _eh_ = function(param){return _bu_;},
        res10_267 = caml_call2(Incremental_Types[15][1], _eh_, arg10_252),
        _ei_ = function(param){return _bv_;},
        res11_268 = caml_call2(Incremental_Types[15][1], _ei_, arg11_253),
        _ej_ = function(param){return _bw_;},
        res12_269 = caml_call2(Incremental_Types[15][1], _ej_, arg12_254),
        _ek_ = function(param){return _bx_;},
        res13_270 = caml_call2(Incremental_Types[15][1], _ek_, arg13_255),
        _el_ = function(param){return _by_;},
        res14_271 = caml_call2(Incremental_Types[15][1], _el_, arg14_256);
       return [1,
               [0,
                _bz_,
                [0,
                 res0_257,
                 [0,
                  res1_258,
                  [0,
                   res2_259,
                   [0,
                    res3_260,
                    [0,
                     res4_261,
                     [0,
                      res5_262,
                      [0,
                       res6_263,
                       [0,
                        res7_264,
                        [0,
                         res8_265,
                         [0,
                          res9_266,
                          [0,
                           res10_267,
                           [0,
                            res11_268,
                            [0, res12_269, [0, res13_270, [0, res14_271, 0]]]]]]]]]]]]]]]]];
      default:
       var
        arg15_287 = param[16],
        arg14_286 = param[15],
        arg13_285 = param[14],
        arg12_284 = param[13],
        arg11_283 = param[12],
        arg10_282 = param[11],
        arg9_281 = param[10],
        arg8_280 = param[9],
        arg7_279 = param[8],
        arg6_278 = param[7],
        arg5_277 = param[6],
        arg4_276 = param[5],
        arg3_275 = param[4],
        arg2_274 = param[3],
        arg1_273 = param[2],
        _em_ = function(_eC_){return 0;},
        res0_288 = caml_call1(Sexplib0_Sexp_conv[24], _em_),
        _en_ = function(param){return _bA_;},
        res1_289 = caml_call2(Incremental_Types[15][1], _en_, arg1_273),
        _eo_ = function(param){return _bB_;},
        res2_290 = caml_call2(Incremental_Types[15][1], _eo_, arg2_274),
        _ep_ = function(param){return _bC_;},
        res3_291 = caml_call2(Incremental_Types[15][1], _ep_, arg3_275),
        _eq_ = function(param){return _bD_;},
        res4_292 = caml_call2(Incremental_Types[15][1], _eq_, arg4_276),
        _er_ = function(param){return _bE_;},
        res5_293 = caml_call2(Incremental_Types[15][1], _er_, arg5_277),
        _es_ = function(param){return _bF_;},
        res6_294 = caml_call2(Incremental_Types[15][1], _es_, arg6_278),
        _et_ = function(param){return _bG_;},
        res7_295 = caml_call2(Incremental_Types[15][1], _et_, arg7_279),
        _eu_ = function(param){return _bH_;},
        res8_296 = caml_call2(Incremental_Types[15][1], _eu_, arg8_280),
        _ev_ = function(param){return _bI_;},
        res9_297 = caml_call2(Incremental_Types[15][1], _ev_, arg9_281),
        _ew_ = function(param){return _bJ_;},
        res10_298 = caml_call2(Incremental_Types[15][1], _ew_, arg10_282),
        _ex_ = function(param){return _bK_;},
        res11_299 = caml_call2(Incremental_Types[15][1], _ex_, arg11_283),
        _ey_ = function(param){return _bL_;},
        res12_300 = caml_call2(Incremental_Types[15][1], _ey_, arg12_284),
        _ez_ = function(param){return _bM_;},
        res13_301 = caml_call2(Incremental_Types[15][1], _ez_, arg13_285),
        _eA_ = function(param){return _bN_;},
        res14_302 = caml_call2(Incremental_Types[15][1], _eA_, arg14_286),
        _eB_ = function(param){return _bO_;},
        res15_303 = caml_call2(Incremental_Types[15][1], _eB_, arg15_287);
       return [1,
               [0,
                _bP_,
                [0,
                 res0_288,
                 [0,
                  res1_289,
                  [0,
                   res2_290,
                   [0,
                    res3_291,
                    [0,
                     res4_292,
                     [0,
                      res5_293,
                      [0,
                       res6_294,
                       [0,
                        res7_295,
                        [0,
                         res8_296,
                         [0,
                          res9_297,
                          [0,
                           res10_298,
                           [0,
                            res11_299,
                            [0,
                             res12_300,
                             [0, res13_301, [0, res14_302, [0, res15_303, 0]]]]]]]]]]]]]]]]]];
    }
   }
   function name(param){
    if(typeof param === "number")
     return 0 === param ? cst_Invalid : cst_Uninitialized;
    switch(param[0]){
      case 0:
       return cst_Array_fold;
      case 1:
       return cst_At;
      case 2:
       return cst_At_intervals;
      case 3:
       return cst_Bind_lhs_change;
      case 4:
       return cst_Bind_main;
      case 5:
       return cst_Const;
      case 6:
       return cst_Expert;
      case 7:
       return cst_Freeze;
      case 8:
       return cst_If_test_change;
      case 9:
       return cst_If_then_else;
      case 10:
       return cst_Join_lhs_change;
      case 11:
       return cst_Join_main;
      case 12:
       return cst_Map;
      case 13:
       return cst_Snapshot;
      case 14:
       return cst_Step_function;
      case 15:
       return cst_Unordered_array_fold;
      case 16:
       return cst_Var;
      case 17:
       return cst_Map2;
      case 18:
       return cst_Map3;
      case 19:
       return cst_Map4;
      case 20:
       return cst_Map5;
      case 21:
       return cst_Map6;
      case 22:
       return cst_Map7;
      case 23:
       return cst_Map8;
      case 24:
       return cst_Map9;
      case 25:
       return cst_Map10;
      case 26:
       return cst_Map11;
      case 27:
       return cst_Map12;
      case 28:
       return cst_Map13;
      case 29:
       return cst_Map14;
      default: return cst_Map15;
    }
   }
   function invariant(invariant_a, t){
    if(typeof t === "number") return 0 === t ? 0 : 0;
    switch(t[0]){
      case 0:
       var array_fold = t[1], _b__ = function(_cn_){return 0;};
       return caml_call3
               (Incremental_Array_fold[2], _b__, invariant_a, array_fold);
      case 1:
       var at = t[1]; return caml_call1(Incremental_At[1], at);
      case 2:
       var at_intervals = t[1];
       return caml_call1(Incremental_At_intervals[1], at_intervals);
      case 3:
       var
        bind = t[1],
        _b$_ = function(_cm_){return 0;},
        _ca_ = function(_cl_){return 0;};
       return caml_call3(Incremental_Bind[1], _ca_, _b$_, bind);
      case 4:
       var bind$0 = t[1], _cb_ = function(_ck_){return 0;};
       return caml_call3(Incremental_Bind[1], _cb_, invariant_a, bind$0);
      case 5:
       var a = t[1]; return caml_call1(invariant_a, a);
      case 6:
       var e = t[1]; return caml_call2(Incremental_Expert[1], invariant_a, e);
      case 7:
       var freeze = t[1];
       return caml_call2(Incremental_Freeze[1], invariant_a, freeze);
      case 8:
       var if_then_else = t[1], _cc_ = function(_cj_){return 0;};
       return caml_call2(Incremental_If_then_else[1], _cc_, if_then_else);
      case 9:
       var if_then_else$0 = t[1];
       return caml_call2
               (Incremental_If_then_else[1], invariant_a, if_then_else$0);
      case 10:
       var join = t[1], _cd_ = function(_ci_){return 0;};
       return caml_call2(Incremental_Join[1], _cd_, join);
      case 11:
       var join$0 = t[1];
       return caml_call2(Incremental_Join[1], invariant_a, join$0);
      case 13:
       var snapshot = t[1];
       return caml_call2(Incremental_Snapshot[1], invariant_a, snapshot);
      case 14:
       var step_function_node = t[1];
       return caml_call2
               (Incremental_Step_function_node[1],
                invariant_a,
                step_function_node);
      case 15:
       var unordered_array_fold = t[1], _ce_ = function(_ch_){return 0;};
       return caml_call3
               (Incremental_Unordered_array_fo[1],
                _ce_,
                invariant_a,
                unordered_array_fold);
      case 16:
       var var$0 = t[1], _cf_ = function(_cg_){return 0;};
       return caml_call2(Incremental_Var[1], _cf_, var$0);
      default: return 0;
    }
   }
   function initial_num_children(t){
    if(typeof t === "number") return 0 === t ? 0 : 0;
    switch(t[0]){
      case 0:
       var children = t[1][3]; return children.length - 1;
      case 1:
       return 0;
      case 2:
       return 0;
      case 3:
       return 1;
      case 4:
       return 2;
      case 5:
       return 0;
      case 6:
       return 0;
      case 7:
       return 1;
      case 8:
       return 1;
      case 9:
       return 2;
      case 10:
       return 1;
      case 11:
       return 2;
      case 12:
       return 1;
      case 13:
       return 0;
      case 14:
       return 1;
      case 15:
       var children$0 = t[1][6]; return children$0.length - 1;
      case 16:
       return 0;
      case 17:
       return 2;
      case 18:
       return 3;
      case 19:
       return 4;
      case 20:
       return 5;
      case 21:
       return 6;
      case 22:
       return 7;
      case 23:
       return 8;
      case 24:
       return 9;
      case 25:
       return 10;
      case 26:
       return 11;
      case 27:
       return 12;
      case 28:
       return 13;
      case 29:
       return 14;
      default: return 15;
    }
   }
   var
    bind_rhs_child_index = 1,
    freeze_child_index = 0,
    if_branch_child_index = 1,
    join_rhs_child_index = 1;
   function iteri_children(t, f){
    if(typeof t === "number") return 0 === t ? 0 : 0;
    switch(t[0]){
      case 0:
       var children = t[1][3], _bX_ = children.length - 1 - 1 | 0, _bW_ = 0;
       if(_bX_ >= 0){
        var i = _bW_;
        for(;;){
         caml_call2(f, i, children[1 + i]);
         var _bY_ = i + 1 | 0;
         if(_bX_ === i) break;
         var i = _bY_;
        }
       }
       return 0;
      case 1:
       return 0;
      case 2:
       return 0;
      case 3:
       var bind = t[1]; return caml_call2(f, 0, bind[3]);
      case 4:
       var match = t[1], lhs_change = match[4], rhs = match[5];
       caml_call2(f, 0, lhs_change);
       var _bZ_ = caml_call1(Incremental_Import[6][8], rhs);
       return _bZ_
               ? caml_call2(f, 1, caml_call1(Incremental_Import[6][16], rhs))
               : _bZ_;
      case 5:
       return 0;
      case 6:
       var
        match$0 = t[1],
        children$0 = match$0[3],
        num_children = match$0[4],
        _b1_ = num_children - 1 | 0,
        _b0_ = 0;
       if(_b1_ >= 0){
        var i$0 = _b0_;
        for(;;){
         var _b2_ = caml_call2(Incremental_Import[7][21], children$0, i$0);
         caml_call2(f, i$0, caml_call1(Incremental_Import[6][9], _b2_)[1]);
         var _b3_ = i$0 + 1 | 0;
         if(_b1_ === i$0) break;
         var i$0 = _b3_;
        }
       }
       return 0;
      case 7:
       var child = t[1][2]; return caml_call2(f, 0, child);
      case 8:
       var test = t[1][2]; return caml_call2(f, 0, test);
      case 9:
       var
        match$1 = t[1],
        test_change = match$1[3],
        current_branch = match$1[4];
       caml_call2(f, 0, test_change);
       var _b4_ = caml_call1(Incremental_Import[6][8], current_branch);
       return _b4_
               ? caml_call2
                 (f, 1, caml_call1(Incremental_Import[6][16], current_branch))
               : _b4_;
      case 10:
       var lhs = t[1][2]; return caml_call2(f, 0, lhs);
      case 11:
       var match$2 = t[1], lhs_change$0 = match$2[3], rhs$0 = match$2[4];
       caml_call2(f, 0, lhs_change$0);
       var _b5_ = caml_call1(Incremental_Import[6][8], rhs$0);
       return _b5_
               ? caml_call2
                 (f, 1, caml_call1(Incremental_Import[6][16], rhs$0))
               : _b5_;
      case 12:
       var node0 = t[2]; return caml_call2(f, 0, node0);
      case 13:
       return 0;
      case 14:
       var
        child$0 = t[1][2],
        _b6_ = caml_call1(Incremental_Import[6][8], child$0);
       return _b6_
               ? caml_call2
                 (f, 0, caml_call1(Incremental_Import[6][16], child$0))
               : _b6_;
      case 15:
       var
        children$1 = t[1][6],
        _b8_ = children$1.length - 1 - 1 | 0,
        _b7_ = 0;
       if(_b8_ >= 0){
        var i$1 = _b7_;
        for(;;){
         caml_call2(f, i$1, children$1[1 + i$1]);
         var _b9_ = i$1 + 1 | 0;
         if(_b8_ === i$1) break;
         var i$1 = _b9_;
        }
       }
       return 0;
      case 16:
       return 0;
      case 17:
       var node1 = t[3], node0$0 = t[2];
       caml_call2(f, 0, node0$0);
       return caml_call2(f, 1, node1);
      case 18:
       var node2 = t[4], node1$0 = t[3], node0$1 = t[2];
       caml_call2(f, 0, node0$1);
       caml_call2(f, 1, node1$0);
       return caml_call2(f, 2, node2);
      case 19:
       var node3 = t[5], node2$0 = t[4], node1$1 = t[3], node0$2 = t[2];
       caml_call2(f, 0, node0$2);
       caml_call2(f, 1, node1$1);
       caml_call2(f, 2, node2$0);
       return caml_call2(f, 3, node3);
      case 20:
       var
        node4 = t[6],
        node3$0 = t[5],
        node2$1 = t[4],
        node1$2 = t[3],
        node0$3 = t[2];
       caml_call2(f, 0, node0$3);
       caml_call2(f, 1, node1$2);
       caml_call2(f, 2, node2$1);
       caml_call2(f, 3, node3$0);
       return caml_call2(f, 4, node4);
      case 21:
       var
        node5 = t[7],
        node4$0 = t[6],
        node3$1 = t[5],
        node2$2 = t[4],
        node1$3 = t[3],
        node0$4 = t[2];
       caml_call2(f, 0, node0$4);
       caml_call2(f, 1, node1$3);
       caml_call2(f, 2, node2$2);
       caml_call2(f, 3, node3$1);
       caml_call2(f, 4, node4$0);
       return caml_call2(f, 5, node5);
      case 22:
       var
        node6 = t[8],
        node5$0 = t[7],
        node4$1 = t[6],
        node3$2 = t[5],
        node2$3 = t[4],
        node1$4 = t[3],
        node0$5 = t[2];
       caml_call2(f, 0, node0$5);
       caml_call2(f, 1, node1$4);
       caml_call2(f, 2, node2$3);
       caml_call2(f, 3, node3$2);
       caml_call2(f, 4, node4$1);
       caml_call2(f, 5, node5$0);
       return caml_call2(f, 6, node6);
      case 23:
       var
        node7 = t[9],
        node6$0 = t[8],
        node5$1 = t[7],
        node4$2 = t[6],
        node3$3 = t[5],
        node2$4 = t[4],
        node1$5 = t[3],
        node0$6 = t[2];
       caml_call2(f, 0, node0$6);
       caml_call2(f, 1, node1$5);
       caml_call2(f, 2, node2$4);
       caml_call2(f, 3, node3$3);
       caml_call2(f, 4, node4$2);
       caml_call2(f, 5, node5$1);
       caml_call2(f, 6, node6$0);
       return caml_call2(f, 7, node7);
      case 24:
       var
        node8 = t[10],
        node7$0 = t[9],
        node6$1 = t[8],
        node5$2 = t[7],
        node4$3 = t[6],
        node3$4 = t[5],
        node2$5 = t[4],
        node1$6 = t[3],
        node0$7 = t[2];
       caml_call2(f, 0, node0$7);
       caml_call2(f, 1, node1$6);
       caml_call2(f, 2, node2$5);
       caml_call2(f, 3, node3$4);
       caml_call2(f, 4, node4$3);
       caml_call2(f, 5, node5$2);
       caml_call2(f, 6, node6$1);
       caml_call2(f, 7, node7$0);
       return caml_call2(f, 8, node8);
      case 25:
       var
        node9 = t[11],
        node8$0 = t[10],
        node7$1 = t[9],
        node6$2 = t[8],
        node5$3 = t[7],
        node4$4 = t[6],
        node3$5 = t[5],
        node2$6 = t[4],
        node1$7 = t[3],
        node0$8 = t[2];
       caml_call2(f, 0, node0$8);
       caml_call2(f, 1, node1$7);
       caml_call2(f, 2, node2$6);
       caml_call2(f, 3, node3$5);
       caml_call2(f, 4, node4$4);
       caml_call2(f, 5, node5$3);
       caml_call2(f, 6, node6$2);
       caml_call2(f, 7, node7$1);
       caml_call2(f, 8, node8$0);
       return caml_call2(f, 9, node9);
      case 26:
       var
        node10 = t[12],
        node9$0 = t[11],
        node8$1 = t[10],
        node7$2 = t[9],
        node6$3 = t[8],
        node5$4 = t[7],
        node4$5 = t[6],
        node3$6 = t[5],
        node2$7 = t[4],
        node1$8 = t[3],
        node0$9 = t[2];
       caml_call2(f, 0, node0$9);
       caml_call2(f, 1, node1$8);
       caml_call2(f, 2, node2$7);
       caml_call2(f, 3, node3$6);
       caml_call2(f, 4, node4$5);
       caml_call2(f, 5, node5$4);
       caml_call2(f, 6, node6$3);
       caml_call2(f, 7, node7$2);
       caml_call2(f, 8, node8$1);
       caml_call2(f, 9, node9$0);
       return caml_call2(f, 10, node10);
      case 27:
       var
        node11 = t[13],
        node10$0 = t[12],
        node9$1 = t[11],
        node8$2 = t[10],
        node7$3 = t[9],
        node6$4 = t[8],
        node5$5 = t[7],
        node4$6 = t[6],
        node3$7 = t[5],
        node2$8 = t[4],
        node1$9 = t[3],
        node0$10 = t[2];
       caml_call2(f, 0, node0$10);
       caml_call2(f, 1, node1$9);
       caml_call2(f, 2, node2$8);
       caml_call2(f, 3, node3$7);
       caml_call2(f, 4, node4$6);
       caml_call2(f, 5, node5$5);
       caml_call2(f, 6, node6$4);
       caml_call2(f, 7, node7$3);
       caml_call2(f, 8, node8$2);
       caml_call2(f, 9, node9$1);
       caml_call2(f, 10, node10$0);
       return caml_call2(f, 11, node11);
      case 28:
       var
        node12 = t[14],
        node11$0 = t[13],
        node10$1 = t[12],
        node9$2 = t[11],
        node8$3 = t[10],
        node7$4 = t[9],
        node6$5 = t[8],
        node5$6 = t[7],
        node4$7 = t[6],
        node3$8 = t[5],
        node2$9 = t[4],
        node1$10 = t[3],
        node0$11 = t[2];
       caml_call2(f, 0, node0$11);
       caml_call2(f, 1, node1$10);
       caml_call2(f, 2, node2$9);
       caml_call2(f, 3, node3$8);
       caml_call2(f, 4, node4$7);
       caml_call2(f, 5, node5$6);
       caml_call2(f, 6, node6$5);
       caml_call2(f, 7, node7$4);
       caml_call2(f, 8, node8$3);
       caml_call2(f, 9, node9$2);
       caml_call2(f, 10, node10$1);
       caml_call2(f, 11, node11$0);
       return caml_call2(f, 12, node12);
      case 29:
       var
        node13 = t[15],
        node12$0 = t[14],
        node11$1 = t[13],
        node10$2 = t[12],
        node9$3 = t[11],
        node8$4 = t[10],
        node7$5 = t[9],
        node6$6 = t[8],
        node5$7 = t[7],
        node4$8 = t[6],
        node3$9 = t[5],
        node2$10 = t[4],
        node1$11 = t[3],
        node0$12 = t[2];
       caml_call2(f, 0, node0$12);
       caml_call2(f, 1, node1$11);
       caml_call2(f, 2, node2$10);
       caml_call2(f, 3, node3$9);
       caml_call2(f, 4, node4$8);
       caml_call2(f, 5, node5$7);
       caml_call2(f, 6, node6$6);
       caml_call2(f, 7, node7$5);
       caml_call2(f, 8, node8$4);
       caml_call2(f, 9, node9$3);
       caml_call2(f, 10, node10$2);
       caml_call2(f, 11, node11$1);
       caml_call2(f, 12, node12$0);
       return caml_call2(f, 13, node13);
      default:
       var
        node14 = t[16],
        node13$0 = t[15],
        node12$1 = t[14],
        node11$2 = t[13],
        node10$3 = t[12],
        node9$4 = t[11],
        node8$5 = t[10],
        node7$6 = t[9],
        node6$7 = t[8],
        node5$8 = t[7],
        node4$9 = t[6],
        node3$10 = t[5],
        node2$11 = t[4],
        node1$12 = t[3],
        node0$13 = t[2];
       caml_call2(f, 0, node0$13);
       caml_call2(f, 1, node1$12);
       caml_call2(f, 2, node2$11);
       caml_call2(f, 3, node3$10);
       caml_call2(f, 4, node4$9);
       caml_call2(f, 5, node5$8);
       caml_call2(f, 6, node6$7);
       caml_call2(f, 7, node7$6);
       caml_call2(f, 8, node8$5);
       caml_call2(f, 9, node9$4);
       caml_call2(f, 10, node10$3);
       caml_call2(f, 11, node11$2);
       caml_call2(f, 12, node12$1);
       caml_call2(f, 13, node13$0);
       return caml_call2(f, 14, node14);
    }
   }
   function slow_get_child(t, index){
    if(typeof t !== "number")
     switch(t[0]){
       case 0:
        var children = t[1][3];
        return caml_check_bound(children, index)[1 + index];
       case 6:
        var
         children$0 = t[1][3],
         _bT_ = caml_call2(Incremental_Import[7][20], children$0, index);
        return caml_call1(Incremental_Import[6][9], _bT_)[1];
       case 15:
        var children$1 = t[1][6];
        return caml_check_bound(children$1, index)[1 + index];
     }
    function _bS_(r){
     iteri_children
      (t,
       function(i, child){
        var _bV_ = caml_call2(Core[90], i, index);
        return _bV_ ? caml_call1(r, child) : _bV_;
       });
     function _bU_(param){
      var
       arg1_306 = param[2],
       arg0_305 = param[1],
       res0_307 = caml_call1(Core[389], arg0_305),
       res1_308 = sexp_of_t(function(param){return _bQ_;}, arg1_306);
      return [1, [0, res0_307, [0, res1_308, 0]]];
     }
     return caml_call5
             (Core[247],
              0,
              _bR_,
              cst_Kind_slow_get_child_got_in,
              [0, index, t],
              _bU_);
    }
    return caml_call1(Core[268], _bS_);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_incremental);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incremental_Kind);
   var
    Incremental_Kind =
      [0,
       invariant,
       sexp_of_t,
       name,
       initial_num_children,
       slow_get_child,
       bind_rhs_child_index,
       freeze_child_index,
       if_branch_child_index,
       join_rhs_child_index,
       iteri_children];
   runtime.caml_register_global(223, Incremental_Kind, cst_Incremental_Kind$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incremental__Node
//# unitInfo: Requires: Base__Backtrace, Base__Invariant, Core, Core__Hash_set, Core__Info, Core__Int, Core__List, Incremental__Cutoff, Incremental__Dot_user_info, Incremental__Expert, Incremental__Import, Incremental__Kind, Incremental__Node_id, Incremental__On_update_handler, Incremental__Scope, Incremental__Stabilization_num, Incremental__Types, Ppx_assert_lib__Runtime, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Incremental_Node$0 = "Incremental__Node",
    cst = "_",
    cst_changed_at$0 = "changed_at",
    cst_created_in$0 = "created_in",
    cst_cutoff$0 = "cutoff",
    cst_height$0 = "height",
    cst_height_in_adjust_heights_h$0 = "height_in_adjust_heights_heap",
    cst_height_in_recompute_heap$0 = "height_in_recompute_heap",
    cst_id$0 = "id",
    cst_incremental$0 = "incremental",
    cst_kind$0 = "kind",
    cst_my_child_index_in_parent_a$0 = "my_child_index_in_parent_at_index",
    cst_my_parent_index_in_child_a$0 = "my_parent_index_in_child_at_index",
    cst_next_in_adjust_heights_hea$0 = "next_in_adjust_heights_heap",
    cst_next_in_recompute_heap$0 = "next_in_recompute_heap",
    cst_next_node_in_same_scope$0 = "next_node_in_same_scope",
    cst_num_on_update_handlers$0 = "num_on_update_handlers",
    cst_num_parents$0 = "num_parents",
    cst_observers$0 = "observers",
    cst_old_value_opt$0 = "old_value_opt",
    cst_parent0$0 = "parent0",
    cst_parent1_and_beyond$0 = "parent1_and_beyond",
    cst_prev_in_recompute_heap$0 = "prev_in_recompute_heap",
    cst_recomputed_at$0 = "recomputed_at",
    cst_src_node_ml = "src/node.ml",
    cst_value_opt$0 = "value_opt",
    caml_check_bound = runtime.caml_check_bound,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    pos$4 = "src/node.ml:329:27",
    pos$3 = "src/node.ml:341:24",
    pos$2 = "src/node.ml:347:22",
    pos$1 = "src/node.ml:407:29",
    pos$0 = "src/node.ml:423:26",
    pos = "src/node.ml:293:15",
    Core_Hash_set = global_data.Core__Hash_set,
    Incremental_Node_id = global_data.Incremental__Node_id,
    Core_List = global_data.Core__List,
    Incremental_Types = global_data.Incremental__Types,
    Core = global_data.Core,
    Incremental_Import = global_data.Incremental__Import,
    Incremental_Kind = global_data.Incremental__Kind,
    Assert_failure = global_data.Assert_failure,
    Core_Int = global_data.Core__Int,
    Base_Backtrace = global_data.Base__Backtrace,
    Incremental_Stabilization_num = global_data.Incremental__Stabilization_num,
    Incremental_Cutoff = global_data.Incremental__Cutoff,
    Incremental_Scope = global_data.Incremental__Scope,
    Incremental_On_update_handler = global_data.Incremental__On_update_handler,
    Incremental_Expert = global_data.Incremental__Expert,
    Ppx_assert_lib_Runtime = global_data.Ppx_assert_lib__Runtime,
    Base_Invariant = global_data.Base__Invariant,
    Incremental_Dot_user_info = global_data.Incremental__Dot_user_info,
    Core_Info = global_data.Core__Info,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incremental_Node$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incremental$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_node_ml);
   caml_call2(Ppx_inline_test_lib[6], cst_incremental$0, "node.ml");
   var
    _be_ = [0, cst],
    _bd_ = [0, cst_src_node_ml, 621, 4],
    _bc_ = [0, cst_src_node_ml, 622, 4],
    _bb_ = [0, cst_src_node_ml, 631, 4],
    _ba_ = [0, cst_src_node_ml, 633, 4],
    _a$_ = [0, cst_src_node_ml, 600, 16],
    _a__ = [0, cst_src_node_ml, 602, 16],
    _a9_ = [0, cst_src_node_ml, 556, 18],
    _a8_ = [0, cst_src_node_ml, 560, 16],
    _a7_ = [0, cst_src_node_ml, 549, 16],
    _a6_ = [0, cst_src_node_ml, 465, 12],
    _a4_ = [0, cst_src_node_ml, 484, 33],
    _a5_ = [0, cst_src_node_ml, 477, 14],
    _a2_ = [0, cst],
    cst_attempt_to_get_value_of_an = "attempt to get value of an invalid node",
    _a3_ = [0, cst_src_node_ml, 444, 18705, 18728],
    _a0_ = [0, cst],
    _aY_ = [0, cst_src_node_ml, 312, 50],
    _aX_ = [0, cst_src_node_ml, 326, 16],
    _aW_ = [0, cst_src_node_ml, 336, 11],
    _aV_ = [0, cst_src_node_ml, 337, 11],
    _aU_ = [0, cst_src_node_ml, 352, 16],
    _aS_ = [0, cst_src_node_ml, 355, 34],
    _aT_ = [0, cst_src_node_ml, 355, 60],
    _aR_ = [0, cst_src_node_ml, 358, 11],
    _aQ_ = [0, cst_src_node_ml, 359, 11],
    _aP_ = [0, cst_src_node_ml, 363, 16],
    _aO_ = [0, cst_src_node_ml, 367, 13],
    _aN_ = [0, cst_src_node_ml, 368, 13],
    _aM_ = [0, cst_src_node_ml, 372, 16],
    _aL_ = [0, cst_src_node_ml, 376, 13],
    _aK_ = [0, cst_src_node_ml, 377, 13],
    _aJ_ = [0, cst_src_node_ml, 381, 16],
    _aI_ = [0, cst_src_node_ml, 385, 16],
    _aH_ = [0, cst_src_node_ml, 389, 13],
    _aG_ = [0, cst_src_node_ml, 390, 13],
    _aF_ = [0, cst_src_node_ml, 395, 13],
    _aE_ = [0, cst_src_node_ml, 398, 37],
    _aD_ = [0, cst_src_node_ml, 420, 74],
    _aC_ = [0, cst_src_node_ml, 413, 15],
    _aB_ = [0, cst_src_node_ml, 434, 74],
    _aA_ = [0, cst_src_node_ml, 427, 13],
    _az_ = [0, cst_src_node_ml, 302, 6],
    _ay_ = [0, cst_src_node_ml, 303, 6],
    _ax_ = [0, cst_src_node_ml, 304, 6],
    _av_ = [0, cst_src_node_ml, 298, 8],
    _au_ = [0, cst_src_node_ml, 299, 8],
    _aZ_ = [0, cst_src_node_ml, 296, 6],
    _aw_ = [0, cst_src_node_ml, 300, 6],
    _a1_ = [0, cst_src_node_ml, 292, 11888, 11910],
    _at_ = [0, cst_src_node_ml, 235, 21],
    _as_ = [0, cst_src_node_ml, 145, 21],
    _S_ = [0, "creation_backtrace"],
    _T_ = [0, "user_info"],
    _U_ = [0, "force_necessary"],
    _V_ = [0, cst_my_child_index_in_parent_a$0],
    _W_ = [0, cst_my_parent_index_in_child_a$0],
    _X_ = [0, "on_update_handlers"],
    _Y_ = [0, "is_in_handle_after_stabilization"],
    _Z_ = [0, cst_observers$0],
    ___ = [0, cst_old_value_opt$0],
    _$_ = [0, cst_next_in_adjust_heights_hea$0],
    _aa_ = [0, cst_height_in_adjust_heights_h$0],
    _ab_ = [0, cst_next_in_recompute_heap$0],
    _ac_ = [0, cst_prev_in_recompute_heap$0],
    _ad_ = [0, cst_height_in_recompute_heap$0],
    _ae_ = [0, cst_height$0],
    _af_ = [0, cst_next_node_in_same_scope$0],
    _ag_ = [0, cst_created_in$0],
    _ah_ = [0, cst_parent0$0],
    _ai_ = [0, cst_parent1_and_beyond$0],
    _aj_ = [0, cst_num_parents$0],
    _ak_ = [0, cst_num_on_update_handlers$0],
    _al_ = [0, cst_changed_at$0],
    _am_ = [0, cst_cutoff$0],
    _an_ = [0, cst_kind$0],
    _ao_ = [0, cst_value_opt$0],
    _ap_ = [0, cst_recomputed_at$0],
    _aq_ = [0, "state"],
    _ar_ = [0, cst_id$0],
    cst_my_child_index_in_parent_a = cst_my_child_index_in_parent_a$0,
    cst_my_parent_index_in_child_a = cst_my_parent_index_in_child_a$0,
    cst_observers = cst_observers$0,
    cst_old_value_opt = cst_old_value_opt$0,
    cst_next_in_adjust_heights_hea = cst_next_in_adjust_heights_hea$0,
    cst_height_in_adjust_heights_h = cst_height_in_adjust_heights_h$0,
    cst_next_in_recompute_heap = cst_next_in_recompute_heap$0,
    cst_prev_in_recompute_heap = cst_prev_in_recompute_heap$0,
    cst_height_in_recompute_heap = cst_height_in_recompute_heap$0,
    cst_height = cst_height$0,
    cst_next_node_in_same_scope = cst_next_node_in_same_scope$0,
    cst_created_in = cst_created_in$0,
    cst_parent0 = cst_parent0$0,
    cst_parent1_and_beyond = cst_parent1_and_beyond$0,
    cst_num_parents = cst_num_parents$0,
    cst_num_on_update_handlers = cst_num_on_update_handlers$0,
    cst_changed_at = cst_changed_at$0,
    cst_cutoff = cst_cutoff$0,
    cst_kind = cst_kind$0,
    cst_value_opt = cst_value_opt$0,
    cst_recomputed_at = cst_recomputed_at$0,
    cst_id = cst_id$0,
    cst_incremental = cst_incremental$0,
    cst_Incremental_Node = cst_Incremental_Node$0;
   function my_child_index_in_parent_at_in(r){return r[25];}
   function set_my_child_index_in_parent_a(r, v){r[25] = v; return 0;}
   function my_parent_index_in_child_at_in(r){return r[24];}
   function set_my_parent_index_in_child_a(r, v){r[24] = v; return 0;}
   function observers(r){return r[21];}
   function set_observers(r, v){r[21] = v; return 0;}
   function old_value_opt(r){return r[20];}
   function set_old_value_opt(r, v){r[20] = v; return 0;}
   function next_in_adjust_heights_heap(r){return r[19];}
   function set_next_in_adjust_heights_hea(r, v){r[19] = v; return 0;}
   function height_in_adjust_heights_heap(r){return r[18];}
   function set_height_in_adjust_heights_h(r, v){r[18] = v; return 0;}
   function next_in_recompute_heap(r){return r[17];}
   function set_next_in_recompute_heap(r, v){r[17] = v; return 0;}
   function prev_in_recompute_heap(r){return r[16];}
   function set_prev_in_recompute_heap(r, v){r[16] = v; return 0;}
   function height_in_recompute_heap(r){return r[15];}
   function set_height_in_recompute_heap(r, v){r[15] = v; return 0;}
   function height(r){return r[14];}
   function set_height(r, v){r[14] = v; return 0;}
   function next_node_in_same_scope(r){return r[13];}
   function set_next_node_in_same_scope(r, v){r[13] = v; return 0;}
   function created_in(r){return r[12];}
   function set_created_in(r, v){r[12] = v; return 0;}
   function parent0(r){return r[11];}
   function set_parent0(r, v){r[11] = v; return 0;}
   function parent1_and_beyond(r){return r[10];}
   function set_parent1_and_beyond(r, v){r[10] = v; return 0;}
   function num_parents(r){return r[9];}
   function set_num_parents(r, v){r[9] = v; return 0;}
   function num_on_update_handlers(r){return r[8];}
   function set_num_on_update_handlers(r, v){r[8] = v; return 0;}
   function changed_at(r){return r[7];}
   function set_changed_at(r, v){r[7] = v; return 0;}
   function cutoff(r){return r[6];}
   function set_cutoff(r, v){r[6] = v; return 0;}
   function kind(r){return r[5];}
   function set_kind(r, v){r[5] = v; return 0;}
   function value_opt(r){return r[4];}
   function set_value_opt(r, v){r[4] = v; return 0;}
   function recomputed_at(r){return r[3];}
   function set_recomputed_at(r, v){r[3] = v; return 0;}
   function id(r){return r[1];}
   function _a_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            v,
            r[26],
            r[27],
            r[28]];
   }
   var
    _b_ = [0, set_my_child_index_in_parent_a],
    my_child_index_in_parent_at_in$0 =
      [0,
       function(param){return 0;},
       cst_my_child_index_in_parent_a,
       _b_,
       my_child_index_in_parent_at_in,
       _a_];
   function _c_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            v,
            r[25],
            r[26],
            r[27],
            r[28]];
   }
   var
    _d_ = [0, set_my_parent_index_in_child_a],
    my_parent_index_in_child_at_in$0 =
      [0,
       function(param){return 0;},
       cst_my_parent_index_in_child_a,
       _d_,
       my_parent_index_in_child_at_in,
       _c_];
   function _e_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            v,
            r[22],
            r[23],
            r[24],
            r[25],
            r[26],
            r[27],
            r[28]];
   }
   var
    _f_ = [0, set_observers],
    observers$0 =
      [0, function(param){return 0;}, cst_observers, _f_, observers, _e_];
   function _g_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            v,
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26],
            r[27],
            r[28]];
   }
   var
    _h_ = [0, set_old_value_opt],
    old_value_opt$0 =
      [0,
       function(param){return 0;},
       cst_old_value_opt,
       _h_,
       old_value_opt,
       _g_];
   function _i_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            v,
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26],
            r[27],
            r[28]];
   }
   var
    _j_ = [0, set_next_in_adjust_heights_hea],
    next_in_adjust_heights_heap$0 =
      [0,
       function(param){return 0;},
       cst_next_in_adjust_heights_hea,
       _j_,
       next_in_adjust_heights_heap,
       _i_];
   function _k_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            v,
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26],
            r[27],
            r[28]];
   }
   var
    _l_ = [0, set_height_in_adjust_heights_h],
    height_in_adjust_heights_heap$0 =
      [0,
       function(param){return 0;},
       cst_height_in_adjust_heights_h,
       _l_,
       height_in_adjust_heights_heap,
       _k_];
   function _m_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            v,
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26],
            r[27],
            r[28]];
   }
   var
    _n_ = [0, set_next_in_recompute_heap],
    next_in_recompute_heap$0 =
      [0,
       function(param){return 0;},
       cst_next_in_recompute_heap,
       _n_,
       next_in_recompute_heap,
       _m_];
   function _o_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            v,
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26],
            r[27],
            r[28]];
   }
   var
    _p_ = [0, set_prev_in_recompute_heap],
    prev_in_recompute_heap$0 =
      [0,
       function(param){return 0;},
       cst_prev_in_recompute_heap,
       _p_,
       prev_in_recompute_heap,
       _o_];
   function _q_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            v,
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26],
            r[27],
            r[28]];
   }
   var
    _r_ = [0, set_height_in_recompute_heap],
    height_in_recompute_heap$0 =
      [0,
       function(param){return 0;},
       cst_height_in_recompute_heap,
       _r_,
       height_in_recompute_heap,
       _q_];
   function _s_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            v,
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26],
            r[27],
            r[28]];
   }
   var
    _t_ = [0, set_height],
    height$0 = [0, function(param){return 0;}, cst_height, _t_, height, _s_];
   function _u_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            v,
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26],
            r[27],
            r[28]];
   }
   var
    _v_ = [0, set_next_node_in_same_scope],
    next_node_in_same_scope$0 =
      [0,
       function(param){return 0;},
       cst_next_node_in_same_scope,
       _v_,
       next_node_in_same_scope,
       _u_];
   function _w_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            v,
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26],
            r[27],
            r[28]];
   }
   var
    _x_ = [0, set_created_in],
    created_in$0 =
      [0, function(param){return 0;}, cst_created_in, _x_, created_in, _w_];
   function _y_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            v,
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26],
            r[27],
            r[28]];
   }
   var
    _z_ = [0, set_parent0],
    parent0$0 =
      [0, function(param){return 0;}, cst_parent0, _z_, parent0, _y_];
   function _A_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            v,
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26],
            r[27],
            r[28]];
   }
   var
    _B_ = [0, set_parent1_and_beyond],
    parent1_and_beyond$0 =
      [0,
       function(param){return 0;},
       cst_parent1_and_beyond,
       _B_,
       parent1_and_beyond,
       _A_];
   function _C_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            v,
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26],
            r[27],
            r[28]];
   }
   var
    _D_ = [0, set_num_parents],
    num_parents$0 =
      [0, function(param){return 0;}, cst_num_parents, _D_, num_parents, _C_];
   function _E_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            v,
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26],
            r[27],
            r[28]];
   }
   var
    _F_ = [0, set_num_on_update_handlers],
    num_on_update_handlers$0 =
      [0,
       function(param){return 0;},
       cst_num_on_update_handlers,
       _F_,
       num_on_update_handlers,
       _E_];
   function _G_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            v,
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26],
            r[27],
            r[28]];
   }
   var
    _H_ = [0, set_changed_at],
    changed_at$0 =
      [0, function(param){return 0;}, cst_changed_at, _H_, changed_at, _G_];
   function _I_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            v,
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26],
            r[27],
            r[28]];
   }
   var
    _J_ = [0, set_cutoff],
    cutoff$0 = [0, function(param){return 0;}, cst_cutoff, _J_, cutoff, _I_];
   function _K_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            v,
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26],
            r[27],
            r[28]];
   }
   var
    _L_ = [0, set_kind],
    kind$0 = [0, function(param){return 0;}, cst_kind, _L_, kind, _K_];
   function _M_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            v,
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26],
            r[27],
            r[28]];
   }
   var
    _N_ = [0, set_value_opt],
    value_opt$0 =
      [0, function(param){return 0;}, cst_value_opt, _N_, value_opt, _M_];
   function _O_(r, v){
    return [0,
            r[1],
            r[2],
            v,
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26],
            r[27],
            r[28]];
   }
   var
    _P_ = [0, set_recomputed_at],
    recomputed_at$0 =
      [0,
       function(param){return 0;},
       cst_recomputed_at,
       _P_,
       recomputed_at,
       _O_];
   function _Q_(r, v){
    return [0,
            v,
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26],
            r[27],
            r[28]];
   }
   var _R_ = 0, id$0 = [0, function(param){return 0;}, cst_id, _R_, id, _Q_];
   function sexp_of_t(of_a_001, param){
    var
     state_005 = param[2],
     id_003 = param[1],
     recomputed_at_007 = param[3],
     value_opt_009 = param[4],
     kind_011 = param[5],
     cutoff_013 = param[6],
     changed_at_015 = param[7],
     num_on_update_handlers_017 = param[8],
     num_parents_019 = param[9],
     parent1_and_beyond_021 = param[10],
     parent0_023 = param[11],
     created_in_025 = param[12],
     next_node_in_same_scope_027 = param[13],
     height_029 = param[14],
     height_in_recompute_heap_031 = param[15],
     prev_in_recompute_heap_033 = param[16],
     next_in_recompute_heap_035 = param[17],
     height_in_adjust_heights_heap_ = param[18],
     next_in_adjust_heights_heap_03 = param[19],
     old_value_opt_041 = param[20],
     observers_043 = param[21],
     is_in_handle_after_stabilizati = param[22],
     on_update_handlers_047 = param[23],
     my_parent_index_in_child_at_in = param[24],
     my_child_index_in_parent_at_in = param[25],
     force_necessary_053 = param[26],
     user_info_055 = param[27],
     creation_backtrace_057 = param[28],
     arg_058 =
       caml_call2(Core[515], Base_Backtrace[1], creation_backtrace_057),
     bnds_002 = [0, [1, [0, _S_, [0, arg_058, 0]]], 0],
     arg_056 =
       caml_call2(Core[515], Incremental_Dot_user_info[4], user_info_055),
     bnds_002$0 = [0, [1, [0, _T_, [0, arg_056, 0]]], bnds_002],
     arg_054 = caml_call1(Core[323], force_necessary_053),
     bnds_002$1 = [0, [1, [0, _U_, [0, arg_054, 0]]], bnds_002$0],
     arg_052 =
       caml_call2(Core[301], Core[389], my_child_index_in_parent_at_in),
     bnds_002$2 = [0, [1, [0, _V_, [0, arg_052, 0]]], bnds_002$1],
     arg_050 =
       caml_call2(Core[301], Core[389], my_parent_index_in_child_at_in),
     bnds_002$3 = [0, [1, [0, _W_, [0, arg_050, 0]]], bnds_002$2],
     _cz_ = caml_call1(Incremental_On_update_handler[2], of_a_001),
     arg_048 = caml_call2(Core[472], _cz_, on_update_handlers_047),
     bnds_002$4 = [0, [1, [0, _X_, [0, arg_048, 0]]], bnds_002$3],
     arg_046 = caml_call1(Core[323], is_in_handle_after_stabilizati),
     bnds_002$5 = [0, [1, [0, _Y_, [0, arg_046, 0]]], bnds_002$4],
     arg_044 =
       caml_call2
        (Incremental_Import[6][2], Sexplib0_Sexp_conv[23], observers_043),
     bnds_002$6 = [0, [1, [0, _Z_, [0, arg_044, 0]]], bnds_002$5],
     arg_042 =
       caml_call2(Incremental_Import[6][2], of_a_001, old_value_opt_041),
     bnds_002$7 = [0, [1, [0, ___, [0, arg_042, 0]]], bnds_002$6],
     arg_040 =
       caml_call2
        (Incremental_Import[6][2],
         Incremental_Types[15][2][1],
         next_in_adjust_heights_heap_03),
     bnds_002$8 = [0, [1, [0, _$_, [0, arg_040, 0]]], bnds_002$7],
     arg_038 = caml_call1(Core[389], height_in_adjust_heights_heap_),
     bnds_002$9 = [0, [1, [0, _aa_, [0, arg_038, 0]]], bnds_002$8],
     arg_036 =
       caml_call2
        (Incremental_Import[6][2],
         Incremental_Types[15][2][1],
         next_in_recompute_heap_035),
     bnds_002$10 = [0, [1, [0, _ab_, [0, arg_036, 0]]], bnds_002$9],
     arg_034 =
       caml_call2
        (Incremental_Import[6][2],
         Incremental_Types[15][2][1],
         prev_in_recompute_heap_033),
     bnds_002$11 = [0, [1, [0, _ac_, [0, arg_034, 0]]], bnds_002$10],
     arg_032 = caml_call1(Core[389], height_in_recompute_heap_031),
     bnds_002$12 = [0, [1, [0, _ad_, [0, arg_032, 0]]], bnds_002$11],
     arg_030 = caml_call1(Core[389], height_029),
     bnds_002$13 = [0, [1, [0, _ae_, [0, arg_030, 0]]], bnds_002$12],
     arg_028 =
       caml_call2
        (Incremental_Import[6][2],
         Incremental_Types[15][2][1],
         next_node_in_same_scope_027),
     bnds_002$14 = [0, [1, [0, _af_, [0, arg_028, 0]]], bnds_002$13],
     arg_026 = caml_call1(Incremental_Scope[1], created_in_025),
     bnds_002$15 = [0, [1, [0, _ag_, [0, arg_026, 0]]], bnds_002$14],
     arg_024 =
       caml_call2
        (Incremental_Import[6][2], Incremental_Types[15][2][1], parent0_023),
     bnds_002$16 = [0, [1, [0, _ah_, [0, arg_024, 0]]], bnds_002$15],
     _cA_ = caml_call1(Incremental_Import[6][2], Incremental_Types[15][2][1]),
     arg_022 =
       caml_call2(Incremental_Import[7][10], _cA_, parent1_and_beyond_021),
     bnds_002$17 = [0, [1, [0, _ai_, [0, arg_022, 0]]], bnds_002$16],
     arg_020 = caml_call1(Core[389], num_parents_019),
     bnds_002$18 = [0, [1, [0, _aj_, [0, arg_020, 0]]], bnds_002$17],
     arg_018 = caml_call1(Core[389], num_on_update_handlers_017),
     bnds_002$19 = [0, [1, [0, _ak_, [0, arg_018, 0]]], bnds_002$18],
     arg_016 = caml_call1(Incremental_Stabilization_num[2], changed_at_015),
     bnds_002$20 = [0, [1, [0, _al_, [0, arg_016, 0]]], bnds_002$19],
     arg_014 = caml_call2(Incremental_Cutoff[1], of_a_001, cutoff_013),
     bnds_002$21 = [0, [1, [0, _am_, [0, arg_014, 0]]], bnds_002$20],
     arg_012 = caml_call2(Incremental_Kind[2], of_a_001, kind_011),
     bnds_002$22 = [0, [1, [0, _an_, [0, arg_012, 0]]], bnds_002$21],
     arg_010 = caml_call2(Incremental_Import[6][2], of_a_001, value_opt_009),
     bnds_002$23 = [0, [1, [0, _ao_, [0, arg_010, 0]]], bnds_002$22],
     arg_008 = caml_call1(Incremental_Stabilization_num[2], recomputed_at_007),
     bnds_002$24 = [0, [1, [0, _ap_, [0, arg_008, 0]]], bnds_002$23],
     arg_006 = caml_call1(Sexplib0_Sexp_conv[23], state_005),
     bnds_002$25 = [0, [1, [0, _aq_, [0, arg_006, 0]]], bnds_002$24],
     arg_004 = caml_call1(Incremental_Node_id[1], id_003),
     bnds_002$26 = [0, [1, [0, _ar_, [0, arg_004, 0]]], bnds_002$25];
    return [1, bnds_002$26];
   }
   function same(t1, t2){return t1 === t2 ? 1 : 0;}
   var is_necessary = Incremental_Types[15][4];
   function iteri_children(t, f){
    return caml_call2(Incremental_Kind[10], t[5], f);
   }
   var
    is_valid = Incremental_Types[15][3],
    type_equal_if_phys_same = Incremental_Types[15][5];
   function user_info(t){
    var _cx_ = t[27];
    if(! _cx_) return 0;
    var other = _cx_[1];
    if(1 === other[0]){var i = other[1]; return [0, i];}
    var _cy_ = caml_call1(Incremental_Dot_user_info[4], other);
    return [0, caml_call1(Core_Info[20], _cy_)];
   }
   function set_user_info(t, info){
    if(info) var i = info[1], _cw_ = [0, [1, i]]; else var _cw_ = 0;
    t[27] = _cw_;
    return 0;
   }
   function append_user_info_graphviz(t, label, attrs){
    var
     new$0 = caml_call2(Incremental_Dot_user_info[6], label, attrs),
     match = t[27];
    if(match)
     var
      other = match[1],
      _cv_ = [0, caml_call2(Incremental_Dot_user_info[8], other, new$0)];
    else
     var _cv_ = [0, new$0];
    t[27] = _cv_;
    return 0;
   }
   function edge_is_stale(child, parent){
    var
     _cu_ = caml_call2(Incremental_Stabilization_num[1], child[7], parent[3]);
    return caml_call2(Core[91], _cu_, 0);
   }
   function is_stale_with_respect_to_a_chi(t){
    var is_stale = [0, 0];
    iteri_children
     (t,
      function(param, child){
       var
        _cs_ = edge_is_stale(child, t),
        _ct_ = _cs_ ? (is_stale[1] = 1, 0) : _cs_;
       return _ct_;
      });
    return is_stale[1];
   }
   function is_stale(t){
    var _cl_ = t[5];
    if(typeof _cl_ === "number"){
     if(0 === _cl_) return 0;
     throw caml_maybe_attach_backtrace([0, Assert_failure, _as_], 1);
    }
    switch(_cl_[0]){
      case 1:
       return caml_call1(Incremental_Stabilization_num[7], t[3]);
      case 2:
       return caml_call1(Incremental_Stabilization_num[7], t[3]);
      case 3:
       var _cn_ = caml_call1(Incremental_Stabilization_num[7], t[3]);
       return _cn_ ? _cn_ : is_stale_with_respect_to_a_chi(t);
      case 5:
       return caml_call1(Incremental_Stabilization_num[7], t[3]);
      case 6:
       var force_stale = _cl_[1][5];
       if(force_stale)
        var force_stale$0 = force_stale;
       else{
        var _co_ = caml_call1(Incremental_Stabilization_num[7], t[3]);
        if(! _co_) return is_stale_with_respect_to_a_chi(t);
        var force_stale$0 = _co_;
       }
       return force_stale$0;
      case 8:
       var _cp_ = caml_call1(Incremental_Stabilization_num[7], t[3]);
       return _cp_ ? _cp_ : is_stale_with_respect_to_a_chi(t);
      case 10:
       var _cq_ = caml_call1(Incremental_Stabilization_num[7], t[3]);
       return _cq_ ? _cq_ : is_stale_with_respect_to_a_chi(t);
      case 13:
       return caml_call1(Incremental_Stabilization_num[7], t[3]);
      case 16:
       var
        set_at = _cl_[1][3],
        _cr_ = caml_call2(Incremental_Stabilization_num[1], set_at, t[3]);
       return caml_call2(Core[91], _cr_, 0);
      default:
       var _cm_ = caml_call1(Incremental_Stabilization_num[7], t[3]);
       return _cm_ ? _cm_ : is_stale_with_respect_to_a_chi(t);
    }
   }
   function needs_to_be_computed(t){
    var _ck_ = caml_call1(is_necessary, t);
    return _ck_ ? is_stale(t) : _ck_;
   }
   function is_in_recompute_heap(t){return caml_call2(Core[88], t[15], 0);}
   function is_in_adjust_heights_heap(t){
    return caml_call2(Core[88], t[18], 0);
   }
   function get_parent(t, index){
    var
     _cj_ =
       caml_call2(Core[90], index, 0)
        ? t[11]
        : caml_call2(Incremental_Import[7][20], t[10], index - 1 | 0);
    return caml_call1(Incremental_Import[6][9], _cj_);
   }
   function iteri_parents(t, f){
    if(caml_call2(Core[91], t[9], 0)){
     caml_call2(f, 0, caml_call1(Incremental_Import[6][9], t[11]));
     var _cg_ = t[9] - 1 | 0, _cf_ = 1;
     if(_cg_ >= 1){
      var index = _cf_;
      for(;;){
       var _ch_ = caml_call2(Incremental_Import[7][20], t[10], index - 1 | 0);
       caml_call2(f, index, caml_call1(Incremental_Import[6][9], _ch_));
       var _ci_ = index + 1 | 0;
       if(_cg_ === index) break;
       var index = _ci_;
      }
     }
    }
    return;
   }
   function has_child(t, child){
    var has = [0, 0];
    iteri_children
     (t,
      function(param, child$0){
       var _cd_ = has[1], _ce_ = _cd_ || (child === child$0 ? 1 : 0);
       has[1] = _ce_;
       return 0;
      });
    return has[1];
   }
   function has_parent(t, parent){
    var has = [0, 0];
    iteri_parents
     (t,
      function(param, parent$0){
       var _cb_ = has[1], _cc_ = _cb_ || (parent === parent$0 ? 1 : 0);
       has[1] = _cc_;
       return 0;
      });
    return has[1];
   }
   function should_be_invalidated(t){
    var _b__ = t[5];
    if(typeof _b__ !== "number")
     switch(_b__[0]){
       case 1:
        return 0;
       case 2:
        return 0;
       case 3:
        var lhs = _b__[1][3]; return 1 - caml_call1(is_valid, lhs);
       case 4:
        var lhs_change = _b__[1][4];
        return 1 - caml_call1(is_valid, lhs_change);
       case 6:
        return 0;
       case 8:
        var test = _b__[1][2]; return 1 - caml_call1(is_valid, test);
       case 9:
        var test_change = _b__[1][3];
        return 1 - caml_call1(is_valid, test_change);
       case 10:
        var lhs$0 = _b__[1][2]; return 1 - caml_call1(is_valid, lhs$0);
       case 11:
        var lhs_change$0 = _b__[1][3];
        return 1 - caml_call1(is_valid, lhs_change$0);
       case 5:
       case 13:
       case 16:
        return 0;
       default:
        var has = [0, 0];
        iteri_children
         (t,
          function(param, child){
           var _b$_ = has[1], _ca_ = _b$_ || 1 - caml_call1(is_valid, child);
           has[1] = _ca_;
           return 0;
          });
        return has[1];
     }
    if(0 === _b__) return 0;
    throw caml_maybe_attach_backtrace([0, Assert_failure, _at_], 1);
   }
   function fold_observers(t, init, f){
    var r = [0, t[21]], ac = [0, init];
    for(;;){
     if(! caml_call1(Incremental_Import[6][8], r[1])) return ac[1];
     var observer = caml_call1(Incremental_Import[6][9], r[1]);
     r[1] = observer[7];
     ac[1] = caml_call2(f, ac[1], observer);
    }
   }
   function invariant(invariant_a, t){
    function _bI_(param){
     var
      t2 = is_in_recompute_heap(t),
      t1 = needs_to_be_computed(t),
      sexpifier = Core[323],
      equal = 0,
      message = 0,
      here = 0;
     function comparator(a_060, b_061){
      return caml_call2(Core[316], a_060, b_061);
     }
     caml_call8
      (Ppx_assert_lib_Runtime[2],
       pos,
       sexpifier,
       comparator,
       here,
       message,
       equal,
       t1,
       t2);
     if(caml_call1(is_necessary, t)){
      var _bK_ = caml_call1(Incremental_Scope[5], t[12]);
      if(! caml_call2(Core[91], t[14], _bK_))
       throw caml_maybe_attach_backtrace([0, Assert_failure, _aZ_], 1);
      iteri_children
       (t,
        function(param, child){
         if(! caml_call2(Core[91], t[14], child[14]))
          throw caml_maybe_attach_backtrace([0, Assert_failure, _av_], 1);
         if(has_parent(child, t)) return 0;
         throw caml_maybe_attach_backtrace([0, Assert_failure, _au_], 1);
        });
      if(should_be_invalidated(t))
       throw caml_maybe_attach_backtrace([0, Assert_failure, _aw_], 1);
     }
     iteri_parents
      (t,
       function(param, parent){
        if(! has_child(parent, t))
         throw caml_maybe_attach_backtrace([0, Assert_failure, _az_], 1);
        if(! caml_call1(is_necessary, parent))
         throw caml_maybe_attach_backtrace([0, Assert_failure, _ay_], 1);
        if(caml_call2(Core[92], t[14], parent[14])) return 0;
        throw caml_maybe_attach_backtrace([0, Assert_failure, _ax_], 1);
       });
     function check(f){return caml_call2(Base_Invariant[2], t, f);}
     var
      my_child_index_in_parent_at_in =
        check
         (function(my_child_index_in_parent_at_in){
           var
            got = my_child_index_in_parent_at_in.length - 1,
            expect = caml_call1(Incremental_Import[7][19], t[10]) + 1 | 0,
            sexpifier = Core[389],
            equal = 0,
            message = 0,
            here = 0;
           function comparator(a_070, b_071){
            return caml_call2(Core[382], a_070, b_071);
           }
           caml_call8
            (Ppx_assert_lib_Runtime[3],
             pos$0,
             sexpifier,
             comparator,
             here,
             message,
             equal,
             expect,
             got);
           iteri_parents
            (t,
             function(parent_index, param){
              var
               _b9_ =
                 caml_check_bound
                   (my_child_index_in_parent_at_in, parent_index)
                  [1 + parent_index];
              if(t === caml_call2(Incremental_Kind[5], param[5], _b9_))
               return 0;
              throw caml_maybe_attach_backtrace([0, Assert_failure, _aA_], 1);
             });
           var
            _b6_ = Incremental_Import[1],
            _b7_ = _b6_ ? 1 - caml_call1(is_necessary, t) : _b6_;
           if(! _b7_) return _b7_;
           function _b8_(x){
            if(caml_call2(Core[90], x, -1)) return 0;
            throw caml_maybe_attach_backtrace([0, Assert_failure, _aB_], 1);
           }
           return caml_call2
                   (Incremental_Import[5][35],
                    my_child_index_in_parent_at_in,
                    _b8_);
          }),
      my_parent_index_in_child_at_in =
        check
         (function(my_parent_index_in_child_at_in){
           var _b2_ = t[5];
           a:
           {
            if(typeof _b2_ !== "number" && 6 === _b2_[0]) break a;
            var
             got = my_parent_index_in_child_at_in.length - 1,
             expect = caml_call1(Incremental_Kind[4], t[5]),
             sexpifier = Core[389],
             equal = 0,
             message = 0,
             here = 0,
             comparator =
               function(a_068, b_069){
                return caml_call2(Core[382], a_068, b_069);
               };
            caml_call8
             (Ppx_assert_lib_Runtime[3],
              pos$1,
              sexpifier,
              comparator,
              here,
              message,
              equal,
              expect,
              got);
           }
           if(caml_call1(is_necessary, t))
            iteri_children
             (t,
              function(child_index, param){
               if
                (t
                 ===
                  get_parent
                   (param,
                    caml_check_bound
                      (my_parent_index_in_child_at_in, child_index)
                     [1 + child_index]))
                return 0;
               throw caml_maybe_attach_backtrace([0, Assert_failure, _aC_], 1);
              });
           var
            _b3_ = Incremental_Import[1],
            _b4_ = _b3_ ? 1 - caml_call1(is_necessary, t) : _b3_;
           if(! _b4_) return _b4_;
           function _b5_(x){
            if(caml_call2(Core[90], x, -1)) return 0;
            throw caml_maybe_attach_backtrace([0, Assert_failure, _aD_], 1);
           }
           return caml_call2
                   (Incremental_Import[5][35],
                    my_parent_index_in_child_at_in,
                    _b5_);
          }),
      observers_fun =
        check
         (function(param){
           return fold_observers
                   (t,
                    0,
                    function(param, observer){
                     var state = observer[1], observing = observer[2];
                     if(t !== observing)
                      throw caml_maybe_attach_backtrace
                             ([0, Assert_failure, _aF_], 1);
                     if(1 < state - 1 >>> 0)
                      throw caml_maybe_attach_backtrace
                             ([0, Assert_failure, _aE_], 1);
                     return 0;
                    });
          }),
      old_value_opt_fun =
        check(caml_call1(Incremental_Import[6][4], invariant_a)),
      next_in_adjust_heights_heap_fu =
        check
         (function(next_in_adjust_heights_heap){
           if(is_in_adjust_heights_heap(t)){
            var
             _b1_ =
               caml_call1
                (Incremental_Import[6][8], next_in_adjust_heights_heap);
            if(! _b1_) return _b1_;
            var
             next =
               caml_call1
                (Incremental_Import[6][9], next_in_adjust_heights_heap);
            if(! is_in_adjust_heights_heap(next))
             throw caml_maybe_attach_backtrace([0, Assert_failure, _aH_], 1);
            if(caml_call2(Core[90], t[18], next[18])) return 0;
            throw caml_maybe_attach_backtrace([0, Assert_failure, _aG_], 1);
           }
           if
            (caml_call1(Incremental_Import[6][7], next_in_adjust_heights_heap))
            return 0;
           throw caml_maybe_attach_backtrace([0, Assert_failure, _aI_], 1);
          }),
      height_in_adjust_heights_heap_ =
        check
         (function(height_in_adjust_heights_heap){
           var _b0_ = caml_call2(Core[88], height_in_adjust_heights_heap, 0);
           if(! _b0_) return _b0_;
           if(caml_call2(Core[92], height_in_adjust_heights_heap, t[14]))
            return 0;
           throw caml_maybe_attach_backtrace([0, Assert_failure, _aJ_], 1);
          }),
      next_in_recompute_heap_fun =
        check
         (function(next_in_recompute_heap){
           if
            (1 - is_in_recompute_heap(t)
             && ! caml_call1(Incremental_Import[6][7], next_in_recompute_heap))
            throw caml_maybe_attach_backtrace([0, Assert_failure, _aM_], 1);
           var
            _bZ_ =
              caml_call1(Incremental_Import[6][8], next_in_recompute_heap);
           if(! _bZ_) return _bZ_;
           var
            next =
              caml_call1(Incremental_Import[6][9], next_in_recompute_heap);
           if(t !== caml_call1(Incremental_Import[6][9], next[16]))
            throw caml_maybe_attach_backtrace([0, Assert_failure, _aL_], 1);
           if(caml_call2(Core[90], t[15], next[15])) return 0;
           throw caml_maybe_attach_backtrace([0, Assert_failure, _aK_], 1);
          }),
      prev_in_recompute_heap_fun =
        check
         (function(prev_in_recompute_heap){
           if
            (1 - is_in_recompute_heap(t)
             && ! caml_call1(Incremental_Import[6][7], prev_in_recompute_heap))
            throw caml_maybe_attach_backtrace([0, Assert_failure, _aP_], 1);
           var
            _bY_ =
              caml_call1(Incremental_Import[6][8], prev_in_recompute_heap);
           if(! _bY_) return _bY_;
           var
            prev =
              caml_call1(Incremental_Import[6][9], prev_in_recompute_heap);
           if(t !== caml_call1(Incremental_Import[6][9], prev[17]))
            throw caml_maybe_attach_backtrace([0, Assert_failure, _aO_], 1);
           if(caml_call2(Core[90], t[15], prev[15])) return 0;
           throw caml_maybe_attach_backtrace([0, Assert_failure, _aN_], 1);
          }),
      height_in_recompute_heap_fun =
        check
         (function(height_in_recompute_heap){
           if(! caml_call2(Core[88], height_in_recompute_heap, -1))
            throw caml_maybe_attach_backtrace([0, Assert_failure, _aR_], 1);
           if(caml_call2(Core[89], height_in_recompute_heap, t[14])) return 0;
           throw caml_maybe_attach_backtrace([0, Assert_failure, _aQ_], 1);
          }),
      height_fun =
        check
         (function(height){
           if(caml_call1(is_necessary, t)){
            if(caml_call2(Core[88], height, 0)) return 0;
            throw caml_maybe_attach_backtrace([0, Assert_failure, _aS_], 1);
           }
           if(caml_call2(Core[90], height, -1)) return 0;
           throw caml_maybe_attach_backtrace([0, Assert_failure, _aT_], 1);
          }),
      next_node_in_same_scope_fun =
        check
         (function(next_node_in_same_scope){
           var
            _bW_ = caml_call1(Incremental_Scope[4], t[12]),
            _bX_ = _bW_ || 1 - caml_call1(is_valid, t);
           if(! _bX_) return _bX_;
           if(caml_call1(Incremental_Import[6][7], next_node_in_same_scope))
            return 0;
           throw caml_maybe_attach_backtrace([0, Assert_failure, _aU_], 1);
          }),
      created_in_fun = check(Incremental_Scope[2]),
      parent0_fun =
        check
         (function(parent0){
           var
            t2 = caml_call1(Incremental_Import[6][8], parent0),
            t1 = caml_call2(Core[91], t[9], 0),
            sexpifier = Core[323],
            equal = 0,
            message = 0,
            here = 0;
           function comparator(a_066, b_067){
            return caml_call2(Core[316], a_066, b_067);
           }
           return caml_call8
                   (Ppx_assert_lib_Runtime[2],
                    pos$2,
                    sexpifier,
                    comparator,
                    here,
                    message,
                    equal,
                    t1,
                    t2);
          }),
      parent1_and_beyond_fun =
        check
         (function(parent1_and_beyond){
           var
            _bT_ = caml_call1(Incremental_Import[7][19], parent1_and_beyond),
            _bS_ = 1;
           if(_bT_ >= 1){
            var parent_index = _bS_;
            for(;;){
             var
              _bU_ =
                caml_call2
                 (Incremental_Import[7][20],
                  parent1_and_beyond,
                  parent_index - 1 | 0),
              t2 = caml_call1(Incremental_Import[6][8], _bU_),
              t1 = caml_call2(Core[92], parent_index, t[9]),
              sexpifier = Core[323],
              equal = 0,
              message = 0,
              here = 0,
              comparator =
                function(a_064, b_065){
                 return caml_call2(Core[316], a_064, b_065);
                };
             caml_call8
              (Ppx_assert_lib_Runtime[2],
               pos$3,
               sexpifier,
               comparator,
               here,
               message,
               equal,
               t1,
               t2);
             var _bV_ = parent_index + 1 | 0;
             if(_bT_ === parent_index) break;
             var parent_index = _bV_;
            }
           }
           return 0;
          }),
      num_parents_fun =
        check
         (function(num_parents){
           if(! caml_call2(Core[88], num_parents, 0))
            throw caml_maybe_attach_backtrace([0, Assert_failure, _aW_], 1);
           var _bR_ = 1 + caml_call1(Incremental_Import[7][19], t[10]) | 0;
           if(caml_call2(Core[89], num_parents, _bR_)) return 0;
           throw caml_maybe_attach_backtrace([0, Assert_failure, _aV_], 1);
          }),
      _bL_ =
        fold_observers
         (t,
          0,
          function(n, param){
           var on_update_handlers = param[3];
           return n + caml_call1(Core_List[45], on_update_handlers) | 0;
          }),
      expect = caml_call1(Core_List[45], t[23]) + _bL_ | 0,
      num_on_update_handlers_fun =
        check
         (function(eta){
           var sexpifier = Core[389], equal = 0, message = 0, here = 0;
           function comparator(a_062, b_063){
            return caml_call2(Core[382], a_062, b_063);
           }
           return caml_call8
                   (Ppx_assert_lib_Runtime[3],
                    pos$4,
                    sexpifier,
                    comparator,
                    here,
                    message,
                    equal,
                    expect,
                    eta);
          }),
      changed_at_fun =
        check
         (function(changed_at){
           caml_call1(Incremental_Stabilization_num[4], changed_at);
           var _bP_ = caml_call1(Incremental_Stabilization_num[8], t[3]);
           if(! _bP_) return _bP_;
           var
            _bQ_ =
              caml_call2(Incremental_Stabilization_num[1], changed_at, t[3]);
           if(caml_call2(Core[89], _bQ_, 0)) return 0;
           throw caml_maybe_attach_backtrace([0, Assert_failure, _aX_], 1);
          }),
      cutoff_fun = check(caml_call1(Incremental_Cutoff[2], invariant_a)),
      kind_fun =
        check
         (function(kind){
           caml_call2(Incremental_Kind[1], invariant_a, kind);
           if(typeof kind !== "number" && 6 === kind[0]){
            var e = kind[1], _bO_ = caml_call1(is_necessary, t);
            return caml_call2(Incremental_Expert[4], e, _bO_);
           }
           return 0;
          }),
      value_opt_fun =
        check
         (function(value_opt){
           var
            _bM_ = caml_call1(is_valid, t),
            _bN_ = _bM_ ? 1 - is_stale(t) : _bM_;
           if(_bN_ && ! caml_call1(Incremental_Import[6][8], value_opt))
            throw caml_maybe_attach_backtrace([0, Assert_failure, _aY_], 1);
           return caml_call2(Incremental_Import[6][4], invariant_a, value_opt);
          }),
      recomputed_at_fun = check(Incremental_Stabilization_num[4]),
      id_fun = check(Incremental_Node_id[9]);
     caml_call1(id_fun, id$0);
     caml_call1(recomputed_at_fun, recomputed_at$0);
     caml_call1(value_opt_fun, value_opt$0);
     caml_call1(kind_fun, kind$0);
     caml_call1(cutoff_fun, cutoff$0);
     caml_call1(changed_at_fun, changed_at$0);
     caml_call1(num_on_update_handlers_fun, num_on_update_handlers$0);
     caml_call1(num_parents_fun, num_parents$0);
     caml_call1(parent1_and_beyond_fun, parent1_and_beyond$0);
     caml_call1(parent0_fun, parent0$0);
     caml_call1(created_in_fun, created_in$0);
     caml_call1(next_node_in_same_scope_fun, next_node_in_same_scope$0);
     caml_call1(height_fun, height$0);
     caml_call1(height_in_recompute_heap_fun, height_in_recompute_heap$0);
     caml_call1(prev_in_recompute_heap_fun, prev_in_recompute_heap$0);
     caml_call1(next_in_recompute_heap_fun, next_in_recompute_heap$0);
     caml_call1
      (height_in_adjust_heights_heap_, height_in_adjust_heights_heap$0);
     caml_call1(next_in_adjust_heights_heap_fu, next_in_adjust_heights_heap$0);
     caml_call1(old_value_opt_fun, old_value_opt$0);
     caml_call1(observers_fun, observers$0);
     caml_call1
      (my_parent_index_in_child_at_in, my_parent_index_in_child_at_in$0);
     caml_call1
      (my_child_index_in_parent_at_in, my_child_index_in_parent_at_in$0);
     return 0;
    }
    function _bJ_(x_059){
     return sexp_of_t(function(param){return _a0_;}, x_059);
    }
    return caml_call4(Base_Invariant[1], _a1_, t, _bJ_, _bI_);
   }
   function unsafe_value(t){
    return caml_call1(Incremental_Import[6][16], t[4]);
   }
   function value_exn(t){
    if(caml_call1(Incremental_Import[6][8], t[4]))
     return caml_call1(Incremental_Import[6][16], t[4]);
    function _bH_(x_072){
     return sexp_of_t(function(param){return _a2_;}, x_072);
    }
    return caml_call5
            (Core[247], 0, _a3_, cst_attempt_to_get_value_of_an, t, _bH_);
   }
   function get_cutoff(t){return t[6];}
   function set_cutoff$0(t, cutoff){t[6] = cutoff; return 0;}
   function is_const(t){
    var _bG_ = t[5];
    if(typeof _bG_ !== "number" && 5 === _bG_[0]) return 1;
    return 0;
   }
   function on_update(t, on_update_handler){
    t[23] = [0, on_update_handler, t[23]];
    t[8] = t[8] + 1 | 0;
    return 0;
   }
   function run_on_update_handlers(t, node_update, now){
    var r = [0, t[23]];
    for(;;){
     if(caml_call1(Core_List[18], r[1])) break;
     var match$0 = r[1];
     if(! match$0)
      throw caml_maybe_attach_backtrace([0, Assert_failure, _a6_], 1);
     var rest$0 = match$0[2], on_update_handler$0 = match$0[1];
     r[1] = rest$0;
     caml_call3
      (Incremental_On_update_handler[4],
       on_update_handler$0,
       node_update,
       now);
    }
    var r$0 = [0, t[21]];
    for(;;){
     if(! caml_call1(Incremental_Import[6][8], r$0[1])) return 0;
     var observer = caml_call1(Incremental_Import[6][9], r$0[1]);
     r$0[1] = observer[7];
     var r$1 = [0, observer[3]];
     for(;;){
      if(caml_call1(Core_List[18], r$1[1])) break;
      var match = r$1[1];
      if(! match)
       throw caml_maybe_attach_backtrace([0, Assert_failure, _a5_], 1);
      var rest = match[2], on_update_handler = match[1];
      r$1[1] = rest;
      var _bF_ = observer[1];
      a:
      if(_bF_){
       switch(_bF_ - 1 | 0){
         case 0:
          caml_call3
           (Incremental_On_update_handler[4],
            on_update_handler,
            node_update,
            now);
          break;
         case 1: break;
         default: break a;
       }
       continue;
      }
      throw caml_maybe_attach_backtrace([0, Assert_failure, _a4_], 1);
     }
    }
   }
   function set_kind$0(t, kind){
    t[5] = kind;
    var _bE_ = caml_call1(Incremental_Kind[4], kind);
    t[24] = caml_call2(Incremental_Import[5][63], _bE_, -1);
    return 0;
   }
   function create(state, created_in, kind){
    var
     _bp_ = state[18] ? [0, caml_call2(Base_Backtrace[2], 0, 0)] : 0,
     _bq_ = caml_call1(Incremental_Kind[4], kind),
     _br_ = caml_call2(Incremental_Import[5][63], _bq_, -1),
     _bs_ = Incremental_Import[6][5],
     _bt_ = Incremental_Import[6][5],
     _bu_ = Incremental_Import[6][5],
     _bv_ = Incremental_Import[6][5],
     _bw_ = Incremental_Import[6][5],
     _bx_ = Incremental_Import[6][5],
     _by_ = Incremental_Import[6][5],
     _bz_ = Incremental_Import[7][15],
     _bA_ = Incremental_Stabilization_num[5],
     _bB_ = Incremental_Cutoff[8],
     _bC_ = Incremental_Import[6][5],
     _bD_ = Incremental_Stabilization_num[5],
     t =
       [0,
        caml_call1(Incremental_Node_id[10], 0),
        state,
        _bD_,
        _bC_,
        kind,
        _bB_,
        _bA_,
        0,
        0,
        _bz_,
        _by_,
        created_in,
        _bx_,
        -1,
        -1,
        _bw_,
        _bv_,
        -1,
        _bu_,
        _bt_,
        _bs_,
        0,
        0,
        _br_,
        [0, -1],
        0,
        0,
        _bp_];
    caml_call2(Incremental_Scope[8], created_in, t);
    return t;
   }
   function max_num_parents(t){
    return 1 + caml_call1(Incremental_Import[7][19], t[10]) | 0;
   }
   function set_parent(child, parent, parent_index){
    if(! caml_call2(Core[90], parent_index, 0))
     return caml_call3
             (Incremental_Import[7][75],
              child[10],
              parent_index - 1 | 0,
              parent);
    child[11] = parent;
    return;
   }
   function link(child, child_index, parent, parent_index){
    set_parent
     (child, caml_call1(Incremental_Import[6][6], parent), parent_index);
    caml_check_bound(child[25], parent_index)[1 + parent_index] = child_index;
    caml_check_bound(parent[24], child_index)[1 + child_index] = parent_index;
    return;
   }
   function add_parent(child, parent, child_index){
    var _bn_ = max_num_parents(child);
    if(caml_call2(Core[90], child[9], _bn_)){
     var new_max_num_parents = 2 * max_num_parents(child) | 0;
     child[10] =
      caml_call2
       (Incremental_Import[7][76], child[10], new_max_num_parents - 1 | 0);
     child[25] =
      caml_call3
       (Incremental_Import[5][131], child[25], new_max_num_parents, -1);
    }
    if(Incremental_Import[1]){
     var _bo_ = max_num_parents(child);
     if(! caml_call2(Core[92], child[9], _bo_))
      throw caml_maybe_attach_backtrace([0, Assert_failure, _a7_], 1);
    }
    var max_num_children = parent[24].length - 1;
    if(caml_call2(Core[88], child_index, max_num_children)){
     if
      (Incremental_Import[1]
       && ! caml_call2(Core[90], child_index, max_num_children))
      throw caml_maybe_attach_backtrace([0, Assert_failure, _a9_], 1);
     var
      new_max_num_children =
        caml_call2(Core_Int[90], 2, 2 * max_num_children | 0);
     parent[24] =
      caml_call3
       (Incremental_Import[5][131], parent[24], new_max_num_children, -1);
    }
    if
     (Incremental_Import[1]
      && ! caml_call2(Core[92], child_index, parent[24].length - 1))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _a8_], 1);
    link(child, child_index, parent, child[9]);
    child[9] = child[9] + 1 | 0;
    return 0;
   }
   function remove_parent(child, parent, child_index){
    if(Incremental_Import[1] && ! caml_call2(Core[88], child[9], 1))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _a$_], 1);
    var
     parent_index = caml_check_bound(parent[24], child_index)[1 + child_index];
    if(Incremental_Import[1] && parent !== get_parent(child, parent_index))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _a__], 1);
    var last_parent_index = child[9] - 1 | 0;
    if(caml_call2(Core[92], parent_index, last_parent_index)){
     var
      _bm_ =
        caml_call2
         (Incremental_Import[7][20], child[10], last_parent_index - 1 | 0),
      match = caml_call1(Incremental_Import[6][9], _bm_);
     link
      (child,
       caml_check_bound(child[25], last_parent_index)[1 + last_parent_index],
       match,
       parent_index);
    }
    set_parent(child, Incremental_Import[6][5], last_parent_index);
    if(Incremental_Import[1]){
     caml_check_bound(child[25], last_parent_index)[1 + last_parent_index] = -1;
     caml_check_bound(parent[24], child_index)[1 + child_index] = -1;
    }
    child[9] = child[9] - 1 | 0;
    return 0;
   }
   function swap_children_except_in_kind
   (parent, child1, child_index1, child2, child_index2){
    if(Incremental_Import[1]){
     if(child1 !== caml_call2(Incremental_Kind[5], parent[5], child_index1))
      throw caml_maybe_attach_backtrace([0, Assert_failure, _bd_], 1);
     if(child2 !== caml_call2(Incremental_Kind[5], parent[5], child_index2))
      throw caml_maybe_attach_backtrace([0, Assert_failure, _bc_], 1);
    }
    var
     index_of_parent_in_child1 =
       caml_check_bound(parent[24], child_index1)[1 + child_index1],
     index_of_parent_in_child2 =
       caml_check_bound(parent[24], child_index2)[1 + child_index2];
    if(Incremental_Import[1]){
     var
      _bk_ =
        caml_check_bound(child1[25], index_of_parent_in_child1)
         [1 + index_of_parent_in_child1];
     if(! caml_call2(Core[90], _bk_, child_index1))
      throw caml_maybe_attach_backtrace([0, Assert_failure, _bb_], 1);
     var
      _bl_ =
        caml_check_bound(child2[25], index_of_parent_in_child2)
         [1 + index_of_parent_in_child2];
     if(! caml_call2(Core[90], _bl_, child_index2))
      throw caml_maybe_attach_backtrace([0, Assert_failure, _ba_], 1);
    }
    caml_check_bound(child1[25], index_of_parent_in_child1)
     [1 + index_of_parent_in_child1]
    = child_index2;
    caml_check_bound(child2[25], index_of_parent_in_child2)
     [1 + index_of_parent_in_child2]
    = child_index1;
    caml_check_bound(parent[24], child_index1)[1 + child_index1] = index_of_parent_in_child2;
    caml_check_bound(parent[24], child_index2)[1 + child_index2] = index_of_parent_in_child1;
    return 0;
   }
   function sexp_of_t$0(x_073){
    return sexp_of_t(function(param){return _be_;}, x_073);
   }
   function invariant$0(param){
    return invariant(function(_bj_){return 0;}, param);
   }
   function iter_descendants(ts, f){
    var seen = caml_call3(Incremental_Node_id[7][3], 0, 0, 0);
    function iter_descendants(t){
     var _bi_ = 1 - caml_call2(Core_Hash_set[20], seen, t[1]);
     return _bi_
             ? (caml_call2
                (Core_Hash_set[22], seen, t[1]),
               caml_call1(f, t),
               iteri_children
                (t, function(param, t){return iter_descendants(t);}))
             : _bi_;
    }
    caml_call2(Core_List[19], ts, iter_descendants);
    return 0;
   }
   function append_user_info_graphviz$0(param){
    return function(_bg_, _bh_){
     return append_user_info_graphviz(param, _bg_, _bh_);};
   }
   caml_call1(Ppx_inline_test_lib[7], cst_incremental);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incremental_Node);
   var
    Incremental_Node =
      [0,
       [0,
        sexp_of_t$0,
        invariant$0,
        function(M){
         function fold(t, init, f){
          var ac = [0, init], r = [0, t];
          for(;;){
           if(! caml_call1(Incremental_Import[6][8], r[1])) return ac[1];
           var packed_node = caml_call1(Incremental_Import[6][16], r[1]);
           r[1] = caml_call1(M[1], packed_node);
           ac[1] = caml_call2(f, ac[1], packed_node);
          }
         }
         function iter(t, f){
          return fold(t, 0, function(param, n){return caml_call1(f, n);});
         }
         function invariant(t){return iter(t, invariant$0);}
         function length(t){
          return fold(t, 0, function(n, param){return n + 1 | 0;});
         }
         function sexp_of_t(t){
          var
           _bf_ = fold(t, 0, function(ac, n){return [0, n, ac];}),
           x_074 = caml_call1(Core_List[59], _bf_);
          return caml_call2(Core[472], Incremental_Types[15][2][1], x_074);
         }
         return [0, sexp_of_t, invariant, length, iter];
        },
        iter_descendants,
        append_user_info_graphviz$0],
       sexp_of_t,
       type_equal_if_phys_same,
       invariant,
       create,
       set_kind$0,
       same,
       iteri_children,
       get_parent,
       add_parent,
       remove_parent,
       swap_children_except_in_kind,
       is_const,
       is_in_recompute_heap,
       is_necessary,
       is_valid,
       should_be_invalidated,
       edge_is_stale,
       is_stale,
       needs_to_be_computed,
       value_exn,
       unsafe_value,
       get_cutoff,
       set_cutoff$0,
       on_update,
       run_on_update_handlers,
       user_info,
       set_user_info,
       append_user_info_graphviz,
       has_child,
       has_parent];
   runtime.caml_register_global(145, Incremental_Node, cst_Incremental_Node$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incremental__Recompute_heap
//# unitInfo: Requires: Base__Invariant, Core, Incremental__Import, Incremental__Node, Ppx_assert_lib__Runtime, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Incremental_Recompute_heap$0 = "Incremental__Recompute_heap",
    cst = "_",
    cst_height_lower_bound$0 = "height_lower_bound",
    cst_incremental$0 = "incremental",
    cst_length$0 = "length",
    cst_nodes_by_height$0 = "nodes_by_height",
    cst_src_recompute_heap_ml = "src/recompute_heap.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    pos = "src/recompute_heap.ml:38:22",
    Incremental_Import = global_data.Incremental__Import,
    Assert_failure = global_data.Assert_failure,
    Core = global_data.Core,
    Incremental_Node = global_data.Incremental__Node,
    Ppx_assert_lib_Runtime = global_data.Ppx_assert_lib__Runtime,
    Base_Invariant = global_data.Base__Invariant,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incremental_Recompute_heap$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incremental$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_recompute_heap_ml);
   caml_call2(Ppx_inline_test_lib[6], cst_incremental$0, "recompute_heap.ml");
   var
    _z_ = [0, cst_src_recompute_heap_ml, 172, 16],
    cst_Recompute_heap_remove_min_ =
      "Recompute_heap.remove_min unexpectedly reached end of heap",
    _A_ = [0, cst_src_recompute_heap_ml, 180, 5948, 5962],
    _B_ = [0, cst_src_recompute_heap_ml, 192, 16],
    _y_ = [0, cst_src_recompute_heap_ml, 153, 4],
    _x_ = [0, cst_src_recompute_heap_ml, 154, 4],
    _w_ = [0, cst_src_recompute_heap_ml, 155, 4],
    _u_ = [0, cst],
    cst_incorrect_remove_of_node_f =
      "incorrect [remove] of node from recompute heap",
    _v_ = [0, cst_src_recompute_heap_ml, 140, 4716, 4728],
    _r_ = [0, cst],
    cst_incorrect_attempt_to_add_n =
      "incorrect attempt to add node to recompute heap",
    _s_ = [0, cst_src_recompute_heap_ml, 125, 4239, 4251],
    _t_ = [0, cst_src_recompute_heap_ml, 129, 16],
    _q_ = [0, cst_src_recompute_heap_ml, 99, 16],
    _p_ = [0, cst_src_recompute_heap_ml, 62, 6],
    _n_ = [0, cst_src_recompute_heap_ml, 41, 11],
    _m_ = [0, cst_src_recompute_heap_ml, 42, 11],
    _l_ = [0, cst_src_recompute_heap_ml, 44, 13],
    _k_ = [0, cst_src_recompute_heap_ml, 50, 15],
    _j_ = [0, cst_src_recompute_heap_ml, 51, 15],
    _o_ = [0, cst_src_recompute_heap_ml, 30, 894, 916],
    _g_ = [0, cst_nodes_by_height$0],
    _h_ = [0, cst_height_lower_bound$0],
    _i_ = [0, cst_length$0],
    cst_nodes_by_height = cst_nodes_by_height$0,
    cst_height_lower_bound = cst_height_lower_bound$0,
    cst_length = cst_length$0,
    cst_incremental = cst_incremental$0,
    cst_Incremental_Recompute_heap = cst_Incremental_Recompute_heap$0;
   function next(param){return param[17];}
   var As_recompute_list = caml_call1(Incremental_Node[1][3], [0, next]);
   function nodes_by_height(r){return r[3];}
   function set_nodes_by_height(r, v){r[3] = v; return 0;}
   function height_lower_bound(r){return r[2];}
   function set_height_lower_bound(r, v){r[2] = v; return 0;}
   function length(r){return r[1];}
   function set_length(r, v){r[1] = v; return 0;}
   function _a_(r, v){return [0, r[1], r[2], v];}
   var
    _b_ = [0, set_nodes_by_height],
    nodes_by_height$0 =
      [0,
       function(param){return 0;},
       cst_nodes_by_height,
       _b_,
       nodes_by_height,
       _a_];
   function _c_(r, v){return [0, r[1], v, r[3]];}
   var
    _d_ = [0, set_height_lower_bound],
    height_lower_bound$0 =
      [0,
       function(param){return 0;},
       cst_height_lower_bound,
       _d_,
       height_lower_bound,
       _c_];
   function _e_(r, v){return [0, v, r[2], r[3]];}
   var
    _f_ = [0, set_length],
    length$0 = [0, function(param){return 0;}, cst_length, _f_, length, _e_];
   function sexp_of_t(param){
    var
     length_003 = param[1],
     height_lower_bound_005 = param[2],
     nodes_by_height_007 = param[3],
     max_nonempty_index = [0, -1],
     bnds_002 = 0;
    function _al_(i, l){
     var
      _am_ = caml_call1(Incremental_Import[6][8], l),
      _an_ = _am_ ? (max_nonempty_index[1] = i, 0) : _am_;
     return _an_;
    }
    caml_call2(Incremental_Import[7][30], nodes_by_height_007, _al_);
    var
     x_001 =
       caml_call3
        (Incremental_Import[7][42],
         nodes_by_height_007,
         0,
         max_nonempty_index[1] + 1 | 0),
     arg_008 =
       caml_call2(Incremental_Import[7][10], As_recompute_list[1], x_001),
     bnds_002$0 = [0, [1, [0, _g_, [0, arg_008, 0]]], bnds_002],
     arg_006 = caml_call1(Core[389], height_lower_bound_005),
     bnds_002$1 = [0, [1, [0, _h_, [0, arg_006, 0]]], bnds_002$0],
     arg_004 = caml_call1(Core[389], length_003),
     bnds_002$2 = [0, [1, [0, _i_, [0, arg_004, 0]]], bnds_002$1];
    return [1, bnds_002$2];
   }
   function max_height_allowed(t){
    return caml_call1(Incremental_Import[7][19], t[3]) - 1 | 0;
   }
   function invariant(t){
    function _ab_(param){
     function check(f){return caml_call2(Base_Invariant[2], t, f);}
     var
      nodes_by_height_fun =
        check
         (function(nodes_by_height){
           function _aj_(height, node){
            function _ak_(node){
             if(! caml_call2(Core[90], node[15], height))
              throw caml_maybe_attach_backtrace([0, Assert_failure, _k_], 1);
             if(caml_call1(Incremental_Node[20], node)) return 0;
             throw caml_maybe_attach_backtrace([0, Assert_failure, _j_], 1);
            }
            return caml_call2(As_recompute_list[4], node, _ak_);
           }
           return caml_call2(Incremental_Import[7][30], nodes_by_height, _aj_);
          }),
      height_lower_bound_fun =
        check
         (function(height_lower_bound){
           if(! caml_call2(Core[88], height_lower_bound, 0))
            throw caml_maybe_attach_backtrace([0, Assert_failure, _n_], 1);
           var _ae_ = caml_call1(Incremental_Import[7][19], t[3]);
           if(! caml_call2(Core[89], height_lower_bound, _ae_))
            throw caml_maybe_attach_backtrace([0, Assert_failure, _m_], 1);
           var _ag_ = height_lower_bound - 1 | 0, _af_ = 0;
           if(_ag_ >= 0){
            var height = _af_;
            for(;;){
             var _ah_ = caml_call2(Incremental_Import[7][20], t[3], height);
             if(! caml_call1(Incremental_Import[6][7], _ah_))
              throw caml_maybe_attach_backtrace([0, Assert_failure, _l_], 1);
             var _ai_ = height + 1 | 0;
             if(_ag_ === height) break;
             var height = _ai_;
            }
           }
           return 0;
          }),
      length_fun =
        check
         (function(length){
           var actual_length = [0, 0];
           function _ac_(node){
            var _ad_ = caml_call1(As_recompute_list[3], node);
            actual_length[1] = actual_length[1] + _ad_ | 0;
            return 0;
           }
           caml_call2(Incremental_Import[7][29], t[3], _ac_);
           var
            t2 = actual_length[1],
            sexpifier = Core[389],
            equal = 0,
            message = 0,
            here = 0;
           function comparator(a_009, b_010){
            return caml_call2(Core[382], a_009, b_010);
           }
           return caml_call8
                   (Ppx_assert_lib_Runtime[2],
                    pos,
                    sexpifier,
                    comparator,
                    here,
                    message,
                    equal,
                    length,
                    t2);
          });
     caml_call1(length_fun, length$0);
     caml_call1(height_lower_bound_fun, height_lower_bound$0);
     return caml_call1(nodes_by_height_fun, nodes_by_height$0);
    }
    return caml_call4(Base_Invariant[1], _o_, t, sexp_of_t, _ab_);
   }
   function create_nodes_by_height(max_height_allowed){
    return caml_call2
            (Incremental_Import[7][16],
             max_height_allowed + 1 | 0,
             Incremental_Import[6][5]);
   }
   function set_max_height_allowed(t, max_height_allowed){
    if(Incremental_Import[1]){
     var
      _V_ = max_height_allowed + 1 | 0,
      _W_ = caml_call1(Incremental_Import[7][19], t[3]) - 1 | 0;
     if(_W_ >= _V_){
      var i = _V_;
      for(;;){
       var _$_ = caml_call2(Incremental_Import[7][20], t[3], i);
       if(! caml_call1(Incremental_Import[6][7], _$_))
        throw caml_maybe_attach_backtrace([0, Assert_failure, _p_], 1);
       var _aa_ = i + 1 | 0;
       if(_W_ === i) break;
       var i = _aa_;
      }
     }
    }
    var
     src = t[3],
     dst = create_nodes_by_height(max_height_allowed),
     _X_ = caml_call1(Incremental_Import[7][19], dst),
     _Y_ = caml_call1(Incremental_Import[7][19], src),
     _Z_ = caml_call2(Core[96], _Y_, _X_);
    caml_call5(Incremental_Import[7][39], src, 0, dst, 0, _Z_);
    t[3] = dst;
    var ___ = caml_call1(Incremental_Import[7][19], dst);
    t[2] = caml_call2(Core[96], t[2], ___);
    return 0;
   }
   function create(max_height_allowed){
    return [0,
            0,
            max_height_allowed + 1 | 0,
            create_nodes_by_height(max_height_allowed)];
   }
   function set_prev(next, prev){
    if(caml_call1(Incremental_Import[6][8], next))
     caml_call1(Incremental_Import[6][16], next)[16] = prev;
    return;
   }
   function link(t, node){
    var height = node[14];
    if(Incremental_Import[1]){
     var _T_ = max_height_allowed(t);
     if(! caml_call2(Core[89], height, _T_))
      throw caml_maybe_attach_backtrace([0, Assert_failure, _q_], 1);
    }
    node[15] = height;
    var next = caml_call2(Incremental_Import[7][20], t[3], height);
    node[17] = next;
    set_prev(next, caml_call1(Incremental_Import[6][6], node));
    var _U_ = caml_call1(Incremental_Import[6][6], node);
    return caml_call3(Incremental_Import[7][74], t[3], height, _U_);
   }
   function unlink(t, node){
    var
     prev = node[16],
     next = node[17],
     _S_ = caml_call2(Incremental_Import[7][20], t[3], node[15]);
    if(caml_call1(Incremental_Import[6][6], node) === _S_)
     caml_call3(Incremental_Import[7][74], t[3], node[15], next);
    set_prev(next, prev);
    if(caml_call1(Incremental_Import[6][8], prev))
     caml_call1(Incremental_Import[6][16], prev)[17] = next;
    node[16] = Incremental_Import[6][5];
    return;
   }
   function add(t, node){
    var _M_ = Incremental_Import[1];
    if(_M_)
     var
      _N_ = caml_call1(Incremental_Node[14], node),
      _O_ = _N_ || 1 - caml_call1(Incremental_Node[20], node);
    else
     var _O_ = _M_;
    if(_O_){
     var
      _P_ =
        function(x_011){
         function _R_(param){return _r_;}
         return caml_call2(Incremental_Node[2], _R_, x_011);
        };
     caml_call5(Core[247], 0, _s_, cst_incorrect_attempt_to_add_n, node, _P_);
    }
    if(Incremental_Import[1]){
     var _Q_ = max_height_allowed(t);
     if(! caml_call2(Core[89], node[14], _Q_))
      throw caml_maybe_attach_backtrace([0, Assert_failure, _t_], 1);
    }
    var height = node[14];
    if(caml_call2(Core[92], height, t[2])) t[2] = height;
    link(t, node);
    t[1] = t[1] + 1 | 0;
    return 0;
   }
   function remove(t, node){
    var _H_ = Incremental_Import[1];
    if(_H_)
     var
      _I_ = 1 - caml_call1(Incremental_Node[14], node),
      _J_ = _I_ || caml_call1(Incremental_Node[20], node);
    else
     var _J_ = _H_;
    if(_J_){
     var
      _K_ =
        function(x_012){
         function _L_(param){return _u_;}
         return caml_call2(Incremental_Node[2], _L_, x_012);
        };
     caml_call5(Core[247], 0, _v_, cst_incorrect_remove_of_node_f, node, _K_);
    }
    unlink(t, node);
    node[17] = Incremental_Import[6][5];
    node[15] = -1;
    t[1] = t[1] - 1 | 0;
    return 0;
   }
   function increase_height(t, node){
    if(Incremental_Import[1]){
     if(! caml_call2(Core[91], node[14], node[15]))
      throw caml_maybe_attach_backtrace([0, Assert_failure, _y_], 1);
     var _G_ = max_height_allowed(t);
     if(! caml_call2(Core[89], node[14], _G_))
      throw caml_maybe_attach_backtrace([0, Assert_failure, _x_], 1);
     if(! caml_call1(Incremental_Node[14], node))
      throw caml_maybe_attach_backtrace([0, Assert_failure, _w_], 1);
    }
    unlink(t, node);
    return link(t, node);
   }
   function min_height(t){
    if(caml_call2(Core[90], t[1], 0))
     t[2] = caml_call1(Incremental_Import[7][19], t[3]);
    else{
     var nodes_by_height = t[3];
     for(;;){
      var _F_ = caml_call2(Incremental_Import[7][20], nodes_by_height, t[2]);
      if(! caml_call1(Incremental_Import[6][7], _F_)) break;
      t[2] = t[2] + 1 | 0;
     }
    }
    return t[2];
   }
   function remove_min(t){
    if(Incremental_Import[1] && caml_call2(Core[90], t[1], 0))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _z_], 1);
    var
     nodes_by_height = t[3],
     node = [0, caml_call2(Incremental_Import[7][20], nodes_by_height, t[2])];
    for(;;){
     if(! caml_call1(Incremental_Import[6][7], node[1])) break;
     t[2] = t[2] + 1 | 0;
     var _C_ = Incremental_Import[1];
     if(_C_)
      var
       _D_ = caml_call1(Incremental_Import[7][19], t[3]),
       _E_ = caml_call2(Core[88], t[2], _D_);
     else
      var _E_ = _C_;
     if(_E_)
      caml_call5
       (Core[247], 0, _A_, cst_Recompute_heap_remove_min_, t, sexp_of_t);
     node[1] = caml_call2(Incremental_Import[7][20], nodes_by_height, t[2]);
    }
    var node$0 = caml_call1(Incremental_Import[6][16], node[1]);
    node$0[15] = -1;
    t[1] = t[1] - 1 | 0;
    var next = node$0[17];
    caml_call3(Incremental_Import[7][75], t[3], t[2], next);
    set_prev(next, Incremental_Import[6][5]);
    if
     (Incremental_Import[1]
      && ! caml_call1(Incremental_Import[6][7], node$0[16]))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _B_], 1);
    node$0[17] = Incremental_Import[6][5];
    return node$0;
   }
   caml_call1(Ppx_inline_test_lib[7], cst_incremental);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incremental_Recompute_heap);
   var
    Incremental_Recompute_heap =
      [0,
       sexp_of_t,
       invariant,
       create,
       length,
       max_height_allowed,
       set_max_height_allowed,
       min_height,
       add,
       remove,
       remove_min,
       increase_height];
   runtime.caml_register_global
    (46, Incremental_Recompute_heap, cst_Incremental_Recompute_heap$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incremental__Adjust_heights_heap
//# unitInfo: Requires: Base__Invariant, Core, Incremental__Import, Incremental__Node, Incremental__Recompute_heap, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Incremental_Adjust_heights$0 = "Incremental__Adjust_heights_heap",
    cst = "_",
    cst_height_lower_bound$0 = "height_lower_bound",
    cst_incremental$0 = "incremental",
    cst_length$0 = "length",
    cst_max_height_seen$0 = "max_height_seen",
    cst_nodes_by_height$0 = "nodes_by_height",
    cst_src_adjust_heights_heap_ml = "src/adjust_heights_heap.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Incremental_Import = global_data.Incremental__Import,
    Assert_failure = global_data.Assert_failure,
    Core = global_data.Core,
    Incremental_Node = global_data.Incremental__Node,
    Incremental_Recompute_heap = global_data.Incremental__Recompute_heap,
    Base_Invariant = global_data.Base__Invariant,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incremental_Adjust_heights$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incremental$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_adjust_heights_heap_ml);
   caml_call2
    (Ppx_inline_test_lib[6], cst_incremental$0, "adjust_heights_heap.ml");
   var
    _Q_ = [0, cst_src_adjust_heights_heap_ml, 163, 16],
    _P_ = [0, cst_src_adjust_heights_heap_ml, 164, 16],
    _O_ = [0, cst_src_adjust_heights_heap_ml, 203, 16],
    _N_ = [0, cst_src_adjust_heights_heap_ml, 204, 16],
    _I_ = [0, cst],
    _G_ = [0, cst],
    _H_ = [0, "child"],
    _J_ = [0, "parent"],
    _M_ = [0, cst_src_adjust_heights_heap_ml, 139, 16],
    _L_ = [0, cst_src_adjust_heights_heap_ml, 140, 16],
    cst_adding_edge_made_graph_cyc = "adding edge made graph cyclic",
    _K_ = [0, cst_src_adjust_heights_heap_ml, 144, 5086, 5098],
    _D_ = [0, "Height"],
    _E_ = [0, "Max"],
    cst_node_with_too_large_height = "node with too large height",
    _F_ = [0, cst_src_adjust_heights_heap_ml, 131, 4645, 4659],
    cst_Adjust_heights_heap_remove =
      "Adjust_heights_heap.remove_min of empty heap",
    _C_ = [0, cst_src_adjust_heights_heap_ml, 109, 3886, 3906],
    _B_ = [0, cst_src_adjust_heights_heap_ml, 97, 18],
    _A_ = [0, cst_src_adjust_heights_heap_ml, 99, 18],
    _x_ = [0, cst_max_height_seen$0],
    cst_cannot_set_max_height_allo =
      "cannot set_max_height_allowed less than the max height already seen",
    _y_ = [0, cst_src_adjust_heights_heap_ml, 83, 2754, 2766],
    _z_ = [0, cst_src_adjust_heights_heap_ml, 87, 16],
    _v_ = [0, cst_src_adjust_heights_heap_ml, 56, 30],
    _u_ = [0, cst_src_adjust_heights_heap_ml, 59, 11],
    _t_ = [0, cst_src_adjust_heights_heap_ml, 60, 11],
    _s_ = [0, cst_src_adjust_heights_heap_ml, 62, 13],
    _r_ = [0, cst_src_adjust_heights_heap_ml, 66, 11],
    _q_ = [0, cst_src_adjust_heights_heap_ml, 67, 11],
    _w_ = [0, cst_src_adjust_heights_heap_ml, 52, 1642, 1664],
    _m_ = [0, cst_nodes_by_height$0],
    _n_ = [0, cst_max_height_seen$0],
    _o_ = [0, cst_height_lower_bound$0],
    _p_ = [0, cst_length$0],
    _c_ = [0, cst_src_adjust_heights_heap_ml, 23, 10],
    _b_ = [0, cst_src_adjust_heights_heap_ml, 24, 10],
    _a_ = [0, cst_src_adjust_heights_heap_ml, 26, 15],
    _d_ = [0, cst_src_adjust_heights_heap_ml, 19, 534, 558],
    cst_nodes_by_height = cst_nodes_by_height$0,
    cst_max_height_seen = cst_max_height_seen$0,
    cst_height_lower_bound = cst_height_lower_bound$0,
    cst_length = cst_length$0,
    cst_incremental = cst_incremental$0,
    cst_Incremental_Adjust_heights = cst_Incremental_Adjust_heights$0;
   function next(param){return param[19];}
   var As_adjust_heights_list = caml_call1(Incremental_Node[1][3], [0, next]);
   function sexp_of_t(t){
    var max_nonempty_index = [0, -1];
    function _ay_(i, l){
     var
      _az_ = caml_call1(Incremental_Import[6][8], l),
      _aA_ = _az_ ? (max_nonempty_index[1] = i, 0) : _az_;
     return _aA_;
    }
    caml_call2(Incremental_Import[7][30], t, _ay_);
    var
     x_001 =
       caml_call3
        (Incremental_Import[7][42], t, 0, max_nonempty_index[1] + 1 | 0);
    return caml_call2
            (Incremental_Import[7][10], As_adjust_heights_list[1], x_001);
   }
   function invariant(t){
    function _au_(param){
     function _av_(height, nodes){
      caml_call1(As_adjust_heights_list[2], nodes);
      function _aw_(node){
       if(! caml_call2(Core[90], node[18], height))
        throw caml_maybe_attach_backtrace([0, Assert_failure, _c_], 1);
       if(! caml_call2(Core[91], node[14], node[18]))
        throw caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1);
       var _ax_ = caml_call1(Incremental_Node[14], node);
       if(! _ax_) return _ax_;
       if(caml_call2(Core[90], node[15], node[18])) return 0;
       throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
      }
      return caml_call2(As_adjust_heights_list[4], nodes, _aw_);
     }
     return caml_call2(Incremental_Import[7][30], t, _av_);
    }
    return caml_call4(Base_Invariant[1], _d_, t, sexp_of_t, _au_);
   }
   function create(max_height_allowed){
    return caml_call2
            (Incremental_Import[7][16],
             max_height_allowed + 1 | 0,
             Incremental_Import[6][5]);
   }
   function nodes_by_height(r){return r[4];}
   function set_nodes_by_height(r, v){r[4] = v; return 0;}
   function max_height_seen(r){return r[3];}
   function set_max_height_seen(r, v){r[3] = v; return 0;}
   function height_lower_bound(r){return r[2];}
   function set_height_lower_bound(r, v){r[2] = v; return 0;}
   function length(r){return r[1];}
   function set_length(r, v){r[1] = v; return 0;}
   function _e_(r, v){return [0, r[1], r[2], r[3], v];}
   var
    _f_ = [0, set_nodes_by_height],
    nodes_by_height$0 =
      [0,
       function(param){return 0;},
       cst_nodes_by_height,
       _f_,
       nodes_by_height,
       _e_];
   function _g_(r, v){return [0, r[1], r[2], v, r[4]];}
   var
    _h_ = [0, set_max_height_seen],
    max_height_seen$0 =
      [0,
       function(param){return 0;},
       cst_max_height_seen,
       _h_,
       max_height_seen,
       _g_];
   function _i_(r, v){return [0, r[1], v, r[3], r[4]];}
   var
    _j_ = [0, set_height_lower_bound],
    height_lower_bound$0 =
      [0,
       function(param){return 0;},
       cst_height_lower_bound,
       _j_,
       height_lower_bound,
       _i_];
   function _k_(r, v){return [0, v, r[2], r[3], r[4]];}
   var
    _l_ = [0, set_length],
    length$0 = [0, function(param){return 0;}, cst_length, _l_, length, _k_];
   function sexp_of_t$0(param){
    var
     length_003 = param[1],
     height_lower_bound_005 = param[2],
     max_height_seen_007 = param[3],
     nodes_by_height_009 = param[4],
     arg_010 = sexp_of_t(nodes_by_height_009),
     bnds_002 = [0, [1, [0, _m_, [0, arg_010, 0]]], 0],
     arg_008 = caml_call1(Core[389], max_height_seen_007),
     bnds_002$0 = [0, [1, [0, _n_, [0, arg_008, 0]]], bnds_002],
     arg_006 = caml_call1(Core[389], height_lower_bound_005),
     bnds_002$1 = [0, [1, [0, _o_, [0, arg_006, 0]]], bnds_002$0],
     arg_004 = caml_call1(Core[389], length_003),
     bnds_002$2 = [0, [1, [0, _p_, [0, arg_004, 0]]], bnds_002$1];
    return [1, bnds_002$2];
   }
   function is_empty(t){return caml_call2(Core[90], t[1], 0);}
   function max_height_allowed(t){
    return caml_call1(Incremental_Import[7][19], t[4]) - 1 | 0;
   }
   function invariant$0(t){
    function _al_(param){
     function check(f){return caml_call2(Base_Invariant[2], t, f);}
     var
      nodes_by_height_fun = check(invariant),
      max_height_seen_fun =
        check
         (function(max_height_seen){
           if(! caml_call2(Core[88], max_height_seen, 0))
            throw caml_maybe_attach_backtrace([0, Assert_failure, _r_], 1);
           var _at_ = max_height_allowed(t);
           if(caml_call2(Core[89], max_height_seen, _at_)) return 0;
           throw caml_maybe_attach_backtrace([0, Assert_failure, _q_], 1);
          }),
      height_lower_bound_fun =
        check
         (function(height_lower_bound){
           if(! caml_call2(Core[88], height_lower_bound, 0))
            throw caml_maybe_attach_backtrace([0, Assert_failure, _u_], 1);
           var _ao_ = caml_call1(Incremental_Import[7][19], t[4]);
           if(! caml_call2(Core[89], height_lower_bound, _ao_))
            throw caml_maybe_attach_backtrace([0, Assert_failure, _t_], 1);
           var _aq_ = height_lower_bound - 1 | 0, _ap_ = 0;
           if(_aq_ >= 0){
            var height = _ap_;
            for(;;){
             var _ar_ = caml_call2(Incremental_Import[7][20], t[4], height);
             if(! caml_call1(Incremental_Import[6][7], _ar_))
              throw caml_maybe_attach_backtrace([0, Assert_failure, _s_], 1);
             var _as_ = height + 1 | 0;
             if(_aq_ === height) break;
             var height = _as_;
            }
           }
           return 0;
          }),
      length_fun =
        check
         (function(length){
           var t$0 = t[4], r = [0, 0];
           function _am_(node){
            var _an_ = caml_call1(As_adjust_heights_list[3], node);
            r[1] = r[1] + _an_ | 0;
            return 0;
           }
           caml_call2(Incremental_Import[7][29], t$0, _am_);
           if(caml_call2(Core[90], length, r[1])) return 0;
           throw caml_maybe_attach_backtrace([0, Assert_failure, _v_], 1);
          });
     caml_call1(length_fun, length$0);
     caml_call1(height_lower_bound_fun, height_lower_bound$0);
     caml_call1(max_height_seen_fun, max_height_seen$0);
     return caml_call1(nodes_by_height_fun, nodes_by_height$0);
    }
    return caml_call4(Base_Invariant[1], _w_, t, sexp_of_t$0, _al_);
   }
   function create$0(max_height_allowed){
    return [0, 0, max_height_allowed + 1 | 0, 0, create(max_height_allowed)];
   }
   function set_max_height_allowed(t, max_height_allowed){
    if(caml_call2(Core[92], max_height_allowed, t[3])){
     var
      _ak_ =
        function(param){
         var
          arg1_013 = param[2],
          arg0_012 = param[1],
          res0_014 = caml_call1(Core[389], arg0_012),
          v_011 = arg1_013[2],
          res1_015 = [1, [0, _x_, [0, caml_call1(Core[389], v_011), 0]]];
         return [1, [0, res0_014, [0, res1_015, 0]]];
        };
     caml_call5
      (Core[247],
       0,
       _y_,
       cst_cannot_set_max_height_allo,
       [0, max_height_allowed, [0, -794774856, t[3]]],
       _ak_);
    }
    if(Incremental_Import[1] && ! is_empty(t))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _z_], 1);
    t[4] = create(max_height_allowed);
    return 0;
   }
   function set_height(t, node, height){
    if(caml_call2(Core[91], height, t[3])){
     t[3] = height;
     var _ah_ = max_height_allowed(t);
     if(caml_call2(Core[91], height, _ah_)){
      var
       _ai_ =
         function(param){
          var
           arg1_019 = param[2],
           arg0_018 = param[1],
           v_016 = arg0_018[2],
           res0_020 = [1, [0, _D_, [0, caml_call1(Core[389], v_016), 0]]],
           v_017 = arg1_019[2],
           res1_021 = [1, [0, _E_, [0, caml_call1(Core[389], v_017), 0]]];
          return [1, [0, res0_020, [0, res1_021, 0]]];
         },
       _aj_ = [0, [0, 920681479, height], [0, 3850884, max_height_allowed(t)]];
      caml_call5
       (Core[247], 0, _F_, cst_node_with_too_large_height, _aj_, _ai_);
     }
    }
    node[14] = height;
    return 0;
   }
   function ensure_height_requirement
   (t, original_child, original_parent, child, parent){
    if(Incremental_Import[1] && ! caml_call1(Incremental_Node[15], child))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _M_], 1);
    if(Incremental_Import[1] && ! caml_call1(Incremental_Node[15], parent))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _L_], 1);
    if(caml_call2(Incremental_Node[7], parent, original_child)){
     var
      _ab_ =
        function(param){
         var
          arg1_025 = param[2],
          arg0_024 = param[1],
          v_022 = arg0_024[2],
          _ad_ = 0;
         function _ae_(param){return _G_;}
         var
          res0_026 =
            [1,
             [0, _H_, [0, caml_call2(Incremental_Node[2], _ae_, v_022), _ad_]]],
          v_023 = arg1_025[2],
          _af_ = 0;
         function _ag_(param){return _I_;}
         var
          res1_027 =
            [1,
             [0, _J_, [0, caml_call2(Incremental_Node[2], _ag_, v_023), _af_]]];
         return [1, [0, res0_026, [0, res1_027, 0]]];
        };
     caml_call5
      (Core[247],
       0,
       _K_,
       cst_adding_edge_made_graph_cyc,
       [0, [0, -977688164, original_child], [0, -310508246, original_parent]],
       _ab_);
    }
    var _ac_ = caml_call2(Core[88], child[14], parent[14]);
    if(! _ac_) return _ac_;
    if(caml_call2(Core[90], parent[18], -1)){
     var height = parent[14];
     if(Incremental_Import[1] && ! caml_call2(Core[88], height, t[2]))
      throw caml_maybe_attach_backtrace([0, Assert_failure, _B_], 1);
     if(Incremental_Import[1]){
      var _$_ = max_height_allowed(t);
      if(! caml_call2(Core[89], height, _$_))
       throw caml_maybe_attach_backtrace([0, Assert_failure, _A_], 1);
     }
     parent[18] = height;
     t[1] = t[1] + 1 | 0;
     parent[19] = caml_call2(Incremental_Import[7][20], t[4], height);
     var _aa_ = caml_call1(Incremental_Import[6][6], parent);
     caml_call3(Incremental_Import[7][74], t[4], height, _aa_);
    }
    return set_height(t, parent, child[14] + 1 | 0);
   }
   function adjust_heights(t, recompute_heap, original_child, original_parent){
    if(Incremental_Import[1] && ! is_empty(t))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _Q_], 1);
    if
     (Incremental_Import[1]
      && ! caml_call2(Core[88], original_child[14], original_parent[14]))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _P_], 1);
    t[2] = original_parent[14];
    ensure_height_requirement
     (t, original_child, original_parent, original_child, original_parent);
    for(;;){
     if(! caml_call2(Core[91], t[1], 0)){
      if(Incremental_Import[1] && ! is_empty(t))
       throw caml_maybe_attach_backtrace([0, Assert_failure, _O_], 1);
      var ___ = Incremental_Import[1];
      if(! ___) return ___;
      if(caml_call2(Core[92], original_child[14], original_parent[14]))
       return 0;
      throw caml_maybe_attach_backtrace([0, Assert_failure, _N_], 1);
     }
     var _R_ = Incremental_Import[1], _S_ = _R_ ? is_empty(t) : _R_;
     if(_S_)
      caml_call5
       (Core[247], 0, _C_, cst_Adjust_heights_heap_remove, t, sexp_of_t$0);
     var r = [0, t[2]];
     for(;;){
      var _T_ = caml_call2(Incremental_Import[7][20], t[4], r[1]);
      if(! caml_call1(Incremental_Import[6][7], _T_)) break;
      r[1]++;
     }
     var height = r[1];
     t[2] = height;
     var
      _U_ = caml_call2(Incremental_Import[7][21], t[4], height),
      child = caml_call1(Incremental_Import[6][16], _U_);
     child[18] = -1;
     t[1] = t[1] - 1 | 0;
     caml_call3(Incremental_Import[7][74], t[4], height, child[19]);
     child[19] = Incremental_Import[6][5];
     if(caml_call1(Incremental_Node[14], child))
      caml_call2(Incremental_Recompute_heap[11], recompute_heap, child);
     if(caml_call2(Core[91], child[9], 0)){
      var parent = caml_call1(Incremental_Import[6][9], child[11]);
      ensure_height_requirement
       (t, original_child, original_parent, child, parent);
      var _W_ = child[9] - 1 | 0, _V_ = 1;
      if(_W_ >= 1){
       var parent_index = _V_;
       for(;;){
        var
         _Y_ =
           caml_call2
            (Incremental_Import[7][20], child[10], parent_index - 1 | 0);
        ensure_height_requirement
         (t,
          original_child,
          original_parent,
          child,
          caml_call1(Incremental_Import[6][9], _Y_));
        var _Z_ = parent_index + 1 | 0;
        if(_W_ === parent_index) break;
        var parent_index = _Z_;
       }
      }
     }
     var _X_ = child[5];
     a:
     if(typeof _X_ !== "number" && 3 === _X_[0]){
      var
       all_nodes_created_on_rhs = _X_[1][7],
       r$0 = [0, all_nodes_created_on_rhs];
      for(;;){
       if(! caml_call1(Incremental_Import[6][8], r$0[1])) break;
       var node_on_rhs = caml_call1(Incremental_Import[6][16], r$0[1]);
       r$0[1] = node_on_rhs[13];
       if(caml_call1(Incremental_Node[15], node_on_rhs))
        ensure_height_requirement
         (t, original_child, original_parent, child, node_on_rhs);
      }
      break a;
     }
    }
   }
   caml_call1(Ppx_inline_test_lib[7], cst_incremental);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incremental_Adjust_heights);
   var
    Incremental_Adjust_heights_hea =
      [0,
       sexp_of_t$0,
       invariant$0,
       create$0,
       length,
       max_height_allowed,
       set_max_height_allowed,
       max_height_seen,
       set_height,
       adjust_heights];
   runtime.caml_register_global
    (60, Incremental_Adjust_heights_hea, cst_Incremental_Adjust_heights$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incremental__Alarm_value
//# unitInfo: Requires: Base__Invariant, Incremental__At, Incremental__At_intervals, Incremental__Import, Incremental__Snapshot, Incremental__Step_function_node, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Incremental_Alarm_value$0 = "Incremental__Alarm_value",
    cst = "_",
    cst_action$0 = "action",
    cst_incremental$0 = "incremental",
    cst_src_alarm_value_ml = "src/alarm_value.ml";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Incremental_Import = global_data.Incremental__Import,
    Base_Invariant = global_data.Base__Invariant,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Incremental_At = global_data.Incremental__At,
    Incremental_At_intervals = global_data.Incremental__At_intervals,
    Incremental_Snapshot = global_data.Incremental__Snapshot,
    Incremental_Step_function_node =
      global_data.Incremental__Step_function_node,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incremental_Alarm_value$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incremental$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_alarm_value_ml);
   caml_call2(Ppx_inline_test_lib[6], cst_incremental$0, "alarm_value.ml");
   var
    _k_ = [0, cst_src_alarm_value_ml, 30, 836, 858],
    _i_ = [0, "next_fired"],
    _j_ = [0, cst_action$0],
    _e_ = [0, cst],
    _c_ = [0, cst],
    _a_ = [0, "At"],
    _b_ = [0, "At_intervals"],
    _d_ = [0, "Snapshot"],
    _f_ = [0, "Step_function"],
    cst_action = cst_action$0,
    cst_incremental = cst_incremental$0,
    cst_Incremental_Alarm_value = cst_Incremental_Alarm_value$0;
   function invariant(param){
    switch(param[0]){
      case 0:
       var at = param[1]; return caml_call1(Incremental_At[1], at);
      case 1:
       var at_intervals = param[1];
       return caml_call1(Incremental_At_intervals[1], at_intervals);
      case 2:
       var snapshot = param[1], _o_ = function(_r_){return 0;};
       return caml_call2(Incremental_Snapshot[1], _o_, snapshot);
      default:
       var step_function_node = param[1], _p_ = function(_q_){return 0;};
       return caml_call2
               (Incremental_Step_function_node[1], _p_, step_function_node);
    }
   }
   function action(r){return r[1];}
   function _g_(r, v){return [0, v, r[2]];}
   var
    _h_ = 0,
    action$0 = [0, function(param){return 0;}, cst_action, _h_, action, _g_];
   function sexp_of_t(param){
    var
     action_010 = param[1],
     next_fired_012 = param[2],
     arg_013 = caml_call1(Sexplib0_Sexp_conv[23], next_fired_012),
     bnds_009 = [0, [1, [0, _i_, [0, arg_013, 0]]], 0];
    switch(action_010[0]){
      case 0:
       var
        arg0_001 = action_010[1],
        res0_002 = caml_call1(Incremental_At[2], arg0_001),
        arg_011 = [1, [0, _a_, [0, res0_002, 0]]];
       break;
      case 1:
       var
        arg0_003 = action_010[1],
        res0_004 = caml_call1(Incremental_At_intervals[2], arg0_003),
        arg_011 = [1, [0, _b_, [0, res0_004, 0]]];
       break;
      case 2:
       var
        arg0_005 = action_010[1],
        _m_ = function(param){return _c_;},
        res0_006 = caml_call2(Incremental_Snapshot[2], _m_, arg0_005),
        arg_011 = [1, [0, _d_, [0, res0_006, 0]]];
       break;
      default:
       var
        arg0_007 = action_010[1],
        _n_ = function(param){return _e_;},
        res0_008 =
          caml_call2(Incremental_Step_function_node[2], _n_, arg0_007),
        arg_011 = [1, [0, _f_, [0, res0_008, 0]]];
    }
    var bnds_009$0 = [0, [1, [0, _j_, [0, arg_011, 0]]], bnds_009];
    return [1, bnds_009$0];
   }
   function invariant$0(t){
    function _l_(param){
     var action_fun = caml_call2(Base_Invariant[2], t, invariant);
     caml_call1(action_fun, action$0);
     return 0;
    }
    return caml_call4(Base_Invariant[1], _k_, t, sexp_of_t, _l_);
   }
   function create(action){return [0, action, Incremental_Import[6][5]];}
   caml_call1(Ppx_inline_test_lib[7], cst_incremental);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incremental_Alarm_value);
   var Incremental_Alarm_value = [0, [0], invariant$0, sexp_of_t, create];
   runtime.caml_register_global
    (29, Incremental_Alarm_value, cst_Incremental_Alarm_value$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incremental__Config_intf
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Incremental_Config_intf = "Incremental__Config_intf",
    cst_incremental = "incremental";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incremental_Config_intf);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incremental);
   caml_call1(Ppx_expect_runtime[1][1], "src/config_intf.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_incremental, "config_intf.ml");
   caml_call1(Ppx_inline_test_lib[7], cst_incremental);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incremental_Config_intf);
   var Incremental_Config_intf = [0];
   runtime.caml_register_global
    (11, Incremental_Config_intf, cst_Incremental_Config_intf);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incremental__Config
//# unitInfo: Requires: Incremental__Config_intf, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Incremental_Config$0 = "Incremental__Config",
    cst_incremental$0 = "incremental";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incremental_Config$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incremental$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/config.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_incremental$0, "config.ml");
   var
    cst_incremental = cst_incremental$0,
    cst_Incremental_Config = cst_Incremental_Config$0;
   function Default(symbol){return [0, 1];}
   caml_call1(Ppx_inline_test_lib[7], cst_incremental);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incremental_Config);
   var Incremental_Config = [0, Default];
   runtime.caml_register_global
    (11, Incremental_Config, cst_Incremental_Config$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incremental__Internal_observer
//# unitInfo: Requires: Base__Invariant, Core, Core__List, Incremental__Import, Incremental__Node, Incremental__On_update_handler, Incremental__Types, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Incremental_Internal_obser$0 = "Incremental__Internal_observer",
    cst = "_",
    cst_incremental$0 = "incremental",
    cst_next_in_all$0 = "next_in_all",
    cst_next_in_observing$0 = "next_in_observing",
    cst_observing$0 = "observing",
    cst_on_update_handlers$0 = "on_update_handlers",
    cst_prev_in_all$0 = "prev_in_all",
    cst_prev_in_observing$0 = "prev_in_observing",
    cst_src_internal_observer_ml = "src/internal_observer.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Incremental_Import = global_data.Incremental__Import,
    Core_List = global_data.Core__List,
    Core = global_data.Core,
    Assert_failure = global_data.Assert_failure,
    Base_Invariant = global_data.Base__Invariant,
    Incremental_Node = global_data.Incremental__Node,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Incremental_On_update_handler = global_data.Incremental__On_update_handler,
    Incremental_Types = global_data.Incremental__Types,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incremental_Internal_obser$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incremental$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_internal_observer_ml);
   caml_call2
    (Ppx_inline_test_lib[6], cst_incremental$0, "internal_observer.ml");
   var
    _S_ = [0, cst],
    _P_ = [0, cst],
    cst_on_update_disallowed = "on_update disallowed",
    _Q_ = [0, cst_src_internal_observer_ml, 142, 4451, 4471],
    _R_ = [0, cst_src_internal_observer_ml, 146, 32],
    _J_ = [0, cst],
    _N_ = [0, cst],
    _L_ = [0, cst],
    cst_Observer_value_exn_called_ =
      "Observer.value_exn called after disallow_future_use",
    _M_ = [0, cst_src_internal_observer_ml, 127, 4041, 4053],
    cst_Observer_value_exn_called_$0 =
      "Observer.value_exn called without stabilizing",
    _O_ = [0, cst_src_internal_observer_ml, 121, 3894, 3906],
    cst_attempt_to_get_value_of_an = "attempt to get value of an invalid node",
    _K_ = [0, cst_src_internal_observer_ml, 135, 4239, 4261],
    _H_ = [0, cst],
    _G_ = [0, cst_src_internal_observer_ml, 70, 25],
    _F_ = [0, cst_src_internal_observer_ml, 75, 36],
    _E_ = [0, cst_src_internal_observer_ml, 78, 13],
    _D_ = [0, cst_src_internal_observer_ml, 86, 36],
    _C_ = [0, cst_src_internal_observer_ml, 89, 13],
    _B_ = [0, cst_src_internal_observer_ml, 97, 36],
    _A_ = [0, cst_src_internal_observer_ml, 100, 13],
    _z_ = [0, cst_src_internal_observer_ml, 108, 36],
    _y_ = [0, cst_src_internal_observer_ml, 111, 13],
    _I_ = [0, cst_src_internal_observer_ml, 61, 1712, 1734],
    _r_ = [0, cst_next_in_observing$0],
    _s_ = [0, cst_prev_in_observing$0],
    _t_ = [0, cst_next_in_all$0],
    _u_ = [0, cst_prev_in_all$0],
    _v_ = [0, cst_on_update_handlers$0],
    _w_ = [0, cst_observing$0],
    _x_ = [0, "state"],
    _b_ = [0, "Created"],
    _c_ = [0, "In_use"],
    _d_ = [0, "Disallowed"],
    _e_ = [0, "Unlinked"],
    _a_ = [0, cst],
    cst_next_in_observing = cst_next_in_observing$0,
    cst_prev_in_observing = cst_prev_in_observing$0,
    cst_next_in_all = cst_next_in_all$0,
    cst_prev_in_all = cst_prev_in_all$0,
    cst_on_update_handlers = cst_on_update_handlers$0,
    cst_observing = cst_observing$0,
    cst_incremental = cst_incremental$0,
    cst_Incremental_Internal_obser = cst_Incremental_Internal_obser$0;
   function sexp_of_t(param){
    var x_001 = param[2];
    function _al_(param){return _a_;}
    return caml_call2(Incremental_Types[15][1], _al_, x_001);
   }
   function next_in_all(param){return param[5];}
   function set_prev_in_all(param, t2){param[4] = t2; return 0;}
   function next_in_observing(r){return r[7];}
   function set_next_in_observing(r, v){r[7] = v; return 0;}
   function prev_in_observing(r){return r[6];}
   function set_prev_in_observing(r, v){r[6] = v; return 0;}
   function next_in_all$0(r){return r[5];}
   function set_next_in_all(r, v){r[5] = v; return 0;}
   function prev_in_all(r){return r[4];}
   function set_prev_in_all$0(r, v){r[4] = v; return 0;}
   function on_update_handlers(r){return r[3];}
   function set_on_update_handlers(r, v){r[3] = v; return 0;}
   function observing(r){return r[2];}
   function _f_(r, v){return [0, r[1], r[2], r[3], r[4], r[5], r[6], v];}
   var
    _g_ = [0, set_next_in_observing],
    next_in_observing$0 =
      [0,
       function(param){return 0;},
       cst_next_in_observing,
       _g_,
       next_in_observing,
       _f_];
   function _h_(r, v){return [0, r[1], r[2], r[3], r[4], r[5], v, r[7]];}
   var
    _i_ = [0, set_prev_in_observing],
    prev_in_observing$0 =
      [0,
       function(param){return 0;},
       cst_prev_in_observing,
       _i_,
       prev_in_observing,
       _h_];
   function _j_(r, v){return [0, r[1], r[2], r[3], r[4], v, r[6], r[7]];}
   var
    _k_ = [0, set_next_in_all],
    next_in_all$1 =
      [0,
       function(param){return 0;},
       cst_next_in_all,
       _k_,
       next_in_all$0,
       _j_];
   function _l_(r, v){return [0, r[1], r[2], r[3], v, r[5], r[6], r[7]];}
   var
    _m_ = [0, set_prev_in_all$0],
    prev_in_all$0 =
      [0, function(param){return 0;}, cst_prev_in_all, _m_, prev_in_all, _l_];
   function _n_(r, v){return [0, r[1], r[2], v, r[4], r[5], r[6], r[7]];}
   var
    _o_ = [0, set_on_update_handlers],
    on_update_handlers$0 =
      [0,
       function(param){return 0;},
       cst_on_update_handlers,
       _o_,
       on_update_handlers,
       _n_];
   function _p_(r, v){return [0, r[1], v, r[3], r[4], r[5], r[6], r[7]];}
   var
    _q_ = 0,
    observing$0 =
      [0, function(param){return 0;}, cst_observing, _q_, observing, _p_];
   function sexp_of_internal_observer(of_a_002, param){
    var
     state_004 = param[1],
     observing_006 = param[2],
     on_update_handlers_008 = param[3],
     prev_in_all_010 = param[4],
     next_in_all_012 = param[5],
     prev_in_observing_014 = param[6],
     next_in_observing_016 = param[7],
     arg_017 =
       caml_call2
        (Incremental_Import[6][2],
         Sexplib0_Sexp_conv[23],
         next_in_observing_016),
     bnds_003 = [0, [1, [0, _r_, [0, arg_017, 0]]], 0],
     arg_015 =
       caml_call2
        (Incremental_Import[6][2],
         Sexplib0_Sexp_conv[23],
         prev_in_observing_014),
     bnds_003$0 = [0, [1, [0, _s_, [0, arg_015, 0]]], bnds_003],
     arg_013 =
       caml_call2(Incremental_Import[6][2], sexp_of_t, next_in_all_012),
     bnds_003$1 = [0, [1, [0, _t_, [0, arg_013, 0]]], bnds_003$0],
     arg_011 =
       caml_call2(Incremental_Import[6][2], sexp_of_t, prev_in_all_010),
     bnds_003$2 = [0, [1, [0, _u_, [0, arg_011, 0]]], bnds_003$1],
     _ak_ = caml_call1(Incremental_On_update_handler[2], of_a_002),
     arg_009 = caml_call2(Core[472], _ak_, on_update_handlers_008),
     bnds_003$3 = [0, [1, [0, _v_, [0, arg_009, 0]]], bnds_003$2],
     arg_007 = caml_call2(Incremental_Node[2], of_a_002, observing_006),
     bnds_003$4 = [0, [1, [0, _w_, [0, arg_007, 0]]], bnds_003$3];
    switch(state_004){
      case 0:
       var arg_005 = _b_; break;
      case 1:
       var arg_005 = _c_; break;
      case 2:
       var arg_005 = _d_; break;
      default: var arg_005 = _e_;
    }
    var bnds_003$5 = [0, [1, [0, _x_, [0, arg_005, 0]]], bnds_003$4];
    return [1, bnds_003$5];
   }
   function incr_state(t){return t[2][2];}
   function use_is_allowed(t){return 2 <= t[1] ? 0 : 1;}
   function same(t1, t2){return t1 === t2 ? 1 : 0;}
   function invariant(invariant_a, t){
    function _aa_(param){
     function check(f){return caml_call2(Base_Invariant[2], t, f);}
     var
      next_in_observing_fun =
        check
         (function(next_in_observing){
           if
            (1 < t[1] - 1 >>> 0
             && ! caml_call1(Incremental_Import[6][7], next_in_observing))
            throw caml_maybe_attach_backtrace([0, Assert_failure, _z_], 1);
           var _ai_ = caml_call1(Incremental_Import[6][8], next_in_observing);
           if(! _ai_) return _ai_;
           var
            _aj_ = caml_call1(Incremental_Import[6][9], next_in_observing)[6];
           if(t === caml_call1(Incremental_Import[6][9], _aj_)) return 0;
           throw caml_maybe_attach_backtrace([0, Assert_failure, _y_], 1);
          }),
      prev_in_observing_fun =
        check
         (function(prev_in_observing){
           if
            (1 < t[1] - 1 >>> 0
             && ! caml_call1(Incremental_Import[6][7], prev_in_observing))
            throw caml_maybe_attach_backtrace([0, Assert_failure, _B_], 1);
           var _ag_ = caml_call1(Incremental_Import[6][8], prev_in_observing);
           if(! _ag_) return _ag_;
           var
            _ah_ = caml_call1(Incremental_Import[6][9], prev_in_observing)[7];
           if(t === caml_call1(Incremental_Import[6][9], _ah_)) return 0;
           throw caml_maybe_attach_backtrace([0, Assert_failure, _A_], 1);
          }),
      next_in_all_fun =
        check
         (function(next_in_all){
           if
            (1 < t[1] - 1 >>> 0
             && ! caml_call1(Incremental_Import[6][7], next_in_all))
            throw caml_maybe_attach_backtrace([0, Assert_failure, _D_], 1);
           var _ae_ = caml_call1(Incremental_Import[6][8], next_in_all);
           if(! _ae_) return _ae_;
           var _af_ = caml_call1(Incremental_Import[6][9], next_in_all)[4];
           if(t === caml_call1(Incremental_Import[6][9], _af_)) return 0;
           throw caml_maybe_attach_backtrace([0, Assert_failure, _C_], 1);
          }),
      prev_in_all_fun =
        check
         (function(prev_in_all){
           if
            (1 < t[1] - 1 >>> 0
             && ! caml_call1(Incremental_Import[6][7], prev_in_all))
            throw caml_maybe_attach_backtrace([0, Assert_failure, _F_], 1);
           var _ac_ = caml_call1(Incremental_Import[6][8], prev_in_all);
           if(! _ac_) return _ac_;
           var _ad_ = caml_call1(Incremental_Import[6][9], prev_in_all)[5];
           if(t === caml_call1(Incremental_Import[6][9], _ad_)) return 0;
           throw caml_maybe_attach_backtrace([0, Assert_failure, _E_], 1);
          }),
      on_update_handlers_fun =
        check
         (function(on_update_handlers){
           if(3 > t[1]) return 0;
           if(caml_call1(Core_List[18], on_update_handlers)) return 0;
           throw caml_maybe_attach_backtrace([0, Assert_failure, _G_], 1);
          }),
      observing_fun = check(caml_call1(Incremental_Node[4], invariant_a));
     caml_call1(observing_fun, observing$0);
     caml_call1(on_update_handlers_fun, on_update_handlers$0);
     caml_call1(prev_in_all_fun, prev_in_all$0);
     caml_call1(next_in_all_fun, next_in_all$1);
     caml_call1(prev_in_observing_fun, prev_in_observing$0);
     return caml_call1(next_in_observing_fun, next_in_observing$0);
    }
    function _ab_(x_020){
     return sexp_of_internal_observer(function(param){return _H_;}, x_020);
    }
    return caml_call4(Base_Invariant[1], _I_, t, _ab_, _aa_);
   }
   function value_exn(t){
    var _Y_ = t[1];
    if(1 === _Y_){
     var uopt = t[2][4];
     if(caml_call1(Incremental_Import[6][7], uopt)){
      var
       _Z_ =
         function(x_023){
          return sexp_of_internal_observer
                  (function(param){return _J_;}, x_023);
         };
      caml_call5(Core[247], 0, _K_, cst_attempt_to_get_value_of_an, t, _Z_);
     }
     return caml_call1(Incremental_Import[6][16], uopt);
    }
    if(_Y_){
     var
      ___ =
        function(x_022){
         return sexp_of_internal_observer(function(param){return _L_;}, x_022);
        };
     return caml_call5
             (Core[247], 0, _M_, cst_Observer_value_exn_called_, t, ___);
    }
    function _$_(x_021){
     return sexp_of_internal_observer(function(param){return _N_;}, x_021);
    }
    return caml_call5
            (Core[247], 0, _O_, cst_Observer_value_exn_called_$0, t, _$_);
   }
   function on_update_exn(t, on_update_handler){
    if(2 <= t[1]){
     var
      _W_ =
        function(x_024){
         return sexp_of_internal_observer(function(param){return _P_;}, x_024);
        };
     return caml_call5(Core[247], 0, _Q_, cst_on_update_disallowed, t, _W_);
    }
    t[3] = [0, on_update_handler, t[3]];
    var _X_ = t[1];
    if(1 === _X_){
     var observing = t[2];
     observing[8] = observing[8] + 1 | 0;
     return 0;
    }
    if(_X_) throw caml_maybe_attach_backtrace([0, Assert_failure, _R_], 1);
    return 0;
   }
   function unlink(t){
    var prev = t[6], next = t[7];
    t[6] = Incremental_Import[6][5];
    t[7] = Incremental_Import[6][5];
    if(caml_call1(Incremental_Import[6][8], next))
     caml_call1(Incremental_Import[6][16], next)[6] = prev;
    if(caml_call1(Incremental_Import[6][8], prev))
     caml_call1(Incremental_Import[6][16], prev)[7] = next;
    var observing = t[2];
    if(t === caml_call1(Incremental_Import[6][9], observing[21]))
     observing[21] = next;
    var _U_ = caml_call1(Core_List[45], t[3]);
    observing[8] = observing[8] - _U_ | 0;
    t[3] = 0;
    var prev$0 = t[4], next$0 = t[5];
    t[4] = Incremental_Import[6][5];
    t[5] = Incremental_Import[6][5];
    if(caml_call1(Incremental_Import[6][8], next$0))
     set_prev_in_all(caml_call1(Incremental_Import[6][16], next$0), prev$0);
    var _V_ = caml_call1(Incremental_Import[6][8], prev$0);
    return _V_
            ? (caml_call1(Incremental_Import[6][16], prev$0)[5] = next$0, 0)
            : _V_;
   }
   function sexp_of_t$0(x_025){
    return sexp_of_internal_observer(function(param){return _S_;}, x_025);
   }
   function invariant$0(param){
    return invariant(function(_T_){return 0;}, param);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_incremental);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incremental_Internal_obser);
   var
    Incremental_Internal_observer =
      [0,
       invariant,
       sexp_of_internal_observer,
       same,
       observing,
       use_is_allowed,
       value_exn,
       on_update_exn,
       unlink,
       incr_state,
       [0, sexp_of_t$0, invariant$0, next_in_all, set_prev_in_all]];
   runtime.caml_register_global
    (64, Incremental_Internal_observer, cst_Incremental_Internal_obser$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incremental__Observer
//# unitInfo: Requires: Core, Incremental__Internal_observer, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Incremental_Observer$0 = "Incremental__Observer",
    cst_incremental$0 = "incremental";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Incremental_Internal_observer = global_data.Incremental__Internal_observer,
    Core = global_data.Core,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incremental_Observer$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incremental$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/observer.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_incremental$0, "observer.ml");
   var
    cst_incremental = cst_incremental$0,
    cst_Incremental_Observer = cst_Incremental_Observer$0;
   function sexp_of_t(of_a_001, x_002){
    var _a_ = caml_call1(Incremental_Internal_observer[2], of_a_001);
    return caml_call2(Core[598], _a_, x_002);
   }
   function invariant(invariant_a, t){
    return caml_call2(Incremental_Internal_observer[1], invariant_a, t[1]);
   }
   function observing(t){
    return caml_call1(Incremental_Internal_observer[4], t[1]);
   }
   function use_is_allowed(t){
    return caml_call1(Incremental_Internal_observer[5], t[1]);
   }
   function value_exn(t){
    return caml_call1(Incremental_Internal_observer[6], t[1]);
   }
   function incr_state(t){
    return caml_call1(Incremental_Internal_observer[9], t[1]);
   }
   function on_update_exn(t, on_update_handler){
    return caml_call2
            (Incremental_Internal_observer[7], t[1], on_update_handler);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_incremental);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incremental_Observer);
   var
    Incremental_Observer =
      [0,
       invariant,
       sexp_of_t,
       observing,
       use_is_allowed,
       value_exn,
       on_update_exn,
       incr_state];
   runtime.caml_register_global
    (13, Incremental_Observer, cst_Incremental_Observer$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incremental__State
//# unitInfo: Requires: Base__Backtrace, Base__Invariant, Core, Core__Error, Core__Fn, Core__Gc, Core__Hashtbl, Core__Int, Core__Lazy, Core__List, Core__Option, Core__Or_error, Core__Percent, Core__Sequence, Core__Stack, Core__Tuple, Incremental__Adjust_heights_heap, Incremental__Alarm, Incremental__Alarm_value, Incremental__Array_fold, Incremental__Cutoff, Incremental__Expert, Incremental__Import, Incremental__Internal_observer, Incremental__Kind, Incremental__Node, Incremental__Observer, Incremental__On_update_handler, Incremental__Raised_exn, Incremental__Recompute_heap, Incremental__Scope, Incremental__Stabilization_num, Incremental__Step_function_node, Incremental__Unordered_array_fold, Incremental__Var, Incremental_step_function, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Sexplib0__Sexp_conv_error, Sexplib0__Sexp_conv_record, Thread_safe_queue, Timing_wheel, Weak_hashtbl
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_during_stabilization$0 = " during stabilization",
    cst_Incremental_State$0 = "Incremental__State",
    cst_T = "T",
    cst = "_",
    cst_adjust_heights_heap$0 = "adjust_heights_heap",
    cst_all_observers$0 = "all_observers",
    cst_bind_lhs_change_should_inv$0 = "bind_lhs_change_should_invalidate_rhs",
    cst_can_only_call$2 = "can only call ",
    cst_cannot = "cannot ",
    cst_current_kind = "current.kind",
    cst_current_scope$0 = "current_scope",
    cst_currently_running_node$0 = "currently_running_node",
    cst_disallowed_observers$0 = "disallowed_observers",
    cst_expert_nodes_created_by_cu$0 = "expert_nodes_created_by_current_node",
    cst_finalized_observers$0 = "finalized_observers",
    cst_fired_alarm_values$0 = "fired_alarm_values",
    cst_handle_after_stabilization$0 = "handle_after_stabilization",
    cst_handle_fired$0 = "handle_fired",
    cst_incremental$0 = "incremental",
    cst_keep_node_creation_backtra$0 = "keep_node_creation_backtrace",
    cst_max_num_parents$0 = "max_num_parents",
    cst_new_observers$0 = "new_observers",
    cst_node_kind = "node.kind",
    cst_now$0 = "now",
    cst_num_active_observers$0 = "num_active_observers",
    cst_num_nodes_became_necessary$0 = "num_nodes_became_necessary",
    cst_num_nodes_became_unnecessa$0 = "num_nodes_became_unnecessary",
    cst_num_nodes_changed$0 = "num_nodes_changed",
    cst_num_nodes_created$0 = "num_nodes_created",
    cst_num_nodes_invalidated$0 = "num_nodes_invalidated",
    cst_num_nodes_recomputed$0 = "num_nodes_recomputed",
    cst_num_nodes_recomputed_direc$1 =
      "num_nodes_recomputed_directly_because_min_height",
    cst_num_nodes_recomputed_direc$2 =
      "num_nodes_recomputed_directly_because_one_child",
    cst_num_var_sets$0 = "num_var_sets",
    cst_only_in_debug$0 = "only_in_debug",
    cst_percentage_of_nodes_by_num$0 = "percentage_of_nodes_by_num_parents",
    cst_propagate_invalidity$0 = "propagate_invalidity",
    cst_recompute_heap$0 = "recompute_heap",
    cst_run_on_update_handlers$0 = "run_on_update_handlers",
    cst_set_during_stabilization$0 = "set_during_stabilization",
    cst_src_state_ml = "src/state.ml",
    cst_stabilization_num$0 = "stabilization_num",
    cst_status$0 = "status",
    cst_timing_wheel$0 = "timing_wheel",
    cst_weak_hashtbls$0 = "weak_hashtbls",
    caml_check_bound = runtime.caml_check_bound,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_string_notequal = runtime.caml_string_notequal,
    caml_update_dummy = runtime.caml_update_dummy,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   function caml_call9(f, a0, a1, a2, a3, a4, a5, a6, a7, a8){
    return (f.l >= 0 ? f.l : f.l = f.length) == 9
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7, a8]);
   }
   function caml_call10(f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9){
    return (f.l >= 0 ? f.l : f.l = f.length) == 10
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9)
            : runtime.caml_call_gen
              (f, [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9]);
   }
   function caml_call11(f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10){
    return (f.l >= 0 ? f.l : f.l = f.length) == 11
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10)
            : runtime.caml_call_gen
              (f, [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10]);
   }
   function caml_call12(f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11){
    return (f.l >= 0 ? f.l : f.l = f.length) == 12
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11)
            : runtime.caml_call_gen
              (f, [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11]);
   }
   function caml_call13
   (f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12){
    return (f.l >= 0 ? f.l : f.l = f.length) == 13
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12)
            : runtime.caml_call_gen
              (f, [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12]);
   }
   function caml_call14
   (f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13){
    return (f.l >= 0 ? f.l : f.l = f.length) == 14
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13)
            : runtime.caml_call_gen
              (f,
               [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13]);
   }
   function caml_call15
   (f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14){
    return (f.l >= 0 ? f.l : f.l = f.length) == 15
            ? f
              (a0,
               a1,
               a2,
               a3,
               a4,
               a5,
               a6,
               a7,
               a8,
               a9,
               a10,
               a11,
               a12,
               a13,
               a14)
            : runtime.caml_call_gen
              (f,
               [a0,
                a1,
                a2,
                a3,
                a4,
                a5,
                a6,
                a7,
                a8,
                a9,
                a10,
                a11,
                a12,
                a13,
                a14]);
   }
   function caml_call27
   (f,
    a0,
    a1,
    a2,
    a3,
    a4,
    a5,
    a6,
    a7,
    a8,
    a9,
    a10,
    a11,
    a12,
    a13,
    a14,
    a15,
    a16,
    a17,
    a18,
    a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26){
    return (f.l >= 0 ? f.l : f.l = f.length) == 27
            ? f
              (a0,
               a1,
               a2,
               a3,
               a4,
               a5,
               a6,
               a7,
               a8,
               a9,
               a10,
               a11,
               a12,
               a13,
               a14,
               a15,
               a16,
               a17,
               a18,
               a19,
               a20,
               a21,
               a22,
               a23,
               a24,
               a25,
               a26)
            : runtime.caml_call_gen
              (f,
               [a0,
                a1,
                a2,
                a3,
                a4,
                a5,
                a6,
                a7,
                a8,
                a9,
                a10,
                a11,
                a12,
                a13,
                a14,
                a15,
                a16,
                a17,
                a18,
                a19,
                a20,
                a21,
                a22,
                a23,
                a24,
                a25,
                a26]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    error_source_079 = "src/state.ml.Stats.t",
    Incremental_Node = global_data.Incremental__Node,
    Core = global_data.Core,
    Incremental_Expert = global_data.Incremental__Expert,
    Incremental_Unordered_array_fo =
      global_data.Incremental__Unordered_array_fold,
    Incremental_Import = global_data.Incremental__Import,
    Assert_failure = global_data.Assert_failure,
    Incremental_Recompute_heap = global_data.Incremental__Recompute_heap,
    Incremental_Scope = global_data.Incremental__Scope,
    Core_Stack = global_data.Core__Stack,
    Incremental_Array_fold = global_data.Incremental__Array_fold,
    Incremental_Kind = global_data.Incremental__Kind,
    Incremental_Stabilization_num = global_data.Incremental__Stabilization_num,
    Incremental_step_function = global_data.Incremental_step_function,
    Incremental_Step_function_node =
      global_data.Incremental__Step_function_node,
    Core_Sequence = global_data.Core__Sequence,
    Incremental_Cutoff = global_data.Incremental__Cutoff,
    Core_List = global_data.Core__List,
    Core_Option = global_data.Core__Option,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Weak_hashtbl = global_data.Weak_hashtbl,
    Thread_safe_queue = global_data.Thread_safe_queue,
    Incremental_Adjust_heights_hea =
      global_data.Incremental__Adjust_heights_heap,
    Timing_wheel = global_data.Timing_wheel,
    Incremental_Alarm = global_data.Incremental__Alarm,
    Incremental_Alarm_value = global_data.Incremental__Alarm_value,
    Core_Or_error = global_data.Core__Or_error,
    Core_Fn = global_data.Core__Fn,
    Core_Int = global_data.Core__Int,
    Core_Hashtbl = global_data.Core__Hashtbl,
    Core_Lazy = global_data.Core__Lazy,
    Core_Gc = global_data.Core__Gc,
    Core_Tuple = global_data.Core__Tuple,
    Incremental_Raised_exn = global_data.Incremental__Raised_exn,
    Incremental_Var = global_data.Incremental__Var,
    Incremental_Observer = global_data.Incremental__Observer,
    Incremental_On_update_handler = global_data.Incremental__On_update_handler,
    Core_Error = global_data.Core__Error,
    Incremental_Internal_observer = global_data.Incremental__Internal_observer,
    Base_Backtrace = global_data.Base__Backtrace,
    Base_Invariant = global_data.Base__Invariant,
    Core_Percent = global_data.Core__Percent,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Sexplib0_Sexp_conv_record = global_data.Sexplib0__Sexp_conv_record,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incremental_State$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incremental$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_state_ml);
   caml_call2(Ppx_inline_test_lib[6], cst_incremental$0, "state.ml");
   var
    _bs_ = [0, cst_src_state_ml, 387, 16],
    _bu_ = [0, cst_src_state_ml, 428, 18],
    _bt_ = [0, cst_src_state_ml, 461, 18],
    _by_ = [0, cst_src_state_ml, 542, 16],
    _bB_ = [0, cst_src_state_ml, 576, 18],
    _bz_ = [0, cst],
    cst_Trying_to_make_a_node_nece =
      "Trying to make a node necessary whose defining bind is not necessary",
    _bA_ = [0, cst_src_state_ml, 560, 25819, 25831],
    _bC_ = [0, cst_src_state_ml, 581, 16],
    _bD_ = [0, cst_src_state_ml, 582, 16],
    _bI_ = [0, cst_src_state_ml, 758, 4],
    _bJ_ = [0, cst_src_state_ml, 807, 21],
    _bK_ = [0, cst_src_state_ml, 688, 18],
    _bL_ = [0, cst_src_state_ml, 731, 18],
    _bM_ = [0, cst_src_state_ml, 776, 18],
    _bU_ = [0, cst_src_state_ml, 1024, 22],
    _bT_ = [0, cst_src_state_ml, 1057, 20],
    _bO_ = [0, cst_src_state_ml, 1062, 29],
    _bR_ = [0, cst_src_state_ml, 1064, 20],
    _bS_ = [0, cst_src_state_ml, 1065, 30],
    _bN_ = [0, cst_src_state_ml, 1066, 54],
    _bQ_ = [0, cst_src_state_ml, 1120, 24],
    _bP_ = [0, cst_src_state_ml, 1121, 24],
    cst_remove_dependency = "remove_dependency",
    _cl_ = [0, cst_src_state_ml, 2097, 20],
    cst_add_dependency = "add_dependency",
    _ck_ = [0, cst_src_state_ml, 2067, 22],
    cst_invalidate = "invalidate",
    cst_make_stale = "make_stale",
    _ci_ = [0, cst],
    _cg_ = [0, cst],
    _ch_ = [0, cst_current_kind],
    _cj_ = [0, cst_node_kind],
    cst_on_children_nodes = " on children nodes",
    cst_can_only_call$1 = cst_can_only_call$2,
    _ce_ = [0, cst],
    _cc_ = [0, cst],
    _cd_ = [0, cst_current_kind],
    _cf_ = [0, cst_node_kind],
    cst_on_parent_nodes = " on parent nodes",
    cst_can_only_call$0 = cst_can_only_call$2,
    cst_during_stabilization = cst_during_stabilization$0,
    cst_can_only_call = cst_can_only_call$2,
    _cb_ = [0, cst],
    cst_unexpected_kind_for_expert = "unexpected kind for expert node",
    cst_advance_clock = "advance_clock",
    _b$_ = [5, 1],
    _ca_ = [0, cst_src_state_ml, 1888, 22],
    cst_cannot_take_snapshot_in_th = "cannot take snapshot in the past",
    cst_at_intervals_got_too_small = "at_intervals got too small interval",
    _b__ = [0, cst_src_state_ml, 1795, 69176, 69188],
    _b8_ = [0, 0],
    _b9_ = [0, cst_src_state_ml, 1786, 16],
    _b7_ = [0, cst_src_state_ml, 1753, 16],
    cst_unordered_array_fold_got_n =
      "unordered_array_fold got non-positive full_compute_every_n_changes",
    _b6_ = [0, cst_src_state_ml, 1664, 65613, 65625],
    cst_step = "step",
    _b5_ = [0, cst_src_state_ml, 1406, 6],
    _b3_ = [0, "Done"],
    _b4_ = [0, "Keep_going"],
    cst_stabilize = "stabilize",
    cst_cannot_set_var_stabilizati =
      "cannot set var -- stabilization previously raised",
    _b2_ = [0, cst_src_state_ml, 1282, 18],
    _b0_ = [0, cst],
    cst_Observer_value_exn_called_ =
      "Observer.value_exn called during stabilization",
    _b1_ = [0, cst_src_state_ml, 1251, 52155, 52167],
    cst_Observer_value_exn_called_$0 =
      "Observer.value_exn called after stabilize previously raised",
    _bY_ = [0, cst_src_state_ml, 1211, 29],
    _bZ_ = [0, cst_src_state_ml, 1236, 20],
    _bX_ = [0, cst_src_state_ml, 1144, 6],
    _bV_ = [0, cst],
    cst_node_unexpectedly_does_not =
      "node unexpectedly does not need to be computed",
    _bW_ = [0, cst_src_state_ml, 1131, 47733, 47745],
    _bH_ = [0, cst_src_state_ml, 670, 16],
    cst_attempt_to_run_within_an_i = "attempt to run within an invalid scope",
    _bG_ = [0, cst_src_state_ml, 636, 28770, 28793],
    _bF_ = [0, cst_src_state_ml, 595, 16],
    _bE_ = [0, cst_src_state_ml, 613, 16],
    _bw_ = [0, cst_src_state_ml, 513, 22],
    _bv_ = [0, cst_src_state_ml, 525, 15],
    cst_set_max_height_allowed = "set_max_height_allowed",
    _bn_ =
      [0,
       [11, cst_cannot, [2, 0, [11, cst_during_stabilization$0, 0]]],
       "cannot %s during stabilization"],
    _bo_ = [0, cst_src_state_ml, 337, 15160, 15172],
    _bp_ =
      [0,
       [11, cst_cannot, [2, 0, [11, " during on-update handlers", 0]]],
       "cannot %s during on-update handlers"],
    _bq_ = [0, cst_src_state_ml, 326, 14790, 14804],
    _br_ =
      [0,
       [11, cst_cannot, [2, 0, [11, " -- stabilize previously raised", 0]]],
       "cannot %s -- stabilize previously raised"],
    _bk_ = [0, cst_src_state_ml, 257, 39],
    _bj_ = [0, cst_src_state_ml, 261, 13],
    _bi_ = [0, cst_src_state_ml, 265, 13],
    _bh_ = [0, cst_src_state_ml, 267, 46],
    _bg_ = [0, cst_src_state_ml, 282, 41],
    _bf_ = [0, cst_src_state_ml, 290, 49],
    _bd_ = [0, cst_src_state_ml, 300, 19],
    _bc_ = [0, cst_src_state_ml, 296, 15],
    _be_ = [0, cst_src_state_ml, 294, 48],
    _bb_ = [0, cst_src_state_ml, 247, 39],
    _ba_ = [0, cst_src_state_ml, 248, 8],
    _a__ = [0, cst],
    cst_member_of_all_observers_wi =
      "member of all_observers with unexpected state",
    _a$_ = [0, cst_src_state_ml, 240, 10704, 10723],
    _bl_ = [0, cst_src_state_ml, 249, 6],
    _bm_ = [0, cst_src_state_ml, 233, 10405, 10429],
    cst_cannot_call_am_stabilizing =
      "cannot call am_stabilizing -- stabilize previously raised",
    _a8_ = [0, cst_percentage_of_nodes_by_num$0],
    _a9_ = [0, cst_max_num_parents$0],
    cst_percentage_of_nodes_by_num = cst_percentage_of_nodes_by_num$0,
    cst_max_num_parents = cst_max_num_parents$0,
    _a6_ = [0, cst_src_state_ml, 156, 13],
    _a5_ = [0, cst_src_state_ml, 159, 44],
    _a7_ = [0, cst_src_state_ml, 151, 7547, 7571],
    _a1_ = [0, cst_fired_alarm_values$0],
    _a2_ = [0, cst_handle_fired$0],
    _a3_ = [0, cst_now$0],
    _a4_ = [0, cst_timing_wheel$0],
    _as_ = [0, cst_num_var_sets$0],
    _at_ = [0, cst_num_nodes_recomputed_direc$1],
    _au_ = [0, cst_num_nodes_recomputed_direc$2],
    _av_ = [0, cst_num_nodes_recomputed$0],
    _aw_ = [0, cst_num_nodes_invalidated$0],
    _ax_ = [0, cst_num_nodes_created$0],
    _ay_ = [0, cst_num_nodes_changed$0],
    _az_ = [0, cst_num_nodes_became_unnecessa$0],
    _aA_ = [0, cst_num_nodes_became_necessary$0],
    _aB_ = [0, cst_keep_node_creation_backtra$0],
    _aC_ = [0, cst_weak_hashtbls$0],
    _aD_ = [0, cst_only_in_debug$0],
    _aE_ = [0, cst_run_on_update_handlers$0],
    _aF_ = [0, cst_handle_after_stabilization$0],
    _aG_ = [0, cst_set_during_stabilization$0],
    _aH_ = [0, cst_disallowed_observers$0],
    _aI_ = [0, cst_new_observers$0],
    _aJ_ = [0, cst_finalized_observers$0],
    _aK_ = [0, cst_all_observers$0],
    _aL_ = [0, cst_num_active_observers$0],
    _aM_ = [0, cst_propagate_invalidity$0],
    _aN_ = [0, cst_adjust_heights_heap$0],
    _aO_ = [0, cst_recompute_heap$0],
    _aP_ = [0, cst_current_scope$0],
    _aQ_ = [0, cst_stabilization_num$0],
    _aR_ = [0, cst_bind_lhs_change_should_inv$0],
    _aS_ = [0, cst_status$0],
    _q_ = [0, cst],
    _p_ = [0, cst],
    _r_ = [0, cst_T],
    _o_ = [0, cst_src_state_ml, 38, 1165, 1189],
    _m_ = [0, cst_expert_nodes_created_by_cu$0],
    _n_ = [0, cst_currently_running_node$0],
    _h_ = [0, cst_src_state_ml, 25, 715, 739],
    _f_ = [0, cst],
    _e_ = [0, cst],
    _g_ = [0, cst_T],
    _a_ = [0, "Stabilizing"],
    _b_ = [0, "Running_on_update_handlers"],
    _c_ = [0, "Not_stabilizing"],
    _d_ = [0, "Stabilize_previously_raised"],
    cst_expert_nodes_created_by_cu = cst_expert_nodes_created_by_cu$0,
    cst_currently_running_node = cst_currently_running_node$0,
    cst_num_var_sets = cst_num_var_sets$0,
    cst_num_nodes_recomputed_direc = cst_num_nodes_recomputed_direc$1,
    cst_num_nodes_recomputed_direc$0 = cst_num_nodes_recomputed_direc$2,
    cst_num_nodes_recomputed = cst_num_nodes_recomputed$0,
    cst_num_nodes_invalidated = cst_num_nodes_invalidated$0,
    cst_num_nodes_created = cst_num_nodes_created$0,
    cst_num_nodes_changed = cst_num_nodes_changed$0,
    cst_num_nodes_became_unnecessa = cst_num_nodes_became_unnecessa$0,
    cst_num_nodes_became_necessary = cst_num_nodes_became_necessary$0,
    cst_keep_node_creation_backtra = cst_keep_node_creation_backtra$0,
    cst_weak_hashtbls = cst_weak_hashtbls$0,
    cst_only_in_debug = cst_only_in_debug$0,
    cst_run_on_update_handlers = cst_run_on_update_handlers$0,
    cst_handle_after_stabilization = cst_handle_after_stabilization$0,
    cst_set_during_stabilization = cst_set_during_stabilization$0,
    cst_disallowed_observers = cst_disallowed_observers$0,
    cst_new_observers = cst_new_observers$0,
    cst_finalized_observers = cst_finalized_observers$0,
    cst_all_observers = cst_all_observers$0,
    cst_num_active_observers = cst_num_active_observers$0,
    cst_propagate_invalidity = cst_propagate_invalidity$0,
    cst_adjust_heights_heap = cst_adjust_heights_heap$0,
    cst_recompute_heap = cst_recompute_heap$0,
    cst_current_scope = cst_current_scope$0,
    cst_stabilization_num = cst_stabilization_num$0,
    cst_bind_lhs_change_should_inv = cst_bind_lhs_change_should_inv$0,
    cst_status = cst_status$0,
    cst_fired_alarm_values = cst_fired_alarm_values$0,
    cst_handle_fired = cst_handle_fired$0,
    cst_now = cst_now$0,
    cst_timing_wheel = cst_timing_wheel$0,
    cst_incremental = cst_incremental$0,
    cst_Incremental_State = cst_Incremental_State$0;
   function sexp_of_status(param){
    if(typeof param === "number")
     switch(param){case 0: return _a_;case 1: return _b_;default: return _c_;}
    var
     arg0_001 = param[1],
     res0_002 = caml_call1(Incremental_Raised_exn[1], arg0_001);
    return [1, [0, _d_, [0, res0_002, 0]]];
   }
   function sexp_of_t(param){
    var arg1_004 = param[2], arg0_003 = param[1];
    function _in_(param){return _e_;}
    var res0_005 = caml_call2(Incremental_Node[2], _in_, arg0_003);
    function _io_(param){return _f_;}
    var
     res1_006 =
       caml_call2(Incremental_On_update_handler[1][2], _io_, arg1_004);
    return [1, [0, _g_, [0, res0_005, [0, res1_006, 0]]]];
   }
   function invariant(t){
    var node = t[1];
    function _ik_(param){
     function _il_(_im_){return 0;}
     return caml_call2(Incremental_Node[4], _il_, node);
    }
    return caml_call4(Base_Invariant[1], _h_, t, sexp_of_t, _ik_);
   }
   var Run_on_update_handlers = [0, sexp_of_t, invariant];
   function expert_nodes_created_by_curren(r){return r[2];}
   function set_expert_nodes_created_by_cu(r, v){r[2] = v; return 0;}
   function currently_running_node(r){return r[1];}
   function set_currently_running_node(r, v){r[1] = v; return 0;}
   function _i_(r, v){return [0, r[1], v];}
   var
    _j_ = [0, set_expert_nodes_created_by_cu],
    expert_nodes_created_by_curren$0 =
      [0,
       function(param){return 0;},
       cst_expert_nodes_created_by_cu,
       _j_,
       expert_nodes_created_by_curren,
       _i_];
   function _k_(r, v){return [0, v, r[2]];}
   var
    _l_ = [0, set_currently_running_node],
    currently_running_node$0 =
      [0,
       function(param){return 0;},
       cst_currently_running_node,
       _l_,
       currently_running_node,
       _k_];
   function iter(currently_running_node_fun, expert_nodes_created_by_curren){
    caml_call1(currently_running_node_fun, currently_running_node$0);
    return caml_call1
            (expert_nodes_created_by_curren, expert_nodes_created_by_curren$0);
   }
   var
    Fields =
      [0, expert_nodes_created_by_curren$0, currently_running_node$0, iter];
   function sexp_of_t$0(param){
    var
     currently_running_node_008 = param[1],
     expert_nodes_created_by_curren = param[2],
     arg_011 =
       caml_call2
        (Core[472], Incremental_Node[1][1], expert_nodes_created_by_curren),
     bnds_007 = [0, [1, [0, _m_, [0, arg_011, 0]]], 0],
     arg_009 =
       caml_call2
        (Core[515], Incremental_Node[1][1], currently_running_node_008),
     bnds_007$0 = [0, [1, [0, _n_, [0, arg_009, 0]]], bnds_007];
    return [1, bnds_007$0];
   }
   function invariant$0(t){
    function _if_(param){
     function _ig_(_ij_){return 0;}
     function _ih_(_ii_){return 0;}
     return caml_call2(Fields[3], _ih_, _ig_);
    }
    return caml_call4(Base_Invariant[1], _o_, t, sexp_of_t$0, _if_);
   }
   function create(param){return [0, 0, 0];}
   var
    Only_in_debug =
      [0,
       expert_nodes_created_by_curren,
       set_expert_nodes_created_by_cu,
       currently_running_node,
       set_currently_running_node,
       Fields,
       sexp_of_t$0,
       invariant$0,
       create];
   function sexp_of_t$1(param){
    var arg0_012 = param[1];
    function _id_(param){return _p_;}
    function _ie_(param){return _q_;}
    var res0_013 = caml_call3(Weak_hashtbl[1], _ie_, _id_, arg0_012);
    return [1, [0, _r_, [0, res0_013, 0]]];
   }
   var Packed_weak_hashtbl = [0, sexp_of_t$1];
   function num_var_sets(r){return r[27];}
   function set_num_var_sets(r, v){r[27] = v; return 0;}
   function num_nodes_recomputed_directly_(r){return r[26];}
   function set_num_nodes_recomputed_direc(r, v){r[26] = v; return 0;}
   function num_nodes_recomputed_directly_$0(r){return r[25];}
   function set_num_nodes_recomputed_direc$0(r, v){r[25] = v; return 0;}
   function num_nodes_recomputed(r){return r[24];}
   function set_num_nodes_recomputed(r, v){r[24] = v; return 0;}
   function num_nodes_invalidated(r){return r[23];}
   function set_num_nodes_invalidated(r, v){r[23] = v; return 0;}
   function num_nodes_created(r){return r[22];}
   function set_num_nodes_created(r, v){r[22] = v; return 0;}
   function num_nodes_changed(r){return r[21];}
   function set_num_nodes_changed(r, v){r[21] = v; return 0;}
   function num_nodes_became_unnecessary(r){return r[20];}
   function set_num_nodes_became_unnecessa(r, v){r[20] = v; return 0;}
   function num_nodes_became_necessary(r){return r[19];}
   function set_num_nodes_became_necessary(r, v){r[19] = v; return 0;}
   function keep_node_creation_backtrace(r){return r[18];}
   function set_keep_node_creation_backtra(r, v){r[18] = v; return 0;}
   function weak_hashtbls(r){return r[17];}
   function only_in_debug(r){return r[16];}
   function set_only_in_debug(r, v){r[16] = v; return 0;}
   function run_on_update_handlers(r){return r[15];}
   function handle_after_stabilization(r){return r[14];}
   function set_during_stabilization(r){return r[13];}
   function disallowed_observers(r){return r[12];}
   function new_observers(r){return r[11];}
   function finalized_observers(r){return r[10];}
   function all_observers(r){return r[9];}
   function set_all_observers(r, v){r[9] = v; return 0;}
   function num_active_observers(r){return r[8];}
   function set_num_active_observers(r, v){r[8] = v; return 0;}
   function propagate_invalidity(r){return r[7];}
   function adjust_heights_heap(r){return r[6];}
   function recompute_heap(r){return r[5];}
   function current_scope(r){return r[4];}
   function set_current_scope(r, v){r[4] = v; return 0;}
   function stabilization_num(r){return r[3];}
   function set_stabilization_num(r, v){r[3] = v; return 0;}
   function bind_lhs_change_should_invalid(r){return r[2];}
   function status(r){return r[1];}
   function set_status(r, v){r[1] = v; return 0;}
   function _s_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26],
            v];
   }
   var
    _t_ = [0, set_num_var_sets],
    num_var_sets$0 =
      [0,
       function(param){return 0;},
       cst_num_var_sets,
       _t_,
       num_var_sets,
       _s_];
   function _u_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            v,
            r[27]];
   }
   var
    _v_ = [0, set_num_nodes_recomputed_direc],
    num_nodes_recomputed_directly_$1 =
      [0,
       function(param){return 0;},
       cst_num_nodes_recomputed_direc,
       _v_,
       num_nodes_recomputed_directly_,
       _u_];
   function _w_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            v,
            r[26],
            r[27]];
   }
   var
    _x_ = [0, set_num_nodes_recomputed_direc$0],
    num_nodes_recomputed_directly_$2 =
      [0,
       function(param){return 0;},
       cst_num_nodes_recomputed_direc$0,
       _x_,
       num_nodes_recomputed_directly_$0,
       _w_];
   function _y_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            v,
            r[25],
            r[26],
            r[27]];
   }
   var
    _z_ = [0, set_num_nodes_recomputed],
    num_nodes_recomputed$0 =
      [0,
       function(param){return 0;},
       cst_num_nodes_recomputed,
       _z_,
       num_nodes_recomputed,
       _y_];
   function _A_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            v,
            r[24],
            r[25],
            r[26],
            r[27]];
   }
   var
    _B_ = [0, set_num_nodes_invalidated],
    num_nodes_invalidated$0 =
      [0,
       function(param){return 0;},
       cst_num_nodes_invalidated,
       _B_,
       num_nodes_invalidated,
       _A_];
   function _C_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            v,
            r[23],
            r[24],
            r[25],
            r[26],
            r[27]];
   }
   var
    _D_ = [0, set_num_nodes_created],
    num_nodes_created$0 =
      [0,
       function(param){return 0;},
       cst_num_nodes_created,
       _D_,
       num_nodes_created,
       _C_];
   function _E_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            v,
            r[22],
            r[23],
            r[24],
            r[25],
            r[26],
            r[27]];
   }
   var
    _F_ = [0, set_num_nodes_changed],
    num_nodes_changed$0 =
      [0,
       function(param){return 0;},
       cst_num_nodes_changed,
       _F_,
       num_nodes_changed,
       _E_];
   function _G_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            v,
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26],
            r[27]];
   }
   var
    _H_ = [0, set_num_nodes_became_unnecessa],
    num_nodes_became_unnecessary$0 =
      [0,
       function(param){return 0;},
       cst_num_nodes_became_unnecessa,
       _H_,
       num_nodes_became_unnecessary,
       _G_];
   function _I_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            v,
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26],
            r[27]];
   }
   var
    _J_ = [0, set_num_nodes_became_necessary],
    num_nodes_became_necessary$0 =
      [0,
       function(param){return 0;},
       cst_num_nodes_became_necessary,
       _J_,
       num_nodes_became_necessary,
       _I_];
   function _K_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            v,
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26],
            r[27]];
   }
   var
    _L_ = [0, set_keep_node_creation_backtra],
    keep_node_creation_backtrace$0 =
      [0,
       function(param){return 0;},
       cst_keep_node_creation_backtra,
       _L_,
       keep_node_creation_backtrace,
       _K_];
   function _M_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            v,
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26],
            r[27]];
   }
   var
    _N_ = 0,
    weak_hashtbls$0 =
      [0,
       function(param){return 0;},
       cst_weak_hashtbls,
       _N_,
       weak_hashtbls,
       _M_];
   function _O_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            v,
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26],
            r[27]];
   }
   var
    _P_ = [0, set_only_in_debug],
    only_in_debug$0 =
      [0,
       function(param){return 0;},
       cst_only_in_debug,
       _P_,
       only_in_debug,
       _O_];
   function _Q_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            v,
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26],
            r[27]];
   }
   var
    _R_ = 0,
    run_on_update_handlers$0 =
      [0,
       function(param){return 0;},
       cst_run_on_update_handlers,
       _R_,
       run_on_update_handlers,
       _Q_];
   function _S_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            v,
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26],
            r[27]];
   }
   var
    _T_ = 0,
    handle_after_stabilization$0 =
      [0,
       function(param){return 0;},
       cst_handle_after_stabilization,
       _T_,
       handle_after_stabilization,
       _S_];
   function _U_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            v,
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26],
            r[27]];
   }
   var
    _V_ = 0,
    set_during_stabilization$0 =
      [0,
       function(param){return 0;},
       cst_set_during_stabilization,
       _V_,
       set_during_stabilization,
       _U_];
   function _W_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            v,
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26],
            r[27]];
   }
   var
    _X_ = 0,
    disallowed_observers$0 =
      [0,
       function(param){return 0;},
       cst_disallowed_observers,
       _X_,
       disallowed_observers,
       _W_];
   function _Y_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            v,
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26],
            r[27]];
   }
   var
    _Z_ = 0,
    new_observers$0 =
      [0,
       function(param){return 0;},
       cst_new_observers,
       _Z_,
       new_observers,
       _Y_];
   function ___(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            v,
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26],
            r[27]];
   }
   var
    _$_ = 0,
    finalized_observers$0 =
      [0,
       function(param){return 0;},
       cst_finalized_observers,
       _$_,
       finalized_observers,
       ___];
   function _aa_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            v,
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26],
            r[27]];
   }
   var
    _ab_ = [0, set_all_observers],
    all_observers$0 =
      [0,
       function(param){return 0;},
       cst_all_observers,
       _ab_,
       all_observers,
       _aa_];
   function _ac_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            v,
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26],
            r[27]];
   }
   var
    _ad_ = [0, set_num_active_observers],
    num_active_observers$0 =
      [0,
       function(param){return 0;},
       cst_num_active_observers,
       _ad_,
       num_active_observers,
       _ac_];
   function _ae_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            v,
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26],
            r[27]];
   }
   var
    _af_ = 0,
    propagate_invalidity$0 =
      [0,
       function(param){return 0;},
       cst_propagate_invalidity,
       _af_,
       propagate_invalidity,
       _ae_];
   function _ag_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            v,
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26],
            r[27]];
   }
   var
    _ah_ = 0,
    adjust_heights_heap$0 =
      [0,
       function(param){return 0;},
       cst_adjust_heights_heap,
       _ah_,
       adjust_heights_heap,
       _ag_];
   function _ai_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            v,
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26],
            r[27]];
   }
   var
    _aj_ = 0,
    recompute_heap$0 =
      [0,
       function(param){return 0;},
       cst_recompute_heap,
       _aj_,
       recompute_heap,
       _ai_];
   function _ak_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            v,
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26],
            r[27]];
   }
   var
    _al_ = [0, set_current_scope],
    current_scope$0 =
      [0,
       function(param){return 0;},
       cst_current_scope,
       _al_,
       current_scope,
       _ak_];
   function _am_(r, v){
    return [0,
            r[1],
            r[2],
            v,
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26],
            r[27]];
   }
   var
    _an_ = [0, set_stabilization_num],
    stabilization_num$0 =
      [0,
       function(param){return 0;},
       cst_stabilization_num,
       _an_,
       stabilization_num,
       _am_];
   function _ao_(r, v){
    return [0,
            r[1],
            v,
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26],
            r[27]];
   }
   var
    _ap_ = 0,
    bind_lhs_change_should_invalid$0 =
      [0,
       function(param){return 0;},
       cst_bind_lhs_change_should_inv,
       _ap_,
       bind_lhs_change_should_invalid,
       _ao_];
   function _aq_(r, v){
    return [0,
            v,
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18],
            r[19],
            r[20],
            r[21],
            r[22],
            r[23],
            r[24],
            r[25],
            r[26],
            r[27]];
   }
   var
    _ar_ = [0, set_status],
    status$0 = [0, function(param){return 0;}, cst_status, _ar_, status, _aq_];
   function iter$0
   (status_fun,
    bind_lhs_change_should_invalid,
    stabilization_num_fun,
    current_scope_fun,
    recompute_heap_fun,
    adjust_heights_heap_fun,
    propagate_invalidity_fun,
    num_active_observers_fun,
    all_observers_fun,
    finalized_observers_fun,
    new_observers_fun,
    disallowed_observers_fun,
    set_during_stabilization_fun,
    handle_after_stabilization_fun,
    run_on_update_handlers_fun,
    only_in_debug_fun,
    weak_hashtbls_fun,
    keep_node_creation_backtrace_f,
    num_nodes_became_necessary_fun,
    num_nodes_became_unnecessary_f,
    num_nodes_changed_fun,
    num_nodes_created_fun,
    num_nodes_invalidated_fun,
    num_nodes_recomputed_fun,
    num_nodes_recomputed_directly_$0,
    num_nodes_recomputed_directly_,
    num_var_sets_fun){
    caml_call1(status_fun, status$0);
    caml_call1
     (bind_lhs_change_should_invalid, bind_lhs_change_should_invalid$0);
    caml_call1(stabilization_num_fun, stabilization_num$0);
    caml_call1(current_scope_fun, current_scope$0);
    caml_call1(recompute_heap_fun, recompute_heap$0);
    caml_call1(adjust_heights_heap_fun, adjust_heights_heap$0);
    caml_call1(propagate_invalidity_fun, propagate_invalidity$0);
    caml_call1(num_active_observers_fun, num_active_observers$0);
    caml_call1(all_observers_fun, all_observers$0);
    caml_call1(finalized_observers_fun, finalized_observers$0);
    caml_call1(new_observers_fun, new_observers$0);
    caml_call1(disallowed_observers_fun, disallowed_observers$0);
    caml_call1(set_during_stabilization_fun, set_during_stabilization$0);
    caml_call1(handle_after_stabilization_fun, handle_after_stabilization$0);
    caml_call1(run_on_update_handlers_fun, run_on_update_handlers$0);
    caml_call1(only_in_debug_fun, only_in_debug$0);
    caml_call1(weak_hashtbls_fun, weak_hashtbls$0);
    caml_call1(keep_node_creation_backtrace_f, keep_node_creation_backtrace$0);
    caml_call1(num_nodes_became_necessary_fun, num_nodes_became_necessary$0);
    caml_call1(num_nodes_became_unnecessary_f, num_nodes_became_unnecessary$0);
    caml_call1(num_nodes_changed_fun, num_nodes_changed$0);
    caml_call1(num_nodes_created_fun, num_nodes_created$0);
    caml_call1(num_nodes_invalidated_fun, num_nodes_invalidated$0);
    caml_call1(num_nodes_recomputed_fun, num_nodes_recomputed$0);
    caml_call1
     (num_nodes_recomputed_directly_$0, num_nodes_recomputed_directly_$2);
    caml_call1
     (num_nodes_recomputed_directly_, num_nodes_recomputed_directly_$1);
    return caml_call1(num_var_sets_fun, num_var_sets$0);
   }
   var
    Fields$0 =
      [0,
       num_var_sets$0,
       num_nodes_recomputed_directly_$1,
       num_nodes_recomputed_directly_$2,
       num_nodes_recomputed$0,
       num_nodes_invalidated$0,
       num_nodes_created$0,
       num_nodes_changed$0,
       num_nodes_became_unnecessary$0,
       num_nodes_became_necessary$0,
       keep_node_creation_backtrace$0,
       weak_hashtbls$0,
       only_in_debug$0,
       run_on_update_handlers$0,
       handle_after_stabilization$0,
       set_during_stabilization$0,
       disallowed_observers$0,
       new_observers$0,
       finalized_observers$0,
       all_observers$0,
       num_active_observers$0,
       propagate_invalidity$0,
       adjust_heights_heap$0,
       recompute_heap$0,
       current_scope$0,
       stabilization_num$0,
       bind_lhs_change_should_invalid$0,
       status$0,
       iter$0];
   function sexp_of_t$2(param){
    var
     status_015 = param[1],
     bind_lhs_change_should_invalid = param[2],
     stabilization_num_019 = param[3],
     current_scope_021 = param[4],
     propagate_invalidity_027 = param[7],
     adjust_heights_heap_025 = param[6],
     recompute_heap_023 = param[5],
     num_active_observers_029 = param[8],
     all_observers_031 = param[9],
     run_on_update_handlers_043 = param[15],
     handle_after_stabilization_041 = param[14],
     set_during_stabilization_039 = param[13],
     disallowed_observers_037 = param[12],
     new_observers_035 = param[11],
     finalized_observers_033 = param[10],
     only_in_debug_045 = param[16],
     weak_hashtbls_047 = param[17],
     keep_node_creation_backtrace_0 = param[18],
     num_nodes_became_necessary_051 = param[19],
     num_nodes_became_unnecessary_0 = param[20],
     num_nodes_changed_055 = param[21],
     num_nodes_created_057 = param[22],
     num_nodes_invalidated_059 = param[23],
     num_nodes_recomputed_061 = param[24],
     num_nodes_recomputed_directly_ = param[25],
     num_nodes_recomputed_directly_$0 = param[26],
     num_var_sets_067 = param[27],
     arg_068 = caml_call1(Core[389], num_var_sets_067),
     bnds_014 = [0, [1, [0, _as_, [0, arg_068, 0]]], 0],
     arg_066 = caml_call1(Core[389], num_nodes_recomputed_directly_$0),
     bnds_014$0 = [0, [1, [0, _at_, [0, arg_066, 0]]], bnds_014],
     arg_064 = caml_call1(Core[389], num_nodes_recomputed_directly_),
     bnds_014$1 = [0, [1, [0, _au_, [0, arg_064, 0]]], bnds_014$0],
     arg_062 = caml_call1(Core[389], num_nodes_recomputed_061),
     bnds_014$2 = [0, [1, [0, _av_, [0, arg_062, 0]]], bnds_014$1],
     arg_060 = caml_call1(Core[389], num_nodes_invalidated_059),
     bnds_014$3 = [0, [1, [0, _aw_, [0, arg_060, 0]]], bnds_014$2],
     arg_058 = caml_call1(Core[389], num_nodes_created_057),
     bnds_014$4 = [0, [1, [0, _ax_, [0, arg_058, 0]]], bnds_014$3],
     arg_056 = caml_call1(Core[389], num_nodes_changed_055),
     bnds_014$5 = [0, [1, [0, _ay_, [0, arg_056, 0]]], bnds_014$4],
     arg_054 = caml_call1(Core[389], num_nodes_became_unnecessary_0),
     bnds_014$6 = [0, [1, [0, _az_, [0, arg_054, 0]]], bnds_014$5],
     arg_052 = caml_call1(Core[389], num_nodes_became_necessary_051),
     bnds_014$7 = [0, [1, [0, _aA_, [0, arg_052, 0]]], bnds_014$6],
     arg_050 = caml_call1(Core[323], keep_node_creation_backtrace_0),
     bnds_014$8 = [0, [1, [0, _aB_, [0, arg_050, 0]]], bnds_014$7],
     arg_048 =
       caml_call2
        (Thread_safe_queue[1], Packed_weak_hashtbl[1], weak_hashtbls_047),
     bnds_014$9 = [0, [1, [0, _aC_, [0, arg_048, 0]]], bnds_014$8],
     arg_046 = caml_call1(Only_in_debug[6], only_in_debug_045),
     bnds_014$10 = [0, [1, [0, _aD_, [0, arg_046, 0]]], bnds_014$9],
     arg_044 =
       caml_call2
        (Core_Stack[2], Run_on_update_handlers[1], run_on_update_handlers_043),
     bnds_014$11 = [0, [1, [0, _aE_, [0, arg_044, 0]]], bnds_014$10],
     arg_042 =
       caml_call2
        (Core_Stack[2],
         Incremental_Node[1][1],
         handle_after_stabilization_041),
     bnds_014$12 = [0, [1, [0, _aF_, [0, arg_042, 0]]], bnds_014$11],
     arg_040 =
       caml_call2
        (Core_Stack[2], Incremental_Var[3][1], set_during_stabilization_039),
     bnds_014$13 = [0, [1, [0, _aG_, [0, arg_040, 0]]], bnds_014$12],
     arg_038 =
       caml_call2
        (Core_Stack[2],
         Incremental_Internal_observer[10][1],
         disallowed_observers_037),
     bnds_014$14 = [0, [1, [0, _aH_, [0, arg_038, 0]]], bnds_014$13],
     arg_036 =
       caml_call2
        (Core_Stack[2],
         Incremental_Internal_observer[10][1],
         new_observers_035),
     bnds_014$15 = [0, [1, [0, _aI_, [0, arg_036, 0]]], bnds_014$14],
     arg_034 =
       caml_call2
        (Thread_safe_queue[1],
         Incremental_Internal_observer[10][1],
         finalized_observers_033),
     bnds_014$16 = [0, [1, [0, _aJ_, [0, arg_034, 0]]], bnds_014$15],
     arg_032 =
       caml_call2
        (Incremental_Import[6][2],
         Incremental_Internal_observer[10][1],
         all_observers_031),
     bnds_014$17 = [0, [1, [0, _aK_, [0, arg_032, 0]]], bnds_014$16],
     arg_030 = caml_call1(Core[389], num_active_observers_029),
     bnds_014$18 = [0, [1, [0, _aL_, [0, arg_030, 0]]], bnds_014$17],
     arg_028 =
       caml_call2
        (Core_Stack[2], Incremental_Node[1][1], propagate_invalidity_027),
     bnds_014$19 = [0, [1, [0, _aM_, [0, arg_028, 0]]], bnds_014$18],
     arg_026 =
       caml_call1(Incremental_Adjust_heights_hea[1], adjust_heights_heap_025),
     bnds_014$20 = [0, [1, [0, _aN_, [0, arg_026, 0]]], bnds_014$19],
     arg_024 = caml_call1(Incremental_Recompute_heap[1], recompute_heap_023),
     bnds_014$21 = [0, [1, [0, _aO_, [0, arg_024, 0]]], bnds_014$20],
     arg_022 = caml_call1(Incremental_Scope[1], current_scope_021),
     bnds_014$22 = [0, [1, [0, _aP_, [0, arg_022, 0]]], bnds_014$21],
     arg_020 =
       caml_call1(Incremental_Stabilization_num[2], stabilization_num_019),
     bnds_014$23 = [0, [1, [0, _aQ_, [0, arg_020, 0]]], bnds_014$22],
     arg_018 = caml_call1(Core[323], bind_lhs_change_should_invalid),
     bnds_014$24 = [0, [1, [0, _aR_, [0, arg_018, 0]]], bnds_014$23],
     arg_016 = sexp_of_status(status_015),
     bnds_014$25 = [0, [1, [0, _aS_, [0, arg_016, 0]]], bnds_014$24];
    return [1, bnds_014$25];
   }
   function fired_alarm_values(r){return r[4];}
   function set_fired_alarm_values(r, v){r[4] = v; return 0;}
   function handle_fired(r){return r[3];}
   function now(r){return r[2];}
   function timing_wheel(r){return r[1];}
   function _aT_(r, v){return [0, r[1], r[2], r[3], v];}
   var
    _aU_ = [0, set_fired_alarm_values],
    fired_alarm_values$0 =
      [0,
       function(param){return 0;},
       cst_fired_alarm_values,
       _aU_,
       fired_alarm_values,
       _aT_];
   function _aV_(r, v){return [0, r[1], r[2], v, r[4]];}
   var
    _aW_ = 0,
    handle_fired$0 =
      [0,
       function(param){return 0;},
       cst_handle_fired,
       _aW_,
       handle_fired,
       _aV_];
   function _aX_(r, v){return [0, r[1], v, r[3], r[4]];}
   var
    _aY_ = 0,
    now$0 = [0, function(param){return 0;}, cst_now, _aY_, now, _aX_];
   function _aZ_(r, v){return [0, v, r[2], r[3], r[4]];}
   var
    _a0_ = 0,
    timing_wheel$0 =
      [0,
       function(param){return 0;},
       cst_timing_wheel,
       _a0_,
       timing_wheel,
       _aZ_];
   function iter$1
   (timing_wheel_fun, now_fun, handle_fired_fun, fired_alarm_values_fun){
    caml_call1(timing_wheel_fun, timing_wheel$0);
    caml_call1(now_fun, now$0);
    caml_call1(handle_fired_fun, handle_fired$0);
    return caml_call1(fired_alarm_values_fun, fired_alarm_values$0);
   }
   var
    Fields$1 =
      [0, fired_alarm_values$0, handle_fired$0, now$0, timing_wheel$0, iter$1];
   function sexp_of_t$3(param){
    var
     now_072 = param[2],
     timing_wheel_070 = param[1],
     fired_alarm_values_076 = param[4],
     arg_077 =
       caml_call2
        (Incremental_Import[6][2],
         Incremental_Alarm_value[3],
         fired_alarm_values_076),
     bnds_069 = [0, [1, [0, _a1_, [0, arg_077, 0]]], 0];
    function _ib_(_ic_){return 0;}
    var
     arg_075 = caml_call1(Sexplib0_Sexp_conv[24], _ib_),
     bnds_069$0 = [0, [1, [0, _a2_, [0, arg_075, 0]]], bnds_069],
     arg_073 =
       caml_call2(Incremental_Var[2], Incremental_Import[4][126], now_072),
     bnds_069$1 = [0, [1, [0, _a3_, [0, arg_073, 0]]], bnds_069$0],
     arg_071 =
       caml_call2
        (Timing_wheel[2], Incremental_Alarm_value[3], timing_wheel_070),
     bnds_069$2 = [0, [1, [0, _a4_, [0, arg_071, 0]]], bnds_069$1];
    return [1, bnds_069$2];
   }
   function invariant$1(t){
    function _h6_(param){
     function check(f){return caml_call2(Base_Invariant[2], t, f);}
     var
      _h7_ =
        check
         (function(fired_alarm_values){
           if(caml_call1(Incremental_Import[6][7], fired_alarm_values))
            return 0;
           throw caml_maybe_attach_backtrace([0, Assert_failure, _a5_], 1);
          });
     function _h8_(_ia_){return 0;}
     var
      _h9_ =
        check
         (function(now){
           var _h$_ = caml_call1(Timing_wheel[11], t[1]);
           if(caml_call2(Incremental_Import[4][21], now[1], _h$_)) return 0;
           throw caml_maybe_attach_backtrace([0, Assert_failure, _a6_], 1);
          }),
      _h__ = check(caml_call1(Timing_wheel[6], Incremental_Alarm_value[2]));
     return caml_call4(Fields$1[5], _h__, _h9_, _h8_, _h7_);
    }
    return caml_call4(Base_Invariant[1], _a7_, t, sexp_of_t$3, _h6_);
   }
   function incr_state(t){return caml_call1(Incremental_Var[5], t[2]);}
   var
    Clock =
      [0,
       fired_alarm_values,
       set_fired_alarm_values,
       handle_fired,
       now,
       timing_wheel,
       Fields$1,
       sexp_of_t$3,
       invariant$1,
       incr_state];
   function now$1(clock){return clock[2][1];}
   function timing_wheel_length(clock){
    return caml_call1(Timing_wheel[14], clock[1]);
   }
   function num_stabilizes(t){
    return caml_call1(Incremental_Stabilization_num[10], t[3]);
   }
   function max_height_allowed(t){
    return caml_call1(Incremental_Adjust_heights_hea[5], t[6]);
   }
   function max_height_seen(t){
    return caml_call1(Incremental_Adjust_heights_hea[7], t[6]);
   }
   function iter_observers(t, f){
    var r = [0, t[9]];
    for(;;){
     if(! caml_call1(Incremental_Import[6][8], r[1])) return 0;
     var observer = caml_call1(Incremental_Import[6][16], r[1]);
     r[1] = caml_call1(Incremental_Internal_observer[10][3], observer);
     caml_call1(f, observer);
    }
   }
   function directly_observed(t){
    var r = [0, 0];
    iter_observers(t, function(param){r[1] = [0, param[2], r[1]]; return 0;});
    return r[1];
   }
   function iter_observer_descendants(t, f){
    var _h5_ = directly_observed(t);
    return caml_call2(Incremental_Node[1][4], _h5_, f);
   }
   function t_of_sexp(x_085){
    function _hX_(param){
     var
      percentage_of_nodes_by_num_par = param[2][1],
      max_num_parents = param[1];
     return [0, max_num_parents, percentage_of_nodes_by_num_par];
    }
    var _hY_ = 0;
    function _hZ_(param){
     return caml_string_notequal(param, cst_max_num_parents$0)
             ? caml_string_notequal
                (param, cst_percentage_of_nodes_by_num$0)
               ? -1
               : 1
             : 0;
    }
    var _h0_ = 0;
    function _h1_(sexp_084){
     if(1 === sexp_084[0]){
      var _h3_ = sexp_084[1];
      if(_h3_){
       var _h4_ = _h3_[2];
       if(_h4_ && ! _h4_[2]){
        var
         arg1_081 = _h4_[1],
         arg0_080 = _h3_[1],
         res0_082 = caml_call1(Core[390], arg0_080),
         res1_083 = caml_call1(Core_Percent[9], arg1_081);
        return [0, res0_082, res1_083];
       }
      }
     }
     return caml_call3
             (Sexplib0_Sexp_conv_error[4], error_source_079, 2, sexp_084);
    }
    var
     _h2_ =
       [0,
        cst_percentage_of_nodes_by_num,
        1,
        caml_call1(Core[473], _h1_),
        _h0_];
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_079,
             [0, cst_max_num_parents, 1, Core[390], _h2_],
             _hZ_,
             _hY_,
             _hX_,
             x_085);
   }
   function sexp_of_t$4(param){
    var
     percentage_of_nodes_by_num_par = param[2],
     max_num_parents_087 = param[1],
     bnds_086 = 0;
    function _hW_(param){
     var
      arg1_092 = param[2],
      arg0_091 = param[1],
      res0_093 = caml_call1(Core[389], arg0_091),
      res1_094 = caml_call1(Core_Percent[10], arg1_092);
     return [1, [0, res0_093, [0, res1_094, 0]]];
    }
    var
     arg_090 = caml_call2(Core[472], _hW_, percentage_of_nodes_by_num_par),
     bnds_086$0 = [0, [1, [0, _a8_, [0, arg_090, 0]]], bnds_086],
     arg_088 = caml_call1(Core[389], max_num_parents_087),
     bnds_086$1 = [0, [1, [0, _a9_, [0, arg_088, 0]]], bnds_086$0];
    return [1, bnds_086$1];
   }
   var Stats = [0, t_of_sexp, sexp_of_t$4];
   function stats(t){
    var max_num_parents = [0, -1], num_necessary_nodes = [0, 0];
    iter_observer_descendants
     (t,
      function(param){
       num_necessary_nodes[1]++;
       max_num_parents[1] =
        caml_call2(Core_Int[90], max_num_parents[1], param[9]);
       return 0;
      });
    var
     max_num_parents$0 = max_num_parents[1],
     num_nodes_by_num_parents =
       caml_call2(Incremental_Import[5][63], max_num_parents$0 + 1 | 0, 0);
    iter_observer_descendants
     (t,
      function(param){
       var num_parents = param[9];
       num_nodes_by_num_parents[1 + num_parents] =
        caml_check_bound(num_nodes_by_num_parents, num_parents)
         [1 + num_parents]
        + 1
        | 0;
       return 0;
      });
    function _hU_(i, ac, num_nodes){
     return caml_call2(Core[90], num_nodes, 0)
             ? ac
             : [0,
               [0,
                i,
                caml_call1
                 (Core_Percent[76], num_nodes / num_necessary_nodes[1])],
               ac];
    }
    var
     _hV_ =
       caml_call3
        (Incremental_Import[5][49], num_nodes_by_num_parents, 0, _hU_),
     percentage_of_nodes_by_num_par = caml_call1(Core_List[59], _hV_);
    return [0, max_num_parents$0, percentage_of_nodes_by_num_par];
   }
   function am_stabilizing(t){
    var match = t[1];
    if(typeof match === "number") return 2 <= match ? 0 : 1;
    var raised_exn = match[1];
    return caml_call2
            (Incremental_Raised_exn[4],
             raised_exn,
             cst_cannot_call_am_stabilizing);
   }
   function invariant$2(t){
    if(typeof t[1] !== "number") return 0;
    function _g1_(param){
     function check(f){return caml_call2(Base_Invariant[2], t, f);}
     iter_observers
      (t,
       function(internal_observer){
        if(1 < internal_observer[1] - 1 >>> 0){
         var
          _hQ_ =
            function(x_095){
             function _hT_(param){return _a__;}
             return caml_call2(Incremental_Internal_observer[2], _hT_, x_095);
            };
         caml_call5
          (Core[247],
           0,
           _a$_,
           cst_member_of_all_observers_wi,
           internal_observer,
           _hQ_);
        }
        function _hR_(_hS_){return 0;}
        return caml_call2
                (Incremental_Internal_observer[1], _hR_, internal_observer);
       });
     iter_observer_descendants
      (t,
       function(node){
        function _hN_(_hP_){return 0;}
        caml_call2(Incremental_Node[4], _hN_, node);
        if
         (1 - am_stabilizing(t)
          && ! caml_call1(Incremental_Import[6][7], node[20]))
         throw caml_maybe_attach_backtrace([0, Assert_failure, _bb_], 1);
        var _hO_ = caml_call1(Incremental_Adjust_heights_hea[7], t[6]);
        if(caml_call2(Core[89], node[14], _hO_)) return 0;
        throw caml_maybe_attach_backtrace([0, Assert_failure, _ba_], 1);
       });
     var
      _g2_ = caml_call1(Incremental_Recompute_heap[5], t[5]),
      _g3_ = caml_call1(Incremental_Adjust_heights_hea[5], t[6]);
     if(! caml_call2(Core[90], _g3_, _g2_))
      throw caml_maybe_attach_backtrace([0, Assert_failure, _bl_], 1);
     function _g4_(_hM_){return 0;}
     function _g5_(_hL_){return 0;}
     function _g6_(_hK_){return 0;}
     function _g7_(_hJ_){return 0;}
     function _g8_(_hI_){return 0;}
     function _g9_(_hH_){return 0;}
     function _g__(_hG_){return 0;}
     function _g$_(_hF_){return 0;}
     function _ha_(_hE_){return 0;}
     function _hb_(_hD_){return 0;}
     function _hc_(_hC_){return 0;}
     var
      _hd_ = check(Only_in_debug[7]),
      _he_ = check(caml_call1(Core_Stack[4], Run_on_update_handlers[2])),
      _hf_ = check(caml_call1(Core_Stack[4], Incremental_Node[1][2])),
      _hg_ =
        check
         (function(set_during_stabilization){
           var _hA_ = t[1];
           if(typeof _hA_ !== "number")
            throw caml_maybe_attach_backtrace([0, Assert_failure, _be_], 1);
           if(! _hA_){
            var
             _hB_ =
               function(param){
                if(caml_call1(Incremental_Import[6][8], param[2])) return 0;
                throw caml_maybe_attach_backtrace
                       ([0, Assert_failure, _bd_], 1);
               };
            return caml_call2(Core_Stack[4], _hB_, set_during_stabilization);
           }
           if(caml_call1(Core_Stack[7], set_during_stabilization)) return 0;
           throw caml_maybe_attach_backtrace([0, Assert_failure, _bc_], 1);
          });
     function _hh_(packed){
      caml_call1(Incremental_Internal_observer[10][2], packed);
      if(2 === packed[1]) return 0;
      throw caml_maybe_attach_backtrace([0, Assert_failure, _bf_], 1);
     }
     var _hi_ = check(caml_call1(Core_Stack[4], _hh_));
     function _hj_(packed){
      caml_call1(Incremental_Internal_observer[10][2], packed);
      if(1 < packed[1] - 1 >>> 0) return 0;
      throw caml_maybe_attach_backtrace([0, Assert_failure, _bg_], 1);
     }
     var _hk_ = check(caml_call1(Core_Stack[4], _hj_));
     function _hl_(_hz_){return 0;}
     function _hm_(_hy_){return 0;}
     var
      _hn_ =
        check
         (function(num_active_observers){
           if(caml_call2(Core[88], num_active_observers, 0)) return 0;
           throw caml_maybe_attach_backtrace([0, Assert_failure, _bh_], 1);
          }),
      _ho_ =
        check
         (function(propagate_invalidity){
           if(caml_call1(Core_Stack[7], propagate_invalidity)) return 0;
           throw caml_maybe_attach_backtrace([0, Assert_failure, _bi_], 1);
          }),
      _hp_ =
        check
         (function(adjust_heights_heap){
           var
            _hx_ =
              caml_call1
               (Incremental_Adjust_heights_hea[4], adjust_heights_heap);
           if(caml_call2(Core[90], _hx_, 0))
            return caml_call1
                    (Incremental_Adjust_heights_hea[2], adjust_heights_heap);
           throw caml_maybe_attach_backtrace([0, Assert_failure, _bj_], 1);
          }),
      _hq_ = check(Incremental_Recompute_heap[2]),
      _hr_ =
        check
         (function(current_scope){
           if(current_scope === Incremental_Scope[3]) return 0;
           throw caml_maybe_attach_backtrace([0, Assert_failure, _bk_], 1);
          }),
      _hs_ = check(Incremental_Stabilization_num[4]);
     function _ht_(_hw_){return 0;}
     function _hu_(_hv_){return 0;}
     return caml_call27
             (Fields$0[28],
              _hu_,
              _ht_,
              _hs_,
              _hr_,
              _hq_,
              _hp_,
              _ho_,
              _hn_,
              _hm_,
              _hl_,
              _hk_,
              _hi_,
              _hg_,
              _hf_,
              _he_,
              _hd_,
              _hc_,
              _hb_,
              _ha_,
              _g$_,
              _g__,
              _g9_,
              _g8_,
              _g7_,
              _g6_,
              _g5_,
              _g4_);
    }
    return caml_call4(Base_Invariant[1], _bm_, t, sexp_of_t$2, _g1_);
   }
   function ensure_not_stabilizing(t, name, allow_in_update_handler){
    var match = t[1];
    if(typeof match === "number")
     switch(match){
       case 0:
        var
         backtrace = caml_call2(Base_Backtrace[2], 0, 0),
         _gV_ = Base_Backtrace[1],
         _gW_ = caml_call2(Core[265], _bn_, name);
        return caml_call5(Core[247], 0, _bo_, _gW_, backtrace, _gV_);
       case 1:
        var _gX_ = 1 - allow_in_update_handler;
        if(! _gX_) return _gX_;
        var
         backtrace$0 = caml_call2(Base_Backtrace[2], 0, 0),
         _gY_ = Base_Backtrace[1],
         _gZ_ = caml_call2(Core[265], _bp_, name);
        return caml_call5(Core[247], 0, _bq_, _gZ_, backtrace$0, _gY_);
       default: return 0;
     }
    var raised_exn = match[1], _g0_ = caml_call2(Core[265], _br_, name);
    return caml_call2(Incremental_Raised_exn[4], raised_exn, _g0_);
   }
   function set_height(node, height){
    var t = node[2];
    return caml_call3(Incremental_Adjust_heights_hea[8], t[6], node, height);
   }
   function set_max_height_allowed(t, height){
    ensure_not_stabilizing(t, cst_set_max_height_allowed, 1);
    caml_call2(Incremental_Adjust_heights_hea[6], t[6], height);
    return caml_call2(Incremental_Recompute_heap[6], t[5], height);
   }
   function handle_after_stabilization$1(node){
    var _gU_ = 1 - node[22];
    if(! _gU_) return _gU_;
    var t = node[2];
    node[22] = 1;
    return caml_call2(Core_Stack[25], t[14], node);
   }
   function remove_children(parent){
    function _gT_(child_index, param){
     return remove_child(param, parent, child_index);
    }
    return caml_call2(Incremental_Node[8], parent, _gT_);
   }
   function remove_child(child, parent, child_index){
    caml_call3(Incremental_Node[11], child, parent, child_index);
    return check_if_unnecessary(child);
   }
   function check_if_unnecessary(node){
    var _gS_ = 1 - caml_call1(Incremental_Node[15], node);
    return _gS_ ? became_unnecessary(node) : _gS_;
   }
   function became_unnecessary(node){
    var t = node[2];
    t[20] = t[20] + 1 | 0;
    if(caml_call2(Core[91], node[8], 0)) handle_after_stabilization$1(node);
    node[14] = -1;
    remove_children(node);
    var match = node[5];
    a:
    if(typeof match !== "number")
     switch(match[0]){
       case 6:
        var p = match[1]; caml_call2(Incremental_Expert[14], p, 0); break a;
       case 15:
        var u = match[1];
        caml_call1(Incremental_Unordered_array_fo[7], u);
        break a;
     }
    if(Incremental_Import[1] && caml_call1(Incremental_Node[20], node))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _bs_], 1);
    var _gR_ = caml_call1(Incremental_Node[14], node);
    return _gR_ ? caml_call2(Incremental_Recompute_heap[9], t[5], node) : _gR_;
   }
   function remove_alarm(clock, alarm){
    var _gQ_ = caml_call2(Timing_wheel[28], clock[1], alarm);
    return _gQ_ ? caml_call2(Timing_wheel[29], clock[1], alarm) : _gQ_;
   }
   function invalidate_node(node){
    var _gJ_ = caml_call1(Incremental_Node[16], node);
    if(_gJ_){
     var t = node[2];
     if(caml_call2(Core[91], node[8], 0)) handle_after_stabilization$1(node);
     node[4] = Incremental_Import[6][5];
     if
      (Incremental_Import[1]
       && ! caml_call1(Incremental_Import[6][7], node[20]))
      throw caml_maybe_attach_backtrace([0, Assert_failure, _bu_], 1);
     node[7] = t[3];
     node[3] = t[3];
     t[23] = t[23] + 1 | 0;
     if(caml_call1(Incremental_Node[15], node)){
      remove_children(node);
      node[14] = caml_call1(Incremental_Scope[5], node[12]) + 1 | 0;
     }
     var match = node[5];
     a:
     if(typeof match !== "number")
      switch(match[0]){
        case 1:
         var at = match[1]; remove_alarm(at[4], at[3]); break a;
        case 2:
         var at_intervals = match[1];
         remove_alarm(at_intervals[5], at_intervals[4]);
         break a;
        case 4:
         var bind = match[1];
         invalidate_nodes_created_on_rh(bind[7]);
         break a;
        case 14:
         var match$0 = match[1], alarm = match$0[6], clock = match$0[8];
         remove_alarm(clock, alarm);
         break a;
      }
     caml_call2(Incremental_Node[6], node, 0);
     var _gL_ = node[9] - 1 | 0, _gK_ = 0;
     if(_gL_ >= 0){
      var index = _gK_;
      for(;;){
       var _gO_ = caml_call2(Incremental_Node[9], node, index);
       caml_call2(Core_Stack[25], t[7], _gO_);
       var _gP_ = index + 1 | 0;
       if(_gL_ === index) break;
       var index = _gP_;
      }
     }
     if(Incremental_Import[1] && caml_call1(Incremental_Node[20], node))
      throw caml_maybe_attach_backtrace([0, Assert_failure, _bt_], 1);
     var _gM_ = caml_call1(Incremental_Node[14], node);
     if(_gM_) return caml_call2(Incremental_Recompute_heap[9], t[5], node);
     var _gN_ = _gM_;
    }
    else
     var _gN_ = _gJ_;
    return _gN_;
   }
   function invalidate_nodes_created_on_rh(node){
    var r = [0, node];
    for(;;){
     if(! caml_call1(Incremental_Import[6][8], r[1])) return 0;
     var match = caml_call1(Incremental_Import[6][16], r[1]);
     r[1] = match[13];
     match[13] = Incremental_Import[6][5];
     invalidate_node(match);
    }
   }
   function rescope_nodes_created_on_rhs(t, first_node_on_rhs, new_scope){
    var r = [0, first_node_on_rhs];
    for(;;){
     if(! caml_call1(Incremental_Import[6][8], r[1])) return 0;
     var match = caml_call1(Incremental_Import[6][16], r[1]);
     r[1] = match[13];
     match[13] = Incremental_Import[6][5];
     match[12] = new_scope;
     caml_call2(Incremental_Scope[8], new_scope, match);
    }
   }
   function propagate_invalidity$1(t){
    for(;;){
     if(caml_call1(Core_Stack[7], t[7])) return 0;
     var node = caml_call1(Core_Stack[27], t[7]);
     if(caml_call1(Incremental_Node[16], node))
      if(caml_call1(Incremental_Node[17], node))
       invalidate_node(node);
      else{
       if(Incremental_Import[1] && ! caml_call1(Incremental_Node[20], node))
        throw caml_maybe_attach_backtrace([0, Assert_failure, _bw_], 1);
       var kind = node[5];
       a:
       {
        if(typeof kind !== "number" && 6 === kind[0]){
         var expert = kind[1];
         caml_call1(Incremental_Expert[7], expert);
         break a;
        }
        if(Incremental_Import[1]){
         if(typeof kind !== "number")
          switch(kind[0]){case 4:case 9:case 11: break a;}
         throw caml_maybe_attach_backtrace([0, Assert_failure, _bv_], 1);
        }
       }
       if(1 - caml_call1(Incremental_Node[14], node))
        caml_call2(Incremental_Recompute_heap[8], t[5], node);
      }
    }
   }
   function add_parent_without_adjusting_h(child, parent, child_index){
    if(Incremental_Import[1] && ! caml_call1(Incremental_Node[15], parent))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _by_], 1);
    var t = child[2], was_necessary = caml_call1(Incremental_Node[15], child);
    caml_call3(Incremental_Node[10], child, parent, child_index);
    if(1 - caml_call1(Incremental_Node[16], child))
     caml_call2(Core_Stack[25], t[7], parent);
    if(1 - was_necessary) _bx_(child);
    var match = parent[5];
    if(typeof match !== "number" && 6 === match[0]){
     var e = match[1];
     return caml_call2(Incremental_Expert[15], e, child_index);
    }
    return 0;
   }
   function _bx_(node){
    var
     _gD_ = caml_call1(Incremental_Node[16], node),
     _gE_ = _gD_ ? 1 - caml_call1(Incremental_Scope[7], node[12]) : _gD_;
    if(_gE_){
     var
      _gF_ =
        function(x_096){
         function _gI_(param){return _bz_;}
         return caml_call2(Incremental_Node[2], _gI_, x_096);
        };
     caml_call5
      (Core[247], 0, _bA_, cst_Trying_to_make_a_node_nece, node, _gF_);
    }
    var t = node[2];
    t[19] = t[19] + 1 | 0;
    if(caml_call2(Core[91], node[8], 0)) handle_after_stabilization$1(node);
    set_height(node, caml_call1(Incremental_Scope[5], node[12]) + 1 | 0);
    function _gG_(child_index, child){
     add_parent_without_adjusting_h(child, node, child_index);
     if(Incremental_Import[1] && ! caml_call2(Core[88], child[14], 0))
      throw caml_maybe_attach_backtrace([0, Assert_failure, _bB_], 1);
     var _gH_ = caml_call2(Core[88], child[14], node[14]);
     return _gH_ ? set_height(node, child[14] + 1 | 0) : _gH_;
    }
    caml_call2(Incremental_Node[8], node, _gG_);
    if(Incremental_Import[1] && caml_call1(Incremental_Node[14], node))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _bC_], 1);
    if(Incremental_Import[1] && ! caml_call1(Incremental_Node[15], node))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _bD_], 1);
    if(caml_call1(Incremental_Node[19], node))
     caml_call2(Incremental_Recompute_heap[8], t[5], node);
    var match = node[5];
    if(typeof match !== "number" && 6 === match[0]){
     var p = match[1];
     return caml_call2(Incremental_Expert[14], p, 1);
    }
    return;
   }
   function became_necessary(node){
    _bx_(node);
    return propagate_invalidity$1(node[2]);
   }
   function add_parent(child, parent, child_index){
    if(Incremental_Import[1] && ! caml_call1(Incremental_Node[15], parent))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _bF_], 1);
    var t = parent[2];
    add_parent_without_adjusting_h(child, parent, child_index);
    if(caml_call2(Core[88], child[14], parent[14]))
     caml_call4(Incremental_Adjust_heights_hea[9], t[6], t[5], child, parent);
    propagate_invalidity$1(t);
    if(Incremental_Import[1] && ! caml_call1(Incremental_Node[15], parent))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _bE_], 1);
    var _gA_ = 1 - caml_call1(Incremental_Node[14], parent);
    if(_gA_)
     var
      _gB_ = caml_call1(Incremental_Stabilization_num[7], parent[3]),
      _gC_ = _gB_ || caml_call2(Incremental_Node[18], child, parent);
    else
     var _gC_ = _gA_;
    return _gC_
            ? caml_call2(Incremental_Recompute_heap[8], t[5], parent)
            : _gC_;
   }
   function run_with_scope(t, scope, f){
    var saved = t[4];
    t[4] = scope;
    try{var v = caml_call1(f, 0); t[4] = saved; return v;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     t[4] = saved;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function within_scope(t, scope, f){
    if(1 - caml_call1(Incremental_Scope[6], scope))
     caml_call5
      (Core[247], 0, _bG_, cst_attempt_to_run_within_an_i, t, sexp_of_t$2);
    return run_with_scope(t, scope, f);
   }
   function change_child(parent, old_child, new_child, child_index){
    if(caml_call1(Incremental_Import[6][7], old_child))
     return add_parent(new_child, parent, child_index);
    var
     old_child$0 = caml_call1(Incremental_Import[6][16], old_child),
     _gz_ = 1 - (old_child$0 === new_child ? 1 : 0);
    return _gz_
            ? (caml_call3
               (Incremental_Node[11], old_child$0, parent, child_index),
              old_child$0[26] = 1,
              add_parent(new_child, parent, child_index),
              old_child$0[26] = 0,
              check_if_unnecessary(old_child$0))
            : _gz_;
   }
   function add_alarm(clock, at, alarm_value){
    if(Incremental_Import[1]){
     var _gy_ = now$1(clock);
     if(! caml_call2(Incremental_Import[4][18], at, _gy_))
      throw caml_maybe_attach_backtrace([0, Assert_failure, _bH_], 1);
    }
    return caml_call3(Timing_wheel[26], clock[1], at, alarm_value);
   }
   function recompute(node){
    var t = node[2];
    if(Incremental_Import[1]){t[16][1] = [0, node]; t[16][2] = 0;}
    t[24] = t[24] + 1 | 0;
    node[3] = t[3];
    var match = node[5];
    if(typeof match === "number"){
     if(0 === match)
      throw caml_maybe_attach_backtrace([0, Assert_failure, _bI_], 1);
     throw caml_maybe_attach_backtrace([0, Assert_failure, _bJ_], 1);
    }
    switch(match[0]){
      case 0:
       var array_fold = match[1];
       return maybe_change_value
               (node, caml_call1(Incremental_Array_fold[3], array_fold));
      case 1:
       var match$0 = match[1], at = match$0[2], clock = match$0[4];
       if(Incremental_Import[1]){
        var _eQ_ = now$1(clock);
        if(! caml_call2(Incremental_Import[4][18], at, _eQ_))
         throw caml_maybe_attach_backtrace([0, Assert_failure, _bK_], 1);
       }
       return maybe_change_value(node, 0);
      case 2:
       return maybe_change_value(node, 0);
      case 3:
       var
        bind = match[1],
        main = bind[1],
        f = bind[2],
        lhs = bind[3],
        old_rhs = bind[5],
        rhs_scope = bind[6],
        old_all_nodes_created_on_rhs = bind[7];
       bind[7] = Incremental_Import[6][5];
       var
        rhs =
          run_with_scope
           (t,
            rhs_scope,
            function(param){
             return caml_call1(f, caml_call1(Incremental_Node[21], lhs));
            });
       bind[5] = caml_call1(Incremental_Import[6][6], rhs);
       node[7] = t[3];
       change_child(main, old_rhs, rhs, Incremental_Kind[6]);
       if(caml_call1(Incremental_Import[6][8], old_rhs)){
        if(t[2])
         invalidate_nodes_created_on_rh(old_all_nodes_created_on_rhs);
        else
         rescope_nodes_created_on_rhs
          (t, old_all_nodes_created_on_rhs, main[12]);
        propagate_invalidity$1(t);
       }
       if(Incremental_Import[1] && ! caml_call1(Incremental_Node[16], node))
        throw caml_maybe_attach_backtrace([0, Assert_failure, _bL_], 1);
       return maybe_change_value(node, 0);
      case 4:
       var rhs$0 = match[1][5];
       return copy_child(node, caml_call1(Incremental_Import[6][9], rhs$0));
      case 5:
       var a = match[1]; return maybe_change_value(node, a);
      case 6:
       var expert = match[1];
       return 144245463 <= caml_call1(Incremental_Expert[13], expert)
               ? (invalidate_node(node), propagate_invalidity$1(t))
               : maybe_change_value(node, caml_call1(expert[1], 0));
      case 7:
       var
        match$1 = match[1],
        only_freeze_when = match$1[3],
        child = match$1[2],
        value = caml_call1(Incremental_Node[21], child);
       if(caml_call1(only_freeze_when, value)){
        remove_children(node);
        caml_call2(Incremental_Node[6], node, [5, value]);
        if(caml_call1(Incremental_Node[15], node))
         set_height(node, 0);
        else
         became_unnecessary(node);
       }
       return maybe_change_value(node, value);
      case 8:
       var
        if_then_else = match[1],
        test = if_then_else[2],
        main$0 = if_then_else[1],
        current_branch = if_then_else[4],
        else$0 = if_then_else[6],
        then = if_then_else[5],
        desired_branch =
          caml_call1(Incremental_Node[21], test) ? then : else$0;
       if_then_else[4] = caml_call1(Incremental_Import[6][6], desired_branch);
       node[7] = t[3];
       change_child
        (main$0, current_branch, desired_branch, Incremental_Kind[8]);
       return maybe_change_value(node, 0);
      case 9:
       var current_branch$0 = match[1][4];
       return copy_child
               (node, caml_call1(Incremental_Import[6][9], current_branch$0));
      case 10:
       var
        join = match[1],
        lhs$0 = join[2],
        main$1 = join[1],
        old_rhs$0 = join[4],
        rhs$1 = caml_call1(Incremental_Node[21], lhs$0);
       join[4] = caml_call1(Incremental_Import[6][6], rhs$1);
       node[7] = t[3];
       change_child(main$1, old_rhs$0, rhs$1, Incremental_Kind[9]);
       return maybe_change_value(node, 0);
      case 11:
       var rhs$2 = match[1][4];
       return copy_child(node, caml_call1(Incremental_Import[6][9], rhs$2));
      case 12:
       var n1 = match[2], f$0 = match[1];
       return maybe_change_value
               (node, caml_call1(f$0, caml_call1(Incremental_Node[21], n1)));
      case 13:
       var
        match$2 = match[1],
        clock$0 = match$2[5],
        before = match$2[3],
        at$0 = match$2[2];
       if(Incremental_Import[1]){
        var _eR_ = now$1(clock$0);
        if(! caml_call2(Incremental_Import[4][18], at$0, _eR_))
         throw caml_maybe_attach_backtrace([0, Assert_failure, _bM_], 1);
       }
       return maybe_change_value(node, before);
      case 14:
       var
        step_function_node = match[1],
        child$0 = step_function_node[2],
        clock$1 = step_function_node[8];
       if(caml_call1(Incremental_Import[6][8], child$0)){
        var
         child$1 = caml_call1(Incremental_Import[6][9], child$0),
         _eS_ =
           caml_call2
            (Incremental_Stabilization_num[1],
             child$1[7],
             step_function_node[3]);
        if(caml_call2(Core[91], _eS_, 0)){
         step_function_node[3] = child$1[7];
         remove_alarm(clock$1, step_function_node[6]);
         var
          step_function = caml_call1(Incremental_Node[21], child$1),
          _eT_ = caml_call1(Incremental_step_function[3], step_function);
         step_function_node[4] = caml_call1(Incremental_Import[6][6], _eT_);
         step_function_node[5] =
          caml_call1(Incremental_step_function[4], step_function);
         if(caml_call1(Incremental_Node[13], child$1)){
          remove_children(node);
          step_function_node[2] = Incremental_Import[6][5];
          set_height(node, caml_call1(Incremental_Scope[5], node[12]) + 1 | 0);
         }
        }
       }
       var _eU_ = now$1(clock$1);
       caml_call2(Incremental_Step_function_node[3], step_function_node, _eU_);
       var
        step_function_value =
          caml_call1(Incremental_Import[6][9], step_function_node[4]),
        match$3 = caml_call1(Core_Sequence[65], step_function_node[5]);
       if(match$3){
        var at$1 = match$3[1][1];
        step_function_node[6] =
         add_alarm(clock$1, at$1, step_function_node[7]);
       }
       else if(caml_call1(Incremental_Import[6][7], child$0))
        caml_call2(Incremental_Node[6], node, [5, step_function_value]);
       return maybe_change_value(node, step_function_value);
      case 15:
       var u = match[1];
       return maybe_change_value
               (node, caml_call1(Incremental_Unordered_array_fo[5], u));
      case 16:
       var var$0 = match[1]; return maybe_change_value(node, var$0[1]);
      case 17:
       var
        n2 = match[3],
        n1$0 = match[2],
        f$1 = match[1],
        _eV_ = caml_call1(Incremental_Node[21], n2);
       return maybe_change_value
               (node,
                caml_call2(f$1, caml_call1(Incremental_Node[21], n1$0), _eV_));
      case 18:
       var
        n3 = match[4],
        n2$0 = match[3],
        n1$1 = match[2],
        f$2 = match[1],
        _eW_ = caml_call1(Incremental_Node[21], n3),
        _eX_ = caml_call1(Incremental_Node[21], n2$0);
       return maybe_change_value
               (node,
                caml_call3
                 (f$2, caml_call1(Incremental_Node[21], n1$1), _eX_, _eW_));
      case 19:
       var
        n4 = match[5],
        n3$0 = match[4],
        n2$1 = match[3],
        n1$2 = match[2],
        f$3 = match[1],
        _eY_ = caml_call1(Incremental_Node[21], n4),
        _eZ_ = caml_call1(Incremental_Node[21], n3$0),
        _e0_ = caml_call1(Incremental_Node[21], n2$1);
       return maybe_change_value
               (node,
                caml_call4
                 (f$3,
                  caml_call1(Incremental_Node[21], n1$2),
                  _e0_,
                  _eZ_,
                  _eY_));
      case 20:
       var
        n5 = match[6],
        n4$0 = match[5],
        n3$1 = match[4],
        n2$2 = match[3],
        n1$3 = match[2],
        f$4 = match[1],
        _e1_ = caml_call1(Incremental_Node[21], n5),
        _e2_ = caml_call1(Incremental_Node[21], n4$0),
        _e3_ = caml_call1(Incremental_Node[21], n3$1),
        _e4_ = caml_call1(Incremental_Node[21], n2$2);
       return maybe_change_value
               (node,
                caml_call5
                 (f$4,
                  caml_call1(Incremental_Node[21], n1$3),
                  _e4_,
                  _e3_,
                  _e2_,
                  _e1_));
      case 21:
       var
        n6 = match[7],
        n5$0 = match[6],
        n4$1 = match[5],
        n3$2 = match[4],
        n2$3 = match[3],
        n1$4 = match[2],
        f$5 = match[1],
        _e5_ = caml_call1(Incremental_Node[21], n6),
        _e6_ = caml_call1(Incremental_Node[21], n5$0),
        _e7_ = caml_call1(Incremental_Node[21], n4$1),
        _e8_ = caml_call1(Incremental_Node[21], n3$2),
        _e9_ = caml_call1(Incremental_Node[21], n2$3);
       return maybe_change_value
               (node,
                caml_call6
                 (f$5,
                  caml_call1(Incremental_Node[21], n1$4),
                  _e9_,
                  _e8_,
                  _e7_,
                  _e6_,
                  _e5_));
      case 22:
       var
        n7 = match[8],
        n6$0 = match[7],
        n5$1 = match[6],
        n4$2 = match[5],
        n3$3 = match[4],
        n2$4 = match[3],
        n1$5 = match[2],
        f$6 = match[1],
        _e__ = caml_call1(Incremental_Node[21], n7),
        _e$_ = caml_call1(Incremental_Node[21], n6$0),
        _fa_ = caml_call1(Incremental_Node[21], n5$1),
        _fb_ = caml_call1(Incremental_Node[21], n4$2),
        _fc_ = caml_call1(Incremental_Node[21], n3$3),
        _fd_ = caml_call1(Incremental_Node[21], n2$4);
       return maybe_change_value
               (node,
                caml_call7
                 (f$6,
                  caml_call1(Incremental_Node[21], n1$5),
                  _fd_,
                  _fc_,
                  _fb_,
                  _fa_,
                  _e$_,
                  _e__));
      case 23:
       var
        n8 = match[9],
        n7$0 = match[8],
        n6$1 = match[7],
        n5$2 = match[6],
        n4$3 = match[5],
        n3$4 = match[4],
        n2$5 = match[3],
        n1$6 = match[2],
        f$7 = match[1],
        _fe_ = caml_call1(Incremental_Node[21], n8),
        _ff_ = caml_call1(Incremental_Node[21], n7$0),
        _fg_ = caml_call1(Incremental_Node[21], n6$1),
        _fh_ = caml_call1(Incremental_Node[21], n5$2),
        _fi_ = caml_call1(Incremental_Node[21], n4$3),
        _fj_ = caml_call1(Incremental_Node[21], n3$4),
        _fk_ = caml_call1(Incremental_Node[21], n2$5);
       return maybe_change_value
               (node,
                caml_call8
                 (f$7,
                  caml_call1(Incremental_Node[21], n1$6),
                  _fk_,
                  _fj_,
                  _fi_,
                  _fh_,
                  _fg_,
                  _ff_,
                  _fe_));
      case 24:
       var
        n9 = match[10],
        n8$0 = match[9],
        n7$1 = match[8],
        n6$2 = match[7],
        n5$3 = match[6],
        n4$4 = match[5],
        n3$5 = match[4],
        n2$6 = match[3],
        n1$7 = match[2],
        f$8 = match[1],
        _fl_ = caml_call1(Incremental_Node[21], n9),
        _fm_ = caml_call1(Incremental_Node[21], n8$0),
        _fn_ = caml_call1(Incremental_Node[21], n7$1),
        _fo_ = caml_call1(Incremental_Node[21], n6$2),
        _fp_ = caml_call1(Incremental_Node[21], n5$3),
        _fq_ = caml_call1(Incremental_Node[21], n4$4),
        _fr_ = caml_call1(Incremental_Node[21], n3$5),
        _fs_ = caml_call1(Incremental_Node[21], n2$6);
       return maybe_change_value
               (node,
                caml_call9
                 (f$8,
                  caml_call1(Incremental_Node[21], n1$7),
                  _fs_,
                  _fr_,
                  _fq_,
                  _fp_,
                  _fo_,
                  _fn_,
                  _fm_,
                  _fl_));
      case 25:
       var
        n10 = match[11],
        n9$0 = match[10],
        n8$1 = match[9],
        n7$2 = match[8],
        n6$3 = match[7],
        n5$4 = match[6],
        n4$5 = match[5],
        n3$6 = match[4],
        n2$7 = match[3],
        n1$8 = match[2],
        f$9 = match[1],
        _ft_ = caml_call1(Incremental_Node[21], n10),
        _fu_ = caml_call1(Incremental_Node[21], n9$0),
        _fv_ = caml_call1(Incremental_Node[21], n8$1),
        _fw_ = caml_call1(Incremental_Node[21], n7$2),
        _fx_ = caml_call1(Incremental_Node[21], n6$3),
        _fy_ = caml_call1(Incremental_Node[21], n5$4),
        _fz_ = caml_call1(Incremental_Node[21], n4$5),
        _fA_ = caml_call1(Incremental_Node[21], n3$6),
        _fB_ = caml_call1(Incremental_Node[21], n2$7);
       return maybe_change_value
               (node,
                caml_call10
                 (f$9,
                  caml_call1(Incremental_Node[21], n1$8),
                  _fB_,
                  _fA_,
                  _fz_,
                  _fy_,
                  _fx_,
                  _fw_,
                  _fv_,
                  _fu_,
                  _ft_));
      case 26:
       var
        n11 = match[12],
        n10$0 = match[11],
        n9$1 = match[10],
        n8$2 = match[9],
        n7$3 = match[8],
        n6$4 = match[7],
        n5$5 = match[6],
        n4$6 = match[5],
        n3$7 = match[4],
        n2$8 = match[3],
        n1$9 = match[2],
        f$10 = match[1],
        _fC_ = caml_call1(Incremental_Node[21], n11),
        _fD_ = caml_call1(Incremental_Node[21], n10$0),
        _fE_ = caml_call1(Incremental_Node[21], n9$1),
        _fF_ = caml_call1(Incremental_Node[21], n8$2),
        _fG_ = caml_call1(Incremental_Node[21], n7$3),
        _fH_ = caml_call1(Incremental_Node[21], n6$4),
        _fI_ = caml_call1(Incremental_Node[21], n5$5),
        _fJ_ = caml_call1(Incremental_Node[21], n4$6),
        _fK_ = caml_call1(Incremental_Node[21], n3$7),
        _fL_ = caml_call1(Incremental_Node[21], n2$8);
       return maybe_change_value
               (node,
                caml_call11
                 (f$10,
                  caml_call1(Incremental_Node[21], n1$9),
                  _fL_,
                  _fK_,
                  _fJ_,
                  _fI_,
                  _fH_,
                  _fG_,
                  _fF_,
                  _fE_,
                  _fD_,
                  _fC_));
      case 27:
       var
        n12 = match[13],
        n11$0 = match[12],
        n10$1 = match[11],
        n9$2 = match[10],
        n8$3 = match[9],
        n7$4 = match[8],
        n6$5 = match[7],
        n5$6 = match[6],
        n4$7 = match[5],
        n3$8 = match[4],
        n2$9 = match[3],
        n1$10 = match[2],
        f$11 = match[1],
        _fM_ = caml_call1(Incremental_Node[21], n12),
        _fN_ = caml_call1(Incremental_Node[21], n11$0),
        _fO_ = caml_call1(Incremental_Node[21], n10$1),
        _fP_ = caml_call1(Incremental_Node[21], n9$2),
        _fQ_ = caml_call1(Incremental_Node[21], n8$3),
        _fR_ = caml_call1(Incremental_Node[21], n7$4),
        _fS_ = caml_call1(Incremental_Node[21], n6$5),
        _fT_ = caml_call1(Incremental_Node[21], n5$6),
        _fU_ = caml_call1(Incremental_Node[21], n4$7),
        _fV_ = caml_call1(Incremental_Node[21], n3$8),
        _fW_ = caml_call1(Incremental_Node[21], n2$9);
       return maybe_change_value
               (node,
                caml_call12
                 (f$11,
                  caml_call1(Incremental_Node[21], n1$10),
                  _fW_,
                  _fV_,
                  _fU_,
                  _fT_,
                  _fS_,
                  _fR_,
                  _fQ_,
                  _fP_,
                  _fO_,
                  _fN_,
                  _fM_));
      case 28:
       var
        n13 = match[14],
        n12$0 = match[13],
        n11$1 = match[12],
        n10$2 = match[11],
        n9$3 = match[10],
        n8$4 = match[9],
        n7$5 = match[8],
        n6$6 = match[7],
        n5$7 = match[6],
        n4$8 = match[5],
        n3$9 = match[4],
        n2$10 = match[3],
        n1$11 = match[2],
        f$12 = match[1],
        _fX_ = caml_call1(Incremental_Node[21], n13),
        _fY_ = caml_call1(Incremental_Node[21], n12$0),
        _fZ_ = caml_call1(Incremental_Node[21], n11$1),
        _f0_ = caml_call1(Incremental_Node[21], n10$2),
        _f1_ = caml_call1(Incremental_Node[21], n9$3),
        _f2_ = caml_call1(Incremental_Node[21], n8$4),
        _f3_ = caml_call1(Incremental_Node[21], n7$5),
        _f4_ = caml_call1(Incremental_Node[21], n6$6),
        _f5_ = caml_call1(Incremental_Node[21], n5$7),
        _f6_ = caml_call1(Incremental_Node[21], n4$8),
        _f7_ = caml_call1(Incremental_Node[21], n3$9),
        _f8_ = caml_call1(Incremental_Node[21], n2$10);
       return maybe_change_value
               (node,
                caml_call13
                 (f$12,
                  caml_call1(Incremental_Node[21], n1$11),
                  _f8_,
                  _f7_,
                  _f6_,
                  _f5_,
                  _f4_,
                  _f3_,
                  _f2_,
                  _f1_,
                  _f0_,
                  _fZ_,
                  _fY_,
                  _fX_));
      case 29:
       var
        n14 = match[15],
        n13$0 = match[14],
        n12$1 = match[13],
        n11$2 = match[12],
        n10$3 = match[11],
        n9$4 = match[10],
        n8$5 = match[9],
        n7$6 = match[8],
        n6$7 = match[7],
        n5$8 = match[6],
        n4$9 = match[5],
        n3$10 = match[4],
        n2$11 = match[3],
        n1$12 = match[2],
        f$13 = match[1],
        _f9_ = caml_call1(Incremental_Node[21], n14),
        _f__ = caml_call1(Incremental_Node[21], n13$0),
        _f$_ = caml_call1(Incremental_Node[21], n12$1),
        _ga_ = caml_call1(Incremental_Node[21], n11$2),
        _gb_ = caml_call1(Incremental_Node[21], n10$3),
        _gc_ = caml_call1(Incremental_Node[21], n9$4),
        _gd_ = caml_call1(Incremental_Node[21], n8$5),
        _ge_ = caml_call1(Incremental_Node[21], n7$6),
        _gf_ = caml_call1(Incremental_Node[21], n6$7),
        _gg_ = caml_call1(Incremental_Node[21], n5$8),
        _gh_ = caml_call1(Incremental_Node[21], n4$9),
        _gi_ = caml_call1(Incremental_Node[21], n3$10),
        _gj_ = caml_call1(Incremental_Node[21], n2$11);
       return maybe_change_value
               (node,
                caml_call14
                 (f$13,
                  caml_call1(Incremental_Node[21], n1$12),
                  _gj_,
                  _gi_,
                  _gh_,
                  _gg_,
                  _gf_,
                  _ge_,
                  _gd_,
                  _gc_,
                  _gb_,
                  _ga_,
                  _f$_,
                  _f__,
                  _f9_));
      default:
       var
        n15 = match[16],
        n14$0 = match[15],
        n13$1 = match[14],
        n12$2 = match[13],
        n11$3 = match[12],
        n10$4 = match[11],
        n9$5 = match[10],
        n8$6 = match[9],
        n7$7 = match[8],
        n6$8 = match[7],
        n5$9 = match[6],
        n4$10 = match[5],
        n3$11 = match[4],
        n2$12 = match[3],
        n1$13 = match[2],
        f$14 = match[1],
        _gk_ = caml_call1(Incremental_Node[21], n15),
        _gl_ = caml_call1(Incremental_Node[21], n14$0),
        _gm_ = caml_call1(Incremental_Node[21], n13$1),
        _gn_ = caml_call1(Incremental_Node[21], n12$2),
        _go_ = caml_call1(Incremental_Node[21], n11$3),
        _gp_ = caml_call1(Incremental_Node[21], n10$4),
        _gq_ = caml_call1(Incremental_Node[21], n9$5),
        _gr_ = caml_call1(Incremental_Node[21], n8$6),
        _gs_ = caml_call1(Incremental_Node[21], n7$7),
        _gt_ = caml_call1(Incremental_Node[21], n6$8),
        _gu_ = caml_call1(Incremental_Node[21], n5$9),
        _gv_ = caml_call1(Incremental_Node[21], n4$10),
        _gw_ = caml_call1(Incremental_Node[21], n3$11),
        _gx_ = caml_call1(Incremental_Node[21], n2$12);
       return maybe_change_value
               (node,
                caml_call15
                 (f$14,
                  caml_call1(Incremental_Node[21], n1$13),
                  _gx_,
                  _gw_,
                  _gv_,
                  _gu_,
                  _gt_,
                  _gs_,
                  _gr_,
                  _gq_,
                  _gp_,
                  _go_,
                  _gn_,
                  _gm_,
                  _gl_,
                  _gk_));
    }
   }
   function copy_child(parent, child){
    return caml_call1(Incremental_Node[16], child)
            ? maybe_change_value
              (parent, caml_call1(Incremental_Node[21], child))
            : (invalidate_node(parent), propagate_invalidity$1(parent[2]));
   }
   function maybe_change_value(node, new_value){
    var
     t = node[2],
     old_value_opt = node[4],
     _ez_ = caml_call1(Incremental_Import[6][7], old_value_opt);
    if(_ez_)
     var _eA_ = _ez_;
    else
     var
      _eP_ = caml_call1(Incremental_Import[6][16], old_value_opt),
      _eA_ = 1 - caml_call3(Incremental_Cutoff[11], node[6], _eP_, new_value);
    if(_eA_){
     node[4] = caml_call1(Incremental_Import[6][6], new_value);
     node[7] = t[3];
     t[21] = t[21] + 1 | 0;
     if(caml_call2(Core[91], node[8], 0)){
      node[20] = old_value_opt;
      handle_after_stabilization$1(node);
     }
     if(caml_call2(Core[88], node[9], 1)){
      var _eC_ = node[9] - 1 | 0, _eB_ = 1;
      if(_eC_ >= 1){
       var parent_index = _eB_;
       for(;;){
        var
         _eM_ =
           caml_call2
            (Incremental_Import[7][20], node[10], parent_index - 1 | 0),
         parent$0 = caml_call1(Incremental_Import[6][9], _eM_),
         match$1 = parent$0[5];
        a:
        if(typeof match$1 !== "number")
         switch(match$1[0]){
           case 6:
            var
             expert = match$1[1],
             child_index$0 =
               caml_check_bound(node[25], parent_index)[1 + parent_index];
            caml_call2(Incremental_Expert[15], expert, child_index$0);
            break a;
           case 15:
            var
             u$0 = match$1[1],
             _eO_ = caml_check_bound(node[25], parent_index)[1 + parent_index];
            caml_call5
             (Incremental_Unordered_array_fo[6],
              u$0,
              node,
              _eO_,
              old_value_opt,
              new_value);
            break a;
         }
        if
         (Incremental_Import[1]
          && ! caml_call1(Incremental_Node[20], parent$0))
         throw caml_maybe_attach_backtrace([0, Assert_failure, _bU_], 1);
        if(1 - caml_call1(Incremental_Node[14], parent$0))
         caml_call2(Incremental_Recompute_heap[8], t[5], parent$0);
        var _eN_ = parent_index + 1 | 0;
        if(_eC_ === parent_index) break;
        var parent_index = _eN_;
       }
      }
      var
       parent = caml_call1(Incremental_Import[6][9], node[11]),
       match = parent[5];
      a:
      if(typeof match !== "number")
       switch(match[0]){
         case 6:
          var p = match[1], child_index = caml_check_bound(node[25], 0)[1];
          caml_call2(Incremental_Expert[15], p, child_index);
          break a;
         case 15:
          var u = match[1], _eL_ = caml_check_bound(node[25], 0)[1];
          caml_call5
           (Incremental_Unordered_array_fo[6],
            u,
            node,
            _eL_,
            old_value_opt,
            new_value);
          break a;
       }
      if(Incremental_Import[1] && ! caml_call1(Incremental_Node[20], parent))
       throw caml_maybe_attach_backtrace([0, Assert_failure, _bT_], 1);
      a:
      if(1 - caml_call1(Incremental_Node[14], parent)){
       var match$0 = parent[5];
       b:
       {
        if(typeof match$0 !== "number"){
         switch(match$0[0]){
           case 1:
            throw caml_maybe_attach_backtrace([0, Assert_failure, _bR_], 1);
           case 2:
            throw caml_maybe_attach_backtrace([0, Assert_failure, _bS_], 1);
           case 3:
            var
             _eF_ = caml_call1(Incremental_Scope[5], parent[12]),
             can_recompute_now = caml_call2(Core[91], node[14], _eF_);
            break;
           case 4:
            var
             b = match$0[1],
             can_recompute_now = caml_call2(Core[91], node[14], b[4][14]);
            break;
           case 7:
            var
             _eG_ = caml_call1(Incremental_Scope[5], parent[12]),
             can_recompute_now = caml_call2(Core[91], node[14], _eG_);
            break;
           case 8:
            var
             _eH_ = caml_call1(Incremental_Scope[5], parent[12]),
             can_recompute_now = caml_call2(Core[91], node[14], _eH_);
            break;
           case 9:
            var
             i = match$0[1],
             can_recompute_now = caml_call2(Core[91], node[14], i[3][14]);
            break;
           case 10:
            var
             _eI_ = caml_call1(Incremental_Scope[5], parent[12]),
             can_recompute_now = caml_call2(Core[91], node[14], _eI_);
            break;
           case 11:
            var
             j = match$0[1],
             can_recompute_now = caml_call2(Core[91], node[14], j[3][14]);
            break;
           case 12:
            var
             _eJ_ = caml_call1(Incremental_Scope[5], parent[12]),
             can_recompute_now = caml_call2(Core[91], node[14], _eJ_);
            break;
           case 14:
            var
             _eK_ = caml_call1(Incremental_Scope[5], parent[12]),
             can_recompute_now = caml_call2(Core[91], node[14], _eK_);
            break;
           case 5:
           case 13:
           case 16:
            break b;
           default: var can_recompute_now = 0;
         }
         if(can_recompute_now){
          t[25] = t[25] + 1 | 0;
          recompute(parent);
         }
         else{
          var _eE_ = caml_call1(Incremental_Recompute_heap[7], t[5]);
          if(caml_call2(Core[89], parent[14], _eE_)){t[26] = t[26] + 1 | 0; recompute(parent);
          }
          else{
           if
            (Incremental_Import[1]
             && ! caml_call1(Incremental_Node[20], parent))
            throw caml_maybe_attach_backtrace([0, Assert_failure, _bQ_], 1);
           if
            (Incremental_Import[1] && caml_call1(Incremental_Node[14], parent))
            throw caml_maybe_attach_backtrace([0, Assert_failure, _bP_], 1);
           caml_call2(Incremental_Recompute_heap[8], t[5], parent);
          }
         }
         break a;
        }
        if(1 === match$0)
         throw caml_maybe_attach_backtrace([0, Assert_failure, _bO_], 1);
       }
       throw caml_maybe_attach_backtrace([0, Assert_failure, _bN_], 1);
      }
     }
    }
    var _eD_ = Incremental_Import[1];
    return _eD_ ? invariant$2(t) : _eD_;
   }
   function recompute_first_node_that_is_n(r){
    var
     node = caml_call1(Incremental_Recompute_heap[10], r),
     _ev_ = Incremental_Import[1],
     _ew_ = _ev_ ? 1 - caml_call1(Incremental_Node[20], node) : _ev_;
    if(_ew_){
     var
      _ex_ =
        function(x_097){
         function _ey_(param){return _bV_;}
         return caml_call2(Incremental_Node[2], _ey_, x_097);
        };
     caml_call5
      (Core[247], 0, _bW_, cst_node_unexpectedly_does_not, node, _ex_);
    }
    return recompute(node);
   }
   function unlink_disallowed_observers(t){
    for(;;){
     var _et_ = caml_call1(Core_Stack[6], t[12]);
     if(! caml_call2(Core[91], _et_, 0)) return 0;
     var internal_observer = caml_call1(Core_Stack[27], t[12]);
     if(Incremental_Import[1]){
      var _eu_ = 2 === internal_observer[1] ? 1 : 0;
      if(! _eu_)
       throw caml_maybe_attach_backtrace([0, Assert_failure, _bX_], 1);
     }
     internal_observer[1] = 3;
     var all_observers = caml_call1(Incremental_Import[6][9], t[9]);
     if
      (caml_call2
        (Incremental_Internal_observer[3], internal_observer, all_observers))
      t[9] = internal_observer[5];
     caml_call1(Incremental_Internal_observer[8], internal_observer);
     check_if_unnecessary(internal_observer[2]);
    }
   }
   function disallow_future_use(internal_observer){
    var
     t = caml_call1(Incremental_Internal_observer[9], internal_observer),
     _es_ = internal_observer[1];
    return 1 === _es_
            ? (t
               [8]
              = t[8] - 1 | 0,
              internal_observer[1] = 2,
              caml_call2(Core_Stack[25], t[12], internal_observer))
            : _es_
              ? 0
              : (t
                 [8]
                = t[8] - 1 | 0,
                internal_observer[1] = 3,
                internal_observer[3] = 0,
                0);
   }
   function disallow_finalized_observers(t){
    for(;;){
     var _er_ = caml_call1(Thread_safe_queue[4], t[10]);
     if(! caml_call2(Core[91], _er_, 0)) return 0;
     var internal_observer = caml_call1(Thread_safe_queue[6], t[10]);
     if(caml_call1(Core_List[18], internal_observer[3]))
      disallow_future_use(internal_observer);
    }
   }
   function observer_finalizer(t){
    function _eq_(observer){
     var internal_observer = observer[1];
     return caml_call2(Thread_safe_queue[5], t[10], internal_observer);
    }
    return caml_call1(Core[266], _eq_);
   }
   function create_observer(opt, observing){
    if(opt)
     var sth = opt[1], should_finalize = sth;
    else
     var should_finalize = 1;
    var
     t = observing[2],
     internal_observer =
       [0,
        0,
        observing,
        0,
        Incremental_Import[6][5],
        Incremental_Import[6][5],
        Incremental_Import[6][5],
        Incremental_Import[6][5]];
    caml_call2(Core_Stack[25], t[11], internal_observer);
    var observer = [0, internal_observer];
    if(should_finalize){
     var _eo_ = observer_finalizer(t), _ep_ = caml_call1(Core[267], _eo_);
     caml_call2(Core_Gc[15][2], observer, _ep_);
    }
    t[8] = t[8] + 1 | 0;
    return observer;
   }
   function add_new_observers(t){
    for(;;){
     var _ei_ = caml_call1(Core_Stack[6], t[11]);
     if(! caml_call2(Core[91], _ei_, 0)) return 0;
     var
      internal_observer = caml_call1(Core_Stack[27], t[11]),
      _ej_ = internal_observer[1];
     if(_ej_){
      if(3 > _ej_)
       throw caml_maybe_attach_backtrace([0, Assert_failure, _bY_], 1);
     }
     else{
      internal_observer[1] = 1;
      var old_all_observers = t[9];
      if(caml_call1(Incremental_Import[6][8], old_all_observers)){
       internal_observer[5] = old_all_observers;
       var
        _ek_ = caml_call1(Incremental_Import[6][6], internal_observer),
        _el_ = caml_call1(Incremental_Import[6][16], old_all_observers);
       caml_call2(Incremental_Internal_observer[10][4], _el_, _ek_);
      }
      t[9] = caml_call1(Incremental_Import[6][6], internal_observer);
      var
       observing = internal_observer[2],
       was_necessary = caml_call1(Incremental_Node[15], observing),
       _em_ = caml_call1(Core_List[45], internal_observer[3]);
      observing[8] = observing[8] + _em_ | 0;
      var old_observers = observing[21];
      if(caml_call1(Incremental_Import[6][8], old_observers)){
       internal_observer[7] = old_observers;
       var _en_ = caml_call1(Incremental_Import[6][6], internal_observer);
       caml_call1(Incremental_Import[6][16], old_observers)[6] = _en_;
      }
      observing[21] = caml_call1(Incremental_Import[6][6], internal_observer);
      handle_after_stabilization$1(observing);
      if
       (Incremental_Import[1] && ! caml_call1(Incremental_Node[15], observing))
       throw caml_maybe_attach_backtrace([0, Assert_failure, _bZ_], 1);
      if(1 - was_necessary) became_necessary(observing);
     }
    }
   }
   function observer_value_exn(observer){
    var t = caml_call1(Incremental_Observer[7], observer), match = t[1];
    if(typeof match !== "number"){
     var raised_exn = match[1];
     return caml_call2
             (Incremental_Raised_exn[4],
              raised_exn,
              cst_Observer_value_exn_called_$0);
    }
    if(match) return caml_call1(Incremental_Observer[5], observer);
    function _eg_(x_098){
     function _eh_(param){return _b0_;}
     return caml_call2(Incremental_Observer[2], _eh_, x_098);
    }
    return caml_call5
            (Core[247],
             0,
             _b1_,
             cst_Observer_value_exn_called_,
             observer,
             _eg_);
   }
   function observer_value(observer){
    try{var _ef_ = [0, observer_value_exn(observer)]; return _ef_;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     return [1, caml_call2(Core_Error[27], 0, exn)];
    }
   }
   function node_on_update(node, f){
    var
     t = node[2],
     _ee_ = caml_call2(Incremental_On_update_handler[3], f, t[3]);
    caml_call2(Incremental_Node[25], node, _ee_);
    return handle_after_stabilization$1(node);
   }
   function observer_on_update_exn(observer, f){
    var
     t = caml_call1(Incremental_Observer[7], observer),
     _ed_ = caml_call2(Incremental_On_update_handler[3], f, t[3]);
    caml_call2(Incremental_Observer[6], observer, _ed_);
    return handle_after_stabilization$1
            (caml_call1(Incremental_Observer[3], observer));
   }
   function set_var_while_not_stabilizing(var$0, value){
    var t = caml_call1(Incremental_Var[5], var$0);
    t[27] = t[27] + 1 | 0;
    var$0[1] = value;
    var
     _d__ = caml_call2(Incremental_Stabilization_num[1], var$0[3], t[3]),
     _d$_ = caml_call2(Core[92], _d__, 0);
    if(_d$_){
     var$0[3] = t[3];
     var watch = var$0[4];
     if(Incremental_Import[1] && ! caml_call1(Incremental_Node[19], watch))
      throw caml_maybe_attach_backtrace([0, Assert_failure, _b2_], 1);
     var
      _ea_ = caml_call1(Incremental_Node[15], watch),
      _eb_ = _ea_ ? 1 - caml_call1(Incremental_Node[14], watch) : _ea_;
     if(_eb_) return caml_call2(Incremental_Recompute_heap[8], t[5], watch);
     var _ec_ = _eb_;
    }
    else
     var _ec_ = _d$_;
    return _ec_;
   }
   function set_var(var$0, value){
    var t = caml_call1(Incremental_Var[5], var$0), match = t[1];
    if(typeof match !== "number"){
     var raised_exn = match[1];
     return caml_call2
             (Incremental_Raised_exn[4],
              raised_exn,
              cst_cannot_set_var_stabilizati);
    }
    if(match) return set_var_while_not_stabilizing(var$0, value);
    if(caml_call1(Incremental_Import[6][7], var$0[2]))
     caml_call2(Core_Stack[25], t[13], var$0);
    var$0[2] = caml_call1(Incremental_Import[6][6], value);
    return 0;
   }
   function reclaim_space_in_weak_hashtbls(t){
    for(;;){
     var _d9_ = caml_call1(Thread_safe_queue[4], t[17]);
     if(! caml_call2(Core[91], _d9_, 0)) return 0;
     var weak_hashtbl = caml_call1(Thread_safe_queue[6], t[17])[1];
     caml_call1(Weak_hashtbl[12], weak_hashtbl);
    }
   }
   function stabilize_start(t){
    t[1] = 0;
    disallow_finalized_observers(t);
    add_new_observers(t);
    unlink_disallowed_observers(t);
    var _d8_ = Incremental_Import[1];
    return _d8_ ? invariant$2(t) : _d8_;
   }
   function stabilize_end(t){
    if(Incremental_Import[1]){t[16][1] = 0; t[16][2] = 0;}
    t[3] = caml_call1(Incremental_Stabilization_num[9], t[3]);
    for(;;){
     if(caml_call1(Core_Stack[7], t[13])) break;
     var
      match$0 = caml_call1(Core_Stack[27], t[13]),
      value = caml_call1(Incremental_Import[6][9], match$0[2]);
     match$0[2] = Incremental_Import[6][5];
     set_var_while_not_stabilizing(match$0, value);
    }
    for(;;){
     if(caml_call1(Core_Stack[7], t[14])) break;
     var node$0 = caml_call1(Core_Stack[27], t[14]);
     node$0[22] = 0;
     var old_value = node$0[20];
     node$0[20] = Incremental_Import[6][5];
     if(caml_call1(Incremental_Node[16], node$0))
      if(caml_call1(Incremental_Node[15], node$0))
       var
        new_value = caml_call1(Incremental_Import[6][9], node$0[4]),
        _d7_ =
          caml_call1(Incremental_Import[6][7], old_value)
           ? [0, new_value]
           : [1, caml_call1(Incremental_Import[6][16], old_value), new_value],
        node_update$0 = _d7_;
      else
       var node_update$0 = 1;
     else
      var node_update$0 = 0;
     caml_call2(Core_Stack[25], t[15], [0, node$0, node_update$0]);
    }
    t[1] = 1;
    var now = t[3];
    for(;;){
     if(caml_call1(Core_Stack[7], t[15])){
      t[1] = 2;
      return reclaim_space_in_weak_hashtbls(t);
     }
     var
      match = caml_call1(Core_Stack[27], t[15]),
      node_update = match[2],
      node = match[1];
     caml_call3(Incremental_Node[26], node, node_update, now);
    }
   }
   function raise_during_stabilization(t, exn){
    var raised = caml_call1(Incremental_Raised_exn[2], exn);
    t[1] = [0, raised];
    return caml_call1(Incremental_Raised_exn[3], raised);
   }
   function stabilize(t){
    ensure_not_stabilizing(t, cst_stabilize, 0);
    try{
     stabilize_start(t);
     var r = t[5];
     for(;;){
      var _d5_ = caml_call1(Incremental_Recompute_heap[4], r);
      if(! caml_call2(Core[91], _d5_, 0)){
       var _d6_ = stabilize_end(t);
       return _d6_;
      }
      recompute_first_node_that_is_n(r);
     }
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     return raise_during_stabilization(t, exn);
    }
   }
   function sexp_of_t$5(param){return param ? _b3_ : _b4_;}
   var Step_result = [0, sexp_of_t$5];
   function do_one_step_of_stabilize(t){
    try{
     var _d1_ = t[1];
     a:
     if(typeof _d1_ === "number"){
      switch(_d1_){
        case 0:
         var
          r = t[5],
          _d2_ = caml_call1(Incremental_Recompute_heap[4], r),
          _d3_ =
            caml_call2(Core[91], _d2_, 0)
             ? (recompute_first_node_that_is_n(r), 0)
             : (stabilize_end(t), 1),
          _d4_ = _d3_;
         break;
        case 2:
         stabilize_start(t); var _d4_ = 0; break;
        default: break a;
      }
      return _d4_;
     }
     ensure_not_stabilizing(t, cst_step, 0);
     throw caml_maybe_attach_backtrace([0, Assert_failure, _b5_], 1);
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(typeof t[1] === "number") return raise_during_stabilization(t, exn);
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function create_node_in(t, created_in, kind){
    t[22] = t[22] + 1 | 0;
    return caml_call3(Incremental_Node[5], t, created_in, kind);
   }
   function create_node(t, kind){return create_node_in(t, t[4], kind);}
   function create_node_top(t, kind){
    return create_node_in(t, Incremental_Scope[3], kind);
   }
   function create_var(t, opt, value){
    if(opt)
     var sth = opt[1], use_current_scope = sth;
    else
     var use_current_scope = 0;
    var
     scope = use_current_scope ? t[4] : Incremental_Scope[3],
     watch = create_node_in(t, scope, 1),
     var$0 = [0, value, Incremental_Import[6][5], t[3], watch];
    caml_call2(Incremental_Node[6], watch, [16, var$0]);
    return var$0;
   }
   function const$0(t, a){return create_node(t, [5, a]);}
   function map(n, f){return create_node(n[2], [12, f, n]);}
   function map2(n1, n2, f){return create_node(n1[2], [17, f, n1, n2]);}
   function both(n1, n2){
    var _d0_ = n1[5];
    a:
    if(typeof _d0_ !== "number" && 5 === _d0_[0]){
     var a = _d0_[1], match = n2[5];
     if(typeof match !== "number" && 5 === match[0]){
      var b = match[1];
      return const$0(n1[2], [0, a, b]);
     }
     break a;
    }
    return map2(n1, n2, Core_Tuple[1][6]);
   }
   function map3(n1, n2, n3, f){
    return create_node(n1[2], [18, f, n1, n2, n3]);
   }
   function map4(n1, n2, n3, n4, f){
    return create_node(n1[2], [19, f, n1, n2, n3, n4]);
   }
   function map5(n1, n2, n3, n4, n5, f){
    return create_node(n1[2], [20, f, n1, n2, n3, n4, n5]);
   }
   function map6(n1, n2, n3, n4, n5, n6, f){
    return create_node(n1[2], [21, f, n1, n2, n3, n4, n5, n6]);
   }
   function map7(n1, n2, n3, n4, n5, n6, n7, f){
    return create_node(n1[2], [22, f, n1, n2, n3, n4, n5, n6, n7]);
   }
   function map8(n1, n2, n3, n4, n5, n6, n7, n8, f){
    return create_node(n1[2], [23, f, n1, n2, n3, n4, n5, n6, n7, n8]);
   }
   function map9(n1, n2, n3, n4, n5, n6, n7, n8, n9, f){
    return create_node(n1[2], [24, f, n1, n2, n3, n4, n5, n6, n7, n8, n9]);
   }
   function map10(n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, f){
    return create_node
            (n1[2], [25, f, n1, n2, n3, n4, n5, n6, n7, n8, n9, n10]);
   }
   function map11(n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, f){
    return create_node
            (n1[2], [26, f, n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11]);
   }
   function map12(n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, f){
    return create_node
            (n1[2],
             [27, f, n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12]);
   }
   function map13(n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, f){
    return create_node
            (n1[2],
             [28, f, n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13]);
   }
   function map14
   (n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, f){
    return create_node
            (n1[2],
             [29,
              f,
              n1,
              n2,
              n3,
              n4,
              n5,
              n6,
              n7,
              n8,
              n9,
              n10,
              n11,
              n12,
              n13,
              n14]);
   }
   function map15
   (n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, f){
    return create_node
            (n1[2],
             [30,
              f,
              n1,
              n2,
              n3,
              n4,
              n5,
              n6,
              n7,
              n8,
              n9,
              n10,
              n11,
              n12,
              n13,
              n14,
              n15]);
   }
   function preserve_cutoff(input, output){
    function _dX_(param, _dZ_){
     return caml_call2(Incremental_Stabilization_num[3], input[7], output[7]);
    }
    var _dY_ = caml_call1(Incremental_Cutoff[3], _dX_);
    return caml_call2(Incremental_Node[24], output, _dY_);
   }
   function depend_on(input, depend_on){
    var output = map2(input, depend_on, function(a, param){return a;});
    preserve_cutoff(input, output);
    return output;
   }
   function necessary_if_alive(input){
    var
     observer = create_observer(0, input),
     output =
       map(input, function(a){caml_call1(Core_Gc[10], observer); return a;});
    preserve_cutoff(input, output);
    return output;
   }
   function bind(lhs, f){
    var
     t = lhs[2],
     lhs_change = create_node(t, 1),
     main = create_node(t, 1),
     bind =
       [0,
        main,
        f,
        lhs,
        lhs_change,
        Incremental_Import[6][5],
        Incremental_Scope[3],
        Incremental_Import[6][5]];
    caml_call2(Incremental_Node[24], lhs_change, Incremental_Cutoff[7]);
    bind[6] = [0, bind];
    caml_call2(Incremental_Node[6], lhs_change, [3, bind]);
    caml_call2(Incremental_Node[6], main, [4, bind]);
    return main;
   }
   function bind2(n1, n2, f){
    function _dW_(param){
     var v2 = param[2], v1 = param[1];
     return caml_call2(f, v1, v2);
    }
    return bind(map2(n1, n2, function(v1, v2){return [0, v1, v2];}), _dW_);
   }
   function bind3(n1, n2, n3, f){
    function _dV_(param){
     var v3 = param[3], v2 = param[2], v1 = param[1];
     return caml_call3(f, v1, v2, v3);
    }
    return bind
            (map3(n1, n2, n3, function(v1, v2, v3){return [0, v1, v2, v3];}),
             _dV_);
   }
   function bind4(n1, n2, n3, n4, f){
    function _dU_(param){
     var v4 = param[4], v3 = param[3], v2 = param[2], v1 = param[1];
     return caml_call4(f, v1, v2, v3, v4);
    }
    return bind
            (map4
              (n1,
               n2,
               n3,
               n4,
               function(v1, v2, v3, v4){return [0, v1, v2, v3, v4];}),
             _dU_);
   }
   function join(lhs){
    var
     t = lhs[2],
     lhs_change = create_node(t, 1),
     main = create_node(t, 1),
     join = [0, main, lhs, lhs_change, Incremental_Import[6][5]];
    caml_call2(Incremental_Node[24], lhs_change, Incremental_Cutoff[7]);
    caml_call2(Incremental_Node[6], lhs_change, [10, join]);
    caml_call2(Incremental_Node[6], main, [11, join]);
    return main;
   }
   function if$0(test, then, else$0){
    var
     t = test[2],
     test_change = create_node(t, 1),
     main = create_node(t, 1),
     if_then_else =
       [0, main, test, test_change, Incremental_Import[6][5], then, else$0];
    caml_call2(Incremental_Node[24], test_change, Incremental_Cutoff[7]);
    caml_call2(Incremental_Node[6], test_change, [8, if_then_else]);
    caml_call2(Incremental_Node[6], main, [9, if_then_else]);
    return main;
   }
   function lazy_from_fun(t, f){
    var scope = t[4];
    function _dT_(param){return within_scope(t, scope, f);}
    return caml_call1(Core_Lazy[38], _dT_);
   }
   var default_hash_table_initial_siz = 4;
   function memoize_fun_by_key(opt, t, hashable, project_key, f){
    if(opt)
     var sth = opt[1], initial_size = sth;
    else
     var initial_size = default_hash_table_initial_siz;
    var
     scope = t[4],
     table = caml_call3(Core_Hashtbl[4], 0, [0, initial_size], hashable);
    function _dS_(a){
     var
      key = caml_call1(project_key, a),
      match = caml_call2(Core_Hashtbl[56], table, key);
     if(match){var b = match[1]; return b;}
     var
      b$0 = within_scope(t, scope, function(param){return caml_call1(f, a);});
     caml_call3(Core_Hashtbl[39], table, key, b$0);
     return b$0;
    }
    return caml_call1(Core[266], _dS_);
   }
   function array_fold(t, children, init, f){
    return caml_call2(Core[90], children.length - 1, 0)
            ? const$0(t, init)
            : create_node(t, [0, [0, init, f, children]]);
   }
   function all(t, ts){
    function _dR_(ac, a){return [0, a, ac];}
    return array_fold(t, caml_call1(Incremental_Import[5][99], ts), 0, _dR_);
   }
   function unordered_array_fold(t, opt, children, init, f, update){
    if(opt)
     var sth = opt[1], full_compute_every_n_changes = sth;
    else
     var full_compute_every_n_changes = Core_Int[45];
    if(caml_call2(Core[90], children.length - 1, 0)) return const$0(t, init);
    if(caml_call2(Core[89], full_compute_every_n_changes, 0))
     return caml_call5
             (Core[247],
              0,
              _b6_,
              cst_unordered_array_fold_got_n,
              full_compute_every_n_changes,
              Core[389]);
    var
     main = create_node(t, 1),
     _dQ_ =
       [15,
        caml_call6
         (Incremental_Unordered_array_fo[4],
          init,
          f,
          update,
          full_compute_every_n_changes,
          children,
          main)];
    caml_call2(Incremental_Node[6], main, _dQ_);
    return main;
   }
   function opt_unordered_array_fold
   (t, full_compute_every_n_changes, ts, init, f, f_inverse){
    function f$0(param, x){
     var num_invalid = param[2], accum = param[1];
     if(! x) return [0, accum, num_invalid + 1 | 0];
     var x$0 = x[1];
     return [0, caml_call2(f, accum, x$0), num_invalid];
    }
    function f_inverse$0(param, x){
     var num_invalid = param[2], accum = param[1];
     if(! x) return [0, accum, num_invalid - 1 | 0];
     var x$0 = x[1];
     return [0, caml_call2(f_inverse, accum, x$0), num_invalid];
    }
    function _dP_(param){
     var num_invalid = param[2], accum = param[1];
     return caml_call2(Core[90], num_invalid, 0) ? [0, accum] : 0;
    }
    return map
            (unordered_array_fold
              (t,
               full_compute_every_n_changes,
               ts,
               [0, init, 0],
               f$0,
               [0, f_inverse$0]),
             _dP_);
   }
   function at_least_k_of(t, nodes, k){
    function bool_to_int(b){return b ? 1 : 0;}
    function _dN_(i){return caml_call2(Core[88], i, k);}
    var
     _dO_ = [0, function(num_true, b){return num_true - bool_to_int(b) | 0;}];
    return map
            (unordered_array_fold
              (t,
               0,
               nodes,
               0,
               function(num_true, b){return num_true + bool_to_int(b) | 0;},
               _dO_),
             _dN_);
   }
   function exists(t, nodes){return at_least_k_of(t, nodes, 1);}
   function for_all(t, nodes){
    return at_least_k_of(t, nodes, nodes.length - 1);
   }
   function sum(t, full_compute_every_n_changes, nodes, zero, add, sub){
    return unordered_array_fold
            (t, full_compute_every_n_changes, nodes, zero, add, [0, sub]);
   }
   function opt_sum(t, full_compute_every_n_changes, nodes, zero, add, sub){
    return opt_unordered_array_fold
            (t, full_compute_every_n_changes, nodes, zero, add, sub);
   }
   function sum_int(t, nodes){
    function _dI_(_dM_, _dL_){return _dM_ - _dL_ | 0;}
    return sum
            (t,
             0,
             nodes,
             0,
             function(_dK_, _dJ_){return _dK_ + _dJ_ | 0;},
             _dI_);
   }
   function sum_float(t, nodes){
    function _dD_(_dH_, _dG_){return _dH_ - _dG_;}
    return sum
            (t,
             [0, nodes.length - 1],
             nodes,
             0.,
             function(_dF_, _dE_){return _dF_ + _dE_;},
             _dD_);
   }
   function set_freeze(node, child, only_freeze_when){
    if(Incremental_Import[1] && ! caml_call1(Incremental_Scope[4], node[12]))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _b7_], 1);
    var was_necessary = caml_call1(Incremental_Node[15], node);
    caml_call2
     (Incremental_Node[6], node, [7, [0, node, child, only_freeze_when]]);
    return was_necessary
            ? add_parent(child, node, Incremental_Kind[7])
            : became_necessary(node);
   }
   function freeze(child, only_freeze_when){
    var t = child[2], node = create_node_top(t, 1);
    set_freeze(node, child, only_freeze_when);
    return node;
   }
   function at(clock, time){
    var t = caml_call1(Clock[9], clock), _dC_ = now$1(clock);
    if(caml_call2(Incremental_Import[4][16], time, _dC_))
     return const$0(t, 1);
    var
     main = create_node(t, 1),
     at = [0, main, time, Incremental_Alarm[3], clock];
    caml_call2(Incremental_Node[6], main, [1, at]);
    at[3] =
     add_alarm(clock, time, caml_call1(Incremental_Alarm_value[4], [0, at]));
    return main;
   }
   function after(clock, span){
    var _dB_ = now$1(clock);
    return at(clock, caml_call2(Incremental_Import[4][67], _dB_, span));
   }
   function next_interval_alarm_strict(clock, base, interval){
    var
     after = now$1(clock),
     at =
       caml_call5(Incremental_Import[4][81], _b8_, base, after, interval, 0);
    if
     (Incremental_Import[1]
      && ! caml_call2(Incremental_Import[4][18], at, after))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _b9_], 1);
    return at;
   }
   function at_intervals(clock, interval){
    var
     t = caml_call1(Clock[9], clock),
     _dz_ = caml_call1(Timing_wheel[10], clock[1]);
    if(caml_call2(Incremental_Import[4][1][19], interval, _dz_))
     caml_call5
      (Core[247],
       0,
       _b__,
       cst_at_intervals_got_too_small,
       interval,
       Incremental_Import[4][1][10]);
    var
     main = create_node(t, 1),
     base = now$1(clock),
     at_intervals = [0, main, base, interval, Incremental_Alarm[3], clock];
    caml_call2(Incremental_Node[6], main, [2, at_intervals]);
    caml_call2(Incremental_Node[24], main, Incremental_Cutoff[7]);
    var _dA_ = caml_call1(Incremental_Alarm_value[4], [1, at_intervals]);
    at_intervals[4] =
     add_alarm(clock, next_interval_alarm_strict(clock, base, interval), _dA_);
    return main;
   }
   function snapshot(clock, value_at, at, before){
    var t = caml_call1(Clock[9], clock), _dx_ = now$1(clock);
    if(caml_call2(Incremental_Import[4][16], at, _dx_)){
     var _dy_ = now$1(clock);
     return caml_call2(Incremental_Import[4][19], at, _dy_)
             ? caml_call5
               (Core_Or_error[44],
                0,
                0,
                cst_cannot_take_snapshot_in_th,
                at,
                Incremental_Import[4][126])
             : [0, freeze(value_at, caml_call1(Core_Fn[1], 1))];
    }
    var
     main = create_node_top(t, 1),
     snapshot = [0, main, at, before, value_at, clock];
    caml_call2(Incremental_Node[6], main, [13, snapshot]);
    add_alarm
     (clock, at, caml_call1(Incremental_Alarm_value[4], [2, snapshot]));
    return [0, main];
   }
   function incremental_step_function(clock, child){
    var
     t = caml_call1(Clock[9], clock),
     main = create_node(t, 1),
     _dt_ = Incremental_Alarm[3],
     _du_ = Core_Sequence[49],
     _dv_ = Incremental_Import[6][5],
     _dw_ = Incremental_Stabilization_num[5],
     step_function_node =
       [0,
        main,
        caml_call1(Incremental_Import[6][6], child),
        _dw_,
        _dv_,
        _du_,
        _dt_,
        0,
        clock];
    step_function_node[7] =
     caml_call1(Incremental_Alarm_value[4], [3, step_function_node]);
    caml_call2(Incremental_Node[6], main, [14, step_function_node]);
    return main;
   }
   function make_stale(node){
    var t = node[2];
    node[3] = Incremental_Stabilization_num[5];
    var
     _dr_ = caml_call1(Incremental_Node[20], node),
     _ds_ = _dr_ ? 1 - caml_call1(Incremental_Node[14], node) : _dr_;
    return _ds_ ? caml_call2(Incremental_Recompute_heap[8], t[5], node) : _ds_;
   }
   function advance_clock(clock, to){
    var t = caml_call1(Clock[9], clock);
    ensure_not_stabilizing(t, cst_advance_clock, 1);
    if(Incremental_Import[1]) invariant$2(t);
    var
     _dn_ = now$1(clock),
     _do_ = caml_call2(Incremental_Import[4][18], to, _dn_);
    if(_do_){
     set_var_while_not_stabilizing(clock[2], to);
     caml_call3(Timing_wheel[20], clock[1], to, clock[3]);
     caml_call2(Timing_wheel[22], clock[1], clock[3]);
     for(;;){
      if(! caml_call1(Incremental_Import[6][8], clock[4])){
       var _dp_ = Incremental_Import[1];
       if(_dp_) return invariant$2(t);
       var _dq_ = _dp_;
       break;
      }
      var alarm_value = caml_call1(Incremental_Import[6][16], clock[4]);
      clock[4] = alarm_value[2];
      alarm_value[2] = Incremental_Import[6][5];
      var match = alarm_value[1];
      switch(match[0]){
        case 0:
         var main = match[1][1];
         if(caml_call1(Incremental_Node[16], main)){
          caml_call2(Incremental_Node[6], main, _b$_);
          make_stale(main);
         }
         break;
        case 1:
         var
          at_intervals = match[1],
          interval = at_intervals[3],
          base = at_intervals[2],
          main$0 = at_intervals[1];
         if(caml_call1(Incremental_Node[16], main$0)){
          at_intervals[4] =
           add_alarm
            (clock,
             next_interval_alarm_strict(clock, base, interval),
             alarm_value);
          make_stale(main$0);
         }
         break;
        case 2:
         var match$0 = match[1], value_at = match$0[4], main$1 = match$0[1];
         if
          (Incremental_Import[1] && ! caml_call1(Incremental_Node[16], main$1))
          throw caml_maybe_attach_backtrace([0, Assert_failure, _ca_], 1);
         set_freeze(main$1, value_at, function(param){return 1;});
         make_stale(main$1);
         break;
        default:
         var main$2 = match[1][1];
         if(caml_call1(Incremental_Node[16], main$2)) make_stale(main$2);
      }
     }
    }
    else
     var _dq_ = _do_;
    return _dq_;
   }
   function create_clock(t, timing_wheel_config, start){
    var
     timing_wheel = caml_call2(Timing_wheel[9], timing_wheel_config, start),
     clock = [],
     handle_fired = function _dm_(_dl_){return _dm_.fun(_dl_);},
     _dk_ = Incremental_Import[6][5];
    caml_update_dummy
     (clock, [0, timing_wheel, create_var(t, 0, start), handle_fired, _dk_]);
    caml_update_dummy
     (handle_fired,
      function(alarm){
       var alarm_value = caml_call2(Timing_wheel[5][5], clock[1], alarm);
       alarm_value[2] = clock[4];
       clock[4] = caml_call1(Incremental_Import[6][6], alarm_value);
       return 0;
      });
    return clock;
   }
   function create$0(Config, max_height_allowed){
    var
     adjust_heights_heap =
       caml_call1(Incremental_Adjust_heights_hea[3], max_height_allowed),
     recompute_heap =
       caml_call1(Incremental_Recompute_heap[3], max_height_allowed),
     _da_ = caml_call1(Thread_safe_queue[3], 0),
     _db_ = caml_call1(Only_in_debug[8], 0),
     _dc_ = caml_call1(Core_Stack[23], 0),
     _dd_ = caml_call1(Core_Stack[23], 0),
     _de_ = caml_call1(Core_Stack[23], 0),
     _df_ = caml_call1(Core_Stack[23], 0),
     _dg_ = caml_call1(Core_Stack[23], 0),
     _dh_ = caml_call1(Thread_safe_queue[3], 0),
     _di_ = Incremental_Import[6][5],
     _dj_ = caml_call1(Core_Stack[23], 0),
     t =
       [0,
        2,
        Config[1],
        Incremental_Stabilization_num[6],
        Incremental_Scope[3],
        recompute_heap,
        adjust_heights_heap,
        _dj_,
        0,
        _di_,
        _dh_,
        _dg_,
        _df_,
        _de_,
        _dd_,
        _dc_,
        _db_,
        _da_,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0];
    return t;
   }
   function weak_memoize_fun_by_key(opt, t, hashable, project_key, f){
    if(opt)
     var sth = opt[1], initial_size = sth;
    else
     var initial_size = default_hash_table_initial_siz;
    var
     scope = t[4],
     table = caml_call3(Weak_hashtbl[2], 0, [0, initial_size], hashable),
     packed = [0, table];
    function _c__(param){
     return caml_call2(Thread_safe_queue[5], t[17], packed);
    }
    caml_call2(Weak_hashtbl[13], table, _c__);
    function _c$_(a){
     var
      key = caml_call1(project_key, a),
      match = caml_call2(Weak_hashtbl[5], table, key);
     if(match){var b = match[1]; return b;}
     var
      b$0 = within_scope(t, scope, function(param){return caml_call1(f, a);});
     caml_call3(Weak_hashtbl[9], table, key, b$0);
     return b$0;
    }
    return caml_call1(Core[266], _c$_);
   }
   function expert_kind_of_node(node){
    var x_099 = node[5];
    if(typeof x_099 === "number"){
     if(0 === x_099) return Incremental_Import[6][5];
    }
    else if(6 === x_099[0]){
     var e = x_099[1];
     return caml_call1(Incremental_Import[6][6], e);
    }
    var _c6_ = 0;
    function _c7_(param){return _cb_;}
    var
     _c8_ = [0, caml_call2(Incremental_Kind[2], _c7_, x_099), _c6_],
     _c9_ =
       [1,
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_unexpected_kind_for_expert),
         _c8_]];
    return caml_call1(Core[261], _c9_);
   }
   function create$1(state, on_observability_change, f){
    var
     e = caml_call2(Incremental_Expert[5], f, on_observability_change),
     node = create_node(state, [6, e]);
    if(Incremental_Import[1] && caml_call1(Core_Option[62], state[16][1]))
     state[16][2] = [0, node, state[16][2]];
    return node;
   }
   function currently_running_node_exn(state, name){
    var match = state[16][1];
    if(match){var current = match[1]; return current;}
    var
     _c3_ = caml_call2(Core[18], name, cst_during_stabilization),
     _c4_ = caml_call2(Core[18], cst_can_only_call, _c3_),
     _c5_ = caml_call1(Core[558], _c4_);
    return caml_call1(Core[261], _c5_);
   }
   function assert_currently_running_node_(state, node, name){
    var
     current = currently_running_node_exn(state, name),
     _cS_ = 1 - caml_call2(Incremental_Node[30], node, current);
    if(! _cS_) return _cS_;
    var x_101 = current[5], _cT_ = 0, _cU_ = 0;
    function _cV_(param){return _cc_;}
    var
     _cW_ =
       [0,
        [1,
         [0, _cd_, [0, caml_call2(Incremental_Kind[2], _cV_, x_101), _cU_]]],
        _cT_],
     x_100 = node[5],
     _cX_ = 0;
    function _cY_(param){return _ce_;}
    var
     _cZ_ =
       [0,
        [1,
         [0, _cf_, [0, caml_call2(Incremental_Kind[2], _cY_, x_100), _cX_]]],
        _cW_],
     _c0_ = caml_call2(Core[18], name, cst_on_parent_nodes),
     _c1_ = caml_call2(Core[18], cst_can_only_call$0, _c0_),
     _c2_ = [1, [0, caml_call1(Core[558], _c1_), _cZ_]];
    return caml_call1(Core[261], _c2_);
   }
   function assert_currently_running_node_$0(state, node, name){
    var
     current = currently_running_node_exn(state, name),
     _cH_ = 1 - caml_call2(Incremental_Node[31], node, current);
    if(! _cH_) return _cH_;
    var x_103 = current[5], _cI_ = 0, _cJ_ = 0;
    function _cK_(param){return _cg_;}
    var
     _cL_ =
       [0,
        [1,
         [0, _ch_, [0, caml_call2(Incremental_Kind[2], _cK_, x_103), _cJ_]]],
        _cI_],
     x_102 = node[5],
     _cM_ = 0;
    function _cN_(param){return _ci_;}
    var
     _cO_ =
       [0,
        [1,
         [0, _cj_, [0, caml_call2(Incremental_Kind[2], _cN_, x_102), _cM_]]],
        _cL_],
     _cP_ = caml_call2(Core[18], name, cst_on_children_nodes),
     _cQ_ = caml_call2(Core[18], cst_can_only_call$1, _cP_),
     _cR_ = [1, [0, caml_call1(Core[558], _cQ_), _cO_]];
    return caml_call1(Core[261], _cR_);
   }
   function make_stale$0(node){
    var
     state = node[2],
     e_opt = expert_kind_of_node(node),
     _cD_ = caml_call1(Incremental_Import[6][8], e_opt);
    if(_cD_){
     if(Incremental_Import[1])
      assert_currently_running_node_(state, node, cst_make_stale);
     var e = caml_call1(Incremental_Import[6][16], e_opt);
     if(534011858 <= caml_call1(Incremental_Expert[6], e)) return 0;
     var
      _cE_ = caml_call1(Incremental_Node[15], node),
      _cF_ = _cE_ ? 1 - caml_call1(Incremental_Node[14], node) : _cE_;
     if(_cF_)
      return caml_call2(Incremental_Recompute_heap[8], state[5], node);
     var _cG_ = _cF_;
    }
    else
     var _cG_ = _cD_;
    return _cG_;
   }
   function invalidate(node){
    var state = node[2];
    if(Incremental_Import[1])
     assert_currently_running_node_(state, node, cst_invalidate);
    invalidate_node(node);
    return propagate_invalidity$1(state);
   }
   function add_dependency(node, dep){
    var
     state = node[2],
     e_opt = expert_kind_of_node(node),
     _ct_ = caml_call1(Incremental_Import[6][8], e_opt);
    if(_ct_){
     if(Incremental_Import[1]){
      var _cu_ = am_stabilizing(state);
      if(_cu_)
       var
        _cv_ = function(_cC_, _cB_){return _cC_ === _cB_ ? 1 : 0;},
        _cw_ = 1 - caml_call3(Core_List[17], state[16][2], node, _cv_);
      else
       var _cw_ = _cu_;
      if(_cw_)
       assert_currently_running_node_(state, node, cst_add_dependency);
     }
     var
      e = caml_call1(Incremental_Import[6][16], e_opt),
      new_child_index = caml_call2(Incremental_Expert[9], e, dep),
      _cx_ = caml_call1(Incremental_Node[15], node);
     if(_cx_){
      add_parent(dep[1], node, new_child_index);
      if(Incremental_Import[1] && ! caml_call1(Incremental_Node[20], node))
       throw caml_maybe_attach_backtrace([0, Assert_failure, _ck_], 1);
      var _cy_ = 1 - caml_call1(Incremental_Node[14], node);
      if(_cy_)
       return caml_call2(Incremental_Recompute_heap[8], state[5], node);
      var _cz_ = _cy_;
     }
     else
      var _cz_ = _cx_;
     var _cA_ = _cz_;
    }
    else
     var _cA_ = _ct_;
    return _cA_;
   }
   function remove_dependency(node, edge){
    var
     state = node[2],
     e_opt = expert_kind_of_node(node),
     _cm_ = caml_call1(Incremental_Import[6][8], e_opt);
    if(_cm_){
     if(Incremental_Import[1])
      assert_currently_running_node_(state, node, cst_remove_dependency);
     var
      e = caml_call1(Incremental_Import[6][16], e_opt),
      edge_index = caml_call1(Incremental_Import[6][9], edge[3]),
      last_edge = caml_call1(Incremental_Expert[11], e),
      last_edge_index = caml_call1(Incremental_Import[6][9], last_edge[3]);
     if(caml_call2(Core[93], edge_index, last_edge_index)){
      if(caml_call1(Incremental_Node[15], node))
       caml_call5
        (Incremental_Node[12],
         node,
         edge[1],
         edge_index,
         last_edge[1],
         last_edge_index);
      caml_call3(Incremental_Expert[10], e, edge_index, last_edge_index);
      if(Incremental_Import[1]){
       var _cn_ = function(_cs_){return 0;};
       caml_call2(Incremental_Node[4], _cn_, node);
      }
     }
     caml_call1(Incremental_Expert[12], e);
     if(Incremental_Import[1] && ! caml_call1(Incremental_Node[19], node))
      throw caml_maybe_attach_backtrace([0, Assert_failure, _cl_], 1);
     var _co_ = caml_call1(Incremental_Node[15], node);
     if(_co_){
      remove_child(edge[1], node, last_edge_index);
      if(1 - caml_call1(Incremental_Node[14], node))
       caml_call2(Incremental_Recompute_heap[8], state[5], node);
      var _cp_ = 1 - caml_call1(Incremental_Node[16], edge[1]);
      if(_cp_) return caml_call1(Incremental_Expert[8], e);
      var _cq_ = _cp_;
     }
     else
      var _cq_ = _co_;
     var _cr_ = _cq_;
    }
    else
     var _cr_ = _cm_;
    return _cr_;
   }
   var
    Expert =
      [0,
       expert_kind_of_node,
       create$1,
       currently_running_node_exn,
       assert_currently_running_node_,
       assert_currently_running_node_$0,
       make_stale$0,
       invalidate,
       add_dependency,
       remove_dependency];
   caml_call1(Ppx_inline_test_lib[7], cst_incremental);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incremental_State);
   var
    Incremental_State =
      [0,
       sexp_of_status,
       Run_on_update_handlers,
       Only_in_debug,
       Packed_weak_hashtbl,
       num_var_sets,
       set_num_var_sets,
       num_nodes_recomputed_directly_,
       set_num_nodes_recomputed_direc,
       num_nodes_recomputed_directly_$0,
       set_num_nodes_recomputed_direc$0,
       num_nodes_recomputed,
       set_num_nodes_recomputed,
       num_nodes_invalidated,
       set_num_nodes_invalidated,
       num_nodes_created,
       set_num_nodes_created,
       num_nodes_changed,
       set_num_nodes_changed,
       num_nodes_became_unnecessary,
       set_num_nodes_became_unnecessa,
       num_nodes_became_necessary,
       set_num_nodes_became_necessary,
       keep_node_creation_backtrace,
       set_keep_node_creation_backtra,
       weak_hashtbls,
       only_in_debug,
       set_only_in_debug,
       run_on_update_handlers,
       set_during_stabilization,
       disallowed_observers,
       new_observers,
       finalized_observers,
       all_observers,
       set_all_observers,
       num_active_observers,
       set_num_active_observers,
       adjust_heights_heap,
       recompute_heap,
       current_scope,
       set_current_scope,
       stabilization_num,
       set_stabilization_num,
       bind_lhs_change_should_invalid,
       status,
       set_status,
       Fields$0,
       sexp_of_t$2,
       Clock,
       now$1,
       timing_wheel_length,
       num_stabilizes,
       max_height_allowed,
       max_height_seen,
       iter_observers,
       directly_observed,
       iter_observer_descendants,
       Stats,
       stats,
       am_stabilizing,
       invariant$2,
       ensure_not_stabilizing,
       set_height,
       set_max_height_allowed,
       handle_after_stabilization$1,
       remove_children,
       remove_child,
       check_if_unnecessary,
       became_unnecessary,
       remove_alarm,
       invalidate_node,
       invalidate_nodes_created_on_rh,
       rescope_nodes_created_on_rhs,
       propagate_invalidity$1,
       add_parent_without_adjusting_h,
       became_necessary,
       add_parent,
       run_with_scope,
       within_scope,
       change_child,
       add_alarm,
       recompute,
       copy_child,
       maybe_change_value,
       recompute_first_node_that_is_n,
       unlink_disallowed_observers,
       disallow_future_use,
       disallow_finalized_observers,
       observer_finalizer,
       create_observer,
       add_new_observers,
       observer_value_exn,
       observer_value,
       node_on_update,
       observer_on_update_exn,
       set_var_while_not_stabilizing,
       set_var,
       reclaim_space_in_weak_hashtbls,
       stabilize_start,
       stabilize_end,
       raise_during_stabilization,
       stabilize,
       Step_result,
       do_one_step_of_stabilize,
       create_node_in,
       create_node,
       create_node_top,
       create_var,
       const$0,
       map,
       map2,
       both,
       map3,
       map4,
       map5,
       map6,
       map7,
       map8,
       map9,
       map10,
       map11,
       map12,
       map13,
       map14,
       map15,
       preserve_cutoff,
       depend_on,
       necessary_if_alive,
       bind,
       bind2,
       bind3,
       bind4,
       join,
       if$0,
       lazy_from_fun,
       default_hash_table_initial_siz,
       memoize_fun_by_key,
       array_fold,
       all,
       unordered_array_fold,
       opt_unordered_array_fold,
       at_least_k_of,
       exists,
       for_all,
       sum,
       opt_sum,
       sum_int,
       sum_float,
       set_freeze,
       freeze,
       at,
       after,
       next_interval_alarm_strict,
       at_intervals,
       snapshot,
       incremental_step_function,
       make_stale,
       advance_clock,
       create_clock,
       create$0,
       weak_memoize_fun_by_key,
       Expert];
   runtime.caml_register_global
    (246, Incremental_State, cst_Incremental_State$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incremental__Expert1
//# unitInfo: Requires: Incremental__Expert, Incremental__Import, Incremental__Node, Incremental__State, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Incremental_Expert1$0 = "Incremental__Expert1",
    cst_incremental$0 = "incremental";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Incremental_State = global_data.Incremental__State,
    Incremental_Import = global_data.Incremental__Import,
    Incremental_Node = global_data.Incremental__Node,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Incremental_Expert = global_data.Incremental__Expert;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incremental_Expert1$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incremental$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/expert1.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_incremental$0, "expert1.ml");
   var
    sexp_of_t = Incremental_Expert[3],
    cst_Dependency_value = "Dependency.value",
    cst_incremental = cst_incremental$0,
    cst_Incremental_Expert1 = cst_Incremental_Expert1$0;
   function create(opt, child){
    if(opt)
     var sth = opt[1], on_change = sth;
    else
     var on_change = function(_b_){return 0;};
    return [0, child, on_change, Incremental_Import[6][5]];
   }
   function value(t){
    var state = t[1][2];
    if(Incremental_Import[1])
     caml_call3(Incremental_State[161][5], state, t[1], cst_Dependency_value);
    return caml_call1(Incremental_Node[21], t[1]);
   }
   var
    Dependency = [0, sexp_of_t, create, value],
    sexp_of_t$0 = Incremental_Node[2];
   function create$0(state, opt, f){
    if(opt)
     var sth = opt[1], on_observability_change = sth;
    else
     var on_observability_change = function(param){return 0;};
    return caml_call3
            (Incremental_State[161][2], state, on_observability_change, f);
   }
   var make_stale = Incremental_State[161][6];
   function watch(_a_){return _a_;}
   var
    invalidate = Incremental_State[161][7],
    add_dependency = Incremental_State[161][8],
    remove_dependency = Incremental_State[161][9];
   caml_call1(Ppx_inline_test_lib[7], cst_incremental);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incremental_Expert1);
   var
    Incremental_Expert1 =
      [0,
       Dependency,
       [0,
        sexp_of_t$0,
        create$0,
        watch,
        make_stale,
        invalidate,
        add_dependency,
        remove_dependency]];
   runtime.caml_register_global
    (16, Incremental_Expert1, cst_Incremental_Expert1$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incremental__Reduce_balanced
//# unitInfo: Requires: Balanced_reducer, Core, Incremental__Expert1, Incremental__Import, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Incremental_Reduce_balance$0 = "Incremental__Reduce_balanced",
    cst_incremental$0 = "incremental";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Balanced_reducer = global_data.Balanced_reducer,
    Incremental_Import = global_data.Incremental__Import,
    Core = global_data.Core,
    Incremental_Expert1 = global_data.Incremental__Expert1,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incremental_Reduce_balance$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incremental$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/reduce_balanced.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_incremental$0, "reduce_balanced.ml");
   var
    cst_incremental = cst_incremental$0,
    cst_Incremental_Reduce_balance = cst_Incremental_Reduce_balance$0;
   function create(state, children, f, reduce){
    var len = children.length - 1;
    if(caml_call2(Core[90], len, 0)) return 0;
    var reducer = caml_call4(Balanced_reducer[3], 0, 0, len, reduce);
    if(Incremental_Import[1]){
     var _a_ = caml_call1(Core[242], 0);
     caml_call2(Balanced_reducer[2], _a_, reducer);
    }
    function _b_(param){
     var a = caml_call1(Balanced_reducer[6], reducer);
     if(Incremental_Import[1]){
      var _l_ = caml_call1(Core[242], 0);
      caml_call2(Balanced_reducer[2], _l_, reducer);
     }
     return a;
    }
    var
     node = caml_call3(Incremental_Expert1[2][2], state, 0, _b_),
     _d_ = len - 1 | 0,
     _c_ = 0;
    if(_d_ >= 0){
     var i = _c_;
     for(;;){
      var
       _e_ = runtime.caml_check_bound(children, i)[1 + i],
       _f_ =
         [0,
          function(i){
            return function(a){
             var _i_ = caml_call1(f, a);
             caml_call3(Balanced_reducer[4], reducer, i, _i_);
             var _j_ = Incremental_Import[1];
             if(! _j_) return _j_;
             var _k_ = caml_call1(Core[242], 0);
             return caml_call2(Balanced_reducer[2], _k_, reducer);};
           }
           (i)],
       _g_ = caml_call2(Incremental_Expert1[1][2], _f_, _e_);
      caml_call2(Incremental_Expert1[2][6], node, _g_);
      var _h_ = i + 1 | 0;
      if(_d_ === i) break;
      var i = _h_;
     }
    }
    return [0, caml_call1(Incremental_Expert1[2][3], node)];
   }
   caml_call1(Ppx_inline_test_lib[7], cst_incremental);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incremental_Reduce_balance);
   var Incremental_Reduce_balanced = [0, create];
   runtime.caml_register_global
    (15, Incremental_Reduce_balanced, cst_Incremental_Reduce_balance$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incremental__For_analyzer
//# unitInfo: Requires: Core, Core__Int, Core__List, Core__Sexp, Core__String, Core__Time_ns, Incremental__Bind, Incremental__Cutoff, Incremental__Dot_user_info, Incremental__Node, Incremental__Node_id, Incremental__Stabilization_num, Incremental__State, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv_error, Sexplib0__Sexp_conv_record
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Array_fold = "Array_fold",
    cst_At = "At",
    cst_At_intervals = "At_intervals",
    cst_Bind_lhs_change = "Bind_lhs_change",
    cst_Bind_main = "Bind_main",
    cst_Const = "Const",
    cst_Expert = "Expert",
    cst_Freeze = "Freeze",
    cst_If_test_change = "If_test_change",
    cst_If_then_else = "If_then_else",
    cst_Incremental_For_analyzer$0 = "Incremental__For_analyzer",
    cst_Invalid = "Invalid",
    cst_Join_lhs_change = "Join_lhs_change",
    cst_Join_main = "Join_main",
    cst_Map = "Map",
    cst_Map10 = "Map10",
    cst_Map11 = "Map11",
    cst_Map12 = "Map12",
    cst_Map13 = "Map13",
    cst_Map14 = "Map14",
    cst_Map15 = "Map15",
    cst_Map2 = "Map2",
    cst_Map3 = "Map3",
    cst_Map4 = "Map4",
    cst_Map5 = "Map5",
    cst_Map6 = "Map6",
    cst_Map7 = "Map7",
    cst_Map8 = "Map8",
    cst_Map9 = "Map9",
    cst_Snapshot = "Snapshot",
    cst_Step_function = "Step_function",
    cst_Uninitialized = "Uninitialized",
    cst_Unordered_array_fold = "Unordered_array_fold",
    cst_Var = "Var",
    cst_array_fold = "array_fold",
    cst_at$1 = "at",
    cst_at_intervals = "at_intervals",
    cst_base$0 = "base",
    cst_bind_lhs_change = "bind_lhs_change",
    cst_bind_main = "bind_main",
    cst_const = "const",
    cst_expert = "expert",
    cst_freeze = "freeze",
    cst_if_test_change = "if_test_change",
    cst_if_then_else = "if_then_else",
    cst_incremental$0 = "incremental",
    cst_interval$0 = "interval",
    cst_invalid = "invalid",
    cst_join_lhs_change = "join_lhs_change",
    cst_join_main = "join_main",
    cst_map = "map",
    cst_map10 = "map10",
    cst_map11 = "map11",
    cst_map12 = "map12",
    cst_map13 = "map13",
    cst_map14 = "map14",
    cst_map15 = "map15",
    cst_map2 = "map2",
    cst_map3 = "map3",
    cst_map4 = "map4",
    cst_map5 = "map5",
    cst_map6 = "map6",
    cst_map7 = "map7",
    cst_map8 = "map8",
    cst_map9 = "map9",
    cst_snapshot = "snapshot",
    cst_step_function = "step_function",
    cst_uninitialized = "uninitialized",
    cst_unordered_array_fold = "unordered_array_fold",
    cst_var = "var",
    caml_string_compare = runtime.caml_string_compare,
    caml_string_notequal = runtime.caml_string_notequal;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   function caml_call9(f, a0, a1, a2, a3, a4, a5, a6, a7, a8){
    return (f.l >= 0 ? f.l : f.l = f.length) == 9
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7, a8]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    error_source_003 = "src/for_analyzer.ml.Kind.t",
    Core_List = global_data.Core__List,
    Incremental_Node = global_data.Incremental__Node,
    Incremental_Bind = global_data.Incremental__Bind,
    Incremental_Cutoff = global_data.Incremental__Cutoff,
    Incremental_Node_id = global_data.Incremental__Node_id,
    Core_Int = global_data.Core__Int,
    Core = global_data.Core,
    Core_Sexp = global_data.Core__Sexp,
    Core_String = global_data.Core__String,
    Incremental_Dot_user_info = global_data.Incremental__Dot_user_info,
    Core_Time_ns = global_data.Core__Time_ns,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Sexplib0_Sexp_conv_record = global_data.Sexplib0__Sexp_conv_record,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Incremental_Stabilization_num = global_data.Incremental__Stabilization_num,
    Incremental_State = global_data.Incremental__State;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incremental_For_analyzer$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incremental$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/for_analyzer.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_incremental$0, "for_analyzer.ml");
   var
    _L_ = [0, [11, "height=", [4, 0, 0, 0, 0]], "height=%d"],
    _a_ = [0, cst_Array_fold],
    _b_ = [0, cst_Bind_lhs_change],
    _c_ = [0, cst_Bind_main],
    _d_ = [0, cst_Const],
    _e_ = [0, cst_Expert],
    _f_ = [0, cst_Freeze],
    _g_ = [0, cst_If_test_change],
    _h_ = [0, cst_If_then_else],
    _i_ = [0, cst_Invalid],
    _j_ = [0, cst_Join_lhs_change],
    _k_ = [0, cst_Join_main],
    _l_ = [0, cst_Map],
    _m_ = [0, cst_Step_function],
    _n_ = [0, cst_Uninitialized],
    _o_ = [0, cst_Unordered_array_fold],
    _p_ = [0, cst_Var],
    _q_ = [0, cst_Map2],
    _r_ = [0, cst_Map3],
    _s_ = [0, cst_Map4],
    _t_ = [0, cst_Map5],
    _u_ = [0, cst_Map6],
    _v_ = [0, cst_Map7],
    _w_ = [0, cst_Map8],
    _x_ = [0, cst_Map9],
    _y_ = [0, cst_Map10],
    _z_ = [0, cst_Map11],
    _A_ = [0, cst_Map12],
    _B_ = [0, cst_Map13],
    _C_ = [0, cst_Map14],
    _D_ = [0, cst_Map15],
    _E_ = [0, cst_at$1],
    _F_ = [0, cst_At],
    _G_ = [0, cst_interval$0],
    _H_ = [0, cst_base$0],
    _I_ = [0, cst_At_intervals],
    _J_ = [0, cst_at$1],
    _K_ = [0, cst_Snapshot],
    cst_at$0 = cst_at$1,
    cst_interval = cst_interval$0,
    cst_base = cst_base$0,
    cst_at = cst_at$1,
    cst_incremental = cst_incremental$0,
    cst_Incremental_For_analyzer = cst_Incremental_For_analyzer$0;
   function t_of_sexp(sexp_005){
    a:
    {
     if(0 === sexp_005[0]){
      var
       _ab_ = sexp_005[1],
       _ac_ = caml_string_compare(_ab_, cst_array_fold);
      b:
      {
       c:
       {
        d:
        {
         e:
         {
          f:
          {
           g:
           {
            h:
            {
             i:
             {
              j:
              {
               k:
               {
                l:
                {
                 m:
                 {
                  n:
                  {
                   o:
                   {
                    p:
                    {
                     q:
                     {
                      r:
                      {
                       s:
                       {
                        t:
                        {
                         u:
                         {
                          v:
                          {
                           w:
                           {
                            x:
                            {
                             y:
                             {
                              z:
                              {
                               A:
                               {
                                B:
                                {
                                 C:
                                 {
                                  D:
                                  {
                                   E:
                                   {
                                    F:
                                    {
                                     G:
                                     {
                                      if(0 <= _ac_){
                                       if(0 >= _ac_) break i;
                                       var _ad_ = caml_string_compare(_ab_, cst_map13);
                                       if(0 <= _ad_){
                                        if(0 >= _ad_) break y;
                                        var _ae_ = caml_string_compare(_ab_, cst_map7);
                                        if(0 <= _ae_){
                                         if(0 >= _ae_) break G;
                                         if(! caml_string_notequal(_ab_, cst_map8)) break F;
                                         if(! caml_string_notequal(_ab_, cst_map9)) break E;
                                         if(! caml_string_notequal(_ab_, cst_snapshot)) break D;
                                         if(! caml_string_notequal(_ab_, cst_step_function)) break C;
                                         if(! caml_string_notequal(_ab_, cst_uninitialized)) break B;
                                         if(! caml_string_notequal(_ab_, cst_unordered_array_fold))
                                          break A;
                                         if(caml_string_notequal(_ab_, cst_var)) break a;
                                         break z;
                                        }
                                        if(! caml_string_notequal(_ab_, cst_map14)) break x;
                                        if(! caml_string_notequal(_ab_, cst_map15)) break w;
                                        if(! caml_string_notequal(_ab_, cst_map2)) break v;
                                        if(! caml_string_notequal(_ab_, cst_map3)) break u;
                                        if(! caml_string_notequal(_ab_, cst_map4)) break t;
                                        if(! caml_string_notequal(_ab_, cst_map5)) break s;
                                        if(caml_string_notequal(_ab_, cst_map6)) break a;
                                        break r;
                                       }
                                       var _af_ = caml_string_compare(_ab_, cst_if_then_else);
                                       if(0 > _af_){
                                        if(! caml_string_notequal(_ab_, cst_at$1)) break h;
                                        if(! caml_string_notequal(_ab_, cst_at_intervals)) break g;
                                        if(! caml_string_notequal(_ab_, cst_bind_lhs_change))
                                         break f;
                                        if(! caml_string_notequal(_ab_, cst_bind_main)) break e;
                                        if(! caml_string_notequal(_ab_, cst_const)) break d;
                                        if(! caml_string_notequal(_ab_, cst_expert)) break c;
                                        if(! caml_string_notequal(_ab_, cst_freeze)) break b;
                                        if(caml_string_notequal(_ab_, cst_if_test_change)) break a;
                                        break q;
                                       }
                                       if(0 >= _af_) break p;
                                       if(! caml_string_notequal(_ab_, cst_invalid)) break o;
                                       if(! caml_string_notequal(_ab_, cst_join_lhs_change))
                                        break n;
                                       if(! caml_string_notequal(_ab_, cst_join_main)) break m;
                                       if(! caml_string_notequal(_ab_, cst_map)) break l;
                                       if(! caml_string_notequal(_ab_, cst_map10)) break k;
                                       if(! caml_string_notequal(_ab_, cst_map11)) break j;
                                       if(caml_string_notequal(_ab_, cst_map12)) break a;
                                      }
                                      else{
                                       var _ag_ = caml_string_compare(_ab_, cst_Map12);
                                       if(0 > _ag_){
                                        var _ai_ = caml_string_compare(_ab_, cst_If_test_change);
                                        if(0 <= _ai_){
                                         if(0 >= _ai_) break q;
                                         if(! caml_string_notequal(_ab_, cst_If_then_else)) break p;
                                         if(! caml_string_notequal(_ab_, cst_Invalid)) break o;
                                         if(! caml_string_notequal(_ab_, cst_Join_lhs_change))
                                          break n;
                                         if(! caml_string_notequal(_ab_, cst_Join_main)) break m;
                                         if(! caml_string_notequal(_ab_, cst_Map)) break l;
                                         if(! caml_string_notequal(_ab_, cst_Map10)) break k;
                                         if(caml_string_notequal(_ab_, cst_Map11)) break a;
                                         break j;
                                        }
                                        if(! caml_string_notequal(_ab_, cst_Array_fold)) break i;
                                        if(! caml_string_notequal(_ab_, cst_At)) break h;
                                        if(! caml_string_notequal(_ab_, cst_At_intervals)) break g;
                                        if(! caml_string_notequal(_ab_, cst_Bind_lhs_change))
                                         break f;
                                        if(! caml_string_notequal(_ab_, cst_Bind_main)) break e;
                                        if(! caml_string_notequal(_ab_, cst_Const)) break d;
                                        if(! caml_string_notequal(_ab_, cst_Expert)) break c;
                                        if(caml_string_notequal(_ab_, cst_Freeze)) break a;
                                        break b;
                                       }
                                       if(0 < _ag_){
                                        var _ah_ = caml_string_compare(_ab_, cst_Map7);
                                        if(0 <= _ah_){
                                         if(0 >= _ah_) break G;
                                         if(! caml_string_notequal(_ab_, cst_Map8)) break F;
                                         if(! caml_string_notequal(_ab_, cst_Map9)) break E;
                                         if(! caml_string_notequal(_ab_, cst_Snapshot)) break D;
                                         if(! caml_string_notequal(_ab_, cst_Step_function)) break C;
                                         if(! caml_string_notequal(_ab_, cst_Uninitialized)) break B;
                                         if(! caml_string_notequal(_ab_, cst_Unordered_array_fold))
                                          break A;
                                         if(caml_string_notequal(_ab_, cst_Var)) break a;
                                         break z;
                                        }
                                        if(! caml_string_notequal(_ab_, cst_Map13)) break y;
                                        if(! caml_string_notequal(_ab_, cst_Map14)) break x;
                                        if(! caml_string_notequal(_ab_, cst_Map15)) break w;
                                        if(! caml_string_notequal(_ab_, cst_Map2)) break v;
                                        if(! caml_string_notequal(_ab_, cst_Map3)) break u;
                                        if(! caml_string_notequal(_ab_, cst_Map4)) break t;
                                        if(! caml_string_notequal(_ab_, cst_Map5)) break s;
                                        if(caml_string_notequal(_ab_, cst_Map6)) break a;
                                        break r;
                                       }
                                      }
                                      return 26;
                                     }
                                     return 21;
                                    }
                                    return 22;
                                   }
                                   return 23;
                                  }
                                  return caml_call2
                                          (Sexplib0_Sexp_conv_error[9], error_source_003, sexp_005);
                                 }
                                 return 12;
                                }
                                return 13;
                               }
                               return 14;
                              }
                              return 15;
                             }
                             return 27;
                            }
                            return 28;
                           }
                           return 29;
                          }
                          return 16;
                         }
                         return 17;
                        }
                        return 18;
                       }
                       return 19;
                      }
                      return 20;
                     }
                     return 6;
                    }
                    return 7;
                   }
                   return 8;
                  }
                  return 9;
                 }
                 return 10;
                }
                return 11;
               }
               return 24;
              }
              return 25;
             }
             return 0;
            }
            return caml_call2
                    (Sexplib0_Sexp_conv_error[9], error_source_003, sexp_005);
           }
           return caml_call2
                   (Sexplib0_Sexp_conv_error[9], error_source_003, sexp_005);
          }
          return 1;
         }
         return 2;
        }
        return 3;
       }
       return 4;
      }
      return 5;
     }
     var _aj_ = sexp_005[1];
     if(! _aj_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_003, sexp_005);
     var _ak_ = _aj_[1];
     if(0 !== _ak_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_003, sexp_005);
     var _al_ = _ak_[1], _am_ = caml_string_compare(_al_, cst_array_fold);
     b:
     {
      c:
      {
       d:
       {
        e:
        {
         f:
         {
          g:
          {
           h:
           {
            i:
            {
             j:
             {
              k:
              {
               l:
               {
                m:
                {
                 n:
                 {
                  o:
                  {
                   p:
                   {
                    q:
                    {
                     r:
                     {
                      s:
                      {
                       t:
                       {
                        u:
                        {
                         v:
                         {
                          w:
                          {
                           x:
                           {
                            y:
                            {
                             z:
                             {
                              A:
                              {
                               B:
                               {
                                C:
                                {
                                 D:
                                 {
                                  E:
                                  {
                                   F:
                                   {
                                    G:
                                    {
                                     if(0 <= _am_){
                                      if(0 >= _am_) break i;
                                      var _an_ = caml_string_compare(_al_, cst_map13);
                                      if(0 <= _an_){
                                       if(0 >= _an_) break y;
                                       var _ao_ = caml_string_compare(_al_, cst_map7);
                                       if(0 <= _ao_){
                                        if(0 >= _ao_) break G;
                                        if(! caml_string_notequal(_al_, cst_map8)) break F;
                                        if(! caml_string_notequal(_al_, cst_map9)) break E;
                                        if(! caml_string_notequal(_al_, cst_snapshot)) break D;
                                        if(! caml_string_notequal(_al_, cst_step_function)) break C;
                                        if(! caml_string_notequal(_al_, cst_uninitialized)) break B;
                                        if(! caml_string_notequal(_al_, cst_unordered_array_fold))
                                         break A;
                                        if(caml_string_notequal(_al_, cst_var)) break a;
                                        break z;
                                       }
                                       if(! caml_string_notequal(_al_, cst_map14)) break x;
                                       if(! caml_string_notequal(_al_, cst_map15)) break w;
                                       if(! caml_string_notequal(_al_, cst_map2)) break v;
                                       if(! caml_string_notequal(_al_, cst_map3)) break u;
                                       if(! caml_string_notequal(_al_, cst_map4)) break t;
                                       if(! caml_string_notequal(_al_, cst_map5)) break s;
                                       if(caml_string_notequal(_al_, cst_map6)) break a;
                                       break r;
                                      }
                                      var _as_ = caml_string_compare(_al_, cst_if_then_else);
                                      if(0 > _as_){
                                       if(! caml_string_notequal(_al_, cst_at$1)) break h;
                                       if(! caml_string_notequal(_al_, cst_at_intervals)) break g;
                                       if(! caml_string_notequal(_al_, cst_bind_lhs_change))
                                        break f;
                                       if(! caml_string_notequal(_al_, cst_bind_main)) break e;
                                       if(! caml_string_notequal(_al_, cst_const)) break d;
                                       if(! caml_string_notequal(_al_, cst_expert)) break c;
                                       if(! caml_string_notequal(_al_, cst_freeze)) break b;
                                       if(caml_string_notequal(_al_, cst_if_test_change)) break a;
                                       break q;
                                      }
                                      if(0 >= _as_) break p;
                                      if(! caml_string_notequal(_al_, cst_invalid)) break o;
                                      if(! caml_string_notequal(_al_, cst_join_lhs_change))
                                       break n;
                                      if(! caml_string_notequal(_al_, cst_join_main)) break m;
                                      if(! caml_string_notequal(_al_, cst_map)) break l;
                                      if(! caml_string_notequal(_al_, cst_map10)) break k;
                                      if(! caml_string_notequal(_al_, cst_map11)) break j;
                                      if(caml_string_notequal(_al_, cst_map12)) break a;
                                     }
                                     else{
                                      var _az_ = caml_string_compare(_al_, cst_Map12);
                                      if(0 > _az_){
                                       var _aB_ = caml_string_compare(_al_, cst_If_test_change);
                                       if(0 <= _aB_){
                                        if(0 >= _aB_) break q;
                                        if(! caml_string_notequal(_al_, cst_If_then_else)) break p;
                                        if(! caml_string_notequal(_al_, cst_Invalid)) break o;
                                        if(! caml_string_notequal(_al_, cst_Join_lhs_change))
                                         break n;
                                        if(! caml_string_notequal(_al_, cst_Join_main)) break m;
                                        if(! caml_string_notequal(_al_, cst_Map)) break l;
                                        if(! caml_string_notequal(_al_, cst_Map10)) break k;
                                        if(caml_string_notequal(_al_, cst_Map11)) break a;
                                        break j;
                                       }
                                       if(! caml_string_notequal(_al_, cst_Array_fold)) break i;
                                       if(! caml_string_notequal(_al_, cst_At)) break h;
                                       if(! caml_string_notequal(_al_, cst_At_intervals)) break g;
                                       if(! caml_string_notequal(_al_, cst_Bind_lhs_change))
                                        break f;
                                       if(! caml_string_notequal(_al_, cst_Bind_main)) break e;
                                       if(! caml_string_notequal(_al_, cst_Const)) break d;
                                       if(! caml_string_notequal(_al_, cst_Expert)) break c;
                                       if(caml_string_notequal(_al_, cst_Freeze)) break a;
                                       break b;
                                      }
                                      if(0 < _az_){
                                       var _aA_ = caml_string_compare(_al_, cst_Map7);
                                       if(0 <= _aA_){
                                        if(0 >= _aA_) break G;
                                        if(! caml_string_notequal(_al_, cst_Map8)) break F;
                                        if(! caml_string_notequal(_al_, cst_Map9)) break E;
                                        if(! caml_string_notequal(_al_, cst_Snapshot)) break D;
                                        if(! caml_string_notequal(_al_, cst_Step_function)) break C;
                                        if(! caml_string_notequal(_al_, cst_Uninitialized)) break B;
                                        if(! caml_string_notequal(_al_, cst_Unordered_array_fold))
                                         break A;
                                        if(caml_string_notequal(_al_, cst_Var)) break a;
                                        break z;
                                       }
                                       if(! caml_string_notequal(_al_, cst_Map13)) break y;
                                       if(! caml_string_notequal(_al_, cst_Map14)) break x;
                                       if(! caml_string_notequal(_al_, cst_Map15)) break w;
                                       if(! caml_string_notequal(_al_, cst_Map2)) break v;
                                       if(! caml_string_notequal(_al_, cst_Map3)) break u;
                                       if(! caml_string_notequal(_al_, cst_Map4)) break t;
                                       if(! caml_string_notequal(_al_, cst_Map5)) break s;
                                       if(caml_string_notequal(_al_, cst_Map6)) break a;
                                       break r;
                                      }
                                     }
                                     return caml_call2
                                             (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
                                    }
                                    return caml_call2
                                            (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
                                   }
                                   return caml_call2
                                           (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
                                  }
                                  return caml_call2
                                          (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
                                 }
                                 var
                                  sexps_010 = _aj_[2],
                                  _ap_ = function(param){var at = param[1]; return [2, at];},
                                  _aq_ = 0,
                                  _ar_ =
                                    function(param){
                                     return caml_string_notequal(param, cst_at$1) ? -1 : 0;
                                    };
                                 return caml_call7
                                         (Sexplib0_Sexp_conv_record[4],
                                          error_source_003,
                                          sexp_005,
                                          [0, cst_at, 1, Core_Time_ns[25][11], 0],
                                          _ar_,
                                          _aq_,
                                          _ap_,
                                          sexps_010);
                                }
                                return caml_call2
                                        (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
                               }
                               return caml_call2
                                       (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
                              }
                              return caml_call2
                                      (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
                             }
                             return caml_call2
                                     (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
                            }
                            return caml_call2
                                    (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
                           }
                           return caml_call2
                                   (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
                          }
                          return caml_call2
                                  (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
                         }
                         return caml_call2
                                 (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
                        }
                        return caml_call2
                                (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
                       }
                       return caml_call2
                               (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
                      }
                      return caml_call2
                              (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
                     }
                     return caml_call2
                             (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
                    }
                    return caml_call2
                            (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
                   }
                   return caml_call2
                           (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
                  }
                  return caml_call2
                          (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
                 }
                 return caml_call2
                         (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
                }
                return caml_call2
                        (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
               }
               return caml_call2
                       (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
              }
              return caml_call2
                      (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
             }
             return caml_call2
                     (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
            }
            return caml_call2
                    (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
           }
           var
            sexps_006 = _aj_[2],
            _aw_ = function(param){var at = param[1]; return [0, at];},
            _ax_ = 0,
            _ay_ =
              function(param){
               return caml_string_notequal(param, cst_at$1) ? -1 : 0;
              };
           return caml_call7
                   (Sexplib0_Sexp_conv_record[4],
                    error_source_003,
                    sexp_005,
                    [0, cst_at$0, 1, Core_Time_ns[25][11], 0],
                    _ay_,
                    _ax_,
                    _aw_,
                    sexps_006);
          }
          var
           sexps_008 = _aj_[2],
           _at_ =
             function(param){
              var interval = param[2][1], base = param[1];
              return [1, base, interval];
             },
           _au_ = 0,
           _av_ =
             function(param){
              return caml_string_notequal(param, cst_base$0)
                      ? caml_string_notequal(param, cst_interval$0) ? -1 : 1
                      : 0;
             };
          return caml_call7
                  (Sexplib0_Sexp_conv_record[4],
                   error_source_003,
                   sexp_005,
                   [0,
                    cst_base,
                    1,
                    Core_Time_ns[25][11],
                    [0, cst_interval, 1, Core_Time_ns[1][9], 0]],
                   _av_,
                   _au_,
                   _at_,
                   sexps_008);
         }
         return caml_call2
                 (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_003, sexp_005);
   }
   function sexp_of_t(param){
    if(typeof param === "number")
     switch(param){
       case 0:
        return _a_;
       case 1:
        return _b_;
       case 2:
        return _c_;
       case 3:
        return _d_;
       case 4:
        return _e_;
       case 5:
        return _f_;
       case 6:
        return _g_;
       case 7:
        return _h_;
       case 8:
        return _i_;
       case 9:
        return _j_;
       case 10:
        return _k_;
       case 11:
        return _l_;
       case 12:
        return _m_;
       case 13:
        return _n_;
       case 14:
        return _o_;
       case 15:
        return _p_;
       case 16:
        return _q_;
       case 17:
        return _r_;
       case 18:
        return _s_;
       case 19:
        return _t_;
       case 20:
        return _u_;
       case 21:
        return _v_;
       case 22:
        return _w_;
       case 23:
        return _x_;
       case 24:
        return _y_;
       case 25:
        return _z_;
       case 26:
        return _A_;
       case 27:
        return _B_;
       case 28:
        return _C_;
       default: return _D_;
     }
    switch(param[0]){
      case 0:
       var
        at_012 = param[1],
        arg_013 = caml_call1(Core_Time_ns[25][12], at_012),
        bnds_011 = [0, [1, [0, _E_, [0, arg_013, 0]]], 0];
       return [1, [0, _F_, bnds_011]];
      case 1:
       var
        interval_017 = param[2],
        base_015 = param[1],
        arg_018 = caml_call1(Core_Time_ns[1][10], interval_017),
        bnds_014 = [0, [1, [0, _G_, [0, arg_018, 0]]], 0],
        arg_016 = caml_call1(Core_Time_ns[25][12], base_015),
        bnds_014$0 = [0, [1, [0, _H_, [0, arg_016, 0]]], bnds_014];
       return [1, [0, _I_, bnds_014$0]];
      default:
       var
        at_020 = param[1],
        arg_021 = caml_call1(Core_Time_ns[25][12], at_020),
        bnds_019 = [0, [1, [0, _J_, [0, arg_021, 0]]], 0];
       return [1, [0, _K_, bnds_019]];
    }
   }
   function to_string(t){
    var _aa_ = sexp_of_t(t);
    return caml_call1(Core_Sexp[86], _aa_);
   }
   var
    Kind = [0, t_of_sexp, sexp_of_t, to_string],
    sexp_of_dot = Incremental_Dot_user_info[1],
    dot_of_sexp = Incremental_Dot_user_info[2],
    t_of_sexp$0 = Incremental_Dot_user_info[3],
    sexp_of_t$0 = Incremental_Dot_user_info[4],
    dot = Incremental_Dot_user_info[6],
    to_dot = Incremental_Dot_user_info[7],
    append = Incremental_Dot_user_info[8],
    to_string$0 = Incremental_Dot_user_info[9];
   function default$0(name, kind, height){
    var
     ___ = [0, caml_call2(Core[265], _L_, height), 0],
     _$_ = caml_call1(Kind[2], kind),
     label = [0, name, [0, caml_call1(Core_Sexp[86], _$_), ___]];
    return caml_call2
            (Incremental_Dot_user_info[6], label, Core_String[159][5]);
   }
   var
    is_none = Incremental_Stabilization_num[7],
    is_some = Incremental_Stabilization_num[8],
    to_int = Incremental_Stabilization_num[10],
    include = Incremental_Stabilization_num[11],
    t_of_sexp$1 = include[1],
    sexp_of_t$1 = include[2],
    symbol = include[3],
    symbol$0 = include[4],
    symbol$1 = include[5],
    symbol$2 = include[6],
    symbol$3 = include[7],
    symbol$4 = include[8],
    equal = include[9],
    compare = include[10],
    min = include[11],
    max = include[12],
    ascending = include[13],
    descending = include[14],
    between = include[15],
    clamp_exn = include[16],
    clamp = include[17],
    comparator = include[18],
    validate_lbound = include[19],
    validate_ubound = include[20],
    validate_bound = include[21],
    Replace_polymorphic_compare = include[22],
    Map = include[23],
    Set = include[24],
    to_string$1 = include[25];
   function node_id(param){
    var _Z_ = caml_call1(Incremental_Node_id[11], param[1]);
    return caml_call1(Core_Int[78], _Z_);
   }
   var directly_observed = Incremental_State[55];
   function traverse(packed_list, add_node){
    function map_of_iter(iterator, f){
     var out = [0, 0];
     caml_call1
      (iterator,
       function(x){
        var _Y_ = out[1];
        out[1] = [0, caml_call1(f, x), _Y_];
        return 0;
       });
     return caml_call1(Core_List[59], out[1]);
    }
    function _V_(packed_node){
     var
      children =
        map_of_iter
         (function(f){
           function _X_(param, node){return caml_call1(f, node);}
           return caml_call1
                   (caml_call1(Incremental_Node[8], packed_node), _X_);
          },
          node_id),
      bind_children =
        map_of_iter
         (function(f){
           var match = packed_node[5];
           if(typeof match !== "number" && 3 === match[0]){
            var bind = match[1];
            return caml_call2(Incremental_Bind[4], bind, f);
           }
           return 0;
          },
          node_id),
      id = node_id(packed_node),
      _W_ = packed_node[5];
     if(typeof _W_ === "number")
      var kind = 0 === _W_ ? 8 : 13;
     else
      switch(_W_[0]){
        case 0:
         var kind = 0; break;
        case 1:
         var at = _W_[1][2], kind = [0, at]; break;
        case 2:
         var
          match = _W_[1],
          interval = match[3],
          base = match[2],
          kind = [1, base, interval];
         break;
        case 3:
         var kind = 1; break;
        case 4:
         var kind = 2; break;
        case 5:
         var kind = 3; break;
        case 6:
         var kind = 4; break;
        case 7:
         var kind = 5; break;
        case 8:
         var kind = 6; break;
        case 9:
         var kind = 7; break;
        case 10:
         var kind = 9; break;
        case 11:
         var kind = 10; break;
        case 12:
         var kind = 11; break;
        case 13:
         var at$0 = _W_[1][2], kind = [2, at$0]; break;
        case 14:
         var kind = 12; break;
        case 15:
         var kind = 14; break;
        case 16:
         var kind = 15; break;
        case 17:
         var kind = 16; break;
        case 18:
         var kind = 17; break;
        case 19:
         var kind = 18; break;
        case 20:
         var kind = 19; break;
        case 21:
         var kind = 20; break;
        case 22:
         var kind = 21; break;
        case 23:
         var kind = 22; break;
        case 24:
         var kind = 23; break;
        case 25:
         var kind = 24; break;
        case 26:
         var kind = 25; break;
        case 27:
         var kind = 26; break;
        case 28:
         var kind = 27; break;
        case 29:
         var kind = 28; break;
        default: var kind = 29;
      }
     var
      cutoff = caml_call1(Incremental_Cutoff[12][4], packed_node[6]),
      user_info = packed_node[27],
      recomputed_at = packed_node[3],
      changed_at = packed_node[7],
      height = packed_node[14];
     return caml_call9
             (add_node,
              id,
              kind,
              cutoff,
              children,
              bind_children,
              user_info,
              recomputed_at,
              changed_at,
              height);
    }
    return caml_call2(Incremental_Node[1][4], packed_list, _V_);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_incremental);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incremental_For_analyzer);
   var
    _M_ = Core_Int[99],
    _N_ = _M_[2],
    _O_ = _M_[1],
    _P_ = Core_Int[98],
    _Q_ = _P_[2],
    _R_ = _P_[1],
    _S_ = Core_Int[104],
    _T_ = Core_Int[103],
    _U_ = Incremental_Cutoff[12],
    Incremental_For_analyzer =
      [0,
       [0, _U_[1], _U_[2], _U_[3], _U_[5]],
       Kind,
       [0,
        t_of_sexp$0,
        sexp_of_t$0,
        sexp_of_dot,
        dot_of_sexp,
        dot,
        to_dot,
        append,
        to_string$0,
        default$0],
       [0,
        t_of_sexp$1,
        sexp_of_t$1,
        symbol,
        symbol$0,
        symbol$1,
        symbol$2,
        symbol$3,
        symbol$4,
        equal,
        compare,
        min,
        max,
        ascending,
        descending,
        between,
        clamp_exn,
        clamp,
        comparator,
        validate_lbound,
        validate_ubound,
        validate_bound,
        Replace_polymorphic_compare,
        Map,
        Set,
        to_string$1,
        to_int,
        is_some,
        is_none],
       [0,
        Core_Int[76],
        Core_Int[77],
        Core_Int[100],
        Core_Int[101],
        Core_Int[102],
        [0,
         _T_[1],
         _T_[2],
         _T_[3],
         _T_[4],
         _T_[5],
         _T_[6],
         _T_[7],
         _T_[8],
         _T_[9],
         _T_[10],
         _T_[11],
         _T_[12],
         _T_[13],
         _T_[14],
         _T_[15],
         _T_[16],
         _T_[17],
         _T_[18]],
        [0, _S_[1], _S_[2], _S_[3], _S_[4], _S_[5], _S_[6], _S_[7]],
        Core_Int[105],
        Core_Int[81],
        Core_Int[82],
        Core_Int[83],
        Core_Int[84],
        Core_Int[85],
        Core_Int[86],
        Core_Int[87],
        Core_Int[88],
        Core_Int[89],
        Core_Int[90],
        Core_Int[91],
        Core_Int[92],
        Core_Int[93],
        Core_Int[94],
        Core_Int[95],
        Core_Int[97],
        Core_Int[106],
        Core_Int[107],
        Core_Int[108],
        Core_Int[96],
        [0,
         [0, _R_[9], _R_[10], _R_[11]],
         [0, _Q_[9], _Q_[10], _Q_[11], _Q_[12], _Q_[13]],
         _P_[3],
         _P_[4],
         _P_[5],
         _P_[6],
         _P_[7],
         _P_[8],
         _P_[9],
         _P_[10],
         _P_[11],
         _P_[12],
         _P_[13],
         _P_[14],
         _P_[15],
         _P_[16],
         _P_[17],
         _P_[18],
         _P_[19],
         _P_[20],
         _P_[21],
         _P_[22],
         _P_[23],
         _P_[24],
         _P_[25],
         _P_[26],
         _P_[27],
         _P_[28],
         _P_[29],
         _P_[30],
         _P_[31],
         _P_[32],
         _P_[33],
         _P_[34],
         _P_[35],
         _P_[36],
         _P_[37],
         _P_[38],
         _P_[39],
         _P_[40],
         _P_[41],
         _P_[42],
         _P_[43],
         _P_[44],
         _P_[45]],
        [0,
         [0, _O_[1], _O_[2], _O_[11]],
         [0, _N_[9], _N_[10], _N_[11], _N_[12], _N_[13]],
         _M_[3],
         _M_[4],
         _M_[5],
         _M_[6],
         _M_[7],
         _M_[8],
         _M_[9],
         _M_[10],
         _M_[11],
         _M_[12],
         _M_[13],
         _M_[14],
         _M_[15],
         _M_[16],
         _M_[17],
         _M_[18],
         _M_[19],
         _M_[20],
         _M_[21],
         _M_[22],
         _M_[23],
         _M_[24],
         _M_[25],
         _M_[26],
         _M_[27],
         _M_[28]],
        Core_Int[79],
        Core_Int[65],
        Core_Int[64]],
       directly_observed,
       traverse];
   runtime.caml_register_global
    (205, Incremental_For_analyzer, cst_Incremental_For_analyzer$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incremental__For_analyzer_intf
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Incremental_For_analyzer_i = "Incremental__For_analyzer_intf",
    cst_incremental = "incremental";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incremental_For_analyzer_i);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incremental);
   caml_call1(Ppx_expect_runtime[1][1], "src/for_analyzer_intf.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_incremental, "for_analyzer_intf.ml");
   caml_call1(Ppx_inline_test_lib[7], cst_incremental);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incremental_For_analyzer_i);
   var Incremental_For_analyzer_intf = [0];
   runtime.caml_register_global
    (11, Incremental_For_analyzer_intf, cst_Incremental_For_analyzer_i);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incremental__Node_to_dot
//# unitInfo: Requires: Core, Core__Hash_set, Core__List, Incremental__For_analyzer, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Stdio__Out_channel
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst = "  ",
    cst_rankdir_BT = "  rankdir = BT\n",
    cst$0 = " -> ",
    cst_Incremental_Node_to_dot$0 = "Incremental__Node_to_dot",
    cst_digraph_G = "digraph G {\n",
    cst_incremental$0 = "incremental";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdio_Out_channel = global_data.Stdio__Out_channel,
    Core_Hash_set = global_data.Core__Hash_set,
    Core = global_data.Core,
    Core_List = global_data.Core__List,
    Incremental_For_analyzer = global_data.Incremental__For_analyzer,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incremental_Node_to_dot$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incremental$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/node_to_dot.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_incremental$0, "node_to_dot.ml");
   var
    _e_ =
      [0,
       [11, cst, [2, 0, [11, cst$0, [2, 0, [11, " [style=dashed]\n", 0]]]]],
       "  %s -> %s [style=dashed]\n"],
    _d_ =
      [0, [11, cst, [2, 0, [11, cst$0, [2, 0, [12, 10, 0]]]]], "  %s -> %s\n"],
    cst_n$0 = "n",
    cst_n = "n###",
    _b_ = [0, [11, cst_digraph_G, 0], cst_digraph_G],
    _c_ = [0, [11, cst_rankdir_BT, 0], cst_rankdir_BT],
    _f_ = [0, [11, "}\n", [10, 0]], "}\n%!"],
    _a_ = [0, [2, 0, [12, 10, 0]], "%s\n"],
    cst_incremental = cst_incremental$0,
    cst_Incremental_Node_to_dot = cst_Incremental_Node_to_dot$0;
   function save_dot(emit_bind_edges, out, ts){
    var
     node_name =
       Core[628]
        ? function(param){return cst_n;}
        : function
         (id){
          var _t_ = caml_call1(Incremental_For_analyzer[5][31], id);
          return caml_call2(Core[18], cst_n$0, _t_);
         };
    caml_call2(Core[249], out, _b_);
    caml_call2(Core[249], out, _c_);
    var
     seen = caml_call3(Incremental_For_analyzer[5][7][3], 0, 0, 0),
     bind_edges = [0, 0];
    function _h_
    (id, kind, param, children, bind_children, user_info$0, _p_, _o_, height){
     var name = node_name(id);
     caml_call2(Core_Hash_set[22], seen, id);
     var
      default$0 =
        caml_call3(Incremental_For_analyzer[3][9], name, kind, height);
     if(user_info$0)
      var
       user_info = user_info$0[1],
       info = caml_call2(Incremental_For_analyzer[3][7], default$0, user_info);
     else
      var info = default$0;
     var
      _m_ = caml_call1(Incremental_For_analyzer[3][6], info),
      _n_ = caml_call3(Incremental_For_analyzer[3][8], 0, name, _m_);
     caml_call3(Core[249], out, _a_, _n_);
     function _q_(child_id){
      var _s_ = node_name(child_id);
      return caml_call4(Core[249], out, _d_, _s_, name);
     }
     caml_call2(Core_List[19], children, _q_);
     function _r_(bind_child_id){
      bind_edges[1] = [0, [0, bind_child_id, id], bind_edges[1]];
      return 0;
     }
     return caml_call2(Core_List[19], bind_children, _r_);
    }
    caml_call2(Incremental_For_analyzer[7], ts, _h_);
    if(emit_bind_edges){
     var
      _i_ =
        function(param){
         var
          id = param[2],
          bind_child_id = param[1],
          _j_ = caml_call2(Core_Hash_set[20], seen, bind_child_id);
         if(! _j_) return _j_;
         var _k_ = node_name(bind_child_id), _l_ = node_name(id);
         return caml_call4(Core[249], out, _e_, _l_, _k_);
        };
     caml_call2(Core_List[19], bind_edges[1], _i_);
    }
    return caml_call2(Core[249], out, _f_);
   }
   function save_dot_to_file(emit_bind_edges, file, ts){
    function _g_(out){return save_dot(emit_bind_edges, out, ts);}
    return caml_call6(Stdio_Out_channel[6], 0, 0, 0, 0, file, _g_);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_incremental);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incremental_Node_to_dot);
   var Incremental_Node_to_dot = [0, save_dot, save_dot_to_file];
   runtime.caml_register_global
    (24, Incremental_Node_to_dot, cst_Incremental_Node_to_dot$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incremental__Incremental_intf
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Incremental_Incremental_in = "Incremental__Incremental_intf",
    cst_incremental = "incremental";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incremental_Incremental_in);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incremental);
   caml_call1(Ppx_expect_runtime[1][1], "src/incremental_intf.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_incremental, "incremental_intf.ml");
   caml_call1(Ppx_inline_test_lib[7], cst_incremental);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incremental_Incremental_in);
   var Incremental_Incremental_intf = [0];
   runtime.caml_register_global
    (11, Incremental_Incremental_intf, cst_Incremental_Incremental_in);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incremental
//# unitInfo: Requires: Core, Incremental__Before_or_after, Incremental__Config, Incremental__Cutoff, Incremental__Expert1, Incremental__For_analyzer, Incremental__Import, Incremental__Incremental_intf, Incremental__Node, Incremental__Node_to_dot, Incremental__Observer, Incremental__On_update_handler, Incremental__Reduce_balanced, Incremental__Scope, Incremental__State, Incremental__Unordered_array_fold, Incremental__Var, Incremental_step_function, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Stdio__Out_channel, Timing_wheel
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_invalid$1 = "<invalid>",
    cst_Incremental$0 = "Incremental",
    cst_incremental$0 = "incremental",
    cst_src_incremental_ml = "src/incremental.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    level_bits = [0, 14, [0, 13, [0, 5, 0]]],
    Incremental_Before_or_after = global_data.Incremental__Before_or_after,
    Incremental_Cutoff = global_data.Incremental__Cutoff,
    Incremental_On_update_handler = global_data.Incremental__On_update_handler,
    Incremental_Config = global_data.Incremental__Config,
    Stdio_Out_channel = global_data.Stdio__Out_channel,
    Assert_failure = global_data.Assert_failure,
    Incremental_Expert1 = global_data.Incremental__Expert1;
   global_data.Incremental__Unordered_array_fold;
   var
    Core = global_data.Core,
    Incremental_Import = global_data.Incremental__Import,
    Incremental_step_function = global_data.Incremental_step_function,
    Timing_wheel = global_data.Timing_wheel,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Incremental_Reduce_balanced = global_data.Incremental__Reduce_balanced,
    Incremental_Node_to_dot = global_data.Incremental__Node_to_dot,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Incremental_State = global_data.Incremental__State,
    Incremental_Scope = global_data.Incremental__Scope,
    Incremental_Node = global_data.Incremental__Node,
    Incremental_Var = global_data.Incremental__Var,
    Incremental_Observer = global_data.Incremental__Observer,
    Incremental_For_analyzer = global_data.Incremental__For_analyzer;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incremental$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incremental$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_incremental_ml);
   caml_call2(Ppx_inline_test_lib[6], cst_incremental$0, "incremental.ml");
   var
    sexp_of_status = Incremental_State[1],
    Run_on_update_handlers = Incremental_State[2],
    Only_in_debug = Incremental_State[3],
    Packed_weak_hashtbl = Incremental_State[4],
    num_var_sets = Incremental_State[5],
    set_num_var_sets = Incremental_State[6],
    num_nodes_recomputed_directly_ = Incremental_State[7],
    set_num_nodes_recomputed_direc = Incremental_State[8],
    num_nodes_recomputed_directly_$0 = Incremental_State[9],
    set_num_nodes_recomputed_direc$0 = Incremental_State[10],
    num_nodes_recomputed = Incremental_State[11],
    set_num_nodes_recomputed = Incremental_State[12],
    num_nodes_invalidated = Incremental_State[13],
    set_num_nodes_invalidated = Incremental_State[14],
    num_nodes_created = Incremental_State[15],
    set_num_nodes_created = Incremental_State[16],
    num_nodes_changed = Incremental_State[17],
    set_num_nodes_changed = Incremental_State[18],
    num_nodes_became_unnecessary = Incremental_State[19],
    set_num_nodes_became_unnecessa = Incremental_State[20],
    num_nodes_became_necessary = Incremental_State[21],
    set_num_nodes_became_necessary = Incremental_State[22],
    keep_node_creation_backtrace = Incremental_State[23],
    set_keep_node_creation_backtra = Incremental_State[24],
    weak_hashtbls = Incremental_State[25],
    only_in_debug = Incremental_State[26],
    set_only_in_debug = Incremental_State[27],
    run_on_update_handlers = Incremental_State[28],
    set_during_stabilization = Incremental_State[29],
    disallowed_observers = Incremental_State[30],
    new_observers = Incremental_State[31],
    finalized_observers = Incremental_State[32],
    all_observers = Incremental_State[33],
    set_all_observers = Incremental_State[34],
    num_active_observers = Incremental_State[35],
    set_num_active_observers = Incremental_State[36],
    adjust_heights_heap = Incremental_State[37],
    recompute_heap = Incremental_State[38],
    current_scope = Incremental_State[39],
    set_current_scope = Incremental_State[40],
    stabilization_num = Incremental_State[41],
    set_stabilization_num = Incremental_State[42],
    bind_lhs_change_should_invalid = Incremental_State[43],
    status = Incremental_State[44],
    set_status = Incremental_State[45],
    Fields = Incremental_State[46],
    sexp_of_t = Incremental_State[47],
    include = Incremental_State[48],
    now = Incremental_State[49],
    timing_wheel_length = Incremental_State[50],
    num_stabilizes = Incremental_State[51],
    max_height_allowed = Incremental_State[52],
    max_height_seen = Incremental_State[53],
    iter_observers = Incremental_State[54],
    directly_observed = Incremental_State[55],
    iter_observer_descendants = Incremental_State[56],
    Stats = Incremental_State[57],
    stats = Incremental_State[58],
    am_stabilizing = Incremental_State[59],
    invariant = Incremental_State[60],
    ensure_not_stabilizing = Incremental_State[61],
    set_height = Incremental_State[62],
    set_max_height_allowed = Incremental_State[63],
    handle_after_stabilization = Incremental_State[64],
    remove_children = Incremental_State[65],
    remove_child = Incremental_State[66],
    check_if_unnecessary = Incremental_State[67],
    became_unnecessary = Incremental_State[68],
    remove_alarm = Incremental_State[69],
    invalidate_node = Incremental_State[70],
    invalidate_nodes_created_on_rh = Incremental_State[71],
    rescope_nodes_created_on_rhs = Incremental_State[72],
    propagate_invalidity = Incremental_State[73],
    add_parent_without_adjusting_h = Incremental_State[74],
    became_necessary = Incremental_State[75],
    add_parent = Incremental_State[76],
    run_with_scope = Incremental_State[77],
    within_scope = Incremental_State[78],
    change_child = Incremental_State[79],
    add_alarm = Incremental_State[80],
    recompute = Incremental_State[81],
    copy_child = Incremental_State[82],
    maybe_change_value = Incremental_State[83],
    recompute_first_node_that_is_n = Incremental_State[84],
    unlink_disallowed_observers = Incremental_State[85],
    disallow_future_use = Incremental_State[86],
    disallow_finalized_observers = Incremental_State[87],
    observer_finalizer = Incremental_State[88],
    create_observer = Incremental_State[89],
    add_new_observers = Incremental_State[90],
    observer_value_exn = Incremental_State[91],
    observer_value = Incremental_State[92],
    node_on_update = Incremental_State[93],
    observer_on_update_exn = Incremental_State[94],
    set_var_while_not_stabilizing = Incremental_State[95],
    set_var = Incremental_State[96],
    reclaim_space_in_weak_hashtbls = Incremental_State[97],
    stabilize_start = Incremental_State[98],
    stabilize_end = Incremental_State[99],
    raise_during_stabilization = Incremental_State[100],
    stabilize = Incremental_State[101],
    Step_result = Incremental_State[102],
    do_one_step_of_stabilize = Incremental_State[103],
    create_node_in = Incremental_State[104],
    create_node = Incremental_State[105],
    create_node_top = Incremental_State[106],
    create_var = Incremental_State[107],
    const$0 = Incremental_State[108],
    map = Incremental_State[109],
    map2 = Incremental_State[110],
    both = Incremental_State[111],
    map3 = Incremental_State[112],
    map4 = Incremental_State[113],
    map5 = Incremental_State[114],
    map6 = Incremental_State[115],
    map7 = Incremental_State[116],
    map8 = Incremental_State[117],
    map9 = Incremental_State[118],
    map10 = Incremental_State[119],
    map11 = Incremental_State[120],
    map12 = Incremental_State[121],
    map13 = Incremental_State[122],
    map14 = Incremental_State[123],
    map15 = Incremental_State[124],
    preserve_cutoff = Incremental_State[125],
    depend_on = Incremental_State[126],
    necessary_if_alive = Incremental_State[127],
    bind = Incremental_State[128],
    bind2 = Incremental_State[129],
    bind3 = Incremental_State[130],
    bind4 = Incremental_State[131],
    join = Incremental_State[132],
    if$0 = Incremental_State[133],
    lazy_from_fun = Incremental_State[134],
    default_hash_table_initial_siz = Incremental_State[135],
    memoize_fun_by_key = Incremental_State[136],
    array_fold = Incremental_State[137],
    all = Incremental_State[138],
    unordered_array_fold = Incremental_State[139],
    opt_unordered_array_fold = Incremental_State[140],
    at_least_k_of = Incremental_State[141],
    exists = Incremental_State[142],
    for_all = Incremental_State[143],
    sum = Incremental_State[144],
    opt_sum = Incremental_State[145],
    sum_int = Incremental_State[146],
    sum_float = Incremental_State[147],
    set_freeze = Incremental_State[148],
    freeze = Incremental_State[149],
    at = Incremental_State[150],
    after = Incremental_State[151],
    next_interval_alarm_strict = Incremental_State[152],
    at_intervals = Incremental_State[153],
    snapshot = Incremental_State[154],
    incremental_step_function = Incremental_State[155],
    make_stale = Incremental_State[156],
    advance_clock = Incremental_State[157],
    create_clock = Incremental_State[158],
    create_internal = Incremental_State[159],
    weak_memoize_fun_by_key = Incremental_State[160],
    Expert = Incremental_State[161],
    _m_ = [0, cst_src_incremental_ml, 298, 2],
    cst_invalid$0 = cst_invalid$1,
    cst_unnecessary = "<unnecessary>",
    cst_uncomputed = "<uncomputed>",
    _j_ = [0, "Invalid"],
    _k_ = [0, "Necessary_maybe_stale"],
    _l_ = [0, "Unnecessary_maybe_stale"],
    cst_invalid = cst_invalid$1,
    cst_unstabilized = "<unstabilized>",
    cst_disallowed = "<disallowed>",
    _f_ = [0, "_"],
    cst_Incremental_bug_Observer_o =
      "Incremental bug -- Observer.on_update_exn got unexpected update Unnecessary",
    _g_ = [0, cst_src_incremental_ml, 152, 3857, 3875],
    _c_ = [0, "Invalidated"],
    _d_ = [0, "Initialized"],
    _e_ = [0, "Changed"],
    _a_ = [0, cst_src_incremental_ml, 31, 8],
    _h_ = [0, 1],
    cst_incremental = cst_incremental$0,
    cst_Incremental = cst_Incremental$0,
    default_max_height_allowed = 128;
   function create(opt, param){
    if(opt)
     var sth = opt[1], max_height_allowed = sth;
    else
     var max_height_allowed = default_max_height_allowed;
    function sexp_of_state_witness(param){
     throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
    }
    var
     t =
       caml_call2
        (create_internal,
         caml_call1(Incremental_Config[1], 0),
         max_height_allowed);
    return [0, sexp_of_state_witness, t];
   }
   var
    sexp_of_t$0 = Incremental_Scope[1],
    invariant$0 = Incremental_Scope[2],
    top = Incremental_Scope[3],
    is_top = Incremental_Scope[4],
    height = Incremental_Scope[5],
    is_valid = Incremental_Scope[6],
    is_necessary = Incremental_Scope[7],
    add_node = Incremental_Scope[8];
   function current(state, param){return state[4];}
   function within(state, t, f){return caml_call3(within_scope, state, t, f);}
   var
    Packed = Incremental_Node[1],
    invariant$1 = Incremental_Node[4],
    is_const = Incremental_Node[13],
    is_necessary$0 = Incremental_Node[15],
    is_valid$0 = Incremental_Node[16],
    unsafe_value = Incremental_Node[22],
    get_cutoff = Incremental_Node[23],
    set_cutoff = Incremental_Node[24],
    user_info = Incremental_Node[27],
    set_user_info = Incremental_Node[28],
    append_user_info_graphviz = Incremental_Node[29],
    sexp_of_t$1 = Packed[1],
    invariant$2 = Packed[2],
    As_list = Packed[3],
    iter_descendants = Packed[4],
    append_user_info_graphviz$0 = Packed[5];
   function save_dot(opt){
    if(opt)
     var sth = opt[1], emit_bind_edges = sth;
    else
     var emit_bind_edges = 1;
    return caml_call1(Incremental_Node_to_dot[1], emit_bind_edges);
   }
   function save_dot_to_file(opt){
    if(opt)
     var sth = opt[1], emit_bind_edges = sth;
    else
     var emit_bind_edges = 1;
    return caml_call1(Incremental_Node_to_dot[2], emit_bind_edges);
   }
   var
    Packed$0 =
      [0,
       sexp_of_t$1,
       invariant$2,
       As_list,
       iter_descendants,
       append_user_info_graphviz$0,
       save_dot,
       save_dot_to_file];
   function state(t){return t[2];}
   function pack(t){return t;}
   function return$0(state, a){return caml_call2(const$0, state, a);}
   var
    N_ary_map_and_bind =
      [0,
       map2,
       map3,
       map4,
       map5,
       map6,
       map7,
       map8,
       map9,
       map10,
       map11,
       map12,
       map13,
       map14,
       map15,
       bind2,
       bind3,
       bind4],
    map2$0 = N_ary_map_and_bind[1],
    map3$0 = N_ary_map_and_bind[2],
    map4$0 = N_ary_map_and_bind[3],
    map5$0 = N_ary_map_and_bind[4],
    map6$0 = N_ary_map_and_bind[5],
    map7$0 = N_ary_map_and_bind[6],
    map8$0 = N_ary_map_and_bind[7],
    map9$0 = N_ary_map_and_bind[8],
    map10$0 = N_ary_map_and_bind[9],
    map11$0 = N_ary_map_and_bind[10],
    map12$0 = N_ary_map_and_bind[11],
    map13$0 = N_ary_map_and_bind[12],
    map14$0 = N_ary_map_and_bind[13],
    map15$0 = N_ary_map_and_bind[14],
    bind2$0 = N_ary_map_and_bind[15],
    bind3$0 = N_ary_map_and_bind[16],
    bind4$0 = N_ary_map_and_bind[17];
   function symbol_map(t, f){return caml_call2(map, t, f);}
   function symbol_bind(t, f){return caml_call2(bind, t, f);}
   var
    Infix = [0, symbol_map, symbol_bind],
    symbol_map$0 = Infix[1],
    symbol_bind$0 = Infix[2];
   function lazy_from_fun$0(state, f){
    return caml_call2(lazy_from_fun, state, f);
   }
   function memoize_fun(initial_size, state, hashable, f){
    return caml_call5
            (memoize_fun_by_key,
             initial_size,
             state,
             hashable,
             function(_aa_){return _aa_;},
             f);
   }
   function array_fold$0(state, ts, init, f){
    return caml_call4(array_fold, state, ts, init, f);
   }
   function reduce_balanced(state, ts, f, reduce){
    return caml_call4(Incremental_Reduce_balanced[1], state, ts, f, reduce);
   }
   var
    invariant$3 = Incremental_Var[1],
    Packed$1 = Incremental_Var[3],
    latest_value = Incremental_Var[4],
    incr_state = Incremental_Var[5];
   function value(t){return t[1];}
   function watch(t){return t[4];}
   function sexp_of_t$2(sexp_of_a, t){return caml_call1(sexp_of_a, t[1]);}
   function replace(t, f){
    return caml_call2(set_var, t, caml_call1(f, caml_call1(latest_value, t)));
   }
   var
    invariant$4 = Incremental_Observer[1],
    observing = Incremental_Observer[3],
    use_is_allowed = Incremental_Observer[4],
    incr_state$0 = Incremental_Observer[7],
    _b_ = Incremental_Observer[2];
   function compare(cmp_a, a_001, b_002){
    if(a_001 === b_002) return 0;
    if(typeof a_001 === "number"){
     if(typeof b_002 === "number") return 0;
     if(1 === b_002[0]) return 1;
    }
    else{
     if(0 === a_001[0]){
      var a_003 = a_001[1];
      if(typeof b_002 !== "number" && 0 === b_002[0]){
       var b_004 = b_002[1];
       return caml_call2(cmp_a, a_003, b_004);
      }
      return -1;
     }
     var a_007 = a_001[2], a_005 = a_001[1];
     if(typeof b_002 === "number") return -1;
     if(0 !== b_002[0]){
      var
       b_008 = b_002[2],
       b_006 = b_002[1],
       n = caml_call2(cmp_a, a_005, b_006);
      return 0 === n ? caml_call2(cmp_a, a_007, b_008) : n;
     }
    }
    return 1;
   }
   function sexp_of_t$3(of_a_009, param){
    if(typeof param === "number") return _c_;
    if(0 === param[0]){
     var arg0_010 = param[1], res0_011 = caml_call1(of_a_009, arg0_010);
     return [1, [0, _d_, [0, res0_011, 0]]];
    }
    var
     arg1_013 = param[2],
     arg0_012 = param[1],
     res0_014 = caml_call1(of_a_009, arg0_012),
     res1_015 = caml_call1(of_a_009, arg1_013);
    return [1, [0, _e_, [0, res0_014, [0, res1_015, 0]]]];
   }
   var Update = [0, compare, sexp_of_t$3];
   function on_update_exn(t, f){
    return caml_call2
            (observer_on_update_exn,
             t,
             function(param){
              if(typeof param === "number"){
               if(0 === param) return caml_call1(f, 0);
               var
                _$_ =
                  function(x_017){
                   return caml_call2(_b_, function(param){return _f_;}, x_017);
                  };
               return caml_call5
                       (Core[247], 0, _g_, cst_Incremental_bug_Observer_o, t, _$_);
              }
              if(0 === param[0]){
               var a = param[1];
               return caml_call1(f, [0, a]);
              }
              var a2 = param[2], a1 = param[1];
              return caml_call1(f, [1, a1, a2]);
             });
   }
   function disallow_future_use$0(t){
    return caml_call1(disallow_future_use, t[1]);
   }
   function sexp_of_t$4(sexp_of_a, t){
    var ___ = t[1][1];
    if(1 !== ___)
     return ___
             ? caml_call1(Sexplib0_Sexp_conv[7], cst_disallowed)
             : caml_call1(Sexplib0_Sexp_conv[7], cst_unstabilized);
    var uopt = t[1][2][4];
    return caml_call1(Incremental_Import[6][7], uopt)
            ? caml_call1(Sexplib0_Sexp_conv[7], cst_invalid)
            : caml_call1
              (sexp_of_a, caml_call1(Incremental_Import[6][16], uopt));
   }
   var
    Observer =
      [0,
       invariant$4,
       observing,
       use_is_allowed,
       incr_state$0,
       Update,
       on_update_exn,
       disallow_future_use$0,
       observer_value,
       observer_value_exn,
       sexp_of_t$4],
    fired_alarm_values = include[1],
    set_fired_alarm_values = include[2],
    handle_fired = include[3],
    timing_wheel = include[5],
    Fields$0 = include[6],
    sexp_of_t$5 = include[7],
    invariant$5 = include[8],
    incr_state$1 = include[9],
    alarm_precision = Timing_wheel[1][10],
    _i_ = [0, caml_call2(Timing_wheel[7][5], _h_, level_bits)],
    default_timing_wheel_config =
      caml_call4(Timing_wheel[8][4], 0, _i_, alarm_precision, 0);
   function create$0(state, opt, start, param){
    if(opt)
     var sth = opt[1], timing_wheel_config = sth;
    else
     var timing_wheel_config = default_timing_wheel_config;
    var
     _Z_ = caml_call1(Incremental_Import[4][93], start),
     start$0 = caml_call1(Incremental_Import[4][95], _Z_);
    return caml_call3(create_clock, state, timing_wheel_config, start$0);
   }
   function alarm_precision$0(t){return caml_call1(Timing_wheel[10], t[1]);}
   function watch_now(t){return t[2][4];}
   function advance_clock_by(t, span){
    var _Y_ = caml_call1(now, t);
    return caml_call2
            (advance_clock,
             t,
             caml_call2(Incremental_Import[4][67], _Y_, span));
   }
   function step_function(t, init, steps){
    var _X_ = caml_call2(Incremental_step_function[7], init, steps);
    return caml_call2
            (incremental_step_function,
             t,
             return$0(caml_call1(incr_state$1, t), _X_));
   }
   function freeze$0(opt, t){
    if(opt)
     var sth = opt[1], when = sth;
    else
     var when = function(param){return 1;};
    return caml_call2(freeze, t, when);
   }
   function depend_on$0(t, depend_on$0){
    return caml_call2(depend_on, t, depend_on$0);
   }
   function stabilize$0(state){return caml_call1(stabilize, state);}
   function am_stabilizing$0(state){return caml_call1(am_stabilizing, state);}
   function save_dot$0(opt, t, out){
    if(opt)
     var sth = opt[1], emit_bind_edges = sth;
    else
     var emit_bind_edges = 1;
    var _W_ = caml_call1(directly_observed, t);
    return caml_call2(Packed$0[6].call(null, [0, emit_bind_edges]), out, _W_);
   }
   function save_dot_to_file$0(opt, t, file){
    if(opt)
     var sth = opt[1], emit_bind_edges = sth;
    else
     var emit_bind_edges = 1;
    var _V_ = caml_call1(directly_observed, t);
    return caml_call2(Packed$0[7].call(null, [0, emit_bind_edges]), file, _V_);
   }
   function sexp_of_t$6(of_a_018, param){
    if(typeof param === "number") return _j_;
    if(0 === param[0]){
     var
      arg0_019 = param[1],
      res0_020 = caml_call2(Core[515], of_a_018, arg0_019);
     return [1, [0, _k_, [0, res0_020, 0]]];
    }
    var
     arg0_021 = param[1],
     res0_022 = caml_call2(Core[515], of_a_018, arg0_021);
    return [1, [0, _l_, [0, res0_022, 0]]];
   }
   var Node_value = [0, sexp_of_t$6];
   function node_value(t){
    return caml_call1(is_valid$0, t)
            ? caml_call1
               (is_necessary$0, t)
              ? [0, caml_call1(Incremental_Import[6][12], t[4])]
              : [1, caml_call1(Incremental_Import[6][12], t[4])]
            : 0;
   }
   function sexp_of_t$7(sexp_of_a, t){
    return caml_call1(is_valid$0, t)
            ? caml_call1
               (is_necessary$0, t)
              ? caml_call1
                 (Incremental_Import[6][7], t[4])
                ? caml_call1(Core[558], cst_uncomputed)
                : caml_call1(sexp_of_a, caml_call1(unsafe_value, t))
              : caml_call1(Core[558], cst_unnecessary)
            : caml_call1(Core[558], cst_invalid$0);
   }
   function both$0(t1, t2){
    return caml_call3(map2$0, t1, t2, function(x1, x2){return [0, x1, x2];});
   }
   var
    map2$1 = N_ary_map_and_bind[1],
    map3$1 = N_ary_map_and_bind[2],
    map4$1 = N_ary_map_and_bind[3],
    map5$1 = N_ary_map_and_bind[4],
    map6$1 = N_ary_map_and_bind[5],
    map7$1 = N_ary_map_and_bind[6],
    map8$1 = N_ary_map_and_bind[7],
    map9$1 = N_ary_map_and_bind[8],
    map10$1 = N_ary_map_and_bind[9],
    map11$1 = N_ary_map_and_bind[10],
    map12$1 = N_ary_map_and_bind[11],
    map13$1 = N_ary_map_and_bind[12],
    map14$1 = N_ary_map_and_bind[13],
    map15$1 = N_ary_map_and_bind[14],
    bind2$1 = N_ary_map_and_bind[15],
    bind3$1 = N_ary_map_and_bind[16],
    bind4$1 = N_ary_map_and_bind[17],
    Open_on_rhs = [0, watch];
   function weak_memoize_fun(initial_size, state, hashable, f){
    return caml_call5
            (weak_memoize_fun_by_key,
             initial_size,
             state,
             hashable,
             function(_U_){return _U_;},
             f);
   }
   function Make_with_config(Incremental_config, symbol){
    function sexp_of_state_witness(param){
     throw caml_maybe_attach_backtrace([0, Assert_failure, _m_], 1);
    }
    var
     t = caml_call2(create_internal, Incremental_config, 128),
     State =
       [0,
        sexp_of_status,
        Run_on_update_handlers,
        Only_in_debug,
        Packed_weak_hashtbl,
        num_var_sets,
        set_num_var_sets,
        num_nodes_recomputed_directly_,
        set_num_nodes_recomputed_direc,
        num_nodes_recomputed_directly_$0,
        set_num_nodes_recomputed_direc$0,
        num_nodes_recomputed,
        set_num_nodes_recomputed,
        num_nodes_invalidated,
        set_num_nodes_invalidated,
        num_nodes_created,
        set_num_nodes_created,
        num_nodes_changed,
        set_num_nodes_changed,
        num_nodes_became_unnecessary,
        set_num_nodes_became_unnecessa,
        num_nodes_became_necessary,
        set_num_nodes_became_necessary,
        keep_node_creation_backtrace,
        set_keep_node_creation_backtra,
        weak_hashtbls,
        only_in_debug,
        set_only_in_debug,
        run_on_update_handlers,
        set_during_stabilization,
        disallowed_observers,
        new_observers,
        finalized_observers,
        all_observers,
        set_all_observers,
        num_active_observers,
        set_num_active_observers,
        adjust_heights_heap,
        recompute_heap,
        current_scope,
        set_current_scope,
        stabilization_num,
        set_stabilization_num,
        bind_lhs_change_should_invalid,
        status,
        set_status,
        Fields,
        sexp_of_t,
        include,
        now,
        timing_wheel_length,
        num_stabilizes,
        max_height_allowed,
        max_height_seen,
        iter_observers,
        directly_observed,
        iter_observer_descendants,
        Stats,
        stats,
        am_stabilizing,
        invariant,
        ensure_not_stabilizing,
        set_height,
        set_max_height_allowed,
        handle_after_stabilization,
        remove_children,
        remove_child,
        check_if_unnecessary,
        became_unnecessary,
        remove_alarm,
        invalidate_node,
        invalidate_nodes_created_on_rh,
        rescope_nodes_created_on_rhs,
        propagate_invalidity,
        add_parent_without_adjusting_h,
        became_necessary,
        add_parent,
        run_with_scope,
        within_scope,
        change_child,
        add_alarm,
        recompute,
        copy_child,
        maybe_change_value,
        recompute_first_node_that_is_n,
        unlink_disallowed_observers,
        disallow_future_use,
        disallow_finalized_observers,
        observer_finalizer,
        create_observer,
        add_new_observers,
        observer_value_exn,
        observer_value,
        node_on_update,
        observer_on_update_exn,
        set_var_while_not_stabilizing,
        set_var,
        reclaim_space_in_weak_hashtbls,
        stabilize_start,
        stabilize_end,
        raise_during_stabilization,
        stabilize,
        Step_result,
        do_one_step_of_stabilize,
        create_node_in,
        create_node,
        create_node_top,
        create_var,
        const$0,
        map,
        map2,
        both,
        map3,
        map4,
        map5,
        map6,
        map7,
        map8,
        map9,
        map10,
        map11,
        map12,
        map13,
        map14,
        map15,
        preserve_cutoff,
        depend_on,
        necessary_if_alive,
        bind,
        bind2,
        bind3,
        bind4,
        join,
        if$0,
        lazy_from_fun,
        default_hash_table_initial_siz,
        memoize_fun_by_key,
        array_fold,
        all,
        unordered_array_fold,
        opt_unordered_array_fold,
        at_least_k_of,
        exists,
        for_all,
        sum,
        opt_sum,
        sum_int,
        sum_float,
        set_freeze,
        freeze,
        at,
        after,
        next_interval_alarm_strict,
        at_intervals,
        snapshot,
        incremental_step_function,
        make_stale,
        advance_clock,
        create_clock,
        weak_memoize_fun_by_key,
        Expert,
        create_internal,
        create,
        t];
    function create$1(timing_wheel_config, start, param){
     return create$0(State[163], timing_wheel_config, start, 0);
    }
    var
     Clock =
       [0,
        fired_alarm_values,
        set_fired_alarm_values,
        handle_fired,
        timing_wheel,
        Fields$0,
        sexp_of_t$5,
        invariant$5,
        incr_state$1,
        incr_state$1,
        default_timing_wheel_config,
        alarm_precision$0,
        timing_wheel_length,
        now,
        watch_now,
        at,
        after,
        at_intervals,
        advance_clock,
        advance_clock_by,
        incremental_step_function,
        step_function,
        snapshot,
        create$1],
     Dependency = Incremental_Expert1[1],
     Node = Incremental_Expert1[2],
     sexp_of_t$1 = Node[1],
     watch$0 = Node[3],
     make_stale$0 = Node[4],
     invalidate = Node[5],
     add_dependency = Node[6],
     remove_dependency = Node[7],
     _Q_ = Node[2];
    function create$2(on_observability_change, f){
     return caml_call3(_Q_, State[163], on_observability_change, f);
    }
    var
     Node$0 =
       [0,
        sexp_of_t$1,
        watch$0,
        make_stale$0,
        invalidate,
        add_dependency,
        remove_dependency,
        create$2];
    function do_one_step_of_stabilize$0(param){
     return caml_call1(State[103], State[163]);
    }
    var Expert$0 = [0, Dependency, Node$0, do_one_step_of_stabilize$0];
    function return$1(a){return return$0(State[163], a);}
    var
     Let_syntax =
       [0,
        bind,
        map,
        both$0,
        map2$1,
        map3$1,
        map4$1,
        map5$1,
        map6$1,
        map7$1,
        map8$1,
        map9$1,
        map10$1,
        map11$1,
        map12$1,
        map13$1,
        map14$1,
        map15$1,
        bind2$1,
        bind3$1,
        bind4$1,
        Open_on_rhs,
        return$1],
     Let_syntax$0 = [0, symbol_map$0, symbol_bind$0, return$1, Let_syntax];
    function current(param){return State[163][4];}
    function within$0(t, f){return within(State[163], t, f);}
    var
     Scope =
       [0,
        sexp_of_t$0,
        invariant$0,
        top,
        is_top,
        height,
        is_valid,
        is_necessary,
        add_node,
        current,
        within$0];
    function create$3(use_current_scope, value){
     return caml_call3(create_var, State[163], use_current_scope, value);
    }
    var
     Var =
       [0,
        invariant$3,
        Packed$1,
        latest_value,
        incr_state,
        set_var,
        value,
        watch,
        sexp_of_t$2,
        replace,
        create$3];
    function const$1(a){return return$0(State[163], a);}
    function return$2(a){return return$0(State[163], a);}
    function all$0(ts){return caml_call2(all, State[163], ts);}
    function exists$0(ts){return caml_call2(exists, State[163], ts);}
    function for_all$0(ts){return caml_call2(for_all, State[163], ts);}
    function memoize_fun_by_key$0(initial_size, hashable, project_key, f){
     return caml_call5
             (memoize_fun_by_key,
              initial_size,
              State[163],
              hashable,
              project_key,
              f);
    }
    function memoize_fun$0(initial_size, hashable, f){
     return memoize_fun(initial_size, State[163], hashable, f);
    }
    function array_fold$1(ts, init, f){
     return array_fold$0(State[163], ts, init, f);
    }
    function reduce_balanced$0(ts, f, reduce){
     return reduce_balanced(State[163], ts, f, reduce);
    }
    function unordered_array_fold$0
    (full_compute_every_n_changes, ts, init, f, update){
     return caml_call6
             (unordered_array_fold,
              State[163],
              full_compute_every_n_changes,
              ts,
              init,
              f,
              update);
    }
    function opt_unordered_array_fold$0
    (full_compute_every_n_changes, ts, init, f, f_inverse){
     return caml_call6
             (opt_unordered_array_fold,
              State[163],
              full_compute_every_n_changes,
              ts,
              init,
              f,
              f_inverse);
    }
    function sum$0(full_compute_every_n_changes, ts, zero, add, sub){
     return caml_call6
             (sum,
              State[163],
              full_compute_every_n_changes,
              ts,
              zero,
              add,
              sub);
    }
    function opt_sum$0(full_compute_every_n_changes, ts, zero, add, sub){
     return caml_call6
             (opt_sum,
              State[163],
              full_compute_every_n_changes,
              ts,
              zero,
              add,
              sub);
    }
    function sum_int$0(ts){return caml_call2(sum_int, State[163], ts);}
    function sum_float$0(ts){return caml_call2(sum_float, State[163], ts);}
    function stabilize$1(param){return stabilize$0(State[163]);}
    function am_stabilizing$1(param){return am_stabilizing$0(State[163]);}
    function save_dot(opt, out){
     if(opt)
      var sth = opt[1], emit_bind_edges = sth;
     else
      var emit_bind_edges = 1;
     return save_dot$0([0, emit_bind_edges], State[163], out);
    }
    function save_dot_to_file(opt, file){
     if(opt)
      var sth = opt[1], emit_bind_edges = sth;
     else
      var emit_bind_edges = 1;
     var _R_ = [0, emit_bind_edges];
     function _S_(_T_){return save_dot(_R_, _T_);}
     return caml_call6(Stdio_Out_channel[6], 0, 0, 0, 0, file, _S_);
    }
    function lazy_from_fun$0(f){
     var state = State[163];
     return caml_call2(State[134], state, f);
    }
    function weak_memoize_fun_by_key$0(initial_size, hashable, project_key, f){
     return caml_call5
             (weak_memoize_fun_by_key,
              initial_size,
              State[163],
              hashable,
              project_key,
              f);
    }
    function weak_memoize_fun$0(initial_size, hashable, f){
     return weak_memoize_fun(initial_size, State[163], hashable, f);
    }
    return [0,
            sexp_of_state_witness,
            ,
            invariant$1,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            is_const,
            ,
            is_necessary$0,
            is_valid$0,
            ,
            ,
            ,
            ,
            ,
            ,
            get_cutoff,
            set_cutoff,
            ,
            user_info,
            set_user_info,
            append_user_info_graphviz,
            ,
            ,
            Packed$0,
            ,
            pack,
            create_observer,
            map,
            bind,
            ,
            map2$0,
            map3$0,
            map4$0,
            map5$0,
            map6$0,
            map7$0,
            map8$0,
            map9$0,
            map10$0,
            map11$0,
            map12$0,
            map13$0,
            map14$0,
            map15$0,
            bind2$0,
            bind3$0,
            bind4$0,
            Infix,
            symbol_map$0,
            symbol_bind$0,
            join,
            if$0,
            default_hash_table_initial_siz,
            ,
            both,
            Observer,
            freeze$0,
            depend_on$0,
            necessary_if_alive,
            node_on_update,
            Node_value,
            node_value,
            sexp_of_t$7,
            State,
            Clock,
            Expert$0,
            Let_syntax$0,
            Scope,
            Var,
            const$1,
            return$2,
            all$0,
            exists$0,
            for_all$0,
            memoize_fun_by_key$0,
            memoize_fun$0,
            array_fold$1,
            reduce_balanced$0,
            unordered_array_fold$0,
            opt_unordered_array_fold$0,
            sum$0,
            opt_sum$0,
            sum_int$0,
            sum_float$0,
            stabilize$1,
            am_stabilizing$1,
            save_dot,
            save_dot_to_file,
            lazy_from_fun$0,
            weak_memoize_fun_by_key$0,
            weak_memoize_fun$0];
   }
   function Add_witness0(M){
    function sexp_of_t(param, t){return caml_call1(M[1], t);}
    return [0, sexp_of_t];
   }
   function Add_witness1(M){
    function invariant(invariant_a, param, t){return caml_call2(M[2], invariant_a, t);
    }
    function sexp_of_t(sexp_of_a, param, t){return caml_call2(M[1], sexp_of_a, t);
    }
    return [0, sexp_of_t, invariant];
   }
   var
    include$0 = Add_witness0([0, sexp_of_t$5, invariant$5]),
    sexp_of_t$8 = include$0[1],
    Dependency = Incremental_Expert1[1],
    Node = Incremental_Expert1[2],
    create$1 = Dependency[2],
    value$0 = Dependency[3],
    sexp_of_t$9 = Dependency[1];
   function invariant$6(param, _P_){return 0;}
   var
    include$1 = Add_witness1([0, sexp_of_t$9, invariant$6]),
    sexp_of_t$10 = include$1[1],
    create$2 = Node[2],
    watch$0 = Node[3],
    make_stale$0 = Node[4],
    invalidate = Node[5],
    add_dependency = Node[6],
    remove_dependency = Node[7],
    sexp_of_t$11 = Node[1];
   function invariant$7(param, _O_){return 0;}
   var
    include$2 = Add_witness1([0, sexp_of_t$11, invariant$7]),
    sexp_of_t$12 = include$2[1];
   function do_one_step_of_stabilize$0(state){
    return caml_call1(do_one_step_of_stabilize, state);
   }
   var
    include$3 = Add_witness1([0, Incremental_Node[2], Incremental_Node[4]]),
    sexp_of_t$13 = include$3[1],
    invariant$8 = include$3[2],
    observing$0 = Observer[2],
    use_is_allowed$0 = Observer[3],
    Update$0 = Observer[5],
    on_update_exn$0 = Observer[6],
    disallow_future_use$1 = Observer[7],
    value$1 = Observer[8],
    value_exn = Observer[9],
    include$4 = Add_witness1([0, Observer[10], Observer[1]]),
    sexp_of_t$14 = include$4[1],
    invariant$9 = include$4[2],
    include$5 = Add_witness0([0, sexp_of_t, invariant]),
    sexp_of_t$15 = include$5[1],
    include$6 = Add_witness1([0, sexp_of_t$2, invariant$3]),
    sexp_of_t$16 = include$6[1],
    debug = Incremental_Import[1],
    Private = [0, debug];
   caml_call1(Ppx_inline_test_lib[7], cst_incremental);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incremental);
   function _n_(_C_, _B_){
    var
     _D_ = Make_with_config(_C_, _B_),
     _E_ = _D_[72],
     _F_ = _E_[2],
     _G_ = _D_[71],
     _H_ = _D_[73],
     _I_ = _H_[4],
     _J_ = _D_[30],
     _K_ = _D_[62],
     _L_ = _D_[75],
     _M_ = _D_[74],
     _N_ = _D_[70];
    return [0,
            _D_[1],
            [0,
             _N_[47],
             _N_[60],
             _N_[163],
             _N_[23],
             _N_[24],
             _N_[52],
             _N_[63],
             _N_[35],
             _N_[53],
             _N_[21],
             _N_[19],
             _N_[17],
             _N_[15],
             _N_[13],
             _N_[11],
             _N_[9],
             _N_[7],
             _N_[51],
             _N_[5],
             [0, _N_[57][2]],
             _N_[58]],
            _D_[69],
            _D_[3],
            _D_[12],
            _D_[15],
            _D_[14],
            _D_[76],
            _D_[77],
            _D_[34],
            _D_[55],
            _D_[37],
            _D_[38],
            _D_[39],
            _D_[40],
            _D_[41],
            _D_[42],
            _D_[43],
            _D_[44],
            _D_[45],
            _D_[46],
            _D_[47],
            _D_[48],
            _D_[49],
            _D_[50],
            _D_[35],
            _D_[56],
            _D_[51],
            _D_[52],
            _D_[53],
            _D_[54],
            _D_[57],
            _D_[58],
            _D_[63],
            _D_[64],
            _D_[65],
            _D_[80],
            _D_[79],
            _D_[78],
            _D_[61],
            _D_[83],
            _D_[84],
            [0],
            _D_[85],
            _D_[86],
            _D_[87],
            _D_[88],
            _D_[89],
            _D_[90],
            [0, _M_[3], _M_[9], _M_[10], _M_[4]],
            [0, _L_[8], _L_[10], _L_[5], _L_[7], _L_[6], _L_[3], _L_[9]],
            [0,
             _K_[10],
             _K_[1],
             _K_[2],
             _K_[3],
             _K_[8],
             _K_[9],
             _K_[5],
             _K_[6],
             _K_[7]],
            _D_[33],
            Incremental_On_update_handler[1],
            _D_[66],
            _D_[91],
            _D_[92],
            [0,
             Incremental_Cutoff[1],
             Incremental_Cutoff[2],
             Incremental_Cutoff[3],
             Incremental_Cutoff[4],
             Incremental_Cutoff[5],
             Incremental_Cutoff[6],
             Incremental_Cutoff[7],
             Incremental_Cutoff[8],
             Incremental_Cutoff[9],
             Incremental_Cutoff[11],
             Incremental_Cutoff[10]],
            _D_[23],
            _D_[22],
            _D_[95],
            _D_[59],
            _D_[82],
            _D_[81],
            _D_[97],
            _D_[96],
            _D_[25],
            _D_[26],
            _D_[27],
            _D_[67],
            _D_[68],
            [0, _J_[6], _J_[7], _J_[5]],
            _D_[32],
            _D_[93],
            _D_[94],
            [0,
             _H_[3],
             _H_[1],
             _H_[2],
             [0,
              _I_[1],
              _I_[22],
              _I_[18],
              _I_[19],
              _I_[20],
              _I_[2],
              _I_[4],
              _I_[5],
              _I_[6],
              _I_[7],
              _I_[8],
              _I_[9],
              _I_[10],
              _I_[11],
              _I_[12],
              _I_[13],
              _I_[14],
              _I_[15],
              _I_[16],
              _I_[17],
              _I_[3],
              _I_[21]]],
            Incremental_Before_or_after,
            [0,
             _G_[6],
             _G_[10],
             _G_[23],
             _G_[11],
             _G_[12],
             _G_[13],
             _G_[14],
             _G_[18],
             _G_[19],
             _G_[15],
             _G_[16],
             _G_[17],
             _G_[21],
             _G_[20],
             _G_[22]],
            [0,
             _E_[1],
             [0, _F_[1], _F_[7], _F_[2], _F_[3], _F_[4], _F_[5], _F_[6]],
             _D_[70][102],
             _E_[3]]];
   }
   function _o_(_p_){
    var
     _A_ = Make_with_config(caml_call1(Incremental_Config[1], 0), 0),
     _q_ = _A_[72],
     _r_ = _q_[2],
     _s_ = _A_[71],
     _t_ = _A_[73],
     _u_ = _t_[4],
     _v_ = _A_[30],
     _w_ = _A_[62],
     _x_ = _A_[75],
     _y_ = _A_[74],
     _z_ = _A_[70];
    return [0,
            _A_[1],
            [0,
             _z_[47],
             _z_[60],
             _z_[163],
             _z_[23],
             _z_[24],
             _z_[52],
             _z_[63],
             _z_[35],
             _z_[53],
             _z_[21],
             _z_[19],
             _z_[17],
             _z_[15],
             _z_[13],
             _z_[11],
             _z_[9],
             _z_[7],
             _z_[51],
             _z_[5],
             [0, _z_[57][2]],
             _z_[58]],
            _A_[69],
            _A_[3],
            _A_[12],
            _A_[15],
            _A_[14],
            _A_[76],
            _A_[77],
            _A_[34],
            _A_[55],
            _A_[37],
            _A_[38],
            _A_[39],
            _A_[40],
            _A_[41],
            _A_[42],
            _A_[43],
            _A_[44],
            _A_[45],
            _A_[46],
            _A_[47],
            _A_[48],
            _A_[49],
            _A_[50],
            _A_[35],
            _A_[56],
            _A_[51],
            _A_[52],
            _A_[53],
            _A_[54],
            _A_[57],
            _A_[58],
            _A_[63],
            _A_[64],
            _A_[65],
            _A_[80],
            _A_[79],
            _A_[78],
            _A_[61],
            _A_[83],
            _A_[84],
            [0],
            _A_[85],
            _A_[86],
            _A_[87],
            _A_[88],
            _A_[89],
            _A_[90],
            [0, _y_[3], _y_[9], _y_[10], _y_[4]],
            [0, _x_[8], _x_[10], _x_[5], _x_[7], _x_[6], _x_[3], _x_[9]],
            [0,
             _w_[10],
             _w_[1],
             _w_[2],
             _w_[3],
             _w_[8],
             _w_[9],
             _w_[5],
             _w_[6],
             _w_[7]],
            _A_[33],
            Incremental_On_update_handler[1],
            _A_[66],
            _A_[91],
            _A_[92],
            [0,
             Incremental_Cutoff[1],
             Incremental_Cutoff[2],
             Incremental_Cutoff[3],
             Incremental_Cutoff[4],
             Incremental_Cutoff[5],
             Incremental_Cutoff[6],
             Incremental_Cutoff[7],
             Incremental_Cutoff[8],
             Incremental_Cutoff[9],
             Incremental_Cutoff[11],
             Incremental_Cutoff[10]],
            _A_[23],
            _A_[22],
            _A_[95],
            _A_[59],
            _A_[82],
            _A_[81],
            _A_[97],
            _A_[96],
            _A_[25],
            _A_[26],
            _A_[27],
            _A_[67],
            _A_[68],
            [0, _v_[6], _v_[7], _v_[5]],
            _A_[32],
            _A_[93],
            _A_[94],
            [0,
             _t_[3],
             _t_[1],
             _t_[2],
             [0,
              _u_[1],
              _u_[22],
              _u_[18],
              _u_[19],
              _u_[20],
              _u_[2],
              _u_[4],
              _u_[5],
              _u_[6],
              _u_[7],
              _u_[8],
              _u_[9],
              _u_[10],
              _u_[11],
              _u_[12],
              _u_[13],
              _u_[14],
              _u_[15],
              _u_[16],
              _u_[17],
              _u_[3],
              _u_[21]]],
            Incremental_Before_or_after,
            [0,
             _s_[6],
             _s_[10],
             _s_[23],
             _s_[11],
             _s_[12],
             _s_[13],
             _s_[14],
             _s_[18],
             _s_[19],
             _s_[15],
             _s_[16],
             _s_[17],
             _s_[21],
             _s_[20],
             _s_[22]],
            [0,
             _q_[1],
             [0, _r_[1], _r_[7], _r_[2], _r_[3], _r_[4], _r_[5], _r_[6]],
             _A_[70][102],
             _q_[3]]];
   }
   var
    Incremental =
      [0,
       [0,
        sexp_of_t$15,
        create,
        keep_node_creation_backtrace,
        set_keep_node_creation_backtra,
        max_height_allowed,
        set_max_height_allowed,
        num_active_observers,
        max_height_seen,
        num_nodes_became_necessary,
        num_nodes_became_unnecessary,
        num_nodes_changed,
        num_nodes_created,
        num_nodes_invalidated,
        num_nodes_recomputed,
        num_nodes_recomputed_directly_$0,
        num_nodes_recomputed_directly_,
        num_stabilizes,
        num_var_sets,
        [0, Stats[2]],
        stats],
       sexp_of_t$13,
       invariant$8,
       state,
       is_const,
       is_valid$0,
       is_necessary$0,
       return$0,
       return$0,
       map,
       symbol_map$0,
       map2$0,
       map3$0,
       map4$0,
       map5$0,
       map6$0,
       map7$0,
       map8$0,
       map9$0,
       map10$0,
       map11$0,
       map12$0,
       map13$0,
       map14$0,
       map15$0,
       bind,
       symbol_bind$0,
       bind2$0,
       bind3$0,
       bind4$0,
       Infix,
       join,
       if$0,
       freeze$0,
       depend_on$0,
       necessary_if_alive,
       for_all,
       exists,
       all,
       both,
       array_fold$0,
       reduce_balanced,
       [0],
       unordered_array_fold,
       opt_unordered_array_fold,
       sum,
       opt_sum,
       sum_int,
       sum_float,
       [0, top, current, within, is_top],
       [0,
        sexp_of_t$16,
        create_var,
        set_var,
        watch,
        value,
        latest_value,
        replace],
       [0,
        sexp_of_t$14,
        invariant$9,
        observing$0,
        use_is_allowed$0,
        value$1,
        value_exn,
        Update$0,
        on_update_exn$0,
        disallow_future_use$1],
       create_observer,
       Incremental_On_update_handler[1],
       node_on_update,
       stabilize$0,
       am_stabilizing$0,
       [0,
        Incremental_Cutoff[1],
        Incremental_Cutoff[2],
        Incremental_Cutoff[3],
        Incremental_Cutoff[4],
        Incremental_Cutoff[5],
        Incremental_Cutoff[6],
        Incremental_Cutoff[7],
        Incremental_Cutoff[8],
        Incremental_Cutoff[9],
        Incremental_Cutoff[11],
        Incremental_Cutoff[10]],
       set_cutoff,
       get_cutoff,
       lazy_from_fun$0,
       default_hash_table_initial_siz,
       memoize_fun,
       memoize_fun_by_key,
       weak_memoize_fun,
       weak_memoize_fun_by_key,
       user_info,
       set_user_info,
       append_user_info_graphviz,
       Node_value,
       node_value,
       [0, Packed$0[6], Packed$0[7]],
       pack,
       save_dot$0,
       save_dot_to_file$0,
       [0,
        symbol_map$0,
        symbol_bind$0,
        [0,
         bind,
         bind2$1,
         bind3$1,
         bind4$1,
         map,
         map2$1,
         map3$1,
         map4$1,
         map5$1,
         map6$1,
         map7$1,
         map8$1,
         map9$1,
         map10$1,
         map11$1,
         map12$1,
         map13$1,
         map14$1,
         map15$1,
         both$0,
         Open_on_rhs]],
       Incremental_Before_or_after,
       [0,
        sexp_of_t$8,
        default_timing_wheel_config,
        create$0,
        alarm_precision$0,
        incr_state$1,
        timing_wheel_length,
        now,
        watch_now,
        advance_clock,
        advance_clock_by,
        at,
        after,
        at_intervals,
        step_function,
        incremental_step_function,
        snapshot],
       [0,
        [0, sexp_of_t$10, create$1, value$0],
        [0,
         sexp_of_t$12,
         create$2,
         watch$0,
         make_stale$0,
         invalidate,
         add_dependency,
         remove_dependency],
        Step_result,
        do_one_step_of_stabilize$0],
       _o_,
       Incremental_Config,
       _n_,
       Private,
       Incremental_For_analyzer];
   runtime.caml_register_global(51, Incremental, cst_Incremental$0);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
