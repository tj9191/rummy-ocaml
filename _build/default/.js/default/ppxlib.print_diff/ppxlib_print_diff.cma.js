// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Ppxlib_print_diff
//# unitInfo: Requires: Stdlib__Filename, Stdlib__ListLabels, Stdlib__Printf, Stdlib__StringLabels, Stdlib__Sys
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_line_1_characters_0_0 = '", line 1, characters 0-0:\n',
    cst_File = 'File "',
    cst_File_s_line_1_characters_0 = 'File "%s", line 1, characters 0-0:\n%!',
    cst_diff_u$1 = "diff -u";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = " ",
    Stdlib_Filename = global_data.Stdlib__Filename,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib_ListLabels = global_data.Stdlib__ListLabels,
    Stdlib_StringLabels = global_data.Stdlib__StringLabels,
    _d_ =
      [0,
       [2, 0, [12, 32, [2, 0, [12, 32, [2, 0, [11, " 1>&2", 0]]]]]],
       "%s %s %s 1>&2"],
    _e_ =
      [0,
       [11, cst_File, [2, 0, [11, cst_line_1_characters_0_0, [10, 0]]]],
       cst_File_s_line_1_characters_0],
    cst_diff_u = cst_diff_u$1,
    _f_ =
      [0,
       [11,
        "Error:\n> ",
        [3,
         0,
         [11,
          " exited with code ",
          [4,
           0,
           0,
           0,
           [11,
            "\n> Perhaps patdiff is not installed? Hint, try: opam install patdiff\n> Falling back to diff -u\n\n",
            0]]]]],
       "Error:\n> %S exited with code %d\n> Perhaps patdiff is not installed? Hint, try: opam install patdiff\n> Falling back to diff -u\n\n"],
    _g_ =
      [0,
       [11, cst_File, [2, 0, [11, cst_line_1_characters_0_0, [10, 0]]]],
       cst_File_s_line_1_characters_0],
    cst_diff_u$0 = cst_diff_u$1,
    _c_ = [0, "-ascii", 0],
    _a_ = [0, "-location-style omake", 0],
    _b_ = [0, "-keep-whitespace", 0],
    cst_patdiff = "patdiff";
   function print(diff_command, opt, _j_, file1, file2, param){
    if(opt)
     var sth = opt[1], extra_patdiff_args = sth;
    else
     var extra_patdiff_args = 0;
    if(_j_) var sth$0 = _j_[1], use_color = sth$0; else var use_color = 0;
    function exec(cmd){
     var
      _k_ = caml_call1(Stdlib_Filename[21], file2),
      _l_ = caml_call1(Stdlib_Filename[21], file1),
      cmd$0 = caml_call4(Stdlib_Printf[4], _d_, cmd, _l_, _k_),
      n = runtime.caml_sys_system_command(cmd$0);
     return 0 === n
             ? 925282182
             : 1 === n ? -890978471 : [0, 106380200, [0, n, cmd$0]];
    }
    if(diff_command){var s = diff_command[1]; exec(s); return 0;}
    var
     _h_ = [0, extra_patdiff_args, 0],
     _i_ = use_color ? 0 : _c_,
     args =
       caml_call1(Stdlib_ListLabels[14], [0, _b_, [0, _a_, [0, _i_, _h_]]]),
     match =
       exec(caml_call2(Stdlib_StringLabels[7], cst, [0, cst_patdiff, args]));
    if(typeof match === "number")
     return 925282182 <= match
             ? (caml_call2(Stdlib_Printf[3], _e_, file1), exec(cst_diff_u), 0)
             : 0;
    var match$0 = match[2], cmd = match$0[2], err_code = match$0[1];
    caml_call3(Stdlib_Printf[3], _f_, cmd, err_code);
    caml_call2(Stdlib_Printf[3], _g_, file1);
    exec(cst_diff_u$0);
    return 0;
   }
   var Ppxlib_print_diff = [0, print];
   runtime.caml_register_global(15, Ppxlib_print_diff, "Ppxlib_print_diff");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLjAsImZpbGUiOiJwcHhsaWJfcHJpbnRfZGlmZi5jbWEuanMiLCJzb3VyY2VSb290IjoiIiwibmFtZXMiOlsicHJpbnQiLCJkaWZmX2NvbW1hbmQiLCJvcHQiLCJmaWxlMSIsImZpbGUyIiwic3RoIiwiZXh0cmFfcGF0ZGlmZl9hcmdzIiwic3RoJDAiLCJ1c2VfY29sb3IiLCJleGVjIiwiY21kIiwiY21kJDAiLCJuIiwicyIsImFyZ3MiLCJlcnJfY29kZSJdLCJzb3VyY2VzIjpbIi9Vc2Vycy90eWxhbm1vcmFuLy5vcGFtLzUuMS4xL2xpYi9wcHhsaWIvcHJpbnRfZGlmZi9wcHhsaWJfcHJpbnRfZGlmZi5tbCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Rzs7Ozs7Rzs7Ozs7Rzs7Ozs7Rzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztZQWNJQSxNQUFPQyxjQUFlQyxVQUErQ0MsT0FDcEVDO0lBQ0gsR0FGd0JGO1NBQXFCRyxNQUFyQkgsUUFBQUkscUJBQXFCRDs7U0FBckJDO0lBRXhCLFlBRitEQyxnQkFBWkMsWUFBWUQsZ0JBQVpDO2FBRS9DQyxLQUFLQztLQUNQO01BRUksTUFBQSxnQ0FKSE47TUFHb0MsTUFBQSxnQ0FKZ0NEO01BR2pFUSxRQUNGLGtDQUZLRDtNQVFMRSxJQUhJLGdDQUpGRDtrQkFPRkM7O3FCQUFBQSxvQ0FBQUEsR0FQRUQ7SUFPa0I7SUFFeEIsR0FaU1Ysa0JBYUZZLElBYkVaLGlCQUVMUSxLQVdHSSxJQUFhO0lBdkJsQjtlQVVzQlA7V0FBMkJFO0tBWC9DTTtPQUNGO0tBeUJRO09BYk5MLEtBSm1CLHlEQVRuQks7OztnQkE2Qkksa0NBbEIrRFgsUUFFbkVNOzs0QkFzQm9CQyxrQkFBVks7SUFFTixrQ0FGZ0JMLEtBQVZLO0lBUU4sa0NBaEMrRFo7SUFFbkVNO0lBZ0NPO0dBQW1FOytCQWxDNUVUOzs7RSIsInNvdXJjZXNDb250ZW50IjpbIm9wZW4gU3RkTGFiZWxzXG5cbmxldCBwYXRkaWZmX2NtZCB+dXNlX2NvbG9yIH5leHRyYV9wYXRkaWZmX2FyZ3MgPVxuICBsZXQgYXJncyA9XG4gICAgTGlzdC5jb25jYXRcbiAgICAgIFtcbiAgICAgICAgWyBcIi1rZWVwLXdoaXRlc3BhY2VcIiBdO1xuICAgICAgICBbIFwiLWxvY2F0aW9uLXN0eWxlIG9tYWtlXCIgXTtcbiAgICAgICAgKGlmIHVzZV9jb2xvciB0aGVuIFtdIGVsc2UgWyBcIi1hc2NpaVwiIF0pO1xuICAgICAgICBleHRyYV9wYXRkaWZmX2FyZ3M7XG4gICAgICBdXG4gIGluXG4gIFN0cmluZy5jb25jYXQgfnNlcDpcIiBcIiAoXCJwYXRkaWZmXCIgOjogYXJncylcblxubGV0IHByaW50ID9kaWZmX2NvbW1hbmQgPyhleHRyYV9wYXRkaWZmX2FyZ3MgPSBbXSkgPyh1c2VfY29sb3IgPSBmYWxzZSkgfmZpbGUxXG4gICAgfmZpbGUyICgpID1cbiAgbGV0IGV4ZWMgY21kID1cbiAgICBsZXQgY21kID1cbiAgICAgIFByaW50Zi5zcHJpbnRmIFwiJXMgJXMgJXMgMT4mMlwiIGNtZCAoRmlsZW5hbWUucXVvdGUgZmlsZTEpXG4gICAgICAgIChGaWxlbmFtZS5xdW90ZSBmaWxlMilcbiAgICBpblxuICAgIG1hdGNoIFN5cy5jb21tYW5kIGNtZCB3aXRoXG4gICAgfCAwIC0+IGBTYW1lXG4gICAgfCAxIC0+IGBEaWZmZXJlbnRcbiAgICB8IG4gLT4gYEVycm9yIChuLCBjbWQpXG4gIGluXG4gIG1hdGNoIGRpZmZfY29tbWFuZCB3aXRoXG4gIHwgU29tZSBzIC0+IGlnbm9yZSAoZXhlYyBzIDogWz4gYFNhbWUgfCBgRGlmZmVyZW50IHwgYEVycm9yIG9mIGludCAqIHN0cmluZyBdKVxuICB8IE5vbmUgLT4gKFxuICAgICAgbWF0Y2ggZXhlYyAocGF0ZGlmZl9jbWQgfnVzZV9jb2xvciB+ZXh0cmFfcGF0ZGlmZl9hcmdzKSB3aXRoXG4gICAgICB8IGBTYW1lIC0+XG4gICAgICAgICAgKCogcGF0ZGlmZiBwcm9kdWNlZCBubyBvdXRwdXQsIGZhbGxiYWNrIHRvIGRpZmYgLXUgKilcbiAgICAgICAgICBQcmludGYuZXByaW50ZiBcIkZpbGUgXFxcIiVzXFxcIiwgbGluZSAxLCBjaGFyYWN0ZXJzIDAtMDpcXG4lIVwiIGZpbGUxO1xuICAgICAgICAgIGlnbm9yZVxuICAgICAgICAgICAgKGV4ZWMgXCJkaWZmIC11XCIgOiBbPiBgU2FtZSB8IGBEaWZmZXJlbnQgfCBgRXJyb3Igb2YgaW50ICogc3RyaW5nIF0pXG4gICAgICB8IGBEaWZmZXJlbnQgLT5cbiAgICAgICAgICAoKiBwYXRkaWZmIHN1Y2Nlc3NmdWxseSBmb3VuZCBhIGRpZmZlcmVuY2UgKilcbiAgICAgICAgICAoKVxuICAgICAgfCBgRXJyb3IgKGVycl9jb2RlLCBjbWQpIC0+XG4gICAgICAgICAgKCogcGF0ZGlmZiB0aHJldyBhbiBlcnJvci4uLiBwZXJoYXBzIGl0IHdhc24ndCBpbnN0YWxsZWQ/IGZhbGxiYWNrIHRvIGRpZmYgLXUgKilcbiAgICAgICAgICBQcmludGYuZXByaW50ZlxuICAgICAgICAgICAgXCJFcnJvcjpcXG5cXFxuICAgICAgICAgICAgID4gJVMgZXhpdGVkIHdpdGggY29kZSAlZFxcblxcXG4gICAgICAgICAgICAgPiBQZXJoYXBzIHBhdGRpZmYgaXMgbm90IGluc3RhbGxlZD8gSGludCwgdHJ5OiBvcGFtIGluc3RhbGwgcGF0ZGlmZlxcblxcXG4gICAgICAgICAgICAgPiBGYWxsaW5nIGJhY2sgdG8gZGlmZiAtdVxcblxcblwiXG4gICAgICAgICAgICBjbWQgZXJyX2NvZGU7XG4gICAgICAgICAgUHJpbnRmLmVwcmludGYgXCJGaWxlIFxcXCIlc1xcXCIsIGxpbmUgMSwgY2hhcmFjdGVycyAwLTA6XFxuJSFcIiBmaWxlMTtcbiAgICAgICAgICBpZ25vcmVcbiAgICAgICAgICAgIChleGVjIFwiZGlmZiAtdVwiIDogWz4gYFNhbWUgfCBgRGlmZmVyZW50IHwgYEVycm9yIG9mIGludCAqIHN0cmluZyBdKSlcbiJdfQ==
