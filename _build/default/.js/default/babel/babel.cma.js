// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Babel__
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Babel = [0], Babel$0 = [0, Babel];
   runtime.caml_register_global(0, Babel$0, "Babel__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Babel__Shape
//# unitInfo: Requires: Async_rpc_kernel__Rpc, Bin_prot__Shape, Bin_shape, Core__Comparable, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Streamable__Pipe_rpc, Streamable__Plain_rpc, Streamable__State_rpc
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Babel_Shape$0 = "Babel__Shape",
    cst_babel$0 = "babel",
    cst_error = "error",
    cst_query = "query",
    cst_response = "response",
    cst_state = "state",
    cst_update = "update";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Streamable_State_rpc = global_data.Streamable__State_rpc,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Streamable_Pipe_rpc = global_data.Streamable__Pipe_rpc,
    Streamable_Plain_rpc = global_data.Streamable__Plain_rpc,
    Async_rpc_kernel_Rpc = global_data.Async_rpc_kernel__Rpc,
    Bin_shape = global_data.Bin_shape,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Core_Comparable = global_data.Core__Comparable;
   caml_call1(Ppx_module_timer_runtime[4], cst_Babel_Shape$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_babel$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/shape.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_babel$0, "shape.ml");
   var
    _a_ = [0, cst_response],
    _b_ = [0, cst_query],
    _c_ = [0, "Rpc"],
    _d_ = [0, cst_error],
    _e_ = [0, cst_response],
    _f_ = [0, cst_query],
    _g_ = [0, "Pipe_rpc"],
    _h_ = [0, cst_error],
    _i_ = [0, cst_update],
    _j_ = [0, cst_state],
    _k_ = [0, cst_query],
    _l_ = [0, "State_rpc"],
    _m_ = [0, "msg"],
    _n_ = [0, "One_way"],
    _o_ = [0, cst_response],
    _p_ = [0, cst_query],
    _q_ = [0, "Streamable_plain_rpc"],
    _r_ = [0, cst_response],
    _s_ = [0, cst_query],
    _t_ = [0, "Streamable_pipe_rpc"],
    _u_ = [0, cst_update],
    _v_ = [0, cst_state],
    _w_ = [0, cst_query],
    _x_ = [0, "Streamable_state_rpc"],
    cst_babel = cst_babel$0,
    cst_Babel_Shape = cst_Babel_Shape$0;
   function compare(a_001, b_002){
    if(a_001 === b_002) return 0;
    a:
    {
     b:
     {
      c:
      {
       d:
       {
        switch(a_001[0]){
          case 0:
           if(0 !== b_002[0]) return -1;
           var n = caml_call2(Bin_shape[19][1], a_001[1], b_002[1]);
           return 0 === n
                   ? caml_call2(Bin_shape[19][1], a_001[2], b_002[2])
                   : n;
          case 1:
           switch(b_002[0]){
             case 1:
              var n$0 = caml_call2(Bin_shape[19][1], a_001[1], b_002[1]);
              if(0 !== n$0) return n$0;
              var n$1 = caml_call2(Bin_shape[19][1], a_001[2], b_002[2]);
              return 0 === n$1
                      ? caml_call2(Bin_shape[19][1], a_001[3], b_002[3])
                      : n$1;
             case 0:
              break a;
             default: return -1;
           }
          case 2:
           switch(b_002[0]){
             case 2:
              var n$2 = caml_call2(Bin_shape[19][1], a_001[1], b_002[1]);
              if(0 !== n$2) return n$2;
              var n$3 = caml_call2(Bin_shape[19][1], a_001[2], b_002[2]);
              if(0 !== n$3) return n$3;
              var n$4 = caml_call2(Bin_shape[19][1], a_001[3], b_002[3]);
              return 0 === n$4
                      ? caml_call2(Bin_shape[19][1], a_001[4], b_002[4])
                      : n$4;
             case 0:
              break a;
             case 1:
              break b;
             default: return -1;
           }
          case 3:
           switch(b_002[0]){
             case 3:
              return caml_call2(Bin_shape[19][1], a_001[1], b_002[1]);
             case 0:
              break a;
             case 1:
              break b;
             case 2:
              break c;
             default: return -1;
           }
          case 4:
           switch(b_002[0]){
             case 4:
              var n$5 = caml_call2(Bin_shape[19][1], a_001[1], b_002[1]);
              return 0 === n$5
                      ? caml_call2(Bin_shape[19][1], a_001[2], b_002[2])
                      : n$5;
             case 0:
              break a;
             case 1:
              break b;
             case 2:
              break c;
             case 3:
              break d;
             default: return -1;
           }
          case 5:
           switch(b_002[0]){
             case 5:
              var n$6 = caml_call2(Bin_shape[19][1], a_001[1], b_002[1]);
              return 0 === n$6
                      ? caml_call2(Bin_shape[19][1], a_001[2], b_002[2])
                      : n$6;
             case 6:
              return -1;
             case 0:
              break a;
             case 1:
              break b;
             case 2:
              break c;
             case 3:
              break d;
           }
           break;
          default:
           switch(b_002[0]){
             case 5:
              return 1;
             case 6:
              var n$7 = caml_call2(Bin_shape[19][1], a_001[1], b_002[1]);
              if(0 !== n$7) return n$7;
              var n$8 = caml_call2(Bin_shape[19][1], a_001[2], b_002[2]);
              return 0 === n$8
                      ? caml_call2(Bin_shape[19][1], a_001[3], b_002[3])
                      : n$8;
             case 0:
              break a;
             case 1:
              break b;
             case 2:
              break c;
             case 3:
              break d;
           }
        }
        return 1;
       }
       return 1;
      }
      return 1;
     }
     return 1;
    }
    return 1;
   }
   function sexp_of_t(param){
    switch(param[0]){
      case 0:
       var
        response_020 = param[2],
        query_018 = param[1],
        arg_021 = caml_call1(Bin_shape[19][3], response_020),
        bnds_017 = [0, [1, [0, _a_, [0, arg_021, 0]]], 0],
        arg_019 = caml_call1(Bin_shape[19][3], query_018),
        bnds_017$0 = [0, [1, [0, _b_, [0, arg_019, 0]]], bnds_017];
       return [1, [0, _c_, bnds_017$0]];
      case 1:
       var
        error_027 = param[3],
        response_025 = param[2],
        query_023 = param[1],
        arg_028 = caml_call1(Bin_shape[19][3], error_027),
        bnds_022 = [0, [1, [0, _d_, [0, arg_028, 0]]], 0],
        arg_026 = caml_call1(Bin_shape[19][3], response_025),
        bnds_022$0 = [0, [1, [0, _e_, [0, arg_026, 0]]], bnds_022],
        arg_024 = caml_call1(Bin_shape[19][3], query_023),
        bnds_022$1 = [0, [1, [0, _f_, [0, arg_024, 0]]], bnds_022$0];
       return [1, [0, _g_, bnds_022$1]];
      case 2:
       var
        error_036 = param[4],
        update_034 = param[3],
        state_032 = param[2],
        query_030 = param[1],
        arg_037 = caml_call1(Bin_shape[19][3], error_036),
        bnds_029 = [0, [1, [0, _h_, [0, arg_037, 0]]], 0],
        arg_035 = caml_call1(Bin_shape[19][3], update_034),
        bnds_029$0 = [0, [1, [0, _i_, [0, arg_035, 0]]], bnds_029],
        arg_033 = caml_call1(Bin_shape[19][3], state_032),
        bnds_029$1 = [0, [1, [0, _j_, [0, arg_033, 0]]], bnds_029$0],
        arg_031 = caml_call1(Bin_shape[19][3], query_030),
        bnds_029$2 = [0, [1, [0, _k_, [0, arg_031, 0]]], bnds_029$1];
       return [1, [0, _l_, bnds_029$2]];
      case 3:
       var
        msg_039 = param[1],
        arg_040 = caml_call1(Bin_shape[19][3], msg_039),
        bnds_038 = [0, [1, [0, _m_, [0, arg_040, 0]]], 0];
       return [1, [0, _n_, bnds_038]];
      case 4:
       var
        response_044 = param[2],
        query_042 = param[1],
        arg_045 = caml_call1(Bin_shape[19][3], response_044),
        bnds_041 = [0, [1, [0, _o_, [0, arg_045, 0]]], 0],
        arg_043 = caml_call1(Bin_shape[19][3], query_042),
        bnds_041$0 = [0, [1, [0, _p_, [0, arg_043, 0]]], bnds_041];
       return [1, [0, _q_, bnds_041$0]];
      case 5:
       var
        response_049 = param[2],
        query_047 = param[1],
        arg_050 = caml_call1(Bin_shape[19][3], response_049),
        bnds_046 = [0, [1, [0, _r_, [0, arg_050, 0]]], 0],
        arg_048 = caml_call1(Bin_shape[19][3], query_047),
        bnds_046$0 = [0, [1, [0, _s_, [0, arg_048, 0]]], bnds_046];
       return [1, [0, _t_, bnds_046$0]];
      default:
       var
        update_056 = param[3],
        state_054 = param[2],
        query_052 = param[1],
        arg_057 = caml_call1(Bin_shape[19][3], update_056),
        bnds_051 = [0, [1, [0, _u_, [0, arg_057, 0]]], 0],
        arg_055 = caml_call1(Bin_shape[19][3], state_054),
        bnds_051$0 = [0, [1, [0, _v_, [0, arg_055, 0]]], bnds_051],
        arg_053 = caml_call1(Bin_shape[19][3], query_052),
        bnds_051$1 = [0, [1, [0, _w_, [0, arg_053, 0]]], bnds_051$0];
       return [1, [0, _x_, bnds_051$1]];
    }
   }
   var
    T = [0, compare, sexp_of_t],
    sexp_of_t$0 = T[2],
    include = caml_call1(Core_Comparable[11], T),
    symbol = include[1],
    symbol$0 = include[2],
    symbol$1 = include[3],
    symbol$2 = include[4],
    symbol$3 = include[5],
    symbol$4 = include[6],
    equal = include[7],
    compare$0 = include[8],
    min = include[9],
    max = include[10],
    ascending = include[11],
    descending = include[12],
    between = include[13],
    clamp_exn = include[14],
    clamp = include[15],
    comparator = include[16],
    validate_lbound = include[17],
    validate_ubound = include[18],
    validate_bound = include[19],
    Replace_polymorphic_compare = include[20],
    Map = include[21],
    Set = include[22];
   function rpc(rpc){
    var
     _W_ = caml_call1(Async_rpc_kernel_Rpc[6][8], rpc)[1],
     _X_ = caml_call1(Bin_prot_Shape[15], _W_),
     _Y_ = caml_call1(Async_rpc_kernel_Rpc[6][7], rpc)[1];
    return [0, caml_call1(Bin_prot_Shape[15], _Y_), _X_];
   }
   function pipe_rpc(rpc){
    var
     _R_ = caml_call1(Async_rpc_kernel_Rpc[10][6], rpc)[1],
     _S_ = caml_call1(Bin_prot_Shape[15], _R_),
     _T_ = caml_call1(Async_rpc_kernel_Rpc[10][5], rpc)[1],
     _U_ = caml_call1(Bin_prot_Shape[15], _T_),
     _V_ = caml_call1(Async_rpc_kernel_Rpc[10][4], rpc)[1];
    return [1, caml_call1(Bin_prot_Shape[15], _V_), _U_, _S_];
   }
   function state_rpc(rpc){
    var
     _K_ = caml_call1(Async_rpc_kernel_Rpc[11][7], rpc)[1],
     _L_ = caml_call1(Bin_prot_Shape[15], _K_),
     _M_ = caml_call1(Async_rpc_kernel_Rpc[11][6], rpc)[1],
     _N_ = caml_call1(Bin_prot_Shape[15], _M_),
     _O_ = caml_call1(Async_rpc_kernel_Rpc[11][5], rpc)[1],
     _P_ = caml_call1(Bin_prot_Shape[15], _O_),
     _Q_ = caml_call1(Async_rpc_kernel_Rpc[11][4], rpc)[1];
    return [2, caml_call1(Bin_prot_Shape[15], _Q_), _P_, _N_, _L_];
   }
   function one_way(rpc){
    var _J_ = caml_call1(Async_rpc_kernel_Rpc[12][6], rpc)[1];
    return [3, caml_call1(Bin_prot_Shape[15], _J_)];
   }
   function streamable_plain_rpc(rpc){
    var
     _G_ = caml_call1(Streamable_Plain_rpc[6], rpc),
     _H_ = caml_call1(Bin_prot_Shape[15], _G_),
     _I_ = caml_call1(Streamable_Plain_rpc[5], rpc);
    return [4, caml_call1(Bin_prot_Shape[15], _I_), _H_];
   }
   function streamable_pipe_rpc(rpc){
    var
     _D_ = caml_call1(Streamable_Pipe_rpc[6], rpc),
     _E_ = caml_call1(Bin_prot_Shape[15], _D_),
     _F_ = caml_call1(Streamable_Pipe_rpc[5], rpc);
    return [5, caml_call1(Bin_prot_Shape[15], _F_), _E_];
   }
   function streamable_state_rpc(rpc){
    var
     _y_ = caml_call1(Streamable_State_rpc[7], rpc),
     _z_ = caml_call1(Bin_prot_Shape[15], _y_),
     _A_ = caml_call1(Streamable_State_rpc[6], rpc),
     _B_ = caml_call1(Bin_prot_Shape[15], _A_),
     _C_ = caml_call1(Streamable_State_rpc[5], rpc);
    return [6, caml_call1(Bin_prot_Shape[15], _C_), _B_, _z_];
   }
   caml_call1(Ppx_inline_test_lib[7], cst_babel);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Babel_Shape);
   var
    Babel_Shape =
      [0,
       sexp_of_t$0,
       symbol,
       symbol$0,
       symbol$1,
       symbol$2,
       symbol$3,
       symbol$4,
       equal,
       compare$0,
       min,
       max,
       ascending,
       descending,
       between,
       clamp_exn,
       clamp,
       comparator,
       validate_lbound,
       validate_ubound,
       validate_bound,
       Replace_polymorphic_compare,
       Map,
       Set,
       rpc,
       pipe_rpc,
       state_rpc,
       one_way,
       streamable_plain_rpc,
       streamable_pipe_rpc,
       streamable_state_rpc];
   runtime.caml_register_global(42, Babel_Shape, cst_Babel_Shape$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Babel__Pipe_extended
//# unitInfo: Requires: Async_kernel__Deferred, Async_kernel__Pipe, Core__Queue, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Babel_Pipe_extended$0 = "Babel__Pipe_extended",
    cst_babel$0 = "babel";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Core_Queue = global_data.Core__Queue,
    Async_kernel_Deferred = global_data.Async_kernel__Deferred,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Async_kernel_Pipe = global_data.Async_kernel__Pipe;
   caml_call1(Ppx_module_timer_runtime[4], cst_Babel_Pipe_extended$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_babel$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/pipe_extended.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_babel$0, "pipe_extended.ml");
   var
    sexp_of_t = Async_kernel_Pipe[1],
    sexp_of_pipe = Async_kernel_Pipe[2],
    Writer = Async_kernel_Pipe[3],
    Reader = Async_kernel_Pipe[4],
    create_reader = Async_kernel_Pipe[5],
    create_writer = Async_kernel_Pipe[6],
    create = Async_kernel_Pipe[7],
    empty = Async_kernel_Pipe[8],
    of_queue = Async_kernel_Pipe[9],
    of_list = Async_kernel_Pipe[10],
    singleton = Async_kernel_Pipe[11],
    unfold = Async_kernel_Pipe[12],
    of_sequence = Async_kernel_Pipe[13],
    to_sequence = Async_kernel_Pipe[14],
    close = Async_kernel_Pipe[15],
    close_read = Async_kernel_Pipe[16],
    is_closed = Async_kernel_Pipe[17],
    closed = Async_kernel_Pipe[18],
    Flushed_result = Async_kernel_Pipe[19],
    upstream_flushed = Async_kernel_Pipe[20],
    downstream_flushed = Async_kernel_Pipe[21],
    Consumer = Async_kernel_Pipe[22],
    add_consumer = Async_kernel_Pipe[23],
    length = Async_kernel_Pipe[24],
    is_empty = Async_kernel_Pipe[25],
    num_values_read = Async_kernel_Pipe[26],
    num_values_written = Async_kernel_Pipe[27],
    pushback = Async_kernel_Pipe[28],
    write = Async_kernel_Pipe[29],
    write_without_pushback = Async_kernel_Pipe[30],
    transfer_in = Async_kernel_Pipe[31],
    transfer_in_without_pushback = Async_kernel_Pipe[32],
    write_when_ready = Async_kernel_Pipe[33],
    write_if_open = Async_kernel_Pipe[34],
    write_without_pushback_if_open = Async_kernel_Pipe[35],
    read = Async_kernel_Pipe[36],
    read$0 = Async_kernel_Pipe[37],
    read_exn = Async_kernel_Pipe[38],
    read_exactly = Async_kernel_Pipe[39],
    read_now = Async_kernel_Pipe[40],
    read_now$0 = Async_kernel_Pipe[41],
    read_now_exn = Async_kernel_Pipe[42],
    peek = Async_kernel_Pipe[43],
    clear = Async_kernel_Pipe[44],
    read_all = Async_kernel_Pipe[45],
    values_available = Async_kernel_Pipe[46],
    read_choice = Async_kernel_Pipe[47],
    read_choice_single_consumer_ex = Async_kernel_Pipe[48],
    Flushed = Async_kernel_Pipe[49],
    fold = Async_kernel_Pipe[50],
    fold$0 = Async_kernel_Pipe[51],
    fold_without_pushback = Async_kernel_Pipe[52],
    iter = Async_kernel_Pipe[53],
    iter$0 = Async_kernel_Pipe[54],
    iter_without_pushback = Async_kernel_Pipe[55],
    transfer = Async_kernel_Pipe[56],
    transfer$0 = Async_kernel_Pipe[57],
    transfer_id = Async_kernel_Pipe[58],
    map = Async_kernel_Pipe[59],
    map$0 = Async_kernel_Pipe[60],
    concat_map_list = Async_kernel_Pipe[61],
    folding_map = Async_kernel_Pipe[62],
    filter_map = Async_kernel_Pipe[63],
    filter_map$0 = Async_kernel_Pipe[64],
    folding_filter_map = Async_kernel_Pipe[65],
    folding_filter_map$0 = Async_kernel_Pipe[66],
    filter = Async_kernel_Pipe[67],
    interleave = Async_kernel_Pipe[68],
    interleave_pipe = Async_kernel_Pipe[69],
    merge = Async_kernel_Pipe[70],
    concat = Async_kernel_Pipe[71],
    concat_pipe = Async_kernel_Pipe[72],
    fork = Async_kernel_Pipe[73],
    to_stream_deprecated = Async_kernel_Pipe[74],
    of_stream_deprecated = Async_kernel_Pipe[75],
    drain = Async_kernel_Pipe[76],
    drain_and_count = Async_kernel_Pipe[77],
    to_list = Async_kernel_Pipe[78],
    hash = Async_kernel_Pipe[79],
    equal = Async_kernel_Pipe[80],
    compare = Async_kernel_Pipe[81],
    size_budget = Async_kernel_Pipe[82],
    set_size_budget = Async_kernel_Pipe[83],
    reserved_space = Async_kernel_Pipe[84],
    reserve_space = Async_kernel_Pipe[85],
    show_debug_messages = Async_kernel_Pipe[86],
    check_invariant = Async_kernel_Pipe[87],
    set_info = Async_kernel_Pipe[88],
    cst_babel = cst_babel$0,
    cst_Babel_Pipe_extended = cst_Babel_Pipe_extended$0;
   function map_batched(t, f){
    var max_queue_length = 1000;
    return caml_call3
            (map,
             [0, max_queue_length],
             t,
             function(q){
              var _a_ = caml_call2(Core_Queue[53], q, f);
              return caml_call1(Async_kernel_Deferred[12], _a_);
             });
   }
   caml_call1(Ppx_inline_test_lib[7], cst_babel);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Babel_Pipe_extended);
   var
    Babel_Pipe_extended =
      [0,
       sexp_of_t,
       sexp_of_pipe,
       Writer,
       Reader,
       create_reader,
       create_writer,
       create,
       empty,
       of_queue,
       of_list,
       singleton,
       unfold,
       of_sequence,
       to_sequence,
       close,
       close_read,
       is_closed,
       closed,
       Flushed_result,
       upstream_flushed,
       downstream_flushed,
       Consumer,
       add_consumer,
       length,
       is_empty,
       num_values_read,
       num_values_written,
       pushback,
       write,
       write_without_pushback,
       transfer_in,
       transfer_in_without_pushback,
       write_when_ready,
       write_if_open,
       write_without_pushback_if_open,
       read,
       read$0,
       read_exn,
       read_exactly,
       read_now,
       read_now$0,
       read_now_exn,
       peek,
       clear,
       read_all,
       values_available,
       read_choice,
       read_choice_single_consumer_ex,
       Flushed,
       fold,
       fold$0,
       fold_without_pushback,
       iter,
       iter$0,
       iter_without_pushback,
       transfer,
       transfer$0,
       transfer_id,
       map,
       map$0,
       concat_map_list,
       folding_map,
       filter_map,
       filter_map$0,
       folding_filter_map,
       folding_filter_map$0,
       filter,
       interleave,
       interleave_pipe,
       merge,
       concat,
       concat_pipe,
       fork,
       to_stream_deprecated,
       of_stream_deprecated,
       drain,
       drain_and_count,
       to_list,
       hash,
       equal,
       compare,
       size_budget,
       set_size_budget,
       reserved_space,
       reserve_space,
       show_debug_messages,
       check_invariant,
       set_info,
       map_batched];
   runtime.caml_register_global
    (14, Babel_Pipe_extended, cst_Babel_Pipe_extended$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Babel__Generic_rpc
//# unitInfo: Requires: Async_rpc_kernel__Rpc, Babel__Shape, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Streamable__Pipe_rpc, Streamable__Plain_rpc, Streamable__State_rpc
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Babel_Generic_rpc$0 = "Babel__Generic_rpc",
    cst_babel$0 = "babel";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Babel_Shape = global_data.Babel__Shape,
    Async_rpc_kernel_Rpc = global_data.Async_rpc_kernel__Rpc,
    Streamable_Plain_rpc = global_data.Streamable__Plain_rpc,
    Streamable_Pipe_rpc = global_data.Streamable__Pipe_rpc,
    Streamable_State_rpc = global_data.Streamable__State_rpc,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Babel_Generic_rpc$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_babel$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/generic_rpc.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_babel$0, "generic_rpc.ml");
   var
    cst_babel = cst_babel$0,
    cst_Babel_Generic_rpc = cst_Babel_Generic_rpc$0;
   function description(param){
    switch(param[0]){
      case 0:
       var rpc = param[1]; return caml_call1(Async_rpc_kernel_Rpc[6][4], rpc);
      case 1:
       var pipe = param[1];
       return caml_call1(Async_rpc_kernel_Rpc[10][23], pipe);
      case 2:
       var state = param[1];
       return caml_call1(Async_rpc_kernel_Rpc[11][21], state);
      case 3:
       var one_way = param[1];
       return caml_call1(Async_rpc_kernel_Rpc[12][4], one_way);
      case 4:
       var streamable_plain = param[1];
       return caml_call1(Streamable_Plain_rpc[1], streamable_plain);
      case 5:
       var streamable_pipe = param[1];
       return caml_call1(Streamable_Pipe_rpc[1], streamable_pipe);
      default:
       var streamable_state = param[1];
       return caml_call1(Streamable_State_rpc[1], streamable_state);
    }
   }
   function shape(param){
    switch(param[0]){
      case 0:
       var rpc = param[1]; return caml_call1(Babel_Shape[24], rpc);
      case 1:
       var pipe = param[1]; return caml_call1(Babel_Shape[25], pipe);
      case 2:
       var state = param[1]; return caml_call1(Babel_Shape[26], state);
      case 3:
       var one_way = param[1]; return caml_call1(Babel_Shape[27], one_way);
      case 4:
       var streamable_plain = param[1];
       return caml_call1(Babel_Shape[28], streamable_plain);
      case 5:
       var streamable_pipe = param[1];
       return caml_call1(Babel_Shape[29], streamable_pipe);
      default:
       var streamable_state = param[1];
       return caml_call1(Babel_Shape[30], streamable_state);
    }
   }
   caml_call1(Ppx_inline_test_lib[7], cst_babel);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Babel_Generic_rpc);
   var Babel_Generic_rpc = [0, description, shape];
   runtime.caml_register_global
    (16, Babel_Generic_rpc, cst_Babel_Generic_rpc$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Babel__Direct_stream_writer
//# unitInfo: Requires: Async_kernel, Async_kernel__Deferred, Async_rpc_kernel__Rpc, Core, Core__Bag, Core__Fn, Core__Int, Core__List, Core__Option, Core__Set_once, Core__Type_equal, Core__Unique_id, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Babel_Direct_stream_writer$1 = "Babel__Direct_stream_writer",
    cst_babel$0 = "babel",
    cst_src_direct_stream_writer_m = "src/direct_stream_writer.ml";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Core_Bag = global_data.Core__Bag,
    Async_rpc_kernel_Rpc = global_data.Async_rpc_kernel__Rpc,
    Core_Int = global_data.Core__Int,
    Core_Fn = global_data.Core__Fn,
    Core_List = global_data.Core__List,
    Async_kernel_Deferred = global_data.Async_kernel__Deferred,
    Core_Option = global_data.Core__Option,
    Core_Set_once = global_data.Core__Set_once,
    Async_kernel = global_data.Async_kernel,
    Core_Type_equal = global_data.Core__Type_equal,
    Core = global_data.Core,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Core_Unique_id = global_data.Core__Unique_id;
   caml_call1(Ppx_module_timer_runtime[4], cst_Babel_Direct_stream_writer$1);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_babel$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_direct_stream_writer_m);
   caml_call2(Ppx_inline_test_lib[6], cst_babel$0, "direct_stream_writer.ml");
   var
    Transformation_id = caml_call1(Core_Unique_id[2], 0),
    _b_ = [0, cst_src_direct_stream_writer_m, 157, 4461, 4491],
    _c_ = [0, cst_src_direct_stream_writer_m, 158, 4507, 4537],
    _a_ = [0, "_"],
    cst_Babel_Direct_stream_writer =
      "[Babel.Direct_stream_writer] unique type witness",
    cst_babel = cst_babel$0,
    cst_Babel_Direct_stream_writer$0 = cst_Babel_Direct_stream_writer$1;
   function create_witnessed(writer, witness){
    return [0, writer, Core_Option[58], witness, 0];
   }
   function create(writer){
    function _A_(param){return _a_;}
    return create_witnessed
            (writer,
             caml_call2
              (Core_Type_equal[8][3], cst_Babel_Direct_stream_writer, _A_));
   }
   function map_input_with_id(param, f, id){
    var
     transformation_ids = param[4],
     output_witness = param[3],
     transform = param[2],
     writer = param[1],
     _z_ = [0, id, transformation_ids];
    return [0,
            writer,
            function(a){return caml_call1(transform, caml_call1(f, a));},
            output_witness,
            _z_];
   }
   function filter_map_input_with_id(param, f, id){
    var
     transformation_ids = param[4],
     output_witness = param[3],
     transform = param[2],
     writer = param[1],
     _x_ = [0, id, transformation_ids];
    return [0,
            writer,
            function(a){
             var _y_ = caml_call1(f, a);
             return caml_call2(Core_Option[32], _y_, transform);
            },
            output_witness,
            _x_];
   }
   function map_input(t, f){
    return map_input_with_id(t, f, caml_call1(Transformation_id[45], 0));
   }
   function filter_map_input(t, f){
    return filter_map_input_with_id
            (t, f, caml_call1(Transformation_id[45], 0));
   }
   function close(param){
    var writer = param[1];
    return caml_call1(Async_rpc_kernel_Rpc[10][10][3], writer);
   }
   function closed(param){
    var writer = param[1];
    return caml_call1(Async_rpc_kernel_Rpc[10][10][4], writer);
   }
   function flushed(param){
    var writer = param[1];
    return caml_call1(Async_rpc_kernel_Rpc[10][10][5], writer);
   }
   function is_closed(param){
    var writer = param[1];
    return caml_call1(Async_rpc_kernel_Rpc[10][10][6], writer);
   }
   function write(t, a$0){
    if(is_closed(t)) return -1025106484;
    var transform = t[2], writer = t[1], match = caml_call1(transform, a$0);
    if(! match) return [0, 933108739, Async_kernel_Deferred[18]];
    var a = match[1];
    return caml_call2(Async_rpc_kernel_Rpc[10][10][1], writer, a);
   }
   function write_without_pushback(t, a$0){
    if(is_closed(t)) return -1025106484;
    var transform = t[2], writer = t[1], match = caml_call1(transform, a$0);
    if(! match) return 17724;
    var a = match[1];
    return caml_call2(Async_rpc_kernel_Rpc[10][10][2], writer, a);
   }
   function compatible(param, _u_){
    var
     writer_transformation_ids = _u_[4],
     writer_output_witness = _u_[3],
     transformation_ids = param[4],
     output_witness = param[3],
     _v_ =
       caml_call2
        (Core_Type_equal[8][8], output_witness, writer_output_witness);
    if(! _v_) return _v_;
    function _w_(a_005, b_006){
     return caml_call2(Transformation_id[20], a_005, b_006);
    }
    return 0
            ===
             caml_call3
              (Core[466], _w_, transformation_ids, writer_transformation_ids)
            ? 1
            : 0;
   }
   function write_without_pushback$0(param, a){
    var
     transform = param[2],
     group = param[1],
     match = caml_call1(transform, a);
    if(! match) return 0;
    var a$0 = match[1];
    return caml_call2(Async_rpc_kernel_Rpc[10][10][8][8], group, a$0);
   }
   function write$0(param, a){
    var
     transform = param[2],
     group = param[1],
     match = caml_call1(transform, a);
    if(! match) return caml_call1(Async_kernel[20], 0);
    var a$0 = match[1];
    return caml_call2(Async_rpc_kernel_Rpc[10][10][8][7], group, a$0);
   }
   var create$0 = Core_Set_once[5];
   function set_last_value(t, a){
    if(! t) return 0;
    var last_value = t[1];
    return caml_call1(Core_Set_once[11], last_value)
            ? caml_call3(Core_Set_once[7], last_value, _b_, [0, a])
            : (caml_call2(Core_Set_once[10], last_value, _c_)[1] = a, 0);
   }
   function create$1(store_last_value_and_send_on_a){
    var
     _t_ = store_last_value_and_send_on_a ? [0, caml_call1(create$0, 0)] : 0;
    return [0, caml_call1(Core_Bag[22], 0), _t_];
   }
   function add_exn(param, writer$1){
    var
     last_value$0 = param[2],
     subgroups = param[1],
     _o_ = caml_call2(Core_Fn[6], compatible, writer$1),
     match = caml_call2(Core_Bag[15], subgroups, _o_);
    if(match){
     var
      subgroup$0 = match[1],
      writer_output_witness = writer$1[3],
      writer$0 = writer$1[1],
      output_witness$0 = subgroup$0[3],
      group$0 = subgroup$0[1];
     caml_call2
      (Core_Type_equal[8][10], output_witness$0, writer_output_witness);
     return caml_call2(Async_rpc_kernel_Rpc[10][10][8][5], group$0, writer$0);
    }
    var
     send_last_value_on_add = last_value$0 ? 1 : 0,
     transformation_ids = writer$1[4],
     output_witness = writer$1[3],
     transform = writer$1[2],
     writer = writer$1[1],
     group =
       caml_call3
        (Async_rpc_kernel_Rpc[10][10][8][2],
         0,
         [0, send_last_value_on_add],
         0);
    caml_call2(Async_rpc_kernel_Rpc[10][10][8][5], group, writer);
    var subgroup = [0, group, transform, output_witness, transformation_ids];
    caml_call2(Core_Bag[24], subgroups, subgroup);
    function _p_(_s_){return write_without_pushback$0(subgroup, _s_);}
    if(last_value$0)
     var
      last_value = last_value$0[1],
      _m_ = function(_r_){return _r_[1];},
      _n_ = caml_call1(Core_Set_once[9], last_value),
      _q_ = caml_call2(Core_Option[34], _n_, _m_);
    else
     var _q_ = 0;
    return caml_call2(Core_Option[46], _q_, _p_);
   }
   function write_without_pushback$1(param, a){
    var
     last_value = param[2],
     subgroups = param[1],
     _l_ = caml_call2(Core_Fn[6], write_without_pushback$0, a);
    caml_call2(Core_Bag[7], subgroups, _l_);
    return set_last_value(last_value, a);
   }
   function write$1(param, a){
    var
     last_value = param[2],
     subgroups = param[1],
     _i_ = caml_call2(Core_Fn[6], write$0, a),
     _j_ = caml_call1(Core_Bag[17], subgroups),
     _k_ = caml_call2(Core_List[51], _j_, _i_),
     all_written = caml_call1(Async_kernel_Deferred[22], _k_);
    set_last_value(last_value, a);
    return all_written;
   }
   function length(t){
    function _d_(param){
     var group = param[1];
     return caml_call1(Async_rpc_kernel_Rpc[10][10][8][10], group);
    }
    var _e_ = t[1];
    function _f_(_h_, _g_){return _h_ + _g_ | 0;}
    return caml_call3(Core_Bag[14], [0, Core_Int[59], _f_], _e_, _d_);
   }
   function num_subgroups(t){return caml_call1(Core_Bag[5], t[1]);}
   var For_testing = [0, num_subgroups];
   caml_call1(Ppx_inline_test_lib[7], cst_babel);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Babel_Direct_stream_writer$0);
   var
    Babel_Direct_stream_writer =
      [0,
       create,
       map_input,
       filter_map_input,
       write,
       write_without_pushback,
       close,
       closed,
       flushed,
       is_closed,
       [0,
        Transformation_id,
        create_witnessed,
        map_input_with_id,
        filter_map_input_with_id],
       [0,
        create$1,
        add_exn,
        write$1,
        write_without_pushback$1,
        length,
        For_testing]];
   runtime.caml_register_global
    (27, Babel_Direct_stream_writer, cst_Babel_Direct_stream_writer$1);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Babel__Babel_fn
//# unitInfo: Requires: Base__Applicative, Core__Fn, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Babel_Babel_fn$0 = "Babel__Babel_fn",
    cst_babel$0 = "babel";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Core_Fn = global_data.Core__Fn,
    Base_Applicative = global_data.Base__Applicative;
   caml_call1(Ppx_module_timer_runtime[4], cst_Babel_Babel_fn$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_babel$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/babel_fn.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_babel$0, "babel_fn.ml");
   var
    const$0 = Core_Fn[1],
    non = Core_Fn[2],
    forever = Core_Fn[3],
    apply_n_times = Core_Fn[4],
    compose = Core_Fn[5],
    flip = Core_Fn[6],
    cst_babel = cst_babel$0,
    cst_Babel_Babel_fn = cst_Babel_Babel_fn$0;
   function _a_(t, f, a){return caml_call1(f, caml_call1(t, a));}
   function map2(t1, t2, f, a){
    var _b_ = caml_call1(t2, a);
    return caml_call2(f, caml_call1(t1, a), _b_);
   }
   var
    map = [0, -198771759, _a_],
    include = caml_call1(Base_Applicative[14], [0, const$0, map2, map]),
    return$0 = include[1],
    map$0 = include[2],
    both = include[3],
    symbol = include[4],
    symbol$0 = include[5],
    symbol$1 = include[6],
    symbol_map = include[7],
    apply = include[8],
    map2$0 = include[9],
    map3 = include[10],
    all = include[11],
    all_unit = include[12],
    Applicative_infix = include[13];
   function map_input(t, f, x){return caml_call1(t, caml_call1(f, x));}
   caml_call1(Ppx_inline_test_lib[7], cst_babel);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Babel_Babel_fn);
   var
    Babel_Babel_fn =
      [0,
       const$0,
       non,
       forever,
       apply_n_times,
       compose,
       flip,
       return$0,
       map$0,
       both,
       symbol,
       symbol$0,
       symbol$1,
       symbol_map,
       apply,
       map2$0,
       map3,
       all,
       all_unit,
       Applicative_infix,
       map_input];
   runtime.caml_register_global(13, Babel_Babel_fn, cst_Babel_Babel_fn$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Babel__Caller
//# unitInfo: Requires: Async_kernel__Deferred, Async_kernel__Pipe, Async_rpc_kernel__Rpc, Async_rpc_kernel__Versioned_rpc, Babel__Babel_fn, Babel__Generic_rpc, Babel__Pipe_extended, Babel__Shape, Core, Core__Or_error, Core__Result, Core__Tuple, Nonempty_list, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Streamable__Pipe_rpc, Streamable__Plain_rpc, Streamable__State_rpc, Tilde_f
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Babel_Caller$0 = "Babel__Caller",
    cst_babel$0 = "babel";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Nonempty_list = global_data.Nonempty_list,
    Babel_Pipe_extended = global_data.Babel__Pipe_extended,
    Core_Tuple = global_data.Core__Tuple,
    Core_Or_error = global_data.Core__Or_error,
    Tilde_f = global_data.Tilde_f,
    Async_kernel_Deferred = global_data.Async_kernel__Deferred,
    Async_kernel_Pipe = global_data.Async_kernel__Pipe,
    Streamable_State_rpc = global_data.Streamable__State_rpc,
    Streamable_Pipe_rpc = global_data.Streamable__Pipe_rpc,
    Streamable_Plain_rpc = global_data.Streamable__Plain_rpc,
    Async_rpc_kernel_Rpc = global_data.Async_rpc_kernel__Rpc,
    Core_Result = global_data.Core__Result,
    Async_rpc_kernel_Versioned_rpc =
      global_data.Async_rpc_kernel__Versioned_rpc,
    Core = global_data.Core,
    Babel_Babel_fn = global_data.Babel__Babel_fn,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Babel_Shape = global_data.Babel__Shape,
    Babel_Generic_rpc = global_data.Babel__Generic_rpc,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Babel_Caller$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_babel$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/caller.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_babel$0, "caller.ml");
   var
    _a_ = [0, "caller_rpcs"],
    _b_ = [0, "callee_rpcs"],
    cst_Could_not_find_any_support =
      "Could not find any supported rpc in callee",
    cst_babel = cst_babel$0,
    cst_Babel_Caller = cst_Babel_Caller$0;
   function rpc(r){return r[2];}
   function dispatch(r){return r[1];}
   function description(t){return caml_call1(Babel_Generic_rpc[1], t[2]);}
   function shape(t){
    var _cz_ = caml_call1(Babel_Generic_rpc[2], t[2]);
    return [0, description(t), _cz_];
   }
   function map(t, f){
    function _cy_(s){
     var rpc = s[2], dispatch = s[1];
     function dispatch$0(conn){
      return caml_call1(f, caml_call1(dispatch, conn));
     }
     return [0, dispatch$0, rpc];
    }
    return caml_call2(Nonempty_list[28], t, _cy_);
   }
   function shapes(t){return caml_call2(Nonempty_list[28], t, shape);}
   function supported_rpcs(t){return caml_call2(Nonempty_list[28], t, rpc);}
   function descriptions(t){
    return caml_call2(Nonempty_list[28], t, description);
   }
   function print_shapes(t){
    var x_005 = shapes(t);
    function _cw_(param){
     var
      arg1_002 = param[2],
      arg0_001 = param[1],
      res0_003 = caml_call1(Async_rpc_kernel_Rpc[1][1], arg0_001),
      res1_004 = caml_call1(Babel_Shape[1], arg1_002);
     return [1, [0, res0_003, [0, res1_004, 0]]];
    }
    var _cx_ = caml_call2(Nonempty_list[4], _cw_, x_005);
    return caml_call2(Core[256], 0, _cx_);
   }
   function find_strategy(t, menu){
    function _cr_(strategy){
     var _cv_ = description(strategy);
     return caml_call2(Async_rpc_kernel_Versioned_rpc[1][6], menu, _cv_);
    }
    var match = caml_call2(Nonempty_list[45], t, _cr_);
    if(match){var strategy = match[1]; return [0, strategy];}
    var
     callee_rpcs = caml_call1(Async_rpc_kernel_Versioned_rpc[1][4], menu),
     caller_rpcs = descriptions(t),
     _cs_ =
       [0,
        [1,
         [0,
          _a_,
          [0,
           caml_call2
            (Nonempty_list[4], Async_rpc_kernel_Rpc[1][1], caller_rpcs),
           0]]],
        0],
     _ct_ =
       [0,
        [1,
         [0,
          _b_,
          [0,
           caml_call2(Core[472], Async_rpc_kernel_Rpc[1][1], callee_rpcs),
           0]]],
        _cs_],
     _cu_ =
       [1,
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_Could_not_find_any_support),
         _ct_]];
    return caml_call1(Core_Or_error[45], _cu_);
   }
   function to_dispatch_fun(t, menu){
    var _cq_ = find_strategy(t, menu);
    return caml_call2(Core_Or_error[53], _cq_, dispatch);
   }
   function description$0(t, menu){
    var _cp_ = find_strategy(t, menu);
    return caml_call2(Core_Or_error[53], _cp_, description);
   }
   var of_list_decreasing_preference = Nonempty_list[81];
   function map_query(t){
    var _cm_ = Babel_Babel_fn[20];
    function _cn_(_co_){return map(t, _co_);}
    return caml_call2(Tilde_f[3][2], _cn_, _cm_);
   }
   function map_response(t){
    var _cj_ = Babel_Babel_fn[8];
    function _ck_(_cl_){return map(t, _cl_);}
    return caml_call2(Tilde_f[3][2], _ck_, _cj_);
   }
   function can_dispatch(t, connection_with_menu){
    var
     menu =
       caml_call1(Async_rpc_kernel_Versioned_rpc[2][4], connection_with_menu),
     _ci_ = find_strategy(t, menu);
    return caml_call1(Core_Or_error[35], _ci_);
   }
   function dispatch_multi(t, connection_with_menu, query, on_error){
    var
     menu =
       caml_call1(Async_rpc_kernel_Versioned_rpc[2][4], connection_with_menu),
     error = to_dispatch_fun(t, menu);
    if(0 !== error[0]) return caml_call1(on_error, error);
    var f = error[1];
    return caml_call2
            (f,
             caml_call1
              (Async_rpc_kernel_Versioned_rpc[2][3], connection_with_menu),
             query);
   }
   function dispatch_multi_or_error_deferr(t, connection_with_menu, query){
    return dispatch_multi
            (t, connection_with_menu, query, Async_kernel_Deferred[12]);
   }
   function dispatch_multi_or_error(t, connection_with_menu, query){
    return dispatch_multi
            (t, connection_with_menu, query, function(_ch_){return _ch_;});
   }
   function dispatch_multi_exn(t, connection_with_menu, query){
    return dispatch_multi(t, connection_with_menu, query, Core[255]);
   }
   function adder(t, rpc, f){
    return caml_call1
            (of_list_decreasing_preference,
             [0, caml_call1(f, rpc), [0, t, 0]]);
   }
   function singleton(rpc){
    var _cg_ = [0, caml_call1(Async_rpc_kernel_Rpc[6][16], rpc), [0, rpc]];
    return caml_call1(Nonempty_list[62], _cg_);
   }
   function add(_ce_){
    return function(_cf_){return adder(_ce_, _cf_, singleton);};
   }
   function map_response$0(t){
    var
     _ca_ = caml_call1(Tilde_f[16], Core_Or_error[53]),
     _cb_ = Async_kernel_Deferred[13],
     _cc_ = map_response(t),
     _cd_ = caml_call2(Tilde_f[3][2], _cc_, _cb_);
    return caml_call2(Tilde_f[3][2], _cd_, _ca_);
   }
   var
    Rpc =
      [0,
       dispatch_multi_or_error_deferr,
       singleton,
       add,
       map_query,
       map_response$0];
   function singleton$0(rpc){
    var _b$_ = [0, caml_call1(Async_rpc_kernel_Rpc[6][14], rpc), [0, rpc]];
    return caml_call1(Nonempty_list[62], _b$_);
   }
   function add$0(_b9_){
    return function(_b__){return adder(_b9_, _b__, singleton$0);};
   }
   function map_response$1(t){
    var
     _b5_ = caml_call1(Tilde_f[16], Core_Result[46]),
     _b6_ = Async_kernel_Deferred[13],
     _b7_ = map_response(t),
     _b8_ = caml_call2(Tilde_f[3][2], _b7_, _b6_);
    return caml_call2(Tilde_f[3][2], _b8_, _b5_);
   }
   var Rpc$0 = [0, singleton$0, add$0, map_query, map_response$1];
   function singleton$1(rpc){
    var _b4_ = [0, caml_call1(Async_rpc_kernel_Rpc[6][17], rpc), [0, rpc]];
    return caml_call1(Nonempty_list[62], _b4_);
   }
   function add$1(_b2_){
    return function(_b3_){return adder(_b2_, _b3_, singleton$1);};
   }
   function map_response$2(t){
    var _b0_ = Async_kernel_Deferred[13], _b1_ = map_response(t);
    return caml_call2(Tilde_f[3][2], _b1_, _b0_);
   }
   var
    Rpc_exn =
      [0, dispatch_multi_exn, singleton$1, add$1, map_query, map_response$2];
   function singleton$2(rpc){
    var _bZ_ = [0, caml_call1(Async_rpc_kernel_Rpc[10][13], rpc), [1, rpc]];
    return caml_call1(Nonempty_list[62], _bZ_);
   }
   function add$2(_bX_){
    return function(_bY_){return adder(_bX_, _bY_, singleton$2);};
   }
   function map_error(t){
    var
     _bR_ = caml_call1(Tilde_f[16], Core_Result[47]),
     _bS_ = caml_call1(Tilde_f[16], Core_Or_error[53]),
     _bT_ = Async_kernel_Deferred[13],
     _bU_ = map_response(t),
     _bV_ = caml_call2(Tilde_f[3][2], _bU_, _bT_),
     _bW_ = caml_call2(Tilde_f[3][2], _bV_, _bS_);
    return caml_call2(Tilde_f[3][2], _bW_, _bR_);
   }
   function filter_map_response(t){
    var
     _bH_ = caml_call1(Async_kernel_Pipe[64], 0),
     _bI_ = Core_Tuple[1][12],
     _bJ_ = caml_call1(Tilde_f[16], Core_Result[46]),
     _bK_ = caml_call1(Tilde_f[16], Core_Or_error[53]),
     _bL_ = Async_kernel_Deferred[13],
     _bM_ = map_response(t),
     _bN_ = caml_call2(Tilde_f[3][2], _bM_, _bL_),
     _bO_ = caml_call2(Tilde_f[3][2], _bN_, _bK_),
     _bP_ = caml_call2(Tilde_f[3][2], _bO_, _bJ_),
     _bQ_ = caml_call2(Tilde_f[3][2], _bP_, _bI_);
    return caml_call2(Tilde_f[3][2], _bQ_, _bH_);
   }
   function map_response$3(t){
    var
     _bx_ = Babel_Pipe_extended[89],
     _by_ = Core_Tuple[1][12],
     _bz_ = caml_call1(Tilde_f[16], Core_Result[46]),
     _bA_ = caml_call1(Tilde_f[16], Core_Or_error[53]),
     _bB_ = Async_kernel_Deferred[13],
     _bC_ = map_response(t),
     _bD_ = caml_call2(Tilde_f[3][2], _bC_, _bB_),
     _bE_ = caml_call2(Tilde_f[3][2], _bD_, _bA_),
     _bF_ = caml_call2(Tilde_f[3][2], _bE_, _bz_),
     _bG_ = caml_call2(Tilde_f[3][2], _bF_, _by_);
    return caml_call2(Tilde_f[3][2], _bG_, _bx_);
   }
   function singleton$3(rpc){
    var _bw_ = [0, caml_call1(Async_rpc_kernel_Rpc[10][15], rpc), [1, rpc]];
    return caml_call1(Nonempty_list[62], _bw_);
   }
   function add$3(_bu_){
    return function(_bv_){return adder(_bu_, _bv_, singleton$3);};
   }
   function filter_map_response$0(t){
    var
     _bo_ = caml_call1(Async_kernel_Pipe[64], 0),
     _bp_ = Core_Tuple[1][12],
     _bq_ = Async_kernel_Deferred[13],
     _br_ = map_response(t),
     _bs_ = caml_call2(Tilde_f[3][2], _br_, _bq_),
     _bt_ = caml_call2(Tilde_f[3][2], _bs_, _bp_);
    return caml_call2(Tilde_f[3][2], _bt_, _bo_);
   }
   function map_response$4(t){
    var
     _bi_ = Babel_Pipe_extended[89],
     _bj_ = Core_Tuple[1][12],
     _bk_ = Async_kernel_Deferred[13],
     _bl_ = map_response(t),
     _bm_ = caml_call2(Tilde_f[3][2], _bl_, _bk_),
     _bn_ = caml_call2(Tilde_f[3][2], _bm_, _bj_);
    return caml_call2(Tilde_f[3][2], _bn_, _bi_);
   }
   var Id = [0];
   function map$0(t, f){
    if(0 !== t[0]) return t;
    var a = t[1];
    return [0, caml_call1(f, a)];
   }
   function map$1(t, f, k){return caml_call1(f, caml_call1(t, k));}
   function dispatch_multi$0(t, connection_with_menu, query, f){
    var
     menu =
       caml_call1(Async_rpc_kernel_Versioned_rpc[2][4], connection_with_menu),
     error = to_dispatch_fun(t, menu);
    if(0 !== error[0]) return caml_call1(Async_kernel_Deferred[12], error);
    var dispatch = error[1];
    return caml_call3
            (dispatch,
             caml_call1
              (Async_rpc_kernel_Versioned_rpc[2][3], connection_with_menu),
             query,
             f);
   }
   function singleton$4(rpc){
    function dispatch(connection, query, f){
     function _bc_(id){return [0, rpc, connection, id];}
     var
      _bd_ = caml_call1(Tilde_f[16], Core_Result[46]),
      _be_ = caml_call1(Tilde_f[16], Core_Or_error[53]),
      _bf_ =
        caml_call4(Async_rpc_kernel_Rpc[10][16], rpc, connection, query, f),
      _bg_ = caml_call1(Async_kernel_Deferred[13], _bf_),
      _bh_ = caml_call2(Tilde_f[3][2], _bg_, _be_);
     return caml_call1(caml_call2(Tilde_f[3][2], _bh_, _bd_), _bc_);
    }
    return caml_call1(Nonempty_list[62], [0, dispatch, [1, rpc]]);
   }
   function add$4(_ba_){
    return function(_bb_){return adder(_ba_, _bb_, singleton$4);};
   }
   function map_error$0(t){
    var
     _a5_ = caml_call1(Tilde_f[16], Core_Result[47]),
     _a6_ = caml_call1(Tilde_f[16], Core_Or_error[53]),
     _a7_ = Async_kernel_Deferred[13],
     _a8_ = map_response(t),
     _a9_ = caml_call2(Tilde_f[3][2], _a8_, map$1),
     _a__ = caml_call2(Tilde_f[3][2], _a9_, _a7_),
     _a$_ = caml_call2(Tilde_f[3][2], _a__, _a6_);
    return caml_call2(Tilde_f[3][2], _a$_, _a5_);
   }
   function map_response$5(t){
    var
     _a2_ = Tilde_f[7],
     _a3_ = map_response(t),
     _a4_ = caml_call2(Tilde_f[3][2], _a3_, _a2_);
    return caml_call2(Tilde_f[3][2], _a4_, map$0);
   }
   function abort(param){
    var id = param[3], connection = param[2], rpc = param[1];
    return caml_call3(Async_rpc_kernel_Rpc[10][18], rpc, connection, id);
   }
   function singleton$5(rpc){
    var _a1_ = [0, caml_call1(Async_rpc_kernel_Rpc[11][13], rpc), [2, rpc]];
    return caml_call1(Nonempty_list[62], _a1_);
   }
   function add$5(_aZ_){
    return function(_a0_){return adder(_aZ_, _a0_, singleton$5);};
   }
   function map_state(t){
    var
     _aR_ = Core_Tuple[2][12],
     _aS_ = caml_call1(Tilde_f[16], Core_Result[46]),
     _aT_ = caml_call1(Tilde_f[16], Core_Or_error[53]),
     _aU_ = Async_kernel_Deferred[13],
     _aV_ = map_response(t),
     _aW_ = caml_call2(Tilde_f[3][2], _aV_, _aU_),
     _aX_ = caml_call2(Tilde_f[3][2], _aW_, _aT_),
     _aY_ = caml_call2(Tilde_f[3][2], _aX_, _aS_);
    return caml_call2(Tilde_f[3][2], _aY_, _aR_);
   }
   function filter_map_update(t){
    var
     _aH_ = caml_call1(Async_kernel_Pipe[64], 0),
     _aI_ = Core_Tuple[2][13],
     _aJ_ = caml_call1(Tilde_f[16], Core_Result[46]),
     _aK_ = caml_call1(Tilde_f[16], Core_Or_error[53]),
     _aL_ = Async_kernel_Deferred[13],
     _aM_ = map_response(t),
     _aN_ = caml_call2(Tilde_f[3][2], _aM_, _aL_),
     _aO_ = caml_call2(Tilde_f[3][2], _aN_, _aK_),
     _aP_ = caml_call2(Tilde_f[3][2], _aO_, _aJ_),
     _aQ_ = caml_call2(Tilde_f[3][2], _aP_, _aI_);
    return caml_call2(Tilde_f[3][2], _aQ_, _aH_);
   }
   function map_update(t){
    var
     _ax_ = Babel_Pipe_extended[89],
     _ay_ = Core_Tuple[2][13],
     _az_ = caml_call1(Tilde_f[16], Core_Result[46]),
     _aA_ = caml_call1(Tilde_f[16], Core_Or_error[53]),
     _aB_ = Async_kernel_Deferred[13],
     _aC_ = map_response(t),
     _aD_ = caml_call2(Tilde_f[3][2], _aC_, _aB_),
     _aE_ = caml_call2(Tilde_f[3][2], _aD_, _aA_),
     _aF_ = caml_call2(Tilde_f[3][2], _aE_, _az_),
     _aG_ = caml_call2(Tilde_f[3][2], _aF_, _ay_);
    return caml_call2(Tilde_f[3][2], _aG_, _ax_);
   }
   function map_error$1(t){
    var
     _ar_ = caml_call1(Tilde_f[16], Core_Result[47]),
     _as_ = caml_call1(Tilde_f[16], Core_Or_error[53]),
     _at_ = Async_kernel_Deferred[13],
     _au_ = map_response(t),
     _av_ = caml_call2(Tilde_f[3][2], _au_, _at_),
     _aw_ = caml_call2(Tilde_f[3][2], _av_, _as_);
    return caml_call2(Tilde_f[3][2], _aw_, _ar_);
   }
   function singleton$6(rpc){
    var _aq_ = [0, caml_call1(Async_rpc_kernel_Rpc[12][11], rpc), [3, rpc]];
    return caml_call1(Nonempty_list[62], _aq_);
   }
   function add$6(_ao_){
    return function(_ap_){return adder(_ao_, _ap_, singleton$6);};
   }
   var One_way = [0, dispatch_multi_or_error, singleton$6, add$6, map_query];
   function singleton$7(rpc){
    var _an_ = [0, caml_call1(Async_rpc_kernel_Rpc[12][12], rpc), [3, rpc]];
    return caml_call1(Nonempty_list[62], _an_);
   }
   function add$7(_al_){
    return function(_am_){return adder(_al_, _am_, singleton$7);};
   }
   var One_way_exn = [0, dispatch_multi_exn, singleton$7, add$7, map_query];
   function singleton$8(rpc){
    var _ak_ = [0, caml_call1(Async_rpc_kernel_Rpc[12][9], rpc), [3, rpc]];
    return caml_call1(Nonempty_list[62], _ak_);
   }
   function add$8(_ai_){
    return function(_aj_){return adder(_ai_, _aj_, singleton$8);};
   }
   var One_way$0 = [0, singleton$8, add$8, map_query];
   function singleton$9(rpc){
    var _ah_ = [0, caml_call1(Streamable_Plain_rpc[3], rpc), [4, rpc]];
    return caml_call1(Nonempty_list[62], _ah_);
   }
   function add$9(_af_){
    return function(_ag_){return adder(_af_, _ag_, singleton$9);};
   }
   function map_response$6(t){
    var
     _$_ = caml_call1(Tilde_f[16], Core_Or_error[53]),
     _aa_ = caml_call1(Tilde_f[16], Core_Or_error[53]),
     _ab_ = Async_kernel_Deferred[13],
     _ac_ = map_response(t),
     _ad_ = caml_call2(Tilde_f[3][2], _ac_, _ab_),
     _ae_ = caml_call2(Tilde_f[3][2], _ad_, _aa_);
    return caml_call2(Tilde_f[3][2], _ae_, _$_);
   }
   var
    Streamable_plain_rpc =
      [0,
       dispatch_multi_or_error_deferr,
       singleton$9,
       add$9,
       map_query,
       map_response$6];
   function singleton$10(rpc){
    var ___ = [0, caml_call1(Streamable_Pipe_rpc[3], rpc), [5, rpc]];
    return caml_call1(Nonempty_list[62], ___);
   }
   function add$10(_Y_){
    return function(_Z_){return adder(_Y_, _Z_, singleton$10);};
   }
   function filter_map_response$1(t){
    var
     _Q_ = caml_call1(Async_kernel_Pipe[64], 0),
     _R_ = caml_call1(Tilde_f[16], Core_Or_error[53]),
     _S_ = caml_call1(Tilde_f[16], Core_Or_error[53]),
     _T_ = Async_kernel_Deferred[13],
     _U_ = map_response(t),
     _V_ = caml_call2(Tilde_f[3][2], _U_, _T_),
     _W_ = caml_call2(Tilde_f[3][2], _V_, _S_),
     _X_ = caml_call2(Tilde_f[3][2], _W_, _R_);
    return caml_call2(Tilde_f[3][2], _X_, _Q_);
   }
   function map_response$7(t){
    var
     _I_ = Babel_Pipe_extended[89],
     _J_ = caml_call1(Tilde_f[16], Core_Or_error[53]),
     _K_ = caml_call1(Tilde_f[16], Core_Or_error[53]),
     _L_ = Async_kernel_Deferred[13],
     _M_ = map_response(t),
     _N_ = caml_call2(Tilde_f[3][2], _M_, _L_),
     _O_ = caml_call2(Tilde_f[3][2], _N_, _K_),
     _P_ = caml_call2(Tilde_f[3][2], _O_, _J_);
    return caml_call2(Tilde_f[3][2], _P_, _I_);
   }
   function singleton$11(rpc){
    var _H_ = [0, caml_call1(Streamable_State_rpc[3], rpc), [6, rpc]];
    return caml_call1(Nonempty_list[62], _H_);
   }
   function add$11(_F_){
    return function(_G_){return adder(_F_, _G_, singleton$11);};
   }
   function map_state$0(t){
    var
     _x_ = Core_Tuple[1][12],
     _y_ = caml_call1(Tilde_f[16], Core_Or_error[53]),
     _z_ = caml_call1(Tilde_f[16], Core_Or_error[53]),
     _A_ = Async_kernel_Deferred[13],
     _B_ = map_response(t),
     _C_ = caml_call2(Tilde_f[3][2], _B_, _A_),
     _D_ = caml_call2(Tilde_f[3][2], _C_, _z_),
     _E_ = caml_call2(Tilde_f[3][2], _D_, _y_);
    return caml_call2(Tilde_f[3][2], _E_, _x_);
   }
   function filter_map_update$0(t){
    var
     _n_ = caml_call1(Async_kernel_Pipe[64], 0),
     _o_ = Core_Tuple[1][13],
     _p_ = caml_call1(Tilde_f[16], Core_Or_error[53]),
     _q_ = caml_call1(Tilde_f[16], Core_Or_error[53]),
     _r_ = Async_kernel_Deferred[13],
     _s_ = map_response(t),
     _t_ = caml_call2(Tilde_f[3][2], _s_, _r_),
     _u_ = caml_call2(Tilde_f[3][2], _t_, _q_),
     _v_ = caml_call2(Tilde_f[3][2], _u_, _p_),
     _w_ = caml_call2(Tilde_f[3][2], _v_, _o_);
    return caml_call2(Tilde_f[3][2], _w_, _n_);
   }
   function map_update$0(t){
    var
     _d_ = Babel_Pipe_extended[89],
     _e_ = Core_Tuple[1][13],
     _f_ = caml_call1(Tilde_f[16], Core_Or_error[53]),
     _g_ = caml_call1(Tilde_f[16], Core_Or_error[53]),
     _h_ = Async_kernel_Deferred[13],
     _i_ = map_response(t),
     _j_ = caml_call2(Tilde_f[3][2], _i_, _h_),
     _k_ = caml_call2(Tilde_f[3][2], _j_, _g_),
     _l_ = caml_call2(Tilde_f[3][2], _k_, _f_),
     _m_ = caml_call2(Tilde_f[3][2], _l_, _e_);
    return caml_call2(Tilde_f[3][2], _m_, _d_);
   }
   function return$0(rpc, a){
    var _c_ = [0, function(param){return a;}, rpc];
    return caml_call1(Nonempty_list[62], _c_);
   }
   var Expert = [0, return$0];
   caml_call1(Ppx_inline_test_lib[7], cst_babel);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Babel_Caller);
   var
    Babel_Caller =
      [0,
       shapes,
       descriptions,
       supported_rpcs,
       print_shapes,
       of_list_decreasing_preference,
       Rpc,
       Rpc_exn,
       Rpc$0,
       [0,
        dispatch_multi_or_error_deferr,
        singleton$2,
        add$2,
        map_query,
        map_response$3,
        filter_map_response,
        map_error],
       [0,
        dispatch_multi_exn,
        singleton$3,
        add$3,
        map_query,
        map_response$4,
        filter_map_response$0],
       [0,
        Id,
        dispatch_multi$0,
        singleton$4,
        add$4,
        map_query,
        map_response$5,
        map_error$0,
        abort],
       [0,
        dispatch_multi_or_error_deferr,
        singleton$5,
        add$5,
        map_query,
        map_state,
        map_update,
        filter_map_update,
        map_error$1],
       One_way,
       One_way_exn,
       One_way$0,
       Streamable_plain_rpc,
       [0,
        dispatch_multi_or_error_deferr,
        singleton$10,
        add$10,
        map_query,
        map_response$7,
        filter_map_response$1],
       [0,
        dispatch_multi_or_error_deferr,
        singleton$11,
        add$11,
        map_query,
        map_state$0,
        map_update$0,
        filter_map_update$0],
       to_dispatch_fun,
       description$0,
       map,
       map_query,
       map_response,
       can_dispatch,
       Expert];
   runtime.caml_register_global(32, Babel_Caller, cst_Babel_Caller$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Babel__Callee
//# unitInfo: Requires: Async_kernel__Deferred, Async_kernel__Pipe, Async_rpc_kernel__Rpc, Babel__Babel_fn, Babel__Direct_stream_writer, Babel__Generic_rpc, Babel__Pipe_extended, Babel__Shape, Base__Or_error, Core, Core__Comparable, Core__Lazy, Core__List, Core__Map, Core__Option, Core__Or_error, Core__Result, Core__Set, Core__Sexp, Core__String, Core__Tuple, Core__Type_equal, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Ppx_string_runtime, Sexplib0__Sexp_conv, Streamable__Pipe_rpc, Streamable__Plain_rpc, Streamable__State_rpc, Tilde_f
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Babel_Callee$0 = "Babel__Callee",
    cst_babel$0 = "babel";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Async_kernel_Pipe = global_data.Async_kernel__Pipe,
    Core_Tuple = global_data.Core__Tuple,
    Core_Result = global_data.Core__Result,
    Tilde_f = global_data.Tilde_f,
    Async_kernel_Deferred = global_data.Async_kernel__Deferred,
    Babel_Pipe_extended = global_data.Babel__Pipe_extended,
    Streamable_State_rpc = global_data.Streamable__State_rpc,
    Streamable_Pipe_rpc = global_data.Streamable__Pipe_rpc,
    Core_Or_error = global_data.Core__Or_error,
    Streamable_Plain_rpc = global_data.Streamable__Plain_rpc,
    Async_rpc_kernel_Rpc = global_data.Async_rpc_kernel__Rpc,
    Babel_Direct_stream_writer = global_data.Babel__Direct_stream_writer,
    Babel_Babel_fn = global_data.Babel__Babel_fn,
    Core_Sexp = global_data.Core__Sexp,
    Ppx_string_runtime = global_data.Ppx_string_runtime,
    Core_Type_equal = global_data.Core__Type_equal,
    Core_Set = global_data.Core__Set,
    Core_Lazy = global_data.Core__Lazy,
    Core_Map = global_data.Core__Map,
    Babel_Generic_rpc = global_data.Babel__Generic_rpc,
    Babel_Shape = global_data.Babel__Shape,
    Core_List = global_data.Core__List,
    Core_Option = global_data.Core__Option,
    Core = global_data.Core,
    Core_String = global_data.Core__String,
    Base_Or_error = global_data.Base__Or_error,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Core_Comparable = global_data.Core__Comparable;
   caml_call1(Ppx_module_timer_runtime[4], cst_Babel_Callee$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_babel$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/callee.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_babel$0, "callee.ml");
   var
    _a_ = Async_rpc_kernel_Rpc[1],
    include = caml_call1(Core_Comparable[11], [0, _a_[24], _a_[1]]),
    Map = include[21],
    _d_ = [0, "_"],
    cst_Babel_Callee_Pipe_rpc_dire =
      "[Babel.Callee.Pipe_rpc_direct] type id for ",
    _b_ = [0, "shapes"],
    _c_ = [0, "description"],
    cst_Duplicate_rpcs = "Duplicate rpcs",
    cst_babel = cst_babel$0,
    cst_Babel_Callee = cst_Babel_Callee$0;
   function map(param, f){
    var rpc = param[2], implement = param[1];
    function implement$0(on_exception, implementation){
     return caml_call2
             (implement,
              on_exception,
              function(s){
               return caml_call1(f, caml_call1(implementation, s));
              });
    }
    return [0, implement$0, rpc];
   }
   function validate(t){
    function _cq_(param){
     var implementer = param[2], description = param[1];
     if(0 === implementer[0]){
      var implementer$0 = implementer[1];
      return [0, [0, description, implementer$0]];
     }
     var
      shapes = implementer[1],
      _ct_ =
        [0,
         [1,
          [0,
           _b_,
           [0, caml_call2(Core_Lazy[23], Babel_Shape[23][4], shapes), 0]]],
         0],
      _cu_ =
        [0,
         [1,
          [0,
           _c_,
           [0, caml_call1(Async_rpc_kernel_Rpc[1][1], description), 0]]],
         _ct_],
      _cv_ =
        [1, [0, caml_call1(Sexplib0_Sexp_conv[7], cst_Duplicate_rpcs), _cu_]];
     return caml_call1(Core_Or_error[45], _cv_);
    }
    var
     _cr_ = caml_call2(Core_Map[81], 0, t),
     _cs_ = caml_call2(Core_List[51], _cr_, _cq_);
    return caml_call1(Core_Or_error[56], _cs_);
   }
   function implement_multi(on_exception, t, f){
    function _cm_(validated){
     function _co_(param){
      var implementer = param[2], description = param[1];
      function _cp_(s){return caml_call2(f, s, description);}
      return caml_call2(implementer[1], on_exception, _cp_);
     }
     return caml_call2(Core_List[51], validated, _co_);
    }
    var _cn_ = validate(t);
    return caml_call2(Base_Or_error[28][4][3], _cn_, _cm_);
   }
   function implement_multi_exn(on_exception, t, f){
    var _cl_ = implement_multi(on_exception, t, f);
    return caml_call1(Core[255], _cl_);
   }
   function shapes(t){
    var _cg_ = Core_List[51];
    function _ch_(param){
     var implementer = param[2], description = param[1];
     return [0, description, caml_call1(Babel_Generic_rpc[2], implementer[2])];
    }
    function _ci_(_ck_){return caml_call2(_cg_, _ck_, _ch_);}
    var _cj_ = validate(t);
    return caml_call2(Base_Or_error[28][3], _cj_, _ci_);
   }
   function supported_rpcs(t){
    var _cb_ = Core_List[51];
    function _cc_(param){var implementer = param[2]; return implementer[2];}
    function _cd_(_cf_){return caml_call2(_cb_, _cf_, _cc_);}
    var _ce_ = validate(t);
    return caml_call2(Core_Or_error[53], _ce_, _cd_);
   }
   function supported_rpcs_exn(t){
    var _ca_ = supported_rpcs(t);
    return caml_call1(Core[255], _ca_);
   }
   function shapes_exn(t){
    var _b$_ = shapes(t);
    return caml_call1(Core[255], _b$_);
   }
   function descriptions(t){
    var _b5_ = Core_List[51];
    function _b6_(_b__){return _b__[1];}
    function _b7_(_b9_){return caml_call2(_b5_, _b9_, _b6_);}
    var _b8_ = validate(t);
    return caml_call2(Core_Or_error[53], _b8_, _b7_);
   }
   function descriptions_exn(t){
    function _b2_(_b4_){return _b4_[1];}
    var _b3_ = shapes_exn(t);
    return caml_call2(Core_List[51], _b3_, _b2_);
   }
   function print_shapes(t){
    function _bU_(shapes){
     function _b0_(param){
      var shape = param[2], description = param[1];
      return [0, description[1], [0, description[2], shape]];
     }
     var _b1_ = caml_call2(Core_List[51], shapes, _b0_);
     return caml_call1(Core_String[159][16], _b1_);
    }
    var _bV_ = shapes(t), x_007 = caml_call2(Core_Or_error[53], _bV_, _bU_);
    function _bW_(param){
     var
      arg1_004 = param[2],
      arg0_003 = param[1],
      res0_005 = caml_call1(Core[389], arg0_003),
      res1_006 = caml_call1(Babel_Shape[1], arg1_004);
     return [1, [0, res0_005, [0, res1_006, 0]]];
    }
    var
     _bX_ = caml_call1(Core[472], _bW_),
     _bY_ = caml_call1(Core_String[159][45], _bX_),
     _bZ_ = caml_call2(Core_Or_error[17], _bY_, x_007);
    return caml_call2(Core[256], 0, _bZ_);
   }
   function map$0(t){
    var
     _bQ_ = caml_call1(Tilde_f[16], Core_Result[46]),
     _bR_ = caml_call1(Core_Map[57], t),
     _bS_ = caml_call1(Tilde_f[15], _bR_),
     _bT_ = caml_call2(Tilde_f[3][2], _bS_, _bQ_);
    return caml_call2(Tilde_f[3][2], _bT_, map);
   }
   function of_list(ts){
    function shape_set(param){
     if(0 === param[0]){
      var rpc = param[1][2];
      return [246,
              function(param){
               var _bP_ = caml_call1(Babel_Generic_rpc[2], rpc);
               return caml_call1(Babel_Shape[23][7], _bP_);
              }];
     }
     var shapes = param[1];
     return shapes;
    }
    var _bJ_ = Map[5];
    function _bK_(t1, t2){
     function _bM_(param, a, b){
      var let_syntax_008 = shape_set(a), let_syntax_009 = shape_set(b);
      function _bN_(param){
       var b = param[2], a = param[1];
       return caml_call2(Core_Set[14], a, b);
      }
      var
       _bO_ = caml_call2(Core_Lazy[35][4][4], let_syntax_008, let_syntax_009);
      return [1, caml_call2(Core_Lazy[35][4][3], _bO_, _bN_)];
     }
     return caml_call3(Core_Map[86], t1, t2, _bM_);
    }
    var _bL_ = caml_call2(Core_List[109], ts, _bK_);
    return caml_call2(Core_Option[39], _bL_, _bJ_);
   }
   function map_query(t){
    var _bH_ = Babel_Babel_fn[20], _bI_ = map$0(t);
    return caml_call2(Tilde_f[3][2], _bI_, _bH_);
   }
   function map_response(t){
    var _bF_ = Babel_Babel_fn[8], _bG_ = map$0(t);
    return caml_call2(Tilde_f[3][2], _bG_, _bF_);
   }
   function adder(t, rpc, f){
    return of_list([0, t, [0, caml_call1(f, rpc), 0]]);
   }
   function singleton(description, implementer){
    return caml_call2(Map[6], description, [0, implementer]);
   }
   function singleton$0(rpc){
    var
     _bD_ = [0, rpc],
     _bE_ =
       [0,
        function(on_exception, f){
         return caml_call3(Async_rpc_kernel_Rpc[6][10], on_exception, rpc, f);
        },
        _bD_];
    return singleton(caml_call1(Async_rpc_kernel_Rpc[6][4], rpc), _bE_);
   }
   function add(_bB_){
    return function(_bC_){return adder(_bB_, _bC_, singleton$0);};
   }
   function map_response$0(t){
    var _bz_ = Async_kernel_Deferred[13], _bA_ = map_response(t);
    return caml_call2(Tilde_f[3][2], _bA_, _bz_);
   }
   var Rpc = [0, singleton$0, add, map_query, map_response$0];
   function singleton$1(rpc){
    var
     _bx_ = [0, rpc],
     _by_ =
       [0,
        function(on_exception, f){
         return caml_call3(Async_rpc_kernel_Rpc[6][12], on_exception, rpc, f);
        },
        _bx_];
    return singleton(caml_call1(Async_rpc_kernel_Rpc[6][4], rpc), _by_);
   }
   function add$0(_bv_){
    return function(_bw_){return adder(_bv_, _bw_, singleton$1);};
   }
   var Rpc$0 = [0, singleton$1, add$0, map_query, map_response];
   function singleton$2(rpc){
    var
     _bt_ = [1, rpc],
     _bu_ =
       [0,
        function(on_exception, f){
         return caml_call3(Async_rpc_kernel_Rpc[10][8], on_exception, rpc, f);
        },
        _bt_];
    return singleton(caml_call1(Async_rpc_kernel_Rpc[10][23], rpc), _bu_);
   }
   function add$1(_br_){
    return function(_bs_){return adder(_br_, _bs_, singleton$2);};
   }
   function map_error(t){
    var
     _bn_ = caml_call1(Tilde_f[16], Core_Result[47]),
     _bo_ = Async_kernel_Deferred[13],
     _bp_ = map_response(t),
     _bq_ = caml_call2(Tilde_f[3][2], _bp_, _bo_);
    return caml_call2(Tilde_f[3][2], _bq_, _bn_);
   }
   function filter_map_response(t){
    var
     _bh_ = caml_call1(Async_kernel_Pipe[64], 0),
     _bi_ = caml_call1(Tilde_f[16], Core_Result[46]),
     _bj_ = Async_kernel_Deferred[13],
     _bk_ = map_response(t),
     _bl_ = caml_call2(Tilde_f[3][2], _bk_, _bj_),
     _bm_ = caml_call2(Tilde_f[3][2], _bl_, _bi_);
    return caml_call2(Tilde_f[3][2], _bm_, _bh_);
   }
   function map_response$1(t){
    var
     _bb_ = Babel_Pipe_extended[89],
     _bc_ = caml_call1(Tilde_f[16], Core_Result[46]),
     _bd_ = Async_kernel_Deferred[13],
     _be_ = map_response(t),
     _bf_ = caml_call2(Tilde_f[3][2], _be_, _bd_),
     _bg_ = caml_call2(Tilde_f[3][2], _bf_, _bc_);
    return caml_call2(Tilde_f[3][2], _bg_, _bb_);
   }
   function singleton$3(rpc){
    var
     description = caml_call1(Async_rpc_kernel_Rpc[10][23], rpc),
     description_sexp = caml_call1(Async_rpc_kernel_Rpc[1][1], description);
    function _a6_(param){return _d_;}
    var
     _a7_ = caml_call1(Core_Sexp[86], description_sexp),
     _a8_ = [0, caml_call1(Ppx_string_runtime[1][3], _a7_), 0],
     _a9_ =
       [0,
        caml_call1(Ppx_string_runtime[1][2], cst_Babel_Callee_Pipe_rpc_dire),
        _a8_],
     _a__ = caml_call1(Ppx_string_runtime[1][4], _a9_),
     witness = caml_call2(Core_Type_equal[8][3], _a__, _a6_),
     _a$_ = [1, rpc];
    return singleton
            (description,
             [0,
              function(on_exception, f){
               function _ba_(connection_state, query, writer){
                return caml_call3
                        (f,
                         connection_state,
                         query,
                         caml_call2
                          (Babel_Direct_stream_writer[10][2], writer, witness));
               }
               return caml_call3
                       (Async_rpc_kernel_Rpc[10][11], on_exception, rpc, _ba_);
              },
              _a$_]);
   }
   function add$2(_a4_){
    return function(_a5_){return adder(_a4_, _a5_, singleton$3);};
   }
   function map_error$0(t){
    var
     _aY_ = caml_call1(Tilde_f[16], Core_Result[47]),
     _aZ_ = Async_kernel_Deferred[13],
     _a0_ = Babel_Babel_fn[8],
     _a1_ = map_response(t),
     _a2_ = caml_call2(Tilde_f[3][2], _a1_, _a0_),
     _a3_ = caml_call2(Tilde_f[3][2], _a2_, _aZ_);
    return caml_call2(Tilde_f[3][2], _a3_, _aY_);
   }
   function filter_map_response$0(t, f){
    var
     id = caml_call1(Babel_Direct_stream_writer[10][1][45], 0),
     _aQ_ = Babel_Direct_stream_writer[10][4];
    function _aR_(_aV_){
     var _aW_ = caml_call1(_aQ_, _aV_);
     return function(_aX_){return caml_call2(_aW_, _aX_, id);};
    }
    var
     _aS_ = Babel_Babel_fn[20],
     _aT_ = map_response(t),
     _aU_ = caml_call2(Tilde_f[3][2], _aT_, _aS_);
    return caml_call1(caml_call2(Tilde_f[3][2], _aU_, _aR_), f);
   }
   function map_response$2(t, f){
    var
     id = caml_call1(Babel_Direct_stream_writer[10][1][45], 0),
     _aI_ = Babel_Direct_stream_writer[10][3];
    function _aJ_(_aN_){
     var _aO_ = caml_call1(_aI_, _aN_);
     return function(_aP_){return caml_call2(_aO_, _aP_, id);};
    }
    var
     _aK_ = Babel_Babel_fn[20],
     _aL_ = map_response(t),
     _aM_ = caml_call2(Tilde_f[3][2], _aL_, _aK_);
    return caml_call1(caml_call2(Tilde_f[3][2], _aM_, _aJ_), f);
   }
   function singleton$4(rpc){
    var
     _aG_ = [2, rpc],
     _aH_ =
       [0,
        function(on_exception, f){
         return caml_call3(Async_rpc_kernel_Rpc[11][9], on_exception, rpc, f);
        },
        _aG_];
    return singleton(caml_call1(Async_rpc_kernel_Rpc[11][21], rpc), _aH_);
   }
   function add$3(_aE_){
    return function(_aF_){return adder(_aE_, _aF_, singleton$4);};
   }
   function map_state(t){
    var
     _ay_ = Core_Tuple[1][12],
     _az_ = caml_call1(Tilde_f[16], Core_Result[46]),
     _aA_ = Async_kernel_Deferred[13],
     _aB_ = map_response(t),
     _aC_ = caml_call2(Tilde_f[3][2], _aB_, _aA_),
     _aD_ = caml_call2(Tilde_f[3][2], _aC_, _az_);
    return caml_call2(Tilde_f[3][2], _aD_, _ay_);
   }
   function map_update(t){
    var
     _aq_ = Babel_Pipe_extended[89],
     _ar_ = Core_Tuple[1][13],
     _as_ = caml_call1(Tilde_f[16], Core_Result[46]),
     _at_ = Async_kernel_Deferred[13],
     _au_ = map_response(t),
     _av_ = caml_call2(Tilde_f[3][2], _au_, _at_),
     _aw_ = caml_call2(Tilde_f[3][2], _av_, _as_),
     _ax_ = caml_call2(Tilde_f[3][2], _aw_, _ar_);
    return caml_call2(Tilde_f[3][2], _ax_, _aq_);
   }
   function filter_map_update(t){
    var
     _ai_ = caml_call1(Async_kernel_Pipe[64], 0),
     _aj_ = Core_Tuple[1][13],
     _ak_ = caml_call1(Tilde_f[16], Core_Result[46]),
     _al_ = Async_kernel_Deferred[13],
     _am_ = map_response(t),
     _an_ = caml_call2(Tilde_f[3][2], _am_, _al_),
     _ao_ = caml_call2(Tilde_f[3][2], _an_, _ak_),
     _ap_ = caml_call2(Tilde_f[3][2], _ao_, _aj_);
    return caml_call2(Tilde_f[3][2], _ap_, _ai_);
   }
   function map_error$1(t){
    var
     _ae_ = caml_call1(Tilde_f[16], Core_Result[47]),
     _af_ = Async_kernel_Deferred[13],
     _ag_ = map_response(t),
     _ah_ = caml_call2(Tilde_f[3][2], _ag_, _af_);
    return caml_call2(Tilde_f[3][2], _ah_, _ae_);
   }
   var
    State_rpc =
      [0,
       singleton$4,
       add$3,
       map_query,
       map_state,
       map_update,
       filter_map_update,
       map_error$1];
   function singleton$5(rpc){
    var
     _ac_ = [3, rpc],
     _ad_ =
       [0,
        function(on_exception, f){
         return caml_call3(Async_rpc_kernel_Rpc[12][8], on_exception, rpc, f);
        },
        _ac_];
    return singleton(caml_call1(Async_rpc_kernel_Rpc[12][4], rpc), _ad_);
   }
   function add$4(_aa_){
    return function(_ab_){return adder(_aa_, _ab_, singleton$5);};
   }
   var One_way = [0, singleton$5, add$4, map_query];
   function singleton$6(rpc){
    var
     ___ = [4, rpc],
     _$_ =
       [0,
        function(on_exception, f){
         return caml_call3(Streamable_Plain_rpc[4], on_exception, rpc, f);
        },
        ___];
    return singleton(caml_call1(Streamable_Plain_rpc[1], rpc), _$_);
   }
   function add$5(_Y_){
    return function(_Z_){return adder(_Y_, _Z_, singleton$6);};
   }
   function map_response$3(t){
    var
     _U_ = caml_call1(Tilde_f[16], Core_Or_error[53]),
     _V_ = Async_kernel_Deferred[13],
     _W_ = map_response(t),
     _X_ = caml_call2(Tilde_f[3][2], _W_, _V_);
    return caml_call2(Tilde_f[3][2], _X_, _U_);
   }
   var
    Streamable_plain_rpc = [0, singleton$6, add$5, map_query, map_response$3];
   function singleton$7(rpc){
    var
     _S_ = [5, rpc],
     _T_ =
       [0,
        function(on_exception, f){
         return caml_call3(Streamable_Pipe_rpc[4], on_exception, rpc, f);
        },
        _S_];
    return singleton(caml_call1(Streamable_Pipe_rpc[1], rpc), _T_);
   }
   function add$6(_Q_){
    return function(_R_){return adder(_Q_, _R_, singleton$7);};
   }
   function filter_map_response$1(t){
    var
     _K_ = caml_call1(Async_kernel_Pipe[64], 0),
     _L_ = caml_call1(Tilde_f[16], Core_Result[46]),
     _M_ = Async_kernel_Deferred[13],
     _N_ = map_response(t),
     _O_ = caml_call2(Tilde_f[3][2], _N_, _M_),
     _P_ = caml_call2(Tilde_f[3][2], _O_, _L_);
    return caml_call2(Tilde_f[3][2], _P_, _K_);
   }
   function map_response$4(t){
    var
     _E_ = Babel_Pipe_extended[89],
     _F_ = caml_call1(Tilde_f[16], Core_Result[46]),
     _G_ = Async_kernel_Deferred[13],
     _H_ = map_response(t),
     _I_ = caml_call2(Tilde_f[3][2], _H_, _G_),
     _J_ = caml_call2(Tilde_f[3][2], _I_, _F_);
    return caml_call2(Tilde_f[3][2], _J_, _E_);
   }
   function singleton$8(rpc){
    var
     _C_ = [6, rpc],
     _D_ =
       [0,
        function(on_exception, f){
         return caml_call3(Streamable_State_rpc[4], on_exception, rpc, f);
        },
        _C_];
    return singleton(caml_call1(Streamable_State_rpc[1], rpc), _D_);
   }
   function add$7(_A_){
    return function(_B_){return adder(_A_, _B_, singleton$8);};
   }
   function map_state$0(t){
    var
     _u_ = Core_Tuple[1][12],
     _v_ = caml_call1(Tilde_f[16], Core_Result[46]),
     _w_ = Async_kernel_Deferred[13],
     _x_ = map_response(t),
     _y_ = caml_call2(Tilde_f[3][2], _x_, _w_),
     _z_ = caml_call2(Tilde_f[3][2], _y_, _v_);
    return caml_call2(Tilde_f[3][2], _z_, _u_);
   }
   function map_update$0(t){
    var
     _m_ = Babel_Pipe_extended[89],
     _n_ = Core_Tuple[1][13],
     _o_ = caml_call1(Tilde_f[16], Core_Result[46]),
     _p_ = Async_kernel_Deferred[13],
     _q_ = map_response(t),
     _r_ = caml_call2(Tilde_f[3][2], _q_, _p_),
     _s_ = caml_call2(Tilde_f[3][2], _r_, _o_),
     _t_ = caml_call2(Tilde_f[3][2], _s_, _n_);
    return caml_call2(Tilde_f[3][2], _t_, _m_);
   }
   function filter_map_update$0(t){
    var
     _e_ = caml_call1(Async_kernel_Pipe[64], 0),
     _f_ = Core_Tuple[1][13],
     _g_ = caml_call1(Tilde_f[16], Core_Result[46]),
     _h_ = Async_kernel_Deferred[13],
     _i_ = map_response(t),
     _j_ = caml_call2(Tilde_f[3][2], _i_, _h_),
     _k_ = caml_call2(Tilde_f[3][2], _j_, _g_),
     _l_ = caml_call2(Tilde_f[3][2], _k_, _f_);
    return caml_call2(Tilde_f[3][2], _l_, _e_);
   }
   var
    Streamable_state_rpc =
      [0,
       singleton$8,
       add$7,
       map_query,
       map_state$0,
       map_update$0,
       filter_map_update$0];
   caml_call1(Ppx_inline_test_lib[7], cst_babel);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Babel_Callee);
   var
    Babel_Callee =
      [0,
       implement_multi,
       implement_multi_exn,
       shapes,
       shapes_exn,
       supported_rpcs,
       supported_rpcs_exn,
       descriptions,
       descriptions_exn,
       print_shapes,
       of_list,
       Rpc,
       Rpc$0,
       [0,
        singleton$2,
        add$1,
        map_query,
        map_response$1,
        filter_map_response,
        map_error],
       [0,
        singleton$3,
        add$2,
        map_query,
        map_response$2,
        filter_map_response$0,
        map_error$0],
       State_rpc,
       One_way,
       Streamable_plain_rpc,
       [0,
        singleton$7,
        add$6,
        map_query,
        map_response$4,
        filter_map_response$1],
       Streamable_state_rpc,
       map$0,
       map_query,
       map_response];
   runtime.caml_register_global(44, Babel_Callee, cst_Babel_Callee$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Babel
//# unitInfo: Requires: Async_rpc_kernel__Rpc, Babel__Callee, Babel__Caller, Babel__Shape, Base__Or_error, Core, Core__List, Core__Or_error, Nonempty_list, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Babel$0 = "Babel",
    cst_babel$0 = "babel";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Core = global_data.Core,
    Async_rpc_kernel_Rpc = global_data.Async_rpc_kernel__Rpc,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Core_List = global_data.Core__List,
    Nonempty_list = global_data.Nonempty_list,
    Babel_Shape = global_data.Babel__Shape,
    Core_Or_error = global_data.Core__Or_error,
    Babel_Caller = global_data.Babel__Caller,
    Babel_Callee = global_data.Babel__Callee,
    Base_Or_error = global_data.Base__Or_error,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Babel$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_babel$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/babel.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_babel$0, "babel.ml");
   var
    _a_ = [0, "callee_description"],
    _b_ = [0, "caller_description"],
    cst_Corresponding_rpcs_have_mi =
      "Corresponding rpcs have mismatching shapes",
    cst_Could_not_match_any_rpcs = "Could not match any rpcs",
    cst_babel = cst_babel$0,
    cst_Babel = cst_Babel$0;
   function check_compatibility(caller, callee){
    var caller_shapes = caml_call1(Babel_Caller[1], caller);
    function _d_(callee_shapes){
     function _f_(caller){
      var caller_description = caller[1];
      function _l_(callee){
       var
        callee_description = callee[1],
        _m_ =
          0
           ===
            caml_call2
             (Async_rpc_kernel_Rpc[1][24],
              caller_description,
              callee_description)
           ? 1
           : 0;
       return _m_ ? [0, [0, caller, callee]] : 0;
      }
      return caml_call2(Core_List[28], callee_shapes, _l_);
     }
     var match = caml_call2(Nonempty_list[46], caller_shapes, _f_);
     if(! match)
      return caml_call1(Core_Or_error[46], cst_Could_not_match_any_rpcs);
     var
      _g_ = match[1],
      _h_ = _g_[2],
      callee_shape = _h_[2],
      callee_description = _h_[1],
      match$0 = _g_[1],
      caller_shape = match$0[2],
      caller_description = match$0[1];
     if(caml_call2(Babel_Shape[8], caller_shape, callee_shape))
      return [0, caller_description];
     var
      _i_ =
        [0,
         [1,
          [0,
           _a_,
           [0, caml_call1(Async_rpc_kernel_Rpc[1][1], callee_description), 0]]],
         0],
      _j_ =
        [0,
         [1,
          [0,
           _b_,
           [0, caml_call1(Async_rpc_kernel_Rpc[1][1], caller_description), 0]]],
         _i_],
      _k_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Corresponding_rpcs_have_mi),
          _j_]];
     return caml_call1(Core_Or_error[45], _k_);
    }
    var _e_ = caml_call1(Babel_Callee[3], callee);
    return caml_call2(Base_Or_error[28][4][2], _e_, _d_);
   }
   function check_compatibility_exn(caller, callee){
    var _c_ = check_compatibility(caller, callee);
    return caml_call1(Core[255], _c_);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_babel);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Babel);
   var Babel = [0, check_compatibility, check_compatibility_exn];
   runtime.caml_register_global(25, Babel, cst_Babel$0);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
