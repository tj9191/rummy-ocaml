// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Polling_state_rpc__
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Polling_state_rpc = [0],
    Polling_state_rpc$0 = [0, Polling_state_rpc];
   runtime.caml_register_global(0, Polling_state_rpc$0, "Polling_state_rpc__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Polling_state_rpc__Bus_state
//# unitInfo: Requires: Async_kernel__Deferred, Async_kernel__Ivar, Bus, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Polling_state_rpc_Bus_stat$0 = "Polling_state_rpc__Bus_state",
    cst_polling_state_rpc$0 = "polling_state_rpc",
    cst_src_bus_state_ml = "src/bus_state.ml";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Bus = global_data.Bus,
    Async_kernel_Ivar = global_data.Async_kernel__Ivar,
    Async_kernel_Deferred = global_data.Async_kernel__Deferred,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Polling_state_rpc_Bus_stat$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_polling_state_rpc$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_bus_state_ml);
   caml_call2(Ppx_inline_test_lib[6], cst_polling_state_rpc$0, "bus_state.ml");
   var
    _a_ = [0, cst_src_bus_state_ml, 49, 977, 1018],
    cst_polling_state_rpc = cst_polling_state_rpc$0,
    cst_Polling_state_rpc_Bus_stat = cst_Polling_state_rpc_Bus_stat$0;
   function create(param){return [0, 0, function(param){return 0;}];}
   function take(t){
    var match = t[1];
    if(typeof match === "number"){
     var ivar = caml_call1(Async_kernel_Ivar[12], 0);
     t[1] = [0, ivar];
     return caml_call1(Async_kernel_Ivar[19], ivar);
    }
    if(0 === match[0]){
     var ivar$0 = match[1];
     return caml_call1(Async_kernel_Ivar[19], ivar$0);
    }
    var value = match[1];
    t[1] = 0;
    return caml_call1(Async_kernel_Deferred[12], value);
   }
   function unsubscribe(t){
    var unsubscribe = t[2];
    t[1] = 0;
    t[2] = function(param){return 0;};
    return caml_call1(unsubscribe, 0);
   }
   function subscribe(t, bus){
    unsubscribe(t);
    function _b_(response){
     var match = t[1];
     if(typeof match === "number" || ! (0 === match[0]))
      var _c_ = [1, response];
     else{
      var ivar = match[1];
      caml_call2(Async_kernel_Ivar[14], ivar, response);
      var _c_ = 0;
     }
     t[1] = _c_;
     return 0;
    }
    var subscriber = caml_call6(Bus[19], 0, 0, 0, bus, _a_, _b_);
    t[2] = function(param){return caml_call2(Bus[23], bus, subscriber);};
    return 0;
   }
   caml_call1(Ppx_inline_test_lib[7], cst_polling_state_rpc);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Polling_state_rpc_Bus_stat);
   var
    Polling_state_rpc_Bus_state = [0, create, take, unsubscribe, subscribe];
   runtime.caml_register_global
    (15, Polling_state_rpc_Bus_state, cst_Polling_state_rpc_Bus_stat$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Polling_state_rpc
//# unitInfo: Requires: Async_kernel, Async_kernel__Deferred, Async_kernel__Deferred_or_error, Async_kernel__Ivar, Async_kernel__Throttle, Async_rpc_kernel__Rpc, Base__Exn, Bin_prot__Common, Bin_prot__Read, Bin_prot__Shape, Bin_prot__Write, Bin_shape, Bus, Core, Core__Bag, Core__Error, Core__Hashtbl, Core__Option, Core__Or_error, Core__Sexp, Core__Unique_id, Eager_deferred, Expect_test_config, Inline_test_config, Polling_state_rpc__Bus_state, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_expect_runtime__Test_block, Ppx_expect_runtime__Test_node, Ppx_expect_runtime__Types, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Stdlib
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst = "",
    cst_BUG$3 = "BUG",
    cst_Fresh$0 = "Fresh",
    cst_Polling_state_rpc$0 = "Polling_state_rpc",
    cst_Update$0 = "Update",
    cst_pair$1 = "pair",
    cst_polling_state_rpc$0 = "polling_state_rpc",
    cst_query$2 = "query",
    cst_response$4 = "response",
    cst_rpc_name = "rpc_name",
    cst_rpc_version = "rpc_version",
    cst_src_polling_state_rpc_ml$2 = "src/polling_state_rpc.ml",
    cst_src_polling_state_rpc_ml_R$2 =
      "src/polling_state_rpc.ml.Request.Stable.t",
    cst_src_polling_state_rpc_ml_R$1 =
      "src/polling_state_rpc.ml.Response.pair",
    cst_t$3 = "t",
    cst_update$3 = "update";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call14
   (f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13){
    return (f.l >= 0 ? f.l : f.l = f.length) == 14
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13)
            : runtime.caml_call_gen
              (f,
               [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    tag = "exception thrown from inside of polling-state-rpc bus handler",
    Core_Sexp = global_data.Core__Sexp,
    Core_Error = global_data.Core__Error,
    Core = global_data.Core,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Bus = global_data.Bus,
    Async_kernel_Throttle = global_data.Async_kernel__Throttle,
    Core_Or_error = global_data.Core__Or_error,
    Async_kernel = global_data.Async_kernel,
    Async_kernel_Deferred_or_error =
      global_data.Async_kernel__Deferred_or_error,
    Async_kernel_Deferred = global_data.Async_kernel__Deferred,
    Async_rpc_kernel_Rpc = global_data.Async_rpc_kernel__Rpc,
    Polling_state_rpc_Bus_state = global_data.Polling_state_rpc__Bus_state,
    Core_Option = global_data.Core__Option,
    Eager_deferred = global_data.Eager_deferred,
    Stdlib = global_data.Stdlib,
    Base_Exn = global_data.Base__Exn,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Bin_shape = global_data.Bin_shape,
    Ppx_expect_runtime_Types = global_data.Ppx_expect_runtime__Types,
    Bin_prot_Read = global_data.Bin_prot__Read,
    Bin_prot_Common = global_data.Bin_prot__Common,
    Bin_prot_Write = global_data.Bin_prot__Write,
    Async_kernel_Ivar = global_data.Async_kernel__Ivar,
    Core_Hashtbl = global_data.Core__Hashtbl,
    Core_Bag = global_data.Core__Bag,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Core_Unique_id = global_data.Core__Unique_id,
    Expect_test_config = global_data.Expect_test_config,
    Ppx_expect_runtime_Test_block = global_data.Ppx_expect_runtime__Test_block,
    Ppx_expect_runtime_Test_node = global_data.Ppx_expect_runtime__Test_node,
    Inline_test_config = global_data.Inline_test_config;
   caml_call1(Ppx_module_timer_runtime[4], cst_Polling_state_rpc$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_polling_state_rpc$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_polling_state_rpc_ml$2);
   caml_call2
    (Ppx_inline_test_lib[6], cst_polling_state_rpc$0, "polling_state_rpc.ml");
   var
    include = caml_call1(Core_Unique_id[1], 0),
    bin_size_t = include[1],
    bin_write_t = include[2],
    bin_read_t = include[3],
    bin_shape_t = include[5],
    equal = include[19],
    of_int_exn = include[41],
    create = include[45],
    forget = caml_call1(of_int_exn, -1),
    Query_dispatch_id = caml_call1(Core_Unique_id[1], 0),
    Client_id = caml_call1(Core_Unique_id[1], 0),
    _X_ = [0, cst_Fresh$0],
    _Y_ = [0, cst_Update$0],
    cst_received_an_update_without =
      "received an update without receiving any previous values",
    cst_src_polling_state_rpc_ml_5$0 = "src/polling_state_rpc.ml:567:21",
    cst_BUG$2 = cst_BUG$3,
    _U_ = [0, cst_src_polling_state_rpc_ml$2, 572, 21105, 21113],
    _V_ = [0, 1],
    _W_ = [0, 1],
    cst_Regular_response_caused_by =
      "Regular response caused by forget request. This can also happen if the server is old and does not support forget requests, in which case this is not a bug.",
    cst_src_polling_state_rpc_ml_5 = "src/polling_state_rpc.ml:547:16",
    cst_BUG$1 = cst_BUG$3,
    _S_ = [0, 1],
    _T_ = [0, 0],
    cst_redispatch_called_before_a =
      "[redispatch] called before a query was set or a regular dispatch had completed",
    cst_Request_aborted = "Request aborted",
    cst_cancellation_caused_by_reg = "cancellation caused by regular request",
    cst_src_polling_state_rpc_ml_4$0 = "src/polling_state_rpc.ml:486:22",
    cst_BUG$0 = cst_BUG$3,
    cst_regular_response_caused_by = "regular response caused by cancellation",
    cst_src_polling_state_rpc_ml_4 = "src/polling_state_rpc.ml:465:27",
    cst_BUG = cst_BUG$3,
    _Q_ = [0, 1],
    _R_ = [0, 0],
    cst_this_request_was_cancelled = "this request was cancelled",
    _O_ = [0, cst_rpc_version],
    _P_ = [0, cst_rpc_name],
    cst_A_polling_state_RPC_client$0 =
      "A polling state RPC client has requested a fresh response, but the server expected it to have the seqnum of the latest diffs. The server will send a fresh response as requested. This likely means that the client had trouble receiving the last RPC response.",
    cst_src_polling_state_rpc_ml_3 = "src/polling_state_rpc.ml:309:16",
    _M_ = [0, cst_rpc_version],
    _N_ = [0, cst_rpc_name],
    cst_A_polling_state_RPC_client =
      "A polling state RPC client has requested diffs from a seqnum that the server does not have, so the server is sending a fresh response instead. This likely means that the client had trouble receiving the last RPC response.",
    cst_src_polling_state_rpc_ml_2 = "src/polling_state_rpc.ml:295:19",
    _L_ = [1, cst_src_polling_state_rpc_ml_R$1],
    cst_src_polling_state_rpc_ml_R$0 = cst_src_polling_state_rpc_ml_R$1,
    cst_pair$0 = cst_pair$1,
    _x_ = [1, "src/polling_state_rpc.ml.Response.t"],
    cst_t$2 = cst_t$3,
    _l_ = [1, cst_src_polling_state_rpc_ml_R$2],
    cst_src_polling_state_rpc_ml_R = cst_src_polling_state_rpc_ml_R$2,
    cst_t$0 = cst_t$3,
    cst_Cancel_ongoing = "Cancel_ongoing",
    cst_client_id = "client_id",
    cst_query = cst_query$2,
    cst_src_polling_state_rpc_ml_1 = "src/polling_state_rpc.ml:136:20",
    cst_query$0 = cst_query$2,
    cst_last_seqnum = "last_seqnum",
    cst_Query = "Query",
    cst_query$1 = cst_query$2,
    cst_t = cst_t$3,
    cst_src_polling_state_rpc_ml_1$0 = "src/polling_state_rpc.ml:133:4",
    _as_ =
      [0,
       [0,
        [0, " 4eb554fadd7eded37e4da89efd208c52 ", [0, cst]],
        [0, 4651, 4666, 4704]]],
    _at_ = [0, 4651, 4657, 4705],
    _ay_ = [0, 4584, 4588, 4705],
    _az_ = [0, 4651, 4705, 4705],
    _aA_ = [0, 4584, 4588, 4705],
    cst_src_polling_state_rpc_ml$1 = cst_src_polling_state_rpc_ml$2,
    cst_update = cst_update$3,
    cst_src_polling_state_rpc_ml_1$1 = "src/polling_state_rpc.ml:167:16",
    cst_Update = cst_Update$0,
    cst_response = cst_response$4,
    cst_src_polling_state_rpc_ml_1$2 = "src/polling_state_rpc.ml:166:15",
    cst_Fresh = cst_Fresh$0,
    cst_update$0 = cst_update$3,
    cst_response$0 = cst_response$4,
    cst_t$1 = cst_t$3,
    cst_src_polling_state_rpc_ml_1$3 = "src/polling_state_rpc.ml:165:2",
    _ai_ =
      [0,
       [0,
        [0, " 13ef8c5223a0ea284c72512be32e5c09 ", [0, cst]],
        [0, 5668, 5681, 5719]]],
    _aj_ = [0, 5668, 5672, 5720],
    _ao_ = [0, 5596, 5598, 5720],
    _ap_ = [0, 5668, 5720, 5720],
    _aq_ = [0, 5596, 5598, 5720],
    cst_src_polling_state_rpc_ml$0 = cst_src_polling_state_rpc_ml$2,
    _y_ = [0, [0, "Cancellation_successful", 0], 0],
    cst_update$1 = cst_update$3,
    cst_src_polling_state_rpc_ml_1$4 = "src/polling_state_rpc.ml:178:33",
    cst_response$1 = cst_response$4,
    cst_src_polling_state_rpc_ml_1$5 = "src/polling_state_rpc.ml:178:22",
    cst_response$2 = cst_response$4,
    cst_new_seqnum = "new_seqnum",
    cst_Response = "Response",
    cst_update$2 = cst_update$3,
    cst_response$3 = cst_response$4,
    cst_pair = cst_pair$1,
    cst_src_polling_state_rpc_ml_1$6 = "src/polling_state_rpc.ml:175:2",
    ___ =
      [0,
       [0,
        [0, " 8bc63a85561d87b693d15e78c64e1008 ", [0, cst]],
        [0, 5994, 6007, 6045]]],
    _$_ = [0, 5994, 5998, 6046],
    _ae_ = [0, 5919, 5921, 6046],
    _af_ = [0, 5994, 6046, 6046],
    _ag_ = [0, 5919, 5921, 6046],
    cst_src_polling_state_rpc_ml = cst_src_polling_state_rpc_ml$2,
    cst_polling_state_rpc = cst_polling_state_rpc$0,
    cst_Polling_state_rpc = cst_Polling_state_rpc$0;
   function find_by_connection(t, connection){
    function _cq_(_ct_){return _ct_[2];}
    function _cr_(param){
     var conn = param[1];
     return connection === conn ? 1 : 0;
    }
    var _cs_ = caml_call2(Core_Bag[15], t, _cr_);
    return caml_call2(Core_Option[34], _cs_, _cq_);
   }
   function find
   (t, connection_state, connection, client_id, create_client_state){
    var match = find_by_connection(t[1], connection);
    if(match)
     var per_connection = match[1], per_connection$0 = per_connection;
    else{
     var
      result = caml_call3(Client_id[38][5], 0, 0, 0),
      elt = caml_call2(Core_Bag[23], t[1], [0, connection, result]),
      _cm_ =
        function(param){
         function _cp_(param){
          var client_state = param[3];
          return caml_call1(t[2], client_state);
         }
         caml_call2(Core_Hashtbl[20], result, _cp_);
         return caml_call2(Core_Bag[26], t[1], elt);
        },
      _cn_ = caml_call1(Async_rpc_kernel_Rpc[5][11], connection);
     caml_call2(Async_kernel_Deferred[4], _cn_, _cm_);
     var per_connection$0 = result;
    }
    function _cl_(param){
     var _co_ = caml_call1(create_client_state, connection_state);
     return [0, 0, caml_call1(Async_kernel_Ivar[12], 0), _co_];
    }
    return caml_call3(Core_Hashtbl[54], per_connection$0, client_id, _cl_);
   }
   function trigger_cancel(per_client){
    caml_call2(Async_kernel_Ivar[14], per_client[2], 0);
    per_client[2] = caml_call1(Async_kernel_Ivar[12], 0);
    return;
   }
   var
    _a_ = [0, [0, cst_Cancel_ongoing, [0, Client_id[5], 0]], 0],
    _b_ = [0, [0, cst_client_id, Client_id[5]], 0],
    _c_ = caml_call1(Bin_shape[3][1], cst_query),
    _d_ = caml_call1(Bin_shape[4][1], cst_src_polling_state_rpc_ml_1),
    _e_ = [0, [0, cst_query$0, caml_call2(Bin_prot_Shape[11], _d_, _c_)], _b_],
    _f_ = [0, [0, cst_last_seqnum, caml_call1(Core[499], bin_shape_t)], _e_],
    _g_ = [0, [0, cst_Query, [0, caml_call1(Bin_prot_Shape[4], _f_), 0]], _a_],
    _h_ = caml_call1(Bin_prot_Shape[5], _g_),
    _i_ = [0, caml_call1(Bin_shape[3][1], cst_query$1), 0],
    _j_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t), _i_, _h_], 0],
    _k_ = caml_call1(Bin_shape[4][1], cst_src_polling_state_rpc_ml_1$0),
    group = caml_call2(Bin_prot_Shape[2], _k_, _j_);
   function bin_shape_t$0(query){
    var _ck_ = caml_call1(Bin_shape[2][1], cst_t$0);
    return caml_call1
            (caml_call2(Bin_prot_Shape[10], group, _ck_), [0, query, 0]);
   }
   if(typeof Ppx_inline_test_lib[3] !== "number"){
    var
     Ppx_expect_test_block$1 =
       caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
     _ar_ =
       function(param){
        var
         _cg_ = bin_shape_t$0(Core[603]),
         _ch_ = caml_call1(Bin_prot_Shape[15], _cg_),
         _ci_ = caml_call1(Bin_shape[19][4], _ch_);
        caml_call1(Core[32], _ci_);
        var _cj_ = caml_call1(Ppx_expect_runtime_Types[4][1], 0);
        return caml_call1(Ppx_expect_test_block$1[2], _cj_);
       },
     _au_ =
       caml_call3
        (Ppx_expect_runtime_Test_node[1][1],
         [0, Ppx_expect_runtime_Types[1][1]],
         _at_,
         _as_),
     _av_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 0), _au_], 0],
     _aw_ = caml_call1(Ppx_expect_runtime_Types[4][1], 2),
     _ax_ = caml_call1(Ppx_expect_runtime_Types[4][1], 1);
    caml_call14
     (Ppx_expect_test_block$1[3],
      cst_src_polling_state_rpc_ml$1,
      142,
      _aA_,
      _az_,
      _ay_,
      [0, Ppx_expect_runtime_Types[1][1]],
      0,
      _ax_,
      _aw_,
      0,
      0,
      Inline_test_config,
      _av_,
      _ar_);
   }
   var
    _m_ = caml_call1(Bin_shape[3][1], cst_update),
    _n_ = caml_call1(Bin_shape[4][1], cst_src_polling_state_rpc_ml_1$1),
    _o_ =
      [0,
       [0, cst_Update, [0, caml_call2(Bin_prot_Shape[11], _n_, _m_), 0]],
       0],
    _p_ = caml_call1(Bin_shape[3][1], cst_response),
    _q_ = caml_call1(Bin_shape[4][1], cst_src_polling_state_rpc_ml_1$2),
    _r_ =
      [0,
       [0, cst_Fresh, [0, caml_call2(Bin_prot_Shape[11], _q_, _p_), 0]],
       _o_],
    _s_ = caml_call1(Bin_prot_Shape[5], _r_),
    _t_ = [0, caml_call1(Bin_shape[3][1], cst_update$0), 0],
    _u_ = [0, caml_call1(Bin_shape[3][1], cst_response$0), _t_],
    _v_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$1), _u_, _s_], 0],
    _w_ = caml_call1(Bin_shape[4][1], cst_src_polling_state_rpc_ml_1$3),
    group$0 = caml_call2(Bin_prot_Shape[2], _w_, _v_);
   function bin_shape_t$1(response, update){
    var _cf_ = caml_call1(Bin_shape[2][1], cst_t$2);
    return caml_call1
            (caml_call2(Bin_prot_Shape[10], group$0, _cf_),
             [0, response, [0, update, 0]]);
   }
   if(typeof Ppx_inline_test_lib[3] !== "number"){
    var
     Ppx_expect_test_block$0 =
       caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
     _ah_ =
       function(param){
        var
         _ce_ = bin_shape_t$1(Core[372], Core[541]),
         _cb_ = caml_call1(Bin_prot_Shape[15], _ce_),
         _cc_ = caml_call1(Bin_shape[19][4], _cb_);
        caml_call1(Core[32], _cc_);
        var _cd_ = caml_call1(Ppx_expect_runtime_Types[4][1], 3);
        return caml_call1(Ppx_expect_test_block$0[2], _cd_);
       },
     _ak_ =
       caml_call3
        (Ppx_expect_runtime_Test_node[1][1],
         [0, Ppx_expect_runtime_Types[1][1]],
         _aj_,
         _ai_),
     _al_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 3), _ak_], 0],
     _am_ = caml_call1(Ppx_expect_runtime_Types[4][1], 5),
     _an_ = caml_call1(Ppx_expect_runtime_Types[4][1], 4);
    caml_call14
     (Ppx_expect_test_block$0[3],
      cst_src_polling_state_rpc_ml$0,
      170,
      _aq_,
      _ap_,
      _ao_,
      [0, Ppx_expect_runtime_Types[1][1]],
      0,
      _an_,
      _am_,
      0,
      0,
      Inline_test_config,
      _al_,
      _ah_);
   }
   var
    _z_ = caml_call1(Bin_shape[3][1], cst_update$1),
    _A_ = caml_call1(Bin_shape[4][1], cst_src_polling_state_rpc_ml_1$4),
    _B_ = caml_call2(Bin_prot_Shape[11], _A_, _z_),
    _C_ = caml_call1(Bin_shape[3][1], cst_response$1),
    _D_ = caml_call1(Bin_shape[4][1], cst_src_polling_state_rpc_ml_1$5),
    _E_ =
      [0,
       [0, cst_new_seqnum, bin_shape_t],
       [0,
        [0,
         cst_response$2,
         bin_shape_t$1(caml_call2(Bin_prot_Shape[11], _D_, _C_), _B_)],
        0]],
    _F_ =
      [0, [0, cst_Response, [0, caml_call1(Bin_prot_Shape[4], _E_), 0]], _y_],
    _G_ = caml_call1(Bin_prot_Shape[5], _F_),
    _H_ = [0, caml_call1(Bin_shape[3][1], cst_update$2), 0],
    _I_ = [0, caml_call1(Bin_shape[3][1], cst_response$3), _H_],
    _J_ = [0, [0, caml_call1(Bin_shape[2][1], cst_pair), _I_, _G_], 0],
    _K_ = caml_call1(Bin_shape[4][1], cst_src_polling_state_rpc_ml_1$6),
    group$1 = caml_call2(Bin_prot_Shape[2], _K_, _J_);
   function bin_shape_pair(response, update){
    var _ca_ = caml_call1(Bin_shape[2][1], cst_pair$0);
    return caml_call1
            (caml_call2(Bin_prot_Shape[10], group$1, _ca_),
             [0, response, [0, update, 0]]);
   }
   if(typeof Ppx_inline_test_lib[3] !== "number"){
    var
     Ppx_expect_test_block =
       caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
     _Z_ =
       function(param){
        var
         _b$_ = bin_shape_pair(Core[372], Core[541]),
         _b8_ = caml_call1(Bin_prot_Shape[15], _b$_),
         _b9_ = caml_call1(Bin_shape[19][4], _b8_);
        caml_call1(Core[32], _b9_);
        var _b__ = caml_call1(Ppx_expect_runtime_Types[4][1], 6);
        return caml_call1(Ppx_expect_test_block[2], _b__);
       },
     _aa_ =
       caml_call3
        (Ppx_expect_runtime_Test_node[1][1],
         [0, Ppx_expect_runtime_Types[1][1]],
         _$_,
         ___),
     _ab_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 6), _aa_], 0],
     _ac_ = caml_call1(Ppx_expect_runtime_Types[4][1], 8),
     _ad_ = caml_call1(Ppx_expect_runtime_Types[4][1], 7);
    caml_call14
     (Ppx_expect_test_block[3],
      cst_src_polling_state_rpc_ml,
      183,
      _ag_,
      _af_,
      _ae_,
      [0, Ppx_expect_runtime_Types[1][1]],
      0,
      _ad_,
      _ac_,
      0,
      0,
      Inline_test_config,
      _ab_,
      _Z_);
   }
   function name(param){
    var underlying_rpc = param[3];
    return caml_call1(Async_rpc_kernel_Rpc[6][2], underlying_rpc);
   }
   function version(param){
    var underlying_rpc = param[3];
    return caml_call1(Async_rpc_kernel_Rpc[6][3], underlying_rpc);
   }
   function babel_generic_rpc(param){
    var underlying_rpc = param[3];
    return [0, underlying_rpc];
   }
   function create$0(name, version, query_equal, bin_query$0, M){
    var
     bin_update = M[9][8],
     bin_response$0 = M[8],
     bin_reader_update = bin_update[3],
     bin_reader_response = bin_response$0[3];
    function _bY_(buf, pos_ref, vtag){
     return caml_call2
             (Bin_prot_Common[19],
              cst_src_polling_state_rpc_ml_R$0,
              pos_ref[1]);
    }
    var
     _bZ_ =
       [0,
        function(buf, pos_ref){
         var
          of_update = bin_reader_update[1],
          of_response = bin_reader_response[1],
          match$0 = caml_call2(Bin_prot_Read[29], buf, pos_ref);
         if(0 !== match$0)
          return 1 === match$0
                  ? 0
                  : caml_call2(Bin_prot_Common[18], _L_, pos_ref[1]);
         var
          v_new_seqnum = caml_call2(bin_read_t, buf, pos_ref),
          match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
         if(0 === match)
          var
           arg_1 = caml_call2(of_response, buf, pos_ref),
           v_response = [0, arg_1];
         else if(1 === match)
          var
           arg_1$0 = caml_call2(of_update, buf, pos_ref),
           v_response = [1, arg_1$0];
         else
          var v_response = caml_call2(Bin_prot_Common[18], _x_, pos_ref[1]);
         return [0, v_new_seqnum, v_response];
        },
        _bY_],
     bin_writer_update = bin_update[2],
     bin_writer_response = bin_response$0[2];
    function _bW_(buf){
     var
      write_update = bin_writer_update[2],
      write_response = bin_writer_response[2];
     return function(pos$3, param){
      if(! param) return caml_call3(Bin_prot_Write[30], buf, pos$3, 1);
      var
       v2 = param[2],
       v1$1 = param[1],
       pos$1 = caml_call3(Bin_prot_Write[30], buf, pos$3, 0),
       pos$2 = caml_call3(bin_write_t, buf, pos$1, v1$1);
      if(0 === v2[0]){
       var v1 = v2[1], pos = caml_call3(Bin_prot_Write[30], buf, pos$2, 0);
       return caml_call3(write_response, buf, pos, v1);
      }
      var v1$0 = v2[1], pos$0 = caml_call3(Bin_prot_Write[30], buf, pos$2, 1);
      return caml_call3(write_update, buf, pos$0, v1$0);};
    }
    var
     _bX_ =
       [0,
        function(v){
         var
          size_of_update = bin_writer_update[1],
          size_of_response = bin_writer_response[1];
         if(! v) return 1;
         var
          v2 = v[2],
          v1$1 = v[1],
          _b6_ = caml_call1(bin_size_t, v1$1),
          size = caml_call2(Bin_prot_Common[23], 1, _b6_);
         if(0 === v2[0])
          var
           v1 = v2[1],
           _b4_ = caml_call1(size_of_response, v1),
           _b7_ = caml_call2(Bin_prot_Common[23], 1, _b4_);
         else
          var
           v1$0 = v2[1],
           _b5_ = caml_call1(size_of_update, v1$0),
           _b7_ = caml_call2(Bin_prot_Common[23], 1, _b5_);
         return caml_call2(Bin_prot_Common[23], size, _b7_);
        },
        _bW_],
     bin_response =
       [0, bin_shape_pair(bin_response$0[1], bin_update[1]), _bX_, _bZ_],
     bin_reader_query = bin_query$0[3];
    function _bU_(buf, pos_ref, vtag){
     return caml_call2
             (Bin_prot_Common[19], cst_src_polling_state_rpc_ml_R, pos_ref[1]);
    }
    var
     _bV_ =
       [0,
        function(buf, pos_ref){
         var
          of_query = bin_reader_query[1],
          match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
         if(0 === match){
          var
           v_last_seqnum =
             caml_call2(caml_call1(Core[505], bin_read_t), buf, pos_ref),
           v_query = caml_call2(of_query, buf, pos_ref),
           v_client_id = caml_call2(Client_id[3], buf, pos_ref);
          return [0, v_last_seqnum, v_query, v_client_id];
         }
         if(1 !== match)
          return caml_call2(Bin_prot_Common[18], _l_, pos_ref[1]);
         var arg_1 = caml_call2(Client_id[3], buf, pos_ref);
         return [1, arg_1];
        },
        _bU_],
     bin_writer_query = bin_query$0[2];
    function _bS_(buf){
     var write_query = bin_writer_query[2];
     return function(pos$3, param){
      if(0 === param[0]){
       var
        v3 = param[3],
        v2 = param[2],
        v1 = param[1],
        pos = caml_call3(Bin_prot_Write[30], buf, pos$3, 0),
        pos$0 = caml_call4(Core[502], bin_write_t, buf, pos, v1),
        pos$1 = caml_call3(write_query, buf, pos$0, v2);
       return caml_call3(Client_id[2], buf, pos$1, v3);
      }
      var
       v1$0 = param[1],
       pos$2 = caml_call3(Bin_prot_Write[30], buf, pos$3, 1);
      return caml_call3(Client_id[2], buf, pos$2, v1$0);};
    }
    var
     _bT_ =
       [0,
        function(v){
         var size_of_query = bin_writer_query[1];
         if(0 === v[0]){
          var
           v3 = v[3],
           v2 = v[2],
           v1 = v[1],
           _b0_ = caml_call2(Core[500], bin_size_t, v1),
           size = caml_call2(Bin_prot_Common[23], 1, _b0_),
           _b1_ = caml_call1(size_of_query, v2),
           size$0 = caml_call2(Bin_prot_Common[23], size, _b1_),
           _b2_ = caml_call1(Client_id[1], v3);
          return caml_call2(Bin_prot_Common[23], size$0, _b2_);
         }
         var v1$0 = v[1], _b3_ = caml_call1(Client_id[1], v1$0);
         return caml_call2(Bin_prot_Common[23], 1, _b3_);
        },
        _bS_],
     bin_query = [0, bin_shape_t$0(bin_query$0[1]), _bT_, _bV_];
    return [0,
            M,
            query_equal,
            caml_call5
             (Async_rpc_kernel_Rpc[6][1],
              name,
              version,
              bin_query,
              bin_response,
              0)];
   }
   function implement_with_client_state
   (on_client_and_server_out_of_sy,
    create_client_state,
    opt,
    for_first_request,
    t,
    f){
    if(opt)
     var sth = opt[1], on_client_forgotten = sth;
    else
     var on_client_forgotten = function(_bR_){return 0;};
    var
     underlying_rpc = t[3],
     query_equal = t[2],
     response_module = t[1],
     for_first_request$0 = caml_call2(Core_Option[39], for_first_request, f),
     cache = [0, caml_call1(Core_Bag[22], 0), on_client_forgotten];
    function _bo_(param, request){
     var connection = param[2], connection_state = param[1];
     a:
     if(0 === request[0]){
      var last_seqnum = request[1];
      if(last_seqnum){
       var
        client_id = request[3],
        query = request[2],
        last_seqnum$0 = last_seqnum[1];
       if(caml_call2(equal, last_seqnum$0, forget)){var match = [2, query, client_id]; break a;
       }
      }
      var
       client_id$0 = request[3],
       query$0 = request[2],
       match = [0, last_seqnum, query$0, client_id$0];
     }
     else
      var client_id$1 = request[1], match = [1, client_id$1];
     switch(match[0]){
       case 0:
        var
         client_id$2 = match[3],
         query$1 = match[2],
         last_seqnum$1 = match[1],
         per_client =
           find
            (cache,
             connection_state,
             connection,
             client_id$2,
             create_client_state),
         match$0 = per_client[1];
        if(match$0){
         var _by_ = match$0[1], prev_seqnum = _by_[2], prev = _by_[1];
         if(last_seqnum$1){
          var last_seqnum$2 = last_seqnum$1[1];
          if(caml_call2(equal, prev_seqnum, last_seqnum$2))
           var _bz_ = [0, prev];
          else{
           var
            rpc_name = caml_call1(Async_rpc_kernel_Rpc[6][2], underlying_rpc),
            rpc_version =
              caml_call1(Async_rpc_kernel_Rpc[6][3], underlying_rpc),
            _bJ_ =
              [0,
               [1, [0, _M_, [0, caml_call1(Core[389], rpc_version), 0]]],
               0],
            _bK_ =
              [0,
               [1, [0, _N_, [0, caml_call1(Core[558], rpc_name), 0]]],
               _bJ_],
            _bL_ =
              [0,
               caml_call1
                (Sexplib0_Sexp_conv[7], cst_A_polling_state_RPC_client),
               _bK_];
           caml_call1
            (on_client_and_server_out_of_sy,
             [1,
              [0,
               caml_call1
                (Sexplib0_Sexp_conv[7], cst_src_polling_state_rpc_ml_2),
               _bL_]]);
           var _bz_ = 0;
          }
          var _bA_ = _bz_;
         }
         else{
          var
           rpc_name$0 = caml_call1(Async_rpc_kernel_Rpc[6][2], underlying_rpc),
           rpc_version$0 =
             caml_call1(Async_rpc_kernel_Rpc[6][3], underlying_rpc),
           _bM_ =
             [0,
              [1, [0, _O_, [0, caml_call1(Core[389], rpc_version$0), 0]]],
              0],
           _bN_ =
             [0,
              [1, [0, _P_, [0, caml_call1(Core[558], rpc_name$0), 0]]],
              _bM_],
           _bO_ =
             [0,
              caml_call1
               (Sexplib0_Sexp_conv[7], cst_A_polling_state_RPC_client$0),
              _bN_];
          caml_call1
           (on_client_and_server_out_of_sy,
            [1,
             [0,
              caml_call1
               (Sexplib0_Sexp_conv[7], cst_src_polling_state_rpc_ml_3),
              _bO_]]);
          var _bA_ = 0;
         }
         var prev$0 = _bA_;
        }
        else
         var prev$0 = 0;
        var client_state = per_client[3];
        if(prev$0)
         var
          prev$1 = prev$0[1],
          _bB_ =
            function(param){
             var userdata = param[2], response = param[1];
             return [0, response, userdata];
            },
          prev_response = prev$1[2],
          prev_query = prev$1[1],
          f$0 =
            caml_call2(query_equal, prev_query, query$1)
             ? f
             : for_first_request$0,
          _bv_ =
            function(new$0){
             var diff = caml_call2(response_module[10], prev_response, new$0);
             return [0, [1, diff], new$0];
            },
          _bw_ = caml_call3(f$0, connection_state, client_state, query$1),
          _bx_ = caml_call2(Async_kernel[23][3], _bw_, _bv_),
          response = caml_call2(Async_kernel[23][3], _bx_, _bB_);
        else
         var
          _bI_ =
            function(param){
             var userdata = param[2], response = param[1];
             return [0, [0, response], userdata];
            },
          _bs_ = function(response){return [0, response, response];},
          _bt_ =
            caml_call3
             (for_first_request$0, connection_state, client_state, query$1),
          _bu_ = caml_call2(Async_kernel[23][3], _bt_, _bs_),
          response = caml_call2(Async_kernel[23][3], _bu_, _bI_);
        var
         _bC_ = 0,
         _bD_ = function(param){return -1006147983;},
         _br_ = caml_call1(Async_kernel_Ivar[19], per_client[2]),
         _bE_ = [0, caml_call2(Async_kernel[4], _br_, _bD_), _bC_],
         _bF_ = function(r){return [0, -71406943, r];},
         _bG_ = [0, caml_call2(Async_kernel[4], response, _bF_), _bE_],
         response_or_cancelled = caml_call1(Async_kernel[5], _bG_),
         _bH_ =
           function(param){
            if(typeof param === "number")
             return caml_call1
                     (Base_Exn[6],
                      [0, Stdlib[7], cst_this_request_was_cancelled]);
            var
             match = param[2],
             userdata = match[2],
             response = match[1],
             data = [0, query$1, userdata],
             new_seqnum = caml_call1(create, 0);
            per_client[1] = [0, [0, data, new_seqnum]];
            trigger_cancel(per_client);
            return [0, new_seqnum, response];
           };
        return caml_call2(Async_kernel[23][3], response_or_cancelled, _bH_);
       case 1:
        var
         client_id$3 = match[1],
         per_client$0 =
           find
            (cache,
             connection_state,
             connection,
             client_id$3,
             create_client_state);
        trigger_cancel(per_client$0);
        return caml_call1(Async_kernel[20], 0);
       default:
        var
         client_id$4 = match[2],
         _bp_ =
           function(per_connection){
            function _bP_(per_client){
             caml_call1(cache[2], per_client[3]);
             return caml_call2(Async_kernel_Ivar[14], per_client[2], 0);
            }
            var
             _bQ_ = caml_call2(Core_Hashtbl[64], per_connection, client_id$4);
            return caml_call2(Core_Option[46], _bQ_, _bP_);
           },
         _bq_ = find_by_connection(cache[1], connection);
        caml_call2(Core_Option[46], _bq_, _bp_);
        return caml_call1(Async_kernel[20], 0);
     }
    }
    return caml_call3(Async_rpc_kernel_Rpc[6][10], 0, underlying_rpc, _bo_);
   }
   function implement(on_client_and_server_out_of_sy, for_first_request, t, f){
    function _bm_(f, connection_state, client_state, query){return caml_call2(f, connection_state, query);
    }
    var
     for_first_request$0 =
       caml_call2(Core_Option[34], for_first_request, _bm_);
    function f$0(connection_state, client_state, query){return caml_call2(f, connection_state, query);
    }
    var _bn_ = 0;
    return implement_with_client_state
            (on_client_and_server_out_of_sy,
             function(param){return 0;},
             _bn_,
             for_first_request$0,
             t,
             f$0);
   }
   function implement_via_bus
   (on_client_and_server_out_of_sy,
    create_client_state,
    on_client_forgotten,
    rpc,
    f){
    function _bf_(connection_state, param, query){
     var bus_state = param[1];
     return caml_call1(Polling_state_rpc_Bus_state[2], bus_state);
    }
    var
     _bg_ =
       [0,
        function(connection_state, param, query){
         var client_state = param[2], bus_state = param[1];
         function _bk_(bus){
          caml_call2(Polling_state_rpc_Bus_state[4], bus_state, bus);
          return caml_call1(Polling_state_rpc_Bus_state[2], bus_state);
         }
         var _bl_ = caml_call3(f, connection_state, client_state, query);
         return caml_call2(Eager_deferred[12][4][2], _bl_, _bk_);
        }],
     _bh_ =
       [0,
        function(param){
         var client_state = param[2], bus_state = param[1];
         caml_call1(Polling_state_rpc_Bus_state[3], bus_state);
         function _bj_(on_client_forgotten){
          return caml_call1(on_client_forgotten, client_state);
         }
         return caml_call2(Core_Option[46], on_client_forgotten, _bj_);
        }];
    return implement_with_client_state
            (on_client_and_server_out_of_sy,
             function(connection_state){
              var _bi_ = caml_call1(create_client_state, connection_state);
              return [0, caml_call1(Polling_state_rpc_Bus_state[1], 0), _bi_];
             },
             _bh_,
             _bg_,
             rpc,
             _bf_);
   }
   function implement_via_bus$0
   (on_client_and_server_out_of_sy,
    create_client_state,
    on_client_forgotten,
    rpc,
    f){
    return implement_via_bus
            (on_client_and_server_out_of_sy,
             create_client_state,
             on_client_forgotten,
             rpc,
             function(connection_state, client_state, query){
              var _be_ = caml_call3(f, connection_state, client_state, query);
              return caml_call1(Async_kernel_Deferred[12], _be_);
             });
   }
   function dispatch_underlying(t, connection, request){
    switch(request[0]){
      case 0:
       var
        client_id = request[3],
        query = request[2],
        last_seqnum = request[1],
        _bd_ = [0, last_seqnum, query, client_id];
       break;
      case 1:
       var client_id$0 = request[1], _bd_ = [1, client_id$0]; break;
      default:
       var
        client_id$1 = request[2],
        query$0 = request[1],
        _bd_ = [0, [0, forget], query$0, client_id$1];
    }
    return caml_call3(Async_rpc_kernel_Rpc[6][16], t[11], connection, _bd_);
   }
   function dispatch(t, connection, query){
    t[2] = [0, query];
    function _a9_(response){
     if(0 !== response[0]){
      var e = response[1];
      return caml_call1(Async_kernel[20], [1, e]);
     }
     var match = response[1];
     if(match){
      var
       response$0 = match[2],
       new_seqnum = match[1],
       new_out = caml_call3(t[12], t[4], query, response$0);
      t[1] = [0, new_seqnum];
      t[4] = [0, new_out];
      caml_call3(Bus[14], t[8], query, new_out);
      return caml_call1(Async_kernel[20], [0, new_out]);
     }
     var
      _a$_ =
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_cancellation_caused_by_reg),
         0],
      _ba_ =
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_src_polling_state_rpc_ml_4$0),
         _a$_],
      _bb_ = [1, [0, caml_call1(Sexplib0_Sexp_conv[7], cst_BUG$0), _ba_]],
      _bc_ = caml_call1(Core_Or_error[45], _bb_);
     return caml_call1(Async_kernel[20], _bc_);
    }
    var
     last_seqnum = t[1],
     client_id = t[7],
     _a__ =
       dispatch_underlying(t, connection, [0, last_seqnum, query, client_id]);
    return caml_call2(Async_kernel[23][2], _a__, _a9_);
   }
   function collapse_sequencer_error(param){
    if(typeof param === "number")
     return [1, caml_call1(Core_Error[14], cst_Request_aborted)];
    if(17724 <= param[1]){
     var result_or_error = param[2];
     return result_or_error;
    }
    var exn = param[2];
    return [1, caml_call2(Core_Error[27], 0, exn)];
   }
   function dispatch$0(param, connection, query){
    var
     t = param[1],
     query_dispatch_id = caml_call1(Query_dispatch_id[45], 0);
    t[3] = query_dispatch_id;
    function _aY_(param){
     if(caml_call2(Query_dispatch_id[19], t[3], query_dispatch_id))
      var
       _a7_ = function(param){return dispatch(t, connection, query);},
       _a8_ = caml_call2(Async_kernel_Throttle[9], t[5], _a7_);
     else
      var _a8_ = caml_call1(Async_kernel[20], -216426513);
     return caml_call2(Async_kernel[22], _a8_, collapse_sequencer_error);
    }
    function _aW_(param){
     var match = t[2];
     if(! match) return Async_kernel_Deferred_or_error[37];
     var q = match[1], _aZ_ = caml_call1(Async_kernel_Throttle[18], t[5]);
     if(caml_call2(Core[90], _aZ_, 0))
      return Async_kernel_Deferred_or_error[37];
     if(caml_call2(t[10], query, q))
      return Async_kernel_Deferred_or_error[37];
     caml_call1(Async_kernel_Throttle[21], t[5]);
     function _a0_(cancel_response){
      function _a2_(param){
       t[5] = caml_call3(Async_kernel_Throttle[25][2], 0, _Q_, 0);
       if(0 !== cancel_response[0]){
        var e = cancel_response[1];
        return [1, e];
       }
       if(! cancel_response[1]) return _R_;
       var
        _a4_ =
          [0,
           caml_call1(Sexplib0_Sexp_conv[7], cst_regular_response_caused_by),
           0],
        _a5_ =
          [0,
           caml_call1(Sexplib0_Sexp_conv[7], cst_src_polling_state_rpc_ml_4),
           _a4_],
        _a6_ = [1, [0, caml_call1(Sexplib0_Sexp_conv[7], cst_BUG), _a5_]];
       return caml_call1(Core_Or_error[45], _a6_);
      }
      var _a3_ = caml_call1(Async_kernel_Throttle[24], t[5]);
      return caml_call2(Async_kernel[23][3], _a3_, _a2_);
     }
     var _a1_ = dispatch_underlying(t, connection, [1, t[7]]);
     return caml_call2(Async_kernel[23][2], _a1_, _a0_);
    }
    var _aX_ = caml_call2(Async_kernel_Throttle[10], t[6], _aW_);
    return caml_call2(Async_kernel_Deferred_or_error[19][4][2], _aX_, _aY_);
   }
   function redispatch(param, connection){
    var t = param[1];
    function _aT_(param){
     var match = t[2];
     if(match){var q = match[1]; return dispatch(t, connection, q);}
     var
      _aV_ = [1, caml_call1(Core_Error[14], cst_redispatch_called_before_a)];
     return caml_call1(Async_kernel_Deferred[12], _aV_);
    }
    var _aU_ = caml_call2(Async_kernel_Throttle[9], t[5], _aT_);
    return caml_call2(Async_kernel[22], _aU_, collapse_sequencer_error);
   }
   function forget_on_server(param, connection){
    var t = param[1];
    t[3] = caml_call1(Query_dispatch_id[45], 0);
    var match = t[2];
    if(! match) return Async_kernel_Deferred_or_error[37];
    var query = match[1];
    function _aK_(param){
     caml_call1(Async_kernel_Throttle[21], t[5]);
     function _aM_(forget_response){
      function _aO_(param){
       t[5] = caml_call3(Async_kernel_Throttle[25][2], 0, _S_, 0);
       if(0 !== forget_response[0]){
        var e = forget_response[1];
        return [1, e];
       }
       if(! forget_response[1]) return _T_;
       var
        _aQ_ =
          [0,
           caml_call1(Sexplib0_Sexp_conv[7], cst_Regular_response_caused_by),
           0],
        _aR_ =
          [0,
           caml_call1(Sexplib0_Sexp_conv[7], cst_src_polling_state_rpc_ml_5),
           _aQ_],
        _aS_ = [1, [0, caml_call1(Sexplib0_Sexp_conv[7], cst_BUG$1), _aR_]];
       return caml_call1(Core_Or_error[45], _aS_);
      }
      var _aP_ = caml_call1(Async_kernel_Throttle[24], t[5]);
      return caml_call2(Async_kernel[23][3], _aP_, _aO_);
     }
     var _aN_ = dispatch_underlying(t, connection, [2, query, t[7]]);
     return caml_call2(Async_kernel[23][2], _aN_, _aM_);
    }
    var _aL_ = caml_call2(Async_kernel_Throttle[9], t[6], _aK_);
    return caml_call2(Async_kernel[22], _aL_, collapse_sequencer_error);
   }
   function query(param){var last_query = param[1][2]; return last_query;}
   function bus(param){var bus = param[1][8]; return caml_call1(Bus[6], bus);}
   function create$1(initial_query, t){
    var underlying_rpc = t[3], query_equal = t[2], response_module = t[1];
    function f(prev, query, param){
     if(0 === param[0]){var r = param[1]; return r;}
     var diffs = param[1];
     if(prev){
      var prev$0 = prev[1];
      return caml_call2(response_module[11], prev$0, diffs);
     }
     var
      _aH_ =
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_received_an_update_without),
         0],
      _aI_ =
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_src_polling_state_rpc_ml_5$0),
         _aH_],
      _aJ_ = [1, [0, caml_call1(Sexplib0_Sexp_conv[7], cst_BUG$2), _aI_]];
     return caml_call1(Core[261], _aJ_);
    }
    function _aD_(error){
     var
      _aF_ = caml_call2(Core_Error[22], error, tag),
      _aG_ = caml_call1(Core_Error[9], _aF_);
     return caml_call2(Core[257], 0, _aG_);
    }
    var
     bus = caml_call5(Bus[7], 0, _U_, 2, 1, _aD_),
     sequencer = caml_call3(Async_kernel_Throttle[25][2], 0, _V_, 0),
     cleaning_sequencer = caml_call3(Async_kernel_Throttle[25][2], 0, _W_, 0),
     _aE_ = caml_call1(Client_id[45], 0);
    return [0,
            [0,
             0,
             initial_query,
             caml_call1(Query_dispatch_id[45], 0),
             0,
             sequencer,
             cleaning_sequencer,
             _aE_,
             bus,
             response_module,
             query_equal,
             underlying_rpc,
             f]];
   }
   function sexp_of_t(sexp_of_a, param){
    if(0 === param[0]){
     var a = param[1], _aB_ = caml_call1(sexp_of_a, a);
     return [1, [0, _X_, [0, caml_call1(Core_Sexp[93], _aB_), 0]]];
    }
    var sexp_of = param[2], t = param[1], _aC_ = caml_call1(sexp_of, t);
    return [1, [0, _Y_, [0, caml_call1(Core_Sexp[93], _aC_), 0]]];
   }
   var Response = [0, sexp_of_t];
   function create_client(initial_query, t, introspect){
    var
     client = create$1(initial_query, t)[1],
     response_module = client[9],
     fold = client[12];
    function new_fold(prev, query, resp){
     if(0 === resp[0])
      var r = resp[1], resp$0 = [0, r];
     else
      var diffs = resp[1], resp$0 = [1, diffs, response_module[9][9]];
     caml_call3(introspect, prev, query, resp$0);
     return caml_call3(fold, prev, query, resp);
    }
    return [0,
            [0,
             client[1],
             client[2],
             client[3],
             client[4],
             client[5],
             client[6],
             client[7],
             client[8],
             client[9],
             client[10],
             client[11],
             new_fold]];
   }
   caml_call1(Ppx_inline_test_lib[7], cst_polling_state_rpc);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Polling_state_rpc);
   var
    Polling_state_rpc =
      [0,
       name,
       version,
       babel_generic_rpc,
       create$0,
       implement,
       implement_with_client_state,
       implement_via_bus,
       implement_via_bus$0,
       [0, create$1, dispatch$0, redispatch, forget_on_server, query, bus],
       [0, Response, create_client]];
   runtime.caml_register_global
    (135, Polling_state_rpc, cst_Polling_state_rpc$0);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
