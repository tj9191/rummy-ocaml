// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Typerep_lib
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Typerep_lib = [0];
   runtime.caml_register_global(0, Typerep_lib, "Typerep_lib");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Typerep_lib__Named_intf
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Typerep_lib_Named_intf = [0];
   runtime.caml_register_global
    (0, Typerep_lib_Named_intf, "Typerep_lib__Named_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Typerep_lib__Type_equal
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, refl = 0;
   function conv(param, x){return x;}
   function Lift(X){function lift(param){return 0;} return [0, lift];}
   var Typerep_lib_Type_equal = [0, conv, refl, Lift];
   runtime.caml_register_global
    (0, Typerep_lib_Type_equal, "Typerep_lib__Type_equal");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Typerep_lib__Typename
//# unitInfo: Requires: Base, Stdlib, Stdlib__Hashtbl, Stdlib__List, Stdlib__Printf, Typerep_lib__Type_equal
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Typerep_lib_Type_equal = global_data.Typerep_lib__Type_equal,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib = global_data.Stdlib,
    Base = global_data.Base,
    Stdlib_Hashtbl = global_data.Stdlib__Hashtbl;
   global_data.Stdlib__List;
   var
    _a_ =
      [0,
       [11, "Typename.Same_witness_exn ", [3, 0, [12, 32, [3, 0, 0]]]],
       "Typename.Same_witness_exn %S %S"],
    cst_Typename_same_witness_exn = "Typename.same_witness_exn",
    cst_Typename_create = "Typename.create",
    cst_static = "static";
   function compare(a, b){return runtime.caml_int_compare(a[1], b[1]);}
   function equal(a, b){return a[1] === b[1] ? 1 : 0;}
   var uid = [0, 0];
   function next(name){var code = uid[1]; uid[1]++; return [0, code, name];}
   function hash(a){return caml_call1(Stdlib_Hashtbl[28], a[1]);}
   function name(a){return a[2];}
   var static$0 = next(cst_static);
   function compare$0(k1, k2){
    if(k1 === k2) return 0;
    var cmp = compare(k1[1], k2[1]);
    if(0 !== cmp) return cmp;
    var b$0 = k2[2], a$0 = k1[2], a = a$0, b = b$0;
    for(;;){
     if(! a) return b ? -1 : 0;
     if(! b) return 1;
     var ys = b[2], y = b[1], xs = a[2], x = a[1], n = compare$0(x, y);
     if(0 !== n) return n;
     var a = xs, b = ys;
    }
   }
   function equal$0(a, b){return 0 === compare$0(a, b) ? 1 : 0;}
   var hash$0 = Stdlib_Hashtbl[28], static$1 = [0, static$0, 0];
   function key(t){return t;}
   function uid$0(t){return t[1];}
   function name$0(t){return t[1][2];}
   function create(opt, param){
    if(opt) var sth = opt[1], name = sth; else var name = cst_Typename_create;
    return [0, next(name), 0];
   }
   function same(nm1, nm2){return 0 === compare$0(nm1, nm2) ? 1 : 0;}
   function same_witness(nm1, nm2){
    return 0 === compare$0(nm1, nm2) ? [0, Typerep_lib_Type_equal[2]] : 0;
   }
   function same_witness_exn(nm1, nm2){
    return 0 === compare$0(nm1, nm2)
            ? Typerep_lib_Type_equal[2]
            : caml_call1(Stdlib[2], cst_Typename_same_witness_exn);
   }
   var Key_table = caml_call1(Stdlib_Hashtbl[26], [0, equal$0, hash$0]);
   function Table(X){
    function create(int$0){return caml_call1(Key_table[1], int$0);}
    function mem(table, name){return caml_call2(Key_table[11], table, name);}
    function set(table, name, data){
     return caml_call3(Key_table[10], table, name, [0, name, data]);
    }
    function find(table, name){
     try{var _h_ = [0, caml_call2(Key_table[7], table, name)], data = _h_;}
     catch(_i_){
      var _g_ = caml_wrap_exception(_i_);
      if(_g_[1] !== Base[248] && _g_ !== Stdlib[8])
       throw caml_maybe_attach_backtrace(_g_, 0);
      var data = 0;
     }
     if(! data) return 0;
     var match = data[1], data$0 = match[2], name$0 = match[1];
     same_witness_exn(name$0, name);
     return [0, data$0];
    }
    return [0, create, mem, set, find];
   }
   function fail(uid_a, uid_b){
    var msg = caml_call3(Stdlib_Printf[4], _a_, uid_a[2], uid_b[2]);
    return caml_call1(Stdlib[2], msg);
   }
   function Same_witness_exn_1(A, B){
    var
     uid_a = caml_call1(A[1], static$1)[1],
     uid_b = caml_call1(B[1], static$1)[1],
     eq = Typerep_lib_Type_equal[2],
     witness = equal(uid_a, uid_b) ? [0, eq] : fail(uid_a, uid_b);
    return [0, witness];
   }
   function Same_witness_exn_2(A, B){
    var
     uid_a = caml_call2(A[1], static$1, static$1)[1],
     uid_b = caml_call2(B[1], static$1, static$1)[1],
     eq = Typerep_lib_Type_equal[2],
     witness = equal(uid_a, uid_b) ? [0, eq] : fail(uid_a, uid_b);
    return [0, witness];
   }
   function Same_witness_exn_3(A, B){
    var
     uid_a = caml_call3(A[1], static$1, static$1, static$1)[1],
     uid_b = caml_call3(B[1], static$1, static$1, static$1)[1],
     eq = Typerep_lib_Type_equal[2],
     witness = equal(uid_a, uid_b) ? [0, eq] : fail(uid_a, uid_b);
    return [0, witness];
   }
   function Same_witness_exn_4(A, B){
    var
     uid_a = caml_call4(A[1], static$1, static$1, static$1, static$1)[1],
     uid_b = caml_call4(B[1], static$1, static$1, static$1, static$1)[1],
     eq = Typerep_lib_Type_equal[2],
     witness = equal(uid_a, uid_b) ? [0, eq] : fail(uid_a, uid_b);
    return [0, witness];
   }
   function Same_witness_exn_5(A, B){
    var
     uid_a =
       caml_call5(A[1], static$1, static$1, static$1, static$1, static$1)[1],
     uid_b =
       caml_call5(B[1], static$1, static$1, static$1, static$1, static$1)[1],
     eq = Typerep_lib_Type_equal[2],
     witness = equal(uid_a, uid_b) ? [0, eq] : fail(uid_a, uid_b);
    return [0, witness];
   }
   function _b_(X){
    var uid = next(X[1]);
    function typename_of_t(a, b, c, d, e){
     return [0, uid, [0, a, [0, b, [0, c, [0, d, [0, e, 0]]]]]];
    }
    return [0, typename_of_t];
   }
   function _c_(X){
    var uid = next(X[1]);
    function typename_of_t(a, b, c, d){
     return [0, uid, [0, a, [0, b, [0, c, [0, d, 0]]]]];
    }
    return [0, typename_of_t];
   }
   function _d_(X){
    var uid = next(X[1]);
    function typename_of_t(a, b, c){
     return [0, uid, [0, a, [0, b, [0, c, 0]]]];
    }
    return [0, typename_of_t];
   }
   function _e_(X){
    var uid = next(X[1]);
    function typename_of_t(a, b){return [0, uid, [0, a, [0, b, 0]]];}
    return [0, typename_of_t];
   }
   function _f_(X){
    var uid = next(X[1]);
    function typename_of_t(a){return [0, uid, [0, a, 0]];}
    return [0, typename_of_t];
   }
   var
    Typerep_lib_Typename =
      [0,
       create,
       static$1,
       same,
       same_witness,
       same_witness_exn,
       [0, compare$0, equal$0, hash$0],
       key,
       [0, compare, equal, hash, name],
       uid$0,
       name$0,
       function(X){
        var uid = next(X[1]), typename_of_t = [0, uid, 0];
        return [0, typename_of_t];
       },
       _f_,
       _e_,
       _d_,
       _c_,
       _b_,
       Table,
       Same_witness_exn_1,
       Same_witness_exn_2,
       Same_witness_exn_3,
       Same_witness_exn_4,
       Same_witness_exn_5];
   runtime.caml_register_global
    (10, Typerep_lib_Typename, "Typerep_lib__Typename");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Typerep_lib__Variant_and_record_intf
//# unitInfo: Requires: Stdlib__Array
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_check_bound = runtime.caml_check_bound;
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Array = global_data.Stdlib__Array;
   function M(X){
    var Tag_internal = [0];
    function label(t){return t[1];}
    function arity(t){return t[3];}
    function args_labels(t){return t[4];}
    function index(t){return t[5];}
    function ocaml_repr(t){return t[6];}
    function create(t){return t[8];}
    function tyid(t){return t[7];}
    function traverse(t){return t[2];}
    function internal_use_only(t){return t;}
    var
     Tag =
       [0,
        label,
        arity,
        args_labels,
        index,
        ocaml_repr,
        create,
        tyid,
        traverse,
        internal_use_only],
     Variant_internal = [0];
    function typename_of_t(t){return t[1];}
    function length(t){return t[2].length - 1;}
    function tag(t, index){return caml_check_bound(t[2], index)[1 + index];}
    function is_polymorphic(t){return t[3];}
    function value(t){return t[4];}
    function fold(t, init, f){
     return caml_call3(Stdlib_Array[17], f, init, t[2]);
    }
    function internal_use_only$0(t){return t;}
    var
     Variant =
       [0,
        typename_of_t,
        length,
        tag,
        is_polymorphic,
        value,
        fold,
        internal_use_only$0],
     Field_internal = [0];
    function label$0(t){return t[1];}
    function index$0(t){return t[3];}
    function get(t){return t[5];}
    function is_mutable(t){return t[6];}
    function tyid$0(t){return t[4];}
    function traverse$0(t){return t[2];}
    function internal_use_only$1(t){return t;}
    var
     Field =
       [0,
        label$0,
        index$0,
        get,
        is_mutable,
        tyid$0,
        traverse$0,
        internal_use_only$1],
     Record_internal = [0];
    function typename_of_t$0(t){return t[1];}
    function length$0(t){return t[2].length - 1;}
    function field(t, index){return caml_check_bound(t[2], index)[1 + index];}
    function has_double_array_tag(t){return t[3];}
    function create$0(t){return t[4];}
    function fold$0(t, init, f){
     return caml_call3(Stdlib_Array[17], f, init, t[2]);
    }
    function internal_use_only$2(t){return t;}
    var
     Record =
       [0,
        typename_of_t$0,
        length$0,
        field,
        has_double_array_tag,
        create$0,
        fold$0,
        internal_use_only$2];
    return [0,
            Tag_internal,
            Tag,
            Variant_internal,
            Variant,
            Field_internal,
            Field,
            Record_internal,
            Record];
   }
   var Typerep_lib_Variant_and_record = [0, M];
   runtime.caml_register_global
    (1,
     Typerep_lib_Variant_and_record,
     "Typerep_lib__Variant_and_record_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Typerep_lib__Std_internal
//# unitInfo: Requires: Base__Int63, CamlinternalLazy, CamlinternalMod, Typerep_lib__Typename, Typerep_lib__Variant_and_record_intf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_lib_std_internal_ml = "lib/std_internal.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_obj_tag = runtime.caml_obj_tag;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    name = "int",
    name$0 = "int32",
    name$1 = "int64",
    name$2 = "nativeint",
    name$3 = "char",
    name$4 = "float",
    name$5 = "string",
    name$6 = "bytes",
    name$7 = "bool",
    name$8 = "unit",
    name$9 = "option",
    name$10 = "list",
    name$11 = "array",
    name$12 = "lazy_t",
    name$13 = "ref",
    name$14 = "function",
    name$15 = "tuple0",
    name$16 = "tuple2",
    name$17 = "tuple3",
    name$18 = "tuple4",
    name$19 = "tuple5",
    Typerep_lib_Typename = global_data.Typerep_lib__Typename,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Assert_failure = global_data.Assert_failure,
    CamlinternalMod = global_data.CamlinternalMod,
    Typerep_lib_Variant_and_record =
      global_data.Typerep_lib__Variant_and_record_intf,
    Base_Int63 = global_data.Base__Int63,
    typename_of_int = caml_call1(Typerep_lib_Typename[11], [0, name])[1],
    typename_of_int32 = caml_call1(Typerep_lib_Typename[11], [0, name$0])[1],
    typename_of_int64 = caml_call1(Typerep_lib_Typename[11], [0, name$1])[1],
    typename_of_nativeint =
      caml_call1(Typerep_lib_Typename[11], [0, name$2])[1],
    typename_of_char = caml_call1(Typerep_lib_Typename[11], [0, name$3])[1],
    typename_of_float = caml_call1(Typerep_lib_Typename[11], [0, name$4])[1],
    typename_of_string = caml_call1(Typerep_lib_Typename[11], [0, name$5])[1],
    typename_of_bytes = caml_call1(Typerep_lib_Typename[11], [0, name$6])[1],
    typename_of_bool = caml_call1(Typerep_lib_Typename[11], [0, name$7])[1],
    typename_of_unit = caml_call1(Typerep_lib_Typename[11], [0, name$8])[1],
    M_option = caml_call1(Typerep_lib_Typename[12], [0, name$9]),
    typename_of_option = M_option[1],
    M_list = caml_call1(Typerep_lib_Typename[12], [0, name$10]),
    typename_of_list = M_list[1],
    M_array = caml_call1(Typerep_lib_Typename[12], [0, name$11]),
    typename_of_array = M_array[1],
    M_lazy_t = caml_call1(Typerep_lib_Typename[12], [0, name$12]),
    typename_of_lazy_t = M_lazy_t[1],
    M_ref = caml_call1(Typerep_lib_Typename[12], [0, name$13]),
    typename_of_ref = M_ref[1],
    M_function = caml_call1(Typerep_lib_Typename[13], [0, name$14]),
    typename_of_function = M_function[1],
    M_tuple0 = caml_call1(Typerep_lib_Typename[11], [0, name$15]),
    typename_of_tuple0 = M_tuple0[1],
    M_tuple2 = caml_call1(Typerep_lib_Typename[13], [0, name$16]),
    typename_of_tuple2 = M_tuple2[1],
    M_tuple3 = caml_call1(Typerep_lib_Typename[14], [0, name$17]),
    typename_of_tuple3 = M_tuple3[1],
    M_tuple4 = caml_call1(Typerep_lib_Typename[15], [0, name$18]),
    typename_of_tuple4 = M_tuple4[1],
    M_tuple5 = caml_call1(Typerep_lib_Typename[16], [0, name$19]),
    typename_of_tuple5 = M_tuple5[1],
    Typerep =
      caml_call2
       (CamlinternalMod[1],
        [0, cst_lib_std_internal_ml, 401, 6],
        [0,
         [0,
          [0, [0, 0, 0, 0]],
          [0, [0, 0, 0]],
          [0, [0]],
          [0, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
          [0, [0]],
          [0, [0, 0, 0, 0, 0, 0, 0, 0]],
          [0, [0]],
          [0, [0, 0, 0, 0, 0, 0, 0, 0]],
          [0, [0]],
          [0, [0, 0, 0, 0, 0, 0, 0, 0]],
          0,
          0,
          0,
          0,
          0]]),
    _a_ = [0, 0],
    _b_ = [0, 0],
    _c_ = [0, 0],
    _d_ = [0, 0],
    _e_ = [0, 0],
    _f_ = [0, 0],
    _g_ = [0, 0],
    _h_ = [0, 0],
    _i_ = [0, 0],
    _j_ = [0, 0],
    _k_ = [0, 0],
    _l_ = [0, 0],
    _m_ = [0, 0],
    _n_ = [0, 0],
    _o_ = [0, 0],
    _p_ = [0, cst_lib_std_internal_ml, 802, 14],
    _q_ =
      [0,
       [0,
        [0, [0, 0, 0, 0]],
        [0, [0, 0, 0]],
        [0, [0]],
        [0, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
        [0, [0]],
        [0, [0, 0, 0, 0, 0, 0, 0, 0]],
        [0, [0]],
        [0, [0, 0, 0, 0, 0, 0, 0, 0]],
        [0, [0]],
        [0, [0, 0, 0, 0, 0, 0, 0, 0]],
        0,
        0,
        0,
        0,
        0]];
   function arity(param){
    switch(param[0]){
      case 0:
       return 0;
      case 1:
       return 1;
      case 2:
       return 2;
      case 3:
       return 3;
      case 4:
       return 4;
      default: return 5;
    }
   }
   function typename_of_t(param){
    switch(param[0]){
      case 0:
       var rep = param[1]; return rep[2];
      case 1:
       var rep$0 = param[1]; return rep$0[3];
      case 2:
       var rep$1 = param[1]; return rep$1[4];
      case 3:
       var rep$2 = param[1]; return rep$2[5];
      case 4:
       var rep$3 = param[1]; return rep$3[6];
      default: var rep$4 = param[1]; return rep$4[7];
    }
   }
   function name$20(rep){
    var
     ___ = typename_of_t(rep),
     _$_ = caml_call1(Typerep_lib_Typename[9], ___);
    return caml_call1(Typerep_lib_Typename[8][4], _$_);
   }
   var Named = [0, arity, typename_of_t, name$20];
   function arity$0(param){
    switch(param[0]){
      case 0:
       return 2;
      case 1:
       return 3;
      case 2:
       return 4;
      default: return 5;
    }
   }
   function typename_of_t$0(param){
    switch(param[0]){
      case 0:
       var
        match = param[1],
        b = match[2],
        a = match[1],
        _Q_ = caml_call1(Typerep[14], b);
       return caml_call2(typename_of_tuple2, caml_call1(Typerep[14], a), _Q_);
      case 1:
       var
        match$0 = param[1],
        c = match$0[3],
        b$0 = match$0[2],
        a$0 = match$0[1],
        _R_ = caml_call1(Typerep[14], c),
        _S_ = caml_call1(Typerep[14], b$0);
       return caml_call3
               (typename_of_tuple3, caml_call1(Typerep[14], a$0), _S_, _R_);
      case 2:
       var
        match$1 = param[1],
        d = match$1[4],
        c$0 = match$1[3],
        b$1 = match$1[2],
        a$1 = match$1[1],
        _T_ = caml_call1(Typerep[14], d),
        _U_ = caml_call1(Typerep[14], c$0),
        _V_ = caml_call1(Typerep[14], b$1);
       return caml_call4
               (typename_of_tuple4,
                caml_call1(Typerep[14], a$1),
                _V_,
                _U_,
                _T_);
      default:
       var
        match$2 = param[1],
        e = match$2[5],
        d$0 = match$2[4],
        c$1 = match$2[3],
        b$2 = match$2[2],
        a$2 = match$2[1],
        _W_ = caml_call1(Typerep[14], e),
        _X_ = caml_call1(Typerep[14], d$0),
        _Y_ = caml_call1(Typerep[14], c$1),
        _Z_ = caml_call1(Typerep[14], b$2);
       return caml_call5
               (typename_of_tuple5,
                caml_call1(Typerep[14], a$2),
                _Z_,
                _Y_,
                _X_,
                _W_);
    }
   }
   var
    Tuple = [0, arity$0, typename_of_t$0],
    include = caml_call1(Typerep_lib_Variant_and_record[1], [0]),
    Tag_internal = include[1],
    Tag = include[2],
    Variant_internal = include[3],
    Variant = include[4],
    Field_internal = include[5],
    Field = include[6],
    Record_internal = include[7],
    Record = include[8];
   function typename_of_t$1(param){
    if(typeof param === "number")
     switch(param){
       case 0:
        return typename_of_int;
       case 1:
        return typename_of_int32;
       case 2:
        return typename_of_int64;
       case 3:
        return typename_of_nativeint;
       case 4:
        return typename_of_char;
       case 5:
        return typename_of_float;
       case 6:
        return typename_of_string;
       case 7:
        return typename_of_bytes;
       case 8:
        return typename_of_bool;
       default: return typename_of_unit;
     }
    switch(param[0]){
      case 0:
       var rep = param[1];
       return caml_call1(typename_of_option, typename_of_t$1(rep));
      case 1:
       var rep$0 = param[1];
       return caml_call1(typename_of_list, typename_of_t$1(rep$0));
      case 2:
       var rep$1 = param[1];
       return caml_call1(typename_of_array, typename_of_t$1(rep$1));
      case 3:
       var rep$2 = param[1];
       return caml_call1(typename_of_lazy_t, typename_of_t$1(rep$2));
      case 4:
       var rep$3 = param[1];
       return caml_call1(typename_of_ref, typename_of_t$1(rep$3));
      case 5:
       var
        match = param[1],
        rng = match[2],
        dom = match[1],
        _P_ = typename_of_t$1(rng);
       return caml_call2(typename_of_function, typename_of_t$1(dom), _P_);
      case 6:
       var rep$4 = param[1]; return caml_call1(Typerep[2][2], rep$4);
      case 7:
       var rep$5 = param[1]; return caml_call1(Typerep[10][1], rep$5);
      case 8:
       var rep$6 = param[1]; return caml_call1(Typerep[6][1], rep$6);
      default: var name = param[1][1]; return caml_call1(Named[2], name);
    }
   }
   function same_witness(t1, t2){
    var t1$0 = t1, t2$0 = t2;
    for(;;){
     a:
     {
      if(typeof t1$0 === "number")
       switch(t1$0){
         case 0:
          if(typeof t2$0 === "number"){if(0 === t2$0) return _a_; break a;}
          if(9 !== t2$0[0]) break a;
          break;
         case 1:
          if(typeof t2$0 === "number"){if(1 === t2$0) return _b_; break a;}
          if(9 !== t2$0[0]) break a;
          break;
         case 2:
          if(typeof t2$0 === "number"){if(2 === t2$0) return _c_; break a;}
          if(9 !== t2$0[0]) break a;
          break;
         case 3:
          if(typeof t2$0 === "number"){if(3 === t2$0) return _d_; break a;}
          if(9 !== t2$0[0]) break a;
          break;
         case 4:
          if(typeof t2$0 === "number"){if(4 === t2$0) return _e_; break a;}
          if(9 !== t2$0[0]) break a;
          break;
         case 5:
          if(typeof t2$0 === "number"){if(5 === t2$0) return _f_; break a;}
          if(9 !== t2$0[0]) break a;
          break;
         case 6:
          if(typeof t2$0 === "number"){if(6 === t2$0) return _g_; break a;}
          if(9 !== t2$0[0]) break a;
          break;
         case 7:
          if(typeof t2$0 === "number"){if(7 === t2$0) return _h_; break a;}
          if(9 !== t2$0[0]) break a;
          break;
         case 8:
          if(typeof t2$0 === "number"){if(8 === t2$0) return _i_; break a;}
          if(9 !== t2$0[0]) break a;
          break;
         default:
          if(typeof t2$0 === "number"){if(9 === t2$0) return _j_; break a;}
          if(9 !== t2$0[0]) break a;
       }
      else
       b:
       switch(t1$0[0]){
         case 0:
          var r1 = t1$0[1];
          if(typeof t2$0 !== "number")
           switch(t2$0[0]){
             case 0:
              var r2$0 = t2$0[1], x = same_witness(r1, r2$0);
              return x ? x : x;
             case 9:
              break b;
           }
          break a;
         case 1:
          var r1$0 = t1$0[1];
          if(typeof t2$0 !== "number")
           switch(t2$0[0]){
             case 1:
              var r2$1 = t2$0[1], x$0 = same_witness(r1$0, r2$1);
              return x$0 ? x$0 : x$0;
             case 9:
              break b;
           }
          break a;
         case 2:
          var r1$1 = t1$0[1];
          if(typeof t2$0 !== "number")
           switch(t2$0[0]){
             case 2:
              var r2$2 = t2$0[1], x$1 = same_witness(r1$1, r2$2);
              return x$1 ? x$1 : x$1;
             case 9:
              break b;
           }
          break a;
         case 3:
          var r1$2 = t1$0[1];
          if(typeof t2$0 !== "number")
           switch(t2$0[0]){
             case 3:
              var r2$3 = t2$0[1], x$2 = same_witness(r1$2, r2$3);
              return x$2 ? x$2 : x$2;
             case 9:
              break b;
           }
          break a;
         case 4:
          var r1$3 = t1$0[1];
          if(typeof t2$0 !== "number")
           switch(t2$0[0]){
             case 4:
              var r2$4 = t2$0[1], x$3 = same_witness(r1$3, r2$4);
              return x$3 ? x$3 : x$3;
             case 9:
              break b;
           }
          break a;
         case 5:
          var _w_ = t1$0[1], rng1 = _w_[2], dom1 = _w_[1];
          if(typeof t2$0 !== "number")
           switch(t2$0[0]){
             case 5:
              var
               match = t2$0[1],
               rng2 = match[2],
               dom2 = match[1],
               match$0 = same_witness(dom1, dom2),
               match$1 = same_witness(rng1, rng2);
              if(match$0 && match$1) return _k_;
              return 0;
             case 9:
              break b;
           }
          break a;
         case 6:
          var t1$1 = t1$0[1];
          if(typeof t2$0 !== "number")
           switch(t2$0[0]){
             case 6:
              var t2$2 = t2$0[1];
              switch(t1$1[0]){
                case 0:
                 var _x_ = t1$1[1];
                 if(0 !== t2$2[0]) return 0;
                 var
                  match$2 = t2$2[1],
                  b2 = match$2[2],
                  a2 = match$2[1],
                  b1 = _x_[2],
                  a1 = _x_[1],
                  match$3 = same_witness(a1, a2),
                  match$4 = same_witness(b1, b2);
                 if(match$3 && match$4) return _l_;
                 return 0;
                case 1:
                 var _y_ = t1$1[1];
                 if(1 !== t2$2[0]) return 0;
                 var
                  match$5 = t2$2[1],
                  c2 = match$5[3],
                  b2$0 = match$5[2],
                  a2$0 = match$5[1],
                  c1 = _y_[3],
                  b1$0 = _y_[2],
                  a1$0 = _y_[1],
                  match$6 = same_witness(a1$0, a2$0),
                  match$7 = same_witness(b1$0, b2$0),
                  match$8 = same_witness(c1, c2);
                 if(match$6 && match$7 && match$8) return _m_;
                 return 0;
                case 2:
                 var _z_ = t1$1[1];
                 if(2 !== t2$2[0]) return 0;
                 var
                  match$9 = t2$2[1],
                  d2 = match$9[4],
                  c2$0 = match$9[3],
                  b2$1 = match$9[2],
                  a2$1 = match$9[1],
                  d1 = _z_[4],
                  c1$0 = _z_[3],
                  b1$1 = _z_[2],
                  a1$1 = _z_[1],
                  match$10 = same_witness(a1$1, a2$1),
                  match$11 = same_witness(b1$1, b2$1),
                  match$12 = same_witness(c1$0, c2$0),
                  match$13 = same_witness(d1, d2);
                 if(match$10 && match$11 && match$12 && match$13) return _n_;
                 return 0;
                default:
                 var _A_ = t1$1[1];
                 if(3 !== t2$2[0]) return 0;
                 var
                  match$14 = t2$2[1],
                  e2 = match$14[5],
                  d2$0 = match$14[4],
                  c2$1 = match$14[3],
                  b2$2 = match$14[2],
                  a2$2 = match$14[1],
                  e1 = _A_[5],
                  d1$0 = _A_[4],
                  c1$1 = _A_[3],
                  b1$2 = _A_[2],
                  a1$2 = _A_[1],
                  match$15 = same_witness(a1$2, a2$2),
                  match$16 = same_witness(b1$2, b2$2),
                  match$17 = same_witness(c1$1, c2$1),
                  match$18 = same_witness(d1$0, d2$0),
                  match$19 = same_witness(e1, e2);
                 if(match$15 && match$16 && match$17 && match$18 && match$19)
                  return _o_;
                 return 0;
              }
             case 9:
              break b;
           }
          break a;
         case 7:
          var r1$4 = t1$0[1];
          if(typeof t2$0 !== "number")
           switch(t2$0[0]){
             case 7:
              var
               r2$5 = t2$0[1],
               _B_ = caml_call1(Typerep[10][1], r2$5),
               _C_ = caml_call1(Typerep[10][1], r1$4);
              return caml_call2(Typerep_lib_Typename[4], _C_, _B_);
             case 9:
              break b;
           }
          break a;
         case 8:
          var r1$5 = t1$0[1];
          if(typeof t2$0 !== "number")
           switch(t2$0[0]){
             case 8:
              var
               r2$6 = t2$0[1],
               _D_ = caml_call1(Typerep[6][1], r2$6),
               _E_ = caml_call1(Typerep[6][1], r1$5);
              return caml_call2(Typerep_lib_Typename[4], _E_, _D_);
             case 9:
              break b;
           }
          break a;
         default:
          var match$20 = t1$0[1], name1 = match$20[1];
          if(typeof t2$0 !== "number" && 9 === t2$0[0]){
           var
            match$21 = t2$0[1],
            r2$7 = match$21[2],
            name2 = match$21[1],
            r1$7 = match$20[2],
            _H_ = caml_call1(Named[2], name2),
            _I_ = caml_call1(Named[2], name1),
            x$4 = caml_call2(Typerep_lib_Typename[4], _I_, _H_);
           if(x$4) return x$4;
           if(r1$7){
            var _J_ = r1$7[1], _K_ = caml_obj_tag(_J_);
            c:
            if(250 === _K_)
             var t1$3 = _J_[1];
            else{
             if(246 !== _K_ && 244 !== _K_){var t1$3 = _J_; break c;}
             var t1$3 = caml_call1(CamlinternalLazy[2], _J_);
            }
            if(! r2$7){var t1$0 = t1$3; continue;}
            var _L_ = r2$7[1], _M_ = caml_obj_tag(_L_);
            c:
            if(250 === _M_)
             var t2$3 = _L_[1];
            else{
             if(246 !== _M_ && 244 !== _M_){var t2$3 = _L_; break c;}
             var t2$3 = caml_call1(CamlinternalLazy[2], _L_);
            }
            var t1$0 = t1$3, t2$0 = t2$3;
            continue;
           }
           if(! r2$7) return 0;
           var _N_ = r2$7[1], _O_ = caml_obj_tag(_N_);
           c:
           if(250 === _O_)
            var t2$4 = _N_[1];
           else{
            if(246 !== _O_ && 244 !== _O_){var t2$4 = _N_; break c;}
            var t2$4 = caml_call1(CamlinternalLazy[2], _N_);
           }
           var t2$0 = t2$4;
           continue;
          }
          var r1$6 = match$20[2];
          if(! r1$6) return 0;
          var _F_ = r1$6[1], _G_ = caml_obj_tag(_F_);
          c:
          if(250 === _G_)
           var t1$2 = _F_[1];
          else{
           if(246 !== _G_ && 244 !== _G_){var t1$2 = _F_; break c;}
           var t1$2 = caml_call1(CamlinternalLazy[2], _F_);
          }
          var t1$0 = t1$2;
          continue;
       }
      var r2 = t2$0[1][2];
      if(! r2) return 0;
      var _u_ = r2[1], _v_ = caml_obj_tag(_u_);
      b:
      if(250 === _v_)
       var t2$1 = _u_[1];
      else{
       if(246 !== _v_ && 244 !== _v_){var t2$1 = _u_; break b;}
       var t2$1 = caml_call1(CamlinternalLazy[2], _u_);
      }
      var t2$0 = t2$1;
      continue;
     }
     if(typeof t1$0 === "number")
      switch(t1$0){
        case 0: break;
        case 1:
         return 0;
        case 2:
         return 0;
        case 3:
         return 0;
        case 4:
         return 0;
        case 5:
         return 0;
        case 6:
         return 0;
        case 7:
         return 0;
        case 8:
         return 0;
        default: return 0;
      }
     else
      switch(t1$0[0]){
        case 9: break;
        case 0:
         return 0;
        case 1:
         return 0;
        case 2:
         return 0;
        case 3:
         return 0;
        case 4:
         return 0;
        case 5:
         return 0;
        case 6:
         return 0;
        case 7:
         return 0;
        default: return 0;
      }
     return 0;
    }
   }
   function same(a, b){return 0 !== same_witness(a, b) ? 1 : 0;}
   function same_witness_exn(a, b){
    var match = same_witness(a, b);
    if(! match)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _p_], 1);
    var proof = match[1];
    return proof;
   }
   function head(t){
    var t$0 = t;
    for(;;){
     if(typeof t$0 !== "number" && 9 === t$0[0]){
      var _r_ = t$0[1][2];
      if(_r_){
       var _s_ = _r_[1], _t_ = caml_obj_tag(_s_);
       a:
       if(250 === _t_)
        var t$1 = _s_[1];
       else{
        if(246 !== _t_ && 244 !== _t_){var t$1 = _s_; break a;}
        var t$1 = caml_call1(CamlinternalLazy[2], _s_);
       }
       var t$0 = t$1;
       continue;
      }
     }
     return t$0;
    }
   }
   caml_call3
    (CamlinternalMod[2],
     _q_,
     Typerep,
     [0,
      Named,
      Tuple,
      Tag_internal,
      Tag,
      Variant_internal,
      Variant,
      Field_internal,
      Field,
      Record_internal,
      Record,
      same,
      same_witness,
      same_witness_exn,
      typename_of_t$1,
      head]);
   var
    typerep_of_int = 0,
    typerep_of_int32 = 1,
    typerep_of_int64 = 2,
    typerep_of_nativeint = 3,
    typerep_of_char = 4,
    typerep_of_float = 5,
    typerep_of_string = 6,
    typerep_of_bytes = 7,
    typerep_of_bool = 8,
    typerep_of_unit = 9;
   function typerep_of_option(rep){return [0, rep];}
   function typerep_of_list(rep){return [1, rep];}
   function typerep_of_array(rep){return [2, rep];}
   function typerep_of_lazy_t(rep){return [3, rep];}
   function typerep_of_ref(rep){return [4, rep];}
   function typerep_of_function(dom, rng){return [5, [0, dom, rng]];}
   var typerep_of_tuple0 = 9;
   function typerep_of_tuple2(a, b){return [6, [0, [0, a, b]]];}
   function typerep_of_tuple3(a, b, c){return [6, [1, [0, a, b, c]]];}
   function typerep_of_tuple4(a, b, c, d){return [6, [2, [0, a, b, c, d]]];}
   function typerep_of_tuple5(a, b, c, d, e){return [6, [3, [0, a, b, c, d, e]]];
   }
   var
    value_tuple0 = 0,
    match =
      Base_Int63[118][2]
       ? [0, typerep_of_int64, typename_of_int64]
       : [0, typerep_of_int, typename_of_int],
    typename_of_int63 = match[2],
    typerep_of_int63 = match[1],
    Typerep_lib_Std_internal =
      [0,
       Typerep,
       typerep_of_int,
       typerep_of_int32,
       typerep_of_int64,
       typerep_of_nativeint,
       typerep_of_int63,
       typerep_of_char,
       typerep_of_float,
       typerep_of_string,
       typerep_of_bytes,
       typerep_of_bool,
       typerep_of_unit,
       value_tuple0,
       typerep_of_option,
       typerep_of_list,
       typerep_of_array,
       typerep_of_lazy_t,
       typerep_of_ref,
       typerep_of_function,
       typerep_of_tuple0,
       typerep_of_tuple2,
       typerep_of_tuple3,
       typerep_of_tuple4,
       typerep_of_tuple5,
       typename_of_int,
       typename_of_int32,
       typename_of_int64,
       typename_of_nativeint,
       typename_of_int63,
       typename_of_char,
       typename_of_float,
       typename_of_string,
       typename_of_bytes,
       typename_of_bool,
       typename_of_unit,
       typename_of_option,
       typename_of_list,
       typename_of_array,
       typename_of_lazy_t,
       typename_of_ref,
       typename_of_function,
       typename_of_tuple0,
       typename_of_tuple2,
       typename_of_tuple3,
       typename_of_tuple4,
       typename_of_tuple5];
   runtime.caml_register_global
    (46, Typerep_lib_Std_internal, "Typerep_lib__Std_internal");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Typerep_lib__Typerepable
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Typerep_lib_Typerepable = [0];
   runtime.caml_register_global
    (0, Typerep_lib_Typerepable, "Typerep_lib__Typerepable");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Typerep_lib__Typerep_obj
//# unitInfo: Requires: Stdlib__Obj
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_lib_typerep_obj_ml = "lib/typerep_obj.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    global_data = runtime.caml_get_global_data(),
    Stdlib_Obj = global_data.Stdlib__Obj,
    Assert_failure = global_data.Assert_failure,
    _b_ = [0, cst_lib_typerep_obj_ml, 9, 4],
    _a_ = [0, cst_lib_typerep_obj_ml, 11, 4],
    cst_Latency_stats = "Latency_stats",
    _h_ = [0, cst_lib_typerep_obj_ml, 28, 9],
    cst_zero = "zero",
    _g_ = [0, cst_lib_typerep_obj_ml, 29, 9],
    _f_ = [0, cst_lib_typerep_obj_ml, 49, 2],
    _e_ = [0, cst_lib_typerep_obj_ml, 50, 2];
   function repr_of_poly_variant(variant){
    if(typeof variant === "number") return variant;
    var size = variant.length - 1;
    if(2 !== size)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1);
    var repr = variant[1];
    if(typeof repr === "number") return repr;
    throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
   }
   function hash_variant(s){
    var
     accu = [0, 0],
     _k_ = runtime.caml_ml_string_length(s) - 1 | 0,
     _j_ = 0;
    if(_k_ >= 0){
     var i = _j_;
     for(;;){
      var _l_ = runtime.caml_string_get(s, i);
      accu[1] = (223 * accu[1] | 0) + _l_ | 0;
      var _m_ = i + 1 | 0;
      if(_k_ === i) break;
      var i = _m_;
     }
    }
    accu[1] = accu[1] & 2147483647;
    return 1073741823 < accu[1] ? accu[1] + 2147483648 | 0 : accu[1];
   }
   var _c_ = hash_variant(cst_Latency_stats);
   if(repr_of_poly_variant(-894644482) !== _c_)
    throw caml_maybe_attach_backtrace([0, Assert_failure, _h_], 1);
   var _d_ = hash_variant(cst_zero);
   if(repr_of_poly_variant(-789508312) !== _d_)
    throw caml_maybe_attach_backtrace([0, Assert_failure, _g_], 1);
   function double_array_value(param){return 0.;}
   function has_double_array_tag(a){
    var _i_ = runtime.caml_obj_tag(a);
    return Stdlib_Obj[17] === _i_ ? 1 : 0;
   }
   var double$0 = [254, 0., 0.], simple = [0, 0., 0.];
   if(! has_double_array_tag(double$0))
    throw caml_maybe_attach_backtrace([0, Assert_failure, _f_], 1);
   if(has_double_array_tag(simple))
    throw caml_maybe_attach_backtrace([0, Assert_failure, _e_], 1);
   var
    Typerep_lib_Typerep_obj =
      [0,
       repr_of_poly_variant,
       hash_variant,
       double_array_value,
       has_double_array_tag];
   runtime.caml_register_global
    (11, Typerep_lib_Typerep_obj, "Typerep_lib__Typerep_obj");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Typerep_lib__Type_generic_intf
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function M(X){return [0];}
   var Typerep_lib_Type_generic_intf = [0, M];
   runtime.caml_register_global
    (0, Typerep_lib_Type_generic_intf, "Typerep_lib__Type_generic_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Typerep_lib__Type_generic
//# unitInfo: Requires: Base, CamlinternalLazy, Stdlib, Stdlib__Array, Stdlib__Hashtbl, Stdlib__Lazy, Stdlib__List, Stdlib__Printf, Typerep_lib__Std_internal, Typerep_lib__Type_equal, Typerep_lib__Type_generic_intf, Typerep_lib__Typename, Typerep_lib__Variant_and_record_intf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_lib_type_generic_ml = "lib/type_generic.ml",
    caml_check_bound = runtime.caml_check_bound,
    caml_fresh_oo_id = runtime.caml_fresh_oo_id,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_obj_tag = runtime.caml_obj_tag,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    Typerep_lib_Std_internal = global_data.Typerep_lib__Std_internal,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Typerep_lib_Typename = global_data.Typerep_lib__Typename,
    Typerep_lib_Type_equal = global_data.Typerep_lib__Type_equal,
    Stdlib_Lazy = global_data.Stdlib__Lazy,
    Base = global_data.Base,
    Stdlib = global_data.Stdlib,
    Typerep_lib_Type_generic_intf = global_data.Typerep_lib__Type_generic_intf,
    Stdlib_Hashtbl = global_data.Stdlib__Hashtbl,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib_List = global_data.Stdlib__List,
    Assert_failure = global_data.Assert_failure,
    Stdlib_Array = global_data.Stdlib__Array,
    Typerep_lib_Variant_and_record =
      global_data.Typerep_lib__Variant_and_record_intf,
    cst_Typerep_lib_Type_generic_M$0 =
      "Typerep_lib.Type_generic.Make_S_implementation(X).Not_implemented",
    _c_ =
      [0,
       [11,
        "Type_generic ",
        [3,
         0,
         [11, " requires ", [3, 0, [11, " for uid ", [3, 0, [12, 10, 0]]]]]]],
       "Type_generic %S requires %S for uid %S\n"],
    _a_ = [0, cst_lib_type_generic_ml, 185, 16],
    _b_ = [0, cst_lib_type_generic_ml, 187, 69],
    cst_Typerep_lib_Type_generic_M =
      "Typerep_lib.Type_generic.Make_named_for_closure(X).Undefined",
    cst_Typerep_lib_Type_generic_I =
      "Typerep_lib.Type_generic.Ident.Broken_dependency";
   function Helper(A, B){
    function map_variant(param, variant){
     var
      map = param[1],
      typename = caml_call1(A[4][1], variant),
      polymorphic = caml_call1(A[4][4], variant);
     function _az_(index$0){
      var
       tag$0 = caml_call2(A[4][3], variant, index$0),
       tag = tag$0[1],
       label = caml_call1(A[2][1], tag),
       rep = caml_call1(map, caml_call1(A[2][8], tag)),
       arity = caml_call1(A[2][2], tag),
       args_labels = caml_call1(A[2][3], tag),
       index = caml_call1(A[2][4], tag),
       ocaml_repr = caml_call1(A[2][5], tag),
       tyid = caml_call1(A[2][7], tag),
       param = caml_call1(A[2][6], tag);
      if(0 === param[0])
       var fct = param[1], create = [0, fct];
      else
       var k = param[1], create = [1, k];
      return [0,
              caml_call1
               (B[2][9],
                [0,
                 label,
                 rep,
                 arity,
                 args_labels,
                 index,
                 ocaml_repr,
                 tyid,
                 create])];
     }
     var
      _aA_ = caml_call1(A[4][2], variant),
      tags = caml_call2(Stdlib_Array[1], _aA_, _az_);
     function value(a){
      var
       match = caml_call2(A[4][5], variant, a),
       a$0 = match[2],
       atag = match[1],
       _aB_ = caml_call1(A[2][4], atag),
       btag = caml_check_bound(tags, _aB_)[1 + _aB_][1],
       _aC_ = caml_call1(B[2][7], btag),
       _aD_ = caml_call1(A[2][7], atag);
      caml_call2(Typerep_lib_Typename[5], _aD_, _aC_);
      return [0, btag, a$0];
     }
     return caml_call1(B[4][7], [0, typename, tags, polymorphic, value]);
    }
    function map_record(param, record){
     var
      map = param[1],
      typename = caml_call1(A[8][1], record),
      has_double_array_tag = caml_call1(A[8][4], record);
     function _au_(index$0){
      var
       field$0 = caml_call2(A[8][3], record, index$0),
       field = field$0[1],
       label = caml_call1(A[6][1], field),
       rep = caml_call1(map, caml_call1(A[6][6], field)),
       index = caml_call1(A[6][2], field),
       is_mutable = caml_call1(A[6][4], field),
       tyid = caml_call1(A[6][5], field),
       get = caml_call1(A[6][3], field);
      return [0,
              caml_call1
               (B[6][7], [0, label, rep, index, tyid, get, is_mutable])];
     }
     var
      _av_ = caml_call1(A[8][2], record),
      fields = caml_call2(Stdlib_Array[1], _av_, _au_);
     function create(param){
      var get = param[1];
      function get$0(afield){
       var
        _aw_ = caml_call1(A[6][2], afield),
        bfield = caml_check_bound(fields, _aw_)[1 + _aw_][1],
        _ax_ = caml_call1(B[6][5], bfield),
        _ay_ = caml_call1(A[6][5], afield);
       caml_call2(Typerep_lib_Typename[5], _ay_, _ax_);
       return caml_call1(get, bfield);
      }
      return caml_call2(A[8][5], record, [0, get$0]);
     }
     return caml_call1
             (B[8][7], [0, typename, fields, has_double_array_tag, create]);
    }
    return [0, map_variant, map_record];
   }
   var
    Broken_dependency =
      [248, cst_Typerep_lib_Type_generic_I, caml_fresh_oo_id(0)],
    _d_ = Typerep_lib_Typename[6];
   caml_call1(Stdlib_Hashtbl[26], [0, _d_[2], _d_[3]]);
   function _e_(X){
    var required = X[2], name = X[1];
    caml_call1(Typerep_lib_Type_generic_intf[1], [0]);
    var
     _k_ = Typerep_lib_Typename[8],
     include = caml_call1(Stdlib_Hashtbl[26], [0, _k_[2], _k_[3]]),
     create = include[1],
     replace = include[10],
     mem = include[11],
     _l_ = include[7];
    function find(table, key){
     if(! caml_call1(Stdlib_Lazy[3], table)) return 0;
     var _aq_ = caml_obj_tag(table);
     a:
     if(250 === _aq_)
      var table$0 = table[1];
     else{
      if(246 !== _aq_ && 244 !== _aq_){var table$0 = table; break a;}
      var table$0 = caml_call1(CamlinternalLazy[2], table);
     }
     try{var _as_ = [0, caml_call2(_l_, table$0, key)]; return _as_;}
     catch(_at_){
      var _ar_ = caml_wrap_exception(_at_);
      if(_ar_[1] !== Base[248] && _ar_ !== Stdlib[8])
       throw caml_maybe_attach_backtrace(_ar_, 0);
      return 0;
     }
    }
    var
     check_dependencies =
       required
        ? function
         (uid){
          function _an_(param){
           var
            implements$0 = param[2],
            name$0 = param[1],
            _ao_ = 1 - caml_call1(implements$0, uid);
           if(! _ao_) return _ao_;
           var
            _ap_ = caml_call1(Typerep_lib_Typename[8][4], uid),
            message = caml_call4(Stdlib_Printf[4], _c_, name, name$0, _ap_);
           caml_call1(Stdlib[53], message);
           throw caml_maybe_attach_backtrace
                  ([0, Broken_dependency, message], 1);
          }
          return caml_call2(Stdlib_List[18], _an_, required);
         }
        : function(param){return;};
    function replace$0(table, key, value){
     check_dependencies(key);
     var _al_ = caml_obj_tag(table);
     a:
     if(250 === _al_)
      var _am_ = table[1];
     else{
      if(246 !== _al_ && 244 !== _al_){var _am_ = table; break a;}
      var _am_ = caml_call1(CamlinternalLazy[2], table);
     }
     return caml_call3(replace, _am_, key, value);
    }
    function mem$0(table, key){
     if(! caml_call1(Stdlib_Lazy[3], table)) return 0;
     var _ak_ = caml_obj_tag(table);
     a:
     if(250 === _ak_)
      var table$0 = table[1];
     else{
      if(246 !== _ak_ && 244 !== _ak_){var table$0 = table; break a;}
      var table$0 = caml_call1(CamlinternalLazy[2], table);
     }
     return caml_call2(mem, table$0, key);
    }
    var
     size = 256,
     table0 = [246, function(_aj_){return caml_call1(create, size);}],
     table1 = [246, function(_ai_){return caml_call1(create, size);}],
     table2 = [246, function(_ah_){return caml_call1(create, size);}],
     table3 = [246, function(_ag_){return caml_call1(create, size);}],
     table4 = [246, function(_af_){return caml_call1(create, size);}],
     table5 = [246, function(_ae_){return caml_call1(create, size);}];
    function is_registered(uid){
     var ___ = mem$0(table0, uid);
     if(___)
      var _$_ = ___;
     else{
      var _aa_ = mem$0(table1, uid);
      if(_aa_)
       var _$_ = _aa_;
      else{
       var _ab_ = mem$0(table2, uid);
       if(_ab_)
        var _$_ = _ab_;
       else{
        var _ac_ = mem$0(table3, uid);
        if(_ac_)
         var _$_ = _ac_;
        else{
         var _ad_ = mem$0(table4, uid);
         if(! _ad_) return mem$0(table5, uid);
         var _$_ = _ad_;
        }
       }
      }
     }
     return _$_;
    }
    var ident = [0, name, is_registered], unit = Typerep_lib_Typename[2];
    function register0(compute){
     var uid = caml_call1(Typerep_lib_Typename[9], compute[2]);
     return replace$0(table0, uid, compute);
    }
    function register1(compute){
     var
      _Z_ = caml_call1(compute[2], unit),
      uid = caml_call1(Typerep_lib_Typename[9], _Z_);
     return replace$0(table1, uid, compute);
    }
    function register2(compute){
     var
      _Y_ = caml_call2(compute[2], unit, unit),
      uid = caml_call1(Typerep_lib_Typename[9], _Y_);
     return replace$0(table2, uid, compute);
    }
    function register3(compute){
     var
      _X_ = caml_call3(compute[2], unit, unit, unit),
      uid = caml_call1(Typerep_lib_Typename[9], _X_);
     return replace$0(table3, uid, compute);
    }
    function register4(compute){
     var
      _W_ = caml_call4(compute[2], unit, unit, unit, unit),
      uid = caml_call1(Typerep_lib_Typename[9], _W_);
     return replace$0(table4, uid, compute);
    }
    function register5(compute){
     var
      _V_ = caml_call5(compute[2], unit, unit, unit, unit, unit),
      uid = caml_call1(Typerep_lib_Typename[9], _V_);
     return replace$0(table5, uid, compute);
    }
    function register(typerep_of_a, compute){
     var
      typename_of_t =
        caml_call1(Typerep_lib_Std_internal[1][14], typerep_of_a);
     return register0([0, typerep_of_a, typename_of_t, compute]);
    }
    var
     Not_implemented =
       [248, cst_Typerep_lib_Type_generic_M$0, caml_fresh_oo_id(0)],
     Memo = caml_call1(Typerep_lib_Typename[17], [0]),
     _m_ = Typerep_lib_Std_internal[1],
     Helper$0 =
       Helper
        ([0, _m_[3], _m_[4], _m_[5], _m_[6], _m_[7], _m_[8], _m_[9], _m_[10]],
         [0, X[3], X[4], X[5], X[6], X[7], X[8], X[9], X[10]]);
    function of_typerep(rep){
     var
      context = caml_call1(X[33][1][1], 0),
      memo_table = caml_call1(Memo[1], 32);
     function of_typerep(param){
      var param$0 = param;
      for(;;){
       if(typeof param$0 === "number")
        switch(param$0){
          case 0:
           return X[11];
          case 1:
           return X[12];
          case 2:
           return X[13];
          case 3:
           return X[14];
          case 4:
           return X[15];
          case 5:
           return X[16];
          case 6:
           return X[17];
          case 7:
           return X[18];
          case 8:
           return X[19];
          default: return X[20];
        }
       switch(param$0[0]){
         case 0:
          var rep$11 = param$0[1], _J_ = of_typerep(rep$11);
          return caml_call1(X[21], _J_);
         case 1:
          var rep$12 = param$0[1], _K_ = of_typerep(rep$12);
          return caml_call1(X[22], _K_);
         case 2:
          var rep$13 = param$0[1], _L_ = of_typerep(rep$13);
          return caml_call1(X[23], _L_);
         case 3:
          var rep$14 = param$0[1], _M_ = of_typerep(rep$14);
          return caml_call1(X[24], _M_);
         case 4:
          var rep$15 = param$0[1], _N_ = of_typerep(rep$15);
          return caml_call1(X[25], _N_);
         case 5:
          var
           match$11 = param$0[1],
           rng = match$11[2],
           dom = match$11[1],
           _O_ = of_typerep(rng),
           _P_ = of_typerep(dom);
          return caml_call2(X[26], _P_, _O_);
         case 6:
          var tuple = param$0[1];
          switch(tuple[0]){
            case 0:
             var
              match$12 = tuple[1],
              b = match$12[2],
              a = match$12[1],
              ra = of_typerep(a),
              rb = of_typerep(b);
             return caml_call2(X[27], ra, rb);
            case 1:
             var
              match$13 = tuple[1],
              c = match$13[3],
              b$0 = match$13[2],
              a$0 = match$13[1],
              ra$0 = of_typerep(a$0),
              rb$0 = of_typerep(b$0),
              rc = of_typerep(c);
             return caml_call3(X[28], ra$0, rb$0, rc);
            case 2:
             var
              match$14 = tuple[1],
              d = match$14[4],
              c$0 = match$14[3],
              b$1 = match$14[2],
              a$1 = match$14[1],
              ra$1 = of_typerep(a$1),
              rb$1 = of_typerep(b$1),
              rc$0 = of_typerep(c$0),
              rd = of_typerep(d);
             return caml_call4(X[29], ra$1, rb$1, rc$0, rd);
            default:
             var
              match$15 = tuple[1],
              e = match$15[5],
              d$0 = match$15[4],
              c$1 = match$15[3],
              b$2 = match$15[2],
              a$2 = match$15[1],
              ra$2 = of_typerep(a$2),
              rb$2 = of_typerep(b$2),
              rc$1 = of_typerep(c$1),
              rd$0 = of_typerep(d$0),
              re = of_typerep(e);
             return caml_call5(X[30], ra$2, rb$2, rc$1, rd$0, re);
          }
         case 7:
          var
           record = param$0[1],
           _Q_ = caml_call2(Helper$0[2], [0, of_typerep], record);
          return caml_call1(X[31], _Q_);
         case 8:
          var
           variant = param$0[1],
           _R_ = caml_call2(Helper$0[1], [0, of_typerep], variant);
          return caml_call1(X[32], _R_);
         default:
          var
           match$16 = param$0[1],
           content = match$16[2],
           named = match$16[1],
           typename = caml_call1(Typerep_lib_Std_internal[1][1][2], named),
           match$17 = caml_call2(Memo[4], memo_table, typename);
          if(match$17){
           var shared = match$17[1];
           return caml_call1(X[33][3], shared);
          }
          switch(named[0]){
            case 0:
             var
              rep$5 = named[1],
              match =
                find(table0, caml_call1(Typerep_lib_Typename[9], rep$5[2]));
             if(match)
              var
               rep = match[1],
               witness = caml_call2(Typerep_lib_Typename[5], rep[2], rep$5[1]),
               L = caml_call1(Typerep_lib_Type_equal[3], [0]),
               _n_ = rep[3],
               _o_ = caml_call1(L[1], witness),
               match$5 = [0, caml_call2(Typerep_lib_Type_equal[1], _o_, _n_)];
             else
              var match$5 = 0;
             if(match$5)
              var custom = match$5[1], match$18 = [0, custom];
             else
              var match$18 = 0;
             break;
            case 1:
             var
              rep$6 = named[1],
              match$0 =
                find(table1, caml_call1(Typerep_lib_Typename[9], rep$6[3]));
             if(match$0)
              var
               rep$0 = match$0[1],
               typename_of_t = rep$6[2],
               Conv =
                 caml_call1
                  (caml_call1(Typerep_lib_Typename[18], [0, rep$0[2]]),
                   [0, typename_of_t]),
               L$0 = caml_call1(Typerep_lib_Type_equal[3], [0]),
               _p_ = rep$0[3],
               _q_ = caml_call1(L$0[1], Conv[1][1]),
               match$6 = [0, caml_call2(Typerep_lib_Type_equal[1], _q_, _p_)];
             else
              var match$6 = 0;
             if(match$6)
              var
               custom$0 = match$6[1],
               custom$1 = caml_call1(custom$0, of_typerep(rep$6[1])),
               match$18 = [0, custom$1];
             else
              var match$18 = 0;
             break;
            case 2:
             var
              rep$7 = named[1],
              match$1 =
                find(table2, caml_call1(Typerep_lib_Typename[9], rep$7[4]));
             if(match$1)
              var
               rep$1 = match$1[1],
               typename_of_t$0 = rep$7[3],
               Conv$0 =
                 caml_call1
                  (caml_call1(Typerep_lib_Typename[19], [0, rep$1[2]]),
                   [0, typename_of_t$0]),
               L$1 = caml_call1(Typerep_lib_Type_equal[3], [0]),
               _r_ = rep$1[3],
               _s_ = caml_call1(L$1[1], Conv$0[1][1]),
               match$7 = [0, caml_call2(Typerep_lib_Type_equal[1], _s_, _r_)];
             else
              var match$7 = 0;
             if(match$7)
              var
               custom$2 = match$7[1],
               _z_ = of_typerep(rep$7[2]),
               custom$3 = caml_call2(custom$2, of_typerep(rep$7[1]), _z_),
               match$18 = [0, custom$3];
             else
              var match$18 = 0;
             break;
            case 3:
             var
              rep$8 = named[1],
              match$2 =
                find(table3, caml_call1(Typerep_lib_Typename[9], rep$8[5]));
             if(match$2)
              var
               rep$2 = match$2[1],
               typename_of_t$1 = rep$8[4],
               Conv$1 =
                 caml_call1
                  (caml_call1(Typerep_lib_Typename[20], [0, rep$2[2]]),
                   [0, typename_of_t$1]),
               L$2 = caml_call1(Typerep_lib_Type_equal[3], [0]),
               _t_ = rep$2[3],
               _u_ = caml_call1(L$2[1], Conv$1[1][1]),
               match$8 = [0, caml_call2(Typerep_lib_Type_equal[1], _u_, _t_)];
             else
              var match$8 = 0;
             if(match$8)
              var
               custom$4 = match$8[1],
               _A_ = of_typerep(rep$8[3]),
               _B_ = of_typerep(rep$8[2]),
               custom$5 = caml_call3(custom$4, of_typerep(rep$8[1]), _B_, _A_),
               match$18 = [0, custom$5];
             else
              var match$18 = 0;
             break;
            case 4:
             var
              rep$9 = named[1],
              match$3 =
                find(table4, caml_call1(Typerep_lib_Typename[9], rep$9[6]));
             if(match$3)
              var
               rep$3 = match$3[1],
               typename_of_t$2 = rep$9[5],
               Conv$2 =
                 caml_call1
                  (caml_call1(Typerep_lib_Typename[21], [0, rep$3[2]]),
                   [0, typename_of_t$2]),
               L$3 = caml_call1(Typerep_lib_Type_equal[3], [0]),
               _v_ = rep$3[3],
               _w_ = caml_call1(L$3[1], Conv$2[1][1]),
               match$9 = [0, caml_call2(Typerep_lib_Type_equal[1], _w_, _v_)];
             else
              var match$9 = 0;
             if(match$9)
              var
               custom$6 = match$9[1],
               _C_ = of_typerep(rep$9[4]),
               _D_ = of_typerep(rep$9[3]),
               _E_ = of_typerep(rep$9[2]),
               custom$7 =
                 caml_call4(custom$6, of_typerep(rep$9[1]), _E_, _D_, _C_),
               match$18 = [0, custom$7];
             else
              var match$18 = 0;
             break;
            default:
             var
              rep$10 = named[1],
              match$4 =
                find(table5, caml_call1(Typerep_lib_Typename[9], rep$10[7]));
             if(match$4)
              var
               rep$4 = match$4[1],
               typename_of_t$3 = rep$10[6],
               Conv$3 =
                 caml_call1
                  (caml_call1(Typerep_lib_Typename[22], [0, rep$4[2]]),
                   [0, typename_of_t$3]),
               L$4 = caml_call1(Typerep_lib_Type_equal[3], [0]),
               _x_ = rep$4[3],
               _y_ = caml_call1(L$4[1], Conv$3[1][1]),
               match$10 = [0, caml_call2(Typerep_lib_Type_equal[1], _y_, _x_)];
             else
              var match$10 = 0;
             if(match$10)
              var
               custom$8 = match$10[1],
               _F_ = of_typerep(rep$10[5]),
               _G_ = of_typerep(rep$10[4]),
               _H_ = of_typerep(rep$10[3]),
               _I_ = of_typerep(rep$10[2]),
               custom$9 =
                 caml_call5
                  (custom$8, of_typerep(rep$10[1]), _I_, _H_, _G_, _F_),
               match$18 = [0, custom$9];
             else
              var match$18 = 0;
          }
          if(match$18){var computation = match$18[1]; return computation;}
          if(! content){
           var
            _U_ = caml_call1(Typerep_lib_Typename[9], typename),
            string = caml_call1(Typerep_lib_Typename[8][4], _U_);
           throw caml_maybe_attach_backtrace
                  ([0, Not_implemented, name, string], 1);
          }
          var _S_ = content[1], _T_ = caml_obj_tag(_S_);
          a:
          if(250 === _T_)
           var content$0 = _S_[1];
          else{
           if(246 !== _T_ && 244 !== _T_){var content$0 = _S_; break a;}
           var content$0 = caml_call1(CamlinternalLazy[2], _S_);
          }
          if(caml_call1(X[33][5], content$0)){
           var shared$0 = caml_call2(X[33][2], context, typename);
           caml_call3(Memo[3], memo_table, typename, shared$0);
           var computation$0 = of_typerep(content$0);
           return caml_call2(X[33][4], shared$0, computation$0);
          }
          var param$0 = content$0;
       }
      }
     }
     var computation = of_typerep(rep);
     return [0, 911962647, computation];
    }
    return [0,
            ident,
            Not_implemented,
            register0,
            register1,
            register2,
            register3,
            register4,
            register5,
            register,
            of_typerep,
            [0,
             X[3],
             X[4],
             X[5],
             X[6],
             X[7],
             X[8],
             X[9],
             X[10],
             X[11],
             X[12],
             X[13],
             X[14],
             X[15],
             X[16],
             X[17],
             X[18],
             X[19],
             X[20],
             X[21],
             X[22],
             X[23],
             X[24],
             X[25],
             X[26],
             X[27],
             X[28],
             X[29],
             X[30],
             X[31],
             X[32],
             X[33]]];
   }
   var
    _f_ = [0],
    Typerep_lib_Type_generic =
      [0,
       Typerep_lib_Variant_and_record,
       Helper,
       function(_g_){
        function create(_j_){return 0;}
        var
         Context = [0, create],
         Undefined =
           [248, cst_Typerep_lib_Type_generic_M, caml_fresh_oo_id(0)];
        function init(param, name){
         var
          _h_ = caml_call1(Typerep_lib_Typename[9], name),
          path = caml_call1(Typerep_lib_Typename[8][4], _h_),
          r =
            [0,
             function(param){
              throw caml_maybe_attach_backtrace([0, Undefined, path], 1);
             }],
          _i_ = [0, 0];
         return [0, function(input){return caml_call1(r[1], input);}, r, _i_];
        }
        function get_wip_computation(shared){
         var match = shared[3][1];
         if(! match) return shared[1];
         var clos = match[1];
         return clos;
        }
        function set_final_computation(shared, computation){
         var compiletime_dereference = shared[3];
         if(compiletime_dereference[1])
          throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
         if(shared[1] === computation)
          throw caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1);
         compiletime_dereference[1] = [0, computation];
         shared[2][1] = computation;
         return computation;
        }
        function share(param){return 1;}
        return [0,
                Context,
                init,
                get_wip_computation,
                set_final_computation,
                share];
       },
       _f_,
       _e_];
   runtime.caml_register_global
    (20, Typerep_lib_Type_generic, "Typerep_lib__Type_generic");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Typerep_lib__Make_typename
//# unitInfo: Requires: Typerep_lib__Std_internal, Typerep_lib__Type_equal, Typerep_lib__Typename
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Typerep_lib_Std_internal = global_data.Typerep_lib__Std_internal,
    Typerep_lib_Type_equal = global_data.Typerep_lib__Type_equal,
    Typerep_lib_Typename = global_data.Typerep_lib__Typename;
   function _a_(X){
    var
     Name_of_x = caml_call1(Typerep_lib_Typename[16], X),
     typename_of_t = Name_of_x[1];
    function named(of_p1, of_p2, of_p3, of_p4, of_p5){
     var
      _p_ = caml_call1(Typerep_lib_Std_internal[1][14], of_p5),
      _q_ = caml_call1(Typerep_lib_Std_internal[1][14], of_p4),
      _r_ = caml_call1(Typerep_lib_Std_internal[1][14], of_p3),
      _s_ = caml_call1(Typerep_lib_Std_internal[1][14], of_p2),
      _t_ = caml_call1(Typerep_lib_Std_internal[1][14], of_p1),
      typename_of_t = caml_call5(Name_of_x[1], _t_, _s_, _r_, _q_, _p_),
      typename_of_named = Name_of_x[1],
      witness = Typerep_lib_Type_equal[2];
     return [5,
             [0,
              of_p1,
              of_p2,
              of_p3,
              of_p4,
              of_p5,
              typename_of_named,
              typename_of_t,
              witness]];
    }
    return [0, named, typename_of_t];
   }
   function _b_(X){
    var
     Name_of_x = caml_call1(Typerep_lib_Typename[15], X),
     typename_of_t = Name_of_x[1];
    function named(of_p1, of_p2, of_p3, of_p4){
     var
      _l_ = caml_call1(Typerep_lib_Std_internal[1][14], of_p4),
      _m_ = caml_call1(Typerep_lib_Std_internal[1][14], of_p3),
      _n_ = caml_call1(Typerep_lib_Std_internal[1][14], of_p2),
      _o_ = caml_call1(Typerep_lib_Std_internal[1][14], of_p1),
      typename_of_t = caml_call4(Name_of_x[1], _o_, _n_, _m_, _l_),
      typename_of_named = Name_of_x[1],
      witness = Typerep_lib_Type_equal[2];
     return [4,
             [0,
              of_p1,
              of_p2,
              of_p3,
              of_p4,
              typename_of_named,
              typename_of_t,
              witness]];
    }
    return [0, named, typename_of_t];
   }
   function _c_(X){
    var
     Name_of_x = caml_call1(Typerep_lib_Typename[14], X),
     typename_of_t = Name_of_x[1];
    function named(of_p1, of_p2, of_p3){
     var
      _i_ = caml_call1(Typerep_lib_Std_internal[1][14], of_p3),
      _j_ = caml_call1(Typerep_lib_Std_internal[1][14], of_p2),
      _k_ = caml_call1(Typerep_lib_Std_internal[1][14], of_p1),
      typename_of_t = caml_call3(Name_of_x[1], _k_, _j_, _i_),
      typename_of_named = Name_of_x[1],
      witness = Typerep_lib_Type_equal[2];
     return [3,
             [0,
              of_p1,
              of_p2,
              of_p3,
              typename_of_named,
              typename_of_t,
              witness]];
    }
    return [0, named, typename_of_t];
   }
   function _d_(X){
    var
     Name_of_x = caml_call1(Typerep_lib_Typename[13], X),
     typename_of_t = Name_of_x[1];
    function named(of_p1, of_p2){
     var
      _g_ = caml_call1(Typerep_lib_Std_internal[1][14], of_p2),
      _h_ = caml_call1(Typerep_lib_Std_internal[1][14], of_p1),
      typename_of_t = caml_call2(Name_of_x[1], _h_, _g_),
      typename_of_named = Name_of_x[1],
      witness = Typerep_lib_Type_equal[2];
     return [2, [0, of_p1, of_p2, typename_of_named, typename_of_t, witness]];
    }
    return [0, named, typename_of_t];
   }
   function _e_(X){
    var
     Name_of_x = caml_call1(Typerep_lib_Typename[12], X),
     typename_of_t = Name_of_x[1];
    function named(of_p1){
     var
      _f_ = caml_call1(Typerep_lib_Std_internal[1][14], of_p1),
      typename_of_t = caml_call1(Name_of_x[1], _f_),
      typename_of_named = Name_of_x[1],
      witness = Typerep_lib_Type_equal[2];
     return [1, [0, of_p1, typename_of_named, typename_of_t, witness]];
    }
    return [0, named, typename_of_t];
   }
   var
    Typerep_lib_Make_typename =
      [0,
       function(X){
        var
         Name_of_x = caml_call1(Typerep_lib_Typename[11], X),
         typename_of_t = Name_of_x[1],
         typename_of_named = Name_of_x[1],
         witness = Typerep_lib_Type_equal[2],
         named = [0, [0, typename_of_named, typename_of_t, witness]];
        return [0, named, typename_of_t];
       },
       _e_,
       _d_,
       _c_,
       _b_,
       _a_];
   runtime.caml_register_global
    (3, Typerep_lib_Make_typename, "Typerep_lib__Make_typename");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Typerep_lib__Type_abstract
//# unitInfo: Requires: Typerep_lib__Make_typename
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Typerep_lib_Make_typename = global_data.Typerep_lib__Make_typename;
   function Make0(X){
    var
     M = caml_call1(Typerep_lib_Make_typename[1], X),
     typerep_of_t = [9, [0, M[1], 0]],
     typename_of_t = M[2];
    return [0, typerep_of_t, typename_of_t];
   }
   function Make1(X){
    var M = caml_call1(Typerep_lib_Make_typename[2], X);
    function typerep_of_t(of_p1){return [9, [0, caml_call1(M[1], of_p1), 0]];}
    var typename_of_t = M[2];
    return [0, typerep_of_t, typename_of_t];
   }
   function Make2(X){
    var M = caml_call1(Typerep_lib_Make_typename[3], X);
    function typerep_of_t(of_p1, of_p2){
     return [9, [0, caml_call2(M[1], of_p1, of_p2), 0]];
    }
    var typename_of_t = M[2];
    return [0, typerep_of_t, typename_of_t];
   }
   function Make3(X){
    var M = caml_call1(Typerep_lib_Make_typename[4], X);
    function typerep_of_t(of_p1, of_p2, of_p3){
     return [9, [0, caml_call3(M[1], of_p1, of_p2, of_p3), 0]];
    }
    var typename_of_t = M[2];
    return [0, typerep_of_t, typename_of_t];
   }
   function Make4(X){
    var M = caml_call1(Typerep_lib_Make_typename[5], X);
    function typerep_of_t(of_p1, of_p2, of_p3, of_p4){
     return [9, [0, caml_call4(M[1], of_p1, of_p2, of_p3, of_p4), 0]];
    }
    var typename_of_t = M[2];
    return [0, typerep_of_t, typename_of_t];
   }
   function Make5(X){
    var M = caml_call1(Typerep_lib_Make_typename[6], X);
    function typerep_of_t(of_p1, of_p2, of_p3, of_p4, of_p5){
     return [9, [0, caml_call5(M[1], of_p1, of_p2, of_p3, of_p4, of_p5), 0]];
    }
    var typename_of_t = M[2];
    return [0, typerep_of_t, typename_of_t];
   }
   var
    Typerep_lib_Type_abstract = [0, Make0, Make1, Make2, Make3, Make4, Make5];
   runtime.caml_register_global
    (1, Typerep_lib_Type_abstract, "Typerep_lib__Type_abstract");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Typerep_lib__Std
//# unitInfo: Requires: Typerep_lib__Std_internal
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Typerep_lib_Std_internal = global_data.Typerep_lib__Std_internal,
    Typerep = Typerep_lib_Std_internal[1],
    typerep_of_int = Typerep_lib_Std_internal[2],
    typerep_of_int32 = Typerep_lib_Std_internal[3],
    typerep_of_int64 = Typerep_lib_Std_internal[4],
    typerep_of_nativeint = Typerep_lib_Std_internal[5],
    typerep_of_int63 = Typerep_lib_Std_internal[6],
    typerep_of_char = Typerep_lib_Std_internal[7],
    typerep_of_float = Typerep_lib_Std_internal[8],
    typerep_of_string = Typerep_lib_Std_internal[9],
    typerep_of_bytes = Typerep_lib_Std_internal[10],
    typerep_of_bool = Typerep_lib_Std_internal[11],
    typerep_of_unit = Typerep_lib_Std_internal[12],
    value_tuple0 = Typerep_lib_Std_internal[13],
    typerep_of_option = Typerep_lib_Std_internal[14],
    typerep_of_list = Typerep_lib_Std_internal[15],
    typerep_of_array = Typerep_lib_Std_internal[16],
    typerep_of_lazy_t = Typerep_lib_Std_internal[17],
    typerep_of_ref = Typerep_lib_Std_internal[18],
    typerep_of_function = Typerep_lib_Std_internal[19],
    typerep_of_tuple0 = Typerep_lib_Std_internal[20],
    typerep_of_tuple2 = Typerep_lib_Std_internal[21],
    typerep_of_tuple3 = Typerep_lib_Std_internal[22],
    typerep_of_tuple4 = Typerep_lib_Std_internal[23],
    typerep_of_tuple5 = Typerep_lib_Std_internal[24],
    typename_of_int = Typerep_lib_Std_internal[25],
    typename_of_int32 = Typerep_lib_Std_internal[26],
    typename_of_int64 = Typerep_lib_Std_internal[27],
    typename_of_nativeint = Typerep_lib_Std_internal[28],
    typename_of_int63 = Typerep_lib_Std_internal[29],
    typename_of_char = Typerep_lib_Std_internal[30],
    typename_of_float = Typerep_lib_Std_internal[31],
    typename_of_string = Typerep_lib_Std_internal[32],
    typename_of_bytes = Typerep_lib_Std_internal[33],
    typename_of_bool = Typerep_lib_Std_internal[34],
    typename_of_unit = Typerep_lib_Std_internal[35],
    typename_of_option = Typerep_lib_Std_internal[36],
    typename_of_list = Typerep_lib_Std_internal[37],
    typename_of_array = Typerep_lib_Std_internal[38],
    typename_of_lazy_t = Typerep_lib_Std_internal[39],
    typename_of_ref = Typerep_lib_Std_internal[40],
    typename_of_function = Typerep_lib_Std_internal[41],
    typename_of_tuple0 = Typerep_lib_Std_internal[42],
    typename_of_tuple2 = Typerep_lib_Std_internal[43],
    typename_of_tuple3 = Typerep_lib_Std_internal[44],
    typename_of_tuple4 = Typerep_lib_Std_internal[45],
    typename_of_tuple5 = Typerep_lib_Std_internal[46],
    Typerep_lib_Std =
      [0,
       Typerep,
       typerep_of_int,
       typerep_of_int32,
       typerep_of_int64,
       typerep_of_nativeint,
       typerep_of_int63,
       typerep_of_char,
       typerep_of_float,
       typerep_of_string,
       typerep_of_bytes,
       typerep_of_bool,
       typerep_of_unit,
       value_tuple0,
       typerep_of_option,
       typerep_of_list,
       typerep_of_array,
       typerep_of_lazy_t,
       typerep_of_ref,
       typerep_of_function,
       typerep_of_tuple0,
       typerep_of_tuple2,
       typerep_of_tuple3,
       typerep_of_tuple4,
       typerep_of_tuple5,
       typename_of_int,
       typename_of_int32,
       typename_of_int64,
       typename_of_nativeint,
       typename_of_int63,
       typename_of_char,
       typename_of_float,
       typename_of_string,
       typename_of_bytes,
       typename_of_bool,
       typename_of_unit,
       typename_of_option,
       typename_of_list,
       typename_of_array,
       typename_of_lazy_t,
       typename_of_ref,
       typename_of_function,
       typename_of_tuple0,
       typename_of_tuple2,
       typename_of_tuple3,
       typename_of_tuple4,
       typename_of_tuple5];
   runtime.caml_register_global(1, Typerep_lib_Std, "Typerep_lib__Std");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
