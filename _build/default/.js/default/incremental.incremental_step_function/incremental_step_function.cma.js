// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Incremental_step_function
//# unitInfo: Requires: Core, Core__List, Core__Sequence, Core__Time_ns, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Incremental_step_function$0 = "Incremental_step_function",
    cst_incremental_step_function$0 = "incremental_step_function",
    cst_steps = "steps";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Core_Sequence = global_data.Core__Sequence,
    Core = global_data.Core,
    Core_List = global_data.Core__List,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Core_Time_ns = global_data.Core__Time_ns;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incremental_step_function$0);
   caml_call1
    (Ppx_bench_lib_Benchmark_accumu[1][1], cst_incremental_step_function$0);
   caml_call1
    (Ppx_expect_runtime[1][1],
     "step_function/src/incremental_step_function.ml");
   caml_call2
    (Ppx_inline_test_lib[6],
     cst_incremental_step_function$0,
     "incremental_step_function.ml");
   var
    symbol = Core_Time_ns[19],
    compare = Core_Time_ns[22],
    sexp_of_t = Core_Time_ns[25][12],
    _c_ = [0, cst_steps],
    cst_Step_function_create_exn_g =
      "[Step_function.create_exn] got unsorted times",
    _a_ = [0, cst_steps],
    _b_ = [0, "init"],
    cst_incremental_step_function = cst_incremental_step_function$0,
    cst_Incremental_step_function = cst_Incremental_step_function$0;
   function steps(r){return r[2];}
   function init(r){return r[1];}
   function sexp_of_t$0(of_a_001, param){
    var steps_005 = param[2], init_003 = param[1], bnds_002 = 0;
    function _m_(param){
     var
      arg1_008 = param[2],
      arg0_007 = param[1],
      res0_009 = caml_call1(sexp_of_t, arg0_007),
      res1_010 = caml_call1(of_a_001, arg1_008);
     return [1, [0, res0_009, [0, res1_010, 0]]];
    }
    var
     arg_006 = caml_call2(Core_Sequence[12], _m_, steps_005),
     bnds_002$0 = [0, [1, [0, _a_, [0, arg_006, 0]]], bnds_002],
     arg_004 = caml_call1(of_a_001, init_003),
     bnds_002$1 = [0, [1, [0, _b_, [0, arg_004, 0]]], bnds_002$0];
    return [1, bnds_002$1];
   }
   function invariant(invariant_a, param){
    var init = param[1];
    return caml_call1(invariant_a, init);
   }
   function value(t$0, at){
    var steps$1 = t$0[2], init$1 = t$0[1], init = init$1, steps = steps$1;
    for(;;){
     var match = caml_call1(Core_Sequence[50], steps);
     if(! match) return init;
     var
      _l_ = match[1],
      steps$0 = _l_[2],
      match$0 = _l_[1],
      init$0 = match$0[2],
      t = match$0[1];
     if(caml_call2(symbol, at, t)) return init;
     var init = init$0, steps = steps$0;
    }
   }
   function constant(init){return [0, init, Core_Sequence[49]];}
   function create_exn(init, steps){
    function _d_(param, _k_){
     var time2 = _k_[1], time1 = param[1];
     return caml_call2(compare, time1, time2);
    }
    if(1 - caml_call2(Core_List[147], steps, _d_)){
     var
      _e_ = 0,
      _f_ = 0,
      _g_ = function(_j_){return _j_[1];},
      x_011 = caml_call2(Core_List[51], steps, _g_),
      _h_ =
        [0,
         [1, [0, _c_, [0, caml_call2(Core[472], sexp_of_t, x_011), _f_]]],
         _e_],
      _i_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Step_function_create_exn_g),
          _h_]];
     caml_call1(Core[261], _i_);
    }
    return [0, init, caml_call1(Core_Sequence[111], steps)];
   }
   function create_from_sequence(init, steps){return [0, init, steps];}
   caml_call1(Ppx_inline_test_lib[7], cst_incremental_step_function);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incremental_step_function);
   var
    Incremental_step_function =
      [0,
       sexp_of_t$0,
       invariant,
       init,
       steps,
       value,
       constant,
       create_exn,
       create_from_sequence];
   runtime.caml_register_global
    (20, Incremental_step_function, cst_Incremental_step_function$0);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLjAsImZpbGUiOiJpbmNyZW1lbnRhbF9zdGVwX2Z1bmN0aW9uLmNtYS5qcyIsInNvdXJjZVJvb3QiOiIiLCJuYW1lcyI6WyJzZXhwX29mX3QiLCJzdGVwcyIsInIiLCJpbml0Iiwic2V4cF9vZl90JDAiLCJvZl9hXzAwMSIsInN0ZXBzXzAwNSIsImluaXRfMDAzIiwiYm5kc18wMDIiLCJhcmcxXzAwOCIsImFyZzBfMDA3IiwicmVzMF8wMDkiLCJyZXMxXzAxMCIsImFyZ18wMDYiLCJibmRzXzAwMiQwIiwiYXJnXzAwNCIsImJuZHNfMDAyJDEiLCJpbnZhcmlhbnQiLCJpbnZhcmlhbnRfYSIsInZhbHVlIiwidCQwIiwiYXQiLCJzdGVwcyQxIiwiaW5pdCQxIiwic3RlcHMkMCIsImluaXQkMCIsInQiLCJjb25zdGFudCIsImNyZWF0ZV9leG4iLCJ0aW1lMiIsInRpbWUxIiwieF8wMTEiLCJjcmVhdGVfZnJvbV9zZXF1ZW5jZSJdLCJzb3VyY2VzIjpbIi9Vc2Vycy90eWxhbm1vcmFuLy5vcGFtLzUuMS4xL2xpYi9pbmNyZW1lbnRhbC9pbmNyZW1lbnRhbF9zdGVwX2Z1bmN0aW9uL2luY3JlbWVudGFsX3N0ZXBfZnVuY3Rpb24ubWwiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Rzs7Ozs7Rzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0lBS01BOzs7Ozs7OztHQUdOLFNBRUlDLE1BQUFDLEdBQUEsT0FBQUEsS0FBSztZQURMQyxLQUFBRCxHQUFBLE9BQUFBLEtBQUk7WUFEUkUsWUFBS0M7SUFBTCxJQUVJQyxzQkFEQUMscUJBREpDOzs7TUFFYUM7TUFBQUM7TUFBQUMsc0JBTFBYLFdBS09VO01BQUFFLHNCQUZSUCxVQUVRSTtvQkFBQUUsY0FBQUM7O0lBQVQ7S0FBQUMsVUFBQSxtQ0FBQVA7S0FGSlEsa0NBRUlELGVBRkpMO0tBQ0lPLFVBQUEsV0FEQ1YsVUFDREU7S0FESlMsa0NBQ0lELGVBREpEO0lBQUEsV0FBQUU7R0FJcUM7WUFFakNDLFVBQVVDO1FBQWNmO0lBQW9CLE9BQUEsV0FBbENlLGFBQWNmOztZQVN4QmdCLE1BQU1DLEtBQUdDO0lBQUssSUFQVUMsVUFPbEJGLFFBUGFHLFNBT2JILFFBUGFqQixPQUFBb0IsUUFBS3RCLFFBQUFxQjtJQUMxQjtLQUFNLFlBQUEsOEJBRG9CckI7aUJBRWhCLE9BRldFOzs7TUFBS3FCOztNQUFMQztNQUdaQztLQUNKLEdBQUEsbUJBR01MLElBSkZLLElBQ29CLE9BSlJ2QjtTQUFBQSxPQUFBc0IsUUFBS3hCLFFBQUF1Qjs7R0FPdUI7WUFDL0NHLFNBQVN4QixNQUFPLFdBQVBBLHlCQUF1QztZQUVoRHlCLFdBQVl6QixNQUFNRjs7S0FFZ0IsSUFBaUI0QixnQkFBWEM7S0FDbEMsT0FBQSxvQkFEa0NBLE9BQVdEO0lBQ2pCO1dBRC9CLDJCQUZlNUI7S0FRSjs7OzBCO01BQTJCOEIsUUFBM0IsMEJBUkk5Qjs7O2dEQXJCaEJELFdBNkJ1QytCOzs7Ozs7O0tBSHpDOztJQUlGLFdBVGM1QixNQVNFLCtCQVRJRjtHQVN1QjtZQUd6QytCLHFCQUFzQjdCLE1BQU1GLE9BQVEsV0FBZEUsTUFBTUYsT0FBdUI7Ozs7Ozs7O09BOUJ2REc7T0FNSWE7T0FMQWQ7T0FDQUY7T0FhQWtCO09BQ0FRO09BRUFDO09BWUFJOzs7O0UiLCJzb3VyY2VzQ29udGVudCI6WyJvcGVuISBDb3JlXG5cbm1vZHVsZSBUaW1lX25zID0gc3RydWN0XG4gIGluY2x1ZGUgVGltZV9uc1xuXG4gIGxldCBzZXhwX29mX3QgPSBUaW1lX25zLkFsdGVybmF0ZV9zZXhwLnNleHBfb2ZfdFxuZW5kXG5cbnR5cGUgJ2EgdCA9XG4gIHsgaW5pdCA6ICdhXG4gIDsgc3RlcHMgOiAoVGltZV9ucy50ICogJ2EpIFNlcXVlbmNlLnRcbiAgfVxuW0BAZGVyaXZpbmcgZmllbGRzIH5nZXR0ZXJzLCBzZXhwX29mXVxuXG5sZXQgaW52YXJpYW50IGludmFyaWFudF9hIHsgaW5pdDsgc3RlcHMgPSBfIH0gPSBpbnZhcmlhbnRfYSBpbml0XG5cbmxldCByZWMgdmFsdWVfaW50ZXJuYWwgaW5pdCBzdGVwcyB+YXQgPVxuICBtYXRjaCBTZXF1ZW5jZS5uZXh0IHN0ZXBzIHdpdGhcbiAgfCBOb25lIC0+IGluaXRcbiAgfCBTb21lICgodCwgYSksIHN0ZXBzKSAtPlxuICAgIGlmIFRpbWVfbnMuKCA8ICkgYXQgdCB0aGVuIGluaXQgZWxzZSB2YWx1ZV9pbnRlcm5hbCBhIHN0ZXBzIH5hdFxuOztcblxubGV0IHZhbHVlIHQgfmF0ID0gdmFsdWVfaW50ZXJuYWwgdC5pbml0IHQuc3RlcHMgfmF0XG5sZXQgY29uc3RhbnQgaW5pdCA9IHsgaW5pdDsgc3RlcHMgPSBTZXF1ZW5jZS5lbXB0eSB9XG5cbmxldCBjcmVhdGVfZXhuIH5pbml0IH5zdGVwcyA9XG4gIGlmIG5vdFxuICAgICAgIChMaXN0LmlzX3NvcnRlZCBzdGVwcyB+Y29tcGFyZTooZnVuICh0aW1lMSwgXykgKHRpbWUyLCBfKSAtPlxuICAgICAgICAgIFRpbWVfbnMuY29tcGFyZSB0aW1lMSB0aW1lMikpXG4gIHRoZW5cbiAgICByYWlzZV9zXG4gICAgICBbJW1lc3NhZ2VcbiAgICAgICAgXCJbU3RlcF9mdW5jdGlvbi5jcmVhdGVfZXhuXSBnb3QgdW5zb3J0ZWQgdGltZXNcIlxuICAgICAgICAgIH5zdGVwczooc3RlcHMgfD4gTGlzdC5tYXAgfmY6ZnN0IDogVGltZV9ucy50IGxpc3QpXTtcbiAgeyBpbml0OyBzdGVwcyA9IHN0ZXBzIHw+IFNlcXVlbmNlLm9mX2xpc3QgfVxuOztcblxubGV0IGNyZWF0ZV9mcm9tX3NlcXVlbmNlIH5pbml0IH5zdGVwcyA9IHsgaW5pdDsgc3RlcHMgfVxuIl19
