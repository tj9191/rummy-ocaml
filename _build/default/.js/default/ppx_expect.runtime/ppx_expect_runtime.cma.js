// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Ppx_expect_runtime__
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Ppx_expect_runtime = [0],
    Ppx_expect_runtime$0 = [0, Ppx_expect_runtime];
   runtime.caml_register_global
    (0, Ppx_expect_runtime$0, "Ppx_expect_runtime__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppx_expect_runtime__Types
//# unitInfo: Requires: Base, Base__Comparable, Base__Int
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, cst = "";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    default$0 = [0, 2, 0, "%", "@@"],
    default$1 = [0, cst],
    Base = global_data.Base,
    Base_Comparable = global_data.Base__Comparable,
    Base_Int = global_data.Base__Int,
    _f_ = [0, cst];
   function equal(a, b){
    var _g_ = a[1] === b[1] ? 1 : 0;
    if(_g_)
     var _h_ = a[2] === b[2] ? 1 : 0, _i_ = _h_ ? a[3] === b[3] ? 1 : 0 : _h_;
    else
     var _i_ = _g_;
    return _i_;
   }
   var _a_ = 0;
   function _b_(t){return t[3];}
   var _c_ = [0, caml_call2(Base_Comparable[2], Base[129], _b_), _a_];
   function _d_(t){return t[2];}
   var
    _e_ = [0, caml_call2(Base_Comparable[2], Base[129], _d_), _c_],
    compare_character_range = caml_call1(Base_Comparable[1], _e_),
    Compact_loc = [0, equal, compare_character_range],
    Flexibility = [0],
    Expect_node_formatting = [0, default$0, Flexibility],
    Virtual_loc = [0],
    of_int_exn = Base_Int[5],
    to_int_exn = Base_Int[6],
    hash = Base_Int[8],
    sexp_of_t = Base_Int[10],
    compare = Base_Int[14],
    counter = [0, 0];
   function mint(param){
    var id = counter[1];
    counter[1] = id + 1 | 0;
    return id;
   }
   var Hand = [0], Kind = [0], Shape = [0];
   function handed(t, hand){return hand ? t ? t : _f_ : t;}
   var
    Ppx_expect_runtime_Types =
      [0,
       Expect_node_formatting,
       Compact_loc,
       Virtual_loc,
       [0, of_int_exn, to_int_exn, compare, sexp_of_t, hash, mint],
       [0, Hand, Kind, Shape, [0, default$1, handed]]];
   runtime.caml_register_global
    (6, Ppx_expect_runtime_Types, "Ppx_expect_runtime__Types");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppx_expect_runtime__Write_corrected_file
//# unitInfo: Requires: Base, Base__Comparable, Base__List, Base__String, Make_corrected_file, Ppx_expect_runtime__Types, Stdio__Out_channel, Stdlib, Stdlib__Filename, Stdlib__Sys
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    Base = global_data.Base,
    Stdlib = global_data.Stdlib,
    Base_String = global_data.Base__String,
    Stdio_Out_channel = global_data.Stdio__Out_channel,
    Stdlib_Filename = global_data.Stdlib__Filename,
    Make_corrected_file = global_data.Make_corrected_file,
    Ppx_expect_runtime_Types = global_data.Ppx_expect_runtime__Types,
    Base_Comparable = global_data.Base__Comparable,
    Base_List = global_data.Base__List,
    Patch_with_file_contents = [0],
    cst_corrected = ".corrected",
    cst_corrected_tmp = ".corrected.tmp";
   function f
   (use_color,
    in_place,
    diff_command,
    diff_path_prefix,
    filename,
    with$0,
    corrections$0){
    var
     dot_corrected = caml_call2(Base[241], filename, cst_corrected),
     in_channel = caml_call1(Stdlib[79], filename),
     _d_ = caml_call1(Stdlib[92], in_channel),
     original_file_contents = caml_call2(Stdlib[86], in_channel, _d_);
    caml_call1(Stdlib[93], in_channel);
    function remove(file){
     if(runtime.caml_sys_file_exists(file)) runtime.caml_sys_remove(file);
     return;
    }
    var
     corrections$1 = caml_call2(with$0, original_file_contents, corrections$0),
     _a_ =
       caml_call2
        (Base_Comparable[2], Ppx_expect_runtime_Types[2][2], Base[242]),
     corrections = caml_call2(Base_List[83], corrections$1, _a_);
    function _b_(l_pos, param){
     var
      correction = param[2],
      match = param[1],
      end_pos = match[3],
      start_pos = match[2],
      code_chunk =
        caml_call3
         (Base_String[3],
          original_file_contents,
          l_pos,
          start_pos - l_pos | 0);
     return [0, end_pos, [0, code_chunk, [0, correction, 0]]];
    }
    var
     match = caml_call3(Base_List[96], corrections, 0, _b_),
     strs = match[2],
     l_pos = match[1],
     _c_ = caml_call1(Base_List[11], strs),
     result = caml_call2(Base_String[68], 0, _c_),
     rest = caml_call3(Base_String[5], [0, l_pos], 0, original_file_contents),
     next_contents = caml_call2(Base[241], result, rest);
    if(in_place){
     if
      (1 - caml_call2(Base_String[134], original_file_contents, next_contents))
      caml_call2(Stdio_Out_channel[37], filename, next_contents);
     remove(dot_corrected);
     return 0;
    }
    if(diff_command && ! runtime.caml_string_notequal(diff_command[1], "-")){
     caml_call2(Stdio_Out_channel[37], dot_corrected, next_contents);
     return 0;
    }
    var
     _e_ = caml_call1(Stdlib_Filename[13], filename),
     _f_ = [0, caml_call1(Stdlib_Filename[14], filename)],
     tmp_corrected =
       caml_call3(Stdlib_Filename[16], _f_, _e_, cst_corrected_tmp);
    return 0
            ===
             caml_call8
               (Make_corrected_file[1],
                0,
                [0, tmp_corrected],
                [0, use_color],
                diff_command,
                diff_path_prefix,
                next_contents,
                filename,
                0)
              [0]
            ? (remove(dot_corrected), remove(tmp_corrected), 0)
            : (runtime.caml_sys_rename(tmp_corrected, dot_corrected), 1);
   }
   var Ppx_expect_runtime_Write_corre = [0, Patch_with_file_contents, f];
   runtime.caml_register_global
    (12,
     Ppx_expect_runtime_Write_corre,
     "Ppx_expect_runtime__Write_corrected_file");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppx_expect_runtime__Output
//# unitInfo: Requires: Base, Base__List, Base__Printf, Base__String, Ppx_expect_runtime__Types
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_expect_runtime_Types = global_data.Ppx_expect_runtime__Types,
    Base_Printf = global_data.Base__Printf,
    Base_String = global_data.Base__String,
    Base = global_data.Base,
    Base_List = global_data.Base__List,
    Type = [0],
    compare = Base[195],
    Formatted = [0],
    _g_ =
      [0,
       [12, 123, [2, 0, [2, 0, [12, 124, [2, 0, [11, "|}", 0]]]]]],
       "{%s%s|%s|}"],
    _f_ =
      [0,
       [12,
        123,
        [2,
         0,
         [2,
          0,
          [12, 32, [2, 0, [12, 124, [2, 0, [12, 124, [2, 0, [12, 125, 0]]]]]]]]]],
       "{%s%s %s|%s|%s}"],
    _h_ =
      [0,
       [12, 91, [2, 0, [2, 0, [12, 32, [2, 0, [12, 93, 0]]]]]],
       "[%s%s %s]"],
    _d_ = [0, [12, 123, [2, 0, [12, 124, 0]]], "{%s|"],
    _e_ = [0, [12, 124, [2, 0, [12, 125, 0]]], "|%s}"],
    cst_xxx = "xxx",
    _a_ = [0, "\n"],
    _b_ =
      [0,
       [12, 123, [2, 0, [12, 124, [2, 0, [12, 124, [2, 0, [12, 125, 0]]]]]]],
       "{%s|%s|%s}"],
    _c_ = [0, [12, 34, [2, 0, [12, 34, 0]]], '"%s"'];
   function create(format){return format;}
   function apply(format, str){return caml_call1(format, str);}
   var Formatter = [0, create, apply];
   function compare$0(a, b){
    if(! a) return b ? -1 : 0;
    if(! b) return 1;
    var b$0 = b[1], a$0 = a[1];
    return caml_call2(compare, a$0, b$0);
   }
   var Test_result = [0, compare$0];
   function default$0(contents){
    return [0, contents, Ppx_expect_runtime_Types[5][4][1]];
   }
   function to_source_code_string(param){
    var tag = param[2], test_output = param[1];
    if(tag){
     var tag$0 = tag[1];
     return caml_call4(Base_Printf[2], _b_, tag$0, test_output, tag$0);
    }
    var
     _k_ = caml_call2(Base_String[102], test_output, 10),
     _l_ = caml_call2(Base_List[53], _k_, Base_String[69]),
     _m_ = caml_call1(caml_call1(Base_String[68], _a_), _l_);
    return caml_call2(Base_Printf[2], _c_, _m_);
   }
   var Payload = [0, default$0, to_source_code_string];
   function reconcile(expected_output, test_output){
    return caml_call2(Base_String[134], expected_output, test_output)
            ? 0
            : [0, test_output];
   }
   function fail(error_output){return [0, error_output];}
   function fix_delimiter_conflicts(contents, delimiter){
    if(! delimiter) return 0;
    var tag$1 = delimiter[1], tag = tag$1;
    for(;;){
     var
      tag_conflicts_with$0 =
        function(tag){
         function tag_conflicts_with(fstr){
          var _j_ = caml_call2(Base_Printf[2], fstr, tag);
          return caml_call2(Base_String[92], contents, _j_);
         }
         return tag_conflicts_with;
        },
      tag_conflicts_with = tag_conflicts_with$0(tag);
     if(! tag_conflicts_with(_d_) && ! tag_conflicts_with(_e_))
      return [0, tag];
     var tag$0 = caml_call2(Base[241], tag, cst_xxx), tag = tag$0;
    }
   }
   function to_formatted_payload(param, contents){
    return [0, contents, fix_delimiter_conflicts(contents, param)];
   }
   function to_source_code_string$0
   (expect_node_formatting, shape, tag, contents){
    var
     delimiter =
       fix_delimiter_conflicts
        (contents,
         caml_call2(Ppx_expect_runtime_Types[5][4][2], tag, shape[2])),
     payload = [0, contents, delimiter];
    if(shape[2]){
     var prefix = expect_node_formatting[3], tag$0 = delimiter[1];
     return runtime.caml_string_notequal(tag$0, "")
             ? caml_call6
               (Base_Printf[2], _f_, prefix, shape[1], tag$0, contents, tag$0)
             : caml_call4(Base_Printf[2], _g_, prefix, shape[1], contents);
    }
    var
     prefix$0 =
       shape[3] ? expect_node_formatting[3] : expect_node_formatting[4],
     _i_ = caml_call1(Payload[2], payload);
    return caml_call4(Base_Printf[2], _h_, prefix$0, shape[1], _i_);
   }
   var
    Ppx_expect_runtime_Output =
      [0,
       Type,
       Formatted,
       [0],
       Formatter,
       Test_result,
       Payload,
       reconcile,
       fail,
       to_formatted_payload,
       to_source_code_string$0];
   runtime.caml_register_global
    (15, Ppx_expect_runtime_Output, "Ppx_expect_runtime__Output");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppx_expect_runtime__Expectation_intf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Insert_loc = [0],
    Behavior_type = [0],
    Expect_reachability = [0],
    On_unreachable = [0],
    Behavior = [0],
    Definitions =
      [0,
       Insert_loc,
       Behavior_type,
       Expect_reachability,
       On_unreachable,
       Behavior],
    Ppx_expect_runtime_Expectation = [0, Definitions];
   runtime.caml_register_global
    (0,
     Ppx_expect_runtime_Expectation,
     "Ppx_expect_runtime__Expectation_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppx_expect_runtime__Expectation
//# unitInfo: Requires: Base, Base__Char, Base__Int, Base__List, Base__Staged, Base__String, Ppx_expect_runtime__Expectation_intf, Ppx_expect_runtime__Output, Ppx_expect_runtime__Types
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$7 = "",
    cst$6 = " ",
    cst_expect$0 = "expect",
    cst_expect_uncaught_exn = "expect.uncaught_exn",
    cst_test_output$2 = "test output",
    cst_uncaught_exception$1 = "uncaught exception",
    caml_string_notequal = runtime.caml_string_notequal;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$5 = cst$6,
    cst$4 = cst$7,
    cst$0 = cst$7,
    cst$1 = cst$6,
    cst$2 = cst$6,
    cst$3 = cst$7,
    cst = cst$7,
    last_line = cst$6,
    first_line = cst$6,
    Ppx_expect_runtime_Output = global_data.Ppx_expect_runtime__Output,
    Base_Staged = global_data.Base__Staged,
    Base = global_data.Base,
    Base_String = global_data.Base__String,
    Base_Int = global_data.Base__Int,
    Base_List = global_data.Base__List,
    Base_Char = global_data.Base__Char,
    Ppx_expect_runtime_Types = global_data.Ppx_expect_runtime__Types,
    cst_uncaught_exception$0 = cst_uncaught_exception$1,
    _g_ = [0, cst_expect_uncaught_exn, 0, 0],
    _h_ = [1, 1],
    cst_trailing_output = "trailing output",
    _f_ = [0, cst_expect$0, 0, 1],
    cst_uncaught_exception = cst_uncaught_exception$1,
    _e_ = [0, cst_expect_uncaught_exn, 0, 0],
    cst_test_output$1 = cst_test_output$2,
    _c_ = [0, cst_expect$0, 0, 1],
    _d_ = [1, 0],
    cst_test_output$0 = cst_test_output$2,
    cst_expect_exact = "expect_exact",
    cst_test_output = cst_test_output$2,
    cst_expect = cst_expect$0,
    _b_ = [0, cst$6, 0],
    _a_ = [0, "\n"];
   function loc(param){
    if(0 === param[0]){var whole_node = param[1]; return whole_node;}
    var loc = param[1][1];
    return loc;
   }
   var Insert_loc = [0, loc];
   function with_behavior(param, behavior){
    var
     inconsistent_outputs_message = param[5],
     on_incorrect_output = param[4],
     payload_type = param[3],
     position = param[1];
    return [0,
            position,
            behavior,
            payload_type,
            on_incorrect_output,
            inconsistent_outputs_message];
   }
   function formatter(expect_node_formatting, param){
    var
     on_incorrect_output = param[4],
     payload_type = param[3],
     behavior = param[2],
     position = param[1],
     _r_ =
       payload_type
        ? function
         (str){
          var
           _s_ = caml_call1(Base_String[104], str),
           func = Base_List[53],
           _t_ =
             caml_call2
              (func, _s_, caml_call1(Base_String[108], [0, Base_Char[45]])),
           _u_ = caml_call2(Base_List[142], _t_, Base_String[14]),
           _v_ = caml_call1(Base_List[63], _u_),
           _w_ = caml_call2(Base_List[142], _v_, Base_String[14]),
           stripped = caml_call1(Base_List[63], _w_);
          function _x_(line){
           var
            _J_ = caml_call2(Base_String[109], 0, line),
            _H_ = caml_call1(Base_String[25], line),
            func = Base_List[141],
            _I_ = caml_call2(func, _H_, caml_call1(Base_Char[12], 32));
           return [0, caml_call1(Base_List[45], _I_), _J_];
          }
          var
           indent_and_contents = caml_call2(Base_List[53], stripped, _x_),
           _y_ = Base_List[13],
           _z_ =
             caml_call2
              (_y_,
               indent_and_contents,
               function(param){
                var indent = param[1];
                return caml_string_notequal(param[2], cst$7) ? [0, indent] : 0;
               }),
           match = caml_call2(Base_List[31], _z_, Base_Int[14]);
          if(match)
           var
            min_indent = match[1],
            _A_ =
              function(param){
               var line = param[2], indent = param[1];
               return [0,
                       caml_call2(Base_Int[16], 0, indent - min_indent | 0),
                       line];
              },
            lines = caml_call2(Base_List[53], indent_and_contents, _A_);
          else
           var lines = 0;
          if(0 === behavior[0])
           var tag = behavior[1][2], tag$0 = tag;
          else
           var tag$0 = Ppx_expect_runtime_Types[5][4][1];
          var _B_ = expect_node_formatting[2];
          if(! lines) return tag$0 ? cst$2 : cst$3;
          if(! lines[2] && ! _B_){
           var line = lines[1][2];
           return tag$0
                   ? caml_call2(Base_String[68], 0, [0, cst$1, [0, line, _b_]])
                   : line;
          }
          if(0 === position[0])
           var
            match$0 = position[1],
            start_pos = match$0[2],
            start_bol = match$0[1],
            _C_ = start_pos - start_bol | 0;
          else
           var
            match$1 = position[1][2],
            start_pos$0 = match$1[2],
            start_bol$0 = match$1[1],
            _F_ = on_incorrect_output[3] ? expect_node_formatting[1] : 0,
            _C_ = (start_pos$0 - start_bol$0 | 0) + _F_ | 0;
          var location_indent = expect_node_formatting[1] + _C_ | 0;
          function spaces(n){return caml_call2(Base_String[66], n, 32);}
          if(tag$0)
           var
            last_line$0 = spaces(location_indent),
            indentation = location_indent,
            first_line$0 = cst;
          else
           var
            last_line$0 = last_line,
            indentation = 1,
            first_line$0 = first_line;
          function _D_(param){
           var indent = param[1];
           if(! caml_string_notequal(param[2], cst$7)) return cst$0;
           var line = param[2], _G_ = spaces(indentation + indent | 0);
           return caml_call2(Base[241], _G_, line);
          }
          var
           lines$0 = caml_call2(Base_List[53], lines, _D_),
           _E_ =
             caml_call1
              (Base_List[11],
               [0,
                [0, first_line$0, 0],
                [0, lines$0, [0, [0, last_line$0, 0], 0]]]);
          return caml_call1(caml_call1(Base_String[68], _a_), _E_);
         }
        : function(_K_){return _K_;};
    return caml_call1(Ppx_expect_runtime_Output[4][1], _r_);
   }
   function extension_syntax(extension_name, payload_loc, node_loc){
    if(payload_loc){
     var
      payload_loc$0 = payload_loc[1],
      _p_ = payload_loc$0[2] <= node_loc[2] ? 1 : 0,
      _q_ = _p_ ? node_loc[3] <= payload_loc$0[3] ? 1 : 0 : _p_;
     if(_q_) return [0, extension_name, 1, 1];
    }
    return [0, extension_name, 0, 1];
   }
   function possibly_relax_strictness(formatting_flexibility, t){
    if(! formatting_flexibility) return t;
    var
     expect_node_formatting = formatting_flexibility[1],
     fmt = formatter(expect_node_formatting, t),
     _n_ = t[2],
     reachability = _n_[3],
     on_unreachable = _n_[2],
     match = _n_[1],
     tag = match[2],
     contents = match[1],
     _o_ = caml_call2(Ppx_expect_runtime_Output[4][2], fmt, contents),
     match$0 = caml_call2(Ppx_expect_runtime_Output[7], contents, _o_);
    if(! match$0) return t;
    var
     contents$0 = match$0[1],
     payload = caml_call2(Ppx_expect_runtime_Output[9], tag, contents$0);
    return with_behavior(t, [0, payload, on_unreachable, reachability]);
   }
   function expected_string_and_payload_lo(param){
    if(! param)
     return [0, caml_call1(Ppx_expect_runtime_Output[6][1], cst$4), 0];
    var match = param[1], b = match[2], a = match[1];
    return [0, a, [0, b]];
   }
   function expect(formatting_flexibility, node_loc, located_payload){
    var
     match = expected_string_and_payload_lo(located_payload),
     payload_loc = match[2],
     payload = match[1];
    return possibly_relax_strictness
            (formatting_flexibility,
             [0,
              [0, node_loc, payload_loc],
              [0, payload, 2, 0],
              1,
              extension_syntax(cst_expect, payload_loc, node_loc),
              cst_test_output]);
   }
   function expect_exact(formatting_flexibility, node_loc, located_payload){
    var
     match = expected_string_and_payload_lo(located_payload),
     payload_loc = match[2],
     payload = match[1];
    return possibly_relax_strictness
            (formatting_flexibility,
             [0,
              [0, node_loc, payload_loc],
              [0, payload, 2, 0],
              0,
              extension_syntax(cst_expect_exact, payload_loc, node_loc),
              cst_test_output$0]);
   }
   function expect_unreachable(node_loc){
    return [0, [0, node_loc, 0], _d_, 1, _c_, cst_test_output$1];
   }
   function expect_uncaught_exn
   (formatting_flexibility, node_loc, located_payload){
    var
     match = expected_string_and_payload_lo(located_payload),
     payload_loc = match[2],
     payload = match[1];
    return possibly_relax_strictness
            (formatting_flexibility,
             [0,
              [0, node_loc, payload_loc],
              [0, payload, 1, 1],
              1,
              _e_,
              cst_uncaught_exception]);
   }
   function expect_trailing(insert_loc){
    return [0,
            [1, insert_loc],
            [0, caml_call1(Ppx_expect_runtime_Output[6][1], cst$5), 0, 0],
            1,
            _f_,
            cst_trailing_output];
   }
   function expect_no_uncaught_exn(insert_loc){
    return [0, [1, insert_loc], _h_, 1, _g_, cst_uncaught_exception$0];
   }
   function format_payload(mk_node){
    function _k_(expect_node_formatting, payload_loc, node_loc, tag, contents){
     var
      node =
        caml_call3
         (mk_node, 0, node_loc, [0, [0, [0, contents, tag], payload_loc]]),
      _l_ = formatter(expect_node_formatting, node),
      formatted_contents =
        caml_call2(Ppx_expect_runtime_Output[4][2], _l_, contents),
      match =
        caml_call2(Ppx_expect_runtime_Output[7], contents, formatted_contents);
     if(! match) return 0;
     var contents$0 = match[1], node_shape = node[4];
     if(node_shape[2])
      var
       source_code_string =
         caml_call4
          (Ppx_expect_runtime_Output[10],
           expect_node_formatting,
           node_shape,
           tag,
           contents$0);
     else
      var
       _m_ = caml_call2(Ppx_expect_runtime_Output[9], tag, contents$0),
       source_code_string = caml_call1(Ppx_expect_runtime_Output[6][2], _m_);
     return [0, source_code_string];
    }
    return caml_call1(Base_Staged[1], _k_);
   }
   var
    _i_ = format_payload(expect),
    format_expect_payload = caml_call1(Base_Staged[2], _i_),
    _j_ = format_payload(expect_uncaught_exn),
    format_uncaught_exn_payload = caml_call1(Base_Staged[2], _j_),
    Ppx_expect_runtime_Expectation =
      [0,
       Insert_loc,
       with_behavior,
       formatter,
       expect,
       expect_exact,
       expect_unreachable,
       expect_uncaught_exn,
       expect_trailing,
       expect_no_uncaught_exn,
       [0, format_expect_payload, format_uncaught_exn_payload]];
   runtime.caml_register_global
    (35, Ppx_expect_runtime_Expectation, "Ppx_expect_runtime__Expectation");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppx_expect_runtime__Test_node
//# unitInfo: Requires: Base, Base__Char, Base__Comparable, Base__Error, Base__Hashtbl, Base__List, Base__Option, Base__Printf, Base__Queue, Base__String, Ppx_expect_runtime__Expectation, Ppx_expect_runtime__Output, Ppx_expect_runtime__Types
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, cst$4 = "";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    tag = [0, cst$4],
    cst$3 = cst$4,
    cst$2 = ";",
    cst = cst$4,
    cst$0 = "\n",
    cst$1 = cst$4,
    Ppx_expect_runtime_Output = global_data.Ppx_expect_runtime__Output,
    Base_Char = global_data.Base__Char,
    Base_String = global_data.Base__String,
    Ppx_expect_runtime_Expectation =
      global_data.Ppx_expect_runtime__Expectation,
    Base_Hashtbl = global_data.Base__Hashtbl,
    Base_List = global_data.Base__List,
    Base = global_data.Base,
    Base_Comparable = global_data.Base__Comparable,
    Base_Option = global_data.Base__Option,
    Base_Queue = global_data.Base__Queue,
    Ppx_expect_runtime_Types = global_data.Ppx_expect_runtime__Types,
    Base_Printf = global_data.Base__Printf,
    Base_Error = global_data.Base__Error,
    _e_ =
      [0,
       [11,
        "Internal expect test bug: could not find test\nFile: ",
        [2, 0, [11, "\nID:   ", [4, 0, 0, 0, 0]]]],
       "Internal expect test bug: could not find test\nFile: %s\nID:   %d"],
    _c_ =
      [0,
       [11, "<expect test ran without ", [2, 0, [12, 62, 0]]],
       "<expect test ran without %s>"],
    _b_ = [0, 0],
    _a_ =
      [0,
       [12, 91, [2, 0, [11, "expect.unreachable]", 0]]],
       "[%sexpect.unreachable]"];
   function record_and_return_result
   (expect_node_formatting, failure_ref, test_output_raw, t){
    var
     results = t[2],
     expectation = t[1],
     _P_ =
       caml_call2
        (Ppx_expect_runtime_Expectation[3],
         expect_node_formatting,
         expectation),
     test_output =
       caml_call2(Ppx_expect_runtime_Output[4][2], _P_, test_output_raw),
     _Q_ = expectation[2];
    if(0 === _Q_[0])
     var
      match = _Q_[1],
      tag$0 = match[2],
      contents = match[1],
      tag$1 = tag$0,
      result = caml_call2(Ppx_expect_runtime_Output[7], contents, test_output);
    else
     var
      result$0 = caml_call1(Ppx_expect_runtime_Output[8], test_output),
      tag$1 = tag,
      result = result$0;
    if(result) failure_ref[1] = 1;
    caml_call2(Base_Queue[35], results, [0, [0, result, test_output_raw]]);
    t[3] = 1;
    return [0, result, tag$1];
   }
   function of_expectation(expectation){
    return [0, [0, expectation, caml_call2(Base_Queue[58], 0, 0), 0]];
   }
   function record_end_of_run(t){
    var
     match = t[1],
     results = match[2],
     reached_this_run = match[3],
     _O_ = 1 - reached_this_run;
    return _O_ ? caml_call2(Base_Queue[35], results, 0) : _O_;
   }
   function record_result
   (expect_node_formatting, failure_ref, test_output_raw, param){
    var inner = param[1];
    record_and_return_result
     (expect_node_formatting, failure_ref, test_output_raw, inner);
    return 0;
   }
   function _d_(_N_){return runtime.Base_hash_string(_N_);}
   var
    global_results_table =
      caml_call3
       (Base_Hashtbl[4], 0, 0, [0, Base_String[51], Base_String[42], _d_]);
   function find_test(absolute_filename, test_id){
    var
     _I_ =
       caml_call2(Base_Hashtbl[56], global_results_table, absolute_filename),
     _J_ = Base_Option[22],
     _K_ =
       caml_call2
        (_J_,
         _I_,
         function(param){
          var expectations = param[1];
          return caml_call2(Base_Hashtbl[56], expectations, test_id);
         }),
     func = Base_Option[31],
     _L_ = caml_call1(Ppx_expect_runtime_Types[4][2], test_id),
     _M_ = caml_call3(Base_Printf[2], _e_, absolute_filename, _L_);
    return caml_call2
            (caml_call2(func, 0, [0, caml_call1(Base_Error[14], _M_)]),
             0,
             _K_);
   }
   function initialize_and_register_tests
   (absolute_filename, tests, postprocess){
    var tests_as_in_table = caml_call2(Base_Queue[58], 0, 0);
    function _D_(file){
     var
      _E_ = Ppx_expect_runtime_Types[4],
      _F_ =
        [0,
         caml_call3(Base_Hashtbl[4], 0, 0, [0, _E_[3], _E_[4], _E_[5]]),
         postprocess],
      file$0 = caml_call2(Base_Option[30], file, _F_),
      _G_ = Ppx_expect_runtime_Types[4],
      tests$0 =
        caml_call4(Base_Hashtbl[8], 0, 0, [0, _G_[3], _G_[4], _G_[5]], tests);
     function _H_(test_id, new_test, existing_test){
      var test = caml_call2(Base_Option[30], existing_test, new_test);
      test[1][3] = 0;
      caml_call2(Base_Queue[35], tests_as_in_table, [0, test_id, test]);
      return [0, test];
     }
     caml_call3(Base_Hashtbl[66], tests$0, file$0[1], _H_);
     return file$0;
    }
    caml_call3(Base_Hashtbl[41], global_results_table, absolute_filename, _D_);
    return caml_call1(Base_Queue[20], tests_as_in_table);
   }
   function process_each_file(f){
    var
     _A_ = caml_call1(Base_Hashtbl[78], global_results_table),
     func = Base_List[83],
     _B_ =
       caml_call2
        (func,
         _A_,
         caml_call2(Base_Comparable[2], Base_String[51], Base[242])),
     _C_ = Base_List[53];
    return caml_call2
            (_C_,
             _B_,
             function(param){
              var
               match = param[2],
               postprocess = match[2],
               expectations = match[1],
               filename = param[1],
               test_nodes = caml_call1(Base_Hashtbl[68], expectations);
              return caml_call3(f, filename, test_nodes, postprocess);
             });
   }
   function expect(formatting_flexibility, node_loc, located_payload){
    return of_expectation
            (caml_call3
              (Ppx_expect_runtime_Expectation[4],
               formatting_flexibility,
               node_loc,
               located_payload));
   }
   function expect_exact(formatting_flexibility, node_loc, located_payload){
    return of_expectation
            (caml_call3
              (Ppx_expect_runtime_Expectation[5],
               formatting_flexibility,
               node_loc,
               located_payload));
   }
   function expect_unreachable(node_loc){
    return of_expectation
            (caml_call1(Ppx_expect_runtime_Expectation[6], node_loc));
   }
   var Create = [0, expect, expect_exact, expect_unreachable];
   function loc(param){
    var position = param[1][1][1];
    return caml_call1(Ppx_expect_runtime_Expectation[1][1], position);
   }
   function expectation_of_t(param){
    var expectation = param[1][1], _z_ = expectation[2];
    if(0 !== _z_[0]) return 0;
    var contents = _z_[1][1];
    return [0, contents];
   }
   function record_and_return_number_of_li
   (expect_node_formatting, failure_ref, test_output_raw, param){
    var
     _w_ =
       record_and_return_result
        (expect_node_formatting, failure_ref, test_output_raw, param[1]),
     match = _w_[1];
    if(! match) return 0;
    var
     tag = _w_[2],
     contents = match[1],
     _x_ = caml_call2(Ppx_expect_runtime_Output[9], tag, contents),
     correction = caml_call1(Ppx_expect_runtime_Output[6][2], _x_),
     _y_ = caml_call1(Base_Char[16], 10);
    return [0, caml_call2(Base_String[21], correction, _y_) + 1 | 0];
   }
   function to_diffs
   (cr_for_multiple_outputs,
    expect_node_formatting,
    original_file_contents,
    t){
    var
     match$4 = t[1],
     results = match$4[2],
     expectation = match$4[1],
     results_list = caml_call1(Base_Queue[20], results);
    function _p_(param){
     if(! param) return _b_;
     var output = param[1];
     return [1, output];
    }
    var
     match$5 = caml_call2(Base_List[16], results_list, _p_),
     outputs_list = match$5[2],
     unreached_list = match$5[1];
    function _q_(param){var result = param[1]; return result;}
    var
     _r_ =
       caml_call2(Base_Comparable[2], Ppx_expect_runtime_Output[5][1], _q_),
     distinct_outputs = caml_call2(Base_List[126], outputs_list, _r_),
     was_reached = caml_call1(Base_List[18], unreached_list),
     match$6 = expectation[2];
    if(0 === match$6[0])
     var reachability = match$6[3], reachability_behavior = reachability;
    else
     var
      reachability_of_corrected = match$6[1],
      reachability_behavior = reachability_of_corrected;
    function correction_for_single_result(param){
     if(! param) return 0;
     var received = param[1];
     return [0, [0, expectation, received]];
    }
    a:
    if(distinct_outputs){
     b:
     if(! distinct_outputs[2]){
      var result = distinct_outputs[1][1];
      if(! was_reached && reachability_behavior) break b;
      var match$7 = correction_for_single_result(result);
      break a;
     }
     var
      _s_ = Base_List[53],
      outputs =
        caml_call2
         (_s_,
          results_list,
          function(param){
           if(! param) return caml_call2(Base_Printf[2], _c_, expectation[5]);
           var raw = param[1][2];
           return raw;
          }),
      _t_ = caml_call2(cr_for_multiple_outputs, expectation[5], outputs),
      _u_ =
        caml_call2
         (Ppx_expect_runtime_Expectation[3],
          expect_node_formatting,
          expectation),
      _v_ = caml_call1(caml_call1(Ppx_expect_runtime_Output[4][2], _u_), _t_),
      match$7 =
        correction_for_single_result
         (caml_call1(Ppx_expect_runtime_Output[8], _v_));
    }
    else
     var
      behavior$0 = expectation[2],
      match$7 =
        0 === behavior$0[0]
         ? [0,
           [1,
            caml_call2
             (Ppx_expect_runtime_Expectation[2], expectation, behavior$0)]]
         : 0;
    if(! match$7) return 0;
    var correction$2 = match$7[1];
    function safe_byte_get(string, i){
     if(0 <= i && i < runtime.caml_ml_string_length(string))
      return [0, runtime.caml_string_get(string, i)];
     return 0;
    }
    if(0 === correction$2[0]){
     var
      _f_ = correction$2[1],
      on_incorrect_output = _f_[4],
      test_output = correction$2[2],
      behavior = _f_[2],
      position = _f_[1];
     if(0 === position[0])
      var whitespace = cst;
     else
      var
       match = position[1][2],
       start_pos = match[2],
       start_bol = match[1],
       let_offset = start_pos - start_bol | 0,
       _j_ = on_incorrect_output[3] ? expect_node_formatting[1] : 0,
       indent = let_offset + _j_ | 0,
       _k_ = caml_call2(Base_String[66], indent, 32),
       whitespace$0 = caml_call2(Base[241], cst$0, _k_),
       whitespace = whitespace$0;
     if(0 === behavior[0])
      var tag = behavior[1][2], tag$0 = tag;
     else
      var tag$0 = Ppx_expect_runtime_Types[5][4][1];
     a:
     {
      if(0 === position[0]){
       var _h_ = position[2], _g_ = position[1];
       if(_h_ && ! on_incorrect_output[2] && on_incorrect_output[3]){
        var
         payload_loc = _h_[1],
         _i_ = caml_call2(Ppx_expect_runtime_Output[9], tag$0, test_output),
         correction$1 = caml_call1(Ppx_expect_runtime_Output[6][2], _i_),
         correction$0 = correction$1,
         loc$0 = payload_loc;
        break a;
       }
       var loc = _g_;
      }
      else
       var loc = position[1][1];
      var
       correction =
         caml_call4
          (Ppx_expect_runtime_Output[10],
           expect_node_formatting,
           on_incorrect_output,
           tag$0,
           test_output),
       correction$0 = correction,
       loc$0 = loc;
     }
     var
      match$0 =
        [0, [0, loc$0, caml_call2(Base[241], whitespace, correction$0)]];
    }
    else{
     var
      _l_ = correction$2[1],
      on_incorrect_output$0 = _l_[4],
      on_unreachable = _l_[2][2],
      position$0 = _l_[1],
      loc$1 = caml_call1(Ppx_expect_runtime_Expectation[1][1], position$0);
     switch(on_unreachable){
       case 0:
        var match$0 = 0; break;
       case 1:
        var match$0 = [0, [0, loc$1, cst$1]]; break;
       default:
        var
         prefix =
           on_incorrect_output$0[3]
            ? expect_node_formatting[3]
            : expect_node_formatting[4],
         match$0 = [0, [0, loc$1, caml_call2(Base_Printf[2], _a_, prefix)]];
     }
    }
    if(! match$0) return 0;
    var
     match$1 = match$0[1],
     diff = match$1[2],
     loc$2 = match$1[1],
     end_pos = loc$2[3],
     start_pos$0 = loc$2[2],
     start_bol$0 = loc$2[1],
     main_correction = [0, [0, loc$2, diff], 0];
    a:
    {
     if(1 === correction$2[0] && ! correction$2[1][4][3]){
      var
       match$2 = safe_byte_get(original_file_contents, start_pos$0 - 1 | 0),
       match$3 = safe_byte_get(original_file_contents, end_pos);
      b:
      {
       c:
       if(match$2 && 10 === match$2[1]){
        if(match$3 && 10 !== match$3[1]) break c;
        var
         _o_ =
           [0, [0, [0, start_bol$0, start_pos$0 - 1 | 0, start_pos$0], cst$3]];
        break b;
       }
       var _o_ = 0;
      }
      var remove_empty_line_from_deleted = _o_;
      break a;
     }
     var remove_empty_line_from_deleted = 0;
    }
    a:
    {
     if(0 === correction$2[0]){
      var _m_ = correction$2[1], _n_ = _m_[1];
      if(0 !== _n_[0] && _m_[4][3]){
       var
        body_loc = _n_[1][2],
        add_semicolon_before_trailing_ =
          [0, [0, [0, body_loc[1], body_loc[3], body_loc[3]], cst$2]];
       break a;
      }
     }
     var add_semicolon_before_trailing_ = 0;
    }
    var
     additional_corrections =
       caml_call2
        (Base_List[14],
         [0,
          remove_empty_line_from_deleted,
          [0, add_semicolon_before_trailing_, 0]],
         Base_Option[42]);
    return caml_call2(Base[222], additional_corrections, main_correction);
   }
   var
    Ppx_expect_runtime_Test_node =
      [0,
       Create,
       of_expectation,
       record_end_of_run,
       record_result,
       [0, initialize_and_register_tests, find_test, process_each_file],
       [0, expectation_of_t, record_and_return_number_of_li, loc, to_diffs]];
   runtime.caml_register_global
    (23, Ppx_expect_runtime_Test_node, "Ppx_expect_runtime__Test_node");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppx_expect_runtime__Current_file
//# unitInfo: Requires: Base, Base__Or_error, Base__Printf, Base__String, CamlinternalLazy, Stdlib__Filename, Stdlib__Sys
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_String = global_data.Base__String,
    Base = global_data.Base,
    Base_Printf = global_data.Base__Printf,
    Stdlib_Filename = global_data.Stdlib__Filename,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Base_Or_error = global_data.Base__Or_error,
    current = [0, 0],
    _c_ =
      [0,
       [11,
        "Trying to run an expect test from the wrong file.\n- test declared at ",
        [2,
         0,
         [12,
          58,
          [4,
           0,
           0,
           0,
           [11, "\n- trying to run it from ", [2, 0, [12, 10, 0]]]]]]],
       "Trying to run an expect test from the wrong file.\n- test declared at %s:%d\n- trying to run it from %s\n"],
    cst_Expect_test_collector_get_ =
      "Expect_test_collector.get: there is no active file",
    cst_Expect_test_collector_unse =
      "Expect_test_collector.unset: there is no active file",
    cst_new_file = "new_file",
    cst_old_file = "old_file",
    cst_Expect_test_collector_set_ =
      "Expect_test_collector.set: there is already an active file",
    _b_ = [0, 1];
   function set(filename_rel_to_project_root){
    var match = current[1];
    if(match){
     var
      current$0 = match[1],
      _j_ =
        [0,
         [0,
          cst_new_file,
          caml_call1(Base[202], filename_rel_to_project_root)],
         0],
      _k_ = [0, [0, cst_old_file, caml_call1(Base[202], current$0)], _j_],
      _l_ = caml_call2(Base[85][8], cst_Expect_test_collector_set_, _k_);
     return caml_call1(Base[246], _l_);
    }
    current[1] = [0, filename_rel_to_project_root];
    return 0;
   }
   function unset(param){
    if(current[1]){current[1] = 0; return 0;}
    var _i_ = caml_call2(Base[85][8], cst_Expect_test_collector_unse, 0);
    return caml_call1(Base[246], _i_);
   }
   function get(param){
    var match = current[1];
    if(match){var fn = match[1]; return fn;}
    var _h_ = caml_call2(Base[85][8], cst_Expect_test_collector_get_, 0);
    return caml_call1(Base[246], _h_);
   }
   function _a_(_g_){return runtime.caml_sys_getcwd(_g_);}
   var
    dir_or_error = caml_call2(Base_Or_error[31], _b_, _a_),
    initial_dir =
      [246,
       function(_f_){return caml_call1(Base_Or_error[34], dir_or_error);}];
   function absolute_path(file){
    if(! caml_call1(Stdlib_Filename[5], file)) return file;
    var _d_ = runtime.caml_obj_tag(initial_dir);
    a:
    if(250 === _d_)
     var _e_ = initial_dir[1];
    else{
     if(246 !== _d_ && 244 !== _d_){var _e_ = initial_dir; break a;}
     var _e_ = caml_call1(CamlinternalLazy[2], initial_dir);
    }
    return caml_call2(Stdlib_Filename[4], _e_, file);
   }
   function verify_that_file_is_current_ex
   (line_number, filename_rel_to_project_root){
    var registering_tests_for = get(0);
    return caml_call2
             (Base_String[134],
              filename_rel_to_project_root,
              registering_tests_for)
            ? 0
            : caml_call5
              (Base_Printf[4],
               Base[244],
               _c_,
               filename_rel_to_project_root,
               line_number,
               registering_tests_for);
   }
   var
    Ppx_expect_runtime_Current_fil =
      [0,
       set,
       unset,
       get,
       initial_dir,
       absolute_path,
       verify_that_file_is_current_ex];
   runtime.caml_register_global
    (13, Ppx_expect_runtime_Current_fil, "Ppx_expect_runtime__Current_file");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppx_expect_runtime__Test_block
//# unitInfo: Requires: Base, Base__Exn, Base__List, Base__Option, Base__Printf, Base__Source_code_position, Base__String, Expect_test_config, Ppx_expect_runtime__Current_file, Ppx_expect_runtime__Expectation, Ppx_expect_runtime__Test_node, Ppx_expect_runtime__Types, Ppx_inline_test_lib, Stdlib, Stdlib__Filename, Stdlib__Format, Stdlib__Obj, Stdlib__Printexc, Stdlib__Printf, Stdlib__Sys
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$4 = "",
    cst$5 = "\n",
    cst$6 = "(* ",
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_notequal = runtime.caml_string_notequal,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    partial = [12, 10, [10, 0]],
    cst$3 = cst$4,
    cst$1 = "---------------",
    cst$2 = cst$4,
    cst = "\n\n",
    cst$0 = cst$4,
    Expect_test_config = global_data.Expect_test_config,
    Base_Source_code_position = global_data.Base__Source_code_position,
    Base_Printf = global_data.Base__Printf,
    Base = global_data.Base,
    Stdlib = global_data.Stdlib,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Base_Option = global_data.Base__Option,
    Ppx_expect_runtime_Test_node = global_data.Ppx_expect_runtime__Test_node,
    Ppx_expect_runtime_Types = global_data.Ppx_expect_runtime__Types,
    Base_List = global_data.Base__List,
    Ppx_expect_runtime_Current_fil =
      global_data.Ppx_expect_runtime__Current_file,
    Ppx_expect_runtime_Expectation =
      global_data.Ppx_expect_runtime__Expectation,
    Base_String = global_data.Base__String,
    Stdlib_Filename = global_data.Stdlib__Filename,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Stdlib_Printexc = global_data.Stdlib__Printexc,
    Base_Exn = global_data.Base__Exn,
    Stdlib_Obj = global_data.Stdlib__Obj,
    Stdlib_Format = global_data.Stdlib__Format,
    _o_ =
      [0,
       [11,
        "Ppx_expect_runtime.read_current_test_output_exn called while there are no tests running at ",
        [2, 0, 0]],
       "Ppx_expect_runtime.read_current_test_output_exn called while there are no tests running at %s"],
    _n_ =
      [0,
       [11,
        "File ",
        [3,
         0,
         [11,
          ", line ",
          [4,
           0,
           0,
           0,
           [11,
            ", characters ",
            [4,
             0,
             0,
             0,
             [12,
              45,
              [4,
               0,
               0,
               0,
               [11,
                ":\nError: program exited while expect test was running!\nOutput captured so far:\n",
                [2, 0, partial]]]]]]]]]],
       "File %S, line %d, characters %d-%d:\nError: program exited while expect test was running!\nOutput captured so far:\n%s\n%!"],
    cst_Trailing_output = "Trailing output",
    _m_ = [0, cst$5],
    _k_ = [0, "line"],
    _l_ = [0, "file"],
    cst_inner_test = "inner_test",
    cst_outer_test = "outer_test",
    cst_Expect_test_runtime_reache =
      "Expect_test_runtime: reached one [let%expect_test] from another. Nesting expect\ntests is prohibited.",
    _i_ =
      [0,
       [11,
        '("',
        [2, 0, [11, '(Cannot print more details, Exn.to_string failed)")', 0]]],
       '("%s(Cannot print more details, Exn.to_string failed)")'],
    _j_ = [0, cst$5],
    _h_ =
      [0,
       "Raised at ",
       [0, "Called from ", [0, "Raised by primitive operation ", 0]]],
    _e_ =
      [0,
       [11,
        "=== Output ",
        [4, 0, 0, 0, [11, " / ", [4, 0, 0, 0, [11, " ===", 0]]]]],
       "=== Output %d / %d ==="],
    _f_ = [0, [2, 0, [2, 0, [2, 0, 0]]], "%s%s%s"],
    _c_ =
      [0,
       [11, "Test ran multiple times with different ", [2, 0, [12, 115, 0]]],
       "Test ran multiple times with different %ss"],
    _d_ =
      [0,
       [11, cst$6, [2, 0, [11, "expect_test: ", [2, 0, [11, " *)", 0]]]]],
       "(* %sexpect_test: %s *)"],
    _g_ = [0, cst$5],
    cst_CR = "CR ",
    _b_ =
      [0,
       [11,
        cst$6,
        [2,
         0,
         [11,
          "expect_test_collector: This test expectation appears to contain a backtrace.\n   This is strongly discouraged as backtraces are fragile.\n   Please change this test to not include a backtrace. *)",
          0]]],
       "(* %sexpect_test_collector: This test expectation appears to contain a backtrace.\n   This is strongly discouraged as backtraces are fragile.\n   Please change this test to not include a backtrace. *)"],
    cst_output = "output",
    cst_expect_test = "expect-test",
    _a_ = [0, 1, [0, 3, 0]];
   function clean_up_block(param){
    var
     test_output_writer = param[5],
     test_output_reader = param[4],
     output_file = param[2];
    caml_call1(Stdlib[93], test_output_reader);
    runtime.ppx_expect_runtime_after_test(Stdlib[39], Stdlib[40]);
    caml_call1(Stdlib[76], test_output_writer);
    runtime.caml_sys_remove(output_file);
    return;
   }
   function flush(param){
    caml_call2(Stdlib_Format[38], Stdlib_Format[110], 0);
    caml_call2(Stdlib_Format[38], Stdlib_Format[112], 0);
    caml_call1(Stdlib[63], Stdlib[39]);
    caml_call1(Stdlib[63], Stdlib[40]);
    runtime.ppx_expect_runtime_flush_stubs_streams(0);
    return;
   }
   function read_test_output_unsanitized(param){
    var old_offset = param[6], test_output_reader = param[4];
    flush(0);
    var
     new_offset = runtime.ppx_expect_runtime_out_channel_position(Stdlib[39]),
     len = new_offset - old_offset[1] | 0;
    old_offset[1] = new_offset;
    return caml_call2(Stdlib[86], test_output_reader, len);
   }
   function Configured(C){
    var
     cr_prefix = 15023 <= C[4] ? cst_CR : cst$0,
     cr_for_backtrace = caml_call2(Base_Printf[2], _b_, cr_prefix);
    function cr_for_multiple_outputs(output_name, outputs){
     var
      cr_body = caml_call2(Base_Printf[2], _c_, output_name),
      cr = caml_call3(Base_Printf[2], _d_, cr_prefix, cr_body),
      num_outputs = caml_call1(Base_List[45], outputs);
     function _W_(index, output){
      var
       header = caml_call3(Base_Printf[2], _e_, index + 1 | 0, num_outputs),
       pad_length =
         caml_ml_string_length(cr) - caml_ml_string_length(header) | 0,
       _X_ = [0, output, 0];
      if(0 < pad_length)
       var
        lpad = caml_call2(Base_String[66], pad_length / 2 | 0, 61),
        rpad =
          caml_call2
           (Base_String[66], pad_length - (pad_length / 2 | 0) | 0, 61),
        _Y_ = caml_call4(Base_Printf[2], _f_, lpad, header, rpad);
      else
       var _Y_ = header;
      return [0, _Y_, _X_];
     }
     var outputs_with_headers = caml_call2(Base_List[44], outputs, _W_);
     return caml_call2(Base_String[68], _g_, [0, cr, outputs_with_headers]);
    }
    var sanitize = C[3];
    function check_for_backtraces(s){
     function _U_(substring){
      return caml_call2(Base_String[92], s, substring);
     }
     if(! caml_call2(Base_List[23], _h_, _U_)) return s;
     var _V_ = caml_call2(Base[241], cst, s);
     return caml_call2(Base[241], cr_for_backtrace, _V_);
    }
    function dump_backtrace(possible_exn){
     try{caml_call1(C[2], possible_exn);}
     catch(exn$0){
      var
       exn = caml_wrap_exception(exn$0),
       bt = caml_call1(Stdlib_Printexc[12], 0);
      try{var _S_ = caml_call1(Base_Exn[10], exn), exn_string = _S_;}
      catch(_T_){
       var
        _Q_ = caml_call1(Stdlib_Obj[23][1], exn),
        name = caml_call1(Stdlib_Obj[23][2], _Q_),
        exn_string = caml_call2(Base_Printf[2], _i_, name);
      }
      var
       bt$0 = caml_call1(Stdlib_Printexc[14], bt),
       _R_ =
         caml_string_notequal(bt$0, cst$4)
          ? caml_call2
            (Base_String[68],
             _j_,
             [0, cr_for_backtrace, [0, exn_string, [0, bt$0, 0]]])
          : exn_string;
      return [0, _R_];
     }
     return 0;
    }
    return [0,
            ,
            ,
            cr_for_multiple_outputs,
            sanitize,
            check_for_backtraces,
            dump_backtrace];
   }
   var test_is_running = [0, 0];
   function am_running_expect_test(param){
    return caml_call1(Base_Option[53], test_is_running[1]);
   }
   function current_test(param){
    function _P_(param){var test_block = param[4]; return test_block;}
    return caml_call2(Base_Option[24], test_is_running[1], _P_);
   }
   function current_test_exn(param){
    var _O_ = current_test(0);
    return caml_call4(Base_Option[31], 0, 0, 0, _O_);
   }
   function iter(f){
    return caml_call2(Base_Option[37], test_is_running[1], f);
   }
   function at_exit(param){
    return iter
            (function(param){
              var
               test_block = param[4],
               match = param[3],
               end_pos = match[3],
               start_pos = match[2],
               start_bol = match[1],
               basename = param[2],
               line_number = param[1];
              flush(0);
              var
               fin = caml_call1(Stdlib[79], test_block[2]),
               _N_ = caml_call1(Stdlib[92], fin),
               all_out = caml_call2(Stdlib[86], fin, _N_);
              clean_up_block(test_block);
              return caml_call6
                      (Stdlib_Printf[3],
                       _n_,
                       basename,
                       line_number,
                       start_pos - start_bol | 0,
                       end_pos - start_bol | 0,
                       all_out);
             });
   }
   function read_current_test_output_exn(here){
    var match = current_test(0);
    if(match){
     var
      test_block = match[1],
      _K_ = read_test_output_unsanitized(test_block);
     return caml_call1(Expect_test_config[3], _K_);
    }
    var
     _L_ = caml_call1(Base_Source_code_position[22], here),
     _M_ = caml_call2(Base_Printf[2], _o_, _L_);
    return caml_call1(Base[244], _M_);
   }
   var
    default_cr_for_multiple_output = Configured(Expect_test_config)[3],
    For_external =
      [0,
       read_current_test_output_exn,
       am_running_expect_test,
       default_cr_for_multiple_output],
    Ppx_expect_runtime_Test_block =
      [0,
       function(C){
        var Configured$0 = Configured(C);
        function read_test_output_no_backtrace_(param){
         var _J_ = read_test_output_unsanitized(current_test_exn(0));
         return caml_call1(Configured$0[4], _J_);
        }
        function read_test_output_sanitized_and(param){
         var _I_ = read_test_output_no_backtrace_(0);
         return Configured$0[5].call(null, _I_);
        }
        function run_test_inner(test_id, test_output_raw, t){
         var
          _H_ = caml_call2(Ppx_expect_runtime_Test_node[5][2], t[1], test_id);
         return caml_call4
                 (Ppx_expect_runtime_Test_node[4],
                  Ppx_expect_runtime_Types[1][1],
                  t[3],
                  test_output_raw,
                  _H_);
        }
        function run_test(test_id){
         var _G_ = current_test_exn(0);
         return run_test_inner
                 (test_id, read_test_output_sanitized_and(0), _G_);
        }
        function run_suite
        (filename_rel_to_project_root,
         line_number,
         location,
         trailing_loc,
         body_loc,
         formatting_flexibility,
         expected_exn,
         test_to_run,
         exn_test_id,
         description,
         tags,
         inline_test_config,
         expectations,
         f){
         var
          end_pos = location[3],
          start_pos = location[2],
          start_bol = location[1],
          basename =
            caml_call1(Stdlib_Filename[13], filename_rel_to_project_root);
         iter
          (function(param){
            var outer_basename = param[2], outer_line_number = param[1];
            function sexp_here(basename, line_number){
             var
              _F_ =
                [0,
                 [1, [0, _k_, [0, caml_call1(Base[136], line_number), 0]]],
                 0];
             return [1,
                     [0,
                      [1, [0, _l_, [0, caml_call1(Base[202], basename), 0]]],
                      _F_]];
            }
            var
             _C_ =
               [0, [0, cst_inner_test, sexp_here(basename, line_number)], 0],
             _D_ =
               [0,
                [0,
                 cst_outer_test,
                 sexp_here(outer_basename, outer_line_number)],
                _C_],
             _E_ =
               caml_call2(Base[85][8], cst_Expect_test_runtime_reache, _D_);
            return caml_call1(Base[246], _E_);
           });
         function _p_(param){
          caml_call2
           (Ppx_expect_runtime_Current_fil[6],
            line_number,
            filename_rel_to_project_root);
          var
           absolute_filename =
             caml_call1(Ppx_expect_runtime_Current_fil[5], basename),
           _v_ =
             caml_call1
              (Ppx_expect_runtime_Expectation[8],
               [0,
                [0, trailing_loc[1], trailing_loc[2], trailing_loc[2]],
                body_loc]),
           trailing_test = caml_call1(Ppx_expect_runtime_Test_node[2], _v_);
          if(expected_exn)
           var
            _w_ =
              caml_call3
               (Ppx_expect_runtime_Expectation[7],
                formatting_flexibility,
                trailing_loc,
                expected_exn),
            exn_test = caml_call1(Ppx_expect_runtime_Test_node[2], _w_);
          else
           var
            _A_ =
              caml_call1
               (Ppx_expect_runtime_Expectation[9],
                [0, trailing_loc, body_loc]),
            exn_test = caml_call1(Ppx_expect_runtime_Test_node[2], _A_);
          var
           expectations$0 =
             [0,
              [0, exn_test_id, exn_test],
              [0, [0, test_to_run, trailing_test], expectations]];
          function _x_(original_file_contents, ts){
           var
            _B_ =
              caml_call3
               (Ppx_expect_runtime_Test_node[6][4],
                Configured$0[3],
                Ppx_expect_runtime_Types[1][1],
                original_file_contents);
           return caml_call2(Base_List[14], ts, _B_);
          }
          var
           expectations$1 =
             caml_call3
              (Ppx_expect_runtime_Test_node[5][1],
               absolute_filename,
               expectations$0,
               _x_);
          flush(0);
          var
           _u_ =
             caml_call3(Stdlib_Filename[16], 0, cst_expect_test, cst_output),
           output_file = caml_call1(Ppx_expect_runtime_Current_fil[5], _u_),
           test_output_writer = caml_call3(Stdlib[62], _a_, 420, output_file),
           test_output_reader = caml_call1(Stdlib[79], output_file);
          runtime.ppx_expect_runtime_before_test
           (test_output_writer, Stdlib[39], Stdlib[40]);
          var
           test_block =
             [0,
              absolute_filename,
              output_file,
              [0, 0],
              test_output_reader,
              test_output_writer,
              [0, 0]],
           t = [0, line_number, basename, location, test_block];
          test_is_running[1] = [0, t];
          function _y_(param){
           read_test_output_unsanitized(test_block);
           return caml_call1(f, 0);
          }
          var
           test_exn = Configured$0[6].call(null, _y_),
           trailing_raw = read_test_output_sanitized_and(0),
           trailing_output =
             caml_string_notequal
               (caml_call2(Base_String[109], 0, trailing_raw), cst$4)
              ? [0, trailing_raw]
              : 0;
          if(test_exn){
           var test_exn$0 = test_exn[1];
           if(trailing_output)
            var
             trailing_output$0 = trailing_output[1],
             test_output =
               caml_call2
                (Base_String[68],
                 _m_,
                 [0,
                  test_exn$0,
                  [0,
                   cst_Trailing_output,
                   [0, cst$1, [0, trailing_output$0, 0]]]]);
           else
            var test_output = test_exn$0;
           var test_to_run$0 = exn_test_id, test_output$0 = test_output;
          }
          else
           var
            test_output$1 =
              caml_call2(Base_Option[30], trailing_output, cst$2),
            test_to_run$0 = test_to_run,
            test_output$0 = test_output$1;
          run_test_inner(test_to_run$0, test_output$0, test_block);
          function _z_(param){
           var test_node = param[2];
           return caml_call1(Ppx_expect_runtime_Test_node[3], test_node);
          }
          caml_call2(Base_List[19], expectations$1, _z_);
          clean_up_block(test_block);
          test_is_running[1] = 0;
          return 1;
         }
         var
          _q_ = end_pos - start_bol | 0,
          _r_ = start_pos - start_bol | 0,
          _s_ =
            [246,
             function(_t_){
              return caml_call2(Base_Option[30], description, cst$3);
             }];
         return caml_call8
                 (Ppx_inline_test_lib[8],
                  inline_test_config,
                  _s_,
                  tags,
                  basename,
                  line_number,
                  _r_,
                  _q_,
                  _p_);
        }
        return [0, read_test_output_no_backtrace_, run_test, run_suite];
       },
       For_external,
       at_exit];
   runtime.caml_register_global
    (48, Ppx_expect_runtime_Test_block, "Ppx_expect_runtime__Test_block");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppx_expect_runtime
//# unitInfo: Requires: CamlinternalLazy, Ppx_expect_runtime__Current_file, Ppx_expect_runtime__Test_block, Ppx_expect_runtime__Test_node, Ppx_expect_runtime__Write_corrected_file, Ppx_inline_test_lib, Stdlib, Stdlib__Sys
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Ppx_expect_runtime_Write_corre =
      global_data.Ppx_expect_runtime__Write_corrected_file,
    Ppx_expect_runtime_Current_fil =
      global_data.Ppx_expect_runtime__Current_file,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Ppx_expect_runtime_Test_node = global_data.Ppx_expect_runtime__Test_node,
    Ppx_expect_runtime_Test_block = global_data.Ppx_expect_runtime__Test_block,
    Stdlib = global_data.Stdlib;
   function _a_(param){
    var
     _b_ = Ppx_expect_runtime_Current_fil[4],
     _c_ = runtime.caml_obj_tag(_b_);
    a:
    if(250 === _c_)
     var _d_ = _b_[1];
    else{
     if(246 !== _c_ && 244 !== _c_){var _d_ = _b_; break a;}
     var _d_ = caml_call1(CamlinternalLazy[2], _b_);
    }
    runtime.caml_sys_chdir(_d_);
    function _e_(filename, test_nodes, postprocess){
     var
      _g_ = caml_call1(Ppx_inline_test_lib[14], 0),
      _h_ = caml_call1(Ppx_inline_test_lib[13], 0),
      _i_ = caml_call1(Ppx_inline_test_lib[12], 0),
      _j_ = caml_call1(Ppx_inline_test_lib[11], 0);
     return caml_call7
             (Ppx_expect_runtime_Write_corre[2],
              _j_,
              _i_,
              _h_,
              _g_,
              filename,
              postprocess,
              test_nodes);
    }
    var _f_ = caml_call1(Ppx_expect_runtime_Test_node[5][3], _e_);
    return caml_call1(Ppx_inline_test_lib[5][2], _f_);
   }
   caml_call1(Ppx_inline_test_lib[16], _a_);
   caml_call1(Stdlib[100], Ppx_expect_runtime_Test_block[3]);
   var
    Current_file =
      [0,
       Ppx_expect_runtime_Current_fil[1],
       Ppx_expect_runtime_Current_fil[2]],
    Test_node = [0],
    Ppx_expect_runtime = [0, Current_file, Test_node];
   runtime.caml_register_global(7, Ppx_expect_runtime, "Ppx_expect_runtime");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
