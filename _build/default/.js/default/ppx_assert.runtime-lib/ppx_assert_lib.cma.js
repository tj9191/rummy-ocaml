// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Ppx_assert_lib
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Ppx_assert_lib = [0];
   runtime.caml_register_global(0, Ppx_assert_lib, "Ppx_assert_lib");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppx_assert_lib__Runtime
//# unitInfo: Requires: Base, Base__Source_code_position, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = ": ",
    Base = global_data.Base,
    Base_Source_code_position = global_data.Base__Source_code_position,
    Assert_failure = global_data.Assert_failure,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    E = [248, "Ppx_assert_lib.Runtime.E", runtime.caml_fresh_oo_id(0)],
    _h_ = [0, "got"],
    _i_ = [0, "expected"],
    cst_got_unexpected_result = "got unexpected result",
    _g_ = [0, "vs"],
    cst_comparison_failed = "comparison failed",
    _f_ = [0, "Value"],
    cst_predicate_failed = "predicate failed",
    _d_ = [0, "Stack"],
    _e_ = [0, "Loc"],
    _b_ = [0, "runtime-lib/runtime.ml.E"],
    _c_ = [0, "_none_", 0, -1];
   function _a_(param){
    if(param[1] !== E)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _c_], 1);
    var
     arg1_002 = param[3],
     arg0_001 = param[2],
     res0_003 = caml_call1(Base[202], arg0_001),
     res1_004 = caml_call1(Base[85][5], arg1_002);
    return [1, [0, _b_, [0, res0_003, [0, res1_004, 0]]]];
   }
   caml_call4(Sexplib0_Sexp_conv[72][1], 0, 0, E, _a_);
   function exn_sexp_style(message, pos, x_005, tag, body){
    if(message)
     var
      s = message[1],
      _k_ = caml_call2(Base[241], cst, tag),
      message$0 = caml_call2(Base[241], s, _k_);
    else
     var message$0 = tag;
    var
     _l_ =
       x_005
        ? [0,
          [1,
           [0,
            _d_,
            [0, caml_call2(Base[165], Base_Source_code_position[3], x_005), 0]]],
          0]
        : 0,
     _m_ = caml_call2(Base[222], [0, [1, [0, _e_, [0, [0, pos], 0]]], 0], _l_),
     sexp = [1, caml_call2(Base[222], body, _m_)];
    return [0, E, message$0, sexp];
   }
   function test_pred(pos, sexpifier, here, message, predicate, t){
    var _j_ = 1 - caml_call1(predicate, t);
    if(_j_)
     throw caml_maybe_attach_backtrace
            (exn_sexp_style
              (message,
               pos,
               here,
               cst_predicate_failed,
               [0, [1, [0, _f_, [0, caml_call1(sexpifier, t), 0]]], 0]),
             1);
    return _j_;
   }
   var r_diff = [0, 0];
   function set_diff_function(f){r_diff[1] = f; return 0;}
   function test_result_or_eq(sexpifier, comparator, equal, expect$0, got$0){
    if(equal)
     var f = equal[1], pass = caml_call2(f, got$0, expect$0);
    else
     var pass = 0 === caml_call2(comparator, got$0, expect$0) ? 1 : 0;
    if(pass) return 892014833;
    var
     got = caml_call1(sexpifier, got$0),
     expect = caml_call1(sexpifier, expect$0),
     match = r_diff[1];
    if(match){
     var
      diff = match[1],
      from = caml_call2(Base[85][14], 0, expect),
      to = caml_call2(Base[85][14], 0, got);
     caml_call2(diff, from, to);
    }
    return [0, 781116926, [0, expect, got]];
   }
   function test_eq(pos, sexpifier, comparator, here, message, equal, t1, t2){
    var match = test_result_or_eq(sexpifier, comparator, equal, t1, t2);
    if(typeof match === "number") return 0;
    var match$0 = match[2], t2$0 = match$0[2], t1$0 = match$0[1];
    throw caml_maybe_attach_backtrace
           (exn_sexp_style
             (message,
              pos,
              here,
              cst_comparison_failed,
              [0, t1$0, [0, _g_, [0, t2$0, 0]]]),
            1);
   }
   function test_result
   (pos, sexpifier, comparator, here, message, equal, expect, got){
    var match = test_result_or_eq(sexpifier, comparator, equal, expect, got);
    if(typeof match === "number") return 0;
    var match$0 = match[2], got$0 = match$0[2], expect$0 = match$0[1];
    throw caml_maybe_attach_backtrace
           (exn_sexp_style
             (message,
              pos,
              here,
              cst_got_unexpected_result,
              [0,
               [1, [0, _i_, [0, expect$0, 0]]],
               [0, [1, [0, _h_, [0, got$0, 0]]], 0]]),
            1);
   }
   var
    Ppx_assert_lib_Runtime =
      [0, test_pred, test_eq, test_result, set_diff_function];
   runtime.caml_register_global
    (17, Ppx_assert_lib_Runtime, "Ppx_assert_lib__Runtime");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLjAsImZpbGUiOiJwcHhfYXNzZXJ0X2xpYi5jbWEuanMiLCJzb3VyY2VSb290IjoiIiwibmFtZXMiOlsiZXhuX3NleHBfc3R5bGUiLCJtZXNzYWdlIiwicG9zIiwieF8wMDUiLCJ0YWciLCJib2R5IiwicyIsIm1lc3NhZ2UkMCIsInNleHAiLCJ0ZXN0X3ByZWQiLCJzZXhwaWZpZXIiLCJoZXJlIiwicHJlZGljYXRlIiwidCIsInJfZGlmZiIsInNldF9kaWZmX2Z1bmN0aW9uIiwiZiIsInRlc3RfcmVzdWx0X29yX2VxIiwiY29tcGFyYXRvciIsImVxdWFsIiwiZXhwZWN0JDAiLCJnb3QkMCIsInBhc3MiLCJnb3QiLCJleHBlY3QiLCJkaWZmIiwiZnJvbSIsInRvIiwidGVzdF9lcSIsInQxIiwidDIiLCJ0MiQwIiwidDEkMCIsInRlc3RfcmVzdWx0Il0sInNvdXJjZXMiOlsiL1VzZXJzL3R5bGFubW9yYW4vLm9wYW0vNS4xLjEvbGliL3BweF9hc3NlcnQvcnVudGltZS1saWIvcnVudGltZS5tbCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztFOzs7Ozs7Ozs7OztHOzs7OztHOzs7OztHOzs7OztHQXFCQTs7Ozs7OztJQUFBOzs7Ozs7Ozs7Ozs7O0k7Ozs7Ozs7Ozs7WUFFSUEsZUFBZ0JDLFNBQVNDLEtBQUtDLE9BQU1DLEtBQUlDO0lBQzFDLEdBRGtCSjtLQUlBO01BQVRLLElBSlNMO01BSUEsTUFBQSwyQkFKb0JHO01BQ2xDRyxZQUdVLHNCQUFMRDs7U0FITEMsWUFEa0NIO0lBTXRDO0tBQUE7T0FOZ0NEOzs7OztvRUFBQUE7OztLQVN6QixNQUFBLCtDQVRvQkQ7S0FNdkJNLFdBRUEsc0JBUnNDSDtJQW9CMUMsY0FuQklFLFdBS0FDO0dBY2E7WUFZZkMsVUFBV1AsS0FBS1EsV0FBV0MsTUFBTVYsU0FBUVcsV0FBVUM7SUFDOUMsY0FBQSxXQURvQ0QsV0FBVUM7O0tBQ3JCLE1BQUE7YUFqQzlCYjtlQWdDaUNDO2VBQXRCQztlQUFnQlM7O29DQUhNLFdBR2pCRCxXQUFtQ0c7O0lBQzlDO0dBQXlFO0dBR25CLElBQTNEQztZQUNBQyxrQkFBa0JDLEdBRGxCRixZQUNrQkUsWUFBZTtZQWNqQ0Msa0JBQW1CUCxXQUFXUSxZQUFZQyxPQUFPQyxVQUFRQztJQUMzRCxHQUQ0Q0Y7U0FJbkNILElBSm1DRyxVQUN4Q0csT0FHVSxXQUFMTixHQUprREssT0FBUkQ7O1NBQy9DRSxhQUVRLFdBSG9CSixZQUEyQkcsT0FBUkQ7SUFNbkQsR0FMSUUsTUFLUztJQWpCSDtLQUFOQyxNQUFNLFdBV1diLFdBQXNDVztLQVZ2REcsU0FBUyxXQVVRZCxXQUE4QlU7S0FUbkQsUUFORU47O0tBU2E7TUFEUFc7TUFDREMsT0FBUSw0QkFKWEY7TUFLR0csS0FBTSw0QkFOVEo7S0FPRCxXQUhLRSxNQUNEQyxNQUNBQzs7SUFFUCwwQkFQSUgsUUFEQUQ7R0FpQm9FO1lBT3RFSyxRQUFTMUIsS0FBS1EsV0FBV1EsWUFBWVAsTUFBTVYsU0FBU2tCLE9BQU1VLElBQUdDO0lBQ3pELFlBZEpiLGtCQWFjUCxXQUFXUSxZQUEyQkMsT0FBTVUsSUFBR0M7a0NBRXBEOzRCQU5tQ0MsbUJBQUpDO0lBT2hCLE1BQUE7WUFuRXhCaEM7Y0FnRTJDQztjQUFsQ0M7Y0FBNEJTOztrQkFKR3FCLG1CQUFJRDs7R0FPcUI7WUFZakRFO0lBQ2pCL0IsS0FDQVEsV0FDQVEsWUFDQVAsTUFDQVYsU0FDQWtCLE9BQ0FLLFFBQ0FEO0lBRUssWUF0Q0pOLGtCQThCRFAsV0FDQVEsWUFHQUMsT0FDQUssUUFDQUQ7a0NBR1U7NEJBcEIyQ0Ysb0JBQVJEO0lBcUJmLE1BQUE7WUEzRjdCcEI7Y0FvRkRDO2NBSkFDO2NBR0FTOzs7Z0NBYjZDUztvQ0FBUUM7O0dBcUIyQjs7O1VBM0QvRVosV0FnQ0FtQixTQWVnQkssYUExQ2hCbEI7Ozs7RSIsInNvdXJjZXNDb250ZW50IjpbIm9wZW4gQmFzZVxuXG50eXBlICdhIHRlc3RfcHJlZCA9XG4gID9oZXJlOkxleGluZy5wb3NpdGlvbiBsaXN0IC0+ID9tZXNzYWdlOnN0cmluZyAtPiAoJ2EgLT4gYm9vbCkgLT4gJ2EgLT4gdW5pdFxuXG50eXBlICdhIHRlc3RfZXEgPVxuICA/aGVyZTpMZXhpbmcucG9zaXRpb24gbGlzdFxuICAtPiA/bWVzc2FnZTpzdHJpbmdcbiAgLT4gP2VxdWFsOignYSAtPiAnYSAtPiBib29sKVxuICAtPiAnYVxuICAtPiAnYVxuICAtPiB1bml0XG5cbnR5cGUgJ2EgdGVzdF9yZXN1bHQgPVxuICA/aGVyZTpMZXhpbmcucG9zaXRpb24gbGlzdFxuICAtPiA/bWVzc2FnZTpzdHJpbmdcbiAgLT4gP2VxdWFsOignYSAtPiAnYSAtPiBib29sKVxuICAtPiBleHBlY3Q6J2FcbiAgLT4gJ2FcbiAgLT4gdW5pdFxuXG5leGNlcHRpb24gRSBvZiBzdHJpbmcgKiBTZXhwLnQgW0BAZGVyaXZpbmcgc2V4cF1cblxubGV0IGV4bl9zZXhwX3N0eWxlIH5tZXNzYWdlIH5wb3MgfmhlcmUgfnRhZyBib2R5ID1cbiAgbGV0IG1lc3NhZ2UgPVxuICAgIG1hdGNoIG1lc3NhZ2Ugd2l0aFxuICAgIHwgTm9uZSAtPiB0YWdcbiAgICB8IFNvbWUgcyAtPiBzIF4gXCI6IFwiIF4gdGFnXG4gIGluXG4gIGxldCBzZXhwID1cbiAgICBTZXhwLkxpc3RcbiAgICAgIChib2R5XG4gICAgICAgQCBbIFNleHAuTGlzdCBbIFNleHAuQXRvbSBcIkxvY1wiOyBTZXhwLkF0b20gcG9zIF0gXVxuICAgICAgIEBcbiAgICAgICBtYXRjaCBoZXJlIHdpdGhcbiAgICAgICB8IFtdIC0+IFtdXG4gICAgICAgfCBfIC0+XG4gICAgICAgICBbIFNleHAuTGlzdCBbIFNleHAuQXRvbSBcIlN0YWNrXCI7IFslc2V4cF9vZjogU291cmNlX2NvZGVfcG9zaXRpb24udCBsaXN0XSBoZXJlIF0gXVxuICAgICAgKVxuICBpblxuICAoKiBIZXJlIGFuZCBpbiBvdGhlciBwbGFjZXMgd2UgcmV0dXJuIGV4Y2VwdGlvbnMsIHJhdGhlciB0aGFuIGRpcmVjdGx5IHJhaXNpbmcsIGFuZFxuICAgICBpbnN0ZWFkIHJhaXNlIGF0IHRoZSBsYXRlc3QgbW9tZW50IHBvc3NpYmxlLCBzbyBiYWNrdHJhY2UgZG9uJ3QgaW5jbHVkZSBub2lzZSBmcm9tXG4gICAgIHRoZXNlIGZ1bmN0aW9ucyB0aGF0IGNvbnN0cnVjdCBleGNlcHRpb25zLiAqKVxuICBFIChtZXNzYWdlLCBzZXhwKVxuOztcblxubGV0W0Bjb2xkXSBleG5fdGVzdF9wcmVkIH5tZXNzYWdlIH5wb3MgfmhlcmUgfnNleHBpZmllciB0ID1cbiAgZXhuX3NleHBfc3R5bGVcbiAgICB+bWVzc2FnZVxuICAgIH5wb3NcbiAgICB+aGVyZVxuICAgIH50YWc6XCJwcmVkaWNhdGUgZmFpbGVkXCJcbiAgICBbIFNleHAuTGlzdCBbIFNleHAuQXRvbSBcIlZhbHVlXCI7IHNleHBpZmllciB0IF0gXVxuOztcblxubGV0IHRlc3RfcHJlZCB+cG9zIH5zZXhwaWZpZXIgfmhlcmUgP21lc3NhZ2UgcHJlZGljYXRlIHQgPVxuICBpZiBub3QgKHByZWRpY2F0ZSB0KSB0aGVuIHJhaXNlIChleG5fdGVzdF9wcmVkIH5tZXNzYWdlIH5wb3MgfmhlcmUgfnNleHBpZmllciB0KVxuOztcblxubGV0IHJfZGlmZiA6IChmcm9tXzpzdHJpbmcgLT4gdG9fOnN0cmluZyAtPiB1bml0KSBvcHRpb24gcmVmID0gcmVmIE5vbmVcbmxldCBzZXRfZGlmZl9mdW5jdGlvbiBmID0gcl9kaWZmIDo9IGZcblxubGV0W0Bjb2xkXSB0ZXN0X3Jlc3VsdF9vcl9lcV9mYWlsZWQgfnNleHBpZmllciB+ZXhwZWN0IH5nb3QgPVxuICBsZXQgZ290ID0gc2V4cGlmaWVyIGdvdCBpblxuICBsZXQgZXhwZWN0ID0gc2V4cGlmaWVyIGV4cGVjdCBpblxuICAobWF0Y2ggIXJfZGlmZiB3aXRoXG4gICB8IE5vbmUgLT4gKClcbiAgIHwgU29tZSBkaWZmIC0+XG4gICAgIGxldCBmcm9tXyA9IFNleHAudG9fc3RyaW5nX2h1bSBleHBlY3QgaW5cbiAgICAgbGV0IHRvXyA9IFNleHAudG9fc3RyaW5nX2h1bSBnb3QgaW5cbiAgICAgZGlmZiB+ZnJvbV8gfnRvXyk7XG4gIGBGYWlsIChleHBlY3QsIGdvdClcbjs7XG5cbmxldCB0ZXN0X3Jlc3VsdF9vcl9lcSB+c2V4cGlmaWVyIH5jb21wYXJhdG9yIH5lcXVhbCB+ZXhwZWN0IH5nb3QgPVxuICBsZXQgcGFzcyA9XG4gICAgbWF0Y2ggZXF1YWwgd2l0aFxuICAgIHwgTm9uZSAtPiBjb21wYXJhdG9yIGdvdCBleHBlY3QgPSAwXG4gICAgfCBTb21lIGYgLT4gZiBnb3QgZXhwZWN0XG4gIGluXG4gIGlmIHBhc3MgdGhlbiBgUGFzcyBlbHNlIHRlc3RfcmVzdWx0X29yX2VxX2ZhaWxlZCB+c2V4cGlmaWVyIH5leHBlY3QgfmdvdFxuOztcblxubGV0W0Bjb2xkXSBleG5fdGVzdF9lcSB+bWVzc2FnZSB+cG9zIH5oZXJlIH50MSB+dDIgPVxuICBleG5fc2V4cF9zdHlsZSB+bWVzc2FnZSB+cG9zIH5oZXJlIH50YWc6XCJjb21wYXJpc29uIGZhaWxlZFwiIFsgdDE7IFNleHAuQXRvbSBcInZzXCI7IHQyIF1cbjs7XG5cbmxldCB0ZXN0X2VxIH5wb3MgfnNleHBpZmllciB+Y29tcGFyYXRvciB+aGVyZSA/bWVzc2FnZSA/ZXF1YWwgdDEgdDIgPVxuICBtYXRjaCB0ZXN0X3Jlc3VsdF9vcl9lcSB+c2V4cGlmaWVyIH5jb21wYXJhdG9yIH5lcXVhbCB+ZXhwZWN0OnQxIH5nb3Q6dDIgd2l0aFxuICB8IGBQYXNzIC0+ICgpXG4gIHwgYEZhaWwgKHQxLCB0MikgLT4gcmFpc2UgKGV4bl90ZXN0X2VxIH5tZXNzYWdlIH5wb3MgfmhlcmUgfnQxIH50Milcbjs7XG5cbmxldFtAY29sZF0gZXhuX3Rlc3RfcmVzdWx0IH5tZXNzYWdlIH5wb3MgfmhlcmUgfmV4cGVjdCB+Z290ID1cbiAgZXhuX3NleHBfc3R5bGVcbiAgICB+bWVzc2FnZVxuICAgIH5wb3NcbiAgICB+aGVyZVxuICAgIH50YWc6XCJnb3QgdW5leHBlY3RlZCByZXN1bHRcIlxuICAgIFsgU2V4cC5MaXN0IFsgU2V4cC5BdG9tIFwiZXhwZWN0ZWRcIjsgZXhwZWN0IF07IFNleHAuTGlzdCBbIFNleHAuQXRvbSBcImdvdFwiOyBnb3QgXSBdXG47O1xuXG5sZXRbQHdhcm5pbmcgXCItMTZcIl0gdGVzdF9yZXN1bHRcbiAgfnBvc1xuICB+c2V4cGlmaWVyXG4gIH5jb21wYXJhdG9yXG4gIH5oZXJlXG4gID9tZXNzYWdlXG4gID9lcXVhbFxuICB+ZXhwZWN0XG4gIH5nb3RcbiAgPVxuICBtYXRjaCB0ZXN0X3Jlc3VsdF9vcl9lcSB+c2V4cGlmaWVyIH5jb21wYXJhdG9yIH5lcXVhbCB+ZXhwZWN0IH5nb3Qgd2l0aFxuICB8IGBQYXNzIC0+ICgpXG4gIHwgYEZhaWwgKGV4cGVjdCwgZ290KSAtPiByYWlzZSAoZXhuX3Rlc3RfcmVzdWx0IH5tZXNzYWdlIH5wb3MgfmhlcmUgfmV4cGVjdCB+Z290KVxuOztcbiJdfQ==
