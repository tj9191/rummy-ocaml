// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Ppx_log_types__
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Ppx_log_types = [0],
    Ppx_log_types$0 = [0, Ppx_log_types];
   runtime.caml_register_global(0, Ppx_log_types$0, "Ppx_log_types__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppx_log_types__Import
//# unitInfo: Requires: Ppx_expect_runtime, Ppx_inline_test_lib, Stdio
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, cst_ppx_log_types = "ppx_log_types";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Stdio = global_data.Stdio;
   caml_call1(Ppx_expect_runtime[1][1], "types/import.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_ppx_log_types, "import.ml");
   var
    stdin = Stdio[1],
    stdout = Stdio[2],
    stderr = Stdio[3],
    printf = Stdio[4],
    print_s = Stdio[5],
    eprint_s = Stdio[6],
    eprintf = Stdio[7],
    print_string = Stdio[8],
    print_endline = Stdio[9],
    prerr_endline = Stdio[10];
   caml_call1(Ppx_inline_test_lib[7], cst_ppx_log_types);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   var
    Ppx_log_types_Import =
      [0,
       stdin,
       stdout,
       stderr,
       printf,
       print_s,
       eprint_s,
       eprintf,
       print_string,
       print_endline,
       prerr_endline];
   runtime.caml_register_global
    (7, Ppx_log_types_Import, "Ppx_log_types__Import");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppx_log_types__Jsonaf
//# unitInfo: Requires: Base, Ppx_expect_runtime, Ppx_inline_test_lib
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_ppx_log_types$0 = "ppx_log_types";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base = global_data.Base,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_expect_runtime[1][1], "types/jsonaf.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_ppx_log_types$0, "jsonaf.ml");
   var
    _b_ = [0, "True"],
    _c_ = [0, "False"],
    _a_ = [0, "Null"],
    _d_ = [0, "Array"],
    _e_ = [0, "Number"],
    _f_ = [0, "Object"],
    _g_ = [0, "String"],
    cst_ppx_log_types = cst_ppx_log_types$0;
   function sexp_of_t(param){
    if(typeof param === "number")
     return 870828711 === param ? _a_ : 937218926 <= param ? _b_ : _c_;
    var _h_ = param[1];
    if(-703661335 <= _h_){
     if(951901561 <= _h_){
      var v_008 = param[2];
      return [1, [0, _d_, [0, caml_call2(Base[165], sexp_of_t, v_008), 0]]];
     }
     var v_002 = param[2];
     return [1, [0, _e_, [0, caml_call1(Base[202], v_002), 0]]];
    }
    if(-908856609 <= _h_){
     var
      v_003 = param[2],
      _i_ = 0,
      _j_ =
        function(param){
         var
          arg1_005 = param[2],
          arg0_004 = param[1],
          res0_006 = caml_call1(Base[202], arg0_004),
          res1_007 = sexp_of_t(arg1_005);
         return [1, [0, res0_006, [0, res1_007, 0]]];
        };
     return [1, [0, _f_, [0, caml_call2(Base[165], _j_, v_003), _i_]]];
    }
    var v_001 = param[2];
    return [1, [0, _g_, [0, caml_call1(Base[202], v_001), 0]]];
   }
   caml_call1(Ppx_inline_test_lib[7], cst_ppx_log_types);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   var Ppx_log_types_Jsonaf = [0, sexp_of_t];
   runtime.caml_register_global
    (14, Ppx_log_types_Jsonaf, "Ppx_log_types__Jsonaf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppx_log_types__Tag_data
//# unitInfo: Requires: Base, Base__Bool, Base__Char, Base__Float, Base__Int, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_log_types__Jsonaf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_ppx_log_types$0 = "ppx_log_types";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_Int = global_data.Base__Int,
    Base_Char = global_data.Base__Char,
    Base_Float = global_data.Base__Float,
    Base_Bool = global_data.Base__Bool,
    Base = global_data.Base,
    Ppx_log_types_Jsonaf = global_data.Ppx_log_types__Jsonaf,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_expect_runtime[1][1], "types/tag_data.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_ppx_log_types$0, "tag_data.ml");
   var
    _a_ = [0, "Int"],
    _b_ = [0, "Char"],
    _c_ = [0, "Float"],
    _d_ = [0, "String"],
    _e_ = [0, "Bool"],
    _f_ = [0, "Sexp"],
    _g_ = [0, "Json"],
    cst_ppx_log_types = cst_ppx_log_types$0;
   function sexp_of_t(param){
    switch(param[0]){
      case 0:
       var arg0_001 = param[1], res0_002 = caml_call1(Base[136], arg0_001);
       return [1, [0, _a_, [0, res0_002, 0]]];
      case 1:
       var arg0_003 = param[1], res0_004 = caml_call1(Base[115], arg0_003);
       return [1, [0, _b_, [0, res0_004, 0]]];
      case 2:
       var arg0_005 = param[1], res0_006 = caml_call1(Base[126], arg0_005);
       return [1, [0, _c_, [0, res0_006, 0]]];
      case 3:
       var arg0_007 = param[1], res0_008 = caml_call1(Base[202], arg0_007);
       return [1, [0, _d_, [0, res0_008, 0]]];
      case 4:
       var arg0_009 = param[1], res0_010 = caml_call1(Base[105], arg0_009);
       return [1, [0, _e_, [0, res0_010, 0]]];
      case 5:
       var arg0_011 = param[1], res0_012 = caml_call1(Base[85][5], arg0_011);
       return [1, [0, _f_, [0, res0_012, 0]]];
      default:
       var
        arg0_013 = param[1],
        res0_014 = caml_call1(Ppx_log_types_Jsonaf[1], arg0_013);
       return [1, [0, _g_, [0, res0_014, 0]]];
    }
   }
   var With_type_label = [0, sexp_of_t];
   function sexp_of_t$0(param){
    switch(param[0]){
      case 0:
       var x = param[1]; return caml_call1(Base[136], x);
      case 1:
       var x$0 = param[1]; return caml_call1(Base[115], x$0);
      case 2:
       var x$1 = param[1]; return caml_call1(Base[126], x$1);
      case 3:
       var x$2 = param[1]; return caml_call1(Base[202], x$2);
      case 4:
       var x$3 = param[1]; return caml_call1(Base[105], x$3);
      case 5:
       var x$4 = param[1]; return x$4;
      default:
       var x$5 = param[1]; return caml_call1(Ppx_log_types_Jsonaf[1], x$5);
    }
   }
   function to_string(param){
    switch(param[0]){
      case 0:
       var x = param[1]; return caml_call1(Base_Int[12], x);
      case 1:
       var x$0 = param[1]; return caml_call1(Base_Char[9], x$0);
      case 2:
       var x$1 = param[1]; return caml_call1(Base_Float[101], x$1);
      case 3:
       var x$2 = param[1]; return x$2;
      case 4:
       var x$3 = param[1]; return caml_call1(Base_Bool[9], x$3);
      case 5:
       var x$4 = param[1]; return caml_call1(Base[85][16], x$4);
      default:
       var x$5 = param[1], _h_ = caml_call1(Ppx_log_types_Jsonaf[1], x$5);
       return caml_call1(Base[85][16], _h_);
    }
   }
   var Without_type_label = [0, sexp_of_t$0, to_string];
   caml_call1(Ppx_inline_test_lib[7], cst_ppx_log_types);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   var Ppx_log_types_Tag_data = [0, Without_type_label, With_type_label];
   runtime.caml_register_global
    (34, Ppx_log_types_Tag_data, "Ppx_log_types__Tag_data");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppx_log_types__Level
//# unitInfo: Requires: Ppx_expect_runtime, Ppx_inline_test_lib
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_ppx_log_types$0 = "ppx_log_types";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_expect_runtime[1][1], "types/level.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_ppx_log_types$0, "level.ml");
   var
    _b_ = [0, "Info"],
    _c_ = [0, "Debug"],
    _a_ = [0, "Error"],
    cst_ppx_log_types = cst_ppx_log_types$0;
   function sexp_of_t(param){
    return 106380200 === param ? _a_ : 815031438 <= param ? _b_ : _c_;
   }
   caml_call1(Ppx_inline_test_lib[7], cst_ppx_log_types);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   var Ppx_log_types_Level = [0, sexp_of_t];
   runtime.caml_register_global
    (9, Ppx_log_types_Level, "Ppx_log_types__Level");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppx_log_types__Log_tag
//# unitInfo: Requires: Base, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_log_types__Tag_data
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_ppx_log_types$0 = "ppx_log_types";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_log_types_Tag_data = global_data.Ppx_log_types__Tag_data,
    Base = global_data.Base,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_expect_runtime[1][1], "types/log_tag.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_ppx_log_types$0, "log_tag.ml");
   var
    _a_ = [0, "data"],
    _b_ = [0, "name"],
    cst_ppx_log_types = cst_ppx_log_types$0;
   function of_pair(param){
    var data = param[2], name = param[1];
    return [0, name, data];
   }
   function string_pair(param){
    var data = param[2], name = param[1];
    return [0, name, [3, data]];
   }
   function sexp_of_t(param){
    var
     data_004 = param[2],
     name_002 = param[1],
     arg_005 = caml_call1(Ppx_log_types_Tag_data[2][1], data_004),
     bnds_001 = [0, [1, [0, _a_, [0, arg_005, 0]]], 0],
     arg_003 = caml_call1(Base[202], name_002),
     bnds_001$0 = [0, [1, [0, _b_, [0, arg_003, 0]]], bnds_001];
    return [1, bnds_001$0];
   }
   var Verbose = [0, sexp_of_t];
   function sexp_of_t$0(param){
    var name = param[1];
    if(runtime.caml_string_notequal(name, "")){
     var
      data = param[2],
      _c_ = [0, caml_call1(Ppx_log_types_Tag_data[1][1], data), 0];
     return [1, [0, caml_call1(Base[202], name), _c_]];
    }
    var data$0 = param[2];
    return caml_call1(Ppx_log_types_Tag_data[1][1], data$0);
   }
   var For_message_sexp = [0, sexp_of_t$0];
   caml_call1(Ppx_inline_test_lib[7], cst_ppx_log_types);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   var
    Ppx_log_types_Log_tag =
      [0, of_pair, string_pair, Verbose, For_message_sexp];
   runtime.caml_register_global
    (11, Ppx_log_types_Log_tag, "Ppx_log_types__Log_tag");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppx_log_types__Message_sexp
//# unitInfo: Requires: Base, Base__List, Base__Option, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_log_types__Log_tag
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_ppx_log_types$0 = "ppx_log_types";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    bnd_013 = [1, [0, [0, "legacy_render_with_additional_parentheses"], 0]],
    Ppx_log_types_Log_tag = global_data.Ppx_log_types__Log_tag,
    Base = global_data.Base,
    Base_Option = global_data.Base__Option,
    Base_List = global_data.Base__List,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_expect_runtime[1][1], "types/message_sexp.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_ppx_log_types$0, "message_sexp.ml");
   var
    _d_ = [0, "tags"],
    _e_ = [0, "label"],
    _c_ = [1, 0],
    _a_ = [0, "String"],
    _b_ = [0, "String_literal"],
    cst_ppx_log_types = cst_ppx_log_types$0;
   function tags(r){return r[2];}
   function label(r){return r[1];}
   function create(opt, label, tags){
    if(opt)
     var sth = opt[1], legacy_render_with_additional_ = sth;
    else
     var legacy_render_with_additional_ = 0;
    return [0, label, tags, legacy_render_with_additional_];
   }
   function render(param){
    var
     legacy_render_with_additional_ = param[3],
     tags = param[2],
     label = param[1];
    function _f_(param){var str = param[1]; return [0, str];}
    var
     label$0 = caml_call2(Base_Option[24], label, _f_),
     multiple_tags =
       caml_call2(Base_List[53], tags, Ppx_log_types_Log_tag[4][1]);
    if(label$0){
     var message = label$0[1];
     return multiple_tags
             ? legacy_render_with_additional_
               ? [1, [0, message, [0, [1, multiple_tags], 0]]]
               : [1, [0, message, multiple_tags]]
             : message;
    }
    if(! multiple_tags) return _c_;
    if(multiple_tags[2]) return [1, multiple_tags];
    var tag = multiple_tags[1];
    return legacy_render_with_additional_ ? [1, [0, tag, 0]] : tag;
   }
   function sexp_of_t(param){
    var
     legacy_render_with_additional_ = param[3],
     tags_010 = param[2],
     label_006 = param[1],
     bnds_005 = 0,
     bnds_005$0 =
       legacy_render_with_additional_ ? [0, bnd_013, bnds_005] : bnds_005,
     arg_011 = caml_call2(Base[165], Ppx_log_types_Log_tag[3][1], tags_010),
     bnds_005$1 = [0, [1, [0, _d_, [0, arg_011, 0]]], bnds_005$0];
    if(label_006){
     var v_007 = label_006[1];
     if(0 === v_007[0])
      var
       arg0_001 = v_007[1],
       res0_002 = caml_call1(Base[202], arg0_001),
       arg_009 = [1, [0, _a_, [0, res0_002, 0]]];
     else
      var
       arg0_003 = v_007[1],
       res0_004 = caml_call1(Base[202], arg0_003),
       arg_009 = [1, [0, _b_, [0, res0_004, 0]]];
     var
      bnd_008 = [1, [0, _e_, [0, arg_009, 0]]],
      bnds_005$2 = [0, bnd_008, bnds_005$1];
    }
    else
     var bnds_005$2 = bnds_005$1;
    return [1, bnds_005$2];
   }
   var Unstable = [0, sexp_of_t];
   caml_call1(Ppx_inline_test_lib[7], cst_ppx_log_types);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   var
    Ppx_log_types_Message_sexp =
      [0, [0], create, label, tags, render, Unstable];
   runtime.caml_register_global
    (19, Ppx_log_types_Message_sexp, "Ppx_log_types__Message_sexp");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppx_log_types__Message_data
//# unitInfo: Requires: Base, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_log_types__Message_sexp
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_ppx_log_types$0 = "ppx_log_types";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base = global_data.Base,
    Ppx_log_types_Message_sexp = global_data.Ppx_log_types__Message_sexp,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_expect_runtime[1][1], "types/message_data.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_ppx_log_types$0, "message_data.ml");
   var
    _b_ = [0, "Sexp"],
    _c_ = [0, "String"],
    _a_ = [0, "Structured"],
    cst_ppx_log_types = cst_ppx_log_types$0;
   function sexp_of_t(param){
    var _d_ = param[1];
    if(348871921 === _d_){
     var v_003 = param[2];
     return [1,
             [0,
              _a_,
              [0, caml_call1(Ppx_log_types_Message_sexp[6][1], v_003), 0]]];
    }
    if(925483562 <= _d_){
     var v_001 = param[2];
     return [1, [0, _b_, [0, caml_call1(Base[85][5], v_001), 0]]];
    }
    var v_002 = param[2];
    return [1, [0, _c_, [0, caml_call1(Base[202], v_002), 0]]];
   }
   var Unstable = [0, sexp_of_t];
   caml_call1(Ppx_inline_test_lib[7], cst_ppx_log_types);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   var Ppx_log_types_Message_data = [0, Unstable];
   runtime.caml_register_global
    (11, Ppx_log_types_Message_data, "Ppx_log_types__Message_data");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppx_log_types__Message_source
//# unitInfo: Requires: Base, Base__String, Expect_test_config, Inline_test_config, Ppx_expect_runtime, Ppx_expect_runtime__Test_block, Ppx_expect_runtime__Test_node, Ppx_expect_runtime__Types, Ppx_inline_test_lib, Ppx_log_types__Import
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Lib_name$0 = "Lib_name",
    cst_Ppx_log_types_Message_sour$0 = "Ppx_log_types__Message_source",
    cst_ppx_log_types$0 = "ppx_log_types",
    cst_types_message_source_ml$0 = "types/message_source.ml";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call14
   (f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13){
    return (f.l >= 0 ? f.l : f.l = f.length) == 14
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13)
            : runtime.caml_call_gen
              (f,
               [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "__",
    Ppx_log_types_Import = global_data.Ppx_log_types__Import,
    Ppx_expect_runtime_Types = global_data.Ppx_expect_runtime__Types,
    Base_String = global_data.Base__String,
    Base = global_data.Base,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Expect_test_config = global_data.Expect_test_config,
    Ppx_expect_runtime_Test_block = global_data.Ppx_expect_runtime__Test_block,
    Ppx_expect_runtime_Test_node = global_data.Ppx_expect_runtime__Test_node,
    Inline_test_config = global_data.Inline_test_config;
   caml_call1(Ppx_expect_runtime[1][1], cst_types_message_source_ml$0);
   caml_call2
    (Ppx_inline_test_lib[6], cst_ppx_log_types$0, "message_source.ml");
   var
    cst_Ppx_log_types_Message_sour = cst_Ppx_log_types_Message_sour$0,
    cst_Lib_name = cst_Lib_name$0,
    cst_Lib_name2_module_name = "Lib_name2__module_name",
    cst_Lib_name3_module_name_more = "Lib_name3__module_name__more_stuff",
    _d_ = [0, "Manually_constructed"],
    _e_ = [0, "Code"],
    _a_ = [0, "library_name"],
    _b_ = [0, "pos_lnum"],
    _c_ = [0, "pos_fname"],
    _g_ = [0, [0, [0, "Ppx_log_types", 0], [0, 585, 598, 613]]],
    _h_ = [0, 585, 589, 614],
    _k_ = [0, [0, [0, cst_Lib_name$0, 0], [0, 668, 681, 691]]],
    _l_ = [0, 668, 672, 692],
    _o_ = [0, [0, [0, "Lib_name2", 0], [0, 760, 773, 784]]],
    _p_ = [0, 760, 764, 785],
    _s_ = [0, [0, [0, "Lib_name3", 0], [0, 865, 878, 889]]],
    _t_ = [0, 865, 869, 890],
    _w_ = [0, "libname_from_module_name example"],
    _z_ = [0, 471, 473, 890],
    _A_ = [0, 865, 890, 890],
    _B_ = [0, 471, 473, 890],
    cst_types_message_source_ml = cst_types_message_source_ml$0,
    cst_ppx_log_types = cst_ppx_log_types$0;
   function sexp_of_t(param){
    if(0 === param[0]){
     var arg0_008 = param[1], res0_009 = caml_call1(Base[202], arg0_008);
     return [1, [0, _d_, [0, res0_009, 0]]];
    }
    var
     arg0_010 = param[1],
     library_name_006 = arg0_010[3],
     pos_lnum_004 = arg0_010[2],
     pos_fname_002 = arg0_010[1],
     arg_007 = caml_call1(Base[202], library_name_006),
     bnds_001 = [0, [1, [0, _a_, [0, arg_007, 0]]], 0],
     arg_005 = caml_call1(Base[136], pos_lnum_004),
     bnds_001$0 = [0, [1, [0, _b_, [0, arg_005, 0]]], bnds_001],
     arg_003 = caml_call1(Base[202], pos_fname_002),
     bnds_001$1 = [0, [1, [0, _c_, [0, arg_003, 0]]], bnds_001$0],
     res0_011 = [1, bnds_001$1];
    return [1, [0, _e_, [0, res0_011, 0]]];
   }
   function libname(module_name){
    var match = caml_call3(Base_String[87], 0, module_name, cst);
    if(! match) return module_name;
    var idx = match[1];
    return caml_call3(Base_String[3], module_name, 0, idx);
   }
   if(typeof Ppx_inline_test_lib[3] !== "number"){
    var
     Ppx_expect_test_block =
       caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
     _f_ =
       function(param){
        var _C_ = libname(cst_Ppx_log_types_Message_sour);
        caml_call1(Ppx_log_types_Import[8], _C_);
        var _D_ = caml_call1(Ppx_expect_runtime_Types[4][1], 0);
        caml_call1(Ppx_expect_test_block[2], _D_);
        var _E_ = libname(cst_Lib_name);
        caml_call1(Ppx_log_types_Import[8], _E_);
        var _F_ = caml_call1(Ppx_expect_runtime_Types[4][1], 1);
        caml_call1(Ppx_expect_test_block[2], _F_);
        var _G_ = libname(cst_Lib_name2_module_name);
        caml_call1(Ppx_log_types_Import[8], _G_);
        var _H_ = caml_call1(Ppx_expect_runtime_Types[4][1], 2);
        caml_call1(Ppx_expect_test_block[2], _H_);
        var _I_ = libname(cst_Lib_name3_module_name_more);
        caml_call1(Ppx_log_types_Import[8], _I_);
        var _J_ = caml_call1(Ppx_expect_runtime_Types[4][1], 3);
        return caml_call1(Ppx_expect_test_block[2], _J_);
       },
     _i_ =
       caml_call3
        (Ppx_expect_runtime_Test_node[1][1],
         [0, Ppx_expect_runtime_Types[1][1]],
         _h_,
         _g_),
     _j_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 0), _i_], 0],
     _m_ =
       caml_call3
        (Ppx_expect_runtime_Test_node[1][1],
         [0, Ppx_expect_runtime_Types[1][1]],
         _l_,
         _k_),
     _n_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 1), _m_], _j_],
     _q_ =
       caml_call3
        (Ppx_expect_runtime_Test_node[1][1],
         [0, Ppx_expect_runtime_Types[1][1]],
         _p_,
         _o_),
     _r_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 2), _q_], _n_],
     _u_ =
       caml_call3
        (Ppx_expect_runtime_Test_node[1][1],
         [0, Ppx_expect_runtime_Types[1][1]],
         _t_,
         _s_),
     _v_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 3), _u_], _r_],
     _x_ = caml_call1(Ppx_expect_runtime_Types[4][1], 5),
     _y_ = caml_call1(Ppx_expect_runtime_Types[4][1], 4);
    caml_call14
     (Ppx_expect_test_block[3],
      cst_types_message_source_ml,
      25,
      _B_,
      _A_,
      _z_,
      [0, Ppx_expect_runtime_Types[1][1]],
      0,
      _y_,
      _x_,
      _w_,
      0,
      Inline_test_config,
      _v_,
      _f_);
   }
   function code(pos_fname, pos_lnum, module_name){
    return [1, [0, pos_fname, pos_lnum, libname(module_name)]];
   }
   caml_call1(Ppx_inline_test_lib[7], cst_ppx_log_types);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   var Ppx_log_types_Message_source = [0, [0], sexp_of_t, [0, code]];
   runtime.caml_register_global
    (37, Ppx_log_types_Message_source, cst_Ppx_log_types_Message_sour$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppx_log_types
//# unitInfo: Requires: Ppx_expect_runtime, Ppx_inline_test_lib
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, cst_ppx_log_types = "ppx_log_types";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_expect_runtime[1][1], "types/ppx_log_types.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_ppx_log_types, "ppx_log_types.ml");
   caml_call1(Ppx_inline_test_lib[7], cst_ppx_log_types);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   var Ppx_log_types = [0];
   runtime.caml_register_global(7, Ppx_log_types, "Ppx_log_types");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLjAsImZpbGUiOiJwcHhfbG9nX3R5cGVzLmNtYS5qcyIsInNvdXJjZVJvb3QiOiIiLCJuYW1lcyI6WyJzZXhwX29mX3QiLCJ2XzAwOCIsInZfMDAyIiwidl8wMDMiLCJhcmcxXzAwNSIsImFyZzBfMDA0IiwicmVzMF8wMDYiLCJyZXMxXzAwNyIsInZfMDAxIiwiYXJnMF8wMDEiLCJyZXMwXzAwMiIsImFyZzBfMDAzIiwicmVzMF8wMDQiLCJhcmcwXzAwNSIsImFyZzBfMDA3IiwicmVzMF8wMDgiLCJhcmcwXzAwOSIsInJlczBfMDEwIiwiYXJnMF8wMTEiLCJyZXMwXzAxMiIsImFyZzBfMDEzIiwicmVzMF8wMTQiLCJzZXhwX29mX3QkMCIsIngiLCJ4JDAiLCJ4JDEiLCJ4JDIiLCJ4JDMiLCJ4JDQiLCJ4JDUiLCJ0b19zdHJpbmciLCJvZl9wYWlyIiwiZGF0YSIsIm5hbWUiLCJzdHJpbmdfcGFpciIsImRhdGFfMDA0IiwibmFtZV8wMDIiLCJhcmdfMDA1IiwiYm5kc18wMDEiLCJhcmdfMDAzIiwiYm5kc18wMDEkMCIsImRhdGEkMCIsImJuZF8wMTMiLCJ0YWdzIiwiciIsImxhYmVsIiwiY3JlYXRlIiwib3B0Iiwic3RoIiwibGVnYWN5X3JlbmRlcl93aXRoX2FkZGl0aW9uYWxfIiwicmVuZGVyIiwic3RyIiwibGFiZWwkMCIsIm11bHRpcGxlX3RhZ3MiLCJtZXNzYWdlIiwidGFnIiwidGFnc18wMTAiLCJsYWJlbF8wMDYiLCJibmRzXzAwNSIsImJuZHNfMDA1JDAiLCJhcmdfMDExIiwiYm5kc18wMDUkMSIsInZfMDA3IiwiYXJnXzAwOSIsImJuZF8wMDgiLCJibmRzXzAwNSQyIiwiYXJnMF8wMDgiLCJyZXMwXzAwOSIsImFyZzBfMDEwIiwibGlicmFyeV9uYW1lXzAwNiIsInBvc19sbnVtXzAwNCIsInBvc19mbmFtZV8wMDIiLCJhcmdfMDA3IiwiYm5kc18wMDEkMSIsInJlczBfMDExIiwibGlibmFtZSIsIm1vZHVsZV9uYW1lIiwiaWR4IiwiY29kZSIsInBvc19mbmFtZSIsInBvc19sbnVtIl0sInNvdXJjZXMiOlsiL1VzZXJzL3R5bGFubW9yYW4vLm9wYW0vNS4xLjEvbGliL3BweF9sb2cvdHlwZXMvcHB4X2xvZ190eXBlc19fLm1sIiwiL1VzZXJzL3R5bGFubW9yYW4vLm9wYW0vNS4xLjEvbGliL3BweF9sb2cvdHlwZXMvanNvbmFmLm1sIiwiL1VzZXJzL3R5bGFubW9yYW4vLm9wYW0vNS4xLjEvbGliL3BweF9sb2cvdHlwZXMvdGFnX2RhdGEubWwiLCIvVXNlcnMvdHlsYW5tb3Jhbi8ub3BhbS81LjEuMS9saWIvcHB4X2xvZy90eXBlcy9sZXZlbC5tbCIsIi9Vc2Vycy90eWxhbm1vcmFuLy5vcGFtLzUuMS4xL2xpYi9wcHhfbG9nL3R5cGVzL2xvZ190YWcubWwiLCIvVXNlcnMvdHlsYW5tb3Jhbi8ub3BhbS81LjEuMS9saWIvcHB4X2xvZy90eXBlcy9tZXNzYWdlX3NleHAubWwiLCIvVXNlcnMvdHlsYW5tb3Jhbi8ub3BhbS81LjEuMS9saWIvcHB4X2xvZy90eXBlcy9tZXNzYWdlX2RhdGEubWwiLCIvVXNlcnMvdHlsYW5tb3Jhbi8ub3BhbS81LjEuMS9saWIvcHB4X2xvZy90eXBlcy9tZXNzYWdlX3NvdXJjZS5tbCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztHQTBCeUI7O0lBQUE7Ozs7RTs7Ozs7Ozs7O0c7Ozs7O0c7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0U7Ozs7Ozs7Ozs7O0c7Ozs7O0c7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQ3ZCekIsU0FBQUE7SUFBQTs7Ozs7VUFDRUM7b0RBREZELFdBQ0VDOztTQUFBQzttREFBQUE7Ozs7TUFBQUM7Ozs7O1VBS2NDO1VBQUFDO1VBQUFDLGlDQUFBRDtVQUFBRSxXQU5oQlAsVUFNZ0JJO3dCQUFBRSxjQUFBQzs7d0RBTGRKOztRQUFBSztrREFBQUE7R0FRa0I7OztrQ0FUcEJSOzs7O0U7Ozs7Ozs7Ozs7O0c7Ozs7O0c7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dDQUEsU0FXRUE7SUFYRjs7T0FDRSxJ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O0tBRUE7T0FBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztZQUdFRyxLQUFNQyxXQUFXQyxVQUFVSjtJQUM3QixlQURRRyxXQUFXQyxVQWpCakJMLFFBaUIyQkM7R0FDb0M7OzsrQ0F4QnJFNUUsZUF1Qk04RTs7OztFOzs7Ozs7Ozs7Rzs7Ozs7Rzs7Ozs7Ozs7Ozs7Ozs7OztFIiwic291cmNlc0NvbnRlbnQiOlsiKCogZ2VuZXJhdGVkIGJ5IGR1bmUgKilcblxuKCoqIEBjYW5vbmljYWwgUHB4X2xvZ190eXBlcy5JbXBvcnQgKilcbm1vZHVsZSBJbXBvcnQgPSBQcHhfbG9nX3R5cGVzX19JbXBvcnRcblxuKCoqIEBjYW5vbmljYWwgUHB4X2xvZ190eXBlcy5Kc29uYWYgKilcbm1vZHVsZSBKc29uYWYgPSBQcHhfbG9nX3R5cGVzX19Kc29uYWZcblxuKCoqIEBjYW5vbmljYWwgUHB4X2xvZ190eXBlcy5MZXZlbCAqKVxubW9kdWxlIExldmVsID0gUHB4X2xvZ190eXBlc19fTGV2ZWxcblxuKCoqIEBjYW5vbmljYWwgUHB4X2xvZ190eXBlcy5Mb2dfdGFnICopXG5tb2R1bGUgTG9nX3RhZyA9IFBweF9sb2dfdHlwZXNfX0xvZ190YWdcblxuKCoqIEBjYW5vbmljYWwgUHB4X2xvZ190eXBlcy5NZXNzYWdlX2RhdGEgKilcbm1vZHVsZSBNZXNzYWdlX2RhdGEgPSBQcHhfbG9nX3R5cGVzX19NZXNzYWdlX2RhdGFcblxuKCoqIEBjYW5vbmljYWwgUHB4X2xvZ190eXBlcy5NZXNzYWdlX3NleHAgKilcbm1vZHVsZSBNZXNzYWdlX3NleHAgPSBQcHhfbG9nX3R5cGVzX19NZXNzYWdlX3NleHBcblxuKCoqIEBjYW5vbmljYWwgUHB4X2xvZ190eXBlcy5NZXNzYWdlX3NvdXJjZSAqKVxubW9kdWxlIE1lc3NhZ2Vfc291cmNlID0gUHB4X2xvZ190eXBlc19fTWVzc2FnZV9zb3VyY2VcblxuKCoqIEBjYW5vbmljYWwgUHB4X2xvZ190eXBlcy5UYWdfZGF0YSAqKVxubW9kdWxlIFRhZ19kYXRhID0gUHB4X2xvZ190eXBlc19fVGFnX2RhdGFcblxubW9kdWxlIFBweF9sb2dfdHlwZXNfXyA9IHN0cnVjdCBlbmRcbltAQGRlcHJlY2F0ZWQgXCJ0aGlzIG1vZHVsZSBpcyBzaGFkb3dlZFwiXVxuIiwib3BlbiEgQmFzZVxub3BlbiEgSW1wb3J0XG5cbnR5cGUgdCA9XG4gIFsgYE51bGxcbiAgfCBgRmFsc2VcbiAgfCBgVHJ1ZVxuICB8IGBTdHJpbmcgb2Ygc3RyaW5nXG4gIHwgYE51bWJlciBvZiBzdHJpbmdcbiAgfCBgT2JqZWN0IG9mIChzdHJpbmcgKiB0KSBsaXN0XG4gIHwgYEFycmF5IG9mIHQgbGlzdFxuICBdXG5bQEBkZXJpdmluZyBzZXhwX29mXVxuIiwib3BlbiEgQmFzZVxub3BlbiEgSW1wb3J0XG5cbnR5cGUgdCA9XG4gIHwgSW50IG9mIGludFxuICB8IENoYXIgb2YgY2hhclxuICB8IEZsb2F0IG9mIGZsb2F0XG4gIHwgU3RyaW5nIG9mIHN0cmluZ1xuICB8IEJvb2wgb2YgYm9vbFxuICB8IFNleHAgb2YgU2V4cC50XG4gIHwgSnNvbiBvZiBKc29uYWYudFxuW0BAZGVyaXZpbmcgc2V4cF9vZiwgdmFyaWFudHNdXG5cbm1vZHVsZSBXaXRoX3R5cGVfbGFiZWwgPSBzdHJ1Y3RcbiAgdHlwZSBub25yZWMgdCA9IHQgW0BAZGVyaXZpbmcgc2V4cF9vZl1cbmVuZFxuXG5tb2R1bGUgV2l0aG91dF90eXBlX2xhYmVsID0gc3RydWN0XG4gIHR5cGUgbm9ucmVjIHQgPSB0XG5cbiAgbGV0IHNleHBfb2ZfdCA9IGZ1bmN0aW9uXG4gICAgfCBJbnQgeCAtPiBbJXNleHBfb2Y6IGludF0geFxuICAgIHwgQ2hhciB4IC0+IFslc2V4cF9vZjogY2hhcl0geFxuICAgIHwgRmxvYXQgeCAtPiBbJXNleHBfb2Y6IGZsb2F0XSB4XG4gICAgfCBTdHJpbmcgeCAtPiBbJXNleHBfb2Y6IHN0cmluZ10geFxuICAgIHwgQm9vbCB4IC0+IFslc2V4cF9vZjogYm9vbF0geFxuICAgIHwgU2V4cCB4IC0+IHhcbiAgICB8IEpzb24geCAtPiBbJXNleHBfb2Y6IEpzb25hZi50XSB4XG4gIDs7XG5cbiAgbGV0IHRvX3N0cmluZyA9IGZ1bmN0aW9uXG4gICAgfCBJbnQgeCAtPiBJbnQudG9fc3RyaW5nIHhcbiAgICB8IENoYXIgeCAtPiBDaGFyLnRvX3N0cmluZyB4XG4gICAgfCBGbG9hdCB4IC0+IEZsb2F0LnRvX3N0cmluZyB4XG4gICAgfCBTdHJpbmcgeCAtPiB4XG4gICAgfCBCb29sIHggLT4gQm9vbC50b19zdHJpbmcgeFxuICAgIHwgU2V4cCB4IC0+IFNleHAudG9fc3RyaW5nIHhcbiAgICB8IEpzb24geCAtPiBTZXhwLnRvX3N0cmluZyAoWyVzZXhwX29mOiBKc29uYWYudF0geClcbiAgOztcbmVuZFxuIiwib3BlbiEgQmFzZVxub3BlbiEgSW1wb3J0XG5cbnR5cGUgdCA9XG4gIFsgYERlYnVnXG4gIHwgYEluZm9cbiAgfCBgRXJyb3JcbiAgXVxuW0BAZGVyaXZpbmcgc2V4cF9vZl1cbiIsIm9wZW4hIEJhc2Vcbm9wZW4hIEltcG9ydFxuXG50eXBlIHQgPVxuICB7IG5hbWUgOiBzdHJpbmdcbiAgOyBkYXRhIDogVGFnX2RhdGEudFxuICB9XG5cbmxldCBvZl9wYWlyIChuYW1lLCBkYXRhKSA9IHsgbmFtZTsgZGF0YSB9XG5sZXQgc3RyaW5nX3BhaXIgKG5hbWUsIGRhdGEpID0geyBuYW1lOyBkYXRhID0gU3RyaW5nIGRhdGEgfVxuXG5tb2R1bGUgVmVyYm9zZSA9IHN0cnVjdFxuICB0eXBlIG5vbnJlYyB0ID0gdCA9XG4gICAgeyBuYW1lIDogc3RyaW5nXG4gICAgOyBkYXRhIDogVGFnX2RhdGEuV2l0aF90eXBlX2xhYmVsLnRcbiAgICB9XG4gIFtAQGRlcml2aW5nIHNleHBfb2ZdXG5lbmRcblxubW9kdWxlIEZvcl9tZXNzYWdlX3NleHAgPSBzdHJ1Y3RcbiAgdHlwZSBub25yZWMgdCA9IHRcblxuICBsZXQgc2V4cF9vZl90ID0gZnVuY3Rpb25cbiAgICB8IHsgbmFtZSA9IFwiXCI7IGRhdGEgfSAtPiBbJXNleHAgKGRhdGEgOiBUYWdfZGF0YS5XaXRob3V0X3R5cGVfbGFiZWwudCldXG4gICAgfCB7IG5hbWU7IGRhdGEgfSAtPiBbJXNleHAgKG5hbWUgOiBzdHJpbmcpLCAoZGF0YSA6IFRhZ19kYXRhLldpdGhvdXRfdHlwZV9sYWJlbC50KV1cbiAgOztcbmVuZFxuIiwib3BlbiEgQmFzZVxub3BlbiEgSW1wb3J0XG5cbm1vZHVsZSBMYWJlbCA9IHN0cnVjdFxuICB0eXBlIHQgPVxuICAgIHwgU3RyaW5nIG9mIHN0cmluZ1xuICAgIHwgU3RyaW5nX2xpdGVyYWwgb2Ygc3RyaW5nXG4gIFtAQGRlcml2aW5nIHNleHBfb2ZdXG5lbmRcblxudHlwZSB0ID1cbiAgeyBsYWJlbCA6IExhYmVsLnQgb3B0aW9uXG4gIDsgdGFncyA6IExvZ190YWcudCBsaXN0XG4gIDsgbGVnYWN5X3JlbmRlcl93aXRoX2FkZGl0aW9uYWxfcGFyZW50aGVzZXMgOiBib29sXG4gIH1cbltAQGRlcml2aW5nIGZpZWxkcyB+Z2V0dGVycyB+aXRlcmF0b3JzOmNyZWF0ZV1cblxubGV0IGNyZWF0ZSA/KGxlZ2FjeV9yZW5kZXJfd2l0aF9hZGRpdGlvbmFsX3BhcmVudGhlc2VzID0gZmFsc2UpIGxhYmVsIH50YWdzID1cbiAgeyBsYWJlbDsgdGFnczsgbGVnYWN5X3JlbmRlcl93aXRoX2FkZGl0aW9uYWxfcGFyZW50aGVzZXMgfVxuOztcblxubGV0IHJlbmRlciB7IGxhYmVsOyB0YWdzOyBsZWdhY3lfcmVuZGVyX3dpdGhfYWRkaXRpb25hbF9wYXJlbnRoZXNlcyB9ID1cbiAgKCogRm9yIGNvbXBhdGliaWxpdHkgd2l0aCBbJXNleHAgXCJtZXNzYWdlXCIsIHsgYTEgOiB0MTsgYTIgOiB0MiB9XSBwcm9kdWNpbmcgc2V4cHNcbiAgICAgd2hlcmUgdGhlIHRhZ3MgYXJlIGluIGFuIGV4dHJhIGxheWVyIG9mIHBhcmVudGhlc2VzIChtZXNzYWdlICgoYTEgLikgKGEyIC4pKSksIHdlXG4gICAgIGhhdmUgZXh0cmEgbG9naWMgZm9yIFtsZWdhY3lfcmVuZGVyX3dpdGhfYWRkaXRpb25hbF9wYXJlbnRoZXNlc10uXG5cbiAgICAgWyVtZXNzYWdlXSBoYXMgc29tZSBtYWdpYyBpbiAyIGNhc2VzOlxuICAgICAtIFwiXCIgPSBOb3RoaW5nIGF0IGFsbC4gU286XG4gICAgICAgWyVtZXNzYWdlIFwiaGVsbG9cIiB+aTooMyA6IGludCkgfmo6KDMgOiBpbnQpXSAtPiAoaGVsbG8gKGkgMykgKGogMykpXG4gICAgICAgWyVtZXNzYWdlIFwiXCIgfmk6KDMgOiBpbnQpIH5qOigzIDogaW50KV0gLT4gKChpIDMpIChqIDMpKVxuICAgICAtIElmIHRoZSBmaW5hbCBvdXRwdXQgaGFzIGZvcm1hdCAoPG9uZS1lbHQ+KSwgdGhlIG91dGVyIHBhcmVudGhlc2VzIGFyZSByZW1vdmVkLlxuICAgICAgIFslbWVzc2FnZSBcImhlbGxvXCJdIC0+IGhlbGxvLCBOT1QgKGhlbGxvKVxuICAgICAgIFslbWVzc2FnZSBcIlwiIH5pOigzIDogaW50KV0gLT4gKGkgMyksIE5PVCAoKGkgMykpXG4gICAgIC0gSG93ZXZlciwgWyVtZXNzYWdlIFwiXCJdID0gKCkgPSBTZXhwLkxpc3QgW10uICopXG4gIGxldCBsYWJlbCA9XG4gICAgT3B0aW9uLm1hcCBsYWJlbCB+ZjooZnVuIChTdHJpbmcgc3RyIHwgU3RyaW5nX2xpdGVyYWwgc3RyKSAtPiBTZXhwLkF0b20gc3RyKVxuICBpblxuICBsZXQgdGFncyA9IExpc3QubWFwIHRhZ3MgfmY6WyVzZXhwX29mOiBMb2dfdGFnLkZvcl9tZXNzYWdlX3NleHAudF0gaW5cbiAgbWF0Y2ggbGFiZWwsIHRhZ3Mgd2l0aFxuICB8IE5vbmUsIFtdIC0+IFNleHAuTGlzdCBbXVxuICB8IFNvbWUgc2V4cCwgW10gLT4gc2V4cFxuICB8IE5vbmUsIFsgdGFnIF0gLT5cbiAgICBpZiBsZWdhY3lfcmVuZGVyX3dpdGhfYWRkaXRpb25hbF9wYXJlbnRoZXNlcyB0aGVuIExpc3QgWyB0YWcgXSBlbHNlIHRhZ1xuICB8IE5vbmUsIG11bHRpcGxlX3RhZ3MgLT4gTGlzdCBtdWx0aXBsZV90YWdzXG4gIHwgU29tZSBtZXNzYWdlLCBtdWx0aXBsZV90YWdzIC0+XG4gICAgaWYgbGVnYWN5X3JlbmRlcl93aXRoX2FkZGl0aW9uYWxfcGFyZW50aGVzZXNcbiAgICB0aGVuIExpc3QgWyBtZXNzYWdlOyBMaXN0IG11bHRpcGxlX3RhZ3MgXVxuICAgIGVsc2UgTGlzdCAobWVzc2FnZSA6OiBtdWx0aXBsZV90YWdzKVxuOztcblxubW9kdWxlIFVuc3RhYmxlID0gc3RydWN0XG4gIHR5cGUgbm9ucmVjIHQgPSB0ID1cbiAgICB7IGxhYmVsIDogTGFiZWwudCBvcHRpb24gW0BzZXhwLm9wdGlvbl1cbiAgICA7IHRhZ3MgOiBMb2dfdGFnLlZlcmJvc2UudCBsaXN0XG4gICAgOyBsZWdhY3lfcmVuZGVyX3dpdGhfYWRkaXRpb25hbF9wYXJlbnRoZXNlcyA6IGJvb2wgW0BzZXhwLmJvb2xdXG4gICAgfVxuICBbQEBkZXJpdmluZyBzZXhwX29mXVxuZW5kXG4iLCJvcGVuISBCYXNlXG5vcGVuISBJbXBvcnRcblxudHlwZSB0ID1cbiAgWyBgU2V4cCBvZiBTZXhwLnRcbiAgfCBgU3RyaW5nIG9mIHN0cmluZ1xuICB8IGBTdHJ1Y3R1cmVkIG9mIE1lc3NhZ2Vfc2V4cC50XG4gIF1cblxubW9kdWxlIFVuc3RhYmxlID0gc3RydWN0XG4gIHR5cGUgbm9ucmVjIHQgPVxuICAgIFsgYFNleHAgb2YgU2V4cC50XG4gICAgfCBgU3RyaW5nIG9mIHN0cmluZ1xuICAgIHwgYFN0cnVjdHVyZWQgb2YgTWVzc2FnZV9zZXhwLlVuc3RhYmxlLnRcbiAgICBdXG4gIFtAQGRlcml2aW5nIHNleHBfb2ZdXG5lbmRcbiIsIm9wZW4hIEJhc2Vcbm9wZW4hIEltcG9ydFxuXG5tb2R1bGUgQ29kZV9wb3NpdGlvbiA9IHN0cnVjdFxuICB0eXBlIHQgPVxuICAgIHsgcG9zX2ZuYW1lIDogc3RyaW5nXG4gICAgOyBwb3NfbG51bSA6IGludFxuICAgIDsgbGlicmFyeV9uYW1lIDogc3RyaW5nXG4gICAgfVxuICBbQEBkZXJpdmluZyBzZXhwX29mXVxuZW5kXG5cbnR5cGUgdCA9XG4gIHwgTWFudWFsbHlfY29uc3RydWN0ZWQgb2Ygc3RyaW5nXG4gIHwgQ29kZSBvZiBDb2RlX3Bvc2l0aW9uLnRcbltAQGRlcml2aW5nIHNleHBfb2ZdXG5cbm1vZHVsZSBQcml2YXRlID0gc3RydWN0XG4gIGxldCBsaWJuYW1lIH5tb2R1bGVfbmFtZSA9XG4gICAgbWF0Y2ggU3RyaW5nLnN1YnN0cl9pbmRleCBtb2R1bGVfbmFtZSB+cGF0dGVybjpcIl9fXCIgd2l0aFxuICAgIHwgU29tZSBpZHggLT4gU3RyaW5nLnN1YiBtb2R1bGVfbmFtZSB+cG9zOjAgfmxlbjppZHhcbiAgICB8IE5vbmUgLT4gbW9kdWxlX25hbWVcbiAgOztcblxuICBsZXQlZXhwZWN0X3Rlc3QgXCJsaWJuYW1lX2Zyb21fbW9kdWxlX25hbWUgZXhhbXBsZVwiID1cbiAgICBwcmludF9zdHJpbmcgKGxpYm5hbWUgfm1vZHVsZV9uYW1lOlN0ZGxpYi5fX01PRFVMRV9fKTtcbiAgICBbJWV4cGVjdCBcIlBweF9sb2dfdHlwZXNcIl07XG4gICAgcHJpbnRfc3RyaW5nIChsaWJuYW1lIH5tb2R1bGVfbmFtZTpcIkxpYl9uYW1lXCIpO1xuICAgIFslZXhwZWN0IFwiTGliX25hbWVcIl07XG4gICAgcHJpbnRfc3RyaW5nIChsaWJuYW1lIH5tb2R1bGVfbmFtZTpcIkxpYl9uYW1lMl9fbW9kdWxlX25hbWVcIik7XG4gICAgWyVleHBlY3QgXCJMaWJfbmFtZTJcIl07XG4gICAgcHJpbnRfc3RyaW5nIChsaWJuYW1lIH5tb2R1bGVfbmFtZTpcIkxpYl9uYW1lM19fbW9kdWxlX25hbWVfX21vcmVfc3R1ZmZcIik7XG4gICAgWyVleHBlY3QgXCJMaWJfbmFtZTNcIl1cbiAgOztcblxuICBsZXQgY29kZSB+cG9zX2ZuYW1lIH5wb3NfbG51bSB+bW9kdWxlX25hbWUgPVxuICAgIENvZGUgeyBwb3NfZm5hbWU7IHBvc19sbnVtOyBsaWJyYXJ5X25hbWUgPSBsaWJuYW1lIH5tb2R1bGVfbmFtZSB9XG4gIDs7XG5lbmRcbiJdfQ==
