// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Incr_map__
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Incr_map = [0],
    Incr_map$0 = [0, Incr_map];
   runtime.caml_register_global(0, Incr_map$0, "Incr_map__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incr_map__Incr_map_intf
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Incr_map_Incr_map_intf = "Incr_map__Incr_map_intf",
    cst_incr_map = "incr_map";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incr_map_Incr_map_intf);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incr_map);
   caml_call1(Ppx_expect_runtime[1][1], "src/incr_map_intf.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_incr_map, "incr_map_intf.ml");
   var Instrumentation = [0];
   caml_call1(Ppx_inline_test_lib[7], cst_incr_map);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incr_map_Incr_map_intf);
   var Incr_map_Incr_map_intf = [0, Instrumentation];
   runtime.caml_register_global
    (11, Incr_map_Incr_map_intf, cst_Incr_map_Incr_map_intf);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incr_map
//# unitInfo: Requires: Base__Option, CamlinternalLazy, Core, Core__Bool, Core__Info, Core__Int, Core__Lazy, Core__List, Core__Map, Core__Maybe_bound, Core__Option, Core__Sequence, Core__Set, Core__Sexp, Core__Tuple, Incr_map__Incr_map_intf, Incremental, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Incr_map$0 = "Incr_map",
    cst_incr_map$0 = "incr_map",
    cst_key = "key",
    cst_src_incr_map_ml = "src/incr_map.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_obj_tag = runtime.caml_obj_tag,
    caml_update_dummy = runtime.caml_update_dummy;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Core_Int = global_data.Core__Int,
    Core_Map = global_data.Core__Map,
    Core = global_data.Core,
    Incremental = global_data.Incremental,
    Core_Option = global_data.Core__Option,
    Core_Info = global_data.Core__Info,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Core_List = global_data.Core__List,
    Core_Bool = global_data.Core__Bool,
    Core_Tuple = global_data.Core__Tuple,
    Assert_failure = global_data.Assert_failure,
    Core_Maybe_bound = global_data.Core__Maybe_bound,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Core_Lazy = global_data.Core__Lazy,
    Core_Set = global_data.Core__Set,
    Core_Sexp = global_data.Core__Sexp,
    Base_Option = global_data.Base__Option,
    Core_Sequence = global_data.Core__Sequence,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incr_map$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incr_map$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_incr_map_ml);
   caml_call2(Ppx_inline_test_lib[6], cst_incr_map$0, "incr_map.ml");
   var
    _G_ = [0, "entries"],
    _H_ = [0, "actual_value"],
    _I_ = [0, cst_key],
    _B_ = [0, "node_is_unnecessary"],
    _C_ = [0, "node_is_invalid"],
    _D_ = [0, "node_is_const"],
    _E_ = [0, "node_info"],
    _F_ = [0, "saved_value"],
    cst_Incr_map_observe_changes_e =
      "[Incr_map.observe_changes_exn] called in scope that is not top-level",
    _A_ = [0, 1],
    _z_ = [0, 1],
    _y_ = [0, 1],
    _x_ = [0, 1],
    _w_ = [0, 1],
    _v_ = [0, [0, 0, 0]],
    _u_ = [0, cst_src_incr_map_ml, 1574, 6],
    _t_ = [0, cst_src_incr_map_ml, 1574, 6],
    _s_ = [0, cst_src_incr_map_ml, 1574, 6],
    _r_ = [0, cst_src_incr_map_ml, 1574, 6],
    _q_ = [0, cst_src_incr_map_ml, 1574, 6],
    _p_ = [0, cst_src_incr_map_ml, 1574, 6],
    _o_ = [0, cst_src_incr_map_ml, 1574, 6],
    _n_ = [0, cst_src_incr_map_ml, 1574, 6],
    _l_ = [0, cst_src_incr_map_ml, 1574, 6],
    _m_ = [0, [0, 0, 0]],
    _g_ = [0, "to_"],
    _h_ = [0, "from"],
    cst_Invalid_indices = "Invalid indices",
    _i_ = [0, 0, 0],
    _k_ = [0, cst_src_incr_map_ml, 1558, 10],
    _j_ = [0, cst_src_incr_map_ml, 1559, 10],
    cst_BUG_Hit_supposedly_impossi =
      "BUG: Hit supposedly impossible case in Incr_map.index_by",
    _f_ = [0, 1],
    _e_ = [0, 1],
    cst_impossible_case_BUG_in_inc =
      "impossible case: BUG in incr_map.ml subrange",
    _d_ = [0, 1],
    _c_ = [0, 1],
    _b_ = [0, cst_key],
    cst_caller_has_broken_invarian =
      "caller has broken invariant, a key is present in both maps",
    cst_Incr_map_merge_disjoint = "Incr_map.merge_disjoint",
    cst_src_incr_map_ml_596_14 = "src/incr_map.ml:596:14",
    _a_ = [0, cst_src_incr_map_ml, 329, 11],
    cst_incr_map = cst_incr_map$0,
    cst_Incr_map = cst_Incr_map$0;
   function no_instrumentation(f){return caml_call1(f, 0);}
   function with_old(instrumentation, i, f){
    var old = [0, 0];
    function _f9_(a){
     return caml_call1
             (instrumentation,
              function(param){
               var b = caml_call2(f, old[1], a);
               old[1] = [0, [0, a, b]];
               return b;
              });
    }
    return caml_call2(Incremental[76][3][5], i, _f9_);
   }
   function cutoff(opt, map, cutoff){
    if(opt)
     var sth = opt[1], instrumentation = sth;
    else
     var instrumentation = no_instrumentation;
    function data_equal(old_value, new_value){
     return caml_call3(Incremental[58][10], cutoff, old_value, new_value);
    }
    return with_old
            (instrumentation,
             map,
             function(old, cur){
              if(! old) return cur;
              var old$0 = old[1][2];
              function _f7_(acc, param){
               var change = param[2], key = param[1], _f8_ = change[1];
               if(847852583 === _f8_)
                return caml_call2(Core_Map[47], acc, key);
               if(1013247643 <= _f8_){
                var new_value = change[2][2];
                return caml_call3(Core_Map[38], acc, key, new_value);
               }
               var new$0 = change[2];
               return caml_call3(Core_Map[37], acc, key, new$0);
              }
              return caml_call5
                      (Core_Map[89], old$0, cur, data_equal, old$0, _f7_);
             });
   }
   function unordered_fold
   (instrumentation,
    opt,
    update,
    specialized_initial,
    _f0_,
    _fZ_,
    map,
    init,
    add,
    remove){
    if(opt)
     var sth = opt[1], data_equal = sth;
    else
     var data_equal = function(_f6_, _f5_){return _f6_ === _f5_ ? 1 : 0;};
    if(_f0_)
     var sth$0 = _f0_[1], finalize = sth$0;
    else
     var finalize = function(_f4_){return _f4_;};
    if(_fZ_)
     var sth$1 = _fZ_[1], revert_to_init_when_empty = sth$1;
    else
     var revert_to_init_when_empty = 0;
    function default$0(key, old_data, new_data, acc){
     return caml_call3
             (add, key, new_data, caml_call3(remove, key, old_data, acc));
    }
    var update$0 = caml_call2(Core_Option[39], update, default$0);
    return with_old
            (instrumentation,
             map,
             function(old, new_in){
              if(old){
               var match = old[1], old_out = match[2], old_in = match[1];
               a:
               {
                if(revert_to_init_when_empty){
                 var _f1_ = caml_call1(Core_Map[35], new_in);
                 if(caml_call2(Core[90], _f1_, 0)){var init$0 = init; break a;}
                }
                var
                 _f2_ =
                   function(acc, param){
                    var change = param[2], key = param[1], _f3_ = change[1];
                    if(847852583 === _f3_){
                     var old = change[2];
                     return caml_call3(remove, key, old, acc);
                    }
                    if(1013247643 <= _f3_){
                     var match = change[2], new$0 = match[2], old$0 = match[1];
                     return caml_call4(update$0, key, old$0, new$0, acc);
                    }
                    var new$1 = change[2];
                    return caml_call3(add, key, new$1, acc);
                   },
                 init$0 =
                   caml_call5
                    (Core_Map[89], old_in, new_in, data_equal, old_out, _f2_);
               }
               var acc = init$0;
              }
              else if(specialized_initial)
               var
                initial = specialized_initial[1],
                acc = caml_call2(initial, init, new_in);
              else
               var acc = caml_call3(Core_Map[61], new_in, init, add);
              return caml_call1(finalize, acc);
             });
   }
   function unordered_fold_nested_maps
   (instrumentation,
    opt,
    revert_to_init_when_empty,
    update,
    incr_map,
    init,
    add,
    remove){
    if(opt)
     var sth = opt[1], data_equal = sth;
    else
     var data_equal = function(_fY_, _fX_){return _fY_ === _fX_ ? 1 : 0;};
    if(update)
     var update$0 = update[1], update$1 = update$0;
    else
     var
      update$1 =
        function(outer_key, inner_key, old_data, new_data, acc){
         return caml_call4
                 (add,
                  outer_key,
                  inner_key,
                  new_data,
                  caml_call4(remove, outer_key, inner_key, old_data, acc));
        };
    function _fP_(outer_key, inner_map, acc){
     function _fW_(inner_key, data, acc){
      return caml_call4(remove, outer_key, inner_key, data, acc);
     }
     return caml_call3(Core_Map[61], inner_map, acc, _fW_);
    }
    function _fQ_(outer_key, inner_map, acc){
     function _fV_(inner_key, data, acc){
      return caml_call4(add, outer_key, inner_key, data, acc);
     }
     return caml_call3(Core_Map[61], inner_map, acc, _fV_);
    }
    var _fR_ = 0, _fS_ = 0;
    return unordered_fold
            (instrumentation,
             0,
             [0,
              function(outer_key, old_inner_map, new_inner_map, acc){
               function _fT_(acc, param){
                var diff = param[2], inner_key = param[1], _fU_ = diff[1];
                if(847852583 === _fU_){
                 var data_removed = diff[2];
                 return caml_call4
                         (remove, outer_key, inner_key, data_removed, acc);
                }
                if(1013247643 <= _fU_){
                 var
                  match = diff[2],
                  new_data = match[2],
                  old_data = match[1];
                 return caml_call5
                         (update$1, outer_key, inner_key, old_data, new_data, acc);
                }
                var data_added = diff[2];
                return caml_call4(add, outer_key, inner_key, data_added, acc);
               }
               return caml_call2
                       (caml_call3
                         (Core_Map[89], old_inner_map, new_inner_map, data_equal),
                        acc,
                        _fT_);
              }],
             _fS_,
             _fR_,
             revert_to_init_when_empty,
             incr_map,
             init,
             _fQ_,
             _fP_);
   }
   function with_comparator(get_comparator, x, f){
    var
     _fN_ = caml_call2(Incremental[10], x, get_comparator),
     _fO_ = caml_call2(Incremental[34], 0, _fN_);
    return caml_call2(Incremental[26], _fO_, f);
   }
   function with_comparator$0(map, f){
    return with_comparator(Core_Map[2], map, f);
   }
   function of_set(opt, set){
    if(opt)
     var sth = opt[1], instrumentation = sth;
    else
     var instrumentation = no_instrumentation;
    function _fI_(comparator){
     var
      old_input = [0, caml_call1(Core_Set[3][1], comparator)],
      old_output = [0, caml_call1(Core_Map[124][1], comparator)];
     function _fJ_(new_input){
      return caml_call1
              (instrumentation,
               function(param){
                function _fK_(output, param){
                 if(0 === param[0]){
                  var k = param[1];
                  return caml_call2(Core_Map[47], output, k);
                 }
                 var k$0 = param[1];
                 return caml_call3(Core_Map[37], output, k$0, 0);
                }
                var
                 _fL_ = old_output[1],
                 _fM_ = caml_call2(Core_Set[18], old_input[1], new_input),
                 new_output = caml_call3(Core_Sequence[21], _fM_, _fL_, _fK_);
                old_input[1] = new_input;
                old_output[1] = new_output;
                return new_output;
               });
     }
     return caml_call2(Incremental[10], set, _fJ_);
    }
    return with_comparator(Core_Set[6], set, _fI_);
   }
   function generic_mapi(witness, instrumentation, opt, map, f){
    if(opt)
     var sth = opt[1], data_equal = sth;
    else
     var data_equal = function(_fH_, _fG_){return _fH_ === _fG_ ? 1 : 0;};
    return with_old
            (instrumentation,
             map,
             function(old, input){
              if(0 !== caml_call1(Core_Map[35], input) && old){
               var
                match = old[1],
                old_output = match[2],
                old_input = match[1],
                _fE_ =
                  function(output, param){
                   var change = param[2], key = param[1], _fF_ = change[1];
                   if(847852583 === _fF_)
                    return caml_call2(Core_Map[47], output, key);
                   var
                    new_data = 1013247643 <= _fF_ ? change[2][2] : change[2],
                    res = caml_call2(f, key, new_data);
                   if(! witness)
                    return caml_call3(Core_Map[38], output, key, res);
                   if(! res) return caml_call2(Core_Map[47], output, key);
                   var output_data = res[1];
                   return caml_call3(Core_Map[38], output, key, output_data);
                  };
               return caml_call5
                       (Core_Map[89],
                        old_input,
                        input,
                        data_equal,
                        old_output,
                        _fE_);
              }
              return witness
                      ? caml_call2(Core_Map[69], input, f)
                      : caml_call2(Core_Map[58], input, f);
             });
   }
   function mapi(opt, data_equal, map, f){
    if(opt)
     var sth = opt[1], instrumentation = sth;
    else
     var instrumentation = no_instrumentation;
    return generic_mapi(0, instrumentation, data_equal, map, f);
   }
   function filter_mapi(opt, data_equal, map, f){
    if(opt)
     var sth = opt[1], instrumentation = sth;
    else
     var instrumentation = no_instrumentation;
    return generic_mapi(1, instrumentation, data_equal, map, f);
   }
   function map(instrumentation, data_equal, map, f){
    return mapi
            (instrumentation,
             data_equal,
             map,
             function(param, data){return caml_call1(f, data);});
   }
   function filter_map(instrumentation, data_equal, map, f){
    return filter_mapi
            (instrumentation,
             data_equal,
             map,
             function(param, data){return caml_call1(f, data);});
   }
   function with_old2(instrumentation, i1, i2, f){
    var old = [0, 0];
    function _fD_(a1, a2){
     return caml_call1
             (instrumentation,
              function(param){
               var b = caml_call3(f, old[1], a1, a2);
               old[1] = [0, [0, a1, a2, b]];
               return b;
              });
    }
    return caml_call3(Incremental[12], i1, i2, _fD_);
   }
   function unordered_fold_with_extra
   (opt,
    _ft_,
    _fs_,
    update,
    specialized_initial,
    _fr_,
    _fq_,
    map,
    extra,
    init,
    add,
    remove,
    extra_changed){
    if(opt)
     var sth = opt[1], instrumentation = sth;
    else
     var instrumentation = no_instrumentation;
    if(_ft_)
     var sth$0 = _ft_[1], data_equal = sth$0;
    else
     var data_equal = function(_fC_, _fB_){return _fC_ === _fB_ ? 1 : 0;};
    if(_fs_)
     var sth$1 = _fs_[1], extra_equal = sth$1;
    else
     var extra_equal = function(_fA_, _fz_){return _fA_ === _fz_ ? 1 : 0;};
    if(_fr_)
     var sth$2 = _fr_[1], finalize = sth$2;
    else
     var finalize = function(_fy_){return _fy_;};
    if(_fq_)
     var sth$3 = _fq_[1], revert_to_init_when_empty = sth$3;
    else
     var revert_to_init_when_empty = 0;
    function default$0(key, old_data, new_data, acc, extra){
     return caml_call4
             (add,
              key,
              new_data,
              caml_call4(remove, key, old_data, acc, extra),
              extra);
    }
    var update$0 = caml_call2(Core_Option[39], update, default$0);
    return with_old2
            (instrumentation,
             map,
             extra,
             function(old, new_in, new_extra){
              if(old){
               var
                match = old[1],
                old_out = match[3],
                old_extra = match[2],
                old_in = match[1],
                acc =
                  caml_call2(extra_equal, old_extra, new_extra)
                   ? old_out
                   : caml_call4
                     (extra_changed, old_extra, new_extra, old_in, old_out);
               a:
               {
                if(revert_to_init_when_empty){
                 var _fu_ = caml_call1(Core_Map[35], new_in);
                 if(caml_call2(Core[90], _fu_, 0)){var init$0 = init; break a;}
                }
                var
                 _fv_ =
                   function(acc, param){
                    var change = param[2], key = param[1], _fx_ = change[1];
                    if(847852583 === _fx_){
                     var old = change[2];
                     return caml_call4(remove, key, old, acc, new_extra);
                    }
                    if(1013247643 <= _fx_){
                     var match = change[2], new$0 = match[2], old$0 = match[1];
                     return caml_call5
                             (update$0, key, old$0, new$0, acc, new_extra);
                    }
                    var new$1 = change[2];
                    return caml_call4(add, key, new$1, acc, new_extra);
                   },
                 init$0 =
                   caml_call5
                    (Core_Map[89], old_in, new_in, data_equal, acc, _fv_);
               }
               var acc$0 = init$0;
              }
              else if(specialized_initial)
               var
                initial = specialized_initial[1],
                acc$0 = caml_call3(initial, init, new_in, new_extra);
              else
               var
                _fw_ =
                  function(key, data, acc){
                   return caml_call4(add, key, data, acc, new_extra);
                  },
                acc$0 = caml_call3(Core_Map[61], new_in, init, _fw_);
              return caml_call1(finalize, acc$0);
             });
   }
   function mapi_count(opt, _fe_, input, comparator, f){
    if(opt)
     var sth = opt[1], instrumentation = sth;
    else
     var instrumentation = no_instrumentation;
    if(_fe_)
     var sth$0 = _fe_[1], data_equal = sth$0;
    else
     var data_equal = function(_fp_, _fo_){return _fp_ === _fo_ ? 1 : 0;};
    function add(new_key, acc){
     function _fn_(param){
      if(! param) return 1;
      var n = param[1];
      return n + 1 | 0;
     }
     return caml_call3(Core_Map[43], acc, new_key, _fn_);
    }
    function remove(new_key, acc){
     function _fm_(param){
      if(! param) return 0;
      var n = param[1];
      return 1 === n ? 0 : [0, n - 1 | 0];
     }
     return caml_call3(Core_Map[42], acc, new_key, _fm_);
    }
    function _ff_(key, data, acc){
     return remove(caml_call2(f, key, data), acc);
    }
    function _fg_(key, data, acc){return add(caml_call2(f, key, data), acc);}
    var
     _fh_ = caml_call1(Core_Map[4], comparator),
     _fi_ = 0,
     _fj_ = 0,
     _fk_ = 0;
    return unordered_fold
            (instrumentation,
             [0, data_equal],
             [0,
              function(key, old_data, new_data, acc){
               var
                prev_key = caml_call2(f, key, old_data),
                new_key = caml_call2(f, key, new_data),
                _fl_ = caml_call2(comparator[1][1], prev_key, new_key);
               return caml_call2(Core[90], _fl_, 0)
                       ? acc
                       : add(new_key, remove(prev_key, acc));
              }],
             _fk_,
             _fj_,
             _fi_,
             input,
             _fh_,
             _fg_,
             _ff_);
   }
   function map_count(instrumentation, data_equal, input, comparator, f){
    return mapi_count
            (instrumentation,
             data_equal,
             input,
             comparator,
             function(param, data){return caml_call1(f, data);});
   }
   function min_helper(map){
    var match = caml_call1(Core_Map[90], map);
    if(! match) return 0;
    var min = match[1][1];
    return [0, min];
   }
   function max_helper(map){
    var match = caml_call1(Core_Map[92], map);
    if(! match) return 0;
    var max = match[1][1];
    return [0, max];
   }
   function bounds_helper(map){
    var
     match = caml_call1(Core_Map[90], map),
     match$0 = caml_call1(Core_Map[92], map);
    if(match){
     if(match$0){
      var max = match$0[1][1], min = match[1][1];
      return [0, [0, min, max]];
     }
    }
    else if(! match$0) return 0;
    throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
   }
   function mapi_min(instrumentation, data_equal, input, comparator, f){
    var _fd_ = mapi_count(instrumentation, data_equal, input, comparator, f);
    return caml_call2(Incremental[10], _fd_, min_helper);
   }
   function mapi_max(instrumentation, data_equal, input, comparator, f){
    var _fc_ = mapi_count(instrumentation, data_equal, input, comparator, f);
    return caml_call2(Incremental[10], _fc_, max_helper);
   }
   function mapi_bounds(instrumentation, data_equal, input, comparator, f){
    var _fb_ = mapi_count(instrumentation, data_equal, input, comparator, f);
    return caml_call2(Incremental[10], _fb_, bounds_helper);
   }
   function map_min(instrumentation, data_equal, input, comparator, f){
    return mapi_min
            (instrumentation,
             data_equal,
             input,
             comparator,
             function(param, data){return caml_call1(f, data);});
   }
   function map_max(instrumentation, data_equal, input, comparator, f){
    return mapi_max
            (instrumentation,
             data_equal,
             input,
             comparator,
             function(param, data){return caml_call1(f, data);});
   }
   function min_value(instrumentation, data_equal, input, comparator){
    return map_min
            (instrumentation,
             data_equal,
             input,
             comparator,
             function(_fa_){return _fa_;});
   }
   function max_value(instrumentation, data_equal, input, comparator){
    return map_max
            (instrumentation,
             data_equal,
             input,
             comparator,
             function(_e$_){return _e$_;});
   }
   function map_bounds(instrumentation, data_equal, input, comparator, f){
    return mapi_bounds
            (instrumentation,
             data_equal,
             input,
             comparator,
             function(param, data){return caml_call1(f, data);});
   }
   function value_bounds(instrumentation, data_equal, input, comparator){
    return map_bounds
            (instrumentation,
             data_equal,
             input,
             comparator,
             function(_e__){return _e__;});
   }
   function merge_shared_impl
   (old, new_left_map, new_right_map, data_equal_left, data_equal_right, f){
    var comparator = caml_call1(Core_Map[2], new_left_map);
    if(old)
     var
      x = old[1],
      old_output = x[3],
      old_right_map = x[2],
      old_left_map = x[1];
    else
     var
      old_left_map$0 = caml_call1(Core_Map[124][1], comparator),
      old_output = old_left_map$0,
      old_right_map = old_left_map$0,
      old_left_map = old_left_map$0;
    function apply_right(output, param){
     var diff_element = param[2], key = param[1];
     return caml_call4
             (f, old_output, key, output, [0, -57574468, diff_element]);
    }
    if(old_left_map === new_left_map)
     return caml_call5
             (Core_Map[89],
              old_right_map,
              new_right_map,
              data_equal_right,
              old_output,
              apply_right);
    var
     right_diffs =
       caml_call3
        (Core_Map[88], old_right_map, new_right_map, data_equal_right);
    function _e4_(param, _e8_){
     var
      left_diff_element = _e8_[2],
      left_key = _e8_[1],
      right_diffs = param[2],
      output = param[1],
      compare = comparator[1],
      output$0 = output,
      right_diffs$0 = right_diffs;
     for(;;){
      var
       apply_left =
         function(output){
          return caml_call4
                  (f,
                   old_output,
                   left_key,
                   output,
                   [0, 847852583, left_diff_element]);
         };
      if(! right_diffs$0) return [0, apply_left(output$0), right_diffs$0];
      var
       match = right_diffs$0[1],
       tl = match[2],
       hd = match[1],
       right_diff_element = hd[2],
       right_key = hd[1],
       x = caml_call2(compare, left_key, right_key);
      if(0 === x){
       var _e9_ = caml_call1(Core_Sequence[50], tl);
       return [0,
               caml_call4
                (f,
                 old_output,
                 left_key,
                 output$0,
                 [0, 737457313, [0, left_diff_element, right_diff_element]]),
               _e9_];
      }
      if(! caml_call2(Core[91], x, 0))
       return [0, apply_left(output$0), right_diffs$0];
      var
       right_diffs$1 = caml_call1(Core_Sequence[50], tl),
       diff_element = hd[2],
       key = hd[1],
       output$1 =
         caml_call4
          (f, old_output, key, output$0, [0, -57574468, diff_element]),
       output$0 = output$1,
       right_diffs$0 = right_diffs$1;
     }
    }
    var
     _e5_ = [0, old_output, caml_call1(Core_Sequence[50], right_diffs)],
     match =
       caml_call5
        (Core_Map[89],
         old_left_map,
         new_left_map,
         data_equal_left,
         _e5_,
         _e4_),
     right_diffs$0 = match[2],
     output = match[1];
    function _e6_(param){
     var tl = param[2], hd = param[1], _e7_ = apply_right(output, hd);
     return caml_call3(Core_Sequence[21], tl, _e7_, apply_right);
    }
    return caml_call3(Core_Option[41], right_diffs$0, output, _e6_);
   }
   function new_data_from_diff_element(param){
    var _e3_ = param[1];
    if(847852583 === _e3_) return 0;
    var x = 1013247643 <= _e3_ ? param[2][2] : param[2];
    return [0, x];
   }
   function merge(opt, _eW_, _eV_, left_map, right_map, f){
    if(opt)
     var sth = opt[1], instrumentation = sth;
    else
     var instrumentation = no_instrumentation;
    if(_eW_)
     var sth$0 = _eW_[1], data_equal_left = sth$0;
    else
     var
      data_equal_left = function(_e2_, _e1_){return _e2_ === _e1_ ? 1 : 0;};
    if(_eV_)
     var sth$1 = _eV_[1], data_equal_right = sth$1;
    else
     var
      data_equal_right = function(_e0_, _eZ_){return _e0_ === _eZ_ ? 1 : 0;};
    return with_old2
            (instrumentation,
             left_map,
             right_map,
             function(old, new_left_map, new_right_map){
              return merge_shared_impl
                      (old,
                       new_left_map,
                       new_right_map,
                       data_equal_left,
                       data_equal_right,
                       function(param, key, output, diff_element){
                        var _eX_ = diff_element[1];
                        if(737457313 === _eX_)
                         var
                          match = diff_element[2],
                          right_diff = match[2],
                          left_diff = match[1],
                          right_data_opt = new_data_from_diff_element(right_diff),
                          left_data_opt = new_data_from_diff_element(left_diff),
                          right_data_opt$0 = right_data_opt,
                          left_data_opt$0 = left_data_opt;
                        else if(847852583 <= _eX_)
                         var
                          left_diff$0 = diff_element[2],
                          right_data_opt$1 =
                            caml_call2(Core_Map[44], new_right_map, key),
                          right_data_opt$0 = right_data_opt$1,
                          left_data_opt$0 = new_data_from_diff_element(left_diff$0);
                        else
                         var
                          right_diff$0 = diff_element[2],
                          right_data_opt$2 = new_data_from_diff_element(right_diff$0),
                          right_data_opt$0 = right_data_opt$2,
                          left_data_opt$0 =
                            caml_call2(Core_Map[44], new_left_map, key);
                        if(left_data_opt$0){
                         var x = left_data_opt$0[1];
                         if(right_data_opt$0)
                          var
                           y = right_data_opt$0[1],
                           _eY_ = caml_call2(f, key, [0, 737457313, [0, x, y]]);
                         else
                          var _eY_ = caml_call2(f, key, [0, 847852583, x]);
                         var output_data_opt = _eY_;
                        }
                        else if(right_data_opt$0)
                         var
                          y$0 = right_data_opt$0[1],
                          output_data_opt = caml_call2(f, key, [0, -57574468, y$0]);
                        else
                         var output_data_opt = 0;
                        if(! output_data_opt)
                         return caml_call2(Core_Map[47], output, key);
                        var data = output_data_opt[1];
                        return caml_call3(Core_Map[38], output, key, data);
                       });
             });
   }
   function merge_both_some(opt, _eB_, _eA_, _ez_, left_map, right_map, f){
    if(opt)
     var sth = opt[1], instrumentation = sth;
    else
     var instrumentation = no_instrumentation;
    if(_eB_)
     var sth$0 = _eB_[1], data_equal_left = sth$0;
    else
     var
      data_equal_left = function(_eU_, _eT_){return _eU_ === _eT_ ? 1 : 0;};
    if(_eA_)
     var sth$1 = _eA_[1], data_equal_right = sth$1;
    else
     var
      data_equal_right = function(_eS_, _eR_){return _eS_ === _eR_ ? 1 : 0;};
    if(_ez_)
     var sth$2 = _ez_[1], out_equal = sth$2;
    else
     var out_equal = function(_eQ_, _eP_){return _eQ_ === _eP_ ? 1 : 0;};
    return with_old2
            (instrumentation,
             left_map,
             right_map,
             function(old, new_left_map, new_right_map){
              var
               comparator = caml_call1(Core_Map[2], new_left_map),
               empty = caml_call1(Core_Map[124][1], comparator),
               match = caml_call1(Core_Map[35], new_left_map),
               match$0 = caml_call1(Core_Map[35], new_right_map);
              if(0 !== match && 0 !== match$0)
               return merge_shared_impl
                       (old,
                        new_left_map,
                        new_right_map,
                        data_equal_left,
                        data_equal_right,
                        function(old_output, key, output, diff_element){
                         var _eC_ = diff_element[1];
                         if(737457313 === _eC_)
                          var
                           match = diff_element[2],
                           right_diff = match[2],
                           left_diff = match[1],
                           _eD_ =
                             function(left_data){
                              function _eJ_(right_data){
                               return [0, left_data, right_data];
                              }
                              var _eK_ = new_data_from_diff_element(right_diff);
                              return caml_call2(Base_Option[29][4][3], _eK_, _eJ_);
                             },
                           _eE_ = new_data_from_diff_element(left_diff),
                           left_and_right_data_opt =
                             caml_call2(Base_Option[29][4][2], _eE_, _eD_);
                         else if(847852583 <= _eC_)
                          var
                           left_diff$0 = diff_element[2],
                           _eF_ =
                             function(left_data){
                              function _eL_(right_data){
                               return [0, left_data, right_data];
                              }
                              var _eM_ = caml_call2(Core_Map[44], new_right_map, key);
                              return caml_call2(Base_Option[29][4][3], _eM_, _eL_);
                             },
                           _eG_ = new_data_from_diff_element(left_diff$0),
                           left_and_right_data_opt =
                             caml_call2(Base_Option[29][4][2], _eG_, _eF_);
                         else
                          var
                           right_diff$0 = diff_element[2],
                           _eH_ =
                             function(right_data){
                              function _eN_(left_data){return [0, left_data, right_data];}
                              var _eO_ = caml_call2(Core_Map[44], new_left_map, key);
                              return caml_call2(Base_Option[29][4][3], _eO_, _eN_);
                             },
                           _eI_ = new_data_from_diff_element(right_diff$0),
                           left_and_right_data_opt =
                             caml_call2(Base_Option[29][4][2], _eI_, _eH_);
                         var prev_out = caml_call2(Core_Map[44], old_output, key);
                         if(! left_and_right_data_opt)
                          return prev_out
                                  ? caml_call2(Core_Map[47], output, key)
                                  : output;
                         var
                          match$0 = left_and_right_data_opt[1],
                          y = match$0[2],
                          x = match$0[1],
                          data = caml_call3(f, key, x, y);
                         if(prev_out){
                          var prev_out$0 = prev_out[1];
                          if(caml_call2(out_equal, data, prev_out$0)) return output;
                         }
                         return caml_call3(Core_Map[38], output, key, data);
                        });
              return empty;
             });
   }
   function merge_disjoint(opt, _ej_, left_map, right_map){
    if(opt)
     var sth = opt[1], instrumentation = sth;
    else
     var instrumentation = no_instrumentation;
    if(_ej_)
     var sth$0 = _ej_[1], data_equal = sth$0;
    else
     var data_equal = function(_ey_, _ex_){return _ey_ === _ex_ ? 1 : 0;};
    return with_old2
            (instrumentation,
             left_map,
             right_map,
             function(old, new_left_map, new_right_map){
              var
               comparator = caml_call1(Core_Map[2], new_left_map),
               empty = caml_call1(Core_Map[124][1], comparator);
              function merge_from_scratch(param){
               function _eq_(key, param, _er_){
                var
                 _es_ = caml_call1(comparator[2], key),
                 _et_ =
                   [0,
                    [1, [0, _b_, [0, caml_call1(Core_Sexp[93], _es_), 0]]],
                    0],
                 _eu_ =
                   [0,
                    caml_call1
                     (Sexplib0_Sexp_conv[7], cst_caller_has_broken_invarian),
                    _et_],
                 _ev_ =
                   [0,
                    caml_call1
                     (Sexplib0_Sexp_conv[7], cst_Incr_map_merge_disjoint),
                    _eu_],
                 _ew_ =
                   [1,
                    [0,
                     caml_call1
                      (Sexplib0_Sexp_conv[7], cst_src_incr_map_ml_596_14),
                     _ev_]];
                return caml_call1(Core[261], _ew_);
               }
               return caml_call3
                       (Core_Map[86], new_left_map, new_right_map, _eq_);
              }
              var
               l = caml_call1(Core_Map[35], new_left_map),
               r = caml_call1(Core_Map[35], new_right_map);
              if(0 === l) return 0 === r ? empty : new_right_map;
              if(0 === r) return new_left_map;
              var _ek_ = caml_call1(Core_Int[51], r);
              if(! caml_call2(Core[92], l, _ek_)){
               var _el_ = caml_call1(Core_Int[51], l);
               if(! caml_call2(Core[92], r, _el_)){
                if(! old) return merge_from_scratch(0);
                var
                 match = old[1],
                 old_result = match[3],
                 old_right_map = match[2],
                 old_left_map = match[1],
                 _em_ =
                   function(acc, param){
                    var elt = param[2], key = param[1], _ep_ = elt[1];
                    if(847852583 === _ep_)
                     return caml_call2(Core_Map[47], acc, key);
                    if(1013247643 <= _ep_){
                     var cur = elt[2][2];
                     return caml_call3(Core_Map[38], acc, key, cur);
                    }
                    var data = elt[2];
                    return caml_call3(Core_Map[38], acc, key, data);
                   },
                 with_left_changes =
                   caml_call5
                    (Core_Map[89],
                     old_left_map,
                     new_left_map,
                     data_equal,
                     old_result,
                     _em_),
                 _en_ =
                   function(acc, param){
                    var elt = param[2], key = param[1], _eo_ = elt[1];
                    if(847852583 === _eo_)
                     return caml_call2(Core_Map[48], new_left_map, key)
                             ? acc
                             : caml_call2(Core_Map[47], acc, key);
                    if(1013247643 <= _eo_){
                     var cur = elt[2][2];
                     return caml_call3(Core_Map[38], acc, key, cur);
                    }
                    var data = elt[2];
                    return caml_call3(Core_Map[38], acc, key, data);
                   };
                return caml_call5
                        (Core_Map[89],
                         old_right_map,
                         new_right_map,
                         data_equal,
                         with_left_changes,
                         _en_);
               }
              }
              return merge_from_scratch(0);
             });
   }
   function generic_mapi_with_comparator
   (witness, instrumentation, cutoff, opt, lhs, comparator, f){
    if(opt)
     var sth = opt[1], data_equal = sth;
    else
     var data_equal = function(_ei_, _eh_){return _ei_ === _eh_ ? 1 : 0;};
    var
     incremental_state = caml_call1(Incremental[4], lhs),
     empty_map = caml_call1(Core_Map[124][1], comparator),
     prev_map = [0, empty_map],
     prev_nodes = [0, empty_map],
     acc = [0, empty_map];
    function _d3_(param){return acc[1];}
    var
     result = caml_call3(Incremental[79][2][2], incremental_state, 0, _d3_),
     on_inner_change =
       witness
        ? function
         (key, opt){
          var old = acc[1];
          if(opt)
           var data = opt[1], _eg_ = caml_call3(Core_Map[38], old, key, data);
          else
           var _eg_ = caml_call2(Core_Map[47], old, key);
          acc[1] = _eg_;
          return 0;
         }
        : function
         (key, data){
          acc[1] = caml_call3(Core_Map[38], acc[1], key, data);
          return 0;
         },
     lhs_change = [];
    caml_update_dummy
     (lhs_change,
      [246,
       function(_d6_){
        function _d7_(map){
         return caml_call1
                 (instrumentation,
                  function(param){
                   function _d8_(nodes, param){
                    var changed = param[2], key = param[1], _d9_ = changed[1];
                    if(847852583 === _d9_){
                     var
                      match = caml_call2(Core_Map[45], nodes, key),
                      dep = match[2],
                      node = match[1],
                      nodes$0 = caml_call2(Core_Map[47], nodes, key);
                     caml_call2(Incremental[79][2][7], result, dep);
                     acc[1] = caml_call2(Core_Map[47], acc[1], key);
                     caml_call1(Incremental[79][2][5], node);
                     return nodes$0;
                    }
                    if(1013247643 <= _d9_){
                     var node$0 = caml_call2(Core_Map[45], nodes, key)[1];
                     caml_call1(Incremental[79][2][4], node$0);
                     return nodes;
                    }
                    function _d__(param){
                     return caml_call2(Core_Map[45], prev_map[1], key);
                    }
                    var
                     node$1 =
                       caml_call3
                        (Incremental[79][2][2], incremental_state, 0, _d__);
                    function _d$_(c){
                     var _ef_ = caml_call1(Incremental[79][2][3], node$1);
                     return caml_call2(Incremental[59], _ef_, c);
                    }
                    caml_call2(Core_Option[46], cutoff, _d$_);
                    var
                     _ea_ = caml_call1(Core[248], lhs_change),
                     _eb_ = caml_call2(Incremental[79][1][2], 0, _ea_);
                    caml_call2(Incremental[79][2][6], node$1, _eb_);
                    var
                     _ec_ =
                       caml_call2
                        (f, key, caml_call1(Incremental[79][2][3], node$1)),
                     _ed_ =
                       [0, function(_ee_){return on_inner_change(key, _ee_);}],
                     user_function_dep =
                       caml_call2(Incremental[79][1][2], _ed_, _ec_);
                    caml_call2(Incremental[79][2][6], result, user_function_dep);
                    return caml_call3
                            (Core_Map[38], nodes, key, [0, node$1, user_function_dep]);
                   }
                   var
                    new_nodes =
                      caml_call5
                       (Core_Map[89],
                        prev_map[1],
                        map,
                        data_equal,
                        prev_nodes[1],
                        _d8_);
                   prev_nodes[1] = new_nodes;
                   prev_map[1] = map;
                   return 0;
                  });
        }
        return caml_call2(Incremental[10], lhs, _d7_);
       }]);
    var
     _d4_ = caml_call1(Core[248], lhs_change),
     _d5_ = caml_call2(Incremental[79][1][2], 0, _d4_);
    caml_call2(Incremental[79][2][6], result, _d5_);
    return caml_call1(Incremental[79][2][3], result);
   }
   function filter_mapi$0(opt, cutoff, data_equal, map, f){
    if(opt)
     var sth = opt[1], instrumentation = sth;
    else
     var instrumentation = no_instrumentation;
    return with_comparator$0
            (map,
             function(comparator){
              return generic_mapi_with_comparator
                      (1, instrumentation, cutoff, data_equal, map, comparator, f);
             });
   }
   function mapi$0(opt, cutoff, data_equal, map, f){
    if(opt)
     var sth = opt[1], instrumentation = sth;
    else
     var instrumentation = no_instrumentation;
    return with_comparator$0
            (map,
             function(comparator){
              return generic_mapi_with_comparator
                      (0, instrumentation, cutoff, data_equal, map, comparator, f);
             });
   }
   function map$0(instrumentation, cutoff, data_equal, map, f){
    return mapi$0
            (instrumentation,
             cutoff,
             data_equal,
             map,
             function(param, data){return caml_call1(f, data);});
   }
   function filter_map$0(instrumentation, cutoff, data_equal, map, f){
    return filter_mapi$0
            (instrumentation,
             cutoff,
             data_equal,
             map,
             function(param, data){return caml_call1(f, data);});
   }
   function merge$0
   (instrumentation, cutoff, data_equal_left, data_equal_right, map1, map2, f){
    function _d2_(key, diff){return caml_call2(f, key, diff);}
    return filter_mapi$0
            (instrumentation,
             cutoff,
             0,
             merge
              (instrumentation,
               data_equal_left,
               data_equal_right,
               map1,
               map2,
               function(param, diff){return [0, diff];}),
             _d2_);
   }
   function unzip_mapi
   (opt, data_equal, left_result_equal, right_result_equal, input, f){
    if(opt)
     var sth = opt[1], instrumentation = sth;
    else
     var instrumentation = no_instrumentation;
    var
     pair =
       with_comparator$0
        (input,
         function(comparator){
          if(data_equal)
           var sth = data_equal[1], data_equal$0 = sth;
          else
           var
            data_equal$0 = function(_d1_, _d0_){return _d1_ === _d0_ ? 1 : 0;};
          if(left_result_equal)
           var sth$0 = left_result_equal[1], left_result_equal$0 = sth$0;
          else
           var
            left_result_equal$0 =
              function(_dZ_, _dY_){return _dZ_ === _dY_ ? 1 : 0;};
          if(right_result_equal)
           var sth$1 = right_result_equal[1], right_result_equal$0 = sth$1;
          else
           var
            right_result_equal$0 =
              function(_dX_, _dW_){return _dX_ === _dW_ ? 1 : 0;};
          var
           incremental_state = caml_call1(Incremental[4], input),
           empty_map = caml_call1(Core_Map[124][1], comparator),
           left_acc = [0, empty_map];
          function _dH_(param){return left_acc[1];}
          var
           left_result =
             caml_call3(Incremental[79][2][2], incremental_state, 0, _dH_),
           right_acc = [0, empty_map];
          function _dI_(param){return right_acc[1];}
          var
           right_result =
             caml_call3(Incremental[79][2][2], incremental_state, 0, _dI_),
           prev_map = [0, empty_map];
          function _dJ_(map){
           return caml_call1
                   (instrumentation,
                    function(param){
                     var
                      match = caml_call1(Core_Map[34], prev_map[1]),
                      match$0 = caml_call1(Core_Map[34], map);
                     a:
                     {
                      if(match){
                       if(! match$0){
                        var
                         _dO_ =
                           function(key, data){
                            var l = caml_call2(f, key, data)[1];
                            return l;
                           },
                         left$0 = caml_call2(Core_Map[58], map, _dO_),
                         _dP_ =
                           function(key, data){
                            var r = caml_call2(f, key, data)[2];
                            return r;
                           },
                         right$0 = caml_call2(Core_Map[58], map, _dP_),
                         right = right$0,
                         left = left$0;
                        break a;
                       }
                      }
                      else if(! match$0){
                       var
                        _dQ_ =
                          function(param, _dS_){
                           var
                            changed = _dS_[2],
                            key = _dS_[1],
                            right = param[2],
                            left = param[1],
                            _dT_ = changed[1];
                           if(847852583 === _dT_){
                            var _dU_ = caml_call2(Core_Map[47], right, key);
                            return [0, caml_call2(Core_Map[47], left, key), _dU_];
                           }
                           if(1013247643 <= _dT_){
                            var
                             match = changed[2],
                             new$0 = match[2],
                             prev = match[1],
                             match$0 = caml_call2(f, key, prev),
                             prev_b = match$0[2],
                             prev_a = match$0[1],
                             match$1 = caml_call2(f, key, new$0),
                             new_b = match$1[2],
                             new_a = match$1[1],
                             left$0 =
                               caml_call2(left_result_equal$0, prev_a, new_a)
                                ? left
                                : caml_call3(Core_Map[38], left, key, new_a),
                             right$0 =
                               caml_call2(right_result_equal$0, prev_b, new_b)
                                ? right
                                : caml_call3(Core_Map[38], right, key, new_b);
                            return [0, left$0, right$0];
                           }
                           var
                            element = changed[2],
                            match$2 = caml_call2(f, key, element),
                            b = match$2[2],
                            a = match$2[1],
                            _dV_ = caml_call3(Core_Map[38], right, key, b);
                           return [0, caml_call3(Core_Map[38], left, key, a), _dV_];
                          },
                        _dR_ =
                          caml_call5
                           (Core_Map[89],
                            prev_map[1],
                            map,
                            data_equal$0,
                            [0, left_acc[1], right_acc[1]],
                            _dQ_),
                        right = _dR_[2],
                        left = _dR_[1];
                       break a;
                      }
                      var right = empty_map, left = empty_map;
                     }
                     if(1 - (left_acc[1] === left ? 1 : 0))
                      caml_call1(Incremental[79][2][4], left_result);
                     if(1 - (right_acc[1] === right ? 1 : 0))
                      caml_call1(Incremental[79][2][4], right_result);
                     left_acc[1] = left;
                     right_acc[1] = right;
                     prev_map[1] = map;
                     return 0;
                    });
          }
          var
           input_change = caml_call2(Incremental[10], input, _dJ_),
           _dK_ = caml_call2(Incremental[79][1][2], 0, input_change);
          caml_call2(Incremental[79][2][6], left_result, _dK_);
          var _dL_ = caml_call2(Incremental[79][1][2], 0, input_change);
          caml_call2(Incremental[79][2][6], right_result, _dL_);
          var
           _dM_ = caml_call1(Incremental[79][2][3], right_result),
           _dN_ = [0, caml_call1(Incremental[79][2][3], left_result), _dM_];
          return caml_call2(Core_Tuple[1][8], Incremental[40], _dN_);
         });
    function _dC_(_dG_){return _dG_[2];}
    var _dD_ = caml_call2(Incremental[10], pair, _dC_);
    function _dE_(_dF_){return _dF_[1];}
    return [0, caml_call2(Incremental[10], pair, _dE_), _dD_];
   }
   function unzip
   (instrumentation, left_result_equal, right_result_equal, input){
    function _dB_(l, r){return caml_call2(Core_Tuple[1][10], l, r);}
    var
     data_equal =
       caml_call3
        (Core_Option[28], left_result_equal, right_result_equal, _dB_);
    return unzip_mapi
            (instrumentation,
             data_equal,
             left_result_equal,
             right_result_equal,
             input,
             function(param, data){return data;});
   }
   function unzip_mapi$0(opt, cutoff, data_equal, input, f){
    if(opt)
     var sth = opt[1], instrumentation = sth;
    else
     var instrumentation = no_instrumentation;
    var
     pair =
       with_comparator$0
        (input,
         function(comparator){
          if(data_equal)
           var sth = data_equal[1], data_equal$0 = sth;
          else
           var
            data_equal$0 = function(_dA_, _dz_){return _dA_ === _dz_ ? 1 : 0;};
          var
           incremental_state = caml_call1(Incremental[4], input),
           empty_map = caml_call1(Core_Map[124][1], comparator),
           prev_map = [0, empty_map],
           prev_nodes = [0, empty_map],
           left_acc = [0, empty_map];
          function _df_(param){return left_acc[1];}
          var
           left_result =
             caml_call3(Incremental[79][2][2], incremental_state, 0, _df_),
           right_acc = [0, empty_map];
          function _dg_(param){return right_acc[1];}
          var
           right_result =
             caml_call3(Incremental[79][2][2], incremental_state, 0, _dg_),
           input_change = [];
          caml_update_dummy
           (input_change,
            [246,
             function(_do_){
              function _dp_(map){
               return caml_call1
                       (instrumentation,
                        function(param){
                         function _dq_(nodes, param){
                          var changed = param[2], key = param[1], _dr_ = changed[1];
                          if(847852583 === _dr_){
                           var
                            match = caml_call2(Core_Map[45], nodes, key),
                            right_dep = match[3],
                            left_dep = match[2],
                            node = match[1],
                            nodes$0 = caml_call2(Core_Map[47], nodes, key);
                           caml_call2(Incremental[79][2][7], left_result, left_dep);
                           caml_call2(Incremental[79][2][7], right_result, right_dep);
                           left_acc[1] = caml_call2(Core_Map[47], left_acc[1], key);
                           right_acc[1] = caml_call2(Core_Map[47], right_acc[1], key);
                           caml_call1(Incremental[79][2][5], node);
                           return nodes$0;
                          }
                          if(1013247643 <= _dr_){
                           var node$0 = caml_call2(Core_Map[45], nodes, key)[1];
                           caml_call1(Incremental[79][2][4], node$0);
                           return nodes;
                          }
                          function _ds_(param){
                           return caml_call2(Core_Map[45], prev_map[1], key);
                          }
                          var
                           node$1 =
                             caml_call3
                              (Incremental[79][2][2], incremental_state, 0, _ds_);
                          function _dt_(c){
                           var _dy_ = caml_call1(Incremental[79][2][3], node$1);
                           return caml_call2(Incremental[59], _dy_, c);
                          }
                          caml_call2(Core_Option[46], cutoff, _dt_);
                          var
                           _du_ = caml_call1(Core[248], input_change),
                           _dv_ = caml_call2(Incremental[79][1][2], 0, _du_);
                          caml_call2(Incremental[79][2][6], node$1, _dv_);
                          var
                           match$0 =
                             caml_call2
                              (f, key, caml_call1(Incremental[79][2][3], node$1)),
                           right_incr = match$0[2],
                           left_incr = match$0[1],
                           _dw_ =
                             [0,
                              function(data){
                               left_acc[1] =
                                caml_call3(Core_Map[38], left_acc[1], key, data);
                               return 0;
                              }],
                           left_user_function_dep =
                             caml_call2(Incremental[79][1][2], _dw_, left_incr),
                           _dx_ =
                             [0,
                              function(data){
                               right_acc[1] =
                                caml_call3(Core_Map[38], right_acc[1], key, data);
                               return 0;
                              }],
                           right_user_function_dep =
                             caml_call2(Incremental[79][1][2], _dx_, right_incr);
                          caml_call2
                           (Incremental[79][2][6], left_result, left_user_function_dep);
                          caml_call2
                           (Incremental[79][2][6],
                            right_result,
                            right_user_function_dep);
                          return caml_call3
                                  (Core_Map[38],
                                   nodes,
                                   key,
                                   [0, node$1, left_user_function_dep, right_user_function_dep]);
                         }
                         var
                          new_nodes =
                            caml_call5
                             (Core_Map[89],
                              prev_map[1],
                              map,
                              data_equal$0,
                              prev_nodes[1],
                              _dq_);
                         prev_nodes[1] = new_nodes;
                         prev_map[1] = map;
                         return 0;
                        });
              }
              return caml_call2(Incremental[10], input, _dp_);
             }]);
          var
           _dh_ = caml_call1(Core[248], input_change),
           _di_ = caml_call2(Incremental[79][1][2], 0, _dh_);
          caml_call2(Incremental[79][2][6], left_result, _di_);
          var
           _dj_ = caml_call1(Core[248], input_change),
           _dk_ = caml_call2(Incremental[79][1][2], 0, _dj_);
          caml_call2(Incremental[79][2][6], right_result, _dk_);
          var
           _dl_ = caml_call1(Incremental[79][2][3], right_result),
           _dm_ = [0, caml_call1(Incremental[79][2][3], left_result), _dl_],
           _dn_ = caml_call1(Incremental[4], input);
          return caml_call2(Incremental[9], _dn_, _dm_);
         });
    function _da_(_de_){return _de_[2];}
    var _db_ = caml_call2(Incremental[26], pair, _da_);
    function _dc_(_dd_){return _dd_[1];}
    return [0, caml_call2(Incremental[26], pair, _dc_), _db_];
   }
   function keys(opt, map){
    if(opt)
     var sth = opt[1], instrumentation = sth;
    else
     var instrumentation = no_instrumentation;
    return with_comparator$0
            (map,
             function(comparator){
              function add(key, param, acc){
               return caml_call2(Core_Set[12], acc, key);
              }
              function remove(key, param, acc){
               return caml_call2(Core_Set[13], acc, key);
              }
              function data_equal(param, _c$_){return 1;}
              return unordered_fold
                      (instrumentation,
                       [0, data_equal],
                       0,
                       0,
                       0,
                       _c_,
                       map,
                       caml_call1(Core_Set[3][1], comparator),
                       add,
                       remove);
             });
   }
   function partition_mapi(opt, data_equal, map, f){
    if(opt)
     var sth = opt[1], instrumentation = sth;
    else
     var instrumentation = no_instrumentation;
    return with_comparator$0
            (map,
             function(comparator){
              var empty = caml_call1(Core_Map[124][1], comparator);
              function _c1_(key, param, _c9_){
               var
                second = _c9_[2],
                first = _c9_[1],
                _c__ = caml_call2(Core_Map[47], second, key);
               return [0, caml_call2(Core_Map[47], first, key), _c__];
              }
              function _c2_(key, data, param){
               var
                second = param[2],
                first = param[1],
                match = caml_call2(f, key, data);
               if(0 === match[0]){
                var data$0 = match[1];
                return [0,
                        caml_call3(Core_Map[37], first, key, data$0),
                        second];
               }
               var data$1 = match[1];
               return [0,
                       first,
                       caml_call3(Core_Map[37], second, key, data$1)];
              }
              var _c3_ = [0, empty, empty], _c4_ = 0, _c5_ = 0;
              return unordered_fold
                      (instrumentation,
                       data_equal,
                       [0,
                        function(key, param, data, _c6_){
                         var
                          second = _c6_[2],
                          first = _c6_[1],
                          match = caml_call2(f, key, data);
                         if(0 === match[0]){
                          var
                           data$0 = match[1],
                           _c7_ = caml_call2(Core_Map[47], second, key);
                          return [0,
                                  caml_call3(Core_Map[38], first, key, data$0),
                                  _c7_];
                         }
                         var
                          data$1 = match[1],
                          _c8_ = caml_call3(Core_Map[38], second, key, data$1);
                         return [0, caml_call2(Core_Map[47], first, key), _c8_];
                        }],
                       _c5_,
                       _c4_,
                       _d_,
                       map,
                       _c3_,
                       _c2_,
                       _c1_);
             });
   }
   function partition_mapi$0(instrumentation, cutoff, data_equal, map, f){
    function _c0_(param, data){return data;}
    return partition_mapi
            (instrumentation,
             0,
             mapi$0(instrumentation, cutoff, data_equal, map, f),
             _c0_);
   }
   function flatten(state, map){
    var
     _cV_ = caml_call1(Core_Map[2], map),
     result = [0, caml_call1(Core_Map[124][1], _cV_)];
    function _cW_(param){return result[1];}
    var node = caml_call3(Incremental[79][2][2], state, 0, _cW_);
    function _cX_(key, incr){
     var
      _cY_ =
        [0,
         function(a){
          result[1] = caml_call3(Core_Map[38], result[1], key, a);
          return 0;
         }],
      _cZ_ = caml_call2(Incremental[79][1][2], _cY_, incr);
     return caml_call2(Incremental[79][2][6], node, _cZ_);
    }
    caml_call2(Core_Map[51], map, _cX_);
    return caml_call1(Incremental[79][2][3], node);
   }
   function join(opt, map_incr){
    if(opt)
     var sth = opt[1], instrumentation = sth;
    else
     var instrumentation = no_instrumentation;
    return with_comparator$0
            (map_incr,
             function(comparator){
              var
               incremental_state = caml_call1(Incremental[4], map_incr),
               empty_map = caml_call1(Core_Map[124][1], comparator),
               result_map = [0, empty_map],
               old_map_of_incrs = [0, empty_map],
               current_dependencies = [0, empty_map];
              function _cL_(param){return result_map[1];}
              var
               result =
                 caml_call3(Incremental[79][2][2], incremental_state, 0, _cL_);
              function add_subnode(current_dependencies, key, data_node){
               var
                _cU_ =
                  [0,
                   function(data){
                    result_map[1] =
                     caml_call3(Core_Map[38], result_map[1], key, data);
                    return 0;
                   }],
                new_dep = caml_call2(Incremental[79][1][2], _cU_, data_node);
               caml_call2(Incremental[79][2][6], result, new_dep);
               return caml_call3
                       (Core_Map[38], current_dependencies, key, new_dep);
              }
              function remove_subnode(current_dependencies, key){
               var dep = caml_call2(Core_Map[45], current_dependencies, key);
               caml_call2(Incremental[79][2][7], result, dep);
               result_map[1] = caml_call2(Core_Map[47], result_map[1], key);
               return caml_call2(Core_Map[47], current_dependencies, key);
              }
              function _cM_(map_of_incrs){
               return caml_call1
                       (instrumentation,
                        function(param){
                         function _cO_(current_dependencies, param){
                          var diff = param[2], key = param[1], _cT_ = diff[1];
                          if(847852583 === _cT_)
                           return remove_subnode(current_dependencies, key);
                          if(1013247643 <= _cT_){
                           var data_node = diff[2][2];
                           return add_subnode
                                   (remove_subnode(current_dependencies, key), key, data_node);
                          }
                          var data_node$0 = diff[2];
                          return add_subnode(current_dependencies, key, data_node$0);
                         }
                         var _cP_ = current_dependencies[1];
                         function _cQ_(_cS_, _cR_){return _cS_ === _cR_ ? 1 : 0;}
                         var
                          new_dependency_map =
                            caml_call5
                             (Core_Map[89],
                              old_map_of_incrs[1],
                              map_of_incrs,
                              _cQ_,
                              _cP_,
                              _cO_);
                         current_dependencies[1] = new_dependency_map;
                         old_map_of_incrs[1] = map_of_incrs;
                         return 0;
                        });
              }
              var
               lhs_change = caml_call2(Incremental[10], map_incr, _cM_),
               _cN_ = caml_call2(Incremental[79][1][2], 0, lhs_change);
              caml_call2(Incremental[79][2][6], result, _cN_);
              return caml_call1(Incremental[79][2][3], result);
             });
   }
   function separate(opt, input_map, data_equal){
    if(opt)
     var sth = opt[1], instrumentation = sth;
    else
     var instrumentation = no_instrumentation;
    var incremental_state = caml_call1(Incremental[4], input_map);
    return with_comparator$0
            (input_map,
             function(comparator){
              var
               empty = caml_call1(Core_Map[124][1], comparator),
               state = [0, empty, empty, empty];
              function _cz_(param){return state[3];}
              var
               output_map_node =
                 caml_call3(Incremental[79][2][2], incremental_state, 0, _cz_);
              function make_node_depend_on_input_map_(node, input_map_changed){
               var
                _cK_ = caml_call1(Core_Lazy[37], input_map_changed),
                dependency = caml_call2(Incremental[79][1][2], 0, _cK_);
               return caml_call2(Incremental[79][2][6], node, dependency);
              }
              var input_map_changed = [];
              caml_update_dummy
               (input_map_changed,
                [246,
                 function(_cA_){
                  function _cB_(input_map){
                   return caml_call1
                           (instrumentation,
                            function(param){
                             var prev_input_map = state[1];
                             function _cC_(param, _cE_){
                              var
                               change = _cE_[2],
                               key = _cE_[1],
                               output_map = param[2],
                               expert_nodes = param[1],
                               _cF_ = change[1];
                              if(847852583 === _cF_){
                               var old_node = caml_call2(Core_Map[45], expert_nodes, key);
                               caml_call1(Incremental[79][2][5], old_node);
                               caml_call1(Incremental[79][2][4], output_map_node);
                               var _cG_ = caml_call2(Core_Map[47], output_map, key);
                               return [0,
                                       caml_call2(Core_Map[47], expert_nodes, key),
                                       _cG_];
                              }
                              if(1013247643 <= _cF_){
                               var _cH_ = caml_call2(Core_Map[45], expert_nodes, key);
                               caml_call1(Incremental[79][2][4], _cH_);
                               return [0, expert_nodes, output_map];
                              }
                              function _cD_(param){
                               return caml_call2(Core_Map[45], state[1], key);
                              }
                              var
                               node =
                                 caml_call3
                                  (Incremental[79][2][2], incremental_state, 0, _cD_);
                              make_node_depend_on_input_map_(node, input_map_changed);
                              caml_call1(Incremental[79][2][4], output_map_node);
                              var
                               _cI_ = caml_call1(Incremental[79][2][3], node),
                               _cJ_ = caml_call3(Core_Map[37], output_map, key, _cI_);
                              return [0,
                                      caml_call3(Core_Map[37], expert_nodes, key, node),
                                      _cJ_];
                             }
                             var
                              match =
                                caml_call5
                                 (Core_Map[89],
                                  prev_input_map,
                                  input_map,
                                  data_equal,
                                  [0, state[2], state[3]],
                                  _cC_),
                              output_map = match[2],
                              expert_nodes = match[1];
                             state[1] = input_map;
                             state[2] = expert_nodes;
                             state[3] = output_map;
                             return 0;
                            });
                  }
                  return caml_call2(Incremental[10], input_map, _cB_);
                 }]);
              make_node_depend_on_input_map_
               (output_map_node, input_map_changed);
              return caml_call1(Incremental[79][2][3], output_map_node);
             });
   }
   function subrange(opt, _ci_, map_incr, range){
    if(opt)
     var sth = opt[1], instrumentation = sth;
    else
     var instrumentation = no_instrumentation;
    if(_ci_)
     var sth$0 = _ci_[1], data_equal = sth$0;
    else
     var data_equal = function(_cy_, _cx_){return _cy_ === _cx_ ? 1 : 0;};
    return with_old2
            (instrumentation,
             map_incr,
             range,
             function(old, map, range){
              var compare = caml_call1(Core_Map[2], map)[1];
              function equal(l, r){
               var _cw_ = caml_call2(compare, l, r);
               return caml_call2(Core[90], _cw_, 0);
              }
              function maybe_bound_equal(a_008, b_009){
               if(a_008 === b_009) return 1;
               if(typeof a_008 === "number"){
                if(typeof b_009 === "number") return 1;
                if(1 === b_009[0]) return 0;
               }
               else{
                if(0 === a_008[0]){
                 var a_010 = a_008[1];
                 if(typeof b_009 !== "number" && 0 === b_009[0]){
                  var b_011 = b_009[1];
                  return equal(a_010, b_011);
                 }
                 return 0;
                }
                var a_012 = a_008[1];
                if(typeof b_009 === "number") return 0;
                if(0 !== b_009[0]){
                 var b_013 = b_009[1];
                 return equal(a_012, b_013);
                }
               }
               return 0;
              }
              function range_is_empty(min, max){
               a:
               if(typeof min !== "number"){
                if(0 === min[0]){
                 var min$0 = min[1];
                 if(typeof max === "number") break a;
                 if(0 === max[0]){
                  var
                   max$0 = max[1],
                   _ct_ = caml_call2(compare, min$0, max$0);
                  return caml_call2(Core[91], _ct_, 0);
                 }
                 var max$1 = max[1], min$1 = min$0;
                }
                else{
                 var _cv_ = min[1];
                 if(typeof max === "number") break a;
                 var max$1 = max[1], min$1 = _cv_;
                }
                var _cu_ = caml_call2(compare, min$1, max$1);
                return caml_call2(Core[88], _cu_, 0);
               }
               return 0;
              }
              function range_includes(min, max, key){
               var _cs_ = caml_call3(Core_Maybe_bound[22], min, key, compare);
               return _cs_
                       ? caml_call3(Core_Maybe_bound[23], max, key, compare)
                       : _cs_;
              }
              if(! range){
               var _cl_ = caml_call1(Core_Map[2], map);
               return caml_call1(Core_Map[124][1], _cl_);
              }
              var range$0 = range[1], max = range$0[2], min = range$0[1];
              function from_scratch(param){
               return caml_call3(Core_Map[107], map, min, max);
              }
              if(old){
               var _cj_ = old[1], match = _cj_[2];
               if(match){
                var
                 old_range = match[1],
                 old_min = old_range[1],
                 old_map = _cj_[1],
                 old_max = old_range[2];
                if
                 (!
                  range_is_empty(old_min, old_max)
                  &&
                   !
                   range_is_empty(min, old_max)
                   && ! range_is_empty(old_min, max)){
                 var
                  old_res = _cj_[3],
                  old_max$0 = old_range[2],
                  _ck_ =
                    function(param){
                     function apply_diff_in_intersection(param$0, _cp_){
                      var
                       data = _cp_[2],
                       key = _cp_[1],
                       map = param$0[2],
                       outside = param$0[1],
                       _co_ = range_includes(min, max, key),
                       _cq_ = _co_ ? range_includes(old_min, old_max$0, key) : _co_;
                      if(! _cq_){
                       var outside$0 = outside - 1 | 0;
                       return 0 <= outside$0
                               ? [0, outside$0, caml_call2(Core_Map[47], map, key)]
                               : caml_call1(param, from_scratch(0));
                      }
                      var _cr_ = data[1];
                      if(847852583 === _cr_)
                       return [0, outside, caml_call2(Core_Map[47], map, key)];
                      var data$0 = 1013247643 <= _cr_ ? data[2][2] : data[2];
                      return [0,
                              outside,
                              caml_call3(Core_Map[38], map, key, data$0)];
                     }
                     var
                      outside_cutoff = caml_call1(Core_Map[35], old_res) / 4 | 0,
                      with_updated_values_in_interse =
                        caml_call5
                          (Core_Map[89],
                           old_map,
                           map,
                           data_equal,
                           [0, outside_cutoff, old_res],
                           apply_diff_in_intersection)
                         [2];
                     if
                      (caml_call4
                        (Core_Tuple[1][10],
                         maybe_bound_equal,
                         maybe_bound_equal,
                         old_range,
                         range$0))
                      return with_updated_values_in_interse;
                     var
                      without_keys_out_of_range =
                        caml_call3
                         (Core_Map[107], with_updated_values_in_interse, min, max);
                     function map_append_exn(lower_part, upper_part){
                      var
                       match = caml_call2(Core_Map[106], lower_part, upper_part);
                      if(typeof match === "number")
                       return caml_call1(Core[6], cst_impossible_case_BUG_in_inc);
                      var map = match[2];
                      return map;
                     }
                     if(typeof old_min === "number")
                      var
                       _cm_ = caml_call1(Core_Map[2], map),
                       lower_part = caml_call1(Core_Map[124][1], _cm_);
                     else if(0 === old_min[0])
                      var
                       old_min$0 = old_min[1],
                       lower_part =
                         caml_call3(Core_Map[107], map, min, [1, old_min$0]);
                     else
                      var
                       old_min$1 = old_min[1],
                       lower_part =
                         caml_call3(Core_Map[107], map, min, [0, old_min$1]);
                     if(typeof old_max$0 === "number")
                      var
                       _cn_ = caml_call1(Core_Map[2], map),
                       upper_part = caml_call1(Core_Map[124][1], _cn_);
                     else if(0 === old_max$0[0])
                      var
                       old_max = old_max$0[1],
                       upper_part =
                         caml_call3(Core_Map[107], map, [1, old_max], max);
                     else
                      var
                       old_max$1 = old_max$0[1],
                       upper_part =
                         caml_call3(Core_Map[107], map, [0, old_max$1], max);
                     var
                      with_new_keys_now_in_range =
                        map_append_exn
                         (lower_part,
                          map_append_exn(without_keys_out_of_range, upper_part));
                     return with_new_keys_now_in_range;
                    };
                 return caml_call1(Core[268], _ck_);
                }
                return from_scratch(0);
               }
              }
              return from_scratch(0);
             });
   }
   function rekey(opt, data_equal, map_incr, outer_comparator, f){
    if(opt)
     var sth = opt[1], instrumentation = sth;
    else
     var instrumentation = no_instrumentation;
    function _b9_(_ch_){return _ch_[1];}
    function _b__(key, data, param){
     var adds = param[2], output = param[1], _cg_ = caml_call2(f, key, data);
     return [0, caml_call2(Core_Map[47], output, _cg_), adds];
    }
    function _b$_(key, data, param){
     var
      adds = param[2],
      output = param[1],
      new_entry = [0, caml_call2(f, key, data), data];
     return [0, output, [0, new_entry, adds]];
    }
    var
     _ca_ = [0, caml_call1(Core_Map[4], outer_comparator), 0],
     _cb_ =
       [0,
        function(param){
         var adds = param[2], output = param[1];
         function _cf_(output, param){
          var data = param[2], key = param[1];
          return caml_call3(Core_Map[37], output, key, data);
         }
         var output$0 = caml_call3(Core_List[20], adds, output, _cf_);
         return [0, output$0, 0];
        }],
     _cc_ = 0,
     _cd_ =
       unordered_fold
        (instrumentation,
         data_equal,
         [0,
          function(key, old_data, new_data, param){
           var
            adds = param[2],
            output = param[1],
            prev_key = caml_call2(f, key, old_data),
            new_key = caml_call2(f, key, new_data),
            _ce_ =
              caml_call2
               (caml_call1(Core_Map[2], output)[1], prev_key, new_key);
           if(caml_call2(Core[90], _ce_, 0))
            return [0,
                    caml_call3(Core_Map[38], output, new_key, new_data),
                    adds];
           var output$0 = caml_call2(Core_Map[47], output, prev_key);
           return [0, output$0, [0, [0, new_key, new_data], adds]];
          }],
         _cc_,
         _cb_,
         _e_,
         map_incr,
         _ca_,
         _b$_,
         _b__);
    return caml_call2(Incremental[10], _cd_, _b9_);
   }
   function index_byi(opt, data_equal, map_incr, outer_comparator, index){
    if(opt)
     var sth = opt[1], instrumentation = sth;
    else
     var instrumentation = no_instrumentation;
    return with_comparator$0
            (map_incr,
             function(inner_comparator){
              function _b5_(inner_key, data, outer_map){
               var match = caml_call2(index, inner_key, data);
               if(! match) return outer_map;
               var outer_key = match[1];
               function _b8_(param){
                if(! param)
                 return caml_call1(Core[6], cst_BUG_Hit_supposedly_impossi);
                var
                 inner_map = param[1],
                 inner_map$0 = caml_call2(Core_Map[47], inner_map, inner_key);
                return caml_call1(Core_Map[34], inner_map$0)
                        ? 0
                        : [0, inner_map$0];
               }
               return caml_call3(Core_Map[42], outer_map, outer_key, _b8_);
              }
              function _b6_(inner_key, data, outer_map){
               var match = caml_call2(index, inner_key, data);
               if(! match) return outer_map;
               var outer_key = match[1];
               function _b7_(param){
                if(! param)
                 return caml_call3
                         (Core_Map[124][2], inner_comparator, inner_key, data);
                var inner_map = param[1];
                return caml_call3(Core_Map[37], inner_map, inner_key, data);
               }
               return caml_call3(Core_Map[43], outer_map, outer_key, _b7_);
              }
              return unordered_fold
                      (instrumentation,
                       data_equal,
                       0,
                       0,
                       0,
                       _f_,
                       map_incr,
                       caml_call1(Core_Map[4], outer_comparator),
                       _b6_,
                       _b5_);
             });
   }
   function index_by(instrumentation, data_equal, map_incr, comparator, index){
    return index_byi
            (instrumentation,
             data_equal,
             map_incr,
             comparator,
             function(param, data){return caml_call1(index, data);});
   }
   function is_known(param){
    if(typeof param === "number" && param) return 0;
    return 1;
   }
   function to_option(param){
    if(typeof param === "number") return 0;
    var k = param[1];
    return [0, k];
   }
   function find_key_range_linear(from, to, map){
    var
     len = caml_call1(Core_Map[35], map),
     begin_key = caml_call2(Core_Int[81], from, len) ? 0 : 1,
     end_key = caml_call2(Core_Int[81], to, len) ? 0 : 1;
    function find_keys(fold, start_pos, advance_pos){
     function _b3_(param){
      return caml_call3
              (fold,
               map,
               [0, begin_key, end_key, start_pos],
               function(key, param$0, _b4_){
                var
                 pos = _b4_[3],
                 end_key = _b4_[2],
                 begin_key = _b4_[1],
                 begin_key$0 =
                   caml_call2(Core_Int[83], pos, from) ? [0, key] : begin_key,
                 end_key$0 =
                   caml_call2(Core_Int[83], pos, to) ? [0, key] : end_key;
                if(is_known(begin_key$0) && is_known(end_key$0))
                 return caml_call1(param, [0, begin_key$0, end_key$0, pos]);
                return [0,
                        begin_key$0,
                        end_key$0,
                        caml_call1(advance_pos, pos)];
               });
     }
     return caml_call1(Core[268], _b3_);
    }
    if(caml_call2(Core[92], to, len - from | 0))
     var
      _bZ_ = function(pos){return pos + 1 | 0;},
      match = find_keys(Core_Map[61], 0, _bZ_);
    else
     var
      _b2_ = function(pos){return pos - 1 | 0;},
      match = find_keys(Core_Map[63], len - 1 | 0, _b2_);
    var end_key$0 = match[2], begin_key$0 = match[1];
    function _b0_(begin_key){return [0, begin_key, to_option(end_key$0)];}
    var _b1_ = to_option(begin_key$0);
    return caml_call2(Core_Option[34], _b1_, _b0_);
   }
   function rank(opt, map, key){
    if(opt)
     var sth = opt[1], instrumentation = sth;
    else
     var instrumentation = no_instrumentation;
    return with_comparator$0
            (map,
             function(comparator){
              var compare_key = comparator[1];
              function same_key(a, b){
               var _bY_ = caml_call2(compare_key, a, b);
               return caml_call2(Core[90], _bY_, 0);
              }
              function process(old, new_map, new_key){
               var old$0 = old;
               for(;;){
                if(! caml_call2(Core_Map[48], new_map, new_key)) return 0;
                if(old$0){
                 var
                  match = old$0[1],
                  old_rank = match[3],
                  old_key = match[2],
                  old_map = match[1];
                 if(new_map === old_map && same_key(old_key, new_key))
                  return old_rank;
                 if(old_rank){
                  var old_rank$0 = old_rank[1];
                  if(new_map === old_map){
                   var _bQ_ = caml_call2(compare_key, new_key, old_key);
                   if(caml_call2(Core[92], _bQ_, 0))
                    var
                     upper_bound = [1, old_key],
                     lower_bound = [1, new_key],
                     subrange =
                       caml_call3(Core_Map[107], new_map, lower_bound, upper_bound),
                     _bT_ =
                       (old_rank$0 - caml_call1(Core_Map[35], subrange) | 0) - 1
                       | 0;
                   else
                    var
                     upper_bound$0 = [1, new_key],
                     lower_bound$0 = [1, old_key],
                     subrange$0 =
                       caml_call3
                        (Core_Map[107], new_map, lower_bound$0, upper_bound$0),
                     _bT_ =
                       (old_rank$0 + caml_call1(Core_Map[35], subrange$0) | 0) + 1
                       | 0;
                   return [0, _bT_];
                  }
                  if(same_key(new_key, old_key)){
                   var
                    _bR_ =
                      function(acc, param){
                       var diff = param[2], diff_key = param[1];
                       if(typeof diff !== "number"){
                        var _bV_ = diff[1];
                        if(-57574468 === _bV_){
                         var _bW_ = caml_call2(compare_key, diff_key, new_key);
                         if(caml_call2(Core[92], _bW_, 0)) return acc + 1 | 0;
                        }
                        else if(847852583 === _bV_){
                         var _bX_ = caml_call2(compare_key, diff_key, new_key);
                         if(caml_call2(Core[92], _bX_, 0)) return acc - 1 | 0;
                        }
                       }
                       return acc;
                      },
                    _bS_ = function(param, _bU_){return 1;};
                   return [0,
                           caml_call5
                            (Core_Map[89], old_map, new_map, _bS_, old_rank$0, _bR_)];
                  }
                  var
                   old_rank$1 =
                     process
                      ([0, [0, old_map, old_key, [0, old_rank$0]]],
                       new_map,
                       old_key),
                   old$1 = [0, [0, new_map, old_key, old_rank$1]],
                   old$0 = old$1;
                  continue;
                 }
                }
                return caml_call2(Core_Map[113], new_map, new_key);
               }
              }
              return with_old2(instrumentation, map, key, process);
             });
   }
   function subrange_by_rank(opt, data_equal, map, range){
    if(opt)
     var sth = opt[1], instrumentation = sth;
    else
     var instrumentation = no_instrumentation;
    function find_key_range(range){
     return with_old2
             (instrumentation,
              map,
              range,
              function(old, map, param){
               var
                to = param[2],
                from = param[1],
                _bx_ = caml_call2(Core_Int[85], to, from),
                _by_ = _bx_ || caml_call2(Core_Int[85], from, 0);
               if(_by_){
                var
                 _bz_ =
                   [0, [1, [0, _g_, [0, caml_call1(Core[389], to), 0]]], 0],
                 _bA_ =
                   [0,
                    [1, [0, _h_, [0, caml_call1(Core[389], from), 0]]],
                    _bz_],
                 _bB_ =
                   [1,
                    [0,
                     caml_call1(Sexplib0_Sexp_conv[7], cst_Invalid_indices),
                     _bA_]];
                caml_call1(Core[261], _bB_);
               }
               if(old){
                var _bC_ = old[1], _bD_ = _bC_[3];
                if(_bD_){
                 var
                  _bE_ = _bD_[1],
                  end_key_opt$0 = _bE_[2],
                  begin_key = _bE_[1],
                  match = _bC_[2],
                  old_to = match[2],
                  old_from = match[1],
                  old_map = _bC_[1],
                  compare = caml_call1(Core_Map[2], map)[1],
                  find_offset =
                    function(key, changed_key, change){
                     var _bO_ = caml_call2(compare, changed_key, key);
                     if(! caml_call2(Core_Int[85], _bO_, 0)) return 0;
                     if(typeof change !== "number"){
                      var _bP_ = change[1];
                      if(-57574468 === _bP_) return -1;
                      if(847852583 === _bP_) return 1;
                     }
                     return 0;
                    },
                  range_offset_begin = from - old_from | 0,
                  range_offset_end = to - old_to | 0,
                  adjust_and_offset =
                    function(by$1, key$1){
                     a:
                     {
                      if
                       (caml_call2(Core[88], by$1, 0)
                        && ! caml_call2(Core_Map[48], map, key$1)){var _bN_ = 1; break a;}
                      var _bN_ = 0;
                     }
                     var by$2 = by$1 + _bN_ | 0, key = key$1, by = by$2;
                     for(;;){
                      if(caml_call2(Core_Int[83], by, 0)) return [0, key];
                      if(caml_call2(Core_Int[85], by, 0))
                       var add = 1, closest_dir = -640801497;
                      else
                       var add = -1, closest_dir = -779285466;
                      var
                       match = caml_call3(Core_Map[110], map, closest_dir, key);
                      if(! match) return 0;
                      var
                       key$0 = match[1][1],
                       by$0 = by + add | 0,
                       key = key$0,
                       by = by$0;
                     }
                    },
                  diff =
                    function(init, f){
                     function _bL_(param, _bM_){return 1;}
                     return caml_call5(Core_Map[89], old_map, map, _bL_, init, f);
                    };
                 if(end_key_opt$0)
                  var
                   end_key = end_key_opt$0[1],
                   match$0 =
                     diff
                      (_i_,
                       function(param, _bI_){
                        var
                         change = _bI_[2],
                         key = _bI_[1],
                         offset_end = param[2],
                         offset_begin = param[1],
                         _bJ_ = offset_end + find_offset(end_key, key, change) | 0;
                        return [0,
                                offset_begin + find_offset(begin_key, key, change) | 0,
                                _bJ_];
                       }),
                   map_offset_end = match$0[2],
                   map_offset_begin = match$0[1],
                   end_key_opt$1 =
                     adjust_and_offset
                      (map_offset_end + range_offset_end | 0, end_key),
                   end_key_opt$2 = end_key_opt$1,
                   begin_key_opt =
                     adjust_and_offset
                      (map_offset_begin + range_offset_begin | 0, begin_key);
                 else
                  var
                   map_offset_begin$0 =
                     diff
                      (0,
                       function(offset_begin, param){
                        var change = param[2], key = param[1];
                        return offset_begin + find_offset(begin_key, key, change)
                               | 0;
                       }),
                   _bv_ = function(_bK_){return _bK_[1];},
                   _bw_ = find_key_range_linear(to, to, map),
                   end_key_opt = caml_call2(Core_Option[34], _bw_, _bv_),
                   begin_key_opt$0 =
                     adjust_and_offset
                      (map_offset_begin$0 + range_offset_begin | 0, begin_key),
                   end_key_opt$2 = end_key_opt,
                   begin_key_opt = begin_key_opt$0;
                 var _bF_ = caml_call1(Core_Map[48], map);
                 if(! caml_call2(Core_Option[48], begin_key_opt, _bF_))
                  throw caml_maybe_attach_backtrace
                         ([0, Assert_failure, _k_], 1);
                 var _bG_ = caml_call1(Core_Map[48], map);
                 if(! caml_call2(Core_Option[48], end_key_opt$2, _bG_))
                  throw caml_maybe_attach_backtrace
                         ([0, Assert_failure, _j_], 1);
                 var
                  _bH_ =
                    function(begin_key){return [0, begin_key, end_key_opt$2];};
                 return caml_call2(Core_Option[34], begin_key_opt, _bH_);
                }
               }
               return find_key_range_linear(from, to, map);
              });
    }
    function symbol(new$0, bound){
     function _bu_(param){return new$0;}
     return caml_call2(Core_Maybe_bound[21], bound, _bu_);
    }
    var
     _a9_ = caml_call1(Incremental[4], map),
     return$0 = caml_call1(Incremental[9], _a9_);
    function _a__(param){
     if(3 < param >>> 0)
      throw caml_maybe_attach_backtrace([0, Assert_failure, _l_], 1);
     switch(param){
       case 0:
        return caml_call1(return$0, _m_);
       case 1:
        var
         _bb_ =
           function(param){
            var _bt_ = param[1];
            if(typeof _bt_ !== "number"){
             var pattern_syntax_014 = _bt_[1];
             if(typeof param[2] !== "number") return pattern_syntax_014;
            }
            throw caml_maybe_attach_backtrace([0, Assert_failure, _n_], 1);
           },
         l = caml_call2(Incremental[76][3][5], range, _bb_),
         _bc_ =
           function(param){
            var pattern_syntax_015 = param[1];
            if
             (typeof pattern_syntax_015 !== "number"
              && typeof param[2] !== "number")
             return pattern_syntax_015;
            throw caml_maybe_attach_backtrace([0, Assert_failure, _o_], 1);
           },
         lb = caml_call2(Incremental[76][3][5], range, _bc_),
         _bd_ =
           function(param){
            if(typeof param[1] !== "number"){
             var match = param[2];
             if(typeof match !== "number"){
              var pattern_syntax_016 = match[1];
              return pattern_syntax_016;
             }
            }
            throw caml_maybe_attach_backtrace([0, Assert_failure, _p_], 1);
           },
         u = caml_call2(Incremental[76][3][5], range, _bd_),
         _be_ =
           function(param){
            if(typeof param[1] !== "number"){
             var pattern_syntax_017 = param[2];
             if(typeof pattern_syntax_017 !== "number")
              return pattern_syntax_017;
            }
            throw caml_maybe_attach_backtrace([0, Assert_failure, _q_], 1);
           },
         ub = caml_call2(Incremental[76][3][5], range, _be_),
         let_syntax_022 = find_key_range(caml_call2(Incremental[40], l, u)),
         _bf_ =
           function(param){
            var
             match = param[2],
             ub = match[2],
             lb = match[1],
             key_range = param[1];
            if(! key_range) return 0;
            var _br_ = key_range[1], match$0 = _br_[2], begin_key = _br_[1];
            if(! match$0) return [0, [0, symbol(begin_key, lb), 0]];
            var end_key = match$0[1], _bs_ = symbol(end_key, ub);
            return [0, [0, symbol(begin_key, lb), _bs_]];
           },
         _bg_ = caml_call2(Incremental[76][3][20], lb, ub),
         _bh_ = caml_call2(Incremental[76][3][20], let_syntax_022, _bg_);
        return caml_call2(Incremental[76][3][5], _bh_, _bf_);
       case 2:
        var
         _bi_ =
           function(param){
            var _bq_ = param[1];
            if(typeof _bq_ !== "number"){
             var pattern_syntax_018 = _bq_[1];
             if(typeof param[2] === "number") return pattern_syntax_018;
            }
            throw caml_maybe_attach_backtrace([0, Assert_failure, _r_], 1);
           },
         l$0 = caml_call2(Incremental[76][3][5], range, _bi_),
         _bj_ =
           function(param){
            var pattern_syntax_019 = param[1];
            if
             (typeof pattern_syntax_019 !== "number"
              && typeof param[2] === "number")
             return pattern_syntax_019;
            throw caml_maybe_attach_backtrace([0, Assert_failure, _s_], 1);
           },
         lb$0 = caml_call2(Incremental[76][3][5], range, _bj_),
         let_syntax_026 =
           find_key_range(caml_call2(Incremental[40], l$0, l$0)),
         _bk_ =
           function(param){
            var lb = param[2], key_range = param[1];
            if(! key_range) return 0;
            var key = key_range[1][1];
            return [0, [0, symbol(key, lb), 0]];
           },
         _bl_ = caml_call2(Incremental[76][3][20], let_syntax_026, lb$0);
        return caml_call2(Incremental[76][3][5], _bl_, _bk_);
       default:
        var
         _bm_ =
           function(param){
            if(typeof param[1] === "number"){
             var match = param[2];
             if(typeof match !== "number"){
              var pattern_syntax_020 = match[1];
              return pattern_syntax_020;
             }
            }
            throw caml_maybe_attach_backtrace([0, Assert_failure, _t_], 1);
           },
         u$0 = caml_call2(Incremental[76][3][5], range, _bm_),
         _bn_ =
           function(param){
            if(typeof param[1] === "number"){
             var pattern_syntax_021 = param[2];
             if(typeof pattern_syntax_021 !== "number")
              return pattern_syntax_021;
            }
            throw caml_maybe_attach_backtrace([0, Assert_failure, _u_], 1);
           },
         ub$0 = caml_call2(Incremental[76][3][5], range, _bn_),
         let_syntax_029 =
           find_key_range(caml_call2(Incremental[40], u$0, u$0)),
         _bo_ =
           function(param){
            var ub = param[2], key_range = param[1];
            if(! key_range) return _v_;
            var key = key_range[1][1];
            return [0, [0, 0, symbol(key, ub)]];
           },
         _bp_ = caml_call2(Incremental[76][3][20], let_syntax_029, ub$0);
        return caml_call2(Incremental[76][3][5], _bp_, _bo_);
     }
    }
    function _a$_(param){
     return typeof param[1] === "number"
             ? typeof param[2] === "number" ? 0 : 3
             : typeof param[2] === "number" ? 2 : 1;
    }
    var
     _ba_ = caml_call2(Incremental[76][3][5], range, _a$_),
     key_range = caml_call2(Incremental[76][3][1], _ba_, _a__);
    return subrange(0, data_equal, map, key_range);
   }
   function transpose(opt, _aW_, k2_comparator, m){
    if(opt)
     var sth = opt[1], instrumentation = sth;
    else
     var instrumentation = no_instrumentation;
    if(_aW_)
     var sth$0 = _aW_[1], data_equal = sth$0;
    else
     var data_equal = function(_a8_, _a7_){return _a8_ === _a7_ ? 1 : 0;};
    return with_comparator$0
            (m,
             function(k1_comparator){
              function update(k1, old_data, new_data, acc){
               function _a1_(acc, param){
                var diff = param[2], k2 = param[1], _a2_ = diff[1];
                if(847852583 === _a2_)
                 var value = 0;
                else
                 var
                  x = 1013247643 <= _a2_ ? diff[2][2] : diff[2],
                  value = [0, x];
                function _a3_(acc_inner){
                 function _a4_(param){return value;}
                 var
                  _a5_ = caml_call1(Core_Map[124][1], k1_comparator),
                  _a6_ = caml_call2(Core_Option[39], acc_inner, _a5_),
                  acc_inner$0 = caml_call3(Core_Map[42], _a6_, k1, _a4_);
                 return caml_call1(Core_Map[34], acc_inner$0)
                         ? 0
                         : [0, acc_inner$0];
                }
                return caml_call3(Core_Map[42], acc, k2, _a3_);
               }
               return caml_call5
                       (Core_Map[89], old_data, new_data, data_equal, acc, _a1_);
              }
              function add(key, data){
               var _aZ_ = caml_call1(Core_Map[4], k2_comparator);
               return function(_a0_){return update(key, _aZ_, data, _a0_);};
              }
              function remove(key, data){
               var _aX_ = caml_call1(Core_Map[4], k2_comparator);
               return function(_aY_){return update(key, data, _aX_, _aY_);};
              }
              return unordered_fold
                      (instrumentation,
                       0,
                       [0, update],
                       0,
                       0,
                       _w_,
                       m,
                       caml_call1(Core_Map[4], k2_comparator),
                       add,
                       remove);
             });
   }
   function collapse_by(opt, data_equal, map_incr, merge_keys, comparator){
    if(opt)
     var sth = opt[1], instrumentation = sth;
    else
     var instrumentation = no_instrumentation;
    function _aQ_(outer_key, inner_key, param, acc){
     var _aV_ = caml_call2(merge_keys, outer_key, inner_key);
     return caml_call2(Core_Map[47], acc, _aV_);
    }
    function _aR_(outer_key, inner_key, data, acc){
     var _aU_ = caml_call2(merge_keys, outer_key, inner_key);
     return caml_call3(Core_Map[37], acc, _aU_, data);
    }
    var _aS_ = caml_call1(Core_Map[4], comparator);
    return unordered_fold_nested_maps
            (instrumentation,
             data_equal,
             _x_,
             [0,
              function(outer_key, inner_key, param, new_data, acc){
               var _aT_ = caml_call2(merge_keys, outer_key, inner_key);
               return caml_call3(Core_Map[38], acc, _aT_, new_data);
              }],
             map_incr,
             _aS_,
             _aR_,
             _aQ_);
   }
   function collapse(instrumentation, data_equal, map_incr, inner_comparator){
    return with_comparator$0
            (map_incr,
             function(outer_comparator){
              var
               inner_comparator$0 = inner_comparator[1],
               comparator =
                 caml_call2
                  (Core_Tuple[1][5], outer_comparator, inner_comparator$0);
              return collapse_by
                      (instrumentation,
                       data_equal,
                       map_incr,
                       Core_Tuple[1][6],
                       [0, comparator]);
             });
   }
   function expand
   (opt, data_equal, map_incr, outer_comparator, inner_comparator){
    if(opt)
     var sth = opt[1], instrumentation = sth;
    else
     var instrumentation = no_instrumentation;
    function _aF_(param, _aN_, acc){
     var inner_key = param[2], outer_key = param[1];
     function _aO_(param){
      if(! param) return 0;
      var
       map = param[1],
       map$0 = caml_call2(Core_Map[47], map, inner_key),
       _aP_ = 1 - caml_call1(Core_Map[34], map$0);
      return caml_call2(Core_Option[60], _aP_, map$0);
     }
     return caml_call3(Core_Map[42], acc, outer_key, _aO_);
    }
    function _aG_(param, data, acc){
     var inner_key = param[2], outer_key = param[1];
     function _aM_(param){
      if(! param)
       return caml_call3(Core_Map[5], inner_comparator, inner_key, data);
      var map = param[1];
      return caml_call3(Core_Map[37], map, inner_key, data);
     }
     return caml_call3(Core_Map[43], acc, outer_key, _aM_);
    }
    var _aH_ = caml_call1(Core_Map[4], outer_comparator), _aI_ = 0, _aJ_ = 0;
    return unordered_fold
            (instrumentation,
             data_equal,
             [0,
              function(param, _aK_, new_data, acc){
               var inner_key = param[2], outer_key = param[1];
               function _aL_(param){
                if(! param)
                 return caml_call3
                         (Core_Map[5], inner_comparator, inner_key, new_data);
                var map = param[1];
                return caml_call3(Core_Map[38], map, inner_key, new_data);
               }
               return caml_call3(Core_Map[43], acc, outer_key, _aL_);
              }],
             _aJ_,
             _aI_,
             _y_,
             map_incr,
             _aH_,
             _aG_,
             _aF_);
   }
   function counti(opt, data_equal, map_incr, f){
    if(opt)
     var sth = opt[1], instrumentation = sth;
    else
     var instrumentation = no_instrumentation;
    function _aE_(key, data, count){
     return caml_call2(f, key, data) ? count - 1 | 0 : count;
    }
    return unordered_fold
            (instrumentation,
             data_equal,
             0,
             0,
             0,
             _z_,
             map_incr,
             0,
             function(key, data, count){
              return caml_call2(f, key, data) ? count + 1 | 0 : count;
             },
             _aE_);
   }
   function count(instrumentation, data_equal, map_incr, f){
    return counti
            (instrumentation,
             data_equal,
             map_incr,
             function(param, data){return caml_call1(f, data);});
   }
   function existsi(instrumentation, data_equal, map_incr, f){
    function _aC_(count){return caml_call2(Core[93], count, 0);}
    var _aD_ = counti(instrumentation, data_equal, map_incr, f);
    return caml_call2(Incremental[10], _aD_, _aC_);
   }
   function exists(instrumentation, data_equal, map_incr, f){
    return existsi
            (instrumentation,
             data_equal,
             map_incr,
             function(param, data){return caml_call1(f, data);});
   }
   function sum(opt, data_equal, map_incr, Group, f){
    if(opt)
     var sth = opt[1], instrumentation = sth;
    else
     var instrumentation = no_instrumentation;
    function _ay_(param, v, acc){
     var _aB_ = caml_call1(f, v);
     return caml_call2(Group[3], acc, _aB_);
    }
    function _az_(param, v, acc){
     var _aA_ = caml_call1(f, v);
     return caml_call2(Group[2], acc, _aA_);
    }
    return unordered_fold
            (instrumentation,
             data_equal,
             0,
             0,
             0,
             _A_,
             map_incr,
             Group[1],
             _az_,
             _ay_);
   }
   function observe_changes_exn(opt, map, f){
    if(opt)
     var sth = opt[1], data_equal = sth;
    else
     var data_equal = function(_ax_, _aw_){return _ax_ === _aw_ ? 1 : 0;};
    var
     state = caml_call1(Incremental[4], map),
     scope = caml_call2(Incremental[50][2], state, 0);
    if(1 - caml_call1(Incremental[50][4], scope))
     caml_call1(Core[6], cst_Incr_map_observe_changes_e);
    function empty_version_of(map){
     var _av_ = caml_call1(Core_Map[3], map);
     return caml_call1(Core_Map[4], _av_);
    }
    var observer = caml_call2(Incremental[53], 0, map);
    function _as_(diff_elt){
     if(typeof diff_elt === "number"){
      var match = caml_call1(Incremental[52][5], observer);
      if(0 === match[0])
       var
        final_value = match[1],
        _au_ = [0, [0, final_value, empty_version_of(final_value)]];
      else
       var _au_ = 0;
      var before_and_after = _au_;
     }
     else if(0 === diff_elt[0])
      var
       v = diff_elt[1],
       before_and_after = [0, [0, empty_version_of(v), v]];
     else
      var
       v2 = diff_elt[2],
       v1 = diff_elt[1],
       before_and_after = [0, [0, v1, v2]];
     if(! before_and_after) return 0;
     var
      match$0 = before_and_after[1],
      after = match$0[2],
      before = match$0[1];
     function _at_(param, update){return caml_call1(f, update);}
     return caml_call5(Core_Map[89], before, after, data_equal, 0, _at_);
    }
    return caml_call2(Incremental[52][8], observer, _as_);
   }
   function for_alli(instrumentation, data_equal, map_incr, f){
    function _aq_(count){return caml_call2(Core[90], count, 0);}
    var
     _ar_ =
       counti
        (instrumentation,
         data_equal,
         map_incr,
         function(key, data){return 1 - caml_call2(f, key, data);});
    return caml_call2(Incremental[10], _ar_, _aq_);
   }
   function for_all(instrumentation, data_equal, map_incr, f){
    return for_alli
            (instrumentation,
             data_equal,
             map_incr,
             function(param, data){return caml_call1(f, data);});
   }
   function unordered_fold$0
   (opt,
    data_equal,
    update,
    specialized_initial,
    finalize,
    revert_to_init_when_empty,
    map,
    init,
    add,
    remove){
    if(opt)
     var sth = opt[1], instrumentation = sth;
    else
     var instrumentation = no_instrumentation;
    return unordered_fold
            (instrumentation,
             data_equal,
             update,
             specialized_initial,
             finalize,
             revert_to_init_when_empty,
             map,
             init,
             add,
             remove);
   }
   function unordered_fold_nested_maps$0
   (opt,
    data_equal,
    revert_to_init_when_empty,
    update,
    map,
    init,
    add,
    remove){
    if(opt)
     var sth = opt[1], instrumentation = sth;
    else
     var instrumentation = no_instrumentation;
    return unordered_fold_nested_maps
            (instrumentation,
             data_equal,
             revert_to_init_when_empty,
             update,
             map,
             init,
             add,
             remove);
   }
   var For_testing = [0, find_key_range_linear];
   function M(K){return [0];}
   function create(opt, _ae_, input_map, comparator){
    if(opt)
     var sth = opt[1], instrumentation = sth;
    else
     var instrumentation = no_instrumentation;
    if(_ae_)
     var sth$0 = _ae_[1], data_equal = sth$0;
    else
     var data_equal = function(_ap_, _ao_){return _ap_ === _ao_ ? 1 : 0;};
    var self = [];
    caml_update_dummy
     (self,
      [246,
       function(param){
        function _ag_(input_map){
         return caml_call1
                 (instrumentation,
                  function(param){
                   var _ai_ = caml_obj_tag(self);
                   a:
                   if(250 === _ai_)
                    var self$0 = self[1];
                   else{
                    if(246 !== _ai_ && 244 !== _ai_){var self$0 = self; break a;}
                    var self$0 = caml_call1(CamlinternalLazy[2], self);
                   }
                   function _aj_(param, _ak_){
                    var
                     changed_value = _ak_[2],
                     key = _ak_[1],
                     entries = caml_call2(Core_Map[41], self$0[2], key);
                    function _al_(entry){
                     var _am_ = changed_value[1];
                     if(847852583 === _am_)
                      var _an_ = 0;
                     else
                      var
                       new_value =
                         1013247643 <= _am_ ? changed_value[2][2] : changed_value[2],
                       _an_ = [0, new_value];
                     entry[1] = _an_;
                     return caml_call1(Incremental[79][2][4], entry[2]);
                    }
                    return caml_call2(Core_List[19], entries, _al_);
                   }
                   caml_call5
                    (Core_Map[89], self$0[1], input_map, data_equal, 0, _aj_);
                   self$0[1] = input_map;
                   return 0;
                  });
        }
        var
         updater_node = caml_call2(Incremental[10], input_map, _ag_),
         empty_map = caml_call1(Core_Map[124][1], comparator),
         _ah_ = caml_call1(Incremental[4], input_map);
        return [0,
                empty_map,
                empty_map,
                updater_node,
                caml_call2(Incremental[50][2], _ah_, 0)];
       }]);
    var _af_ = caml_obj_tag(self);
    if(250 === _af_) return self[1];
    if(246 !== _af_ && 244 !== _af_) return self;
    return caml_call1(CamlinternalLazy[2], self);
   }
   function find(t, key){
    var match = caml_call2(Core_Map[41], t[2], key);
    if(match){
     var entry = match[1];
     return caml_call1(Incremental[79][2][3], entry[2]);
    }
    var incremental_state = caml_call1(Incremental[4], t[3]);
    function _U_(param){
     var entry = [];
     caml_update_dummy
      (entry,
       [246,
        function(param){
         function _X_(param){return caml_call1(Core[248], entry)[1];}
         var
          _Y_ =
            [0,
             function(is_now_observable){
              var ___ = caml_obj_tag(entry);
              a:
              if(250 === ___)
               var entry$0 = entry[1];
              else{
               if(246 !== ___ && 244 !== ___){var entry$0 = entry; break a;}
               var entry$0 = caml_call1(CamlinternalLazy[2], entry);
              }
              var current_entries = caml_call2(Core_Map[41], t[2], key);
              function _$_(_ad_){return entry$0 === _ad_ ? 1 : 0;}
              var is_linked = caml_call2(Core_List[23], current_entries, _$_);
              if(caml_call2(Core_Bool[32], is_linked, is_now_observable))
               return 0;
              if(is_now_observable){
               var
                _aa_ =
                  function(param){
                   if(param){
                    var other_entries = param[1];
                    if(other_entries){
                     var other_entry = other_entries[1];
                     entry$0[1] = other_entry[1];
                     return [0, entry$0, other_entries];
                    }
                   }
                   entry$0[1] = caml_call2(Core_Map[44], t[1], key);
                   return [0, entry$0, 0];
                  };
               t[2] = caml_call3(Core_Map[43], t[2], key, _aa_);
               return 0;
              }
              function _ab_(x){return 1 - (entry$0 === x ? 1 : 0);}
              var
               new_entries = caml_call2(Core_List[12], current_entries, _ab_),
               _ac_ =
                 caml_call1(Core_List[18], new_entries)
                  ? caml_call2(Core_Map[47], t[2], key)
                  : caml_call3(Core_Map[38], t[2], key, new_entries);
              t[2] = _ac_;
              return 0;
             }],
          _Z_ = caml_call3(Incremental[79][2][2], incremental_state, _Y_, _X_);
         return [0, caml_call2(Core_Map[44], t[1], key), _Z_];
        }]);
     var _V_ = caml_obj_tag(entry);
     a:
     if(250 === _V_)
      var entry$0 = entry[1];
     else{
      if(246 !== _V_ && 244 !== _V_){var entry$0 = entry; break a;}
      var entry$0 = caml_call1(CamlinternalLazy[2], entry);
     }
     var _W_ = caml_call2(Incremental[79][1][2], 0, t[3]);
     caml_call2(Incremental[79][2][6], entry$0[2], _W_);
     return caml_call1(Incremental[79][2][3], entry$0[2]);
    }
    return caml_call3(Incremental[50][3], incremental_state, t[4], _U_);
   }
   function sexp_of_t(sexp_of_key, sexp_of_value, t){
    function _J_(key, data){
     var _K_ = data[1];
     if(737457313 === _K_)
      var
       match = data[2],
       entries = match[2],
       x = match[1],
       actual_value = [0, x],
       entries$0 = entries,
       actual_value$0 = actual_value;
     else if(847852583 <= _K_)
      var x$0 = data[2], entries$0 = 0, actual_value$0 = [0, x$0];
     else
      var y = data[2], entries$0 = y, actual_value$0 = 0;
     var _L_ = 0, _M_ = 0;
     function _N_(entry){
      var
       saved_value = entry[1],
       node = entry[2],
       node$0 = caml_call1(Incremental[79][2][3], node),
       match = caml_call1(Incremental[67], node$0),
       _P_ = caml_call1(Incremental[5], node$0),
       match$0 = caml_call2(Core_Option[60], _P_, 0),
       _Q_ = 1 - caml_call1(Incremental[6], node$0),
       match$1 = caml_call2(Core_Option[60], _Q_, 0),
       _R_ = 1 - caml_call1(Incremental[7], node$0),
       _S_ = caml_call2(Core_Option[60], _R_, 0),
       match$2 = 0;
      if(_S_)
       var
        v = _S_[1],
        match$3 =
          [0, [1, [0, _B_, [0, caml_call1(Core[620], v), 0]]], match$2];
      else
       var match$3 = match$2;
      if(match$1)
       var
        v$0 = match$1[1],
        match$4 =
          [0, [1, [0, _C_, [0, caml_call1(Core[620], v$0), 0]]], match$3];
      else
       var match$4 = match$3;
      if(match$0)
       var
        v$1 = match$0[1],
        match$5 =
          [0, [1, [0, _D_, [0, caml_call1(Core[620], v$1), 0]]], match$4];
      else
       var match$5 = match$4;
      if(match)
       var
        v$2 = match[1],
        _T_ =
          [0, [1, [0, _E_, [0, caml_call1(Core_Info[9], v$2), 0]]], match$5];
      else
       var _T_ = match$5;
      return [1,
              [0,
               [1,
                [0,
                 _F_,
                 [0, caml_call2(Core[515], sexp_of_value, saved_value), 0]]],
               _T_]];
     }
     var
      match$0 =
        [0,
         [1, [0, _G_, [0, caml_call2(Core[472], _N_, entries$0), _M_]]],
         _L_];
     if(actual_value$0)
      var
       v = actual_value$0[1],
       _O_ = [0, [1, [0, _H_, [0, caml_call1(sexp_of_value, v), 0]]], match$0];
     else
      var _O_ = match$0;
     return [0,
             [1,
              [0, [1, [0, _I_, [0, caml_call1(sexp_of_key, key), 0]]], _O_]]];
    }
    var info_per_key = caml_call3(Core_Map[84], t[1], t[2], _J_);
    return [1, caml_call1(Core_Map[80], info_per_key)];
   }
   caml_call1(Ppx_inline_test_lib[7], cst_incr_map);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incr_map);
   var
    Incr_map =
      [0,
       of_set,
       filter_mapi,
       mapi,
       filter_map,
       map,
       filter_mapi$0,
       map$0,
       filter_map$0,
       mapi$0,
       partition_mapi,
       partition_mapi$0,
       unordered_fold$0,
       unordered_fold_with_extra,
       cutoff,
       mapi_count,
       map_count,
       mapi_min,
       mapi_max,
       map_min,
       map_max,
       min_value,
       max_value,
       mapi_bounds,
       map_bounds,
       value_bounds,
       merge,
       merge_both_some,
       merge_disjoint,
       merge$0,
       unzip,
       unzip_mapi,
       unzip_mapi$0,
       flatten,
       join,
       separate,
       keys,
       rank,
       subrange,
       subrange_by_rank,
       rekey,
       index_byi,
       index_by,
       unordered_fold_nested_maps$0,
       transpose,
       collapse,
       collapse_by,
       expand,
       counti,
       count,
       for_alli,
       for_all,
       existsi,
       exists,
       sum,
       observe_changes_exn,
       [0, create, find, M, [0, sexp_of_t]],
       For_testing,
       function(Incr){
        function flatten$0(x){return flatten(Incr[2][3], x);}
        function M(K){return [0];}
        return [0,
                of_set,
                filter_mapi,
                mapi,
                filter_map,
                map,
                filter_mapi$0,
                mapi$0,
                filter_map$0,
                map$0,
                partition_mapi,
                partition_mapi$0,
                unordered_fold$0,
                unordered_fold_with_extra,
                cutoff,
                mapi_count,
                map_count,
                mapi_min,
                mapi_max,
                map_min,
                map_max,
                min_value,
                max_value,
                mapi_bounds,
                map_bounds,
                value_bounds,
                merge,
                merge_both_some,
                merge_disjoint,
                unzip,
                unzip_mapi,
                unzip_mapi$0,
                merge$0,
                flatten$0,
                join,
                separate,
                keys,
                rank,
                subrange,
                subrange_by_rank,
                rekey,
                index_byi,
                index_by,
                unordered_fold_nested_maps$0,
                transpose,
                collapse,
                collapse_by,
                expand,
                counti,
                count,
                for_alli,
                for_all,
                existsi,
                exists,
                sum,
                observe_changes_exn,
                [0, create, find, M, [0, sexp_of_t]],
                For_testing];
       }];
   runtime.caml_register_global(71, Incr_map, cst_Incr_map$0);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
