// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Javascript_profiling
//# unitInfo: Requires: Js_of_ocaml__Js, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Stdlib
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Javascript_profiling$0 = "Javascript_profiling",
    cst_javascript_profiling$0 = "javascript_profiling",
    caml_jsstring_of_string = runtime.caml_jsstring_of_string;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Javascript_profiling$0);
   caml_call1
    (Ppx_bench_lib_Benchmark_accumu[1][1], cst_javascript_profiling$0);
   caml_call1
    (Ppx_expect_runtime[1][1], "javascript_profiling/javascript_profiling.ml");
   caml_call2
    (Ppx_inline_test_lib[6],
     cst_javascript_profiling$0,
     "javascript_profiling.ml");
   var
    cst_before = "_before",
    cst_after = "_after",
    cst_javascript_profiling = cst_javascript_profiling$0,
    cst_Javascript_profiling = cst_Javascript_profiling$0;
   function perf(param){
    var t0 = Js_of_ocaml_Js[52][1];
    return t0.performance;
   }
   function mark(name){return perf(0).mark(caml_jsstring_of_string(name));}
   function measure(name, start, end){
    return perf(0).measure
            (caml_jsstring_of_string(name),
             caml_jsstring_of_string(start),
             caml_jsstring_of_string(end));
   }
   function record(name, f){
    var
     before_name = caml_call2(Stdlib[28], name, cst_before),
     after_name = caml_call2(Stdlib[28], name, cst_after);
    mark(before_name);
    var res = caml_call1(f, 0);
    mark(after_name);
    measure(name, before_name, after_name);
    return res;
   }
   function clear_marks(param){return perf(0).clearMarks();}
   function clear_measures(param){return perf(0).clearMeasures();}
   var Manual = [0, mark, measure];
   caml_call1(Ppx_inline_test_lib[7], cst_javascript_profiling);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Javascript_profiling);
   var
    Javascript_profiling = [0, record, clear_marks, clear_measures, Manual];
   runtime.caml_register_global
    (20, Javascript_profiling, cst_Javascript_profiling$0);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLjAsImZpbGUiOiJqYXZhc2NyaXB0X3Byb2ZpbGluZy5jbWEuanMiLCJzb3VyY2VSb290IjoiIiwibmFtZXMiOlsicGVyZiIsIm1hcmsiLCJuYW1lIiwibWVhc3VyZSIsInN0YXJ0IiwiZW5kIiwicmVjb3JkIiwiZiIsImJlZm9yZV9uYW1lIiwiYWZ0ZXJfbmFtZSIsInJlcyIsImNsZWFyX21hcmtzIiwiY2xlYXJfbWVhc3VyZXMiXSwic291cmNlcyI6WyIvVXNlcnMvdHlsYW5tb3Jhbi8ub3BhbS81LjEuMS9saWIvaW5jcl9kb20vamF2YXNjcmlwdF9wcm9maWxpbmcvamF2YXNjcmlwdF9wcm9maWxpbmcubWwiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Rzs7Ozs7Rzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztZQVlJQTtJQUE2Qjs7R0FBOEI7WUFDM0RDLEtBQUtDLE1BQU8sT0FEWkYsYUFDNEIsd0JBQXZCRSxPQUF1QztZQUU1Q0MsUUFBU0QsTUFBTUUsT0FBT0M7SUFDeEIsT0FKRUw7YUFJaUIsd0JBRFJFO2FBQ3lCLHdCQURuQkU7YUFDcUMsd0JBRDlCQztHQUM4QztZQUdwRUMsT0FBT0osTUFBTUs7SUFDZjtLQUFJQyxjQUFjLHVCQURUTjtLQUVMTyxhQUFhLHVCQUZSUDtJQU5QRCxLQU9FTztJQUdNLElBQU5FLE1BQU0sV0FKS0g7SUFOYk4sS0FRRVE7SUFORk4sUUFJT0QsTUFDTE0sYUFDQUM7SUFJSixPQUZJQztHQUdEO1lBR0RDLG1CQUFpQixPQWpCakJYLHFCQWlCc0M7WUFDdENZLHNCQUFvQixPQWxCcEJaLHdCQWtCNEM7R0FFaEMsaUJBbkJaQyxNQUVBRTs7Ozs7OytCQUlBRyxRQVVBSyxhQUNBQzs7OztFIiwic291cmNlc0NvbnRlbnQiOlsib3BlbiBKc19vZl9vY2FtbFxuXG5jbGFzcyB0eXBlIHBlcmZvcm1hbmNlID0gb2JqZWN0XG4gIG1ldGhvZCBtYXJrIDogSnMuanNfc3RyaW5nIEpzLnQgLT4gdW5pdCBKcy5tZXRoXG5cbiAgbWV0aG9kIG1lYXN1cmUgOlxuICAgIEpzLmpzX3N0cmluZyBKcy50IC0+IEpzLmpzX3N0cmluZyBKcy50IC0+IEpzLmpzX3N0cmluZyBKcy50IC0+IHVuaXQgSnMubWV0aFxuXG4gIG1ldGhvZCBjbGVhck1hcmtzIDogdW5pdCBKcy5tZXRoXG4gIG1ldGhvZCBjbGVhck1lYXN1cmVzIDogdW5pdCBKcy5tZXRoXG5lbmRcblxubGV0IHBlcmYgKCkgOiBwZXJmb3JtYW5jZSBKcy50ID0gSnMuVW5zYWZlLmdsb2JhbCMjLnBlcmZvcm1hbmNlXG5sZXQgbWFyayBuYW1lID0gKHBlcmYgKCkpIyNtYXJrIChKcy5zdHJpbmcgbmFtZSlcblxubGV0IG1lYXN1cmUgfm5hbWUgfnN0YXJ0IH5lbmRfID1cbiAgKHBlcmYgKCkpIyNtZWFzdXJlIChKcy5zdHJpbmcgbmFtZSkgKEpzLnN0cmluZyBzdGFydCkgKEpzLnN0cmluZyBlbmRfKVxuOztcblxubGV0IHJlY29yZCBuYW1lIH5mID1cbiAgbGV0IGJlZm9yZV9uYW1lID0gbmFtZSBeIFwiX2JlZm9yZVwiIGluXG4gIGxldCBhZnRlcl9uYW1lID0gbmFtZSBeIFwiX2FmdGVyXCIgaW5cbiAgbGV0ICgpID0gbWFyayBiZWZvcmVfbmFtZSBpblxuICBsZXQgcmVzID0gZiAoKSBpblxuICBsZXQgKCkgPSBtYXJrIGFmdGVyX25hbWUgaW5cbiAgbWVhc3VyZSB+bmFtZSB+c3RhcnQ6YmVmb3JlX25hbWUgfmVuZF86YWZ0ZXJfbmFtZTtcbiAgcmVzXG47O1xuXG5sZXQgY2xlYXJfbWFya3MgKCkgPSAocGVyZiAoKSkjI2NsZWFyTWFya3NcbmxldCBjbGVhcl9tZWFzdXJlcyAoKSA9IChwZXJmICgpKSMjY2xlYXJNZWFzdXJlc1xuXG5tb2R1bGUgTWFudWFsID0gc3RydWN0XG4gIGxldCBtYXJrID0gbWFya1xuICBsZXQgbWVhc3VyZSA9IG1lYXN1cmVcbmVuZFxuIl19
