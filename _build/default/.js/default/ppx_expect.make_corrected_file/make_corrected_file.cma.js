// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Make_corrected_file__
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Make_corrected_file = [0],
    Make_corrected_file$0 = [0, Make_corrected_file];
   runtime.caml_register_global
    (0, Make_corrected_file$0, "Make_corrected_file__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Make_corrected_file__Import
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Make_corrected_file_Import = [0];
   runtime.caml_register_global
    (0, Make_corrected_file_Import, "Make_corrected_file__Import");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Make_corrected_file
//# unitInfo: Requires: Base, Base__Char, Base__Error, Base__List, Base__Option, Base__String, Base__Sys, Ppxlib_print_diff, Stdio__In_channel, Stdio__Out_channel, Stdlib__Sys
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, cst$3 = "", cst$4 = "/";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$2 = cst$3,
    cst$0 = cst$4,
    cst$1 = cst$3,
    cst = cst$4,
    Stdio_In_channel = global_data.Stdio__In_channel,
    Base_String = global_data.Base__String,
    Base = global_data.Base,
    Base_Option = global_data.Base__Option,
    Stdio_Out_channel = global_data.Stdio__Out_channel,
    Base_Sys = global_data.Base__Sys,
    Base_Char = global_data.Base__Char,
    Base_List = global_data.Base__List,
    Ppxlib_print_diff = global_data.Ppxlib_print_diff,
    Base_Error = global_data.Base__Error,
    _a_ = [0, 0],
    cst_corrected = ".corrected",
    cst_TESTING_FRAMEWORK = "TESTING_FRAMEWORK",
    _b_ = [0, "-default", 0],
    cst_alt_old = "-alt-old",
    cst_alt_new = "-alt-new",
    cst_Changes_found = "Changes found.";
   function chop_if_exists(ancestor, path){
    var _j_ = caml_call2(Base[241], ancestor, cst);
    return caml_call2(Base_String[119], path, _j_);
   }
   function f
   (opt,
    corrected_path,
    _c_,
    diff_command,
    diff_path_prefix,
    next_contents,
    path,
    param){
    if(opt)
     var sth = opt[1], use_dot_patdiff = sth;
    else
     var use_dot_patdiff = 0;
    if(_c_) var sth$0 = _c_[1], use_color = sth$0; else var use_color = 0;
    var
     prev_contents =
       runtime.caml_sys_file_exists(path)
        ? caml_call3(Stdio_In_channel[4], 0, path, Stdio_In_channel[14])
        : cst$2;
    if(caml_call2(Base_String[47], prev_contents, next_contents)) return _a_;
    var
     default_corrected_path = caml_call2(Base[241], path, cst_corrected),
     corrected_path$0 =
       caml_call2(Base_Option[30], corrected_path, default_corrected_path);
    caml_call2(Stdio_Out_channel[37], corrected_path$0, next_contents);
    if(use_dot_patdiff)
     var
      _d_ = caml_call1(Base_Sys[19], cst_TESTING_FRAMEWORK),
      _e_ = caml_call1(Base_Option[52], _d_);
    else
     var _e_ = use_dot_patdiff;
    var default_configs = _e_ ? 0 : _b_, cwd = runtime.caml_sys_getcwd(0);
    if(diff_path_prefix)
     var
      prefix = diff_path_prefix[1],
      _f_ = [0, caml_call1(Base_Char[16], 47)],
      _g_ = caml_call2(Base_String[108], _f_, prefix),
      prefix$0 = caml_call2(Base[241], _g_, cst$0);
    else
     var prefix$0 = cst$1;
    var
     _h_ = chop_if_exists(cwd, path),
     alt_old = [0, cst_alt_old, [0, caml_call2(Base[241], prefix$0, _h_), 0]],
     _i_ = chop_if_exists(cwd, default_corrected_path),
     alt_new = [0, cst_alt_new, [0, caml_call2(Base[241], prefix$0, _i_), 0]],
     extra_patdiff_args =
       caml_call1
        (Base_List[11], [0, default_configs, [0, alt_old, [0, alt_new, 0]]]);
    caml_call6
     (Ppxlib_print_diff[1],
      diff_command,
      [0, extra_patdiff_args],
      [0, use_color],
      path,
      corrected_path$0,
      0);
    return [1, caml_call1(Base_Error[14], cst_Changes_found)];
   }
   var Make_corrected_file = [0, f];
   runtime.caml_register_global
    (21, Make_corrected_file, "Make_corrected_file");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLjAsImZpbGUiOiJtYWtlX2NvcnJlY3RlZF9maWxlLmNtYS5qcyIsInNvdXJjZVJvb3QiOiIiLCJuYW1lcyI6WyJjaG9wX2lmX2V4aXN0cyIsImFuY2VzdG9yIiwicGF0aCIsImYiLCJvcHQiLCJjb3JyZWN0ZWRfcGF0aCIsImRpZmZfY29tbWFuZCIsImRpZmZfcGF0aF9wcmVmaXgiLCJuZXh0X2NvbnRlbnRzIiwic3RoIiwidXNlX2RvdF9wYXRkaWZmIiwic3RoJDAiLCJ1c2VfY29sb3IiLCJwcmV2X2NvbnRlbnRzIiwiZGVmYXVsdF9jb3JyZWN0ZWRfcGF0aCIsImNvcnJlY3RlZF9wYXRoJDAiLCJkZWZhdWx0X2NvbmZpZ3MiLCJjd2QiLCJwcmVmaXgiLCJwcmVmaXgkMCIsImFsdF9vbGQiLCJhbHRfbmV3IiwiZXh0cmFfcGF0ZGlmZl9hcmdzIl0sInNvdXJjZXMiOlsiL1VzZXJzL3R5bGFubW9yYW4vLm9wYW0vNS4xLjEvbGliL3BweF9leHBlY3QvbWFrZV9jb3JyZWN0ZWRfZmlsZS9tYWtlX2NvcnJlY3RlZF9maWxlX18ubWwiLCIvVXNlcnMvdHlsYW5tb3Jhbi8ub3BhbS81LjEuMS9saWIvcHB4X2V4cGVjdC9tYWtlX2NvcnJlY3RlZF9maWxlL21ha2VfY29ycmVjdGVkX2ZpbGUubWwiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7R0FLK0I7O0lBQUE7Ozs7O0U7Ozs7Ozs7Ozs7RTs7Ozs7Ozs7O0c7Ozs7O0c7Ozs7O0c7Ozs7O0c7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7WUNGM0JBLGVBQWdCQyxVQUFlQztJQUNTLFVBQUEsc0JBRHhCRDtJQUN3QixPQUFBLDZCQURUQztHQUN5QjtZQUd4REM7SUFDQUM7SUFDREM7O0lBRUFDO0lBQ0FDO0lBQ0FDO0lBQ0FOOztJQUdELEdBVEVFO1NBQWtCSyxNQUFsQkwsUUFBQU0sa0JBQWtCRDs7U0FBbEJDO0lBU0YsWUFQY0MsZ0JBQVpDLFlBQVlELGdCQUFaQztJQVFHO0tBRERDO09BQ0MsNkJBSkpYO1VBS00sbUNBTE5BOztPQVFLLDRCQUxGVyxlQUpITCxnQkFnQkM7SUFFNkI7S0FBekJNLHlCQUF5QixzQkFqQjlCWjtLQWtCS2E7T0FBaUIsNEJBdkJ0QlYsZ0JBc0JLUztJQUVKLGtDQURJQyxrQkFuQkxQO09BTENFO0tBNEI0QztNQUFBLE1BQUE7WUFBZjs7ZUE1QjdCQTtJQWdDWSxJQUxOTSxpQ0FLQUMsTUFBTTtJQUtWLEdBakNIVjtLQW1DMEM7TUFBOUJXLFNBbkNaWDtNQW1DMEMsVUFBQTtNQUFwQixNQUFBLGtDQUFWVztNQUZMQyxXQUVlOztTQUZmQTtJQUtpQztLQUFBLE1BL0N2Q25CLGVBcUNNaUIsS0ExQlBmO0tBb0NPa0IsK0JBQXdCLHNCQUx4QkQ7S0FPcUIsTUFqRDNCbkIsZUFxQ01pQixLQVRGSDtLQW9CRU8sK0JBQ1ksc0JBUFpGO0tBWEZHO09Bb0JGOzRCQW5CSU4scUJBZUFJLGFBQ0FDO0lBS047O01BN0NEZjtVQXVCS2dCO1VBeEJKVjtNQUlEVjtNQWtCS2E7O0lBK0JKLFdBQU07R0FBa0M7aUNBeER4Q1o7Ozs7RSIsInNvdXJjZXNDb250ZW50IjpbIigqIGdlbmVyYXRlZCBieSBkdW5lICopXG5cbigqKiBAY2Fub25pY2FsIE1ha2VfY29ycmVjdGVkX2ZpbGUuSW1wb3J0ICopXG5tb2R1bGUgSW1wb3J0ID0gTWFrZV9jb3JyZWN0ZWRfZmlsZV9fSW1wb3J0XG5cbm1vZHVsZSBNYWtlX2NvcnJlY3RlZF9maWxlX18gPSBzdHJ1Y3QgZW5kXG5bQEBkZXByZWNhdGVkIFwidGhpcyBtb2R1bGUgaXMgc2hhZG93ZWRcIl1cbiIsIm9wZW4hIEJhc2Vcbm9wZW4hIEltcG9ydFxuXG5sZXQgY2hvcF9pZl9leGlzdHMgfmFuY2VzdG9yIH5mcm9tOnBhdGggPVxuICBTdHJpbmcuY2hvcF9wcmVmaXhfaWZfZXhpc3RzIHBhdGggfnByZWZpeDooYW5jZXN0b3IgXiBcIi9cIilcbjs7XG5cbmxldCBmXG4gID8odXNlX2RvdF9wYXRkaWZmID0gZmFsc2UpXG4gID9jb3JyZWN0ZWRfcGF0aFxuICA/KHVzZV9jb2xvciA9IGZhbHNlKVxuICA/ZGlmZl9jb21tYW5kXG4gID9kaWZmX3BhdGhfcHJlZml4XG4gIH5uZXh0X2NvbnRlbnRzXG4gIH5wYXRoXG4gICgpXG4gID1cbiAgbGV0IHByZXZfY29udGVudHMgPVxuICAgIGlmIFN0ZGxpYi5TeXMuZmlsZV9leGlzdHMgcGF0aFxuICAgIHRoZW4gU3RkaW8uSW5fY2hhbm5lbC53aXRoX2ZpbGUgcGF0aCB+ZjpTdGRpby5Jbl9jaGFubmVsLmlucHV0X2FsbFxuICAgIGVsc2UgXCJcIlxuICBpblxuICBtYXRjaCBTdHJpbmcuKCA9ICkgcHJldl9jb250ZW50cyBuZXh0X2NvbnRlbnRzIHdpdGhcbiAgfCB0cnVlIC0+XG4gICAgKCogSXQncyBwb3NzaWJsZSBmb3Igc3RhbGUgLmNvcnJlY3RlZCBmaWxlcyB0byBsaW5nZXIgYW5kIGlkZWFsbHkgd2Ugd291bGQgZGVsZXRlIHRoZW1cbiAgICAgICBoZXJlLCBidXQgdGhpcyBwcm9iYWJseSBpc24ndCB3b3J0aCBmaXhpbmcgc2luY2UgaXQncyBtb290ZWQgYnkgZHVuZSwgd2hpY2ggcHV0c1xuICAgICAgIGl0cyBidWlsZCBwcm9kdWN0cyBpbiBhIHNlcGFyYXRlIGRpcmVjdG9yeS4gSWYgd2UgZG8gYWRkIGRlbGV0aW9uIGF0IHNvbWUgcG9pbnQgaW5cbiAgICAgICB0aGUgZnV0dXJlLCB3ZSBzaG91bGQgbWFrZSBzdXJlIGl0IGRvZXNuJ3QgY2F1c2UgcHJvYmxlbXMgZm9yIGNsaWVudHMgd2hvIGNhbGwgW2ZdXG4gICAgICAgYW5kIHRoZW4gcGVyZm9ybSBkZWxldGlvbiBvbiB0aGVpciBvd24uICopXG4gICAgT2sgKClcbiAgfCBmYWxzZSAtPlxuICAgIGxldCBkZWZhdWx0X2NvcnJlY3RlZF9wYXRoID0gcGF0aCBeIFwiLmNvcnJlY3RlZFwiIGluXG4gICAgbGV0IGNvcnJlY3RlZF9wYXRoID0gT3B0aW9uLnZhbHVlIGNvcnJlY3RlZF9wYXRoIH5kZWZhdWx0OmRlZmF1bHRfY29ycmVjdGVkX3BhdGggaW5cbiAgICBTdGRpby5PdXRfY2hhbm5lbC53cml0ZV9hbGwgY29ycmVjdGVkX3BhdGggfmRhdGE6bmV4dF9jb250ZW50cztcbiAgICBsZXQgZXh0cmFfcGF0ZGlmZl9hcmdzID1cbiAgICAgIGxldCBkZWZhdWx0X2NvbmZpZ3MgPVxuICAgICAgICBtYXRjaCB1c2VfZG90X3BhdGRpZmYgJiYgT3B0aW9uLmlzX25vbmUgKFN5cy5nZXRlbnYgXCJURVNUSU5HX0ZSQU1FV09SS1wiKSB3aXRoXG4gICAgICAgIHwgdHJ1ZSAtPiBbXVxuICAgICAgICB8IGZhbHNlIC0+IFsgXCItZGVmYXVsdFwiIF1cbiAgICAgIGluXG4gICAgICBsZXQgY3dkID0gU3RkbGliLlN5cy5nZXRjd2QgKCkgaW5cbiAgICAgICgqIGRpZmZfcGF0aF9wcmVmaXggaXMgdXNlZnVsIHRvIHRyYW5zZm9ybSBvdXRwdXQgcGF0aHMgdG8gbWFrZSBpdCBlYXNpZXIgZm9yIHRoZVxuICAgICAgICAgY29uc3VtZXIgKGUuZy4gZWRpdG9yKSB0byBsb2NhdGUgdGhlIGZpbGVzIHdpdGggZGlmZnMuIE9uZSBwYXJ0aWN1bGFyIGV4YW1wbGUgdGhpc1xuICAgICAgICAgaGVscHMgaXMgdGhlIFwidGVzdC10aGlzLWZpbGVcIiBydWxlcyBnZW5lcmF0ZWQgYnkgZW1hY3MvdnNjb2RlIGluIGplbmdhL3N0YXJ0L2pidWlsZCxcbiAgICAgICAgIHdoZXJlIHRoZSBydWxlIGFuZCB0aGUgdGVzdCBhcmUgaW4gZGlmZmVyZW50IGRpcmVjdG9yaWVzLiAqKVxuICAgICAgbGV0IHByZWZpeCA9XG4gICAgICAgIG1hdGNoIGRpZmZfcGF0aF9wcmVmaXggd2l0aFxuICAgICAgICB8IFNvbWUgcHJlZml4IC0+IFN0cmluZy5yc3RyaXAgfmRyb3A6KENoYXIuZXF1YWwgJy8nKSBwcmVmaXggXiBcIi9cIlxuICAgICAgICB8IE5vbmUgLT4gXCJcIlxuICAgICAgaW5cbiAgICAgIGxldCBhbHRfb2xkID0gWyBcIi1hbHQtb2xkXCI7IHByZWZpeCBeIGNob3BfaWZfZXhpc3RzIH5hbmNlc3Rvcjpjd2QgfmZyb206cGF0aCBdIGluXG4gICAgICBsZXQgYWx0X25ldyA9XG4gICAgICAgIFsgXCItYWx0LW5ld1wiOyBwcmVmaXggXiBjaG9wX2lmX2V4aXN0cyB+YW5jZXN0b3I6Y3dkIH5mcm9tOmRlZmF1bHRfY29ycmVjdGVkX3BhdGggXVxuICAgICAgaW5cbiAgICAgIFsgZGVmYXVsdF9jb25maWdzOyBhbHRfb2xkOyBhbHRfbmV3IF0gfD4gTGlzdC5jb25jYXRcbiAgICBpblxuICAgIFBweGxpYl9wcmludF9kaWZmLnByaW50XG4gICAgICA/ZGlmZl9jb21tYW5kXG4gICAgICB+dXNlX2NvbG9yXG4gICAgICB+ZXh0cmFfcGF0ZGlmZl9hcmdzXG4gICAgICB+ZmlsZTE6cGF0aFxuICAgICAgfmZpbGUyOmNvcnJlY3RlZF9wYXRoXG4gICAgICAoKTtcbiAgICBFcnJvciAoRXJyb3Iub2Zfc3RyaW5nIFwiQ2hhbmdlcyBmb3VuZC5cIilcbjs7XG4iXX0=
