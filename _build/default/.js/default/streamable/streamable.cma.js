// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Streamable__
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Streamable = [0],
    Streamable$0 = [0, Streamable];
   runtime.caml_register_global(0, Streamable$0, "Streamable__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Streamable__Import
//# unitInfo: Requires: Async_rpc_kernel, Core__Sequence, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Streamable_Import$0 = "Streamable__Import",
    cst_streamable$0 = "streamable";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Async_rpc_kernel = global_data.Async_rpc_kernel,
    Core_Sequence = global_data.Core__Sequence;
   caml_call1(Ppx_module_timer_runtime[4], cst_Streamable_Import$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_streamable$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/import.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_streamable$0, "import.ml");
   var
    Rpc_metadata = Async_rpc_kernel[1],
    Async_rpc_kernel_stable = Async_rpc_kernel[2],
    Async_rpc_kernel_private = Async_rpc_kernel[3],
    bin_shape_t = Core_Sequence[1],
    bin_size_t = Core_Sequence[2],
    bin_write_t = Core_Sequence[3],
    bin_read_t = Core_Sequence[4],
    bin_read_t$0 = Core_Sequence[5],
    bin_writer_t = Core_Sequence[6],
    bin_reader_t = Core_Sequence[7],
    bin_t = Core_Sequence[8],
    Step = Core_Sequence[9],
    Merge_with_duplicates_element = Core_Sequence[10],
    globalize = Core_Sequence[11],
    sexp_of_t = Core_Sequence[12],
    equal = Core_Sequence[13],
    equal_local = Core_Sequence[14],
    compare = Core_Sequence[15],
    compare_local = Core_Sequence[16],
    mem = Core_Sequence[17],
    length = Core_Sequence[18],
    is_empty = Core_Sequence[19],
    iter = Core_Sequence[20],
    fold = Core_Sequence[21],
    fold_result = Core_Sequence[22],
    fold_until = Core_Sequence[23],
    exists = Core_Sequence[24],
    for_all = Core_Sequence[25],
    count = Core_Sequence[26],
    sum = Core_Sequence[27],
    find = Core_Sequence[28],
    find_map = Core_Sequence[29],
    to_list = Core_Sequence[30],
    to_array = Core_Sequence[31],
    min_elt = Core_Sequence[32],
    max_elt = Core_Sequence[33],
    foldi = Core_Sequence[34],
    iteri = Core_Sequence[35],
    existsi = Core_Sequence[36],
    counti = Core_Sequence[37],
    findi = Core_Sequence[38],
    find_mapi = Core_Sequence[39],
    symbol_bind = Core_Sequence[40],
    symbol_map = Core_Sequence[41],
    bind = Core_Sequence[42],
    return$0 = Core_Sequence[43],
    map = Core_Sequence[44],
    join = Core_Sequence[45],
    ignore_m = Core_Sequence[46],
    all = Core_Sequence[47],
    all_unit = Core_Sequence[48],
    empty = Core_Sequence[49],
    next = Core_Sequence[50],
    unfold_step = Core_Sequence[51],
    unfold = Core_Sequence[52],
    unfold_with = Core_Sequence[53],
    unfold_with_and_finish = Core_Sequence[54],
    nth = Core_Sequence[55],
    nth_exn = Core_Sequence[56],
    folding_map = Core_Sequence[57],
    folding_mapi = Core_Sequence[58],
    mapi = Core_Sequence[59],
    filteri = Core_Sequence[60],
    filter = Core_Sequence[61],
    merge_deduped_and_sorted = Core_Sequence[62],
    merge_sorted = Core_Sequence[63],
    merge_with_duplicates = Core_Sequence[64],
    hd = Core_Sequence[65],
    hd_exn = Core_Sequence[66],
    tl = Core_Sequence[67],
    tl_eagerly_exn = Core_Sequence[68],
    find_exn = Core_Sequence[69],
    for_alli = Core_Sequence[70],
    append = Core_Sequence[71],
    concat = Core_Sequence[72],
    concat_map = Core_Sequence[73],
    concat_mapi = Core_Sequence[74],
    interleave = Core_Sequence[75],
    round_robin = Core_Sequence[76],
    zip = Core_Sequence[77],
    zip_full = Core_Sequence[78],
    reduce_exn = Core_Sequence[79],
    reduce = Core_Sequence[80],
    group = Core_Sequence[81],
    find_consecutive_duplicate = Core_Sequence[82],
    remove_consecutive_duplicates = Core_Sequence[83],
    range = Core_Sequence[84],
    init = Core_Sequence[85],
    filter_map = Core_Sequence[86],
    filter_mapi = Core_Sequence[87],
    filter_opt = Core_Sequence[88],
    sub = Core_Sequence[89],
    take = Core_Sequence[90],
    drop = Core_Sequence[91],
    drop_eagerly = Core_Sequence[92],
    take_while = Core_Sequence[93],
    drop_while = Core_Sequence[94],
    drop_while_option = Core_Sequence[95],
    split_n = Core_Sequence[96],
    chunks_exn = Core_Sequence[97],
    shift_right = Core_Sequence[98],
    shift_right_with_list = Core_Sequence[99],
    shift_left = Core_Sequence[100],
    cartesian_product = Core_Sequence[101],
    interleaved_cartesian_product = Core_Sequence[102],
    intersperse = Core_Sequence[103],
    cycle_list_exn = Core_Sequence[104],
    repeat = Core_Sequence[105],
    singleton = Core_Sequence[106],
    delayed_fold = Core_Sequence[107],
    fold_m = Core_Sequence[108],
    iter_m = Core_Sequence[109],
    to_list_rev = Core_Sequence[110],
    of_list = Core_Sequence[111],
    of_lazy = Core_Sequence[112],
    memoize = Core_Sequence[113],
    force_eagerly = Core_Sequence[114],
    bounded_length = Core_Sequence[115],
    length_is_bounded_by = Core_Sequence[116],
    of_seq = Core_Sequence[117],
    to_seq = Core_Sequence[118],
    merge_all = Core_Sequence[119],
    cst_streamable = cst_streamable$0,
    cst_Streamable_Import = cst_Streamable_Import$0;
   function cons(x, xs){return caml_call2(shift_right, xs, x);}
   var
    Sequence =
      [0,
       bin_shape_t,
       bin_size_t,
       bin_write_t,
       bin_read_t,
       bin_read_t$0,
       bin_writer_t,
       bin_reader_t,
       bin_t,
       Step,
       Merge_with_duplicates_element,
       globalize,
       sexp_of_t,
       equal,
       equal_local,
       compare,
       compare_local,
       mem,
       length,
       is_empty,
       iter,
       fold,
       fold_result,
       fold_until,
       exists,
       for_all,
       count,
       sum,
       find,
       find_map,
       to_list,
       to_array,
       min_elt,
       max_elt,
       foldi,
       iteri,
       existsi,
       counti,
       findi,
       find_mapi,
       symbol_bind,
       symbol_map,
       bind,
       return$0,
       map,
       join,
       ignore_m,
       all,
       all_unit,
       empty,
       next,
       unfold_step,
       unfold,
       unfold_with,
       unfold_with_and_finish,
       nth,
       nth_exn,
       folding_map,
       folding_mapi,
       mapi,
       filteri,
       filter,
       merge_deduped_and_sorted,
       merge_sorted,
       merge_with_duplicates,
       hd,
       hd_exn,
       tl,
       tl_eagerly_exn,
       find_exn,
       for_alli,
       append,
       concat,
       concat_map,
       concat_mapi,
       interleave,
       round_robin,
       zip,
       zip_full,
       reduce_exn,
       reduce,
       group,
       find_consecutive_duplicate,
       remove_consecutive_duplicates,
       range,
       init,
       filter_map,
       filter_mapi,
       filter_opt,
       sub,
       take,
       drop,
       drop_eagerly,
       take_while,
       drop_while,
       drop_while_option,
       split_n,
       chunks_exn,
       shift_right,
       shift_right_with_list,
       shift_left,
       cartesian_product,
       interleaved_cartesian_product,
       intersperse,
       cycle_list_exn,
       repeat,
       singleton,
       delayed_fold,
       fold_m,
       iter_m,
       to_list_rev,
       of_list,
       of_lazy,
       memoize,
       force_eagerly,
       bounded_length,
       length_is_bounded_by,
       of_seq,
       to_seq,
       merge_all,
       cons];
   caml_call1(Ppx_inline_test_lib[7], cst_streamable);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Streamable_Import);
   var
    Streamable_Import =
      [0,
       Rpc_metadata,
       Async_rpc_kernel_stable,
       Async_rpc_kernel_private,
       Sequence];
   runtime.caml_register_global
    (13, Streamable_Import, cst_Streamable_Import$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Streamable__Module_type
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Streamable_Module_type$0 = "Streamable__Module_type",
    cst_streamable$0 = "streamable";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Streamable_Module_type$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_streamable$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/module_type.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_streamable$0, "module_type.ml");
   var
    cst_streamable = cst_streamable$0,
    cst_Streamable_Module_type = cst_Streamable_Module_type$0;
   function Coerce1(_d_){
    var _e_ = _d_[1], _f_ = _e_[1];
    return [0,
            [0,
             [0,
              _f_[1],
              _f_[2],
              _f_[3],
              _f_[4],
              _f_[5],
              _f_[6],
              _f_[7],
              _f_[8],
              _f_[10]],
             _e_[2],
             _e_[3]],
            _d_[2],
            _d_[3]];
   }
   function Coerce2(_a_){
    var _b_ = _a_[1], _c_ = _b_[1];
    return [0,
            [0,
             [0,
              _c_[1],
              _c_[2],
              _c_[3],
              _c_[4],
              _c_[5],
              _c_[6],
              _c_[7],
              _c_[8]],
             _b_[2],
             _b_[3]],
            _a_[2],
            _a_[3]];
   }
   caml_call1(Ppx_inline_test_lib[7], cst_streamable);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Streamable_Module_type);
   var Streamable_Module_type = [0, Coerce1, Coerce2];
   runtime.caml_register_global
    (11, Streamable_Module_type, cst_Streamable_Module_type$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Streamable__Remove_t
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Streamable_Remove_t$0 = "Streamable__Remove_t",
    cst_streamable$0 = "streamable";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Streamable_Remove_t$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_streamable$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/remove_t.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_streamable$0, "remove_t.ml");
   var
    cst_streamable = cst_streamable$0,
    cst_Streamable_Remove_t = cst_Streamable_Remove_t$0;
   function F(S){
    var Intermediate = S[1], to_parts = S[2], finalize = S[3];
    return [0, S, Intermediate, to_parts, finalize];
   }
   function F_rpc(S){
    var Intermediate = S[1], to_parts = S[2], finalize = S[3];
    return [0, S, Intermediate, to_parts, finalize];
   }
   caml_call1(Ppx_inline_test_lib[7], cst_streamable);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Streamable_Remove_t);
   var Streamable_Remove_t = [0, F, F_rpc];
   runtime.caml_register_global
    (11, Streamable_Remove_t, cst_Streamable_Remove_t$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Streamable__Main_intf
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Streamable_Main_intf = "Streamable__Main_intf",
    cst_streamable = "streamable";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Streamable_Main_intf);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_streamable);
   caml_call1(Ppx_expect_runtime[1][1], "src/main_intf.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_streamable, "main_intf.ml");
   caml_call1(Ppx_inline_test_lib[7], cst_streamable);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Streamable_Main_intf);
   var Streamable_Main_intf = [0];
   runtime.caml_register_global
    (11, Streamable_Main_intf, cst_Streamable_Main_intf);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Streamable__Main
//# unitInfo: Requires: Base__Sequence, Bin_prot__Common, Bin_prot__Read, Bin_prot__Shape, Bin_prot__Utils, Bin_prot__Write, Bin_shape, CamlinternalMod, Core, Core__Fqueue, Core__Hashtbl, Core__List, Core__Map, Core__Option, Core__Queue, Core__Set, Core__Sexp, Core__Source_code_position, Core__Stack, Nonempty_list, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Sexplib0__Sexp_conv_error, Streamable__Import, Streamable__Main_intf, Streamable__Remove_t, Total_map
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_859f388a_490a_11e6_b296_cb$1 = "859f388a-490a-11e6-b296-cbd133aa1837",
    cst_A$7 = "A",
    cst_A_part$7 = "A_part",
    cst_A_start$3 = "A_start",
    cst_Add_key$1 = "Add_key",
    cst_Add_part$1 = "Add_part",
    cst_Atom$0 = "Atom",
    cst_B$7 = "B",
    cst_B_part$7 = "B_part",
    cst_B_start$3 = "B_start",
    cst_C$6 = "C",
    cst_C_part$5 = "C_part",
    cst_C_start$2 = "C_start",
    cst_D$5 = "D",
    cst_D_part$3 = "D_part",
    cst_D_start$1 = "D_start",
    cst_E$4 = "E",
    cst_E_part$1 = "E_part",
    cst_E_start$0 = "E_start",
    cst_Elt_first_part$1 = "Elt_first_part",
    cst_Elt_later_part$1 = "Elt_later_part",
    cst_Elt_no_parts$0 = "Elt_no_parts",
    cst_Elt_part$3 = "Elt_part",
    cst_Elt_start$1 = "Elt_start",
    cst_F$3 = "F",
    cst_G$2 = "G",
    cst_H$1 = "H",
    cst_I$0 = "I",
    cst_Pop = "Pop",
    cst_Push = "Push",
    cst_Streamable_Main$0 = "Streamable__Main",
    cst_a = "a",
    cst_a_part = "a_part",
    cst_a_start = "a_start",
    cst_add_key = "add_key",
    cst_add_part = "add_part",
    cst_atom = "atom",
    cst_b = "b",
    cst_b_part = "b_part",
    cst_b_start = "b_start",
    cst_c = "c",
    cst_c_part = "c_part",
    cst_c_start = "c_start",
    cst_d = "d",
    cst_d_part = "d_part",
    cst_d_start = "d_start",
    cst_e = "e",
    cst_e_part = "e_part",
    cst_e_start = "e_start",
    cst_elt_first_part = "elt_first_part",
    cst_elt_later_part = "elt_later_part",
    cst_elt_no_parts = "elt_no_parts",
    cst_elt_part = "elt_part",
    cst_elt_start = "elt_start",
    cst_f = "f",
    cst_g = "g",
    cst_h = "h",
    cst_i = "i",
    cst_pop = "pop",
    cst_push = "push",
    cst_src_main_ml = "src/main.ml",
    cst_src_main_ml_Stable_Of_key_$0 =
      "src/main.ml.Stable.Of_key_value_intermediate_part.Make.t",
    cst_src_main_ml_Stable_Of_list$2 =
      "src/main.ml.Stable.Of_list_or_sequence_not_packed_rpc.V1.Intermediate.Part.t",
    cst_src_main_ml_Stable_Of_list$1 =
      "src/main.ml.Stable.Of_list_rpc.V1.Intermediate.Part.t",
    cst_src_main_ml_Stable_Of_opti$0 =
      "src/main.ml.Stable.Of_option_rpc.V1.Intermediate.Part.t",
    cst_src_main_ml_Stable_Of_sexp$0 =
      "src/main.ml.Stable.Of_sexps.V1_unpacked.Intermediate.Part.t",
    cst_src_main_ml_Stable_Of_tupl$14 =
      "src/main.ml.Stable.Of_tuple2_rpc.V1.Intermediate.Part.t",
    cst_src_main_ml_Stable_Of_tupl$13 =
      "src/main.ml.Stable.Of_tuple3_rpc.V1.Intermediate.Part.t",
    cst_src_main_ml_Stable_Of_tupl$12 =
      "src/main.ml.Stable.Of_tuple4_rpc.V1.Intermediate.Part.t",
    cst_src_main_ml_Stable_Of_tupl$11 =
      "src/main.ml.Stable.Of_tuple5_rpc.V1.Intermediate.Part.t",
    cst_src_main_ml_Stable_Of_tupl$10 =
      "src/main.ml.Stable.Of_tuple6_rpc.V1.Intermediate.Part.t",
    cst_src_main_ml_Stable_Of_tupl$9 =
      "src/main.ml.Stable.Of_tuple7_rpc.V1.Intermediate.Part.t",
    cst_src_main_ml_Stable_Of_tupl$8 =
      "src/main.ml.Stable.Of_tuple8_rpc.V1.Intermediate.Part.t",
    cst_src_main_ml_Stable_Of_tupl$7 =
      "src/main.ml.Stable.Of_tuple9_rpc.V1.Intermediate.Part.t",
    cst_src_main_ml_Stable_Of_vari$6 =
      "src/main.ml.Stable.Of_variant2_rpc.V1.Intermediate.Part.t",
    cst_src_main_ml_Stable_Of_vari$5 =
      "src/main.ml.Stable.Of_variant3_rpc.V1.Intermediate.Part.t",
    cst_src_main_ml_Stable_Of_vari$4 =
      "src/main.ml.Stable.Of_variant4_rpc.V1.Intermediate.Part.t",
    cst_src_main_ml_Stable_Of_vari$3 =
      "src/main.ml.Stable.Of_variant5_rpc.V1.Intermediate.Part.t",
    cst_streamable$0 = "streamable",
    cst_t$35 = "t",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_string_compare = runtime.caml_string_compare,
    caml_string_notequal = runtime.caml_string_notequal;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    error_source_520 = "src/main.ml.Stable.Of_option.V1.t",
    descriptions$6 =
      [0, [0, cst_Elt_start$1, 0], [0, [0, cst_Elt_part$3, 1], 0]],
    error_source_495 = "src/main.ml.Stable.Of_list.V1.t",
    descriptions$5 =
      [0, [0, cst_Elt_start$1, 0], [0, [0, cst_Elt_part$3, 1], 0]],
    error_source_477 =
      "src/main.ml.Stable.Of_list_or_sequence_not_packed.V1.t",
    descriptions$4 =
      [0,
       [0, cst_Elt_no_parts$0, 0],
       [0, [0, cst_Elt_first_part$1, 1], [0, [0, cst_Elt_later_part$1, 1], 0]]],
    error_source_438 = "src/main.ml.Stable.Of_variant5.V1.t",
    descriptions$3 =
      [0,
       [0, cst_A_start$3, 0],
       [0,
        [0, cst_A_part$7, 1],
        [0,
         [0, cst_B_start$3, 0],
         [0,
          [0, cst_B_part$7, 1],
          [0,
           [0, cst_C_start$2, 0],
           [0,
            [0, cst_C_part$5, 1],
            [0,
             [0, cst_D_start$1, 0],
             [0,
              [0, cst_D_part$3, 1],
              [0, [0, cst_E_start$0, 0], [0, [0, cst_E_part$1, 1], 0]]]]]]]]]],
    error_source_406 = "src/main.ml.Stable.Of_variant4.V1.t",
    descriptions$2 =
      [0,
       [0, cst_A_start$3, 0],
       [0,
        [0, cst_A_part$7, 1],
        [0,
         [0, cst_B_start$3, 0],
         [0,
          [0, cst_B_part$7, 1],
          [0,
           [0, cst_C_start$2, 0],
           [0,
            [0, cst_C_part$5, 1],
            [0, [0, cst_D_start$1, 0], [0, [0, cst_D_part$3, 1], 0]]]]]]]],
    error_source_381 = "src/main.ml.Stable.Of_variant3.V1.t",
    descriptions$1 =
      [0,
       [0, cst_A_start$3, 0],
       [0,
        [0, cst_A_part$7, 1],
        [0,
         [0, cst_B_start$3, 0],
         [0,
          [0, cst_B_part$7, 1],
          [0, [0, cst_C_start$2, 0], [0, [0, cst_C_part$5, 1], 0]]]]]],
    error_source_363 = "src/main.ml.Stable.Of_variant2.V1.t",
    descriptions$0 =
      [0,
       [0, cst_A_start$3, 0],
       [0,
        [0, cst_A_part$7, 1],
        [0, [0, cst_B_start$3, 0], [0, [0, cst_B_part$7, 1], 0]]]],
    error_source_296 = "src/main.ml.Stable.Of_tuple9.V1.t",
    error_source_236 = "src/main.ml.Stable.Of_tuple8.V1.t",
    error_source_183 = "src/main.ml.Stable.Of_tuple7.V1.t",
    error_source_137 = "src/main.ml.Stable.Of_tuple6.V1.t",
    error_source_098 = "src/main.ml.Stable.Of_tuple5.V1.t",
    error_source_066 = "src/main.ml.Stable.Of_tuple4.V1.t",
    error_source_041 = "src/main.ml.Stable.Of_tuple3.V1.t",
    error_source_023 = "src/main.ml.Stable.Of_tuple2.V1.t",
    error_source_005 = "src/main.ml.Stable.Of_key_value_store.V1.t",
    descriptions = [0, [0, cst_Add_key$1, 1], [0, [0, cst_Add_part$1, 1], 0]],
    error_source_506 = cst_src_main_ml_Stable_Of_sexp$0,
    CamlinternalMod = global_data.CamlinternalMod,
    Bin_shape = global_data.Bin_shape,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Streamable_Remove_t = global_data.Streamable__Remove_t,
    Core_Set = global_data.Core__Set,
    Core_Fqueue = global_data.Core__Fqueue,
    Assert_failure = global_data.Assert_failure,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Streamable_Import = global_data.Streamable__Import,
    Bin_prot_Read = global_data.Bin_prot__Read,
    Bin_prot_Common = global_data.Bin_prot__Common,
    Bin_prot_Write = global_data.Bin_prot__Write,
    Base_Sequence = global_data.Base__Sequence,
    Core_List = global_data.Core__List,
    Core_Stack = global_data.Core__Stack,
    Core_Queue = global_data.Core__Queue,
    Core = global_data.Core,
    Nonempty_list = global_data.Nonempty_list,
    Core_Hashtbl = global_data.Core__Hashtbl,
    Core_Map = global_data.Core__Map,
    Total_map = global_data.Total_map,
    Bin_prot_Utils = global_data.Bin_prot__Utils,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Core_Sexp = global_data.Core__Sexp,
    Core_Source_code_position = global_data.Core__Source_code_position,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Core_Option = global_data.Core__Option,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Streamable_Main$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_streamable$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_main_ml);
   caml_call2(Ppx_inline_test_lib[6], cst_streamable$0, "main.ml");
   var
    _bK_ = [0, [0, [0, [0, [0, [0, 0, 0, 0, 0, 0, 0]], 0, 0]], 0, 0]],
    _bL_ = [0, cst_src_main_ml, 2467, 66],
    cst_859f388a_490a_11e6_b296_cb$0 = cst_859f388a_490a_11e6_b296_cb$1,
    _bM_ = [0, [0, [0, [0, [0, [0, 0, 0, 0, 0, 0, 0]], 0, 0]], 0, 0]],
    _bH_ = [0, [0, [0, [0, [0, [0, 0, 0, 0, 0]], 0, 0]], 0, 0]],
    _bI_ = [0, cst_src_main_ml, 2420, 70],
    cst_859f388a_490a_11e6_b296_cb = cst_859f388a_490a_11e6_b296_cb$1,
    _bJ_ = [0, [0, [0, [0, [0, [0, 0, 0, 0, 0]], 0, 0]], 0, 0]],
    _bE_ = [0, cst_src_main_ml, 2210, 27],
    _bC_ = [0, cst_Elt_part$3],
    _bD_ = [0, cst_Elt_start$1],
    _bB_ = [0, cst_src_main_ml, 2169, 27],
    _bz_ = [0, cst_src_main_ml, 2131, 23],
    _bA_ = [0, cst_src_main_ml, 2127, 25],
    _by_ = [1, cst_src_main_ml_Stable_Of_opti$0],
    cst_src_main_ml_Stable_Of_opti = cst_src_main_ml_Stable_Of_opti$0,
    cst_Elt_part$1 = cst_Elt_part$3,
    _bx_ = [0, cst_Elt_start$1, 0],
    cst_t$33 = cst_t$35,
    cst_src_main_ml_2115_10 = "src/main.ml:2115:10",
    cst_t$34 = cst_t$35,
    cst_Elt_start$0 = cst_Elt_start$1,
    cst_Elt_part$2 = cst_Elt_part$3,
    _bw_ = [0, cst_src_main_ml, 2102, 19],
    _bv_ = [0, cst_src_main_ml, 2066, 8],
    _bs_ = [0, cst_Pop],
    _bt_ = [0, cst_Push],
    _bu_ = [0, cst_Atom$0],
    _br_ = [1, cst_src_main_ml_Stable_Of_sexp$0],
    cst_src_main_ml_Stable_Of_sexp = cst_src_main_ml_Stable_Of_sexp$0,
    _bj_ = [0, cst_Elt_part$3],
    _bk_ = [0, cst_Elt_start$1],
    _bh_ = [0, cst_src_main_ml, 1942, 23],
    _bg_ = [1, cst_src_main_ml_Stable_Of_list$1],
    cst_src_main_ml_Stable_Of_list$0 = cst_src_main_ml_Stable_Of_list$1,
    cst_Elt_part = cst_Elt_part$3,
    _bf_ = [0, cst_Elt_start$1, 0],
    cst_t$29 = cst_t$35,
    cst_src_main_ml_1923_10 = "src/main.ml:1923:10",
    cst_t$30 = cst_t$35,
    cst_Elt_start = cst_Elt_start$1,
    cst_Elt_part$0 = cst_Elt_part$3,
    _bc_ = [0, cst_Elt_no_parts$0],
    _bd_ = [0, cst_Elt_first_part$1],
    _be_ = [0, cst_Elt_later_part$1],
    _bb_ = [0, cst_src_main_ml, 1865, 20],
    _ba_ = [1, cst_src_main_ml_Stable_Of_list$2],
    cst_src_main_ml_Stable_Of_list = cst_src_main_ml_Stable_Of_list$2,
    cst_Elt_later_part = cst_Elt_later_part$1,
    cst_Elt_first_part = cst_Elt_first_part$1,
    _a$_ = [0, cst_Elt_no_parts$0, 0],
    cst_t$27 = cst_t$35,
    cst_src_main_ml_1846_10 = "src/main.ml:1846:10",
    cst_t$28 = cst_t$35,
    cst_Elt_no_parts = cst_Elt_no_parts$0,
    cst_Elt_first_part$0 = cst_Elt_first_part$1,
    cst_Elt_later_part$0 = cst_Elt_later_part$1,
    _a1_ = [0, cst_A_start$3],
    _a2_ = [0, cst_B_start$3],
    _a3_ = [0, cst_C_start$2],
    _a4_ = [0, cst_D_start$1],
    _a5_ = [0, cst_E_start$0],
    _a6_ = [0, cst_A_part$7],
    _a7_ = [0, cst_B_part$7],
    _a8_ = [0, cst_C_part$5],
    _a9_ = [0, cst_D_part$3],
    _a__ = [0, cst_E_part$1],
    _a0_ = [0, cst_src_main_ml, 1792, 32],
    _aZ_ = [0, cst_src_main_ml, 1764, 17],
    _aY_ = [1, cst_src_main_ml_Stable_Of_vari$3],
    cst_src_main_ml_Stable_Of_vari$2 = cst_src_main_ml_Stable_Of_vari$3,
    cst_E_part = cst_E_part$1,
    _aT_ = [0, cst_E_start$0, 0],
    cst_D_part$1 = cst_D_part$3,
    _aU_ = [0, cst_D_start$1, 0],
    cst_C_part$3 = cst_C_part$5,
    _aV_ = [0, cst_C_start$2, 0],
    cst_B_part$5 = cst_B_part$7,
    _aW_ = [0, cst_B_start$3, 0],
    cst_A_part$5 = cst_A_part$7,
    _aX_ = [0, cst_A_start$3, 0],
    cst_t$25 = cst_t$35,
    cst_src_main_ml_1736_10 = "src/main.ml:1736:10",
    cst_t$26 = cst_t$35,
    cst_A_start$2 = cst_A_start$3,
    cst_A_part$6 = cst_A_part$7,
    cst_B_start$2 = cst_B_start$3,
    cst_B_part$6 = cst_B_part$7,
    cst_C_start$1 = cst_C_start$2,
    cst_C_part$4 = cst_C_part$5,
    cst_D_start$0 = cst_D_start$1,
    cst_D_part$2 = cst_D_part$3,
    cst_E_start = cst_E_start$0,
    cst_E_part$0 = cst_E_part$1,
    _aL_ = [0, cst_A_start$3],
    _aM_ = [0, cst_B_start$3],
    _aN_ = [0, cst_C_start$2],
    _aO_ = [0, cst_D_start$1],
    _aP_ = [0, cst_A_part$7],
    _aQ_ = [0, cst_B_part$7],
    _aR_ = [0, cst_C_part$5],
    _aS_ = [0, cst_D_part$3],
    _aK_ = [0, cst_src_main_ml, 1679, 32],
    _aJ_ = [0, cst_src_main_ml, 1655, 17],
    _aI_ = [1, cst_src_main_ml_Stable_Of_vari$4],
    cst_src_main_ml_Stable_Of_vari$1 = cst_src_main_ml_Stable_Of_vari$4,
    cst_D_part = cst_D_part$3,
    _aE_ = [0, cst_D_start$1, 0],
    cst_C_part$1 = cst_C_part$5,
    _aF_ = [0, cst_C_start$2, 0],
    cst_B_part$3 = cst_B_part$7,
    _aG_ = [0, cst_B_start$3, 0],
    cst_A_part$3 = cst_A_part$7,
    _aH_ = [0, cst_A_start$3, 0],
    cst_t$23 = cst_t$35,
    cst_src_main_ml_1631_10 = "src/main.ml:1631:10",
    cst_t$24 = cst_t$35,
    cst_A_start$1 = cst_A_start$3,
    cst_A_part$4 = cst_A_part$7,
    cst_B_start$1 = cst_B_start$3,
    cst_B_part$4 = cst_B_part$7,
    cst_C_start$0 = cst_C_start$2,
    cst_C_part$2 = cst_C_part$5,
    cst_D_start = cst_D_start$1,
    cst_D_part$0 = cst_D_part$3,
    _ay_ = [0, cst_A_start$3],
    _az_ = [0, cst_B_start$3],
    _aA_ = [0, cst_C_start$2],
    _aB_ = [0, cst_A_part$7],
    _aC_ = [0, cst_B_part$7],
    _aD_ = [0, cst_C_part$5],
    _ax_ = [0, cst_src_main_ml, 1579, 32],
    _aw_ = [0, cst_src_main_ml, 1559, 17],
    _av_ = [1, cst_src_main_ml_Stable_Of_vari$5],
    cst_src_main_ml_Stable_Of_vari$0 = cst_src_main_ml_Stable_Of_vari$5,
    cst_C_part = cst_C_part$5,
    _as_ = [0, cst_C_start$2, 0],
    cst_B_part$1 = cst_B_part$7,
    _at_ = [0, cst_B_start$3, 0],
    cst_A_part$1 = cst_A_part$7,
    _au_ = [0, cst_A_start$3, 0],
    cst_t$21 = cst_t$35,
    cst_src_main_ml_1539_10 = "src/main.ml:1539:10",
    cst_t$22 = cst_t$35,
    cst_A_start$0 = cst_A_start$3,
    cst_A_part$2 = cst_A_part$7,
    cst_B_start$0 = cst_B_start$3,
    cst_B_part$2 = cst_B_part$7,
    cst_C_start = cst_C_start$2,
    cst_C_part$0 = cst_C_part$5,
    _ao_ = [0, cst_A_start$3],
    _ap_ = [0, cst_B_start$3],
    _aq_ = [0, cst_A_part$7],
    _ar_ = [0, cst_B_part$7],
    _an_ = [0, cst_src_main_ml, 1492, 32],
    _am_ = [0, cst_src_main_ml, 1476, 17],
    _al_ = [1, cst_src_main_ml_Stable_Of_vari$6],
    cst_src_main_ml_Stable_Of_vari = cst_src_main_ml_Stable_Of_vari$6,
    cst_B_part = cst_B_part$7,
    _aj_ = [0, cst_B_start$3, 0],
    cst_A_part = cst_A_part$7,
    _ak_ = [0, cst_A_start$3, 0],
    cst_t$19 = cst_t$35,
    cst_src_main_ml_1460_10 = "src/main.ml:1460:10",
    cst_t$20 = cst_t$35,
    cst_A_start = cst_A_start$3,
    cst_A_part$0 = cst_A_part$7,
    cst_B_start = cst_B_start$3,
    cst_B_part$0 = cst_B_part$7,
    _aa_ = [0, cst_A$7],
    _ab_ = [0, cst_B$7],
    _ac_ = [0, cst_C$6],
    _ad_ = [0, cst_D$5],
    _ae_ = [0, cst_E$4],
    _af_ = [0, cst_F$3],
    _ag_ = [0, cst_G$2],
    _ah_ = [0, cst_H$1],
    _ai_ = [0, cst_I$0],
    _$_ = [1, cst_src_main_ml_Stable_Of_tupl$7],
    cst_src_main_ml_Stable_Of_tupl$6 = cst_src_main_ml_Stable_Of_tupl$7,
    cst_I = cst_I$0,
    cst_H$0 = cst_H$1,
    cst_G$1 = cst_G$2,
    cst_F$2 = cst_F$3,
    cst_E$3 = cst_E$4,
    cst_D$4 = cst_D$5,
    cst_C$5 = cst_C$6,
    cst_B$6 = cst_B$7,
    cst_A$6 = cst_A$7,
    cst_t$17 = cst_t$35,
    cst_src_main_ml_1351_10 = "src/main.ml:1351:10",
    cst_t$18 = cst_t$35,
    _T_ = [0, cst_A$7],
    _U_ = [0, cst_B$7],
    _V_ = [0, cst_C$6],
    _W_ = [0, cst_D$5],
    _X_ = [0, cst_E$4],
    _Y_ = [0, cst_F$3],
    _Z_ = [0, cst_G$2],
    ___ = [0, cst_H$1],
    _S_ = [1, cst_src_main_ml_Stable_Of_tupl$8],
    cst_src_main_ml_Stable_Of_tupl$5 = cst_src_main_ml_Stable_Of_tupl$8,
    cst_H = cst_H$1,
    cst_G$0 = cst_G$2,
    cst_F$1 = cst_F$3,
    cst_E$2 = cst_E$4,
    cst_D$3 = cst_D$5,
    cst_C$4 = cst_C$6,
    cst_B$5 = cst_B$7,
    cst_A$5 = cst_A$7,
    cst_t$15 = cst_t$35,
    cst_src_main_ml_1215_10 = "src/main.ml:1215:10",
    cst_t$16 = cst_t$35,
    _L_ = [0, cst_A$7],
    _M_ = [0, cst_B$7],
    _N_ = [0, cst_C$6],
    _O_ = [0, cst_D$5],
    _P_ = [0, cst_E$4],
    _Q_ = [0, cst_F$3],
    _R_ = [0, cst_G$2],
    _K_ = [1, cst_src_main_ml_Stable_Of_tupl$9],
    cst_src_main_ml_Stable_Of_tupl$4 = cst_src_main_ml_Stable_Of_tupl$9,
    cst_G = cst_G$2,
    cst_F$0 = cst_F$3,
    cst_E$1 = cst_E$4,
    cst_D$2 = cst_D$5,
    cst_C$3 = cst_C$6,
    cst_B$4 = cst_B$7,
    cst_A$4 = cst_A$7,
    cst_t$13 = cst_t$35,
    cst_src_main_ml_1088_10 = "src/main.ml:1088:10",
    cst_t$14 = cst_t$35,
    _E_ = [0, cst_A$7],
    _F_ = [0, cst_B$7],
    _G_ = [0, cst_C$6],
    _H_ = [0, cst_D$5],
    _I_ = [0, cst_E$4],
    _J_ = [0, cst_F$3],
    _D_ = [1, cst_src_main_ml_Stable_Of_tupl$10],
    cst_src_main_ml_Stable_Of_tupl$3 = cst_src_main_ml_Stable_Of_tupl$10,
    cst_F = cst_F$3,
    cst_E$0 = cst_E$4,
    cst_D$1 = cst_D$5,
    cst_C$2 = cst_C$6,
    cst_B$3 = cst_B$7,
    cst_A$3 = cst_A$7,
    cst_t$11 = cst_t$35,
    cst_src_main_ml_975_10 = "src/main.ml:975:10",
    cst_t$12 = cst_t$35,
    _y_ = [0, cst_A$7],
    _z_ = [0, cst_B$7],
    _A_ = [0, cst_C$6],
    _B_ = [0, cst_D$5],
    _C_ = [0, cst_E$4],
    _x_ = [1, cst_src_main_ml_Stable_Of_tupl$11],
    cst_src_main_ml_Stable_Of_tupl$2 = cst_src_main_ml_Stable_Of_tupl$11,
    cst_E = cst_E$4,
    cst_D$0 = cst_D$5,
    cst_C$1 = cst_C$6,
    cst_B$2 = cst_B$7,
    cst_A$2 = cst_A$7,
    cst_t$9 = cst_t$35,
    cst_src_main_ml_876_10 = "src/main.ml:876:10",
    cst_t$10 = cst_t$35,
    _t_ = [0, cst_A$7],
    _u_ = [0, cst_B$7],
    _v_ = [0, cst_C$6],
    _w_ = [0, cst_D$5],
    _s_ = [1, cst_src_main_ml_Stable_Of_tupl$12],
    cst_src_main_ml_Stable_Of_tupl$1 = cst_src_main_ml_Stable_Of_tupl$12,
    cst_D = cst_D$5,
    cst_C$0 = cst_C$6,
    cst_B$1 = cst_B$7,
    cst_A$1 = cst_A$7,
    cst_t$7 = cst_t$35,
    cst_src_main_ml_786_10 = "src/main.ml:786:10",
    cst_t$8 = cst_t$35,
    _p_ = [0, cst_A$7],
    _q_ = [0, cst_B$7],
    _r_ = [0, cst_C$6],
    _o_ = [1, cst_src_main_ml_Stable_Of_tupl$13],
    cst_src_main_ml_Stable_Of_tupl$0 = cst_src_main_ml_Stable_Of_tupl$13,
    cst_C = cst_C$6,
    cst_B$0 = cst_B$7,
    cst_A$0 = cst_A$7,
    cst_t$5 = cst_t$35,
    cst_src_main_ml_709_10 = "src/main.ml:709:10",
    cst_t$6 = cst_t$35,
    _m_ = [0, cst_A$7],
    _n_ = [0, cst_B$7],
    _l_ = [1, cst_src_main_ml_Stable_Of_tupl$14],
    cst_src_main_ml_Stable_Of_tupl = cst_src_main_ml_Stable_Of_tupl$14,
    cst_B = cst_B$7,
    cst_A = cst_A$7,
    cst_t$3 = cst_t$35,
    cst_src_main_ml_639_10 = "src/main.ml:639:10",
    cst_t$4 = cst_t$35,
    _j_ = [0, cst_Add_key$1],
    _k_ = [0, cst_Add_part$1],
    _h_ = [0, cst_src_main_ml, 435, 12],
    _i_ = [0, cst_src_main_ml, 439, 24],
    _g_ = [1, cst_src_main_ml_Stable_Of_key_$0],
    cst_src_main_ml_Stable_Of_key_ = cst_src_main_ml_Stable_Of_key_$0,
    cst_Add_part = cst_Add_part$1,
    cst_Add_key = cst_Add_key$1,
    cst_t$1 = cst_t$35,
    cst_src_main_ml_393_6 = "src/main.ml:393:6",
    cst_t$2 = cst_t$35,
    cst_Add_key$0 = cst_Add_key$1,
    cst_Add_part$0 = cst_Add_part$1,
    cst_vtag_read_not_implemented_ =
      "vtag_read not implemented for Streamable.Packed_rpc.Intermediate.Part",
    cst_t = cst_t$35,
    cst_src_main_ml_269_10 = "src/main.ml:269:10",
    cst_t$0 = cst_t$35,
    _b_ = [0, "intermediate_part_bin_shape"],
    _c_ = [0, "max_part_bin_size"],
    _d_ = [0, "the_part_bin_size"],
    _e_ = [0, "part_index"],
    _f_ = [0, "here"],
    cst_Streamable_intermediate_pa =
      "Streamable intermediate part exceeded size threshold.  Depending on the max size, this might indicate that serialization or transmission will fail.",
    cst_omitted_in_test = "{omitted-in-test}",
    _a_ = [0, cst_src_main_ml, 162, 10],
    cst_859ed728_490a_11e6_a4b5_57 = "859ed728-490a-11e6-a4b5-576fb351e891",
    _bm_ = [0, [0, cst_Push, 0], [0, [0, cst_Pop, 0], 0]],
    cst_Atom = cst_Atom$0,
    cst_t$31 = cst_t$35,
    cst_src_main_ml_2044_10 = "src/main.ml:2044:10",
    cst_t$32 = cst_t$35,
    cst_streamable = cst_streamable$0,
    cst_Streamable_Main = cst_Streamable_Main$0;
   function V1(S, Part_sexp){
    var
     to_parts = S[2],
     finalize = S[3],
     include = S[1],
     Part = include[1],
     create = include[2],
     apply_part = include[3],
     bin_size_t = Part[1],
     bin_write_t = Part[2],
     bin_read_t = Part[3],
     bin_read_t$0 = Part[4],
     bin_shape_t = Part[5],
     bin_writer_t = Part[6],
     bin_reader_t = Part[7],
     bin_t = Part[8],
     t_of_sexp = Part_sexp[1],
     sexp_of_t = Part_sexp[2],
     Part$0 =
       [0,
        bin_size_t,
        bin_write_t,
        bin_read_t,
        bin_read_t$0,
        bin_shape_t,
        bin_writer_t,
        bin_reader_t,
        bin_t,
        t_of_sexp,
        sexp_of_t];
    return [0, [0, Part$0, create, apply_part], to_parts, finalize];
   }
   function V1$0(X){
    var
     bin_read_t = X[1][1][4],
     bin_read_t$0 = X[1][1][3],
     bin_reader_t = [0, bin_read_t$0, bin_read_t],
     bin_size_t = X[1][1][1],
     bin_write_t = X[1][1][2],
     bin_writer_t = [0, bin_size_t, bin_write_t],
     _rG_ = caml_call1(Bin_shape[5][1], cst_859ed728_490a_11e6_a4b5_57),
     bin_shape_t = caml_call2(Bin_prot_Shape[12], _rG_, 0),
     bin_t = [0, bin_shape_t, bin_writer_t, bin_reader_t],
     create = X[1][2],
     apply_part = X[1][3],
     to_parts = X[2],
     finalize = X[3];
    return [0,
            [0,
             [0,
              bin_size_t,
              bin_write_t,
              bin_read_t$0,
              bin_read_t,
              bin_shape_t,
              bin_writer_t,
              bin_reader_t,
              bin_t],
             create,
             apply_part],
            to_parts,
            finalize];
   }
   function V1$1(A){
    function create(param){return 0;}
    function apply_part(t, a){
     if(caml_call1(Core_Option[61], t)) return [0, a];
     throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
    }
    var
     Intermediate = [0, A, create, apply_part],
     to_parts = Streamable_Import[4][106];
    function finalize(i){return caml_call4(Core_Option[40], 0, 0, 0, i);}
    return [0, Intermediate, to_parts, finalize];
   }
   var Of_atomic_rpc = [0, V1$1];
   function V1$2(_rE_){
    var _rF_ = [0, _rE_[9], _rE_[10]];
    return V1
            (caml_call1
              (Of_atomic_rpc[1],
               [0,
                _rE_[1],
                _rE_[2],
                _rE_[3],
                _rE_[4],
                _rE_[5],
                _rE_[6],
                _rE_[7],
                _rE_[8]]),
             _rF_);
   }
   var Of_atomic = [0, V1$2];
   function V1$3(Streamable, X){
    var Intermediate = Streamable[1];
    function to_parts(t){
     var _rD_ = caml_call1(X[1], t);
     return caml_call1(Streamable[2], _rD_);
    }
    function finalize(i){
     var _rC_ = caml_call1(Streamable[3], i);
     return caml_call1(X[2], _rC_);
    }
    return [0, Intermediate, to_parts, finalize];
   }
   var Of_streamable_rpc = [0, V1$3];
   function V1$4(_rx_, _rw_){
    var
     _ry_ = _rx_[1][1],
     _rA_ = _rx_[1],
     _rB_ = _rA_[1],
     _rz_ = [0, _ry_[9], _ry_[10]];
    return V1
            (caml_call1
              (caml_call1
                (Of_streamable_rpc[1],
                 [0,
                  [0,
                   [0,
                    _rB_[1],
                    _rB_[2],
                    _rB_[3],
                    _rB_[4],
                    _rB_[5],
                    _rB_[6],
                    _rB_[7],
                    _rB_[8]],
                   _rA_[2],
                   _rA_[3]],
                  _rx_[2],
                  _rx_[3]]),
               _rw_),
             _rz_);
   }
   var Of_streamable = [0, V1$4];
   function Checked(Limit, X){
    var
     Intermediate = X[1],
     finalize = X[3],
     here = Limit[2],
     max_part_bin_size = Limit[1];
    function to_parts(t){
     function _ro_(part_index, part){
      var the_part_bin_size = caml_call1(Intermediate[1][1], part);
      if(caml_call2(Core[91], the_part_bin_size, max_part_bin_size)){
       var
        intermediate_part_bin_shape =
          Core[628]
           ? caml_call1(Sexplib0_Sexp_conv[7], cst_omitted_in_test)
           : caml_call1(Bin_shape[1], Intermediate[1][5]),
        _rq_ =
          [0,
           [1,
            [0,
             _b_,
             [0, caml_call1(Core_Sexp[93], intermediate_part_bin_shape), 0]]],
           0],
        _rr_ =
          [0,
           [1, [0, _c_, [0, caml_call1(Core[389], max_part_bin_size), 0]]],
           _rq_],
        _rs_ =
          [0,
           [1, [0, _d_, [0, caml_call1(Core[389], the_part_bin_size), 0]]],
           _rr_],
        _rt_ =
          [0, [1, [0, _e_, [0, caml_call1(Core[389], part_index), 0]]], _rs_],
        _ru_ =
          [0,
           [1,
            [0, _f_, [0, caml_call1(Core_Source_code_position[1], here), 0]]],
           _rt_],
        _rv_ =
          [1,
           [0,
            caml_call1(Sexplib0_Sexp_conv[7], cst_Streamable_intermediate_pa),
            _ru_]];
       caml_call1(Core[261], _rv_);
      }
      return part;
     }
     var _rp_ = caml_call1(X[2], t);
     return caml_call2(Streamable_Import[4][59], _rp_, _ro_);
    }
    return [0, Intermediate, to_parts, finalize];
   }
   function V1$5(X){
    var
     _rc_ = caml_call1(Core_Fqueue[1], X[1][1][5]),
     _rd_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t), 0, _rc_], 0],
     _re_ = caml_call1(Bin_shape[4][1], cst_src_main_ml_269_10),
     group = caml_call2(Bin_prot_Shape[2], _re_, _rd_),
     _rf_ = caml_call1(Bin_shape[2][1], cst_t$0),
     bin_shape_t = caml_call1(caml_call2(Bin_prot_Shape[10], group, _rf_), 0);
    function bin_size_t(t){
     var match = t[2];
     if(match){var size = match[1]; return size;}
     var v = t[1];
     return caml_call2(Core_Fqueue[2], X[1][1][1], v);
    }
    function bin_write_t(buf, pos, t){
     var v = t[1];
     return caml_call4(Core_Fqueue[3], X[1][1][2], buf, pos, v);
    }
    function bin_read_t(buf, pos_ref){
     var
      start_pos = pos_ref[1],
      parts = caml_call2(caml_call1(Core_Fqueue[4], X[1][1][3]), buf, pos_ref),
      bin_size = pos_ref[1] - start_pos | 0;
     return [0, parts, [0, bin_size]];
    }
    function bin_read_t$0(param, _rn_, _rm_){
     return caml_call1(Core[6], cst_vtag_read_not_implemented_);
    }
    var
     T = [0, bin_shape_t, bin_size_t, bin_write_t, bin_read_t, bin_read_t$0],
     include = caml_call1(Bin_prot_Utils[6], T),
     bin_size_t$0 = include[1],
     bin_write_t$0 = include[2],
     bin_read_t$1 = include[3],
     bin_read_t$2 = include[4],
     bin_shape_t$0 = include[5],
     bin_writer_t = include[6],
     bin_reader_t = include[7],
     bin_t = include[8],
     create = X[1][2];
    function apply_part(inter, part){
     return caml_call3(Core_Fqueue[16], part[1], inter, X[1][3]);
    }
    var pack_threshold = Ppx_inline_test_lib[1] ? 25 : 131072;
    function to_parts(t){
     var
      estimated_header_length = 1 + Bin_prot_Utils[1] | 0,
      init = [0, Core_Fqueue[40], 0];
     function part_from_state(parts, total_bin_size){
      var
       _rl_ = caml_call1(Core_Fqueue[54], parts),
       part_bin_size = total_bin_size + caml_call1(Core[373], _rl_) | 0;
      return [0, parts, [0, part_bin_size]];
     }
     function _rg_(param){
      var buffered_len = param[2], buffered_parts = param[1];
      return caml_call1(Core_Fqueue[55], buffered_parts)
              ? 0
              : [1, part_from_state(buffered_parts, buffered_len), init];
     }
     function _rh_(_rk_){return _rk_;}
     function _ri_(param, xpart){
      var
       buffered_len = param[2],
       buffered_parts = param[1],
       new_parts = caml_call2(Core_Fqueue[41], buffered_parts, xpart),
       new_len = buffered_len + caml_call1(X[1][1][1], xpart) | 0;
      return caml_call2
               (Core[88],
                new_len,
                pack_threshold - estimated_header_length | 0)
              ? [1, part_from_state(new_parts, new_len), init]
              : [0, [0, new_parts, new_len]];
     }
     var _rj_ = caml_call1(X[2], t);
     return caml_call5(Streamable_Import[4][54], _rj_, init, _ri_, _rh_, _rg_);
    }
    var finalize = X[3];
    return [0,
            ,
            [0,
             [0,
              bin_size_t$0,
              bin_write_t$0,
              bin_read_t$1,
              bin_read_t$2,
              bin_shape_t$0,
              bin_writer_t,
              bin_reader_t,
              bin_t],
             create,
             apply_part],
            to_parts,
            finalize];
   }
   function V1$6(X){
    var
     _ra_ = X[1],
     _rb_ = _ra_[1],
     T =
       V1$5
        ([0,
          [0,
           [0,
            _rb_[1],
            _rb_[2],
            _rb_[3],
            _rb_[4],
            _rb_[5],
            _rb_[6],
            _rb_[7],
            _rb_[8]],
           _ra_[2],
           _ra_[3]],
          X[2],
          X[3]]);
    function sexp_of_t(t){
     var x_001 = t[1];
     return caml_call2(Core_Fqueue[13], X[1][1][10], x_001);
    }
    function t_of_sexp(x_002){
     return [0, caml_call2(Core_Fqueue[12], X[1][1][9], x_002), 0];
    }
    var
     include = V1([0, T[2], T[3], T[4]], [0, t_of_sexp, sexp_of_t]),
     Intermediate = include[1],
     to_parts = include[2],
     finalize = include[3];
    return [0, Intermediate, to_parts, finalize];
   }
   var Packed = [0, V1$6];
   function V1$7(Key, Data, Store){
    function to_store(param){
     if(! param) return caml_call1(Store[1], 0);
     var
      int$0 = param[3],
      key = param[2],
      store = param[1],
      _q$_ = caml_call1(Data[3], int$0);
     return caml_call3(Store[3], store, key, _q$_);
    }
    var
     _qZ_ =
       caml_call1
        (Bin_prot_Shape[5],
         [0,
          [0, cst_Add_key, [0, Key[5], 0]],
          [0, [0, cst_Add_part, [0, Data[1][1][5], 0]], 0]]),
     _q0_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$1), 0, _qZ_], 0],
     _q1_ = caml_call1(Bin_shape[4][1], cst_src_main_ml_393_6),
     group = caml_call2(Bin_prot_Shape[2], _q1_, _q0_),
     _q2_ = caml_call1(Bin_shape[2][1], cst_t$2),
     bin_shape_t = caml_call1(caml_call2(Bin_prot_Shape[10], group, _q2_), 0);
    function bin_size_t(param){
     if(0 === param[0]){
      var v1 = param[1], _q9_ = caml_call1(Key[1], v1);
      return caml_call2(Bin_prot_Common[23], 1, _q9_);
     }
     var v1$0 = param[1], _q__ = caml_call1(Data[1][1][1], v1$0);
     return caml_call2(Bin_prot_Common[23], 1, _q__);
    }
    function bin_write_t(buf, pos, param){
     if(0 === param[0]){
      var v1 = param[1], pos$0 = caml_call3(Bin_prot_Write[30], buf, pos, 0);
      return caml_call3(Key[2], buf, pos$0, v1);
     }
     var v1$0 = param[1], pos$1 = caml_call3(Bin_prot_Write[30], buf, pos, 1);
     return caml_call3(Data[1][1][2], buf, pos$1, v1$0);
    }
    var bin_writer_t = [0, bin_size_t, bin_write_t];
    function bin_read_t(buf, pos_ref, vint){
     return caml_call2
             (Bin_prot_Common[19], cst_src_main_ml_Stable_Of_key_, pos_ref[1]);
    }
    function bin_read_t$0(buf, pos_ref){
     var match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
     if(0 === match){
      var arg_1 = caml_call2(Key[3], buf, pos_ref);
      return [0, arg_1];
     }
     if(1 !== match) return caml_call2(Bin_prot_Common[18], _g_, pos_ref[1]);
     var arg_1$0 = caml_call2(Data[1][1][3], buf, pos_ref);
     return [1, arg_1$0];
    }
    var
     bin_reader_t = [0, bin_read_t$0, bin_read_t],
     bin_t = [0, bin_shape_t, bin_writer_t, bin_reader_t];
    function add_key(v0){return [0, v0];}
    function add_part(v0){return [1, v0];}
    function is_add_key(param){if(0 === param[0]) return; return;}
    function is_add_part(param){if(0 === param[0]) return; return;}
    function add_key_val(param){if(0 === param[0]) return; return;}
    function add_part_val(param){if(0 === param[0]) return; return;}
    var
     add_key$0 = [0, cst_Add_key$0, 0, add_key],
     add_part$0 = [0, cst_Add_part$0, 1, add_part];
    function fold(init, add_key_fun, add_part_fun){
     return caml_call2
             (add_part_fun,
              caml_call2(add_key_fun, init, add_key$0),
              add_part$0);
    }
    function iter(add_key_fun, add_part_fun){
     caml_call1(add_key_fun, add_key$0);
     return caml_call1(add_part_fun, add_part$0);
    }
    function map(t, add_key_fun, add_part_fun){
     if(0 === t[0]){
      var v0 = t[1];
      return caml_call2(add_key_fun, add_key$0, v0);
     }
     var v0$0 = t[1];
     return caml_call2(add_part_fun, add_part$0, v0$0);
    }
    function make_matcher(add_key_fun, add_part_fun, compile_acc){
     var compile_acc$0 = caml_call2(add_key_fun, add_key$0, compile_acc)[2];
     caml_call2(add_part_fun, add_part$0, compile_acc$0);
     return;
    }
    function to_rank(param){if(0 === param[0]) return; return;}
    function to_name(param){if(0 === param[0]) return; return;}
    var
     Variants =
       [0,
        add_key$0,
        add_part$0,
        fold,
        iter,
        map,
        make_matcher,
        to_rank,
        to_name,
        descriptions],
     Part =
       [0,
        bin_shape_t,
        bin_size_t,
        bin_write_t,
        bin_writer_t,
        bin_read_t,
        bin_read_t$0,
        bin_reader_t,
        bin_t,
        add_key,
        add_part,
        is_add_key,
        is_add_part,
        add_key_val,
        add_part_val,
        Variants];
    function create(param){return 0;}
    function apply_part(t, part){
     if(0 === part[0]){
      var key = part[1], store = to_store(t);
      if(caml_call2(Store[2], store, key))
       throw caml_maybe_attach_backtrace([0, Assert_failure, _h_], 1);
      return [0, store, key, caml_call1(Data[1][2], 0)];
     }
     var part$0 = part[1];
     if(! t) throw caml_maybe_attach_backtrace([0, Assert_failure, _i_], 1);
     var int$0 = t[3], key$0 = t[2], store$0 = t[1];
     return [0, store$0, key$0, caml_call2(Data[1][3], int$0, part$0)];
    }
    var
     Intermediate = [0, to_store, Part, create, apply_part],
     finalize = Intermediate[1];
    function to_parts(t){
     function _q3_(param){
      var
       data = param[2],
       key = param[1],
       _q5_ = Intermediate[2][10],
       _q6_ = caml_call1(Data[2], data),
       _q7_ = caml_call2(Streamable_Import[4][44], _q6_, _q5_),
       _q8_ = Intermediate[2][9].call(null, key);
      return caml_call2(Streamable_Import[4][120], _q8_, _q7_);
     }
     var _q4_ = caml_call1(Store[4], t);
     return caml_call2(Streamable_Import[4][73], _q4_, _q3_);
    }
    return [0, Intermediate, finalize, to_parts];
   }
   function V1$8(Key, Data, Store){
    var
     _qS_ = Data[1],
     _qT_ = _qS_[1],
     Plain =
       V1$7
        ([0,
          Key[1],
          Key[2],
          Key[3],
          Key[4],
          Key[5],
          Key[6],
          Key[7],
          Key[8],
          Key[9],
          Key[11],
          Key[12]],
         [0,
          [0,
           [0,
            _qT_[1],
            _qT_[2],
            _qT_[3],
            _qT_[4],
            _qT_[5],
            _qT_[6],
            _qT_[7],
            _qT_[8]],
           _qS_[2],
           _qS_[3]],
          Data[2],
          Data[3]],
         Store);
    function t_of_sexp(sexp_007){
     a:
     {
      if(0 === sexp_007[0]){
       var _qW_ = sexp_007[1];
       b:
       if(caml_string_notequal(_qW_, cst_Add_key$1)){
        if(caml_string_notequal(_qW_, cst_Add_part$1)){
         if(! caml_string_notequal(_qW_, cst_add_key)) break b;
         if(caml_string_notequal(_qW_, cst_add_part)) break a;
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[9], error_source_005, sexp_007);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[9], error_source_005, sexp_007);
      }
      var _qX_ = sexp_007[1];
      if(! _qX_)
       return caml_call2
               (Sexplib0_Sexp_conv_error[11], error_source_005, sexp_007);
      var _qY_ = _qX_[1];
      if(0 !== _qY_[0])
       return caml_call2
               (Sexplib0_Sexp_conv_error[10], error_source_005, sexp_007);
      var tag_008 = _qY_[1];
      b:
      if(caml_string_notequal(tag_008, cst_Add_key$1)){
       if(caml_string_notequal(tag_008, cst_Add_part$1)){
        if(! caml_string_notequal(tag_008, cst_add_key)) break b;
        if(caml_string_notequal(tag_008, cst_add_part)) break a;
       }
       var sexp_args_014 = _qX_[2];
       if(sexp_args_014 && ! sexp_args_014[2]){
        var
         arg0_015 = sexp_args_014[1],
         res0_016 = caml_call1(Data[1][1][9], arg0_015);
        return [1, res0_016];
       }
       return caml_call3
               (Sexplib0_Sexp_conv_error[8],
                error_source_005,
                tag_008,
                sexp_007);
      }
      var sexp_args_009 = _qX_[2];
      if(sexp_args_009 && ! sexp_args_009[2]){
       var
        arg0_010 = sexp_args_009[1],
        res0_011 = caml_call1(Key[10], arg0_010);
       return [0, res0_011];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[8],
               error_source_005,
               tag_008,
               sexp_007);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[12], error_source_005, sexp_007);
    }
    function sexp_of_t(param){
     if(0 === param[0]){
      var arg0_017 = param[1], res0_018 = caml_call1(Key[11], arg0_017);
      return [1, [0, _j_, [0, res0_018, 0]]];
     }
     var arg0_019 = param[1], res0_020 = caml_call1(Data[1][1][10], arg0_019);
     return [1, [0, _k_, [0, res0_020, 0]]];
    }
    var
     _qU_ = Plain[1],
     _qV_ = _qU_[2],
     include =
       V1
        ([0,
          [0,
           [0,
            _qV_[2],
            _qV_[3],
            _qV_[6],
            _qV_[5],
            _qV_[1],
            _qV_[4],
            _qV_[7],
            _qV_[8]],
           _qU_[3],
           _qU_[4]],
          Plain[3],
          Plain[2]],
         [0, t_of_sexp, sexp_of_t]),
     Intermediate = include[1],
     to_parts = include[2],
     finalize = include[3];
    return [0, , Intermediate, to_parts, finalize];
   }
   function Map_store(Key, Data){
    function create(param){return caml_call1(Core_Map[4], [0, Key[11]]);}
    var mem = Core_Map[48], set = Core_Map[38];
    function to_sequence(t){return caml_call4(Core_Map[114], 0, 0, 0, t);}
    return [0, create, mem, set, to_sequence];
   }
   function V1$9(Key, Data){
    var
     include = V1$7(Key, Data, Map_store(Key, Data)),
     Intermediate = include[1],
     finalize = include[2],
     to_parts = include[3],
     _qR_ = Intermediate[2];
    return [0,
            [0,
             [0,
              _qR_[2],
              _qR_[3],
              _qR_[6],
              _qR_[5],
              _qR_[1],
              _qR_[4],
              _qR_[7],
              _qR_[8]],
             Intermediate[3],
             Intermediate[4]],
            to_parts,
            finalize];
   }
   function V2(_qQ_, _qP_){return V1$5(V1$9(_qQ_, _qP_));}
   function V1$10(Key, Data){
    var
     _qN_ = Data[1],
     _qO_ = _qN_[1],
     include =
       V1$8
        (Key,
         Data,
         Map_store
          ([0,
            Key[1],
            Key[2],
            Key[3],
            Key[4],
            Key[5],
            Key[6],
            Key[7],
            Key[8],
            Key[9],
            Key[11],
            Key[12]],
           [0,
            [0,
             [0,
              _qO_[1],
              _qO_[2],
              _qO_[3],
              _qO_[4],
              _qO_[5],
              _qO_[6],
              _qO_[7],
              _qO_[8]],
             _qN_[2],
             _qN_[3]],
            Data[2],
            Data[3]])),
     Intermediate = include[2],
     to_parts = include[3],
     finalize = include[4];
    return [0, Intermediate, to_parts, finalize];
   }
   function V2$0(_qL_, _qK_){
    var _qM_ = V1$10(_qL_, _qK_);
    return caml_call1(Packed[1], _qM_);
   }
   var Of_map = [0, V1$10, V2$0];
   function V1$11(Key, Data){
    var
     Key_total_map = caml_call1(Total_map[29], Key),
     to_streamable = Total_map[1];
    function of_streamable(map){
     function _qJ_(key){return caml_call2(Core_Map[45], map, key);}
     return caml_call1(Key_total_map[17], _qJ_);
    }
    var
     _qI_ =
       caml_call1
        (caml_call1
          (Of_map[2],
           [0,
            Key[3],
            Key[4],
            Key[5],
            Key[6],
            Key[7],
            Key[8],
            Key[9],
            Key[10],
            Key[11],
            Key[1],
            Key[2],
            Key[13]]),
         Data),
     include =
       caml_call1
        (caml_call1(Of_streamable[1], _qI_),
         [0, to_streamable, of_streamable]),
     Intermediate = include[1],
     to_parts = include[2],
     finalize = include[3];
    return [0, , Intermediate, to_parts, finalize];
   }
   function V1$12(Key, Data){
    var
     Key_total_map = caml_call1(Total_map[29], Key),
     to_streamable = Total_map[1];
    function of_streamable(map){
     function _qH_(key){return caml_call2(Core_Map[45], map, key);}
     return caml_call1(Key_total_map[17], _qH_);
    }
    var
     _qG_ =
       V2
        ([0,
          Key[3],
          Key[4],
          Key[5],
          Key[6],
          Key[7],
          Key[8],
          Key[9],
          Key[10],
          Key[11],
          Key[2],
          Key[13]],
         Data),
     include =
       caml_call1
        (caml_call1(Of_streamable_rpc[1], [0, _qG_[2], _qG_[3], _qG_[4]]),
         [0, to_streamable, of_streamable]),
     Intermediate = include[1],
     to_parts = include[2],
     finalize = include[3];
    return [0, , Intermediate, to_parts, finalize];
   }
   function Hashtbl_store(Key, Data){
    function create(param){
     return caml_call3(Core_Hashtbl[4], 0, 0, [0, Key[10], Key[11], Key[12]]);
    }
    var mem = Core_Hashtbl[31];
    function set(t, key, data){
     caml_call3(Core_Hashtbl[37], t, key, data);
     return t;
    }
    function to_sequence(t){
     var _qF_ = caml_call1(Core_Hashtbl[78], t);
     return caml_call1(Streamable_Import[4][111], _qF_);
    }
    return [0, create, mem, set, to_sequence];
   }
   function V1$13(_qD_, Data){
    var
     Key =
       [0,
        _qD_[2],
        _qD_[3],
        _qD_[4],
        _qD_[5],
        _qD_[6],
        _qD_[7],
        _qD_[8],
        _qD_[9],
        _qD_[12],
        _qD_[10],
        _qD_[11],
        _qD_[1]],
     _qE_ = Hashtbl_store(Key, Data),
     include =
       V1$7
        ([0,
          Key[1],
          Key[2],
          Key[3],
          Key[4],
          Key[5],
          Key[6],
          Key[7],
          Key[8],
          Key[10],
          Key[11],
          Key[9]],
         Data,
         _qE_),
     Intermediate = include[1],
     finalize = include[2],
     to_parts = include[3],
     _qC_ = Intermediate[2];
    return V1$5
            ([0,
              [0,
               [0,
                _qC_[2],
                _qC_[3],
                _qC_[6],
                _qC_[5],
                _qC_[1],
                _qC_[4],
                _qC_[7],
                _qC_[8]],
               Intermediate[3],
               Intermediate[4]],
              to_parts,
              finalize]);
   }
   function V1$14(_qp_, Data){
    var
     _qq_ = _qp_[12],
     _qr_ = _qp_[10],
     _qt_ = _qp_[13],
     _qu_ = _qp_[9],
     _qv_ = _qp_[8],
     _qw_ = _qp_[7],
     _qx_ = _qp_[6],
     _qy_ = _qp_[5],
     _qz_ = _qp_[4],
     _qA_ = _qp_[3],
     _qB_ = _qp_[2],
     _qn_ = Data[1],
     _qo_ = _qn_[1],
     _qs_ = _qp_[11],
     include =
       V1$8
        ([0,
          _qB_,
          _qA_,
          _qz_,
          _qy_,
          _qx_,
          _qw_,
          _qv_,
          _qu_,
          _qr_,
          _qs_,
          _qq_,
          _qt_],
         Data,
         Hashtbl_store
          ([0,
            _qB_,
            _qA_,
            _qz_,
            _qy_,
            _qx_,
            _qw_,
            _qv_,
            _qu_,
            _qt_,
            _qr_,
            _qq_,
            _qp_[1]],
           [0,
            [0,
             [0,
              _qo_[1],
              _qo_[2],
              _qo_[3],
              _qo_[4],
              _qo_[5],
              _qo_[6],
              _qo_[7],
              _qo_[8]],
             _qn_[2],
             _qn_[3]],
            Data[2],
            Data[3]])),
     Intermediate = include[2],
     to_parts = include[3],
     finalize = include[4];
    return caml_call1(Packed[1], [0, Intermediate, to_parts, finalize]);
   }
   function V1$15(A, B){
    var
     _p$_ =
       caml_call1
        (Bin_prot_Shape[5],
         [0,
          [0, cst_A, [0, A[1][1][5], 0]],
          [0, [0, cst_B, [0, B[1][1][5], 0]], 0]]),
     _qa_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$3), 0, _p$_], 0],
     _qb_ = caml_call1(Bin_shape[4][1], cst_src_main_ml_639_10),
     group = caml_call2(Bin_prot_Shape[2], _qb_, _qa_),
     _qc_ = caml_call1(Bin_shape[2][1], cst_t$4),
     bin_shape_t = caml_call1(caml_call2(Bin_prot_Shape[10], group, _qc_), 0);
    function bin_size_t(param){
     if(0 === param[0]){
      var v1 = param[1], _ql_ = caml_call1(A[1][1][1], v1);
      return caml_call2(Bin_prot_Common[23], 1, _ql_);
     }
     var v1$0 = param[1], _qm_ = caml_call1(B[1][1][1], v1$0);
     return caml_call2(Bin_prot_Common[23], 1, _qm_);
    }
    function bin_write_t(buf, pos, param){
     if(0 === param[0]){
      var v1 = param[1], pos$0 = caml_call3(Bin_prot_Write[30], buf, pos, 0);
      return caml_call3(A[1][1][2], buf, pos$0, v1);
     }
     var v1$0 = param[1], pos$1 = caml_call3(Bin_prot_Write[30], buf, pos, 1);
     return caml_call3(B[1][1][2], buf, pos$1, v1$0);
    }
    var bin_writer_t = [0, bin_size_t, bin_write_t];
    function bin_read_t(buf, pos_ref, vint){
     return caml_call2
             (Bin_prot_Common[19], cst_src_main_ml_Stable_Of_tupl, pos_ref[1]);
    }
    function bin_read_t$0(buf, pos_ref){
     var match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
     if(0 === match){
      var arg_1 = caml_call2(A[1][1][3], buf, pos_ref);
      return [0, arg_1];
     }
     if(1 !== match) return caml_call2(Bin_prot_Common[18], _l_, pos_ref[1]);
     var arg_1$0 = caml_call2(B[1][1][3], buf, pos_ref);
     return [1, arg_1$0];
    }
    var
     bin_reader_t = [0, bin_read_t$0, bin_read_t],
     bin_t = [0, bin_shape_t, bin_writer_t, bin_reader_t];
    function a(v0){return [0, v0];}
    function b(v0){return [1, v0];}
    function create(param){
     var _qk_ = caml_call1(B[1][2], 0);
     return [0, caml_call1(A[1][2], 0), _qk_];
    }
    function apply_part(param, _qj_){
     var b = param[2], a = param[1];
     if(0 === _qj_[0]){
      var x = _qj_[1];
      return [0, caml_call2(A[1][3], a, x), b];
     }
     var x$0 = _qj_[1];
     return [0, a, caml_call2(B[1][3], b, x$0)];
    }
    function to_parts(param){
     var
      b$0 = param[2],
      a$0 = param[1],
      _qe_ = caml_call1(B[2], b$0),
      _qf_ = [0, caml_call2(Streamable_Import[4][44], _qe_, b), 0],
      _qg_ = caml_call1(A[2], a$0),
      _qh_ = [0, caml_call2(Streamable_Import[4][44], _qg_, a), _qf_],
      _qi_ = caml_call1(Streamable_Import[4][111], _qh_);
     return caml_call1(Streamable_Import[4][72], _qi_);
    }
    function finalize(param){
     var b = param[2], a = param[1], _qd_ = caml_call1(B[3], b);
     return [0, caml_call1(A[3], a), _qd_];
    }
    return [0,
            [0,
             [0,
              bin_size_t,
              bin_write_t,
              bin_read_t$0,
              bin_read_t,
              bin_shape_t,
              bin_writer_t,
              bin_reader_t,
              bin_t],
             create,
             apply_part],
            to_parts,
            finalize];
   }
   var Of_tuple2_rpc = [0, V1$15];
   function V1$16(A, B){
    var
     _p3_ = B[1],
     _p4_ = _p3_[1],
     _p6_ = A[1],
     _p7_ = _p6_[1],
     _p5_ =
       [0,
        [0,
         [0,
          _p4_[1],
          _p4_[2],
          _p4_[3],
          _p4_[4],
          _p4_[5],
          _p4_[6],
          _p4_[7],
          _p4_[8]],
         _p3_[2],
         _p3_[3]],
        B[2],
        B[3]],
     Plain =
       caml_call1
        (caml_call1
          (Of_tuple2_rpc[1],
           [0,
            [0,
             [0,
              _p7_[1],
              _p7_[2],
              _p7_[3],
              _p7_[4],
              _p7_[5],
              _p7_[6],
              _p7_[7],
              _p7_[8]],
             _p6_[2],
             _p6_[3]],
            A[2],
            A[3]]),
         _p5_);
    function t_of_sexp(sexp_025){
     a:
     {
      if(0 === sexp_025[0]){
       var _p8_ = sexp_025[1];
       b:
       if(caml_string_notequal(_p8_, cst_A$7)){
        if(caml_string_notequal(_p8_, cst_B$7)){
         if(! caml_string_notequal(_p8_, cst_a)) break b;
         if(caml_string_notequal(_p8_, cst_b)) break a;
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[9], error_source_023, sexp_025);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[9], error_source_023, sexp_025);
      }
      var _p9_ = sexp_025[1];
      if(! _p9_)
       return caml_call2
               (Sexplib0_Sexp_conv_error[11], error_source_023, sexp_025);
      var _p__ = _p9_[1];
      if(0 !== _p__[0])
       return caml_call2
               (Sexplib0_Sexp_conv_error[10], error_source_023, sexp_025);
      var tag_026 = _p__[1];
      b:
      if(caml_string_notequal(tag_026, cst_A$7)){
       if(caml_string_notequal(tag_026, cst_B$7)){
        if(! caml_string_notequal(tag_026, cst_a)) break b;
        if(caml_string_notequal(tag_026, cst_b)) break a;
       }
       var sexp_args_032 = _p9_[2];
       if(sexp_args_032 && ! sexp_args_032[2]){
        var
         arg0_033 = sexp_args_032[1],
         res0_034 = caml_call1(B[1][1][9], arg0_033);
        return [1, res0_034];
       }
       return caml_call3
               (Sexplib0_Sexp_conv_error[8],
                error_source_023,
                tag_026,
                sexp_025);
      }
      var sexp_args_027 = _p9_[2];
      if(sexp_args_027 && ! sexp_args_027[2]){
       var
        arg0_028 = sexp_args_027[1],
        res0_029 = caml_call1(A[1][1][9], arg0_028);
       return [0, res0_029];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[8],
               error_source_023,
               tag_026,
               sexp_025);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[12], error_source_023, sexp_025);
    }
    function sexp_of_t(param){
     if(0 === param[0]){
      var arg0_035 = param[1], res0_036 = caml_call1(A[1][1][10], arg0_035);
      return [1, [0, _m_, [0, res0_036, 0]]];
     }
     var arg0_037 = param[1], res0_038 = caml_call1(B[1][1][10], arg0_037);
     return [1, [0, _n_, [0, res0_038, 0]]];
    }
    var
     include = V1(Plain, [0, t_of_sexp, sexp_of_t]),
     Intermediate = include[1],
     to_parts = include[2],
     finalize = include[3];
    return [0, Intermediate, to_parts, finalize];
   }
   var Of_tuple2 = [0, V1$16];
   function V1$17(A, B, C){
    var
     _pK_ =
       caml_call1
        (Bin_prot_Shape[5],
         [0,
          [0, cst_A$0, [0, A[1][1][5], 0]],
          [0,
           [0, cst_B$0, [0, B[1][1][5], 0]],
           [0, [0, cst_C, [0, C[1][1][5], 0]], 0]]]),
     _pL_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$5), 0, _pK_], 0],
     _pM_ = caml_call1(Bin_shape[4][1], cst_src_main_ml_709_10),
     group = caml_call2(Bin_prot_Shape[2], _pM_, _pL_),
     _pN_ = caml_call1(Bin_shape[2][1], cst_t$6),
     bin_shape_t = caml_call1(caml_call2(Bin_prot_Shape[10], group, _pN_), 0);
    function bin_size_t(param){
     switch(param[0]){
       case 0:
        var v1 = param[1], _p0_ = caml_call1(A[1][1][1], v1);
        return caml_call2(Bin_prot_Common[23], 1, _p0_);
       case 1:
        var v1$0 = param[1], _p1_ = caml_call1(B[1][1][1], v1$0);
        return caml_call2(Bin_prot_Common[23], 1, _p1_);
       default:
        var v1$1 = param[1], _p2_ = caml_call1(C[1][1][1], v1$1);
        return caml_call2(Bin_prot_Common[23], 1, _p2_);
     }
    }
    function bin_write_t(buf, pos, param){
     switch(param[0]){
       case 0:
        var
         v1 = param[1],
         pos$0 = caml_call3(Bin_prot_Write[30], buf, pos, 0);
        return caml_call3(A[1][1][2], buf, pos$0, v1);
       case 1:
        var
         v1$0 = param[1],
         pos$1 = caml_call3(Bin_prot_Write[30], buf, pos, 1);
        return caml_call3(B[1][1][2], buf, pos$1, v1$0);
       default:
        var
         v1$1 = param[1],
         pos$2 = caml_call3(Bin_prot_Write[30], buf, pos, 2);
        return caml_call3(C[1][1][2], buf, pos$2, v1$1);
     }
    }
    var bin_writer_t = [0, bin_size_t, bin_write_t];
    function bin_read_t(buf, pos_ref, vint){
     return caml_call2
             (Bin_prot_Common[19],
              cst_src_main_ml_Stable_Of_tupl$0,
              pos_ref[1]);
    }
    function bin_read_t$0(buf, pos_ref){
     var match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
     if(2 < match >>> 0)
      return caml_call2(Bin_prot_Common[18], _o_, pos_ref[1]);
     switch(match){
       case 0:
        var arg_1 = caml_call2(A[1][1][3], buf, pos_ref); return [0, arg_1];
       case 1:
        var arg_1$0 = caml_call2(B[1][1][3], buf, pos_ref);
        return [1, arg_1$0];
       default:
        var arg_1$1 = caml_call2(C[1][1][3], buf, pos_ref);
        return [2, arg_1$1];
     }
    }
    var
     bin_reader_t = [0, bin_read_t$0, bin_read_t],
     bin_t = [0, bin_shape_t, bin_writer_t, bin_reader_t];
    function a(v0){return [0, v0];}
    function b(v0){return [1, v0];}
    function c(v0){return [2, v0];}
    function create(param){
     var _pY_ = caml_call1(C[1][2], 0), _pZ_ = caml_call1(B[1][2], 0);
     return [0, caml_call1(A[1][2], 0), _pZ_, _pY_];
    }
    function apply_part(param, _pX_){
     var c = param[3], b = param[2], a = param[1];
     switch(_pX_[0]){
       case 0:
        var x = _pX_[1]; return [0, caml_call2(A[1][3], a, x), b, c];
       case 1:
        var x$0 = _pX_[1]; return [0, a, caml_call2(B[1][3], b, x$0), c];
       default:
        var x$1 = _pX_[1]; return [0, a, b, caml_call2(C[1][3], c, x$1)];
     }
    }
    function to_parts(param){
     var
      c$0 = param[3],
      b$0 = param[2],
      a$0 = param[1],
      _pQ_ = caml_call1(C[2], c$0),
      _pR_ = [0, caml_call2(Streamable_Import[4][44], _pQ_, c), 0],
      _pS_ = caml_call1(B[2], b$0),
      _pT_ = [0, caml_call2(Streamable_Import[4][44], _pS_, b), _pR_],
      _pU_ = caml_call1(A[2], a$0),
      _pV_ = [0, caml_call2(Streamable_Import[4][44], _pU_, a), _pT_],
      _pW_ = caml_call1(Streamable_Import[4][111], _pV_);
     return caml_call1(Streamable_Import[4][72], _pW_);
    }
    function finalize(param){
     var
      c = param[3],
      b = param[2],
      a = param[1],
      _pO_ = caml_call1(C[3], c),
      _pP_ = caml_call1(B[3], b);
     return [0, caml_call1(A[3], a), _pP_, _pO_];
    }
    return [0,
            [0,
             [0,
              bin_size_t,
              bin_write_t,
              bin_read_t$0,
              bin_read_t,
              bin_shape_t,
              bin_writer_t,
              bin_reader_t,
              bin_t],
             create,
             apply_part],
            to_parts,
            finalize];
   }
   var Of_tuple3_rpc = [0, V1$17];
   function V1$18(A, B, C){
    var
     _pz_ = C[1],
     _pA_ = _pz_[1],
     _pC_ = B[1],
     _pD_ = _pC_[1],
     _pF_ = A[1],
     _pG_ = _pF_[1],
     _pB_ =
       [0,
        [0,
         [0,
          _pA_[1],
          _pA_[2],
          _pA_[3],
          _pA_[4],
          _pA_[5],
          _pA_[6],
          _pA_[7],
          _pA_[8]],
         _pz_[2],
         _pz_[3]],
        C[2],
        C[3]],
     _pE_ =
       [0,
        [0,
         [0,
          _pD_[1],
          _pD_[2],
          _pD_[3],
          _pD_[4],
          _pD_[5],
          _pD_[6],
          _pD_[7],
          _pD_[8]],
         _pC_[2],
         _pC_[3]],
        B[2],
        B[3]],
     Plain =
       caml_call1
        (caml_call1
          (caml_call1
            (Of_tuple3_rpc[1],
             [0,
              [0,
               [0,
                _pG_[1],
                _pG_[2],
                _pG_[3],
                _pG_[4],
                _pG_[5],
                _pG_[6],
                _pG_[7],
                _pG_[8]],
               _pF_[2],
               _pF_[3]],
              A[2],
              A[3]]),
           _pE_),
         _pB_);
    function t_of_sexp(sexp_043){
     a:
     {
      if(0 === sexp_043[0]){
       var _pH_ = sexp_043[1];
       b:
       if(caml_string_notequal(_pH_, cst_A$7)){
        c:
        if(caml_string_notequal(_pH_, cst_B$7)){
         if(caml_string_notequal(_pH_, cst_C$6)){
          if(! caml_string_notequal(_pH_, cst_a)) break b;
          if(! caml_string_notequal(_pH_, cst_b)) break c;
          if(caml_string_notequal(_pH_, cst_c)) break a;
         }
         return caml_call2
                 (Sexplib0_Sexp_conv_error[9], error_source_041, sexp_043);
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[9], error_source_041, sexp_043);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[9], error_source_041, sexp_043);
      }
      var _pI_ = sexp_043[1];
      if(! _pI_)
       return caml_call2
               (Sexplib0_Sexp_conv_error[11], error_source_041, sexp_043);
      var _pJ_ = _pI_[1];
      if(0 !== _pJ_[0])
       return caml_call2
               (Sexplib0_Sexp_conv_error[10], error_source_041, sexp_043);
      var tag_044 = _pJ_[1];
      b:
      if(caml_string_notequal(tag_044, cst_A$7)){
       c:
       if(caml_string_notequal(tag_044, cst_B$7)){
        if(caml_string_notequal(tag_044, cst_C$6)){
         if(! caml_string_notequal(tag_044, cst_a)) break b;
         if(! caml_string_notequal(tag_044, cst_b)) break c;
         if(caml_string_notequal(tag_044, cst_c)) break a;
        }
        var sexp_args_055 = _pI_[2];
        if(sexp_args_055 && ! sexp_args_055[2]){
         var
          arg0_056 = sexp_args_055[1],
          res0_057 = caml_call1(C[1][1][9], arg0_056);
         return [2, res0_057];
        }
        return caml_call3
                (Sexplib0_Sexp_conv_error[8],
                 error_source_041,
                 tag_044,
                 sexp_043);
       }
       var sexp_args_050 = _pI_[2];
       if(sexp_args_050 && ! sexp_args_050[2]){
        var
         arg0_051 = sexp_args_050[1],
         res0_052 = caml_call1(B[1][1][9], arg0_051);
        return [1, res0_052];
       }
       return caml_call3
               (Sexplib0_Sexp_conv_error[8],
                error_source_041,
                tag_044,
                sexp_043);
      }
      var sexp_args_045 = _pI_[2];
      if(sexp_args_045 && ! sexp_args_045[2]){
       var
        arg0_046 = sexp_args_045[1],
        res0_047 = caml_call1(A[1][1][9], arg0_046);
       return [0, res0_047];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[8],
               error_source_041,
               tag_044,
               sexp_043);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[12], error_source_041, sexp_043);
    }
    function sexp_of_t(param){
     switch(param[0]){
       case 0:
        var arg0_058 = param[1], res0_059 = caml_call1(A[1][1][10], arg0_058);
        return [1, [0, _p_, [0, res0_059, 0]]];
       case 1:
        var arg0_060 = param[1], res0_061 = caml_call1(B[1][1][10], arg0_060);
        return [1, [0, _q_, [0, res0_061, 0]]];
       default:
        var arg0_062 = param[1], res0_063 = caml_call1(C[1][1][10], arg0_062);
        return [1, [0, _r_, [0, res0_063, 0]]];
     }
    }
    var
     include = V1(Plain, [0, t_of_sexp, sexp_of_t]),
     Intermediate = include[1],
     to_parts = include[2],
     finalize = include[3];
    return [0, Intermediate, to_parts, finalize];
   }
   var Of_tuple3 = [0, V1$18];
   function V1$19(A, B, C, D){
    var
     _pb_ =
       caml_call1
        (Bin_prot_Shape[5],
         [0,
          [0, cst_A$1, [0, A[1][1][5], 0]],
          [0,
           [0, cst_B$1, [0, B[1][1][5], 0]],
           [0,
            [0, cst_C$0, [0, C[1][1][5], 0]],
            [0, [0, cst_D, [0, D[1][1][5], 0]], 0]]]]),
     _pc_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$7), 0, _pb_], 0],
     _pd_ = caml_call1(Bin_shape[4][1], cst_src_main_ml_786_10),
     group = caml_call2(Bin_prot_Shape[2], _pd_, _pc_),
     _pe_ = caml_call1(Bin_shape[2][1], cst_t$8),
     bin_shape_t = caml_call1(caml_call2(Bin_prot_Shape[10], group, _pe_), 0);
    function bin_size_t(param){
     switch(param[0]){
       case 0:
        var v1 = param[1], _pv_ = caml_call1(A[1][1][1], v1);
        return caml_call2(Bin_prot_Common[23], 1, _pv_);
       case 1:
        var v1$0 = param[1], _pw_ = caml_call1(B[1][1][1], v1$0);
        return caml_call2(Bin_prot_Common[23], 1, _pw_);
       case 2:
        var v1$1 = param[1], _px_ = caml_call1(C[1][1][1], v1$1);
        return caml_call2(Bin_prot_Common[23], 1, _px_);
       default:
        var v1$2 = param[1], _py_ = caml_call1(D[1][1][1], v1$2);
        return caml_call2(Bin_prot_Common[23], 1, _py_);
     }
    }
    function bin_write_t(buf, pos, param){
     switch(param[0]){
       case 0:
        var
         v1 = param[1],
         pos$0 = caml_call3(Bin_prot_Write[30], buf, pos, 0);
        return caml_call3(A[1][1][2], buf, pos$0, v1);
       case 1:
        var
         v1$0 = param[1],
         pos$1 = caml_call3(Bin_prot_Write[30], buf, pos, 1);
        return caml_call3(B[1][1][2], buf, pos$1, v1$0);
       case 2:
        var
         v1$1 = param[1],
         pos$2 = caml_call3(Bin_prot_Write[30], buf, pos, 2);
        return caml_call3(C[1][1][2], buf, pos$2, v1$1);
       default:
        var
         v1$2 = param[1],
         pos$3 = caml_call3(Bin_prot_Write[30], buf, pos, 3);
        return caml_call3(D[1][1][2], buf, pos$3, v1$2);
     }
    }
    var bin_writer_t = [0, bin_size_t, bin_write_t];
    function bin_read_t(buf, pos_ref, vint){
     return caml_call2
             (Bin_prot_Common[19],
              cst_src_main_ml_Stable_Of_tupl$1,
              pos_ref[1]);
    }
    function bin_read_t$0(buf, pos_ref){
     var match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
     if(3 < match >>> 0)
      return caml_call2(Bin_prot_Common[18], _s_, pos_ref[1]);
     switch(match){
       case 0:
        var arg_1 = caml_call2(A[1][1][3], buf, pos_ref); return [0, arg_1];
       case 1:
        var arg_1$0 = caml_call2(B[1][1][3], buf, pos_ref);
        return [1, arg_1$0];
       case 2:
        var arg_1$1 = caml_call2(C[1][1][3], buf, pos_ref);
        return [2, arg_1$1];
       default:
        var arg_1$2 = caml_call2(D[1][1][3], buf, pos_ref);
        return [3, arg_1$2];
     }
    }
    var
     bin_reader_t = [0, bin_read_t$0, bin_read_t],
     bin_t = [0, bin_shape_t, bin_writer_t, bin_reader_t];
    function a(v0){return [0, v0];}
    function b(v0){return [1, v0];}
    function c(v0){return [2, v0];}
    function d(v0){return [3, v0];}
    function create(param){
     var
      _ps_ = caml_call1(D[1][2], 0),
      _pt_ = caml_call1(C[1][2], 0),
      _pu_ = caml_call1(B[1][2], 0);
     return [0, caml_call1(A[1][2], 0), _pu_, _pt_, _ps_];
    }
    function apply_part(param, _pr_){
     var d = param[4], c = param[3], b = param[2], a = param[1];
     switch(_pr_[0]){
       case 0:
        var x = _pr_[1]; return [0, caml_call2(A[1][3], a, x), b, c, d];
       case 1:
        var x$0 = _pr_[1]; return [0, a, caml_call2(B[1][3], b, x$0), c, d];
       case 2:
        var x$1 = _pr_[1]; return [0, a, b, caml_call2(C[1][3], c, x$1), d];
       default:
        var x$2 = _pr_[1]; return [0, a, b, c, caml_call2(D[1][3], d, x$2)];
     }
    }
    function to_parts(param){
     var
      d$0 = param[4],
      c$0 = param[3],
      b$0 = param[2],
      a$0 = param[1],
      _pi_ = caml_call1(D[2], d$0),
      _pj_ = [0, caml_call2(Streamable_Import[4][44], _pi_, d), 0],
      _pk_ = caml_call1(C[2], c$0),
      _pl_ = [0, caml_call2(Streamable_Import[4][44], _pk_, c), _pj_],
      _pm_ = caml_call1(B[2], b$0),
      _pn_ = [0, caml_call2(Streamable_Import[4][44], _pm_, b), _pl_],
      _po_ = caml_call1(A[2], a$0),
      _pp_ = [0, caml_call2(Streamable_Import[4][44], _po_, a), _pn_],
      _pq_ = caml_call1(Streamable_Import[4][111], _pp_);
     return caml_call1(Streamable_Import[4][72], _pq_);
    }
    function finalize(param){
     var
      d = param[4],
      c = param[3],
      b = param[2],
      a = param[1],
      _pf_ = caml_call1(D[3], d),
      _pg_ = caml_call1(C[3], c),
      _ph_ = caml_call1(B[3], b);
     return [0, caml_call1(A[3], a), _ph_, _pg_, _pf_];
    }
    return [0,
            [0,
             [0,
              bin_size_t,
              bin_write_t,
              bin_read_t$0,
              bin_read_t,
              bin_shape_t,
              bin_writer_t,
              bin_reader_t,
              bin_t],
             create,
             apply_part],
            to_parts,
            finalize];
   }
   var Of_tuple4_rpc = [0, V1$19];
   function V1$20(A, B, C, D){
    var
     _oZ_ = D[1],
     _o0_ = _oZ_[1],
     _o2_ = C[1],
     _o3_ = _o2_[1],
     _o5_ = B[1],
     _o6_ = _o5_[1],
     _o8_ = A[1],
     _o9_ = _o8_[1],
     _o1_ =
       [0,
        [0,
         [0,
          _o0_[1],
          _o0_[2],
          _o0_[3],
          _o0_[4],
          _o0_[5],
          _o0_[6],
          _o0_[7],
          _o0_[8]],
         _oZ_[2],
         _oZ_[3]],
        D[2],
        D[3]],
     _o4_ =
       [0,
        [0,
         [0,
          _o3_[1],
          _o3_[2],
          _o3_[3],
          _o3_[4],
          _o3_[5],
          _o3_[6],
          _o3_[7],
          _o3_[8]],
         _o2_[2],
         _o2_[3]],
        C[2],
        C[3]],
     _o7_ =
       [0,
        [0,
         [0,
          _o6_[1],
          _o6_[2],
          _o6_[3],
          _o6_[4],
          _o6_[5],
          _o6_[6],
          _o6_[7],
          _o6_[8]],
         _o5_[2],
         _o5_[3]],
        B[2],
        B[3]],
     Plain =
       caml_call1
        (caml_call1
          (caml_call1
            (caml_call1
              (Of_tuple4_rpc[1],
               [0,
                [0,
                 [0,
                  _o9_[1],
                  _o9_[2],
                  _o9_[3],
                  _o9_[4],
                  _o9_[5],
                  _o9_[6],
                  _o9_[7],
                  _o9_[8]],
                 _o8_[2],
                 _o8_[3]],
                A[2],
                A[3]]),
             _o7_),
           _o4_),
         _o1_);
    function t_of_sexp(sexp_068){
     a:
     {
      if(0 === sexp_068[0]){
       var _o__ = sexp_068[1];
       b:
       if(caml_string_notequal(_o__, cst_A$7)){
        c:
        if(caml_string_notequal(_o__, cst_B$7)){
         d:
         if(caml_string_notequal(_o__, cst_C$6)){
          if(caml_string_notequal(_o__, cst_D$5)){
           if(! caml_string_notequal(_o__, cst_a)) break b;
           if(! caml_string_notequal(_o__, cst_b)) break c;
           if(! caml_string_notequal(_o__, cst_c)) break d;
           if(caml_string_notequal(_o__, cst_d)) break a;
          }
          return caml_call2
                  (Sexplib0_Sexp_conv_error[9], error_source_066, sexp_068);
         }
         return caml_call2
                 (Sexplib0_Sexp_conv_error[9], error_source_066, sexp_068);
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[9], error_source_066, sexp_068);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[9], error_source_066, sexp_068);
      }
      var _o$_ = sexp_068[1];
      if(! _o$_)
       return caml_call2
               (Sexplib0_Sexp_conv_error[11], error_source_066, sexp_068);
      var _pa_ = _o$_[1];
      if(0 !== _pa_[0])
       return caml_call2
               (Sexplib0_Sexp_conv_error[10], error_source_066, sexp_068);
      var tag_069 = _pa_[1];
      b:
      if(caml_string_notequal(tag_069, cst_A$7)){
       c:
       if(caml_string_notequal(tag_069, cst_B$7)){
        d:
        if(caml_string_notequal(tag_069, cst_C$6)){
         if(caml_string_notequal(tag_069, cst_D$5)){
          if(! caml_string_notequal(tag_069, cst_a)) break b;
          if(! caml_string_notequal(tag_069, cst_b)) break c;
          if(! caml_string_notequal(tag_069, cst_c)) break d;
          if(caml_string_notequal(tag_069, cst_d)) break a;
         }
         var sexp_args_085 = _o$_[2];
         if(sexp_args_085 && ! sexp_args_085[2]){
          var
           arg0_086 = sexp_args_085[1],
           res0_087 = caml_call1(D[1][1][9], arg0_086);
          return [3, res0_087];
         }
         return caml_call3
                 (Sexplib0_Sexp_conv_error[8],
                  error_source_066,
                  tag_069,
                  sexp_068);
        }
        var sexp_args_080 = _o$_[2];
        if(sexp_args_080 && ! sexp_args_080[2]){
         var
          arg0_081 = sexp_args_080[1],
          res0_082 = caml_call1(C[1][1][9], arg0_081);
         return [2, res0_082];
        }
        return caml_call3
                (Sexplib0_Sexp_conv_error[8],
                 error_source_066,
                 tag_069,
                 sexp_068);
       }
       var sexp_args_075 = _o$_[2];
       if(sexp_args_075 && ! sexp_args_075[2]){
        var
         arg0_076 = sexp_args_075[1],
         res0_077 = caml_call1(B[1][1][9], arg0_076);
        return [1, res0_077];
       }
       return caml_call3
               (Sexplib0_Sexp_conv_error[8],
                error_source_066,
                tag_069,
                sexp_068);
      }
      var sexp_args_070 = _o$_[2];
      if(sexp_args_070 && ! sexp_args_070[2]){
       var
        arg0_071 = sexp_args_070[1],
        res0_072 = caml_call1(A[1][1][9], arg0_071);
       return [0, res0_072];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[8],
               error_source_066,
               tag_069,
               sexp_068);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[12], error_source_066, sexp_068);
    }
    function sexp_of_t(param){
     switch(param[0]){
       case 0:
        var arg0_088 = param[1], res0_089 = caml_call1(A[1][1][10], arg0_088);
        return [1, [0, _t_, [0, res0_089, 0]]];
       case 1:
        var arg0_090 = param[1], res0_091 = caml_call1(B[1][1][10], arg0_090);
        return [1, [0, _u_, [0, res0_091, 0]]];
       case 2:
        var arg0_092 = param[1], res0_093 = caml_call1(C[1][1][10], arg0_092);
        return [1, [0, _v_, [0, res0_093, 0]]];
       default:
        var arg0_094 = param[1], res0_095 = caml_call1(D[1][1][10], arg0_094);
        return [1, [0, _w_, [0, res0_095, 0]]];
     }
    }
    var
     include = V1(Plain, [0, t_of_sexp, sexp_of_t]),
     Intermediate = include[1],
     to_parts = include[2],
     finalize = include[3];
    return [0, Intermediate, to_parts, finalize];
   }
   var Of_tuple4 = [0, V1$20];
   function V1$21(A, B, C, D, E){
    var
     _ow_ =
       caml_call1
        (Bin_prot_Shape[5],
         [0,
          [0, cst_A$2, [0, A[1][1][5], 0]],
          [0,
           [0, cst_B$2, [0, B[1][1][5], 0]],
           [0,
            [0, cst_C$1, [0, C[1][1][5], 0]],
            [0,
             [0, cst_D$0, [0, D[1][1][5], 0]],
             [0, [0, cst_E, [0, E[1][1][5], 0]], 0]]]]]),
     _ox_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$9), 0, _ow_], 0],
     _oy_ = caml_call1(Bin_shape[4][1], cst_src_main_ml_876_10),
     group = caml_call2(Bin_prot_Shape[2], _oy_, _ox_),
     _oz_ = caml_call1(Bin_shape[2][1], cst_t$10),
     bin_shape_t = caml_call1(caml_call2(Bin_prot_Shape[10], group, _oz_), 0);
    function bin_size_t(param){
     switch(param[0]){
       case 0:
        var v1 = param[1], _oU_ = caml_call1(A[1][1][1], v1);
        return caml_call2(Bin_prot_Common[23], 1, _oU_);
       case 1:
        var v1$0 = param[1], _oV_ = caml_call1(B[1][1][1], v1$0);
        return caml_call2(Bin_prot_Common[23], 1, _oV_);
       case 2:
        var v1$1 = param[1], _oW_ = caml_call1(C[1][1][1], v1$1);
        return caml_call2(Bin_prot_Common[23], 1, _oW_);
       case 3:
        var v1$2 = param[1], _oX_ = caml_call1(D[1][1][1], v1$2);
        return caml_call2(Bin_prot_Common[23], 1, _oX_);
       default:
        var v1$3 = param[1], _oY_ = caml_call1(E[1][1][1], v1$3);
        return caml_call2(Bin_prot_Common[23], 1, _oY_);
     }
    }
    function bin_write_t(buf, pos, param){
     switch(param[0]){
       case 0:
        var
         v1 = param[1],
         pos$0 = caml_call3(Bin_prot_Write[30], buf, pos, 0);
        return caml_call3(A[1][1][2], buf, pos$0, v1);
       case 1:
        var
         v1$0 = param[1],
         pos$1 = caml_call3(Bin_prot_Write[30], buf, pos, 1);
        return caml_call3(B[1][1][2], buf, pos$1, v1$0);
       case 2:
        var
         v1$1 = param[1],
         pos$2 = caml_call3(Bin_prot_Write[30], buf, pos, 2);
        return caml_call3(C[1][1][2], buf, pos$2, v1$1);
       case 3:
        var
         v1$2 = param[1],
         pos$3 = caml_call3(Bin_prot_Write[30], buf, pos, 3);
        return caml_call3(D[1][1][2], buf, pos$3, v1$2);
       default:
        var
         v1$3 = param[1],
         pos$4 = caml_call3(Bin_prot_Write[30], buf, pos, 4);
        return caml_call3(E[1][1][2], buf, pos$4, v1$3);
     }
    }
    var bin_writer_t = [0, bin_size_t, bin_write_t];
    function bin_read_t(buf, pos_ref, vint){
     return caml_call2
             (Bin_prot_Common[19],
              cst_src_main_ml_Stable_Of_tupl$2,
              pos_ref[1]);
    }
    function bin_read_t$0(buf, pos_ref){
     var match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
     if(4 < match >>> 0)
      return caml_call2(Bin_prot_Common[18], _x_, pos_ref[1]);
     switch(match){
       case 0:
        var arg_1 = caml_call2(A[1][1][3], buf, pos_ref); return [0, arg_1];
       case 1:
        var arg_1$0 = caml_call2(B[1][1][3], buf, pos_ref);
        return [1, arg_1$0];
       case 2:
        var arg_1$1 = caml_call2(C[1][1][3], buf, pos_ref);
        return [2, arg_1$1];
       case 3:
        var arg_1$2 = caml_call2(D[1][1][3], buf, pos_ref);
        return [3, arg_1$2];
       default:
        var arg_1$3 = caml_call2(E[1][1][3], buf, pos_ref);
        return [4, arg_1$3];
     }
    }
    var
     bin_reader_t = [0, bin_read_t$0, bin_read_t],
     bin_t = [0, bin_shape_t, bin_writer_t, bin_reader_t];
    function a(v0){return [0, v0];}
    function b(v0){return [1, v0];}
    function c(v0){return [2, v0];}
    function d(v0){return [3, v0];}
    function e(v0){return [4, v0];}
    function create(param){
     var
      _oQ_ = caml_call1(E[1][2], 0),
      _oR_ = caml_call1(D[1][2], 0),
      _oS_ = caml_call1(C[1][2], 0),
      _oT_ = caml_call1(B[1][2], 0);
     return [0, caml_call1(A[1][2], 0), _oT_, _oS_, _oR_, _oQ_];
    }
    function apply_part(param, _oP_){
     var e = param[5], d = param[4], c = param[3], b = param[2], a = param[1];
     switch(_oP_[0]){
       case 0:
        var x = _oP_[1]; return [0, caml_call2(A[1][3], a, x), b, c, d, e];
       case 1:
        var x$0 = _oP_[1];
        return [0, a, caml_call2(B[1][3], b, x$0), c, d, e];
       case 2:
        var x$1 = _oP_[1];
        return [0, a, b, caml_call2(C[1][3], c, x$1), d, e];
       case 3:
        var x$2 = _oP_[1];
        return [0, a, b, c, caml_call2(D[1][3], d, x$2), e];
       default:
        var x$3 = _oP_[1];
        return [0, a, b, c, d, caml_call2(E[1][3], e, x$3)];
     }
    }
    function to_parts(param){
     var
      e$0 = param[5],
      d$0 = param[4],
      c$0 = param[3],
      b$0 = param[2],
      a$0 = param[1],
      _oE_ = caml_call1(E[2], e$0),
      _oF_ = [0, caml_call2(Streamable_Import[4][44], _oE_, e), 0],
      _oG_ = caml_call1(D[2], d$0),
      _oH_ = [0, caml_call2(Streamable_Import[4][44], _oG_, d), _oF_],
      _oI_ = caml_call1(C[2], c$0),
      _oJ_ = [0, caml_call2(Streamable_Import[4][44], _oI_, c), _oH_],
      _oK_ = caml_call1(B[2], b$0),
      _oL_ = [0, caml_call2(Streamable_Import[4][44], _oK_, b), _oJ_],
      _oM_ = caml_call1(A[2], a$0),
      _oN_ = [0, caml_call2(Streamable_Import[4][44], _oM_, a), _oL_],
      _oO_ = caml_call1(Streamable_Import[4][111], _oN_);
     return caml_call1(Streamable_Import[4][72], _oO_);
    }
    function finalize(param){
     var
      e = param[5],
      d = param[4],
      c = param[3],
      b = param[2],
      a = param[1],
      _oA_ = caml_call1(E[3], e),
      _oB_ = caml_call1(D[3], d),
      _oC_ = caml_call1(C[3], c),
      _oD_ = caml_call1(B[3], b);
     return [0, caml_call1(A[3], a), _oD_, _oC_, _oB_, _oA_];
    }
    return [0,
            [0,
             [0,
              bin_size_t,
              bin_write_t,
              bin_read_t$0,
              bin_read_t,
              bin_shape_t,
              bin_writer_t,
              bin_reader_t,
              bin_t],
             create,
             apply_part],
            to_parts,
            finalize];
   }
   var Of_tuple5_rpc = [0, V1$21];
   function V1$22(A, B, C, D, E){
    var
     _od_ = E[1],
     _oe_ = _od_[1],
     _og_ = D[1],
     _oh_ = _og_[1],
     _oj_ = C[1],
     _ok_ = _oj_[1],
     _om_ = B[1],
     _on_ = _om_[1],
     _op_ = A[1],
     _oq_ = _op_[1],
     _of_ =
       [0,
        [0,
         [0,
          _oe_[1],
          _oe_[2],
          _oe_[3],
          _oe_[4],
          _oe_[5],
          _oe_[6],
          _oe_[7],
          _oe_[8]],
         _od_[2],
         _od_[3]],
        E[2],
        E[3]],
     _oi_ =
       [0,
        [0,
         [0,
          _oh_[1],
          _oh_[2],
          _oh_[3],
          _oh_[4],
          _oh_[5],
          _oh_[6],
          _oh_[7],
          _oh_[8]],
         _og_[2],
         _og_[3]],
        D[2],
        D[3]],
     _ol_ =
       [0,
        [0,
         [0,
          _ok_[1],
          _ok_[2],
          _ok_[3],
          _ok_[4],
          _ok_[5],
          _ok_[6],
          _ok_[7],
          _ok_[8]],
         _oj_[2],
         _oj_[3]],
        C[2],
        C[3]],
     _oo_ =
       [0,
        [0,
         [0,
          _on_[1],
          _on_[2],
          _on_[3],
          _on_[4],
          _on_[5],
          _on_[6],
          _on_[7],
          _on_[8]],
         _om_[2],
         _om_[3]],
        B[2],
        B[3]],
     Plain =
       caml_call1
        (caml_call1
          (caml_call1
            (caml_call1
              (caml_call1
                (Of_tuple5_rpc[1],
                 [0,
                  [0,
                   [0,
                    _oq_[1],
                    _oq_[2],
                    _oq_[3],
                    _oq_[4],
                    _oq_[5],
                    _oq_[6],
                    _oq_[7],
                    _oq_[8]],
                   _op_[2],
                   _op_[3]],
                  A[2],
                  A[3]]),
               _oo_),
             _ol_),
           _oi_),
         _of_);
    function t_of_sexp(sexp_100){
     a:
     {
      if(0 === sexp_100[0]){
       var _or_ = sexp_100[1], _os_ = caml_string_compare(_or_, cst_a);
       b:
       {
        c:
        {
         d:
         {
          e:
          {
           if(0 <= _os_){
            if(0 < _os_){
             if(! caml_string_notequal(_or_, cst_b)) break e;
             if(! caml_string_notequal(_or_, cst_c)) break d;
             if(! caml_string_notequal(_or_, cst_d)) break c;
             if(caml_string_notequal(_or_, cst_e)) break a;
             break b;
            }
           }
           else if(caml_string_notequal(_or_, cst_A$7)){
            if(! caml_string_notequal(_or_, cst_B$7)) break e;
            if(! caml_string_notequal(_or_, cst_C$6)) break d;
            if(! caml_string_notequal(_or_, cst_D$5)) break c;
            if(caml_string_notequal(_or_, cst_E$4)) break a;
            break b;
           }
           return caml_call2
                   (Sexplib0_Sexp_conv_error[9], error_source_098, sexp_100);
          }
          return caml_call2
                  (Sexplib0_Sexp_conv_error[9], error_source_098, sexp_100);
         }
         return caml_call2
                 (Sexplib0_Sexp_conv_error[9], error_source_098, sexp_100);
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[9], error_source_098, sexp_100);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[9], error_source_098, sexp_100);
      }
      var _ot_ = sexp_100[1];
      if(! _ot_)
       return caml_call2
               (Sexplib0_Sexp_conv_error[11], error_source_098, sexp_100);
      var _ou_ = _ot_[1];
      if(0 !== _ou_[0])
       return caml_call2
               (Sexplib0_Sexp_conv_error[10], error_source_098, sexp_100);
      var tag_101 = _ou_[1], _ov_ = caml_string_compare(tag_101, cst_a);
      b:
      {
       c:
       {
        d:
        {
         e:
         {
          if(0 <= _ov_){
           if(0 < _ov_){
            if(! caml_string_notequal(tag_101, cst_b)) break e;
            if(! caml_string_notequal(tag_101, cst_c)) break d;
            if(! caml_string_notequal(tag_101, cst_d)) break c;
            if(caml_string_notequal(tag_101, cst_e)) break a;
            break b;
           }
          }
          else if(caml_string_notequal(tag_101, cst_A$7)){
           if(! caml_string_notequal(tag_101, cst_B$7)) break e;
           if(! caml_string_notequal(tag_101, cst_C$6)) break d;
           if(! caml_string_notequal(tag_101, cst_D$5)) break c;
           if(caml_string_notequal(tag_101, cst_E$4)) break a;
           break b;
          }
          var sexp_args_102 = _ot_[2];
          if(sexp_args_102 && ! sexp_args_102[2]){
           var
            arg0_103 = sexp_args_102[1],
            res0_104 = caml_call1(A[1][1][9], arg0_103);
           return [0, res0_104];
          }
          return caml_call3
                  (Sexplib0_Sexp_conv_error[8],
                   error_source_098,
                   tag_101,
                   sexp_100);
         }
         var sexp_args_107 = _ot_[2];
         if(sexp_args_107 && ! sexp_args_107[2]){
          var
           arg0_108 = sexp_args_107[1],
           res0_109 = caml_call1(B[1][1][9], arg0_108);
          return [1, res0_109];
         }
         return caml_call3
                 (Sexplib0_Sexp_conv_error[8],
                  error_source_098,
                  tag_101,
                  sexp_100);
        }
        var sexp_args_112 = _ot_[2];
        if(sexp_args_112 && ! sexp_args_112[2]){
         var
          arg0_113 = sexp_args_112[1],
          res0_114 = caml_call1(C[1][1][9], arg0_113);
         return [2, res0_114];
        }
        return caml_call3
                (Sexplib0_Sexp_conv_error[8],
                 error_source_098,
                 tag_101,
                 sexp_100);
       }
       var sexp_args_117 = _ot_[2];
       if(sexp_args_117 && ! sexp_args_117[2]){
        var
         arg0_118 = sexp_args_117[1],
         res0_119 = caml_call1(D[1][1][9], arg0_118);
        return [3, res0_119];
       }
       return caml_call3
               (Sexplib0_Sexp_conv_error[8],
                error_source_098,
                tag_101,
                sexp_100);
      }
      var sexp_args_122 = _ot_[2];
      if(sexp_args_122 && ! sexp_args_122[2]){
       var
        arg0_123 = sexp_args_122[1],
        res0_124 = caml_call1(E[1][1][9], arg0_123);
       return [4, res0_124];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[8],
               error_source_098,
               tag_101,
               sexp_100);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[12], error_source_098, sexp_100);
    }
    function sexp_of_t(param){
     switch(param[0]){
       case 0:
        var arg0_125 = param[1], res0_126 = caml_call1(A[1][1][10], arg0_125);
        return [1, [0, _y_, [0, res0_126, 0]]];
       case 1:
        var arg0_127 = param[1], res0_128 = caml_call1(B[1][1][10], arg0_127);
        return [1, [0, _z_, [0, res0_128, 0]]];
       case 2:
        var arg0_129 = param[1], res0_130 = caml_call1(C[1][1][10], arg0_129);
        return [1, [0, _A_, [0, res0_130, 0]]];
       case 3:
        var arg0_131 = param[1], res0_132 = caml_call1(D[1][1][10], arg0_131);
        return [1, [0, _B_, [0, res0_132, 0]]];
       default:
        var arg0_133 = param[1], res0_134 = caml_call1(E[1][1][10], arg0_133);
        return [1, [0, _C_, [0, res0_134, 0]]];
     }
    }
    var
     include = V1(Plain, [0, t_of_sexp, sexp_of_t]),
     Intermediate = include[1],
     to_parts = include[2],
     finalize = include[3];
    return [0, Intermediate, to_parts, finalize];
   }
   var Of_tuple5 = [0, V1$22];
   function V1$23(A, B, C, D, E, F){
    var
     _nH_ =
       caml_call1
        (Bin_prot_Shape[5],
         [0,
          [0, cst_A$3, [0, A[1][1][5], 0]],
          [0,
           [0, cst_B$3, [0, B[1][1][5], 0]],
           [0,
            [0, cst_C$2, [0, C[1][1][5], 0]],
            [0,
             [0, cst_D$1, [0, D[1][1][5], 0]],
             [0,
              [0, cst_E$0, [0, E[1][1][5], 0]],
              [0, [0, cst_F, [0, F[1][1][5], 0]], 0]]]]]]),
     _nI_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$11), 0, _nH_], 0],
     _nJ_ = caml_call1(Bin_shape[4][1], cst_src_main_ml_975_10),
     group = caml_call2(Bin_prot_Shape[2], _nJ_, _nI_),
     _nK_ = caml_call1(Bin_shape[2][1], cst_t$12),
     bin_shape_t = caml_call1(caml_call2(Bin_prot_Shape[10], group, _nK_), 0);
    function bin_size_t(param){
     switch(param[0]){
       case 0:
        var v1 = param[1], _n9_ = caml_call1(A[1][1][1], v1);
        return caml_call2(Bin_prot_Common[23], 1, _n9_);
       case 1:
        var v1$0 = param[1], _n__ = caml_call1(B[1][1][1], v1$0);
        return caml_call2(Bin_prot_Common[23], 1, _n__);
       case 2:
        var v1$1 = param[1], _n$_ = caml_call1(C[1][1][1], v1$1);
        return caml_call2(Bin_prot_Common[23], 1, _n$_);
       case 3:
        var v1$2 = param[1], _oa_ = caml_call1(D[1][1][1], v1$2);
        return caml_call2(Bin_prot_Common[23], 1, _oa_);
       case 4:
        var v1$3 = param[1], _ob_ = caml_call1(E[1][1][1], v1$3);
        return caml_call2(Bin_prot_Common[23], 1, _ob_);
       default:
        var v1$4 = param[1], _oc_ = caml_call1(F[1][1][1], v1$4);
        return caml_call2(Bin_prot_Common[23], 1, _oc_);
     }
    }
    function bin_write_t(buf, pos, param){
     switch(param[0]){
       case 0:
        var
         v1 = param[1],
         pos$0 = caml_call3(Bin_prot_Write[30], buf, pos, 0);
        return caml_call3(A[1][1][2], buf, pos$0, v1);
       case 1:
        var
         v1$0 = param[1],
         pos$1 = caml_call3(Bin_prot_Write[30], buf, pos, 1);
        return caml_call3(B[1][1][2], buf, pos$1, v1$0);
       case 2:
        var
         v1$1 = param[1],
         pos$2 = caml_call3(Bin_prot_Write[30], buf, pos, 2);
        return caml_call3(C[1][1][2], buf, pos$2, v1$1);
       case 3:
        var
         v1$2 = param[1],
         pos$3 = caml_call3(Bin_prot_Write[30], buf, pos, 3);
        return caml_call3(D[1][1][2], buf, pos$3, v1$2);
       case 4:
        var
         v1$3 = param[1],
         pos$4 = caml_call3(Bin_prot_Write[30], buf, pos, 4);
        return caml_call3(E[1][1][2], buf, pos$4, v1$3);
       default:
        var
         v1$4 = param[1],
         pos$5 = caml_call3(Bin_prot_Write[30], buf, pos, 5);
        return caml_call3(F[1][1][2], buf, pos$5, v1$4);
     }
    }
    var bin_writer_t = [0, bin_size_t, bin_write_t];
    function bin_read_t(buf, pos_ref, vint){
     return caml_call2
             (Bin_prot_Common[19],
              cst_src_main_ml_Stable_Of_tupl$3,
              pos_ref[1]);
    }
    function bin_read_t$0(buf, pos_ref){
     var match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
     if(5 < match >>> 0)
      return caml_call2(Bin_prot_Common[18], _D_, pos_ref[1]);
     switch(match){
       case 0:
        var arg_1 = caml_call2(A[1][1][3], buf, pos_ref); return [0, arg_1];
       case 1:
        var arg_1$0 = caml_call2(B[1][1][3], buf, pos_ref);
        return [1, arg_1$0];
       case 2:
        var arg_1$1 = caml_call2(C[1][1][3], buf, pos_ref);
        return [2, arg_1$1];
       case 3:
        var arg_1$2 = caml_call2(D[1][1][3], buf, pos_ref);
        return [3, arg_1$2];
       case 4:
        var arg_1$3 = caml_call2(E[1][1][3], buf, pos_ref);
        return [4, arg_1$3];
       default:
        var arg_1$4 = caml_call2(F[1][1][3], buf, pos_ref);
        return [5, arg_1$4];
     }
    }
    var
     bin_reader_t = [0, bin_read_t$0, bin_read_t],
     bin_t = [0, bin_shape_t, bin_writer_t, bin_reader_t];
    function a(v0){return [0, v0];}
    function b(v0){return [1, v0];}
    function c(v0){return [2, v0];}
    function d(v0){return [3, v0];}
    function e(v0){return [4, v0];}
    function f(v0){return [5, v0];}
    function create(param){
     var
      _n4_ = caml_call1(F[1][2], 0),
      _n5_ = caml_call1(E[1][2], 0),
      _n6_ = caml_call1(D[1][2], 0),
      _n7_ = caml_call1(C[1][2], 0),
      _n8_ = caml_call1(B[1][2], 0);
     return [0, caml_call1(A[1][2], 0), _n8_, _n7_, _n6_, _n5_, _n4_];
    }
    function apply_part(param, _n3_){
     var
      f = param[6],
      e = param[5],
      d = param[4],
      c = param[3],
      b = param[2],
      a = param[1];
     switch(_n3_[0]){
       case 0:
        var x = _n3_[1]; return [0, caml_call2(A[1][3], a, x), b, c, d, e, f];
       case 1:
        var x$0 = _n3_[1];
        return [0, a, caml_call2(B[1][3], b, x$0), c, d, e, f];
       case 2:
        var x$1 = _n3_[1];
        return [0, a, b, caml_call2(C[1][3], c, x$1), d, e, f];
       case 3:
        var x$2 = _n3_[1];
        return [0, a, b, c, caml_call2(D[1][3], d, x$2), e, f];
       case 4:
        var x$3 = _n3_[1];
        return [0, a, b, c, d, caml_call2(E[1][3], e, x$3), f];
       default:
        var x$4 = _n3_[1];
        return [0, a, b, c, d, e, caml_call2(F[1][3], f, x$4)];
     }
    }
    function to_parts(param){
     var
      f$0 = param[6],
      e$0 = param[5],
      d$0 = param[4],
      c$0 = param[3],
      b$0 = param[2],
      a$0 = param[1],
      _nQ_ = caml_call1(F[2], f$0),
      _nR_ = [0, caml_call2(Streamable_Import[4][44], _nQ_, f), 0],
      _nS_ = caml_call1(E[2], e$0),
      _nT_ = [0, caml_call2(Streamable_Import[4][44], _nS_, e), _nR_],
      _nU_ = caml_call1(D[2], d$0),
      _nV_ = [0, caml_call2(Streamable_Import[4][44], _nU_, d), _nT_],
      _nW_ = caml_call1(C[2], c$0),
      _nX_ = [0, caml_call2(Streamable_Import[4][44], _nW_, c), _nV_],
      _nY_ = caml_call1(B[2], b$0),
      _nZ_ = [0, caml_call2(Streamable_Import[4][44], _nY_, b), _nX_],
      _n0_ = caml_call1(A[2], a$0),
      _n1_ = [0, caml_call2(Streamable_Import[4][44], _n0_, a), _nZ_],
      _n2_ = caml_call1(Streamable_Import[4][111], _n1_);
     return caml_call1(Streamable_Import[4][72], _n2_);
    }
    function finalize(param){
     var
      f = param[6],
      e = param[5],
      d = param[4],
      c = param[3],
      b = param[2],
      a = param[1],
      _nL_ = caml_call1(F[3], f),
      _nM_ = caml_call1(E[3], e),
      _nN_ = caml_call1(D[3], d),
      _nO_ = caml_call1(C[3], c),
      _nP_ = caml_call1(B[3], b);
     return [0, caml_call1(A[3], a), _nP_, _nO_, _nN_, _nM_, _nL_];
    }
    return [0,
            [0,
             [0,
              bin_size_t,
              bin_write_t,
              bin_read_t$0,
              bin_read_t,
              bin_shape_t,
              bin_writer_t,
              bin_reader_t,
              bin_t],
             create,
             apply_part],
            to_parts,
            finalize];
   }
   var Of_tuple6_rpc = [0, V1$23];
   function V1$24(A, B, C, D, E, F){
    var
     _nl_ = F[1],
     _nm_ = _nl_[1],
     _no_ = E[1],
     _np_ = _no_[1],
     _nr_ = D[1],
     _ns_ = _nr_[1],
     _nu_ = C[1],
     _nv_ = _nu_[1],
     _nx_ = B[1],
     _ny_ = _nx_[1],
     _nA_ = A[1],
     _nB_ = _nA_[1],
     _nn_ =
       [0,
        [0,
         [0,
          _nm_[1],
          _nm_[2],
          _nm_[3],
          _nm_[4],
          _nm_[5],
          _nm_[6],
          _nm_[7],
          _nm_[8]],
         _nl_[2],
         _nl_[3]],
        F[2],
        F[3]],
     _nq_ =
       [0,
        [0,
         [0,
          _np_[1],
          _np_[2],
          _np_[3],
          _np_[4],
          _np_[5],
          _np_[6],
          _np_[7],
          _np_[8]],
         _no_[2],
         _no_[3]],
        E[2],
        E[3]],
     _nt_ =
       [0,
        [0,
         [0,
          _ns_[1],
          _ns_[2],
          _ns_[3],
          _ns_[4],
          _ns_[5],
          _ns_[6],
          _ns_[7],
          _ns_[8]],
         _nr_[2],
         _nr_[3]],
        D[2],
        D[3]],
     _nw_ =
       [0,
        [0,
         [0,
          _nv_[1],
          _nv_[2],
          _nv_[3],
          _nv_[4],
          _nv_[5],
          _nv_[6],
          _nv_[7],
          _nv_[8]],
         _nu_[2],
         _nu_[3]],
        C[2],
        C[3]],
     _nz_ =
       [0,
        [0,
         [0,
          _ny_[1],
          _ny_[2],
          _ny_[3],
          _ny_[4],
          _ny_[5],
          _ny_[6],
          _ny_[7],
          _ny_[8]],
         _nx_[2],
         _nx_[3]],
        B[2],
        B[3]],
     Plain =
       caml_call1
        (caml_call1
          (caml_call1
            (caml_call1
              (caml_call1
                (caml_call1
                  (Of_tuple6_rpc[1],
                   [0,
                    [0,
                     [0,
                      _nB_[1],
                      _nB_[2],
                      _nB_[3],
                      _nB_[4],
                      _nB_[5],
                      _nB_[6],
                      _nB_[7],
                      _nB_[8]],
                     _nA_[2],
                     _nA_[3]],
                    A[2],
                    A[3]]),
                 _nz_),
               _nw_),
             _nt_),
           _nq_),
         _nn_);
    function t_of_sexp(sexp_139){
     a:
     {
      if(0 === sexp_139[0]){
       var _nC_ = sexp_139[1], _nD_ = caml_string_compare(_nC_, cst_a);
       b:
       {
        c:
        {
         d:
         {
          e:
          {
           f:
           {
            if(0 <= _nD_){
             if(0 < _nD_){
              if(! caml_string_notequal(_nC_, cst_b)) break f;
              if(! caml_string_notequal(_nC_, cst_c)) break e;
              if(! caml_string_notequal(_nC_, cst_d)) break d;
              if(! caml_string_notequal(_nC_, cst_e)) break c;
              if(caml_string_notequal(_nC_, cst_f)) break a;
              break b;
             }
            }
            else if(caml_string_notequal(_nC_, cst_A$7)){
             if(! caml_string_notequal(_nC_, cst_B$7)) break f;
             if(! caml_string_notequal(_nC_, cst_C$6)) break e;
             if(! caml_string_notequal(_nC_, cst_D$5)) break d;
             if(! caml_string_notequal(_nC_, cst_E$4)) break c;
             if(caml_string_notequal(_nC_, cst_F$3)) break a;
             break b;
            }
            return caml_call2
                    (Sexplib0_Sexp_conv_error[9], error_source_137, sexp_139);
           }
           return caml_call2
                   (Sexplib0_Sexp_conv_error[9], error_source_137, sexp_139);
          }
          return caml_call2
                  (Sexplib0_Sexp_conv_error[9], error_source_137, sexp_139);
         }
         return caml_call2
                 (Sexplib0_Sexp_conv_error[9], error_source_137, sexp_139);
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[9], error_source_137, sexp_139);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[9], error_source_137, sexp_139);
      }
      var _nE_ = sexp_139[1];
      if(! _nE_)
       return caml_call2
               (Sexplib0_Sexp_conv_error[11], error_source_137, sexp_139);
      var _nF_ = _nE_[1];
      if(0 !== _nF_[0])
       return caml_call2
               (Sexplib0_Sexp_conv_error[10], error_source_137, sexp_139);
      var tag_140 = _nF_[1], _nG_ = caml_string_compare(tag_140, cst_a);
      b:
      {
       c:
       {
        d:
        {
         e:
         {
          f:
          {
           if(0 <= _nG_){
            if(0 < _nG_){
             if(! caml_string_notequal(tag_140, cst_b)) break f;
             if(! caml_string_notequal(tag_140, cst_c)) break e;
             if(! caml_string_notequal(tag_140, cst_d)) break d;
             if(! caml_string_notequal(tag_140, cst_e)) break c;
             if(caml_string_notequal(tag_140, cst_f)) break a;
             break b;
            }
           }
           else if(caml_string_notequal(tag_140, cst_A$7)){
            if(! caml_string_notequal(tag_140, cst_B$7)) break f;
            if(! caml_string_notequal(tag_140, cst_C$6)) break e;
            if(! caml_string_notequal(tag_140, cst_D$5)) break d;
            if(! caml_string_notequal(tag_140, cst_E$4)) break c;
            if(caml_string_notequal(tag_140, cst_F$3)) break a;
            break b;
           }
           var sexp_args_141 = _nE_[2];
           if(sexp_args_141 && ! sexp_args_141[2]){
            var
             arg0_142 = sexp_args_141[1],
             res0_143 = caml_call1(A[1][1][9], arg0_142);
            return [0, res0_143];
           }
           return caml_call3
                   (Sexplib0_Sexp_conv_error[8],
                    error_source_137,
                    tag_140,
                    sexp_139);
          }
          var sexp_args_146 = _nE_[2];
          if(sexp_args_146 && ! sexp_args_146[2]){
           var
            arg0_147 = sexp_args_146[1],
            res0_148 = caml_call1(B[1][1][9], arg0_147);
           return [1, res0_148];
          }
          return caml_call3
                  (Sexplib0_Sexp_conv_error[8],
                   error_source_137,
                   tag_140,
                   sexp_139);
         }
         var sexp_args_151 = _nE_[2];
         if(sexp_args_151 && ! sexp_args_151[2]){
          var
           arg0_152 = sexp_args_151[1],
           res0_153 = caml_call1(C[1][1][9], arg0_152);
          return [2, res0_153];
         }
         return caml_call3
                 (Sexplib0_Sexp_conv_error[8],
                  error_source_137,
                  tag_140,
                  sexp_139);
        }
        var sexp_args_156 = _nE_[2];
        if(sexp_args_156 && ! sexp_args_156[2]){
         var
          arg0_157 = sexp_args_156[1],
          res0_158 = caml_call1(D[1][1][9], arg0_157);
         return [3, res0_158];
        }
        return caml_call3
                (Sexplib0_Sexp_conv_error[8],
                 error_source_137,
                 tag_140,
                 sexp_139);
       }
       var sexp_args_161 = _nE_[2];
       if(sexp_args_161 && ! sexp_args_161[2]){
        var
         arg0_162 = sexp_args_161[1],
         res0_163 = caml_call1(E[1][1][9], arg0_162);
        return [4, res0_163];
       }
       return caml_call3
               (Sexplib0_Sexp_conv_error[8],
                error_source_137,
                tag_140,
                sexp_139);
      }
      var sexp_args_166 = _nE_[2];
      if(sexp_args_166 && ! sexp_args_166[2]){
       var
        arg0_167 = sexp_args_166[1],
        res0_168 = caml_call1(F[1][1][9], arg0_167);
       return [5, res0_168];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[8],
               error_source_137,
               tag_140,
               sexp_139);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[12], error_source_137, sexp_139);
    }
    function sexp_of_t(param){
     switch(param[0]){
       case 0:
        var arg0_169 = param[1], res0_170 = caml_call1(A[1][1][10], arg0_169);
        return [1, [0, _E_, [0, res0_170, 0]]];
       case 1:
        var arg0_171 = param[1], res0_172 = caml_call1(B[1][1][10], arg0_171);
        return [1, [0, _F_, [0, res0_172, 0]]];
       case 2:
        var arg0_173 = param[1], res0_174 = caml_call1(C[1][1][10], arg0_173);
        return [1, [0, _G_, [0, res0_174, 0]]];
       case 3:
        var arg0_175 = param[1], res0_176 = caml_call1(D[1][1][10], arg0_175);
        return [1, [0, _H_, [0, res0_176, 0]]];
       case 4:
        var arg0_177 = param[1], res0_178 = caml_call1(E[1][1][10], arg0_177);
        return [1, [0, _I_, [0, res0_178, 0]]];
       default:
        var arg0_179 = param[1], res0_180 = caml_call1(F[1][1][10], arg0_179);
        return [1, [0, _J_, [0, res0_180, 0]]];
     }
    }
    var
     include = V1(Plain, [0, t_of_sexp, sexp_of_t]),
     Intermediate = include[1],
     to_parts = include[2],
     finalize = include[3];
    return [0, Intermediate, to_parts, finalize];
   }
   var Of_tuple6 = [0, V1$24];
   function V1$25(A, B, C, D, E, F, G){
    var
     _mK_ =
       caml_call1
        (Bin_prot_Shape[5],
         [0,
          [0, cst_A$4, [0, A[1][1][5], 0]],
          [0,
           [0, cst_B$4, [0, B[1][1][5], 0]],
           [0,
            [0, cst_C$3, [0, C[1][1][5], 0]],
            [0,
             [0, cst_D$2, [0, D[1][1][5], 0]],
             [0,
              [0, cst_E$1, [0, E[1][1][5], 0]],
              [0,
               [0, cst_F$0, [0, F[1][1][5], 0]],
               [0, [0, cst_G, [0, G[1][1][5], 0]], 0]]]]]]]),
     _mL_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$13), 0, _mK_], 0],
     _mM_ = caml_call1(Bin_shape[4][1], cst_src_main_ml_1088_10),
     group = caml_call2(Bin_prot_Shape[2], _mM_, _mL_),
     _mN_ = caml_call1(Bin_shape[2][1], cst_t$14),
     bin_shape_t = caml_call1(caml_call2(Bin_prot_Shape[10], group, _mN_), 0);
    function bin_size_t(param){
     switch(param[0]){
       case 0:
        var v1 = param[1], _ne_ = caml_call1(A[1][1][1], v1);
        return caml_call2(Bin_prot_Common[23], 1, _ne_);
       case 1:
        var v1$0 = param[1], _nf_ = caml_call1(B[1][1][1], v1$0);
        return caml_call2(Bin_prot_Common[23], 1, _nf_);
       case 2:
        var v1$1 = param[1], _ng_ = caml_call1(C[1][1][1], v1$1);
        return caml_call2(Bin_prot_Common[23], 1, _ng_);
       case 3:
        var v1$2 = param[1], _nh_ = caml_call1(D[1][1][1], v1$2);
        return caml_call2(Bin_prot_Common[23], 1, _nh_);
       case 4:
        var v1$3 = param[1], _ni_ = caml_call1(E[1][1][1], v1$3);
        return caml_call2(Bin_prot_Common[23], 1, _ni_);
       case 5:
        var v1$4 = param[1], _nj_ = caml_call1(F[1][1][1], v1$4);
        return caml_call2(Bin_prot_Common[23], 1, _nj_);
       default:
        var v1$5 = param[1], _nk_ = caml_call1(G[1][1][1], v1$5);
        return caml_call2(Bin_prot_Common[23], 1, _nk_);
     }
    }
    function bin_write_t(buf, pos, param){
     switch(param[0]){
       case 0:
        var
         v1 = param[1],
         pos$0 = caml_call3(Bin_prot_Write[30], buf, pos, 0);
        return caml_call3(A[1][1][2], buf, pos$0, v1);
       case 1:
        var
         v1$0 = param[1],
         pos$1 = caml_call3(Bin_prot_Write[30], buf, pos, 1);
        return caml_call3(B[1][1][2], buf, pos$1, v1$0);
       case 2:
        var
         v1$1 = param[1],
         pos$2 = caml_call3(Bin_prot_Write[30], buf, pos, 2);
        return caml_call3(C[1][1][2], buf, pos$2, v1$1);
       case 3:
        var
         v1$2 = param[1],
         pos$3 = caml_call3(Bin_prot_Write[30], buf, pos, 3);
        return caml_call3(D[1][1][2], buf, pos$3, v1$2);
       case 4:
        var
         v1$3 = param[1],
         pos$4 = caml_call3(Bin_prot_Write[30], buf, pos, 4);
        return caml_call3(E[1][1][2], buf, pos$4, v1$3);
       case 5:
        var
         v1$4 = param[1],
         pos$5 = caml_call3(Bin_prot_Write[30], buf, pos, 5);
        return caml_call3(F[1][1][2], buf, pos$5, v1$4);
       default:
        var
         v1$5 = param[1],
         pos$6 = caml_call3(Bin_prot_Write[30], buf, pos, 6);
        return caml_call3(G[1][1][2], buf, pos$6, v1$5);
     }
    }
    var bin_writer_t = [0, bin_size_t, bin_write_t];
    function bin_read_t(buf, pos_ref, vint){
     return caml_call2
             (Bin_prot_Common[19],
              cst_src_main_ml_Stable_Of_tupl$4,
              pos_ref[1]);
    }
    function bin_read_t$0(buf, pos_ref){
     var match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
     if(6 < match >>> 0)
      return caml_call2(Bin_prot_Common[18], _K_, pos_ref[1]);
     switch(match){
       case 0:
        var arg_1 = caml_call2(A[1][1][3], buf, pos_ref); return [0, arg_1];
       case 1:
        var arg_1$0 = caml_call2(B[1][1][3], buf, pos_ref);
        return [1, arg_1$0];
       case 2:
        var arg_1$1 = caml_call2(C[1][1][3], buf, pos_ref);
        return [2, arg_1$1];
       case 3:
        var arg_1$2 = caml_call2(D[1][1][3], buf, pos_ref);
        return [3, arg_1$2];
       case 4:
        var arg_1$3 = caml_call2(E[1][1][3], buf, pos_ref);
        return [4, arg_1$3];
       case 5:
        var arg_1$4 = caml_call2(F[1][1][3], buf, pos_ref);
        return [5, arg_1$4];
       default:
        var arg_1$5 = caml_call2(G[1][1][3], buf, pos_ref);
        return [6, arg_1$5];
     }
    }
    var
     bin_reader_t = [0, bin_read_t$0, bin_read_t],
     bin_t = [0, bin_shape_t, bin_writer_t, bin_reader_t];
    function a(v0){return [0, v0];}
    function b(v0){return [1, v0];}
    function c(v0){return [2, v0];}
    function d(v0){return [3, v0];}
    function e(v0){return [4, v0];}
    function f(v0){return [5, v0];}
    function g(v0){return [6, v0];}
    function create(param){
     var
      _m__ = caml_call1(G[1][2], 0),
      _m$_ = caml_call1(F[1][2], 0),
      _na_ = caml_call1(E[1][2], 0),
      _nb_ = caml_call1(D[1][2], 0),
      _nc_ = caml_call1(C[1][2], 0),
      _nd_ = caml_call1(B[1][2], 0);
     return [0, caml_call1(A[1][2], 0), _nd_, _nc_, _nb_, _na_, _m$_, _m__];
    }
    function apply_part(param, _m9_){
     var
      g = param[7],
      f = param[6],
      e = param[5],
      d = param[4],
      c = param[3],
      b = param[2],
      a = param[1];
     switch(_m9_[0]){
       case 0:
        var x = _m9_[1];
        return [0, caml_call2(A[1][3], a, x), b, c, d, e, f, g];
       case 1:
        var x$0 = _m9_[1];
        return [0, a, caml_call2(B[1][3], b, x$0), c, d, e, f, g];
       case 2:
        var x$1 = _m9_[1];
        return [0, a, b, caml_call2(C[1][3], c, x$1), d, e, f, g];
       case 3:
        var x$2 = _m9_[1];
        return [0, a, b, c, caml_call2(D[1][3], d, x$2), e, f, g];
       case 4:
        var x$3 = _m9_[1];
        return [0, a, b, c, d, caml_call2(E[1][3], e, x$3), f, g];
       case 5:
        var x$4 = _m9_[1];
        return [0, a, b, c, d, e, caml_call2(F[1][3], f, x$4), g];
       default:
        var x$5 = _m9_[1];
        return [0, a, b, c, d, e, f, caml_call2(G[1][3], g, x$5)];
     }
    }
    function to_parts(param){
     var
      g$0 = param[7],
      f$0 = param[6],
      e$0 = param[5],
      d$0 = param[4],
      c$0 = param[3],
      b$0 = param[2],
      a$0 = param[1],
      _mU_ = caml_call1(G[2], g$0),
      _mV_ = [0, caml_call2(Streamable_Import[4][44], _mU_, g), 0],
      _mW_ = caml_call1(F[2], f$0),
      _mX_ = [0, caml_call2(Streamable_Import[4][44], _mW_, f), _mV_],
      _mY_ = caml_call1(E[2], e$0),
      _mZ_ = [0, caml_call2(Streamable_Import[4][44], _mY_, e), _mX_],
      _m0_ = caml_call1(D[2], d$0),
      _m1_ = [0, caml_call2(Streamable_Import[4][44], _m0_, d), _mZ_],
      _m2_ = caml_call1(C[2], c$0),
      _m3_ = [0, caml_call2(Streamable_Import[4][44], _m2_, c), _m1_],
      _m4_ = caml_call1(B[2], b$0),
      _m5_ = [0, caml_call2(Streamable_Import[4][44], _m4_, b), _m3_],
      _m6_ = caml_call1(A[2], a$0),
      _m7_ = [0, caml_call2(Streamable_Import[4][44], _m6_, a), _m5_],
      _m8_ = caml_call1(Streamable_Import[4][111], _m7_);
     return caml_call1(Streamable_Import[4][72], _m8_);
    }
    function finalize(param){
     var
      g = param[7],
      f = param[6],
      e = param[5],
      d = param[4],
      c = param[3],
      b = param[2],
      a = param[1],
      _mO_ = caml_call1(G[3], g),
      _mP_ = caml_call1(F[3], f),
      _mQ_ = caml_call1(E[3], e),
      _mR_ = caml_call1(D[3], d),
      _mS_ = caml_call1(C[3], c),
      _mT_ = caml_call1(B[3], b);
     return [0, caml_call1(A[3], a), _mT_, _mS_, _mR_, _mQ_, _mP_, _mO_];
    }
    return [0,
            [0,
             [0,
              bin_size_t,
              bin_write_t,
              bin_read_t$0,
              bin_read_t,
              bin_shape_t,
              bin_writer_t,
              bin_reader_t,
              bin_t],
             create,
             apply_part],
            to_parts,
            finalize];
   }
   var Of_tuple7_rpc = [0, V1$25];
   function V1$26(A, B, C, D, E, F, G){
    var
     _ml_ = G[1],
     _mm_ = _ml_[1],
     _mo_ = F[1],
     _mp_ = _mo_[1],
     _mr_ = E[1],
     _ms_ = _mr_[1],
     _mu_ = D[1],
     _mv_ = _mu_[1],
     _mx_ = C[1],
     _my_ = _mx_[1],
     _mA_ = B[1],
     _mB_ = _mA_[1],
     _mD_ = A[1],
     _mE_ = _mD_[1],
     _mn_ =
       [0,
        [0,
         [0,
          _mm_[1],
          _mm_[2],
          _mm_[3],
          _mm_[4],
          _mm_[5],
          _mm_[6],
          _mm_[7],
          _mm_[8]],
         _ml_[2],
         _ml_[3]],
        G[2],
        G[3]],
     _mq_ =
       [0,
        [0,
         [0,
          _mp_[1],
          _mp_[2],
          _mp_[3],
          _mp_[4],
          _mp_[5],
          _mp_[6],
          _mp_[7],
          _mp_[8]],
         _mo_[2],
         _mo_[3]],
        F[2],
        F[3]],
     _mt_ =
       [0,
        [0,
         [0,
          _ms_[1],
          _ms_[2],
          _ms_[3],
          _ms_[4],
          _ms_[5],
          _ms_[6],
          _ms_[7],
          _ms_[8]],
         _mr_[2],
         _mr_[3]],
        E[2],
        E[3]],
     _mw_ =
       [0,
        [0,
         [0,
          _mv_[1],
          _mv_[2],
          _mv_[3],
          _mv_[4],
          _mv_[5],
          _mv_[6],
          _mv_[7],
          _mv_[8]],
         _mu_[2],
         _mu_[3]],
        D[2],
        D[3]],
     _mz_ =
       [0,
        [0,
         [0,
          _my_[1],
          _my_[2],
          _my_[3],
          _my_[4],
          _my_[5],
          _my_[6],
          _my_[7],
          _my_[8]],
         _mx_[2],
         _mx_[3]],
        C[2],
        C[3]],
     _mC_ =
       [0,
        [0,
         [0,
          _mB_[1],
          _mB_[2],
          _mB_[3],
          _mB_[4],
          _mB_[5],
          _mB_[6],
          _mB_[7],
          _mB_[8]],
         _mA_[2],
         _mA_[3]],
        B[2],
        B[3]],
     Plain =
       caml_call1
        (caml_call1
          (caml_call1
            (caml_call1
              (caml_call1
                (caml_call1
                  (caml_call1
                    (Of_tuple7_rpc[1],
                     [0,
                      [0,
                       [0,
                        _mE_[1],
                        _mE_[2],
                        _mE_[3],
                        _mE_[4],
                        _mE_[5],
                        _mE_[6],
                        _mE_[7],
                        _mE_[8]],
                       _mD_[2],
                       _mD_[3]],
                      A[2],
                      A[3]]),
                   _mC_),
                 _mz_),
               _mw_),
             _mt_),
           _mq_),
         _mn_);
    function t_of_sexp(sexp_185){
     a:
     {
      if(0 === sexp_185[0]){
       var _mF_ = sexp_185[1], _mG_ = caml_string_compare(_mF_, cst_a);
       b:
       {
        c:
        {
         d:
         {
          e:
          {
           f:
           {
            g:
            {
             if(0 <= _mG_){
              if(0 < _mG_){
               if(! caml_string_notequal(_mF_, cst_b)) break g;
               if(! caml_string_notequal(_mF_, cst_c)) break f;
               if(! caml_string_notequal(_mF_, cst_d)) break e;
               if(! caml_string_notequal(_mF_, cst_e)) break d;
               if(! caml_string_notequal(_mF_, cst_f)) break c;
               if(caml_string_notequal(_mF_, cst_g)) break a;
               break b;
              }
             }
             else if(caml_string_notequal(_mF_, cst_A$7)){
              if(! caml_string_notequal(_mF_, cst_B$7)) break g;
              if(! caml_string_notequal(_mF_, cst_C$6)) break f;
              if(! caml_string_notequal(_mF_, cst_D$5)) break e;
              if(! caml_string_notequal(_mF_, cst_E$4)) break d;
              if(! caml_string_notequal(_mF_, cst_F$3)) break c;
              if(caml_string_notequal(_mF_, cst_G$2)) break a;
              break b;
             }
             return caml_call2
                     (Sexplib0_Sexp_conv_error[9], error_source_183, sexp_185);
            }
            return caml_call2
                    (Sexplib0_Sexp_conv_error[9], error_source_183, sexp_185);
           }
           return caml_call2
                   (Sexplib0_Sexp_conv_error[9], error_source_183, sexp_185);
          }
          return caml_call2
                  (Sexplib0_Sexp_conv_error[9], error_source_183, sexp_185);
         }
         return caml_call2
                 (Sexplib0_Sexp_conv_error[9], error_source_183, sexp_185);
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[9], error_source_183, sexp_185);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[9], error_source_183, sexp_185);
      }
      var _mH_ = sexp_185[1];
      if(! _mH_)
       return caml_call2
               (Sexplib0_Sexp_conv_error[11], error_source_183, sexp_185);
      var _mI_ = _mH_[1];
      if(0 !== _mI_[0])
       return caml_call2
               (Sexplib0_Sexp_conv_error[10], error_source_183, sexp_185);
      var tag_186 = _mI_[1], _mJ_ = caml_string_compare(tag_186, cst_a);
      b:
      {
       c:
       {
        d:
        {
         e:
         {
          f:
          {
           g:
           {
            if(0 <= _mJ_){
             if(0 < _mJ_){
              if(! caml_string_notequal(tag_186, cst_b)) break g;
              if(! caml_string_notequal(tag_186, cst_c)) break f;
              if(! caml_string_notequal(tag_186, cst_d)) break e;
              if(! caml_string_notequal(tag_186, cst_e)) break d;
              if(! caml_string_notequal(tag_186, cst_f)) break c;
              if(caml_string_notequal(tag_186, cst_g)) break a;
              break b;
             }
            }
            else if(caml_string_notequal(tag_186, cst_A$7)){
             if(! caml_string_notequal(tag_186, cst_B$7)) break g;
             if(! caml_string_notequal(tag_186, cst_C$6)) break f;
             if(! caml_string_notequal(tag_186, cst_D$5)) break e;
             if(! caml_string_notequal(tag_186, cst_E$4)) break d;
             if(! caml_string_notequal(tag_186, cst_F$3)) break c;
             if(caml_string_notequal(tag_186, cst_G$2)) break a;
             break b;
            }
            var sexp_args_187 = _mH_[2];
            if(sexp_args_187 && ! sexp_args_187[2]){
             var
              arg0_188 = sexp_args_187[1],
              res0_189 = caml_call1(A[1][1][9], arg0_188);
             return [0, res0_189];
            }
            return caml_call3
                    (Sexplib0_Sexp_conv_error[8],
                     error_source_183,
                     tag_186,
                     sexp_185);
           }
           var sexp_args_192 = _mH_[2];
           if(sexp_args_192 && ! sexp_args_192[2]){
            var
             arg0_193 = sexp_args_192[1],
             res0_194 = caml_call1(B[1][1][9], arg0_193);
            return [1, res0_194];
           }
           return caml_call3
                   (Sexplib0_Sexp_conv_error[8],
                    error_source_183,
                    tag_186,
                    sexp_185);
          }
          var sexp_args_197 = _mH_[2];
          if(sexp_args_197 && ! sexp_args_197[2]){
           var
            arg0_198 = sexp_args_197[1],
            res0_199 = caml_call1(C[1][1][9], arg0_198);
           return [2, res0_199];
          }
          return caml_call3
                  (Sexplib0_Sexp_conv_error[8],
                   error_source_183,
                   tag_186,
                   sexp_185);
         }
         var sexp_args_202 = _mH_[2];
         if(sexp_args_202 && ! sexp_args_202[2]){
          var
           arg0_203 = sexp_args_202[1],
           res0_204 = caml_call1(D[1][1][9], arg0_203);
          return [3, res0_204];
         }
         return caml_call3
                 (Sexplib0_Sexp_conv_error[8],
                  error_source_183,
                  tag_186,
                  sexp_185);
        }
        var sexp_args_207 = _mH_[2];
        if(sexp_args_207 && ! sexp_args_207[2]){
         var
          arg0_208 = sexp_args_207[1],
          res0_209 = caml_call1(E[1][1][9], arg0_208);
         return [4, res0_209];
        }
        return caml_call3
                (Sexplib0_Sexp_conv_error[8],
                 error_source_183,
                 tag_186,
                 sexp_185);
       }
       var sexp_args_212 = _mH_[2];
       if(sexp_args_212 && ! sexp_args_212[2]){
        var
         arg0_213 = sexp_args_212[1],
         res0_214 = caml_call1(F[1][1][9], arg0_213);
        return [5, res0_214];
       }
       return caml_call3
               (Sexplib0_Sexp_conv_error[8],
                error_source_183,
                tag_186,
                sexp_185);
      }
      var sexp_args_217 = _mH_[2];
      if(sexp_args_217 && ! sexp_args_217[2]){
       var
        arg0_218 = sexp_args_217[1],
        res0_219 = caml_call1(G[1][1][9], arg0_218);
       return [6, res0_219];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[8],
               error_source_183,
               tag_186,
               sexp_185);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[12], error_source_183, sexp_185);
    }
    function sexp_of_t(param){
     switch(param[0]){
       case 0:
        var arg0_220 = param[1], res0_221 = caml_call1(A[1][1][10], arg0_220);
        return [1, [0, _L_, [0, res0_221, 0]]];
       case 1:
        var arg0_222 = param[1], res0_223 = caml_call1(B[1][1][10], arg0_222);
        return [1, [0, _M_, [0, res0_223, 0]]];
       case 2:
        var arg0_224 = param[1], res0_225 = caml_call1(C[1][1][10], arg0_224);
        return [1, [0, _N_, [0, res0_225, 0]]];
       case 3:
        var arg0_226 = param[1], res0_227 = caml_call1(D[1][1][10], arg0_226);
        return [1, [0, _O_, [0, res0_227, 0]]];
       case 4:
        var arg0_228 = param[1], res0_229 = caml_call1(E[1][1][10], arg0_228);
        return [1, [0, _P_, [0, res0_229, 0]]];
       case 5:
        var arg0_230 = param[1], res0_231 = caml_call1(F[1][1][10], arg0_230);
        return [1, [0, _Q_, [0, res0_231, 0]]];
       default:
        var arg0_232 = param[1], res0_233 = caml_call1(G[1][1][10], arg0_232);
        return [1, [0, _R_, [0, res0_233, 0]]];
     }
    }
    var
     include = V1(Plain, [0, t_of_sexp, sexp_of_t]),
     Intermediate = include[1],
     to_parts = include[2],
     finalize = include[3];
    return [0, Intermediate, to_parts, finalize];
   }
   var Of_tuple7 = [0, V1$26];
   function V1$27(A, B, C, D, E, F, G, H){
    var
     _lF_ =
       caml_call1
        (Bin_prot_Shape[5],
         [0,
          [0, cst_A$5, [0, A[1][1][5], 0]],
          [0,
           [0, cst_B$5, [0, B[1][1][5], 0]],
           [0,
            [0, cst_C$4, [0, C[1][1][5], 0]],
            [0,
             [0, cst_D$3, [0, D[1][1][5], 0]],
             [0,
              [0, cst_E$2, [0, E[1][1][5], 0]],
              [0,
               [0, cst_F$1, [0, F[1][1][5], 0]],
               [0,
                [0, cst_G$0, [0, G[1][1][5], 0]],
                [0, [0, cst_H, [0, H[1][1][5], 0]], 0]]]]]]]]),
     _lG_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$15), 0, _lF_], 0],
     _lH_ = caml_call1(Bin_shape[4][1], cst_src_main_ml_1215_10),
     group = caml_call2(Bin_prot_Shape[2], _lH_, _lG_),
     _lI_ = caml_call1(Bin_shape[2][1], cst_t$16),
     bin_shape_t = caml_call1(caml_call2(Bin_prot_Shape[10], group, _lI_), 0);
    function bin_size_t(param){
     switch(param[0]){
       case 0:
        var v1 = param[1], _md_ = caml_call1(A[1][1][1], v1);
        return caml_call2(Bin_prot_Common[23], 1, _md_);
       case 1:
        var v1$0 = param[1], _me_ = caml_call1(B[1][1][1], v1$0);
        return caml_call2(Bin_prot_Common[23], 1, _me_);
       case 2:
        var v1$1 = param[1], _mf_ = caml_call1(C[1][1][1], v1$1);
        return caml_call2(Bin_prot_Common[23], 1, _mf_);
       case 3:
        var v1$2 = param[1], _mg_ = caml_call1(D[1][1][1], v1$2);
        return caml_call2(Bin_prot_Common[23], 1, _mg_);
       case 4:
        var v1$3 = param[1], _mh_ = caml_call1(E[1][1][1], v1$3);
        return caml_call2(Bin_prot_Common[23], 1, _mh_);
       case 5:
        var v1$4 = param[1], _mi_ = caml_call1(F[1][1][1], v1$4);
        return caml_call2(Bin_prot_Common[23], 1, _mi_);
       case 6:
        var v1$5 = param[1], _mj_ = caml_call1(G[1][1][1], v1$5);
        return caml_call2(Bin_prot_Common[23], 1, _mj_);
       default:
        var v1$6 = param[1], _mk_ = caml_call1(H[1][1][1], v1$6);
        return caml_call2(Bin_prot_Common[23], 1, _mk_);
     }
    }
    function bin_write_t(buf, pos, param){
     switch(param[0]){
       case 0:
        var
         v1 = param[1],
         pos$0 = caml_call3(Bin_prot_Write[30], buf, pos, 0);
        return caml_call3(A[1][1][2], buf, pos$0, v1);
       case 1:
        var
         v1$0 = param[1],
         pos$1 = caml_call3(Bin_prot_Write[30], buf, pos, 1);
        return caml_call3(B[1][1][2], buf, pos$1, v1$0);
       case 2:
        var
         v1$1 = param[1],
         pos$2 = caml_call3(Bin_prot_Write[30], buf, pos, 2);
        return caml_call3(C[1][1][2], buf, pos$2, v1$1);
       case 3:
        var
         v1$2 = param[1],
         pos$3 = caml_call3(Bin_prot_Write[30], buf, pos, 3);
        return caml_call3(D[1][1][2], buf, pos$3, v1$2);
       case 4:
        var
         v1$3 = param[1],
         pos$4 = caml_call3(Bin_prot_Write[30], buf, pos, 4);
        return caml_call3(E[1][1][2], buf, pos$4, v1$3);
       case 5:
        var
         v1$4 = param[1],
         pos$5 = caml_call3(Bin_prot_Write[30], buf, pos, 5);
        return caml_call3(F[1][1][2], buf, pos$5, v1$4);
       case 6:
        var
         v1$5 = param[1],
         pos$6 = caml_call3(Bin_prot_Write[30], buf, pos, 6);
        return caml_call3(G[1][1][2], buf, pos$6, v1$5);
       default:
        var
         v1$6 = param[1],
         pos$7 = caml_call3(Bin_prot_Write[30], buf, pos, 7);
        return caml_call3(H[1][1][2], buf, pos$7, v1$6);
     }
    }
    var bin_writer_t = [0, bin_size_t, bin_write_t];
    function bin_read_t(buf, pos_ref, vint){
     return caml_call2
             (Bin_prot_Common[19],
              cst_src_main_ml_Stable_Of_tupl$5,
              pos_ref[1]);
    }
    function bin_read_t$0(buf, pos_ref){
     var match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
     if(7 < match >>> 0)
      return caml_call2(Bin_prot_Common[18], _S_, pos_ref[1]);
     switch(match){
       case 0:
        var arg_1 = caml_call2(A[1][1][3], buf, pos_ref); return [0, arg_1];
       case 1:
        var arg_1$0 = caml_call2(B[1][1][3], buf, pos_ref);
        return [1, arg_1$0];
       case 2:
        var arg_1$1 = caml_call2(C[1][1][3], buf, pos_ref);
        return [2, arg_1$1];
       case 3:
        var arg_1$2 = caml_call2(D[1][1][3], buf, pos_ref);
        return [3, arg_1$2];
       case 4:
        var arg_1$3 = caml_call2(E[1][1][3], buf, pos_ref);
        return [4, arg_1$3];
       case 5:
        var arg_1$4 = caml_call2(F[1][1][3], buf, pos_ref);
        return [5, arg_1$4];
       case 6:
        var arg_1$5 = caml_call2(G[1][1][3], buf, pos_ref);
        return [6, arg_1$5];
       default:
        var arg_1$6 = caml_call2(H[1][1][3], buf, pos_ref);
        return [7, arg_1$6];
     }
    }
    var
     bin_reader_t = [0, bin_read_t$0, bin_read_t],
     bin_t = [0, bin_shape_t, bin_writer_t, bin_reader_t];
    function a(v0){return [0, v0];}
    function b(v0){return [1, v0];}
    function c(v0){return [2, v0];}
    function d(v0){return [3, v0];}
    function e(v0){return [4, v0];}
    function f(v0){return [5, v0];}
    function g(v0){return [6, v0];}
    function h(v0){return [7, v0];}
    function create(param){
     var
      _l8_ = caml_call1(H[1][2], 0),
      _l9_ = caml_call1(G[1][2], 0),
      _l__ = caml_call1(F[1][2], 0),
      _l$_ = caml_call1(E[1][2], 0),
      _ma_ = caml_call1(D[1][2], 0),
      _mb_ = caml_call1(C[1][2], 0),
      _mc_ = caml_call1(B[1][2], 0);
     return [0,
             caml_call1(A[1][2], 0),
             _mc_,
             _mb_,
             _ma_,
             _l$_,
             _l__,
             _l9_,
             _l8_];
    }
    function apply_part(param, _l7_){
     var
      h = param[8],
      g = param[7],
      f = param[6],
      e = param[5],
      d = param[4],
      c = param[3],
      b = param[2],
      a = param[1];
     switch(_l7_[0]){
       case 0:
        var x = _l7_[1];
        return [0, caml_call2(A[1][3], a, x), b, c, d, e, f, g, h];
       case 1:
        var x$0 = _l7_[1];
        return [0, a, caml_call2(B[1][3], b, x$0), c, d, e, f, g, h];
       case 2:
        var x$1 = _l7_[1];
        return [0, a, b, caml_call2(C[1][3], c, x$1), d, e, f, g, h];
       case 3:
        var x$2 = _l7_[1];
        return [0, a, b, c, caml_call2(D[1][3], d, x$2), e, f, g, h];
       case 4:
        var x$3 = _l7_[1];
        return [0, a, b, c, d, caml_call2(E[1][3], e, x$3), f, g, h];
       case 5:
        var x$4 = _l7_[1];
        return [0, a, b, c, d, e, caml_call2(F[1][3], f, x$4), g, h];
       case 6:
        var x$5 = _l7_[1];
        return [0, a, b, c, d, e, f, caml_call2(G[1][3], g, x$5), h];
       default:
        var x$6 = _l7_[1];
        return [0, a, b, c, d, e, f, g, caml_call2(H[1][3], h, x$6)];
     }
    }
    function to_parts(param){
     var
      h$0 = param[8],
      g$0 = param[7],
      f$0 = param[6],
      e$0 = param[5],
      d$0 = param[4],
      c$0 = param[3],
      b$0 = param[2],
      a$0 = param[1],
      _lQ_ = caml_call1(H[2], h$0),
      _lR_ = [0, caml_call2(Streamable_Import[4][44], _lQ_, h), 0],
      _lS_ = caml_call1(G[2], g$0),
      _lT_ = [0, caml_call2(Streamable_Import[4][44], _lS_, g), _lR_],
      _lU_ = caml_call1(F[2], f$0),
      _lV_ = [0, caml_call2(Streamable_Import[4][44], _lU_, f), _lT_],
      _lW_ = caml_call1(E[2], e$0),
      _lX_ = [0, caml_call2(Streamable_Import[4][44], _lW_, e), _lV_],
      _lY_ = caml_call1(D[2], d$0),
      _lZ_ = [0, caml_call2(Streamable_Import[4][44], _lY_, d), _lX_],
      _l0_ = caml_call1(C[2], c$0),
      _l1_ = [0, caml_call2(Streamable_Import[4][44], _l0_, c), _lZ_],
      _l2_ = caml_call1(B[2], b$0),
      _l3_ = [0, caml_call2(Streamable_Import[4][44], _l2_, b), _l1_],
      _l4_ = caml_call1(A[2], a$0),
      _l5_ = [0, caml_call2(Streamable_Import[4][44], _l4_, a), _l3_],
      _l6_ = caml_call1(Streamable_Import[4][111], _l5_);
     return caml_call1(Streamable_Import[4][72], _l6_);
    }
    function finalize(param){
     var
      h = param[8],
      g = param[7],
      f = param[6],
      e = param[5],
      d = param[4],
      c = param[3],
      b = param[2],
      a = param[1],
      _lJ_ = caml_call1(H[3], h),
      _lK_ = caml_call1(G[3], g),
      _lL_ = caml_call1(F[3], f),
      _lM_ = caml_call1(E[3], e),
      _lN_ = caml_call1(D[3], d),
      _lO_ = caml_call1(C[3], c),
      _lP_ = caml_call1(B[3], b);
     return [0, caml_call1(A[3], a), _lP_, _lO_, _lN_, _lM_, _lL_, _lK_, _lJ_];
    }
    return [0,
            [0,
             [0,
              bin_size_t,
              bin_write_t,
              bin_read_t$0,
              bin_read_t,
              bin_shape_t,
              bin_writer_t,
              bin_reader_t,
              bin_t],
             create,
             apply_part],
            to_parts,
            finalize];
   }
   var Of_tuple8_rpc = [0, V1$27];
   function V1$28(A, B, C, D, E, F, G, H){
    var
     _ld_ = H[1],
     _le_ = _ld_[1],
     _lg_ = G[1],
     _lh_ = _lg_[1],
     _lj_ = F[1],
     _lk_ = _lj_[1],
     _lm_ = E[1],
     _ln_ = _lm_[1],
     _lp_ = D[1],
     _lq_ = _lp_[1],
     _ls_ = C[1],
     _lt_ = _ls_[1],
     _lv_ = B[1],
     _lw_ = _lv_[1],
     _ly_ = A[1],
     _lz_ = _ly_[1],
     _lf_ =
       [0,
        [0,
         [0,
          _le_[1],
          _le_[2],
          _le_[3],
          _le_[4],
          _le_[5],
          _le_[6],
          _le_[7],
          _le_[8]],
         _ld_[2],
         _ld_[3]],
        H[2],
        H[3]],
     _li_ =
       [0,
        [0,
         [0,
          _lh_[1],
          _lh_[2],
          _lh_[3],
          _lh_[4],
          _lh_[5],
          _lh_[6],
          _lh_[7],
          _lh_[8]],
         _lg_[2],
         _lg_[3]],
        G[2],
        G[3]],
     _ll_ =
       [0,
        [0,
         [0,
          _lk_[1],
          _lk_[2],
          _lk_[3],
          _lk_[4],
          _lk_[5],
          _lk_[6],
          _lk_[7],
          _lk_[8]],
         _lj_[2],
         _lj_[3]],
        F[2],
        F[3]],
     _lo_ =
       [0,
        [0,
         [0,
          _ln_[1],
          _ln_[2],
          _ln_[3],
          _ln_[4],
          _ln_[5],
          _ln_[6],
          _ln_[7],
          _ln_[8]],
         _lm_[2],
         _lm_[3]],
        E[2],
        E[3]],
     _lr_ =
       [0,
        [0,
         [0,
          _lq_[1],
          _lq_[2],
          _lq_[3],
          _lq_[4],
          _lq_[5],
          _lq_[6],
          _lq_[7],
          _lq_[8]],
         _lp_[2],
         _lp_[3]],
        D[2],
        D[3]],
     _lu_ =
       [0,
        [0,
         [0,
          _lt_[1],
          _lt_[2],
          _lt_[3],
          _lt_[4],
          _lt_[5],
          _lt_[6],
          _lt_[7],
          _lt_[8]],
         _ls_[2],
         _ls_[3]],
        C[2],
        C[3]],
     _lx_ =
       [0,
        [0,
         [0,
          _lw_[1],
          _lw_[2],
          _lw_[3],
          _lw_[4],
          _lw_[5],
          _lw_[6],
          _lw_[7],
          _lw_[8]],
         _lv_[2],
         _lv_[3]],
        B[2],
        B[3]],
     Plain =
       caml_call1
        (caml_call1
          (caml_call1
            (caml_call1
              (caml_call1
                (caml_call1
                  (caml_call1
                    (caml_call1
                      (Of_tuple8_rpc[1],
                       [0,
                        [0,
                         [0,
                          _lz_[1],
                          _lz_[2],
                          _lz_[3],
                          _lz_[4],
                          _lz_[5],
                          _lz_[6],
                          _lz_[7],
                          _lz_[8]],
                         _ly_[2],
                         _ly_[3]],
                        A[2],
                        A[3]]),
                     _lx_),
                   _lu_),
                 _lr_),
               _lo_),
             _ll_),
           _li_),
         _lf_);
    function t_of_sexp(sexp_238){
     a:
     {
      if(0 === sexp_238[0]){
       var _lA_ = sexp_238[1], _lB_ = caml_string_compare(_lA_, cst_a);
       b:
       {
        c:
        {
         d:
         {
          e:
          {
           f:
           {
            g:
            {
             h:
             {
              if(0 <= _lB_){
               if(0 < _lB_){
                if(! caml_string_notequal(_lA_, cst_b)) break h;
                if(! caml_string_notequal(_lA_, cst_c)) break g;
                if(! caml_string_notequal(_lA_, cst_d)) break f;
                if(! caml_string_notequal(_lA_, cst_e)) break e;
                if(! caml_string_notequal(_lA_, cst_f)) break d;
                if(! caml_string_notequal(_lA_, cst_g)) break c;
                if(caml_string_notequal(_lA_, cst_h)) break a;
                break b;
               }
              }
              else if(caml_string_notequal(_lA_, cst_A$7)){
               if(! caml_string_notequal(_lA_, cst_B$7)) break h;
               if(! caml_string_notequal(_lA_, cst_C$6)) break g;
               if(! caml_string_notequal(_lA_, cst_D$5)) break f;
               if(! caml_string_notequal(_lA_, cst_E$4)) break e;
               if(! caml_string_notequal(_lA_, cst_F$3)) break d;
               if(! caml_string_notequal(_lA_, cst_G$2)) break c;
               if(caml_string_notequal(_lA_, cst_H$1)) break a;
               break b;
              }
              return caml_call2
                      (Sexplib0_Sexp_conv_error[9], error_source_236, sexp_238);
             }
             return caml_call2
                     (Sexplib0_Sexp_conv_error[9], error_source_236, sexp_238);
            }
            return caml_call2
                    (Sexplib0_Sexp_conv_error[9], error_source_236, sexp_238);
           }
           return caml_call2
                   (Sexplib0_Sexp_conv_error[9], error_source_236, sexp_238);
          }
          return caml_call2
                  (Sexplib0_Sexp_conv_error[9], error_source_236, sexp_238);
         }
         return caml_call2
                 (Sexplib0_Sexp_conv_error[9], error_source_236, sexp_238);
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[9], error_source_236, sexp_238);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[9], error_source_236, sexp_238);
      }
      var _lC_ = sexp_238[1];
      if(! _lC_)
       return caml_call2
               (Sexplib0_Sexp_conv_error[11], error_source_236, sexp_238);
      var _lD_ = _lC_[1];
      if(0 !== _lD_[0])
       return caml_call2
               (Sexplib0_Sexp_conv_error[10], error_source_236, sexp_238);
      var tag_239 = _lD_[1], _lE_ = caml_string_compare(tag_239, cst_a);
      b:
      {
       c:
       {
        d:
        {
         e:
         {
          f:
          {
           g:
           {
            h:
            {
             if(0 <= _lE_){
              if(0 < _lE_){
               if(! caml_string_notequal(tag_239, cst_b)) break h;
               if(! caml_string_notequal(tag_239, cst_c)) break g;
               if(! caml_string_notequal(tag_239, cst_d)) break f;
               if(! caml_string_notequal(tag_239, cst_e)) break e;
               if(! caml_string_notequal(tag_239, cst_f)) break d;
               if(! caml_string_notequal(tag_239, cst_g)) break c;
               if(caml_string_notequal(tag_239, cst_h)) break a;
               break b;
              }
             }
             else if(caml_string_notequal(tag_239, cst_A$7)){
              if(! caml_string_notequal(tag_239, cst_B$7)) break h;
              if(! caml_string_notequal(tag_239, cst_C$6)) break g;
              if(! caml_string_notequal(tag_239, cst_D$5)) break f;
              if(! caml_string_notequal(tag_239, cst_E$4)) break e;
              if(! caml_string_notequal(tag_239, cst_F$3)) break d;
              if(! caml_string_notequal(tag_239, cst_G$2)) break c;
              if(caml_string_notequal(tag_239, cst_H$1)) break a;
              break b;
             }
             var sexp_args_240 = _lC_[2];
             if(sexp_args_240 && ! sexp_args_240[2]){
              var
               arg0_241 = sexp_args_240[1],
               res0_242 = caml_call1(A[1][1][9], arg0_241);
              return [0, res0_242];
             }
             return caml_call3
                     (Sexplib0_Sexp_conv_error[8],
                      error_source_236,
                      tag_239,
                      sexp_238);
            }
            var sexp_args_245 = _lC_[2];
            if(sexp_args_245 && ! sexp_args_245[2]){
             var
              arg0_246 = sexp_args_245[1],
              res0_247 = caml_call1(B[1][1][9], arg0_246);
             return [1, res0_247];
            }
            return caml_call3
                    (Sexplib0_Sexp_conv_error[8],
                     error_source_236,
                     tag_239,
                     sexp_238);
           }
           var sexp_args_250 = _lC_[2];
           if(sexp_args_250 && ! sexp_args_250[2]){
            var
             arg0_251 = sexp_args_250[1],
             res0_252 = caml_call1(C[1][1][9], arg0_251);
            return [2, res0_252];
           }
           return caml_call3
                   (Sexplib0_Sexp_conv_error[8],
                    error_source_236,
                    tag_239,
                    sexp_238);
          }
          var sexp_args_255 = _lC_[2];
          if(sexp_args_255 && ! sexp_args_255[2]){
           var
            arg0_256 = sexp_args_255[1],
            res0_257 = caml_call1(D[1][1][9], arg0_256);
           return [3, res0_257];
          }
          return caml_call3
                  (Sexplib0_Sexp_conv_error[8],
                   error_source_236,
                   tag_239,
                   sexp_238);
         }
         var sexp_args_260 = _lC_[2];
         if(sexp_args_260 && ! sexp_args_260[2]){
          var
           arg0_261 = sexp_args_260[1],
           res0_262 = caml_call1(E[1][1][9], arg0_261);
          return [4, res0_262];
         }
         return caml_call3
                 (Sexplib0_Sexp_conv_error[8],
                  error_source_236,
                  tag_239,
                  sexp_238);
        }
        var sexp_args_265 = _lC_[2];
        if(sexp_args_265 && ! sexp_args_265[2]){
         var
          arg0_266 = sexp_args_265[1],
          res0_267 = caml_call1(F[1][1][9], arg0_266);
         return [5, res0_267];
        }
        return caml_call3
                (Sexplib0_Sexp_conv_error[8],
                 error_source_236,
                 tag_239,
                 sexp_238);
       }
       var sexp_args_270 = _lC_[2];
       if(sexp_args_270 && ! sexp_args_270[2]){
        var
         arg0_271 = sexp_args_270[1],
         res0_272 = caml_call1(G[1][1][9], arg0_271);
        return [6, res0_272];
       }
       return caml_call3
               (Sexplib0_Sexp_conv_error[8],
                error_source_236,
                tag_239,
                sexp_238);
      }
      var sexp_args_275 = _lC_[2];
      if(sexp_args_275 && ! sexp_args_275[2]){
       var
        arg0_276 = sexp_args_275[1],
        res0_277 = caml_call1(H[1][1][9], arg0_276);
       return [7, res0_277];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[8],
               error_source_236,
               tag_239,
               sexp_238);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[12], error_source_236, sexp_238);
    }
    function sexp_of_t(param){
     switch(param[0]){
       case 0:
        var arg0_278 = param[1], res0_279 = caml_call1(A[1][1][10], arg0_278);
        return [1, [0, _T_, [0, res0_279, 0]]];
       case 1:
        var arg0_280 = param[1], res0_281 = caml_call1(B[1][1][10], arg0_280);
        return [1, [0, _U_, [0, res0_281, 0]]];
       case 2:
        var arg0_282 = param[1], res0_283 = caml_call1(C[1][1][10], arg0_282);
        return [1, [0, _V_, [0, res0_283, 0]]];
       case 3:
        var arg0_284 = param[1], res0_285 = caml_call1(D[1][1][10], arg0_284);
        return [1, [0, _W_, [0, res0_285, 0]]];
       case 4:
        var arg0_286 = param[1], res0_287 = caml_call1(E[1][1][10], arg0_286);
        return [1, [0, _X_, [0, res0_287, 0]]];
       case 5:
        var arg0_288 = param[1], res0_289 = caml_call1(F[1][1][10], arg0_288);
        return [1, [0, _Y_, [0, res0_289, 0]]];
       case 6:
        var arg0_290 = param[1], res0_291 = caml_call1(G[1][1][10], arg0_290);
        return [1, [0, _Z_, [0, res0_291, 0]]];
       default:
        var arg0_292 = param[1], res0_293 = caml_call1(H[1][1][10], arg0_292);
        return [1, [0, ___, [0, res0_293, 0]]];
     }
    }
    var
     include = V1(Plain, [0, t_of_sexp, sexp_of_t]),
     Intermediate = include[1],
     to_parts = include[2],
     finalize = include[3];
    return [0, Intermediate, to_parts, finalize];
   }
   var Of_tuple8 = [0, V1$28];
   function V1$29(A, B, C, D, E, F, G, H, I){
    var
     _ks_ =
       caml_call1
        (Bin_prot_Shape[5],
         [0,
          [0, cst_A$6, [0, A[1][1][5], 0]],
          [0,
           [0, cst_B$6, [0, B[1][1][5], 0]],
           [0,
            [0, cst_C$5, [0, C[1][1][5], 0]],
            [0,
             [0, cst_D$4, [0, D[1][1][5], 0]],
             [0,
              [0, cst_E$3, [0, E[1][1][5], 0]],
              [0,
               [0, cst_F$2, [0, F[1][1][5], 0]],
               [0,
                [0, cst_G$1, [0, G[1][1][5], 0]],
                [0,
                 [0, cst_H$0, [0, H[1][1][5], 0]],
                 [0, [0, cst_I, [0, I[1][1][5], 0]], 0]]]]]]]]]),
     _kt_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$17), 0, _ks_], 0],
     _ku_ = caml_call1(Bin_shape[4][1], cst_src_main_ml_1351_10),
     group = caml_call2(Bin_prot_Shape[2], _ku_, _kt_),
     _kv_ = caml_call1(Bin_shape[2][1], cst_t$18),
     bin_shape_t = caml_call1(caml_call2(Bin_prot_Shape[10], group, _kv_), 0);
    function bin_size_t(param){
     switch(param[0]){
       case 0:
        var v1 = param[1], _k6_ = caml_call1(A[1][1][1], v1);
        return caml_call2(Bin_prot_Common[23], 1, _k6_);
       case 1:
        var v1$0 = param[1], _k7_ = caml_call1(B[1][1][1], v1$0);
        return caml_call2(Bin_prot_Common[23], 1, _k7_);
       case 2:
        var v1$1 = param[1], _k8_ = caml_call1(C[1][1][1], v1$1);
        return caml_call2(Bin_prot_Common[23], 1, _k8_);
       case 3:
        var v1$2 = param[1], _k9_ = caml_call1(D[1][1][1], v1$2);
        return caml_call2(Bin_prot_Common[23], 1, _k9_);
       case 4:
        var v1$3 = param[1], _k__ = caml_call1(E[1][1][1], v1$3);
        return caml_call2(Bin_prot_Common[23], 1, _k__);
       case 5:
        var v1$4 = param[1], _k$_ = caml_call1(F[1][1][1], v1$4);
        return caml_call2(Bin_prot_Common[23], 1, _k$_);
       case 6:
        var v1$5 = param[1], _la_ = caml_call1(G[1][1][1], v1$5);
        return caml_call2(Bin_prot_Common[23], 1, _la_);
       case 7:
        var v1$6 = param[1], _lb_ = caml_call1(H[1][1][1], v1$6);
        return caml_call2(Bin_prot_Common[23], 1, _lb_);
       default:
        var v1$7 = param[1], _lc_ = caml_call1(I[1][1][1], v1$7);
        return caml_call2(Bin_prot_Common[23], 1, _lc_);
     }
    }
    function bin_write_t(buf, pos, param){
     switch(param[0]){
       case 0:
        var
         v1 = param[1],
         pos$0 = caml_call3(Bin_prot_Write[30], buf, pos, 0);
        return caml_call3(A[1][1][2], buf, pos$0, v1);
       case 1:
        var
         v1$0 = param[1],
         pos$1 = caml_call3(Bin_prot_Write[30], buf, pos, 1);
        return caml_call3(B[1][1][2], buf, pos$1, v1$0);
       case 2:
        var
         v1$1 = param[1],
         pos$2 = caml_call3(Bin_prot_Write[30], buf, pos, 2);
        return caml_call3(C[1][1][2], buf, pos$2, v1$1);
       case 3:
        var
         v1$2 = param[1],
         pos$3 = caml_call3(Bin_prot_Write[30], buf, pos, 3);
        return caml_call3(D[1][1][2], buf, pos$3, v1$2);
       case 4:
        var
         v1$3 = param[1],
         pos$4 = caml_call3(Bin_prot_Write[30], buf, pos, 4);
        return caml_call3(E[1][1][2], buf, pos$4, v1$3);
       case 5:
        var
         v1$4 = param[1],
         pos$5 = caml_call3(Bin_prot_Write[30], buf, pos, 5);
        return caml_call3(F[1][1][2], buf, pos$5, v1$4);
       case 6:
        var
         v1$5 = param[1],
         pos$6 = caml_call3(Bin_prot_Write[30], buf, pos, 6);
        return caml_call3(G[1][1][2], buf, pos$6, v1$5);
       case 7:
        var
         v1$6 = param[1],
         pos$7 = caml_call3(Bin_prot_Write[30], buf, pos, 7);
        return caml_call3(H[1][1][2], buf, pos$7, v1$6);
       default:
        var
         v1$7 = param[1],
         pos$8 = caml_call3(Bin_prot_Write[30], buf, pos, 8);
        return caml_call3(I[1][1][2], buf, pos$8, v1$7);
     }
    }
    var bin_writer_t = [0, bin_size_t, bin_write_t];
    function bin_read_t(buf, pos_ref, vint){
     return caml_call2
             (Bin_prot_Common[19],
              cst_src_main_ml_Stable_Of_tupl$6,
              pos_ref[1]);
    }
    function bin_read_t$0(buf, pos_ref){
     var match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
     if(8 < match >>> 0)
      return caml_call2(Bin_prot_Common[18], _$_, pos_ref[1]);
     switch(match){
       case 0:
        var arg_1 = caml_call2(A[1][1][3], buf, pos_ref); return [0, arg_1];
       case 1:
        var arg_1$0 = caml_call2(B[1][1][3], buf, pos_ref);
        return [1, arg_1$0];
       case 2:
        var arg_1$1 = caml_call2(C[1][1][3], buf, pos_ref);
        return [2, arg_1$1];
       case 3:
        var arg_1$2 = caml_call2(D[1][1][3], buf, pos_ref);
        return [3, arg_1$2];
       case 4:
        var arg_1$3 = caml_call2(E[1][1][3], buf, pos_ref);
        return [4, arg_1$3];
       case 5:
        var arg_1$4 = caml_call2(F[1][1][3], buf, pos_ref);
        return [5, arg_1$4];
       case 6:
        var arg_1$5 = caml_call2(G[1][1][3], buf, pos_ref);
        return [6, arg_1$5];
       case 7:
        var arg_1$6 = caml_call2(H[1][1][3], buf, pos_ref);
        return [7, arg_1$6];
       default:
        var arg_1$7 = caml_call2(I[1][1][3], buf, pos_ref);
        return [8, arg_1$7];
     }
    }
    var
     bin_reader_t = [0, bin_read_t$0, bin_read_t],
     bin_t = [0, bin_shape_t, bin_writer_t, bin_reader_t];
    function a(v0){return [0, v0];}
    function b(v0){return [1, v0];}
    function c(v0){return [2, v0];}
    function d(v0){return [3, v0];}
    function e(v0){return [4, v0];}
    function f(v0){return [5, v0];}
    function g(v0){return [6, v0];}
    function h(v0){return [7, v0];}
    function i(v0){return [8, v0];}
    function create(param){
     var
      _kY_ = caml_call1(I[1][2], 0),
      _kZ_ = caml_call1(H[1][2], 0),
      _k0_ = caml_call1(G[1][2], 0),
      _k1_ = caml_call1(F[1][2], 0),
      _k2_ = caml_call1(E[1][2], 0),
      _k3_ = caml_call1(D[1][2], 0),
      _k4_ = caml_call1(C[1][2], 0),
      _k5_ = caml_call1(B[1][2], 0);
     return [0,
             caml_call1(A[1][2], 0),
             _k5_,
             _k4_,
             _k3_,
             _k2_,
             _k1_,
             _k0_,
             _kZ_,
             _kY_];
    }
    function apply_part(param, _kX_){
     var
      i = param[9],
      h = param[8],
      g = param[7],
      f = param[6],
      e = param[5],
      d = param[4],
      c = param[3],
      b = param[2],
      a = param[1];
     switch(_kX_[0]){
       case 0:
        var x = _kX_[1];
        return [0, caml_call2(A[1][3], a, x), b, c, d, e, f, g, h, i];
       case 1:
        var x$0 = _kX_[1];
        return [0, a, caml_call2(B[1][3], b, x$0), c, d, e, f, g, h, i];
       case 2:
        var x$1 = _kX_[1];
        return [0, a, b, caml_call2(C[1][3], c, x$1), d, e, f, g, h, i];
       case 3:
        var x$2 = _kX_[1];
        return [0, a, b, c, caml_call2(D[1][3], d, x$2), e, f, g, h, i];
       case 4:
        var x$3 = _kX_[1];
        return [0, a, b, c, d, caml_call2(E[1][3], e, x$3), f, g, h, i];
       case 5:
        var x$4 = _kX_[1];
        return [0, a, b, c, d, e, caml_call2(F[1][3], f, x$4), g, h, i];
       case 6:
        var x$5 = _kX_[1];
        return [0, a, b, c, d, e, f, caml_call2(G[1][3], g, x$5), h, i];
       case 7:
        var x$6 = _kX_[1];
        return [0, a, b, c, d, e, f, g, caml_call2(H[1][3], h, x$6), i];
       default:
        var x$7 = _kX_[1];
        return [0, a, b, c, d, e, f, g, h, caml_call2(I[1][3], i, x$7)];
     }
    }
    function to_parts(param){
     var
      i$0 = param[9],
      h$0 = param[8],
      g$0 = param[7],
      f$0 = param[6],
      e$0 = param[5],
      d$0 = param[4],
      c$0 = param[3],
      b$0 = param[2],
      a$0 = param[1],
      _kE_ = caml_call1(I[2], i$0),
      _kF_ = [0, caml_call2(Streamable_Import[4][44], _kE_, i), 0],
      _kG_ = caml_call1(H[2], h$0),
      _kH_ = [0, caml_call2(Streamable_Import[4][44], _kG_, h), _kF_],
      _kI_ = caml_call1(G[2], g$0),
      _kJ_ = [0, caml_call2(Streamable_Import[4][44], _kI_, g), _kH_],
      _kK_ = caml_call1(F[2], f$0),
      _kL_ = [0, caml_call2(Streamable_Import[4][44], _kK_, f), _kJ_],
      _kM_ = caml_call1(E[2], e$0),
      _kN_ = [0, caml_call2(Streamable_Import[4][44], _kM_, e), _kL_],
      _kO_ = caml_call1(D[2], d$0),
      _kP_ = [0, caml_call2(Streamable_Import[4][44], _kO_, d), _kN_],
      _kQ_ = caml_call1(C[2], c$0),
      _kR_ = [0, caml_call2(Streamable_Import[4][44], _kQ_, c), _kP_],
      _kS_ = caml_call1(B[2], b$0),
      _kT_ = [0, caml_call2(Streamable_Import[4][44], _kS_, b), _kR_],
      _kU_ = caml_call1(A[2], a$0),
      _kV_ = [0, caml_call2(Streamable_Import[4][44], _kU_, a), _kT_],
      _kW_ = caml_call1(Streamable_Import[4][111], _kV_);
     return caml_call1(Streamable_Import[4][72], _kW_);
    }
    function finalize(param){
     var
      i = param[9],
      h = param[8],
      g = param[7],
      f = param[6],
      e = param[5],
      d = param[4],
      c = param[3],
      b = param[2],
      a = param[1],
      _kw_ = caml_call1(I[3], i),
      _kx_ = caml_call1(H[3], h),
      _ky_ = caml_call1(G[3], g),
      _kz_ = caml_call1(F[3], f),
      _kA_ = caml_call1(E[3], e),
      _kB_ = caml_call1(D[3], d),
      _kC_ = caml_call1(C[3], c),
      _kD_ = caml_call1(B[3], b);
     return [0,
             caml_call1(A[3], a),
             _kD_,
             _kC_,
             _kB_,
             _kA_,
             _kz_,
             _ky_,
             _kx_,
             _kw_];
    }
    return [0,
            [0,
             [0,
              bin_size_t,
              bin_write_t,
              bin_read_t$0,
              bin_read_t,
              bin_shape_t,
              bin_writer_t,
              bin_reader_t,
              bin_t],
             create,
             apply_part],
            to_parts,
            finalize];
   }
   var Of_tuple9_rpc = [0, V1$29];
   function V1$30(A, B, C, D, E, F, G, H, I){
    var
     _jZ_ = I[1],
     _j0_ = _jZ_[1],
     _j2_ = H[1],
     _j3_ = _j2_[1],
     _j5_ = G[1],
     _j6_ = _j5_[1],
     _j8_ = F[1],
     _j9_ = _j8_[1],
     _j$_ = E[1],
     _ka_ = _j$_[1],
     _kc_ = D[1],
     _kd_ = _kc_[1],
     _kf_ = C[1],
     _kg_ = _kf_[1],
     _ki_ = B[1],
     _kj_ = _ki_[1],
     _kl_ = A[1],
     _km_ = _kl_[1],
     _j1_ =
       [0,
        [0,
         [0,
          _j0_[1],
          _j0_[2],
          _j0_[3],
          _j0_[4],
          _j0_[5],
          _j0_[6],
          _j0_[7],
          _j0_[8]],
         _jZ_[2],
         _jZ_[3]],
        I[2],
        I[3]],
     _j4_ =
       [0,
        [0,
         [0,
          _j3_[1],
          _j3_[2],
          _j3_[3],
          _j3_[4],
          _j3_[5],
          _j3_[6],
          _j3_[7],
          _j3_[8]],
         _j2_[2],
         _j2_[3]],
        H[2],
        H[3]],
     _j7_ =
       [0,
        [0,
         [0,
          _j6_[1],
          _j6_[2],
          _j6_[3],
          _j6_[4],
          _j6_[5],
          _j6_[6],
          _j6_[7],
          _j6_[8]],
         _j5_[2],
         _j5_[3]],
        G[2],
        G[3]],
     _j__ =
       [0,
        [0,
         [0,
          _j9_[1],
          _j9_[2],
          _j9_[3],
          _j9_[4],
          _j9_[5],
          _j9_[6],
          _j9_[7],
          _j9_[8]],
         _j8_[2],
         _j8_[3]],
        F[2],
        F[3]],
     _kb_ =
       [0,
        [0,
         [0,
          _ka_[1],
          _ka_[2],
          _ka_[3],
          _ka_[4],
          _ka_[5],
          _ka_[6],
          _ka_[7],
          _ka_[8]],
         _j$_[2],
         _j$_[3]],
        E[2],
        E[3]],
     _ke_ =
       [0,
        [0,
         [0,
          _kd_[1],
          _kd_[2],
          _kd_[3],
          _kd_[4],
          _kd_[5],
          _kd_[6],
          _kd_[7],
          _kd_[8]],
         _kc_[2],
         _kc_[3]],
        D[2],
        D[3]],
     _kh_ =
       [0,
        [0,
         [0,
          _kg_[1],
          _kg_[2],
          _kg_[3],
          _kg_[4],
          _kg_[5],
          _kg_[6],
          _kg_[7],
          _kg_[8]],
         _kf_[2],
         _kf_[3]],
        C[2],
        C[3]],
     _kk_ =
       [0,
        [0,
         [0,
          _kj_[1],
          _kj_[2],
          _kj_[3],
          _kj_[4],
          _kj_[5],
          _kj_[6],
          _kj_[7],
          _kj_[8]],
         _ki_[2],
         _ki_[3]],
        B[2],
        B[3]],
     Plain =
       caml_call1
        (caml_call1
          (caml_call1
            (caml_call1
              (caml_call1
                (caml_call1
                  (caml_call1
                    (caml_call1
                      (caml_call1
                        (Of_tuple9_rpc[1],
                         [0,
                          [0,
                           [0,
                            _km_[1],
                            _km_[2],
                            _km_[3],
                            _km_[4],
                            _km_[5],
                            _km_[6],
                            _km_[7],
                            _km_[8]],
                           _kl_[2],
                           _kl_[3]],
                          A[2],
                          A[3]]),
                       _kk_),
                     _kh_),
                   _ke_),
                 _kb_),
               _j__),
             _j7_),
           _j4_),
         _j1_);
    function t_of_sexp(sexp_298){
     a:
     {
      if(0 === sexp_298[0]){
       var _kn_ = sexp_298[1], _ko_ = caml_string_compare(_kn_, cst_a);
       b:
       {
        c:
        {
         d:
         {
          e:
          {
           f:
           {
            g:
            {
             h:
             {
              i:
              {
               if(0 <= _ko_){
                if(0 < _ko_){
                 if(! caml_string_notequal(_kn_, cst_b)) break i;
                 if(! caml_string_notequal(_kn_, cst_c)) break h;
                 if(! caml_string_notequal(_kn_, cst_d)) break g;
                 if(! caml_string_notequal(_kn_, cst_e)) break f;
                 if(! caml_string_notequal(_kn_, cst_f)) break e;
                 if(! caml_string_notequal(_kn_, cst_g)) break d;
                 if(! caml_string_notequal(_kn_, cst_h)) break c;
                 if(caml_string_notequal(_kn_, cst_i)) break a;
                 break b;
                }
               }
               else if(caml_string_notequal(_kn_, cst_A$7)){
                if(! caml_string_notequal(_kn_, cst_B$7)) break i;
                if(! caml_string_notequal(_kn_, cst_C$6)) break h;
                if(! caml_string_notequal(_kn_, cst_D$5)) break g;
                if(! caml_string_notequal(_kn_, cst_E$4)) break f;
                if(! caml_string_notequal(_kn_, cst_F$3)) break e;
                if(! caml_string_notequal(_kn_, cst_G$2)) break d;
                if(! caml_string_notequal(_kn_, cst_H$1)) break c;
                if(caml_string_notequal(_kn_, cst_I$0)) break a;
                break b;
               }
               return caml_call2
                       (Sexplib0_Sexp_conv_error[9], error_source_296, sexp_298);
              }
              return caml_call2
                      (Sexplib0_Sexp_conv_error[9], error_source_296, sexp_298);
             }
             return caml_call2
                     (Sexplib0_Sexp_conv_error[9], error_source_296, sexp_298);
            }
            return caml_call2
                    (Sexplib0_Sexp_conv_error[9], error_source_296, sexp_298);
           }
           return caml_call2
                   (Sexplib0_Sexp_conv_error[9], error_source_296, sexp_298);
          }
          return caml_call2
                  (Sexplib0_Sexp_conv_error[9], error_source_296, sexp_298);
         }
         return caml_call2
                 (Sexplib0_Sexp_conv_error[9], error_source_296, sexp_298);
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[9], error_source_296, sexp_298);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[9], error_source_296, sexp_298);
      }
      var _kp_ = sexp_298[1];
      if(! _kp_)
       return caml_call2
               (Sexplib0_Sexp_conv_error[11], error_source_296, sexp_298);
      var _kq_ = _kp_[1];
      if(0 !== _kq_[0])
       return caml_call2
               (Sexplib0_Sexp_conv_error[10], error_source_296, sexp_298);
      var tag_299 = _kq_[1], _kr_ = caml_string_compare(tag_299, cst_a);
      b:
      {
       c:
       {
        d:
        {
         e:
         {
          f:
          {
           g:
           {
            h:
            {
             i:
             {
              if(0 <= _kr_){
               if(0 < _kr_){
                if(! caml_string_notequal(tag_299, cst_b)) break i;
                if(! caml_string_notequal(tag_299, cst_c)) break h;
                if(! caml_string_notequal(tag_299, cst_d)) break g;
                if(! caml_string_notequal(tag_299, cst_e)) break f;
                if(! caml_string_notequal(tag_299, cst_f)) break e;
                if(! caml_string_notequal(tag_299, cst_g)) break d;
                if(! caml_string_notequal(tag_299, cst_h)) break c;
                if(caml_string_notequal(tag_299, cst_i)) break a;
                break b;
               }
              }
              else if(caml_string_notequal(tag_299, cst_A$7)){
               if(! caml_string_notequal(tag_299, cst_B$7)) break i;
               if(! caml_string_notequal(tag_299, cst_C$6)) break h;
               if(! caml_string_notequal(tag_299, cst_D$5)) break g;
               if(! caml_string_notequal(tag_299, cst_E$4)) break f;
               if(! caml_string_notequal(tag_299, cst_F$3)) break e;
               if(! caml_string_notequal(tag_299, cst_G$2)) break d;
               if(! caml_string_notequal(tag_299, cst_H$1)) break c;
               if(caml_string_notequal(tag_299, cst_I$0)) break a;
               break b;
              }
              var sexp_args_300 = _kp_[2];
              if(sexp_args_300 && ! sexp_args_300[2]){
               var
                arg0_301 = sexp_args_300[1],
                res0_302 = caml_call1(A[1][1][9], arg0_301);
               return [0, res0_302];
              }
              return caml_call3
                      (Sexplib0_Sexp_conv_error[8],
                       error_source_296,
                       tag_299,
                       sexp_298);
             }
             var sexp_args_305 = _kp_[2];
             if(sexp_args_305 && ! sexp_args_305[2]){
              var
               arg0_306 = sexp_args_305[1],
               res0_307 = caml_call1(B[1][1][9], arg0_306);
              return [1, res0_307];
             }
             return caml_call3
                     (Sexplib0_Sexp_conv_error[8],
                      error_source_296,
                      tag_299,
                      sexp_298);
            }
            var sexp_args_310 = _kp_[2];
            if(sexp_args_310 && ! sexp_args_310[2]){
             var
              arg0_311 = sexp_args_310[1],
              res0_312 = caml_call1(C[1][1][9], arg0_311);
             return [2, res0_312];
            }
            return caml_call3
                    (Sexplib0_Sexp_conv_error[8],
                     error_source_296,
                     tag_299,
                     sexp_298);
           }
           var sexp_args_315 = _kp_[2];
           if(sexp_args_315 && ! sexp_args_315[2]){
            var
             arg0_316 = sexp_args_315[1],
             res0_317 = caml_call1(D[1][1][9], arg0_316);
            return [3, res0_317];
           }
           return caml_call3
                   (Sexplib0_Sexp_conv_error[8],
                    error_source_296,
                    tag_299,
                    sexp_298);
          }
          var sexp_args_320 = _kp_[2];
          if(sexp_args_320 && ! sexp_args_320[2]){
           var
            arg0_321 = sexp_args_320[1],
            res0_322 = caml_call1(E[1][1][9], arg0_321);
           return [4, res0_322];
          }
          return caml_call3
                  (Sexplib0_Sexp_conv_error[8],
                   error_source_296,
                   tag_299,
                   sexp_298);
         }
         var sexp_args_325 = _kp_[2];
         if(sexp_args_325 && ! sexp_args_325[2]){
          var
           arg0_326 = sexp_args_325[1],
           res0_327 = caml_call1(F[1][1][9], arg0_326);
          return [5, res0_327];
         }
         return caml_call3
                 (Sexplib0_Sexp_conv_error[8],
                  error_source_296,
                  tag_299,
                  sexp_298);
        }
        var sexp_args_330 = _kp_[2];
        if(sexp_args_330 && ! sexp_args_330[2]){
         var
          arg0_331 = sexp_args_330[1],
          res0_332 = caml_call1(G[1][1][9], arg0_331);
         return [6, res0_332];
        }
        return caml_call3
                (Sexplib0_Sexp_conv_error[8],
                 error_source_296,
                 tag_299,
                 sexp_298);
       }
       var sexp_args_335 = _kp_[2];
       if(sexp_args_335 && ! sexp_args_335[2]){
        var
         arg0_336 = sexp_args_335[1],
         res0_337 = caml_call1(H[1][1][9], arg0_336);
        return [7, res0_337];
       }
       return caml_call3
               (Sexplib0_Sexp_conv_error[8],
                error_source_296,
                tag_299,
                sexp_298);
      }
      var sexp_args_340 = _kp_[2];
      if(sexp_args_340 && ! sexp_args_340[2]){
       var
        arg0_341 = sexp_args_340[1],
        res0_342 = caml_call1(I[1][1][9], arg0_341);
       return [8, res0_342];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[8],
               error_source_296,
               tag_299,
               sexp_298);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[12], error_source_296, sexp_298);
    }
    function sexp_of_t(param){
     switch(param[0]){
       case 0:
        var arg0_343 = param[1], res0_344 = caml_call1(A[1][1][10], arg0_343);
        return [1, [0, _aa_, [0, res0_344, 0]]];
       case 1:
        var arg0_345 = param[1], res0_346 = caml_call1(B[1][1][10], arg0_345);
        return [1, [0, _ab_, [0, res0_346, 0]]];
       case 2:
        var arg0_347 = param[1], res0_348 = caml_call1(C[1][1][10], arg0_347);
        return [1, [0, _ac_, [0, res0_348, 0]]];
       case 3:
        var arg0_349 = param[1], res0_350 = caml_call1(D[1][1][10], arg0_349);
        return [1, [0, _ad_, [0, res0_350, 0]]];
       case 4:
        var arg0_351 = param[1], res0_352 = caml_call1(E[1][1][10], arg0_351);
        return [1, [0, _ae_, [0, res0_352, 0]]];
       case 5:
        var arg0_353 = param[1], res0_354 = caml_call1(F[1][1][10], arg0_353);
        return [1, [0, _af_, [0, res0_354, 0]]];
       case 6:
        var arg0_355 = param[1], res0_356 = caml_call1(G[1][1][10], arg0_355);
        return [1, [0, _ag_, [0, res0_356, 0]]];
       case 7:
        var arg0_357 = param[1], res0_358 = caml_call1(H[1][1][10], arg0_357);
        return [1, [0, _ah_, [0, res0_358, 0]]];
       default:
        var arg0_359 = param[1], res0_360 = caml_call1(I[1][1][10], arg0_359);
        return [1, [0, _ai_, [0, res0_360, 0]]];
     }
    }
    var
     include = V1(Plain, [0, t_of_sexp, sexp_of_t]),
     Intermediate = include[1],
     to_parts = include[2],
     finalize = include[3];
    return [0, Intermediate, to_parts, finalize];
   }
   var Of_tuple9 = [0, V1$30];
   function V1$31(A, B){
    var
     _jN_ =
       caml_call1
        (Bin_prot_Shape[5],
         [0,
          _ak_,
          [0,
           [0, cst_A_part, [0, A[1][1][5], 0]],
           [0, _aj_, [0, [0, cst_B_part, [0, B[1][1][5], 0]], 0]]]]),
     _jO_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$19), 0, _jN_], 0],
     _jP_ = caml_call1(Bin_shape[4][1], cst_src_main_ml_1460_10),
     group = caml_call2(Bin_prot_Shape[2], _jP_, _jO_),
     _jQ_ = caml_call1(Bin_shape[2][1], cst_t$20),
     bin_shape_t = caml_call1(caml_call2(Bin_prot_Shape[10], group, _jQ_), 0);
    function bin_size_t(param){
     if(typeof param === "number") return 1;
     if(0 === param[0]){
      var v1 = param[1], _jX_ = caml_call1(A[1][1][1], v1);
      return caml_call2(Bin_prot_Common[23], 1, _jX_);
     }
     var v1$0 = param[1], _jY_ = caml_call1(B[1][1][1], v1$0);
     return caml_call2(Bin_prot_Common[23], 1, _jY_);
    }
    function bin_write_t(buf, pos, param){
     if(typeof param === "number")
      return 0 === param
              ? caml_call3(Bin_prot_Write[30], buf, pos, 0)
              : caml_call3(Bin_prot_Write[30], buf, pos, 2);
     if(0 === param[0]){
      var v1 = param[1], pos$0 = caml_call3(Bin_prot_Write[30], buf, pos, 1);
      return caml_call3(A[1][1][2], buf, pos$0, v1);
     }
     var v1$0 = param[1], pos$1 = caml_call3(Bin_prot_Write[30], buf, pos, 3);
     return caml_call3(B[1][1][2], buf, pos$1, v1$0);
    }
    var bin_writer_t = [0, bin_size_t, bin_write_t];
    function bin_read_t(buf, pos_ref, vint){
     return caml_call2
             (Bin_prot_Common[19], cst_src_main_ml_Stable_Of_vari, pos_ref[1]);
    }
    function bin_read_t$0(buf, pos_ref){
     var match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
     if(3 < match >>> 0)
      return caml_call2(Bin_prot_Common[18], _al_, pos_ref[1]);
     switch(match){
       case 0:
        return 0;
       case 1:
        var arg_1 = caml_call2(A[1][1][3], buf, pos_ref); return [0, arg_1];
       case 2:
        return 1;
       default:
        var arg_1$0 = caml_call2(B[1][1][3], buf, pos_ref);
        return [1, arg_1$0];
     }
    }
    var
     bin_reader_t = [0, bin_read_t$0, bin_read_t],
     bin_t = [0, bin_shape_t, bin_writer_t, bin_reader_t],
     a_start = 0;
    function a_part(v0){return [0, v0];}
    var b_start = 1;
    function b_part(v0){return [1, v0];}
    function is_a_start(param){
     if(typeof param === "number" && ! param) return;
     return;
    }
    function is_a_part(param){
     if(typeof param !== "number" && 0 === param[0]) return;
     return;
    }
    function is_b_start(param){
     if(typeof param === "number" && param) return;
     return;
    }
    function is_b_part(param){
     if(typeof param !== "number" && 1 === param[0]) return;
     return;
    }
    function a_start_val(param){
     if(typeof param === "number" && ! param) return;
     return;
    }
    function a_part_val(param){
     if(typeof param !== "number" && 0 === param[0]) return;
     return;
    }
    function b_start_val(param){
     if(typeof param === "number" && param) return;
     return;
    }
    function b_part_val(param){
     if(typeof param !== "number" && 1 === param[0]) return;
     return;
    }
    var
     a_start$0 = [0, cst_A_start, 0, a_start],
     a_part$0 = [0, cst_A_part$0, 1, a_part],
     b_start$0 = [0, cst_B_start, 2, b_start],
     b_part$0 = [0, cst_B_part$0, 3, b_part];
    function fold(init, a_start_fun, a_part_fun, b_start_fun, b_part_fun){
     return caml_call2
             (b_part_fun,
              caml_call2
               (b_start_fun,
                caml_call2
                 (a_part_fun,
                  caml_call2(a_start_fun, init, a_start$0),
                  a_part$0),
                b_start$0),
              b_part$0);
    }
    function iter(a_start_fun, a_part_fun, b_start_fun, b_part_fun){
     caml_call1(a_start_fun, a_start$0);
     caml_call1(a_part_fun, a_part$0);
     caml_call1(b_start_fun, b_start$0);
     return caml_call1(b_part_fun, b_part$0);
    }
    function map(t, a_start_fun, a_part_fun, b_start_fun, b_part_fun){
     if(typeof t === "number")
      return 0 === t
              ? caml_call1(a_start_fun, a_start$0)
              : caml_call1(b_start_fun, b_start$0);
     if(0 === t[0]){
      var v0 = t[1];
      return caml_call2(a_part_fun, a_part$0, v0);
     }
     var v0$0 = t[1];
     return caml_call2(b_part_fun, b_part$0, v0$0);
    }
    function make_matcher
    (a_start_fun, a_part_fun, b_start_fun, b_part_fun, compile_acc){
     var
      compile_acc$0 = caml_call2(a_start_fun, a_start$0, compile_acc)[2],
      compile_acc$1 = caml_call2(a_part_fun, a_part$0, compile_acc$0)[2],
      compile_acc$2 = caml_call2(b_start_fun, b_start$0, compile_acc$1)[2];
     caml_call2(b_part_fun, b_part$0, compile_acc$2);
     return;
    }
    function to_rank(param){
     if(typeof param === "number"){if(0 === param) return; return;}
     if(0 === param[0]) return;
     return;
    }
    function to_name(param){
     if(typeof param === "number"){if(0 === param) return; return;}
     if(0 === param[0]) return;
     return;
    }
    var
     Variants =
       [0,
        a_start$0,
        a_part$0,
        b_start$0,
        b_part$0,
        fold,
        iter,
        map,
        make_matcher,
        to_rank,
        to_name,
        descriptions$0],
     Part =
       [0,
        bin_shape_t,
        bin_size_t,
        bin_write_t,
        bin_writer_t,
        bin_read_t,
        bin_read_t$0,
        bin_reader_t,
        bin_t,
        a_start,
        a_part,
        b_start,
        b_part,
        is_a_start,
        is_a_part,
        is_b_start,
        is_b_part,
        a_start_val,
        a_part_val,
        b_start_val,
        b_part_val,
        Variants];
    function create(param){return 0;}
    function apply_part(t, part){
     if(typeof t === "number"){
      if(typeof part === "number")
       return part ? [1, caml_call1(B[1][2], 0)] : [0, caml_call1(A[1][2], 0)];
     }
     else
      if(0 === t[0]){
       if(typeof part !== "number" && 0 === part[0]){
        var x = part[1], a = t[1];
        return [0, caml_call2(A[1][3], a, x)];
       }
      }
      else if(typeof part !== "number" && 1 === part[0]){
       var x$0 = part[1], b = t[1];
       return [1, caml_call2(B[1][3], b, x$0)];
      }
     throw caml_maybe_attach_backtrace([0, Assert_failure, _am_], 1);
    }
    var Intermediate = [0, Part, create, apply_part];
    function to_parts(param){
     if(66 <= param[1]){
      var
       b = param[2],
       _jR_ = Intermediate[1][12],
       _jS_ = caml_call1(B[2], b),
       _jT_ = caml_call2(Streamable_Import[4][44], _jS_, _jR_);
      return caml_call2(Streamable_Import[4][120], Intermediate[1][11], _jT_);
     }
     var
      a = param[2],
      _jU_ = Intermediate[1][10],
      _jV_ = caml_call1(A[2], a),
      _jW_ = caml_call2(Streamable_Import[4][44], _jV_, _jU_);
     return caml_call2(Streamable_Import[4][120], Intermediate[1][9], _jW_);
    }
    function finalize(param){
     if(typeof param === "number")
      throw caml_maybe_attach_backtrace([0, Assert_failure, _an_], 1);
     if(0 === param[0]){
      var a = param[1];
      return [0, 65, caml_call1(A[3], a)];
     }
     var b = param[1];
     return [0, 66, caml_call1(B[3], b)];
    }
    return [0, Intermediate, to_parts, finalize];
   }
   function V1$32(A, B){
    var
     _jE_ = B[1],
     _jF_ = _jE_[1],
     _jG_ = A[1],
     _jH_ = _jG_[1],
     Plain =
       V1$31
        ([0,
          [0,
           [0,
            _jH_[1],
            _jH_[2],
            _jH_[3],
            _jH_[4],
            _jH_[5],
            _jH_[6],
            _jH_[7],
            _jH_[8]],
           _jG_[2],
           _jG_[3]],
          A[2],
          A[3]],
         [0,
          [0,
           [0,
            _jF_[1],
            _jF_[2],
            _jF_[3],
            _jF_[4],
            _jF_[5],
            _jF_[6],
            _jF_[7],
            _jF_[8]],
           _jE_[2],
           _jE_[3]],
          B[2],
          B[3]]);
    function t_of_sexp(sexp_365){
     a:
     {
      if(0 === sexp_365[0]){
       var _jK_ = sexp_365[1];
       b:
       if(caml_string_notequal(_jK_, cst_A_part$7)){
        c:
        if(caml_string_notequal(_jK_, cst_A_start$3)){
         d:
         if(caml_string_notequal(_jK_, cst_B_part$7)){
          if(caml_string_notequal(_jK_, cst_B_start$3)){
           if(! caml_string_notequal(_jK_, cst_a_part)) break b;
           if(! caml_string_notequal(_jK_, cst_a_start)) break c;
           if(! caml_string_notequal(_jK_, cst_b_part)) break d;
           if(caml_string_notequal(_jK_, cst_b_start)) break a;
          }
          return 1;
         }
         return caml_call2
                 (Sexplib0_Sexp_conv_error[9], error_source_363, sexp_365);
        }
        return 0;
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[9], error_source_363, sexp_365);
      }
      var _jL_ = sexp_365[1];
      if(! _jL_)
       return caml_call2
               (Sexplib0_Sexp_conv_error[11], error_source_363, sexp_365);
      var _jM_ = _jL_[1];
      if(0 !== _jM_[0])
       return caml_call2
               (Sexplib0_Sexp_conv_error[10], error_source_363, sexp_365);
      var tag_366 = _jM_[1];
      b:
      if(caml_string_notequal(tag_366, cst_A_part$7)){
       c:
       if(caml_string_notequal(tag_366, cst_A_start$3)){
        d:
        if(caml_string_notequal(tag_366, cst_B_part$7)){
         if(caml_string_notequal(tag_366, cst_B_start$3)){
          if(! caml_string_notequal(tag_366, cst_a_part)) break b;
          if(! caml_string_notequal(tag_366, cst_a_start)) break c;
          if(! caml_string_notequal(tag_366, cst_b_part)) break d;
          if(caml_string_notequal(tag_366, cst_b_start)) break a;
         }
         return caml_call2
                 (Sexplib0_Sexp_conv_error[7], error_source_363, sexp_365);
        }
        var sexp_args_372 = _jL_[2];
        if(sexp_args_372 && ! sexp_args_372[2]){
         var
          arg0_373 = sexp_args_372[1],
          res0_374 = caml_call1(B[1][1][9], arg0_373);
         return [1, res0_374];
        }
        return caml_call3
                (Sexplib0_Sexp_conv_error[8],
                 error_source_363,
                 tag_366,
                 sexp_365);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[7], error_source_363, sexp_365);
      }
      var sexp_args_367 = _jL_[2];
      if(sexp_args_367 && ! sexp_args_367[2]){
       var
        arg0_368 = sexp_args_367[1],
        res0_369 = caml_call1(A[1][1][9], arg0_368);
       return [0, res0_369];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[8],
               error_source_363,
               tag_366,
               sexp_365);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[12], error_source_363, sexp_365);
    }
    function sexp_of_t(param){
     if(typeof param === "number") return 0 === param ? _ao_ : _ap_;
     if(0 === param[0]){
      var arg0_375 = param[1], res0_376 = caml_call1(A[1][1][10], arg0_375);
      return [1, [0, _aq_, [0, res0_376, 0]]];
     }
     var arg0_377 = param[1], res0_378 = caml_call1(B[1][1][10], arg0_377);
     return [1, [0, _ar_, [0, res0_378, 0]]];
    }
    var
     _jI_ = Plain[1],
     _jJ_ = _jI_[1],
     include =
       V1
        ([0,
          [0,
           [0,
            _jJ_[2],
            _jJ_[3],
            _jJ_[6],
            _jJ_[5],
            _jJ_[1],
            _jJ_[4],
            _jJ_[7],
            _jJ_[8]],
           _jI_[2],
           _jI_[3]],
          Plain[2],
          Plain[3]],
         [0, t_of_sexp, sexp_of_t]),
     Intermediate = include[1],
     to_parts = include[2],
     finalize = include[3];
    return [0, , Intermediate, to_parts, finalize];
   }
   function V1$33(A, B, C){
    var
     _jo_ =
       caml_call1
        (Bin_prot_Shape[5],
         [0,
          _au_,
          [0,
           [0, cst_A_part$1, [0, A[1][1][5], 0]],
           [0,
            _at_,
            [0,
             [0, cst_B_part$1, [0, B[1][1][5], 0]],
             [0, _as_, [0, [0, cst_C_part, [0, C[1][1][5], 0]], 0]]]]]]),
     _jp_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$21), 0, _jo_], 0],
     _jq_ = caml_call1(Bin_shape[4][1], cst_src_main_ml_1539_10),
     group = caml_call2(Bin_prot_Shape[2], _jq_, _jp_),
     _jr_ = caml_call1(Bin_shape[2][1], cst_t$22),
     bin_shape_t = caml_call1(caml_call2(Bin_prot_Shape[10], group, _jr_), 0);
    function bin_size_t(param){
     if(typeof param === "number") return 1;
     switch(param[0]){
       case 0:
        var v1 = param[1], _jB_ = caml_call1(A[1][1][1], v1);
        return caml_call2(Bin_prot_Common[23], 1, _jB_);
       case 1:
        var v1$0 = param[1], _jC_ = caml_call1(B[1][1][1], v1$0);
        return caml_call2(Bin_prot_Common[23], 1, _jC_);
       default:
        var v1$1 = param[1], _jD_ = caml_call1(C[1][1][1], v1$1);
        return caml_call2(Bin_prot_Common[23], 1, _jD_);
     }
    }
    function bin_write_t(buf, pos, param){
     if(typeof param === "number")
      switch(param){
        case 0:
         return caml_call3(Bin_prot_Write[30], buf, pos, 0);
        case 1:
         return caml_call3(Bin_prot_Write[30], buf, pos, 2);
        default: return caml_call3(Bin_prot_Write[30], buf, pos, 4);
      }
     switch(param[0]){
       case 0:
        var
         v1 = param[1],
         pos$0 = caml_call3(Bin_prot_Write[30], buf, pos, 1);
        return caml_call3(A[1][1][2], buf, pos$0, v1);
       case 1:
        var
         v1$0 = param[1],
         pos$1 = caml_call3(Bin_prot_Write[30], buf, pos, 3);
        return caml_call3(B[1][1][2], buf, pos$1, v1$0);
       default:
        var
         v1$1 = param[1],
         pos$2 = caml_call3(Bin_prot_Write[30], buf, pos, 5);
        return caml_call3(C[1][1][2], buf, pos$2, v1$1);
     }
    }
    var bin_writer_t = [0, bin_size_t, bin_write_t];
    function bin_read_t(buf, pos_ref, vint){
     return caml_call2
             (Bin_prot_Common[19],
              cst_src_main_ml_Stable_Of_vari$0,
              pos_ref[1]);
    }
    function bin_read_t$0(buf, pos_ref){
     var match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
     if(5 < match >>> 0)
      return caml_call2(Bin_prot_Common[18], _av_, pos_ref[1]);
     switch(match){
       case 0:
        return 0;
       case 1:
        var arg_1 = caml_call2(A[1][1][3], buf, pos_ref); return [0, arg_1];
       case 2:
        return 1;
       case 3:
        var arg_1$0 = caml_call2(B[1][1][3], buf, pos_ref);
        return [1, arg_1$0];
       case 4:
        return 2;
       default:
        var arg_1$1 = caml_call2(C[1][1][3], buf, pos_ref);
        return [2, arg_1$1];
     }
    }
    var
     bin_reader_t = [0, bin_read_t$0, bin_read_t],
     bin_t = [0, bin_shape_t, bin_writer_t, bin_reader_t],
     a_start = 0;
    function a_part(v0){return [0, v0];}
    var b_start = 1;
    function b_part(v0){return [1, v0];}
    var c_start = 2;
    function c_part(v0){return [2, v0];}
    function is_a_start(param){
     if(typeof param === "number" && ! param) return;
     return;
    }
    function is_a_part(param){
     if(typeof param !== "number" && 0 === param[0]) return;
     return;
    }
    function is_b_start(param){
     if(typeof param === "number" && 1 === param) return;
     return;
    }
    function is_b_part(param){
     if(typeof param !== "number" && 1 === param[0]) return;
     return;
    }
    function is_c_start(param){
     if(typeof param === "number" && 2 <= param) return;
     return;
    }
    function is_c_part(param){
     if(typeof param !== "number" && 2 === param[0]) return;
     return;
    }
    function a_start_val(param){
     if(typeof param === "number" && ! param) return;
     return;
    }
    function a_part_val(param){
     if(typeof param !== "number" && 0 === param[0]) return;
     return;
    }
    function b_start_val(param){
     if(typeof param === "number" && 1 === param) return;
     return;
    }
    function b_part_val(param){
     if(typeof param !== "number" && 1 === param[0]) return;
     return;
    }
    function c_start_val(param){
     if(typeof param === "number" && 2 <= param) return;
     return;
    }
    function c_part_val(param){
     if(typeof param !== "number" && 2 === param[0]) return;
     return;
    }
    var
     a_start$0 = [0, cst_A_start$0, 0, a_start],
     a_part$0 = [0, cst_A_part$2, 1, a_part],
     b_start$0 = [0, cst_B_start$0, 2, b_start],
     b_part$0 = [0, cst_B_part$2, 3, b_part],
     c_start$0 = [0, cst_C_start, 4, c_start],
     c_part$0 = [0, cst_C_part$0, 5, c_part];
    function fold
    (init,
     a_start_fun,
     a_part_fun,
     b_start_fun,
     b_part_fun,
     c_start_fun,
     c_part_fun){
     return caml_call2
             (c_part_fun,
              caml_call2
               (c_start_fun,
                caml_call2
                 (b_part_fun,
                  caml_call2
                   (b_start_fun,
                    caml_call2
                     (a_part_fun,
                      caml_call2(a_start_fun, init, a_start$0),
                      a_part$0),
                    b_start$0),
                  b_part$0),
                c_start$0),
              c_part$0);
    }
    function iter
    (a_start_fun,
     a_part_fun,
     b_start_fun,
     b_part_fun,
     c_start_fun,
     c_part_fun){
     caml_call1(a_start_fun, a_start$0);
     caml_call1(a_part_fun, a_part$0);
     caml_call1(b_start_fun, b_start$0);
     caml_call1(b_part_fun, b_part$0);
     caml_call1(c_start_fun, c_start$0);
     return caml_call1(c_part_fun, c_part$0);
    }
    function map
    (t,
     a_start_fun,
     a_part_fun,
     b_start_fun,
     b_part_fun,
     c_start_fun,
     c_part_fun){
     if(typeof t === "number")
      switch(t){
        case 0:
         return caml_call1(a_start_fun, a_start$0);
        case 1:
         return caml_call1(b_start_fun, b_start$0);
        default: return caml_call1(c_start_fun, c_start$0);
      }
     switch(t[0]){
       case 0:
        var v0 = t[1]; return caml_call2(a_part_fun, a_part$0, v0);
       case 1:
        var v0$0 = t[1]; return caml_call2(b_part_fun, b_part$0, v0$0);
       default:
        var v0$1 = t[1]; return caml_call2(c_part_fun, c_part$0, v0$1);
     }
    }
    function make_matcher
    (a_start_fun,
     a_part_fun,
     b_start_fun,
     b_part_fun,
     c_start_fun,
     c_part_fun,
     compile_acc){
     var
      compile_acc$0 = caml_call2(a_start_fun, a_start$0, compile_acc)[2],
      compile_acc$1 = caml_call2(a_part_fun, a_part$0, compile_acc$0)[2],
      compile_acc$2 = caml_call2(b_start_fun, b_start$0, compile_acc$1)[2],
      compile_acc$3 = caml_call2(b_part_fun, b_part$0, compile_acc$2)[2],
      compile_acc$4 = caml_call2(c_start_fun, c_start$0, compile_acc$3)[2];
     caml_call2(c_part_fun, c_part$0, compile_acc$4);
     return;
    }
    function to_rank(param){
     if(typeof param === "number")
      switch(param){case 0: return;case 1: return;default: return;}
     switch(param[0]){case 0: return;case 1: return;default: return;
     }
    }
    function to_name(param){
     if(typeof param === "number")
      switch(param){case 0: return;case 1: return;default: return;}
     switch(param[0]){case 0: return;case 1: return;default: return;
     }
    }
    var
     Variants =
       [0,
        a_start$0,
        a_part$0,
        b_start$0,
        b_part$0,
        c_start$0,
        c_part$0,
        fold,
        iter,
        map,
        make_matcher,
        to_rank,
        to_name,
        descriptions$1],
     Part =
       [0,
        bin_shape_t,
        bin_size_t,
        bin_write_t,
        bin_writer_t,
        bin_read_t,
        bin_read_t$0,
        bin_reader_t,
        bin_t,
        a_start,
        a_part,
        b_start,
        b_part,
        c_start,
        c_part,
        is_a_start,
        is_a_part,
        is_b_start,
        is_b_part,
        is_c_start,
        is_c_part,
        a_start_val,
        a_part_val,
        b_start_val,
        b_part_val,
        c_start_val,
        c_part_val,
        Variants];
    function create(param){return 0;}
    function apply_part(t, part){
     if(typeof t === "number"){
      if(typeof part === "number")
       switch(part){
         case 0:
          return [0, caml_call1(A[1][2], 0)];
         case 1:
          return [1, caml_call1(B[1][2], 0)];
         default: return [2, caml_call1(C[1][2], 0)];
       }
     }
     else
      switch(t[0]){
        case 0:
         if(typeof part !== "number" && 0 === part[0]){
          var x = part[1], a = t[1];
          return [0, caml_call2(A[1][3], a, x)];
         }
         break;
        case 1:
         if(typeof part !== "number" && 1 === part[0]){
          var x$0 = part[1], b = t[1];
          return [1, caml_call2(B[1][3], b, x$0)];
         }
         break;
        default:
         if(typeof part !== "number" && 2 === part[0]){
          var x$1 = part[1], c = t[1];
          return [2, caml_call2(C[1][3], c, x$1)];
         }
      }
     throw caml_maybe_attach_backtrace([0, Assert_failure, _aw_], 1);
    }
    var Intermediate = [0, Part, create, apply_part];
    function to_parts(param){
     switch(param[1] - 65 | 0){
       case 0:
        var
         a = param[2],
         _js_ = Intermediate[1][10],
         _jt_ = caml_call1(A[2], a),
         _ju_ = caml_call2(Streamable_Import[4][44], _jt_, _js_);
        return caml_call2(Streamable_Import[4][120], Intermediate[1][9], _ju_);
       case 1:
        var
         b = param[2],
         _jv_ = Intermediate[1][12],
         _jw_ = caml_call1(B[2], b),
         _jx_ = caml_call2(Streamable_Import[4][44], _jw_, _jv_);
        return caml_call2
                (Streamable_Import[4][120], Intermediate[1][11], _jx_);
       default:
        var
         c = param[2],
         _jy_ = Intermediate[1][14],
         _jz_ = caml_call1(C[2], c),
         _jA_ = caml_call2(Streamable_Import[4][44], _jz_, _jy_);
        return caml_call2
                (Streamable_Import[4][120], Intermediate[1][13], _jA_);
     }
    }
    function finalize(param){
     if(typeof param === "number")
      throw caml_maybe_attach_backtrace([0, Assert_failure, _ax_], 1);
     switch(param[0]){
       case 0:
        var a = param[1]; return [0, 65, caml_call1(A[3], a)];
       case 1:
        var b = param[1]; return [0, 66, caml_call1(B[3], b)];
       default: var c = param[1]; return [0, 67, caml_call1(C[3], c)];
     }
    }
    return [0, Intermediate, to_parts, finalize];
   }
   function V1$34(A, B, C){
    var
     _jb_ = C[1],
     _jc_ = _jb_[1],
     _jd_ = B[1],
     _je_ = _jd_[1],
     _jf_ = A[1],
     _jg_ = _jf_[1],
     Plain =
       V1$33
        ([0,
          [0,
           [0,
            _jg_[1],
            _jg_[2],
            _jg_[3],
            _jg_[4],
            _jg_[5],
            _jg_[6],
            _jg_[7],
            _jg_[8]],
           _jf_[2],
           _jf_[3]],
          A[2],
          A[3]],
         [0,
          [0,
           [0,
            _je_[1],
            _je_[2],
            _je_[3],
            _je_[4],
            _je_[5],
            _je_[6],
            _je_[7],
            _je_[8]],
           _jd_[2],
           _jd_[3]],
          B[2],
          B[3]],
         [0,
          [0,
           [0,
            _jc_[1],
            _jc_[2],
            _jc_[3],
            _jc_[4],
            _jc_[5],
            _jc_[6],
            _jc_[7],
            _jc_[8]],
           _jb_[2],
           _jb_[3]],
          C[2],
          C[3]]);
    function t_of_sexp(sexp_383){
     a:
     {
      if(0 === sexp_383[0]){
       var _jj_ = sexp_383[1], _jk_ = caml_string_compare(_jj_, cst_a_part);
       b:
       {
        c:
        {
         d:
         {
          e:
          {
           f:
           {
            if(0 <= _jk_){
             if(0 < _jk_){
              if(! caml_string_notequal(_jj_, cst_a_start)) break f;
              if(! caml_string_notequal(_jj_, cst_b_part)) break e;
              if(! caml_string_notequal(_jj_, cst_b_start)) break d;
              if(! caml_string_notequal(_jj_, cst_c_part)) break c;
              if(caml_string_notequal(_jj_, cst_c_start)) break a;
              break b;
             }
            }
            else if(caml_string_notequal(_jj_, cst_A_part$7)){
             if(! caml_string_notequal(_jj_, cst_A_start$3)) break f;
             if(! caml_string_notequal(_jj_, cst_B_part$7)) break e;
             if(! caml_string_notequal(_jj_, cst_B_start$3)) break d;
             if(! caml_string_notequal(_jj_, cst_C_part$5)) break c;
             if(caml_string_notequal(_jj_, cst_C_start$2)) break a;
             break b;
            }
            return caml_call2
                    (Sexplib0_Sexp_conv_error[9], error_source_381, sexp_383);
           }
           return 0;
          }
          return caml_call2
                  (Sexplib0_Sexp_conv_error[9], error_source_381, sexp_383);
         }
         return 1;
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[9], error_source_381, sexp_383);
       }
       return 2;
      }
      var _jl_ = sexp_383[1];
      if(! _jl_)
       return caml_call2
               (Sexplib0_Sexp_conv_error[11], error_source_381, sexp_383);
      var _jm_ = _jl_[1];
      if(0 !== _jm_[0])
       return caml_call2
               (Sexplib0_Sexp_conv_error[10], error_source_381, sexp_383);
      var tag_384 = _jm_[1], _jn_ = caml_string_compare(tag_384, cst_a_part);
      b:
      {
       c:
       {
        d:
        {
         e:
         {
          f:
          {
           if(0 <= _jn_){
            if(0 < _jn_){
             if(! caml_string_notequal(tag_384, cst_a_start)) break f;
             if(! caml_string_notequal(tag_384, cst_b_part)) break e;
             if(! caml_string_notequal(tag_384, cst_b_start)) break d;
             if(! caml_string_notequal(tag_384, cst_c_part)) break c;
             if(caml_string_notequal(tag_384, cst_c_start)) break a;
             break b;
            }
           }
           else if(caml_string_notequal(tag_384, cst_A_part$7)){
            if(! caml_string_notequal(tag_384, cst_A_start$3)) break f;
            if(! caml_string_notequal(tag_384, cst_B_part$7)) break e;
            if(! caml_string_notequal(tag_384, cst_B_start$3)) break d;
            if(! caml_string_notequal(tag_384, cst_C_part$5)) break c;
            if(caml_string_notequal(tag_384, cst_C_start$2)) break a;
            break b;
           }
           var sexp_args_385 = _jl_[2];
           if(sexp_args_385 && ! sexp_args_385[2]){
            var
             arg0_386 = sexp_args_385[1],
             res0_387 = caml_call1(A[1][1][9], arg0_386);
            return [0, res0_387];
           }
           return caml_call3
                   (Sexplib0_Sexp_conv_error[8],
                    error_source_381,
                    tag_384,
                    sexp_383);
          }
          return caml_call2
                  (Sexplib0_Sexp_conv_error[7], error_source_381, sexp_383);
         }
         var sexp_args_390 = _jl_[2];
         if(sexp_args_390 && ! sexp_args_390[2]){
          var
           arg0_391 = sexp_args_390[1],
           res0_392 = caml_call1(B[1][1][9], arg0_391);
          return [1, res0_392];
         }
         return caml_call3
                 (Sexplib0_Sexp_conv_error[8],
                  error_source_381,
                  tag_384,
                  sexp_383);
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[7], error_source_381, sexp_383);
       }
       var sexp_args_395 = _jl_[2];
       if(sexp_args_395 && ! sexp_args_395[2]){
        var
         arg0_396 = sexp_args_395[1],
         res0_397 = caml_call1(C[1][1][9], arg0_396);
        return [2, res0_397];
       }
       return caml_call3
               (Sexplib0_Sexp_conv_error[8],
                error_source_381,
                tag_384,
                sexp_383);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_381, sexp_383);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[12], error_source_381, sexp_383);
    }
    function sexp_of_t(param){
     if(typeof param === "number")
      switch(param){
        case 0:
         return _ay_;
        case 1:
         return _az_;
        default: return _aA_;
      }
     switch(param[0]){
       case 0:
        var arg0_398 = param[1], res0_399 = caml_call1(A[1][1][10], arg0_398);
        return [1, [0, _aB_, [0, res0_399, 0]]];
       case 1:
        var arg0_400 = param[1], res0_401 = caml_call1(B[1][1][10], arg0_400);
        return [1, [0, _aC_, [0, res0_401, 0]]];
       default:
        var arg0_402 = param[1], res0_403 = caml_call1(C[1][1][10], arg0_402);
        return [1, [0, _aD_, [0, res0_403, 0]]];
     }
    }
    var
     _jh_ = Plain[1],
     _ji_ = _jh_[1],
     include =
       V1
        ([0,
          [0,
           [0,
            _ji_[2],
            _ji_[3],
            _ji_[6],
            _ji_[5],
            _ji_[1],
            _ji_[4],
            _ji_[7],
            _ji_[8]],
           _jh_[2],
           _jh_[3]],
          Plain[2],
          Plain[3]],
         [0, t_of_sexp, sexp_of_t]),
     Intermediate = include[1],
     to_parts = include[2],
     finalize = include[3];
    return [0, , Intermediate, to_parts, finalize];
   }
   function V1$35(A, B, C, D){
    var
     _iT_ =
       caml_call1
        (Bin_prot_Shape[5],
         [0,
          _aH_,
          [0,
           [0, cst_A_part$3, [0, A[1][1][5], 0]],
           [0,
            _aG_,
            [0,
             [0, cst_B_part$3, [0, B[1][1][5], 0]],
             [0,
              _aF_,
              [0,
               [0, cst_C_part$1, [0, C[1][1][5], 0]],
               [0, _aE_, [0, [0, cst_D_part, [0, D[1][1][5], 0]], 0]]]]]]]]),
     _iU_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$23), 0, _iT_], 0],
     _iV_ = caml_call1(Bin_shape[4][1], cst_src_main_ml_1631_10),
     group = caml_call2(Bin_prot_Shape[2], _iV_, _iU_),
     _iW_ = caml_call1(Bin_shape[2][1], cst_t$24),
     bin_shape_t = caml_call1(caml_call2(Bin_prot_Shape[10], group, _iW_), 0);
    function bin_size_t(param){
     if(typeof param === "number") return 1;
     switch(param[0]){
       case 0:
        var v1 = param[1], _i9_ = caml_call1(A[1][1][1], v1);
        return caml_call2(Bin_prot_Common[23], 1, _i9_);
       case 1:
        var v1$0 = param[1], _i__ = caml_call1(B[1][1][1], v1$0);
        return caml_call2(Bin_prot_Common[23], 1, _i__);
       case 2:
        var v1$1 = param[1], _i$_ = caml_call1(C[1][1][1], v1$1);
        return caml_call2(Bin_prot_Common[23], 1, _i$_);
       default:
        var v1$2 = param[1], _ja_ = caml_call1(D[1][1][1], v1$2);
        return caml_call2(Bin_prot_Common[23], 1, _ja_);
     }
    }
    function bin_write_t(buf, pos, param){
     if(typeof param === "number")
      switch(param){
        case 0:
         return caml_call3(Bin_prot_Write[30], buf, pos, 0);
        case 1:
         return caml_call3(Bin_prot_Write[30], buf, pos, 2);
        case 2:
         return caml_call3(Bin_prot_Write[30], buf, pos, 4);
        default: return caml_call3(Bin_prot_Write[30], buf, pos, 6);
      }
     switch(param[0]){
       case 0:
        var
         v1 = param[1],
         pos$0 = caml_call3(Bin_prot_Write[30], buf, pos, 1);
        return caml_call3(A[1][1][2], buf, pos$0, v1);
       case 1:
        var
         v1$0 = param[1],
         pos$1 = caml_call3(Bin_prot_Write[30], buf, pos, 3);
        return caml_call3(B[1][1][2], buf, pos$1, v1$0);
       case 2:
        var
         v1$1 = param[1],
         pos$2 = caml_call3(Bin_prot_Write[30], buf, pos, 5);
        return caml_call3(C[1][1][2], buf, pos$2, v1$1);
       default:
        var
         v1$2 = param[1],
         pos$3 = caml_call3(Bin_prot_Write[30], buf, pos, 7);
        return caml_call3(D[1][1][2], buf, pos$3, v1$2);
     }
    }
    var bin_writer_t = [0, bin_size_t, bin_write_t];
    function bin_read_t(buf, pos_ref, vint){
     return caml_call2
             (Bin_prot_Common[19],
              cst_src_main_ml_Stable_Of_vari$1,
              pos_ref[1]);
    }
    function bin_read_t$0(buf, pos_ref){
     var match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
     if(7 < match >>> 0)
      return caml_call2(Bin_prot_Common[18], _aI_, pos_ref[1]);
     switch(match){
       case 0:
        return 0;
       case 1:
        var arg_1 = caml_call2(A[1][1][3], buf, pos_ref); return [0, arg_1];
       case 2:
        return 1;
       case 3:
        var arg_1$0 = caml_call2(B[1][1][3], buf, pos_ref);
        return [1, arg_1$0];
       case 4:
        return 2;
       case 5:
        var arg_1$1 = caml_call2(C[1][1][3], buf, pos_ref);
        return [2, arg_1$1];
       case 6:
        return 3;
       default:
        var arg_1$2 = caml_call2(D[1][1][3], buf, pos_ref);
        return [3, arg_1$2];
     }
    }
    var
     bin_reader_t = [0, bin_read_t$0, bin_read_t],
     bin_t = [0, bin_shape_t, bin_writer_t, bin_reader_t],
     a_start = 0;
    function a_part(v0){return [0, v0];}
    var b_start = 1;
    function b_part(v0){return [1, v0];}
    var c_start = 2;
    function c_part(v0){return [2, v0];}
    var d_start = 3;
    function d_part(v0){return [3, v0];}
    function is_a_start(param){
     if(typeof param === "number" && ! param) return;
     return;
    }
    function is_a_part(param){
     if(typeof param !== "number" && 0 === param[0]) return;
     return;
    }
    function is_b_start(param){
     if(typeof param === "number" && 1 === param) return;
     return;
    }
    function is_b_part(param){
     if(typeof param !== "number" && 1 === param[0]) return;
     return;
    }
    function is_c_start(param){
     if(typeof param === "number" && 2 === param) return;
     return;
    }
    function is_c_part(param){
     if(typeof param !== "number" && 2 === param[0]) return;
     return;
    }
    function is_d_start(param){
     if(typeof param === "number" && 3 <= param) return;
     return;
    }
    function is_d_part(param){
     if(typeof param !== "number" && 3 === param[0]) return;
     return;
    }
    function a_start_val(param){
     if(typeof param === "number" && ! param) return;
     return;
    }
    function a_part_val(param){
     if(typeof param !== "number" && 0 === param[0]) return;
     return;
    }
    function b_start_val(param){
     if(typeof param === "number" && 1 === param) return;
     return;
    }
    function b_part_val(param){
     if(typeof param !== "number" && 1 === param[0]) return;
     return;
    }
    function c_start_val(param){
     if(typeof param === "number" && 2 === param) return;
     return;
    }
    function c_part_val(param){
     if(typeof param !== "number" && 2 === param[0]) return;
     return;
    }
    function d_start_val(param){
     if(typeof param === "number" && 3 <= param) return;
     return;
    }
    function d_part_val(param){
     if(typeof param !== "number" && 3 === param[0]) return;
     return;
    }
    var
     a_start$0 = [0, cst_A_start$1, 0, a_start],
     a_part$0 = [0, cst_A_part$4, 1, a_part],
     b_start$0 = [0, cst_B_start$1, 2, b_start],
     b_part$0 = [0, cst_B_part$4, 3, b_part],
     c_start$0 = [0, cst_C_start$0, 4, c_start],
     c_part$0 = [0, cst_C_part$2, 5, c_part],
     d_start$0 = [0, cst_D_start, 6, d_start],
     d_part$0 = [0, cst_D_part$0, 7, d_part];
    function fold
    (init,
     a_start_fun,
     a_part_fun,
     b_start_fun,
     b_part_fun,
     c_start_fun,
     c_part_fun,
     d_start_fun,
     d_part_fun){
     return caml_call2
             (d_part_fun,
              caml_call2
               (d_start_fun,
                caml_call2
                 (c_part_fun,
                  caml_call2
                   (c_start_fun,
                    caml_call2
                     (b_part_fun,
                      caml_call2
                       (b_start_fun,
                        caml_call2
                         (a_part_fun,
                          caml_call2(a_start_fun, init, a_start$0),
                          a_part$0),
                        b_start$0),
                      b_part$0),
                    c_start$0),
                  c_part$0),
                d_start$0),
              d_part$0);
    }
    function iter
    (a_start_fun,
     a_part_fun,
     b_start_fun,
     b_part_fun,
     c_start_fun,
     c_part_fun,
     d_start_fun,
     d_part_fun){
     caml_call1(a_start_fun, a_start$0);
     caml_call1(a_part_fun, a_part$0);
     caml_call1(b_start_fun, b_start$0);
     caml_call1(b_part_fun, b_part$0);
     caml_call1(c_start_fun, c_start$0);
     caml_call1(c_part_fun, c_part$0);
     caml_call1(d_start_fun, d_start$0);
     return caml_call1(d_part_fun, d_part$0);
    }
    function map
    (t,
     a_start_fun,
     a_part_fun,
     b_start_fun,
     b_part_fun,
     c_start_fun,
     c_part_fun,
     d_start_fun,
     d_part_fun){
     if(typeof t === "number")
      switch(t){
        case 0:
         return caml_call1(a_start_fun, a_start$0);
        case 1:
         return caml_call1(b_start_fun, b_start$0);
        case 2:
         return caml_call1(c_start_fun, c_start$0);
        default: return caml_call1(d_start_fun, d_start$0);
      }
     switch(t[0]){
       case 0:
        var v0 = t[1]; return caml_call2(a_part_fun, a_part$0, v0);
       case 1:
        var v0$0 = t[1]; return caml_call2(b_part_fun, b_part$0, v0$0);
       case 2:
        var v0$1 = t[1]; return caml_call2(c_part_fun, c_part$0, v0$1);
       default:
        var v0$2 = t[1]; return caml_call2(d_part_fun, d_part$0, v0$2);
     }
    }
    function make_matcher
    (a_start_fun,
     a_part_fun,
     b_start_fun,
     b_part_fun,
     c_start_fun,
     c_part_fun,
     d_start_fun,
     d_part_fun,
     compile_acc){
     var
      compile_acc$0 = caml_call2(a_start_fun, a_start$0, compile_acc)[2],
      compile_acc$1 = caml_call2(a_part_fun, a_part$0, compile_acc$0)[2],
      compile_acc$2 = caml_call2(b_start_fun, b_start$0, compile_acc$1)[2],
      compile_acc$3 = caml_call2(b_part_fun, b_part$0, compile_acc$2)[2],
      compile_acc$4 = caml_call2(c_start_fun, c_start$0, compile_acc$3)[2],
      compile_acc$5 = caml_call2(c_part_fun, c_part$0, compile_acc$4)[2],
      compile_acc$6 = caml_call2(d_start_fun, d_start$0, compile_acc$5)[2];
     caml_call2(d_part_fun, d_part$0, compile_acc$6);
     return;
    }
    function to_rank(param){
     if(typeof param === "number")
      switch(param){
        case 0:
         return;
        case 1:
         return;
        case 2:
         return;
        default: return;
      }
     switch(param[0]){
       case 0:
        return;
       case 1:
        return;
       case 2:
        return;
       default: return;
     }
    }
    function to_name(param){
     if(typeof param === "number")
      switch(param){
        case 0:
         return;
        case 1:
         return;
        case 2:
         return;
        default: return;
      }
     switch(param[0]){
       case 0:
        return;
       case 1:
        return;
       case 2:
        return;
       default: return;
     }
    }
    var
     Variants =
       [0,
        a_start$0,
        a_part$0,
        b_start$0,
        b_part$0,
        c_start$0,
        c_part$0,
        d_start$0,
        d_part$0,
        fold,
        iter,
        map,
        make_matcher,
        to_rank,
        to_name,
        descriptions$2],
     Part =
       [0,
        bin_shape_t,
        bin_size_t,
        bin_write_t,
        bin_writer_t,
        bin_read_t,
        bin_read_t$0,
        bin_reader_t,
        bin_t,
        a_start,
        a_part,
        b_start,
        b_part,
        c_start,
        c_part,
        d_start,
        d_part,
        is_a_start,
        is_a_part,
        is_b_start,
        is_b_part,
        is_c_start,
        is_c_part,
        is_d_start,
        is_d_part,
        a_start_val,
        a_part_val,
        b_start_val,
        b_part_val,
        c_start_val,
        c_part_val,
        d_start_val,
        d_part_val,
        Variants];
    function create(param){return 0;}
    function apply_part(t, part){
     if(typeof t === "number"){
      if(typeof part === "number")
       switch(part){
         case 0:
          return [0, caml_call1(A[1][2], 0)];
         case 1:
          return [1, caml_call1(B[1][2], 0)];
         case 2:
          return [2, caml_call1(C[1][2], 0)];
         default: return [3, caml_call1(D[1][2], 0)];
       }
     }
     else
      switch(t[0]){
        case 0:
         if(typeof part !== "number" && 0 === part[0]){
          var x = part[1], a = t[1];
          return [0, caml_call2(A[1][3], a, x)];
         }
         break;
        case 1:
         if(typeof part !== "number" && 1 === part[0]){
          var x$0 = part[1], b = t[1];
          return [1, caml_call2(B[1][3], b, x$0)];
         }
         break;
        case 2:
         if(typeof part !== "number" && 2 === part[0]){
          var x$1 = part[1], c = t[1];
          return [2, caml_call2(C[1][3], c, x$1)];
         }
         break;
        default:
         if(typeof part !== "number" && 3 === part[0]){
          var x$2 = part[1], d = t[1];
          return [3, caml_call2(D[1][3], d, x$2)];
         }
      }
     throw caml_maybe_attach_backtrace([0, Assert_failure, _aJ_], 1);
    }
    var Intermediate = [0, Part, create, apply_part];
    function to_parts(param){
     switch(param[1] - 65 | 0){
       case 0:
        var
         a = param[2],
         _iX_ = Intermediate[1][10],
         _iY_ = caml_call1(A[2], a),
         _iZ_ = caml_call2(Streamable_Import[4][44], _iY_, _iX_);
        return caml_call2(Streamable_Import[4][120], Intermediate[1][9], _iZ_);
       case 1:
        var
         b = param[2],
         _i0_ = Intermediate[1][12],
         _i1_ = caml_call1(B[2], b),
         _i2_ = caml_call2(Streamable_Import[4][44], _i1_, _i0_);
        return caml_call2
                (Streamable_Import[4][120], Intermediate[1][11], _i2_);
       case 2:
        var
         c = param[2],
         _i3_ = Intermediate[1][14],
         _i4_ = caml_call1(C[2], c),
         _i5_ = caml_call2(Streamable_Import[4][44], _i4_, _i3_);
        return caml_call2
                (Streamable_Import[4][120], Intermediate[1][13], _i5_);
       default:
        var
         d = param[2],
         _i6_ = Intermediate[1][16],
         _i7_ = caml_call1(D[2], d),
         _i8_ = caml_call2(Streamable_Import[4][44], _i7_, _i6_);
        return caml_call2
                (Streamable_Import[4][120], Intermediate[1][15], _i8_);
     }
    }
    function finalize(param){
     if(typeof param === "number")
      throw caml_maybe_attach_backtrace([0, Assert_failure, _aK_], 1);
     switch(param[0]){
       case 0:
        var a = param[1]; return [0, 65, caml_call1(A[3], a)];
       case 1:
        var b = param[1]; return [0, 66, caml_call1(B[3], b)];
       case 2:
        var c = param[1]; return [0, 67, caml_call1(C[3], c)];
       default: var d = param[1]; return [0, 68, caml_call1(D[3], d)];
     }
    }
    return [0, Intermediate, to_parts, finalize];
   }
   function V1$36(A, B, C, D){
    var
     _iE_ = D[1],
     _iF_ = _iE_[1],
     _iG_ = C[1],
     _iH_ = _iG_[1],
     _iI_ = B[1],
     _iJ_ = _iI_[1],
     _iK_ = A[1],
     _iL_ = _iK_[1],
     Plain =
       V1$35
        ([0,
          [0,
           [0,
            _iL_[1],
            _iL_[2],
            _iL_[3],
            _iL_[4],
            _iL_[5],
            _iL_[6],
            _iL_[7],
            _iL_[8]],
           _iK_[2],
           _iK_[3]],
          A[2],
          A[3]],
         [0,
          [0,
           [0,
            _iJ_[1],
            _iJ_[2],
            _iJ_[3],
            _iJ_[4],
            _iJ_[5],
            _iJ_[6],
            _iJ_[7],
            _iJ_[8]],
           _iI_[2],
           _iI_[3]],
          B[2],
          B[3]],
         [0,
          [0,
           [0,
            _iH_[1],
            _iH_[2],
            _iH_[3],
            _iH_[4],
            _iH_[5],
            _iH_[6],
            _iH_[7],
            _iH_[8]],
           _iG_[2],
           _iG_[3]],
          C[2],
          C[3]],
         [0,
          [0,
           [0,
            _iF_[1],
            _iF_[2],
            _iF_[3],
            _iF_[4],
            _iF_[5],
            _iF_[6],
            _iF_[7],
            _iF_[8]],
           _iE_[2],
           _iE_[3]],
          D[2],
          D[3]]);
    function t_of_sexp(sexp_408){
     a:
     {
      if(0 === sexp_408[0]){
       var _iO_ = sexp_408[1], _iP_ = caml_string_compare(_iO_, cst_a_part);
       b:
       {
        c:
        {
         d:
         {
          e:
          {
           f:
           {
            g:
            {
             h:
             {
              if(0 <= _iP_){
               if(0 < _iP_){
                if(! caml_string_notequal(_iO_, cst_a_start)) break h;
                if(! caml_string_notequal(_iO_, cst_b_part)) break g;
                if(! caml_string_notequal(_iO_, cst_b_start)) break f;
                if(! caml_string_notequal(_iO_, cst_c_part)) break e;
                if(! caml_string_notequal(_iO_, cst_c_start)) break d;
                if(! caml_string_notequal(_iO_, cst_d_part)) break c;
                if(caml_string_notequal(_iO_, cst_d_start)) break a;
                break b;
               }
              }
              else if(caml_string_notequal(_iO_, cst_A_part$7)){
               if(! caml_string_notequal(_iO_, cst_A_start$3)) break h;
               if(! caml_string_notequal(_iO_, cst_B_part$7)) break g;
               if(! caml_string_notequal(_iO_, cst_B_start$3)) break f;
               if(! caml_string_notequal(_iO_, cst_C_part$5)) break e;
               if(! caml_string_notequal(_iO_, cst_C_start$2)) break d;
               if(! caml_string_notequal(_iO_, cst_D_part$3)) break c;
               if(caml_string_notequal(_iO_, cst_D_start$1)) break a;
               break b;
              }
              return caml_call2
                      (Sexplib0_Sexp_conv_error[9], error_source_406, sexp_408);
             }
             return 0;
            }
            return caml_call2
                    (Sexplib0_Sexp_conv_error[9], error_source_406, sexp_408);
           }
           return 1;
          }
          return caml_call2
                  (Sexplib0_Sexp_conv_error[9], error_source_406, sexp_408);
         }
         return 2;
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[9], error_source_406, sexp_408);
       }
       return 3;
      }
      var _iQ_ = sexp_408[1];
      if(! _iQ_)
       return caml_call2
               (Sexplib0_Sexp_conv_error[11], error_source_406, sexp_408);
      var _iR_ = _iQ_[1];
      if(0 !== _iR_[0])
       return caml_call2
               (Sexplib0_Sexp_conv_error[10], error_source_406, sexp_408);
      var tag_409 = _iR_[1], _iS_ = caml_string_compare(tag_409, cst_a_part);
      b:
      {
       c:
       {
        d:
        {
         e:
         {
          f:
          {
           g:
           {
            h:
            {
             if(0 <= _iS_){
              if(0 < _iS_){
               if(! caml_string_notequal(tag_409, cst_a_start)) break h;
               if(! caml_string_notequal(tag_409, cst_b_part)) break g;
               if(! caml_string_notequal(tag_409, cst_b_start)) break f;
               if(! caml_string_notequal(tag_409, cst_c_part)) break e;
               if(! caml_string_notequal(tag_409, cst_c_start)) break d;
               if(! caml_string_notequal(tag_409, cst_d_part)) break c;
               if(caml_string_notequal(tag_409, cst_d_start)) break a;
               break b;
              }
             }
             else if(caml_string_notequal(tag_409, cst_A_part$7)){
              if(! caml_string_notequal(tag_409, cst_A_start$3)) break h;
              if(! caml_string_notequal(tag_409, cst_B_part$7)) break g;
              if(! caml_string_notequal(tag_409, cst_B_start$3)) break f;
              if(! caml_string_notequal(tag_409, cst_C_part$5)) break e;
              if(! caml_string_notequal(tag_409, cst_C_start$2)) break d;
              if(! caml_string_notequal(tag_409, cst_D_part$3)) break c;
              if(caml_string_notequal(tag_409, cst_D_start$1)) break a;
              break b;
             }
             var sexp_args_410 = _iQ_[2];
             if(sexp_args_410 && ! sexp_args_410[2]){
              var
               arg0_411 = sexp_args_410[1],
               res0_412 = caml_call1(A[1][1][9], arg0_411);
              return [0, res0_412];
             }
             return caml_call3
                     (Sexplib0_Sexp_conv_error[8],
                      error_source_406,
                      tag_409,
                      sexp_408);
            }
            return caml_call2
                    (Sexplib0_Sexp_conv_error[7], error_source_406, sexp_408);
           }
           var sexp_args_415 = _iQ_[2];
           if(sexp_args_415 && ! sexp_args_415[2]){
            var
             arg0_416 = sexp_args_415[1],
             res0_417 = caml_call1(B[1][1][9], arg0_416);
            return [1, res0_417];
           }
           return caml_call3
                   (Sexplib0_Sexp_conv_error[8],
                    error_source_406,
                    tag_409,
                    sexp_408);
          }
          return caml_call2
                  (Sexplib0_Sexp_conv_error[7], error_source_406, sexp_408);
         }
         var sexp_args_420 = _iQ_[2];
         if(sexp_args_420 && ! sexp_args_420[2]){
          var
           arg0_421 = sexp_args_420[1],
           res0_422 = caml_call1(C[1][1][9], arg0_421);
          return [2, res0_422];
         }
         return caml_call3
                 (Sexplib0_Sexp_conv_error[8],
                  error_source_406,
                  tag_409,
                  sexp_408);
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[7], error_source_406, sexp_408);
       }
       var sexp_args_425 = _iQ_[2];
       if(sexp_args_425 && ! sexp_args_425[2]){
        var
         arg0_426 = sexp_args_425[1],
         res0_427 = caml_call1(D[1][1][9], arg0_426);
        return [3, res0_427];
       }
       return caml_call3
               (Sexplib0_Sexp_conv_error[8],
                error_source_406,
                tag_409,
                sexp_408);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_406, sexp_408);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[12], error_source_406, sexp_408);
    }
    function sexp_of_t(param){
     if(typeof param === "number")
      switch(param){
        case 0:
         return _aL_;
        case 1:
         return _aM_;
        case 2:
         return _aN_;
        default: return _aO_;
      }
     switch(param[0]){
       case 0:
        var arg0_428 = param[1], res0_429 = caml_call1(A[1][1][10], arg0_428);
        return [1, [0, _aP_, [0, res0_429, 0]]];
       case 1:
        var arg0_430 = param[1], res0_431 = caml_call1(B[1][1][10], arg0_430);
        return [1, [0, _aQ_, [0, res0_431, 0]]];
       case 2:
        var arg0_432 = param[1], res0_433 = caml_call1(C[1][1][10], arg0_432);
        return [1, [0, _aR_, [0, res0_433, 0]]];
       default:
        var arg0_434 = param[1], res0_435 = caml_call1(D[1][1][10], arg0_434);
        return [1, [0, _aS_, [0, res0_435, 0]]];
     }
    }
    var
     _iM_ = Plain[1],
     _iN_ = _iM_[1],
     include =
       V1
        ([0,
          [0,
           [0,
            _iN_[2],
            _iN_[3],
            _iN_[6],
            _iN_[5],
            _iN_[1],
            _iN_[4],
            _iN_[7],
            _iN_[8]],
           _iM_[2],
           _iM_[3]],
          Plain[2],
          Plain[3]],
         [0, t_of_sexp, sexp_of_t]),
     Intermediate = include[1],
     to_parts = include[2],
     finalize = include[3];
    return [0, , Intermediate, to_parts, finalize];
   }
   function V1$37(A, B, C, D, E){
    var
     _ig_ =
       caml_call1
        (Bin_prot_Shape[5],
         [0,
          _aX_,
          [0,
           [0, cst_A_part$5, [0, A[1][1][5], 0]],
           [0,
            _aW_,
            [0,
             [0, cst_B_part$5, [0, B[1][1][5], 0]],
             [0,
              _aV_,
              [0,
               [0, cst_C_part$3, [0, C[1][1][5], 0]],
               [0,
                _aU_,
                [0,
                 [0, cst_D_part$1, [0, D[1][1][5], 0]],
                 [0, _aT_, [0, [0, cst_E_part, [0, E[1][1][5], 0]], 0]]]]]]]]]]),
     _ih_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$25), 0, _ig_], 0],
     _ii_ = caml_call1(Bin_shape[4][1], cst_src_main_ml_1736_10),
     group = caml_call2(Bin_prot_Shape[2], _ii_, _ih_),
     _ij_ = caml_call1(Bin_shape[2][1], cst_t$26),
     bin_shape_t = caml_call1(caml_call2(Bin_prot_Shape[10], group, _ij_), 0);
    function bin_size_t(param){
     if(typeof param === "number") return 1;
     switch(param[0]){
       case 0:
        var v1 = param[1], _iz_ = caml_call1(A[1][1][1], v1);
        return caml_call2(Bin_prot_Common[23], 1, _iz_);
       case 1:
        var v1$0 = param[1], _iA_ = caml_call1(B[1][1][1], v1$0);
        return caml_call2(Bin_prot_Common[23], 1, _iA_);
       case 2:
        var v1$1 = param[1], _iB_ = caml_call1(C[1][1][1], v1$1);
        return caml_call2(Bin_prot_Common[23], 1, _iB_);
       case 3:
        var v1$2 = param[1], _iC_ = caml_call1(D[1][1][1], v1$2);
        return caml_call2(Bin_prot_Common[23], 1, _iC_);
       default:
        var v1$3 = param[1], _iD_ = caml_call1(E[1][1][1], v1$3);
        return caml_call2(Bin_prot_Common[23], 1, _iD_);
     }
    }
    function bin_write_t(buf, pos, param){
     if(typeof param === "number")
      switch(param){
        case 0:
         return caml_call3(Bin_prot_Write[30], buf, pos, 0);
        case 1:
         return caml_call3(Bin_prot_Write[30], buf, pos, 2);
        case 2:
         return caml_call3(Bin_prot_Write[30], buf, pos, 4);
        case 3:
         return caml_call3(Bin_prot_Write[30], buf, pos, 6);
        default: return caml_call3(Bin_prot_Write[30], buf, pos, 8);
      }
     switch(param[0]){
       case 0:
        var
         v1 = param[1],
         pos$0 = caml_call3(Bin_prot_Write[30], buf, pos, 1);
        return caml_call3(A[1][1][2], buf, pos$0, v1);
       case 1:
        var
         v1$0 = param[1],
         pos$1 = caml_call3(Bin_prot_Write[30], buf, pos, 3);
        return caml_call3(B[1][1][2], buf, pos$1, v1$0);
       case 2:
        var
         v1$1 = param[1],
         pos$2 = caml_call3(Bin_prot_Write[30], buf, pos, 5);
        return caml_call3(C[1][1][2], buf, pos$2, v1$1);
       case 3:
        var
         v1$2 = param[1],
         pos$3 = caml_call3(Bin_prot_Write[30], buf, pos, 7);
        return caml_call3(D[1][1][2], buf, pos$3, v1$2);
       default:
        var
         v1$3 = param[1],
         pos$4 = caml_call3(Bin_prot_Write[30], buf, pos, 9);
        return caml_call3(E[1][1][2], buf, pos$4, v1$3);
     }
    }
    var bin_writer_t = [0, bin_size_t, bin_write_t];
    function bin_read_t(buf, pos_ref, vint){
     return caml_call2
             (Bin_prot_Common[19],
              cst_src_main_ml_Stable_Of_vari$2,
              pos_ref[1]);
    }
    function bin_read_t$0(buf, pos_ref){
     var match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
     if(9 < match >>> 0)
      return caml_call2(Bin_prot_Common[18], _aY_, pos_ref[1]);
     switch(match){
       case 0:
        return 0;
       case 1:
        var arg_1 = caml_call2(A[1][1][3], buf, pos_ref); return [0, arg_1];
       case 2:
        return 1;
       case 3:
        var arg_1$0 = caml_call2(B[1][1][3], buf, pos_ref);
        return [1, arg_1$0];
       case 4:
        return 2;
       case 5:
        var arg_1$1 = caml_call2(C[1][1][3], buf, pos_ref);
        return [2, arg_1$1];
       case 6:
        return 3;
       case 7:
        var arg_1$2 = caml_call2(D[1][1][3], buf, pos_ref);
        return [3, arg_1$2];
       case 8:
        return 4;
       default:
        var arg_1$3 = caml_call2(E[1][1][3], buf, pos_ref);
        return [4, arg_1$3];
     }
    }
    var
     bin_reader_t = [0, bin_read_t$0, bin_read_t],
     bin_t = [0, bin_shape_t, bin_writer_t, bin_reader_t],
     a_start = 0;
    function a_part(v0){return [0, v0];}
    var b_start = 1;
    function b_part(v0){return [1, v0];}
    var c_start = 2;
    function c_part(v0){return [2, v0];}
    var d_start = 3;
    function d_part(v0){return [3, v0];}
    var e_start = 4;
    function e_part(v0){return [4, v0];}
    function is_a_start(param){
     if(typeof param === "number" && ! param) return;
     return;
    }
    function is_a_part(param){
     if(typeof param !== "number" && 0 === param[0]) return;
     return;
    }
    function is_b_start(param){
     if(typeof param === "number" && 1 === param) return;
     return;
    }
    function is_b_part(param){
     if(typeof param !== "number" && 1 === param[0]) return;
     return;
    }
    function is_c_start(param){
     if(typeof param === "number" && 2 === param) return;
     return;
    }
    function is_c_part(param){
     if(typeof param !== "number" && 2 === param[0]) return;
     return;
    }
    function is_d_start(param){
     if(typeof param === "number" && 3 === param) return;
     return;
    }
    function is_d_part(param){
     if(typeof param !== "number" && 3 === param[0]) return;
     return;
    }
    function is_e_start(param){
     if(typeof param === "number" && 4 <= param) return;
     return;
    }
    function is_e_part(param){
     if(typeof param !== "number" && 4 === param[0]) return;
     return;
    }
    function a_start_val(param){
     if(typeof param === "number" && ! param) return;
     return;
    }
    function a_part_val(param){
     if(typeof param !== "number" && 0 === param[0]) return;
     return;
    }
    function b_start_val(param){
     if(typeof param === "number" && 1 === param) return;
     return;
    }
    function b_part_val(param){
     if(typeof param !== "number" && 1 === param[0]) return;
     return;
    }
    function c_start_val(param){
     if(typeof param === "number" && 2 === param) return;
     return;
    }
    function c_part_val(param){
     if(typeof param !== "number" && 2 === param[0]) return;
     return;
    }
    function d_start_val(param){
     if(typeof param === "number" && 3 === param) return;
     return;
    }
    function d_part_val(param){
     if(typeof param !== "number" && 3 === param[0]) return;
     return;
    }
    function e_start_val(param){
     if(typeof param === "number" && 4 <= param) return;
     return;
    }
    function e_part_val(param){
     if(typeof param !== "number" && 4 === param[0]) return;
     return;
    }
    var
     a_start$0 = [0, cst_A_start$2, 0, a_start],
     a_part$0 = [0, cst_A_part$6, 1, a_part],
     b_start$0 = [0, cst_B_start$2, 2, b_start],
     b_part$0 = [0, cst_B_part$6, 3, b_part],
     c_start$0 = [0, cst_C_start$1, 4, c_start],
     c_part$0 = [0, cst_C_part$4, 5, c_part],
     d_start$0 = [0, cst_D_start$0, 6, d_start],
     d_part$0 = [0, cst_D_part$2, 7, d_part],
     e_start$0 = [0, cst_E_start, 8, e_start],
     e_part$0 = [0, cst_E_part$0, 9, e_part];
    function fold
    (init,
     a_start_fun,
     a_part_fun,
     b_start_fun,
     b_part_fun,
     c_start_fun,
     c_part_fun,
     d_start_fun,
     d_part_fun,
     e_start_fun,
     e_part_fun){
     return caml_call2
             (e_part_fun,
              caml_call2
               (e_start_fun,
                caml_call2
                 (d_part_fun,
                  caml_call2
                   (d_start_fun,
                    caml_call2
                     (c_part_fun,
                      caml_call2
                       (c_start_fun,
                        caml_call2
                         (b_part_fun,
                          caml_call2
                           (b_start_fun,
                            caml_call2
                             (a_part_fun,
                              caml_call2(a_start_fun, init, a_start$0),
                              a_part$0),
                            b_start$0),
                          b_part$0),
                        c_start$0),
                      c_part$0),
                    d_start$0),
                  d_part$0),
                e_start$0),
              e_part$0);
    }
    function iter
    (a_start_fun,
     a_part_fun,
     b_start_fun,
     b_part_fun,
     c_start_fun,
     c_part_fun,
     d_start_fun,
     d_part_fun,
     e_start_fun,
     e_part_fun){
     caml_call1(a_start_fun, a_start$0);
     caml_call1(a_part_fun, a_part$0);
     caml_call1(b_start_fun, b_start$0);
     caml_call1(b_part_fun, b_part$0);
     caml_call1(c_start_fun, c_start$0);
     caml_call1(c_part_fun, c_part$0);
     caml_call1(d_start_fun, d_start$0);
     caml_call1(d_part_fun, d_part$0);
     caml_call1(e_start_fun, e_start$0);
     return caml_call1(e_part_fun, e_part$0);
    }
    function map
    (t,
     a_start_fun,
     a_part_fun,
     b_start_fun,
     b_part_fun,
     c_start_fun,
     c_part_fun,
     d_start_fun,
     d_part_fun,
     e_start_fun,
     e_part_fun){
     if(typeof t === "number")
      switch(t){
        case 0:
         return caml_call1(a_start_fun, a_start$0);
        case 1:
         return caml_call1(b_start_fun, b_start$0);
        case 2:
         return caml_call1(c_start_fun, c_start$0);
        case 3:
         return caml_call1(d_start_fun, d_start$0);
        default: return caml_call1(e_start_fun, e_start$0);
      }
     switch(t[0]){
       case 0:
        var v0 = t[1]; return caml_call2(a_part_fun, a_part$0, v0);
       case 1:
        var v0$0 = t[1]; return caml_call2(b_part_fun, b_part$0, v0$0);
       case 2:
        var v0$1 = t[1]; return caml_call2(c_part_fun, c_part$0, v0$1);
       case 3:
        var v0$2 = t[1]; return caml_call2(d_part_fun, d_part$0, v0$2);
       default:
        var v0$3 = t[1]; return caml_call2(e_part_fun, e_part$0, v0$3);
     }
    }
    function make_matcher
    (a_start_fun,
     a_part_fun,
     b_start_fun,
     b_part_fun,
     c_start_fun,
     c_part_fun,
     d_start_fun,
     d_part_fun,
     e_start_fun,
     e_part_fun,
     compile_acc){
     var
      compile_acc$0 = caml_call2(a_start_fun, a_start$0, compile_acc)[2],
      compile_acc$1 = caml_call2(a_part_fun, a_part$0, compile_acc$0)[2],
      compile_acc$2 = caml_call2(b_start_fun, b_start$0, compile_acc$1)[2],
      compile_acc$3 = caml_call2(b_part_fun, b_part$0, compile_acc$2)[2],
      compile_acc$4 = caml_call2(c_start_fun, c_start$0, compile_acc$3)[2],
      compile_acc$5 = caml_call2(c_part_fun, c_part$0, compile_acc$4)[2],
      compile_acc$6 = caml_call2(d_start_fun, d_start$0, compile_acc$5)[2],
      compile_acc$7 = caml_call2(d_part_fun, d_part$0, compile_acc$6)[2],
      compile_acc$8 = caml_call2(e_start_fun, e_start$0, compile_acc$7)[2];
     caml_call2(e_part_fun, e_part$0, compile_acc$8);
     return;
    }
    function to_rank(param){
     if(typeof param === "number")
      switch(param){
        case 0:
         return;
        case 1:
         return;
        case 2:
         return;
        case 3:
         return;
        default: return;
      }
     switch(param[0]){
       case 0:
        return;
       case 1:
        return;
       case 2:
        return;
       case 3:
        return;
       default: return;
     }
    }
    function to_name(param){
     if(typeof param === "number")
      switch(param){
        case 0:
         return;
        case 1:
         return;
        case 2:
         return;
        case 3:
         return;
        default: return;
      }
     switch(param[0]){
       case 0:
        return;
       case 1:
        return;
       case 2:
        return;
       case 3:
        return;
       default: return;
     }
    }
    var
     Variants =
       [0,
        a_start$0,
        a_part$0,
        b_start$0,
        b_part$0,
        c_start$0,
        c_part$0,
        d_start$0,
        d_part$0,
        e_start$0,
        e_part$0,
        fold,
        iter,
        map,
        make_matcher,
        to_rank,
        to_name,
        descriptions$3],
     Part =
       [0,
        bin_shape_t,
        bin_size_t,
        bin_write_t,
        bin_writer_t,
        bin_read_t,
        bin_read_t$0,
        bin_reader_t,
        bin_t,
        a_start,
        a_part,
        b_start,
        b_part,
        c_start,
        c_part,
        d_start,
        d_part,
        e_start,
        e_part,
        is_a_start,
        is_a_part,
        is_b_start,
        is_b_part,
        is_c_start,
        is_c_part,
        is_d_start,
        is_d_part,
        is_e_start,
        is_e_part,
        a_start_val,
        a_part_val,
        b_start_val,
        b_part_val,
        c_start_val,
        c_part_val,
        d_start_val,
        d_part_val,
        e_start_val,
        e_part_val,
        Variants];
    function create(param){return 0;}
    function apply_part(t, part){
     if(typeof t === "number"){
      if(typeof part === "number")
       switch(part){
         case 0:
          return [0, caml_call1(A[1][2], 0)];
         case 1:
          return [1, caml_call1(B[1][2], 0)];
         case 2:
          return [2, caml_call1(C[1][2], 0)];
         case 3:
          return [3, caml_call1(D[1][2], 0)];
         default: return [4, caml_call1(E[1][2], 0)];
       }
     }
     else
      switch(t[0]){
        case 0:
         if(typeof part !== "number" && 0 === part[0]){
          var x = part[1], a = t[1];
          return [0, caml_call2(A[1][3], a, x)];
         }
         break;
        case 1:
         if(typeof part !== "number" && 1 === part[0]){
          var x$0 = part[1], b = t[1];
          return [1, caml_call2(B[1][3], b, x$0)];
         }
         break;
        case 2:
         if(typeof part !== "number" && 2 === part[0]){
          var x$1 = part[1], c = t[1];
          return [2, caml_call2(C[1][3], c, x$1)];
         }
         break;
        case 3:
         if(typeof part !== "number" && 3 === part[0]){
          var x$2 = part[1], d = t[1];
          return [3, caml_call2(D[1][3], d, x$2)];
         }
         break;
        default:
         if(typeof part !== "number" && 4 === part[0]){
          var x$3 = part[1], e = t[1];
          return [4, caml_call2(E[1][3], e, x$3)];
         }
      }
     throw caml_maybe_attach_backtrace([0, Assert_failure, _aZ_], 1);
    }
    var Intermediate = [0, Part, create, apply_part];
    function to_parts(param){
     switch(param[1] - 65 | 0){
       case 0:
        var
         a = param[2],
         _ik_ = Intermediate[1][10],
         _il_ = caml_call1(A[2], a),
         _im_ = caml_call2(Streamable_Import[4][44], _il_, _ik_);
        return caml_call2(Streamable_Import[4][120], Intermediate[1][9], _im_);
       case 1:
        var
         b = param[2],
         _in_ = Intermediate[1][12],
         _io_ = caml_call1(B[2], b),
         _ip_ = caml_call2(Streamable_Import[4][44], _io_, _in_);
        return caml_call2
                (Streamable_Import[4][120], Intermediate[1][11], _ip_);
       case 2:
        var
         c = param[2],
         _iq_ = Intermediate[1][14],
         _ir_ = caml_call1(C[2], c),
         _is_ = caml_call2(Streamable_Import[4][44], _ir_, _iq_);
        return caml_call2
                (Streamable_Import[4][120], Intermediate[1][13], _is_);
       case 3:
        var
         d = param[2],
         _it_ = Intermediate[1][16],
         _iu_ = caml_call1(D[2], d),
         _iv_ = caml_call2(Streamable_Import[4][44], _iu_, _it_);
        return caml_call2
                (Streamable_Import[4][120], Intermediate[1][15], _iv_);
       default:
        var
         e = param[2],
         _iw_ = Intermediate[1][18],
         _ix_ = caml_call1(E[2], e),
         _iy_ = caml_call2(Streamable_Import[4][44], _ix_, _iw_);
        return caml_call2
                (Streamable_Import[4][120], Intermediate[1][17], _iy_);
     }
    }
    function finalize(param){
     if(typeof param === "number")
      throw caml_maybe_attach_backtrace([0, Assert_failure, _a0_], 1);
     switch(param[0]){
       case 0:
        var a = param[1]; return [0, 65, caml_call1(A[3], a)];
       case 1:
        var b = param[1]; return [0, 66, caml_call1(B[3], b)];
       case 2:
        var c = param[1]; return [0, 67, caml_call1(C[3], c)];
       case 3:
        var d = param[1]; return [0, 68, caml_call1(D[3], d)];
       default: var e = param[1]; return [0, 69, caml_call1(E[3], e)];
     }
    }
    return [0, Intermediate, to_parts, finalize];
   }
   function V1$38(A, B, C, D, E){
    var
     _hZ_ = E[1],
     _h0_ = _hZ_[1],
     _h1_ = D[1],
     _h2_ = _h1_[1],
     _h3_ = C[1],
     _h4_ = _h3_[1],
     _h5_ = B[1],
     _h6_ = _h5_[1],
     _h7_ = A[1],
     _h8_ = _h7_[1],
     Plain =
       V1$37
        ([0,
          [0,
           [0,
            _h8_[1],
            _h8_[2],
            _h8_[3],
            _h8_[4],
            _h8_[5],
            _h8_[6],
            _h8_[7],
            _h8_[8]],
           _h7_[2],
           _h7_[3]],
          A[2],
          A[3]],
         [0,
          [0,
           [0,
            _h6_[1],
            _h6_[2],
            _h6_[3],
            _h6_[4],
            _h6_[5],
            _h6_[6],
            _h6_[7],
            _h6_[8]],
           _h5_[2],
           _h5_[3]],
          B[2],
          B[3]],
         [0,
          [0,
           [0,
            _h4_[1],
            _h4_[2],
            _h4_[3],
            _h4_[4],
            _h4_[5],
            _h4_[6],
            _h4_[7],
            _h4_[8]],
           _h3_[2],
           _h3_[3]],
          C[2],
          C[3]],
         [0,
          [0,
           [0,
            _h2_[1],
            _h2_[2],
            _h2_[3],
            _h2_[4],
            _h2_[5],
            _h2_[6],
            _h2_[7],
            _h2_[8]],
           _h1_[2],
           _h1_[3]],
          D[2],
          D[3]],
         [0,
          [0,
           [0,
            _h0_[1],
            _h0_[2],
            _h0_[3],
            _h0_[4],
            _h0_[5],
            _h0_[6],
            _h0_[7],
            _h0_[8]],
           _hZ_[2],
           _hZ_[3]],
          E[2],
          E[3]]);
    function t_of_sexp(sexp_440){
     a:
     {
      if(0 === sexp_440[0]){
       var _h$_ = sexp_440[1], _ia_ = caml_string_compare(_h$_, cst_a_part);
       b:
       {
        c:
        {
         d:
         {
          e:
          {
           f:
           {
            g:
            {
             h:
             {
              i:
              {
               j:
               {
                if(0 <= _ia_){
                 if(0 >= _ia_) break f;
                 if(! caml_string_notequal(_h$_, cst_a_start)) break e;
                 if(! caml_string_notequal(_h$_, cst_b_part)) break d;
                 if(! caml_string_notequal(_h$_, cst_b_start)) break c;
                 if(! caml_string_notequal(_h$_, cst_c_part)) break b;
                 if(caml_string_notequal(_h$_, cst_c_start)){
                  if(! caml_string_notequal(_h$_, cst_d_part)) break j;
                  if(! caml_string_notequal(_h$_, cst_d_start)) break i;
                  if(! caml_string_notequal(_h$_, cst_e_part)) break h;
                  if(caml_string_notequal(_h$_, cst_e_start)) break a;
                  break g;
                 }
                }
                else{
                 var _ib_ = caml_string_compare(_h$_, cst_C_start$2);
                 if(0 > _ib_){
                  if(! caml_string_notequal(_h$_, cst_A_part$7)) break f;
                  if(! caml_string_notequal(_h$_, cst_A_start$3)) break e;
                  if(! caml_string_notequal(_h$_, cst_B_part$7)) break d;
                  if(! caml_string_notequal(_h$_, cst_B_start$3)) break c;
                  if(caml_string_notequal(_h$_, cst_C_part$5)) break a;
                  break b;
                 }
                 if(0 < _ib_){
                  if(! caml_string_notequal(_h$_, cst_D_part$3)) break j;
                  if(! caml_string_notequal(_h$_, cst_D_start$1)) break i;
                  if(! caml_string_notequal(_h$_, cst_E_part$1)) break h;
                  if(caml_string_notequal(_h$_, cst_E_start$0)) break a;
                  break g;
                 }
                }
                return 2;
               }
               return caml_call2
                       (Sexplib0_Sexp_conv_error[9], error_source_438, sexp_440);
              }
              return 3;
             }
             return caml_call2
                     (Sexplib0_Sexp_conv_error[9], error_source_438, sexp_440);
            }
            return 4;
           }
           return caml_call2
                   (Sexplib0_Sexp_conv_error[9], error_source_438, sexp_440);
          }
          return 0;
         }
         return caml_call2
                 (Sexplib0_Sexp_conv_error[9], error_source_438, sexp_440);
        }
        return 1;
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[9], error_source_438, sexp_440);
      }
      var _ic_ = sexp_440[1];
      if(! _ic_)
       return caml_call2
               (Sexplib0_Sexp_conv_error[11], error_source_438, sexp_440);
      var _id_ = _ic_[1];
      if(0 !== _id_[0])
       return caml_call2
               (Sexplib0_Sexp_conv_error[10], error_source_438, sexp_440);
      var tag_441 = _id_[1], _ie_ = caml_string_compare(tag_441, cst_a_part);
      b:
      {
       c:
       {
        d:
        {
         e:
         {
          f:
          {
           g:
           {
            h:
            {
             i:
             {
              j:
              {
               if(0 <= _ie_){
                if(0 >= _ie_) break f;
                if(! caml_string_notequal(tag_441, cst_a_start)) break e;
                if(! caml_string_notequal(tag_441, cst_b_part)) break d;
                if(! caml_string_notequal(tag_441, cst_b_start)) break c;
                if(! caml_string_notequal(tag_441, cst_c_part)) break b;
                if(caml_string_notequal(tag_441, cst_c_start)){
                 if(! caml_string_notequal(tag_441, cst_d_part)) break j;
                 if(! caml_string_notequal(tag_441, cst_d_start)) break i;
                 if(! caml_string_notequal(tag_441, cst_e_part)) break h;
                 if(caml_string_notequal(tag_441, cst_e_start)) break a;
                 break g;
                }
               }
               else{
                var _if_ = caml_string_compare(tag_441, cst_C_start$2);
                if(0 > _if_){
                 if(! caml_string_notequal(tag_441, cst_A_part$7)) break f;
                 if(! caml_string_notequal(tag_441, cst_A_start$3)) break e;
                 if(! caml_string_notequal(tag_441, cst_B_part$7)) break d;
                 if(! caml_string_notequal(tag_441, cst_B_start$3)) break c;
                 if(caml_string_notequal(tag_441, cst_C_part$5)) break a;
                 break b;
                }
                if(0 < _if_){
                 if(! caml_string_notequal(tag_441, cst_D_part$3)) break j;
                 if(! caml_string_notequal(tag_441, cst_D_start$1)) break i;
                 if(! caml_string_notequal(tag_441, cst_E_part$1)) break h;
                 if(caml_string_notequal(tag_441, cst_E_start$0)) break a;
                 break g;
                }
               }
               return caml_call2
                       (Sexplib0_Sexp_conv_error[7], error_source_438, sexp_440);
              }
              var sexp_args_457 = _ic_[2];
              if(sexp_args_457 && ! sexp_args_457[2]){
               var
                arg0_458 = sexp_args_457[1],
                res0_459 = caml_call1(D[1][1][9], arg0_458);
               return [3, res0_459];
              }
              return caml_call3
                      (Sexplib0_Sexp_conv_error[8],
                       error_source_438,
                       tag_441,
                       sexp_440);
             }
             return caml_call2
                     (Sexplib0_Sexp_conv_error[7], error_source_438, sexp_440);
            }
            var sexp_args_462 = _ic_[2];
            if(sexp_args_462 && ! sexp_args_462[2]){
             var
              arg0_463 = sexp_args_462[1],
              res0_464 = caml_call1(E[1][1][9], arg0_463);
             return [4, res0_464];
            }
            return caml_call3
                    (Sexplib0_Sexp_conv_error[8],
                     error_source_438,
                     tag_441,
                     sexp_440);
           }
           return caml_call2
                   (Sexplib0_Sexp_conv_error[7], error_source_438, sexp_440);
          }
          var sexp_args_442 = _ic_[2];
          if(sexp_args_442 && ! sexp_args_442[2]){
           var
            arg0_443 = sexp_args_442[1],
            res0_444 = caml_call1(A[1][1][9], arg0_443);
           return [0, res0_444];
          }
          return caml_call3
                  (Sexplib0_Sexp_conv_error[8],
                   error_source_438,
                   tag_441,
                   sexp_440);
         }
         return caml_call2
                 (Sexplib0_Sexp_conv_error[7], error_source_438, sexp_440);
        }
        var sexp_args_447 = _ic_[2];
        if(sexp_args_447 && ! sexp_args_447[2]){
         var
          arg0_448 = sexp_args_447[1],
          res0_449 = caml_call1(B[1][1][9], arg0_448);
         return [1, res0_449];
        }
        return caml_call3
                (Sexplib0_Sexp_conv_error[8],
                 error_source_438,
                 tag_441,
                 sexp_440);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[7], error_source_438, sexp_440);
      }
      var sexp_args_452 = _ic_[2];
      if(sexp_args_452 && ! sexp_args_452[2]){
       var
        arg0_453 = sexp_args_452[1],
        res0_454 = caml_call1(C[1][1][9], arg0_453);
       return [2, res0_454];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[8],
               error_source_438,
               tag_441,
               sexp_440);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[12], error_source_438, sexp_440);
    }
    function sexp_of_t(param){
     if(typeof param === "number")
      switch(param){
        case 0:
         return _a1_;
        case 1:
         return _a2_;
        case 2:
         return _a3_;
        case 3:
         return _a4_;
        default: return _a5_;
      }
     switch(param[0]){
       case 0:
        var arg0_465 = param[1], res0_466 = caml_call1(A[1][1][10], arg0_465);
        return [1, [0, _a6_, [0, res0_466, 0]]];
       case 1:
        var arg0_467 = param[1], res0_468 = caml_call1(B[1][1][10], arg0_467);
        return [1, [0, _a7_, [0, res0_468, 0]]];
       case 2:
        var arg0_469 = param[1], res0_470 = caml_call1(C[1][1][10], arg0_469);
        return [1, [0, _a8_, [0, res0_470, 0]]];
       case 3:
        var arg0_471 = param[1], res0_472 = caml_call1(D[1][1][10], arg0_471);
        return [1, [0, _a9_, [0, res0_472, 0]]];
       default:
        var arg0_473 = param[1], res0_474 = caml_call1(E[1][1][10], arg0_473);
        return [1, [0, _a__, [0, res0_474, 0]]];
     }
    }
    var
     _h9_ = Plain[1],
     _h__ = _h9_[1],
     include =
       V1
        ([0,
          [0,
           [0,
            _h__[2],
            _h__[3],
            _h__[6],
            _h__[5],
            _h__[1],
            _h__[4],
            _h__[7],
            _h__[8]],
           _h9_[2],
           _h9_[3]],
          Plain[2],
          Plain[3]],
         [0, t_of_sexp, sexp_of_t]),
     Intermediate = include[1],
     to_parts = include[2],
     finalize = include[3];
    return [0, , Intermediate, to_parts, finalize];
   }
   function V1$39(T, X){
    var
     _hM_ =
       caml_call1
        (Bin_prot_Shape[5],
         [0,
          _a$_,
          [0,
           [0, cst_Elt_first_part, [0, X[1][1][5], 0]],
           [0, [0, cst_Elt_later_part, [0, X[1][1][5], 0]], 0]]]),
     _hN_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$27), 0, _hM_], 0],
     _hO_ = caml_call1(Bin_shape[4][1], cst_src_main_ml_1846_10),
     group = caml_call2(Bin_prot_Shape[2], _hO_, _hN_),
     _hP_ = caml_call1(Bin_shape[2][1], cst_t$28),
     bin_shape_t = caml_call1(caml_call2(Bin_prot_Shape[10], group, _hP_), 0);
    function bin_size_t(param){
     if(typeof param === "number") return 1;
     if(0 === param[0]){
      var v1 = param[1], _hX_ = caml_call1(X[1][1][1], v1);
      return caml_call2(Bin_prot_Common[23], 1, _hX_);
     }
     var v1$0 = param[1], _hY_ = caml_call1(X[1][1][1], v1$0);
     return caml_call2(Bin_prot_Common[23], 1, _hY_);
    }
    function bin_write_t(buf, pos, param){
     if(typeof param === "number")
      return caml_call3(Bin_prot_Write[30], buf, pos, 0);
     if(0 === param[0]){
      var v1 = param[1], pos$0 = caml_call3(Bin_prot_Write[30], buf, pos, 1);
      return caml_call3(X[1][1][2], buf, pos$0, v1);
     }
     var v1$0 = param[1], pos$1 = caml_call3(Bin_prot_Write[30], buf, pos, 2);
     return caml_call3(X[1][1][2], buf, pos$1, v1$0);
    }
    var bin_writer_t = [0, bin_size_t, bin_write_t];
    function bin_read_t(buf, pos_ref, vint){
     return caml_call2
             (Bin_prot_Common[19], cst_src_main_ml_Stable_Of_list, pos_ref[1]);
    }
    function bin_read_t$0(buf, pos_ref){
     var match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
     if(2 < match >>> 0)
      return caml_call2(Bin_prot_Common[18], _ba_, pos_ref[1]);
     switch(match){
       case 0:
        return 0;
       case 1:
        var arg_1 = caml_call2(X[1][1][3], buf, pos_ref); return [0, arg_1];
       default:
        var arg_1$0 = caml_call2(X[1][1][3], buf, pos_ref);
        return [1, arg_1$0];
     }
    }
    var
     bin_reader_t = [0, bin_read_t$0, bin_read_t],
     bin_t = [0, bin_shape_t, bin_writer_t, bin_reader_t],
     elt_no_parts = 0;
    function elt_first_part(v0){return [0, v0];}
    function elt_later_part(v0){return [1, v0];}
    function is_elt_no_parts(param){
     if(typeof param === "number") return;
     return;
    }
    function is_elt_first_part(param){
     if(typeof param !== "number" && 0 === param[0]) return;
     return;
    }
    function is_elt_later_part(param){
     if(typeof param !== "number" && 1 === param[0]) return;
     return;
    }
    function elt_no_parts_val(param){
     if(typeof param === "number") return;
     return;
    }
    function elt_first_part_val(param){
     if(typeof param !== "number" && 0 === param[0]) return;
     return;
    }
    function elt_later_part_val(param){
     if(typeof param !== "number" && 1 === param[0]) return;
     return;
    }
    var
     elt_no_parts$0 = [0, cst_Elt_no_parts, 0, elt_no_parts],
     elt_first_part$0 = [0, cst_Elt_first_part$0, 1, elt_first_part],
     elt_later_part$0 = [0, cst_Elt_later_part$0, 2, elt_later_part];
    function fold
    (init, elt_no_parts_fun, elt_first_part_fun, elt_later_part_fun){
     return caml_call2
             (elt_later_part_fun,
              caml_call2
               (elt_first_part_fun,
                caml_call2(elt_no_parts_fun, init, elt_no_parts$0),
                elt_first_part$0),
              elt_later_part$0);
    }
    function iter(elt_no_parts_fun, elt_first_part_fun, elt_later_part_fun){
     caml_call1(elt_no_parts_fun, elt_no_parts$0);
     caml_call1(elt_first_part_fun, elt_first_part$0);
     return caml_call1(elt_later_part_fun, elt_later_part$0);
    }
    function map(t, elt_no_parts_fun, elt_first_part_fun, elt_later_part_fun){
     if(typeof t === "number")
      return caml_call1(elt_no_parts_fun, elt_no_parts$0);
     if(0 === t[0]){
      var v0 = t[1];
      return caml_call2(elt_first_part_fun, elt_first_part$0, v0);
     }
     var v0$0 = t[1];
     return caml_call2(elt_later_part_fun, elt_later_part$0, v0$0);
    }
    function make_matcher
    (elt_no_parts_fun, elt_first_part_fun, elt_later_part_fun, compile_acc){
     var
      compile_acc$0 =
        caml_call2(elt_no_parts_fun, elt_no_parts$0, compile_acc)[2],
      compile_acc$1 =
        caml_call2(elt_first_part_fun, elt_first_part$0, compile_acc$0)[2];
     caml_call2(elt_later_part_fun, elt_later_part$0, compile_acc$1);
     return;
    }
    function to_rank(param){
     if(typeof param === "number") return;
     if(0 === param[0]) return;
     return;
    }
    function to_name(param){
     if(typeof param === "number") return;
     if(0 === param[0]) return;
     return;
    }
    var
     Variants =
       [0,
        elt_no_parts$0,
        elt_first_part$0,
        elt_later_part$0,
        fold,
        iter,
        map,
        make_matcher,
        to_rank,
        to_name,
        descriptions$4],
     Part =
       [0,
        bin_shape_t,
        bin_size_t,
        bin_write_t,
        bin_writer_t,
        bin_read_t,
        bin_read_t$0,
        bin_reader_t,
        bin_t,
        elt_no_parts,
        elt_first_part,
        elt_later_part,
        is_elt_no_parts,
        is_elt_first_part,
        is_elt_later_part,
        elt_no_parts_val,
        elt_first_part_val,
        elt_later_part_val,
        Variants];
    function create(param){return 0;}
    function force(param){
     if(! param) return 0;
     var match = param[1], x_int = match[2], xs = match[1];
     return [0, caml_call1(X[3], x_int), xs];
    }
    function elt_start(t){
     var _hW_ = caml_call1(X[1][2], 0);
     return [0, [0, force(t), _hW_]];
    }
    function elt_part(t, part){
     if(! t) throw caml_maybe_attach_backtrace([0, Assert_failure, _bb_], 1);
     var match = t[1], int$0 = match[2], xs = match[1];
     return [0, [0, xs, caml_call2(X[1][3], int$0, part)]];
    }
    function apply_part(t, p){
     if(typeof p === "number") return elt_start(t);
     if(0 === p[0]){var part = p[1]; return elt_part(elt_start(t), part);}
     var part$0 = p[1];
     return elt_part(t, part$0);
    }
    var
     Intermediate = [0, Part, create, force, elt_start, elt_part, apply_part];
    function finalize(t){
     var
      _hU_ = Intermediate[3].call(null, t),
      _hV_ = caml_call1(Core_List[59], _hU_);
     return caml_call1(T[2], _hV_);
    }
    function to_parts(xs){
     function _hQ_(x){
      var
       xparts = caml_call1(X[2], x),
       match = caml_call1(Streamable_Import[4][50], xparts);
      if(! match)
       return caml_call1(Streamable_Import[4][106], Intermediate[1][9]);
      var
       match$0 = match[1],
       tl = match$0[2],
       hd = match$0[1],
       _hS_ = caml_call2(Streamable_Import[4][44], tl, Intermediate[1][11]),
       _hT_ = Intermediate[1][10].call(null, hd);
      return caml_call2(Streamable_Import[4][120], _hT_, _hS_);
     }
     var _hR_ = caml_call1(T[1], xs);
     return caml_call2(Streamable_Import[4][73], _hR_, _hQ_);
    }
    return [0, Intermediate, finalize, to_parts];
   }
   function V1$40(T, X){
    var
     _hF_ = X[1],
     _hG_ = _hF_[1],
     Plain =
       V1$39
        (T,
         [0,
          [0,
           [0,
            _hG_[1],
            _hG_[2],
            _hG_[3],
            _hG_[4],
            _hG_[5],
            _hG_[6],
            _hG_[7],
            _hG_[8]],
           _hF_[2],
           _hF_[3]],
          X[2],
          X[3]]);
    function t_of_sexp(sexp_479){
     a:
     {
      if(0 === sexp_479[0]){
       var _hJ_ = sexp_479[1];
       b:
       if(caml_string_notequal(_hJ_, cst_Elt_first_part$1)){
        c:
        if(caml_string_notequal(_hJ_, cst_Elt_later_part$1)){
         if(caml_string_notequal(_hJ_, cst_Elt_no_parts$0)){
          if(! caml_string_notequal(_hJ_, cst_elt_first_part)) break b;
          if(! caml_string_notequal(_hJ_, cst_elt_later_part)) break c;
          if(caml_string_notequal(_hJ_, cst_elt_no_parts)) break a;
         }
         return 0;
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[9], error_source_477, sexp_479);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[9], error_source_477, sexp_479);
      }
      var _hK_ = sexp_479[1];
      if(! _hK_)
       return caml_call2
               (Sexplib0_Sexp_conv_error[11], error_source_477, sexp_479);
      var _hL_ = _hK_[1];
      if(0 !== _hL_[0])
       return caml_call2
               (Sexplib0_Sexp_conv_error[10], error_source_477, sexp_479);
      var tag_480 = _hL_[1];
      b:
      if(caml_string_notequal(tag_480, cst_Elt_first_part$1)){
       c:
       if(caml_string_notequal(tag_480, cst_Elt_later_part$1)){
        if(caml_string_notequal(tag_480, cst_Elt_no_parts$0)){
         if(! caml_string_notequal(tag_480, cst_elt_first_part)) break b;
         if(! caml_string_notequal(tag_480, cst_elt_later_part)) break c;
         if(caml_string_notequal(tag_480, cst_elt_no_parts)) break a;
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[7], error_source_477, sexp_479);
       }
       var sexp_args_486 = _hK_[2];
       if(sexp_args_486 && ! sexp_args_486[2]){
        var
         arg0_487 = sexp_args_486[1],
         res0_488 = caml_call1(X[1][1][9], arg0_487);
        return [1, res0_488];
       }
       return caml_call3
               (Sexplib0_Sexp_conv_error[8],
                error_source_477,
                tag_480,
                sexp_479);
      }
      var sexp_args_481 = _hK_[2];
      if(sexp_args_481 && ! sexp_args_481[2]){
       var
        arg0_482 = sexp_args_481[1],
        res0_483 = caml_call1(X[1][1][9], arg0_482);
       return [0, res0_483];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[8],
               error_source_477,
               tag_480,
               sexp_479);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[12], error_source_477, sexp_479);
    }
    function sexp_of_t(param){
     if(typeof param === "number") return _bc_;
     if(0 === param[0]){
      var arg0_489 = param[1], res0_490 = caml_call1(X[1][1][10], arg0_489);
      return [1, [0, _bd_, [0, res0_490, 0]]];
     }
     var arg0_491 = param[1], res0_492 = caml_call1(X[1][1][10], arg0_491);
     return [1, [0, _be_, [0, res0_492, 0]]];
    }
    var
     _hH_ = Plain[1],
     _hI_ = _hH_[1],
     include =
       V1
        ([0,
          [0,
           [0,
            _hI_[2],
            _hI_[3],
            _hI_[6],
            _hI_[5],
            _hI_[1],
            _hI_[4],
            _hI_[7],
            _hI_[8]],
           _hH_[2],
           _hH_[6]],
          Plain[3],
          Plain[2]],
         [0, t_of_sexp, sexp_of_t]),
     Intermediate = include[1],
     to_parts = include[2],
     finalize = include[3];
    return [0, , Intermediate, to_parts, finalize];
   }
   function V1$41(X){
    var
     _ht_ =
       caml_call1
        (Bin_prot_Shape[5],
         [0, _bf_, [0, [0, cst_Elt_part, [0, X[1][1][5], 0]], 0]]),
     _hu_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$29), 0, _ht_], 0],
     _hv_ = caml_call1(Bin_shape[4][1], cst_src_main_ml_1923_10),
     group = caml_call2(Bin_prot_Shape[2], _hv_, _hu_),
     _hw_ = caml_call1(Bin_shape[2][1], cst_t$30),
     bin_shape_t = caml_call1(caml_call2(Bin_prot_Shape[10], group, _hw_), 0);
    function bin_size_t(param){
     if(! param) return 1;
     var v1 = param[1], _hE_ = caml_call1(X[1][1][1], v1);
     return caml_call2(Bin_prot_Common[23], 1, _hE_);
    }
    function bin_write_t(buf, pos, param){
     if(! param) return caml_call3(Bin_prot_Write[30], buf, pos, 0);
     var v1 = param[1], pos$0 = caml_call3(Bin_prot_Write[30], buf, pos, 1);
     return caml_call3(X[1][1][2], buf, pos$0, v1);
    }
    var bin_writer_t = [0, bin_size_t, bin_write_t];
    function bin_read_t(buf, pos_ref, vint){
     return caml_call2
             (Bin_prot_Common[19],
              cst_src_main_ml_Stable_Of_list$0,
              pos_ref[1]);
    }
    function bin_read_t$0(buf, pos_ref){
     var match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
     if(0 === match) return 0;
     if(1 !== match) return caml_call2(Bin_prot_Common[18], _bg_, pos_ref[1]);
     var arg_1 = caml_call2(X[1][1][3], buf, pos_ref);
     return [0, arg_1];
    }
    var
     bin_reader_t = [0, bin_read_t$0, bin_read_t],
     bin_t = [0, bin_shape_t, bin_writer_t, bin_reader_t],
     elt_start = 0;
    function elt_part(v0){return [0, v0];}
    function is_elt_start(param){if(param) return; return;}
    function is_elt_part(param){if(param) return; return;}
    function elt_start_val(param){if(param) return; return;}
    function elt_part_val(param){if(param) return; return;}
    var
     elt_start$0 = [0, cst_Elt_start, 0, elt_start],
     elt_part$0 = [0, cst_Elt_part$0, 1, elt_part];
    function fold(init, elt_start_fun, elt_part_fun){
     return caml_call2
             (elt_part_fun,
              caml_call2(elt_start_fun, init, elt_start$0),
              elt_part$0);
    }
    function iter(elt_start_fun, elt_part_fun){
     caml_call1(elt_start_fun, elt_start$0);
     return caml_call1(elt_part_fun, elt_part$0);
    }
    function map(t, elt_start_fun, elt_part_fun){
     if(! t) return caml_call1(elt_start_fun, elt_start$0);
     var v0 = t[1];
     return caml_call2(elt_part_fun, elt_part$0, v0);
    }
    function make_matcher(elt_start_fun, elt_part_fun, compile_acc){
     var
      compile_acc$0 = caml_call2(elt_start_fun, elt_start$0, compile_acc)[2];
     caml_call2(elt_part_fun, elt_part$0, compile_acc$0);
     return;
    }
    function to_rank(param){if(param) return; return;}
    function to_name(param){if(param) return; return;}
    var
     Variants =
       [0,
        elt_start$0,
        elt_part$0,
        fold,
        iter,
        map,
        make_matcher,
        to_rank,
        to_name,
        descriptions$5],
     Part =
       [0,
        bin_shape_t,
        bin_size_t,
        bin_write_t,
        bin_writer_t,
        bin_read_t,
        bin_read_t$0,
        bin_reader_t,
        bin_t,
        elt_start,
        elt_part,
        is_elt_start,
        is_elt_part,
        elt_start_val,
        elt_part_val,
        Variants];
    function create(param){return 0;}
    function force(param){
     if(! param) return 0;
     var match = param[1], x_int = match[2], xs = match[1];
     return [0, caml_call1(X[3], x_int), xs];
    }
    function apply_part(t, p){
     if(! p){
      var _hD_ = caml_call1(X[1][2], 0);
      return [0, [0, force(t), _hD_]];
     }
     var p$0 = p[1];
     if(! t) throw caml_maybe_attach_backtrace([0, Assert_failure, _bh_], 1);
     var match = t[1], int$0 = match[2], xs = match[1];
     return [0, [0, xs, caml_call2(X[1][3], int$0, p$0)]];
    }
    var Intermediate = [0, Part, create, force, apply_part];
    function finalize(t){
     var _hC_ = Intermediate[3].call(null, t);
     return caml_call1(Core_List[59], _hC_);
    }
    function to_parts(xs){
     function _hx_(x){
      var
       _hz_ = Intermediate[1][10],
       _hA_ = caml_call1(X[2], x),
       _hB_ = caml_call2(Streamable_Import[4][44], _hA_, _hz_);
      return caml_call2(Streamable_Import[4][120], Intermediate[1][9], _hB_);
     }
     var _hy_ = caml_call1(Streamable_Import[4][111], xs);
     return caml_call2(Streamable_Import[4][73], _hy_, _hx_);
    }
    return [0, Intermediate, finalize, to_parts];
   }
   function V2$1(_hp_){
    var _hq_ = V1$41(_hp_), _hr_ = _hq_[1], _hs_ = _hr_[1];
    return V1$5
            ([0,
              [0,
               [0,
                _hs_[2],
                _hs_[3],
                _hs_[6],
                _hs_[5],
                _hs_[1],
                _hs_[4],
                _hs_[7],
                _hs_[8]],
               _hr_[2],
               _hr_[4]],
              _hq_[3],
              _hq_[2]]);
   }
   var to_sequence = Streamable_Import[4][111];
   function of_list(x){return x;}
   var _bi_ = [0, to_sequence, of_list];
   function V3_not_packed(_ho_){return V1$39(_bi_, _ho_);}
   function V3(_hk_){
    var _hl_ = V3_not_packed(_hk_), _hm_ = _hl_[1], _hn_ = _hm_[1];
    return V1$5
            ([0,
              [0,
               [0,
                _hn_[2],
                _hn_[3],
                _hn_[6],
                _hn_[5],
                _hn_[1],
                _hn_[4],
                _hn_[7],
                _hn_[8]],
               _hm_[2],
               _hm_[6]],
              _hl_[3],
              _hl_[2]]);
   }
   function V2$2(X){
    var
     _hd_ = X[1],
     _he_ = _hd_[1],
     Plain =
       V1$41
        ([0,
          [0,
           [0,
            _he_[1],
            _he_[2],
            _he_[3],
            _he_[4],
            _he_[5],
            _he_[6],
            _he_[7],
            _he_[8]],
           _hd_[2],
           _hd_[3]],
          X[2],
          X[3]]);
    function t_of_sexp(sexp_497){
     a:
     {
      if(0 === sexp_497[0]){
       var _hh_ = sexp_497[1];
       b:
       if(caml_string_notequal(_hh_, cst_Elt_part$3)){
        if(caml_string_notequal(_hh_, cst_Elt_start$1)){
         if(! caml_string_notequal(_hh_, cst_elt_part)) break b;
         if(caml_string_notequal(_hh_, cst_elt_start)) break a;
        }
        return 0;
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[9], error_source_495, sexp_497);
      }
      var _hi_ = sexp_497[1];
      if(! _hi_)
       return caml_call2
               (Sexplib0_Sexp_conv_error[11], error_source_495, sexp_497);
      var _hj_ = _hi_[1];
      if(0 !== _hj_[0])
       return caml_call2
               (Sexplib0_Sexp_conv_error[10], error_source_495, sexp_497);
      var tag_498 = _hj_[1];
      b:
      if(caml_string_notequal(tag_498, cst_Elt_part$3)){
       if(caml_string_notequal(tag_498, cst_Elt_start$1)){
        if(! caml_string_notequal(tag_498, cst_elt_part)) break b;
        if(caml_string_notequal(tag_498, cst_elt_start)) break a;
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[7], error_source_495, sexp_497);
      }
      var sexp_args_499 = _hi_[2];
      if(sexp_args_499 && ! sexp_args_499[2]){
       var
        arg0_500 = sexp_args_499[1],
        res0_501 = caml_call1(X[1][1][9], arg0_500);
       return [0, res0_501];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[8],
               error_source_495,
               tag_498,
               sexp_497);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[12], error_source_495, sexp_497);
    }
    function sexp_of_t(param){
     if(! param) return _bk_;
     var arg0_502 = param[1], res0_503 = caml_call1(X[1][1][10], arg0_502);
     return [1, [0, _bj_, [0, res0_503, 0]]];
    }
    var
     _hf_ = Plain[1],
     _hg_ = _hf_[1],
     include =
       V1
        ([0,
          [0,
           [0,
            _hg_[2],
            _hg_[3],
            _hg_[6],
            _hg_[5],
            _hg_[1],
            _hg_[4],
            _hg_[7],
            _hg_[8]],
           _hf_[2],
           _hf_[4]],
          Plain[3],
          Plain[2]],
         [0, t_of_sexp, sexp_of_t]),
     Intermediate = include[1],
     to_parts = include[2],
     finalize = include[3];
    return caml_call1(Packed[1], [0, Intermediate, to_parts, finalize]);
   }
   var to_sequence$0 = Streamable_Import[4][111];
   function of_list$0(x){return x;}
   var _bl_ = [0, to_sequence$0, of_list$0];
   function V3_not_packed$0(_hc_){return V1$40(_bl_, _hc_);}
   function V3$0(_ha_){
    var _hb_ = V3_not_packed$0(_ha_);
    return caml_call1(Packed[1], [0, _hb_[2], _hb_[3], _hb_[4]]);
   }
   function V1$42(A){
    var
     to_streamable = Nonempty_list[47],
     of_streamable = Nonempty_list[61],
     M = [0, to_streamable, of_streamable],
     _g__ = V3(A),
     _g$_ =
       caml_call1
        (caml_call1(Of_streamable_rpc[1], [0, _g__[2], _g__[3], _g__[4]]), M),
     include = caml_call1(Streamable_Remove_t[2], _g$_),
     Intermediate = include[2],
     to_parts = include[3],
     finalize = include[4];
    return [0, , , Intermediate, to_parts, finalize];
   }
   function V1$43(A){
    var
     to_streamable = Nonempty_list[47],
     of_streamable = Nonempty_list[61],
     M = [0, to_streamable, of_streamable],
     _g8_ = V3$0(A),
     _g9_ = caml_call1(caml_call1(Of_streamable[1], _g8_), M),
     include = caml_call1(Streamable_Remove_t[1], _g9_),
     Intermediate = include[2],
     to_parts = include[3],
     finalize = include[4];
    return [0, , , Intermediate, to_parts, finalize];
   }
   function create(param){
    var _g7_ = caml_call2(Core_Queue[66], 0, 0);
    return [0, caml_call1(Core_Stack[23], 0), _g7_];
   }
   var
    _bn_ =
      caml_call1
       (Bin_prot_Shape[5], [0, [0, cst_Atom, [0, Core[541], 0]], _bm_]),
    _bo_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$31), 0, _bn_], 0],
    _bp_ = caml_call1(Bin_shape[4][1], cst_src_main_ml_2044_10),
    group = caml_call2(Bin_prot_Shape[2], _bp_, _bo_),
    _bq_ = caml_call1(Bin_shape[2][1], cst_t$32),
    bin_shape_t = caml_call1(caml_call2(Bin_prot_Shape[10], group, _bq_), 0);
   function bin_size_t(param){
    if(typeof param === "number") return 1;
    var v1 = param[1], _g6_ = caml_call1(Core[542], v1);
    return caml_call2(Bin_prot_Common[23], 1, _g6_);
   }
   function bin_write_t(buf, pos, param){
    if(typeof param === "number")
     return param
             ? caml_call3(Bin_prot_Write[30], buf, pos, 2)
             : caml_call3(Bin_prot_Write[30], buf, pos, 1);
    var v1 = param[1], pos$0 = caml_call3(Bin_prot_Write[30], buf, pos, 0);
    return caml_call3(Core[544], buf, pos$0, v1);
   }
   var bin_writer_t = [0, bin_size_t, bin_write_t];
   function bin_read_t(buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19], cst_src_main_ml_Stable_Of_sexp, pos_ref[1]);
   }
   function bin_read_t$0(buf, pos_ref){
    var match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
    if(2 < match >>> 0)
     return caml_call2(Bin_prot_Common[18], _br_, pos_ref[1]);
    switch(match){
      case 0:
       var arg_1 = caml_call2(Core[547], buf, pos_ref); return [0, arg_1];
      case 1:
       return 0;
      default: return 1;
    }
   }
   var
    bin_reader_t = [0, bin_read_t$0, bin_read_t],
    bin_t = [0, bin_shape_t, bin_writer_t, bin_reader_t];
   function t_of_sexp(sexp_508){
    a:
    {
     if(0 === sexp_508[0]){
      var _g3_ = sexp_508[1];
      b:
      if(caml_string_notequal(_g3_, cst_Atom$0)){
       c:
       if(caml_string_notequal(_g3_, cst_Pop)){
        if(caml_string_notequal(_g3_, cst_Push)){
         if(! caml_string_notequal(_g3_, cst_atom)) break b;
         if(! caml_string_notequal(_g3_, cst_pop)) break c;
         if(caml_string_notequal(_g3_, cst_push)) break a;
        }
        return 0;
       }
       return 1;
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[9], error_source_506, sexp_508);
     }
     var _g4_ = sexp_508[1];
     if(! _g4_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_506, sexp_508);
     var _g5_ = _g4_[1];
     if(0 !== _g5_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_506, sexp_508);
     var tag_509 = _g5_[1];
     b:
     if(caml_string_notequal(tag_509, cst_Atom$0)){
      c:
      if(caml_string_notequal(tag_509, cst_Pop)){
       if(caml_string_notequal(tag_509, cst_Push)){
        if(! caml_string_notequal(tag_509, cst_atom)) break b;
        if(! caml_string_notequal(tag_509, cst_pop)) break c;
        if(caml_string_notequal(tag_509, cst_push)) break a;
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[7], error_source_506, sexp_508);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_506, sexp_508);
     }
     var sexp_args_510 = _g4_[2];
     if(sexp_args_510 && ! sexp_args_510[2]){
      var
       arg0_511 = sexp_args_510[1],
       res0_512 = caml_call1(Core[559], arg0_511);
      return [0, res0_512];
     }
     return caml_call3
             (Sexplib0_Sexp_conv_error[8],
              error_source_506,
              tag_509,
              sexp_508);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_506, sexp_508);
   }
   function sexp_of_t(param){
    if(typeof param === "number") return param ? _bs_ : _bt_;
    var arg0_513 = param[1], res0_514 = caml_call1(Core[558], arg0_513);
    return [1, [0, _bu_, [0, res0_514, 0]]];
   }
   function apply_part(t, part){
    if(typeof part === "number")
     if(part){
      var top = [1, caml_call1(Core_Queue[28], t[2])];
      t[2] = caml_call1(Core_Stack[27], t[1]);
      caml_call2(Core_Queue[43], t[2], top);
     }
     else{
      caml_call2(Core_Stack[25], t[1], t[2]);
      t[2] = caml_call2(Core_Queue[66], 0, 0);
     }
    else{var atom = part[1]; caml_call2(Core_Queue[43], t[2], [0, atom]);}
    return t;
   }
   function finalize(param){
    var stack = param[1], queue = param[2];
    if(caml_call1(Core_Stack[7], stack))
     return caml_call1(Core_Queue[28], queue);
    throw caml_maybe_attach_backtrace([0, Assert_failure, _bv_], 1);
   }
   function yield$0(part){return caml_call1(Base_Sequence[114][12], part);}
   function parts_of_sexp(param){
    if(0 === param[0]){var x = param[1]; return yield$0([0, x]);}
    var xs = param[1];
    function _gX_(param){
     function _gZ_(param){
      function _g1_(param){return caml_call1(Base_Sequence[114][3][1], 0);}
      var _g2_ = yield$0(1);
      return caml_call2(Base_Sequence[114][3][4][2], _g2_, _g1_);
     }
     var _g0_ = parts_of_sexps(xs);
     return caml_call2(Base_Sequence[114][3][4][2], _g0_, _gZ_);
    }
    var _gY_ = yield$0(0);
    return caml_call2(Base_Sequence[114][3][4][2], _gY_, _gX_);
   }
   function parts_of_sexps(xs){
    var _gW_ = caml_call2(Core_List[51], xs, parts_of_sexp);
    return caml_call1(Base_Sequence[114][11], _gW_);
   }
   function to_parts(t){
    var _gV_ = parts_of_sexps(t);
    return caml_call1(Base_Sequence[114][14], _gV_);
   }
   var
    V1_unpacked =
      [0,
       [0,
        [0,
         bin_size_t,
         bin_write_t,
         bin_read_t$0,
         bin_read_t,
         bin_shape_t,
         bin_writer_t,
         bin_reader_t,
         bin_t,
         t_of_sexp,
         sexp_of_t],
        create,
        apply_part],
       to_parts,
       finalize],
    V1$44 = caml_call1(Packed[1], V1_unpacked);
   function V1$45(Sexpable){
    function to_streamable(x){return [0, caml_call1(Sexpable[2], x), 0];}
    function of_streamable(param){
     if(param && ! param[2]){
      var x = param[1];
      return caml_call1(Sexpable[1], x);
     }
     throw caml_maybe_attach_backtrace([0, Assert_failure, _bw_], 1);
    }
    return caml_call1
            (caml_call1(Of_streamable[1], V1$44),
             [0, to_streamable, of_streamable]);
   }
   var Of_sexpable = [0, V1$45];
   function V1$46(X){
    var
     _gN_ =
       caml_call1
        (Bin_prot_Shape[5],
         [0, _bx_, [0, [0, cst_Elt_part$1, [0, X[1][1][5], 0]], 0]]),
     _gO_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$33), 0, _gN_], 0],
     _gP_ = caml_call1(Bin_shape[4][1], cst_src_main_ml_2115_10),
     group = caml_call2(Bin_prot_Shape[2], _gP_, _gO_),
     _gQ_ = caml_call1(Bin_shape[2][1], cst_t$34),
     bin_shape_t = caml_call1(caml_call2(Bin_prot_Shape[10], group, _gQ_), 0);
    function bin_size_t(param){
     if(! param) return 1;
     var v1 = param[1], _gU_ = caml_call1(X[1][1][1], v1);
     return caml_call2(Bin_prot_Common[23], 1, _gU_);
    }
    function bin_write_t(buf, pos, param){
     if(! param) return caml_call3(Bin_prot_Write[30], buf, pos, 0);
     var v1 = param[1], pos$0 = caml_call3(Bin_prot_Write[30], buf, pos, 1);
     return caml_call3(X[1][1][2], buf, pos$0, v1);
    }
    var bin_writer_t = [0, bin_size_t, bin_write_t];
    function bin_read_t(buf, pos_ref, vint){
     return caml_call2
             (Bin_prot_Common[19], cst_src_main_ml_Stable_Of_opti, pos_ref[1]);
    }
    function bin_read_t$0(buf, pos_ref){
     var match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
     if(0 === match) return 0;
     if(1 !== match) return caml_call2(Bin_prot_Common[18], _by_, pos_ref[1]);
     var arg_1 = caml_call2(X[1][1][3], buf, pos_ref);
     return [0, arg_1];
    }
    var
     bin_reader_t = [0, bin_read_t$0, bin_read_t],
     bin_t = [0, bin_shape_t, bin_writer_t, bin_reader_t],
     elt_start = 0;
    function elt_part(v0){return [0, v0];}
    function is_elt_start(param){if(param) return; return;}
    function is_elt_part(param){if(param) return; return;}
    function elt_start_val(param){if(param) return; return;}
    function elt_part_val(param){if(param) return; return;}
    var
     elt_start$0 = [0, cst_Elt_start$0, 0, elt_start],
     elt_part$0 = [0, cst_Elt_part$2, 1, elt_part];
    function fold(init, elt_start_fun, elt_part_fun){
     return caml_call2
             (elt_part_fun,
              caml_call2(elt_start_fun, init, elt_start$0),
              elt_part$0);
    }
    function iter(elt_start_fun, elt_part_fun){
     caml_call1(elt_start_fun, elt_start$0);
     return caml_call1(elt_part_fun, elt_part$0);
    }
    function map(t, elt_start_fun, elt_part_fun){
     if(! t) return caml_call1(elt_start_fun, elt_start$0);
     var v0 = t[1];
     return caml_call2(elt_part_fun, elt_part$0, v0);
    }
    function make_matcher(elt_start_fun, elt_part_fun, compile_acc){
     var
      compile_acc$0 = caml_call2(elt_start_fun, elt_start$0, compile_acc)[2];
     caml_call2(elt_part_fun, elt_part$0, compile_acc$0);
     return;
    }
    function to_rank(param){if(param) return; return;}
    function to_name(param){if(param) return; return;}
    var
     Variants =
       [0,
        elt_start$0,
        elt_part$0,
        fold,
        iter,
        map,
        make_matcher,
        to_rank,
        to_name,
        descriptions$6],
     Part =
       [0,
        bin_shape_t,
        bin_size_t,
        bin_write_t,
        bin_writer_t,
        bin_read_t,
        bin_read_t$0,
        bin_reader_t,
        bin_t,
        elt_start,
        elt_part,
        is_elt_start,
        is_elt_part,
        elt_start_val,
        elt_part_val,
        Variants];
    function create(param){return 0;}
    function apply_part(t, param){
     if(param){
      var p = param[1];
      if(! t) throw caml_maybe_attach_backtrace([0, Assert_failure, _bz_], 1);
      var x_int = t[1];
      return [0, caml_call2(X[1][3], x_int, p)];
     }
     if(t) throw caml_maybe_attach_backtrace([0, Assert_failure, _bA_], 1);
     return [0, caml_call1(X[1][2], 0)];
    }
    var Intermediate = [0, Part, create, apply_part];
    function finalize(param){
     if(! param) return 0;
     var x_int = param[1];
     return [0, caml_call1(X[3], x_int)];
    }
    function to_parts(param){
     if(! param) return Streamable_Import[4][49];
     var
      x = param[1],
      _gR_ = Intermediate[1][10],
      _gS_ = caml_call1(X[2], x),
      _gT_ = caml_call2(Streamable_Import[4][44], _gS_, _gR_);
     return caml_call2(Streamable_Import[4][120], Intermediate[1][9], _gT_);
    }
    return [0, Intermediate, finalize, to_parts];
   }
   function V2$3(X){
    function to_streamable(param){
     if(! param) return 0;
     var x = param[1];
     return [0, x, 0];
    }
    function of_streamable(param){
     if(! param) return 0;
     if(param[2])
      throw caml_maybe_attach_backtrace([0, Assert_failure, _bB_], 1);
     var x = param[1];
     return [0, x];
    }
    var
     _gJ_ = V3_not_packed(X),
     _gK_ = _gJ_[1],
     _gL_ = _gK_[1],
     _gM_ =
       caml_call1
        (caml_call1
          (Of_streamable_rpc[1],
           [0,
            [0,
             [0,
              _gL_[2],
              _gL_[3],
              _gL_[6],
              _gL_[5],
              _gL_[1],
              _gL_[4],
              _gL_[7],
              _gL_[8]],
             _gK_[2],
             _gK_[6]],
            _gJ_[3],
            _gJ_[2]]),
         [0, to_streamable, of_streamable]),
     include = caml_call1(Streamable_Remove_t[2], _gM_),
     Intermediate = include[2],
     to_parts = include[3],
     finalize = include[4];
    return [0, , Intermediate, to_parts, finalize];
   }
   function V2$4(X){
    function to_streamable(param){
     if(! param) return 0;
     var x = param[1];
     return [0, x, 0];
    }
    function of_streamable(param){
     if(! param) return 0;
     if(param[2])
      throw caml_maybe_attach_backtrace([0, Assert_failure, _bE_], 1);
     var x = param[1];
     return [0, x];
    }
    var
     _gH_ = V3_not_packed$0(X),
     _gI_ =
       caml_call1
        (caml_call1(Of_streamable[1], [0, _gH_[2], _gH_[3], _gH_[4]]),
         [0, to_streamable, of_streamable]),
     include = caml_call1(Streamable_Remove_t[1], _gI_),
     Intermediate = include[2],
     to_parts = include[3],
     finalize = include[4];
    return [0, , Intermediate, to_parts, finalize];
   }
   function V1$47(A, B){
    function to_streamable(param){
     if(0 === param[0]){var x = param[1]; return [0, 65, x];}
     var x$0 = param[1];
     return [0, 66, x$0];
    }
    function of_streamable(param){
     if(66 <= param[1]){var x = param[2]; return [1, x];}
     var x$0 = param[2];
     return [0, x$0];
    }
    var
     _gG_ = V1$31(A, B),
     _gD_ = _gG_[1],
     _gE_ = _gD_[1],
     _gF_ =
       caml_call1
        (caml_call1
          (Of_streamable_rpc[1],
           [0,
            [0,
             [0,
              _gE_[2],
              _gE_[3],
              _gE_[6],
              _gE_[5],
              _gE_[1],
              _gE_[4],
              _gE_[7],
              _gE_[8]],
             _gD_[2],
             _gD_[3]],
            _gG_[2],
            _gG_[3]]),
         [0, to_streamable, of_streamable]),
     include = caml_call1(Streamable_Remove_t[2], _gF_),
     Intermediate = include[2],
     to_parts = include[3],
     finalize = include[4];
    return [0, , Intermediate, to_parts, finalize];
   }
   function V1$48(A, B){
    function to_streamable(param){
     if(0 === param[0]){var x = param[1]; return [0, 65, x];}
     var x$0 = param[1];
     return [0, 66, x$0];
    }
    function of_streamable(param){
     if(66 <= param[1]){var x = param[2]; return [1, x];}
     var x$0 = param[2];
     return [0, x$0];
    }
    var
     _gC_ = V1$32(A, B),
     _gB_ =
       caml_call1
        (caml_call1(Of_streamable[1], [0, _gC_[2], _gC_[3], _gC_[4]]),
         [0, to_streamable, of_streamable]),
     include = caml_call1(Streamable_Remove_t[1], _gB_),
     Intermediate = include[2],
     to_parts = include[3],
     finalize = include[4];
    return [0, , Intermediate, to_parts, finalize];
   }
   function Common(A){
    var
     to_streamable = Core_Fqueue[50],
     of_streamable = Core_Fqueue[51],
     M = [0, to_streamable, of_streamable];
    return [0, M];
   }
   function V3$1(A){
    var
     M = Common(A)[1],
     _gz_ = V3(A),
     _gA_ =
       caml_call1
        (caml_call1(Of_streamable_rpc[1], [0, _gz_[2], _gz_[3], _gz_[4]]), M),
     include = caml_call1(Streamable_Remove_t[2], _gA_),
     Intermediate = include[2],
     to_parts = include[3],
     finalize = include[4];
    return [0, , , Intermediate, to_parts, finalize];
   }
   function Common$0(A){
    var
     to_streamable = Core_Fqueue[50],
     of_streamable = Core_Fqueue[51],
     M = [0, to_streamable, of_streamable];
    return [0, M];
   }
   function V3$2(A){
    var
     M = Common$0(A)[1],
     _gx_ = V3$0(A),
     _gy_ = caml_call1(caml_call1(Of_streamable[1], _gx_), M),
     include = caml_call1(Streamable_Remove_t[1], _gy_),
     Intermediate = include[2],
     to_parts = include[3],
     finalize = include[4];
    return [0, , , Intermediate, to_parts, finalize];
   }
   function Common$1(Key){
    var
     to_streamable = Core_Set[39],
     of_streamable = caml_call1(Core_Set[3][4], Key[11]),
     M = [0, to_streamable, of_streamable],
     K =
       caml_call1
        (Of_atomic_rpc[1],
         [0, Key[1], Key[2], Key[3], Key[4], Key[5], Key[6], Key[7], Key[8]]);
    return [0, M, K];
   }
   function V3$3(Key){
    var
     C = Common$1(Key),
     _gu_ = C[1],
     _gv_ = V3(C[2]),
     _gw_ =
       caml_call1
        (caml_call1(Of_streamable_rpc[1], [0, _gv_[2], _gv_[3], _gv_[4]]),
         _gu_),
     include = caml_call1(Streamable_Remove_t[2], _gw_),
     Intermediate = include[2],
     to_parts = include[3],
     finalize = include[4];
    return [0, , , , , Intermediate, to_parts, finalize];
   }
   function Common$2(Key){
    var
     to_streamable = Core_Set[39],
     of_streamable = caml_call1(Core_Set[3][4], Key[12]),
     M = [0, to_streamable, of_streamable],
     K =
       caml_call1
        (Of_atomic[1],
         [0,
          Key[1],
          Key[2],
          Key[3],
          Key[4],
          Key[5],
          Key[6],
          Key[7],
          Key[8],
          Key[10],
          Key[11]]);
    return [0, M, K];
   }
   function V3$4(Key){
    var
     C = Common$2(Key),
     _gr_ = C[1],
     _gs_ = V3$0(C[2]),
     _gt_ = caml_call1(caml_call1(Of_streamable[1], _gs_), _gr_),
     include = caml_call1(Streamable_Remove_t[1], _gt_),
     Intermediate = include[2],
     to_parts = include[3],
     finalize = include[4];
    return [0, , , , , Intermediate, to_parts, finalize];
   }
   function to_sequence$1(x){return x;}
   var
    of_list$1 = Streamable_Import[4][111],
    _bF_ = [0, to_sequence$1, of_list$1];
   function V1$49(_gn_){
    var _gq_ = V1$39(_bF_, _gn_), _go_ = _gq_[1], _gp_ = _go_[1];
    return V1$5
            ([0,
              [0,
               [0,
                _gp_[2],
                _gp_[3],
                _gp_[6],
                _gp_[5],
                _gp_[1],
                _gp_[4],
                _gp_[7],
                _gp_[8]],
               _go_[2],
               _go_[6]],
              _gq_[3],
              _gq_[2]]);
   }
   function to_sequence$2(x){return x;}
   var
    of_list$2 = Streamable_Import[4][111],
    _bG_ = [0, to_sequence$2, of_list$2];
   function V1$50(_gl_){
    var _gm_ = V1$40(_bG_, _gl_);
    return caml_call1(Packed[1], [0, _gm_[2], _gm_[3], _gm_[4]]);
   }
   function V1$51(T, F){
    var
     M_only_functions = caml_call2(CamlinternalMod[1], _bI_, _bH_),
     M = V1$0(M_only_functions),
     Intermediate = M[1],
     to_parts = M[2],
     finalize = M[3],
     M_t = [0, Intermediate, to_parts, finalize],
     Rec = caml_call1(F, M_t),
     include = Rec[1][1],
     bin_size_t = include[1],
     bin_write_t = include[2],
     bin_read_t = include[3],
     bin_read_t$0 = include[4],
     bin_writer_t = include[6],
     bin_reader_t = include[7],
     bin_t = include[8],
     _gh_ = [0, Rec[1][1][5], 0],
     _gi_ = caml_call1(Bin_shape[5][1], cst_859f388a_490a_11e6_b296_cb),
     bin_shape_t = caml_call2(Bin_prot_Shape[12], _gi_, _gh_),
     create = Rec[1][2],
     apply_part = Rec[1][3],
     to_parts$0 = Rec[2],
     finalize$0 = Rec[3],
     M0 =
       [0,
        [0,
         [0,
          bin_size_t,
          bin_write_t,
          bin_read_t,
          bin_read_t$0,
          bin_shape_t,
          bin_writer_t,
          bin_reader_t,
          bin_t],
         create,
         apply_part],
        to_parts$0,
        finalize$0],
     _gj_ = M0[1],
     _gk_ = _gj_[1];
    caml_call3
     (CamlinternalMod[2],
      _bJ_,
      M_only_functions,
      [0,
       [0, [0, _gk_[1], _gk_[2], _gk_[3], _gk_[4]], _gj_[2], _gj_[3]],
       M0[2],
       M0[3]]);
    var
     include$0 = caml_call1(Streamable_Remove_t[2], M0),
     Intermediate$0 = include$0[2],
     to_parts$1 = include$0[3],
     finalize$1 = include$0[4];
    return [0, Intermediate$0, to_parts$1, finalize$1];
   }
   var Fixpoint_rpc = [0, V1$51];
   function V1$52(T, F){
    var
     M_only_functions = caml_call2(CamlinternalMod[1], _bL_, _bK_),
     _f$_ = M_only_functions[1][1],
     _gb_ = M_only_functions[1],
     _gc_ = _gb_[1],
     _ga_ = [0, _f$_[1], _f$_[2]],
     include =
       V1$0
        ([0,
          [0, [0, _gc_[3], _gc_[4], _gc_[5], _gc_[6]], _gb_[2], _gb_[3]],
          M_only_functions[2],
          M_only_functions[3]]),
     Intermediate = include[1],
     to_parts = include[2],
     finalize = include[3],
     M = V1([0, Intermediate, to_parts, finalize], _ga_),
     Intermediate$0 = M[1],
     to_parts$0 = M[2],
     finalize$0 = M[3],
     M_t = [0, Intermediate$0, to_parts$0, finalize$0],
     Rec = caml_call1(F, M_t),
     include$0 = Rec[1][1],
     bin_size_t = include$0[1],
     bin_write_t = include$0[2],
     bin_read_t = include$0[3],
     bin_read_t$0 = include$0[4],
     bin_writer_t = include$0[6],
     bin_reader_t = include$0[7],
     bin_t = include$0[8],
     t_of_sexp = include$0[9],
     sexp_of_t = include$0[10],
     _gd_ = [0, Rec[1][1][5], 0],
     _ge_ = caml_call1(Bin_shape[5][1], cst_859f388a_490a_11e6_b296_cb$0),
     bin_shape_t = caml_call2(Bin_prot_Shape[12], _ge_, _gd_),
     create = Rec[1][2],
     apply_part = Rec[1][3],
     to_parts$1 = Rec[2],
     finalize$1 = Rec[3],
     M0 =
       [0,
        [0,
         [0,
          bin_size_t,
          bin_write_t,
          bin_read_t,
          bin_read_t$0,
          bin_shape_t,
          bin_writer_t,
          bin_reader_t,
          bin_t,
          t_of_sexp,
          sexp_of_t],
         create,
         apply_part],
        to_parts$1,
        finalize$1],
     _gf_ = M0[1],
     _gg_ = _gf_[1];
    caml_call3
     (CamlinternalMod[2],
      _bM_,
      M_only_functions,
      [0,
       [0,
        [0, _gg_[9], _gg_[10], _gg_[1], _gg_[2], _gg_[3], _gg_[4]],
        _gf_[2],
        _gf_[3]],
       M0[2],
       M0[3]]);
    var
     include$1 = caml_call1(Streamable_Remove_t[1], M0),
     Intermediate$1 = include$1[2],
     to_parts$2 = include$1[3],
     finalize$2 = include$1[4];
    return [0, Intermediate$1, to_parts$2, finalize$2];
   }
   var Fixpoint = [0, V1$52], V1$53 = [0];
   caml_call1(Ppx_inline_test_lib[7], cst_streamable);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Streamable_Main);
   var
    _bN_ =
      [0,
       function(_f7_, _f6_, _f5_, _f4_, _f3_){
        var
         _f8_ = V1$37(_f7_, _f6_, _f5_, _f4_, _f3_),
         _f9_ = _f8_[1],
         _f__ = _f9_[1];
        return [0,
                [0,
                 [0,
                  _f__[2],
                  _f__[3],
                  _f__[6],
                  _f__[5],
                  _f__[1],
                  _f__[4],
                  _f__[7],
                  _f__[8]],
                 _f9_[2],
                 _f9_[3]],
                _f8_[2],
                _f8_[3]];
       }],
    _bO_ =
      [0,
       function(_f1_, _f0_, _fZ_, _fY_, _fX_){
        var _f2_ = V1$38(_f1_, _f0_, _fZ_, _fY_, _fX_);
        return [0, _f2_[2], _f2_[3], _f2_[4]];
       }],
    _bP_ =
      [0,
       function(_fT_, _fS_, _fR_, _fQ_){
        var
         _fU_ = V1$35(_fT_, _fS_, _fR_, _fQ_),
         _fV_ = _fU_[1],
         _fW_ = _fV_[1];
        return [0,
                [0,
                 [0,
                  _fW_[2],
                  _fW_[3],
                  _fW_[6],
                  _fW_[5],
                  _fW_[1],
                  _fW_[4],
                  _fW_[7],
                  _fW_[8]],
                 _fV_[2],
                 _fV_[3]],
                _fU_[2],
                _fU_[3]];
       }],
    _bQ_ =
      [0,
       function(_fO_, _fN_, _fM_, _fL_){
        var _fP_ = V1$36(_fO_, _fN_, _fM_, _fL_);
        return [0, _fP_[2], _fP_[3], _fP_[4]];
       }],
    _bR_ =
      [0,
       function(_fH_, _fG_, _fF_){
        var _fI_ = V1$33(_fH_, _fG_, _fF_), _fJ_ = _fI_[1], _fK_ = _fJ_[1];
        return [0,
                [0,
                 [0,
                  _fK_[2],
                  _fK_[3],
                  _fK_[6],
                  _fK_[5],
                  _fK_[1],
                  _fK_[4],
                  _fK_[7],
                  _fK_[8]],
                 _fJ_[2],
                 _fJ_[3]],
                _fI_[2],
                _fI_[3]];
       }],
    _bS_ =
      [0,
       function(_fD_, _fC_, _fB_){
        var _fE_ = V1$34(_fD_, _fC_, _fB_);
        return [0, _fE_[2], _fE_[3], _fE_[4]];
       }],
    _bT_ =
      [0,
       function(_fx_, _fw_){
        var _fy_ = V1$31(_fx_, _fw_), _fz_ = _fy_[1], _fA_ = _fz_[1];
        return [0,
                [0,
                 [0,
                  _fA_[2],
                  _fA_[3],
                  _fA_[6],
                  _fA_[5],
                  _fA_[1],
                  _fA_[4],
                  _fA_[7],
                  _fA_[8]],
                 _fz_[2],
                 _fz_[3]],
                _fy_[2],
                _fy_[3]];
       }],
    _bU_ =
      [0,
       function(_fu_, _ft_){
        var _fv_ = V1$32(_fu_, _ft_);
        return [0, _fv_[2], _fv_[3], _fv_[4]];
       }],
    _bV_ =
      [0,
       function(_fr_){
        var _fs_ = V1$49(_fr_);
        return [0, _fs_[2], _fs_[3], _fs_[4]];
       }],
    _bW_ = [0, V1$50];
   function _bX_(_fp_){
    var _fq_ = V3$3(_fp_);
    return [0, _fq_[5], _fq_[6], _fq_[7]];
   }
   var
    _bY_ =
      [0,
       function(Key){
        var
         C = Common$1(Key),
         _fm_ = C[1],
         _fn_ = V2$1(C[2]),
         _fo_ =
           caml_call1
            (caml_call1(Of_streamable_rpc[1], [0, _fn_[2], _fn_[3], _fn_[4]]),
             _fm_),
         include = caml_call1(Streamable_Remove_t[2], _fo_),
         Intermediate = include[2],
         to_parts = include[3],
         finalize = include[4];
        return [0, Intermediate, to_parts, finalize];
       },
       _bX_];
   function _bZ_(_fk_){
    var _fl_ = V3$4(_fk_);
    return [0, _fl_[5], _fl_[6], _fl_[7]];
   }
   var
    _b0_ =
      [0,
       function(Key){
        var
         C = Common$2(Key),
         _fh_ = C[1],
         _fi_ = V2$2(C[2]),
         _fj_ = caml_call1(caml_call1(Of_streamable[1], _fi_), _fh_),
         include = caml_call1(Streamable_Remove_t[1], _fj_),
         Intermediate = include[2],
         to_parts = include[3],
         finalize = include[4];
        return [0, Intermediate, to_parts, finalize];
       },
       _bZ_],
    _b1_ =
      [0,
       function(_ff_, _fe_){
        var _fg_ = V1$47(_ff_, _fe_);
        return [0, _fg_[2], _fg_[3], _fg_[4]];
       }],
    _b2_ =
      [0,
       function(_fc_, _fb_){
        var _fd_ = V1$48(_fc_, _fb_);
        return [0, _fd_[2], _fd_[3], _fd_[4]];
       }];
   function _b3_(_e$_){
    var _fa_ = V2$3(_e$_);
    return [0, _fa_[2], _fa_[3], _fa_[4]];
   }
   var
    _b4_ =
      [0,
       function(_e7_){
        var _e8_ = V1$46(_e7_), _e9_ = _e8_[1], _e__ = _e9_[1];
        return [0,
                [0,
                 [0,
                  _e__[2],
                  _e__[3],
                  _e__[6],
                  _e__[5],
                  _e__[1],
                  _e__[4],
                  _e__[7],
                  _e__[8]],
                 _e9_[2],
                 _e9_[3]],
                _e8_[3],
                _e8_[2]];
       },
       _b3_];
   function _b5_(_e5_){
    var _e6_ = V2$4(_e5_);
    return [0, _e6_[2], _e6_[3], _e6_[4]];
   }
   var
    _b6_ =
      [0,
       function(X){
        var
         _eY_ = X[1],
         _eZ_ = _eY_[1],
         Plain =
           V1$46
            ([0,
              [0,
               [0,
                _eZ_[1],
                _eZ_[2],
                _eZ_[3],
                _eZ_[4],
                _eZ_[5],
                _eZ_[6],
                _eZ_[7],
                _eZ_[8]],
               _eY_[2],
               _eY_[3]],
              X[2],
              X[3]]);
        function t_of_sexp(sexp_522){
         a:
         {
          if(0 === sexp_522[0]){
           var _e2_ = sexp_522[1];
           b:
           if(caml_string_notequal(_e2_, cst_Elt_part$3)){
            if(caml_string_notequal(_e2_, cst_Elt_start$1)){
             if(! caml_string_notequal(_e2_, cst_elt_part)) break b;
             if(caml_string_notequal(_e2_, cst_elt_start)) break a;
            }
            return 0;
           }
           return caml_call2
                   (Sexplib0_Sexp_conv_error[9], error_source_520, sexp_522);
          }
          var _e3_ = sexp_522[1];
          if(! _e3_)
           return caml_call2
                   (Sexplib0_Sexp_conv_error[11], error_source_520, sexp_522);
          var _e4_ = _e3_[1];
          if(0 !== _e4_[0])
           return caml_call2
                   (Sexplib0_Sexp_conv_error[10], error_source_520, sexp_522);
          var tag_523 = _e4_[1];
          b:
          if(caml_string_notequal(tag_523, cst_Elt_part$3)){
           if(caml_string_notequal(tag_523, cst_Elt_start$1)){
            if(! caml_string_notequal(tag_523, cst_elt_part)) break b;
            if(caml_string_notequal(tag_523, cst_elt_start)) break a;
           }
           return caml_call2
                   (Sexplib0_Sexp_conv_error[7], error_source_520, sexp_522);
          }
          var sexp_args_524 = _e3_[2];
          if(sexp_args_524 && ! sexp_args_524[2]){
           var
            arg0_525 = sexp_args_524[1],
            res0_526 = caml_call1(X[1][1][9], arg0_525);
           return [0, res0_526];
          }
          return caml_call3
                  (Sexplib0_Sexp_conv_error[8],
                   error_source_520,
                   tag_523,
                   sexp_522);
         }
         return caml_call2
                 (Sexplib0_Sexp_conv_error[12], error_source_520, sexp_522);
        }
        function sexp_of_t(param){
         if(! param) return _bD_;
         var
          arg0_527 = param[1],
          res0_528 = caml_call1(X[1][1][10], arg0_527);
         return [1, [0, _bC_, [0, res0_528, 0]]];
        }
        var
         _e0_ = Plain[1],
         _e1_ = _e0_[1],
         include =
           V1
            ([0,
              [0,
               [0,
                _e1_[2],
                _e1_[3],
                _e1_[6],
                _e1_[5],
                _e1_[1],
                _e1_[4],
                _e1_[7],
                _e1_[8]],
               _e0_[2],
               _e0_[3]],
              Plain[3],
              Plain[2]],
             [0, t_of_sexp, sexp_of_t]),
         Intermediate = include[1],
         to_parts = include[2],
         finalize = include[3];
        return [0, Intermediate, to_parts, finalize];
       },
       _b5_],
    _b7_ =
      [0,
       function(_eW_, _eV_){
        var _eX_ = V1$12(_eW_, _eV_);
        return [0, _eX_[2], _eX_[3], _eX_[4]];
       }],
    _b8_ =
      [0,
       function(_eT_, _eS_){
        var _eU_ = V1$11(_eT_, _eS_);
        return [0, _eU_[2], _eU_[3], _eU_[4]];
       }],
    _b9_ =
      [0,
       V1$9,
       function(_eQ_, _eP_){
        var _eR_ = V2(_eQ_, _eP_);
        return [0, _eR_[2], _eR_[3], _eR_[4]];
       }],
    _b__ =
      [0,
       function(_eN_){
        var _eO_ = V1$42(_eN_);
        return [0, _eO_[3], _eO_[4], _eO_[5]];
       }],
    _b$_ =
      [0,
       function(_eL_){
        var _eM_ = V1$43(_eL_);
        return [0, _eM_[3], _eM_[4], _eM_[5]];
       }];
   function _ca_(_eJ_){
    var _eK_ = V3(_eJ_);
    return [0, _eK_[2], _eK_[3], _eK_[4]];
   }
   var
    _cb_ =
      [0,
       function(_eH_){
        var _eI_ = V2$1(_eH_);
        return [0, _eI_[2], _eI_[3], _eI_[4]];
       },
       _ca_],
    _cc_ = [0, V2$2, V3$0],
    _cd_ =
      [0,
       function(_eF_, _eE_){
        var
         _eG_ =
           V1$13
            ([0,
              _eF_[12],
              _eF_[1],
              _eF_[2],
              _eF_[3],
              _eF_[4],
              _eF_[5],
              _eF_[6],
              _eF_[7],
              _eF_[8],
              _eF_[10],
              _eF_[11],
              _eF_[9]],
             _eE_);
        return [0, _eG_[2], _eG_[3], _eG_[4]];
       }],
    _ce_ =
      [0,
       function(_eB_){
        var
         _eC_ =
           [0,
            _eB_[13],
            _eB_[1],
            _eB_[2],
            _eB_[3],
            _eB_[4],
            _eB_[5],
            _eB_[6],
            _eB_[7],
            _eB_[8],
            _eB_[11],
            _eB_[10],
            _eB_[12],
            _eB_[9]];
        return function(_eD_){return V1$14(_eC_, _eD_);};
       }];
   function _cf_(_ez_){
    var _eA_ = V3$1(_ez_);
    return [0, _eA_[3], _eA_[4], _eA_[5]];
   }
   var
    _cg_ =
      [0,
       function(A){
        var
         M = Common(A)[1],
         _ex_ = V2$1(A),
         _ey_ =
           caml_call1
            (caml_call1(Of_streamable_rpc[1], [0, _ex_[2], _ex_[3], _ex_[4]]),
             M),
         include = caml_call1(Streamable_Remove_t[2], _ey_),
         Intermediate = include[2],
         to_parts = include[3],
         finalize = include[4];
        return [0, Intermediate, to_parts, finalize];
       },
       _cf_];
   function _ch_(_ev_){
    var _ew_ = V3$2(_ev_);
    return [0, _ew_[3], _ew_[4], _ew_[5]];
   }
   var
    _ci_ =
      [0,
       function(A){
        var
         M = Common$0(A)[1],
         _et_ = V2$2(A),
         _eu_ = caml_call1(caml_call1(Of_streamable[1], _et_), M),
         include = caml_call1(Streamable_Remove_t[1], _eu_),
         Intermediate = include[2],
         to_parts = include[3],
         finalize = include[4];
        return [0, Intermediate, to_parts, finalize];
       },
       _ch_],
    _cj_ =
      [0,
       Checked,
       Packed,
       [0,
        function(_er_){
         var _es_ = V1$5(_er_);
         return [0, _es_[2], _es_[3], _es_[4]];
        }],
       Fixpoint,
       Fixpoint_rpc,
       Of_atomic,
       Of_atomic_rpc,
       _ci_,
       _cg_,
       _ce_,
       _cd_,
       _cc_,
       _cb_,
       _b$_,
       _b__,
       Of_map,
       _b9_,
       _b8_,
       _b7_,
       _b6_,
       _b4_,
       _b2_,
       _b1_,
       _b0_,
       _bY_,
       _bW_,
       _bV_,
       Of_streamable,
       Of_streamable_rpc,
       Of_tuple2,
       Of_tuple2_rpc,
       Of_tuple3,
       Of_tuple3_rpc,
       Of_tuple4,
       Of_tuple4_rpc,
       Of_tuple5,
       Of_tuple5_rpc,
       Of_tuple6,
       Of_tuple6_rpc,
       Of_tuple7,
       Of_tuple7_rpc,
       Of_tuple8,
       Of_tuple8_rpc,
       Of_tuple9,
       Of_tuple9_rpc,
       _bU_,
       _bT_,
       _bS_,
       _bR_,
       _bQ_,
       _bP_,
       _bO_,
       _bN_,
       Of_sexpable,
       V1$53];
   function _ck_(_ep_){
    var _eq_ = V1$5(_ep_);
    return [0, _eq_[2], _eq_[3], _eq_[4]];
   }
   var
    _cl_ = Packed[1],
    _cm_ = Fixpoint_rpc[1],
    _cn_ = Fixpoint[1],
    _co_ = Of_sexpable[1],
    _cp_ = Of_streamable_rpc[1],
    _cq_ = Of_streamable[1];
   function _cr_(_en_){
    var _eo_ = V1$49(_en_);
    return [0, _eo_[2], _eo_[3], _eo_[4]];
   }
   function _cs_(_el_){
    var _em_ = V3$1(_el_);
    return [0, _em_[3], _em_[4], _em_[5]];
   }
   function _ct_(_ej_){
    var _ek_ = V3$2(_ej_);
    return [0, _ek_[3], _ek_[4], _ek_[5]];
   }
   function _cu_(_eh_, _eg_){
    var _ei_ = V1$47(_eh_, _eg_);
    return [0, _ei_[2], _ei_[3], _ei_[4]];
   }
   function _cv_(_ee_, _ed_){
    var _ef_ = V1$48(_ee_, _ed_);
    return [0, _ef_[2], _ef_[3], _ef_[4]];
   }
   function _cw_(_eb_){
    var _ec_ = V2$3(_eb_);
    return [0, _ec_[2], _ec_[3], _ec_[4]];
   }
   function _cx_(_d$_){
    var _ea_ = V2$4(_d$_);
    return [0, _ea_[2], _ea_[3], _ea_[4]];
   }
   function _cy_(_d9_){
    var _d__ = V1$42(_d9_);
    return [0, _d__[3], _d__[4], _d__[5]];
   }
   function _cz_(_d7_){
    var _d8_ = V1$43(_d7_);
    return [0, _d8_[3], _d8_[4], _d8_[5]];
   }
   function _cA_(_d5_){
    var _d6_ = V3(_d5_);
    return [0, _d6_[2], _d6_[3], _d6_[4]];
   }
   function _cB_(_d1_, _d0_, _dZ_, _dY_, _dX_){
    var
     _d2_ = V1$37(_d1_, _d0_, _dZ_, _dY_, _dX_),
     _d3_ = _d2_[1],
     _d4_ = _d3_[1];
    return [0,
            [0,
             [0,
              _d4_[2],
              _d4_[3],
              _d4_[6],
              _d4_[5],
              _d4_[1],
              _d4_[4],
              _d4_[7],
              _d4_[8]],
             _d3_[2],
             _d3_[3]],
            _d2_[2],
            _d2_[3]];
   }
   function _cC_(_dV_, _dU_, _dT_, _dS_, _dR_){
    var _dW_ = V1$38(_dV_, _dU_, _dT_, _dS_, _dR_);
    return [0, _dW_[2], _dW_[3], _dW_[4]];
   }
   function _cD_(_dN_, _dM_, _dL_, _dK_){
    var _dO_ = V1$35(_dN_, _dM_, _dL_, _dK_), _dP_ = _dO_[1], _dQ_ = _dP_[1];
    return [0,
            [0,
             [0,
              _dQ_[2],
              _dQ_[3],
              _dQ_[6],
              _dQ_[5],
              _dQ_[1],
              _dQ_[4],
              _dQ_[7],
              _dQ_[8]],
             _dP_[2],
             _dP_[3]],
            _dO_[2],
            _dO_[3]];
   }
   function _cE_(_dI_, _dH_, _dG_, _dF_){
    var _dJ_ = V1$36(_dI_, _dH_, _dG_, _dF_);
    return [0, _dJ_[2], _dJ_[3], _dJ_[4]];
   }
   function _cF_(_dB_, _dA_, _dz_){
    var _dC_ = V1$33(_dB_, _dA_, _dz_), _dD_ = _dC_[1], _dE_ = _dD_[1];
    return [0,
            [0,
             [0,
              _dE_[2],
              _dE_[3],
              _dE_[6],
              _dE_[5],
              _dE_[1],
              _dE_[4],
              _dE_[7],
              _dE_[8]],
             _dD_[2],
             _dD_[3]],
            _dC_[2],
            _dC_[3]];
   }
   function _cG_(_dx_, _dw_, _dv_){
    var _dy_ = V1$34(_dx_, _dw_, _dv_);
    return [0, _dy_[2], _dy_[3], _dy_[4]];
   }
   function _cH_(_dr_, _dq_){
    var _ds_ = V1$31(_dr_, _dq_), _dt_ = _ds_[1], _du_ = _dt_[1];
    return [0,
            [0,
             [0,
              _du_[2],
              _du_[3],
              _du_[6],
              _du_[5],
              _du_[1],
              _du_[4],
              _du_[7],
              _du_[8]],
             _dt_[2],
             _dt_[3]],
            _ds_[2],
            _ds_[3]];
   }
   function _cI_(_do_, _dn_){
    var _dp_ = V1$32(_do_, _dn_);
    return [0, _dp_[2], _dp_[3], _dp_[4]];
   }
   var
    _cJ_ = Of_tuple9_rpc[1],
    _cK_ = Of_tuple9[1],
    _cL_ = Of_tuple8_rpc[1],
    _cM_ = Of_tuple8[1],
    _cN_ = Of_tuple7_rpc[1],
    _cO_ = Of_tuple7[1],
    _cP_ = Of_tuple6_rpc[1],
    _cQ_ = Of_tuple6[1],
    _cR_ = Of_tuple5_rpc[1],
    _cS_ = Of_tuple5[1],
    _cT_ = Of_tuple4_rpc[1],
    _cU_ = Of_tuple4[1],
    _cV_ = Of_tuple3_rpc[1],
    _cW_ = Of_tuple3[1],
    _cX_ = Of_tuple2_rpc[1],
    _cY_ = Of_tuple2[1];
   function _cZ_(_dl_){
    var _dm_ = V3$3(_dl_);
    return [0, _dm_[5], _dm_[6], _dm_[7]];
   }
   function _c0_(_dj_){
    var _dk_ = V3$4(_dj_);
    return [0, _dk_[5], _dk_[6], _dk_[7]];
   }
   function _c1_(_dh_, _dg_){
    var
     _di_ =
       V1$13
        ([0,
          _dh_[12],
          _dh_[1],
          _dh_[2],
          _dh_[3],
          _dh_[4],
          _dh_[5],
          _dh_[6],
          _dh_[7],
          _dh_[8],
          _dh_[10],
          _dh_[11],
          _dh_[9]],
         _dg_);
    return [0, _di_[2], _di_[3], _di_[4]];
   }
   function _c2_(_dd_){
    var
     _de_ =
       [0,
        _dd_[13],
        _dd_[1],
        _dd_[2],
        _dd_[3],
        _dd_[4],
        _dd_[5],
        _dd_[6],
        _dd_[7],
        _dd_[8],
        _dd_[11],
        _dd_[10],
        _dd_[12],
        _dd_[9]];
    return function(_df_){return V1$14(_de_, _df_);};
   }
   function _c3_(_db_, _da_){
    var _dc_ = V1$12(_db_, _da_);
    return [0, _dc_[2], _dc_[3], _dc_[4]];
   }
   function _c4_(_c__, _c9_){
    var _c$_ = V1$11(_c__, _c9_);
    return [0, _c$_[2], _c$_[3], _c$_[4]];
   }
   function _c5_(_c7_, _c6_){
    var _c8_ = V2(_c7_, _c6_);
    return [0, _c8_[2], _c8_[3], _c8_[4]];
   }
   var
    Streamable_Main =
      [0,
       Of_atomic[1],
       Of_atomic_rpc[1],
       Of_map[2],
       _c5_,
       _c4_,
       _c3_,
       _c2_,
       _c1_,
       _c0_,
       _cZ_,
       _cY_,
       _cX_,
       _cW_,
       _cV_,
       _cU_,
       _cT_,
       _cS_,
       _cR_,
       _cQ_,
       _cP_,
       _cO_,
       _cN_,
       _cM_,
       _cL_,
       _cK_,
       _cJ_,
       _cI_,
       _cH_,
       _cG_,
       _cF_,
       _cE_,
       _cD_,
       _cC_,
       _cB_,
       V3$0,
       _cA_,
       _cz_,
       _cy_,
       _cx_,
       _cw_,
       _cv_,
       _cu_,
       _ct_,
       _cs_,
       V1$50,
       _cr_,
       _cq_,
       _cp_,
       _co_,
       _cn_,
       _cm_,
       Checked,
       _cl_,
       _ck_,
       _cj_];
   runtime.caml_register_global(876, Streamable_Main, cst_Streamable_Main$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Streamable__State_rpc_intf
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Streamable_State_rpc_intf = "Streamable__State_rpc_intf",
    cst_streamable = "streamable";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Streamable_State_rpc_intf);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_streamable);
   caml_call1(Ppx_expect_runtime[1][1], "src/state_rpc_intf.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_streamable, "state_rpc_intf.ml");
   caml_call1(Ppx_inline_test_lib[7], cst_streamable);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Streamable_State_rpc_intf);
   var Streamable_State_rpc_intf = [0];
   runtime.caml_register_global
    (11, Streamable_State_rpc_intf, cst_Streamable_State_rpc_intf);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Streamable__State_rpc
//# unitInfo: Requires: Async_kernel, Async_kernel__Deferred, Async_kernel__Deferred_or_error, Async_kernel__Ivar, Async_kernel__Pipe, Async_rpc_kernel__Rpc, Bin_prot__Common, Bin_prot__Read, Bin_prot__Shape, Bin_prot__Write, Bin_shape, Core, Core__Bigstring, Core__Core_bin_prot, Core__Error, Core__List, Core__Nothing, Core__Option, Core__Or_error, Core__Queue, Core__Result, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Streamable__State_rpc_intf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Streamable_State_rpc_incom$0 =
      "Streamable.State_rpc: incomplete state message",
    cst_Streamable_State_rpc_incom =
      "Streamable.State_rpc: incomplete update message",
    cst_Streamable_State_rpc$0 = "Streamable__State_rpc",
    cst_a = "a",
    cst_error$1 = "error",
    cst_query$1 = "query",
    cst_response$1 = "response",
    cst_src_state_rpc_ml_Response_$0 = "src/state_rpc.ml.Response.t",
    cst_state_part$1 = "state_part",
    cst_streamable$0 = "streamable",
    cst_t$2 = "t",
    cst_update_part$1 = "update_part";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Async_rpc_kernel_Rpc = global_data.Async_rpc_kernel__Rpc,
    Core_Or_error = global_data.Core__Or_error,
    Async_kernel_Deferred = global_data.Async_kernel__Deferred,
    Async_kernel_Pipe = global_data.Async_kernel__Pipe,
    Core_Result = global_data.Core__Result,
    Async_kernel_Deferred_or_error =
      global_data.Async_kernel__Deferred_or_error,
    Core_Queue = global_data.Core__Queue,
    Async_kernel = global_data.Async_kernel,
    Bin_shape = global_data.Bin_shape,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Core_Error = global_data.Core__Error,
    Core_List = global_data.Core__List,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Core = global_data.Core,
    Core_Bigstring = global_data.Core__Bigstring,
    Core_Option = global_data.Core__Option,
    Core_Nothing = global_data.Core__Nothing,
    Core_Core_bin_prot = global_data.Core__Core_bin_prot,
    Async_kernel_Ivar = global_data.Async_kernel__Ivar,
    Bin_prot_Read = global_data.Bin_prot__Read,
    Bin_prot_Common = global_data.Bin_prot__Common,
    Bin_prot_Write = global_data.Bin_prot__Write,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Streamable_State_rpc$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_streamable$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/state_rpc.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_streamable$0, "state_rpc.ml");
   var
    _a_ = caml_call1(Bin_shape[3][1], cst_a),
    _b_ = caml_call1(Bin_shape[4][1], "src/state_rpc.ml:35:14"),
    _c_ =
      [0,
       [0, "Part", [0, caml_call2(Bin_prot_Shape[11], _b_, _a_), 0]],
       [0, [0, "Done", 0], 0]],
    _d_ = caml_call1(Bin_prot_Shape[5], _c_),
    _e_ = [0, caml_call1(Bin_shape[3][1], cst_a), 0],
    _f_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$2), _e_, _d_], 0],
    _g_ = caml_call1(Bin_shape[4][1], "src/state_rpc.ml:34:2"),
    group = caml_call2(Bin_prot_Shape[2], _g_, _f_),
    _C_ =
      [0,
       [11, cst_Streamable_State_rpc_incom, 0],
       cst_Streamable_State_rpc_incom],
    cst_update = "update",
    _B_ =
      [0,
       [11, cst_Streamable_State_rpc_incom$0, 0],
       cst_Streamable_State_rpc_incom$0],
    cst_state = "state",
    _A_ =
      [0,
       [11, "Streamable.State_rpc: EOF before receiving complete ", [2, 0, 0]],
       "Streamable.State_rpc: EOF before receiving complete %s"],
    cst_query = cst_query$1,
    cst_src_state_rpc_ml_189_4 = "src/state_rpc.ml:189:4",
    cst_query$0 = cst_query$1,
    cst_response = cst_response$1,
    cst_src_state_rpc_ml_191_4 = "src/state_rpc.ml:191:4",
    cst_response$0 = cst_response$1,
    cst_error = cst_error$1,
    cst_src_state_rpc_ml_194_4 = "src/state_rpc.ml:194:4",
    cst_error$0 = cst_error$1,
    _z_ = [0, 0],
    _y_ = [1, 0],
    cst_Can_t_add_writer_to_State_ =
      "Can't add writer to State_rpc.Direct_writer.Group until it has finalised its initial state",
    _x_ = [1, 0],
    _w_ = [0, 0],
    _v_ = [1, 0],
    cst_Cannot_write_update_parts_ =
      "Cannot write update parts to State_rps.Direct_writer before finalising initial state",
    _u_ = [0, 0],
    cst_Cannot_write_state_parts_t =
      "Cannot write state parts to State_rpc.Direct_writer after finalising initial state",
    _t_ = [1, cst_src_state_rpc_ml_Response_$0],
    cst_src_state_rpc_ml_Response_ = cst_src_state_rpc_ml_Response_$0,
    cst_t$1 = cst_t$2,
    _h_ = [1, "src/state_rpc.ml.Part_or_done.t"],
    cst_t = cst_t$2,
    cst_update_part = cst_update_part$1,
    cst_src_state_rpc_ml_43_16 = "src/state_rpc.ml:43:16",
    cst_Update = "Update",
    cst_state_part = cst_state_part$1,
    cst_src_state_rpc_ml_42_15 = "src/state_rpc.ml:42:15",
    cst_State = "State",
    cst_update_part$0 = cst_update_part$1,
    cst_state_part$0 = cst_state_part$1,
    cst_t$0 = cst_t$2,
    cst_src_state_rpc_ml_41_2 = "src/state_rpc.ml:41:2",
    cst_streamable = cst_streamable$0,
    cst_Streamable_State_rpc = cst_Streamable_State_rpc$0;
   function bin_shape_t(a){
    var _a7_ = caml_call1(Bin_shape[2][1], cst_t);
    return caml_call1(caml_call2(Bin_prot_Shape[10], group, _a7_), [0, a, 0]);
   }
   function bin_size_t(size_of_a, param){
    if(! param) return 1;
    var v1 = param[1], _a6_ = caml_call1(size_of_a, v1);
    return caml_call2(Bin_prot_Common[23], 1, _a6_);
   }
   function bin_write_t(write_a, buf, pos, param){
    if(! param) return caml_call3(Bin_prot_Write[30], buf, pos, 1);
    var v1 = param[1], pos$0 = caml_call3(Bin_prot_Write[30], buf, pos, 0);
    return caml_call3(write_a, buf, pos$0, v1);
   }
   function bin_read_t(of_a, buf, pos_ref){
    var match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
    if(0 !== match)
     return 1 === match ? 0 : caml_call2(Bin_prot_Common[18], _h_, pos_ref[1]);
    var arg_1 = caml_call2(of_a, buf, pos_ref);
    return [0, arg_1];
   }
   var
    _i_ = caml_call1(Bin_shape[3][1], cst_update_part),
    _j_ = caml_call1(Bin_shape[4][1], cst_src_state_rpc_ml_43_16),
    _k_ =
      [0,
       [0,
        cst_Update,
        [0, bin_shape_t(caml_call2(Bin_prot_Shape[11], _j_, _i_)), 0]],
       0],
    _l_ = caml_call1(Bin_shape[3][1], cst_state_part),
    _m_ = caml_call1(Bin_shape[4][1], cst_src_state_rpc_ml_42_15),
    _n_ =
      [0,
       [0,
        cst_State,
        [0, bin_shape_t(caml_call2(Bin_prot_Shape[11], _m_, _l_)), 0]],
       _k_],
    _o_ = caml_call1(Bin_prot_Shape[5], _n_),
    _p_ = [0, caml_call1(Bin_shape[3][1], cst_update_part$0), 0],
    _q_ = [0, caml_call1(Bin_shape[3][1], cst_state_part$0), _p_],
    _r_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$0), _q_, _o_], 0],
    _s_ = caml_call1(Bin_shape[4][1], cst_src_state_rpc_ml_41_2),
    group$0 = caml_call2(Bin_prot_Shape[2], _s_, _r_);
   function bin_size_t$0(size_of_state_part, size_of_update_part, param){
    if(0 === param[0]){
     var v1 = param[1], _a4_ = bin_size_t(size_of_state_part, v1);
     return caml_call2(Bin_prot_Common[23], 1, _a4_);
    }
    var v1$0 = param[1], _a5_ = bin_size_t(size_of_update_part, v1$0);
    return caml_call2(Bin_prot_Common[23], 1, _a5_);
   }
   function bin_write_t$0
   (write_state_part, write_update_part, buf, pos, param){
    if(0 === param[0]){
     var v1 = param[1], pos$0 = caml_call3(Bin_prot_Write[30], buf, pos, 0);
     return bin_write_t(write_state_part, buf, pos$0, v1);
    }
    var v1$0 = param[1], pos$1 = caml_call3(Bin_prot_Write[30], buf, pos, 1);
    return bin_write_t(write_update_part, buf, pos$1, v1$0);
   }
   function bin_writer_t(bin_writer_state_part, bin_writer_update_part){
    function _aZ_(v){
     var _a0_ = bin_writer_update_part[2], _a1_ = bin_writer_state_part[2];
     return function(_a2_, _a3_){
      return bin_write_t$0(_a1_, _a0_, v, _a2_, _a3_);};
    }
    return [0,
            function(v){
             return bin_size_t$0
                     (bin_writer_state_part[1], bin_writer_update_part[1], v);
            },
            _aZ_];
   }
   function is_state_finalised(t){
    return caml_call1(Async_kernel_Ivar[18], t[2]);
   }
   function state_finalised(t){
    return caml_call1(Async_kernel_Ivar[19], t[2]);
   }
   function raise_if_finalised(t){
    var _aY_ = is_state_finalised(t);
    if(! _aY_) return _aY_;
    var
     _aX_ = caml_call1(Sexplib0_Sexp_conv[7], cst_Cannot_write_state_parts_t);
    return caml_call1(Core[261], _aX_);
   }
   function write_state_without_pushback_e(t, state){
    raise_if_finalised(t);
    return caml_call2(Async_rpc_kernel_Rpc[10][10][2], t[1], [0, [0, state]]);
   }
   function finalise_state_without_pushbac(t){
    raise_if_finalised(t);
    return 17724 <= caml_call2(Async_rpc_kernel_Rpc[10][10][2], t[1], _u_)
            ? (caml_call2(Async_kernel_Ivar[14], t[2], 0), 17724)
            : -1025106484;
   }
   function raise_if_not_finalised(t){
    var _aW_ = 1 - is_state_finalised(t);
    if(! _aW_) return _aW_;
    var
     _aV_ = caml_call1(Sexplib0_Sexp_conv[7], cst_Cannot_write_update_parts_);
    return caml_call1(Core[261], _aV_);
   }
   function write_update_without_pushback_(t, update){
    raise_if_not_finalised(t);
    return caml_call2(Async_rpc_kernel_Rpc[10][10][2], t[1], [1, [0, update]]);
   }
   function finalise_update_without_pushba(t){
    raise_if_not_finalised(t);
    return caml_call2(Async_rpc_kernel_Rpc[10][10][2], t[1], _v_);
   }
   function close(t){
    return caml_call1(Async_rpc_kernel_Rpc[10][10][3], t[1]);
   }
   function closed(t){
    return caml_call1(Async_rpc_kernel_Rpc[10][10][4], t[1]);
   }
   function flushed(t){
    return caml_call1(Async_rpc_kernel_Rpc[10][10][5], t[1]);
   }
   function is_closed(t){
    return caml_call1(Async_rpc_kernel_Rpc[10][10][6], t[1]);
   }
   function create_state_part(state_bin_writer, state_part){
    var _aU_ = bin_writer_t(state_bin_writer, Core_Nothing[19]);
    return caml_call2(Core_Core_bin_prot[1][3], _aU_, [0, [0, state_part]]);
   }
   var
    finalise_state_message =
      [246,
       function(param){
        var _aT_ = bin_writer_t(Core_Nothing[19], Core_Nothing[19]);
        return caml_call2(Core_Core_bin_prot[1][3], _aT_, _w_);
       }];
   function create_update_part(update_bin_writer, update_part){
    var _aS_ = bin_writer_t(Core_Nothing[19], update_bin_writer);
    return caml_call2(Core_Core_bin_prot[1][3], _aS_, [1, [0, update_part]]);
   }
   var
    finalise_update_message =
      [246,
       function(param){
        var _aR_ = bin_writer_t(Core_Nothing[19], Core_Nothing[19]);
        return caml_call2(Core_Core_bin_prot[1][3], _aR_, _x_);
       }];
   function write_without_pushback(opt, len, t, buf){
    if(opt) var sth = opt[1], pos = sth; else var pos = 0;
    function _aQ_(param){return caml_call1(Core_Bigstring[21], buf);}
    var len$0 = caml_call2(Core_Option[42], len, _aQ_);
    return caml_call4
            (Async_rpc_kernel_Rpc[10][10][7][2], t[1], buf, pos, len$0);
   }
   var
    Expert =
      [0,
       create_state_part,
       finalise_state_message,
       create_update_part,
       finalise_update_message,
       write_without_pushback],
    create = Async_rpc_kernel_Rpc[10][10][8][2],
    flushed_or_closed = Async_rpc_kernel_Rpc[10][10][8][3];
   function add_exn(t, writer){
    if(1 - is_state_finalised(writer)){
     var
      _aP_ = caml_call1(Sexplib0_Sexp_conv[7], cst_Can_t_add_writer_to_State_);
     caml_call1(Core[261], _aP_);
    }
    return caml_call2(Async_rpc_kernel_Rpc[10][10][8][5], t, writer[1]);
   }
   function remove(t, writer){
    return caml_call2(Async_rpc_kernel_Rpc[10][10][8][6], t, writer[1]);
   }
   function write_update_without_pushback(t, update){
    return caml_call2(Async_rpc_kernel_Rpc[10][10][8][8], t, [1, [0, update]]);
   }
   function finalise_update_without_pushba$0(t){
    return caml_call2(Async_rpc_kernel_Rpc[10][10][8][8], t, _y_);
   }
   var length = Async_rpc_kernel_Rpc[10][10][8][10];
   function close_all(t){
    var
     _aN_ = Async_rpc_kernel_Rpc[10][10][3],
     _aO_ = caml_call1(Async_rpc_kernel_Rpc[10][10][8][9], t);
    return caml_call2(Core_List[19], _aO_, _aN_);
   }
   var
    Group =
      [0,
       create,
       flushed_or_closed,
       add_exn,
       remove,
       write_update_without_pushback,
       finalise_update_without_pushba$0,
       length,
       close_all];
   function description(X){return X[14][4];}
   function dispatch(X){return X[14][1];}
   function dispatch$0(X){return X[14][2];}
   function implement(on_exception, X){
    return caml_call1(X[14][3], on_exception);
   }
   function bin_query_shape(X){return X[10][1];}
   function bin_state_shape(X){return X[11][1][1][8][1];}
   function bin_update_shape(X){return X[12][1][1][8][1];}
   caml_call1(Ppx_inline_test_lib[7], cst_streamable);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Streamable_State_rpc);
   var
    Streamable_State_rpc =
      [0,
       description,
       dispatch,
       dispatch$0,
       implement,
       bin_query_shape,
       bin_state_shape,
       bin_update_shape,
       [0,
        write_state_without_pushback_e,
        finalise_state_without_pushbac,
        is_state_finalised,
        state_finalised,
        write_update_without_pushback_,
        finalise_update_without_pushba,
        close,
        closed,
        flushed,
        is_closed,
        Expert,
        Group],
       function(X){
        var
         _F_ = X[3],
         _G_ = [0, [0, caml_call1(Bin_shape[2][1], cst_query), 0, _F_], 0],
         _H_ = caml_call1(Bin_shape[4][1], cst_src_state_rpc_ml_189_4),
         group = caml_call2(Bin_prot_Shape[2], _H_, _G_),
         _I_ = caml_call1(Bin_shape[2][1], cst_query$0),
         bin_shape_query =
           caml_call1(caml_call2(Bin_prot_Shape[10], group, _I_), 0),
         bin_size_query = X[4],
         bin_write_query = X[5],
         bin_writer_query = [0, bin_size_query, bin_write_query],
         bin_read_query = X[8],
         bin_read_query$0 = X[7],
         bin_reader_query = [0, bin_read_query$0, bin_read_query],
         bin_query = [0, bin_shape_query, bin_writer_query, bin_reader_query],
         update_part = X[12][1][1][5],
         state_part = X[11][1][1][5],
         _D_ = caml_call1(Bin_shape[2][1], cst_t$1),
         _E_ =
           caml_call1
            (caml_call2(Bin_prot_Shape[10], group$0, _D_),
             [0, state_part, [0, update_part, 0]]),
         _J_ = [0, [0, caml_call1(Bin_shape[2][1], cst_response), 0, _E_], 0],
         _K_ = caml_call1(Bin_shape[4][1], cst_src_state_rpc_ml_191_4),
         group$1 = caml_call2(Bin_prot_Shape[2], _K_, _J_),
         _L_ = caml_call1(Bin_shape[2][1], cst_response$0),
         bin_shape_response =
           caml_call1(caml_call2(Bin_prot_Shape[10], group$1, _L_), 0);
        function bin_size_response(v){
         return bin_size_t$0(X[11][1][1][1], X[12][1][1][1], v);
        }
        function bin_write_response(buf, pos, v){
         return bin_write_t$0(X[11][1][1][2], X[12][1][1][2], buf, pos, v);
        }
        var bin_writer_response = [0, bin_size_response, bin_write_response];
        function bin_read_response(buf, pos_ref, vint){
         return caml_call2
                 (Bin_prot_Common[19],
                  cst_src_state_rpc_ml_Response_,
                  pos_ref[1]);
        }
        function bin_read_response$0(buf, pos_ref){
         var
          of_update_part = X[12][1][1][3],
          of_state_part = X[11][1][1][3],
          match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
         if(0 === match){
          var arg_1$0 = bin_read_t(of_state_part, buf, pos_ref);
          return [0, arg_1$0];
         }
         if(1 !== match)
          return caml_call2(Bin_prot_Common[18], _t_, pos_ref[1]);
         var arg_1 = bin_read_t(of_update_part, buf, pos_ref);
         return [1, arg_1];
        }
        var
         bin_reader_response = [0, bin_read_response$0, bin_read_response],
         bin_response =
           [0, bin_shape_response, bin_writer_response, bin_reader_response],
         _M_ = Core_Error[43][2][11],
         _N_ = [0, [0, caml_call1(Bin_shape[2][1], cst_error), 0, _M_], 0],
         _O_ = caml_call1(Bin_shape[4][1], cst_src_state_rpc_ml_194_4),
         group$2 = caml_call2(Bin_prot_Shape[2], _O_, _N_),
         _P_ = caml_call1(Bin_shape[2][1], cst_error$0),
         bin_shape_error =
           caml_call1(caml_call2(Bin_prot_Shape[10], group$2, _P_), 0),
         bin_size_error = Core_Error[43][2][7],
         bin_write_error = Core_Error[43][2][8],
         bin_writer_error = [0, bin_size_error, bin_write_error],
         bin_read_error = Core_Error[43][2][10],
         bin_read_error$0 = Core_Error[43][2][9],
         bin_reader_error = [0, bin_read_error$0, bin_read_error],
         bin_error = [0, bin_shape_error, bin_writer_error, bin_reader_error],
         _Q_ = 0,
         _R_ = X[2],
         _S_ = X[1],
         _T_ = X[13] ? _z_ : 0,
         rpc =
           caml_call7
            (Async_rpc_kernel_Rpc[10][3],
             _T_,
             _S_,
             _R_,
             bin_query,
             bin_response,
             bin_error,
             _Q_);
        function write_msg(w, pipe, constructor){
         function _aJ_(param){
          var _aM_ = caml_call1(constructor, 0);
          return caml_call2(Async_kernel_Pipe[34], w, _aM_);
         }
         function _aK_(part){return caml_call1(constructor, [0, part]);}
         var _aL_ = caml_call3(Async_kernel_Pipe[57], pipe, w, _aK_);
         return caml_call2(Async_kernel_Deferred[16][4][2], _aL_, _aJ_);
        }
        function read_msg(X, r, match, noun){
         function loop(acc){
          function _aF_(param){
           if(typeof param === "number")
            return caml_call2(Async_kernel_Deferred_or_error[27], _A_, noun);
           var msg = param[2], match$0 = caml_call1(match, msg);
           if(0 !== match$0[0]){
            var e = match$0[1];
            return caml_call1(Async_kernel_Deferred[12], [1, e]);
           }
           var match$1 = match$0[1];
           if(match$1){
            var part = match$1[1];
            return loop(caml_call2(X[1][3], acc, part));
           }
           var _aI_ = caml_call1(X[3], acc);
           return caml_call1(Async_kernel_Deferred_or_error[19][1], _aI_);
          }
          var
           _aG_ = caml_call2(Async_kernel_Pipe[37], 0, r),
           _aH_ = caml_call1(Async_kernel_Deferred[33], _aG_);
          return caml_call2
                  (Async_kernel_Deferred_or_error[19][4][2], _aH_, _aF_);
         }
         return loop(caml_call1(X[1][2], 0));
        }
        var
         description = caml_call1(Async_rpc_kernel_Rpc[10][23], rpc),
         include = X[11],
         Intermediate = include[1],
         to_parts = include[2],
         finalize = include[3],
         State = [0, Intermediate, to_parts, finalize],
         include$0 = X[12],
         Intermediate$0 = include$0[1],
         to_parts$0 = include$0[2],
         finalize$0 = include$0[3],
         Update = [0, Intermediate$0, to_parts$0, finalize$0];
        function implement(on_exception, f){
         function _au_(c, q){
          function _av_(param){
           var update_pipes = param[2], state_pipe = param[1];
           function _ax_(w){
            function _az_(param){
             var
              match = caml_call3(Async_kernel_Pipe[40], 0, 0, update_pipes);
             if(typeof match !== "number"){
              var
               queue = match[2],
               _aE_ =
                 function(update_pipe){
                  return caml_call1(Async_kernel_Pipe[16], update_pipe);
                 };
              caml_call2(Core_Queue[18], queue, _aE_);
             }
             return caml_call1(Async_kernel_Pipe[16], update_pipes);
            }
            var _aA_ = caml_call1(Async_kernel_Pipe[18], w);
            caml_call2(Async_kernel[12], _aA_, _az_);
            function _aB_(param){
             function _aD_(update_pipe){
              return write_msg(w, update_pipe, function(x){return [1, x];});
             }
             return caml_call4
                     (Async_kernel_Pipe[54], 0, 0, update_pipes, _aD_);
            }
            var _aC_ = write_msg(w, state_pipe, function(x){return [0, x];});
            return caml_call2(Async_kernel_Deferred[16][4][2], _aC_, _aB_);
           }
           var _ay_ = caml_call3(Async_kernel_Pipe[5], 0, 1, _ax_);
           return caml_call1(Async_kernel_Deferred_or_error[19][1], _ay_);
          }
          var _aw_ = caml_call2(f, c, q);
          return caml_call2
                  (Async_kernel_Deferred_or_error[19][4][2], _aw_, _av_);
         }
         return caml_call3
                 (Async_rpc_kernel_Rpc[10][8], on_exception, rpc, _au_);
        }
        function implement$0(on_exception, f){
         return implement
                 (on_exception,
                  function(c, q){
                   function _an_(param){
                    var updates = param[2], state = param[1];
                    function _ap_(update){
                     var _at_ = caml_call1(Update[2], update);
                     return caml_call1(Async_kernel_Pipe[13], _at_);
                    }
                    var
                     _aq_ = caml_call2(Async_kernel_Pipe[60], updates, _ap_),
                     _ar_ = caml_call1(State[2], state),
                     _as_ = [0, caml_call1(Async_kernel_Pipe[13], _ar_), _aq_];
                    return caml_call1
                            (Async_kernel_Deferred_or_error[19][1], _as_);
                   }
                   var _ao_ = caml_call2(f, c, q);
                   return caml_call2
                           (Async_kernel_Deferred_or_error[19][4][2], _ao_, _an_);
                  });
        }
        function dispatch(conn, query){
         function _X_(server_response){
          if(0 !== server_response[0])
           return caml_call1
                   (Async_kernel_Deferred_or_error[19][1], server_response);
          var r = server_response[1][1];
          function ___(initial_state){
           function _$_(w){
            function loop(param){
             function _ad_(param){
              if(! param) return caml_call1(Async_kernel_Deferred[16][1], 0);
              var update = param[1];
              function _al_(param){return loop(0);}
              var _am_ = caml_call2(Async_kernel_Pipe[34], w, update);
              return caml_call2(Async_kernel_Deferred[16][4][2], _am_, _al_);
             }
             var _ae_ = 0;
             function _af_(param){return 0;}
             var
              _ag_ = caml_call1(Async_kernel_Pipe[18], w),
              _ah_ =
                [0, caml_call2(Async_kernel_Deferred[27], _ag_, _af_), _ae_],
              _ai_ = Core_Result[39],
              _ac_ =
                read_msg
                 (Update,
                  r,
                  function(param){
                   if(0 === param[0])
                    return caml_call1(Core_Or_error[47], _C_);
                   var x = param[1];
                   return [0, x];
                  },
                  cst_update),
              _aj_ =
                [0, caml_call2(Async_kernel_Deferred[27], _ac_, _ai_), _ah_],
              _ak_ = caml_call1(Async_kernel_Deferred[29], _aj_);
             return caml_call2(Async_kernel_Deferred[16][4][2], _ak_, _ad_);
            }
            function _aa_(param){
             caml_call1(Async_kernel_Pipe[16], r);
             return caml_call1(Async_kernel_Deferred[16][1], 0);
            }
            var _ab_ = loop(0);
            return caml_call2(Async_kernel_Deferred[16][4][2], _ab_, _aa_);
           }
           var updates = caml_call3(Async_kernel_Pipe[5], 0, 1, _$_);
           return caml_call1
                   (Async_kernel_Deferred_or_error[19][1],
                    [0, [0, initial_state, updates]]);
          }
          var
           _Z_ =
             read_msg
              (State,
               r,
               function(param){
                if(0 !== param[0]) return caml_call1(Core_Or_error[47], _B_);
                var x = param[1];
                return [0, x];
               },
               cst_state);
          return caml_call2
                  (Async_kernel_Deferred_or_error[19][4][2], _Z_, ___);
         }
         var _Y_ = caml_call3(Async_rpc_kernel_Rpc[10][13], rpc, conn, query);
         return caml_call2(Async_kernel_Deferred_or_error[19][4][2], _Y_, _X_);
        }
        function dispatch$0(conn, query){
         var _V_ = Core_Or_error[31], _W_ = dispatch(conn, query);
         return caml_call2(Async_kernel_Deferred[13], _W_, _V_);
        }
        var
         name = X[1],
         version = X[2],
         bin_shape_query$0 = X[3],
         bin_size_query$0 = X[4],
         bin_write_query$0 = X[5],
         bin_writer_query$0 = X[6],
         bin_read_query$1 = X[7],
         bin_read_query$2 = X[8],
         bin_reader_query$0 = X[9],
         bin_query$0 = X[10],
         State$0 = X[11],
         Update$0 = X[12],
         client_pushes_back = X[13],
         rpc$0 =
           [0,
            name,
            version,
            bin_shape_query$0,
            bin_size_query$0,
            bin_write_query$0,
            bin_writer_query$0,
            bin_read_query$1,
            bin_read_query$2,
            bin_reader_query$0,
            bin_query$0,
            State$0,
            Update$0,
            client_pushes_back,
            [0, dispatch$0, dispatch, implement$0, description]];
        function implement_direct(on_exception, f){
         function _U_(c, q, writer){
          return caml_call3
                  (f, c, q, [0, writer, caml_call1(Async_kernel_Ivar[12], 0)]);
         }
         return caml_call3
                 (Async_rpc_kernel_Rpc[10][11], on_exception, rpc, _U_);
        }
        return [0, rpc$0, implement, implement_direct];
       }];
   runtime.caml_register_global
    (79, Streamable_State_rpc, cst_Streamable_State_rpc$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Streamable__Versioned_state_rpc_intf
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Streamable_Versioned_state = "Streamable__Versioned_state_rpc_intf",
    cst_streamable = "streamable";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Streamable_Versioned_state);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_streamable);
   caml_call1(Ppx_expect_runtime[1][1], "src/versioned_state_rpc_intf.ml");
   caml_call2
    (Ppx_inline_test_lib[6], cst_streamable, "versioned_state_rpc_intf.ml");
   caml_call1(Ppx_inline_test_lib[7], cst_streamable);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Streamable_Versioned_state);
   var Streamable_Versioned_state_rpc = [0];
   runtime.caml_register_global
    (11, Streamable_Versioned_state_rpc, cst_Streamable_Versioned_state);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Streamable__Callers_rpc_version_table
//# unitInfo: Requires: Async_rpc_kernel__Versioned_rpc, Base__Or_error, Core, Core__Hashtbl, Core__Int, Core__Or_error, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Streamable_Callers_rpc_ver$0 = "Streamable__Callers_rpc_version_table",
    cst_rpc_name = "rpc_name",
    cst_streamable$0 = "streamable",
    cst_version = "version";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Core = global_data.Core,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Core_Hashtbl = global_data.Core__Hashtbl,
    Core_Or_error = global_data.Core__Or_error,
    Core_Int = global_data.Core__Int,
    Async_rpc_kernel_Versioned_rpc =
      global_data.Async_rpc_kernel__Versioned_rpc,
    Base_Or_error = global_data.Base__Or_error,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Streamable_Callers_rpc_ver$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_streamable$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/callers_rpc_version_table.ml");
   caml_call2
    (Ppx_inline_test_lib[6], cst_streamable$0, "callers_rpc_version_table.ml");
   var
    _c_ = [0, cst_version],
    _d_ = [0, cst_rpc_name],
    cst_unknown_rpc = "unknown rpc",
    _a_ = [0, cst_version],
    _b_ = [0, cst_rpc_name],
    cst_rpc_registered_multiple_ti = "rpc registered multiple times",
    cst_streamable = cst_streamable$0,
    cst_Streamable_Callers_rpc_ver = cst_Streamable_Callers_rpc_ver$0;
   function create(rpc_name){
    return [0, rpc_name, caml_call3(Core_Int[103][5], 0, 0, 0)];
   }
   function data(t){return caml_call1(Core_Hashtbl[68], t[2]);}
   function add_exn(param, version, data){
    var table = param[2], rpc_name = param[1];
    if(17724 <= caml_call3(Core_Hashtbl[38], table, version, data)) return 0;
    var
     _k_ = [0, [1, [0, _a_, [0, caml_call1(Core[389], version), 0]]], 0],
     _l_ = [0, [1, [0, _b_, [0, caml_call1(Core[558], rpc_name), 0]]], _k_],
     _m_ =
       [1,
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_rpc_registered_multiple_ti),
         _l_]];
    return caml_call1(Core[261], _m_);
   }
   function lookup_most_recent(t, callee_menu){
    var
     rpc_name = t[1],
     _e_ = caml_call1(Core_Hashtbl[67], t[2]),
     caller_versions = caml_call1(Core_Int[99][8], _e_);
    function _f_(version){
     var match = caml_call2(Core_Hashtbl[56], t[2], version);
     if(match){var data = match[1]; return [0, data];}
     var
      _h_ = [0, [1, [0, _c_, [0, caml_call1(Core[389], version), 0]]], 0],
      _i_ = [0, [1, [0, _d_, [0, caml_call1(Core[558], rpc_name), 0]]], _h_],
      _j_ = [1, [0, caml_call1(Sexplib0_Sexp_conv[7], cst_unknown_rpc), _i_]];
     return caml_call1(Core_Or_error[45], _j_);
    }
    var
     _g_ =
       caml_call3
        (Async_rpc_kernel_Versioned_rpc[1][9],
         rpc_name,
         callee_menu,
         caller_versions);
    return caml_call2(Base_Or_error[28][4][2], _g_, _f_);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_streamable);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Streamable_Callers_rpc_ver);
   var
    Streamable_Callers_rpc_version =
      [0, create, add_exn, lookup_most_recent, data];
   runtime.caml_register_global
    (24, Streamable_Callers_rpc_version, cst_Streamable_Callers_rpc_ver$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Streamable__Versioned_state_rpc
//# unitInfo: Requires: Async_kernel, Async_kernel__Deferred, Async_kernel__Deferred_or_error, Async_kernel__Pipe, Async_rpc_kernel__Versioned_rpc, Core__List, Core__Or_error, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Streamable__Callers_rpc_version_table, Streamable__State_rpc, Streamable__Versioned_state_rpc_intf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Streamable_Versioned_state$0 = "Streamable__Versioned_state_rpc",
    cst_streamable$0 = "streamable";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    Async_kernel_Pipe = global_data.Async_kernel__Pipe,
    Async_kernel_Deferred_or_error =
      global_data.Async_kernel__Deferred_or_error,
    Streamable_State_rpc = global_data.Streamable__State_rpc,
    Streamable_Callers_rpc_version =
      global_data.Streamable__Callers_rpc_version_table,
    Core_List = global_data.Core__List,
    Core_Or_error = global_data.Core__Or_error,
    Async_kernel_Deferred = global_data.Async_kernel__Deferred,
    Async_rpc_kernel_Versioned_rpc =
      global_data.Async_rpc_kernel__Versioned_rpc,
    Async_kernel = global_data.Async_kernel,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Streamable_Versioned_state$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_streamable$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/versioned_state_rpc.ml");
   caml_call2
    (Ppx_inline_test_lib[6], cst_streamable$0, "versioned_state_rpc.ml");
   var
    cst_streamable = cst_streamable$0,
    cst_Streamable_Versioned_state = cst_Streamable_Versioned_state$0;
   function Make(Model){
    var
     name = Model[1],
     registry = caml_call1(Streamable_Callers_rpc_version[1], name);
    function dispatch_multi(conn_with_menu, query){
     var
      conn = caml_call1(Async_rpc_kernel_Versioned_rpc[2][3], conn_with_menu),
      menu = caml_call1(Async_rpc_kernel_Versioned_rpc[2][4], conn_with_menu),
      match = caml_call2(Streamable_Callers_rpc_version[3], registry, menu);
     if(0 === match[0]){
      var dispatch = match[1];
      return caml_call2(dispatch, conn, query);
     }
     var e = match[1];
     return caml_call1(Async_kernel[20], [1, e]);
    }
    function dispatch_multi$0(conn_with_menu, query){
     var _C_ = Core_Or_error[31], _D_ = dispatch_multi(conn_with_menu, query);
     return caml_call2(Async_kernel_Deferred[13], _D_, _C_);
    }
    function Register(Version){
     var
      bin_shape_query = Version[1],
      bin_size_query = Version[2],
      bin_write_query = Version[3],
      bin_writer_query = Version[4],
      bin_read_query = Version[5],
      bin_read_query$0 = Version[6],
      bin_reader_query = Version[7],
      bin_query = Version[8],
      State = Version[9],
      Update = Version[10],
      version = Version[11],
      client_pushes_back = Version[15],
      include =
        caml_call1
         (Streamable_State_rpc[9],
          [0,
           name,
           version,
           bin_shape_query,
           bin_size_query,
           bin_write_query,
           bin_writer_query,
           bin_read_query,
           bin_read_query$0,
           bin_reader_query,
           bin_query,
           State,
           Update,
           client_pushes_back]),
      rpc = include[1],
      implement = include[2],
      version$0 = Version[11];
     function dispatch(conn, query){
      var query$0 = caml_call1(Version[12], query);
      function _w_(server_response){
       function _y_(param){
        var
         updates = param[2],
         state = param[1],
         state$0 = caml_call1(Version[13], state);
        function _A_(update){
         function _B_(param){return caml_call1(Version[14], update);}
         return caml_call2(Core_Or_error[37], 0, _B_);
        }
        var updates$0 = caml_call2(Async_kernel_Pipe[60], updates, _A_);
        return [0, state$0, updates$0];
       }
       var _z_ = caml_call2(Core_Or_error[53], server_response, _y_);
       return caml_call1(Async_kernel_Deferred_or_error[19][1], _z_);
      }
      var _x_ = caml_call3(Streamable_State_rpc[3], rpc, conn, query$0);
      return caml_call2(Async_kernel_Deferred_or_error[19][4][2], _x_, _w_);
     }
     caml_call3
      (Streamable_Callers_rpc_version[2], registry, version$0, dispatch);
     return [0, rpc, implement];
    }
    return [0, name, , dispatch_multi, dispatch_multi$0, Register];
   }
   function Make$0(Model){
    var
     name = Model[1],
     registry = caml_call1(Streamable_Callers_rpc_version[1], name);
    function implement_multi(on_exception, f){
     function _u_(param){
      var implement = param[1];
      return caml_call2(implement, on_exception, f);
     }
     var _v_ = caml_call1(Streamable_Callers_rpc_version[4], registry);
     return caml_call2(Core_List[51], _v_, _u_);
    }
    function Register(Version){
     var
      bin_shape_query = Version[1],
      bin_size_query = Version[2],
      bin_write_query = Version[3],
      bin_writer_query = Version[4],
      bin_read_query = Version[5],
      bin_read_query$0 = Version[6],
      bin_reader_query = Version[7],
      bin_query = Version[8],
      State = Version[9],
      Update = Version[10],
      version = Version[11],
      client_pushes_back = Version[15],
      include =
        caml_call1
         (Streamable_State_rpc[9],
          [0,
           name,
           version,
           bin_shape_query,
           bin_size_query,
           bin_write_query,
           bin_writer_query,
           bin_read_query,
           bin_read_query$0,
           bin_reader_query,
           bin_query,
           State,
           Update,
           client_pushes_back]),
      rpc = include[1],
      implement = include[2],
      version$0 = Version[11];
     function implement$0(on_exception, f){
      function _r_(conn_state, query){
       var query$0 = caml_call1(Version[12], query);
       function _s_(param){
        var
         updates = param[2],
         state = param[1],
         state$0 = caml_call1(Version[13], state),
         updates$0 = caml_call2(Async_kernel_Pipe[60], updates, Version[14]);
        return caml_call1
                (Async_kernel_Deferred_or_error[19][1],
                 [0, state$0, updates$0]);
       }
       var _t_ = caml_call3(f, conn_state, version$0, query$0);
       return caml_call2(Async_kernel_Deferred_or_error[19][4][2], _t_, _s_);
      }
      return caml_call3(Streamable_State_rpc[4], on_exception, rpc, _r_);
     }
     caml_call3
      (Streamable_Callers_rpc_version[2],
       registry,
       version$0,
       [0, implement$0]);
     return [0, rpc, implement];
    }
    return [0, name, , implement_multi, Register];
   }
   caml_call1(Ppx_inline_test_lib[7], cst_streamable);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Streamable_Versioned_state);
   var
    _a_ =
      [0,
       function(Model){
        var
         name = Model[1],
         Caller = Make([0, name]),
         Callee = Make$0([0, name]),
         dispatch_multi = Caller[4],
         dispatch_multi$0 = Caller[3],
         implement_multi = Callee[3];
        return [0,
                function(Version){
                 var
                  version = Version[1],
                  bin_shape_query = Version[2],
                  bin_size_query = Version[3],
                  bin_write_query = Version[4],
                  bin_writer_query = Version[5],
                  bin_read_query = Version[6],
                  bin_read_query$0 = Version[7],
                  bin_reader_query = Version[8],
                  bin_query = Version[9],
                  State = Version[10],
                  Update = Version[11],
                  callee_model_of_query = Version[13],
                  state_of_callee_model = Version[14],
                  update_of_callee_model = Version[16],
                  client_pushes_back = Version[18];
                 Callee[4].call
                  (null,
                   [0,
                    bin_shape_query,
                    bin_size_query,
                    bin_write_query,
                    bin_writer_query,
                    bin_read_query,
                    bin_read_query$0,
                    bin_reader_query,
                    bin_query,
                    State,
                    Update,
                    version,
                    callee_model_of_query,
                    state_of_callee_model,
                    update_of_callee_model,
                    client_pushes_back]);
                 var
                  version$0 = Version[1],
                  bin_shape_query$0 = Version[2],
                  bin_size_query$0 = Version[3],
                  bin_write_query$0 = Version[4],
                  bin_writer_query$0 = Version[5],
                  bin_read_query$1 = Version[6],
                  bin_read_query$2 = Version[7],
                  bin_reader_query$0 = Version[8],
                  bin_query$0 = Version[9],
                  State$0 = Version[10],
                  Update$0 = Version[11],
                  query_of_caller_model = Version[12],
                  caller_model_of_state = Version[15],
                  caller_model_of_update = Version[17],
                  client_pushes_back$0 = Version[18],
                  include =
                    Caller[5].call
                     (null,
                      [0,
                       bin_shape_query$0,
                       bin_size_query$0,
                       bin_write_query$0,
                       bin_writer_query$0,
                       bin_read_query$1,
                       bin_read_query$2,
                       bin_reader_query$0,
                       bin_query$0,
                       State$0,
                       Update$0,
                       version$0,
                       query_of_caller_model,
                       caller_model_of_state,
                       caller_model_of_update,
                       client_pushes_back$0]),
                  rpc = include[1],
                  implement = include[2];
                 return [0, rpc, implement];
                },
                dispatch_multi,
                dispatch_multi$0,
                implement_multi,
                name];
       }],
    _b_ =
      [0,
       function(_k_){
        var _l_ = Make$0(_k_), _m_ = _l_[1], _n_ = _l_[3], _o_ = _l_[4];
        return [0,
                function(_p_){
                 var
                  _q_ =
                    _o_
                     ([0,
                       _p_[2],
                       _p_[3],
                       _p_[4],
                       _p_[5],
                       _p_[6],
                       _p_[7],
                       _p_[8],
                       _p_[9],
                       _p_[10],
                       _p_[11],
                       _p_[1],
                       _p_[12],
                       _p_[13],
                       _p_[14],
                       _p_[15]]);
                 return [0, _q_[1], _q_[2]];
                },
                _n_,
                _m_];
       }],
    Streamable_Versioned_state_rpc =
      [0,
       [0,
        function(_c_){
         var
          _d_ = Make(_c_),
          _e_ = _d_[1],
          _f_ = _d_[3],
          _g_ = _d_[4],
          _h_ = _d_[5];
         return [0,
                 function(_i_){
                  var
                   _j_ =
                     _h_
                      ([0,
                        _i_[2],
                        _i_[3],
                        _i_[4],
                        _i_[5],
                        _i_[6],
                        _i_[7],
                        _i_[8],
                        _i_[9],
                        _i_[10],
                        _i_[11],
                        _i_[1],
                        _i_[12],
                        _i_[13],
                        _i_[14],
                        _i_[15]]);
                  return [0, _j_[1], _j_[2]];
                 },
                 _g_,
                 _f_,
                 _e_];
        }],
       _b_,
       _a_];
   runtime.caml_register_global
    (20, Streamable_Versioned_state_rpc, cst_Streamable_Versioned_state$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Streamable__Plain_rpc_intf
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Streamable_Plain_rpc_intf = "Streamable__Plain_rpc_intf",
    cst_streamable = "streamable";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Streamable_Plain_rpc_intf);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_streamable);
   caml_call1(Ppx_expect_runtime[1][1], "src/plain_rpc_intf.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_streamable, "plain_rpc_intf.ml");
   caml_call1(Ppx_inline_test_lib[7], cst_streamable);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Streamable_Plain_rpc_intf);
   var Streamable_Plain_rpc_intf = [0];
   runtime.caml_register_global
    (11, Streamable_Plain_rpc_intf, cst_Streamable_Plain_rpc_intf);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Streamable__Plain_rpc
//# unitInfo: Requires: Async_kernel__Deferred, Async_kernel__Deferred_or_error, Async_kernel__Pipe, Bin_prot__Shape, Bin_shape, Core__Nothing, Core__Or_error, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Streamable__Main, Streamable__Plain_rpc_intf, Streamable__State_rpc
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Streamable_Plain_rpc$0 = "Streamable__Plain_rpc",
    cst_query$1 = "query",
    cst_streamable$0 = "streamable";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Streamable_State_rpc = global_data.Streamable__State_rpc,
    Core_Or_error = global_data.Core__Or_error,
    Async_kernel_Deferred = global_data.Async_kernel__Deferred,
    Async_kernel_Pipe = global_data.Async_kernel__Pipe,
    Async_kernel_Deferred_or_error =
      global_data.Async_kernel__Deferred_or_error,
    Bin_shape = global_data.Bin_shape,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Core_Nothing = global_data.Core__Nothing,
    Streamable_Main = global_data.Streamable__Main;
   caml_call1(Ppx_module_timer_runtime[4], cst_Streamable_Plain_rpc$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_streamable$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/plain_rpc.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_streamable$0, "plain_rpc.ml");
   var
    cst_query = cst_query$1,
    cst_src_plain_rpc_ml_55_4 = "src/plain_rpc.ml:55:4",
    cst_query$0 = cst_query$1,
    cst_streamable = cst_streamable$0,
    cst_Streamable_Plain_rpc = cst_Streamable_Plain_rpc$0;
   function plain_impl_to_state(f, conn, query){
    function _s_(response){
     function _u_(param){return Async_kernel_Deferred[18];}
     var empty = caml_call3(Async_kernel_Pipe[5], 0, 0, _u_);
     return caml_call1
             (Async_kernel_Deferred_or_error[13], [0, response, empty]);
    }
    var _t_ = caml_call2(f, conn, query);
    return caml_call2(Async_kernel_Deferred_or_error[19][4][2], _t_, _s_);
   }
   var
    Update =
      caml_call1
       (Streamable_Main[1],
        [0,
         Core_Nothing[14],
         Core_Nothing[15],
         Core_Nothing[16],
         Core_Nothing[17],
         Core_Nothing[18],
         Core_Nothing[19],
         Core_Nothing[20],
         Core_Nothing[21],
         Core_Nothing[22],
         Core_Nothing[23]]),
    write_response_without_pushbac = Streamable_State_rpc[8][1],
    finalise_response_without_push = Streamable_State_rpc[8][2],
    is_response_finalised = Streamable_State_rpc[8][3],
    response_finalised = Streamable_State_rpc[8][4],
    close = Streamable_State_rpc[8][7],
    closed = Streamable_State_rpc[8][8],
    flushed = Streamable_State_rpc[8][9],
    is_closed = Streamable_State_rpc[8][10];
   function create_response_part(bin_writer, response_part){
    return caml_call2
            (Streamable_State_rpc[8][11][1], bin_writer, response_part);
   }
   var
    finalise_response_message = Streamable_State_rpc[8][11][2],
    write_without_pushback = Streamable_State_rpc[8][11][5],
    Expert =
      [0,
       create_response_part,
       finalise_response_message,
       write_without_pushback],
    Direct_writer =
      [0,
       write_response_without_pushbac,
       finalise_response_without_push,
       is_response_finalised,
       response_finalised,
       close,
       closed,
       flushed,
       is_closed,
       Expert],
    description = Streamable_State_rpc[1];
   function dispatch(rpc, conn, query){
    function _o_(server_response){
     function _q_(param){
      var pipe = param[2], response = param[1];
      caml_call1(Async_kernel_Pipe[16], pipe);
      return response;
     }
     var _r_ = caml_call2(Core_Or_error[53], server_response, _q_);
     return caml_call1(Async_kernel_Deferred_or_error[19][1], _r_);
    }
    var _p_ = caml_call3(Streamable_State_rpc[3], rpc, conn, query);
    return caml_call2(Async_kernel_Deferred_or_error[19][4][2], _p_, _o_);
   }
   function dispatch$0(rpc, conn, query){
    var _m_ = Core_Or_error[31], _n_ = dispatch(rpc, conn, query);
    return caml_call2(Async_kernel_Deferred[13], _n_, _m_);
   }
   function implement(on_exception, rpc, f){
    function _j_(_k_, _l_){return plain_impl_to_state(f, _k_, _l_);}
    return caml_call3(Streamable_State_rpc[4], on_exception, rpc, _j_);
   }
   var
    bin_query_shape = Streamable_State_rpc[5],
    bin_response_shape = Streamable_State_rpc[6];
   caml_call1(Ppx_inline_test_lib[7], cst_streamable);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Streamable_Plain_rpc);
   var
    Streamable_Plain_rpc =
      [0,
       description,
       dispatch$0,
       dispatch,
       implement,
       bin_query_shape,
       bin_response_shape,
       Direct_writer,
       function(X){
        var
         name = X[1],
         version = X[2],
         _a_ = X[3],
         _b_ = [0, [0, caml_call1(Bin_shape[2][1], cst_query), 0, _a_], 0],
         _c_ = caml_call1(Bin_shape[4][1], cst_src_plain_rpc_ml_55_4),
         group = caml_call2(Bin_prot_Shape[2], _c_, _b_),
         _d_ = caml_call1(Bin_shape[2][1], cst_query$0),
         bin_shape_query =
           caml_call1(caml_call2(Bin_prot_Shape[10], group, _d_), 0),
         bin_size_query = X[4],
         bin_write_query = X[5],
         bin_writer_query = [0, bin_size_query, bin_write_query],
         bin_read_query = X[8],
         bin_read_query$0 = X[7],
         bin_reader_query = [0, bin_read_query$0, bin_read_query],
         bin_query = [0, bin_shape_query, bin_writer_query, bin_reader_query],
         State = X[11],
         client_pushes_back = X[12],
         _e_ = Update[1],
         _f_ = _e_[1],
         M =
           caml_call1
            (Streamable_State_rpc[9],
             [0,
              name,
              version,
              bin_shape_query,
              bin_size_query,
              bin_write_query,
              bin_writer_query,
              bin_read_query$0,
              bin_read_query,
              bin_reader_query,
              bin_query,
              State,
              [0,
               [0,
                [0,
                 _f_[1],
                 _f_[2],
                 _f_[3],
                 _f_[4],
                 _f_[5],
                 _f_[6],
                 _f_[7],
                 _f_[8]],
                _e_[2],
                _e_[3]],
               Update[2],
               Update[3]],
              client_pushes_back]),
         rpc = M[1];
        function implement(on_exception, f){
         function _g_(_h_, _i_){return plain_impl_to_state(f, _h_, _i_);}
         return caml_call2(M[2], on_exception, _g_);
        }
        function implement_direct(on_exception, f){return caml_call2(M[3], on_exception, f);
        }
        return [0, rpc, implement, implement_direct];
       }];
   runtime.caml_register_global
    (23, Streamable_Plain_rpc, cst_Streamable_Plain_rpc$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Streamable__Versioned_plain_rpc_intf
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Streamable_Versioned_plain = "Streamable__Versioned_plain_rpc_intf",
    cst_streamable = "streamable";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Streamable_Versioned_plain);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_streamable);
   caml_call1(Ppx_expect_runtime[1][1], "src/versioned_plain_rpc_intf.ml");
   caml_call2
    (Ppx_inline_test_lib[6], cst_streamable, "versioned_plain_rpc_intf.ml");
   caml_call1(Ppx_inline_test_lib[7], cst_streamable);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Streamable_Versioned_plain);
   var Streamable_Versioned_plain_rpc = [0];
   runtime.caml_register_global
    (11, Streamable_Versioned_plain_rpc, cst_Streamable_Versioned_plain);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Streamable__Versioned_plain_rpc
//# unitInfo: Requires: Async_kernel, Async_kernel__Deferred, Async_kernel__Deferred_or_error, Async_rpc_kernel__Versioned_rpc, Core__List, Core__Or_error, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Streamable__Callers_rpc_version_table, Streamable__Plain_rpc, Streamable__Versioned_plain_rpc_intf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Streamable_Versioned_plain$0 = "Streamable__Versioned_plain_rpc",
    cst_streamable$0 = "streamable";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    Async_kernel_Deferred_or_error =
      global_data.Async_kernel__Deferred_or_error,
    Streamable_Plain_rpc = global_data.Streamable__Plain_rpc,
    Streamable_Callers_rpc_version =
      global_data.Streamable__Callers_rpc_version_table,
    Core_List = global_data.Core__List,
    Core_Or_error = global_data.Core__Or_error,
    Async_kernel_Deferred = global_data.Async_kernel__Deferred,
    Async_rpc_kernel_Versioned_rpc =
      global_data.Async_rpc_kernel__Versioned_rpc,
    Async_kernel = global_data.Async_kernel,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Streamable_Versioned_plain$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_streamable$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/versioned_plain_rpc.ml");
   caml_call2
    (Ppx_inline_test_lib[6], cst_streamable$0, "versioned_plain_rpc.ml");
   var
    cst_streamable = cst_streamable$0,
    cst_Streamable_Versioned_plain = cst_Streamable_Versioned_plain$0;
   function Make(Model){
    var
     name = Model[1],
     registry = caml_call1(Streamable_Callers_rpc_version[1], name);
    function dispatch_multi(conn_with_menu, query){
     var
      conn = caml_call1(Async_rpc_kernel_Versioned_rpc[2][3], conn_with_menu),
      menu = caml_call1(Async_rpc_kernel_Versioned_rpc[2][4], conn_with_menu),
      match = caml_call2(Streamable_Callers_rpc_version[3], registry, menu);
     if(0 === match[0]){
      var dispatch = match[1];
      return caml_call2(dispatch, conn, query);
     }
     var e = match[1];
     return caml_call1(Async_kernel[20], [1, e]);
    }
    function dispatch_multi$0(conn_with_menu, query){
     var _A_ = Core_Or_error[31], _B_ = dispatch_multi(conn_with_menu, query);
     return caml_call2(Async_kernel_Deferred[13], _B_, _A_);
    }
    function Register(Version){
     var
      bin_shape_query = Version[1],
      bin_size_query = Version[2],
      bin_write_query = Version[3],
      bin_writer_query = Version[4],
      bin_read_query = Version[5],
      bin_read_query$0 = Version[6],
      bin_reader_query = Version[7],
      bin_query = Version[8],
      Response = Version[9],
      version = Version[10],
      client_pushes_back = Version[13],
      include =
        caml_call1
         (Streamable_Plain_rpc[8],
          [0,
           name,
           version,
           bin_shape_query,
           bin_size_query,
           bin_write_query,
           bin_writer_query,
           bin_read_query,
           bin_read_query$0,
           bin_reader_query,
           bin_query,
           Response,
           client_pushes_back]),
      rpc = include[1],
      implement = include[2],
      version$0 = Version[10];
     function dispatch(conn, query){
      var query$0 = caml_call1(Version[11], query);
      function _x_(server_response){
       var _z_ = caml_call2(Core_Or_error[53], server_response, Version[12]);
       return caml_call1(Async_kernel_Deferred_or_error[19][1], _z_);
      }
      var _y_ = caml_call3(Streamable_Plain_rpc[3], rpc, conn, query$0);
      return caml_call2(Async_kernel_Deferred_or_error[19][4][2], _y_, _x_);
     }
     caml_call3
      (Streamable_Callers_rpc_version[2], registry, version$0, dispatch);
     return [0, rpc, implement];
    }
    return [0, name, , dispatch_multi, dispatch_multi$0, Register];
   }
   function Make$0(Model){
    var
     name = Model[1],
     registry = caml_call1(Streamable_Callers_rpc_version[1], name);
    function implement_multi(on_exception, f){
     function _v_(param){
      var implement = param[1];
      return caml_call2(implement, on_exception, f);
     }
     var _w_ = caml_call1(Streamable_Callers_rpc_version[4], registry);
     return caml_call2(Core_List[51], _w_, _v_);
    }
    function Register(Version){
     var
      bin_shape_query = Version[1],
      bin_size_query = Version[2],
      bin_write_query = Version[3],
      bin_writer_query = Version[4],
      bin_read_query = Version[5],
      bin_read_query$0 = Version[6],
      bin_reader_query = Version[7],
      bin_query = Version[8],
      Response = Version[9],
      version = Version[10],
      client_pushes_back = Version[13],
      include =
        caml_call1
         (Streamable_Plain_rpc[8],
          [0,
           name,
           version,
           bin_shape_query,
           bin_size_query,
           bin_write_query,
           bin_writer_query,
           bin_read_query,
           bin_read_query$0,
           bin_reader_query,
           bin_query,
           Response,
           client_pushes_back]),
      rpc = include[1],
      implement = include[2],
      version$0 = Version[10];
     function implement$0(on_exception, f){
      function _r_(conn_state, query){
       var query$0 = caml_call1(Version[11], query);
       function _s_(response){
        var _u_ = caml_call1(Version[12], response);
        return caml_call1(Async_kernel_Deferred_or_error[19][1], _u_);
       }
       var _t_ = caml_call3(f, conn_state, version$0, query$0);
       return caml_call2(Async_kernel_Deferred_or_error[19][4][2], _t_, _s_);
      }
      return caml_call3(Streamable_Plain_rpc[4], on_exception, rpc, _r_);
     }
     caml_call3
      (Streamable_Callers_rpc_version[2],
       registry,
       version$0,
       [0, implement$0]);
     return [0, rpc, implement];
    }
    return [0, name, , implement_multi, Register];
   }
   caml_call1(Ppx_inline_test_lib[7], cst_streamable);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Streamable_Versioned_plain);
   var
    _a_ =
      [0,
       function(Model){
        var
         name = Model[1],
         Caller = Make([0, name]),
         Callee = Make$0([0, name]),
         dispatch_multi = Caller[4],
         dispatch_multi$0 = Caller[3],
         implement_multi = Callee[3];
        return [0,
                function(Version){
                 var
                  version = Version[1],
                  bin_shape_query = Version[2],
                  bin_size_query = Version[3],
                  bin_write_query = Version[4],
                  bin_writer_query = Version[5],
                  bin_read_query = Version[6],
                  bin_read_query$0 = Version[7],
                  bin_reader_query = Version[8],
                  bin_query = Version[9],
                  Response = Version[10],
                  callee_model_of_query = Version[12],
                  response_of_callee_model = Version[13],
                  client_pushes_back = Version[15];
                 Callee[4].call
                  (null,
                   [0,
                    bin_shape_query,
                    bin_size_query,
                    bin_write_query,
                    bin_writer_query,
                    bin_read_query,
                    bin_read_query$0,
                    bin_reader_query,
                    bin_query,
                    Response,
                    version,
                    callee_model_of_query,
                    response_of_callee_model,
                    client_pushes_back]);
                 var
                  version$0 = Version[1],
                  bin_shape_query$0 = Version[2],
                  bin_size_query$0 = Version[3],
                  bin_write_query$0 = Version[4],
                  bin_writer_query$0 = Version[5],
                  bin_read_query$1 = Version[6],
                  bin_read_query$2 = Version[7],
                  bin_reader_query$0 = Version[8],
                  bin_query$0 = Version[9],
                  Response$0 = Version[10],
                  query_of_caller_model = Version[11],
                  caller_model_of_response = Version[14],
                  client_pushes_back$0 = Version[15],
                  include =
                    Caller[5].call
                     (null,
                      [0,
                       bin_shape_query$0,
                       bin_size_query$0,
                       bin_write_query$0,
                       bin_writer_query$0,
                       bin_read_query$1,
                       bin_read_query$2,
                       bin_reader_query$0,
                       bin_query$0,
                       Response$0,
                       version$0,
                       query_of_caller_model,
                       caller_model_of_response,
                       client_pushes_back$0]),
                  rpc = include[1],
                  implement = include[2];
                 return [0, rpc, implement];
                },
                dispatch_multi,
                dispatch_multi$0,
                implement_multi,
                name];
       }],
    _b_ =
      [0,
       function(_k_){
        var _l_ = Make$0(_k_), _m_ = _l_[1], _n_ = _l_[3], _o_ = _l_[4];
        return [0,
                function(_p_){
                 var
                  _q_ =
                    _o_
                     ([0,
                       _p_[2],
                       _p_[3],
                       _p_[4],
                       _p_[5],
                       _p_[6],
                       _p_[7],
                       _p_[8],
                       _p_[9],
                       _p_[10],
                       _p_[1],
                       _p_[11],
                       _p_[12],
                       _p_[13]]);
                 return [0, _q_[1], _q_[2]];
                },
                _n_,
                _m_];
       }],
    Streamable_Versioned_plain_rpc =
      [0,
       [0,
        function(_c_){
         var
          _d_ = Make(_c_),
          _e_ = _d_[1],
          _f_ = _d_[3],
          _g_ = _d_[4],
          _h_ = _d_[5];
         return [0,
                 function(_i_){
                  var
                   _j_ =
                     _h_
                      ([0,
                        _i_[2],
                        _i_[3],
                        _i_[4],
                        _i_[5],
                        _i_[6],
                        _i_[7],
                        _i_[8],
                        _i_[9],
                        _i_[10],
                        _i_[1],
                        _i_[11],
                        _i_[12],
                        _i_[13]]);
                  return [0, _j_[1], _j_[2]];
                 },
                 _g_,
                 _f_,
                 _e_];
        }],
       _b_,
       _a_];
   runtime.caml_register_global
    (19, Streamable_Versioned_plain_rpc, cst_Streamable_Versioned_plain$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Streamable__Pipe_rpc_intf
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Streamable_Pipe_rpc_intf = "Streamable__Pipe_rpc_intf",
    cst_streamable = "streamable";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Streamable_Pipe_rpc_intf);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_streamable);
   caml_call1(Ppx_expect_runtime[1][1], "src/pipe_rpc_intf.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_streamable, "pipe_rpc_intf.ml");
   caml_call1(Ppx_inline_test_lib[7], cst_streamable);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Streamable_Pipe_rpc_intf);
   var Streamable_Pipe_rpc_intf = [0];
   runtime.caml_register_global
    (11, Streamable_Pipe_rpc_intf, cst_Streamable_Pipe_rpc_intf);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Streamable__Pipe_rpc
//# unitInfo: Requires: Async_kernel__Deferred, Async_kernel__Deferred_or_error, Async_kernel__Pipe, Bin_prot__Shape, Bin_shape, Core__Or_error, Core__Unit, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Streamable__Main, Streamable__Pipe_rpc_intf, Streamable__State_rpc
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Streamable_Pipe_rpc$0 = "Streamable__Pipe_rpc",
    cst_query$1 = "query",
    cst_streamable$0 = "streamable";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Async_kernel_Deferred_or_error =
      global_data.Async_kernel__Deferred_or_error,
    Streamable_State_rpc = global_data.Streamable__State_rpc,
    Core_Or_error = global_data.Core__Or_error,
    Async_kernel_Deferred = global_data.Async_kernel__Deferred,
    Async_kernel_Pipe = global_data.Async_kernel__Pipe,
    Bin_shape = global_data.Bin_shape,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Core_Unit = global_data.Core__Unit,
    Streamable_Main = global_data.Streamable__Main,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Streamable_Pipe_rpc$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_streamable$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/pipe_rpc.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_streamable$0, "pipe_rpc.ml");
   var
    description = Streamable_State_rpc[1],
    cst_query = cst_query$1,
    cst_src_pipe_rpc_ml_16_4 = "src/pipe_rpc.ml:16:4",
    cst_query$0 = cst_query$1,
    cst_streamable = cst_streamable$0,
    cst_Streamable_Pipe_rpc = cst_Streamable_Pipe_rpc$0;
   function dispatch(rpc, conn, query){
    function _o_(server_response){
     function _q_(param){var response = param[2]; return response;}
     var _r_ = caml_call2(Core_Or_error[53], server_response, _q_);
     return caml_call1(Async_kernel_Deferred_or_error[19][1], _r_);
    }
    var _p_ = caml_call3(Streamable_State_rpc[3], rpc, conn, query);
    return caml_call2(Async_kernel_Deferred_or_error[19][4][2], _p_, _o_);
   }
   function dispatch$0(rpc, conn, query){
    var _m_ = Core_Or_error[31], _n_ = dispatch(rpc, conn, query);
    return caml_call2(Async_kernel_Deferred[13], _n_, _m_);
   }
   function implement(on_exception, rpc, f){
    function f$0(conn, query){
     function _k_(response){
      return caml_call1
              (Async_kernel_Deferred_or_error[19][1], [0, 0, response]);
     }
     var _l_ = caml_call2(f, conn, query);
     return caml_call2(Async_kernel_Deferred_or_error[19][4][2], _l_, _k_);
    }
    return caml_call3(Streamable_State_rpc[4], on_exception, rpc, f$0);
   }
   var
    bin_query_shape = Streamable_State_rpc[5],
    bin_response_shape = Streamable_State_rpc[7];
   caml_call1(Ppx_inline_test_lib[7], cst_streamable);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Streamable_Pipe_rpc);
   var
    Streamable_Pipe_rpc =
      [0,
       description,
       dispatch$0,
       dispatch,
       implement,
       bin_query_shape,
       bin_response_shape,
       function(X){
        var
         name = X[1],
         version = X[2],
         _a_ = X[3],
         _b_ = [0, [0, caml_call1(Bin_shape[2][1], cst_query), 0, _a_], 0],
         _c_ = caml_call1(Bin_shape[4][1], cst_src_pipe_rpc_ml_16_4),
         group = caml_call2(Bin_prot_Shape[2], _c_, _b_),
         _d_ = caml_call1(Bin_shape[2][1], cst_query$0),
         bin_shape_query =
           caml_call1(caml_call2(Bin_prot_Shape[10], group, _d_), 0),
         bin_size_query = X[4],
         bin_write_query = X[5],
         bin_writer_query = [0, bin_size_query, bin_write_query],
         bin_read_query = X[8],
         bin_read_query$0 = X[7],
         bin_reader_query = [0, bin_read_query$0, bin_read_query],
         bin_query = [0, bin_shape_query, bin_writer_query, bin_reader_query],
         State =
           caml_call1
            (Streamable_Main[1],
             [0,
              Core_Unit[45],
              Core_Unit[46],
              Core_Unit[47],
              Core_Unit[48],
              Core_Unit[51],
              Core_Unit[52],
              Core_Unit[53],
              Core_Unit[54],
              Core_Unit[9],
              Core_Unit[10]]),
         Update = X[11],
         client_pushes_back = X[12],
         _e_ = State[1],
         _f_ = _e_[1],
         M =
           caml_call1
            (Streamable_State_rpc[9],
             [0,
              name,
              version,
              bin_shape_query,
              bin_size_query,
              bin_write_query,
              bin_writer_query,
              bin_read_query$0,
              bin_read_query,
              bin_reader_query,
              bin_query,
              [0,
               [0,
                [0,
                 _f_[1],
                 _f_[2],
                 _f_[3],
                 _f_[4],
                 _f_[5],
                 _f_[6],
                 _f_[7],
                 _f_[8]],
                _e_[2],
                _e_[3]],
               State[2],
               State[3]],
              Update,
              client_pushes_back]),
         rpc = M[1];
        function implement(on_exception, f){
         function f$0(conn, query){
          function _g_(response){
           var
            _i_ = caml_call1(State[2], 0),
            _j_ = [0, caml_call1(Async_kernel_Pipe[13], _i_), response];
           return caml_call1(Async_kernel_Deferred_or_error[19][1], _j_);
          }
          var _h_ = caml_call2(f, conn, query);
          return caml_call2
                  (Async_kernel_Deferred_or_error[19][4][2], _h_, _g_);
         }
         return caml_call2(M[2], on_exception, f$0);
        }
        return [0, rpc, implement];
       }];
   runtime.caml_register_global
    (23, Streamable_Pipe_rpc, cst_Streamable_Pipe_rpc$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Streamable__Versioned_pipe_rpc_intf
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Streamable_Versioned_pipe_ = "Streamable__Versioned_pipe_rpc_intf",
    cst_streamable = "streamable";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Streamable_Versioned_pipe_);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_streamable);
   caml_call1(Ppx_expect_runtime[1][1], "src/versioned_pipe_rpc_intf.ml");
   caml_call2
    (Ppx_inline_test_lib[6], cst_streamable, "versioned_pipe_rpc_intf.ml");
   caml_call1(Ppx_inline_test_lib[7], cst_streamable);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Streamable_Versioned_pipe_);
   var Streamable_Versioned_pipe_rpc_ = [0];
   runtime.caml_register_global
    (11, Streamable_Versioned_pipe_rpc_, cst_Streamable_Versioned_pipe_);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Streamable__Versioned_pipe_rpc
//# unitInfo: Requires: Async_kernel, Async_kernel__Deferred_or_error, Async_kernel__Pipe, Async_rpc_kernel__Versioned_rpc, Core__List, Core__Or_error, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Streamable__Callers_rpc_version_table, Streamable__Pipe_rpc, Streamable__Versioned_pipe_rpc_intf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Streamable_Versioned_pipe_$0 = "Streamable__Versioned_pipe_rpc",
    cst_streamable$0 = "streamable";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    Async_kernel_Pipe = global_data.Async_kernel__Pipe,
    Async_kernel_Deferred_or_error =
      global_data.Async_kernel__Deferred_or_error,
    Streamable_Pipe_rpc = global_data.Streamable__Pipe_rpc,
    Streamable_Callers_rpc_version =
      global_data.Streamable__Callers_rpc_version_table,
    Core_List = global_data.Core__List,
    Core_Or_error = global_data.Core__Or_error,
    Async_rpc_kernel_Versioned_rpc =
      global_data.Async_rpc_kernel__Versioned_rpc,
    Async_kernel = global_data.Async_kernel,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Streamable_Versioned_pipe_$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_streamable$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/versioned_pipe_rpc.ml");
   caml_call2
    (Ppx_inline_test_lib[6], cst_streamable$0, "versioned_pipe_rpc.ml");
   var
    cst_streamable = cst_streamable$0,
    cst_Streamable_Versioned_pipe_ = cst_Streamable_Versioned_pipe_$0;
   function Make(Model){
    var
     name = Model[1],
     registry = caml_call1(Streamable_Callers_rpc_version[1], name);
    function dispatch_multi(conn_with_menu, query){
     var
      conn = caml_call1(Async_rpc_kernel_Versioned_rpc[2][3], conn_with_menu),
      menu = caml_call1(Async_rpc_kernel_Versioned_rpc[2][4], conn_with_menu),
      match = caml_call2(Streamable_Callers_rpc_version[3], registry, menu);
     if(0 === match[0]){
      var dispatch = match[1];
      return caml_call2(dispatch, conn, query);
     }
     var e = match[1];
     return caml_call1(Async_kernel[20], [1, e]);
    }
    function Register(Version){
     var
      bin_shape_query = Version[1],
      bin_size_query = Version[2],
      bin_write_query = Version[3],
      bin_writer_query = Version[4],
      bin_read_query = Version[5],
      bin_read_query$0 = Version[6],
      bin_reader_query = Version[7],
      bin_query = Version[8],
      Response = Version[9],
      version = Version[10],
      client_pushes_back = Version[13],
      include =
        caml_call1
         (Streamable_Pipe_rpc[7],
          [0,
           name,
           version,
           bin_shape_query,
           bin_size_query,
           bin_write_query,
           bin_writer_query,
           bin_read_query,
           bin_read_query$0,
           bin_reader_query,
           bin_query,
           Response,
           client_pushes_back]),
      rpc = include[1],
      implement = include[2],
      version$0 = Version[10];
     function dispatch(conn, query){
      var query$0 = caml_call1(Version[11], query);
      function _v_(response){
       function _x_(response){
        function _y_(param){return caml_call1(Version[12], response);}
        return caml_call2(Core_Or_error[37], 0, _y_);
       }
       var response$0 = caml_call2(Async_kernel_Pipe[60], response, _x_);
       return caml_call1(Async_kernel_Deferred_or_error[19][1], response$0);
      }
      var _w_ = caml_call3(Streamable_Pipe_rpc[2], rpc, conn, query$0);
      return caml_call2(Async_kernel_Deferred_or_error[19][4][2], _w_, _v_);
     }
     caml_call3
      (Streamable_Callers_rpc_version[2], registry, version$0, dispatch);
     return [0, rpc, implement];
    }
    return [0, name, , dispatch_multi, Register];
   }
   function Make$0(Model){
    var
     name = Model[1],
     registry = caml_call1(Streamable_Callers_rpc_version[1], name);
    function implement_multi(on_exception, f){
     function _t_(param){
      var implement = param[1];
      return caml_call2(implement, on_exception, f);
     }
     var _u_ = caml_call1(Streamable_Callers_rpc_version[4], registry);
     return caml_call2(Core_List[51], _u_, _t_);
    }
    function Register(Version){
     var
      bin_shape_query = Version[1],
      bin_size_query = Version[2],
      bin_write_query = Version[3],
      bin_writer_query = Version[4],
      bin_read_query = Version[5],
      bin_read_query$0 = Version[6],
      bin_reader_query = Version[7],
      bin_query = Version[8],
      Response = Version[9],
      version = Version[10],
      client_pushes_back = Version[13],
      include =
        caml_call1
         (Streamable_Pipe_rpc[7],
          [0,
           name,
           version,
           bin_shape_query,
           bin_size_query,
           bin_write_query,
           bin_writer_query,
           bin_read_query,
           bin_read_query$0,
           bin_reader_query,
           bin_query,
           Response,
           client_pushes_back]),
      rpc = include[1],
      implement = include[2],
      version$0 = Version[10];
     function implement$0(on_exception, f){
      function _q_(conn_state, query){
       var query$0 = caml_call1(Version[11], query);
       function _r_(response){
        var
         response$0 = caml_call2(Async_kernel_Pipe[60], response, Version[12]);
        return caml_call1(Async_kernel_Deferred_or_error[19][1], response$0);
       }
       var _s_ = caml_call3(f, conn_state, version$0, query$0);
       return caml_call2(Async_kernel_Deferred_or_error[19][4][2], _s_, _r_);
      }
      return caml_call3(Streamable_Pipe_rpc[4], on_exception, rpc, _q_);
     }
     caml_call3
      (Streamable_Callers_rpc_version[2],
       registry,
       version$0,
       [0, implement$0]);
     return [0, rpc, implement];
    }
    return [0, name, , implement_multi, Register];
   }
   caml_call1(Ppx_inline_test_lib[7], cst_streamable);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Streamable_Versioned_pipe_);
   var
    _a_ =
      [0,
       function(Model){
        var
         name = Model[1],
         Caller = Make([0, name]),
         Callee = Make$0([0, name]),
         dispatch_multi = Caller[3],
         implement_multi = Callee[3];
        return [0,
                function(Version){
                 var
                  version = Version[1],
                  bin_shape_query = Version[2],
                  bin_size_query = Version[3],
                  bin_write_query = Version[4],
                  bin_writer_query = Version[5],
                  bin_read_query = Version[6],
                  bin_read_query$0 = Version[7],
                  bin_reader_query = Version[8],
                  bin_query = Version[9],
                  Response = Version[10],
                  callee_model_of_query = Version[12],
                  response_of_callee_model = Version[13],
                  client_pushes_back = Version[15];
                 Callee[4].call
                  (null,
                   [0,
                    bin_shape_query,
                    bin_size_query,
                    bin_write_query,
                    bin_writer_query,
                    bin_read_query,
                    bin_read_query$0,
                    bin_reader_query,
                    bin_query,
                    Response,
                    version,
                    callee_model_of_query,
                    response_of_callee_model,
                    client_pushes_back]);
                 var
                  version$0 = Version[1],
                  bin_shape_query$0 = Version[2],
                  bin_size_query$0 = Version[3],
                  bin_write_query$0 = Version[4],
                  bin_writer_query$0 = Version[5],
                  bin_read_query$1 = Version[6],
                  bin_read_query$2 = Version[7],
                  bin_reader_query$0 = Version[8],
                  bin_query$0 = Version[9],
                  Response$0 = Version[10],
                  query_of_caller_model = Version[11],
                  caller_model_of_response = Version[14],
                  client_pushes_back$0 = Version[15],
                  include =
                    Caller[4].call
                     (null,
                      [0,
                       bin_shape_query$0,
                       bin_size_query$0,
                       bin_write_query$0,
                       bin_writer_query$0,
                       bin_read_query$1,
                       bin_read_query$2,
                       bin_reader_query$0,
                       bin_query$0,
                       Response$0,
                       version$0,
                       query_of_caller_model,
                       caller_model_of_response,
                       client_pushes_back$0]),
                  rpc = include[1],
                  implement = include[2];
                 return [0, rpc, implement];
                },
                dispatch_multi,
                implement_multi,
                name];
       }],
    _b_ =
      [0,
       function(_j_){
        var _k_ = Make$0(_j_), _l_ = _k_[1], _m_ = _k_[3], _n_ = _k_[4];
        return [0,
                function(_o_){
                 var
                  _p_ =
                    _n_
                     ([0,
                       _o_[2],
                       _o_[3],
                       _o_[4],
                       _o_[5],
                       _o_[6],
                       _o_[7],
                       _o_[8],
                       _o_[9],
                       _o_[10],
                       _o_[1],
                       _o_[11],
                       _o_[12],
                       _o_[13]]);
                 return [0, _p_[1], _p_[2]];
                },
                _m_,
                _l_];
       }],
    Streamable_Versioned_pipe_rpc =
      [0,
       [0,
        function(_c_){
         var _d_ = Make(_c_), _e_ = _d_[1], _f_ = _d_[3], _g_ = _d_[4];
         return [0,
                 function(_h_){
                  var
                   _i_ =
                     _g_
                      ([0,
                        _h_[2],
                        _h_[3],
                        _h_[4],
                        _h_[5],
                        _h_[6],
                        _h_[7],
                        _h_[8],
                        _h_[9],
                        _h_[10],
                        _h_[1],
                        _h_[11],
                        _h_[12],
                        _h_[13]]);
                  return [0, _i_[1], _i_[2]];
                 },
                 _f_,
                 _e_];
        }],
       _b_,
       _a_];
   runtime.caml_register_global
    (19, Streamable_Versioned_pipe_rpc, cst_Streamable_Versioned_pipe_$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Streamable
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Streamable__Main
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Streamable = "Streamable",
    cst_streamable = "streamable";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Streamable_Main = global_data.Streamable__Main;
   caml_call1(Ppx_module_timer_runtime[4], cst_Streamable);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_streamable);
   caml_call1(Ppx_expect_runtime[1][1], "src/streamable.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_streamable, "streamable.ml");
   var
    Of_atomic = Streamable_Main[1],
    Of_atomic_rpc = Streamable_Main[2],
    Of_map = Streamable_Main[3],
    Of_map_rpc = Streamable_Main[4],
    Of_total_map = Streamable_Main[5],
    Of_total_map_rpc = Streamable_Main[6],
    Of_hashtbl = Streamable_Main[7],
    Of_hashtbl_rpc = Streamable_Main[8],
    Of_set = Streamable_Main[9],
    Of_set_rpc = Streamable_Main[10],
    Of_tuple2 = Streamable_Main[11],
    Of_tuple2_rpc = Streamable_Main[12],
    Of_tuple3 = Streamable_Main[13],
    Of_tuple3_rpc = Streamable_Main[14],
    Of_tuple4 = Streamable_Main[15],
    Of_tuple4_rpc = Streamable_Main[16],
    Of_tuple5 = Streamable_Main[17],
    Of_tuple5_rpc = Streamable_Main[18],
    Of_tuple6 = Streamable_Main[19],
    Of_tuple6_rpc = Streamable_Main[20],
    Of_tuple7 = Streamable_Main[21],
    Of_tuple7_rpc = Streamable_Main[22],
    Of_tuple8 = Streamable_Main[23],
    Of_tuple8_rpc = Streamable_Main[24],
    Of_tuple9 = Streamable_Main[25],
    Of_tuple9_rpc = Streamable_Main[26],
    Of_variant2 = Streamable_Main[27],
    Of_variant2_rpc = Streamable_Main[28],
    Of_variant3 = Streamable_Main[29],
    Of_variant3_rpc = Streamable_Main[30],
    Of_variant4 = Streamable_Main[31],
    Of_variant4_rpc = Streamable_Main[32],
    Of_variant5 = Streamable_Main[33],
    Of_variant5_rpc = Streamable_Main[34],
    Of_list = Streamable_Main[35],
    Of_list_rpc = Streamable_Main[36],
    Of_nonempty_list = Streamable_Main[37],
    Of_nonempty_list_rpc = Streamable_Main[38],
    Of_option = Streamable_Main[39],
    Of_option_rpc = Streamable_Main[40],
    Of_result = Streamable_Main[41],
    Of_result_rpc = Streamable_Main[42],
    Of_fqueue = Streamable_Main[43],
    Of_fqueue_rpc = Streamable_Main[44],
    Of_sequence = Streamable_Main[45],
    Of_sequence_rpc = Streamable_Main[46],
    Of_streamable = Streamable_Main[47],
    Of_streamable_rpc = Streamable_Main[48],
    Of_sexpable = Streamable_Main[49],
    Fixpoint = Streamable_Main[50],
    Fixpoint_rpc = Streamable_Main[51],
    Checked = Streamable_Main[52],
    Packed = Streamable_Main[53],
    Packed_rpc = Streamable_Main[54],
    Stable = Streamable_Main[55];
   caml_call1(Ppx_inline_test_lib[7], cst_streamable);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Streamable);
   var
    Streamable =
      [0,
       Of_atomic,
       Of_atomic_rpc,
       Of_map,
       Of_map_rpc,
       Of_total_map,
       Of_total_map_rpc,
       Of_hashtbl,
       Of_hashtbl_rpc,
       Of_set,
       Of_set_rpc,
       Of_tuple2,
       Of_tuple2_rpc,
       Of_tuple3,
       Of_tuple3_rpc,
       Of_tuple4,
       Of_tuple4_rpc,
       Of_tuple5,
       Of_tuple5_rpc,
       Of_tuple6,
       Of_tuple6_rpc,
       Of_tuple7,
       Of_tuple7_rpc,
       Of_tuple8,
       Of_tuple8_rpc,
       Of_tuple9,
       Of_tuple9_rpc,
       Of_variant2,
       Of_variant2_rpc,
       Of_variant3,
       Of_variant3_rpc,
       Of_variant4,
       Of_variant4_rpc,
       Of_variant5,
       Of_variant5_rpc,
       Of_list,
       Of_list_rpc,
       Of_nonempty_list,
       Of_nonempty_list_rpc,
       Of_option,
       Of_option_rpc,
       Of_result,
       Of_result_rpc,
       Of_fqueue,
       Of_fqueue_rpc,
       Of_sequence,
       Of_sequence_rpc,
       Of_streamable,
       Of_streamable_rpc,
       Of_sexpable,
       Fixpoint,
       Fixpoint_rpc,
       Checked,
       Packed,
       Packed_rpc,
       Stable];
   runtime.caml_register_global(12, Streamable, cst_Streamable);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
