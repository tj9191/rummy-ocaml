// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Async_kernel_config
//# unitInfo: Requires: Base__Field, Base__Word_size, Core, Core__Core_sys, Core__Int, Core__List, Core__Option, Core__Sexp, Core__Sexpable, Core__String, Core__Time_ns, Core__Validated, Parsexp, Parsexp__Conv_error, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv_error, Sexplib0__Sexp_conv_record, Thread_pool_cpu_affinity, Timing_wheel
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$2 = "\n",
    cst$4 = ", ",
    cst$3 = ".\n",
    cst_All = "All",
    cst_Async_kernel_config$0 = "Async_kernel_config",
    cst_Call_abort = "Call_abort",
    cst_Call_gcore = "Call_gcore",
    cst_Clock = "Clock",
    cst_Default = "Default",
    cst_Disabled = "Disabled",
    cst_Do_not_watch = "Do_not_watch",
    cst_Epoll = "Epoll",
    cst_Epoll_if_timerfd = "Epoll_if_timerfd",
    cst_Eventfd = "Eventfd",
    cst_Fd = "Fd",
    cst_File_descr_watcher = "File_descr_watcher",
    cst_Finalizers = "Finalizers",
    cst_From_scheduler = "From_scheduler",
    cst_If_available_eventfd = "If_available_eventfd",
    cst_Interruptor = "Interruptor",
    cst_Io_uring = "Io_uring",
    cst_Monitor = "Monitor",
    cst_Monitor_send_exn = "Monitor_send_exn",
    cst_Parallel = "Parallel",
    cst_Reader = "Reader",
    cst_Scheduler = "Scheduler",
    cst_Select = "Select",
    cst_Shutdown = "Shutdown",
    cst_Thread_pool = "Thread_pool",
    cst_Thread_safe = "Thread_safe",
    cst_Watch = "Watch",
    cst_Writer = "Writer",
    cst_abort_after_thread_pool_st$2 = "abort_after_thread_pool_stuck_for",
    cst_all = "all",
    cst_async_kernel_config$0 = "async_kernel_config",
    cst_call_abort = "call_abort",
    cst_call_gcore = "call_gcore",
    cst_check_invariants$2 = "check_invariants",
    cst_clock = "clock",
    cst_config_async_kernel_config = "config/async_kernel_config.ml",
    cst_default$0 = "default",
    cst_detect_invalid_access_from$2 = "detect_invalid_access_from_thread",
    cst_disabled = "disabled",
    cst_do_not_watch = "do_not_watch",
    cst_dump_core_on_job_delay$2 = "dump_core_on_job_delay",
    cst_dump_if_delayed_by$0 = "dump_if_delayed_by",
    cst_epoll = "epoll",
    cst_epoll_if_timerfd = "epoll_if_timerfd",
    cst_epoll_max_ready_events$2 = "epoll_max_ready_events",
    cst_eventfd = "eventfd",
    cst_fd = "fd",
    cst_file_descr_watcher$2 = "file_descr_watcher",
    cst_finalizers = "finalizers",
    cst_from_scheduler = "from_scheduler",
    cst_how_to_dump$0 = "how_to_dump",
    cst_if_available_eventfd = "if_available_eventfd",
    cst_interruptor = "interruptor",
    cst_io_uring = "io_uring",
    cst_io_uring_max_submission_en$2 = "io_uring_max_submission_entries",
    cst_io_uring_mode$2 = "io_uring_mode",
    cst_max_inter_cycle_timeout$2 = "max_inter_cycle_timeout",
    cst_max_num_jobs_per_priority_$2 = "max_num_jobs_per_priority_per_cycle",
    cst_max_num_open_file_descrs$2 = "max_num_open_file_descrs",
    cst_max_num_threads$2 = "max_num_threads",
    cst_min_inter_cycle_timeout$2 = "min_inter_cycle_timeout",
    cst_monitor = "monitor",
    cst_monitor_send_exn = "monitor_send_exn",
    cst_parallel = "parallel",
    cst_print_debug_messages_for$2 = "print_debug_messages_for",
    cst_reader = "reader",
    cst_record_backtraces$2 = "record_backtraces",
    cst_report_thread_pool_stuck_f$2 = "report_thread_pool_stuck_for",
    cst_scheduler = "scheduler",
    cst_select = "select",
    cst_shutdown = "shutdown",
    cst_thread_pool = "thread_pool",
    cst_thread_pool_cpu_affinity$2 = "thread_pool_cpu_affinity",
    cst_thread_safe = "thread_safe",
    cst_timing_wheel_config$2 = "timing_wheel_config",
    cst_watch = "watch",
    cst_writer = "writer",
    caml_list_of_js_array = runtime.caml_list_of_js_array,
    caml_string_compare = runtime.caml_string_compare,
    caml_string_notequal = runtime.caml_string_notequal;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$0 = ")",
    cst$1 = cst$2,
    cst = "    ",
    level_bits = [0, 14, [0, 15, [0, 9, [0, 6, 0]]]],
    level_bits$0 = [0, 10, [0, 10, [0, 9, 0]]],
    here = [0, cst_config_async_kernel_config, 11, 202, 215],
    here$0 = [0, cst_config_async_kernel_config, 18, 347, 360],
    here$1 = [0, cst_config_async_kernel_config, 25, 493, 506],
    here$2 = [0, cst_config_async_kernel_config, 32, 652, 665],
    here$3 = [0, cst_config_async_kernel_config, 40, 822, 837],
    here$4 = [0, cst_config_async_kernel_config, 51, 1034, 1047],
    here$5 = [0, cst_config_async_kernel_config, 58, 1183, 1196],
    error_source_003 =
      "config/async_kernel_config.ml.Dump_core_on_job_delay.How_to_dump.t",
    error_source_006 =
      "config/async_kernel_config.ml.Dump_core_on_job_delay.watch",
    error_source_015 =
      "config/async_kernel_config.ml.Dump_core_on_job_delay.t",
    error_source_028 = "config/async_kernel_config.ml.Debug_tag.T.t",
    list =
      caml_list_of_js_array
       ([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]),
    error_source_036 = "config/async_kernel_config.ml.File_descr_watcher.T.t",
    list$0 = [0, 0, [0, 1, [0, 2, [0, 3, 0]]]],
    error_source_040 = "config/async_kernel_config.ml.Io_uring_mode.T.t",
    list$1 = [0, 0, [0, 1, [0, 2, [0, 3, 0]]]],
    error_source_043 = "config/async_kernel_config.ml.t",
    error_source_119 = "config/async_kernel_config.ml.Allow_extra_fields.t",
    empty = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    environment_variable = "ASYNC_CONFIG",
    environment_variable_allow_ext = "ASYNC_CONFIG_ALLOW_EXTRA_FIELDS",
    Base_Field = global_data.Base__Field,
    Core_Option = global_data.Core__Option,
    Core_List = global_data.Core__List,
    Core_Core_sys = global_data.Core__Core_sys,
    Parsexp = global_data.Parsexp,
    Parsexp_Conv_error = global_data.Parsexp__Conv_error,
    Core = global_data.Core,
    Core_Sexp = global_data.Core__Sexp,
    Core_String = global_data.Core__String,
    Core_Int = global_data.Core__Int,
    Timing_wheel = global_data.Timing_wheel,
    Thread_pool_cpu_affinity = global_data.Thread_pool_cpu_affinity,
    Core_Time_ns = global_data.Core__Time_ns,
    Sexplib0_Sexp_conv_record = global_data.Sexplib0__Sexp_conv_record,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Core_Validated = global_data.Core__Validated,
    Core_Sexpable = global_data.Core__Sexpable,
    Base_Word_size = global_data.Base__Word_size;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_kernel_config$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_kernel_config$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_config_async_kernel_config);
   caml_call2
    (Ppx_inline_test_lib[6],
     cst_async_kernel_config$0,
     "async_kernel_config.ml");
   var
    sec = Core_Time_ns[1][82],
    concat = Core_String[46],
    t_of_sexp = Core_Int[76],
    sexp_of_t = Core_Int[77],
    validate = Core_Int[109],
    Epoll_max_ready_events =
      caml_call1(Core_Validated[3], [0, t_of_sexp, sexp_of_t, here, validate]),
    t_of_sexp$0 = Core_Int[76],
    sexp_of_t$0 = Core_Int[77],
    validate$0 = Core_Int[109],
    Io_uring_max_submission_entrie =
      caml_call1
       (Core_Validated[3], [0, t_of_sexp$0, sexp_of_t$0, here$0, validate$0]),
    include = Core_Time_ns[1],
    t_of_sexp$1 = include[9],
    sexp_of_t$1 = include[10],
    validate$1 = Core_Time_ns[1][43],
    Max_inter_cycle_timeout =
      caml_call1
       (Core_Validated[3], [0, t_of_sexp$1, sexp_of_t$1, here$1, validate$1]),
    include$0 = Core_Time_ns[1],
    t_of_sexp$2 = include$0[9],
    sexp_of_t$2 = include$0[10],
    validate$2 = Core_Time_ns[1][43],
    Min_inter_cycle_timeout =
      caml_call1
       (Core_Validated[3], [0, t_of_sexp$2, sexp_of_t$2, here$2, validate$2]),
    t_of_sexp$3 = Core_Int[76],
    sexp_of_t$3 = Core_Int[77],
    validate$3 = Core_Int[109],
    include$1 =
      caml_call1
       (Core_Validated[3], [0, t_of_sexp$3, sexp_of_t$3, here$3, validate$3]),
    t_of_sexp$4 = include$1[1],
    sexp_of_t$4 = include$1[2],
    create = include$1[3],
    create_exn = include$1[4],
    raw = include$1[5],
    raw_local = include$1[6],
    create_stable_witness = include$1[7],
    type_equal = include$1[8],
    default$0 = caml_call1(create_exn, 131072),
    _bo_ = [0, "<no task id>"],
    _bl_ =
      [0,
       [11, "invalid value for ", [2, 0, [11, " environment variable", 0]]],
       "invalid value for %s environment variable"],
    _bm_ = [0, [2, 0, [11, "\n\n", 0]], "%s\n\n"],
    _bk_ = [0, [2, 0, [10, 0]], "%s%!"],
    cst_Here_is_an_explanation_of_ =
      "\n\nHere is an explanation of each field.\n",
    cst_environment_variable_affec =
      " environment variable affects Async\nin various ways.  Its value should be a sexp of the following form,\nwhere all fields are optional:\n\n",
    cst_The = "The ",
    cst_default = " (default ",
    _a__ = [0, " [ulimit -n -H]", 0],
    cst_min = "min ",
    _a5_ = [0, cst$2, 0],
    _a0_ =
      [0,
       "\n  This is used to adjust the time/space tradeoff in the timing wheel\n  used to implement Async's clock.  Time is split into intervals of\n  size [alarm_precision], and alarms with times in the same interval\n  fire in the same cycle.  Level [i] in the timing wheel has an\n  array of size [2^b], where [b] is the [i]'th entry in [level_bits].\n",
       0],
    _a1_ =
      [0,
       "\n   Whether and how threads in the thread pool should be affinitized to CPUs.\n",
       0],
    _a2_ =
      [0,
       "\n  By default, Async will print a message to stderr every second if\n  the thread pool is stuck for longer than this.\n",
       0],
    _a3_ =
      [0,
       "\n  If true, this will cause Async to keep in the execution context the\n  history of stack backtraces (obtained via [Backtrace.get]) that led\n  to the current job.  If an Async job has an unhandled exception,\n  this backtrace history will be recorded in the exception.  In\n  particular the history will appear in an unhandled exception that\n  reaches the main monitor.  This can have a substantial performance\n  impact, both in running time and space usage.\n",
       0],
    _a4_ =
      [0,
       "\n  Turning on debug messages will substantially slow down most programs.\n",
       0],
    cst_A_list_of_tags_specifying_ =
      "\n  A list of tags specifying which Async functions should print debug\n  messages to stderr.  Each tag identifies a group of related Async\n  functions.  The tag [all] means to print debug messages for all\n  functions.  Allowed values are:\n\n",
    _a6_ =
      [0,
       "\n  The minimum timeout the scheduler will pass to the OS when it checks\n  for I/O between cycles.  This is zero by default.  Setting it to a\n  nonzero value is used to increase thread fairness between the scheduler\n  and other threads.  A plausible setting is 1us.  This is also\n  configurable in OCaml via [Scheduler.set_min_inter_cycle_timeout].\n",
       0],
    _a7_ =
      [0,
       "\n  The maximum number of jobs that will be done at each priority within\n  each Async cycle.  This limits how many jobs the scheduler will run\n  before pausing to check for I/O.\n",
       0],
    _a8_ =
      [0,
       "\n  The maximum number of threads that Async will create to do blocking\n  system calls and handle calls to [In_thread.run].\n",
       0],
    _a9_ =
      [0,
       "\n  The maximum number of open file descriptors allowed at any one time.",
       0],
    _a$_ =
      [0,
       "\n  The maximum amount of time the scheduler will pause between cycles\n  when it has no jobs and is going to wait for I/O.  In principle one\n  doesn't need this, and we could use an infinite timeout.  We instead\n  use a small timeout (by default), to be more robust to bugs that\n  could prevent Async from waking up and servicing events.  For\n  example, as of 2013-01, the OCaml runtime has a bug that causes it\n  to not necessarily run an OCaml signal handler in a timely manner.\n  This in turn can cause a simple Async program that is waiting on a\n  signal to hang, when in fact it should handle the signal.\n\n  We use 50ms as the default timeout, because it is infrequent enough\n  to have a negligible performance impact, and frequent enough that\n  the latency would typically be not noticeable.  Also, 50ms is what\n  the OCaml ticker thread uses.\n",
       0],
    _ba_ = [0, cst$3, 0],
    _bb_ = [0, cst$4],
    cst_This_determines_what_OS_su =
      "\n  This determines what OS subsystem Async uses to watch file descriptors for being ready.\n  The default is to use [epoll] if timerfd's are supported and if not, use [select].\n\n  Allowed values are:",
    _bc_ = [0, cst$3, 0],
    _bd_ = [0, cst$4],
    cst_This_determines_the_driver =
      "\n  This determines the driver for using the io_uring. The default is not to use\n  [io_uring] at all.\nAllowed values are:",
    _be_ =
      [0,
       "\n  The maximum number of submission queue entries that can be stored within\n  the [io_uring] submission queue at a given time. Will be rounded up to\n  the nearest power of two internally within [io_uring].\n",
       0],
    _bf_ =
      [0,
       "\n  The maximum number of ready events that Async's call to [Epoll.wait]\n  will handle.\n",
       0],
    _bg_ =
      [0,
       "\n  Can be set to [Do_not_watch] or:\n\n    (Watch ((dump_if_delayed_by SPAN) (how_to_dump HOW)))\n\n  If set to [Watch], then on program start this will start a regular\n  Async job that increments a counter, and a C thread that will\n  detect if that job is delayed by [dump_if_delayed_by], and if so,\n  will core dump the program.  If available, [/usr/bin/gcore] is\n  used by default to dump the core, which should allow the program\n  to continue running.  Otherwise, [abort] will be called from C,\n  which will kill the program while causing a core dump.  One can\n  force [abort] or [gcore] via [how_to_dump], which should be one of:\n  [Call_abort], [Call_gcore], or [Default].\n",
       0],
    _bh_ =
      [0,
       "\n  If true, causes Async routines to check if they are being accessed\n  from some thread other than the thread currently holding the Async\n  lock, which is not allowed and can lead to very confusing behavior.\n",
       0],
    _bi_ =
      [0,
       "\n  If true, causes Async to regularly check invariants of its internal\n  data structures.  This can substantially slow down your program.\n",
       0],
    _bj_ =
      [0,
       "\n  By default, Async will send an exception to the toplevel monitor\n  if it detects that the thread pool is stuck for longer than this.\n",
       0],
    cst_timing_wheel_config$1 = cst_timing_wheel_config$2,
    cst_thread_pool_cpu_affinity$1 = cst_thread_pool_cpu_affinity$2,
    cst_report_thread_pool_stuck_f$1 = cst_report_thread_pool_stuck_f$2,
    cst_record_backtraces$1 = cst_record_backtraces$2,
    cst_print_debug_messages_for$1 = cst_print_debug_messages_for$2,
    cst_min_inter_cycle_timeout$1 = cst_min_inter_cycle_timeout$2,
    cst_max_num_jobs_per_priority_$1 = cst_max_num_jobs_per_priority_$2,
    cst_max_num_threads$1 = cst_max_num_threads$2,
    cst_max_num_open_file_descrs$1 = cst_max_num_open_file_descrs$2,
    cst_max_inter_cycle_timeout$1 = cst_max_inter_cycle_timeout$2,
    cst_file_descr_watcher$1 = cst_file_descr_watcher$2,
    cst_io_uring_mode$1 = cst_io_uring_mode$2,
    cst_io_uring_max_submission_en$1 = cst_io_uring_max_submission_en$2,
    cst_epoll_max_ready_events$1 = cst_epoll_max_ready_events$2,
    cst_dump_core_on_job_delay$1 = cst_dump_core_on_job_delay$2,
    cst_detect_invalid_access_from$1 = cst_detect_invalid_access_from$2,
    cst_check_invariants$1 = cst_check_invariants$2,
    cst_abort_after_thread_pool_st$1 = cst_abort_after_thread_pool_st$2,
    _am_ = [0, cst_timing_wheel_config$2],
    _an_ = [0, cst_thread_pool_cpu_affinity$2],
    _ao_ = [0, cst_report_thread_pool_stuck_f$2],
    _ap_ = [0, cst_record_backtraces$2],
    _aq_ = [0, cst_print_debug_messages_for$2],
    _ar_ = [0, cst_min_inter_cycle_timeout$2],
    _as_ = [0, cst_max_num_jobs_per_priority_$2],
    _at_ = [0, cst_max_num_threads$2],
    _au_ = [0, cst_max_num_open_file_descrs$2],
    _av_ = [0, cst_max_inter_cycle_timeout$2],
    _aw_ = [0, cst_file_descr_watcher$2],
    _ax_ = [0, cst_io_uring_mode$2],
    _ay_ = [0, cst_io_uring_max_submission_en$2],
    _az_ = [0, cst_epoll_max_ready_events$2],
    _aA_ = [0, cst_dump_core_on_job_delay$2],
    _aB_ = [0, cst_detect_invalid_access_from$2],
    _aC_ = [0, cst_check_invariants$2],
    _aD_ = [0, cst_abort_after_thread_pool_st$2],
    cst_timing_wheel_config$0 = cst_timing_wheel_config$2,
    cst_thread_pool_cpu_affinity$0 = cst_thread_pool_cpu_affinity$2,
    cst_report_thread_pool_stuck_f$0 = cst_report_thread_pool_stuck_f$2,
    cst_record_backtraces$0 = cst_record_backtraces$2,
    cst_print_debug_messages_for$0 = cst_print_debug_messages_for$2,
    cst_min_inter_cycle_timeout$0 = cst_min_inter_cycle_timeout$2,
    cst_max_num_jobs_per_priority_$0 = cst_max_num_jobs_per_priority_$2,
    cst_max_num_threads$0 = cst_max_num_threads$2,
    cst_max_num_open_file_descrs$0 = cst_max_num_open_file_descrs$2,
    cst_max_inter_cycle_timeout$0 = cst_max_inter_cycle_timeout$2,
    cst_file_descr_watcher$0 = cst_file_descr_watcher$2,
    cst_io_uring_mode$0 = cst_io_uring_mode$2,
    cst_io_uring_max_submission_en$0 = cst_io_uring_max_submission_en$2,
    cst_epoll_max_ready_events$0 = cst_epoll_max_ready_events$2,
    cst_dump_core_on_job_delay$0 = cst_dump_core_on_job_delay$2,
    cst_detect_invalid_access_from$0 = cst_detect_invalid_access_from$2,
    cst_check_invariants$0 = cst_check_invariants$2,
    cst_abort_after_thread_pool_st$0 = cst_abort_after_thread_pool_st$2,
    _A_ = [0, cst_Disabled],
    _B_ = [0, cst_Eventfd],
    _C_ = [0, cst_If_available_eventfd],
    _D_ = [0, cst_From_scheduler],
    _w_ = [0, cst_Epoll_if_timerfd],
    _x_ = [0, cst_Epoll],
    _y_ = [0, cst_Select],
    _z_ = [0, cst_Io_uring],
    _h_ = [0, cst_All],
    _i_ = [0, cst_Clock],
    _j_ = [0, cst_Fd],
    _k_ = [0, cst_File_descr_watcher],
    _l_ = [0, cst_Finalizers],
    _m_ = [0, cst_Interruptor],
    _n_ = [0, cst_Monitor],
    _o_ = [0, cst_Monitor_send_exn],
    _p_ = [0, cst_Parallel],
    _q_ = [0, cst_Reader],
    _r_ = [0, cst_Scheduler],
    _s_ = [0, cst_Shutdown],
    _t_ = [0, cst_Thread_pool],
    _u_ = [0, cst_Thread_safe],
    _v_ = [0, cst_Writer],
    _f_ = [0, cst_Watch],
    _g_ = [0, cst_Do_not_watch],
    _d_ = [0, cst_how_to_dump$0],
    _e_ = [0, cst_dump_if_delayed_by$0],
    cst_how_to_dump = cst_how_to_dump$0,
    cst_dump_if_delayed_by = cst_dump_if_delayed_by$0,
    _a_ = [0, cst_Default],
    _b_ = [0, cst_Call_abort],
    _c_ = [0, cst_Call_gcore],
    cst_timing_wheel_config = cst_timing_wheel_config$2,
    cst_thread_pool_cpu_affinity = cst_thread_pool_cpu_affinity$2,
    cst_report_thread_pool_stuck_f = cst_report_thread_pool_stuck_f$2,
    cst_record_backtraces = cst_record_backtraces$2,
    cst_print_debug_messages_for = cst_print_debug_messages_for$2,
    cst_min_inter_cycle_timeout = cst_min_inter_cycle_timeout$2,
    cst_max_num_jobs_per_priority_ = cst_max_num_jobs_per_priority_$2,
    cst_max_num_threads = cst_max_num_threads$2,
    cst_max_num_open_file_descrs = cst_max_num_open_file_descrs$2,
    cst_max_inter_cycle_timeout = cst_max_inter_cycle_timeout$2,
    cst_file_descr_watcher = cst_file_descr_watcher$2,
    cst_io_uring_mode = cst_io_uring_mode$2,
    cst_io_uring_max_submission_en = cst_io_uring_max_submission_en$2,
    cst_epoll_max_ready_events = cst_epoll_max_ready_events$2,
    cst_dump_core_on_job_delay = cst_dump_core_on_job_delay$2,
    cst_detect_invalid_access_from = cst_detect_invalid_access_from$2,
    cst_check_invariants = cst_check_invariants$2,
    cst_abort_after_thread_pool_st = cst_abort_after_thread_pool_st$2,
    _aE_ = [0, 0],
    _aG_ = [0, 0],
    _aH_ = [0, 0],
    _aO_ = [0, 0],
    _aP_ = [0, 0],
    _aS_ = [0, 0],
    _aT_ = [0, 0],
    _aU_ = [0, 0],
    _aW_ = [0, 0, [0, 1, [0, 2, 0]]],
    _aZ_ = [0, [0, 2, [0, 10, 0]]],
    cst_async_kernel_config = cst_async_kernel_config$0,
    cst_Async_kernel_config = cst_Async_kernel_config$0;
   function equal(t1, t2){return t1 === t2 ? 1 : 0;}
   var
    t_of_sexp$5 = Core_Int[76],
    sexp_of_t$5 = Core_Int[77],
    validate$4 = Core_Int[109],
    Max_num_threads =
      caml_call1
       (Core_Validated[3], [0, t_of_sexp$5, sexp_of_t$5, here$4, validate$4]),
    t_of_sexp$6 = Core_Int[76],
    sexp_of_t$6 = Core_Int[77],
    validate$5 = Core_Int[109],
    Max_num_jobs_per_priority_per_ =
      caml_call1
       (Core_Validated[3], [0, t_of_sexp$6, sexp_of_t$6, here$5, validate$5]);
   function t_of_sexp$7(sexp_004){
    a:
    {
     if(0 === sexp_004[0]){
      var _dl_ = sexp_004[1];
      b:
      if(caml_string_notequal(_dl_, cst_Call_abort)){
       c:
       if(caml_string_notequal(_dl_, cst_Call_gcore)){
        if(caml_string_notequal(_dl_, cst_Default)){
         if(! caml_string_notequal(_dl_, cst_call_abort)) break b;
         if(! caml_string_notequal(_dl_, cst_call_gcore)) break c;
         if(caml_string_notequal(_dl_, cst_default$0)) break a;
        }
        return 0;
       }
       return 2;
      }
      return 1;
     }
     var _dm_ = sexp_004[1];
     if(! _dm_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_003, sexp_004);
     var _dn_ = _dm_[1];
     if(0 !== _dn_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_003, sexp_004);
     var _do_ = _dn_[1];
     b:
     if(caml_string_notequal(_do_, cst_Call_abort)){
      c:
      if(caml_string_notequal(_do_, cst_Call_gcore)){
       if(caml_string_notequal(_do_, cst_Default)){
        if(! caml_string_notequal(_do_, cst_call_abort)) break b;
        if(! caml_string_notequal(_do_, cst_call_gcore)) break c;
        if(caml_string_notequal(_do_, cst_default$0)) break a;
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_003, sexp_004);
   }
   function sexp_of_t$7(param){
    switch(param){case 0: return _a_;case 1: return _b_;default: return _c_;
    }
   }
   var How_to_dump = [0, t_of_sexp$7, sexp_of_t$7];
   function watch_of_sexp(x_007){
    function _di_(param){
     var how_to_dump = param[2][1], dump_if_delayed_by = param[1];
     return [0, dump_if_delayed_by, how_to_dump];
    }
    var _dj_ = 0;
    function _dk_(param){
     return caml_string_notequal(param, cst_dump_if_delayed_by$0)
             ? caml_string_notequal(param, cst_how_to_dump$0) ? -1 : 1
             : 0;
    }
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_006,
             [0,
              cst_dump_if_delayed_by,
              1,
              Core_Time_ns[1][9],
              [0, cst_how_to_dump, 1, How_to_dump[1], 0]],
             _dk_,
             _dj_,
             _di_,
             x_007);
   }
   function sexp_of_watch(param){
    var
     how_to_dump_011 = param[2],
     dump_if_delayed_by_009 = param[1],
     arg_012 = caml_call1(How_to_dump[2], how_to_dump_011),
     bnds_008 = [0, [1, [0, _d_, [0, arg_012, 0]]], 0],
     arg_010 = caml_call1(Core_Time_ns[1][10], dump_if_delayed_by_009),
     bnds_008$0 = [0, [1, [0, _e_, [0, arg_010, 0]]], bnds_008];
    return [1, bnds_008$0];
   }
   function t_of_sexp$8(sexp_017){
    a:
    {
     if(0 === sexp_017[0]){
      var _df_ = sexp_017[1];
      b:
      if(caml_string_notequal(_df_, cst_Do_not_watch)){
       if(caml_string_notequal(_df_, cst_Watch)){
        if(! caml_string_notequal(_df_, cst_do_not_watch)) break b;
        if(caml_string_notequal(_df_, cst_watch)) break a;
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[9], error_source_015, sexp_017);
      }
      return 0;
     }
     var _dg_ = sexp_017[1];
     if(! _dg_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_015, sexp_017);
     var _dh_ = _dg_[1];
     if(0 !== _dh_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_015, sexp_017);
     var tag_018 = _dh_[1];
     b:
     if(caml_string_notequal(tag_018, cst_Do_not_watch)){
      if(caml_string_notequal(tag_018, cst_Watch)){
       if(! caml_string_notequal(tag_018, cst_do_not_watch)) break b;
       if(caml_string_notequal(tag_018, cst_watch)) break a;
      }
      var sexp_args_019 = _dg_[2];
      if(sexp_args_019 && ! sexp_args_019[2]){
       var arg0_020 = sexp_args_019[1], res0_021 = watch_of_sexp(arg0_020);
       return [0, res0_021];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[8],
               error_source_015,
               tag_018,
               sexp_017);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[7], error_source_015, sexp_017);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_015, sexp_017);
   }
   function sexp_of_t$8(param){
    if(! param) return _g_;
    var arg0_022 = param[1], res0_023 = sexp_of_watch(arg0_022);
    return [1, [0, _f_, [0, res0_023, 0]]];
   }
   function t_of_sexp$9(sexp_029){
    a:
    {
     if(0 === sexp_029[0]){
      var _c7_ = sexp_029[1], _c8_ = caml_string_compare(_c7_, cst_all);
      b:
      {
       c:
       {
        d:
        {
         e:
         {
          f:
          {
           g:
           {
            h:
            {
             i:
             {
              j:
              {
               k:
               {
                l:
                {
                 m:
                 {
                  n:
                  {
                   o:
                   {
                    if(0 <= _c8_){
                     if(0 >= _c8_) break h;
                     var _c9_ = caml_string_compare(_c7_, cst_parallel);
                     if(0 <= _c9_){
                      if(0 >= _c9_) break o;
                      if(! caml_string_notequal(_c7_, cst_reader)) break n;
                      if(! caml_string_notequal(_c7_, cst_scheduler)) break m;
                      if(! caml_string_notequal(_c7_, cst_shutdown)) break l;
                      if(! caml_string_notequal(_c7_, cst_thread_pool)) break k;
                      if(! caml_string_notequal(_c7_, cst_thread_safe)) break j;
                      if(caml_string_notequal(_c7_, cst_writer)) break a;
                      break i;
                     }
                     if(! caml_string_notequal(_c7_, cst_clock)) break g;
                     if(! caml_string_notequal(_c7_, cst_fd)) break f;
                     if(! caml_string_notequal(_c7_, cst_file_descr_watcher$2))
                      break e;
                     if(! caml_string_notequal(_c7_, cst_finalizers)) break d;
                     if(! caml_string_notequal(_c7_, cst_interruptor)) break c;
                     if(! caml_string_notequal(_c7_, cst_monitor)) break b;
                     if(caml_string_notequal(_c7_, cst_monitor_send_exn))
                      break a;
                    }
                    else{
                     var _c__ = caml_string_compare(_c7_, cst_Monitor_send_exn);
                     if(0 > _c__){
                      if(! caml_string_notequal(_c7_, cst_All)) break h;
                      if(! caml_string_notequal(_c7_, cst_Clock)) break g;
                      if(! caml_string_notequal(_c7_, cst_Fd)) break f;
                      if(! caml_string_notequal(_c7_, cst_File_descr_watcher))
                       break e;
                      if(! caml_string_notequal(_c7_, cst_Finalizers)) break d;
                      if(! caml_string_notequal(_c7_, cst_Interruptor)) break c;
                      if(caml_string_notequal(_c7_, cst_Monitor)) break a;
                      break b;
                     }
                     if(0 < _c__){
                      if(! caml_string_notequal(_c7_, cst_Parallel)) break o;
                      if(! caml_string_notequal(_c7_, cst_Reader)) break n;
                      if(! caml_string_notequal(_c7_, cst_Scheduler)) break m;
                      if(! caml_string_notequal(_c7_, cst_Shutdown)) break l;
                      if(! caml_string_notequal(_c7_, cst_Thread_pool)) break k;
                      if(! caml_string_notequal(_c7_, cst_Thread_safe)) break j;
                      if(caml_string_notequal(_c7_, cst_Writer)) break a;
                      break i;
                     }
                    }
                    return 7;
                   }
                   return 8;
                  }
                  return 9;
                 }
                 return 10;
                }
                return 11;
               }
               return 12;
              }
              return 13;
             }
             return 14;
            }
            return 0;
           }
           return 1;
          }
          return 2;
         }
         return 3;
        }
        return 4;
       }
       return 5;
      }
      return 6;
     }
     var _c$_ = sexp_029[1];
     if(! _c$_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_028, sexp_029);
     var _da_ = _c$_[1];
     if(0 !== _da_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_028, sexp_029);
     var _db_ = _da_[1], _dc_ = caml_string_compare(_db_, cst_all);
     b:
     {
      c:
      {
       d:
       {
        e:
        {
         f:
         {
          g:
          {
           h:
           {
            i:
            {
             j:
             {
              k:
              {
               l:
               {
                m:
                {
                 n:
                 {
                  o:
                  {
                   if(0 <= _dc_){
                    if(0 >= _dc_) break h;
                    var _dd_ = caml_string_compare(_db_, cst_parallel);
                    if(0 <= _dd_){
                     if(0 >= _dd_) break o;
                     if(! caml_string_notequal(_db_, cst_reader)) break n;
                     if(! caml_string_notequal(_db_, cst_scheduler)) break m;
                     if(! caml_string_notequal(_db_, cst_shutdown)) break l;
                     if(! caml_string_notequal(_db_, cst_thread_pool)) break k;
                     if(! caml_string_notequal(_db_, cst_thread_safe)) break j;
                     if(caml_string_notequal(_db_, cst_writer)) break a;
                     break i;
                    }
                    if(! caml_string_notequal(_db_, cst_clock)) break g;
                    if(! caml_string_notequal(_db_, cst_fd)) break f;
                    if(! caml_string_notequal(_db_, cst_file_descr_watcher$2))
                     break e;
                    if(! caml_string_notequal(_db_, cst_finalizers)) break d;
                    if(! caml_string_notequal(_db_, cst_interruptor)) break c;
                    if(! caml_string_notequal(_db_, cst_monitor)) break b;
                    if(caml_string_notequal(_db_, cst_monitor_send_exn))
                     break a;
                   }
                   else{
                    var _de_ = caml_string_compare(_db_, cst_Monitor_send_exn);
                    if(0 > _de_){
                     if(! caml_string_notequal(_db_, cst_All)) break h;
                     if(! caml_string_notequal(_db_, cst_Clock)) break g;
                     if(! caml_string_notequal(_db_, cst_Fd)) break f;
                     if(! caml_string_notequal(_db_, cst_File_descr_watcher))
                      break e;
                     if(! caml_string_notequal(_db_, cst_Finalizers)) break d;
                     if(! caml_string_notequal(_db_, cst_Interruptor)) break c;
                     if(caml_string_notequal(_db_, cst_Monitor)) break a;
                     break b;
                    }
                    if(0 < _de_){
                     if(! caml_string_notequal(_db_, cst_Parallel)) break o;
                     if(! caml_string_notequal(_db_, cst_Reader)) break n;
                     if(! caml_string_notequal(_db_, cst_Scheduler)) break m;
                     if(! caml_string_notequal(_db_, cst_Shutdown)) break l;
                     if(! caml_string_notequal(_db_, cst_Thread_pool)) break k;
                     if(! caml_string_notequal(_db_, cst_Thread_safe)) break j;
                     if(caml_string_notequal(_db_, cst_Writer)) break a;
                     break i;
                    }
                   }
                   return caml_call2
                           (Sexplib0_Sexp_conv_error[7], error_source_028, sexp_029);
                  }
                  return caml_call2
                          (Sexplib0_Sexp_conv_error[7], error_source_028, sexp_029);
                 }
                 return caml_call2
                         (Sexplib0_Sexp_conv_error[7], error_source_028, sexp_029);
                }
                return caml_call2
                        (Sexplib0_Sexp_conv_error[7], error_source_028, sexp_029);
               }
               return caml_call2
                       (Sexplib0_Sexp_conv_error[7], error_source_028, sexp_029);
              }
              return caml_call2
                      (Sexplib0_Sexp_conv_error[7], error_source_028, sexp_029);
             }
             return caml_call2
                     (Sexplib0_Sexp_conv_error[7], error_source_028, sexp_029);
            }
            return caml_call2
                    (Sexplib0_Sexp_conv_error[7], error_source_028, sexp_029);
           }
           return caml_call2
                   (Sexplib0_Sexp_conv_error[7], error_source_028, sexp_029);
          }
          return caml_call2
                  (Sexplib0_Sexp_conv_error[7], error_source_028, sexp_029);
         }
         return caml_call2
                 (Sexplib0_Sexp_conv_error[7], error_source_028, sexp_029);
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[7], error_source_028, sexp_029);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[7], error_source_028, sexp_029);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_028, sexp_029);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[7], error_source_028, sexp_029);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_028, sexp_029);
   }
   function sexp_of_t$9(param){
    switch(param){
      case 0:
       return _h_;
      case 1:
       return _i_;
      case 2:
       return _j_;
      case 3:
       return _k_;
      case 4:
       return _l_;
      case 5:
       return _m_;
      case 6:
       return _n_;
      case 7:
       return _o_;
      case 8:
       return _p_;
      case 9:
       return _q_;
      case 10:
       return _r_;
      case 11:
       return _s_;
      case 12:
       return _t_;
      case 13:
       return _u_;
      default: return _v_;
    }
   }
   function equal$0(x_030, x_031){
    return 0 === runtime.caml_int_compare(x_030, x_031) ? 1 : 0;
   }
   var
    include$2 = caml_call1(Core_Sexpable[1], [0, t_of_sexp$9, sexp_of_t$9]),
    to_string = include$2[2];
   function t_of_sexp$10(sexp_037){
    a:
    {
     if(0 === sexp_037[0]){
      var _c3_ = sexp_037[1];
      b:
      if(caml_string_notequal(_c3_, cst_Epoll)){
       c:
       if(caml_string_notequal(_c3_, cst_Epoll_if_timerfd)){
        d:
        if(caml_string_notequal(_c3_, cst_Io_uring)){
         if(caml_string_notequal(_c3_, cst_Select)){
          if(! caml_string_notequal(_c3_, cst_epoll)) break b;
          if(! caml_string_notequal(_c3_, cst_epoll_if_timerfd)) break c;
          if(! caml_string_notequal(_c3_, cst_io_uring)) break d;
          if(caml_string_notequal(_c3_, cst_select)) break a;
         }
         return 2;
        }
        return 3;
       }
       return 0;
      }
      return 1;
     }
     var _c4_ = sexp_037[1];
     if(! _c4_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_036, sexp_037);
     var _c5_ = _c4_[1];
     if(0 !== _c5_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_036, sexp_037);
     var _c6_ = _c5_[1];
     b:
     if(caml_string_notequal(_c6_, cst_Epoll)){
      c:
      if(caml_string_notequal(_c6_, cst_Epoll_if_timerfd)){
       d:
       if(caml_string_notequal(_c6_, cst_Io_uring)){
        if(caml_string_notequal(_c6_, cst_Select)){
         if(! caml_string_notequal(_c6_, cst_epoll)) break b;
         if(! caml_string_notequal(_c6_, cst_epoll_if_timerfd)) break c;
         if(! caml_string_notequal(_c6_, cst_io_uring)) break d;
         if(caml_string_notequal(_c6_, cst_select)) break a;
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[7], error_source_036, sexp_037);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[7], error_source_036, sexp_037);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_036, sexp_037);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[7], error_source_036, sexp_037);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_036, sexp_037);
   }
   function sexp_of_t$10(param){
    switch(param){
      case 0:
       return _w_;
      case 1:
       return _x_;
      case 2:
       return _y_;
      default: return _z_;
    }
   }
   var
    T = [0, t_of_sexp$10, sexp_of_t$10],
    t_of_sexp$11 = T[1],
    sexp_of_t$11 = T[2],
    include$3 = caml_call1(Core_Sexpable[1], T),
    to_string$0 = include$3[2];
   function t_of_sexp$12(sexp_041){
    a:
    {
     if(0 === sexp_041[0]){
      var _cZ_ = sexp_041[1];
      b:
      if(caml_string_notequal(_cZ_, cst_Disabled)){
       c:
       if(caml_string_notequal(_cZ_, cst_Eventfd)){
        d:
        if(caml_string_notequal(_cZ_, cst_From_scheduler)){
         if(caml_string_notequal(_cZ_, cst_If_available_eventfd)){
          if(! caml_string_notequal(_cZ_, cst_disabled)) break b;
          if(! caml_string_notequal(_cZ_, cst_eventfd)) break c;
          if(! caml_string_notequal(_cZ_, cst_from_scheduler)) break d;
          if(caml_string_notequal(_cZ_, cst_if_available_eventfd)) break a;
         }
         return 2;
        }
        return 3;
       }
       return 1;
      }
      return 0;
     }
     var _c0_ = sexp_041[1];
     if(! _c0_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_040, sexp_041);
     var _c1_ = _c0_[1];
     if(0 !== _c1_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_040, sexp_041);
     var _c2_ = _c1_[1];
     b:
     if(caml_string_notequal(_c2_, cst_Disabled)){
      c:
      if(caml_string_notequal(_c2_, cst_Eventfd)){
       d:
       if(caml_string_notequal(_c2_, cst_From_scheduler)){
        if(caml_string_notequal(_c2_, cst_If_available_eventfd)){
         if(! caml_string_notequal(_c2_, cst_disabled)) break b;
         if(! caml_string_notequal(_c2_, cst_eventfd)) break c;
         if(! caml_string_notequal(_c2_, cst_from_scheduler)) break d;
         if(caml_string_notequal(_c2_, cst_if_available_eventfd)) break a;
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[7], error_source_040, sexp_041);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[7], error_source_040, sexp_041);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_040, sexp_041);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[7], error_source_040, sexp_041);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_040, sexp_041);
   }
   function sexp_of_t$12(param){
    switch(param){
      case 0:
       return _A_;
      case 1:
       return _B_;
      case 2:
       return _C_;
      default: return _D_;
    }
   }
   var
    T$0 = [0, t_of_sexp$12, sexp_of_t$12],
    t_of_sexp$13 = T$0[1],
    sexp_of_t$13 = T$0[2],
    include$4 = caml_call1(Core_Sexpable[1], T$0),
    to_string$1 = include$4[2];
   function timing_wheel_config(r){return r[18];}
   function thread_pool_cpu_affinity(r){return r[17];}
   function report_thread_pool_stuck_for(r){return r[16];}
   function record_backtraces(r){return r[15];}
   function print_debug_messages_for(r){return r[14];}
   function min_inter_cycle_timeout(r){return r[13];}
   function max_num_jobs_per_priority_per_(r){return r[12];}
   function max_num_threads(r){return r[11];}
   function max_num_open_file_descrs(r){return r[10];}
   function max_inter_cycle_timeout(r){return r[9];}
   function file_descr_watcher(r){return r[8];}
   function io_uring_mode(r){return r[7];}
   function io_uring_max_submission_entrie(r){return r[6];}
   function epoll_max_ready_events(r){return r[5];}
   function dump_core_on_job_delay(r){return r[4];}
   function detect_invalid_access_from_thr(r){return r[3];}
   function check_invariants(r){return r[2];}
   function abort_after_thread_pool_stuck_(r){return r[1];}
   function _E_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            v];
   }
   var
    _F_ = 0,
    timing_wheel_config$0 =
      [0,
       function(param){return 0;},
       cst_timing_wheel_config,
       _F_,
       timing_wheel_config,
       _E_];
   function _G_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            v,
            r[18]];
   }
   var
    _H_ = 0,
    thread_pool_cpu_affinity$0 =
      [0,
       function(param){return 0;},
       cst_thread_pool_cpu_affinity,
       _H_,
       thread_pool_cpu_affinity,
       _G_];
   function _I_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            v,
            r[17],
            r[18]];
   }
   var
    _J_ = 0,
    report_thread_pool_stuck_for$0 =
      [0,
       function(param){return 0;},
       cst_report_thread_pool_stuck_f,
       _J_,
       report_thread_pool_stuck_for,
       _I_];
   function _K_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            v,
            r[16],
            r[17],
            r[18]];
   }
   var
    _L_ = 0,
    record_backtraces$0 =
      [0,
       function(param){return 0;},
       cst_record_backtraces,
       _L_,
       record_backtraces,
       _K_];
   function _M_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            v,
            r[15],
            r[16],
            r[17],
            r[18]];
   }
   var
    _N_ = 0,
    print_debug_messages_for$0 =
      [0,
       function(param){return 0;},
       cst_print_debug_messages_for,
       _N_,
       print_debug_messages_for,
       _M_];
   function _O_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            v,
            r[14],
            r[15],
            r[16],
            r[17],
            r[18]];
   }
   var
    _P_ = 0,
    min_inter_cycle_timeout$0 =
      [0,
       function(param){return 0;},
       cst_min_inter_cycle_timeout,
       _P_,
       min_inter_cycle_timeout,
       _O_];
   function _Q_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            v,
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18]];
   }
   var
    _R_ = 0,
    max_num_jobs_per_priority_per_$0 =
      [0,
       function(param){return 0;},
       cst_max_num_jobs_per_priority_,
       _R_,
       max_num_jobs_per_priority_per_,
       _Q_];
   function _S_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            v,
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18]];
   }
   var
    _T_ = 0,
    max_num_threads$0 =
      [0,
       function(param){return 0;},
       cst_max_num_threads,
       _T_,
       max_num_threads,
       _S_];
   function _U_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            v,
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18]];
   }
   var
    _V_ = 0,
    max_num_open_file_descrs$0 =
      [0,
       function(param){return 0;},
       cst_max_num_open_file_descrs,
       _V_,
       max_num_open_file_descrs,
       _U_];
   function _W_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            v,
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18]];
   }
   var
    _X_ = 0,
    max_inter_cycle_timeout$0 =
      [0,
       function(param){return 0;},
       cst_max_inter_cycle_timeout,
       _X_,
       max_inter_cycle_timeout,
       _W_];
   function _Y_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            v,
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18]];
   }
   var
    _Z_ = 0,
    file_descr_watcher$0 =
      [0,
       function(param){return 0;},
       cst_file_descr_watcher,
       _Z_,
       file_descr_watcher,
       _Y_];
   function ___(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            v,
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18]];
   }
   var
    _$_ = 0,
    io_uring_mode$0 =
      [0,
       function(param){return 0;},
       cst_io_uring_mode,
       _$_,
       io_uring_mode,
       ___];
   function _aa_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            r[5],
            v,
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18]];
   }
   var
    _ab_ = 0,
    io_uring_max_submission_entrie$0 =
      [0,
       function(param){return 0;},
       cst_io_uring_max_submission_en,
       _ab_,
       io_uring_max_submission_entrie,
       _aa_];
   function _ac_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            r[4],
            v,
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18]];
   }
   var
    _ad_ = 0,
    epoll_max_ready_events$0 =
      [0,
       function(param){return 0;},
       cst_epoll_max_ready_events,
       _ad_,
       epoll_max_ready_events,
       _ac_];
   function _ae_(r, v){
    return [0,
            r[1],
            r[2],
            r[3],
            v,
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18]];
   }
   var
    _af_ = 0,
    dump_core_on_job_delay$0 =
      [0,
       function(param){return 0;},
       cst_dump_core_on_job_delay,
       _af_,
       dump_core_on_job_delay,
       _ae_];
   function _ag_(r, v){
    return [0,
            r[1],
            r[2],
            v,
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18]];
   }
   var
    _ah_ = 0,
    detect_invalid_access_from_thr$0 =
      [0,
       function(param){return 0;},
       cst_detect_invalid_access_from,
       _ah_,
       detect_invalid_access_from_thr,
       _ag_];
   function _ai_(r, v){
    return [0,
            r[1],
            v,
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18]];
   }
   var
    _aj_ = 0,
    check_invariants$0 =
      [0,
       function(param){return 0;},
       cst_check_invariants,
       _aj_,
       check_invariants,
       _ai_];
   function _ak_(r, v){
    return [0,
            v,
            r[2],
            r[3],
            r[4],
            r[5],
            r[6],
            r[7],
            r[8],
            r[9],
            r[10],
            r[11],
            r[12],
            r[13],
            r[14],
            r[15],
            r[16],
            r[17],
            r[18]];
   }
   var
    _al_ = 0,
    abort_after_thread_pool_stuck_$0 =
      [0,
       function(param){return 0;},
       cst_abort_after_thread_pool_st,
       _al_,
       abort_after_thread_pool_stuck_,
       _ak_];
   function sexp_of_t$14(param){
    var
     timing_wheel_config_114 = param[18],
     thread_pool_cpu_affinity_110 = param[17],
     report_thread_pool_stuck_for_1 = param[16],
     record_backtraces_102 = param[15],
     print_debug_messages_for_098 = param[14],
     min_inter_cycle_timeout_094 = param[13],
     max_num_jobs_per_priority_per_ = param[12],
     max_num_threads_086 = param[11],
     max_num_open_file_descrs_082 = param[10],
     max_inter_cycle_timeout_078 = param[9],
     file_descr_watcher_074 = param[8],
     io_uring_mode_070 = param[7],
     io_uring_max_submission_entrie = param[6],
     epoll_max_ready_events_062 = param[5],
     dump_core_on_job_delay_058 = param[4],
     detect_invalid_access_from_thr = param[3],
     check_invariants_050 = param[2],
     abort_after_thread_pool_stuck_ = param[1],
     bnds_045 = 0;
    if(timing_wheel_config_114)
     var
      v_115 = timing_wheel_config_114[1],
      arg_117 = caml_call1(Timing_wheel[8][2], v_115),
      bnd_116 = [1, [0, _am_, [0, arg_117, 0]]],
      bnds_045$0 = [0, bnd_116, bnds_045];
    else
     var bnds_045$0 = bnds_045;
    if(thread_pool_cpu_affinity_110)
     var
      v_111 = thread_pool_cpu_affinity_110[1],
      arg_113 = caml_call1(Thread_pool_cpu_affinity[3], v_111),
      bnd_112 = [1, [0, _an_, [0, arg_113, 0]]],
      bnds_045$1 = [0, bnd_112, bnds_045$0];
    else
     var bnds_045$1 = bnds_045$0;
    if(report_thread_pool_stuck_for_1)
     var
      v_107 = report_thread_pool_stuck_for_1[1],
      arg_109 = caml_call1(Core_Time_ns[1][10], v_107),
      bnd_108 = [1, [0, _ao_, [0, arg_109, 0]]],
      bnds_045$2 = [0, bnd_108, bnds_045$1];
    else
     var bnds_045$2 = bnds_045$1;
    if(record_backtraces_102)
     var
      v_103 = record_backtraces_102[1],
      arg_105 = caml_call1(Core[323], v_103),
      bnd_104 = [1, [0, _ap_, [0, arg_105, 0]]],
      bnds_045$3 = [0, bnd_104, bnds_045$2];
    else
     var bnds_045$3 = bnds_045$2;
    if(print_debug_messages_for_098)
     var
      v_099 = print_debug_messages_for_098[1],
      arg_101 = caml_call2(Core[472], sexp_of_t$9, v_099),
      bnd_100 = [1, [0, _aq_, [0, arg_101, 0]]],
      bnds_045$4 = [0, bnd_100, bnds_045$3];
    else
     var bnds_045$4 = bnds_045$3;
    if(min_inter_cycle_timeout_094)
     var
      v_095 = min_inter_cycle_timeout_094[1],
      arg_097 = caml_call1(Min_inter_cycle_timeout[2], v_095),
      bnd_096 = [1, [0, _ar_, [0, arg_097, 0]]],
      bnds_045$5 = [0, bnd_096, bnds_045$4];
    else
     var bnds_045$5 = bnds_045$4;
    if(max_num_jobs_per_priority_per_)
     var
      v_091 = max_num_jobs_per_priority_per_[1],
      arg_093 = caml_call1(Max_num_jobs_per_priority_per_[2], v_091),
      bnd_092 = [1, [0, _as_, [0, arg_093, 0]]],
      bnds_045$6 = [0, bnd_092, bnds_045$5];
    else
     var bnds_045$6 = bnds_045$5;
    if(max_num_threads_086)
     var
      v_087 = max_num_threads_086[1],
      arg_089 = caml_call1(Max_num_threads[2], v_087),
      bnd_088 = [1, [0, _at_, [0, arg_089, 0]]],
      bnds_045$7 = [0, bnd_088, bnds_045$6];
    else
     var bnds_045$7 = bnds_045$6;
    if(max_num_open_file_descrs_082)
     var
      v_083 = max_num_open_file_descrs_082[1],
      arg_085 = caml_call1(sexp_of_t$4, v_083),
      bnd_084 = [1, [0, _au_, [0, arg_085, 0]]],
      bnds_045$8 = [0, bnd_084, bnds_045$7];
    else
     var bnds_045$8 = bnds_045$7;
    if(max_inter_cycle_timeout_078)
     var
      v_079 = max_inter_cycle_timeout_078[1],
      arg_081 = caml_call1(Max_inter_cycle_timeout[2], v_079),
      bnd_080 = [1, [0, _av_, [0, arg_081, 0]]],
      bnds_045$9 = [0, bnd_080, bnds_045$8];
    else
     var bnds_045$9 = bnds_045$8;
    if(file_descr_watcher_074)
     var
      v_075 = file_descr_watcher_074[1],
      arg_077 = caml_call1(sexp_of_t$11, v_075),
      bnd_076 = [1, [0, _aw_, [0, arg_077, 0]]],
      bnds_045$10 = [0, bnd_076, bnds_045$9];
    else
     var bnds_045$10 = bnds_045$9;
    if(io_uring_mode_070)
     var
      v_071 = io_uring_mode_070[1],
      arg_073 = caml_call1(sexp_of_t$13, v_071),
      bnd_072 = [1, [0, _ax_, [0, arg_073, 0]]],
      bnds_045$11 = [0, bnd_072, bnds_045$10];
    else
     var bnds_045$11 = bnds_045$10;
    if(io_uring_max_submission_entrie)
     var
      v_067 = io_uring_max_submission_entrie[1],
      arg_069 = caml_call1(Io_uring_max_submission_entrie[2], v_067),
      bnd_068 = [1, [0, _ay_, [0, arg_069, 0]]],
      bnds_045$12 = [0, bnd_068, bnds_045$11];
    else
     var bnds_045$12 = bnds_045$11;
    if(epoll_max_ready_events_062)
     var
      v_063 = epoll_max_ready_events_062[1],
      arg_065 = caml_call1(Epoll_max_ready_events[2], v_063),
      bnd_064 = [1, [0, _az_, [0, arg_065, 0]]],
      bnds_045$13 = [0, bnd_064, bnds_045$12];
    else
     var bnds_045$13 = bnds_045$12;
    if(dump_core_on_job_delay_058)
     var
      v_059 = dump_core_on_job_delay_058[1],
      arg_061 = sexp_of_t$8(v_059),
      bnd_060 = [1, [0, _aA_, [0, arg_061, 0]]],
      bnds_045$14 = [0, bnd_060, bnds_045$13];
    else
     var bnds_045$14 = bnds_045$13;
    if(detect_invalid_access_from_thr)
     var
      v_055 = detect_invalid_access_from_thr[1],
      arg_057 = caml_call1(Core[323], v_055),
      bnd_056 = [1, [0, _aB_, [0, arg_057, 0]]],
      bnds_045$15 = [0, bnd_056, bnds_045$14];
    else
     var bnds_045$15 = bnds_045$14;
    if(check_invariants_050)
     var
      v_051 = check_invariants_050[1],
      arg_053 = caml_call1(Core[323], v_051),
      bnd_052 = [1, [0, _aC_, [0, arg_053, 0]]],
      bnds_045$16 = [0, bnd_052, bnds_045$15];
    else
     var bnds_045$16 = bnds_045$15;
    if(abort_after_thread_pool_stuck_)
     var
      v_047 = abort_after_thread_pool_stuck_[1],
      arg_049 = caml_call1(Core_Time_ns[1][10], v_047),
      bnd_048 = [1, [0, _aD_, [0, arg_049, 0]]],
      bnds_045$17 = [0, bnd_048, bnds_045$16];
    else
     var bnds_045$17 = bnds_045$16;
    return [1, bnds_045$17];
   }
   function create$0
   (abort_after_thread_pool_stuck_,
    check_invariants,
    detect_invalid_access_from_thr,
    dump_core_on_job_delay,
    epoll_max_ready_events,
    io_uring_max_submission_entrie,
    io_uring_mode,
    file_descr_watcher,
    max_inter_cycle_timeout,
    max_num_open_file_descrs,
    max_num_threads,
    max_num_jobs_per_priority_per_,
    min_inter_cycle_timeout,
    print_debug_messages_for,
    record_backtraces,
    report_thread_pool_stuck_for,
    thread_pool_cpu_affinity,
    timing_wheel_config,
    param){
    return [0,
            abort_after_thread_pool_stuck_,
            check_invariants,
            detect_invalid_access_from_thr,
            dump_core_on_job_delay,
            epoll_max_ready_events,
            io_uring_max_submission_entrie,
            io_uring_mode,
            file_descr_watcher,
            max_inter_cycle_timeout,
            max_num_open_file_descrs,
            max_num_threads,
            max_num_jobs_per_priority_per_,
            min_inter_cycle_timeout,
            print_debug_messages_for,
            record_backtraces,
            report_thread_pool_stuck_for,
            thread_pool_cpu_affinity,
            timing_wheel_config];
   }
   function default_timing_wheel_config_fo(word_size){
    if(word_size)
     var
      level_bits$1 = level_bits,
      alarm_precision =
        caml_call2(Timing_wheel[1][13], Timing_wheel[1][10], 3);
    else
     var
      alarm_precision$0 = Timing_wheel[1][10],
      level_bits$1 = level_bits$0,
      alarm_precision = alarm_precision$0;
    var _cY_ = [0, caml_call2(Timing_wheel[7][5], 0, level_bits$1)];
    return caml_call4(Timing_wheel[8][4], 0, _cY_, alarm_precision, 0);
   }
   var
    default_timing_wheel_config =
      default_timing_wheel_config_fo(Base_Word_size[3]),
    _aF_ = [0, caml_call1(sec, 1.)],
    _aI_ = caml_call1(sec, 0.),
    _aJ_ = [0, caml_call1(Min_inter_cycle_timeout[4], _aI_)],
    _aK_ = [0, caml_call1(Max_num_jobs_per_priority_per_[4], 500)],
    _aL_ = [0, caml_call1(Max_num_threads[4], 50)],
    _aM_ = caml_call1(sec, 0.05),
    _aN_ = [0, caml_call1(Max_inter_cycle_timeout[4], _aM_)],
    _aQ_ = [0, caml_call1(Io_uring_max_submission_entrie[4], 1024)],
    _aR_ = [0, caml_call1(Epoll_max_ready_events[4], 256)],
    default$1 =
      [0,
       [0, caml_call1(sec, 60.)],
       _aU_,
       _aT_,
       _aS_,
       _aR_,
       _aQ_,
       _aP_,
       _aO_,
       _aN_,
       [0, default$0],
       _aL_,
       _aK_,
       _aJ_,
       _aH_,
       _aG_,
       _aF_,
       _aE_,
       [0, default_timing_wheel_config]],
    _aV_ = default$1[18],
    _aX_ = caml_call1(Core_Int[99][8], _aW_),
    _aY_ = [0, [0, caml_call1(Thread_pool_cpu_affinity[1][4], _aX_)]],
    example =
      [0,
       default$1[1],
       default$1[2],
       default$1[3],
       default$1[4],
       default$1[5],
       default$1[6],
       default$1[7],
       default$1[8],
       default$1[9],
       default$1[10],
       default$1[11],
       default$1[12],
       default$1[13],
       _aZ_,
       default$1[15],
       default$1[16],
       _aY_,
       _aV_];
   function merge(t1, t2){
    function report_thread_pool_stuck_for_f(field){
     var
      _cW_ = caml_call2(Base_Field[3], field, t2),
      _cX_ = caml_call2(Base_Field[3], field, t1);
     return caml_call2(Core_Option[59], _cX_, _cW_);
    }
    var
     _cF_ = report_thread_pool_stuck_for_f(timing_wheel_config$0),
     _cG_ = report_thread_pool_stuck_for_f(thread_pool_cpu_affinity$0),
     _cH_ = report_thread_pool_stuck_for_f(report_thread_pool_stuck_for$0),
     _cI_ = report_thread_pool_stuck_for_f(record_backtraces$0),
     _cJ_ = report_thread_pool_stuck_for_f(print_debug_messages_for$0),
     _cK_ = report_thread_pool_stuck_for_f(min_inter_cycle_timeout$0),
     _cL_ = report_thread_pool_stuck_for_f(max_num_jobs_per_priority_per_$0),
     _cM_ = report_thread_pool_stuck_for_f(max_num_threads$0),
     _cN_ = report_thread_pool_stuck_for_f(max_num_open_file_descrs$0),
     _cO_ = report_thread_pool_stuck_for_f(max_inter_cycle_timeout$0),
     _cP_ = report_thread_pool_stuck_for_f(file_descr_watcher$0),
     _cQ_ = report_thread_pool_stuck_for_f(io_uring_mode$0),
     _cR_ = report_thread_pool_stuck_for_f(io_uring_max_submission_entrie$0),
     _cS_ = report_thread_pool_stuck_for_f(epoll_max_ready_events$0),
     _cT_ = report_thread_pool_stuck_for_f(dump_core_on_job_delay$0),
     _cU_ = report_thread_pool_stuck_for_f(detect_invalid_access_from_thr$0),
     _cV_ = report_thread_pool_stuck_for_f(check_invariants$0);
    return [0,
            report_thread_pool_stuck_for_f(abort_after_thread_pool_stuck_$0),
            _cV_,
            _cU_,
            _cT_,
            _cS_,
            _cR_,
            _cQ_,
            _cP_,
            _cO_,
            _cN_,
            _cM_,
            _cL_,
            _cK_,
            _cJ_,
            _cI_,
            _cH_,
            _cG_,
            _cF_];
   }
   function reduce(ts){return caml_call3(Core_List[101], ts, merge, empty);}
   function usage(param){
    var _cw_ = 0;
    function field(to_sexp, description, ac, field){
     var
      _cD_ = caml_call2(Base_Field[3], field, default$1),
      _cE_ = caml_call1(to_sexp, caml_call4(Core_Option[40], 0, 0, 0, _cD_));
     return [0, [0, caml_call1(Base_Field[2], field), _cE_, description], ac];
    }
    var
     _cb_ = Timing_wheel[8][2],
     _cc_ = Thread_pool_cpu_affinity[3],
     _cd_ = Core_Time_ns[1][10],
     _ce_ = Core[323];
    function _cf_(d){
     return caml_call2
             (concat, 0, [0, cst, [0, caml_call1(to_string, d), _a5_]]);
    }
    var
     _cg_ =
       [0,
        cst_A_list_of_tags_specifying_,
        [0,
         caml_call2(concat, 0, caml_call2(Core_List[51], list, _cf_)),
         _a4_]];
    function _ch_(x_194){return caml_call2(Core[472], sexp_of_t$9, x_194);}
    var
     _ci_ = Min_inter_cycle_timeout[2],
     _cj_ = Max_num_jobs_per_priority_per_[2],
     _ck_ = Max_num_threads[2];
    function _cl_(default$0){
     var
      _cB_ = caml_call1(raw, default$0),
      _cC_ =
        caml_call2
         (concat,
          0,
          [0, cst_min, [0, caml_call2(Core_Int[16], 0, _cB_), _a__]]);
     return caml_call1(Core[558], _cC_);
    }
    var
     _cm_ = Max_inter_cycle_timeout[2],
     _cn_ =
       [0,
        cst_This_determines_what_OS_su,
        [0,
         caml_call2
          (concat, _bb_, caml_call2(Core_List[51], list$0, to_string$0)),
         _ba_]],
     _co_ =
       [0,
        cst_This_determines_the_driver,
        [0,
         caml_call2
          (concat, _bd_, caml_call2(Core_List[51], list$1, to_string$1)),
         _bc_]],
     _cp_ = Io_uring_max_submission_entrie[2],
     _cq_ = Epoll_max_ready_events[2],
     _cr_ = Core[323],
     _cs_ = Core[323],
     fields =
       field
        (_cb_,
         _a0_,
         field
          (_cc_,
           _a1_,
           field
            (_cd_,
             _a2_,
             field
              (_ce_,
               _a3_,
               field
                (_ch_,
                 _cg_,
                 field
                  (_ci_,
                   _a6_,
                   field
                    (_cj_,
                     _a7_,
                     field
                      (_ck_,
                       _a8_,
                       field
                        (_cl_,
                         _a9_,
                         field
                          (_cm_,
                           _a$_,
                           field
                            (sexp_of_t$11,
                             _cn_,
                             field
                              (sexp_of_t$13,
                               _co_,
                               field
                                (_cp_,
                                 _be_,
                                 field
                                  (_cq_,
                                   _bf_,
                                   field
                                    (sexp_of_t$8,
                                     _bg_,
                                     field
                                      (_cr_,
                                       _bh_,
                                       field
                                        (_cs_,
                                         _bi_,
                                         field
                                          (Core_Time_ns[1][10],
                                           _bj_,
                                           0,
                                           abort_after_thread_pool_stuck_$0),
                                         check_invariants$0),
                                       detect_invalid_access_from_thr$0),
                                     dump_core_on_job_delay$0),
                                   epoll_max_ready_events$0),
                                 io_uring_max_submission_entrie$0),
                               io_uring_mode$0),
                             file_descr_watcher$0),
                           max_inter_cycle_timeout$0),
                         max_num_open_file_descrs$0),
                       max_num_threads$0),
                     max_num_jobs_per_priority_per_$0),
                   min_inter_cycle_timeout$0),
                 print_debug_messages_for$0),
               record_backtraces$0),
             report_thread_pool_stuck_for$0),
           thread_pool_cpu_affinity$0),
         timing_wheel_config$0);
    function _ct_(param){
     var description = param[3], default$0 = param[2], name = param[1];
     return caml_call2
             (concat,
              0,
              [0,
               cst$1,
               [0,
                name,
                [0,
                 cst_default,
                 [0,
                  caml_call1(Core_Sexp[86], default$0),
                  [0, cst$0, description]]]]]);
    }
    function _cu_(param, _cA_){
     var name2 = _cA_[1], name1 = param[1];
     return caml_call2(Core_String[146], name1, name2);
    }
    var
     _cv_ = caml_call2(Core_List[79], fields, _cu_),
     _cx_ =
       [0,
        cst_Here_is_an_explanation_of_,
        [0,
         caml_call2(concat, 0, caml_call2(Core_List[51], _cv_, _ct_)),
         _cw_]],
     _cy_ = sexp_of_t$14(example),
     _cz_ =
       caml_call2
        (concat,
         0,
         [0,
          cst_The,
          [0,
           environment_variable,
           [0,
            cst_environment_variable_affec,
            [0, caml_call2(Core_Sexp[84], 0, _cy_), _cx_]]]]);
    caml_call2(Core[243], _bk_, _cz_);
    return caml_call1(Core[83], 1);
   }
   function parse_variable(env_var, allow_extra_fields){
    var match = caml_call1(Core_Core_sys[19], env_var);
    if(! match) return empty;
    var string = match[1];
    if(! caml_string_notequal(string, "")) return usage(0);
    function _bs_(x_044){
     if(allow_extra_fields){
      var
       _bC_ =
         function(param){
          var
           _bX_ = param[2],
           _bY_ = _bX_[2],
           _bZ_ = _bY_[2],
           _b0_ = _bZ_[2],
           _b1_ = _b0_[2],
           _b2_ = _b1_[2],
           _b3_ = _b2_[2],
           _b4_ = _b3_[2],
           _b5_ = _b4_[2],
           _b6_ = _b5_[2],
           _b7_ = _b6_[2],
           _b8_ = _b7_[2],
           _b9_ = _b8_[2],
           _b__ = _b9_[2],
           _b$_ = _b__[2],
           _ca_ = _b$_[2],
           timing_wheel_config = _ca_[2][1],
           thread_pool_cpu_affinity = _ca_[1],
           report_thread_pool_stuck_for = _b$_[1],
           record_backtraces = _b__[1],
           print_debug_messages_for = _b9_[1],
           min_inter_cycle_timeout = _b8_[1],
           max_num_jobs_per_priority_per_ = _b7_[1],
           max_num_threads = _b6_[1],
           max_num_open_file_descrs = _b5_[1],
           max_inter_cycle_timeout = _b4_[1],
           file_descr_watcher = _b3_[1],
           io_uring_mode = _b2_[1],
           io_uring_max_submission_entrie = _b1_[1],
           epoll_max_ready_events = _b0_[1],
           dump_core_on_job_delay = _bZ_[1],
           detect_invalid_access_from_thr = _bY_[1],
           check_invariants = _bX_[1],
           abort_after_thread_pool_stuck_ = param[1];
          return [0,
                  abort_after_thread_pool_stuck_,
                  check_invariants,
                  detect_invalid_access_from_thr,
                  dump_core_on_job_delay,
                  epoll_max_ready_events,
                  io_uring_max_submission_entrie,
                  io_uring_mode,
                  file_descr_watcher,
                  max_inter_cycle_timeout,
                  max_num_open_file_descrs,
                  max_num_threads,
                  max_num_jobs_per_priority_per_,
                  min_inter_cycle_timeout,
                  print_debug_messages_for,
                  record_backtraces,
                  report_thread_pool_stuck_for,
                  thread_pool_cpu_affinity,
                  timing_wheel_config];
         },
       _bD_ = 1,
       _bE_ =
         function(param){
          var
           switch$0 =
             caml_string_compare(param, cst_max_num_jobs_per_priority_$2);
          if(0 <= switch$0){
           if(0 >= switch$0) return 11;
           if(! caml_string_notequal(param, cst_max_num_open_file_descrs$2))
            return 9;
           if(! caml_string_notequal(param, cst_max_num_threads$2)) return 10;
           if(! caml_string_notequal(param, cst_min_inter_cycle_timeout$2))
            return 12;
           if(! caml_string_notequal(param, cst_print_debug_messages_for$2))
            return 13;
           if(! caml_string_notequal(param, cst_record_backtraces$2))
            return 14;
           if(! caml_string_notequal(param, cst_report_thread_pool_stuck_f$2))
            return 15;
           if(! caml_string_notequal(param, cst_thread_pool_cpu_affinity$2))
            return 16;
           if(! caml_string_notequal(param, cst_timing_wheel_config$2))
            return 17;
          }
          else{
           if(! caml_string_notequal(param, cst_abort_after_thread_pool_st$2))
            return 0;
           if(! caml_string_notequal(param, cst_check_invariants$2)) return 1;
           if(! caml_string_notequal(param, cst_detect_invalid_access_from$2))
            return 2;
           if(! caml_string_notequal(param, cst_dump_core_on_job_delay$2))
            return 3;
           if(! caml_string_notequal(param, cst_epoll_max_ready_events$2))
            return 4;
           if(! caml_string_notequal(param, cst_file_descr_watcher$2))
            return 7;
           if(! caml_string_notequal(param, cst_io_uring_max_submission_en$2))
            return 5;
           if(! caml_string_notequal(param, cst_io_uring_mode$2)) return 6;
           if(! caml_string_notequal(param, cst_max_inter_cycle_timeout$2))
            return 8;
          }
          return -1;
         },
       _bF_ =
         [0,
          cst_record_backtraces$1,
          5,
          Core[324],
          [0,
           cst_report_thread_pool_stuck_f$1,
           5,
           Core_Time_ns[1][9],
           [0,
            cst_thread_pool_cpu_affinity$1,
            5,
            Thread_pool_cpu_affinity[2],
            [0, cst_timing_wheel_config$1, 5, Timing_wheel[8][1], 0]]]],
       _bG_ =
         [0,
          cst_print_debug_messages_for$1,
          5,
          caml_call1(Core[473], t_of_sexp$9),
          _bF_];
      return caml_call6
              (Sexplib0_Sexp_conv_record[3],
               error_source_119,
               [0,
                cst_abort_after_thread_pool_st$1,
                5,
                Core_Time_ns[1][9],
                [0,
                 cst_check_invariants$1,
                 5,
                 Core[324],
                 [0,
                  cst_detect_invalid_access_from$1,
                  5,
                  Core[324],
                  [0,
                   cst_dump_core_on_job_delay$1,
                   5,
                   t_of_sexp$8,
                   [0,
                    cst_epoll_max_ready_events$1,
                    5,
                    Epoll_max_ready_events[1],
                    [0,
                     cst_io_uring_max_submission_en$1,
                     5,
                     Io_uring_max_submission_entrie[1],
                     [0,
                      cst_io_uring_mode$1,
                      5,
                      t_of_sexp$13,
                      [0,
                       cst_file_descr_watcher$1,
                       5,
                       t_of_sexp$11,
                       [0,
                        cst_max_inter_cycle_timeout$1,
                        5,
                        Max_inter_cycle_timeout[1],
                        [0,
                         cst_max_num_open_file_descrs$1,
                         5,
                         t_of_sexp$4,
                         [0,
                          cst_max_num_threads$1,
                          5,
                          Max_num_threads[1],
                          [0,
                           cst_max_num_jobs_per_priority_$1,
                           5,
                           Max_num_jobs_per_priority_per_[1],
                           [0,
                            cst_min_inter_cycle_timeout$1,
                            5,
                            Min_inter_cycle_timeout[1],
                            _bG_]]]]]]]]]]]]],
               _bE_,
               _bD_,
               _bC_,
               x_044);
     }
     function _bx_(param){
      var
       _bH_ = param[2],
       _bI_ = _bH_[2],
       _bJ_ = _bI_[2],
       _bK_ = _bJ_[2],
       _bL_ = _bK_[2],
       _bM_ = _bL_[2],
       _bN_ = _bM_[2],
       _bO_ = _bN_[2],
       _bP_ = _bO_[2],
       _bQ_ = _bP_[2],
       _bR_ = _bQ_[2],
       _bS_ = _bR_[2],
       _bT_ = _bS_[2],
       _bU_ = _bT_[2],
       _bV_ = _bU_[2],
       _bW_ = _bV_[2],
       timing_wheel_config = _bW_[2][1],
       thread_pool_cpu_affinity = _bW_[1],
       report_thread_pool_stuck_for = _bV_[1],
       record_backtraces = _bU_[1],
       print_debug_messages_for = _bT_[1],
       min_inter_cycle_timeout = _bS_[1],
       max_num_jobs_per_priority_per_ = _bR_[1],
       max_num_threads = _bQ_[1],
       max_num_open_file_descrs = _bP_[1],
       max_inter_cycle_timeout = _bO_[1],
       file_descr_watcher = _bN_[1],
       io_uring_mode = _bM_[1],
       io_uring_max_submission_entrie = _bL_[1],
       epoll_max_ready_events = _bK_[1],
       dump_core_on_job_delay = _bJ_[1],
       detect_invalid_access_from_thr = _bI_[1],
       check_invariants = _bH_[1],
       abort_after_thread_pool_stuck_ = param[1];
      return [0,
              abort_after_thread_pool_stuck_,
              check_invariants,
              detect_invalid_access_from_thr,
              dump_core_on_job_delay,
              epoll_max_ready_events,
              io_uring_max_submission_entrie,
              io_uring_mode,
              file_descr_watcher,
              max_inter_cycle_timeout,
              max_num_open_file_descrs,
              max_num_threads,
              max_num_jobs_per_priority_per_,
              min_inter_cycle_timeout,
              print_debug_messages_for,
              record_backtraces,
              report_thread_pool_stuck_for,
              thread_pool_cpu_affinity,
              timing_wheel_config];
     }
     var _by_ = 0;
     function _bz_(param){
      var
       switch$0 = caml_string_compare(param, cst_max_num_jobs_per_priority_$2);
      if(0 <= switch$0){
       if(0 >= switch$0) return 11;
       if(! caml_string_notequal(param, cst_max_num_open_file_descrs$2))
        return 9;
       if(! caml_string_notequal(param, cst_max_num_threads$2)) return 10;
       if(! caml_string_notequal(param, cst_min_inter_cycle_timeout$2))
        return 12;
       if(! caml_string_notequal(param, cst_print_debug_messages_for$2))
        return 13;
       if(! caml_string_notequal(param, cst_record_backtraces$2)) return 14;
       if(! caml_string_notequal(param, cst_report_thread_pool_stuck_f$2))
        return 15;
       if(! caml_string_notequal(param, cst_thread_pool_cpu_affinity$2))
        return 16;
       if(! caml_string_notequal(param, cst_timing_wheel_config$2)) return 17;
      }
      else{
       if(! caml_string_notequal(param, cst_abort_after_thread_pool_st$2))
        return 0;
       if(! caml_string_notequal(param, cst_check_invariants$2)) return 1;
       if(! caml_string_notequal(param, cst_detect_invalid_access_from$2))
        return 2;
       if(! caml_string_notequal(param, cst_dump_core_on_job_delay$2))
        return 3;
       if(! caml_string_notequal(param, cst_epoll_max_ready_events$2))
        return 4;
       if(! caml_string_notequal(param, cst_file_descr_watcher$2)) return 7;
       if(! caml_string_notequal(param, cst_io_uring_max_submission_en$2))
        return 5;
       if(! caml_string_notequal(param, cst_io_uring_mode$2)) return 6;
       if(! caml_string_notequal(param, cst_max_inter_cycle_timeout$2))
        return 8;
      }
      return -1;
     }
     var
      _bA_ =
        [0,
         cst_record_backtraces$0,
         5,
         Core[324],
         [0,
          cst_report_thread_pool_stuck_f$0,
          5,
          Core_Time_ns[1][9],
          [0,
           cst_thread_pool_cpu_affinity$0,
           5,
           Thread_pool_cpu_affinity[2],
           [0, cst_timing_wheel_config$0, 5, Timing_wheel[8][1], 0]]]],
      _bB_ =
        [0,
         cst_print_debug_messages_for$0,
         5,
         caml_call1(Core[473], t_of_sexp$9),
         _bA_];
     return caml_call6
             (Sexplib0_Sexp_conv_record[3],
              error_source_043,
              [0,
               cst_abort_after_thread_pool_st$0,
               5,
               Core_Time_ns[1][9],
               [0,
                cst_check_invariants$0,
                5,
                Core[324],
                [0,
                 cst_detect_invalid_access_from$0,
                 5,
                 Core[324],
                 [0,
                  cst_dump_core_on_job_delay$0,
                  5,
                  t_of_sexp$8,
                  [0,
                   cst_epoll_max_ready_events$0,
                   5,
                   Epoll_max_ready_events[1],
                   [0,
                    cst_io_uring_max_submission_en$0,
                    5,
                    Io_uring_max_submission_entrie[1],
                    [0,
                     cst_io_uring_mode$0,
                     5,
                     t_of_sexp$13,
                     [0,
                      cst_file_descr_watcher$0,
                      5,
                      t_of_sexp$11,
                      [0,
                       cst_max_inter_cycle_timeout$0,
                       5,
                       Max_inter_cycle_timeout[1],
                       [0,
                        cst_max_num_open_file_descrs$0,
                        5,
                        t_of_sexp$4,
                        [0,
                         cst_max_num_threads$0,
                         5,
                         Max_num_threads[1],
                         [0,
                          cst_max_num_jobs_per_priority_$0,
                          5,
                          Max_num_jobs_per_priority_per_[1],
                          [0,
                           cst_min_inter_cycle_timeout$0,
                           5,
                           Min_inter_cycle_timeout[1],
                           _bB_]]]]]]]]]]]]],
              _bz_,
              _by_,
              _bx_,
              x_044);
    }
    var match$0 = caml_call2(Parsexp[15][1], string, _bs_);
    if(0 === match$0[0]){var ts = match$0[1]; return reduce(ts);}
    var
     error = match$0[1],
     _bt_ = [0, caml_call1(Parsexp_Conv_error[1], error), 0],
     _bu_ = caml_call2(Core[265], _bl_, env_var),
     _bv_ = [1, [0, caml_call1(Core[558], _bu_), _bt_]],
     _bw_ = caml_call2(Core_Sexp[84], 0, _bv_);
    caml_call2(Core[243], _bm_, _bw_);
    return usage(0);
   }
   var
    _bn_ = [0, parse_variable(environment_variable_allow_ext, 1), 0],
    t = reduce([0, parse_variable(environment_variable, 0), _bn_]);
   function print_debug_messages_for$1(tag){
    var match = t[14];
    if(! match) return 0;
    var l = match[1];
    return caml_call3(Core_List[17], l, tag, equal$0);
   }
   var all = print_debug_messages_for$1(0);
   function debug(tag){return all ? all : print_debug_messages_for$1(tag);}
   var
    clock = debug(1),
    fd = debug(2),
    file_descr_watcher$1 = debug(3),
    finalizers = debug(4),
    interruptor = debug(5),
    monitor = debug(6),
    monitor_send_exn = debug(7),
    parallel = debug(8),
    reader = debug(9),
    scheduler = debug(10),
    shutdown = debug(11),
    thread_pool = debug(12),
    thread_safe = debug(13),
    writer = debug(14);
   function symbol(field){
    var
     _bp_ = caml_call2(Base_Field[3], field, default$1),
     _bq_ = caml_call4(Core_Option[40], 0, 0, 0, _bp_),
     _br_ = caml_call2(Base_Field[3], field, t);
    return caml_call2(Core_Option[39], _br_, _bq_);
   }
   var
    abort_after_thread_pool_stuck_$1 =
      symbol(abort_after_thread_pool_stuck_$0),
    check_invariants$1 = symbol(check_invariants$0),
    detect_invalid_access_from_thr$1 =
      symbol(detect_invalid_access_from_thr$0),
    epoll_max_ready_events$1 = symbol(epoll_max_ready_events$0),
    io_uring_max_submission_entrie$1 =
      symbol(io_uring_max_submission_entrie$0),
    io_uring_mode$1 = symbol(io_uring_mode$0),
    thread_pool_cpu_affinity$1 = symbol(thread_pool_cpu_affinity$0),
    file_descr_watcher$2 = symbol(file_descr_watcher$0),
    max_inter_cycle_timeout$1 = symbol(max_inter_cycle_timeout$0),
    max_num_open_file_descrs$1 = symbol(max_num_open_file_descrs$0),
    max_num_threads$1 = symbol(max_num_threads$0),
    max_num_jobs_per_priority_per_$1 =
      symbol(max_num_jobs_per_priority_per_$0),
    min_inter_cycle_timeout$1 = symbol(min_inter_cycle_timeout$0),
    record_backtraces$1 = symbol(record_backtraces$0),
    report_thread_pool_stuck_for$1 = symbol(report_thread_pool_stuck_for$0),
    timing_wheel_config$1 = symbol(timing_wheel_config$0),
    dump_core_on_job_delay$1 = symbol(dump_core_on_job_delay$0),
    t$0 =
      [0,
       [0, abort_after_thread_pool_stuck_$1],
       [0, check_invariants$1],
       [0, detect_invalid_access_from_thr$1],
       [0, dump_core_on_job_delay$1],
       [0, epoll_max_ready_events$1],
       [0, io_uring_max_submission_entrie$1],
       [0, io_uring_mode$1],
       [0, file_descr_watcher$2],
       [0, max_inter_cycle_timeout$1],
       [0, max_num_open_file_descrs$1],
       [0, max_num_threads$1],
       [0, max_num_jobs_per_priority_per_$1],
       [0, min_inter_cycle_timeout$1],
       t[14],
       [0, record_backtraces$1],
       [0, report_thread_pool_stuck_for$1],
       [0, thread_pool_cpu_affinity$1],
       [0, timing_wheel_config$1]],
    task_id = [0, function(param){return _bo_;}];
   caml_call1(Ppx_inline_test_lib[7], cst_async_kernel_config);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_kernel_config);
   var
    Async_kernel_config =
      [0,
       Epoll_max_ready_events,
       Io_uring_max_submission_entrie,
       Max_inter_cycle_timeout,
       Min_inter_cycle_timeout,
       Max_num_threads,
       Max_num_jobs_per_priority_per_,
       [0,
        t_of_sexp$4,
        sexp_of_t$4,
        create,
        create_exn,
        raw,
        raw_local,
        create_stable_witness,
        type_equal,
        equal,
        default$0],
       [0,
        How_to_dump,
        sexp_of_watch,
        watch_of_sexp,
        t_of_sexp$8,
        sexp_of_t$8],
       [0, sexp_of_t$9],
       [0, sexp_of_t$11],
       [0, sexp_of_t$13],
       sexp_of_t$14,
       create$0,
       t$0,
       environment_variable,
       [0,
        clock,
        fd,
        file_descr_watcher$1,
        finalizers,
        interruptor,
        monitor,
        monitor_send_exn,
        parallel,
        reader,
        scheduler,
        shutdown,
        thread_pool,
        thread_safe,
        writer],
       abort_after_thread_pool_stuck_$1,
       check_invariants$1,
       detect_invalid_access_from_thr$1,
       dump_core_on_job_delay$1,
       thread_pool_cpu_affinity$1,
       epoll_max_ready_events$1,
       io_uring_max_submission_entrie$1,
       io_uring_mode$1,
       file_descr_watcher$2,
       max_inter_cycle_timeout$1,
       max_num_jobs_per_priority_per_$1,
       max_num_open_file_descrs$1,
       max_num_threads$1,
       min_inter_cycle_timeout$1,
       record_backtraces$1,
       report_thread_pool_stuck_for$1,
       timing_wheel_config$1,
       default_timing_wheel_config_fo,
       task_id];
   runtime.caml_register_global
    (376, Async_kernel_config, cst_Async_kernel_config$0);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
