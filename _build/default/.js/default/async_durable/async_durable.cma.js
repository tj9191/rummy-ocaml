// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Async_durable__
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Async_durable = [0],
    Async_durable$0 = [0, Async_durable];
   runtime.caml_register_global(0, Async_durable$0, "Async_durable__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_durable__Durable
//# unitInfo: Requires: Async_kernel, Async_kernel__Async_kernel_scheduler, Async_kernel__Deferred_or_error, Bus, Core, Core__Bool, Core__Or_error, Expect_test_config, Inline_test_config, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_expect_runtime__Test_block, Ppx_expect_runtime__Test_node, Ppx_expect_runtime__Types, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$0 = "",
    cst_create_counter_1_fix_count =
      " ((!create_counter 1) (!fix_counter 1)) ",
    cst_create_counter_2_fix_count =
      " ((!create_counter 2) (!fix_counter 0)) ",
    cst_create_counter = "!create_counter",
    cst_fix_counter = "!fix_counter",
    cst_Async_durable_Durable$0 = "Async_durable__Durable",
    cst_async_durable$0 = "async_durable",
    cst_src_durable_ml$5 = "src/durable.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   function caml_call14
   (f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13){
    return (f.l >= 0 ? f.l : f.l = f.length) == 14
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13)
            : runtime.caml_call_gen
              (f,
               [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = cst$0,
    Core = global_data.Core,
    Ppx_expect_runtime_Types = global_data.Ppx_expect_runtime__Types,
    Async_kernel = global_data.Async_kernel,
    Core_Or_error = global_data.Core__Or_error,
    Async_kernel_Async_kernel_sche =
      global_data.Async_kernel__Async_kernel_scheduler,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Expect_test_config = global_data.Expect_test_config,
    Ppx_expect_runtime_Test_block = global_data.Ppx_expect_runtime__Test_block,
    Ppx_expect_runtime_Test_node = global_data.Ppx_expect_runtime__Test_node,
    Inline_test_config = global_data.Inline_test_config,
    Bus = global_data.Bus,
    Assert_failure = global_data.Assert_failure,
    Async_kernel_Deferred_or_error =
      global_data.Async_kernel__Deferred_or_error,
    Core_Bool = global_data.Core__Bool,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_durable_Durable$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_durable$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_durable_ml$5);
   caml_call2(Ppx_inline_test_lib[6], cst_async_durable$0, "durable.ml");
   var
    _g_ = [0, cst_fix_counter],
    _h_ = [0, cst_create_counter],
    _n_ = [0, cst_fix_counter],
    _o_ = [0, cst_create_counter],
    _u_ = [0, cst_fix_counter],
    _v_ = [0, cst_create_counter],
    _B_ = [0, cst_fix_counter],
    _C_ = [0, cst_create_counter],
    _f_ = [0, 0],
    _I_ = [0, "!pass"],
    _e_ = [0, 0],
    _J_ = [0, [0, [0, " (!pass true) ", [0, cst$0]], [0, 3888, 3903, 3921]]],
    _K_ = [0, 3888, 3894, 3922],
    _L_ = [0, 3641, 3645, 3922],
    _M_ = [0, 3888, 3922, 3922],
    _N_ = [0, 3641, 3645, 3922],
    cst_src_durable_ml$3 = cst_src_durable_ml$5,
    _D_ =
      [0,
       [0,
        [0, cst_create_counter_1_fix_count, [0, cst$0]],
        [0, 4392, 4407, 4451]]],
    _E_ = [0, 4392, 4398, 4452],
    _F_ = [0, 4249, 4253, 4452],
    _G_ = [0, 4392, 4452, 4452],
    _H_ = [0, 4249, 4253, 4452],
    cst_src_durable_ml$2 = cst_src_durable_ml$5,
    _w_ =
      [0,
       [0,
        [0, cst_create_counter_1_fix_count, [0, cst$0]],
        [0, 4605, 4620, 4664]]],
    _x_ = [0, 4605, 4611, 4665],
    _y_ = [0, 4461, 4465, 4665],
    _z_ = [0, 4605, 4665, 4665],
    _A_ = [0, 4461, 4465, 4665],
    cst_src_durable_ml$1 = cst_src_durable_ml$5,
    _p_ =
      [0,
       [0,
        [0, cst_create_counter_2_fix_count, [0, cst$0]],
        [0, 4818, 4833, 4877]]],
    _q_ = [0, 4818, 4824, 4878],
    _r_ = [0, 4674, 4678, 4878],
    _s_ = [0, 4818, 4878, 4878],
    _t_ = [0, 4674, 4678, 4878],
    cst_src_durable_ml$0 = cst_src_durable_ml$5,
    _i_ =
      [0,
       [0,
        [0, cst_create_counter_2_fix_count, [0, cst$0]],
        [0, 5032, 5047, 5091]]],
    _j_ = [0, 5032, 5038, 5092],
    _k_ = [0, 4887, 4891, 5092],
    _l_ = [0, 5032, 5092, 5092],
    _m_ = [0, 4887, 4891, 5092],
    cst_src_durable_ml = cst_src_durable_ml$5,
    cst_Durable_value_was_broken_i =
      "Durable value was broken immediately after being created or rebuilt.",
    _b_ = [0, cst_src_durable_ml$5, 58, 8],
    _c_ = [0, [0, cst_src_durable_ml$5, 56, 1352, 1396]],
    cst_Initial_durable_value_is_b = "Initial durable value is broken.",
    _a_ = [0, cst_src_durable_ml$5, 27, 592, 600],
    cst_src_durable_ml$4 = cst_src_durable_ml$5,
    cst_async_durable = cst_async_durable$0,
    cst_Async_durable_Durable = cst_Async_durable_Durable$0;
   function create(to_create, to_check_broken, to_rebuild, param){
    function _aW_(_aX_){return 0;}
    return [0,
            0,
            to_create,
            to_check_broken,
            0,
            caml_call5(Bus[7], 0, _a_, 0, 1, _aW_),
            to_rebuild];
   }
   function is_broken_and_update_mvar(t, durable){
    var is_broken = caml_call1(t[3], durable);
    if(caml_call2(Core_Bool[28], t[4], is_broken))
     caml_call2(Bus[12], t[5], 1 - is_broken);
    t[4] = 1 - is_broken;
    return is_broken;
   }
   function create_or_fail(to_create, is_broken, to_rebuild, param){
    var t = create(to_create, is_broken, to_rebuild, 0);
    function _aT_(dur){
     if(is_broken_and_update_mvar(t, dur)){
      var
       _aV_ = caml_call1(Core_Or_error[46], cst_Initial_durable_value_is_b);
      return caml_call1(Async_kernel[20], _aV_);
     }
     t[1] = [1, dur];
     return caml_call1(Async_kernel[20], [0, t]);
    }
    var _aU_ = caml_call1(t[2], 0);
    return caml_call2(Async_kernel[18], _aU_, _aT_);
   }
   function with$0(t, f){
    function _aK_(durable){
     if(! is_broken_and_update_mvar(t, durable))
      return caml_call1(f, durable);
     var _aS_ = caml_call1(Core_Or_error[46], cst_Durable_value_was_broken_i);
     return caml_call1(Async_kernel[20], _aS_);
    }
    function build(building){
     function _aM_(param){
      function _aN_(result){
       var _aP_ = t[1];
       a:
       {
        if(typeof _aP_ !== "number" && 0 === _aP_[0]){var _aQ_ = 1; break a;}
        var _aQ_ = 0;
       }
       if(! _aQ_)
        throw caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1);
       if(0 === result[0])
        var durable = result[1], _aR_ = [1, durable];
       else
        var _aR_ = 0;
       t[1] = _aR_;
       return result;
      }
      var _aO_ = caml_call1(building, 0);
      return caml_call2(Async_kernel[23][3], _aO_, _aN_);
     }
     var
      building$0 =
        caml_call6(Async_kernel_Deferred_or_error[39], 0, 0, 0, _c_, 0, _aM_);
     t[1] = [0, building$0];
     return building$0;
    }
    var match = t[1];
    if(typeof match === "number")
     var _aL_ = build(t[2]);
    else if(0 === match[0])
     var durable = match[1], _aL_ = durable;
    else{
     var durable$0 = match[1];
     if(is_broken_and_update_mvar(t, durable$0)){
      var match$0 = t[6];
      if(match$0)
       var
        to_rebuild = match$0[1],
        _aJ_ = function(param){return caml_call1(to_rebuild, durable$0);};
      else
       var _aJ_ = t[2];
      var _aL_ = build(_aJ_);
     }
     else
      var _aL_ = caml_call1(Async_kernel[20], [0, durable$0]);
    }
    return caml_call2(Async_kernel[18], _aL_, _aK_);
   }
   function is_intact_bus(t){return caml_call1(Bus[6], t[5]);}
   function _d_(param){
    function go(param){
     return caml_call1(Async_kernel_Async_kernel_sche[34][2], 0);
    }
    var create_counter = [0, 0], fix_counter = [0, 0];
    function is_broken(t){return t[1];}
    function create$0(param){
     return caml_call1(Async_kernel[20], [0, [0, 0]]);
    }
    function create$1(param){
     create_counter[1] = create_counter[1] + 1 | 0;
     return create$0(0);
    }
    function fix(t){
     fix_counter[1] = fix_counter[1] + 1 | 0;
     return create$0(0);
    }
    function create$2(use_fix, now){
     var to_rebuild = use_fix ? [0, fix] : 0;
     if(now){
      var
       _aG_ = Core[255],
       _aH_ = create_or_fail(create$1, is_broken, to_rebuild, 0);
      return caml_call2(Async_kernel[22], _aH_, _aG_);
     }
     var _aI_ = create(create$1, is_broken, to_rebuild, 0);
     return caml_call1(Async_kernel[20], _aI_);
    }
    function poke(t){
     with$0(t, function(t){return caml_call1(Async_kernel[20], _e_);});
     return 0;
    }
    if(typeof Ppx_inline_test_lib[3] !== "number"){
     var
      Ppx_expect_test_block$3 =
        caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
      _ag_ =
        function(param){
         var pass = [0, 0];
         function _aB_(t){
          var _aF_ = t[1];
          if(typeof _aF_ !== "number" && 1 === _aF_[0]){pass[1] = 1; return 0;}
          return 0;
         }
         var _aC_ = create$2(0, 1);
         caml_call2(Async_kernel[17], _aC_, _aB_);
         go(0);
         var _aD_ = [1, [0, _I_, [0, caml_call1(Core[323], pass[1]), 0]]];
         caml_call2(Core[256], 0, _aD_);
         var _aE_ = caml_call1(Ppx_expect_runtime_Types[4][1], 0);
         return caml_call1(Ppx_expect_test_block$3[2], _aE_);
        },
      _ah_ =
        caml_call3
         (Ppx_expect_runtime_Test_node[1][1],
          [0, Ppx_expect_runtime_Types[1][1]],
          _K_,
          _J_),
      _ai_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 0), _ah_], 0],
      _aj_ = caml_call1(Ppx_expect_runtime_Types[4][1], 2),
      _ak_ = caml_call1(Ppx_expect_runtime_Types[4][1], 1);
     caml_call14
      (Ppx_expect_test_block$3[3],
       cst_src_durable_ml$3,
       145,
       _N_,
       _M_,
       _L_,
       [0, Ppx_expect_runtime_Types[1][1]],
       0,
       _ak_,
       _aj_,
       0,
       0,
       Inline_test_config,
       _ai_,
       _ag_);
    }
    function build_break_poke(use_fix, now){
     create_counter[1] = 0;
     fix_counter[1] = 0;
     function _ax_(t){
      function _az_(result){
       caml_call1(Core_Or_error[40], result);
       poke(t);
       poke(t);
       return poke(t);
      }
      var
       _aA_ =
         with$0
          (t,
           function(fragile){
            fragile[1] = 1;
            return caml_call1(Async_kernel[20], _f_);
           });
      return caml_call2(Async_kernel[17], _aA_, _az_);
     }
     var _ay_ = create$2(use_fix, now);
     caml_call2(Async_kernel[17], _ay_, _ax_);
     return go(0);
    }
    if(typeof Ppx_inline_test_lib[3] !== "number"){
     var
      Ppx_expect_test_block$2 =
        caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
      _ab_ =
        function(param){
         build_break_poke(1, 1);
         var
          _au_ =
            [0,
             [1, [0, _B_, [0, caml_call1(Core[389], fix_counter[1]), 0]]],
             0],
          _av_ =
            [1,
             [0,
              [1, [0, _C_, [0, caml_call1(Core[389], create_counter[1]), 0]]],
              _au_]];
         caml_call2(Core[256], 0, _av_);
         var _aw_ = caml_call1(Ppx_expect_runtime_Types[4][1], 3);
         return caml_call1(Ppx_expect_test_block$2[2], _aw_);
        },
      _ac_ =
        caml_call3
         (Ppx_expect_runtime_Test_node[1][1],
          [0, Ppx_expect_runtime_Types[1][1]],
          _E_,
          _D_),
      _ad_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 3), _ac_], 0],
      _ae_ = caml_call1(Ppx_expect_runtime_Types[4][1], 5),
      _af_ = caml_call1(Ppx_expect_runtime_Types[4][1], 4);
     caml_call14
      (Ppx_expect_test_block$2[3],
       cst_src_durable_ml$2,
       172,
       _H_,
       _G_,
       _F_,
       [0, Ppx_expect_runtime_Types[1][1]],
       0,
       _af_,
       _ae_,
       0,
       0,
       Inline_test_config,
       _ad_,
       _ab_);
    }
    if(typeof Ppx_inline_test_lib[3] !== "number"){
     var
      Ppx_expect_test_block$1 =
        caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
      _Y_ =
        function(param){
         build_break_poke(1, 0);
         var
          _ar_ =
            [0,
             [1, [0, _u_, [0, caml_call1(Core[389], fix_counter[1]), 0]]],
             0],
          _as_ =
            [1,
             [0,
              [1, [0, _v_, [0, caml_call1(Core[389], create_counter[1]), 0]]],
              _ar_]];
         caml_call2(Core[256], 0, _as_);
         var _at_ = caml_call1(Ppx_expect_runtime_Types[4][1], 6);
         return caml_call1(Ppx_expect_test_block$1[2], _at_);
        },
      _Z_ =
        caml_call3
         (Ppx_expect_runtime_Test_node[1][1],
          [0, Ppx_expect_runtime_Types[1][1]],
          _x_,
          _w_),
      ___ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 6), _Z_], 0],
      _$_ = caml_call1(Ppx_expect_runtime_Types[4][1], 8),
      _aa_ = caml_call1(Ppx_expect_runtime_Types[4][1], 7);
     caml_call14
      (Ppx_expect_test_block$1[3],
       cst_src_durable_ml$1,
       178,
       _A_,
       _z_,
       _y_,
       [0, Ppx_expect_runtime_Types[1][1]],
       0,
       _aa_,
       _$_,
       0,
       0,
       Inline_test_config,
       ___,
       _Y_);
    }
    if(typeof Ppx_inline_test_lib[3] !== "number"){
     var
      Ppx_expect_test_block$0 =
        caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
      _T_ =
        function(param){
         build_break_poke(0, 1);
         var
          _ao_ =
            [0,
             [1, [0, _n_, [0, caml_call1(Core[389], fix_counter[1]), 0]]],
             0],
          _ap_ =
            [1,
             [0,
              [1, [0, _o_, [0, caml_call1(Core[389], create_counter[1]), 0]]],
              _ao_]];
         caml_call2(Core[256], 0, _ap_);
         var _aq_ = caml_call1(Ppx_expect_runtime_Types[4][1], 9);
         return caml_call1(Ppx_expect_test_block$0[2], _aq_);
        },
      _U_ =
        caml_call3
         (Ppx_expect_runtime_Test_node[1][1],
          [0, Ppx_expect_runtime_Types[1][1]],
          _q_,
          _p_),
      _V_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 9), _U_], 0],
      _W_ = caml_call1(Ppx_expect_runtime_Types[4][1], 11),
      _X_ = caml_call1(Ppx_expect_runtime_Types[4][1], 10);
     caml_call14
      (Ppx_expect_test_block$0[3],
       cst_src_durable_ml$0,
       184,
       _t_,
       _s_,
       _r_,
       [0, Ppx_expect_runtime_Types[1][1]],
       0,
       _X_,
       _W_,
       0,
       0,
       Inline_test_config,
       _V_,
       _T_);
    }
    if(typeof Ppx_inline_test_lib[3] !== "number"){
     var
      Ppx_expect_test_block =
        caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
      _O_ =
        function(param){
         build_break_poke(0, 0);
         var
          _al_ =
            [0,
             [1, [0, _g_, [0, caml_call1(Core[389], fix_counter[1]), 0]]],
             0],
          _am_ =
            [1,
             [0,
              [1, [0, _h_, [0, caml_call1(Core[389], create_counter[1]), 0]]],
              _al_]];
         caml_call2(Core[256], 0, _am_);
         var _an_ = caml_call1(Ppx_expect_runtime_Types[4][1], 12);
         return caml_call1(Ppx_expect_test_block[2], _an_);
        },
      _P_ =
        caml_call3
         (Ppx_expect_runtime_Test_node[1][1],
          [0, Ppx_expect_runtime_Types[1][1]],
          _j_,
          _i_),
      _Q_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 12), _P_], 0],
      _R_ = caml_call1(Ppx_expect_runtime_Types[4][1], 14),
      _S_ = caml_call1(Ppx_expect_runtime_Types[4][1], 13);
     caml_call14
      (Ppx_expect_test_block[3],
       cst_src_durable_ml,
       190,
       _m_,
       _l_,
       _k_,
       [0, Ppx_expect_runtime_Types[1][1]],
       0,
       _S_,
       _R_,
       0,
       0,
       Inline_test_config,
       _Q_,
       _O_);
    }
    return 0;
   }
   caml_call8
    (Ppx_inline_test_lib[10],
     Inline_test_config,
     cst,
     0,
     cst_src_durable_ml$4,
     99,
     0,
     2585,
     _d_);
   caml_call1(Ppx_inline_test_lib[7], cst_async_durable);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_durable_Durable);
   var
    Async_durable_Durable = [0, create, create_or_fail, with$0, is_intact_bus];
   runtime.caml_register_global
    (72, Async_durable_Durable, cst_Async_durable_Durable$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_durable__Durable_state_rpc
//# unitInfo: Requires: Async_durable__Durable, Async_kernel, Async_kernel__Pipe, Async_kernel__Time_source, Async_rpc_kernel__Rpc, Core__Error, Core__Queue, Core__Time_float, Core__Time_ns, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_durable_Durable_stat$0 = "Async_durable__Durable_state_rpc",
    cst_async_durable$0 = "async_durable";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Async_kernel = global_data.Async_kernel,
    Async_kernel_Time_source = global_data.Async_kernel__Time_source,
    Core_Queue = global_data.Core__Queue,
    Async_kernel_Pipe = global_data.Async_kernel__Pipe,
    Async_rpc_kernel_Rpc = global_data.Async_rpc_kernel__Rpc,
    Core_Time_float = global_data.Core__Time_float,
    Core_Time_ns = global_data.Core__Time_ns,
    Async_durable_Durable = global_data.Async_durable__Durable,
    Core_Error = global_data.Core__Error,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_durable_Durable_stat$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_durable$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/durable_state_rpc.ml");
   caml_call2
    (Ppx_inline_test_lib[6], cst_async_durable$0, "durable_state_rpc.ml");
   var
    _a_ = [0, "Attempting_new_connection"],
    _b_ = [0, "Lost_connection"],
    _c_ = [0, "Connection_success"],
    _d_ = [0, "Failed_to_connect"],
    _e_ = [0, "Rpc_error"],
    _f_ = [0, "Update"],
    _g_ = [0, "State"],
    cst_async_durable = cst_async_durable$0,
    cst_Async_durable_Durable_stat = cst_Async_durable_Durable_stat$0;
   function sexp_of_t
   (of_state_001, of_update_002, of_error_003, of_metadata_004, param){
    if(typeof param === "number") return 0 === param ? _a_ : _b_;
    switch(param[0]){
      case 0:
       var
        arg0_005 = param[1],
        res0_006 = caml_call1(of_metadata_004, arg0_005);
       return [1, [0, _c_, [0, res0_006, 0]]];
      case 1:
       var
        arg0_007 = param[1],
        res0_008 = caml_call1(Core_Error[9], arg0_007);
       return [1, [0, _d_, [0, res0_008, 0]]];
      case 2:
       var arg0_009 = param[1], res0_010 = caml_call1(of_error_003, arg0_009);
       return [1, [0, _e_, [0, res0_010, 0]]];
      case 3:
       var
        arg0_011 = param[1],
        res0_012 = caml_call1(of_update_002, arg0_011);
       return [1, [0, _f_, [0, res0_012, 0]]];
      default:
       var arg0_013 = param[1], res0_014 = caml_call1(of_state_001, arg0_013);
       return [1, [0, _g_, [0, res0_014, 0]]];
    }
   }
   var Update = [0, sexp_of_t];
   function subscription_active(t){
    return 1 - caml_call1(Async_kernel_Pipe[17], t[1]);
   }
   function write(t, update){
    var _w_ = subscription_active(t);
    return _w_ ? caml_call2(Async_kernel_Pipe[30], t[1], update) : _w_;
   }
   function try_to_get_fresh_pipe(t){
    write(t, 0);
    function _u_(param){
     if(0 !== param[0]){var err = param[1]; return [1, [0, -232504248, err]];}
     var result = param[1];
     if(0 === result[0]){var result$0 = result[1]; return [0, result$0];}
     var e = result[1];
     return [1, [0, 457412494, e]];
    }
    var _v_ = caml_call2(Async_durable_Durable[3], t[2], t[4]);
    return caml_call2(Async_kernel[23][3], _v_, _u_);
   }
   function subscribe(t){
    if(! subscription_active(t))
     return caml_call1(Async_kernel[20], 253848672);
    function _q_(param){
     if(0 === param[0]){
      var match = param[1], id = match[3], pipe = match[2], state = match[1];
      write(t, [0, id]);
      write(t, [4, state]);
      return caml_call1(Async_kernel[20], [0, 17724, pipe]);
     }
     var err = param[1];
     if(457412494 <= err[1]){
      var e = err[2];
      write(t, [2, e]);
     }
     else{var e$0 = err[2]; write(t, [1, e$0]);}
     function _s_(param){return subscribe(t);}
     var _t_ = caml_call2(Async_kernel_Time_source[29], t[5], t[3]);
     return caml_call2(Async_kernel[23][2], _t_, _s_);
    }
    var _r_ = try_to_get_fresh_pipe(t);
    return caml_call2(Async_kernel[23][2], _r_, _q_);
   }
   function handle_update_pipe(t, deferred_pipe){
    function _k_(param){
     if(typeof param === "number") return 0;
     var pipe = param[2];
     function _l_(param){
      write(t, 1);
      return handle_update_pipe(t, subscribe(t));
     }
     function _m_(updates){
      function _o_(update){return [3, update];}
      var _p_ = caml_call2(Core_Queue[53], updates, _o_);
      return caml_call1(Async_kernel[20], _p_);
     }
     var _n_ = caml_call4(Async_kernel_Pipe[56], 0, pipe, t[1], _m_);
     return caml_call2(Async_kernel[17], _n_, _l_);
    }
    return caml_call2(Async_kernel[17], deferred_pipe, _k_);
   }
   function create_internal(opt, connection, dispatch, resubscribe_delay){
    if(opt)
     var sth = opt[1], time_source = sth;
    else
     var time_source = caml_call1(Async_kernel_Time_source[10], 0);
    var
     match = caml_call3(Async_kernel_Pipe[7], 0, 0, 0),
     updates_writer = match[2],
     updates_reader = match[1],
     _j_ = caml_call1(Core_Time_float[84][89], resubscribe_delay),
     resubscribe_delay$0 = caml_call1(Core_Time_ns[1][82], _j_),
     t =
       [0,
        updates_writer,
        connection,
        resubscribe_delay$0,
        dispatch,
        time_source];
    return [0, updates_reader, t];
   }
   function create(time_source, connection, dispatch, resubscribe_delay){
    var
     match =
       create_internal(time_source, connection, dispatch, resubscribe_delay),
     t = match[2],
     updates_reader = match[1];
    handle_update_pipe(t, subscribe(t));
    return updates_reader;
   }
   function create_or_fail
   (time_source, connection, dispatch, resubscribe_delay){
    var
     match =
       create_internal(time_source, connection, dispatch, resubscribe_delay),
     t = match[2],
     updates_reader = match[1];
    function _h_(param){
     if(0 === param[0]){
      var
       match = param[1],
       id = match[3],
       fresh_pipe = match[2],
       new_state = match[1];
      write(t, [0, id]);
      write(t, [4, new_state]);
      handle_update_pipe
       (t, caml_call1(Async_kernel[20], [0, 17724, fresh_pipe]));
      return [0, [0, updates_reader]];
     }
     var match$0 = param[1];
     if(457412494 <= match$0[1]){var e = match$0[2]; return [0, [1, e]];}
     var e$0 = match$0[2];
     return [1, e$0];
    }
    var _i_ = try_to_get_fresh_pipe(t);
    return caml_call2(Async_kernel[23][3], _i_, _h_);
   }
   function create$0(time_source, connection, rpc, query, resubscribe_delay){
    function dispatch(conn){
     return caml_call3(Async_rpc_kernel_Rpc[11][13], rpc, conn, query);
    }
    return create(time_source, connection, dispatch, resubscribe_delay);
   }
   function create_versioned
   (time_source, connection, rpc_module, query, resubscribe_delay){
    function dispatch(conn){return caml_call2(rpc_module[1], conn, query);}
    return create(time_source, connection, dispatch, resubscribe_delay);
   }
   function create_versioned$0
   (time_source, connection, rpc_module, query, resubscribe_delay){
    function dispatch(conn){return caml_call2(rpc_module[1], conn, query);}
    return create(time_source, connection, dispatch, resubscribe_delay);
   }
   function create_or_fail$0
   (time_source, connection, rpc, query, resubscribe_delay){
    function dispatch(conn){
     return caml_call3(Async_rpc_kernel_Rpc[11][13], rpc, conn, query);
    }
    return create_or_fail
            (time_source, connection, dispatch, resubscribe_delay);
   }
   function create_or_fail_versioned
   (time_source, connection, rpc_module, query, resubscribe_delay){
    function dispatch(conn){return caml_call2(rpc_module[1], conn, query);}
    return create_or_fail
            (time_source, connection, dispatch, resubscribe_delay);
   }
   function create_or_fail_versioned$0
   (time_source, connection, rpc_module, query, resubscribe_delay){
    function dispatch(conn){return caml_call2(rpc_module[1], conn, query);}
    return create_or_fail
            (time_source, connection, dispatch, resubscribe_delay);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_async_durable);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_durable_Durable_stat);
   var
    Async_durable_Durable_state_rp =
      [0,
       Update,
       create$0,
       create_or_fail$0,
       create,
       create_or_fail,
       create_versioned,
       create_versioned$0,
       create_or_fail_versioned,
       create_or_fail_versioned$0];
   runtime.caml_register_global
    (27, Async_durable_Durable_state_rp, cst_Async_durable_Durable_stat$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_durable__Durable_pipe_rpc
//# unitInfo: Requires: Async_durable__Durable_state_rpc, Async_kernel, Async_kernel__Pipe, Async_rpc_kernel__Rpc, Core__Result, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_durable_Durable_pipe$0 = "Async_durable__Durable_pipe_rpc",
    cst_async_durable$0 = "async_durable";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Async_rpc_kernel_Rpc = global_data.Async_rpc_kernel__Rpc,
    Core_Result = global_data.Core__Result,
    Async_kernel = global_data.Async_kernel,
    Async_kernel_Pipe = global_data.Async_kernel__Pipe,
    Async_durable_Durable_state_rp =
      global_data.Async_durable__Durable_state_rpc,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_durable_Durable_pipe$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_durable$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/durable_pipe_rpc.ml");
   caml_call2
    (Ppx_inline_test_lib[6], cst_async_durable$0, "durable_pipe_rpc.ml");
   var
    Update = [0],
    _a_ = [0, 0],
    _b_ = [0, 1],
    cst_async_durable = cst_async_durable$0,
    cst_Async_durable_Durable_pipe = cst_Async_durable_Durable_pipe$0;
   function filter_map_update(update){
    if(typeof update === "number") return 0 === update ? _a_ : _b_;
    switch(update[0]){
      case 0:
       var metadata = update[1]; return [0, [0, metadata]];
      case 1:
       var e = update[1]; return [0, [1, e]];
      case 2:
       var e$0 = update[1]; return [0, [2, e$0]];
      case 3:
       var r = update[1]; return [0, [3, r]];
      default: return 0;
    }
   }
   function create(time_source, connection, dispatch, resubscribe_delay){
    function dispatch$0(conn){
     var _n_ = Core_Result[46];
     function _o_(param){
      var id = param[2], pipe = param[1];
      return [0, 0, pipe, id];
     }
     function _p_(_r_){return caml_call2(_n_, _r_, _o_);}
     var _q_ = caml_call1(dispatch, conn);
     return caml_call2(Async_kernel[19], _q_, _p_);
    }
    var
     _m_ =
       caml_call4
        (Async_durable_Durable_state_rp[4],
         time_source,
         connection,
         dispatch$0,
         resubscribe_delay);
    return caml_call3(Async_kernel_Pipe[64], 0, _m_, filter_map_update);
   }
   function create$0(time_source, connection, rpc, query, resubscribe_delay){
    function dispatch(conn){
     return caml_call3(Async_rpc_kernel_Rpc[10][13], rpc, conn, query);
    }
    return create(time_source, connection, dispatch, resubscribe_delay);
   }
   function create_versioned
   (time_source, connection, rpc_module, query, resubscribe_delay){
    function dispatch(conn){return caml_call2(rpc_module[1], conn, query);}
    return create(time_source, connection, dispatch, resubscribe_delay);
   }
   function create_versioned$0
   (time_source, connection, rpc_module, query, resubscribe_delay){
    function dispatch(conn){return caml_call2(rpc_module[1], conn, query);}
    return create(time_source, connection, dispatch, resubscribe_delay);
   }
   function create_or_fail
   (time_source, connection, dispatch, resubscribe_delay){
    function dispatch$0(conn){
     var _h_ = Core_Result[46];
     function _i_(param){
      var id = param[2], pipe = param[1];
      return [0, 0, pipe, id];
     }
     function _j_(_l_){return caml_call2(_h_, _l_, _i_);}
     var _k_ = caml_call1(dispatch, conn);
     return caml_call2(Async_kernel[19], _k_, _j_);
    }
    var func = Core_Result[46], _c_ = Async_kernel_Pipe[64];
    function _d_(eta){return caml_call3(_c_, 0, eta, filter_map_update);}
    function _e_(_g_){return caml_call2(func, _g_, _d_);}
    var
     _f_ =
       caml_call4
        (Async_durable_Durable_state_rp[5],
         time_source,
         connection,
         dispatch$0,
         resubscribe_delay);
    return caml_call2(Async_kernel[19], _f_, _e_);
   }
   function create_or_fail$0
   (time_source, connection, rpc, query, resubscribe_delay){
    function dispatch(conn){
     return caml_call3(Async_rpc_kernel_Rpc[10][13], rpc, conn, query);
    }
    return create_or_fail
            (time_source, connection, dispatch, resubscribe_delay);
   }
   function create_or_fail_versioned
   (time_source, connection, rpc_module, query, resubscribe_delay){
    function dispatch(conn){return caml_call2(rpc_module[1], conn, query);}
    return create_or_fail
            (time_source, connection, dispatch, resubscribe_delay);
   }
   function create_or_fail_versioned$0
   (time_source, connection, rpc_module, query, resubscribe_delay){
    function dispatch(conn){return caml_call2(rpc_module[1], conn, query);}
    return create_or_fail
            (time_source, connection, dispatch, resubscribe_delay);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_async_durable);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_durable_Durable_pipe);
   var
    Async_durable_Durable_pipe_rpc =
      [0,
       Update,
       create$0,
       create_or_fail$0,
       create,
       create_or_fail,
       create_versioned,
       create_versioned$0,
       create_or_fail_versioned,
       create_or_fail_versioned$0];
   runtime.caml_register_global
    (18, Async_durable_Durable_pipe_rpc, cst_Async_durable_Durable_pipe$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_durable__Durable_subscription
//# unitInfo: Requires: Async_durable__Durable_pipe_rpc, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_durable_Durable_subs = "Async_durable__Durable_subscription",
    cst_async_durable = "async_durable";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Async_durable_Durable_pipe_rpc =
      global_data.Async_durable__Durable_pipe_rpc;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_durable_Durable_subs);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_durable);
   caml_call1(Ppx_expect_runtime[1][1], "src/durable_subscription.ml");
   caml_call2
    (Ppx_inline_test_lib[6], cst_async_durable, "durable_subscription.ml");
   var
    create = Async_durable_Durable_pipe_rpc[2],
    create_or_fail = Async_durable_Durable_pipe_rpc[3];
   caml_call1(Ppx_inline_test_lib[7], cst_async_durable);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_durable_Durable_subs);
   var
    Async_durable_Durable_subscrip =
      [0, Async_durable_Durable_pipe_rpc[1], create, create_or_fail];
   runtime.caml_register_global
    (12, Async_durable_Durable_subscrip, cst_Async_durable_Durable_subs);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_durable
//# unitInfo: Requires: Async_durable__Durable, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_durable = "Async_durable",
    cst_async_durable = "async_durable";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Async_durable_Durable = global_data.Async_durable__Durable;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_durable);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_durable);
   caml_call1(Ppx_expect_runtime[1][1], "src/async_durable.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_async_durable, "async_durable.ml");
   var
    create = Async_durable_Durable[1],
    create_or_fail = Async_durable_Durable[2],
    with$0 = Async_durable_Durable[3],
    is_intact_bus = Async_durable_Durable[4];
   caml_call1(Ppx_inline_test_lib[7], cst_async_durable);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_durable);
   var Async_durable = [0, create, create_or_fail, with$0, is_intact_bus];
   runtime.caml_register_global(12, Async_durable, cst_Async_durable);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
