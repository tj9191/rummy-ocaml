// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Persistent_connection_kernel__
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Persistent_connection_kernel = [0],
    Persistent_connection_kernel$0 = [0, Persistent_connection_kernel];
   runtime.caml_register_global
    (0, Persistent_connection_kernel$0, "Persistent_connection_kernel__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Persistent_connection_kernel__Event
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Persistent_connection_kern$0 = "Persistent_connection_kernel__Event",
    cst_persistent_connection_kern$0 = "persistent_connection_kernel";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Persistent_connection_kern$0);
   caml_call1
    (Ppx_bench_lib_Benchmark_accumu[1][1], cst_persistent_connection_kern$0);
   caml_call1
    (Ppx_expect_runtime[1][1], "persistent_connection_kernel/src/event.ml");
   caml_call2
    (Ppx_inline_test_lib[6], cst_persistent_connection_kern$0, "event.ml");
   var
    _a_ = [0, "Attempting_to_connect"],
    _b_ = [0, "Disconnected"],
    _c_ = [0, "Obtained_address"],
    _d_ = [0, "Failed_to_connect"],
    _e_ = [0, "Connected"],
    cst_persistent_connection_kern = cst_persistent_connection_kern$0,
    cst_Persistent_connection_kern = cst_Persistent_connection_kern$0;
   function sexp_of_t(of_conn_001, of_conn_error_002, of_address_003, param){
    if(typeof param === "number") return 0 === param ? _a_ : _b_;
    switch(param[0]){
      case 0:
       var
        arg0_004 = param[1],
        res0_005 = caml_call1(of_address_003, arg0_004);
       return [1, [0, _c_, [0, res0_005, 0]]];
      case 1:
       var
        arg0_006 = param[1],
        res0_007 = caml_call1(of_conn_error_002, arg0_006);
       return [1, [0, _d_, [0, res0_007, 0]]];
      default:
       var
        arg0_008 = param[1],
        res0_009 = caml_call1(Sexplib0_Sexp_conv[23], arg0_008);
       return [1, [0, _e_, [0, res0_009, 0]]];
    }
   }
   function log_level(param){
    if(typeof param !== "number" && 1 === param[0]) return 106380200;
    return 815031438;
   }
   caml_call1(Ppx_inline_test_lib[7], cst_persistent_connection_kern);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Persistent_connection_kern);
   var Persistent_connection_kernel_E = [0, sexp_of_t, log_level];
   runtime.caml_register_global
    (17, Persistent_connection_kernel_E, cst_Persistent_connection_kern$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Persistent_connection_kernel__Persistent_connection_kernel_intf
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Persistent_connection_kern =
      "Persistent_connection_kernel__Persistent_connection_kernel_intf",
    cst_persistent_connection_kern = "persistent_connection_kernel";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Persistent_connection_kern);
   caml_call1
    (Ppx_bench_lib_Benchmark_accumu[1][1], cst_persistent_connection_kern);
   caml_call1
    (Ppx_expect_runtime[1][1],
     "persistent_connection_kernel/src/persistent_connection_kernel_intf.ml");
   caml_call2
    (Ppx_inline_test_lib[6],
     cst_persistent_connection_kern,
     "persistent_connection_kernel_intf.ml");
   caml_call1(Ppx_inline_test_lib[7], cst_persistent_connection_kern);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Persistent_connection_kern);
   var Persistent_connection_kernel_P = [0];
   runtime.caml_register_global
    (11, Persistent_connection_kernel_P, cst_Persistent_connection_kern);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Persistent_connection_kernel
//# unitInfo: Requires: Async_kernel, Async_kernel__Deferred, Async_kernel__Deferred_or_error, Async_kernel__Ivar, Async_kernel__Monitor, Async_kernel__Time_source, Base__Exn, Base__Random, Bus, Core, Core__Error, Core__Fn, Core__Option, Core__Or_error, Core__Result, Core__Sexp, Core__Time_ns, Persistent_connection_kernel__Event, Persistent_connection_kernel__Persistent_connection_kernel_intf, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Persistent_connection_kern$0 = "Persistent_connection_kernel",
    cst_persistent_connection_kern$1 = "persistent_connection_kernel",
    cst_persistent_connection_kern$0 =
      "persistent_connection_kernel/src/persistent_connection_kernel.ml";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    dummy_src_pos_that_shows_up_in =
      [0, cst_persistent_connection_kern$0, 19, 560, 603],
    Core_Error = global_data.Core__Error,
    Bus = global_data.Bus,
    Async_kernel_Ivar = global_data.Async_kernel__Ivar,
    Async_kernel = global_data.Async_kernel,
    Core_Result = global_data.Core__Result,
    Async_kernel_Deferred = global_data.Async_kernel__Deferred,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Async_kernel_Time_source = global_data.Async_kernel__Time_source,
    Core_Time_ns = global_data.Core__Time_ns,
    Base_Random = global_data.Base__Random,
    Core = global_data.Core,
    Core_Fn = global_data.Core__Fn,
    Core_Option = global_data.Core__Option,
    Async_kernel_Deferred_or_error =
      global_data.Async_kernel__Deferred_or_error,
    Async_kernel_Monitor = global_data.Async_kernel__Monitor,
    Base_Exn = global_data.Base__Exn,
    Core_Sexp = global_data.Core__Sexp,
    Persistent_connection_kernel_E =
      global_data.Persistent_connection_kernel__Event,
    Core_Or_error = global_data.Core__Or_error,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Persistent_connection_kern$0);
   caml_call1
    (Ppx_bench_lib_Benchmark_accumu[1][1], cst_persistent_connection_kern$1);
   caml_call1(Ppx_expect_runtime[1][1], cst_persistent_connection_kern$0);
   caml_call2
    (Ppx_inline_test_lib[6],
     cst_persistent_connection_kern$1,
     "persistent_connection_kernel.ml");
   var
    cst_Persistent_connection_clos = "Persistent connection closed",
    _w_ = [0, -289386606, 0],
    _x_ = [0, -289386606, 0],
    _y_ = [0, 990972795, 0],
    _u_ = [0, -289386606, 0],
    _v_ = [0, -289386606, 0],
    _z_ = [0, cst_persistent_connection_kern$0, 222, 8142, 8223],
    _t_ = [0, 0],
    _n_ = [0, "Close_started"],
    _o_ = [0, "Ok"],
    _f_ = [0, "sexp_of_address"],
    _g_ = [0, "address_equal"],
    _h_ = [0, "don't_reconnect"],
    _i_ = [0, "close_finished"],
    _j_ = [0, "close_started"],
    _k_ = [0, "event_bus"],
    _l_ = [0, "event_handler"],
    _m_ = [0, "next_connect_result"],
    _p_ = [0, "conn"],
    _q_ = [0, "retry_delay"],
    _r_ = [0, "connect"],
    _s_ = [0, "get_address"],
    _d_ = [0, "Conn_error"],
    _e_ = [0, "Exception"],
    _c_ = [0, "<Conn.t>"],
    _a_ = [0, "on_event"],
    _b_ = [0, "server_name"],
    cst_persistent_connection_kern = cst_persistent_connection_kern$1,
    cst_Persistent_connection_kern = cst_Persistent_connection_kern$0;
   function Make(Conn_err, Conn){
    var close = Conn[1], is_closed = Conn[2], close_finished = Conn[3];
    function sexp_of_t(param){return _c_;}
    var
     Conn$0 = [0, close, is_closed, close_finished, sexp_of_t],
     sexp_of_conn_error = Conn_err[2];
    function sexp_of_t$0(of_address_009, x_010){
     return caml_call4
             (Persistent_connection_kernel_E[1],
              Conn$0[4],
              Conn_err[2],
              of_address_009,
              x_010);
    }
    var Event = [0, sexp_of_t$0];
    function sexp_of_t$1(param){
     if(0 === param[0]){
      var
       arg0_011 = param[1],
       res0_012 = caml_call1(sexp_of_conn_error, arg0_011);
      return [1, [0, _d_, [0, res0_012, 0]]];
     }
     var arg0_013 = param[1], res0_014 = caml_call1(Core_Error[9], arg0_013);
     return [1, [0, _e_, [0, res0_014, 0]]];
    }
    function same_error(e1, e2){
     function to_sexp(e){
      var
       _a$_ = caml_call1(Core_Error[28], e),
       _ba_ = caml_call1(Async_kernel_Monitor[13], _a$_);
      return caml_call1(Base_Exn[1], _ba_);
     }
     var _a9_ = to_sexp(e2), _a__ = to_sexp(e1);
     return caml_call2(Core_Sexp[39], _a__, _a9_);
    }
    function equal(e1, e2){
     if(0 === e1[0]){
      var e1$0 = e1[1];
      if(0 === e2[0]){
       var e2$0 = e2[1];
       return caml_call2(Conn_err[1], e1$0, e2$0);
      }
     }
     else{
      var e1$1 = e1[1];
      if(0 !== e2[0]){var e2$1 = e2[1]; return same_error(e1$1, e2$1);}
     }
     return 0;
    }
    function join(param){
     if(0 !== param[0]){var exn = param[1]; return [1, [1, exn]];}
     var match = param[1];
     if(0 === match[0]){var result = match[1]; return [0, result];}
     var conn_error = match[1];
     return [1, [0, conn_error]];
    }
    function to_conn_error(param){
     if(0 === param[0]){var conn_error = param[1]; return conn_error;}
     var err = param[1];
     return caml_call1(Conn_err[3], err);
    }
    function to_error(param){
     if(0 === param[0]){
      var conn_error = param[1];
      return caml_call1(Conn_err[4], conn_error);
     }
     var err = param[1];
     return err;
    }
    var
     Conn_error_or_exception =
       [0, sexp_of_t$1, , equal, join, to_conn_error, to_error];
    function sexp_of_t$2(of_address_015, param){
     var
      conn_023 = param[4],
      next_connect_result_026 = param[5],
      don_t_reconnect_036 = param[10],
      close_finished_034 = param[9],
      close_started_032 = param[8],
      event_bus_030 = param[7],
      event_handler_028 = param[6],
      bnds_016 = 0;
     function _aS_(_a8_){return 0;}
     var
      arg_041 = caml_call1(Sexplib0_Sexp_conv[24], _aS_),
      bnds_016$0 = [0, [1, [0, _f_, [0, arg_041, 0]]], bnds_016];
     function _aT_(_a7_){return 0;}
     var
      arg_039 = caml_call1(Sexplib0_Sexp_conv[24], _aT_),
      bnds_016$1 = [0, [1, [0, _g_, [0, arg_039, 0]]], bnds_016$0],
      arg_037 =
        caml_call2(Async_kernel_Ivar[9], Core[620], don_t_reconnect_036),
      bnds_016$2 = [0, [1, [0, _h_, [0, arg_037, 0]]], bnds_016$1],
      arg_035 =
        caml_call2(Async_kernel_Ivar[9], Core[620], close_finished_034),
      bnds_016$3 = [0, [1, [0, _i_, [0, arg_035, 0]]], bnds_016$2],
      arg_033 = caml_call2(Async_kernel_Ivar[9], Core[620], close_started_032),
      bnds_016$4 = [0, [1, [0, _j_, [0, arg_033, 0]]], bnds_016$3],
      _aU_ = Core[212];
     function _aV_(param){
      function _a5_(_a6_){return 0;}
      return caml_call1(Sexplib0_Sexp_conv[24], _a5_);
     }
     var
      arg_031 = caml_call3(Bus[2], _aV_, _aU_, event_bus_030),
      bnds_016$5 = [0, [1, [0, _k_, [0, arg_031, 0]]], bnds_016$4],
      server_name_005 = event_handler_028[1],
      bnds_004 = 0;
     function _aR_(_a4_){return 0;}
     var
      arg_008 = caml_call1(Sexplib0_Sexp_conv[24], _aR_),
      bnds_004$0 = [0, [1, [0, _a_, [0, arg_008, 0]]], bnds_004],
      arg_006 = caml_call1(Core[558], server_name_005),
      bnds_004$1 = [0, [1, [0, _b_, [0, arg_006, 0]]], bnds_004$0],
      arg_029 = [1, bnds_004$1],
      bnds_016$6 = [0, [1, [0, _l_, [0, arg_029, 0]]], bnds_016$5],
      _aW_ =
        caml_call2(Core_Result[15], Conn$0[4], Conn_error_or_exception[1]),
      arg_027 =
        caml_call2(Async_kernel_Ivar[9], _aW_, next_connect_result_026),
      bnds_016$7 = [0, [1, [0, _m_, [0, arg_027, 0]]], bnds_016$6];
     function _aX_(param){
      if(typeof param === "number") return _n_;
      var v_025 = param[2];
      return [1, [0, _o_, [0, Conn$0[4].call(null, v_025), 0]]];
     }
     var
      arg_024 = caml_call2(Async_kernel_Ivar[9], _aX_, conn_023),
      bnds_016$8 = [0, [1, [0, _p_, [0, arg_024, 0]]], bnds_016$7];
     function _aY_(_a3_){return 0;}
     var
      arg_022 = caml_call1(Sexplib0_Sexp_conv[24], _aY_),
      bnds_016$9 = [0, [1, [0, _q_, [0, arg_022, 0]]], bnds_016$8];
     function _aZ_(_a2_){return 0;}
     var
      arg_020 = caml_call1(Sexplib0_Sexp_conv[24], _aZ_),
      bnds_016$10 = [0, [1, [0, _r_, [0, arg_020, 0]]], bnds_016$9];
     function _a0_(_a1_){return 0;}
     var
      arg_018 = caml_call1(Sexplib0_Sexp_conv[24], _a0_),
      bnds_016$11 = [0, [1, [0, _s_, [0, arg_018, 0]]], bnds_016$10];
     return [1, bnds_016$11];
    }
    function server_name(t){return t[6][1];}
    function handle_event(t, event){
     if(typeof event === "number")
      var _aQ_ = 0 === event ? 0 : 1;
     else
      switch(event[0]){
        case 0:
         var _aQ_ = _t_; break;
        case 1:
         var e = event[1], _aQ_ = [1, e]; break;
        default: var conn = event[1], _aQ_ = [2, conn];
      }
     caml_call2(Bus[12], t[7], _aQ_);
     var on_event = t[6][2];
     return caml_call1(on_event, event);
    }
    function try_connecting_until_successfu(t){
     var previous_address = [0, 0], previous_error = [0, 0];
     function connect(param){
      function _aM_(param){
       if(0 !== param[0]){
        var e = param[1];
        return caml_call1(Async_kernel[20], [1, e]);
       }
       var addr = param[1], match = previous_address[1];
       if(match)
        var
         previous_address$0 = match[1],
         same_as_previous_address =
           caml_call2(t[11], addr, previous_address$0);
       else
        var same_as_previous_address = 0;
       previous_address[1] = [0, addr];
       function _aO_(param){return caml_call1(t[2], addr);}
       var
        _aP_ =
          same_as_previous_address
           ? Async_kernel_Deferred[18]
           : handle_event(t, [0, addr]);
       return caml_call2(Async_kernel[21], _aP_, _aO_);
      }
      var _aN_ = caml_call1(t[1], 0);
      return caml_call2(Async_kernel[21], _aN_, _aM_);
     }
     function loop(param){
      if(caml_call1(Async_kernel_Ivar[18], t[8])){
       caml_call2(Async_kernel_Ivar[14], t[4], -400989606);
       return caml_call1(Async_kernel[20], -400989606);
      }
      if(caml_call1(Async_kernel_Ivar[18], t[10]))
       return caml_call1(Async_kernel[20], -818917400);
      var ready_to_retry_connecting = caml_call1(t[3], 0);
      function _aF_(connect_result){
       caml_call2(Async_kernel_Ivar[14], t[5], connect_result);
       t[5] = caml_call1(Async_kernel_Ivar[12], 0);
       if(0 === connect_result[0]){
        var conn = connect_result[1];
        caml_call2(Async_kernel_Ivar[14], t[4], [0, 17724, conn]);
        return caml_call1
                (Async_kernel[20],
                 [0, 17724, [0, conn, ready_to_retry_connecting]]);
       }
       var err = connect_result[1], match = previous_error[1];
       if(match)
        var
         previous_err = match[1],
         same_as_previous_error =
           Conn_error_or_exception[3].call(null, err, previous_err);
       else
        var same_as_previous_error = 0;
       previous_error[1] = [0, err];
       function _aG_(param){
        function _aI_(param){return loop(0);}
        var
         _aJ_ = [0, caml_call1(Async_kernel_Ivar[19], t[10]), 0],
         _aK_ =
           [0,
            ready_to_retry_connecting,
            [0, caml_call1(Async_kernel_Ivar[19], t[8]), _aJ_]],
         _aL_ = caml_call1(Async_kernel_Deferred[23], _aK_);
        return caml_call2(Async_kernel[21], _aL_, _aI_);
       }
       if(same_as_previous_error)
        var _aH_ = Async_kernel_Deferred[18];
       else
        var
         err$0 = Conn_error_or_exception[5].call(null, err),
         _aH_ = handle_event(t, [1, err$0]);
       return caml_call2(Async_kernel[21], _aH_, _aG_);
      }
      var
       _aC_ = Conn_error_or_exception[4],
       _aD_ =
         caml_call6
          (Async_kernel_Deferred_or_error[38],
           [0, Core[628]],
           0,
           0,
           0,
           0,
           connect),
       _aE_ = caml_call2(Async_kernel[22], _aD_, _aC_);
      return caml_call2(Async_kernel[23][2], _aE_, _aF_);
     }
     return loop(0);
    }
    function abort_reconnecting_with_no_act(t){
     caml_call2(Async_kernel_Ivar[14], t[8], 0);
     caml_call2(Async_kernel_Ivar[14], t[9], 0);
     return caml_call2(Async_kernel_Ivar[14], t[4], -400989606);
    }
    function create
    (server_name, opt, retry_delay, _Y_, _X_, connect, Address, get_address){
     if(opt)
      var sth = opt[1], on_event = sth;
     else
      var on_event = function(param){return Async_kernel_Deferred[18];};
     if(_Y_)
      var sth$0 = _Y_[1], random_state = sth$0;
     else
      var random_state = [0, 389604849, Base_Random[19][1]];
     if(_X_)
      var sth$1 = _X_[1], time_source = sth$1;
     else
      var time_source = caml_call1(Async_kernel_Time_source[10], 0);
     var
      event_handler = [0, server_name, on_event],
      _Z_ = Core[628] ? 0.1 : 10.,
      ___ = caml_call1(Core_Time_ns[1][82], _Z_),
      default_retry_delay = caml_call1(Core_Fn[1], ___),
      non_randomized_delay =
        caml_call2(Core_Option[39], retry_delay, default_retry_delay);
     if(typeof random_state === "number")
      var retry_delay_span = non_randomized_delay;
     else
      var
       random_state$0 = random_state[2],
       retry_delay_span =
         function(param){
          var
           span = caml_call1(non_randomized_delay, 0),
           span$0 = caml_call1(Core_Time_ns[1][89], span),
           distance =
             caml_call2(Base_Random[19][11], random_state$0, span$0 * 0.3),
           wait =
             caml_call1(Base_Random[19][17], random_state$0)
              ? span$0 + distance
              : span$0 - distance;
          return caml_call1(Core_Time_ns[1][82], wait);
         };
     function retry_delay$0(param){
      var _aB_ = caml_call1(retry_delay_span, 0);
      return caml_call2(Async_kernel_Time_source[29], time_source, _aB_);
     }
     var
      _$_ = Address[2],
      _aa_ = Address[1],
      _ab_ = caml_call1(Async_kernel_Ivar[12], 0),
      _ac_ = caml_call1(Async_kernel_Ivar[12], 0),
      _ad_ = caml_call1(Async_kernel_Ivar[12], 0);
     function _ae_(_aA_){return 0;}
     var
      _af_ = 1,
      _ag_ = 0,
      _ah_ = Core[628] ? dummy_src_pos_that_shows_up_in : _z_,
      _ai_ = caml_call5(Bus[7], 0, _ah_, _ag_, _af_, _ae_),
      _aj_ = caml_call1(Async_kernel_Ivar[12], 0),
      t =
        [0,
         get_address,
         connect,
         retry_delay$0,
         caml_call1(Async_kernel_Ivar[12], 0),
         _aj_,
         event_handler,
         _ai_,
         _ad_,
         _ac_,
         _ab_,
         _aa_,
         _$_];
     function _ak_(param){
      function _am_(param){
       function _ao_(param){
        if(typeof param === "number")
         return -400989606 <= param
                 ? caml_call1(Async_kernel[20], _u_)
                 : (abort_reconnecting_with_no_act
                    (t),
                   caml_call1(Async_kernel[20], _v_));
        var
         match = param[2],
         ready_to_retry_connecting = match[2],
         conn = match[1];
        function _aq_(param){
         function _as_(param){
          t[4] = caml_call1(Async_kernel_Ivar[12], 0);
          function _au_(param){
           function _aw_(param){
            return caml_call1(Async_kernel_Ivar[18], t[8])
                    ? (caml_call2(Async_kernel_Ivar[14], t[4], -400989606), _w_)
                    : caml_call1
                       (Async_kernel_Ivar[18], t[10])
                      ? (abort_reconnecting_with_no_act(t), _x_)
                      : _y_;
           }
           var
            _ax_ = [0, caml_call1(Async_kernel_Ivar[19], t[10]), 0],
            _ay_ =
              [0,
               ready_to_retry_connecting,
               [0, caml_call1(Async_kernel_Ivar[19], t[8]), _ax_]],
            _az_ = caml_call1(Async_kernel_Deferred[23], _ay_);
           return caml_call2(Async_kernel[23][3], _az_, _aw_);
          }
          var _av_ = handle_event(t, 1);
          return caml_call2(Async_kernel[23][2], _av_, _au_);
         }
         var _at_ = caml_call1(Conn$0[3], conn);
         return caml_call2(Async_kernel[23][2], _at_, _as_);
        }
        var _ar_ = handle_event(t, [2, conn]);
        return caml_call2(Async_kernel[23][2], _ar_, _aq_);
       }
       var _ap_ = try_connecting_until_successfu(t);
       return caml_call2(Async_kernel[23][2], _ap_, _ao_);
      }
      var _an_ = handle_event(t, 0);
      return caml_call2(Async_kernel[23][2], _an_, _am_);
     }
     var _al_ = caml_call2(Async_kernel_Deferred[31], 0, _ak_);
     caml_call1(Async_kernel[6], _al_);
     return t;
    }
    function connected(t){
     function loop(param){
      var
       d = caml_call1(Async_kernel_Ivar[19], t[4]),
       match = caml_call1(Async_kernel_Deferred[5], d);
      if(! match){
       var
        _W_ =
          function(param){
           if(typeof param === "number")
            return caml_call1(Async_kernel_Deferred[19], 0);
           var conn = param[2];
           return caml_call1(Async_kernel[20], conn);
          };
       return caml_call2(Async_kernel[21], d, _W_);
      }
      var match$0 = match[1];
      if(typeof match$0 === "number")
       return caml_call1(Async_kernel_Deferred[19], 0);
      var conn = match$0[2];
      if(! caml_call1(Conn$0[2], conn))
       return caml_call1(Async_kernel[20], conn);
      var _V_ = caml_call1(Conn$0[3], conn);
      return caml_call2(Async_kernel[21], _V_, loop);
     }
     return loop(0);
    }
    function current_connection(t){
     var
      _U_ = caml_call1(Async_kernel_Ivar[19], t[4]),
      match = caml_call1(Async_kernel_Deferred[5], _U_);
     if(match){
      var match$0 = match[1];
      if(typeof match$0 !== "number"){
       var conn = match$0[2];
       return [0, conn];
      }
     }
     return 0;
    }
    function close_finished$0(t){
     return caml_call1(Async_kernel_Ivar[19], t[9]);
    }
    function is_closed$0(t){return caml_call1(Async_kernel_Ivar[18], t[8]);}
    function close$0(t){
     if(caml_call1(Async_kernel_Ivar[18], t[8])) return close_finished$0(t);
     caml_call2(Async_kernel_Ivar[14], t[8], 0);
     function _Q_(conn_opt){
      function _S_(param){return caml_call2(Async_kernel_Ivar[14], t[9], 0);}
      if(typeof conn_opt === "number")
       var _T_ = Async_kernel_Deferred[18];
      else
       var conn = conn_opt[2], _T_ = caml_call1(Conn$0[1], conn);
      return caml_call2(Async_kernel[22], _T_, _S_);
     }
     var _R_ = caml_call1(Async_kernel_Ivar[19], t[4]);
     return caml_call2(Async_kernel[21], _R_, _Q_);
    }
    var
     _F_ = caml_call1(Sexplib0_Sexp_conv[7], cst_Persistent_connection_clos),
     connected_or_failed_to_connect = caml_call1(Core_Or_error[45], _F_);
    function connected_or_failed_to_connect$0(t){
     if(is_closed$0(t))
      return caml_call1(Async_kernel[20], connected_or_failed_to_connect);
     var match = current_connection(t);
     if(match){
      var x = match[1];
      if(! caml_call1(Conn$0[2], x))
       return caml_call1(Async_kernel[20], [0, x]);
     }
     var _G_ = 0, _H_ = Core_Result[47], _I_ = Conn_error_or_exception[6];
     function _J_(_P_){return caml_call2(_H_, _P_, _I_);}
     var
      _K_ = caml_call1(Async_kernel_Ivar[19], t[5]),
      _L_ = [0, caml_call2(Async_kernel[4], _K_, _J_), _G_];
     function _M_(param){return connected_or_failed_to_connect;}
     var
      _N_ = caml_call1(Async_kernel_Ivar[19], t[8]),
      _O_ = [0, caml_call2(Async_kernel[4], _N_, _M_), _L_];
     return caml_call1(Async_kernel_Deferred[29], _O_);
    }
    function close_when_current_connection_(t){
     return caml_call2(Async_kernel_Ivar[16], t[10], 0);
    }
    var
     Poly =
       [0,
        sexp_of_t$2,
        server_name,
        ,
        ,
        ,
        create,
        connected,
        current_connection,
        close_finished$0,
        is_closed$0,
        close$0,
        ,
        connected_or_failed_to_connect$0,
        close_when_current_connection_];
    function sexp_of_t$3(param){return Poly[1].call(null, param[12], param);}
    function close_when_current_connection_$0(param){return Poly[14].call(null, param);
    }
    function close_finished$1(param){return Poly[9].call(null, param);}
    function is_closed$1(param){return Poly[10].call(null, param);}
    function event_bus(param){return caml_call1(Bus[6], param[7]);}
    function close$1(param){return Poly[11].call(null, param);}
    function server_name$0(param){return Poly[2].call(null, param);}
    function current_connection$0(param){return Poly[8].call(null, param);}
    function connected_or_failed_to_connect$1(param){return Poly[13].call(null, param);
    }
    function connected$0(param){return Poly[7].call(null, param);}
    function create$0
    (server_name,
     on_event,
     retry_delay,
     random_state,
     time_source,
     connect,
     address,
     get_address){
     return Poly[6].call
             (null,
              server_name,
              on_event,
              retry_delay,
              random_state,
              time_source,
              connect,
              address,
              get_address);
    }
    return [0,
            ,
            ,
            Event,
            ,
            ,
            sexp_of_t$3,
            close_when_current_connection_$0,
            close_finished$1,
            is_closed$1,
            event_bus,
            close$1,
            server_name$0,
            current_connection$0,
            connected_or_failed_to_connect$1,
            connected$0,
            create$0];
   }
   caml_call1(Ppx_inline_test_lib[7], cst_persistent_connection_kern);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Persistent_connection_kern);
   function _A_(Conn){
    var equal = Core_Error[3], sexp_of_t = Core_Error[9];
    function of_exception_error(e){return e;}
    function to_error(e){return e;}
    var _E_ = Make([0, equal, sexp_of_t, of_exception_error, to_error], Conn);
    return [0,
            _E_[6],
            _E_[3],
            _E_[16],
            _E_[15],
            _E_[10],
            _E_[14],
            _E_[13],
            _E_[12],
            _E_[11],
            _E_[9],
            _E_[8],
            _E_[7]];
   }
   var
    Persistent_connection_kernel =
      [0,
       function(_C_, _B_){
        var _D_ = Make(_C_, _B_);
        return [0,
                _D_[6],
                _D_[3],
                _D_[16],
                _D_[15],
                _D_[10],
                _D_[14],
                _D_[13],
                _D_[12],
                _D_[11],
                _D_[9],
                _D_[8],
                _D_[7]];
       },
       _A_];
   runtime.caml_register_global
    (61, Persistent_connection_kernel, cst_Persistent_connection_kern$0);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
