// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Total_map__
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Total_map = [0],
    Total_map$0 = [0, Total_map];
   runtime.caml_register_global(0, Total_map$0, "Total_map__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Total_map__Import
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Total_map_Import = "Total_map__Import",
    cst_total_map = "total_map";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Total_map_Import);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_total_map);
   caml_call1(Ppx_expect_runtime[1][1], "total_map/src/import.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_total_map, "import.ml");
   caml_call1(Ppx_inline_test_lib[7], cst_total_map);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Total_map_Import);
   var Total_map_Import = [0];
   runtime.caml_register_global(11, Total_map_Import, cst_Total_map_Import);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Total_map__Enumeration_intf
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Total_map_Enumeration_intf = "Total_map__Enumeration_intf",
    cst_total_map = "total_map";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Total_map_Enumeration_intf);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_total_map);
   caml_call1(Ppx_expect_runtime[1][1], "total_map/src/enumeration_intf.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_total_map, "enumeration_intf.ml");
   caml_call1(Ppx_inline_test_lib[7], cst_total_map);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Total_map_Enumeration_intf);
   var Total_map_Enumeration_intf = [0];
   runtime.caml_register_global
    (11, Total_map_Enumeration_intf, cst_Total_map_Enumeration_intf);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Total_map__Enumeration
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Total_map_Enumeration$0 = "Total_map__Enumeration",
    cst_total_map$0 = "total_map";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Total_map_Enumeration$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_total_map$0);
   caml_call1(Ppx_expect_runtime[1][1], "total_map/src/enumeration.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_total_map$0, "enumeration.ml");
   var
    cst_total_map = cst_total_map$0,
    cst_Total_map_Enumeration = cst_Total_map_Enumeration$0;
   function Make(T){var enumeration = [0, T[1]]; return [0, enumeration];}
   function make(all){var enumeration = [0, all]; return [0, enumeration];}
   caml_call1(Ppx_inline_test_lib[7], cst_total_map);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Total_map_Enumeration);
   var Total_map_Enumeration = [0, Make, make];
   runtime.caml_register_global
    (11, Total_map_Enumeration, cst_Total_map_Enumeration$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Total_map__Total_map_intf
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Total_map_Total_map_intf = "Total_map__Total_map_intf",
    cst_total_map = "total_map";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Total_map_Total_map_intf);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_total_map);
   caml_call1(Ppx_expect_runtime[1][1], "total_map/src/total_map_intf.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_total_map, "total_map_intf.ml");
   caml_call1(Ppx_inline_test_lib[7], cst_total_map);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Total_map_Total_map_intf);
   var Total_map_Total_map_intf = [0];
   runtime.caml_register_global
    (11, Total_map_Total_map_intf, cst_Total_map_Total_map_intf);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Total_map
//# unitInfo: Requires: Base__Applicative, Bin_prot__Shape, Bin_prot__Utils, Bin_shape, Core, Core__Comparable, Core__List, Core__Map, Core__Set, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Total_map__Enumeration, Total_map__Total_map_intf, Validate
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Total_map$0 = "Total_map",
    cst_a$3 = "a",
    cst_t$2 = "t",
    cst_total_map$0 = "total_map",
    cst_total_map_src_total_map_ml$3 = "total_map/src/total_map.ml";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    Core_Comparable = global_data.Core__Comparable,
    Total_map_Enumeration = global_data.Total_map__Enumeration,
    Core_Map = global_data.Core__Map,
    Core_Set = global_data.Core__Set,
    Validate = global_data.Validate,
    Bin_shape = global_data.Bin_shape,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Bin_prot_Utils = global_data.Bin_prot__Utils,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Core = global_data.Core,
    Core_List = global_data.Core__List,
    Base_Applicative = global_data.Base__Applicative,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Total_map$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_total_map$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_total_map_src_total_map_ml$3);
   caml_call2(Ppx_inline_test_lib[6], cst_total_map$0, "total_map.ml");
   var
    cst_map_from_serialization_doe =
      "map from serialization doesn't have keys it should have",
    cst_map_from_serialization_has =
      "map from serialization has keys not provided in the enumeration",
    cst_a$1 = cst_a$3,
    cst_total_map_src_total_map_ml$1 = "total_map/src/total_map.ml:183:14",
    cst_a$2 = cst_a$3,
    cst_t$1 = cst_t$2,
    cst_total_map_src_total_map_ml$2 = "total_map/src/total_map.ml:183:2",
    cst_impossible_all_keys_must_b =
      "impossible: all keys must be present in the map as verified by the key set",
    cst_Map_key_set_map = "[Map.key_set map]",
    cst_Key_all = "[Key.all]",
    cst_Key_was_not_provided_in_th =
      "Key was not provided in the enumeration given to [Total_map.Make]",
    _a_ = [0, cst_total_map_src_total_map_ml$3, 56, 1642, 1652],
    cst_t$0 = cst_t$2,
    cst_a = cst_a$3,
    cst_total_map_src_total_map_ml = "total_map/src/total_map.ml:24:25",
    cst_a$0 = cst_a$3,
    cst_t = cst_t$2,
    cst_total_map_src_total_map_ml$0 = "total_map/src/total_map.ml:24:6",
    cst_total_map = cst_total_map$0,
    cst_Total_map = cst_Total_map$0;
   function Make_with_witnesses(Key){
    var
     t_of_sexp = Key[1],
     sexp_of_t = Key[2],
     bin_size_t = Key[3],
     bin_write_t = Key[4],
     bin_read_t = Key[5],
     bin_read_t$0 = Key[6],
     bin_shape_t = Key[7],
     bin_writer_t = Key[8],
     bin_reader_t = Key[9],
     bin_t = Key[10],
     compare = Key[11],
     all = Key[12],
     comparator = Key[13],
     enumeration = Key[14],
     include =
       caml_call1
        (Core_Comparable[26][1][1],
         [0,
          Key[3],
          Key[4],
          Key[5],
          Key[6],
          Key[7],
          Key[8],
          Key[9],
          Key[10],
          Key[11],
          Key[1],
          Key[2],
          Key[13]]),
     Map = include[1],
     Set = include[2],
     Key$0 =
       [0,
        t_of_sexp,
        sexp_of_t,
        bin_size_t,
        bin_write_t,
        bin_read_t,
        bin_read_t$0,
        bin_shape_t,
        bin_writer_t,
        bin_reader_t,
        bin_t,
        compare,
        all,
        comparator,
        enumeration,
        Map,
        Set],
     _ap_ = caml_call1(Bin_shape[3][1], cst_a),
     _aq_ = caml_call1(Bin_shape[4][1], cst_total_map_src_total_map_ml),
     _ar_ = caml_call2(Bin_prot_Shape[11], _aq_, _ap_),
     _as_ = caml_call1(Key$0[15][1], _ar_),
     _at_ = [0, caml_call1(Bin_shape[3][1], cst_a$0), 0],
     _au_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t), _at_, _as_], 0],
     _av_ = caml_call1(Bin_shape[4][1], cst_total_map_src_total_map_ml$0),
     group = caml_call2(Bin_prot_Shape[2], _av_, _au_);
    function bin_shape_t$0(a){
     var _aE_ = caml_call1(Bin_shape[2][1], cst_t$0);
     return caml_call1(caml_call2(Bin_prot_Shape[10], group, _aE_), [0, a, 0]);
    }
    function bin_size_t$0(size_of_a, v){
     return caml_call2(Key$0[15][2], size_of_a, v);
    }
    function bin_write_t$0(write_a, buf, pos, v){
     return caml_call4(Key$0[15][3], write_a, buf, pos, v);
    }
    function bin_writer_t$0(bin_writer_a){
     function _aA_(v){
      var _aB_ = bin_writer_a[2];
      return function(_aC_, _aD_){return bin_write_t$0(_aB_, v, _aC_, _aD_);};
     }
     return [0, function(v){return bin_size_t$0(bin_writer_a[1], v);}, _aA_];
    }
    function bin_read_t$1(of_a, buf, pos_ref, vint){
     return caml_call3(caml_call1(Key$0[15][5], of_a), buf, pos_ref, vint);
    }
    function bin_read_t$2(of_a, buf, pos_ref){
     return caml_call2(caml_call1(Key$0[15][4], of_a), buf, pos_ref);
    }
    function bin_reader_t$0(bin_reader_a){
     function _az_(buf, pos_ref, vtag){
      return bin_read_t$1(bin_reader_a[1], buf, pos_ref, vtag);
     }
     return [0,
             function(buf, pos_ref){
              return bin_read_t$2(bin_reader_a[1], buf, pos_ref);
             },
             _az_];
    }
    function bin_t$0(bin_a){
     var _ax_ = bin_reader_t$0(bin_a[3]), _ay_ = bin_writer_t$0(bin_a[2]);
     return [0, bin_shape_t$0(bin_a[1]), _ay_, _ax_];
    }
    var t_of_sexp$0 = Key$0[15][10], sexp_of_t$0 = Key$0[15][11];
    function compare$0(cmp_a, a_006, b_007){
     function _aw_(a_008, b_009){return caml_call2(cmp_a, a_008, b_009);}
     return caml_call3(Key$0[15][9], _aw_, a_006, b_007);
    }
    return [0,
            Key$0,
            bin_shape_t$0,
            bin_size_t$0,
            bin_write_t$0,
            bin_writer_t$0,
            bin_read_t$1,
            bin_read_t$2,
            bin_reader_t$0,
            bin_t$0,
            t_of_sexp$0,
            sexp_of_t$0,
            compare$0];
   }
   function to_map(t){return t;}
   function key_not_in_enumeration(t, key){
    var _ao_ = caml_call1(Core_Map[2], t)[2];
    return caml_call5
            (Core[247], 0, _a_, cst_Key_was_not_provided_in_th, key, _ao_);
   }
   function change(t, k, f){
    function _an_(param){
     if(! param) return key_not_in_enumeration(t, k);
     var x = param[1];
     return caml_call1(f, x);
    }
    return caml_call3(Core_Map[43], t, k, _an_);
   }
   function find(t, k){
    try{var _al_ = caml_call2(Core_Map[45], t, k); return _al_;}
    catch(_am_){return key_not_in_enumeration(t, k);}
   }
   function pair(t1, t2, key, param){
    var _ak_ = param[1];
    if(737457313 !== _ak_)
     return 847852583 <= _ak_
             ? key_not_in_enumeration(t2, key)
             : key_not_in_enumeration(t1, key);
    var match = param[2], v2 = match[2], v1 = match[1];
    return [0, v1, v2];
   }
   function iter2(t1, t2, f){
    function _aj_(key, data){
     var match = pair(t1, t2, key, data), v2 = match[2], v1 = match[1];
     return caml_call3(f, key, v1, v2);
    }
    return caml_call3(Core_Map[56], t1, t2, _aj_);
   }
   function fold2(t1, t2, init, f){
    function _ai_(key, data, acc){
     var match = pair(t1, t2, key, data), v2 = match[2], v1 = match[1];
     return caml_call4(f, key, v1, v2, acc);
    }
    return caml_call4(Core_Map[64], t1, t2, init, _ai_);
   }
   function map2(t1, t2, f){
    function _ah_(key, v){
     var match = pair(t1, t2, key, v), v2 = match[2], v1 = match[1];
     return [0, caml_call2(f, v1, v2)];
    }
    return caml_call3(Core_Map[84], t1, t2, _ah_);
   }
   function set(t, key, data){return caml_call3(Core_Map[38], t, key, data);}
   function Sequence3(A){
    function sequence(t){
     function _ab_(acc, param){
      var data = param[2], key = param[1];
      function _ag_(acc, data){
       return caml_call3(Core_Map[38], acc, key, data);
      }
      return caml_call3(A[9], acc, data, _ag_);
     }
     var
      _ac_ = caml_call1(Core_Map[2], t),
      _ad_ = caml_call1(Core_Map[124][1], _ac_),
      _ae_ = caml_call1(A[1], _ad_),
      _af_ = caml_call2(Core_Map[81], 0, t);
     return caml_call3(Core_List[20], _af_, _ae_, _ab_);
    }
    return [0, sequence];
   }
   function Sequence2(_aa_){
    return Sequence3(caml_call1(Base_Applicative[6], _aa_));
   }
   function Sequence(_$_){
    return Sequence2(caml_call1(Base_Applicative[3], _$_));
   }
   var
    combine_errors = Core_Map[74],
    data = Core_Map[80],
    for_all = Core_Map[95],
    for_alli = Core_Map[96],
    iter = Core_Map[50],
    iter_keys = Core_Map[49],
    iteri = Core_Map[51],
    map = Core_Map[57],
    mapi = Core_Map[58],
    fold = Core_Map[61],
    fold_right = Core_Map[63],
    to_alist = Core_Map[81];
   function Make_plain_with_witnesses(Key){
    var
     sexp_of_t = Key[1],
     all = Key[3],
     enumeration = Key[5],
     include = caml_call1(Core_Comparable[13], [0, Key[1], Key[4]]),
     symbol = include[1],
     symbol$0 = include[2],
     symbol$1 = include[3],
     symbol$2 = include[4],
     symbol$3 = include[5],
     symbol$4 = include[6],
     equal = include[7],
     compare = include[8],
     min = include[9],
     max = include[10],
     ascending = include[11],
     descending = include[12],
     between = include[13],
     clamp_exn = include[14],
     clamp = include[15],
     comparator = include[16],
     validate_lbound = include[17],
     validate_ubound = include[18],
     validate_bound = include[19],
     Replace_polymorphic_compare = include[20],
     Map = include[21],
     Set = include[22],
     Key$0 =
       [0,
        sexp_of_t,
        all,
        enumeration,
        symbol,
        symbol$0,
        symbol$1,
        symbol$2,
        symbol$3,
        symbol$4,
        equal,
        compare,
        min,
        max,
        ascending,
        descending,
        between,
        clamp_exn,
        clamp,
        comparator,
        validate_lbound,
        validate_ubound,
        validate_bound,
        Replace_polymorphic_compare,
        Map,
        Set],
     sexp_of_t$0 = Key$0[24][4];
    function compare$0(cmp_a, a_012, b_013){
     function ___(a_014, b_015){return caml_call2(cmp_a, a_014, b_015);}
     return caml_call3(Key$0[24][2], ___, a_012, b_013);
    }
    function equal$0(cmp_a, a_016, b_017){
     function _Z_(a_018, b_019){return caml_call2(cmp_a, a_018, b_019);}
     return caml_call3(Key$0[24][3], _Z_, a_016, b_017);
    }
    function create(f){
     function _X_(t, key){
      var _Y_ = caml_call1(f, key);
      return caml_call3(Core_Map[38], t, key, _Y_);
     }
     return caml_call3(Core_List[20], Key$0[2], Key$0[24][5], _X_);
    }
    function create_const(x){return create(function(param){return x;});}
    var named_key_set = [0, caml_call1(Key$0[25][9], Key$0[2]), cst_Key_all];
    function of_map_exn(map){
     var
      _U_ = [0, caml_call1(Core_Map[120], map), cst_Map_key_set_map],
      _V_ = caml_call2(Core_Set[33][2], named_key_set, _U_);
     caml_call1(Core[255], _V_);
     return create
             (function(key){
               var match = caml_call2(Core_Map[44], map, key);
               if(match){var value = match[1]; return value;}
               var
                _W_ =
                  caml_call1
                   (Sexplib0_Sexp_conv[7], cst_impossible_all_keys_must_b);
               return caml_call1(Core[261], _W_);
              });
    }
    function of_alist_exn(alist){
     return of_map_exn(caml_call1(Key$0[24][15], alist));
    }
    function apply(t1, t2){
     return map2(t1, t2, function(f, x){return caml_call1(f, x);});
    }
    var
     map$0 = [0, -198771759, map],
     include$0 =
       caml_call1(Base_Applicative[7], [0, create_const, apply, map$0]),
     return$0 = include$0[1],
     map$1 = include$0[2],
     both = include$0[3],
     symbol$5 = include$0[4],
     symbol$6 = include$0[5],
     symbol$7 = include$0[6],
     symbol_map = include$0[7],
     apply$0 = include$0[8],
     map2$0 = include$0[9],
     map3 = include$0[10],
     all$0 = include$0[11],
     all_unit = include$0[12],
     Applicative_infix = include$0[13];
    return [0,
            Key$0,
            sexp_of_t$0,
            compare$0,
            equal$0,
            create,
            create_const,
            ,
            ,
            of_alist_exn,
            return$0,
            map$1,
            both,
            symbol$5,
            symbol$6,
            symbol$7,
            symbol_map,
            apply$0,
            map2$0,
            map3,
            all$0,
            all_unit,
            Applicative_infix];
   }
   function Make_with_witnesses$0(Key){
    var
     t_of_sexp = Key[1],
     sexp_of_t = Key[2],
     bin_size_t = Key[3],
     bin_write_t = Key[4],
     bin_read_t = Key[5],
     bin_read_t$0 = Key[6],
     bin_shape_t = Key[7],
     bin_writer_t = Key[8],
     bin_reader_t = Key[9],
     bin_t = Key[10],
     all = Key[12],
     enumeration = Key[14],
     include =
       caml_call1
        (Core_Comparable[16],
         [0,
          Key[3],
          Key[4],
          Key[5],
          Key[6],
          Key[7],
          Key[8],
          Key[9],
          Key[10],
          Key[1],
          Key[2],
          Key[13]]),
     symbol = include[1],
     symbol$0 = include[2],
     symbol$1 = include[3],
     symbol$2 = include[4],
     symbol$3 = include[5],
     symbol$4 = include[6],
     equal = include[7],
     compare = include[8],
     min = include[9],
     max = include[10],
     ascending = include[11],
     descending = include[12],
     between = include[13],
     clamp_exn = include[14],
     clamp = include[15],
     validate_lbound = include[16],
     validate_ubound = include[17],
     validate_bound = include[18],
     Replace_polymorphic_compare = include[19],
     comparator = include[20],
     Map = include[21],
     Set = include[22],
     Key$0 =
       [0,
        t_of_sexp,
        sexp_of_t,
        bin_size_t,
        bin_write_t,
        bin_read_t,
        bin_read_t$0,
        bin_shape_t,
        bin_writer_t,
        bin_reader_t,
        bin_t,
        all,
        enumeration,
        symbol,
        symbol$0,
        symbol$1,
        symbol$2,
        symbol$3,
        symbol$4,
        equal,
        compare,
        min,
        max,
        ascending,
        descending,
        between,
        clamp_exn,
        clamp,
        validate_lbound,
        validate_ubound,
        validate_bound,
        Replace_polymorphic_compare,
        comparator,
        Map,
        Set],
     t_of_sexp$0 = Key$0[33][44],
     _G_ = caml_call1(Bin_shape[3][1], cst_a$1),
     _H_ = caml_call1(Bin_shape[4][1], cst_total_map_src_total_map_ml$1),
     _I_ = caml_call2(Bin_prot_Shape[11], _H_, _G_),
     _J_ = caml_call1(Key$0[33][46], _I_),
     _K_ = [0, caml_call1(Bin_shape[3][1], cst_a$2), 0],
     _L_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$1), _K_, _J_], 0],
     _M_ = caml_call1(Bin_shape[4][1], cst_total_map_src_total_map_ml$2);
    caml_call2(Bin_prot_Shape[2], _M_, _L_);
    var
     _N_ =
       Make_plain_with_witnesses
        ([0, Key$0[2], Key$0[20], Key$0[11], Key$0[32], Key$0[12]]),
     Applicative_infix = _N_[22],
     all_unit = _N_[21],
     all$0 = _N_[20],
     map3 = _N_[19],
     map2 = _N_[18],
     apply = _N_[17],
     symbol_map = _N_[16],
     symbol$5 = _N_[15],
     symbol$6 = _N_[14],
     symbol$7 = _N_[13],
     both = _N_[12],
     map = _N_[11],
     return$0 = _N_[10],
     of_alist_exn = _N_[9],
     create_const = _N_[6],
     create = _N_[5],
     equal$0 = _N_[4],
     compare$0 = _N_[3],
     sexp_of_t$0 = _N_[2],
     all_set = caml_call1(Key$0[34][8], Key$0[11]);
    function validate_map_from_serializatio(map){
     var
      keys = caml_call1(Core_Map[120], map),
      keys_minus_all = caml_call2(Core_Set[17], keys, all_set),
      all_minus_keys = caml_call2(Core_Set[17], all_set, keys),
      _P_ = 0,
      _Q_ =
        caml_call1(Core_Set[10], all_minus_keys)
         ? Validate[1]
         : caml_call3
           (Validate[3],
            cst_map_from_serialization_doe,
            all_minus_keys,
            Key$0[34][28]),
      _R_ = [0, _Q_, _P_],
      _S_ =
        caml_call1(Core_Set[10], keys_minus_all)
         ? Validate[1]
         : caml_call3
           (Validate[3],
            cst_map_from_serialization_has,
            keys_minus_all,
            Key$0[34][28]),
      _T_ = caml_call1(Validate[7], [0, _S_, _R_]);
     return caml_call1(Validate[17], _T_);
    }
    function t_of_sexp$1(a_of_sexp, sexp){
     var t = caml_call2(t_of_sexp$0, a_of_sexp, sexp);
     validate_map_from_serializatio(t);
     return t;
    }
    function to_binable(x){return x;}
    function of_binable(x){validate_map_from_serializatio(x); return x;}
    var
     _O_ = Key$0[33],
     include$0 =
       caml_call1
        (Bin_prot_Utils[13],
         [0,
          [0, _O_[46], _O_[47], _O_[48], _O_[49], _O_[50]],
          to_binable,
          of_binable]),
     bin_shape_t$0 = include$0[1],
     bin_size_t$0 = include$0[2],
     bin_write_t$0 = include$0[3],
     bin_read_t$1 = include$0[4],
     bin_read_t$2 = include$0[5],
     bin_writer_t$0 = include$0[6],
     bin_reader_t$0 = include$0[7],
     bin_t$0 = include$0[8];
    return [0,
            Key$0,
            sexp_of_t$0,
            compare$0,
            equal$0,
            create,
            create_const,
            ,
            ,
            of_alist_exn,
            return$0,
            map,
            both,
            symbol$7,
            symbol$6,
            symbol$5,
            symbol_map,
            apply,
            map2,
            map3,
            all$0,
            all_unit,
            Applicative_infix,
            ,
            ,
            t_of_sexp$1,
            bin_shape_t$0,
            bin_size_t$0,
            bin_write_t$0,
            bin_read_t$1,
            bin_read_t$2,
            bin_writer_t$0,
            bin_reader_t$0,
            bin_t$0];
   }
   function Make_plain(Key){
    var
     sexp_of_t = Key[1],
     all = Key[3],
     _F_ = caml_call1(Core_Comparable[11], [0, Key[2], Key[1]]),
     compare = _F_[8],
     comparator = _F_[16],
     include = caml_call1(Total_map_Enumeration[1], [0, Key[3]]),
     enumeration = include[1];
    return Make_plain_with_witnesses
            ([0, sexp_of_t, compare, all, comparator, enumeration]);
   }
   function Make(Key){
    var
     t_of_sexp = Key[1],
     sexp_of_t = Key[2],
     bin_size_t = Key[3],
     bin_write_t = Key[4],
     bin_read_t = Key[5],
     bin_read_t$0 = Key[6],
     bin_shape_t = Key[7],
     bin_writer_t = Key[8],
     bin_reader_t = Key[9],
     bin_t = Key[10],
     all = Key[12],
     _E_ =
       caml_call1
        (Core_Comparable[15],
         [0,
          Key[3],
          Key[4],
          Key[5],
          Key[6],
          Key[7],
          Key[8],
          Key[9],
          Key[10],
          Key[11],
          Key[1],
          Key[2]]),
     compare = _E_[8],
     comparator = _E_[20],
     include = caml_call1(Total_map_Enumeration[1], [0, Key[12]]),
     enumeration = include[1];
    return Make_with_witnesses$0
            ([0,
              t_of_sexp,
              sexp_of_t,
              bin_size_t,
              bin_write_t,
              bin_read_t,
              bin_read_t$0,
              bin_shape_t,
              bin_writer_t,
              bin_reader_t,
              bin_t,
              compare,
              all,
              comparator,
              enumeration]);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_total_map);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Total_map);
   function _b_(Key){
    var Total_map = Make_with_witnesses(Key), _D_ = Total_map[1];
    return [0,
            [0,
             [0,
              _D_[1],
              _D_[2],
              _D_[3],
              _D_[4],
              _D_[5],
              _D_[6],
              _D_[7],
              _D_[8],
              _D_[9],
              _D_[10],
              _D_[11],
              _D_[12],
              _D_[13],
              _D_[14]],
             Total_map[2],
             Total_map[3],
             Total_map[4],
             Total_map[7],
             Total_map[6],
             Total_map[5],
             Total_map[8],
             Total_map[9],
             Total_map[10],
             Total_map[11],
             Total_map[12]]];
   }
   var
    _c_ =
      [0,
       [0,
        function(_A_){
         var _B_ = Make_with_witnesses(_A_), _C_ = _B_[1];
         return [0,
                 [0,
                  _C_[1],
                  _C_[2],
                  _C_[3],
                  _C_[4],
                  _C_[5],
                  _C_[6],
                  _C_[7],
                  _C_[8],
                  _C_[9],
                  _C_[10],
                  _C_[11],
                  _C_[12],
                  _C_[13],
                  _C_[14]],
                 _B_[2],
                 _B_[3],
                 _B_[4],
                 _B_[7],
                 _B_[6],
                 _B_[5],
                 _B_[8],
                 _B_[9],
                 _B_[10],
                 _B_[11],
                 _B_[12]];
        },
        _b_]];
   function _d_(Key){
    var Total_map = Make_with_witnesses$0(Key), _z_ = Total_map[1];
    return [0,
            [0,
             [0,
              _z_[1],
              _z_[2],
              _z_[3],
              _z_[4],
              _z_[5],
              _z_[6],
              _z_[7],
              _z_[8],
              _z_[9],
              _z_[10],
              _z_[20],
              _z_[11],
              _z_[32],
              _z_[12]],
             Total_map[3],
             Total_map[4],
             Total_map[10],
             Total_map[11],
             Total_map[12],
             Total_map[13],
             Total_map[14],
             Total_map[15],
             Total_map[16],
             Total_map[17],
             Total_map[18],
             Total_map[19],
             Total_map[20],
             Total_map[21],
             Total_map[22],
             Total_map[5],
             Total_map[6],
             Total_map[9],
             Total_map[25],
             Total_map[2],
             Total_map[26],
             Total_map[27],
             Total_map[28],
             Total_map[29],
             Total_map[30],
             Total_map[31],
             Total_map[32],
             Total_map[33]]];
   }
   function _e_(_w_){
    var _x_ = Make_with_witnesses$0(_w_), _y_ = _x_[1];
    return [0,
            [0,
             _y_[1],
             _y_[2],
             _y_[3],
             _y_[4],
             _y_[5],
             _y_[6],
             _y_[7],
             _y_[8],
             _y_[9],
             _y_[10],
             _y_[20],
             _y_[11],
             _y_[32],
             _y_[12]],
            _x_[3],
            _x_[4],
            _x_[10],
            _x_[11],
            _x_[12],
            _x_[13],
            _x_[14],
            _x_[15],
            _x_[16],
            _x_[17],
            _x_[18],
            _x_[19],
            _x_[20],
            _x_[21],
            _x_[22],
            _x_[5],
            _x_[6],
            _x_[9],
            _x_[25],
            _x_[2],
            _x_[26],
            _x_[27],
            _x_[28],
            _x_[29],
            _x_[30],
            _x_[31],
            _x_[32],
            _x_[33]];
   }
   function _f_(Key){
    var Total_map = Make(Key), _v_ = Total_map[1];
    return [0,
            [0,
             [0,
              _v_[1],
              _v_[2],
              _v_[3],
              _v_[4],
              _v_[5],
              _v_[6],
              _v_[7],
              _v_[8],
              _v_[9],
              _v_[10],
              _v_[20],
              _v_[11]],
             Total_map[3],
             Total_map[4],
             Total_map[10],
             Total_map[11],
             Total_map[12],
             Total_map[13],
             Total_map[14],
             Total_map[15],
             Total_map[16],
             Total_map[17],
             Total_map[18],
             Total_map[19],
             Total_map[20],
             Total_map[21],
             Total_map[22],
             Total_map[5],
             Total_map[6],
             Total_map[9],
             Total_map[25],
             Total_map[2],
             Total_map[26],
             Total_map[27],
             Total_map[28],
             Total_map[29],
             Total_map[30],
             Total_map[31],
             Total_map[32],
             Total_map[33]]];
   }
   function _g_(_s_){
    var _t_ = Make(_s_), _u_ = _t_[1];
    return [0,
            [0,
             _u_[1],
             _u_[2],
             _u_[3],
             _u_[4],
             _u_[5],
             _u_[6],
             _u_[7],
             _u_[8],
             _u_[9],
             _u_[10],
             _u_[20],
             _u_[11]],
            _t_[3],
            _t_[4],
            _t_[10],
            _t_[11],
            _t_[12],
            _t_[13],
            _t_[14],
            _t_[15],
            _t_[16],
            _t_[17],
            _t_[18],
            _t_[19],
            _t_[20],
            _t_[21],
            _t_[22],
            _t_[5],
            _t_[6],
            _t_[9],
            _t_[25],
            _t_[2],
            _t_[26],
            _t_[27],
            _t_[28],
            _t_[29],
            _t_[30],
            _t_[31],
            _t_[32],
            _t_[33]];
   }
   function _h_(Key){
    var Total_map = Make_plain_with_witnesses(Key), _r_ = Total_map[1];
    return [0,
            [0,
             [0, _r_[1], _r_[11], _r_[2], _r_[19], _r_[3]],
             Total_map[2],
             Total_map[3],
             Total_map[4],
             Total_map[10],
             Total_map[11],
             Total_map[12],
             Total_map[13],
             Total_map[14],
             Total_map[15],
             Total_map[16],
             Total_map[17],
             Total_map[18],
             Total_map[19],
             Total_map[20],
             Total_map[21],
             Total_map[22],
             Total_map[5],
             Total_map[6],
             Total_map[9]]];
   }
   function _i_(_o_){
    var _p_ = Make_plain_with_witnesses(_o_), _q_ = _p_[1];
    return [0,
            [0, _q_[1], _q_[11], _q_[2], _q_[19], _q_[3]],
            _p_[2],
            _p_[3],
            _p_[4],
            _p_[10],
            _p_[11],
            _p_[12],
            _p_[13],
            _p_[14],
            _p_[15],
            _p_[16],
            _p_[17],
            _p_[18],
            _p_[19],
            _p_[20],
            _p_[21],
            _p_[22],
            _p_[5],
            _p_[6],
            _p_[9]];
   }
   function _j_(Key){
    var Total_map = Make_plain(Key), _n_ = Total_map[1];
    return [0,
            [0,
             [0, _n_[1], _n_[11], _n_[2]],
             Total_map[2],
             Total_map[3],
             Total_map[4],
             Total_map[10],
             Total_map[11],
             Total_map[12],
             Total_map[13],
             Total_map[14],
             Total_map[15],
             Total_map[16],
             Total_map[17],
             Total_map[18],
             Total_map[19],
             Total_map[20],
             Total_map[21],
             Total_map[22],
             Total_map[5],
             Total_map[6],
             Total_map[9]]];
   }
   var
    Total_map =
      [0,
       to_map,
       map,
       mapi,
       map2,
       iter_keys,
       iter,
       iteri,
       iter2,
       fold,
       fold_right,
       fold2,
       set,
       to_alist,
       find,
       change,
       combine_errors,
       data,
       for_all,
       for_alli,
       Sequence,
       Sequence2,
       Sequence3,
       function(_k_){
        var _l_ = Make_plain(_k_), _m_ = _l_[1];
        return [0,
                [0, _m_[1], _m_[11], _m_[2]],
                _l_[2],
                _l_[3],
                _l_[4],
                _l_[10],
                _l_[11],
                _l_[12],
                _l_[13],
                _l_[14],
                _l_[15],
                _l_[16],
                _l_[17],
                _l_[18],
                _l_[19],
                _l_[20],
                _l_[21],
                _l_[22],
                _l_[5],
                _l_[6],
                _l_[9]];
       },
       _j_,
       _i_,
       _h_,
       _g_,
       _f_,
       _e_,
       _d_,
       _c_];
   runtime.caml_register_global(42, Total_map, cst_Total_map$0);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
