// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Versioned_polling_state_rpc__
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Versioned_polling_state_rpc = [0],
    Versioned_polling_state_rpc$0 = [0, Versioned_polling_state_rpc];
   runtime.caml_register_global
    (0, Versioned_polling_state_rpc$0, "Versioned_polling_state_rpc__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Versioned_polling_state_rpc__Versioned_polling_state_rpc_intf
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Versioned_polling_state_rp =
      "Versioned_polling_state_rpc__Versioned_polling_state_rpc_intf",
    cst_versioned_polling_state_rp = "versioned_polling_state_rpc";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Versioned_polling_state_rp);
   caml_call1
    (Ppx_bench_lib_Benchmark_accumu[1][1], cst_versioned_polling_state_rp);
   caml_call1
    (Ppx_expect_runtime[1][1], "src/versioned_polling_state_rpc_intf.ml");
   caml_call2
    (Ppx_inline_test_lib[6],
     cst_versioned_polling_state_rp,
     "versioned_polling_state_rpc_intf.ml");
   var Query = [0], Response = [0];
   caml_call1(Ppx_inline_test_lib[7], cst_versioned_polling_state_rp);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Versioned_polling_state_rp);
   var Versioned_polling_state_rpc_Ve = [0, Query, Response];
   runtime.caml_register_global
    (11, Versioned_polling_state_rpc_Ve, cst_Versioned_polling_state_rp);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Versioned_polling_state_rpc
//# unitInfo: Requires: Async_rpc_kernel__Versioned_rpc, Babel__Caller, Base__Or_error, Bin_shape, Core__Binable, Polling_state_rpc, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Versioned_polling_state_rpc__Versioned_polling_state_rpc_intf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Versioned_polling_state_rp$0 = "Versioned_polling_state_rpc",
    cst_versioned_polling_state_rp$0 = "versioned_polling_state_rpc";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Async_rpc_kernel_Versioned_rpc =
      global_data.Async_rpc_kernel__Versioned_rpc,
    Babel_Caller = global_data.Babel__Caller,
    Base_Or_error = global_data.Base__Or_error,
    Polling_state_rpc = global_data.Polling_state_rpc,
    Bin_shape = global_data.Bin_shape,
    Core_Binable = global_data.Core__Binable,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Versioned_polling_state_rp$0);
   caml_call1
    (Ppx_bench_lib_Benchmark_accumu[1][1], cst_versioned_polling_state_rp$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/versioned_polling_state_rpc.ml");
   caml_call2
    (Ppx_inline_test_lib[6],
     cst_versioned_polling_state_rp$0,
     "versioned_polling_state_rpc.ml");
   var
    cst_3e367da4_b851_422a_b4b0_6a = "3e367da4-b851-422a-b4b0-6a1833eb941c",
    cst_db6dae4d_cb00_4727_ab1b_f0 = "db6dae4d-cb00-4727-ab1b-f0f34b37945c",
    cst_8266b996_7a30_436c_b045_00 = "8266b996-7a30-436c-b045-00c02f7f3db7",
    cst_versioned_polling_state_rp = cst_versioned_polling_state_rp$0,
    cst_Versioned_polling_state_rp = cst_Versioned_polling_state_rp$0;
   function Make_stable_query(Unstable, Stable, Conv){
    var
     equal = Unstable[1],
     caller_identity =
       caml_call1(Bin_shape[5][1], cst_8266b996_7a30_436c_b045_00),
     to_binable = Conv[1],
     of_binable = Conv[2],
     include =
       caml_call1
        (caml_call1
          (Core_Binable[2],
           [0, Stable[5], Stable[1], Stable[2], Stable[3], Stable[4]]),
         [0, to_binable, of_binable, caller_identity]),
     bin_size_t = include[1],
     bin_write_t = include[2],
     bin_read_t = include[3],
     bin_read_t$0 = include[4],
     bin_shape_t = include[5],
     bin_writer_t = include[6],
     bin_reader_t = include[7],
     bin_t = include[8];
    return [0,
            equal,
            bin_size_t,
            bin_write_t,
            bin_read_t,
            bin_read_t$0,
            bin_shape_t,
            bin_writer_t,
            bin_reader_t,
            bin_t];
   }
   function Make_stable_response(Unstable, Stable, Conv){
    var
     to_binable = Conv[1],
     of_binable = Conv[2],
     caller_identity =
       caml_call1(Bin_shape[5][1], cst_3e367da4_b851_422a_b4b0_6a),
     include =
       caml_call1
        (caml_call1
          (Core_Binable[2],
           [0, Stable[5], Stable[1], Stable[2], Stable[3], Stable[4]]),
         [0, to_binable, of_binable, caller_identity]),
     bin_size_t = include[1],
     bin_write_t = include[2],
     bin_read_t = include[3],
     bin_read_t$0 = include[4],
     bin_shape_t = include[5],
     bin_writer_t = include[6],
     bin_reader_t = include[7],
     bin_t = include[8],
     sexp_of_t = Unstable[1][1],
     to_binable$0 = Conv[3][1],
     of_binable$0 = Conv[3][2],
     caller_identity$0 =
       caml_call1(Bin_shape[5][1], cst_db6dae4d_cb00_4727_ab1b_f0),
     _e_ = Stable[10],
     include$0 =
       caml_call1
        (caml_call1
          (Core_Binable[2], [0, _e_[5], _e_[1], _e_[2], _e_[3], _e_[4]]),
         [0, to_binable$0, of_binable$0, caller_identity$0]),
     bin_size_t$0 = include$0[1],
     bin_write_t$0 = include$0[2],
     bin_read_t$1 = include$0[3],
     bin_read_t$2 = include$0[4],
     bin_shape_t$0 = include$0[5],
     bin_writer_t$0 = include$0[6],
     bin_reader_t$0 = include$0[7],
     bin_t$0 = include$0[8],
     diffs = Unstable[2],
     update = Unstable[3];
    return [0,
            bin_size_t,
            bin_write_t,
            bin_read_t,
            bin_read_t$0,
            bin_shape_t,
            bin_writer_t,
            bin_reader_t,
            bin_t,
            [0,
             bin_size_t$0,
             bin_write_t$0,
             bin_read_t$1,
             bin_read_t$2,
             bin_shape_t$0,
             bin_writer_t$0,
             bin_reader_t$0,
             bin_t$0,
             sexp_of_t],
            diffs,
            update];
   }
   function create_caller(rpc){
    function _c_(initial_query, param){
     return caml_call2(Polling_state_rpc[9][1], initial_query, rpc);
    }
    var _d_ = caml_call1(Polling_state_rpc[3], rpc);
    return caml_call2(Babel_Caller[25][1], _d_, _c_);
   }
   function negotiate_client(caller, initial_query, conn){
    var menu = caml_call1(Async_rpc_kernel_Versioned_rpc[2][4], conn);
    function _a_(f){
     var
      conn$0 = caml_call1(Async_rpc_kernel_Versioned_rpc[2][3], conn),
      creator = caml_call1(f, conn$0);
     return caml_call2(creator, initial_query, 0);
    }
    var _b_ = caml_call2(Babel_Caller[19], caller, menu);
    return caml_call2(Base_Or_error[28][4][3], _b_, _a_);
   }
   var Client = [0, create_caller, negotiate_client];
   caml_call1(Ppx_inline_test_lib[7], cst_versioned_polling_state_rp);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Versioned_polling_state_rp);
   var
    Versioned_polling_state_rpc =
      [0, Make_stable_query, Make_stable_response, Client];
   runtime.caml_register_global
    (20, Versioned_polling_state_rpc, cst_Versioned_polling_state_rp$0);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
