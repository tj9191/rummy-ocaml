// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Uopt
//# unitInfo: Requires: Base, Base__Bool, Base__Option, Base__Sexpable, Inline_test_config, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Uopt$0 = "Uopt",
    cst_Uopt_none$0 = "Uopt.none",
    cst_src_uopt_ml$1 = "src/uopt.ml",
    cst_uopt$0 = "uopt";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    none = cst_Uopt_none$0,
    cst = "",
    Base = global_data.Base,
    Inline_test_config = global_data.Inline_test_config,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Base_Option = global_data.Base__Option,
    Base_Sexpable = global_data.Base__Sexpable;
   caml_call1(Ppx_module_timer_runtime[4], cst_Uopt$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_uopt$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_uopt_ml$1);
   caml_call2(Ppx_inline_test_lib[6], cst_uopt$0, "uopt.ml");
   var
    cst_Uopt_none = cst_Uopt_none$0,
    cst_should_not_have_gotten_to_ = "should not have gotten to this point",
    cst_src_uopt_ml = cst_src_uopt_ml$1,
    _b_ = [0, "no-js", 0],
    cst_using_the_same_sentinel_va = "using the same sentinel value",
    cst_Uopt_value_exn = "Uopt.value_exn",
    cst_Uopt_Local_some_Uopt_none = "Uopt.Local.some Uopt.none",
    cst_Uopt_some_Uopt_none = "Uopt.some Uopt.none",
    cst_src_uopt_ml$0 = cst_src_uopt_ml$1,
    cst_uopt = cst_uopt$0,
    cst_Uopt = cst_Uopt$0;
   function some(x){
    if(x === cst_Uopt_none$0) caml_call1(Base[244], cst_Uopt_some_Uopt_none);
    return x;
   }
   function some_local(x){
    if(x === cst_Uopt_none$0)
     caml_call1(Base[244], cst_Uopt_Local_some_Uopt_none);
    return x;
   }
   function unsafe_value(_g_){return _g_;}
   function unsafe_value_local(_f_){return _f_;}
   function is_none(t){return t === cst_Uopt_none$0 ? 1 : 0;}
   function is_some(t){return 1 - (t === cst_Uopt_none$0 ? 1 : 0);}
   function invariant(invariant_a, t){
    var _e_ = is_some(t);
    return _e_ ? caml_call1(invariant_a, t) : _e_;
   }
   function value_exn(t){
    return t === cst_Uopt_none$0
            ? caml_call1(Base[244], cst_Uopt_value_exn)
            : t;
   }
   function value(t, default$0){
    return runtime.caml_csel_value
            (t === cst_Uopt_none$0 ? 1 : 0, default$0, t);
   }
   function value_local(t, default$0){
    return runtime.caml_csel_value
            (t === cst_Uopt_none$0 ? 1 : 0, default$0, t);
   }
   function some_if(cond, x){
    return runtime.caml_csel_value(cond, some(x), cst_Uopt_none$0);
   }
   function some_if_local(cond, x){
    return runtime.caml_csel_value(cond, some_local(x), cst_Uopt_none$0);
   }
   function to_option(t){return t === cst_Uopt_none$0 ? 0 : [0, t];}
   function to_option_local(t){
    return runtime.caml_csel_value(t === cst_Uopt_none$0 ? 1 : 0, 0, [0, t]);
   }
   function of_option_local(opt){
    if(! opt) return none;
    var x = opt[1];
    return some_local(x);
   }
   function of_option(opt){
    if(! opt) return none;
    var a = opt[1];
    return some(a);
   }
   var
    include =
      caml_call1
       (caml_call1(Base_Sexpable[2], [0, Base_Option[9], Base_Option[10]]),
        [0, to_option, of_option]),
    t_of_sexp = include[1],
    sexp_of_t = include[2],
    Optional_syntax = [0, is_none, unsafe_value],
    Optional_syntax$0 = [0, Optional_syntax],
    Optional_syntax$1 = [0, is_none, unsafe_value_local],
    Optional_syntax$2 = [0, Optional_syntax$1];
   function globalize(globalize_a, ppx_optional_e_0){
    if(caml_call1(Optional_syntax$2[1][1], ppx_optional_e_0)) return none;
    var x = caml_call1(Optional_syntax$2[1][2], ppx_optional_e_0);
    return some(caml_call1(globalize_a, x));
   }
   function _a_(param){
    function _c_(param){
     a:
     {
      try{some(cst_Uopt_none);}catch(_d_){break a;}
      caml_call1(Base[244], cst_should_not_have_gotten_to_);
     }
     return 0;
    }
    caml_call8
     (Ppx_inline_test_lib[9],
      Inline_test_config,
      cst_using_the_same_sentinel_va,
      _b_,
      cst_src_uopt_ml,
      102,
      4,
      203,
      _c_);
    return 0;
   }
   caml_call8
    (Ppx_inline_test_lib[10],
     Inline_test_config,
     cst,
     0,
     cst_src_uopt_ml$0,
     100,
     0,
     253,
     _a_);
   caml_call1(Ppx_inline_test_lib[7], cst_uopt);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Uopt);
   var
    Uopt =
      [0,
       t_of_sexp,
       sexp_of_t,
       globalize,
       invariant,
       none,
       some,
       is_none,
       is_some,
       value_exn,
       value,
       some_if,
       unsafe_value,
       to_option,
       of_option,
       Optional_syntax$0,
       [0,
        some_local,
        value_local,
        some_if_local,
        unsafe_value_local,
        to_option_local,
        of_option_local,
        Optional_syntax$2]];
   runtime.caml_register_global(26, Uopt, cst_Uopt$0);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLjAsImZpbGUiOiJ1b3B0LmNtYS5qcyIsInNvdXJjZVJvb3QiOiIiLCJuYW1lcyI6WyJub25lIiwic29tZSIsIngiLCJzb21lX2xvY2FsIiwidW5zYWZlX3ZhbHVlIiwidW5zYWZlX3ZhbHVlX2xvY2FsIiwiaXNfbm9uZSIsInQiLCJpc19zb21lIiwiaW52YXJpYW50IiwiaW52YXJpYW50X2EiLCJ2YWx1ZV9leG4iLCJ2YWx1ZSIsImRlZmF1bHQkMCIsInZhbHVlX2xvY2FsIiwic29tZV9pZiIsImNvbmQiLCJzb21lX2lmX2xvY2FsIiwidG9fb3B0aW9uIiwidG9fb3B0aW9uX2xvY2FsIiwib2Zfb3B0aW9uX2xvY2FsIiwib3B0Iiwib2Zfb3B0aW9uIiwiYSIsImdsb2JhbGl6ZSIsImdsb2JhbGl6ZV9hIiwicHB4X29wdGlvbmFsX2VfMCJdLCJzb3VyY2VzIjpbIi9Vc2Vycy90eWxhbm1vcmFuLy5vcGFtLzUuMS4xL2xpYi91b3B0L3VvcHQubWwiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0c7Ozs7O0c7Ozs7O0c7Ozs7Ozs7SUFTSUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztZQUVTQyxLQUNQQztJQUFKLEdBQUlBLHVCQUNzQjtJQUFBLE9BRHRCQTtHQUVIO1lBR1VDLFdBQ1BEO0lBQUosR0FBSUE7S0FDc0I7SUFBQSxPQUR0QkE7R0FFSDtZQUdDRSxrQjtZQUNBQyx3QjtZQUNTQyxRQUFRQyxHQUFJLE9BQUpBLDhCQUFxQjtZQUM3QkMsUUFBUUQsR0FBSSxZQUFKQSwrQkFBbUI7WUFDM0JFLFVBQVVDLGFBQVlIO0lBQU8sVUFEN0JDLFFBQ3NCRDtJQUFPLGFBQTJCLFdBQTlDRyxhQUFZSDtHQUFrRDtZQUN4RUksVUFBVUo7SUFBSSxPQUFKQTtjQUFzQjtjQUF0QkE7R0FBbUU7WUFDN0VLLE1BQU1MLEdBQUdNO0lBQVUsT0FBQTthQUFiTiwrQkFBR00sV0FBSE47R0FBNkQ7WUFFbkVPLFlBQVlQLEdBQUdNO0lBQzFCLE9BQUE7YUFEdUJOLCtCQUFHTSxXQUFITjtHQUMrQjtZQUczQ1EsUUFBUUMsTUFBS2Q7SUFBSSxPQUFBLHdCQUFUYyxNQXhCUmYsS0F3QmFDO0dBQWtDO1lBQy9DZSxjQUFjRCxNQUFLZDtJQUFJLE9BQUEsd0JBQVRjLE1BbkJkYixXQW1CbUJEO0dBQXdDO1lBSzNEZ0IsVUFBVVgsR0FBSSxPQUFKQSxnQ0FBQUEsR0FBcUQ7WUFFL0RZLGdCQUFnQlo7SUFDM0IsT0FBQSx3QkFEMkJBLHNDQUFBQTtHQUMrQjtZQUcvQ2EsZ0JBQWdCQztJQUMzQixLQUQyQkEsWUF0Q3pCckI7UUF5Q0tFLElBSG9CbUI7SUFHZixPQWpDRGxCLFdBaUNKRDtHQUFpQjtZQUdib0IsVUFBVUQ7SUFDckIsS0FEcUJBLFlBNUNuQnJCO1FBK0NLdUIsSUFIY0Y7SUFHVCxPQTdDRHBCLEtBNkNKc0I7R0FBVztHQWVPOzs7O1lBOUJkTCxXQVlBSTs7O0lBa0JjLHNCQTlDZGhCLFNBRlRGO0lBK0NxQjtJQWdCSSx3QkE3RGhCRSxTQURURDtJQTZEdUI7WUFRdkJtQixVQUFVQyxhQUNTQztJLHVDQUFBQSwwQkFyRm5CMUI7UUF1RktFLHdDQUZjd0I7SUFFSixPQXJGTnpCLEtBcUZNLFdBSEx3QixhQUdMdkI7Ozs7Szs7VUFyRklEO01BNEZhOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztPQVZ0QnVCO09BbEVTZjtPQWxCVFQ7T0FFU0M7T0FjQUs7T0FDQUU7T0FFQUc7T0FDQUM7T0FNQUc7T0FaVFg7T0FrQlNjO09BWUFJOzs7UUFwQ0FuQjtRQWNBVztRQUtBRztRQVpUWjtRQW1CU2M7UUFJQUM7Ozs7RSIsInNvdXJjZXNDb250ZW50IjpbIm9wZW4gQmFzZVxubW9kdWxlIE9iaiA9IFN0ZGxpYi5PYmpcbm1vZHVsZSBPYmpfbG9jYWwgPSBCYXNlLkV4cG9ydGVkX2Zvcl9zcGVjaWZpY191c2VzLk9ial9sb2NhbFxuXG50eXBlICsnYSB0XG5cbigqIFRoaXMgW09iai5tYWdpY10gaXMgT0sgYmVjYXVzZSB3ZSBuZXZlciBhbGxvdyB1c2VyIGNvZGUgYWNjZXNzIHRvIFtub25lXSAoZXhjZXB0IHZpYVxuICAgW3Vuc2FmZV92YWx1ZV0pLiAgV2UgZGlzYWxsb3cgW18gVW9wdC50IFVvcHQudF0sIHNvIHRoZXJlIGlzIG5vIGNoYW5jZSBvZiBjb25mdXNpbmdcbiAgIFtub25lXSB3aXRoIFtzb21lIG5vbmVdLiAgQW5kIFtmbG9hdCBVb3B0LnQgYXJyYXldIGlzIHNpbWlsYXJseSBkaXNhbGxvd2VkLiAqKVxubGV0IG5vbmUgOiBfIHQgPSBPYmoubWFnaWMgXCJVb3B0Lm5vbmVcIlxuXG5sZXRbQGlubGluZV0gc29tZSAoeCA6ICdhKSA9XG4gIGxldCByIDogJ2EgdCA9IE9iai5tYWdpYyB4IGluXG4gIGlmIHBoeXNfZXF1YWwgciBub25lIHRoZW4gZmFpbHdpdGggXCJVb3B0LnNvbWUgVW9wdC5ub25lXCI7XG4gIHJcbjs7XG5cbmxldFtAaW5saW5lXSBzb21lX2xvY2FsICh0eXBlIGEpICh4IDogYSkgOiBhIHQgPVxuICBsZXQgciA6IGEgdCA9IE9ial9sb2NhbC5tYWdpYyB4IGluXG4gIGlmIHBoeXNfZXF1YWwgciBub25lIHRoZW4gZmFpbHdpdGggXCJVb3B0LkxvY2FsLnNvbWUgVW9wdC5ub25lXCI7XG4gIHJcbjs7XG5cbmxldCB1bnNhZmVfdmFsdWUgOiAnYSB0IC0+ICdhID0gT2JqLm1hZ2ljXG5sZXQgdW5zYWZlX3ZhbHVlX2xvY2FsIDogJ2EgdCAtPiAnYSA9IE9ial9sb2NhbC5tYWdpY1xubGV0W0BpbmxpbmVdIGlzX25vbmUgdCA9IHBoeXNfZXF1YWwgdCBub25lXG5sZXRbQGlubGluZV0gaXNfc29tZSB0ID0gbm90IChpc19ub25lIHQpXG5sZXRbQGlubGluZV0gaW52YXJpYW50IGludmFyaWFudF9hIHQgPSBpZiBpc19zb21lIHQgdGhlbiBpbnZhcmlhbnRfYSAodW5zYWZlX3ZhbHVlIHQpXG5sZXRbQGlubGluZV0gdmFsdWVfZXhuIHQgPSBpZiBpc19ub25lIHQgdGhlbiBmYWlsd2l0aCBcIlVvcHQudmFsdWVfZXhuXCIgZWxzZSB1bnNhZmVfdmFsdWUgdFxubGV0W0BpbmxpbmVdIHZhbHVlIHQgfmRlZmF1bHQgPSBCb29sLnNlbGVjdCAoaXNfbm9uZSB0KSBkZWZhdWx0ICh1bnNhZmVfdmFsdWUgdClcblxubGV0W0BpbmxpbmVdIHZhbHVlX2xvY2FsIHQgfmRlZmF1bHQgPVxuICBCb29sLnNlbGVjdCAoaXNfbm9uZSB0KSBkZWZhdWx0ICh1bnNhZmVfdmFsdWVfbG9jYWwgdClcbjs7XG5cbmxldFtAaW5saW5lXSBzb21lX2lmIGNvbmQgeCA9IEJvb2wuc2VsZWN0IGNvbmQgKHNvbWUgeCkgbm9uZVxubGV0W0BpbmxpbmVdIHNvbWVfaWZfbG9jYWwgY29uZCB4ID0gQm9vbC5zZWxlY3QgY29uZCAoc29tZV9sb2NhbCB4KSBub25lXG5cbigqIFt0b19vcHRpb25dIHByaW9yaXRpemVzIG5vdCBhbGxvY2F0aW5nIGluIHRoZSBbTm9uZV0gY2FzZS4gQWxsb2NhdGlvbiBpcyBmYXIgY2hlYXBlclxuICAgZm9yIFt0b19vcHRpb25fbG9jYWxdLCBzbyBpdCBpbnN0ZWFkIHByaW9yaXRpemVzIG1pbmltaXppbmcgdW5wcmVkaWN0YWJsZSBicmFuY2hlcy4gKilcblxubGV0W0BpbmxpbmVdIHRvX29wdGlvbiB0ID0gaWYgaXNfbm9uZSB0IHRoZW4gTm9uZSBlbHNlIFNvbWUgKHVuc2FmZV92YWx1ZSB0KVxuXG5sZXRbQGlubGluZV0gdG9fb3B0aW9uX2xvY2FsIHQgPVxuICBCb29sLnNlbGVjdCAoaXNfbm9uZSB0KSBOb25lIChTb21lICh1bnNhZmVfdmFsdWVfbG9jYWwgdCkpXG47O1xuXG5sZXRbQGlubGluZV0gb2Zfb3B0aW9uX2xvY2FsIG9wdCA9XG4gIG1hdGNoIG9wdCB3aXRoXG4gIHwgTm9uZSAtPiBub25lXG4gIHwgU29tZSB4IC0+IHNvbWVfbG9jYWwgeFxuOztcblxubGV0W0BpbmxpbmVdIG9mX29wdGlvbiBvcHQgPVxuICBtYXRjaCBvcHQgd2l0aFxuICB8IE5vbmUgLT4gbm9uZVxuICB8IFNvbWUgYSAtPiBzb21lIGFcbjs7XG5cbigqIE5vdGUgW3NleHBfb2ZfdF0gYW5kIFt0X29mX3NleHBdIG11c3QgcmVtYWluIHN0YWJsZTsgc2VlIFtVb3B0X2NvcmUuU3RhYmxlXS4gKilcbmluY2x1ZGVcbiAgU2V4cGFibGUuT2Zfc2V4cGFibGUxXG4gICAgKE9wdGlvbilcbiAgICAoc3RydWN0XG4gICAgICB0eXBlIG5vbnJlYyAnYSB0ID0gJ2EgdFxuXG4gICAgICBsZXQgdG9fc2V4cGFibGUgPSB0b19vcHRpb25cbiAgICAgIGxldCBvZl9zZXhwYWJsZSA9IG9mX29wdGlvblxuICAgIGVuZClcblxubW9kdWxlIE9wdGlvbmFsX3N5bnRheCA9IHN0cnVjdFxuICBtb2R1bGUgT3B0aW9uYWxfc3ludGF4ID0gc3RydWN0XG4gICAgbGV0IGlzX25vbmUgPSBpc19ub25lXG4gICAgbGV0IHVuc2FmZV92YWx1ZSA9IHVuc2FmZV92YWx1ZVxuICBlbmRcbmVuZFxuXG5tb2R1bGUgTG9jYWwgPSBzdHJ1Y3RcbiAgbGV0IHNvbWUgPSBzb21lX2xvY2FsXG4gIGxldCB1bnNhZmVfdmFsdWUgPSB1bnNhZmVfdmFsdWVfbG9jYWxcbiAgbGV0IHZhbHVlID0gdmFsdWVfbG9jYWxcbiAgbGV0IHNvbWVfaWYgPSBzb21lX2lmX2xvY2FsXG4gIGxldCB0b19vcHRpb24gPSB0b19vcHRpb25fbG9jYWxcbiAgbGV0IG9mX29wdGlvbiA9IG9mX29wdGlvbl9sb2NhbFxuXG4gIG1vZHVsZSBPcHRpb25hbF9zeW50YXggPSBzdHJ1Y3RcbiAgICBtb2R1bGUgT3B0aW9uYWxfc3ludGF4ID0gc3RydWN0XG4gICAgICBsZXQgaXNfbm9uZSA9IGlzX25vbmVcbiAgICAgIGxldCB1bnNhZmVfdmFsdWUgPSB1bnNhZmVfdmFsdWVfbG9jYWxcbiAgICBlbmRcbiAgZW5kXG5lbmRcblxubGV0IGdsb2JhbGl6ZSBnbG9iYWxpemVfYSB0ID1cbiAgbWF0Y2glb3B0aW9uYWwuTG9jYWwgdCB3aXRoXG4gIHwgTm9uZSAtPiBub25lXG4gIHwgU29tZSB4IC0+IHNvbWUgKGdsb2JhbGl6ZV9hIHgpXG47O1xuXG5sZXQldGVzdF9tb2R1bGUgXyA9XG4gIChtb2R1bGUgc3RydWN0XG4gICAgbGV0JXRlc3RfdW5pdCAoXCJ1c2luZyB0aGUgc2FtZSBzZW50aW5lbCB2YWx1ZVwiIFtAdGFncyBcIm5vLWpzXCJdKSA9XG4gICAgICBtYXRjaCBzb21lIFwiVW9wdC5ub25lXCIgd2l0aFxuICAgICAgfCAoXyA6IHN0cmluZyB0KSAtPiBmYWlsd2l0aCBcInNob3VsZCBub3QgaGF2ZSBnb3R0ZW4gdG8gdGhpcyBwb2ludFwiXG4gICAgICB8IGV4Y2VwdGlvbiBfIC0+ICgpXG4gICAgOztcbiAgZW5kKVxuOztcbiJdfQ==
