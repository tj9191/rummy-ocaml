// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Vdom_input_widgets__
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Vdom_input_widgets = [0],
    Vdom_input_widgets$0 = [0, Vdom_input_widgets];
   runtime.caml_register_global
    (0, Vdom_input_widgets$0, "Vdom_input_widgets__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Vdom_input_widgets__Vdom_input_widgets_intf
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Vdom_input_widgets_Vdom_in =
      "Vdom_input_widgets__Vdom_input_widgets_intf",
    cst_vdom_input_widgets = "vdom_input_widgets";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Vdom_input_widgets_Vdom_in);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_vdom_input_widgets);
   caml_call1
    (Ppx_expect_runtime[1][1], "input_widgets/src/vdom_input_widgets_intf.ml");
   caml_call2
    (Ppx_inline_test_lib[6],
     cst_vdom_input_widgets,
     "vdom_input_widgets_intf.ml");
   caml_call1(Ppx_inline_test_lib[7], cst_vdom_input_widgets);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Vdom_input_widgets_Vdom_in);
   var Vdom_input_widgets_Vdom_input_ = [0];
   runtime.caml_register_global
    (11, Vdom_input_widgets_Vdom_input_, cst_Vdom_input_widgets_Vdom_in);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Vdom_input_widgets
//# unitInfo: Requires: Base__Exn, Bin_prot__Common, Bin_prot__Read, Bin_prot__Shape, Bin_prot__Write, Bin_shape, Core, Core__Date, Core__Float, Core__Fn, Core__Int, Core__List, Core__Option, Core__Set, Core__String, Core__Time_float, Core__Time_ns, Css_gen, Js_of_ocaml__Dom, Js_of_ocaml__Dom_html, Js_of_ocaml__Js, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Ppx_string_runtime, Sexplib0__Sexp_conv_error, Sexplib0__Sexp_conv_record, Vdom_input_widgets__Vdom_input_widgets_intf, Virtual_dom__Effect, Virtual_dom__Hooks, Virtual_dom__Node, Virtual_dom__Vdom
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$10 = "",
    cst$11 = ".",
    cst_Initial = "Initial",
    cst_Invalid$0 = "Invalid",
    cst_Valid$0 = "Valid",
    cst_Vdom_input_widgets$0 = "Vdom_input_widgets",
    cst_a$4 = "a",
    cst_button$2 = "button",
    cst_checkbox$1 = "checkbox",
    cst_checkbox_container$0 = "checkbox-container",
    cst_checked$2 = "checked",
    cst_error$1 = "error",
    cst_file$1 = "file",
    cst_initial = "initial",
    cst_input$3 = "input",
    cst_input_widgets_src_vdom_inp$5 =
      "input_widgets/src/vdom_input_widgets.ml",
    cst_input_widgets_src_vdom_inp$6 =
      "input_widgets/src/vdom_input_widgets.ml.Validated.t",
    cst_invalid = "invalid",
    cst_last_valid$1 = "last_valid",
    cst_multiple$1 = "multiple",
    cst_none$1 = "none",
    cst_selected$1 = "selected",
    cst_step$1 = "step",
    cst_t$1 = "t",
    cst_text$1 = "text",
    cst_update$1 = "update",
    cst_valid = "valid",
    cst_value$3 = "value",
    cst_vdom_input_widgets$0 = "vdom_input_widgets",
    caml_jsstring_of_string = runtime.caml_jsstring_of_string,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_string_notequal = runtime.caml_string_notequal,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$9 = cst$10,
    cst$7 = cst$11,
    cst$8 = cst$11,
    cst$6 = cst$10,
    cst$5 = cst$10,
    cst$4 = cst$10,
    cst$3 = cst$10,
    cst$2 = cst$10,
    cst$1 = cst$10,
    cst$0 = cst$10,
    cst = cst$10,
    error_source_014 = cst_input_widgets_src_vdom_inp$6,
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    Virtual_dom_Vdom = global_data.Virtual_dom__Vdom,
    Virtual_dom_Node = global_data.Virtual_dom__Node,
    Core_Int = global_data.Core__Int,
    Ppx_string_runtime = global_data.Ppx_string_runtime,
    Core_Option = global_data.Core__Option,
    Core_List = global_data.Core__List,
    Core_String = global_data.Core__String,
    Core = global_data.Core,
    Core_Time_ns = global_data.Core__Time_ns,
    Core_Float = global_data.Core__Float,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Core_Time_float = global_data.Core__Time_float,
    Core_Date = global_data.Core__Date,
    Virtual_dom_Effect = global_data.Virtual_dom__Effect,
    Core_Set = global_data.Core__Set,
    Assert_failure = global_data.Assert_failure,
    Js_of_ocaml_Dom_html = global_data.Js_of_ocaml__Dom_html,
    Core_Fn = global_data.Core__Fn,
    Js_of_ocaml_Dom = global_data.Js_of_ocaml__Dom,
    Css_gen = global_data.Css_gen,
    Base_Exn = global_data.Base__Exn,
    Bin_shape = global_data.Bin_shape,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Bin_prot_Read = global_data.Bin_prot__Read,
    Bin_prot_Common = global_data.Bin_prot__Common,
    Bin_prot_Write = global_data.Bin_prot__Write,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Sexplib0_Sexp_conv_record = global_data.Sexplib0__Sexp_conv_record,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Virtual_dom_Hooks = global_data.Virtual_dom__Hooks;
   caml_call1(Ppx_module_timer_runtime[4], cst_Vdom_input_widgets$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_vdom_input_widgets$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_input_widgets_src_vdom_inp$5);
   caml_call2
    (Ppx_inline_test_lib[6],
     cst_vdom_input_widgets$0,
     "vdom_input_widgets.ml");
   var
    Merge_behavior = [0],
    cst_file$0 = cst_file$1,
    cst_couldn_t_get_file = "couldn't get file ",
    cst_multiple$0 = cst_multiple$1,
    cst_file = cst_file$1,
    _V_ = [0, ","],
    cst_accept = "accept",
    cst_checked$1 = cst_checked$2,
    _T_ = [0, "radio-button", 0],
    cst_radio = "radio",
    _U_ = [0, "widget-radio-buttons", [0, "radio-button-container", 0]],
    cst_button$1 = cst_button$2,
    cst_button = cst_button$2,
    cst_top = "top",
    cst_tooltip_position = "tooltip-position",
    cst_tooltip = "tooltip",
    cst_button$0 = cst_button$2,
    cst_color = "color",
    cst_datetime_local = "datetime-local",
    _S_ = [0, 0],
    cst_date = "date",
    _R_ = [0, 0],
    cst_time = "time",
    _Q_ = [0, 0],
    cst_step$0 = cst_step$1,
    cst_range = "range",
    cst_step = cst_step$1,
    cst_number = "number",
    cst_password = "password",
    cst_value$2 = cst_value$3,
    cst_text$0 = cst_text$1,
    cst_text = cst_text$1,
    cst_value$1 = cst_value$3,
    cst_false = "false",
    cst_spellcheck = "spellcheck",
    _P_ = [0, cst$10],
    cst_selected$0 = cst_selected$1,
    _O_ = [0, cst_input_widgets_src_vdom_inp$5, 604, 57],
    cst_Multi_select_on_change_eve =
      "Multi_select [on_change] event fired with a missing target or target that was not a select element.",
    cst_size = "size",
    cst_multiple = cst_multiple$1,
    cst_checked$0 = cst_checked$2,
    cst_checkbox$0 = cst_checkbox$1,
    _N_ = [0, "widget-checklist", [0, cst_checkbox_container$0, 0]],
    cst_checkbox_container = cst_checkbox_container$0,
    cst_checked = cst_checked$2,
    cst_checkbox = cst_checkbox$1,
    cst_selected = cst_selected$1,
    cst_widget_dropdown = "widget-dropdown",
    cst_value_normalized = "value:normalized",
    _I_ = [0, 17960, 0],
    cst_none = cst_none$1,
    cst_list_style = "list-style",
    _H_ = [0, 84, [0, 58, 0]],
    cst_true = "true",
    cst_aria_invalid = "aria-invalid",
    cst_update$0 = cst_update$1,
    _A_ = [1, cst_input_widgets_src_vdom_inp$6],
    cst_input_widgets_src_vdom_inp$2 = cst_input_widgets_src_vdom_inp$6,
    cst_t$0 = cst_t$1,
    _c_ = [0, cst_Initial],
    _d_ = [0, cst_value$3],
    _e_ = [0, cst_input$3],
    _f_ = [0, cst_Valid$0],
    _g_ = [0, cst_error$1],
    _h_ = [0, cst_last_valid$1],
    _i_ = [0, cst_input$3],
    _j_ = [0, cst_Invalid$0],
    cst_value = cst_value$3,
    cst_input = cst_input$3,
    cst_error = cst_error$1,
    cst_last_valid = cst_last_valid$1,
    cst_input$0 = cst_input$3,
    _b_ = [0, [8, [0, 0, 3], 0, [0, 12], 0], "%.12g"],
    _a_ =
      [0,
       [11,
        "Cannot represent non-finite float as decimal: ",
        [8, [0, 0, 0], 0, 0, 0]],
       "Cannot represent non-finite float as decimal: %f"],
    cst_error$0 = cst_error$1,
    cst_a = cst_a$4,
    cst_input_widgets_src_vdom_inp =
      "input_widgets/src/vdom_input_widgets.ml:42:23",
    cst_last_valid$0 = cst_last_valid$1,
    cst_input$1 = cst_input$3,
    cst_Invalid = cst_Invalid$0,
    cst_a$0 = cst_a$4,
    cst_input_widgets_src_vdom_inp$0 =
      "input_widgets/src/vdom_input_widgets.ml:38:18",
    cst_value$0 = cst_value$3,
    cst_input$2 = cst_input$3,
    cst_Valid = cst_Valid$0,
    _u_ = [0, cst_Initial, 0],
    cst_a$1 = cst_a$4,
    cst_t = cst_t$1,
    cst_input_widgets_src_vdom_inp$1 =
      "input_widgets/src/vdom_input_widgets.ml:32:2",
    cst_a$2 = cst_a$4,
    cst_input_widgets_src_vdom_inp$3 =
      "input_widgets/src/vdom_input_widgets.ml:47:19",
    cst_a$3 = cst_a$4,
    cst_update = cst_update$1,
    cst_input_widgets_src_vdom_inp$4 =
      "input_widgets/src/vdom_input_widgets.ml:47:2",
    _K_ = [0, 17960, 0],
    cst_none$0 = cst_none$1,
    cst_appearance = "appearance",
    cst_vdom_input_widgets = cst_vdom_input_widgets$0,
    cst_Vdom_input_widgets = cst_Vdom_input_widgets$0;
   function invariant(t){
    var _ez_ = 1 - caml_call1(Core_Float[65], t);
    return _ez_ ? caml_call3(Core[246], _a_, t, 0) : _ez_;
   }
   function of_string(s){
    var t = caml_call1(Core_Float[124], s);
    invariant(t);
    return t;
   }
   function to_string(t){invariant(t); return caml_call2(Core[265], _b_, t);}
   function equal(cmp_a, a_001, b_002){
    if(a_001 === b_002) return 1;
    if(typeof a_001 === "number") return typeof b_002 === "number" ? 1 : 0;
    if(0 === a_001[0]){
     if(typeof b_002 !== "number"){
      if(0 !== b_002[0]) return 0;
      var
       _ep_ = b_002[1],
       _eq_ = a_001[1],
       _er_ =
         function(a_005, b_006){return caml_call2(Core[553], a_005, b_006);},
       _es_ = caml_call3(Core[511], _er_, _eq_, _ep_);
      return _es_ ? caml_call2(cmp_a, a_001[2], b_002[2]) : _es_;
     }
    }
    else if(typeof b_002 !== "number"){
     if(0 === b_002[0]) return 0;
     var _et_ = caml_call2(Core[553], a_001[1], b_002[1]);
     if(_et_){
      var
       _eu_ = b_002[2],
       _ev_ = a_001[2],
       _ew_ = function(a_009, b_010){return caml_call2(cmp_a, a_009, b_010);},
       _ex_ = caml_call3(Core[511], _ew_, _ev_, _eu_);
      if(_ex_) return caml_call2(Core[553], a_001[3], b_002[3]);
      var _ey_ = _ex_;
     }
     else
      var _ey_ = _et_;
     return _ey_;
    }
    return 0;
   }
   function update_of_sexp(of_a_011, sexp_016){
    a:
    {
     if(0 === sexp_016[0]){
      var _eb_ = sexp_016[1];
      b:
      if(caml_string_notequal(_eb_, cst_Initial)){
       c:
       if(caml_string_notequal(_eb_, cst_Invalid$0)){
        if(caml_string_notequal(_eb_, cst_Valid$0)){
         if(! caml_string_notequal(_eb_, cst_initial)) break b;
         if(! caml_string_notequal(_eb_, cst_invalid)) break c;
         if(caml_string_notequal(_eb_, cst_valid)) break a;
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[9], error_source_014, sexp_016);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[9], error_source_014, sexp_016);
      }
      return 0;
     }
     var _ec_ = sexp_016[1];
     if(! _ec_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_014, sexp_016);
     var _ed_ = _ec_[1];
     if(0 !== _ed_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_014, sexp_016);
     var _ee_ = _ed_[1];
     b:
     if(caml_string_notequal(_ee_, cst_Initial)){
      c:
      if(caml_string_notequal(_ee_, cst_Invalid$0)){
       if(caml_string_notequal(_ee_, cst_Valid$0)){
        if(! caml_string_notequal(_ee_, cst_initial)) break b;
        if(! caml_string_notequal(_ee_, cst_invalid)) break c;
        if(caml_string_notequal(_ee_, cst_valid)) break a;
       }
       var
        sexps_017 = _ec_[2],
        _ef_ =
          function(param){
           var value = param[2][1], input = param[1];
           return [0, input, value];
          },
        _eg_ = 0,
        _eh_ =
          function(param){
           return caml_string_notequal(param, cst_input$3)
                   ? caml_string_notequal(param, cst_value$3) ? -1 : 1
                   : 0;
          },
        _ei_ =
          [0,
           cst_input,
           1,
           caml_call1(Core[516], Core[559]),
           [0, cst_value, 1, of_a_011, 0]];
       return caml_call7
               (Sexplib0_Sexp_conv_record[4],
                error_source_014,
                sexp_016,
                _ei_,
                _eh_,
                _eg_,
                _ef_,
                sexps_017);
      }
      var
       sexps_019 = _ec_[2],
       _ej_ =
         function(param){
          var
           _eo_ = param[2],
           error = _eo_[2][1],
           last_valid = _eo_[1],
           input = param[1];
          return [1, input, last_valid, error];
         },
       _ek_ = 0,
       _el_ =
         function(param){
          return caml_string_notequal(param, cst_error$1)
                  ? caml_string_notequal
                     (param, cst_input$3)
                    ? caml_string_notequal(param, cst_last_valid$1) ? -1 : 1
                    : 0
                  : 2;
         },
       _em_ = [0, cst_error, 1, Core[559], 0],
       _en_ = [0, cst_last_valid, 1, caml_call1(Core[516], of_a_011), _em_];
      return caml_call7
              (Sexplib0_Sexp_conv_record[4],
               error_source_014,
               sexp_016,
               [0, cst_input$0, 1, Core[559], _en_],
               _el_,
               _ek_,
               _ej_,
               sexps_019);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[7], error_source_014, sexp_016);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_014, sexp_016);
   }
   function sexp_of_update(of_a_021, param){
    if(typeof param === "number") return _c_;
    if(0 === param[0]){
     var
      value_025 = param[2],
      input_023 = param[1],
      arg_026 = caml_call1(of_a_021, value_025),
      bnds_022 = [0, [1, [0, _d_, [0, arg_026, 0]]], 0],
      arg_024 = caml_call2(Core[515], Core[558], input_023),
      bnds_022$0 = [0, [1, [0, _e_, [0, arg_024, 0]]], bnds_022];
     return [1, [0, _f_, bnds_022$0]];
    }
    var
     error_032 = param[3],
     last_valid_030 = param[2],
     input_028 = param[1],
     arg_033 = caml_call1(Core[558], error_032),
     bnds_027 = [0, [1, [0, _g_, [0, arg_033, 0]]], 0],
     arg_031 = caml_call2(Core[515], of_a_021, last_valid_030),
     bnds_027$0 = [0, [1, [0, _h_, [0, arg_031, 0]]], bnds_027],
     arg_029 = caml_call1(Core[558], input_028),
     bnds_027$1 = [0, [1, [0, _i_, [0, arg_029, 0]]], bnds_027$0];
    return [1, [0, _j_, bnds_027$1]];
   }
   var
    _k_ = [0, [0, cst_error$0, Core[541]], 0],
    _l_ = caml_call1(Bin_shape[3][1], cst_a),
    _m_ = caml_call1(Bin_shape[4][1], cst_input_widgets_src_vdom_inp),
    _n_ = caml_call2(Bin_prot_Shape[11], _m_, _l_),
    _o_ = [0, [0, cst_last_valid$0, caml_call1(Core[499], _n_)], _k_],
    _p_ =
      [0,
       [0,
        cst_Invalid,
        [0,
         caml_call1(Bin_prot_Shape[4], [0, [0, cst_input$1, Core[541]], _o_]),
         0]],
       0],
    _q_ = caml_call1(Bin_shape[3][1], cst_a$0),
    _r_ = caml_call1(Bin_shape[4][1], cst_input_widgets_src_vdom_inp$0),
    _s_ = [0, [0, cst_value$0, caml_call2(Bin_prot_Shape[11], _r_, _q_)], 0],
    _t_ = [0, [0, cst_input$2, caml_call1(Core[499], Core[541])], _s_],
    _v_ =
      [0,
       _u_,
       [0, [0, cst_Valid, [0, caml_call1(Bin_prot_Shape[4], _t_), 0]], _p_]],
    _w_ = caml_call1(Bin_prot_Shape[5], _v_),
    _x_ = [0, caml_call1(Bin_shape[3][1], cst_a$1), 0],
    _y_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t), _x_, _w_], 0],
    _z_ = caml_call1(Bin_shape[4][1], cst_input_widgets_src_vdom_inp$1),
    group = caml_call2(Bin_prot_Shape[2], _z_, _y_);
   function bin_shape_t(a){
    var _ea_ = caml_call1(Bin_shape[2][1], cst_t$0);
    return caml_call1(caml_call2(Bin_prot_Shape[10], group, _ea_), [0, a, 0]);
   }
   function bin_size_t(size_of_a, param){
    if(typeof param === "number") return 1;
    if(0 === param[0]){
     var
      v2 = param[2],
      v1 = param[1],
      _d7_ = caml_call2(Core[500], Core[542], v1),
      size = caml_call2(Bin_prot_Common[23], 1, _d7_),
      _d8_ = caml_call1(size_of_a, v2);
     return caml_call2(Bin_prot_Common[23], size, _d8_);
    }
    var
     v3 = param[3],
     v2$0 = param[2],
     v1$0 = param[1],
     _d9_ = caml_call1(Core[542], v1$0),
     size$0 = caml_call2(Bin_prot_Common[23], 1, _d9_),
     _d__ = caml_call2(Core[500], size_of_a, v2$0),
     size$1 = caml_call2(Bin_prot_Common[23], size$0, _d__),
     _d$_ = caml_call1(Core[542], v3);
    return caml_call2(Bin_prot_Common[23], size$1, _d$_);
   }
   function bin_write_t(write_a, buf, pos, param){
    if(typeof param === "number")
     return caml_call3(Bin_prot_Write[30], buf, pos, 0);
    if(0 === param[0]){
     var
      v2 = param[2],
      v1 = param[1],
      pos$0 = caml_call3(Bin_prot_Write[30], buf, pos, 1),
      pos$1 = caml_call4(Core[502], Core[544], buf, pos$0, v1);
     return caml_call3(write_a, buf, pos$1, v2);
    }
    var
     v3 = param[3],
     v2$0 = param[2],
     v1$0 = param[1],
     pos$2 = caml_call3(Bin_prot_Write[30], buf, pos, 2),
     pos$3 = caml_call3(Core[544], buf, pos$2, v1$0),
     pos$4 = caml_call4(Core[502], write_a, buf, pos$3, v2$0);
    return caml_call3(Core[544], buf, pos$4, v3);
   }
   function bin_writer_t(bin_writer_a){
    function _d3_(v){
     var _d4_ = bin_writer_a[2];
     return function(_d5_, _d6_){return bin_write_t(_d4_, v, _d5_, _d6_);};
    }
    return [0, function(v){return bin_size_t(bin_writer_a[1], v);}, _d3_];
   }
   function bin_read_t(of_a, buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19],
             cst_input_widgets_src_vdom_inp$2,
             pos_ref[1]);
   }
   function bin_read_t$0(of_a, buf, pos_ref){
    var match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
    if(2 < match >>> 0)
     return caml_call2(Bin_prot_Common[18], _A_, pos_ref[1]);
    switch(match){
      case 0:
       return 0;
      case 1:
       var
        v_input = caml_call2(caml_call1(Core[505], Core[547]), buf, pos_ref),
        v_value = caml_call2(of_a, buf, pos_ref);
       return [0, v_input, v_value];
      default:
       var
        v_input$0 = caml_call2(Core[547], buf, pos_ref),
        v_last_valid = caml_call2(caml_call1(Core[505], of_a), buf, pos_ref),
        v_error = caml_call2(Core[547], buf, pos_ref);
       return [1, v_input$0, v_last_valid, v_error];
    }
   }
   function bin_reader_t(bin_reader_a){
    function _d2_(buf, pos_ref, vtag){
     return bin_read_t(bin_reader_a[1], buf, pos_ref, vtag);
    }
    return [0,
            function(buf, pos_ref){
             return bin_read_t$0(bin_reader_a[1], buf, pos_ref);
            },
            _d2_];
   }
   function bin_t(bin_a){
    var _d0_ = bin_reader_t(bin_a[3]), _d1_ = bin_writer_t(bin_a[2]);
    return [0, bin_shape_t(bin_a[1]), _d1_, _d0_];
   }
   function compare(cmp_a, a_035, b_036){
    if(a_035 === b_036) return 0;
    if(typeof a_035 === "number") return typeof b_036 === "number" ? 0 : -1;
    if(0 === a_035[0]){
     if(typeof b_036 !== "number"){
      if(0 !== b_036[0]) return -1;
      var
       _dU_ = b_036[1],
       _dV_ = a_035[1],
       _dW_ =
         function(a_039, b_040){return caml_call2(Core[551], a_039, b_040);},
       n = caml_call3(Core[509], _dW_, _dV_, _dU_);
      return 0 === n ? caml_call2(cmp_a, a_035[2], b_036[2]) : n;
     }
    }
    else if(typeof b_036 !== "number"){
     if(0 === b_036[0]) return 1;
     var n$0 = caml_call2(Core[551], a_035[1], b_036[1]);
     if(0 !== n$0) return n$0;
     var
      _dX_ = b_036[2],
      _dY_ = a_035[2],
      _dZ_ = function(a_043, b_044){return caml_call2(cmp_a, a_043, b_044);},
      n$1 = caml_call3(Core[509], _dZ_, _dY_, _dX_);
     return 0 === n$1 ? caml_call2(Core[551], a_035[3], b_036[3]) : n$1;
    }
    return 1;
   }
   function equal_update(cmp_a, a_045, b_046){
    return equal
            (function(a_047, b_048){return caml_call2(cmp_a, a_047, b_048);},
             a_045,
             b_046);
   }
   var
    _B_ = caml_call1(Bin_shape[3][1], cst_a$2),
    _C_ = caml_call1(Bin_shape[4][1], cst_input_widgets_src_vdom_inp$3),
    _D_ = bin_shape_t(caml_call2(Bin_prot_Shape[11], _C_, _B_)),
    _E_ = [0, caml_call1(Bin_shape[3][1], cst_a$3), 0],
    _F_ = [0, [0, caml_call1(Bin_shape[2][1], cst_update), _E_, _D_], 0],
    _G_ = caml_call1(Bin_shape[4][1], cst_input_widgets_src_vdom_inp$4),
    group$0 = caml_call2(Bin_prot_Shape[2], _G_, _F_);
   function bin_shape_update(a){
    var _dT_ = caml_call1(Bin_shape[2][1], cst_update$0);
    return caml_call1
            (caml_call2(Bin_prot_Shape[10], group$0, _dT_), [0, a, 0]);
   }
   function bin_size_update(size_of_a, v){return bin_size_t(size_of_a, v);}
   function bin_write_update(write_a, buf, pos, v){return bin_write_t(write_a, buf, pos, v);
   }
   function bin_writer_update(bin_writer_a){
    function _dP_(v){
     var _dQ_ = bin_writer_a[2];
     return function(_dR_, _dS_){
      return bin_write_update(_dQ_, v, _dR_, _dS_);};
    }
    return [0, function(v){return bin_size_update(bin_writer_a[1], v);}, _dP_];
   }
   function bin_read_update(of_a, buf, pos_ref, vint){return bin_read_t(of_a, buf, pos_ref, vint);
   }
   function bin_read_update$0(of_a, buf, pos_ref){return bin_read_t$0(of_a, buf, pos_ref);
   }
   function bin_reader_update(bin_reader_a){
    function _dO_(buf, pos_ref, vtag){
     return bin_read_update(bin_reader_a[1], buf, pos_ref, vtag);
    }
    return [0,
            function(buf, pos_ref){
             return bin_read_update$0(bin_reader_a[1], buf, pos_ref);
            },
            _dO_];
   }
   function bin_update(bin_a){
    var
     _dM_ = bin_reader_update(bin_a[3]),
     _dN_ = bin_writer_update(bin_a[2]);
    return [0, bin_shape_update(bin_a[1]), _dN_, _dM_];
   }
   function compare_update(cmp_a, a_054, b_055){
    return compare
            (function(a_056, b_057){return caml_call2(cmp_a, a_056, b_057);},
             a_054,
             b_055);
   }
   function lift(M){
    function to_string(param){
     if(typeof param === "number") return cst;
     if(0 !== param[0]){var input$1 = param[1]; return input$1;}
     var value = param[2], input = param[1];
     if(! input) return caml_call1(M[2], value);
     var input$0 = input[1];
     return input$0;
    }
    function of_string(s){
     try{var _dL_ = [0, [0, s], caml_call1(M[1], s)]; return _dL_;}
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      return [1, s, 0, caml_call1(Base_Exn[10], exn)];
     }
    }
    return [0, of_string, to_string];
   }
   var initial_empty = 0;
   function return$0(value){return [0, 0, value];}
   function get_current(param){
    if(typeof param !== "number" && 0 === param[0]){var value = param[2]; return [0, value];}
    return 0;
   }
   function get_last(param){
    if(typeof param === "number") return 0;
    if(0 === param[0]){var value = param[2]; return [0, value];}
    var last_valid = param[2];
    return last_valid;
   }
   function get_error(param){
    if(typeof param !== "number" && 1 === param[0]){var error = param[3]; return [0, error];}
    return 0;
   }
   function is_initial_empty(param){return typeof param === "number" ? 1 : 0;}
   function update(old, new$0){
    if(typeof old === "number") return new$0;
    if(0 === old[0]){
     var old$0 = old[2];
     if(typeof new$0 !== "number" && 0 !== new$0[0]){
      var error = new$0[3], input = new$0[1];
      return [1, input, [0, old$0], error];
     }
    }
    else{
     var last_valid = old[2];
     if(typeof new$0 !== "number" && 0 !== new$0[0]){
      var input$0 = new$0[1];
      if(new$0[2]) return new$0;
      var error$0 = new$0[3];
      return [1, input$0, last_valid, error$0];
     }
    }
    return typeof new$0 === "number" ? old : new$0;
   }
   var
    of_string$0 = Core_Time_ns[2][56],
    to_string$0 = Core_Time_ns[2][76],
    Ofday = [0, of_string$0, to_string$0];
   function maybe_disabled(disabled, attrs){
    return disabled ? [0, Virtual_dom_Vdom[1][19], attrs] : attrs;
   }
   function add_attrs(attrs$0, attrs){
    var _dK_ = caml_call2(Core[156], attrs, attrs$0);
    return [0, caml_call1(Virtual_dom_Vdom[1][9], _dK_), 0];
   }
   function merge(param){
    return param ? Virtual_dom_Vdom[1][10] : Virtual_dom_Vdom[1][9];
   }
   function structural_list(opt, _dB_, attrs, children){
    if(opt)
     var sth = opt[1], orientation = sth;
    else
     var orientation = -1010337642;
    if(_dB_)
     var sth$0 = _dB_[1], merge_behavior = sth$0;
    else
     var merge_behavior = 0;
    var
     layout_style =
       208994564 <= orientation
        ? caml_call1(Css_gen[36], -266363961)
        : caml_call1(Css_gen[36], -936778451);
    function _dC_(child){
     var
      _dJ_ = [0, [0, caml_call1(Virtual_dom_Vdom[1][32], layout_style), 0]];
     return caml_call3(Virtual_dom_Node[38], 0, _dJ_, [0, child, 0]);
    }
    var
     _dD_ = caml_call2(Core_List[51], children, _dC_),
     _dE_ = caml_call1(Css_gen[77], _I_),
     _dF_ = caml_call2(Css_gen[21], cst_list_style, cst_none),
     _dG_ = caml_call2(Css_gen[30], _dF_, _dE_),
     _dH_ =
       add_attrs(attrs, [0, caml_call1(Virtual_dom_Vdom[1][32], _dG_), 0]),
     _dI_ = [0, [0, caml_call1(merge(merge_behavior), _dH_), 0]];
    return caml_call3(Virtual_dom_Node[54], 0, _dI_, _dD_);
   }
   var State = [0];
   function sexp_of_t(param){var value = param[1]; return [0, value];}
   function combine(left, right){return right;}
   var Input = [0, sexp_of_t, combine];
   function init(param, element){
    var allow_updates_when_focused = param[3], f = param[2], value = param[1];
    if(744337004 <= allow_updates_when_focused)
     var
      document_active_element = Js_of_ocaml_Dom_html[2].activeElement,
      should_set = 1 - (element === document_active_element ? 1 : 0);
    else
     var should_set = 1;
    if(should_set) element.value = caml_jsstring_of_string(value);
    function change_handler(param){
     var value = runtime.caml_string_of_jsstring(element.value);
     function _dz_(normalized){
      return element.value = caml_jsstring_of_string(normalized);
     }
     var _dA_ = caml_call1(f, value);
     caml_call2(Core_Option[46], _dA_, _dz_);
     return Js_of_ocaml_Js[7];
    }
    var
     change_handler$0 = caml_call1(Js_of_ocaml_Dom[10], change_handler),
     event_id =
       caml_call4
        (Js_of_ocaml_Dom_html[17],
         element,
         Js_of_ocaml_Dom_html[15][29],
         change_handler$0,
         Js_of_ocaml_Js[8]);
    return [0, event_id];
   }
   var on_mount = 327963705;
   function destroy(input, state){
    var event_id = state[1];
    return function(element){
     return caml_call1(Js_of_ocaml_Dom_html[18], event_id);};
   }
   function update$0(old_input, new_input, state, element){
    destroy(old_input, state)(element);
    var event_id = init(new_input, element)[1];
    state[1] = event_id;
    return 0;
   }
   var
    include =
      caml_call1
       (Virtual_dom_Hooks[3],
        [0, State, Input, init, on_mount, update$0, destroy]),
    _J_ = include[1];
   function create(value, f, allow_updates_when_focused){
    var _dy_ = caml_call1(_J_, [0, value, f, allow_updates_when_focused]);
    return caml_call2(Virtual_dom_Vdom[1][7], cst_value_normalized, _dy_);
   }
   function impl
   (opt, _dg_, _df_, _de_, key, values, equal, selected, to_string, on_change){
    if(opt) var sth = opt[1], extra_attrs = sth; else var extra_attrs = 0;
    if(_dg_)
     var sth$0 = _dg_[1], extra_option_attrs = sth$0;
    else
     var extra_option_attrs = caml_call1(Core_Fn[1], 0);
    if(_df_) var sth$1 = _df_[1], disabled = sth$1; else var disabled = 0;
    if(_de_)
     var sth$2 = _de_[1], merge_behavior = sth$2;
    else
     var merge_behavior = 0;
    function _dh_(index, value){
     var
      _dq_ = caml_call1(to_string, value),
      _dr_ = [0, caml_call1(Virtual_dom_Node[6], _dq_), 0],
      _ds_ = caml_call1(extra_option_attrs, value),
      _dt_ = caml_call2(equal, value, selected),
      _du_ = [0, caml_call2(Virtual_dom_Vdom[1][4], cst_selected, _dt_), 0],
      _dv_ = caml_call1(Core_Int[79], index),
      _dw_ = [0, caml_call1(Virtual_dom_Vdom[1][44], _dv_), _du_],
      _dx_ = [0, caml_call2(Core[156], _dw_, _ds_)];
     return caml_call3(Virtual_dom_Node[36], 0, _dx_, _dr_);
    }
    var _di_ = caml_call2(Core_List[41], values, _dh_), _dj_ = 0, _dk_ = 0;
    function _dl_(param, value){
     var _dp_ = caml_call1(Core_Int[78], value);
     return caml_call1(on_change, caml_call2(Core_List[58], values, _dp_));
    }
    var
     _dm_ = [0, caml_call1(Virtual_dom_Vdom[1][58], _dl_), _dk_],
     _dn_ =
       add_attrs
        (extra_attrs,
         maybe_disabled
          (disabled,
           [0, caml_call1(Virtual_dom_Vdom[1][16], cst_widget_dropdown), _dm_])),
     _do_ = [0, [0, caml_call1(merge(merge_behavior), _dn_), _dj_]];
    return caml_call3(Virtual_dom_Node[33], key, _do_, _di_);
   }
   function of_values
   (extra_attrs,
    extra_option_attrs,
    disabled,
    opt,
    key,
    M,
    values,
    selected,
    on_change){
    if(opt)
     var sth = opt[1], merge_behavior = sth;
    else
     var merge_behavior = 0;
    return impl
            (extra_attrs,
             extra_option_attrs,
             disabled,
             [0, merge_behavior],
             key,
             values,
             M[1],
             selected,
             M[2],
             on_change);
   }
   function of_values_opt
   (extra_attrs,
    extra_option_attrs,
    disabled,
    opt,
    _c__,
    key,
    M,
    values,
    selected,
    on_change){
    if(opt)
     var sth = opt[1], merge_behavior = sth;
    else
     var merge_behavior = 0;
    if(_c__)
     var sth$0 = _c__[1], placeholder = sth$0;
    else
     var placeholder = cst$0;
    var
     values$0 = [0, 0, caml_call2(Core_List[51], values, Core_Option[58])],
     _c$_ = Core_Option[41],
     _da_ = M[2];
    function to_string(_dd_){
     return caml_call3(_c$_, _dd_, placeholder, _da_);
    }
    function _db_(f, param){
     if(! param) return 0;
     var value = param[1];
     return caml_call1(f, value);
    }
    var
     extra_option_attrs$0 =
       caml_call2(Core_Option[34], extra_option_attrs, _db_);
    return impl
            (extra_attrs,
             extra_option_attrs$0,
             disabled,
             [0, merge_behavior],
             key,
             values$0,
             function(a_058, b_059){
              function _dc_(a_060, b_061){
               return caml_call2(M[1], a_060, b_061);
              }
              return caml_call3(Core[511], _dc_, a_058, b_059);
             },
             selected,
             to_string,
             on_change);
   }
   function of_enum
   (extra_attrs,
    extra_option_attrs,
    disabled,
    opt,
    key,
    M,
    selected,
    on_change){
    if(opt)
     var sth = opt[1], merge_behavior = sth;
    else
     var merge_behavior = 0;
    return impl
            (extra_attrs,
             extra_option_attrs,
             disabled,
             [0, merge_behavior],
             key,
             M[2],
             M[1],
             selected,
             M[3],
             on_change);
   }
   function of_enum_opt
   (extra_attrs,
    extra_option_attrs,
    disabled,
    opt,
    _c4_,
    key,
    M,
    selected,
    on_change){
    if(opt)
     var sth = opt[1], merge_behavior = sth;
    else
     var merge_behavior = 0;
    if(_c4_)
     var sth$0 = _c4_[1], placeholder = sth$0;
    else
     var placeholder = cst$1;
    var
     values = [0, 0, caml_call2(Core_List[51], M[2], Core_Option[58])],
     _c5_ = Core_Option[41],
     _c6_ = M[3];
    function to_string(_c9_){
     return caml_call3(_c5_, _c9_, placeholder, _c6_);
    }
    function _c7_(f, param){
     if(! param) return 0;
     var value = param[1];
     return caml_call1(f, value);
    }
    var
     extra_option_attrs$0 =
       caml_call2(Core_Option[34], extra_option_attrs, _c7_);
    return impl
            (extra_attrs,
             extra_option_attrs$0,
             disabled,
             [0, merge_behavior],
             key,
             values,
             function(a_062, b_063){
              function _c8_(a_064, b_065){
               return caml_call2(M[1], a_064, b_065);
              }
              return caml_call3(Core[511], _c8_, a_062, b_063);
             },
             selected,
             to_string,
             on_change);
   }
   var
    _L_ = caml_call1(Css_gen[79], _K_),
    _M_ = caml_call2(Css_gen[21], cst_appearance, cst_none$0),
    hide_native_inputs = caml_call2(Css_gen[30], _M_, _L_);
   function simple
   (extra_attrs$0, disabled$0, opt, key, is_checked, label, on_toggle, param){
    if(opt)
     var sth$1 = opt[1], merge_behavior = sth$1;
    else
     var merge_behavior = 0;
    var _c1_ = 0, key$0 = 0;
    if(extra_attrs$0)
     var sth = extra_attrs$0[1], extra_attrs = sth;
    else
     var extra_attrs = 0;
    if(disabled$0)
     var sth$0 = disabled$0[1], disabled = sth$0;
    else
     var disabled = 0;
    var
     _cT_ = [0, caml_call1(Virtual_dom_Node[6], label), 0],
     _cU_ = 0,
     _cV_ =
       [0, caml_call2(Virtual_dom_Vdom[1][4], cst_checked, is_checked), 0];
    function _cW_(ev){return on_toggle;}
    var
     _cX_ = [0, caml_call1(Virtual_dom_Vdom[1][61], _cW_), _cV_],
     _cY_ =
       [0,
        maybe_disabled
         (disabled,
          [0, caml_call1(Virtual_dom_Vdom[1][43], cst_checkbox), _cX_])],
     _cZ_ = [0, caml_call3(Virtual_dom_Node[30], 0, _cY_, _cU_), _cT_],
     _c0_ = [0, [0, caml_call1(merge(merge_behavior), extra_attrs), 0]],
     _c2_ = [0, caml_call3(Virtual_dom_Node[37], key$0, _c0_, _cZ_), _c1_],
     _c3_ =
       [0,
        [0, caml_call1(Virtual_dom_Vdom[1][16], cst_checkbox_container), 0]];
    return caml_call3(Virtual_dom_Node[17], key, _c3_, _c2_);
   }
   function impl$0
   (opt,
    _cE_,
    _cD_,
    _cC_,
    layout,
    values,
    is_checked,
    on_toggle,
    to_string,
    merge_behavior){
    if(opt) var sth = opt[1], style = sth; else var style = 0;
    if(_cE_)
     var sth$0 = _cE_[1], extra_container_attrs = sth$0;
    else
     var extra_container_attrs = 0;
    if(_cD_)
     var sth$1 = _cD_[1], extra_checkbox_attrs = sth$1;
    else
     var extra_checkbox_attrs = function(param){return 0;};
    if(_cC_) var sth$2 = _cC_[1], disabled = sth$2; else var disabled = 0;
    var
     input_attrs =
       style
        ? [0, caml_call1(Virtual_dom_Vdom[1][32], hide_native_inputs), 0]
        : 0;
    function _cF_(item){
     var
      _cH_ = caml_call1(to_string, item),
      _cI_ = [0, caml_call1(Virtual_dom_Node[6], _cH_), 0],
      _cK_ = caml_call1(is_checked, item),
      _cJ_ = 0,
      _cL_ = [0, caml_call2(Virtual_dom_Vdom[1][4], cst_checked$0, _cK_), 0];
     function _cM_(ev){return caml_call1(on_toggle, item);}
     var
      _cN_ = [0, caml_call1(Virtual_dom_Vdom[1][61], _cM_), _cL_],
      _cO_ = [0, caml_call1(Virtual_dom_Vdom[1][43], cst_checkbox$0), _cN_],
      _cP_ =
        [0,
         maybe_disabled(disabled, caml_call2(Core[156], _cO_, input_attrs))],
      _cQ_ = [0, caml_call3(Virtual_dom_Node[30], 0, _cP_, _cJ_), _cI_],
      _cR_ = caml_call1(extra_checkbox_attrs, caml_call1(is_checked, item)),
      _cS_ = [0, [0, caml_call1(merge(merge_behavior), _cR_), 0]];
     return caml_call3(Virtual_dom_Node[37], 0, _cS_, _cQ_);
    }
    var _cG_ = caml_call2(Core_List[51], values, _cF_);
    return structural_list
            (layout,
             [0, merge_behavior],
             add_attrs
              (extra_container_attrs,
               [0, caml_call1(Virtual_dom_Vdom[1][17], _N_), 0]),
             _cG_);
   }
   function of_values$0
   (style,
    extra_container_attrs,
    extra_checkbox_attrs,
    disabled,
    layout,
    opt,
    M,
    values,
    is_checked,
    on_toggle){
    if(opt)
     var sth = opt[1], merge_behavior = sth;
    else
     var merge_behavior = 0;
    return impl$0
            (style,
             extra_container_attrs,
             extra_checkbox_attrs,
             disabled,
             layout,
             values,
             is_checked,
             on_toggle,
             M[1],
             merge_behavior);
   }
   function of_enum$0
   (style,
    extra_container_attrs,
    extra_checkbox_attrs,
    disabled,
    opt,
    M,
    is_checked,
    on_toggle){
    if(opt)
     var sth = opt[1], merge_behavior = sth;
    else
     var merge_behavior = 0;
    return impl$0
            (style,
             extra_container_attrs,
             extra_checkbox_attrs,
             disabled,
             0,
             M[2],
             is_checked,
             on_toggle,
             M[3],
             merge_behavior);
   }
   var Repeated_click_behavior = [0];
   function impl$1
   (opt, _cd_, _cc_, size, M, values, selected, on_change, merge_behavior){
    if(opt)
     var sth = opt[1], repeated_click_behavior = sth;
    else
     var repeated_click_behavior = 0;
    if(_cd_)
     var sth$0 = _cd_[1], extra_attrs = sth$0;
    else
     var extra_attrs = 0;
    if(_cc_) var sth$1 = _cc_[1], disabled = sth$1; else var disabled = 0;
    var
     _ce_ = caml_call1(Core_List[45], values),
     size$0 = caml_call2(Core_Option[39], size, _ce_),
     _cf_ = 0;
    function _cg_(evt, param){
     var
      _cw_ =
        caml_call2
         (Js_of_ocaml_Js[5][4], evt.target, Js_of_ocaml_Dom_html[117][50]),
      match = caml_call1(Js_of_ocaml_Js[5][10], _cw_);
     if(match)
      var target = match[1], target$0 = target;
     else
      var target$0 = caml_call1(Core[6], cst_Multi_select_on_change_eve);
     var collection = target$0.options;
     function _cx_(i){
      function _cA_(param){
       throw caml_maybe_attach_backtrace([0, Assert_failure, _O_], 1);
      }
      var _cB_ = collection.item(i);
      return caml_call2(Js_of_ocaml_Js[5][8], _cB_, _cA_);
     }
     var options = caml_call2(Core_List[40], collection.length, _cx_);
     function _cy_(param){
      var option = param[2], value = param[1];
      return caml_call2(Core_Option[60], option.selected | 0, value);
     }
     var
      _cz_ = caml_call2(Core_List[106], values, options),
      selected_values = caml_call2(Core_List[13], _cz_, _cy_);
     return caml_call1
             (on_change, caml_call2(Core_Set[34], [0, M[1]], selected_values));
    }
    var
     _ch_ = [0, caml_call1(Virtual_dom_Vdom[1][58], _cg_), _cf_],
     _ci_ = caml_call1(Core_Int[79], size$0),
     _cj_ = [0, caml_call2(Virtual_dom_Vdom[1][1], cst_size, _ci_), _ch_],
     _ck_ = [0, caml_call2(Virtual_dom_Vdom[1][1], cst_multiple, cst$2), _cj_],
     attrs =
       maybe_disabled(disabled, caml_call2(Core[156], _ck_, extra_attrs));
    function _cl_(value){
     var
      is_selected = caml_call2(Core_Set[11], selected, value),
      _cn_ = caml_call1(M[2], value),
      _co_ = [0, caml_call1(Virtual_dom_Node[6], _cn_), 0],
      _cp_ = 0;
     function _cq_(evt){
      var _cu_ = 1 - (evt.ctrlKey | 0);
      if(_cu_)
       var
        _cv_ = caml_call2(Core_Set[8], [0, M[1]], value),
        was_repeated_click = caml_call2(Core_Set[21], selected, _cv_);
      else
       var was_repeated_click = _cu_;
      if(was_repeated_click)
       switch(repeated_click_behavior){
         case 1:
          return caml_call1(on_change, caml_call1(Core_Set[7], [0, M[1]]));
         case 2:
          return caml_call1
                  (on_change, caml_call2(Core_Set[34], [0, M[1]], values));
       }
      return Virtual_dom_Effect[1];
     }
     var
      _cr_ = [0, [0, caml_call1(Virtual_dom_Vdom[1][61], _cq_)], _cp_],
      _cs_ =
        [0,
         [0, caml_call2(Virtual_dom_Vdom[1][4], cst_selected$0, is_selected)],
         _cr_],
      _ct_ = [0, caml_call1(Core_List[132], _cs_)];
     return caml_call3(Virtual_dom_Node[36], 0, _ct_, _co_);
    }
    var
     options = caml_call2(Core_List[51], values, _cl_),
     _cm_ = [0, [0, caml_call1(merge(merge_behavior), attrs), 0]];
    return caml_call3(Virtual_dom_Node[33], 0, _cm_, options);
   }
   function of_values$1
   (extra_attrs,
    repeated_click_behavior,
    disabled,
    size,
    opt,
    M,
    values,
    selected,
    on_change){
    if(opt)
     var sth = opt[1], merge_behavior = sth;
    else
     var merge_behavior = 1;
    return impl$1
            (repeated_click_behavior,
             extra_attrs,
             disabled,
             size,
             M,
             values,
             selected,
             on_change,
             merge_behavior);
   }
   function of_enum$1
   (extra_attrs,
    repeated_click_behavior,
    disabled,
    size,
    opt,
    M,
    selected,
    on_change){
    if(opt)
     var sth = opt[1], merge_behavior = sth;
    else
     var merge_behavior = 0;
    return impl$1
            (repeated_click_behavior,
             extra_attrs,
             disabled,
             size,
             [0, M[1], M[4]],
             M[3],
             selected,
             on_change,
             merge_behavior);
   }
   function listener(param){
    return param ? Virtual_dom_Vdom[1][58] : Virtual_dom_Vdom[1][57];
   }
   function normalize(M, s){
    try{var _ca_ = caml_call1(M[1], s), v = caml_call1(M[2], _ca_);}
    catch(_cb_){return _P_;}
    return [0, v];
   }
   function maybe_on_return(on_return, attrs){
    if(! on_return) return attrs;
    var on_return$0 = on_return[1];
    function _b$_(ev){
     return caml_call2(Core[90], ev.keyCode, 13)
             ? caml_call1(on_return$0, 0)
             : Virtual_dom_Effect[1];
    }
    return [0, caml_call1(Virtual_dom_Vdom[1][81], _b$_), attrs];
   }
   function input_node(opt, _b7_, _b6_, _b5_, key, attrs){
    if(opt) var sth = opt[1], extra_attrs = sth; else var extra_attrs = 0;
    if(_b7_) var sth$0 = _b7_[1], disabled = sth$0; else var disabled = 0;
    if(_b6_)
     var sth$1 = _b6_[1], placeholder = sth$1;
    else
     var placeholder = cst$3;
    if(_b5_)
     var sth$2 = _b5_[1], merge_behavior = sth$2;
    else
     var merge_behavior = 0;
    var
     _b8_ =
       [0, caml_call2(Virtual_dom_Vdom[1][1], cst_spellcheck, cst_false), 0],
     _b9_ =
       add_attrs
        (extra_attrs,
         maybe_disabled
          (disabled,
           add_attrs
            ([0, caml_call1(Virtual_dom_Vdom[1][27], placeholder), _b8_],
             attrs))),
     _b__ = [0, [0, caml_call1(merge(merge_behavior), _b9_), 0]];
    return caml_call3(Virtual_dom_Node[30], key, _b__, 0);
   }
   function raw
   (extra_attrs,
    disabled,
    placeholder,
    on_return,
    opt,
    key,
    value,
    on_input,
    param){
    if(opt)
     var sth = opt[1], merge_behavior = sth;
    else
     var merge_behavior = 0;
    var _b2_ = 0;
    function _b3_(ev){return on_input;}
    var _b4_ = [0, caml_call1(Virtual_dom_Vdom[1][57], _b3_), _b2_];
    return input_node
            (extra_attrs,
             disabled,
             placeholder,
             [0, merge_behavior],
             key,
             maybe_on_return
              (on_return,
               [0,
                caml_call2(Virtual_dom_Vdom[1][3], cst_value$1, value),
                _b4_]));
   }
   function stringable_input_opt
   (extra_attrs,
    opt,
    disabled,
    placeholder,
    _bX_,
    _bW_,
    key,
    M,
    type_attrs,
    value,
    on_input,
    allow_updates_when_focused){
    if(opt)
     var sth = opt[1], call_on_input_when = sth;
    else
     var call_on_input_when = 0;
    if(_bX_)
     var sth$0 = _bX_[1], should_normalize = sth$0;
    else
     var should_normalize = 1;
    if(_bW_)
     var sth$1 = _bW_[1], merge_behavior = sth$1;
    else
     var merge_behavior = 0;
    var
     value$0 = caml_call3(Core_Option[41], value, cst$4, M[2]),
     value$1 =
       should_normalize
        ? create
          (value$0,
           function(_b1_){return normalize(M, _b1_);},
           allow_updates_when_focused)
        : create
          (value$0, caml_call1(Core[242], 0), allow_updates_when_focused),
     _bY_ = [0, value$1, 0];
    function _bZ_(ev, s){
     if(! caml_string_notequal(s, cst$10)) return caml_call1(on_input, 0);
     function _b0_(param){return caml_call1(M[1], s);}
     return caml_call1(on_input, caml_call1(Core_Option[56], _b0_));
    }
    return input_node
            (extra_attrs,
             disabled,
             placeholder,
             [0, merge_behavior],
             key,
             add_attrs
              (type_attrs,
               [0, caml_call1(listener(call_on_input_when), _bZ_), _bY_]));
   }
   function of_stringable
   (extra_attrs,
    call_on_input_when,
    disabled,
    placeholder,
    opt,
    key,
    M,
    value,
    on_input,
    allow_updates_when_focused){
    if(opt)
     var sth = opt[1], merge_behavior = sth;
    else
     var merge_behavior = 0;
    return stringable_input_opt
            (extra_attrs,
             call_on_input_when,
             disabled,
             placeholder,
             0,
             [0, merge_behavior],
             key,
             M,
             [0, caml_call1(Virtual_dom_Vdom[1][43], cst_text), 0],
             value,
             on_input,
             allow_updates_when_focused);
   }
   function validated
   (extra_attrs,
    opt,
    disabled,
    placeholder,
    on_return,
    _bQ_,
    key,
    M,
    validated,
    on_input,
    allow_updates_when_focused){
    if(opt)
     var sth = opt[1], call_on_input_when = sth;
    else
     var call_on_input_when = 0;
    if(_bQ_)
     var sth$0 = _bQ_[1], merge_behavior = sth$0;
    else
     var merge_behavior = 0;
    var V = lift(M);
    if(typeof validated === "number")
     var value_attr = caml_call2(Virtual_dom_Vdom[1][3], cst_value$2, cst$5);
    else
     var
      _bU_ = function(_bV_){return normalize(V, _bV_);},
      value_attr =
        create(caml_call1(V[2], validated), _bU_, allow_updates_when_focused);
    var
     _bR_ =
       [0,
        value_attr,
        [0, caml_call1(Virtual_dom_Vdom[1][43], cst_text$0), 0]];
    function _bS_(ev, s){return caml_call1(on_input, caml_call1(V[1], s));}
    var
     attrs =
       maybe_on_return
        (on_return, [0, caml_call1(listener(call_on_input_when), _bS_), _bR_]);
    a:
    {
     if(typeof validated !== "number" && 1 === validated[0]){var _bP_ = 1; break a;}
     var _bP_ = 0;
    }
    var
     _bT_ =
       _bP_
        ? [0,
          caml_call2(Virtual_dom_Vdom[1][1], cst_aria_invalid, cst_true),
          attrs]
        : attrs;
    return input_node
            (extra_attrs,
             disabled,
             placeholder,
             [0, merge_behavior],
             key,
             _bT_);
   }
   function text
   (extra_attrs,
    call_on_input_when,
    disabled,
    placeholder,
    opt,
    key,
    value,
    on_input,
    allow_updates_when_focused,
    param){
    if(opt)
     var sth = opt[1], merge_behavior = sth;
    else
     var merge_behavior = 0;
    return of_stringable
            (extra_attrs,
             call_on_input_when,
             disabled,
             placeholder,
             [0, merge_behavior],
             key,
             [0, Core_String[136], Core_String[137]],
             value,
             on_input,
             allow_updates_when_focused);
   }
   function password
   (extra_attrs,
    call_on_input_when,
    disabled,
    placeholder,
    opt,
    key,
    allow_updates_when_focused,
    value,
    on_input,
    param){
    if(opt)
     var sth = opt[1], merge_behavior = sth;
    else
     var merge_behavior = 0;
    var _bO_ = [0, caml_call1(Virtual_dom_Vdom[1][43], cst_password), 0];
    return stringable_input_opt
            (extra_attrs,
             call_on_input_when,
             disabled,
             placeholder,
             0,
             [0, merge_behavior],
             key,
             [0, Core_String[136], Core_String[137]],
             _bO_,
             value,
             on_input,
             allow_updates_when_focused);
   }
   function number
   (extra_attrs,
    call_on_input_when,
    disabled,
    placeholder,
    opt,
    key,
    M,
    value,
    step,
    on_input){
    if(opt)
     var sth = opt[1], merge_behavior = sth;
    else
     var merge_behavior = 0;
    var
     _bJ_ = [0, caml_call2(Virtual_dom_Vdom[1][2], cst_step, step), 0],
     _bK_ = [0, caml_call1(Virtual_dom_Vdom[1][43], cst_number), _bJ_],
     _bL_ = [0, merge_behavior],
     _bM_ = 0;
    return function(_bN_){
     return stringable_input_opt
             (extra_attrs,
              call_on_input_when,
              disabled,
              placeholder,
              _bM_,
              _bL_,
              key,
              M,
              _bK_,
              value,
              on_input,
              _bN_);};
   }
   function range
   (extra_attrs,
    call_on_input_when,
    disabled,
    placeholder,
    opt,
    key,
    M,
    value,
    step,
    on_input){
    if(opt)
     var sth = opt[1], merge_behavior = sth;
    else
     var merge_behavior = 0;
    var
     _bE_ = [0, caml_call2(Virtual_dom_Vdom[1][2], cst_step$0, step), 0],
     _bF_ = [0, caml_call1(Virtual_dom_Vdom[1][43], cst_range), _bE_],
     _bG_ = [0, merge_behavior],
     _bH_ = 0;
    return function(_bI_){
     return stringable_input_opt
             (extra_attrs,
              call_on_input_when,
              disabled,
              placeholder,
              _bH_,
              _bG_,
              key,
              M,
              _bF_,
              value,
              on_input,
              _bI_);};
   }
   function time
   (extra_attrs,
    call_on_input_when,
    disabled,
    placeholder,
    opt,
    key,
    value,
    on_input,
    allow_updates_when_focused,
    param){
    if(opt)
     var sth = opt[1], merge_behavior = sth;
    else
     var merge_behavior = 0;
    return stringable_input_opt
            (extra_attrs,
             call_on_input_when,
             disabled,
             placeholder,
             _Q_,
             [0, merge_behavior],
             key,
             Ofday,
             [0, caml_call1(Virtual_dom_Vdom[1][43], cst_time), 0],
             value,
             on_input,
             allow_updates_when_focused);
   }
   function date
   (extra_attrs,
    call_on_input_when,
    disabled,
    placeholder,
    opt,
    key,
    value,
    on_input,
    allow_updates_when_focused,
    param){
    if(opt)
     var sth = opt[1], merge_behavior = sth;
    else
     var merge_behavior = 0;
    var _bD_ = [0, caml_call1(Virtual_dom_Vdom[1][43], cst_date), 0];
    return stringable_input_opt
            (extra_attrs,
             call_on_input_when,
             disabled,
             placeholder,
             _R_,
             [0, merge_behavior],
             key,
             [0, Core_Date[22], Core_Date[23]],
             _bD_,
             value,
             on_input,
             allow_updates_when_focused);
   }
   function datetime_local
   (extra_attrs,
    call_on_input_when,
    disabled,
    placeholder,
    utc_offset,
    opt,
    key,
    value,
    on_input,
    allow_updates_when_focused,
    param){
    if(opt)
     var sth = opt[1], merge_behavior = sth;
    else
     var merge_behavior = 0;
    var _bv_ = Core[628], _bw_ = _bv_ || Ppx_inline_test_lib[1];
    if(_bw_)
     var hours = 0;
    else
     var
      _bx_ =
        function(utc_offset){
         var _bC_ = caml_call1(Core_Time_ns[1][91], utc_offset);
         return caml_call1(Core_Float[34], _bC_);
        },
      _by_ = (new Js_of_ocaml_Js[26]).getTimezoneOffset() / -60 | 0,
      hours = caml_call3(Core_Option[41], utc_offset, _by_, _bx_);
    var zone = caml_call1(Core_Time_float[85][5], hours);
    function of_string(s){
     var
      parts = caml_call2(Core_String[79], s, _H_),
      _bz_ = caml_call2(Core_List[58], parts, 0),
      date = caml_call1(Core_Date[22], _bz_),
      _bA_ = caml_call2(Core_List[58], parts, 1),
      hr = caml_call1(Core_Int[78], _bA_),
      _bB_ = caml_call2(Core_List[58], parts, 2),
      min = caml_call1(Core_Int[78], _bB_),
      ofday =
        caml_call7(Core_Time_ns[2][58], [0, hr], [0, min], 0, 0, 0, 0, 0);
     return caml_call3(Core_Time_ns[34], zone, date, ofday);
    }
    function to_string(t){
     var s = caml_call2(Core_Time_ns[53], t, zone);
     return caml_call2(Core_String[74], s, 46)[1];
    }
    var Zoned_time = [0, of_string, to_string];
    return stringable_input_opt
            (extra_attrs,
             call_on_input_when,
             disabled,
             placeholder,
             _S_,
             [0, merge_behavior],
             key,
             Zoned_time,
             [0, caml_call1(Virtual_dom_Vdom[1][43], cst_datetime_local), 0],
             value,
             on_input,
             allow_updates_when_focused);
   }
   function text_area
   (opt,
    _bn_,
    _bm_,
    _bl_,
    _bk_,
    key,
    value,
    on_input,
    allow_updates_when_focused,
    param){
    if(opt) var sth = opt[1], extra_attrs = sth; else var extra_attrs = 0;
    if(_bn_)
     var sth$0 = _bn_[1], call_on_input_when = sth$0;
    else
     var call_on_input_when = 0;
    if(_bm_) var sth$1 = _bm_[1], disabled = sth$1; else var disabled = 0;
    if(_bl_)
     var sth$2 = _bl_[1], placeholder = sth$2;
    else
     var placeholder = cst$6;
    if(_bk_)
     var sth$3 = _bk_[1], merge_behavior = sth$3;
    else
     var merge_behavior = 0;
    var
     _bo_ = 0,
     _bp_ = 0,
     _bq_ = [0, create(value, Core_Option[33], allow_updates_when_focused), 0];
    function _br_(ev, value){return caml_call1(on_input, value);}
    var
     _bs_ = [0, caml_call1(listener(call_on_input_when), _br_), _bq_],
     _bt_ =
       add_attrs
        (extra_attrs,
         maybe_disabled
          (disabled,
           [0, caml_call1(Virtual_dom_Vdom[1][27], placeholder), _bs_])),
     _bu_ = [0, [0, caml_call1(merge(merge_behavior), _bt_), _bp_]];
    return caml_call3(Virtual_dom_Node[32], key, _bu_, _bo_);
   }
   function color_picker
   (opt, _bd_, disabled, _bc_, key, value, on_input, param){
    if(opt)
     var sth = opt[1], extra_attr = sth;
    else
     var extra_attr = Virtual_dom_Vdom[1][11];
    if(_bd_)
     var sth$0 = _bd_[1], call_on_input_when = sth$0;
    else
     var call_on_input_when = 0;
    if(_bc_)
     var sth$1 = _bc_[1], merge_behavior = sth$1;
    else
     var merge_behavior = 0;
    var value$0 = value[2], _be_ = 0;
    function _bf_(ev, s){return caml_call1(on_input, [0, 3603131, s]);}
    var
     _bg_ = [0, caml_call1(listener(call_on_input_when), _bf_), _be_],
     _bh_ = caml_call1(Virtual_dom_Vdom[1][47], value$0),
     _bi_ = caml_call2(Virtual_dom_Vdom[1][12], _bh_, extra_attr),
     _bj_ = caml_call1(Virtual_dom_Vdom[1][43], cst_color);
    return input_node
            (0,
             disabled,
             0,
             [0, merge_behavior],
             key,
             [0, caml_call2(Virtual_dom_Vdom[1][12], _bj_, _bi_), _bg_]);
   }
   function with_validation(opt, _a1_, text, validation, on_click){
    if(opt) var sth = opt[1], extra_attrs = sth; else var extra_attrs = 0;
    if(_a1_)
     var sth$0 = _a1_[1], merge_behavior = sth$0;
    else
     var merge_behavior = 0;
    if(0 === validation[0]){
     var
      result = validation[1],
      _a2_ = [0, caml_call1(Virtual_dom_Node[6], text), 0],
      _a3_ = 0,
      _a4_ = [0, caml_call1(Virtual_dom_Vdom[1][43], cst_button), 0],
      _a5_ = function(ev){return caml_call1(on_click, result);},
      _a6_ =
        add_attrs
         (extra_attrs, [0, caml_call1(Virtual_dom_Vdom[1][61], _a5_), _a4_]),
      _a7_ = [0, [0, caml_call1(merge(merge_behavior), _a6_), _a3_]];
     return caml_call3(Virtual_dom_Node[12], 0, _a7_, _a2_);
    }
    var
     reason = validation[1],
     _a8_ = [0, caml_call1(Virtual_dom_Node[6], text), 0],
     _a9_ =
       [0,
        caml_call2(Virtual_dom_Vdom[1][1], cst_tooltip_position, cst_top),
        0],
     _a__ = [0, caml_call2(Virtual_dom_Vdom[1][1], cst_tooltip, reason), _a9_],
     _a$_ = [0, caml_call1(Virtual_dom_Vdom[1][43], cst_button$0), _a__],
     _ba_ = add_attrs(extra_attrs, [0, Virtual_dom_Vdom[1][19], _a$_]),
     _bb_ = [0, [0, caml_call1(merge(merge_behavior), _ba_), 0]];
    return caml_call3(Virtual_dom_Node[12], 0, _bb_, _a8_);
   }
   function simple$0(opt, _aT_, _aS_, text, on_click){
    if(opt) var sth = opt[1], extra_attrs = sth; else var extra_attrs = 0;
    if(_aT_) var sth$0 = _aT_[1], disabled = sth$0; else var disabled = 0;
    if(_aS_)
     var sth$1 = _aS_[1], merge_behavior = sth$1;
    else
     var merge_behavior = 0;
    var
     _aU_ = [0, caml_call1(Virtual_dom_Node[6], text), 0],
     _aV_ = 0,
     _aW_ = 0;
    function _aX_(ev){return caml_call1(on_click, 0);}
    var
     _aY_ = [0, caml_call1(Virtual_dom_Vdom[1][61], _aX_), _aW_],
     _aZ_ =
       add_attrs
        (extra_attrs,
         maybe_disabled
          (disabled,
           [0, caml_call1(Virtual_dom_Vdom[1][43], cst_button$1), _aY_])),
     _a0_ = [0, [0, caml_call1(merge(merge_behavior), _aZ_), _aV_]];
    return caml_call3(Virtual_dom_Node[12], 0, _a0_, _aU_);
   }
   function impl$2
   (opt,
    _aB_,
    _aA_,
    _az_,
    _ay_,
    orientation,
    name,
    on_click,
    selected,
    to_string,
    equal,
    values){
    if(opt)
     var sth = opt[1], extra_container_attrs = sth;
    else
     var extra_container_attrs = 0;
    if(_aB_)
     var sth$0 = _aB_[1], extra_button_attrs = sth$0;
    else
     var extra_button_attrs = function(param){return 0;};
    if(_aA_) var sth$1 = _aA_[1], disabled = sth$1; else var disabled = 0;
    if(_az_) var sth$2 = _az_[1], style = sth$2; else var style = 0;
    if(_ay_)
     var sth$3 = _ay_[1], merge_behavior = sth$3;
    else
     var merge_behavior = 0;
    var
     input_attrs =
       style
        ? [0, caml_call1(Virtual_dom_Vdom[1][32], hide_native_inputs), 0]
        : 0;
    function _aC_(item){
     var
      _aE_ = caml_call1(equal, item),
      checked = caml_call3(Core_Option[41], selected, 0, _aE_),
      _aF_ = caml_call1(to_string, item),
      _aG_ = [0, caml_call1(Virtual_dom_Node[6], _aF_), 0],
      _aH_ = 0,
      _aI_ =
        [0, caml_call2(Virtual_dom_Vdom[1][4], cst_checked$1, checked), 0];
     function _aJ_(ev){return caml_call1(on_click, item);}
     var
      _aK_ = [0, caml_call1(Virtual_dom_Vdom[1][61], _aJ_), _aI_],
      _aL_ = [0, caml_call1(Virtual_dom_Vdom[1][17], _T_), _aK_],
      _aM_ = [0, caml_call1(Virtual_dom_Vdom[1][26], name), _aL_],
      _aN_ = [0, caml_call1(Virtual_dom_Vdom[1][43], cst_radio), _aM_],
      _aO_ =
        [0,
         maybe_disabled(disabled, caml_call2(Core[156], _aN_, input_attrs))],
      _aP_ = [0, caml_call3(Virtual_dom_Node[30], 0, _aO_, _aH_), _aG_],
      _aQ_ = caml_call1(extra_button_attrs, checked),
      _aR_ = [0, [0, caml_call1(merge(merge_behavior), _aQ_), 0]];
     return caml_call3(Virtual_dom_Node[37], 0, _aR_, _aP_);
    }
    var _aD_ = caml_call2(Core_List[51], values, _aC_);
    return structural_list
            ([0, orientation],
             [0, merge_behavior],
             add_attrs
              (extra_container_attrs,
               [0, caml_call1(Virtual_dom_Vdom[1][17], _U_), 0]),
             _aD_);
   }
   function of_values$2
   (extra_container_attrs,
    extra_button_attrs,
    disabled,
    style,
    opt,
    E,
    name,
    on_click,
    selected,
    values){
    if(opt)
     var sth = opt[1], merge_behavior = sth;
    else
     var merge_behavior = 0;
    return impl$2
            (extra_container_attrs,
             extra_button_attrs,
             disabled,
             style,
             [0, merge_behavior],
             -1010337642,
             name,
             on_click,
             selected,
             E[2],
             E[1],
             values);
   }
   function of_values_horizontal
   (extra_container_attrs,
    extra_button_attrs,
    disabled,
    style,
    opt,
    E,
    name,
    on_click,
    selected,
    values){
    if(opt)
     var sth = opt[1], merge_behavior = sth;
    else
     var merge_behavior = 0;
    return impl$2
            (extra_container_attrs,
             extra_button_attrs,
             disabled,
             style,
             [0, merge_behavior],
             208994564,
             name,
             on_click,
             selected,
             E[2],
             E[1],
             values);
   }
   function accept_attrs(param){
    if(! param) return Virtual_dom_Vdom[1][11];
    var accepts = param[1];
    function _av_(param){
     if(115569503 <= param[1]){
      var s = param[2];
      return caml_call2(Core_String[73], s, cst$7)
              ? s
              : caml_call2(Core[18], cst$8, s);
     }
     var s$0 = param[2];
     return s$0;
    }
    var
     _aw_ = caml_call2(Core_List[51], accepts, _av_),
     _ax_ = caml_call2(Core_String[46], _V_, _aw_);
    return caml_call2(Virtual_dom_Vdom[1][1], cst_accept, _ax_);
   }
   function list(opt, accept, _ae_, on_input, param){
    if(opt) var sth = opt[1], extra_attrs = sth; else var extra_attrs = 0;
    if(_ae_)
     var sth$0 = _ae_[1], merge_behavior = sth$0;
    else
     var merge_behavior = 0;
    var _af_ = 0, _ag_ = 0, _ah_ = 0;
    function _ai_(ev, file_list){
     function _ao_(i){
      var
       _ap_ = file_list.item(i),
       _aq_ = caml_call1(Js_of_ocaml_Js[5][10], _ap_),
       _ar_ = caml_call1(Core_Int[79], i),
       _as_ = [0, caml_call1(Ppx_string_runtime[1][3], _ar_), 0],
       _at_ =
         [0,
          caml_call1(Ppx_string_runtime[1][2], cst_couldn_t_get_file),
          _as_],
       _au_ = [0, caml_call1(Ppx_string_runtime[1][4], _at_)];
      return caml_call4(Core_Option[40], 0, 0, _au_, _aq_);
     }
     var files = caml_call2(Core_List[40], file_list.length, _ao_);
     return caml_call1(on_input, files);
    }
    var
     _aj_ = [0, caml_call1(Virtual_dom_Vdom[1][59], _ai_), _ah_],
     _ak_ =
       [0, caml_call2(Virtual_dom_Vdom[1][1], cst_multiple$0, cst$9), _aj_],
     _al_ = [0, accept_attrs(accept), _ak_],
     _am_ =
       add_attrs
        (extra_attrs,
         [0, caml_call1(Virtual_dom_Vdom[1][43], cst_file), _al_]),
     _an_ = [0, [0, caml_call1(merge(merge_behavior), _am_), _ag_]];
    return caml_call3(Virtual_dom_Node[30], 0, _an_, _af_);
   }
   function single(opt, accept, _W_, on_input, param){
    if(opt) var sth = opt[1], extra_attrs = sth; else var extra_attrs = 0;
    if(_W_)
     var sth$0 = _W_[1], merge_behavior = sth$0;
    else
     var merge_behavior = 0;
    var _X_ = 0, _Y_ = 0, _Z_ = 0;
    function ___(ev, file_list){
     var
      _ad_ = file_list.item(0),
      file = caml_call1(Js_of_ocaml_Js[5][10], _ad_);
     return caml_call1(on_input, file);
    }
    var
     _$_ = [0, caml_call1(Virtual_dom_Vdom[1][59], ___), _Z_],
     _aa_ = [0, accept_attrs(accept), _$_],
     _ab_ =
       add_attrs
        (extra_attrs,
         [0, caml_call1(Virtual_dom_Vdom[1][43], cst_file$0), _aa_]),
     _ac_ = [0, [0, caml_call1(merge(merge_behavior), _ab_), _Y_]];
    return caml_call3(Virtual_dom_Node[30], 0, _ac_, _X_);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_vdom_input_widgets);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Vdom_input_widgets);
   var
    Vdom_input_widgets =
      [0,
       [0, of_string, to_string],
       Merge_behavior,
       [0,
        equal,
        update_of_sexp,
        sexp_of_update,
        bin_shape_t,
        bin_size_t,
        bin_write_t,
        bin_read_t$0,
        bin_read_t,
        bin_writer_t,
        bin_reader_t,
        bin_t,
        compare,
        equal_update,
        sexp_of_update,
        update_of_sexp,
        bin_shape_update,
        bin_size_update,
        bin_write_update,
        bin_writer_update,
        bin_read_update$0,
        bin_read_update,
        bin_reader_update,
        bin_update,
        compare_update,
        initial_empty,
        is_initial_empty,
        return$0,
        get_current,
        get_last,
        get_error,
        update,
        lift],
       [0],
       [0, of_values, of_values_opt, of_enum, of_enum_opt],
       [0, simple],
       [0, of_values$0, of_enum$0],
       [0, Repeated_click_behavior, of_values$1, of_enum$1],
       [0,
        [0],
        raw,
        of_stringable,
        validated,
        text,
        password,
        number,
        range,
        time,
        date,
        datetime_local,
        text_area,
        color_picker],
       [0, simple$0, with_validation],
       [0, of_values$2, of_values_horizontal],
       [0, single, list]];
   runtime.caml_register_global
    (180, Vdom_input_widgets, cst_Vdom_input_widgets$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Vdom_input_widgets__Import
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Vdom_input_widgets_Import = "Vdom_input_widgets__Import",
    cst_vdom_input_widgets = "vdom_input_widgets";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Vdom_input_widgets_Import);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_vdom_input_widgets);
   caml_call1(Ppx_expect_runtime[1][1], "input_widgets/src/import.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_vdom_input_widgets, "import.ml");
   caml_call1(Ppx_inline_test_lib[7], cst_vdom_input_widgets);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Vdom_input_widgets_Import);
   var Vdom_input_widgets_Import = [0];
   runtime.caml_register_global
    (11, Vdom_input_widgets_Import, cst_Vdom_input_widgets_Import);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
