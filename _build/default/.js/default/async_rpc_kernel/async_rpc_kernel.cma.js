// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Async_rpc_kernel__
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Async_rpc_kernel = [0],
    Async_rpc_kernel$0 = [0, Async_rpc_kernel];
   runtime.caml_register_global(0, Async_rpc_kernel$0, "Async_rpc_kernel__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_rpc_kernel__Nat0
//# unitInfo: Requires: Bin_prot__Common, Bin_prot__Nat0, Bin_prot__Read, Bin_prot__Shape, Bin_prot__Size, Bin_prot__Type_class, Bin_prot__Write, Bin_shape, Expect_test_config, Inline_test_config, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_expect_runtime__Test_block, Ppx_expect_runtime__Test_node, Ppx_expect_runtime__Types, Ppx_inline_test_lib, Ppx_module_timer_runtime, Stdlib
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_rpc_kernel_Nat0$0 = "Async_rpc_kernel__Nat0",
    cst_async_rpc_kernel$0 = "async_rpc_kernel",
    cst_src_nat0_ml$0 = "src/nat0.ml";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call14
   (f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13){
    return (f.l >= 0 ? f.l : f.l = f.length) == 14
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13)
            : runtime.caml_call_gen
              (f,
               [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Bin_prot_Common = global_data.Bin_prot__Common,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Bin_shape = global_data.Bin_shape,
    Stdlib = global_data.Stdlib,
    Ppx_expect_runtime_Types = global_data.Ppx_expect_runtime__Types,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Expect_test_config = global_data.Expect_test_config,
    Ppx_expect_runtime_Test_block = global_data.Ppx_expect_runtime__Test_block,
    Ppx_expect_runtime_Test_node = global_data.Ppx_expect_runtime__Test_node,
    Inline_test_config = global_data.Inline_test_config,
    Bin_prot_Type_class = global_data.Bin_prot__Type_class,
    Bin_prot_Size = global_data.Bin_prot__Size,
    Bin_prot_Write = global_data.Bin_prot__Write,
    Bin_prot_Read = global_data.Bin_prot__Read,
    Bin_prot_Nat0 = global_data.Bin_prot__Nat0;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_rpc_kernel_Nat0$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_rpc_kernel$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_nat0_ml$0);
   caml_call2(Ppx_inline_test_lib[6], cst_async_rpc_kernel$0, "nat0.ml");
   var
    _a_ = caml_call1(Bin_shape[5][1], "899e2f4a-490a-11e6-b68f-bbd62472516c"),
    bin_shape_t = caml_call1(caml_call1(Bin_prot_Shape[12], _a_), 0),
    cst_t = "t",
    _c_ =
      [0,
       [0,
        [0, " 595f2a60f11816b29a72ddab17002b56 ", [0, ""]],
        [0, 152, 163, 201]]],
    _d_ = [0, 152, 154, 202],
    _i_ = [0, 98, 98, 202],
    _j_ = [0, 152, 202, 202],
    _k_ = [0, 98, 98, 202],
    cst_src_nat0_ml = cst_src_nat0_ml$0,
    cst_async_rpc_kernel = cst_async_rpc_kernel$0,
    cst_Async_rpc_kernel_Nat0 = cst_Async_rpc_kernel_Nat0$0;
   if(typeof Ppx_inline_test_lib[3] !== "number"){
    var
     Ppx_expect_test_block =
       caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
     _b_ =
       function(param){
        var
         _l_ = caml_call1(Bin_prot_Shape[15], bin_shape_t),
         _m_ = caml_call1(Bin_shape[19][4], _l_);
        caml_call1(Stdlib[46], _m_);
        var _n_ = caml_call1(Ppx_expect_runtime_Types[4][1], 0);
        return caml_call1(Ppx_expect_test_block[2], _n_);
       },
     _e_ =
       caml_call3
        (Ppx_expect_runtime_Test_node[1][1],
         [0, Ppx_expect_runtime_Types[1][1]],
         _d_,
         _c_),
     _f_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 0), _e_], 0],
     _g_ = caml_call1(Ppx_expect_runtime_Types[4][1], 2),
     _h_ = caml_call1(Ppx_expect_runtime_Types[4][1], 1);
    caml_call14
     (Ppx_expect_test_block[3],
      cst_src_nat0_ml,
      4,
      _k_,
      _j_,
      _i_,
      [0, Ppx_expect_runtime_Types[1][1]],
      0,
      _h_,
      _g_,
      0,
      0,
      Inline_test_config,
      _f_,
      _b_);
   }
   var
    bin_t = Bin_prot_Type_class[44],
    bin_size_t = Bin_prot_Size[11],
    bin_writer_t = Bin_prot_Type_class[41],
    bin_write_t = Bin_prot_Write[7],
    bin_reader_t = Bin_prot_Type_class[42],
    bin_read_t = Bin_prot_Read[7];
   function bin_read_t$0(buf, pos_ref, vnat0){
    return caml_call2(Bin_prot_Common[19], cst_t, pos_ref[1]);
   }
   var of_int_exn = Bin_prot_Nat0[1];
   caml_call1(Ppx_inline_test_lib[7], cst_async_rpc_kernel);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_rpc_kernel_Nat0);
   var
    Async_rpc_kernel_Nat0 =
      [0,
       bin_size_t,
       bin_write_t,
       bin_read_t,
       bin_read_t$0,
       bin_shape_t,
       bin_writer_t,
       bin_reader_t,
       bin_t,
       of_int_exn];
   runtime.caml_register_global
    (33, Async_rpc_kernel_Nat0, cst_Async_rpc_kernel_Nat0$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_rpc_kernel__Writer_with_length
//# unitInfo: Requires: Async_rpc_kernel__Nat0, Bin_prot__Utils, Core, Core__Bigstring, Core__Bytes, Core__Int, Inline_test_config, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_rpc_kernel_Writer_wi$0 = "Async_rpc_kernel__Writer_with_length",
    cst_async_rpc_kernel$0 = "async_rpc_kernel",
    cst_src_writer_with_length_ml$1 = "src/writer_with_length.ml";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Core_Int = global_data.Core__Int,
    Core_Bytes = global_data.Core__Bytes,
    Core_Bigstring = global_data.Core__Bigstring,
    Core = global_data.Core,
    Bin_prot_Utils = global_data.Bin_prot__Utils,
    Inline_test_config = global_data.Inline_test_config,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Async_rpc_kernel_Nat0 = global_data.Async_rpc_kernel__Nat0,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_rpc_kernel_Writer_wi$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_rpc_kernel$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_writer_with_length_ml$1);
   caml_call2
    (Ppx_inline_test_lib[6], cst_async_rpc_kernel$0, "writer_with_length.ml");
   var
    _b_ =
      [0,
       [11, "mismatch for length ", [4, 0, 0, 0, 0]],
       "mismatch for length %d"],
    cst_src_writer_with_length_ml = cst_src_writer_with_length_ml$1,
    cst_for_len_0_to_Int_pow_2_10_ =
      "<<for len = 0 to Int.pow 2 10 do test len done;[...]>>",
    cst_src_writer_with_length_ml$0 = cst_src_writer_with_length_ml$1,
    cst_async_rpc_kernel = cst_async_rpc_kernel$0,
    cst_Async_rpc_kernel_Writer_wi = cst_Async_rpc_kernel_Writer_wi$0;
   function of_writer(param){
    var write = param[2], size = param[1];
    function write$0(buf, pos, a){
     var
      _k_ = caml_call1(size, a),
      len = caml_call1(Async_rpc_kernel_Nat0[9], _k_),
      pos$0 = caml_call3(Async_rpc_kernel_Nat0[2], buf, pos, len);
     return caml_call3(write, buf, pos$0, a);
    }
    function size$0(a){
     var
      _j_ = caml_call1(size, a),
      len = caml_call1(Async_rpc_kernel_Nat0[9], _j_);
     return caml_call1(Async_rpc_kernel_Nat0[1], len) + len | 0;
    }
    return [0, size$0, write$0];
   }
   function of_type_class(bin_a){return of_writer(bin_a[2]);}
   function _a_(param){
    function test(len){
     var
      s = caml_call1(Core_Bytes[44], len),
      bigstring = caml_call3(Bin_prot_Utils[4], 0, Core_Bytes[8], s),
      bigstring_version =
        caml_call3(Bin_prot_Utils[4], 0, Core_Bigstring[134][1][8], bigstring),
      writer_with_length = of_writer(Core_Bytes[8]),
      with_length_version =
        caml_call3(Bin_prot_Utils[4], 0, writer_with_length, s),
      _h_ = caml_call3(Core_Bigstring[16], 0, 0, with_length_version),
      _i_ =
        runtime.caml_string_notequal
         (caml_call3(Core_Bigstring[16], 0, 0, bigstring_version), _h_);
     return _i_ ? caml_call3(Core[246], _b_, len, 0) : _i_;
    }
    function _c_(param){
     var _e_ = caml_call2(Core_Int[27], 2, 10), _d_ = 0;
     if(_e_ >= 0){
      var len = _d_;
      for(;;){
       test(len);
       var _g_ = len + 1 | 0;
       if(_e_ === len) break;
       var len = _g_;
      }
     }
     var pow = 10;
     for(;;){
      var x = caml_call2(Core_Int[27], 2, pow);
      test(x - 1 | 0);
      test(x);
      test(x + 1 | 0);
      var _f_ = pow + 1 | 0;
      if(20 === pow) return 0;
      var pow = _f_;
     }
    }
    caml_call8
     (Ppx_inline_test_lib[9],
      Inline_test_config,
      cst_for_len_0_to_Int_pow_2_10_,
      0,
      cst_src_writer_with_length_ml,
      39,
      4,
      218,
      _c_);
    return 0;
   }
   caml_call8
    (Ppx_inline_test_lib[10],
     Inline_test_config,
     cst,
     0,
     cst_src_writer_with_length_ml$0,
     19,
     0,
     921,
     _a_);
   caml_call1(Ppx_inline_test_lib[7], cst_async_rpc_kernel);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_rpc_kernel_Writer_wi);
   var Async_rpc_kernel_Writer_with_l = [0, of_writer, of_type_class];
   runtime.caml_register_global
    (23, Async_rpc_kernel_Writer_with_l, cst_Async_rpc_kernel_Writer_wi$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_rpc_kernel__Description
//# unitInfo: Requires: Base__Hash, Bin_prot__Common, Bin_prot__Shape, Bin_shape, Core, Core__Comparable, Core__Hashable, Core__Int, Core__List, Core__Set, Core__String, Expect_test_config, Inline_test_config, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_expect_runtime__Test_block, Ppx_expect_runtime__Test_node, Ppx_expect_runtime__Types, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv_record
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst = "",
    cst_Async_rpc_kernel_Descripti$0 = "Async_rpc_kernel__Description",
    cst_async_rpc_kernel$0 = "async_rpc_kernel",
    cst_foo = "foo",
    cst_name$0 = "name",
    cst_src_description_ml$1 = "src/description.ml",
    cst_src_description_ml_Stable_$0 = "src/description.ml.Stable.V1.t",
    cst_t = "t",
    cst_version$0 = "version",
    caml_string_notequal = runtime.caml_string_notequal;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call14
   (f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13){
    return (f.l >= 0 ? f.l : f.l = f.length) == 14
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13)
            : runtime.caml_call_gen
              (f,
               [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    descriptions =
      [0, [0, cst_foo, 1], [0, [0, cst_foo, 2], [0, [0, "bar", 5], 0]]],
    error_source_006 = cst_src_description_ml_Stable_$0,
    Core_Int = global_data.Core__Int,
    Core_String = global_data.Core__String,
    Core = global_data.Core,
    Ppx_expect_runtime_Types = global_data.Ppx_expect_runtime__Types,
    Core_Set = global_data.Core__Set,
    Core_List = global_data.Core__List,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Bin_shape = global_data.Bin_shape,
    Sexplib0_Sexp_conv_record = global_data.Sexplib0__Sexp_conv_record,
    Base_Hash = global_data.Base__Hash,
    Bin_prot_Common = global_data.Bin_prot__Common,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Expect_test_config = global_data.Expect_test_config,
    Ppx_expect_runtime_Test_block = global_data.Ppx_expect_runtime__Test_block,
    Ppx_expect_runtime_Test_node = global_data.Ppx_expect_runtime__Test_node,
    Inline_test_config = global_data.Inline_test_config,
    Core_Comparable = global_data.Core__Comparable,
    Core_Hashable = global_data.Core__Hashable;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_rpc_kernel_Descripti$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_rpc_kernel$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_description_ml$1);
   caml_call2
    (Ppx_inline_test_lib[6], cst_async_rpc_kernel$0, "description.ml");
   var
    _a_ =
      caml_call1
       (Bin_prot_Shape[4],
        [0, [0, cst_name$0, Core[541]], [0, [0, cst_version$0, Core[372]], 0]]),
    _b_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t), 0, _a_], 0],
    _c_ = caml_call1(Bin_shape[4][1], "src/description.ml:5:4"),
    group = caml_call2(Bin_prot_Shape[2], _c_, _b_),
    _d_ = caml_call1(Bin_shape[2][1], cst_t),
    bin_shape_t = caml_call1(caml_call2(Bin_prot_Shape[10], group, _d_), 0),
    _e_ = [0, cst_version$0],
    _f_ = [0, cst_name$0],
    cst_version = cst_version$0,
    cst_name = cst_name$0,
    cst_src_description_ml_Stable_ = cst_src_description_ml_Stable_$0,
    _s_ =
      [0,
       [0,
        [0, " 4521f44dbc6098c0afc2770cc84552b1 ", [0, cst]],
        [0, 256, 271, 309]]],
    _t_ = [0, 256, 262, 310],
    _y_ = [0, 194, 198, 310],
    _z_ = [0, 256, 310, 310],
    _A_ = [0, 194, 198, 310],
    cst_src_description_ml$0 = cst_src_description_ml$1,
    _i_ =
      [0, [0, [0, " ((bar (5)) (foo (1 2))) ", [0, cst]], [0, 930, 941, 970]]],
    _j_ = [0, 930, 932, 971],
    _o_ = [0, 674, 674, 971],
    _p_ = [0, 930, 971, 971],
    _q_ = [0, 674, 674, 971],
    cst_src_description_ml = cst_src_description_ml$1,
    cst_async_rpc_kernel = cst_async_rpc_kernel$0,
    cst_Async_rpc_kernel_Descripti = cst_Async_rpc_kernel_Descripti$0;
   function bin_size_t(param){
    var
     v2 = param[2],
     v1 = param[1],
     _R_ = caml_call1(Core[542], v1),
     size = caml_call2(Bin_prot_Common[23], 0, _R_),
     _S_ = caml_call1(Core[373], v2);
    return caml_call2(Bin_prot_Common[23], size, _S_);
   }
   function bin_write_t(buf, pos, param){
    var
     v2 = param[2],
     v1 = param[1],
     pos$0 = caml_call3(Core[544], buf, pos, v1);
    return caml_call3(Core[375], buf, pos$0, v2);
   }
   var bin_writer_t = [0, bin_size_t, bin_write_t];
   function bin_read_t(buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19], cst_src_description_ml_Stable_, pos_ref[1]);
   }
   function bin_read_t$0(buf, pos_ref){
    var
     v_name = caml_call2(Core[547], buf, pos_ref),
     v_version = caml_call2(Core[378], buf, pos_ref);
    return [0, v_name, v_version];
   }
   var
    bin_reader_t = [0, bin_read_t$0, bin_read_t],
    bin_t = [0, bin_shape_t, bin_writer_t, bin_reader_t];
   function equal(a_001, b_002){
    if(a_001 === b_002) return 1;
    var _Q_ = caml_call2(Core[553], a_001[1], b_002[1]);
    return _Q_ ? caml_call2(Core[384], a_001[2], b_002[2]) : _Q_;
   }
   function compare_local(a_003, b_004){
    if(a_003 === b_004) return 0;
    var n = caml_call2(Core[552], a_003[1], b_004[1]);
    return 0 === n ? caml_call2(Core[383], a_003[2], b_004[2]) : n;
   }
   function compare(a, b){return compare_local(a, b);}
   function hash_fold_t(hsv, arg){
    var hsv$0 = caml_call2(Core[556], hsv, arg[1]);
    return caml_call2(Core[387], hsv$0, arg[2]);
   }
   function hash(arg){
    var hsv = caml_call2(Base_Hash[11], 0, 0), _P_ = hash_fold_t(hsv, arg);
    return caml_call1(Base_Hash[9], _P_);
   }
   function t_of_sexp(x_007){
    function _M_(param){
     var version = param[2][1], name = param[1];
     return [0, name, version];
    }
    var _N_ = 0;
    function _O_(param){
     return caml_string_notequal(param, cst_name$0)
             ? caml_string_notequal(param, cst_version$0) ? -1 : 1
             : 0;
    }
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_006,
             [0, cst_name, 1, Core[559], [0, cst_version, 1, Core[390], 0]],
             _O_,
             _N_,
             _M_,
             x_007);
   }
   function sexp_of_t(param){
    var
     version_011 = param[2],
     name_009 = param[1],
     arg_012 = caml_call1(Core[389], version_011),
     bnds_008 = [0, [1, [0, _e_, [0, arg_012, 0]]], 0],
     arg_010 = caml_call1(Core[558], name_009),
     bnds_008$0 = [0, [1, [0, _f_, [0, arg_010, 0]]], bnds_008];
    return [1, bnds_008$0];
   }
   function globalize(x_013){
    var
     version_014 = x_013[2],
     name_015 = x_013[1],
     _L_ = caml_call1(Core[386], version_014);
    return [0, caml_call1(Core[555], name_015), _L_];
   }
   if(typeof Ppx_inline_test_lib[3] !== "number"){
    var
     Ppx_expect_test_block$0 =
       caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
     _r_ =
       function(param){
        var
         _I_ = caml_call1(Bin_prot_Shape[15], bin_shape_t),
         _J_ = caml_call1(Bin_shape[19][4], _I_);
        caml_call1(Core[32], _J_);
        var _K_ = caml_call1(Ppx_expect_runtime_Types[4][1], 0);
        return caml_call1(Ppx_expect_test_block$0[2], _K_);
       },
     _u_ =
       caml_call3
        (Ppx_expect_runtime_Test_node[1][1],
         [0, Ppx_expect_runtime_Types[1][1]],
         _t_,
         _s_),
     _v_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 0), _u_], 0],
     _w_ = caml_call1(Ppx_expect_runtime_Types[4][1], 2),
     _x_ = caml_call1(Ppx_expect_runtime_Types[4][1], 1);
    caml_call14
     (Ppx_expect_test_block$0[3],
      cst_src_description_ml$0,
      11,
      _A_,
      _z_,
      _y_,
      [0, Ppx_expect_runtime_Types[1][1]],
      0,
      _x_,
      _w_,
      0,
      0,
      Inline_test_config,
      _v_,
      _r_);
   }
   var
    _g_ = caml_call1(Core_Comparable[12], [0, compare, t_of_sexp, sexp_of_t]),
    symbol = _g_[1],
    symbol$0 = _g_[2],
    symbol$1 = _g_[3],
    symbol$2 = _g_[4],
    symbol$3 = _g_[5],
    symbol$4 = _g_[6],
    equal$0 = _g_[7],
    min = _g_[9],
    max = _g_[10],
    ascending = _g_[11],
    descending = _g_[12],
    between = _g_[13],
    clamp_exn = _g_[14],
    clamp = _g_[15],
    comparator = _g_[16],
    validate_lbound = _g_[17],
    validate_ubound = _g_[18],
    validate_bound = _g_[19],
    Replace_polymorphic_compare = _g_[20],
    Map = _g_[21],
    Set = _g_[22],
    include =
      caml_call1
       (Core_Hashable[3],
        [0, hash_fold_t, t_of_sexp, compare, sexp_of_t, hash]),
    compare$0 = include[1],
    hash_fold_t$0 = include[2],
    hash$0 = include[3],
    hashable = include[4],
    Table = include[5],
    Hash_set = include[6],
    Hash_queue = include[7];
   function to_alist(ts){
    function _H_(param){
     var version = param[2], name = param[1];
     return [0, name, version];
    }
    return caml_call2(Core_List[51], ts, _H_);
   }
   function of_alist(list){
    function _G_(param){
     var version = param[2], name = param[1];
     return [0, name, version];
    }
    return caml_call2(Core_List[51], list, _G_);
   }
   function summarize(ts){
    var _D_ = Core_Set[12], _E_ = Core_Int[99][5], _F_ = to_alist(ts);
    return caml_call3(Core_String[159][17], _F_, _E_, _D_);
   }
   if(typeof Ppx_inline_test_lib[3] !== "number"){
    var
     Ppx_expect_test_block =
       caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
     _h_ =
       function(param){
        var
         summary = summarize(descriptions),
         _B_ = caml_call2(Core_String[159][45], Core_Int[99][28], summary);
        caml_call2(Core[256], 0, _B_);
        var _C_ = caml_call1(Ppx_expect_runtime_Types[4][1], 3);
        return caml_call1(Ppx_expect_test_block[2], _C_);
       },
     _k_ =
       caml_call3
        (Ppx_expect_runtime_Test_node[1][1],
         [0, Ppx_expect_runtime_Types[1][1]],
         _j_,
         _i_),
     _l_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 3), _k_], 0],
     _m_ = caml_call1(Ppx_expect_runtime_Types[4][1], 5),
     _n_ = caml_call1(Ppx_expect_runtime_Types[4][1], 4);
    caml_call14
     (Ppx_expect_test_block[3],
      cst_src_description_ml,
      29,
      _q_,
      _p_,
      _o_,
      [0, Ppx_expect_runtime_Types[1][1]],
      0,
      _n_,
      _m_,
      0,
      0,
      Inline_test_config,
      _l_,
      _h_);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_async_rpc_kernel);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_rpc_kernel_Descripti);
   var
    Async_rpc_kernel_Description =
      [0,
       bin_size_t,
       bin_write_t,
       bin_read_t$0,
       bin_read_t,
       bin_shape_t,
       bin_writer_t,
       bin_reader_t,
       bin_t,
       compare_local,
       sexp_of_t,
       globalize,
       symbol,
       symbol$0,
       symbol$1,
       symbol$2,
       symbol$3,
       symbol$4,
       equal$0,
       min,
       max,
       ascending,
       descending,
       between,
       clamp_exn,
       clamp,
       comparator,
       validate_lbound,
       validate_ubound,
       validate_bound,
       Replace_polymorphic_compare,
       Map,
       Set,
       compare$0,
       hash_fold_t$0,
       hash$0,
       hashable,
       Table,
       Hash_set,
       Hash_queue,
       summarize,
       of_alist,
       to_alist,
       [0,
        [0,
         compare,
         equal,
         t_of_sexp,
         sexp_of_t,
         bin_size_t,
         bin_write_t,
         bin_read_t$0,
         bin_read_t,
         bin_shape_t,
         bin_writer_t,
         bin_reader_t,
         bin_t,
         hash_fold_t,
         hash]]];
   runtime.caml_register_global
    (54, Async_rpc_kernel_Description, cst_Async_rpc_kernel_Descripti$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_rpc_kernel__Rpc_shapes
//# unitInfo: Requires: Base__Hash, Bin_prot__Common, Bin_prot__Md5, Bin_prot__Read, Bin_prot__Shape, Bin_prot__Write, Bin_shape, Core, Core__Binable, Core__Comparable, Core__Md5, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv_error, Sexplib0__Sexp_conv_record
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_rpc_kernel_Rpc_shape$0 = "Async_rpc_kernel__Rpc_shapes",
    cst_One_way$2 = "One_way",
    cst_Rpc$2 = "Rpc",
    cst_Streaming_rpc$2 = "Streaming_rpc",
    cst_Unknown$1 = "Unknown",
    cst_async_rpc_kernel$0 = "async_rpc_kernel",
    cst_error$2 = "error",
    cst_initial_response$2 = "initial_response",
    cst_msg$2 = "msg",
    cst_one_way = "one_way",
    cst_query$5 = "query",
    cst_response$2 = "response",
    cst_rpc = "rpc",
    cst_src_rpc_shapes_ml_Stable_J$0 =
      "src/rpc_shapes.ml.Stable.Just_digests.V1.t",
    cst_src_rpc_shapes_ml_Stable_V$0 = "src/rpc_shapes.ml.Stable.V1.t",
    cst_streaming_rpc = "streaming_rpc",
    cst_t$1 = "t",
    cst_unknown = "unknown",
    cst_update_response$2 = "update_response",
    caml_string_notequal = runtime.caml_string_notequal;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    error_source_003 = cst_src_rpc_shapes_ml_Stable_V$0,
    error_source_053 = cst_src_rpc_shapes_ml_Stable_J$0,
    descriptions =
      [0,
       [0, cst_Rpc$2, 2],
       [0,
        [0, cst_One_way$2, 1],
        [0, [0, cst_Streaming_rpc$2, 4], [0, [0, cst_Unknown$1, 0], 0]]]],
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Core = global_data.Core,
    Bin_shape = global_data.Bin_shape,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Sexplib0_Sexp_conv_record = global_data.Sexplib0__Sexp_conv_record,
    Base_Hash = global_data.Base__Hash,
    Bin_prot_Read = global_data.Bin_prot__Read,
    Bin_prot_Common = global_data.Bin_prot__Common,
    Bin_prot_Write = global_data.Bin_prot__Write,
    Core_Md5 = global_data.Core__Md5,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Core_Binable = global_data.Core__Binable,
    Bin_prot_Md5 = global_data.Bin_prot__Md5,
    Core_Comparable = global_data.Core__Comparable;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_rpc_kernel_Rpc_shape$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_rpc_kernel$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/rpc_shapes.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_async_rpc_kernel$0, "rpc_shapes.ml");
   var
    include = Bin_shape[18][1],
    t_of_sexp = include[2],
    sexp_of_t = include[3],
    caller_identity =
      caml_call1(Bin_shape[5][1], "0aa53549-ad88-4b4f-abc7-1f8453e7aa11"),
    include$0 =
      caml_call1
       (Core_Binable[16][5][2], [0, t_of_sexp, sexp_of_t, caller_identity]),
    bin_size_t = include$0[1],
    bin_write_t = include$0[2],
    bin_read_t = include$0[3],
    bin_shape_t = include$0[5],
    _a_ =
      [0,
       [0,
        cst_Streaming_rpc$2,
        [0,
         caml_call1
          (Bin_prot_Shape[4],
           [0,
            [0, cst_query$5, bin_shape_t],
            [0,
             [0, cst_initial_response$2, bin_shape_t],
             [0,
              [0, cst_update_response$2, bin_shape_t],
              [0, [0, cst_error$2, bin_shape_t], 0]]]]),
         0]],
       [0, [0, cst_Unknown$1, 0], 0]],
    _b_ =
      [0,
       [0,
        cst_One_way$2,
        [0,
         caml_call1(Bin_prot_Shape[4], [0, [0, cst_msg$2, bin_shape_t], 0]),
         0]],
       _a_],
    _c_ =
      [0,
       [0,
        cst_Rpc$2,
        [0,
         caml_call1
          (Bin_prot_Shape[4],
           [0,
            [0, cst_query$5, bin_shape_t],
            [0, [0, cst_response$2, bin_shape_t], 0]]),
         0]],
       _b_],
    _d_ = caml_call1(Bin_prot_Shape[5], _c_),
    _e_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$1), 0, _d_], 0],
    _f_ = caml_call1(Bin_shape[4][1], "src/rpc_shapes.ml:26:4"),
    group = caml_call2(Bin_prot_Shape[2], _f_, _e_),
    _g_ = caml_call1(Bin_shape[2][1], cst_t$1),
    bin_shape_t$0 = caml_call1(caml_call2(Bin_prot_Shape[10], group, _g_), 0),
    cst_Unknown$0 = cst_Unknown$1,
    cst_Rpc$1 = cst_Rpc$2,
    cst_One_way$1 = cst_One_way$2,
    cst_Streaming_rpc$1 = cst_Streaming_rpc$2,
    _ai_ = [0, 0],
    _Z_ = [0, cst_Unknown$1],
    ___ = [0, cst_response$2],
    _$_ = [0, cst_query$5],
    _aa_ = [0, cst_Rpc$2],
    _ab_ = [0, cst_msg$2],
    _ac_ = [0, cst_One_way$2],
    _ad_ = [0, cst_error$2],
    _ae_ = [0, cst_update_response$2],
    _af_ = [0, cst_initial_response$2],
    _ag_ = [0, cst_query$5],
    _ah_ = [0, cst_Streaming_rpc$2],
    _O_ = [0, cst_Unknown$1],
    _P_ = [0, cst_response$2],
    _Q_ = [0, cst_query$5],
    _R_ = [0, cst_Rpc$2],
    _S_ = [0, cst_msg$2],
    _T_ = [0, cst_One_way$2],
    _U_ = [0, cst_error$2],
    _V_ = [0, cst_update_response$2],
    _W_ = [0, cst_initial_response$2],
    _X_ = [0, cst_query$5],
    _Y_ = [0, cst_Streaming_rpc$2],
    _D_ = [0, cst_Unknown$1],
    _E_ = [0, cst_response$2],
    _F_ = [0, cst_query$5],
    _G_ = [0, cst_Rpc$2],
    _H_ = [0, cst_msg$2],
    _I_ = [0, cst_One_way$2],
    _J_ = [0, cst_error$2],
    _K_ = [0, cst_update_response$2],
    _L_ = [0, cst_initial_response$2],
    _M_ = [0, cst_query$5],
    _N_ = [0, cst_Streaming_rpc$2],
    cst_response$1 = cst_response$2,
    cst_query$4 = cst_query$5,
    cst_msg$1 = cst_msg$2,
    cst_error$1 = cst_error$2,
    cst_update_response$1 = cst_update_response$2,
    cst_initial_response$1 = cst_initial_response$2,
    cst_query$3 = cst_query$5,
    _C_ = [1, cst_src_rpc_shapes_ml_Stable_J$0],
    cst_src_rpc_shapes_ml_Stable_J = cst_src_rpc_shapes_ml_Stable_J$0,
    _i_ = [0, cst_Unknown$1],
    _j_ = [0, cst_response$2],
    _k_ = [0, cst_query$5],
    _l_ = [0, cst_Rpc$2],
    _m_ = [0, cst_msg$2],
    _n_ = [0, cst_One_way$2],
    _o_ = [0, cst_error$2],
    _p_ = [0, cst_update_response$2],
    _q_ = [0, cst_initial_response$2],
    _r_ = [0, cst_query$5],
    _s_ = [0, cst_Streaming_rpc$2],
    cst_response = cst_response$2,
    cst_query$0 = cst_query$5,
    cst_msg = cst_msg$2,
    cst_error = cst_error$2,
    cst_update_response = cst_update_response$2,
    cst_initial_response = cst_initial_response$2,
    cst_query = cst_query$5,
    _h_ = [1, cst_src_rpc_shapes_ml_Stable_V$0],
    cst_src_rpc_shapes_ml_Stable_V = cst_src_rpc_shapes_ml_Stable_V$0,
    cst_d8669bfc_1cdf_11ee_9283_aa = "d8669bfc-1cdf-11ee-9283-aa42dc4c5cc4",
    _u_ = [0, [0, cst_Unknown$1, 0], 0],
    cst_error$0 = cst_error$2,
    cst_update_response$0 = cst_update_response$2,
    cst_initial_response$0 = cst_initial_response$2,
    cst_query$1 = cst_query$5,
    cst_Streaming_rpc = cst_Streaming_rpc$2,
    cst_msg$0 = cst_msg$2,
    cst_One_way = cst_One_way$2,
    cst_response$0 = cst_response$2,
    cst_query$2 = cst_query$5,
    cst_Rpc = cst_Rpc$2,
    cst_t = cst_t$1,
    cst_src_rpc_shapes_ml_67_6 = "src/rpc_shapes.ml:67:6",
    cst_t$0 = cst_t$1,
    cst_Rpc$0 = cst_Rpc$2,
    cst_One_way$0 = cst_One_way$2,
    cst_Streaming_rpc$0 = cst_Streaming_rpc$2,
    cst_Unknown = cst_Unknown$1,
    cst_async_rpc_kernel = cst_async_rpc_kernel$0,
    cst_Async_rpc_kernel_Rpc_shape = cst_Async_rpc_kernel_Rpc_shape$0;
   function bin_size_t$0(param){
    if(typeof param === "number") return 1;
    switch(param[0]){
      case 0:
       var
        v2 = param[2],
        v1 = param[1],
        _bb_ = caml_call1(bin_size_t, v1),
        size = caml_call2(Bin_prot_Common[23], 1, _bb_),
        _bc_ = caml_call1(bin_size_t, v2);
       return caml_call2(Bin_prot_Common[23], size, _bc_);
      case 1:
       var v1$0 = param[1], _bd_ = caml_call1(bin_size_t, v1$0);
       return caml_call2(Bin_prot_Common[23], 1, _bd_);
      default:
       var
        v4 = param[4],
        v3 = param[3],
        v2$0 = param[2],
        v1$1 = param[1],
        _be_ = caml_call1(bin_size_t, v1$1),
        size$0 = caml_call2(Bin_prot_Common[23], 1, _be_),
        _bf_ = caml_call1(bin_size_t, v2$0),
        size$1 = caml_call2(Bin_prot_Common[23], size$0, _bf_),
        _bg_ = caml_call1(bin_size_t, v3),
        size$2 = caml_call2(Bin_prot_Common[23], size$1, _bg_),
        _bh_ = caml_call1(bin_size_t, v4);
       return caml_call2(Bin_prot_Common[23], size$2, _bh_);
    }
   }
   function bin_write_t$0(buf, pos, param){
    if(typeof param === "number")
     return caml_call3(Bin_prot_Write[30], buf, pos, 3);
    switch(param[0]){
      case 0:
       var
        v2 = param[2],
        v1 = param[1],
        pos$0 = caml_call3(Bin_prot_Write[30], buf, pos, 0),
        pos$1 = caml_call3(bin_write_t, buf, pos$0, v1);
       return caml_call3(bin_write_t, buf, pos$1, v2);
      case 1:
       var
        v1$0 = param[1],
        pos$2 = caml_call3(Bin_prot_Write[30], buf, pos, 1);
       return caml_call3(bin_write_t, buf, pos$2, v1$0);
      default:
       var
        v4 = param[4],
        v3 = param[3],
        v2$0 = param[2],
        v1$1 = param[1],
        pos$3 = caml_call3(Bin_prot_Write[30], buf, pos, 2),
        pos$4 = caml_call3(bin_write_t, buf, pos$3, v1$1),
        pos$5 = caml_call3(bin_write_t, buf, pos$4, v2$0),
        pos$6 = caml_call3(bin_write_t, buf, pos$5, v3);
       return caml_call3(bin_write_t, buf, pos$6, v4);
    }
   }
   var bin_writer_t = [0, bin_size_t$0, bin_write_t$0];
   function bin_read_t$0(buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19], cst_src_rpc_shapes_ml_Stable_V, pos_ref[1]);
   }
   function bin_read_t$1(buf, pos_ref){
    var match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
    if(3 < match >>> 0)
     return caml_call2(Bin_prot_Common[18], _h_, pos_ref[1]);
    switch(match){
      case 0:
       var
        v_query = caml_call2(bin_read_t, buf, pos_ref),
        v_response = caml_call2(bin_read_t, buf, pos_ref);
       return [0, v_query, v_response];
      case 1:
       var v_msg = caml_call2(bin_read_t, buf, pos_ref); return [1, v_msg];
      case 2:
       var
        v_query$0 = caml_call2(bin_read_t, buf, pos_ref),
        v_initial_response = caml_call2(bin_read_t, buf, pos_ref),
        v_update_response = caml_call2(bin_read_t, buf, pos_ref),
        v_error = caml_call2(bin_read_t, buf, pos_ref);
       return [2, v_query$0, v_initial_response, v_update_response, v_error];
      default: return 0;
    }
   }
   var
    bin_reader_t = [0, bin_read_t$1, bin_read_t$0],
    bin_t = [0, bin_shape_t$0, bin_writer_t, bin_reader_t];
   function t_of_sexp$0(sexp_005){
    a:
    {
     if(0 === sexp_005[0]){
      var _aY_ = sexp_005[1];
      b:
      if(caml_string_notequal(_aY_, cst_One_way$2)){
       c:
       if(caml_string_notequal(_aY_, cst_Rpc$2)){
        d:
        if(caml_string_notequal(_aY_, cst_Streaming_rpc$2)){
         if(caml_string_notequal(_aY_, cst_Unknown$1)){
          if(! caml_string_notequal(_aY_, cst_one_way)) break b;
          if(! caml_string_notequal(_aY_, cst_rpc)) break c;
          if(! caml_string_notequal(_aY_, cst_streaming_rpc)) break d;
          if(caml_string_notequal(_aY_, cst_unknown)) break a;
         }
         return 0;
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[9], error_source_003, sexp_005);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[9], error_source_003, sexp_005);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[9], error_source_003, sexp_005);
     }
     var _aZ_ = sexp_005[1];
     if(! _aZ_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_003, sexp_005);
     var _a0_ = _aZ_[1];
     if(0 !== _a0_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_003, sexp_005);
     var _a1_ = _a0_[1];
     b:
     if(caml_string_notequal(_a1_, cst_One_way$2)){
      c:
      if(caml_string_notequal(_a1_, cst_Rpc$2)){
       d:
       if(caml_string_notequal(_a1_, cst_Streaming_rpc$2)){
        if(caml_string_notequal(_a1_, cst_Unknown$1)){
         if(! caml_string_notequal(_a1_, cst_one_way)) break b;
         if(! caml_string_notequal(_a1_, cst_rpc)) break c;
         if(! caml_string_notequal(_a1_, cst_streaming_rpc)) break d;
         if(caml_string_notequal(_a1_, cst_unknown)) break a;
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
       }
       var
        sexps_010 = _aZ_[2],
        _a2_ =
          function(param){
           var
            _a$_ = param[2],
            _ba_ = _a$_[2],
            error = _ba_[2][1],
            update_response = _ba_[1],
            initial_response = _a$_[1],
            query = param[1];
           return [2, query, initial_response, update_response, error];
          },
        _a3_ = 0,
        _a4_ =
          function(param){
           return caml_string_notequal(param, cst_error$2)
                   ? caml_string_notequal
                      (param, cst_initial_response$2)
                     ? caml_string_notequal
                        (param, cst_query$5)
                       ? caml_string_notequal
                          (param, cst_update_response$2)
                         ? -1
                         : 2
                       : 0
                     : 1
                   : 3;
          };
       return caml_call7
               (Sexplib0_Sexp_conv_record[4],
                error_source_003,
                sexp_005,
                [0,
                 cst_query,
                 1,
                 t_of_sexp,
                 [0,
                  cst_initial_response,
                  1,
                  t_of_sexp,
                  [0,
                   cst_update_response,
                   1,
                   t_of_sexp,
                   [0, cst_error, 1, t_of_sexp, 0]]]],
                _a4_,
                _a3_,
                _a2_,
                sexps_010);
      }
      var
       sexps_006 = _aZ_[2],
       _a5_ =
         function(param){
          var response = param[2][1], query = param[1];
          return [0, query, response];
         },
       _a6_ = 0,
       _a7_ =
         function(param){
          return caml_string_notequal(param, cst_query$5)
                  ? caml_string_notequal(param, cst_response$2) ? -1 : 1
                  : 0;
         };
      return caml_call7
              (Sexplib0_Sexp_conv_record[4],
               error_source_003,
               sexp_005,
               [0,
                cst_query$0,
                1,
                t_of_sexp,
                [0, cst_response, 1, t_of_sexp, 0]],
               _a7_,
               _a6_,
               _a5_,
               sexps_006);
     }
     var
      sexps_008 = _aZ_[2],
      _a8_ = function(param){var msg = param[1]; return [1, msg];},
      _a9_ = 0,
      _a__ =
        function(param){
         return caml_string_notequal(param, cst_msg$2) ? -1 : 0;
        };
     return caml_call7
             (Sexplib0_Sexp_conv_record[4],
              error_source_003,
              sexp_005,
              [0, cst_msg, 1, t_of_sexp, 0],
              _a__,
              _a9_,
              _a8_,
              sexps_008);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_003, sexp_005);
   }
   function sexp_of_t$0(param){
    if(typeof param === "number") return _i_;
    switch(param[0]){
      case 0:
       var
        response_014 = param[2],
        query_012 = param[1],
        arg_015 = caml_call1(sexp_of_t, response_014),
        bnds_011 = [0, [1, [0, _j_, [0, arg_015, 0]]], 0],
        arg_013 = caml_call1(sexp_of_t, query_012),
        bnds_011$0 = [0, [1, [0, _k_, [0, arg_013, 0]]], bnds_011];
       return [1, [0, _l_, bnds_011$0]];
      case 1:
       var
        msg_017 = param[1],
        arg_018 = caml_call1(sexp_of_t, msg_017),
        bnds_016 = [0, [1, [0, _m_, [0, arg_018, 0]]], 0];
       return [1, [0, _n_, bnds_016]];
      default:
       var
        error_026 = param[4],
        update_response_024 = param[3],
        initial_response_022 = param[2],
        query_020 = param[1],
        arg_027 = caml_call1(sexp_of_t, error_026),
        bnds_019 = [0, [1, [0, _o_, [0, arg_027, 0]]], 0],
        arg_025 = caml_call1(sexp_of_t, update_response_024),
        bnds_019$0 = [0, [1, [0, _p_, [0, arg_025, 0]]], bnds_019],
        arg_023 = caml_call1(sexp_of_t, initial_response_022),
        bnds_019$1 = [0, [1, [0, _q_, [0, arg_023, 0]]], bnds_019$0],
        arg_021 = caml_call1(sexp_of_t, query_020),
        bnds_019$2 = [0, [1, [0, _r_, [0, arg_021, 0]]], bnds_019$1];
       return [1, [0, _s_, bnds_019$2]];
    }
   }
   var
    t_of_sexp$1 = Bin_shape[19][2],
    sexp_of_t$1 = Bin_shape[19][3],
    compare = Bin_shape[19][1];
   function equal(x_031, x_032){
    return 0 === caml_call2(compare, x_031, x_032) ? 1 : 0;
   }
   function hash_fold_t(s, t){
    var _aX_ = caml_call1(Bin_shape[19][5], t);
    return caml_call2(Core_Md5[36], s, _aX_);
   }
   var
    to_binable = Bin_shape[19][5],
    of_binable = Bin_shape[19][6],
    caller_identity$0 =
      caml_call1(Bin_shape[5][1], cst_d8669bfc_1cdf_11ee_9283_aa),
    _t_ = Bin_prot_Md5[12][1],
    include$1 =
      caml_call1
       (caml_call1
         (Core_Binable[16][1][2], [0, _t_[3], _t_[4], _t_[5], _t_[6], _t_[7]]),
        [0, to_binable, of_binable, caller_identity$0]),
    bin_size_t$1 = include$1[1],
    bin_write_t$1 = include$1[2],
    bin_read_t$2 = include$1[3],
    bin_shape_t$1 = include$1[5],
    _v_ =
      [0,
       [0,
        cst_Streaming_rpc,
        [0,
         caml_call1
          (Bin_prot_Shape[4],
           [0,
            [0, cst_query$1, bin_shape_t$1],
            [0,
             [0, cst_initial_response$0, bin_shape_t$1],
             [0,
              [0, cst_update_response$0, bin_shape_t$1],
              [0, [0, cst_error$0, bin_shape_t$1], 0]]]]),
         0]],
       _u_],
    _w_ =
      [0,
       [0,
        cst_One_way,
        [0,
         caml_call1(Bin_prot_Shape[4], [0, [0, cst_msg$0, bin_shape_t$1], 0]),
         0]],
       _v_],
    _x_ =
      [0,
       [0,
        cst_Rpc,
        [0,
         caml_call1
          (Bin_prot_Shape[4],
           [0,
            [0, cst_query$2, bin_shape_t$1],
            [0, [0, cst_response$0, bin_shape_t$1], 0]]),
         0]],
       _w_],
    _y_ = caml_call1(Bin_prot_Shape[5], _x_),
    _z_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t), 0, _y_], 0],
    _A_ = caml_call1(Bin_shape[4][1], cst_src_rpc_shapes_ml_67_6),
    group$0 = caml_call2(Bin_prot_Shape[2], _A_, _z_),
    _B_ = caml_call1(Bin_shape[2][1], cst_t$0),
    bin_shape_t$2 =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$0, _B_), 0);
   function bin_size_t$2(param){
    if(typeof param === "number") return 1;
    switch(param[0]){
      case 0:
       var
        v2 = param[2],
        v1 = param[1],
        _aQ_ = caml_call1(bin_size_t$1, v1),
        size = caml_call2(Bin_prot_Common[23], 1, _aQ_),
        _aR_ = caml_call1(bin_size_t$1, v2);
       return caml_call2(Bin_prot_Common[23], size, _aR_);
      case 1:
       var v1$0 = param[1], _aS_ = caml_call1(bin_size_t$1, v1$0);
       return caml_call2(Bin_prot_Common[23], 1, _aS_);
      default:
       var
        v4 = param[4],
        v3 = param[3],
        v2$0 = param[2],
        v1$1 = param[1],
        _aT_ = caml_call1(bin_size_t$1, v1$1),
        size$0 = caml_call2(Bin_prot_Common[23], 1, _aT_),
        _aU_ = caml_call1(bin_size_t$1, v2$0),
        size$1 = caml_call2(Bin_prot_Common[23], size$0, _aU_),
        _aV_ = caml_call1(bin_size_t$1, v3),
        size$2 = caml_call2(Bin_prot_Common[23], size$1, _aV_),
        _aW_ = caml_call1(bin_size_t$1, v4);
       return caml_call2(Bin_prot_Common[23], size$2, _aW_);
    }
   }
   function bin_write_t$2(buf, pos, param){
    if(typeof param === "number")
     return caml_call3(Bin_prot_Write[30], buf, pos, 3);
    switch(param[0]){
      case 0:
       var
        v2 = param[2],
        v1 = param[1],
        pos$0 = caml_call3(Bin_prot_Write[30], buf, pos, 0),
        pos$1 = caml_call3(bin_write_t$1, buf, pos$0, v1);
       return caml_call3(bin_write_t$1, buf, pos$1, v2);
      case 1:
       var
        v1$0 = param[1],
        pos$2 = caml_call3(Bin_prot_Write[30], buf, pos, 1);
       return caml_call3(bin_write_t$1, buf, pos$2, v1$0);
      default:
       var
        v4 = param[4],
        v3 = param[3],
        v2$0 = param[2],
        v1$1 = param[1],
        pos$3 = caml_call3(Bin_prot_Write[30], buf, pos, 2),
        pos$4 = caml_call3(bin_write_t$1, buf, pos$3, v1$1),
        pos$5 = caml_call3(bin_write_t$1, buf, pos$4, v2$0),
        pos$6 = caml_call3(bin_write_t$1, buf, pos$5, v3);
       return caml_call3(bin_write_t$1, buf, pos$6, v4);
    }
   }
   var bin_writer_t$0 = [0, bin_size_t$2, bin_write_t$2];
   function bin_read_t$3(buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19], cst_src_rpc_shapes_ml_Stable_J, pos_ref[1]);
   }
   function bin_read_t$4(buf, pos_ref){
    var match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
    if(3 < match >>> 0)
     return caml_call2(Bin_prot_Common[18], _C_, pos_ref[1]);
    switch(match){
      case 0:
       var
        v_query = caml_call2(bin_read_t$2, buf, pos_ref),
        v_response = caml_call2(bin_read_t$2, buf, pos_ref);
       return [0, v_query, v_response];
      case 1:
       var v_msg = caml_call2(bin_read_t$2, buf, pos_ref); return [1, v_msg];
      case 2:
       var
        v_query$0 = caml_call2(bin_read_t$2, buf, pos_ref),
        v_initial_response = caml_call2(bin_read_t$2, buf, pos_ref),
        v_update_response = caml_call2(bin_read_t$2, buf, pos_ref),
        v_error = caml_call2(bin_read_t$2, buf, pos_ref);
       return [2, v_query$0, v_initial_response, v_update_response, v_error];
      default: return 0;
    }
   }
   var
    bin_reader_t$0 = [0, bin_read_t$4, bin_read_t$3],
    bin_t$0 = [0, bin_shape_t$2, bin_writer_t$0, bin_reader_t$0];
   function equal$0(a_035, b_036){
    if(a_035 === b_036) return 1;
    a:
    {
     if(typeof a_035 === "number"){
      if(typeof b_036 === "number") return 1;
      switch(b_036[0]){case 2: return 0;case 0: break a;
      }
     }
     else
      switch(a_035[0]){
        case 0:
         if(typeof b_036 !== "number" && 0 === b_036[0]){
          var _aL_ = equal(a_035[1], b_036[1]);
          return _aL_ ? equal(a_035[2], b_036[2]) : _aL_;
         }
         return 0;
        case 1:
         if(typeof b_036 !== "number")
          switch(b_036[0]){
            case 1:
             return equal(a_035[1], b_036[1]);
            case 0:
             break a;
          }
         return 0;
        default:
         if(typeof b_036 === "number") return 0;
         switch(b_036[0]){
           case 2:
            var _aM_ = equal(a_035[1], b_036[1]);
            if(_aM_){
             var _aN_ = equal(a_035[2], b_036[2]);
             if(_aN_){
              var _aO_ = equal(a_035[3], b_036[3]);
              if(_aO_) return equal(a_035[4], b_036[4]);
              var _aP_ = _aO_;
             }
             else
              var _aP_ = _aN_;
            }
            else
             var _aP_ = _aM_;
            return _aP_;
           case 0:
            break a;
         }
      }
     return 0;
    }
    return 0;
   }
   function compare$0(a_043, b_044){
    if(a_043 === b_044) return 0;
    a:
    {
     if(typeof a_043 === "number"){
      if(typeof b_044 === "number") return 0;
      switch(b_044[0]){case 2: return 1;case 0: break a;
      }
     }
     else
      switch(a_043[0]){
        case 0:
         if(typeof b_044 !== "number" && 0 === b_044[0]){
          var n = caml_call2(compare, a_043[1], b_044[1]);
          return 0 === n ? caml_call2(compare, a_043[2], b_044[2]) : n;
         }
         return -1;
        case 1:
         if(typeof b_044 !== "number")
          switch(b_044[0]){
            case 1:
             return caml_call2(compare, a_043[1], b_044[1]);
            case 0:
             break a;
          }
         return -1;
        default:
         if(typeof b_044 === "number") return -1;
         switch(b_044[0]){
           case 2:
            var n$0 = caml_call2(compare, a_043[1], b_044[1]);
            if(0 !== n$0) return n$0;
            var n$1 = caml_call2(compare, a_043[2], b_044[2]);
            if(0 !== n$1) return n$1;
            var n$2 = caml_call2(compare, a_043[3], b_044[3]);
            return 0 === n$2 ? caml_call2(compare, a_043[4], b_044[4]) : n$2;
           case 0:
            break a;
         }
      }
     return 1;
    }
    return 1;
   }
   function hash_fold_t$0(hsv, arg){
    if(typeof arg === "number") return caml_call2(Base_Hash[3], hsv, 3);
    switch(arg[0]){
      case 0:
       var
        hsv$0 = caml_call2(Base_Hash[3], hsv, 0),
        hsv$1 = hash_fold_t(hsv$0, arg[1]);
       return hash_fold_t(hsv$1, arg[2]);
      case 1:
       var hsv$2 = caml_call2(Base_Hash[3], hsv, 1);
       return hash_fold_t(hsv$2, arg[1]);
      default:
       var
        hsv$3 = caml_call2(Base_Hash[3], hsv, 2),
        hsv$4 = hash_fold_t(hsv$3, arg[1]),
        hsv$5 = hash_fold_t(hsv$4, arg[2]),
        hsv$6 = hash_fold_t(hsv$5, arg[3]);
       return hash_fold_t(hsv$6, arg[4]);
    }
   }
   function hash(arg){
    var hsv = caml_call2(Base_Hash[11], 0, 0), _aK_ = hash_fold_t$0(hsv, arg);
    return caml_call1(Base_Hash[9], _aK_);
   }
   function t_of_sexp$2(sexp_055){
    a:
    {
     if(0 === sexp_055[0]){
      var _av_ = sexp_055[1];
      b:
      if(caml_string_notequal(_av_, cst_One_way$2)){
       c:
       if(caml_string_notequal(_av_, cst_Rpc$2)){
        d:
        if(caml_string_notequal(_av_, cst_Streaming_rpc$2)){
         if(caml_string_notequal(_av_, cst_Unknown$1)){
          if(! caml_string_notequal(_av_, cst_one_way)) break b;
          if(! caml_string_notequal(_av_, cst_rpc)) break c;
          if(! caml_string_notequal(_av_, cst_streaming_rpc)) break d;
          if(caml_string_notequal(_av_, cst_unknown)) break a;
         }
         return 0;
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[9], error_source_053, sexp_055);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[9], error_source_053, sexp_055);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[9], error_source_053, sexp_055);
     }
     var _aw_ = sexp_055[1];
     if(! _aw_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_053, sexp_055);
     var _ax_ = _aw_[1];
     if(0 !== _ax_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_053, sexp_055);
     var _ay_ = _ax_[1];
     b:
     if(caml_string_notequal(_ay_, cst_One_way$2)){
      c:
      if(caml_string_notequal(_ay_, cst_Rpc$2)){
       d:
       if(caml_string_notequal(_ay_, cst_Streaming_rpc$2)){
        if(caml_string_notequal(_ay_, cst_Unknown$1)){
         if(! caml_string_notequal(_ay_, cst_one_way)) break b;
         if(! caml_string_notequal(_ay_, cst_rpc)) break c;
         if(! caml_string_notequal(_ay_, cst_streaming_rpc)) break d;
         if(caml_string_notequal(_ay_, cst_unknown)) break a;
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[7], error_source_053, sexp_055);
       }
       var
        sexps_060 = _aw_[2],
        _az_ =
          function(param){
           var
            _aI_ = param[2],
            _aJ_ = _aI_[2],
            error = _aJ_[2][1],
            update_response = _aJ_[1],
            initial_response = _aI_[1],
            query = param[1];
           return [2, query, initial_response, update_response, error];
          },
        _aA_ = 0,
        _aB_ =
          function(param){
           return caml_string_notequal(param, cst_error$2)
                   ? caml_string_notequal
                      (param, cst_initial_response$2)
                     ? caml_string_notequal
                        (param, cst_query$5)
                       ? caml_string_notequal
                          (param, cst_update_response$2)
                         ? -1
                         : 2
                       : 0
                     : 1
                   : 3;
          };
       return caml_call7
               (Sexplib0_Sexp_conv_record[4],
                error_source_053,
                sexp_055,
                [0,
                 cst_query$3,
                 1,
                 t_of_sexp$1,
                 [0,
                  cst_initial_response$1,
                  1,
                  t_of_sexp$1,
                  [0,
                   cst_update_response$1,
                   1,
                   t_of_sexp$1,
                   [0, cst_error$1, 1, t_of_sexp$1, 0]]]],
                _aB_,
                _aA_,
                _az_,
                sexps_060);
      }
      var
       sexps_056 = _aw_[2],
       _aC_ =
         function(param){
          var response = param[2][1], query = param[1];
          return [0, query, response];
         },
       _aD_ = 0,
       _aE_ =
         function(param){
          return caml_string_notequal(param, cst_query$5)
                  ? caml_string_notequal(param, cst_response$2) ? -1 : 1
                  : 0;
         };
      return caml_call7
              (Sexplib0_Sexp_conv_record[4],
               error_source_053,
               sexp_055,
               [0,
                cst_query$4,
                1,
                t_of_sexp$1,
                [0, cst_response$1, 1, t_of_sexp$1, 0]],
               _aE_,
               _aD_,
               _aC_,
               sexps_056);
     }
     var
      sexps_058 = _aw_[2],
      _aF_ = function(param){var msg = param[1]; return [1, msg];},
      _aG_ = 0,
      _aH_ =
        function(param){
         return caml_string_notequal(param, cst_msg$2) ? -1 : 0;
        };
     return caml_call7
             (Sexplib0_Sexp_conv_record[4],
              error_source_053,
              sexp_055,
              [0, cst_msg$1, 1, t_of_sexp$1, 0],
              _aH_,
              _aG_,
              _aF_,
              sexps_058);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_053, sexp_055);
   }
   function sexp_of_t$2(param){
    if(typeof param === "number") return _D_;
    switch(param[0]){
      case 0:
       var
        response_064 = param[2],
        query_062 = param[1],
        arg_065 = caml_call1(sexp_of_t$1, response_064),
        bnds_061 = [0, [1, [0, _E_, [0, arg_065, 0]]], 0],
        arg_063 = caml_call1(sexp_of_t$1, query_062),
        bnds_061$0 = [0, [1, [0, _F_, [0, arg_063, 0]]], bnds_061];
       return [1, [0, _G_, bnds_061$0]];
      case 1:
       var
        msg_067 = param[1],
        arg_068 = caml_call1(sexp_of_t$1, msg_067),
        bnds_066 = [0, [1, [0, _H_, [0, arg_068, 0]]], 0];
       return [1, [0, _I_, bnds_066]];
      default:
       var
        error_076 = param[4],
        update_response_074 = param[3],
        initial_response_072 = param[2],
        query_070 = param[1],
        arg_077 = caml_call1(sexp_of_t$1, error_076),
        bnds_069 = [0, [1, [0, _J_, [0, arg_077, 0]]], 0],
        arg_075 = caml_call1(sexp_of_t$1, update_response_074),
        bnds_069$0 = [0, [1, [0, _K_, [0, arg_075, 0]]], bnds_069],
        arg_073 = caml_call1(sexp_of_t$1, initial_response_072),
        bnds_069$1 = [0, [1, [0, _L_, [0, arg_073, 0]]], bnds_069$0],
        arg_071 = caml_call1(sexp_of_t$1, query_070),
        bnds_069$2 = [0, [1, [0, _M_, [0, arg_071, 0]]], bnds_069$1];
       return [1, [0, _N_, bnds_069$2]];
    }
   }
   function sexp_of_t$3(t){
    var _au_ = caml_call1(Bin_prot_Shape[16], t);
    return caml_call1(Core[558], _au_);
   }
   function sexp_of_t$4(param){
    if(typeof param === "number") return _O_;
    switch(param[0]){
      case 0:
       var
        response_081 = param[2],
        query_079 = param[1],
        arg_082 = sexp_of_t$3(response_081),
        bnds_078 = [0, [1, [0, _P_, [0, arg_082, 0]]], 0],
        arg_080 = sexp_of_t$3(query_079),
        bnds_078$0 = [0, [1, [0, _Q_, [0, arg_080, 0]]], bnds_078];
       return [1, [0, _R_, bnds_078$0]];
      case 1:
       var
        msg_084 = param[1],
        arg_085 = sexp_of_t$3(msg_084),
        bnds_083 = [0, [1, [0, _S_, [0, arg_085, 0]]], 0];
       return [1, [0, _T_, bnds_083]];
      default:
       var
        error_093 = param[4],
        update_response_091 = param[3],
        initial_response_089 = param[2],
        query_087 = param[1],
        arg_094 = sexp_of_t$3(error_093),
        bnds_086 = [0, [1, [0, _U_, [0, arg_094, 0]]], 0],
        arg_092 = sexp_of_t$3(update_response_091),
        bnds_086$0 = [0, [1, [0, _V_, [0, arg_092, 0]]], bnds_086],
        arg_090 = sexp_of_t$3(initial_response_089),
        bnds_086$1 = [0, [1, [0, _W_, [0, arg_090, 0]]], bnds_086$0],
        arg_088 = sexp_of_t$3(query_087),
        bnds_086$2 = [0, [1, [0, _X_, [0, arg_088, 0]]], bnds_086$1];
       return [1, [0, _Y_, bnds_086$2]];
    }
   }
   function sexp_of_t$5(param){
    if(typeof param === "number") return _Z_;
    switch(param[0]){
      case 0:
       var
        response_098 = param[2],
        query_096 = param[1],
        arg_099 = caml_call1(Bin_shape[19][3], response_098),
        bnds_095 = [0, [1, [0, ___, [0, arg_099, 0]]], 0],
        arg_097 = caml_call1(Bin_shape[19][3], query_096),
        bnds_095$0 = [0, [1, [0, _$_, [0, arg_097, 0]]], bnds_095];
       return [1, [0, _aa_, bnds_095$0]];
      case 1:
       var
        msg_101 = param[1],
        arg_102 = caml_call1(Bin_shape[19][3], msg_101),
        bnds_100 = [0, [1, [0, _ab_, [0, arg_102, 0]]], 0];
       return [1, [0, _ac_, bnds_100]];
      default:
       var
        error_110 = param[4],
        update_response_108 = param[3],
        initial_response_106 = param[2],
        query_104 = param[1],
        arg_111 = caml_call1(Bin_shape[19][3], error_110),
        bnds_103 = [0, [1, [0, _ad_, [0, arg_111, 0]]], 0],
        arg_109 = caml_call1(Bin_shape[19][3], update_response_108),
        bnds_103$0 = [0, [1, [0, _ae_, [0, arg_109, 0]]], bnds_103],
        arg_107 = caml_call1(Bin_shape[19][3], initial_response_106),
        bnds_103$1 = [0, [1, [0, _af_, [0, arg_107, 0]]], bnds_103$0],
        arg_105 = caml_call1(Bin_shape[19][3], query_104),
        bnds_103$2 = [0, [1, [0, _ag_, [0, arg_105, 0]]], bnds_103$1];
       return [1, [0, _ah_, bnds_103$2]];
    }
   }
   function compare$1(a_112, b_113){
    if(a_112 === b_113) return 0;
    a:
    {
     if(typeof a_112 === "number"){
      if(typeof b_113 === "number") return 0;
      switch(b_113[0]){case 2: return 1;case 0: break a;
      }
     }
     else
      switch(a_112[0]){
        case 0:
         if(typeof b_113 !== "number" && 0 === b_113[0]){
          var n = caml_call2(Bin_shape[19][1], a_112[1], b_113[1]);
          return 0 === n
                  ? caml_call2(Bin_shape[19][1], a_112[2], b_113[2])
                  : n;
         }
         return -1;
        case 1:
         if(typeof b_113 !== "number")
          switch(b_113[0]){
            case 1:
             return caml_call2(Bin_shape[19][1], a_112[1], b_113[1]);
            case 0:
             break a;
          }
         return -1;
        default:
         if(typeof b_113 === "number") return -1;
         switch(b_113[0]){
           case 2:
            var n$0 = caml_call2(Bin_shape[19][1], a_112[1], b_113[1]);
            if(0 !== n$0) return n$0;
            var n$1 = caml_call2(Bin_shape[19][1], a_112[2], b_113[2]);
            if(0 !== n$1) return n$1;
            var n$2 = caml_call2(Bin_shape[19][1], a_112[3], b_113[3]);
            return 0 === n$2
                    ? caml_call2(Bin_shape[19][1], a_112[4], b_113[4])
                    : n$2;
           case 0:
            break a;
         }
      }
     return 1;
    }
    return 1;
   }
   function rpc(v0, v1){return [0, v0, v1];}
   function one_way(v0){return [1, v0];}
   function streaming_rpc(v0, v1, v2, v3){return [2, v0, v1, v2, v3];}
   var unknown = 0;
   function is_rpc(param){
    if(typeof param !== "number" && 0 === param[0]) return 1;
    return 0;
   }
   function is_one_way(param){
    if(typeof param !== "number" && 1 === param[0]) return 1;
    return 0;
   }
   function is_streaming_rpc(param){
    if(typeof param !== "number" && 2 === param[0]) return 1;
    return 0;
   }
   function is_unknown(param){return typeof param === "number" ? 1 : 0;}
   function rpc_val(param){
    if(typeof param !== "number" && 0 === param[0]){
     var v1 = param[2], v0 = param[1];
     return [0, [0, [0, -571831544, v0], [0, 571256449, v1]]];
    }
    return 0;
   }
   function one_way_val(param){
    if(typeof param !== "number" && 1 === param[0]){
     var v0 = param[1];
     return [0, [0, 5446209, v0]];
    }
    return 0;
   }
   function streaming_rpc_val(param){
    if(typeof param !== "number" && 2 === param[0]){
     var v3 = param[4], v2 = param[3], v1 = param[2], v0 = param[1];
     return [0,
             [0,
              [0, -571831544, v0],
              [0, 484572, v1],
              [0, 391812791, v2],
              [0, -215364664, v3]]];
    }
    return 0;
   }
   function unknown_val(param){return typeof param === "number" ? _ai_ : 0;}
   var
    rpc$0 = [0, cst_Rpc$0, 0, rpc],
    one_way$0 = [0, cst_One_way$0, 1, one_way],
    streaming_rpc$0 = [0, cst_Streaming_rpc$0, 2, streaming_rpc],
    unknown$0 = [0, cst_Unknown, 3, unknown];
   function fold(init, rpc_fun, one_way_fun, streaming_rpc_fun, unknown_fun){
    return caml_call2
            (unknown_fun,
             caml_call2
              (streaming_rpc_fun,
               caml_call2
                (one_way_fun, caml_call2(rpc_fun, init, rpc$0), one_way$0),
               streaming_rpc$0),
             unknown$0);
   }
   function iter(rpc_fun, one_way_fun, streaming_rpc_fun, unknown_fun){
    caml_call1(rpc_fun, rpc$0);
    caml_call1(one_way_fun, one_way$0);
    caml_call1(streaming_rpc_fun, streaming_rpc$0);
    return caml_call1(unknown_fun, unknown$0);
   }
   function map(t, rpc_fun, one_way_fun, streaming_rpc_fun, unknown_fun){
    if(typeof t === "number") return caml_call1(unknown_fun, unknown$0);
    switch(t[0]){
      case 0:
       var v1 = t[2], v0 = t[1]; return caml_call3(rpc_fun, rpc$0, v0, v1);
      case 1:
       var v0$0 = t[1]; return caml_call2(one_way_fun, one_way$0, v0$0);
      default:
       var v3 = t[4], v2 = t[3], v1$0 = t[2], v0$1 = t[1];
       return caml_call5
               (streaming_rpc_fun, streaming_rpc$0, v0$1, v1$0, v2, v3);
    }
   }
   function make_matcher
   (rpc_fun, one_way_fun, streaming_rpc_fun, unknown_fun, compile_acc){
    var
     match = caml_call2(rpc_fun, rpc$0, compile_acc),
     compile_acc$0 = match[2],
     rpc_gen = match[1],
     match$0 = caml_call2(one_way_fun, one_way$0, compile_acc$0),
     compile_acc$1 = match$0[2],
     one_way_gen = match$0[1],
     match$1 = caml_call2(streaming_rpc_fun, streaming_rpc$0, compile_acc$1),
     compile_acc$2 = match$1[2],
     streaming_rpc_gen = match$1[1],
     match$2 = caml_call2(unknown_fun, unknown$0, compile_acc$2),
     compile_acc$3 = match$2[2],
     unknown_gen = match$2[1];
    function _ap_(param){return rpc_gen;}
    function _aq_(param){return one_way_gen;}
    function _ar_(param){return streaming_rpc_gen;}
    function _as_(param){return caml_call1(unknown_gen, 0);}
    return [0,
            function(_at_){return map(_at_, _ap_, _aq_, _ar_, _as_);},
            compile_acc$3];
   }
   function to_rank(param){
    if(typeof param === "number") return 3;
    switch(param[0]){case 0: return 0;case 1: return 1;default: return 2;
    }
   }
   function to_name(param){
    if(typeof param === "number") return cst_Unknown$0;
    switch(param[0]){
      case 0:
       return cst_Rpc$1;
      case 1:
       return cst_One_way$1;
      default: return cst_Streaming_rpc$1;
    }
   }
   var
    Variants =
      [0,
       rpc$0,
       one_way$0,
       streaming_rpc$0,
       unknown$0,
       fold,
       iter,
       map,
       make_matcher,
       to_rank,
       to_name,
       descriptions],
    Strict_comparison = [0, compare$1],
    _aj_ = Variants[9];
   function _ak_(a_122, b_123){return caml_call2(Core[384], a_122, b_123);}
   var same_kind = caml_call2(Core_Comparable[2], _ak_, _aj_);
   function eval_to_digest(t){
    function digest(shape){return caml_call1(Bin_prot_Shape[15], shape);}
    if(typeof t === "number") return 0;
    switch(t[0]){
      case 0:
       var response = t[2], query = t[1], _al_ = digest(response);
       return [0, digest(query), _al_];
      case 1:
       var msg = t[1]; return [1, digest(msg)];
      default:
       var
        error = t[4],
        update_response = t[3],
        initial_response = t[2],
        query$0 = t[1],
        _am_ = digest(error),
        _an_ = digest(update_response),
        _ao_ = digest(initial_response);
       return [2, digest(query$0), _ao_, _an_, _am_];
    }
   }
   caml_call1(Ppx_inline_test_lib[7], cst_async_rpc_kernel);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_rpc_kernel_Rpc_shape);
   var
    Async_rpc_kernel_Rpc_shapes =
      [0,
       sexp_of_t$4,
       [0,
        sexp_of_t$5,
        rpc,
        one_way,
        streaming_rpc,
        unknown,
        is_rpc,
        is_one_way,
        is_streaming_rpc,
        is_unknown,
        rpc_val,
        one_way_val,
        streaming_rpc_val,
        unknown_val,
        Variants,
        same_kind,
        Strict_comparison],
       eval_to_digest,
       [0,
        [0,
         bin_size_t$0,
         bin_write_t$0,
         bin_read_t$1,
         bin_read_t$0,
         bin_shape_t$0,
         bin_writer_t,
         bin_reader_t,
         bin_t,
         t_of_sexp$0,
         sexp_of_t$0],
        [0,
         [0,
          bin_size_t$2,
          bin_write_t$2,
          bin_read_t$4,
          bin_read_t$3,
          bin_shape_t$2,
          bin_writer_t$0,
          bin_reader_t$0,
          bin_t$0,
          compare$0,
          equal$0,
          hash_fold_t$0,
          hash,
          t_of_sexp$2,
          sexp_of_t$2]]]];
   runtime.caml_register_global
    (174, Async_rpc_kernel_Rpc_shapes, cst_Async_rpc_kernel_Rpc_shape$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_rpc_kernel__Menu
//# unitInfo: Requires: Async_rpc_kernel__Description, Async_rpc_kernel__Rpc_shapes, Bin_prot__Common, Bin_prot__Shape, Bin_shape, Core, Core__Array, Core__Int, Core__List, Core__Option, Core__Set, Core__Sexp, Core__Stable, Core__String, Expect_test_config, Inline_test_config, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_expect_runtime__Test_block, Ppx_expect_runtime__Test_node, Ppx_expect_runtime__Types, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Stdlib
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst = "",
    cst_86ba5df747eec837f0b391dd49 = " 86ba5df747eec837f0b391dd49f33f9e ",
    cst_Async_rpc_kernel_Menu$0 = "Async_rpc_kernel__Menu",
    cst_async_rpc_kernel$0 = "async_rpc_kernel",
    cst_caller_versions = "caller_versions",
    cst_name = "name",
    cst_query$1 = "query",
    cst_response$3 = "response",
    cst_src_menu_ml$3 = "src/menu.ml",
    cst_versions = "versions",
    caml_check_bound = runtime.caml_check_bound,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call14
   (f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13){
    return (f.l >= 0 ? f.l : f.l = f.length) == 14
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13)
            : runtime.caml_call_gen
              (f,
               [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    version_menu_rpc_name = "__Versioned_rpc.Menu",
    Core_Int = global_data.Core__Int,
    Core = global_data.Core,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Core_Sexp = global_data.Core__Sexp,
    Async_rpc_kernel_Rpc_shapes = global_data.Async_rpc_kernel__Rpc_shapes,
    Core_List = global_data.Core__List,
    Core_String = global_data.Core__String,
    Assert_failure = global_data.Assert_failure,
    Core_Array = global_data.Core__Array,
    Async_rpc_kernel_Description = global_data.Async_rpc_kernel__Description,
    Core_Option = global_data.Core__Option,
    Core_Set = global_data.Core__Set,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Bin_shape = global_data.Bin_shape,
    Stdlib = global_data.Stdlib,
    Ppx_expect_runtime_Types = global_data.Ppx_expect_runtime__Types,
    Core_Stable = global_data.Core__Stable,
    Bin_prot_Common = global_data.Bin_prot__Common,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Expect_test_config = global_data.Expect_test_config,
    Ppx_expect_runtime_Test_block = global_data.Ppx_expect_runtime__Test_block,
    Ppx_expect_runtime_Test_node = global_data.Ppx_expect_runtime__Test_node,
    Inline_test_config = global_data.Inline_test_config;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_rpc_kernel_Menu$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_rpc_kernel$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_menu_ml$3);
   caml_call2(Ppx_inline_test_lib[6], cst_async_rpc_kernel$0, "menu.ml");
   var
    _a_ = Core_Stable[83],
    _b_ = [0, [0, caml_call1(Bin_shape[2][1], cst_query$1), 0, _a_], 0],
    _c_ = caml_call1(Bin_shape[4][1], "src/menu.ml:11:4"),
    group = caml_call2(Bin_prot_Shape[2], _c_, _b_),
    _d_ = caml_call1(Bin_shape[2][1], cst_query$1),
    bin_shape_query =
      caml_call1(caml_call2(Bin_prot_Shape[10], group, _d_), 0),
    bin_size_query = Core_Stable[1],
    bin_write_query = Core_Stable[85],
    bin_writer_query = [0, bin_size_query, bin_write_query],
    bin_read_query = Core_Stable[89],
    bin_read_query$0 = Core_Stable[88],
    bin_reader_query = [0, bin_read_query$0, bin_read_query],
    bin_query = [0, bin_shape_query, bin_writer_query, bin_reader_query],
    _M_ = [0, "callee_menu"],
    _N_ = [0, cst_caller_versions],
    _O_ = [0, "rpc_name"],
    cst_Callee_does_not_know_this_ = "Callee does not know this rpc",
    _K_ = [0, "callee_versions"],
    _L_ = [0, cst_caller_versions],
    cst_Caller_and_callee_share_no =
      "Caller and callee share no common versions for rpc",
    cst_Bug_in_Async_rpc_kernel_Wi =
      "Bug in Async_rpc_kernel.With_digests_in_sexp.sexp_of_t. Expected to find at least one such description",
    _G_ = [0, "digest"],
    _H_ = [0, "version"],
    _I_ = [0, cst_versions],
    _J_ = [0, cst_name],
    _C_ = [0, cst_versions],
    _D_ = [0, "kind"],
    _E_ = [0, cst_name],
    _F_ = [0, cst_src_menu_ml$3, 246, 12],
    _B_ = [0, "entry"],
    cst_Invalid_rpc_menu_duplicate = "Invalid rpc menu: duplicate entry",
    _x_ = [1, 785558517],
    _y_ = [1, 785558517],
    _w_ = [1, 785558517],
    _z_ = [1, -18261850],
    _A_ = [1, 785558517],
    _v_ = [0, 0],
    _s_ = [1, -1034097351],
    _t_ = [1, -1034097351],
    _u_ = [1, 199753164],
    _as_ =
      [0,
       [0, [0, cst_86ba5df747eec837f0b391dd49, [0, cst]], [0, 443, 458, 496]]],
    _at_ = [0, 443, 449, 497],
    _ay_ = [0, 377, 381, 497],
    _az_ = [0, 443, 497, 497],
    _aA_ = [0, 377, 381, 497],
    cst_src_menu_ml$2 = cst_src_menu_ml$3,
    cst_response = cst_response$3,
    cst_src_menu_ml_18_4 = "src/menu.ml:18:4",
    cst_response$0 = cst_response$3,
    _ai_ =
      [0,
       [0,
        [0, " 4c1e50c93b38c2ad0554cbd929bef3ac ", [0, cst]],
        [0, 645, 660, 698]]],
    _aj_ = [0, 645, 651, 699],
    _ao_ = [0, 576, 580, 699],
    _ap_ = [0, 645, 699, 699],
    _aq_ = [0, 576, 580, 699],
    cst_src_menu_ml$1 = cst_src_menu_ml$3,
    cst_query = cst_query$1,
    cst_src_menu_ml_31_4 = "src/menu.ml:31:4",
    cst_query$0 = cst_query$1,
    ___ =
      [0,
       [0, [0, cst_86ba5df747eec837f0b391dd49, [0, cst]], [0, 915, 930, 968]]],
    _$_ = [0, 915, 921, 969],
    _ae_ = [0, 849, 853, 969],
    _af_ = [0, 915, 969, 969],
    _ag_ = [0, 849, 853, 969],
    cst_src_menu_ml$0 = cst_src_menu_ml$3,
    cst_response$1 = cst_response$3,
    cst_src_menu_ml_38_4 = "src/menu.ml:38:4",
    cst_response$2 = cst_response$3,
    _Q_ =
      [0,
       [0,
        [0, " bfa1a67e3782922212d253c848e49da8 ", [0, cst]],
        [0, 1170, 1185, 1223]]],
    _R_ = [0, 1170, 1176, 1224],
    _W_ = [0, 1101, 1105, 1224],
    _X_ = [0, 1170, 1224, 1224],
    _Y_ = [0, 1101, 1105, 1224],
    cst_src_menu_ml = cst_src_menu_ml$3,
    cst_async_rpc_kernel = cst_async_rpc_kernel$0,
    cst_Async_rpc_kernel_Menu = cst_Async_rpc_kernel_Menu$0,
    version = 1;
   if(typeof Ppx_inline_test_lib[3] !== "number"){
    var
     Ppx_expect_test_block$2 =
       caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
     _ar_ =
       function(param){
        var
         _bT_ = caml_call1(Bin_prot_Shape[15], bin_shape_query),
         _bU_ = caml_call1(Bin_shape[19][4], _bT_);
        caml_call1(Stdlib[46], _bU_);
        var _bV_ = caml_call1(Ppx_expect_runtime_Types[4][1], 0);
        return caml_call1(Ppx_expect_test_block$2[2], _bV_);
       },
     _au_ =
       caml_call3
        (Ppx_expect_runtime_Test_node[1][1],
         [0, Ppx_expect_runtime_Types[1][1]],
         _at_,
         _as_),
     _av_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 0), _au_], 0],
     _aw_ = caml_call1(Ppx_expect_runtime_Types[4][1], 2),
     _ax_ = caml_call1(Ppx_expect_runtime_Types[4][1], 1);
    caml_call14
     (Ppx_expect_test_block$2[3],
      cst_src_menu_ml$2,
      13,
      _aA_,
      _az_,
      _ay_,
      [0, Ppx_expect_runtime_Types[1][1]],
      0,
      _ax_,
      _aw_,
      0,
      0,
      Inline_test_config,
      _av_,
      _ar_);
   }
   var
    _e_ =
      caml_call1
       (Bin_prot_Shape[3], [0, Core_Stable[99], [0, Core_Stable[123], 0]]),
    _f_ = caml_call1(Core_Stable[203], _e_),
    _g_ = [0, [0, caml_call1(Bin_shape[2][1], cst_response), 0, _f_], 0],
    _h_ = caml_call1(Bin_shape[4][1], cst_src_menu_ml_18_4),
    group$0 = caml_call2(Bin_prot_Shape[2], _h_, _g_),
    _i_ = caml_call1(Bin_shape[2][1], cst_response$0),
    bin_shape_response =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$0, _i_), 0);
   function bin_size_response(v){
    function _bQ_(param){
     var
      v2 = param[2],
      v1 = param[1],
      _bR_ = caml_call1(Core_Stable[3], v1),
      size = caml_call2(Bin_prot_Common[23], 0, _bR_),
      _bS_ = caml_call1(Core_Stable[6], v2);
     return caml_call2(Bin_prot_Common[23], size, _bS_);
    }
    return caml_call2(Core_Stable[18], _bQ_, v);
   }
   function bin_write_response(buf, pos, v){
    function _bP_(buf, pos, param){
     var
      v2 = param[2],
      v1 = param[1],
      pos$0 = caml_call3(Core_Stable[101], buf, pos, v1);
     return caml_call3(Core_Stable[125], buf, pos$0, v2);
    }
    return caml_call4(Core_Stable[205], _bP_, buf, pos, v);
   }
   var bin_writer_response = [0, bin_size_response, bin_write_response];
   function bin_read_response(buf, pos_ref, vint){
    function _bO_(buf, pos_ref){
     var
      v1 = caml_call2(Core_Stable[104], buf, pos_ref),
      v2 = caml_call2(Core_Stable[128], buf, pos_ref);
     return [0, v1, v2];
    }
    return caml_call3(caml_call1(Core_Stable[209], _bO_), buf, pos_ref, vint);
   }
   function bin_read_response$0(buf, pos_ref){
    function _bN_(buf, pos_ref){
     var
      v1 = caml_call2(Core_Stable[104], buf, pos_ref),
      v2 = caml_call2(Core_Stable[128], buf, pos_ref);
     return [0, v1, v2];
    }
    return caml_call2(caml_call1(Core_Stable[208], _bN_), buf, pos_ref);
   }
   var
    bin_reader_response = [0, bin_read_response$0, bin_read_response],
    bin_response =
      [0, bin_shape_response, bin_writer_response, bin_reader_response];
   function sexp_of_response(x_005){
    function _bM_(param){
     var
      arg1_002 = param[2],
      arg0_001 = param[1],
      res0_003 = caml_call1(Core_Stable[354], arg0_001),
      res1_004 = caml_call1(Core_Stable[333], arg1_002);
     return [1, [0, res0_003, [0, res1_004, 0]]];
    }
    return caml_call2(Core_Stable[342], _bM_, x_005);
   }
   if(typeof Ppx_inline_test_lib[3] !== "number"){
    var
     Ppx_expect_test_block$1 =
       caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
     _ah_ =
       function(param){
        var
         _bJ_ = caml_call1(Bin_prot_Shape[15], bin_shape_response),
         _bK_ = caml_call1(Bin_shape[19][4], _bJ_);
        caml_call1(Stdlib[46], _bK_);
        var _bL_ = caml_call1(Ppx_expect_runtime_Types[4][1], 3);
        return caml_call1(Ppx_expect_test_block$1[2], _bL_);
       },
     _ak_ =
       caml_call3
        (Ppx_expect_runtime_Test_node[1][1],
         [0, Ppx_expect_runtime_Types[1][1]],
         _aj_,
         _ai_),
     _al_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 3), _ak_], 0],
     _am_ = caml_call1(Ppx_expect_runtime_Types[4][1], 5),
     _an_ = caml_call1(Ppx_expect_runtime_Types[4][1], 4);
    caml_call14
     (Ppx_expect_test_block$1[3],
      cst_src_menu_ml$1,
      20,
      _aq_,
      _ap_,
      _ao_,
      [0, Ppx_expect_runtime_Types[1][1]],
      0,
      _an_,
      _am_,
      0,
      0,
      Inline_test_config,
      _al_,
      _ah_);
   }
   var
    response_of_model = Async_rpc_kernel_Description[42],
    _j_ = Core_Stable[83],
    _k_ = [0, [0, caml_call1(Bin_shape[2][1], cst_query), 0, _j_], 0],
    _l_ = caml_call1(Bin_shape[4][1], cst_src_menu_ml_31_4),
    group$1 = caml_call2(Bin_prot_Shape[2], _l_, _k_),
    _m_ = caml_call1(Bin_shape[2][1], cst_query$0),
    bin_shape_query$0 =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$1, _m_), 0),
    bin_size_query$0 = Core_Stable[1],
    bin_write_query$0 = Core_Stable[85],
    bin_writer_query$0 = [0, bin_size_query$0, bin_write_query$0],
    bin_read_query$1 = Core_Stable[89],
    bin_read_query$2 = Core_Stable[88],
    bin_reader_query$0 = [0, bin_read_query$2, bin_read_query$1],
    bin_query$0 =
      [0, bin_shape_query$0, bin_writer_query$0, bin_reader_query$0],
    version$0 = 2;
   if(typeof Ppx_inline_test_lib[3] !== "number"){
    var
     Ppx_expect_test_block$0 =
       caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
     _Z_ =
       function(param){
        var
         _bG_ = caml_call1(Bin_prot_Shape[15], bin_shape_query$0),
         _bH_ = caml_call1(Bin_shape[19][4], _bG_);
        caml_call1(Stdlib[46], _bH_);
        var _bI_ = caml_call1(Ppx_expect_runtime_Types[4][1], 6);
        return caml_call1(Ppx_expect_test_block$0[2], _bI_);
       },
     _aa_ =
       caml_call3
        (Ppx_expect_runtime_Test_node[1][1],
         [0, Ppx_expect_runtime_Types[1][1]],
         _$_,
         ___),
     _ab_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 6), _aa_], 0],
     _ac_ = caml_call1(Ppx_expect_runtime_Types[4][1], 8),
     _ad_ = caml_call1(Ppx_expect_runtime_Types[4][1], 7);
    caml_call14
     (Ppx_expect_test_block$0[3],
      cst_src_menu_ml$0,
      33,
      _ag_,
      _af_,
      _ae_,
      [0, Ppx_expect_runtime_Types[1][1]],
      0,
      _ad_,
      _ac_,
      0,
      0,
      Inline_test_config,
      _ab_,
      _Z_);
   }
   var
    _n_ =
      caml_call1
       (Bin_prot_Shape[3],
        [0,
         Async_rpc_kernel_Description[43][1][9],
         [0, Async_rpc_kernel_Rpc_shapes[4][2][1][5], 0]]),
    _o_ = caml_call1(Core_Stable[203], _n_),
    _p_ = [0, [0, caml_call1(Bin_shape[2][1], cst_response$1), 0, _o_], 0],
    _q_ = caml_call1(Bin_shape[4][1], cst_src_menu_ml_38_4),
    group$2 = caml_call2(Bin_prot_Shape[2], _q_, _p_),
    _r_ = caml_call1(Bin_shape[2][1], cst_response$2),
    bin_shape_response$0 =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$2, _r_), 0);
   function bin_size_response$0(v){
    function _bD_(param){
     var
      v2 = param[2],
      v1 = param[1],
      _bE_ = caml_call1(Async_rpc_kernel_Description[43][1][5], v1),
      size = caml_call2(Bin_prot_Common[23], 0, _bE_),
      _bF_ = caml_call1(Async_rpc_kernel_Rpc_shapes[4][2][1][1], v2);
     return caml_call2(Bin_prot_Common[23], size, _bF_);
    }
    return caml_call2(Core_Stable[18], _bD_, v);
   }
   function bin_write_response$0(buf, pos, v){
    function _bC_(buf, pos, param){
     var
      v2 = param[2],
      v1 = param[1],
      pos$0 = caml_call3(Async_rpc_kernel_Description[43][1][6], buf, pos, v1);
     return caml_call3
             (Async_rpc_kernel_Rpc_shapes[4][2][1][2], buf, pos$0, v2);
    }
    return caml_call4(Core_Stable[205], _bC_, buf, pos, v);
   }
   var bin_writer_response$0 = [0, bin_size_response$0, bin_write_response$0];
   function bin_read_response$1(buf, pos_ref, vint){
    function _bB_(buf, pos_ref){
     var
      v1 = caml_call2(Async_rpc_kernel_Description[43][1][7], buf, pos_ref),
      v2 = caml_call2(Async_rpc_kernel_Rpc_shapes[4][2][1][3], buf, pos_ref);
     return [0, v1, v2];
    }
    return caml_call3(caml_call1(Core_Stable[209], _bB_), buf, pos_ref, vint);
   }
   function bin_read_response$2(buf, pos_ref){
    function _bA_(buf, pos_ref){
     var
      v1 = caml_call2(Async_rpc_kernel_Description[43][1][7], buf, pos_ref),
      v2 = caml_call2(Async_rpc_kernel_Rpc_shapes[4][2][1][3], buf, pos_ref);
     return [0, v1, v2];
    }
    return caml_call2(caml_call1(Core_Stable[208], _bA_), buf, pos_ref);
   }
   var
    bin_reader_response$0 = [0, bin_read_response$2, bin_read_response$1],
    bin_response$0 =
      [0, bin_shape_response$0, bin_writer_response$0, bin_reader_response$0];
   function sexp_of_response$0(x_010){
    function _bz_(param){
     var
      arg1_007 = param[2],
      arg0_006 = param[1],
      res0_008 = caml_call1(Async_rpc_kernel_Description[43][1][4], arg0_006),
      res1_009 =
        caml_call1(Async_rpc_kernel_Rpc_shapes[4][2][1][14], arg1_007);
     return [1, [0, res0_008, [0, res1_009, 0]]];
    }
    return caml_call2(Core_Stable[342], _bz_, x_010);
   }
   if(typeof Ppx_inline_test_lib[3] !== "number"){
    var
     Ppx_expect_test_block =
       caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
     _P_ =
       function(param){
        var
         _bw_ = caml_call1(Bin_prot_Shape[15], bin_shape_response$0),
         _bx_ = caml_call1(Bin_shape[19][4], _bw_);
        caml_call1(Stdlib[46], _bx_);
        var _by_ = caml_call1(Ppx_expect_runtime_Types[4][1], 9);
        return caml_call1(Ppx_expect_test_block[2], _by_);
       },
     _S_ =
       caml_call3
        (Ppx_expect_runtime_Test_node[1][1],
         [0, Ppx_expect_runtime_Types[1][1]],
         _R_,
         _Q_),
     _T_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 9), _S_], 0],
     _U_ = caml_call1(Ppx_expect_runtime_Types[4][1], 11),
     _V_ = caml_call1(Ppx_expect_runtime_Types[4][1], 10);
    caml_call14
     (Ppx_expect_test_block[3],
      cst_src_menu_ml,
      41,
      _Y_,
      _X_,
      _W_,
      [0, Ppx_expect_runtime_Types[1][1]],
      0,
      _V_,
      _U_,
      0,
      0,
      Inline_test_config,
      _T_,
      _P_);
   }
   function supported_rpcs(t){return caml_call1(Core_Array[45], t[1]);}
   function versions_range(t, rpc_name, max_version){
    var
     max_version$0 = caml_call2(Core_Option[39], max_version, Core_Int[45]);
    function compare(d, b_012){
     var a_011 = d[1];
     return caml_call2(Core[551], a_011, b_012);
    }
    var
     match =
       caml_call6(Core_Array[22], 0, 0, t[1], compare, -1056898635, rpc_name);
    if(! match) return _u_;
    var lb = match[1], _bt_ = 125585502;
    function _bu_(a_013){
     var
      b_014 = [0, rpc_name, max_version$0],
      _bv_ = caml_call2(Async_rpc_kernel_Description[9], a_013, b_014);
     return caml_call2(Core[89], _bv_, 0) ? 847852583 : -57574468;
    }
    var match$0 = caml_call5(Core_Array[23], 0, 0, t[1], _bu_, _bt_);
    if(! match$0) return _t_;
    var ub = match$0[1];
    return caml_call2(Core[88], ub, lb) ? [0, [0, lb, ub]] : _s_;
   }
   function supported_versions(t, rpc_name){
    var match = versions_range(t, rpc_name, 0);
    if(0 !== match[0]) return Core_Int[99][5];
    var match$0 = match[1], ub = match$0[2], lb = match$0[1];
    function _br_(i){
     var _bs_ = lb + i | 0;
     return caml_check_bound(t[1], _bs_)[1 + _bs_][2];
    }
    return caml_call2(Core_Int[99][13], (ub - lb | 0) + 1 | 0, _br_);
   }
   function index(t, description){
    var _bn_ = 125585502;
    function _bo_(a_015){
     var
      _bq_ = caml_call2(Async_rpc_kernel_Description[9], a_015, description);
     return caml_call2(Core[89], _bq_, 0) ? 847852583 : -57574468;
    }
    var match = caml_call5(Core_Array[23], 0, 0, t[1], _bo_, _bn_);
    if(! match) return 0;
    var
     i = match[1],
     x_017 = caml_check_bound(t[1], i)[1 + i],
     _bp_ =
       0 === caml_call2(Async_rpc_kernel_Description[9], x_017, description)
        ? 1
        : 0;
    return _bp_ ? [0, i] : 0;
   }
   function mem(t, description){return index(t, description) ? 1 : 0;}
   function shape_digests(t, description){
    var match = index(t, description);
    if(! match) return 0;
    var i = match[1], match$0 = t[2];
    if(! match$0) return _v_;
    var digests = match$0[1];
    return [0, caml_check_bound(digests, i)[1 + i]];
   }
   function highest_available_version(t, rpc_name, from_set){
    var
     max_version = caml_call1(Core_Set[60], from_set),
     _bk_ = versions_range(t, rpc_name, max_version);
    if(0 !== _bk_[0]) return 199753164 <= _bk_[1] ? _z_ : _A_;
    var
     match = _bk_[1],
     ub_in_descriptions = match[2],
     lb_in_descriptions = match[1];
    if(caml_call1(Core_Set[10], from_set)) return _w_;
    var
     descriptions = t[1],
     set_index$1 = caml_call1(Core_Set[9], from_set),
     set_value$1 = caml_call4(Core_Option[40], 0, 0, 0, max_version),
     description_index = ub_in_descriptions,
     set_index = set_index$1,
     set_value = set_value$1;
    for(;;){
     var
      _bl_ =
        caml_check_bound(descriptions, description_index)
          [1 + description_index]
         [2],
      c = caml_call2(Core[95], _bl_, set_value);
     if(0 === c) return [0, set_value];
     if(caml_call2(Core[92], c, 0)){
      var set_index$0 = set_index - 1 | 0;
      if(caml_call2(Core[92], set_index$0, 0)) return _x_;
      var
       _bm_ = caml_call2(Core_Set[29], from_set, set_index$0),
       set_value$0 = caml_call4(Core_Option[40], 0, 0, 0, _bm_),
       set_index = set_index$0,
       set_value = set_value$0;
     }
     else{
      var description_index$0 = description_index - 1 | 0;
      if(caml_call2(Core[92], description_index$0, lb_in_descriptions))
       return _y_;
      var description_index = description_index$0;
     }
    }
   }
   function has_some_versions(t, rpc_name){
    var match = highest_available_version(t, rpc_name, Core_Int[99][5]);
    if(1 === match[0] && 785558517 > match[1]) return 0;
    return 1;
   }
   function ensure_no_duplicates(descriptions){
    function _bc_(a_021, b_022){
     return caml_call2(Async_rpc_kernel_Description[33], a_021, b_022);
    }
    if(caml_call2(Core_Array[84], descriptions, _bc_)) return;
    var _bd_ = 0, _be_ = 0;
    function _bf_(a_023, b_024){
     return caml_call2(Async_rpc_kernel_Description[18], a_023, b_024);
    }
    var
     _bg_ = caml_call2(Core_Array[109], descriptions, _bf_),
     _bh_ = caml_call4(Core_Option[40], 0, 0, 0, _bg_)[1],
     _bi_ =
       [0,
        [1,
         [0,
          _B_,
          [0, caml_call1(Async_rpc_kernel_Description[10], _bh_), _be_]]],
        _bd_],
     _bj_ =
       [1,
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_Invalid_rpc_menu_duplicate),
         _bi_]];
    return caml_call1(Core[261], _bj_);
   }
   function of_supported_rpcs(descriptions, param){
    var descriptions$0 = caml_call1(Core_Array[24], descriptions);
    function _bb_(a_025, b_026){
     return caml_call2(Async_rpc_kernel_Description[33], a_025, b_026);
    }
    caml_call4(Core_Array[81], 0, 0, descriptions$0, _bb_);
    ensure_no_duplicates(descriptions$0);
    return [0, descriptions$0, 0];
   }
   function of_v1_response(v1_response){
    function _a$_(param){
     var version = param[2], name = param[1];
     return [0, name, version];
    }
    var descriptions = caml_call2(Core_Array[100], v1_response, _a$_);
    function _ba_(a_027, b_028){
     return caml_call2(Async_rpc_kernel_Description[33], a_027, b_028);
    }
    caml_call4(Core_Array[81], 0, 0, descriptions, _ba_);
    ensure_no_duplicates(descriptions);
    return [0, descriptions, 0];
   }
   function of_v2_response(v2_response){
    function _a5_(a_029, b_030){
     var
      t_031 = a_029[1],
      t_033 = b_030[1],
      n = caml_call2(Async_rpc_kernel_Description[33], t_031, t_033);
     return 0 === n ? 0 : n;
    }
    if(caml_call2(Core_List[147], v2_response, _a5_)){
     var
      _a6_ = function(_a__){return _a__[1];},
      descriptions = caml_call2(Core_Array[100], v2_response, _a6_),
      _a7_ = function(_a9_){return _a9_[2];},
      digests = caml_call2(Core_Array[100], v2_response, _a7_);
     ensure_no_duplicates(descriptions);
     return [0, descriptions, [0, digests]];
    }
    var items = caml_call1(Core_Array[24], v2_response);
    function _a8_(a_035, b_036){
     var
      t_037 = a_035[1],
      t_039 = b_036[1],
      n = caml_call2(Async_rpc_kernel_Description[33], t_037, t_039);
     return 0 === n ? 0 : n;
    }
    caml_call4(Core_Array[81], 0, 0, items, _a8_);
    var
     match = caml_call1(Core_Array[117], items),
     digests$0 = match[2],
     descriptions$0 = match[1];
    ensure_no_duplicates(descriptions$0);
    return [0, descriptions$0, [0, digests$0]];
   }
   function sexp_of_t(param){
    var digests = param[2], descriptions = param[1];
    if(digests)
     var
      d = digests[1],
      _aT_ = caml_call2(Core_Array[116], descriptions, d),
      with_digest = caml_call1(Core_Array[45], _aT_);
    else
     var
      _aW_ = function(desc){return [0, desc, 0];},
      _aX_ = caml_call1(Core_Array[45], descriptions),
      with_digest = caml_call2(Core_List[51], _aX_, _aW_);
    function _aU_(param, _a2_){
     var
      s2 = _a2_[2],
      d2 = _a2_[1],
      s1 = param[2],
      d1 = param[1],
      _a3_ = caml_call2(Core_String[144], d1[1], d2[1]),
      _a4_ =
        _a3_ || 1 - caml_call2(Async_rpc_kernel_Rpc_shapes[2][15], s1, s2);
     return _a4_;
    }
    var grouped = caml_call2(Core_List[112], with_digest, _aU_);
    function _aV_(items){
     if(! items)
      throw caml_maybe_attach_backtrace([0, Assert_failure, _F_], 1);
     var
      _aY_ = items[1],
      first_digest = _aY_[2],
      name = _aY_[1][1],
      kind = caml_call1(Async_rpc_kernel_Rpc_shapes[2][14][10], first_digest);
     function _aZ_(param){var version = param[1][2]; return version;}
     var
      versions = caml_call2(Core_List[51], items, _aZ_),
      _a0_ =
        [0,
         [1, [0, _C_, [0, caml_call2(Core[472], Core[389], versions), 0]]],
         0],
      _a1_ = [0, [1, [0, _D_, [0, caml_call1(Core[558], kind), 0]]], _a0_];
     return [1, [0, [1, [0, _E_, [0, caml_call1(Core[558], name), 0]]], _a1_]];
    }
    return [1, caml_call2(Core_List[51], grouped, _aV_)];
   }
   function sexp_of_t$0(t){
    var _aK_ = Core_String[146];
    function _aL_(param){var name = param[1]; return name;}
    var
     _aM_ = supported_rpcs(t),
     _aN_ = caml_call2(Core_List[51], _aM_, _aL_),
     rpc_names = caml_call2(Core_List[122], _aN_, _aK_);
    function _aO_(name){
     var match = versions_range(t, name, 0);
     if(0 === match[0]){
      var
       match$0 = match[1],
       ub = match$0[2],
       lb = match$0[1],
       _aP_ =
         function(i){
          var i$0 = lb + i | 0, match = t[2];
          if(match)
           var d = match[1], digest = caml_check_bound(d, i$0)[1 + i$0];
          else
           var digest = 0;
          var
           version = caml_check_bound(t[1], i$0)[1 + i$0][2],
           _aS_ =
             [0,
              [1,
               [0,
                _G_,
                [0, caml_call1(Async_rpc_kernel_Rpc_shapes[2][1], digest), 0]]],
              0];
          return [1,
                  [0,
                   [1, [0, _H_, [0, caml_call1(Core[389], version), 0]]],
                   _aS_]];
         },
       versions = caml_call2(Core_List[40], (ub - lb | 0) + 1 | 0, _aP_),
       _aQ_ =
         [0,
          [1,
           [0, _I_, [0, caml_call2(Core[472], Core_Sexp[93], versions), 0]]],
          0];
      return [1,
              [0, [1, [0, _J_, [0, caml_call1(Core[558], name), 0]]], _aQ_]];
     }
     var
      _aR_ = caml_call1(Sexplib0_Sexp_conv[7], cst_Bug_in_Async_rpc_kernel_Wi);
     return caml_call1(Core[261], _aR_);
    }
    return [1, caml_call2(Core_List[51], rpc_names, _aO_)];
   }
   var With_digests_in_sexp = [0, sexp_of_t$0];
   function highest_shared_version(rpc_name, callee_menu, caller_versions){
    var
     ok = highest_available_version(callee_menu, rpc_name, caller_versions);
    if(0 === ok[0]) return ok;
    if(785558517 <= ok[1]){
     var
      _aB_ = supported_versions(callee_menu, rpc_name),
      _aC_ = [0, [1, [0, _K_, [0, caml_call1(Core_Int[99][28], _aB_), 0]]], 0],
      _aD_ =
        [0,
         [1, [0, _L_, [0, caml_call1(Core_Int[99][28], caller_versions), 0]]],
         _aC_],
      _aE_ = [0, caml_call1(Sexplib0_Sexp_conv[7], rpc_name), _aD_],
      _aF_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Caller_and_callee_share_no),
          _aE_]];
     return caml_call1(Core[245], _aF_);
    }
    var
     _aG_ = [0, [1, [0, _M_, [0, sexp_of_t(callee_menu), 0]]], 0],
     _aH_ =
       [0,
        [1, [0, _N_, [0, caml_call1(Core_Int[99][28], caller_versions), 0]]],
        _aG_],
     _aI_ = [0, [1, [0, _O_, [0, caml_call1(Core[558], rpc_name), 0]]], _aH_],
     _aJ_ =
       [1,
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_Callee_does_not_know_this_),
         _aI_]];
    return caml_call1(Core[245], _aJ_);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_async_rpc_kernel);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_rpc_kernel_Menu);
   var
    Async_rpc_kernel_Menu =
      [0,
       sexp_of_t,
       version_menu_rpc_name,
       With_digests_in_sexp,
       supported_rpcs,
       supported_versions,
       mem,
       shape_digests,
       highest_available_version,
       highest_shared_version,
       has_some_versions,
       of_supported_rpcs,
       [0,
        [0,
         version,
         bin_shape_query,
         bin_size_query,
         bin_write_query,
         bin_writer_query,
         bin_read_query$0,
         bin_read_query,
         bin_reader_query,
         bin_query,
         bin_shape_response,
         bin_size_response,
         bin_write_response,
         bin_writer_response,
         bin_read_response$0,
         bin_read_response,
         bin_reader_response,
         bin_response,
         sexp_of_response,
         response_of_model],
        [0,
         version$0,
         bin_shape_query$0,
         bin_size_query$0,
         bin_write_query$0,
         bin_writer_query$0,
         bin_read_query$2,
         bin_read_query$1,
         bin_reader_query$0,
         bin_query$0,
         bin_shape_response$0,
         bin_size_response$0,
         bin_write_response$0,
         bin_writer_response$0,
         bin_read_response$2,
         bin_read_response$1,
         bin_reader_response$0,
         bin_response$0,
         sexp_of_response$0]],
       of_v1_response,
       of_v2_response];
   runtime.caml_register_global
    (97, Async_rpc_kernel_Menu, cst_Async_rpc_kernel_Menu$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_rpc_kernel__Or_not_authorized
//# unitInfo: Requires: Eager_deferred, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_rpc_kernel_Or_not_au$0 = "Async_rpc_kernel__Or_not_authorized",
    cst_async_rpc_kernel$0 = "async_rpc_kernel";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Eager_deferred = global_data.Eager_deferred,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_rpc_kernel_Or_not_au$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_rpc_kernel$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/or_not_authorized.ml");
   caml_call2
    (Ppx_inline_test_lib[6], cst_async_rpc_kernel$0, "or_not_authorized.ml");
   var
    cst_async_rpc_kernel = cst_async_rpc_kernel$0,
    cst_Async_rpc_kernel_Or_not_au = cst_Async_rpc_kernel_Or_not_au$0;
   function bind(t, f){
    if(0 !== t[0]) return t;
    var a = t[1];
    return caml_call1(f, a);
   }
   function map(t, f){
    return bind(t, function(x){return [0, caml_call1(f, x)];});
   }
   function bind_deferred(t, f){
    if(0 !== t[0]) return caml_call1(Eager_deferred[6], t);
    var a = t[1];
    return caml_call1(f, a);
   }
   function map_deferred(t, f){
    return bind_deferred
            (t,
             function(a){
              function _d_(a){return [0, a];}
              var _e_ = caml_call1(f, a);
              return caml_call2(Eager_deferred[7], _e_, _d_);
             });
   }
   function _a_(_c_){return _c_;}
   function lift_deferred(_b_){return map_deferred(_b_, _a_);}
   caml_call1(Ppx_inline_test_lib[7], cst_async_rpc_kernel);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_rpc_kernel_Or_not_au);
   var
    Async_rpc_kernel_Or_not_author =
      [0, bind, map, bind_deferred, map_deferred, lift_deferred];
   runtime.caml_register_global
    (12, Async_rpc_kernel_Or_not_author, cst_Async_rpc_kernel_Or_not_au$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_rpc_kernel__Transport_intf
//# unitInfo: Requires: Bin_prot__Common, Bin_prot__Shape, Bin_shape, Core, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv_record
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_rpc_kernel_Transport$0 = "Async_rpc_kernel__Transport_intf",
    cst_async_rpc_kernel$0 = "async_rpc_kernel",
    cst_max_message_size$0 = "max_message_size",
    cst_message_too_big = "message_too_big",
    cst_size$0 = "size",
    cst_src_transport_intf_ml_Send$0 =
      "src/transport_intf.ml.Send_result.message_too_big",
    caml_string_notequal = runtime.caml_string_notequal;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    error_source_007 = cst_src_transport_intf_ml_Send$0,
    Core = global_data.Core,
    Sexplib0_Sexp_conv_record = global_data.Sexplib0__Sexp_conv_record,
    Bin_prot_Common = global_data.Bin_prot__Common,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Bin_shape = global_data.Bin_shape;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_rpc_kernel_Transport$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_rpc_kernel$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/transport_intf.ml");
   caml_call2
    (Ppx_inline_test_lib[6], cst_async_rpc_kernel$0, "transport_intf.ml");
   var
    Handler_result = [0],
    _a_ =
      caml_call1
       (Bin_prot_Shape[4],
        [0,
         [0, cst_size$0, Core[372]],
         [0, [0, cst_max_message_size$0, Core[372]], 0]]),
    _b_ =
      [0, [0, caml_call1(Bin_shape[2][1], cst_message_too_big), 0, _a_], 0],
    _c_ = caml_call1(Bin_shape[4][1], "src/transport_intf.ml:36:2"),
    group = caml_call2(Bin_prot_Shape[2], _c_, _b_),
    _d_ = caml_call1(Bin_shape[2][1], cst_message_too_big),
    bin_shape_message_too_big =
      caml_call1(caml_call2(Bin_prot_Shape[10], group, _d_), 0),
    _g_ = [0, "Closed"],
    _h_ = [0, "bytes"],
    _i_ = [0, "result"],
    _j_ = [0, "Sent"],
    _k_ = [0, "Message_too_big"],
    _e_ = [0, cst_max_message_size$0],
    _f_ = [0, cst_size$0],
    cst_max_message_size = cst_max_message_size$0,
    cst_size = cst_size$0,
    cst_src_transport_intf_ml_Send = cst_src_transport_intf_ml_Send$0,
    cst_async_rpc_kernel = cst_async_rpc_kernel$0,
    cst_Async_rpc_kernel_Transport = cst_Async_rpc_kernel_Transport$0;
   function bin_size_message_too_big(param){
    var
     v2 = param[2],
     v1 = param[1],
     _q_ = caml_call1(Core[373], v1),
     size = caml_call2(Bin_prot_Common[23], 0, _q_),
     _r_ = caml_call1(Core[373], v2);
    return caml_call2(Bin_prot_Common[23], size, _r_);
   }
   function bin_write_message_too_big(buf, pos, param){
    var
     v2 = param[2],
     v1 = param[1],
     pos$0 = caml_call3(Core[375], buf, pos, v1);
    return caml_call3(Core[375], buf, pos$0, v2);
   }
   var
    bin_writer_message_too_big =
      [0, bin_size_message_too_big, bin_write_message_too_big];
   function bin_read_message_too_big(buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19], cst_src_transport_intf_ml_Send, pos_ref[1]);
   }
   function bin_read_message_too_big$0(buf, pos_ref){
    var
     v_size = caml_call2(Core[378], buf, pos_ref),
     v_max_message_size = caml_call2(Core[378], buf, pos_ref);
    return [0, v_size, v_max_message_size];
   }
   var
    bin_reader_message_too_big =
      [0, bin_read_message_too_big$0, bin_read_message_too_big],
    bin_message_too_big =
      [0,
       bin_shape_message_too_big,
       bin_writer_message_too_big,
       bin_reader_message_too_big];
   function compare_message_too_big(a_001, b_002){
    if(a_001 === b_002) return 0;
    var n = caml_call2(Core[382], a_001[1], b_002[1]);
    return 0 === n ? caml_call2(Core[382], a_001[2], b_002[2]) : n;
   }
   function globalize_message_too_big(x_003){
    var
     max_message_size_004 = x_003[2],
     size_005 = x_003[1],
     _p_ = caml_call1(Core[386], max_message_size_004);
    return [0, caml_call1(Core[386], size_005), _p_];
   }
   function message_too_big_of_sexp(x_008){
    function _m_(param){
     var max_message_size = param[2][1], size = param[1];
     return [0, size, max_message_size];
    }
    var _n_ = 0;
    function _o_(param){
     return caml_string_notequal(param, cst_max_message_size$0)
             ? caml_string_notequal(param, cst_size$0) ? -1 : 0
             : 1;
    }
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_007,
             [0,
              cst_size,
              1,
              Core[390],
              [0, cst_max_message_size, 1, Core[390], 0]],
             _o_,
             _n_,
             _m_,
             x_008);
   }
   function sexp_of_message_too_big(param){
    var
     max_message_size_012 = param[2],
     size_010 = param[1],
     arg_013 = caml_call1(Core[389], max_message_size_012),
     bnds_009 = [0, [1, [0, _e_, [0, arg_013, 0]]], 0],
     arg_011 = caml_call1(Core[389], size_010),
     bnds_009$0 = [0, [1, [0, _f_, [0, arg_011, 0]]], bnds_009];
    return [1, bnds_009$0];
   }
   function sexp_of_t(of_a_014, param){
    if(typeof param === "number") return _g_;
    if(0 === param[0]){
     var
      bytes_018 = param[2],
      result_016 = param[1],
      arg_019 = caml_call1(Core[389], bytes_018),
      bnds_015 = [0, [1, [0, _h_, [0, arg_019, 0]]], 0],
      arg_017 = caml_call1(of_a_014, result_016),
      bnds_015$0 = [0, [1, [0, _i_, [0, arg_017, 0]]], bnds_015];
     return [1, [0, _j_, bnds_015$0]];
    }
    var arg0_020 = param[1], res0_021 = sexp_of_message_too_big(arg0_020);
    return [1, [0, _k_, [0, res0_021, 0]]];
   }
   function globalize(globalize_a_024, x_025){
    if(typeof x_025 === "number") return x_025;
    if(0 === x_025[0]){
     var
      bytes_027 = x_025[2],
      result_028 = x_025[1],
      _l_ = caml_call1(Core[386], bytes_027);
     return [0, caml_call1(globalize_a_024, result_028), _l_];
    }
    var arg_029 = x_025[1];
    return [1, globalize_message_too_big(arg_029)];
   }
   var
    Send_result =
      [0,
       bin_shape_message_too_big,
       bin_size_message_too_big,
       bin_write_message_too_big,
       bin_writer_message_too_big,
       bin_read_message_too_big,
       bin_read_message_too_big$0,
       bin_reader_message_too_big,
       bin_message_too_big,
       compare_message_too_big,
       globalize_message_too_big,
       message_too_big_of_sexp,
       sexp_of_message_too_big,
       sexp_of_t,
       globalize];
   caml_call1(Ppx_inline_test_lib[7], cst_async_rpc_kernel);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_rpc_kernel_Transport);
   var Async_rpc_kernel_Transport_int = [0, Handler_result, Send_result];
   runtime.caml_register_global
    (34, Async_rpc_kernel_Transport_int, cst_Async_rpc_kernel_Transport$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_rpc_kernel__Transport
//# unitInfo: Requires: Async_kernel, Async_kernel__Deferred, Async_kernel__Ivar, Async_kernel__Pipe, Core, Core__Bigstring, Core__Queue, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_rpc_kernel_Transport$0 = "Async_rpc_kernel__Transport",
    cst_async_rpc_kernel$0 = "async_rpc_kernel";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Async_kernel = global_data.Async_kernel,
    Async_kernel_Pipe = global_data.Async_kernel__Pipe,
    Async_kernel_Ivar = global_data.Async_kernel__Ivar,
    Core_Queue = global_data.Core__Queue,
    Async_kernel_Deferred = global_data.Async_kernel__Deferred,
    Core = global_data.Core,
    Core_Bigstring = global_data.Core__Bigstring,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_rpc_kernel_Transport$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_rpc_kernel$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/transport.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_async_rpc_kernel$0, "transport.ml");
   var
    _b_ = [0, "writer"],
    _c_ = [0, "reader"],
    _a_ =
      [0,
       [11,
        "message length (",
        [4,
         0,
         0,
         0,
         [11, ") did not match expected length (", [4, 0, 0, 0, [12, 41, 0]]]]],
       "message length (%d) did not match expected length (%d)"],
    cst_async_rpc_kernel = cst_async_rpc_kernel$0,
    cst_Async_rpc_kernel_Transport = cst_Async_rpc_kernel_Transport$0,
    length = 8;
   function unsafe_get_payload_length(buf, pos){
    return caml_call2(Core_Bigstring[85], buf, pos);
   }
   function unsafe_set_payload_length(buf, pos, payload_len){
    return caml_call3(Core_Bigstring[89], buf, pos, payload_len);
   }
   var
    Header = [0, length, unsafe_get_payload_length, unsafe_set_payload_length];
   function pack(m, t){return [0, m, t];}
   function sexp_of_t(param){
    var t = param[2], M = param[1];
    return caml_call1(M[1], t);
   }
   function close(param){
    var t = param[2], M = param[1];
    return caml_call1(M[2], t);
   }
   function is_closed(param){
    var t = param[2], M = param[1];
    return caml_call1(M[3], t);
   }
   function bytes_read(param){
    var t = param[2], M = param[1];
    return caml_call1(M[4], t);
   }
   function read_forever(param, on_message, on_end_of_batch){
    var t = param[2], M = param[1];
    return caml_call3(M[5], t, on_message, on_end_of_batch);
   }
   function read_one_message_bin_prot(t, bin_reader){
    function _s_(_t_){return 0;}
    return read_forever
            (t,
             function(buf, pos, len){
              var
               pos_ref = [0, pos],
               x = caml_call2(bin_reader[1], buf, pos_ref);
              return caml_call2(Core[93], pos_ref[1], pos + len | 0)
                      ? caml_call4(Core[246], _a_, pos_ref[1] - pos | 0, len, 0)
                      : [0, x];
             },
             _s_);
   }
   function pack$0(M, t){return [0, [0, M, t, caml_call1(M[7], t)]];}
   function sexp_of_t$0(param){
    var match = param[1], t = match[2], M = match[1];
    return caml_call1(M[1], t);
   }
   function close$0(param){
    var match = param[1], t = match[2], M = match[1];
    return caml_call1(M[2], t);
   }
   function is_closed$0(param){
    var match = param[1], t = match[2], M = match[1];
    return caml_call1(M[3], t);
   }
   function monitor(param){
    var match = param[1], t = match[2], M = match[1];
    return caml_call1(M[4], t);
   }
   function bytes_to_write(param){
    var match = param[1], t = match[2], M = match[1];
    return caml_call1(M[5], t);
   }
   function bytes_written(param){
    var match = param[1], t = match[2], M = match[1];
    return caml_call1(M[6], t);
   }
   function flushed(param){
    var match = param[1], t = match[2], M = match[1];
    return caml_call1(M[8], t);
   }
   function ready_to_write(param){
    var match = param[1], t = match[2], M = match[1];
    return caml_call1(M[9], t);
   }
   function send_bin_prot(param, bin_writer, x){
    var match = param[1], t = match[2], M = match[1];
    return caml_call3(M[10], t, bin_writer, x);
   }
   function send_bin_prot_and_bigstring(param, bin_writer, x, buf, pos, len){
    var match = param[1], t = match[2], M = match[1];
    return caml_call6(M[11], t, bin_writer, x, buf, pos, len);
   }
   function send_bin_prot_and_bigstring_no
   (param, bin_writer, x, buf, pos, len){
    var match = param[1], t = match[2], M = match[1];
    return caml_call6(M[12], t, bin_writer, x, buf, pos, len);
   }
   function stopped(param){var stopped = param[1][3]; return stopped;}
   function can_send(param){
    var
     match = param[1],
     stopped = match[3],
     t = match[2],
     M = match[1],
     _q_ = caml_call1(M[3], t),
     _r_ = _q_ || caml_call1(Async_kernel_Deferred[7], stopped);
    return 1 - _r_;
   }
   function transfer(t, opt, pipe, f){
    if(opt)
     var sth = opt[1], max_num_values_per_read = sth;
    else
     var max_num_values_per_read = 1000;
    function _f_(param){
     function _o_(param){return 17724;}
     var _p_ = flushed(t);
     return caml_call2(Async_kernel[23][3], _p_, _o_);
    }
    var consumer = caml_call2(Async_kernel_Pipe[23], pipe, _f_);
    function _g_(ivar){
     function iter(param){
      var _k_ = can_send(t);
      if(! _k_) return _k_;
      var
       match =
         caml_call3
          (Async_kernel_Pipe[40],
           [0, consumer],
           [0, max_num_values_per_read],
           pipe);
      if(typeof match !== "number"){
       var q = match[2];
       caml_call2(Core_Queue[18], q, f);
       caml_call1(Async_kernel_Pipe[22][1], consumer);
       var _n_ = ready_to_write(t);
       return caml_call2(Async_kernel[17], _n_, iter);
      }
      if(3456156 <= match) return caml_call2(Async_kernel_Ivar[14], ivar, 0);
      function _l_(param){return iter(0);}
      var _m_ = caml_call1(Async_kernel_Pipe[46], pipe);
      return caml_call2(Async_kernel[17], _m_, _l_);
     }
     return iter(0);
    }
    var end_of_pipe = caml_call1(Async_kernel_Deferred[3], _g_);
    function _h_(param){return caml_call1(Async_kernel_Pipe[16], pipe);}
    var
     _i_ = [0, end_of_pipe, [0, stopped(t), 0]],
     _j_ = caml_call1(Async_kernel_Deferred[23], _i_);
    return caml_call2(Async_kernel[23][3], _j_, _h_);
   }
   function sexp_of_t$1(param){
    var
     writer_006 = param[2],
     reader_004 = param[1],
     arg_007 = sexp_of_t$0(writer_006),
     bnds_003 = [0, [1, [0, _b_, [0, arg_007, 0]]], 0],
     arg_005 = sexp_of_t(reader_004),
     bnds_003$0 = [0, [1, [0, _c_, [0, arg_005, 0]]], bnds_003];
    return [1, bnds_003$0];
   }
   function close$1(t){
    function _d_(param){return close(t[1]);}
    var _e_ = close$0(t[2]);
    return caml_call2(Async_kernel[23][2], _e_, _d_);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_async_rpc_kernel);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_rpc_kernel_Transport);
   var
    Async_rpc_kernel_Transport =
      [0,
       Header,
       [0,
        sexp_of_t,
        close,
        is_closed,
        bytes_read,
        read_forever,
        pack,
        read_one_message_bin_prot],
       [0,
        sexp_of_t$0,
        close$0,
        is_closed$0,
        monitor,
        bytes_to_write,
        bytes_written,
        stopped,
        flushed,
        ready_to_write,
        send_bin_prot,
        send_bin_prot_and_bigstring,
        send_bin_prot_and_bigstring_no,
        pack$0,
        can_send,
        transfer],
       sexp_of_t$1,
       close$1];
   runtime.caml_register_global
    (21, Async_rpc_kernel_Transport, cst_Async_rpc_kernel_Transport$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_rpc_kernel__Protocol
//# unitInfo: Requires: Async_rpc_kernel__Menu, Async_rpc_kernel__Nat0, Async_rpc_kernel__Transport_intf, Bin_prot__Common, Bin_prot__Read, Bin_prot__Shape, Bin_prot__Std, Bin_prot__Write, Bin_shape, Core__Bigstring, Core__Comparable, Core__Core_bin_prot, Core__Int, Core__Result, Core__Sexp, Core__String, Core__Unique_id, Expect_test_config, Inline_test_config, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_expect_runtime__Test_block, Ppx_expect_runtime__Test_node, Ppx_expect_runtime__Types, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv_error, Sexplib__Std, Stdlib, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst = "",
    cst_Abort$0 = "Abort",
    cst_Async_rpc_kernel_Protocol$0 = "Async_rpc_kernel__Protocol",
    cst_Authorization_failure$0 = "Authorization_failure",
    cst_Bin_io_exn$0 = "Bin_io_exn",
    cst_Connection_closed = "Connection_closed",
    cst_Eof$0 = "Eof",
    cst_Heartbeat = "Heartbeat",
    cst_Message_too_big$0 = "Message_too_big",
    cst_Metadata$0 = "Metadata",
    cst_Ok$0 = "Ok",
    cst_Query$2 = "Query",
    cst_Query_v1$0 = "Query_v1",
    cst_Response$1 = "Response",
    cst_Uncaught_exn$0 = "Uncaught_exn",
    cst_Unimplemented_rpc$0 = "Unimplemented_rpc",
    cst_Unknown$0 = "Unknown",
    cst_Unknown_query_id$0 = "Unknown_query_id",
    cst_Version$0 = "Version",
    cst_Write_error$0 = "Write_error",
    cst_a$18 = "a",
    cst_async_rpc_kernel$0 = "async_rpc_kernel",
    cst_authorization_failure = "authorization_failure",
    cst_bin_io_exn = "bin_io_exn",
    cst_connection_closed = "connection_closed",
    cst_data$2 = "data",
    cst_error$1 = "error",
    cst_id$2 = "id",
    cst_identification$0 = "identification",
    cst_initial$0 = "initial",
    cst_maybe_needs_length$1 = "maybe_needs_length",
    cst_menu$0 = "menu",
    cst_message_too_big = "message_too_big",
    cst_metadata$0 = "metadata",
    cst_needs_length$11 = "needs_length",
    cst_response$1 = "response",
    cst_src_protocol_ml$11 = "src/protocol.ml",
    cst_src_protocol_ml_Message_ma$0 =
      "src/protocol.ml.Message.maybe_needs_length",
    cst_src_protocol_ml_Rpc_error_$1 = "src/protocol.ml.Rpc_error.T.t",
    cst_t$7 = "t",
    cst_tag$1 = "tag",
    cst_uncaught_exn = "uncaught_exn",
    cst_unimplemented_rpc = "unimplemented_rpc",
    cst_unknown = "unknown",
    cst_unknown_query_id = "unknown_query_id",
    cst_unused_query_id$0 = "unused_query_id",
    cst_version$1 = "version",
    cst_write_error = "write_error",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_string_compare = runtime.caml_string_compare,
    caml_string_notequal = runtime.caml_string_notequal,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   function caml_call14
   (f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13){
    return (f.l >= 0 ? f.l : f.l = f.length) == 14
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13)
            : runtime.caml_call_gen
              (f,
               [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    err$0 = [2, "src/protocol.ml.Stream_response_data.needs_length"],
    err = [2, "src/protocol.ml.Stream_query.needs_length"],
    error_source_003 = cst_src_protocol_ml_Rpc_error_$1,
    Bin_prot_Std = global_data.Bin_prot__Std,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Bin_shape = global_data.Bin_shape,
    Stdlib = global_data.Stdlib,
    Ppx_expect_runtime_Types = global_data.Ppx_expect_runtime__Types,
    Bin_prot_Read = global_data.Bin_prot__Read,
    Bin_prot_Common = global_data.Bin_prot__Common,
    Bin_prot_Write = global_data.Bin_prot__Write,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Expect_test_config = global_data.Expect_test_config,
    Ppx_expect_runtime_Test_block = global_data.Ppx_expect_runtime__Test_block,
    Ppx_expect_runtime_Test_node = global_data.Ppx_expect_runtime__Test_node,
    Inline_test_config = global_data.Inline_test_config,
    Core_Core_bin_prot = global_data.Core__Core_bin_prot,
    Stdlib_String = global_data.Stdlib__String,
    Async_rpc_kernel_Nat0 = global_data.Async_rpc_kernel__Nat0,
    Core_Result = global_data.Core__Result,
    Sexplib_Std = global_data.Sexplib__Std,
    Async_rpc_kernel_Menu = global_data.Async_rpc_kernel__Menu,
    Core_Bigstring = global_data.Core__Bigstring,
    Core_Sexp = global_data.Core__Sexp,
    Core_Int = global_data.Core__Int,
    Async_rpc_kernel_Transport_int =
      global_data.Async_rpc_kernel__Transport_intf,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Core_String = global_data.Core__String,
    Core_Unique_id = global_data.Core__Unique_id,
    Core_Comparable = global_data.Core__Comparable;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_rpc_kernel_Protocol$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_rpc_kernel$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_protocol_ml$11);
   caml_call2(Ppx_inline_test_lib[6], cst_async_rpc_kernel$0, "protocol.ml");
   var
    Rpc_tag =
      [0,
       Core_String[126],
       Core_String[127],
       Core_String[128],
       Core_String[129],
       Core_String[130],
       Core_String[131],
       Core_String[132],
       Core_String[133],
       Core_String[134],
       Core_String[135],
       Core_String[136],
       Core_String[137],
       Core_String[138],
       Core_String[139],
       Core_String[140],
       Core_String[141],
       Core_String[142],
       Core_String[143],
       Core_String[144],
       Core_String[145],
       Core_String[146],
       Core_String[147],
       Core_String[148],
       Core_String[149],
       Core_String[150],
       Core_String[151],
       Core_String[152],
       Core_String[153],
       Core_String[154],
       Core_String[155],
       Core_String[156],
       Core_String[157],
       Core_String[158],
       Core_String[159],
       Core_String[160],
       Core_String[161],
       Core_String[162],
       Core_String[163],
       Core_String[164],
       Core_String[165],
       Core_String[166]],
    Query_id = caml_call1(Core_Unique_id[2], 0),
    _a_ = Query_id[5],
    _b_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$7), 0, _a_], 0],
    _c_ = caml_call1(Bin_shape[4][1], "src/protocol.ml:16:2"),
    group = caml_call2(Bin_prot_Shape[2], _c_, _b_),
    _d_ = caml_call1(Bin_shape[2][1], cst_t$7),
    bin_shape_t = caml_call1(caml_call2(Bin_prot_Shape[10], group, _d_), 0),
    bin_size_t = Query_id[1],
    bin_write_t = Query_id[2],
    bin_writer_t = [0, bin_size_t, bin_write_t],
    bin_read_t = Query_id[4],
    bin_read_t$0 = Query_id[3],
    bin_reader_t = [0, bin_read_t$0, bin_read_t],
    bin_t = [0, bin_shape_t, bin_writer_t, bin_reader_t],
    sexp_of_t = Query_id[10],
    cst_needs_length$10 = cst_needs_length$11,
    cst_a$15 = cst_a$18,
    cst_src_protocol_ml_213_20 = "src/protocol.ml:213:20",
    cst_Response$0 = cst_Response$1,
    cst_a$16 = cst_a$18,
    cst_src_protocol_ml_212_17 = "src/protocol.ml:212:17",
    cst_Query$1 = cst_Query$2,
    _bt_ = [0, cst_Heartbeat, 0],
    cst_a$17 = cst_a$18,
    cst_needs_length$9 = cst_needs_length$11,
    cst_src_protocol_ml_210_4 = "src/protocol.ml:210:4",
    _bv_ =
      [0,
       [0,
        [0, " b5514da32c3863fcbb1c2229b877cc6f ", [0, cst]],
        [0, 5482, 5497, 5535]]],
    _bw_ = [0, 5482, 5488, 5536],
    _bx_ = [0, 5404, 5408, 5536],
    _by_ = [0, 5482, 5536, 5536],
    _bz_ = [0, 5404, 5408, 5536],
    cst_src_protocol_ml = cst_src_protocol_ml$11,
    cst_rpc = "rpc",
    _bu_ = [0, 0],
    _bn_ = [0, cst_Heartbeat],
    _bo_ = [0, cst_Query_v1$0],
    _bp_ = [0, cst_Response$1],
    _bq_ = [0, cst_Query$2],
    _br_ = [0, cst_Metadata$0],
    _bm_ = [1, cst_src_protocol_ml_Message_ma$0],
    cst_src_protocol_ml_Message_ma = cst_src_protocol_ml_Message_ma$0,
    cst_maybe_needs_length$0 = cst_maybe_needs_length$1,
    _a4_ = [0, cst_Eof$0],
    _a5_ = [0, cst_Ok$0],
    cst_needs_length$8 = cst_needs_length$11,
    _aS_ = [0, cst_initial$0],
    _aT_ = [0, cst_unused_query_id$0],
    cst_src_protocol_ml_Stream_ini =
      "src/protocol.ml.Stream_initial_message.t",
    cst_t$6 = cst_t$7,
    _aE_ = [0, cst_Abort$0],
    _aF_ = [0, cst_Query$2],
    cst_needs_length$6 = cst_needs_length$11,
    _as_ = [0, cst_data$2],
    _at_ = [0, cst_id$2],
    cst_src_protocol_ml_Response_n = "src/protocol.ml.Response.needs_length",
    cst_needs_length$4 = cst_needs_length$11,
    _af_ = [0, cst_data$2],
    _ag_ = [0, cst_metadata$0],
    _ah_ = [0, cst_id$2],
    _ai_ = [0, cst_version$1],
    _aj_ = [0, cst_tag$1],
    cst_src_protocol_ml_Query_need = "src/protocol.ml.Query.needs_length",
    cst_needs_length$2 = cst_needs_length$11,
    _V_ = [0, cst_data$2],
    _W_ = [0, cst_id$2],
    _X_ = [0, cst_version$1],
    _Y_ = [0, cst_tag$1],
    cst_src_protocol_ml_Query_v1_n = "src/protocol.ml.Query_v1.needs_length",
    cst_needs_length$0 = cst_needs_length$11,
    _M_ = [0, cst_menu$0],
    _N_ = [0, cst_identification$0],
    cst_src_protocol_ml_Connection =
      "src/protocol.ml.Connection_metadata.V1.t",
    cst_t$2 = cst_t$7,
    _o_ = [0, cst_Connection_closed],
    _p_ = [0, cst_Bin_io_exn$0],
    _q_ = [0, cst_Write_error$0],
    _r_ = [0, cst_Uncaught_exn$0],
    _s_ = [0, cst_Version$0],
    _t_ = [0, cst_Unimplemented_rpc$0],
    _u_ = [0, cst_Unknown_query_id$0],
    _v_ = [0, cst_Authorization_failure$0],
    _w_ = [0, cst_Message_too_big$0],
    _x_ = [0, cst_Unknown$0],
    _n_ = [1, cst_src_protocol_ml_Rpc_error_$1],
    cst_src_protocol_ml_Rpc_error_$0 = cst_src_protocol_ml_Rpc_error_$1,
    cst_src_protocol_ml_Rpc_error_ = cst_src_protocol_ml_Rpc_error_$1,
    _c2_ =
      [0,
       [0,
        [0, " 2b528f4b22f08e28876ffe0239315ac2 ", [0, cst]],
        [0, 486, 499, 537]]],
    _c3_ = [0, 486, 490, 538],
    _c8_ = [0, 428, 430, 538],
    _c9_ = [0, 486, 538, 538],
    _c__ = [0, 428, 430, 538],
    cst_src_protocol_ml$10 = cst_src_protocol_ml$11,
    cst_Unknown = cst_Unknown$0,
    cst_Message_too_big = cst_Message_too_big$0,
    cst_Authorization_failure = cst_Authorization_failure$0,
    cst_Unknown_query_id = cst_Unknown_query_id$0,
    cst_Version = cst_Version$0,
    cst_src_protocol_ml_49_41 = "src/protocol.ml:49:41",
    cst_Unimplemented_rpc = cst_Unimplemented_rpc$0,
    cst_Uncaught_exn = cst_Uncaught_exn$0,
    cst_Write_error = cst_Write_error$0,
    _i_ = [0, cst_Connection_closed, 0],
    cst_Bin_io_exn = cst_Bin_io_exn$0,
    cst_t = cst_t$7,
    cst_src_protocol_ml_44_4 = "src/protocol.ml:44:4",
    cst_t$0 = cst_t$7,
    _cR_ =
      [0,
       [0,
        [0, " 7393bbbb2d57fff150d0e2b37cf022f3 ", [0, cst]],
        [0, 1577, 1592, 1630]]],
    _cS_ = [0, 1577, 1583, 1631],
    _cV_ = [0, "stable"],
    _cY_ = [0, 1508, 1512, 1631],
    _cZ_ = [0, 1577, 1631, 1631],
    _c0_ = [0, 1508, 1512, 1631],
    cst_src_protocol_ml$9 = cst_src_protocol_ml$11,
    cst_a = cst_a$18,
    cst_src_protocol_ml_67_15 = "src/protocol.ml:67:15",
    cst_a$0 = cst_a$18,
    cst_t$1 = cst_t$7,
    cst_src_protocol_ml_67_2 = "src/protocol.ml:67:2",
    _cH_ =
      [0,
       [0,
        [0, " 106a55f7c7d8cf06dd3f4a8e759329f3 ", [0, cst]],
        [0, 1864, 1877, 1915]]],
    _cI_ = [0, 1864, 1868, 1916],
    _cN_ = [0, 1801, 1803, 1916],
    _cO_ = [0, 1864, 1916, 1916],
    _cP_ = [0, 1801, 1803, 1916],
    cst_src_protocol_ml$8 = cst_src_protocol_ml$11,
    cst_menu = cst_menu$0,
    cst_identification = cst_identification$0,
    cst_t$3 = cst_t$7,
    cst_src_protocol_ml_77_4 = "src/protocol.ml:77:4",
    cst_t$4 = cst_t$7,
    cst_a$1 = cst_a$18,
    cst_src_protocol_ml_92_13 = "src/protocol.ml:92:13",
    cst_data = cst_data$2,
    cst_id = cst_id$2,
    cst_version = cst_version$1,
    cst_tag = cst_tag$1,
    cst_a$2 = cst_a$18,
    cst_needs_length = cst_needs_length$11,
    cst_src_protocol_ml_88_2 = "src/protocol.ml:88:2",
    _cx_ =
      [0,
       [0,
        [0, " be5888691d73427b3ac8ea300c169422 ", [0, cst]],
        [0, 2437, 2450, 2488]]],
    _cy_ = [0, 2437, 2441, 2489],
    _cD_ = [0, 2363, 2365, 2489],
    _cE_ = [0, 2437, 2489, 2489],
    _cF_ = [0, 2363, 2365, 2489],
    cst_src_protocol_ml$7 = cst_src_protocol_ml$11,
    cst_a$3 = cst_a$18,
    cst_src_protocol_ml_110_13 = "src/protocol.ml:110:13",
    cst_data$0 = cst_data$2,
    cst_metadata = cst_metadata$0,
    cst_id$0 = cst_id$2,
    cst_version$0 = cst_version$1,
    cst_tag$0 = cst_tag$1,
    cst_a$4 = cst_a$18,
    cst_needs_length$1 = cst_needs_length$11,
    cst_src_protocol_ml_105_2 = "src/protocol.ml:105:2",
    _cn_ =
      [0,
       [0,
        [0, " ef70ea2dd0bb812a601d28810e6637d4 ", [0, cst]],
        [0, 2823, 2836, 2874]]],
    _co_ = [0, 2823, 2827, 2875],
    _ct_ = [0, 2749, 2751, 2875],
    _cu_ = [0, 2823, 2875, 2875],
    _cv_ = [0, 2749, 2751, 2875],
    cst_src_protocol_ml$6 = cst_src_protocol_ml$11,
    cst_a$5 = cst_a$18,
    cst_src_protocol_ml_133_13 = "src/protocol.ml:133:13",
    cst_data$1 = cst_data$2,
    cst_id$1 = cst_id$2,
    cst_a$6 = cst_a$18,
    cst_needs_length$3 = cst_needs_length$11,
    cst_src_protocol_ml_131_2 = "src/protocol.ml:131:2",
    _cd_ =
      [0,
       [0,
        [0, " 0829b98561f5b848c3be1921db7969a8 ", [0, cst]],
        [0, 3384, 3397, 3435]]],
    _ce_ = [0, 3384, 3388, 3436],
    _cj_ = [0, 3310, 3312, 3436],
    _ck_ = [0, 3384, 3436, 3436],
    _cl_ = [0, 3310, 3312, 3436],
    cst_src_protocol_ml$5 = cst_src_protocol_ml$11,
    cst_Abort = cst_Abort$0,
    cst_a$7 = cst_a$18,
    cst_src_protocol_ml_147_16 = "src/protocol.ml:147:16",
    cst_Query = cst_Query$2,
    cst_src_protocol_ml_147_4 = "src/protocol.ml:147:4",
    cst_a$8 = cst_a$18,
    cst_needs_length$5 = cst_needs_length$11,
    cst_src_protocol_ml_146_2 = "src/protocol.ml:146:2",
    _b5_ =
      [0,
       [0,
        [0, " 2c37868761971c78cc355d43f0854860 ", [0, cst]],
        [0, 3698, 3711, 3749]]],
    _b6_ = [0, 3698, 3702, 3750],
    _b$_ = [0, 3624, 3626, 3750],
    _ca_ = [0, 3698, 3750, 3750],
    _cb_ = [0, 3624, 3626, 3750],
    cst_src_protocol_ml$4 = cst_src_protocol_ml$11,
    cst_error = cst_error$1,
    cst_src_protocol_ml_164_28 = "src/protocol.ml:164:28",
    cst_response = cst_response$1,
    cst_src_protocol_ml_164_17 = "src/protocol.ml:164:17",
    cst_initial = cst_initial$0,
    cst_unused_query_id = cst_unused_query_id$0,
    cst_error$0 = cst_error$1,
    cst_response$0 = cst_response$1,
    cst_t$5 = cst_t$7,
    cst_src_protocol_ml_162_2 = "src/protocol.ml:162:2",
    _bV_ =
      [0,
       [0,
        [0, " 46f231ddb7fa59da9c27759d50ae01a9 ", [0, cst]],
        [0, 4154, 4167, 4205]]],
    _bW_ = [0, 4154, 4158, 4206],
    _b1_ = [0, 4083, 4085, 4206],
    _b2_ = [0, 4154, 4206, 4206],
    _b3_ = [0, 4083, 4085, 4206],
    cst_src_protocol_ml$3 = cst_src_protocol_ml$11,
    cst_Eof = cst_Eof$0,
    cst_a$9 = cst_a$18,
    cst_src_protocol_ml_176_13 = "src/protocol.ml:176:13",
    cst_Ok = cst_Ok$0,
    cst_src_protocol_ml_176_4 = "src/protocol.ml:176:4",
    cst_a$10 = cst_a$18,
    cst_needs_length$7 = cst_needs_length$11,
    cst_src_protocol_ml_175_2 = "src/protocol.ml:175:2",
    _bL_ =
      [0,
       [0,
        [0, " c1dbcdcfe2b12e797ec64f0d74df1811 ", [0, cst]],
        [0, 4418, 4431, 4469]]],
    _bM_ = [0, 4418, 4422, 4470],
    _bR_ = [0, 4344, 4346, 4470],
    _bS_ = [0, 4418, 4470, 4470],
    _bT_ = [0, 4344, 4346, 4470],
    cst_src_protocol_ml$2 = cst_src_protocol_ml$11,
    cst_Metadata = cst_Metadata$0,
    cst_a$11 = cst_a$18,
    cst_src_protocol_ml_195_15 = "src/protocol.ml:195:15",
    cst_Query$0 = cst_Query$2,
    cst_a$12 = cst_a$18,
    cst_src_protocol_ml_194_18 = "src/protocol.ml:194:18",
    cst_Response = cst_Response$1,
    cst_a$13 = cst_a$18,
    cst_src_protocol_ml_193_18 = "src/protocol.ml:193:18",
    cst_Query_v1 = cst_Query_v1$0,
    _bg_ = [0, cst_Heartbeat, 0],
    cst_a$14 = cst_a$18,
    cst_maybe_needs_length = cst_maybe_needs_length$1,
    cst_src_protocol_ml_191_2 = "src/protocol.ml:191:2",
    _bB_ =
      [0,
       [0,
        [0, " 421d39a5ff4a0dd5182cc00f63b3ddab ", [0, cst]],
        [0, 4961, 4974, 5012]]],
    _bC_ = [0, 4961, 4965, 5013],
    _bH_ = [0, 4881, 4883, 5013],
    _bI_ = [0, 4961, 5013, 5013],
    _bJ_ = [0, 4881, 4883, 5013],
    cst_src_protocol_ml$1 = cst_src_protocol_ml$11,
    cst_src_protocol_ml$0 = cst_src_protocol_ml$11,
    cst_v1_message_compatibility = "v1 message compatibility",
    cst_async_rpc_kernel = cst_async_rpc_kernel$0,
    cst_Async_rpc_kernel_Protocol = cst_Async_rpc_kernel_Protocol$0;
   if(typeof Ppx_inline_test_lib[3] !== "number"){
    var
     Ppx_expect_test_block$8 =
       caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
     _c1_ =
       function(param){
        var
         _f9_ = caml_call1(Bin_prot_Shape[15], bin_shape_t),
         _f__ = caml_call1(Bin_shape[19][4], _f9_);
        caml_call1(Stdlib[46], _f__);
        var _f$_ = caml_call1(Ppx_expect_runtime_Types[4][1], 0);
        return caml_call1(Ppx_expect_test_block$8[2], _f$_);
       },
     _c4_ =
       caml_call3
        (Ppx_expect_runtime_Test_node[1][1],
         [0, Ppx_expect_runtime_Types[1][1]],
         _c3_,
         _c2_),
     _c5_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 0), _c4_], 0],
     _c6_ = caml_call1(Ppx_expect_runtime_Types[4][1], 2),
     _c7_ = caml_call1(Ppx_expect_runtime_Types[4][1], 1);
    caml_call14
     (Ppx_expect_test_block$8[3],
      cst_src_protocol_ml$10,
      18,
      _c__,
      _c9_,
      _c8_,
      [0, Ppx_expect_runtime_Types[1][1]],
      0,
      _c7_,
      _c6_,
      0,
      0,
      Inline_test_config,
      _c5_,
      _c1_);
   }
   var
    t = caml_call1(Query_id[45], 0),
    Unused_query_id =
      [0,
       bin_size_t,
       bin_write_t,
       bin_read_t$0,
       bin_read_t,
       bin_shape_t,
       bin_writer_t,
       bin_reader_t,
       bin_t,
       sexp_of_t,
       t],
    _e_ =
      [0,
       [0, cst_Unknown_query_id, [0, Query_id[5], 0]],
       [0,
        [0, cst_Authorization_failure, [0, Core_Sexp[5], 0]],
        [0,
         [0,
          cst_Message_too_big,
          [0, Async_rpc_kernel_Transport_int[2][1], 0]],
         [0, [0, cst_Unknown, [0, Core_Sexp[5], 0]], 0]]]],
    _f_ =
      [0,
       caml_call2(Bin_prot_Shape[6], cst_Version, [0, Core_Int[120][1][10]]),
       0],
    _g_ = caml_call1(Bin_shape[4][1], cst_src_protocol_ml_49_41),
    _h_ = [0, caml_call2(Bin_prot_Shape[8], _g_, _f_), 0],
    _j_ =
      caml_call1
       (Bin_prot_Shape[5],
        [0,
         [0, cst_Bin_io_exn, [0, Core_Sexp[5], 0]],
         [0,
          _i_,
          [0,
           [0, cst_Write_error, [0, Core_Sexp[5], 0]],
           [0,
            [0, cst_Uncaught_exn, [0, Core_Sexp[5], 0]],
            [0, [0, cst_Unimplemented_rpc, [0, Rpc_tag[5], _h_]], _e_]]]]]),
    _k_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t), 0, _j_], 0],
    _l_ = caml_call1(Bin_shape[4][1], cst_src_protocol_ml_44_4),
    group$0 = caml_call2(Bin_prot_Shape[2], _l_, _k_),
    _m_ = caml_call1(Bin_shape[2][1], cst_t$0),
    bin_shape_t$0 =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$0, _m_), 0);
   function bin_size_t$0(param){
    if(typeof param === "number") return 1;
    switch(param[0]){
      case 0:
       var v1 = param[1], _f0_ = caml_call1(Core_Sexp[1], v1);
       return caml_call2(Bin_prot_Common[23], 1, _f0_);
      case 1:
       var v1$0 = param[1], _f1_ = caml_call1(Core_Sexp[1], v1$0);
       return caml_call2(Bin_prot_Common[23], 1, _f1_);
      case 2:
       var v1$1 = param[1], _f2_ = caml_call1(Core_Sexp[1], v1$1);
       return caml_call2(Bin_prot_Common[23], 1, _f2_);
      case 3:
       var
        v2 = param[2],
        v1$2 = param[1],
        _f3_ = caml_call1(Rpc_tag[1], v1$2),
        size = caml_call2(Bin_prot_Common[23], 1, _f3_),
        args = v2[2],
        size_args = caml_call1(Core_Int[120][1][6], args),
        _f4_ = caml_call2(Bin_prot_Common[23], size_args, 4);
       return caml_call2(Bin_prot_Common[23], size, _f4_);
      case 4:
       var v1$3 = param[1], _f5_ = caml_call1(Query_id[1], v1$3);
       return caml_call2(Bin_prot_Common[23], 1, _f5_);
      case 5:
       var v1$4 = param[1], _f6_ = caml_call1(Core_Sexp[1], v1$4);
       return caml_call2(Bin_prot_Common[23], 1, _f6_);
      case 6:
       var
        v1$5 = param[1],
        _f7_ = caml_call1(Async_rpc_kernel_Transport_int[2][2], v1$5);
       return caml_call2(Bin_prot_Common[23], 1, _f7_);
      default:
       var v1$6 = param[1], _f8_ = caml_call1(Core_Sexp[1], v1$6);
       return caml_call2(Bin_prot_Common[23], 1, _f8_);
    }
   }
   function bin_write_t$0(buf, pos, param){
    if(typeof param === "number")
     return caml_call3(Bin_prot_Write[30], buf, pos, 1);
    switch(param[0]){
      case 0:
       var v1 = param[1], pos$0 = caml_call3(Bin_prot_Write[30], buf, pos, 0);
       return caml_call3(Core_Sexp[2], buf, pos$0, v1);
      case 1:
       var
        v1$0 = param[1],
        pos$1 = caml_call3(Bin_prot_Write[30], buf, pos, 2);
       return caml_call3(Core_Sexp[2], buf, pos$1, v1$0);
      case 2:
       var
        v1$1 = param[1],
        pos$2 = caml_call3(Bin_prot_Write[30], buf, pos, 3);
       return caml_call3(Core_Sexp[2], buf, pos$2, v1$1);
      case 3:
       var
        v2 = param[2],
        v1$2 = param[1],
        pos$3 = caml_call3(Bin_prot_Write[30], buf, pos, 4),
        pos$4 = caml_call3(Rpc_tag[2], buf, pos$3, v1$2),
        args = v2[2],
        pos$5 = caml_call3(Bin_prot_Write[29], buf, pos$4, -901574920);
       return caml_call3(Core_Int[120][1][7], buf, pos$5, args);
      case 4:
       var
        v1$3 = param[1],
        pos$6 = caml_call3(Bin_prot_Write[30], buf, pos, 5);
       return caml_call3(Query_id[2], buf, pos$6, v1$3);
      case 5:
       var
        v1$4 = param[1],
        pos$7 = caml_call3(Bin_prot_Write[30], buf, pos, 6);
       return caml_call3(Core_Sexp[2], buf, pos$7, v1$4);
      case 6:
       var
        v1$5 = param[1],
        pos$8 = caml_call3(Bin_prot_Write[30], buf, pos, 7);
       return caml_call3
               (Async_rpc_kernel_Transport_int[2][3], buf, pos$8, v1$5);
      default:
       var
        v1$6 = param[1],
        pos$9 = caml_call3(Bin_prot_Write[30], buf, pos, 8);
       return caml_call3(Core_Sexp[2], buf, pos$9, v1$6);
    }
   }
   var bin_writer_t$0 = [0, bin_size_t$0, bin_write_t$0];
   function bin_read_t$1(buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19], cst_src_protocol_ml_Rpc_error_, pos_ref[1]);
   }
   function bin_read_t$2(buf, pos_ref){
    var match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
    if(8 < match >>> 0)
     return caml_call2(Bin_prot_Common[18], _n_, pos_ref[1]);
    switch(match){
      case 0:
       var arg_1 = caml_call2(Core_Sexp[3], buf, pos_ref); return [0, arg_1];
      case 1:
       return 0;
      case 2:
       var arg_1$0 = caml_call2(Core_Sexp[3], buf, pos_ref);
       return [1, arg_1$0];
      case 3:
       var arg_1$1 = caml_call2(Core_Sexp[3], buf, pos_ref);
       return [2, arg_1$1];
      case 4:
       var
        arg_1$2 = caml_call2(Rpc_tag[3], buf, pos_ref),
        vint = caml_call2(Bin_prot_Read[28], buf, pos_ref);
       try{
        if(-901574920 !== vint)
         throw caml_maybe_attach_backtrace(Bin_prot_Common[13], 1);
        var
         arg_1$3 = caml_call2(Core_Int[120][1][8], buf, pos_ref),
         _fY_ = [0, -901574920, arg_1$3],
         arg_2 = _fY_;
       }
       catch(_fZ_){
        var _fX_ = caml_wrap_exception(_fZ_);
        if(_fX_ !== Bin_prot_Common[13])
         throw caml_maybe_attach_backtrace(_fX_, 0);
        var
         arg_2 =
           caml_call2
            (Bin_prot_Common[19],
             cst_src_protocol_ml_Rpc_error_$0,
             pos_ref[1]);
       }
       return [3, arg_1$2, arg_2];
      case 5:
       var arg_1$4 = caml_call2(Query_id[3], buf, pos_ref);
       return [4, arg_1$4];
      case 6:
       var arg_1$5 = caml_call2(Core_Sexp[3], buf, pos_ref);
       return [5, arg_1$5];
      case 7:
       var
        arg_1$6 =
          caml_call2(Async_rpc_kernel_Transport_int[2][6], buf, pos_ref);
       return [6, arg_1$6];
      default:
       var arg_1$7 = caml_call2(Core_Sexp[3], buf, pos_ref);
       return [7, arg_1$7];
    }
   }
   var
    bin_reader_t$0 = [0, bin_read_t$2, bin_read_t$1],
    bin_t$0 = [0, bin_shape_t$0, bin_writer_t$0, bin_reader_t$0];
   function t_of_sexp(sexp_005){
    a:
    {
     if(0 === sexp_005[0]){
      var
       _fI_ = sexp_005[1],
       _fJ_ = caml_string_compare(_fI_, cst_authorization_failure);
      b:
      {
       c:
       {
        d:
        {
         e:
         {
          f:
          {
           g:
           {
            h:
            {
             i:
             {
              if(0 <= _fJ_){
               if(0 < _fJ_){
                if(! caml_string_notequal(_fI_, cst_bin_io_exn)) break i;
                if(! caml_string_notequal(_fI_, cst_connection_closed))
                 break h;
                if(! caml_string_notequal(_fI_, cst_message_too_big)) break g;
                if(! caml_string_notequal(_fI_, cst_uncaught_exn)) break f;
                if(! caml_string_notequal(_fI_, cst_unimplemented_rpc))
                 break e;
                if(! caml_string_notequal(_fI_, cst_unknown)) break d;
                if(! caml_string_notequal(_fI_, cst_unknown_query_id))
                 break c;
                if(caml_string_notequal(_fI_, cst_write_error)) break a;
                break b;
               }
              }
              else if(caml_string_notequal(_fI_, cst_Authorization_failure$0)){
               if(! caml_string_notequal(_fI_, cst_Bin_io_exn$0)) break i;
               if(! caml_string_notequal(_fI_, cst_Connection_closed))
                break h;
               if(! caml_string_notequal(_fI_, cst_Message_too_big$0))
                break g;
               if(! caml_string_notequal(_fI_, cst_Uncaught_exn$0)) break f;
               if(! caml_string_notequal(_fI_, cst_Unimplemented_rpc$0))
                break e;
               if(! caml_string_notequal(_fI_, cst_Unknown$0)) break d;
               if(! caml_string_notequal(_fI_, cst_Unknown_query_id$0))
                break c;
               if(caml_string_notequal(_fI_, cst_Write_error$0)) break a;
               break b;
              }
              return caml_call2
                      (Sexplib0_Sexp_conv_error[9], error_source_003, sexp_005);
             }
             return caml_call2
                     (Sexplib0_Sexp_conv_error[9], error_source_003, sexp_005);
            }
            return 0;
           }
           return caml_call2
                   (Sexplib0_Sexp_conv_error[9], error_source_003, sexp_005);
          }
          return caml_call2
                  (Sexplib0_Sexp_conv_error[9], error_source_003, sexp_005);
         }
         return caml_call2
                 (Sexplib0_Sexp_conv_error[9], error_source_003, sexp_005);
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[9], error_source_003, sexp_005);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[9], error_source_003, sexp_005);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[9], error_source_003, sexp_005);
     }
     var _fK_ = sexp_005[1];
     if(! _fK_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_003, sexp_005);
     var _fL_ = _fK_[1];
     if(0 !== _fL_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_003, sexp_005);
     var
      tag_006 = _fL_[1],
      _fM_ = caml_string_compare(tag_006, cst_authorization_failure);
     b:
     {
      c:
      {
       d:
       {
        e:
        {
         f:
         {
          g:
          {
           h:
           {
            i:
            {
             if(0 <= _fM_){
              if(0 < _fM_){
               if(! caml_string_notequal(tag_006, cst_bin_io_exn)) break i;
               if(! caml_string_notequal(tag_006, cst_connection_closed))
                break h;
               if(! caml_string_notequal(tag_006, cst_message_too_big))
                break g;
               if(! caml_string_notequal(tag_006, cst_uncaught_exn)) break f;
               if(! caml_string_notequal(tag_006, cst_unimplemented_rpc))
                break e;
               if(! caml_string_notequal(tag_006, cst_unknown)) break d;
               if(! caml_string_notequal(tag_006, cst_unknown_query_id))
                break c;
               if(caml_string_notequal(tag_006, cst_write_error)) break a;
               break b;
              }
             }
             else if
              (caml_string_notequal(tag_006, cst_Authorization_failure$0)){
              if(! caml_string_notequal(tag_006, cst_Bin_io_exn$0)) break i;
              if(! caml_string_notequal(tag_006, cst_Connection_closed))
               break h;
              if(! caml_string_notequal(tag_006, cst_Message_too_big$0))
               break g;
              if(! caml_string_notequal(tag_006, cst_Uncaught_exn$0)) break f;
              if(! caml_string_notequal(tag_006, cst_Unimplemented_rpc$0))
               break e;
              if(! caml_string_notequal(tag_006, cst_Unknown$0)) break d;
              if(! caml_string_notequal(tag_006, cst_Unknown_query_id$0))
               break c;
              if(caml_string_notequal(tag_006, cst_Write_error$0)) break a;
              break b;
             }
             var sexp_args_043 = _fK_[2];
             if(sexp_args_043 && ! sexp_args_043[2]){
              var
               arg0_044 = sexp_args_043[1],
               res0_045 = caml_call1(Core_Sexp[94], arg0_044);
              return [5, res0_045];
             }
             return caml_call3
                     (Sexplib0_Sexp_conv_error[8],
                      error_source_003,
                      tag_006,
                      sexp_005);
            }
            var sexp_args_007 = _fK_[2];
            if(sexp_args_007 && ! sexp_args_007[2]){
             var
              arg0_008 = sexp_args_007[1],
              res0_009 = caml_call1(Core_Sexp[94], arg0_008);
             return [0, res0_009];
            }
            return caml_call3
                    (Sexplib0_Sexp_conv_error[8],
                     error_source_003,
                     tag_006,
                     sexp_005);
           }
           return caml_call2
                   (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
          }
          var sexp_args_048 = _fK_[2];
          if(sexp_args_048 && ! sexp_args_048[2]){
           var
            arg0_049 = sexp_args_048[1],
            res0_050 =
              caml_call1(Async_rpc_kernel_Transport_int[2][11], arg0_049);
           return [6, res0_050];
          }
          return caml_call3
                  (Sexplib0_Sexp_conv_error[8],
                   error_source_003,
                   tag_006,
                   sexp_005);
         }
         var sexp_args_017 = _fK_[2];
         if(sexp_args_017 && ! sexp_args_017[2]){
          var
           arg0_018 = sexp_args_017[1],
           res0_019 = caml_call1(Core_Sexp[94], arg0_018);
          return [2, res0_019];
         }
         return caml_call3
                 (Sexplib0_Sexp_conv_error[8],
                  error_source_003,
                  tag_006,
                  sexp_005);
        }
        var sexp_args_022 = _fK_[2];
        if(sexp_args_022){
         var _fN_ = sexp_args_022[2];
         if(_fN_ && ! _fN_[2]){
          var
           arg1_033 = _fN_[1],
           arg0_032 = sexp_args_022[1],
           res0_034 = caml_call1(Rpc_tag[9], arg0_032);
          try{
           if(0 === arg1_033[0])
            var
             atom_024 = arg1_033[1],
             _fP_ =
               caml_string_notequal(atom_024, cst_Version$0)
                ? caml_call1(Sexplib0_Sexp_conv_error[23], 0)
                : caml_call2
                  (Sexplib0_Sexp_conv_error[27], error_source_003, arg1_033),
             _fQ_ = _fP_;
           else{
            var _fR_ = arg1_033[1];
            if(_fR_){
             var match = _fR_[1];
             if(0 === match[0]){
              var sexp_args_027 = _fR_[2], atom_024$0 = match[1];
              if(caml_string_notequal(atom_024$0, cst_Version$0))
               var _fS_ = caml_call1(Sexplib0_Sexp_conv_error[23], 0);
              else{
               e:
               {
                if(sexp_args_027 && ! sexp_args_027[2]){
                 var
                  arg0_029 = sexp_args_027[1],
                  res0_030 = caml_call1(Core_Int[120][1][15], arg0_029),
                  _fV_ = [0, -901574920, res0_030];
                 break e;
                }
                var
                 _fV_ =
                   caml_call3
                    (Sexplib0_Sexp_conv_error[26],
                     error_source_003,
                     atom_024$0,
                     arg1_033);
               }
               var _fS_ = _fV_;
              }
              var _fT_ = _fS_;
             }
             else
              var
               _fT_ =
                 caml_call2
                  (Sexplib0_Sexp_conv_error[28], error_source_003, arg1_033);
             var _fU_ = _fT_;
            }
            else
             var
              _fU_ =
                caml_call2
                 (Sexplib0_Sexp_conv_error[29], error_source_003, arg1_033);
            var _fQ_ = _fU_;
           }
           var res1_035 = _fQ_;
          }
          catch(_fW_){
           var _fO_ = caml_wrap_exception(_fW_);
           if(_fO_ !== Sexplib0_Sexp_conv_error[22])
            throw caml_maybe_attach_backtrace(_fO_, 0);
           var
            res1_035 =
              caml_call2
               (Sexplib0_Sexp_conv_error[24], error_source_003, arg1_033);
          }
          return [3, res0_034, res1_035];
         }
        }
        return caml_call3
                (Sexplib0_Sexp_conv_error[8],
                 error_source_003,
                 tag_006,
                 sexp_005);
       }
       var sexp_args_053 = _fK_[2];
       if(sexp_args_053 && ! sexp_args_053[2]){
        var
         arg0_054 = sexp_args_053[1],
         res0_055 = caml_call1(Core_Sexp[94], arg0_054);
        return [7, res0_055];
       }
       return caml_call3
               (Sexplib0_Sexp_conv_error[8],
                error_source_003,
                tag_006,
                sexp_005);
      }
      var sexp_args_038 = _fK_[2];
      if(sexp_args_038 && ! sexp_args_038[2]){
       var
        arg0_039 = sexp_args_038[1],
        res0_040 = caml_call1(Query_id[9], arg0_039);
       return [4, res0_040];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[8],
               error_source_003,
               tag_006,
               sexp_005);
     }
     var sexp_args_012 = _fK_[2];
     if(sexp_args_012 && ! sexp_args_012[2]){
      var
       arg0_013 = sexp_args_012[1],
       res0_014 = caml_call1(Core_Sexp[94], arg0_013);
      return [1, res0_014];
     }
     return caml_call3
             (Sexplib0_Sexp_conv_error[8],
              error_source_003,
              tag_006,
              sexp_005);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_003, sexp_005);
   }
   function sexp_of_t$0(param){
    if(typeof param === "number") return _o_;
    switch(param[0]){
      case 0:
       var
        arg0_056 = param[1],
        res0_057 = caml_call1(Core_Sexp[93], arg0_056);
       return [1, [0, _p_, [0, res0_057, 0]]];
      case 1:
       var
        arg0_058 = param[1],
        res0_059 = caml_call1(Core_Sexp[93], arg0_058);
       return [1, [0, _q_, [0, res0_059, 0]]];
      case 2:
       var
        arg0_060 = param[1],
        res0_061 = caml_call1(Core_Sexp[93], arg0_060);
       return [1, [0, _r_, [0, res0_061, 0]]];
      case 3:
       var
        arg1_064 = param[2],
        arg0_063 = param[1],
        res0_065 = caml_call1(Rpc_tag[10], arg0_063),
        v_062 = arg1_064[2],
        res1_066 =
          [1, [0, _s_, [0, caml_call1(Core_Int[120][1][16], v_062), 0]]];
       return [1, [0, _t_, [0, res0_065, [0, res1_066, 0]]]];
      case 4:
       var arg0_067 = param[1], res0_068 = caml_call1(Query_id[10], arg0_067);
       return [1, [0, _u_, [0, res0_068, 0]]];
      case 5:
       var
        arg0_069 = param[1],
        res0_070 = caml_call1(Core_Sexp[93], arg0_069);
       return [1, [0, _v_, [0, res0_070, 0]]];
      case 6:
       var
        arg0_071 = param[1],
        res0_072 = caml_call1(Async_rpc_kernel_Transport_int[2][12], arg0_071);
       return [1, [0, _w_, [0, res0_072, 0]]];
      default:
       var
        arg0_073 = param[1],
        res0_074 = caml_call1(Core_Sexp[93], arg0_073);
       return [1, [0, _x_, [0, res0_074, 0]]];
    }
   }
   function compare(a_075, b_076){
    if(a_075 === b_076) return 0;
    a:
    {
     if(typeof a_075 !== "number"){
      b:
      {
       c:
       {
        d:
        {
         e:
         {
          f:
          {
           switch(a_075[0]){
             case 0:
              var a_077 = a_075[1];
              if(typeof b_076 !== "number" && 0 === b_076[0]){
               var b_078 = b_076[1];
               return caml_call2(Core_Sexp[38], a_077, b_078);
              }
              return -1;
             case 1:
              var a_079 = a_075[1];
              if(typeof b_076 === "number") break b;
              switch(b_076[0]){
                case 0:
                 break a;
                case 1:
                 var b_080 = b_076[1];
                 return caml_call2(Core_Sexp[38], a_079, b_080);
                default: return -1;
              }
             case 2:
              var a_081 = a_075[1];
              if(typeof b_076 === "number") break b;
              switch(b_076[0]){
                case 0:
                 break a;
                case 1:
                 break c;
                case 2:
                 var b_082 = b_076[1];
                 return caml_call2(Core_Sexp[38], a_081, b_082);
                default: return -1;
              }
             case 3:
              var a_085 = a_075[2], a_083 = a_075[1];
              if(typeof b_076 === "number") break b;
              switch(b_076[0]){
                case 0:
                 break a;
                case 1:
                 break c;
                case 2:
                 break d;
                case 3:
                 var
                  b_086 = b_076[2],
                  b_084 = b_076[1],
                  n = caml_call2(Rpc_tag[21], a_083, b_084);
                 if(0 !== n) return n;
                 if(a_085 === b_086) return 0;
                 var right_088 = b_086[2], left_087 = a_085[2];
                 return caml_call2(Core_Int[120][1][14], left_087, right_088);
                default: return -1;
              }
             case 4:
              var a_089 = a_075[1];
              if(typeof b_076 === "number") break b;
              switch(b_076[0]){
                case 0:
                 break a;
                case 1:
                 break c;
                case 2:
                 break d;
                case 3:
                 break e;
                case 4:
                 var b_090 = b_076[1];
                 return caml_call2(Query_id[20], a_089, b_090);
                default: return -1;
              }
             case 5:
              var a_091 = a_075[1];
              if(typeof b_076 === "number") break b;
              switch(b_076[0]){
                case 0:
                 break a;
                case 1:
                 break c;
                case 2:
                 break d;
                case 3:
                 break e;
                case 4:
                 break f;
                case 5:
                 var b_092 = b_076[1];
                 return caml_call2(Core_Sexp[38], a_091, b_092);
                default: return -1;
              }
             case 6:
              var a_093 = a_075[1];
              if(typeof b_076 === "number") break b;
              switch(b_076[0]){
                case 0:
                 break a;
                case 1:
                 break c;
                case 2:
                 break d;
                case 3:
                 break e;
                case 4:
                 break f;
                case 5: break;
                case 6:
                 var b_094 = b_076[1];
                 return caml_call2
                         (Async_rpc_kernel_Transport_int[2][9], a_093, b_094);
                default: return -1;
              }
              break;
             default:
              var a_095 = a_075[1];
              if(typeof b_076 === "number") break b;
              switch(b_076[0]){
                case 0:
                 break a;
                case 1:
                 break c;
                case 2:
                 break d;
                case 3:
                 break e;
                case 4:
                 break f;
                case 5: break;
                case 6:
                 return 1;
                default:
                 var b_096 = b_076[1];
                 return caml_call2(Core_Sexp[38], a_095, b_096);
              }
           }
           return 1;
          }
          return 1;
         }
         return 1;
        }
        return 1;
       }
       return 1;
      }
      return 1;
     }
     if(typeof b_076 === "number") return 0;
     if(0 !== b_076[0]) return -1;
    }
    return 1;
   }
   if(typeof Ppx_inline_test_lib[3] !== "number"){
    var
     Ppx_expect_test_block$7 =
       caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
     _cQ_ =
       function(param){
        var
         _fF_ = caml_call1(Bin_prot_Shape[15], bin_shape_t$0),
         _fG_ = caml_call1(Bin_shape[19][4], _fF_);
        caml_call1(Stdlib[46], _fG_);
        var _fH_ = caml_call1(Ppx_expect_runtime_Types[4][1], 3);
        return caml_call1(Ppx_expect_test_block$7[2], _fH_);
       },
     _cT_ =
       caml_call3
        (Ppx_expect_runtime_Test_node[1][1],
         [0, Ppx_expect_runtime_Types[1][1]],
         _cS_,
         _cR_),
     _cU_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 3), _cT_], 0],
     _cW_ = caml_call1(Ppx_expect_runtime_Types[4][1], 5),
     _cX_ = caml_call1(Ppx_expect_runtime_Types[4][1], 4);
    caml_call14
     (Ppx_expect_test_block$7[3],
      cst_src_protocol_ml$9,
      56,
      _c0_,
      _cZ_,
      _cY_,
      [0, Ppx_expect_runtime_Types[1][1]],
      0,
      _cX_,
      _cW_,
      _cV_,
      0,
      Inline_test_config,
      _cU_,
      _cQ_);
   }
   var
    include =
      caml_call1(Core_Comparable[12], [0, compare, t_of_sexp, sexp_of_t$0]),
    symbol = include[1],
    symbol$0 = include[2],
    symbol$1 = include[3],
    symbol$2 = include[4],
    symbol$3 = include[5],
    symbol$4 = include[6],
    equal = include[7],
    compare$0 = include[8],
    min = include[9],
    max = include[10],
    ascending = include[11],
    descending = include[12],
    between = include[13],
    clamp_exn = include[14],
    clamp = include[15],
    comparator = include[16],
    validate_lbound = include[17],
    validate_ubound = include[18],
    validate_bound = include[19],
    Replace_polymorphic_compare = include[20],
    Map = include[21],
    Set = include[22],
    Rpc_error =
      [0,
       bin_size_t$0,
       bin_write_t$0,
       bin_read_t$2,
       bin_read_t$1,
       bin_shape_t$0,
       bin_writer_t$0,
       bin_reader_t$0,
       bin_t$0,
       t_of_sexp,
       sexp_of_t$0,
       symbol,
       symbol$0,
       symbol$1,
       symbol$2,
       symbol$3,
       symbol$4,
       equal,
       compare$0,
       min,
       max,
       ascending,
       descending,
       between,
       clamp_exn,
       clamp,
       comparator,
       validate_lbound,
       validate_ubound,
       validate_bound,
       Replace_polymorphic_compare,
       Map,
       Set],
    _y_ = Rpc_error[5],
    _z_ = caml_call1(Bin_shape[3][1], cst_a),
    _A_ = caml_call1(Bin_shape[4][1], cst_src_protocol_ml_67_15),
    _B_ = caml_call2(Bin_prot_Shape[11], _A_, _z_),
    _C_ = caml_call1(caml_call1(Core_Result[1], _B_), _y_),
    _D_ = [0, caml_call1(Bin_shape[3][1], cst_a$0), 0],
    _E_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$1), _D_, _C_], 0],
    _F_ = caml_call1(Bin_shape[4][1], cst_src_protocol_ml_67_2),
    group$1 = caml_call2(Bin_prot_Shape[2], _F_, _E_);
   function bin_shape_t$1(a){
    var _fE_ = caml_call1(Bin_shape[2][1], cst_t$2);
    return caml_call1
            (caml_call2(Bin_prot_Shape[10], group$1, _fE_), [0, a, 0]);
   }
   function bin_size_t$1(size_of_a, v){
    return caml_call3(Core_Result[2], size_of_a, Rpc_error[1], v);
   }
   function bin_write_t$1(write_a, buf, pos, v){
    return caml_call5(Core_Result[3], write_a, Rpc_error[2], buf, pos, v);
   }
   function bin_writer_t$1(bin_writer_a){
    function _fA_(v){
     var _fB_ = bin_writer_a[2];
     return function(_fC_, _fD_){return bin_write_t$1(_fB_, v, _fC_, _fD_);};
    }
    return [0, function(v){return bin_size_t$1(bin_writer_a[1], v);}, _fA_];
   }
   function bin_read_t$3(of_a, buf, pos_ref, vint){
    return caml_call3
            (caml_call2(Core_Result[5], of_a, Rpc_error[3]),
             buf,
             pos_ref,
             vint);
   }
   function bin_read_t$4(of_a, buf, pos_ref){
    return caml_call2
            (caml_call2(Core_Result[4], of_a, Rpc_error[3]), buf, pos_ref);
   }
   function bin_reader_t$1(bin_reader_a){
    function _fz_(buf, pos_ref, vtag){
     return bin_read_t$3(bin_reader_a[1], buf, pos_ref, vtag);
    }
    return [0,
            function(buf, pos_ref){
             return bin_read_t$4(bin_reader_a[1], buf, pos_ref);
            },
            _fz_];
   }
   function bin_t$1(bin_a){
    var _fx_ = bin_reader_t$1(bin_a[3]), _fy_ = bin_writer_t$1(bin_a[2]);
    return [0, bin_shape_t$1(bin_a[1]), _fy_, _fx_];
   }
   function sexp_of_t$1(of_a_097, x_098){
    return caml_call3(Core_Result[15], of_a_097, Rpc_error[10], x_098);
   }
   if(typeof Ppx_inline_test_lib[3] !== "number"){
    var
     Ppx_expect_test_block$6 =
       caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
     _cG_ =
       function(param){
        var
         _ft_ = bin_shape_t$1(Bin_prot_Std[83]),
         _fu_ = caml_call1(Bin_prot_Shape[15], _ft_),
         _fv_ = caml_call1(Bin_shape[19][4], _fu_);
        caml_call1(Stdlib[46], _fv_);
        var _fw_ = caml_call1(Ppx_expect_runtime_Types[4][1], 6);
        return caml_call1(Ppx_expect_test_block$6[2], _fw_);
       },
     _cJ_ =
       caml_call3
        (Ppx_expect_runtime_Test_node[1][1],
         [0, Ppx_expect_runtime_Types[1][1]],
         _cI_,
         _cH_),
     _cK_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 6), _cJ_], 0],
     _cL_ = caml_call1(Ppx_expect_runtime_Types[4][1], 8),
     _cM_ = caml_call1(Ppx_expect_runtime_Types[4][1], 7);
    caml_call14
     (Ppx_expect_test_block$6[3],
      cst_src_protocol_ml$8,
      69,
      _cP_,
      _cO_,
      _cN_,
      [0, Ppx_expect_runtime_Types[1][1]],
      0,
      _cM_,
      _cL_,
      0,
      0,
      Inline_test_config,
      _cK_,
      _cG_);
   }
   var
    Rpc_result =
      [0,
       bin_shape_t$1,
       bin_size_t$1,
       bin_write_t$1,
       bin_writer_t$1,
       bin_read_t$3,
       bin_read_t$4,
       bin_reader_t$1,
       bin_t$1,
       sexp_of_t$1],
    _G_ =
      [0,
       [0,
        cst_menu,
        caml_call1(Bin_prot_Std[195], Async_rpc_kernel_Menu[12][2][10])],
       0],
    _H_ =
      [0,
       [0,
        cst_identification,
        caml_call1(Bin_prot_Std[195], Core_Bigstring[134][1][7])],
       _G_],
    _I_ = caml_call1(Bin_prot_Shape[4], _H_),
    _J_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$3), 0, _I_], 0],
    _K_ = caml_call1(Bin_shape[4][1], cst_src_protocol_ml_77_4),
    group$2 = caml_call2(Bin_prot_Shape[2], _K_, _J_),
    _L_ = caml_call1(Bin_shape[2][1], cst_t$4),
    bin_shape_t$2 =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$2, _L_), 0);
   function bin_size_t$2(param){
    var
     v2 = param[2],
     v1 = param[1],
     _fr_ = caml_call2(Bin_prot_Std[15], Core_Bigstring[134][1][1], v1),
     size = caml_call2(Bin_prot_Common[23], 0, _fr_),
     _fs_ = caml_call2(Bin_prot_Std[15], Async_rpc_kernel_Menu[12][2][11], v2);
    return caml_call2(Bin_prot_Common[23], size, _fs_);
   }
   function bin_write_t$2(buf, pos, param){
    var
     v2 = param[2],
     v1 = param[1],
     pos$0 =
       caml_call4(Bin_prot_Std[197], Core_Bigstring[134][1][2], buf, pos, v1);
    return caml_call4
            (Bin_prot_Std[197],
             Async_rpc_kernel_Menu[12][2][12],
             buf,
             pos$0,
             v2);
   }
   var bin_writer_t$2 = [0, bin_size_t$2, bin_write_t$2];
   function bin_read_t$5(buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19], cst_src_protocol_ml_Connection, pos_ref[1]);
   }
   function bin_read_t$6(buf, pos_ref){
    var
     v_identification =
       caml_call2
        (caml_call1(Bin_prot_Std[200], Core_Bigstring[134][1][3]),
         buf,
         pos_ref),
     v_menu =
       caml_call2
        (caml_call1(Bin_prot_Std[200], Async_rpc_kernel_Menu[12][2][14]),
         buf,
         pos_ref);
    return [0, v_identification, v_menu];
   }
   var
    bin_reader_t$2 = [0, bin_read_t$6, bin_read_t$5],
    bin_t$2 = [0, bin_shape_t$2, bin_writer_t$2, bin_reader_t$2];
   function sexp_of_t$2(param){
    var
     menu_102 = param[2],
     identification_100 = param[1],
     arg_103 =
       caml_call2(Sexplib_Std[36], Async_rpc_kernel_Menu[12][2][18], menu_102),
     bnds_099 = [0, [1, [0, _M_, [0, arg_103, 0]]], 0],
     arg_101 =
       caml_call2
        (Sexplib_Std[36], Core_Bigstring[134][1][15], identification_100),
     bnds_099$0 = [0, [1, [0, _N_, [0, arg_101, 0]]], bnds_099];
    return [1, bnds_099$0];
   }
   var
    V1 =
      [0,
       bin_shape_t$2,
       bin_size_t$2,
       bin_write_t$2,
       bin_writer_t$2,
       bin_read_t$5,
       bin_read_t$6,
       bin_reader_t$2,
       bin_t$2,
       sexp_of_t$2],
    Connection_metadata = [0, V1],
    _O_ = caml_call1(Bin_shape[3][1], cst_a$1),
    _P_ = caml_call1(Bin_shape[4][1], cst_src_protocol_ml_92_13),
    _Q_ = [0, [0, cst_data, caml_call2(Bin_prot_Shape[11], _P_, _O_)], 0],
    _R_ =
      caml_call1
       (Bin_prot_Shape[4],
        [0,
         [0, cst_tag, Rpc_tag[5]],
         [0,
          [0, cst_version, Bin_prot_Std[123]],
          [0, [0, cst_id, Query_id[5]], _Q_]]]),
    _S_ = [0, caml_call1(Bin_shape[3][1], cst_a$2), 0],
    _T_ = [0, [0, caml_call1(Bin_shape[2][1], cst_needs_length), _S_, _R_], 0],
    _U_ = caml_call1(Bin_shape[4][1], cst_src_protocol_ml_88_2),
    group$3 = caml_call2(Bin_prot_Shape[2], _U_, _T_);
   function bin_shape_needs_length(a){
    var _fq_ = caml_call1(Bin_shape[2][1], cst_needs_length$0);
    return caml_call1
            (caml_call2(Bin_prot_Shape[10], group$3, _fq_), [0, a, 0]);
   }
   function bin_size_needs_length(size_of_a, param){
    var
     v4 = param[4],
     v3 = param[3],
     v2 = param[2],
     v1 = param[1],
     _fm_ = caml_call1(Rpc_tag[1], v1),
     size = caml_call2(Bin_prot_Common[23], 0, _fm_),
     _fn_ = caml_call1(Bin_prot_Std[6], v2),
     size$0 = caml_call2(Bin_prot_Common[23], size, _fn_),
     _fo_ = caml_call1(Query_id[1], v3),
     size$1 = caml_call2(Bin_prot_Common[23], size$0, _fo_),
     _fp_ = caml_call1(size_of_a, v4);
    return caml_call2(Bin_prot_Common[23], size$1, _fp_);
   }
   function bin_write_needs_length(write_a, buf, pos, param){
    var
     v4 = param[4],
     v3 = param[3],
     v2 = param[2],
     v1 = param[1],
     pos$0 = caml_call3(Rpc_tag[2], buf, pos, v1),
     pos$1 = caml_call3(Bin_prot_Std[125], buf, pos$0, v2),
     pos$2 = caml_call3(Query_id[2], buf, pos$1, v3);
    return caml_call3(write_a, buf, pos$2, v4);
   }
   function bin_writer_needs_length(bin_writer_a){
    function _fi_(v){
     var _fj_ = bin_writer_a[2];
     return function(_fk_, _fl_){
      return bin_write_needs_length(_fj_, v, _fk_, _fl_);};
    }
    return [0,
            function(v){return bin_size_needs_length(bin_writer_a[1], v);},
            _fi_];
   }
   function bin_read_needs_length(of_a, buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19], cst_src_protocol_ml_Query_v1_n, pos_ref[1]);
   }
   function bin_read_needs_length$0(of_a, buf, pos_ref){
    var
     v_tag = caml_call2(Rpc_tag[3], buf, pos_ref),
     v_version = caml_call2(Bin_prot_Std[128], buf, pos_ref),
     v_id = caml_call2(Query_id[3], buf, pos_ref),
     v_data = caml_call2(of_a, buf, pos_ref);
    return [0, v_tag, v_version, v_id, v_data];
   }
   function bin_reader_needs_length(bin_reader_a){
    function _fh_(buf, pos_ref, vtag){
     return bin_read_needs_length(bin_reader_a[1], buf, pos_ref, vtag);
    }
    return [0,
            function(buf, pos_ref){
             return bin_read_needs_length$0(bin_reader_a[1], buf, pos_ref);
            },
            _fh_];
   }
   function bin_needs_length(bin_a){
    var
     _ff_ = bin_reader_needs_length(bin_a[3]),
     _fg_ = bin_writer_needs_length(bin_a[2]);
    return [0, bin_shape_needs_length(bin_a[1]), _fg_, _ff_];
   }
   function sexp_of_needs_length(of_a_104, param){
    var
     data_112 = param[4],
     id_110 = param[3],
     version_108 = param[2],
     tag_106 = param[1],
     arg_113 = caml_call1(of_a_104, data_112),
     bnds_105 = [0, [1, [0, _V_, [0, arg_113, 0]]], 0],
     arg_111 = caml_call1(Query_id[10], id_110),
     bnds_105$0 = [0, [1, [0, _W_, [0, arg_111, 0]]], bnds_105],
     arg_109 = caml_call1(Sexplib_Std[15], version_108),
     bnds_105$1 = [0, [1, [0, _X_, [0, arg_109, 0]]], bnds_105$0],
     arg_107 = caml_call1(Rpc_tag[10], tag_106),
     bnds_105$2 = [0, [1, [0, _Y_, [0, arg_107, 0]]], bnds_105$1];
    return [1, bnds_105$2];
   }
   if(typeof Ppx_inline_test_lib[3] !== "number"){
    var
     Ppx_expect_test_block$5 =
       caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
     _cw_ =
       function(param){
        var
         _fb_ = bin_shape_needs_length(Bin_prot_Std[83]),
         _fc_ = caml_call1(Bin_prot_Shape[15], _fb_),
         _fd_ = caml_call1(Bin_shape[19][4], _fc_);
        caml_call1(Stdlib[46], _fd_);
        var _fe_ = caml_call1(Ppx_expect_runtime_Types[4][1], 9);
        return caml_call1(Ppx_expect_test_block$5[2], _fe_);
       },
     _cz_ =
       caml_call3
        (Ppx_expect_runtime_Test_node[1][1],
         [0, Ppx_expect_runtime_Types[1][1]],
         _cy_,
         _cx_),
     _cA_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 9), _cz_], 0],
     _cB_ = caml_call1(Ppx_expect_runtime_Types[4][1], 11),
     _cC_ = caml_call1(Ppx_expect_runtime_Types[4][1], 10);
    caml_call14
     (Ppx_expect_test_block$5[3],
      cst_src_protocol_ml$7,
      96,
      _cF_,
      _cE_,
      _cD_,
      [0, Ppx_expect_runtime_Types[1][1]],
      0,
      _cC_,
      _cB_,
      0,
      0,
      Inline_test_config,
      _cA_,
      _cw_);
   }
   function bin_read_t$7(of_a, buf, pos_ref, vint){
    return bin_read_needs_length(of_a, buf, pos_ref, vint);
   }
   function bin_read_t$8(of_a, buf, pos_ref){
    return bin_read_needs_length$0(of_a, buf, pos_ref);
   }
   function bin_reader_t$3(bin_reader_a){
    function _fa_(buf, pos_ref, vtag){
     return bin_read_t$7(bin_reader_a[1], buf, pos_ref, vtag);
    }
    return [0,
            function(buf, pos_ref){
             return bin_read_t$8(bin_reader_a[1], buf, pos_ref);
            },
            _fa_];
   }
   var
    Query_v1 =
      [0,
       bin_shape_needs_length,
       bin_size_needs_length,
       bin_write_needs_length,
       bin_writer_needs_length,
       bin_read_needs_length,
       bin_read_needs_length$0,
       bin_reader_needs_length,
       bin_needs_length,
       sexp_of_needs_length,
       bin_read_t$7,
       bin_read_t$8,
       bin_reader_t$3],
    _Z_ = caml_call1(Bin_shape[3][1], cst_a$3),
    ___ = caml_call1(Bin_shape[4][1], cst_src_protocol_ml_110_13),
    _$_ = [0, [0, cst_data$0, caml_call2(Bin_prot_Shape[11], ___, _Z_)], 0],
    _aa_ =
      [0,
       [0, cst_metadata, caml_call1(Bin_prot_Std[195], Bin_prot_Std[99])],
       _$_],
    _ab_ =
      caml_call1
       (Bin_prot_Shape[4],
        [0,
         [0, cst_tag$0, Rpc_tag[5]],
         [0,
          [0, cst_version$0, Bin_prot_Std[123]],
          [0, [0, cst_id$0, Query_id[5]], _aa_]]]),
    _ac_ = [0, caml_call1(Bin_shape[3][1], cst_a$4), 0],
    _ad_ =
      [0, [0, caml_call1(Bin_shape[2][1], cst_needs_length$1), _ac_, _ab_], 0],
    _ae_ = caml_call1(Bin_shape[4][1], cst_src_protocol_ml_105_2),
    group$4 = caml_call2(Bin_prot_Shape[2], _ae_, _ad_);
   function bin_shape_needs_length$0(a){
    var _e$_ = caml_call1(Bin_shape[2][1], cst_needs_length$2);
    return caml_call1
            (caml_call2(Bin_prot_Shape[10], group$4, _e$_), [0, a, 0]);
   }
   function bin_size_needs_length$0(size_of_a, param){
    var
     v5 = param[5],
     v4 = param[4],
     v3 = param[3],
     v2 = param[2],
     v1 = param[1],
     _e6_ = caml_call1(Rpc_tag[1], v1),
     size = caml_call2(Bin_prot_Common[23], 0, _e6_),
     _e7_ = caml_call1(Bin_prot_Std[6], v2),
     size$0 = caml_call2(Bin_prot_Common[23], size, _e7_),
     _e8_ = caml_call1(Query_id[1], v3),
     size$1 = caml_call2(Bin_prot_Common[23], size$0, _e8_),
     _e9_ = caml_call2(Bin_prot_Std[15], Bin_prot_Std[3], v4),
     size$2 = caml_call2(Bin_prot_Common[23], size$1, _e9_),
     _e__ = caml_call1(size_of_a, v5);
    return caml_call2(Bin_prot_Common[23], size$2, _e__);
   }
   function bin_write_needs_length$0(write_a, buf, pos, param){
    var
     v5 = param[5],
     v4 = param[4],
     v3 = param[3],
     v2 = param[2],
     v1 = param[1],
     pos$0 = caml_call3(Rpc_tag[2], buf, pos, v1),
     pos$1 = caml_call3(Bin_prot_Std[125], buf, pos$0, v2),
     pos$2 = caml_call3(Query_id[2], buf, pos$1, v3),
     pos$3 = caml_call4(Bin_prot_Std[197], Bin_prot_Std[101], buf, pos$2, v4);
    return caml_call3(write_a, buf, pos$3, v5);
   }
   function bin_writer_needs_length$0(bin_writer_a){
    function _e2_(v){
     var _e3_ = bin_writer_a[2];
     return function(_e4_, _e5_){
      return bin_write_needs_length$0(_e3_, v, _e4_, _e5_);};
    }
    return [0,
            function(v){return bin_size_needs_length$0(bin_writer_a[1], v);},
            _e2_];
   }
   function bin_read_needs_length$1(of_a, buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19], cst_src_protocol_ml_Query_need, pos_ref[1]);
   }
   function bin_read_needs_length$2(of_a, buf, pos_ref){
    var
     v_tag = caml_call2(Rpc_tag[3], buf, pos_ref),
     v_version = caml_call2(Bin_prot_Std[128], buf, pos_ref),
     v_id = caml_call2(Query_id[3], buf, pos_ref),
     v_metadata =
       caml_call2
        (caml_call1(Bin_prot_Std[200], Bin_prot_Std[104]), buf, pos_ref),
     v_data = caml_call2(of_a, buf, pos_ref);
    return [0, v_tag, v_version, v_id, v_metadata, v_data];
   }
   function bin_reader_needs_length$0(bin_reader_a){
    function _e1_(buf, pos_ref, vtag){
     return bin_read_needs_length$1(bin_reader_a[1], buf, pos_ref, vtag);
    }
    return [0,
            function(buf, pos_ref){
             return bin_read_needs_length$2(bin_reader_a[1], buf, pos_ref);
            },
            _e1_];
   }
   function bin_needs_length$0(bin_a){
    var
     _eZ_ = bin_reader_needs_length$0(bin_a[3]),
     _e0_ = bin_writer_needs_length$0(bin_a[2]);
    return [0, bin_shape_needs_length$0(bin_a[1]), _e0_, _eZ_];
   }
   function sexp_of_needs_length$0(of_a_114, param){
    var
     data_124 = param[5],
     metadata_122 = param[4],
     id_120 = param[3],
     version_118 = param[2],
     tag_116 = param[1],
     arg_125 = caml_call1(of_a_114, data_124),
     bnds_115 = [0, [1, [0, _af_, [0, arg_125, 0]]], 0],
     arg_123 = caml_call2(Sexplib_Std[36], Sexplib_Std[9], metadata_122),
     bnds_115$0 = [0, [1, [0, _ag_, [0, arg_123, 0]]], bnds_115],
     arg_121 = caml_call1(Query_id[10], id_120),
     bnds_115$1 = [0, [1, [0, _ah_, [0, arg_121, 0]]], bnds_115$0],
     arg_119 = caml_call1(Sexplib_Std[15], version_118),
     bnds_115$2 = [0, [1, [0, _ai_, [0, arg_119, 0]]], bnds_115$1],
     arg_117 = caml_call1(Rpc_tag[10], tag_116),
     bnds_115$3 = [0, [1, [0, _aj_, [0, arg_117, 0]]], bnds_115$2];
    return [1, bnds_115$3];
   }
   if(typeof Ppx_inline_test_lib[3] !== "number"){
    var
     Ppx_expect_test_block$4 =
       caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
     _cm_ =
       function(param){
        var
         _eV_ = bin_shape_needs_length$0(Bin_prot_Std[83]),
         _eW_ = caml_call1(Bin_prot_Shape[15], _eV_),
         _eX_ = caml_call1(Bin_shape[19][4], _eW_);
        caml_call1(Stdlib[46], _eX_);
        var _eY_ = caml_call1(Ppx_expect_runtime_Types[4][1], 12);
        return caml_call1(Ppx_expect_test_block$4[2], _eY_);
       },
     _cp_ =
       caml_call3
        (Ppx_expect_runtime_Test_node[1][1],
         [0, Ppx_expect_runtime_Types[1][1]],
         _co_,
         _cn_),
     _cq_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 12), _cp_], 0],
     _cr_ = caml_call1(Ppx_expect_runtime_Types[4][1], 14),
     _cs_ = caml_call1(Ppx_expect_runtime_Types[4][1], 13);
    caml_call14
     (Ppx_expect_test_block$4[3],
      cst_src_protocol_ml$6,
      114,
      _cv_,
      _cu_,
      _ct_,
      [0, Ppx_expect_runtime_Types[1][1]],
      0,
      _cs_,
      _cr_,
      0,
      0,
      Inline_test_config,
      _cq_,
      _cm_);
   }
   function bin_read_t$9(of_a, buf, pos_ref, vint){
    return bin_read_needs_length$1(of_a, buf, pos_ref, vint);
   }
   function bin_read_t$10(of_a, buf, pos_ref){
    return bin_read_needs_length$2(of_a, buf, pos_ref);
   }
   function bin_reader_t$4(bin_reader_a){
    function _eU_(buf, pos_ref, vtag){
     return bin_read_t$9(bin_reader_a[1], buf, pos_ref, vtag);
    }
    return [0,
            function(buf, pos_ref){
             return bin_read_t$10(bin_reader_a[1], buf, pos_ref);
            },
            _eU_];
   }
   function to_v1(param){
    var data = param[5], id = param[3], version = param[2], tag = param[1];
    return [0, tag, version, id, data];
   }
   function of_v1(metadata, param){
    var data = param[4], id = param[3], version = param[2], tag = param[1];
    return [0, tag, version, id, metadata, data];
   }
   var
    Query =
      [0,
       bin_shape_needs_length$0,
       bin_size_needs_length$0,
       bin_write_needs_length$0,
       bin_writer_needs_length$0,
       bin_read_needs_length$1,
       bin_read_needs_length$2,
       bin_reader_needs_length$0,
       bin_needs_length$0,
       sexp_of_needs_length$0,
       bin_read_t$9,
       bin_read_t$10,
       bin_reader_t$4,
       to_v1,
       of_v1],
    _ak_ = caml_call1(Bin_shape[3][1], cst_a$5),
    _al_ = caml_call1(Bin_shape[4][1], cst_src_protocol_ml_133_13),
    _am_ = caml_call2(Bin_prot_Shape[11], _al_, _ak_),
    _an_ = [0, [0, cst_data$1, caml_call1(Rpc_result[1], _am_)], 0],
    _ao_ =
      caml_call1(Bin_prot_Shape[4], [0, [0, cst_id$1, Query_id[5]], _an_]),
    _ap_ = [0, caml_call1(Bin_shape[3][1], cst_a$6), 0],
    _aq_ =
      [0, [0, caml_call1(Bin_shape[2][1], cst_needs_length$3), _ap_, _ao_], 0],
    _ar_ = caml_call1(Bin_shape[4][1], cst_src_protocol_ml_131_2),
    group$5 = caml_call2(Bin_prot_Shape[2], _ar_, _aq_);
   function bin_shape_needs_length$1(a){
    var _eT_ = caml_call1(Bin_shape[2][1], cst_needs_length$4);
    return caml_call1
            (caml_call2(Bin_prot_Shape[10], group$5, _eT_), [0, a, 0]);
   }
   function bin_size_needs_length$1(size_of_a, param){
    var
     v2 = param[2],
     v1 = param[1],
     _eR_ = caml_call1(Query_id[1], v1),
     size = caml_call2(Bin_prot_Common[23], 0, _eR_),
     _eS_ = caml_call2(Rpc_result[2], size_of_a, v2);
    return caml_call2(Bin_prot_Common[23], size, _eS_);
   }
   function bin_write_needs_length$1(write_a, buf, pos, param){
    var
     v2 = param[2],
     v1 = param[1],
     pos$0 = caml_call3(Query_id[2], buf, pos, v1);
    return caml_call4(Rpc_result[3], write_a, buf, pos$0, v2);
   }
   function bin_writer_needs_length$1(bin_writer_a){
    function _eN_(v){
     var _eO_ = bin_writer_a[2];
     return function(_eP_, _eQ_){
      return bin_write_needs_length$1(_eO_, v, _eP_, _eQ_);};
    }
    return [0,
            function(v){return bin_size_needs_length$1(bin_writer_a[1], v);},
            _eN_];
   }
   function bin_read_needs_length$3(of_a, buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19], cst_src_protocol_ml_Response_n, pos_ref[1]);
   }
   function bin_read_needs_length$4(of_a, buf, pos_ref){
    var
     v_id = caml_call2(Query_id[3], buf, pos_ref),
     v_data = caml_call2(caml_call1(Rpc_result[6], of_a), buf, pos_ref);
    return [0, v_id, v_data];
   }
   function bin_reader_needs_length$1(bin_reader_a){
    function _eM_(buf, pos_ref, vtag){
     return bin_read_needs_length$3(bin_reader_a[1], buf, pos_ref, vtag);
    }
    return [0,
            function(buf, pos_ref){
             return bin_read_needs_length$4(bin_reader_a[1], buf, pos_ref);
            },
            _eM_];
   }
   function bin_needs_length$1(bin_a){
    var
     _eK_ = bin_reader_needs_length$1(bin_a[3]),
     _eL_ = bin_writer_needs_length$1(bin_a[2]);
    return [0, bin_shape_needs_length$1(bin_a[1]), _eL_, _eK_];
   }
   function sexp_of_needs_length$1(of_a_126, param){
    var
     data_130 = param[2],
     id_128 = param[1],
     arg_131 = caml_call2(Rpc_result[9], of_a_126, data_130),
     bnds_127 = [0, [1, [0, _as_, [0, arg_131, 0]]], 0],
     arg_129 = caml_call1(Query_id[10], id_128),
     bnds_127$0 = [0, [1, [0, _at_, [0, arg_129, 0]]], bnds_127];
    return [1, bnds_127$0];
   }
   if(typeof Ppx_inline_test_lib[3] !== "number"){
    var
     Ppx_expect_test_block$3 =
       caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
     _cc_ =
       function(param){
        var
         _eG_ = bin_shape_needs_length$1(Bin_prot_Std[83]),
         _eH_ = caml_call1(Bin_prot_Shape[15], _eG_),
         _eI_ = caml_call1(Bin_shape[19][4], _eH_);
        caml_call1(Stdlib[46], _eI_);
        var _eJ_ = caml_call1(Ppx_expect_runtime_Types[4][1], 15);
        return caml_call1(Ppx_expect_test_block$3[2], _eJ_);
       },
     _cf_ =
       caml_call3
        (Ppx_expect_runtime_Test_node[1][1],
         [0, Ppx_expect_runtime_Types[1][1]],
         _ce_,
         _cd_),
     _cg_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 15), _cf_], 0],
     _ch_ = caml_call1(Ppx_expect_runtime_Types[4][1], 17),
     _ci_ = caml_call1(Ppx_expect_runtime_Types[4][1], 16);
    caml_call14
     (Ppx_expect_test_block$3[3],
      cst_src_protocol_ml$5,
      137,
      _cl_,
      _ck_,
      _cj_,
      [0, Ppx_expect_runtime_Types[1][1]],
      0,
      _ci_,
      _ch_,
      0,
      0,
      Inline_test_config,
      _cg_,
      _cc_);
   }
   function bin_read_t$11(of_a, buf, pos_ref, vint){
    return bin_read_needs_length$3(of_a, buf, pos_ref, vint);
   }
   function bin_read_t$12(of_a, buf, pos_ref){
    return bin_read_needs_length$4(of_a, buf, pos_ref);
   }
   function bin_reader_t$5(bin_reader_a){
    function _eF_(buf, pos_ref, vtag){
     return bin_read_t$11(bin_reader_a[1], buf, pos_ref, vtag);
    }
    return [0,
            function(buf, pos_ref){
             return bin_read_t$12(bin_reader_a[1], buf, pos_ref);
            },
            _eF_];
   }
   var
    Response =
      [0,
       bin_shape_needs_length$1,
       bin_size_needs_length$1,
       bin_write_needs_length$1,
       bin_writer_needs_length$1,
       bin_read_needs_length$3,
       bin_read_needs_length$4,
       bin_reader_needs_length$1,
       bin_needs_length$1,
       sexp_of_needs_length$1,
       bin_read_t$11,
       bin_read_t$12,
       bin_reader_t$5],
    _au_ = [0, caml_call2(Bin_prot_Shape[6], cst_Abort, 0), 0],
    _av_ = caml_call1(Bin_shape[3][1], cst_a$7),
    _aw_ = caml_call1(Bin_shape[4][1], cst_src_protocol_ml_147_16),
    _ax_ = [0, caml_call2(Bin_prot_Shape[11], _aw_, _av_)],
    _ay_ = [0, caml_call2(Bin_prot_Shape[6], cst_Query, _ax_), _au_],
    _az_ = caml_call1(Bin_shape[4][1], cst_src_protocol_ml_147_4),
    _aA_ = caml_call2(Bin_prot_Shape[8], _az_, _ay_),
    _aB_ = [0, caml_call1(Bin_shape[3][1], cst_a$8), 0],
    _aC_ =
      [0, [0, caml_call1(Bin_shape[2][1], cst_needs_length$5), _aB_, _aA_], 0],
    _aD_ = caml_call1(Bin_shape[4][1], cst_src_protocol_ml_146_2),
    group$6 = caml_call2(Bin_prot_Shape[2], _aD_, _aC_);
   function bin_shape_needs_length$2(a){
    var _eE_ = caml_call1(Bin_shape[2][1], cst_needs_length$6);
    return caml_call1
            (caml_call2(Bin_prot_Shape[10], group$6, _eE_), [0, a, 0]);
   }
   function bin_size_needs_length$2(size_of_a, param){
    if(typeof param !== "number" && -250086680 === param[1]){
     var args = param[2], size_args = caml_call1(size_of_a, args);
     return caml_call2(Bin_prot_Common[23], size_args, 4);
    }
    return 4;
   }
   function bin_write_needs_length$2(write_a, buf, pos, param){
    if(typeof param === "number")
     return caml_call3(Bin_prot_Write[29], buf, pos, 774323088);
    var
     args = param[2],
     pos$0 = caml_call3(Bin_prot_Write[29], buf, pos, -250086680);
    return caml_call3(write_a, buf, pos$0, args);
   }
   function bin_writer_needs_length$2(bin_writer_a){
    function _eA_(v){
     var _eB_ = bin_writer_a[2];
     return function(_eC_, _eD_){
      return bin_write_needs_length$2(_eB_, v, _eC_, _eD_);};
    }
    return [0,
            function(v){return bin_size_needs_length$2(bin_writer_a[1], v);},
            _eA_];
   }
   function bin_read_needs_length$5(of_a, buf, pos_ref, vint){
    if(-250086680 === vint){
     var arg_1 = caml_call2(of_a, buf, pos_ref);
     return [0, -250086680, arg_1];
    }
    if(774323088 === vint) return 774323088;
    throw caml_maybe_attach_backtrace(Bin_prot_Common[13], 1);
   }
   function bin_read_needs_length$6(of_a, buf, pos_ref){
    var vint = caml_call2(Bin_prot_Read[28], buf, pos_ref);
    try{
     var _ey_ = bin_read_needs_length$5(of_a, buf, pos_ref, vint);
     return _ey_;
    }
    catch(_ez_){
     var _ex_ = caml_wrap_exception(_ez_);
     if(_ex_ === Bin_prot_Common[13])
      return caml_call2(Bin_prot_Common[18], err, pos_ref[1]);
     throw caml_maybe_attach_backtrace(_ex_, 0);
    }
   }
   function bin_reader_needs_length$2(bin_reader_a){
    function _ew_(buf, pos_ref, vtag){
     return bin_read_needs_length$5(bin_reader_a[1], buf, pos_ref, vtag);
    }
    return [0,
            function(buf, pos_ref){
             return bin_read_needs_length$6(bin_reader_a[1], buf, pos_ref);
            },
            _ew_];
   }
   function bin_needs_length$2(bin_a){
    var
     _eu_ = bin_reader_needs_length$2(bin_a[3]),
     _ev_ = bin_writer_needs_length$2(bin_a[2]);
    return [0, bin_shape_needs_length$2(bin_a[1]), _ev_, _eu_];
   }
   function sexp_of_needs_length$2(of_a_132, param){
    if(typeof param === "number") return _aE_;
    var v_133 = param[2];
    return [1, [0, _aF_, [0, caml_call1(of_a_132, v_133), 0]]];
   }
   if(typeof Ppx_inline_test_lib[3] !== "number"){
    var
     Ppx_expect_test_block$2 =
       caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
     _b4_ =
       function(param){
        var
         _eq_ = bin_shape_needs_length$2(Bin_prot_Std[83]),
         _er_ = caml_call1(Bin_prot_Shape[15], _eq_),
         _es_ = caml_call1(Bin_shape[19][4], _er_);
        caml_call1(Stdlib[46], _es_);
        var _et_ = caml_call1(Ppx_expect_runtime_Types[4][1], 18);
        return caml_call1(Ppx_expect_test_block$2[2], _et_);
       },
     _b7_ =
       caml_call3
        (Ppx_expect_runtime_Test_node[1][1],
         [0, Ppx_expect_runtime_Types[1][1]],
         _b6_,
         _b5_),
     _b8_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 18), _b7_], 0],
     _b9_ = caml_call1(Ppx_expect_runtime_Types[4][1], 20),
     _b__ = caml_call1(Ppx_expect_runtime_Types[4][1], 19);
    caml_call14
     (Ppx_expect_test_block$2[3],
      cst_src_protocol_ml$4,
      152,
      _cb_,
      _ca_,
      _b$_,
      [0, Ppx_expect_runtime_Types[1][1]],
      0,
      _b__,
      _b9_,
      0,
      0,
      Inline_test_config,
      _b8_,
      _b4_);
   }
   function bin_read_t$13(of_a, buf, pos_ref, vint){
    return bin_read_needs_length$5(of_a, buf, pos_ref, vint);
   }
   function bin_read_t$14(of_a, buf, pos_ref){
    return bin_read_needs_length$6(of_a, buf, pos_ref);
   }
   function bin_reader_t$6(bin_reader_a){
    function _ep_(buf, pos_ref, vtag){
     return bin_read_t$13(bin_reader_a[1], buf, pos_ref, vtag);
    }
    return [0,
            function(buf, pos_ref){
             return bin_read_t$14(bin_reader_a[1], buf, pos_ref);
            },
            _ep_];
   }
   function bin_read_nat0_t(buf, pos_ref, vint){
    return bin_read_needs_length$5
            (Async_rpc_kernel_Nat0[3], buf, pos_ref, vint);
   }
   function bin_read_nat0_t$0(buf, pos_ref){
    return bin_read_needs_length$6(Async_rpc_kernel_Nat0[3], buf, pos_ref);
   }
   var bin_reader_nat0_t = [0, bin_read_nat0_t$0, bin_read_nat0_t];
   function bin_size_nat0_t(v){
    return bin_size_needs_length$2(Async_rpc_kernel_Nat0[1], v);
   }
   function bin_write_nat0_t(buf, pos, v){
    return bin_write_needs_length$2(Async_rpc_kernel_Nat0[2], buf, pos, v);
   }
   var
    bin_writer_nat0_t = [0, bin_size_nat0_t, bin_write_nat0_t],
    Stream_query =
      [0,
       bin_shape_needs_length$2,
       bin_size_needs_length$2,
       bin_write_needs_length$2,
       bin_writer_needs_length$2,
       bin_read_needs_length$5,
       bin_read_needs_length$6,
       bin_reader_needs_length$2,
       bin_needs_length$2,
       sexp_of_needs_length$2,
       bin_read_t$13,
       bin_read_t$14,
       bin_reader_t$6,
       bin_read_nat0_t,
       bin_read_nat0_t$0,
       bin_reader_nat0_t,
       bin_size_nat0_t,
       bin_write_nat0_t,
       bin_writer_nat0_t],
    _aG_ = caml_call1(Bin_shape[3][1], cst_error),
    _aH_ = caml_call1(Bin_shape[4][1], cst_src_protocol_ml_164_28),
    _aI_ = caml_call2(Bin_prot_Shape[11], _aH_, _aG_),
    _aJ_ = caml_call1(Bin_shape[3][1], cst_response),
    _aK_ = caml_call1(Bin_shape[4][1], cst_src_protocol_ml_164_17),
    _aL_ = caml_call2(Bin_prot_Shape[11], _aK_, _aJ_),
    _aM_ =
      [0,
       [0, cst_initial, caml_call1(caml_call1(Core_Result[1], _aL_), _aI_)],
       0],
    _aN_ =
      caml_call1
       (Bin_prot_Shape[4],
        [0, [0, cst_unused_query_id, Unused_query_id[5]], _aM_]),
    _aO_ = [0, caml_call1(Bin_shape[3][1], cst_error$0), 0],
    _aP_ = [0, caml_call1(Bin_shape[3][1], cst_response$0), _aO_],
    _aQ_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$5), _aP_, _aN_], 0],
    _aR_ = caml_call1(Bin_shape[4][1], cst_src_protocol_ml_162_2),
    group$7 = caml_call2(Bin_prot_Shape[2], _aR_, _aQ_);
   function bin_shape_t$3(response, error){
    var _eo_ = caml_call1(Bin_shape[2][1], cst_t$6);
    return caml_call1
            (caml_call2(Bin_prot_Shape[10], group$7, _eo_),
             [0, response, [0, error, 0]]);
   }
   function bin_size_t$3(size_of_response, size_of_error, param){
    var
     v2 = param[2],
     v1 = param[1],
     _em_ = caml_call1(Unused_query_id[1], v1),
     size = caml_call2(Bin_prot_Common[23], 0, _em_),
     _en_ = caml_call3(Core_Result[2], size_of_response, size_of_error, v2);
    return caml_call2(Bin_prot_Common[23], size, _en_);
   }
   function bin_write_t$3(write_response, write_error, buf, pos, param){
    var
     v2 = param[2],
     v1 = param[1],
     pos$0 = caml_call3(Unused_query_id[2], buf, pos, v1);
    return caml_call5
            (Core_Result[3], write_response, write_error, buf, pos$0, v2);
   }
   function bin_writer_t$3(bin_writer_response, bin_writer_error){
    function _eh_(v){
     var _ei_ = bin_writer_error[2], _ej_ = bin_writer_response[2];
     return function(_ek_, _el_){
      return bin_write_t$3(_ej_, _ei_, v, _ek_, _el_);};
    }
    return [0,
            function(v){
             return bin_size_t$3
                     (bin_writer_response[1], bin_writer_error[1], v);
            },
            _eh_];
   }
   function bin_read_t$15(of_response, of_error, buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19], cst_src_protocol_ml_Stream_ini, pos_ref[1]);
   }
   function bin_read_t$16(of_response, of_error, buf, pos_ref){
    var
     v_unused_query_id = caml_call2(Unused_query_id[3], buf, pos_ref),
     v_initial =
       caml_call2
        (caml_call2(Core_Result[4], of_response, of_error), buf, pos_ref);
    return [0, v_unused_query_id, v_initial];
   }
   function bin_reader_t$7(bin_reader_response, bin_reader_error){
    function _eg_(buf, pos_ref, vtag){
     return bin_read_t$15
             (bin_reader_response[1], bin_reader_error[1], buf, pos_ref, vtag);
    }
    return [0,
            function(buf, pos_ref){
             return bin_read_t$16
                     (bin_reader_response[1], bin_reader_error[1], buf, pos_ref);
            },
            _eg_];
   }
   function bin_t$3(bin_response, bin_error){
    var
     _ee_ = bin_reader_t$7(bin_response[3], bin_error[3]),
     _ef_ = bin_writer_t$3(bin_response[2], bin_error[2]);
    return [0, bin_shape_t$3(bin_response[1], bin_error[1]), _ef_, _ee_];
   }
   function sexp_of_t$3(of_response_134, of_error_135, param){
    var
     initial_139 = param[2],
     unused_query_id_137 = param[1],
     arg_140 =
       caml_call3(Core_Result[15], of_response_134, of_error_135, initial_139),
     bnds_136 = [0, [1, [0, _aS_, [0, arg_140, 0]]], 0],
     arg_138 = caml_call1(Unused_query_id[9], unused_query_id_137),
     bnds_136$0 = [0, [1, [0, _aT_, [0, arg_138, 0]]], bnds_136];
    return [1, bnds_136$0];
   }
   if(typeof Ppx_inline_test_lib[3] !== "number"){
    var
     Ppx_expect_test_block$1 =
       caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
     _bU_ =
       function(param){
        var
         _ed_ = bin_shape_t$3(Bin_prot_Std[83], Bin_prot_Std[83]),
         _ea_ = caml_call1(Bin_prot_Shape[15], _ed_),
         _eb_ = caml_call1(Bin_shape[19][4], _ea_);
        caml_call1(Stdlib[46], _eb_);
        var _ec_ = caml_call1(Ppx_expect_runtime_Types[4][1], 21);
        return caml_call1(Ppx_expect_test_block$1[2], _ec_);
       },
     _bX_ =
       caml_call3
        (Ppx_expect_runtime_Test_node[1][1],
         [0, Ppx_expect_runtime_Types[1][1]],
         _bW_,
         _bV_),
     _bY_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 21), _bX_], 0],
     _bZ_ = caml_call1(Ppx_expect_runtime_Types[4][1], 23),
     _b0_ = caml_call1(Ppx_expect_runtime_Types[4][1], 22);
    caml_call14
     (Ppx_expect_test_block$1[3],
      cst_src_protocol_ml$3,
      168,
      _b3_,
      _b2_,
      _b1_,
      [0, Ppx_expect_runtime_Types[1][1]],
      0,
      _b0_,
      _bZ_,
      0,
      0,
      Inline_test_config,
      _bY_,
      _bU_);
   }
   var
    Stream_initial_message =
      [0,
       bin_shape_t$3,
       bin_size_t$3,
       bin_write_t$3,
       bin_writer_t$3,
       bin_read_t$15,
       bin_read_t$16,
       bin_reader_t$7,
       bin_t$3,
       sexp_of_t$3],
    _aU_ = [0, caml_call2(Bin_prot_Shape[6], cst_Eof, 0), 0],
    _aV_ = caml_call1(Bin_shape[3][1], cst_a$9),
    _aW_ = caml_call1(Bin_shape[4][1], cst_src_protocol_ml_176_13),
    _aX_ = [0, caml_call2(Bin_prot_Shape[11], _aW_, _aV_)],
    _aY_ = [0, caml_call2(Bin_prot_Shape[6], cst_Ok, _aX_), _aU_],
    _aZ_ = caml_call1(Bin_shape[4][1], cst_src_protocol_ml_176_4),
    _a0_ = caml_call2(Bin_prot_Shape[8], _aZ_, _aY_),
    _a1_ = [0, caml_call1(Bin_shape[3][1], cst_a$10), 0],
    _a2_ =
      [0, [0, caml_call1(Bin_shape[2][1], cst_needs_length$7), _a1_, _a0_], 0],
    _a3_ = caml_call1(Bin_shape[4][1], cst_src_protocol_ml_175_2),
    group$8 = caml_call2(Bin_prot_Shape[2], _a3_, _a2_);
   function bin_shape_needs_length$3(a){
    var _d$_ = caml_call1(Bin_shape[2][1], cst_needs_length$8);
    return caml_call1
            (caml_call2(Bin_prot_Shape[10], group$8, _d$_), [0, a, 0]);
   }
   function bin_size_needs_length$3(size_of_a, param){
    if(typeof param !== "number" && 17724 === param[1]){
     var args = param[2], size_args = caml_call1(size_of_a, args);
     return caml_call2(Bin_prot_Common[23], size_args, 4);
    }
    return 4;
   }
   function bin_write_needs_length$3(write_a, buf, pos, param){
    if(typeof param === "number")
     return caml_call3(Bin_prot_Write[29], buf, pos, 3456156);
    var
     args = param[2],
     pos$0 = caml_call3(Bin_prot_Write[29], buf, pos, 17724);
    return caml_call3(write_a, buf, pos$0, args);
   }
   function bin_writer_needs_length$3(bin_writer_a){
    function _d7_(v){
     var _d8_ = bin_writer_a[2];
     return function(_d9_, _d__){
      return bin_write_needs_length$3(_d8_, v, _d9_, _d__);};
    }
    return [0,
            function(v){return bin_size_needs_length$3(bin_writer_a[1], v);},
            _d7_];
   }
   function bin_read_needs_length$7(of_a, buf, pos_ref, vint){
    if(17724 === vint){
     var arg_1 = caml_call2(of_a, buf, pos_ref);
     return [0, 17724, arg_1];
    }
    if(3456156 === vint) return 3456156;
    throw caml_maybe_attach_backtrace(Bin_prot_Common[13], 1);
   }
   function bin_read_needs_length$8(of_a, buf, pos_ref){
    var vint = caml_call2(Bin_prot_Read[28], buf, pos_ref);
    try{
     var _d5_ = bin_read_needs_length$7(of_a, buf, pos_ref, vint);
     return _d5_;
    }
    catch(_d6_){
     var _d4_ = caml_wrap_exception(_d6_);
     if(_d4_ === Bin_prot_Common[13])
      return caml_call2(Bin_prot_Common[18], err$0, pos_ref[1]);
     throw caml_maybe_attach_backtrace(_d4_, 0);
    }
   }
   function bin_reader_needs_length$3(bin_reader_a){
    function _d3_(buf, pos_ref, vtag){
     return bin_read_needs_length$7(bin_reader_a[1], buf, pos_ref, vtag);
    }
    return [0,
            function(buf, pos_ref){
             return bin_read_needs_length$8(bin_reader_a[1], buf, pos_ref);
            },
            _d3_];
   }
   function bin_needs_length$3(bin_a){
    var
     _d1_ = bin_reader_needs_length$3(bin_a[3]),
     _d2_ = bin_writer_needs_length$3(bin_a[2]);
    return [0, bin_shape_needs_length$3(bin_a[1]), _d2_, _d1_];
   }
   function sexp_of_needs_length$3(of_a_141, param){
    if(typeof param === "number") return _a4_;
    var v_142 = param[2];
    return [1, [0, _a5_, [0, caml_call1(of_a_141, v_142), 0]]];
   }
   if(typeof Ppx_inline_test_lib[3] !== "number"){
    var
     Ppx_expect_test_block$0 =
       caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
     _bK_ =
       function(param){
        var
         _dX_ = bin_shape_needs_length$3(Bin_prot_Std[83]),
         _dY_ = caml_call1(Bin_prot_Shape[15], _dX_),
         _dZ_ = caml_call1(Bin_shape[19][4], _dY_);
        caml_call1(Stdlib[46], _dZ_);
        var _d0_ = caml_call1(Ppx_expect_runtime_Types[4][1], 24);
        return caml_call1(Ppx_expect_test_block$0[2], _d0_);
       },
     _bN_ =
       caml_call3
        (Ppx_expect_runtime_Test_node[1][1],
         [0, Ppx_expect_runtime_Types[1][1]],
         _bM_,
         _bL_),
     _bO_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 24), _bN_], 0],
     _bP_ = caml_call1(Ppx_expect_runtime_Types[4][1], 26),
     _bQ_ = caml_call1(Ppx_expect_runtime_Types[4][1], 25);
    caml_call14
     (Ppx_expect_test_block$0[3],
      cst_src_protocol_ml$2,
      181,
      _bT_,
      _bS_,
      _bR_,
      [0, Ppx_expect_runtime_Types[1][1]],
      0,
      _bQ_,
      _bP_,
      0,
      0,
      Inline_test_config,
      _bO_,
      _bK_);
   }
   function bin_read_t$17(of_a, buf, pos_ref, vint){
    return bin_read_needs_length$7(of_a, buf, pos_ref, vint);
   }
   function bin_read_t$18(of_a, buf, pos_ref){
    return bin_read_needs_length$8(of_a, buf, pos_ref);
   }
   function bin_reader_t$8(bin_reader_a){
    function _dW_(buf, pos_ref, vtag){
     return bin_read_t$17(bin_reader_a[1], buf, pos_ref, vtag);
    }
    return [0,
            function(buf, pos_ref){
             return bin_read_t$18(bin_reader_a[1], buf, pos_ref);
            },
            _dW_];
   }
   function bin_read_nat0_t$1(buf, pos_ref, vint){
    return bin_read_needs_length$7
            (Async_rpc_kernel_Nat0[3], buf, pos_ref, vint);
   }
   function bin_read_nat0_t$2(buf, pos_ref){
    return bin_read_needs_length$8(Async_rpc_kernel_Nat0[3], buf, pos_ref);
   }
   var bin_reader_nat0_t$0 = [0, bin_read_nat0_t$2, bin_read_nat0_t$1];
   function bin_size_nat0_t$0(v){
    return bin_size_needs_length$3(Async_rpc_kernel_Nat0[1], v);
   }
   function bin_write_nat0_t$0(buf, pos, v){
    return bin_write_needs_length$3(Async_rpc_kernel_Nat0[2], buf, pos, v);
   }
   var
    bin_writer_nat0_t$0 = [0, bin_size_nat0_t$0, bin_write_nat0_t$0],
    Stream_response_data =
      [0,
       bin_shape_needs_length$3,
       bin_size_needs_length$3,
       bin_write_needs_length$3,
       bin_writer_needs_length$3,
       bin_read_needs_length$7,
       bin_read_needs_length$8,
       bin_reader_needs_length$3,
       bin_needs_length$3,
       sexp_of_needs_length$3,
       bin_read_t$17,
       bin_read_t$18,
       bin_reader_t$8,
       sexp_of_needs_length$3,
       bin_read_nat0_t$1,
       bin_read_nat0_t$2,
       bin_reader_nat0_t$0,
       bin_size_nat0_t$0,
       bin_write_nat0_t$0,
       bin_writer_nat0_t$0],
    _a6_ = [0, [0, cst_Metadata, [0, Connection_metadata[1][1], 0]], 0],
    _a7_ = caml_call1(Bin_shape[3][1], cst_a$11),
    _a8_ = caml_call1(Bin_shape[4][1], cst_src_protocol_ml_195_15),
    _a9_ = caml_call2(Bin_prot_Shape[11], _a8_, _a7_),
    _a__ = [0, [0, cst_Query$0, [0, caml_call1(Query[1], _a9_), 0]], _a6_],
    _a$_ = caml_call1(Bin_shape[3][1], cst_a$12),
    _ba_ = caml_call1(Bin_shape[4][1], cst_src_protocol_ml_194_18),
    _bb_ = caml_call2(Bin_prot_Shape[11], _ba_, _a$_),
    _bc_ = [0, [0, cst_Response, [0, caml_call1(Response[1], _bb_), 0]], _a__],
    _bd_ = caml_call1(Bin_shape[3][1], cst_a$13),
    _be_ = caml_call1(Bin_shape[4][1], cst_src_protocol_ml_193_18),
    _bf_ = caml_call2(Bin_prot_Shape[11], _be_, _bd_),
    _bh_ =
      [0,
       _bg_,
       [0, [0, cst_Query_v1, [0, caml_call1(Query_v1[1], _bf_), 0]], _bc_]],
    _bi_ = caml_call1(Bin_prot_Shape[5], _bh_),
    _bj_ = [0, caml_call1(Bin_shape[3][1], cst_a$14), 0],
    _bk_ =
      [0,
       [0, caml_call1(Bin_shape[2][1], cst_maybe_needs_length), _bj_, _bi_],
       0],
    _bl_ = caml_call1(Bin_shape[4][1], cst_src_protocol_ml_191_2),
    group$9 = caml_call2(Bin_prot_Shape[2], _bl_, _bk_);
   function bin_shape_maybe_needs_length(a){
    var _dV_ = caml_call1(Bin_shape[2][1], cst_maybe_needs_length$0);
    return caml_call1
            (caml_call2(Bin_prot_Shape[10], group$9, _dV_), [0, a, 0]);
   }
   function bin_size_maybe_needs_length(size_of_a, param){
    if(typeof param === "number") return 1;
    switch(param[0]){
      case 0:
       var v1 = param[1], _dR_ = caml_call2(Query_v1[2], size_of_a, v1);
       return caml_call2(Bin_prot_Common[23], 1, _dR_);
      case 1:
       var v1$0 = param[1], _dS_ = caml_call2(Response[2], size_of_a, v1$0);
       return caml_call2(Bin_prot_Common[23], 1, _dS_);
      case 2:
       var v1$1 = param[1], _dT_ = caml_call2(Query[2], size_of_a, v1$1);
       return caml_call2(Bin_prot_Common[23], 1, _dT_);
      default:
       var
        v1$2 = param[1],
        _dU_ = caml_call1(Connection_metadata[1][2], v1$2);
       return caml_call2(Bin_prot_Common[23], 1, _dU_);
    }
   }
   function bin_write_maybe_needs_length(write_a, buf, pos, param){
    if(typeof param === "number")
     return caml_call3(Bin_prot_Write[30], buf, pos, 0);
    switch(param[0]){
      case 0:
       var v1 = param[1], pos$0 = caml_call3(Bin_prot_Write[30], buf, pos, 1);
       return caml_call4(Query_v1[3], write_a, buf, pos$0, v1);
      case 1:
       var
        v1$0 = param[1],
        pos$1 = caml_call3(Bin_prot_Write[30], buf, pos, 2);
       return caml_call4(Response[3], write_a, buf, pos$1, v1$0);
      case 2:
       var
        v1$1 = param[1],
        pos$2 = caml_call3(Bin_prot_Write[30], buf, pos, 3);
       return caml_call4(Query[3], write_a, buf, pos$2, v1$1);
      default:
       var
        v1$2 = param[1],
        pos$3 = caml_call3(Bin_prot_Write[30], buf, pos, 4);
       return caml_call3(Connection_metadata[1][3], buf, pos$3, v1$2);
    }
   }
   function bin_writer_maybe_needs_length(bin_writer_a){
    function _dN_(v){
     var _dO_ = bin_writer_a[2];
     return function(_dP_, _dQ_){
      return bin_write_maybe_needs_length(_dO_, v, _dP_, _dQ_);};
    }
    return [0,
            function(v){
             return bin_size_maybe_needs_length(bin_writer_a[1], v);
            },
            _dN_];
   }
   function bin_read_maybe_needs_length(of_a, buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19], cst_src_protocol_ml_Message_ma, pos_ref[1]);
   }
   function bin_read_maybe_needs_length$0(of_a, buf, pos_ref){
    var match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
    if(4 < match >>> 0)
     return caml_call2(Bin_prot_Common[18], _bm_, pos_ref[1]);
    switch(match){
      case 0:
       return 0;
      case 1:
       var arg_1 = caml_call2(caml_call1(Query_v1[6], of_a), buf, pos_ref);
       return [0, arg_1];
      case 2:
       var arg_1$0 = caml_call2(caml_call1(Response[6], of_a), buf, pos_ref);
       return [1, arg_1$0];
      case 3:
       var arg_1$1 = caml_call2(caml_call1(Query[6], of_a), buf, pos_ref);
       return [2, arg_1$1];
      default:
       var arg_1$2 = caml_call2(Connection_metadata[1][6], buf, pos_ref);
       return [3, arg_1$2];
    }
   }
   function bin_reader_maybe_needs_length(bin_reader_a){
    function _dM_(buf, pos_ref, vtag){
     return bin_read_maybe_needs_length(bin_reader_a[1], buf, pos_ref, vtag);
    }
    return [0,
            function(buf, pos_ref){
             return bin_read_maybe_needs_length$0
                     (bin_reader_a[1], buf, pos_ref);
            },
            _dM_];
   }
   function bin_maybe_needs_length(bin_a){
    var
     _dK_ = bin_reader_maybe_needs_length(bin_a[3]),
     _dL_ = bin_writer_maybe_needs_length(bin_a[2]);
    return [0, bin_shape_maybe_needs_length(bin_a[1]), _dL_, _dK_];
   }
   function sexp_of_maybe_needs_length(of_a_145, param){
    if(typeof param === "number") return _bn_;
    switch(param[0]){
      case 0:
       var
        arg0_146 = param[1],
        res0_147 = caml_call2(Query_v1[9], of_a_145, arg0_146);
       return [1, [0, _bo_, [0, res0_147, 0]]];
      case 1:
       var
        arg0_148 = param[1],
        res0_149 = caml_call2(Response[9], of_a_145, arg0_148);
       return [1, [0, _bp_, [0, res0_149, 0]]];
      case 2:
       var
        arg0_150 = param[1],
        res0_151 = caml_call2(Query[9], of_a_145, arg0_150);
       return [1, [0, _bq_, [0, res0_151, 0]]];
      default:
       var
        arg0_152 = param[1],
        res0_153 = caml_call1(Connection_metadata[1][9], arg0_152);
       return [1, [0, _br_, [0, res0_153, 0]]];
    }
   }
   if(typeof Ppx_inline_test_lib[3] !== "number"){
    var
     Ppx_expect_test_block =
       caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
     _bA_ =
       function(param){
        var
         _dG_ = bin_shape_maybe_needs_length(Bin_prot_Std[83]),
         _dH_ = caml_call1(Bin_prot_Shape[15], _dG_),
         _dI_ = caml_call1(Bin_shape[19][4], _dH_);
        caml_call1(Stdlib[46], _dI_);
        var _dJ_ = caml_call1(Ppx_expect_runtime_Types[4][1], 27);
        return caml_call1(Ppx_expect_test_block[2], _dJ_);
       },
     _bD_ =
       caml_call3
        (Ppx_expect_runtime_Test_node[1][1],
         [0, Ppx_expect_runtime_Types[1][1]],
         _bC_,
         _bB_),
     _bE_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 27), _bD_], 0],
     _bF_ = caml_call1(Ppx_expect_runtime_Types[4][1], 29),
     _bG_ = caml_call1(Ppx_expect_runtime_Types[4][1], 28);
    caml_call14
     (Ppx_expect_test_block[3],
      cst_src_protocol_ml$1,
      199,
      _bJ_,
      _bI_,
      _bH_,
      [0, Ppx_expect_runtime_Types[1][1]],
      0,
      _bG_,
      _bF_,
      0,
      0,
      Inline_test_config,
      _bE_,
      _bA_);
   }
   function bin_read_t$19(of_a, buf, pos_ref, vint){
    return bin_read_maybe_needs_length(of_a, buf, pos_ref, vint);
   }
   function bin_read_t$20(of_a, buf, pos_ref){
    return bin_read_maybe_needs_length$0(of_a, buf, pos_ref);
   }
   function bin_reader_t$9(bin_reader_a){
    function _dF_(buf, pos_ref, vtag){
     return bin_read_t$19(bin_reader_a[1], buf, pos_ref, vtag);
    }
    return [0,
            function(buf, pos_ref){
             return bin_read_t$20(bin_reader_a[1], buf, pos_ref);
            },
            _dF_];
   }
   function bin_read_nat0_t$3(buf, pos_ref, vint){
    return bin_read_maybe_needs_length
            (Async_rpc_kernel_Nat0[3], buf, pos_ref, vint);
   }
   function bin_read_nat0_t$4(buf, pos_ref){
    return bin_read_maybe_needs_length$0
            (Async_rpc_kernel_Nat0[3], buf, pos_ref);
   }
   var bin_reader_nat0_t$1 = [0, bin_read_nat0_t$4, bin_read_nat0_t$3];
   function bin_size_nat0_t$1(v){
    return bin_size_maybe_needs_length(Async_rpc_kernel_Nat0[1], v);
   }
   function bin_write_nat0_t$1(buf, pos, v){
    return bin_write_maybe_needs_length(Async_rpc_kernel_Nat0[2], buf, pos, v);
   }
   var
    bin_writer_nat0_t$1 = [0, bin_size_nat0_t$1, bin_write_nat0_t$1],
    Message =
      [0,
       bin_shape_maybe_needs_length,
       bin_size_maybe_needs_length,
       bin_write_maybe_needs_length,
       bin_writer_maybe_needs_length,
       bin_read_maybe_needs_length,
       bin_read_maybe_needs_length$0,
       bin_reader_maybe_needs_length,
       bin_maybe_needs_length,
       sexp_of_maybe_needs_length,
       bin_read_t$19,
       bin_read_t$20,
       bin_reader_t$9,
       sexp_of_maybe_needs_length,
       bin_read_nat0_t$3,
       bin_read_nat0_t$4,
       bin_reader_nat0_t$1,
       bin_size_nat0_t$1,
       bin_write_nat0_t$1,
       bin_writer_nat0_t$1];
   function _bs_(param){
    var
     _c$_ = caml_call1(Bin_shape[3][1], cst_a$15),
     _da_ = caml_call1(Bin_shape[4][1], cst_src_protocol_ml_213_20),
     _db_ = caml_call2(Bin_prot_Shape[11], _da_, _c$_),
     _dc_ = [0, [0, cst_Response$0, [0, caml_call1(Response[1], _db_), 0]], 0],
     _dd_ = caml_call1(Bin_shape[3][1], cst_a$16),
     _de_ = caml_call1(Bin_shape[4][1], cst_src_protocol_ml_212_17),
     _df_ = caml_call2(Bin_prot_Shape[11], _de_, _dd_),
     _dg_ =
       [0,
        _bt_,
        [0, [0, cst_Query$1, [0, caml_call1(Query_v1[1], _df_), 0]], _dc_]],
     _dh_ = caml_call1(Bin_prot_Shape[5], _dg_),
     _di_ = [0, caml_call1(Bin_shape[3][1], cst_a$17), 0],
     _dj_ =
       [0,
        [0, caml_call1(Bin_shape[2][1], cst_needs_length$9), _di_, _dh_],
        0],
     _dk_ = caml_call1(Bin_shape[4][1], cst_src_protocol_ml_210_4),
     group = caml_call2(Bin_prot_Shape[2], _dk_, _dj_);
    if(typeof Ppx_inline_test_lib[3] !== "number"){
     var
      Ppx_expect_test_block =
        caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
      _dp_ =
        function(param){
         var
          a = Bin_prot_Std[83],
          _dA_ = caml_call1(Bin_shape[2][1], cst_needs_length$10),
          _dB_ =
            caml_call1(caml_call2(Bin_prot_Shape[10], group, _dA_), [0, a, 0]),
          _dC_ = caml_call1(Bin_prot_Shape[15], _dB_),
          _dD_ = caml_call1(Bin_shape[19][4], _dC_);
         caml_call1(Stdlib[46], _dD_);
         var _dE_ = caml_call1(Ppx_expect_runtime_Types[4][1], 30);
         return caml_call1(Ppx_expect_test_block[2], _dE_);
        },
      _dq_ =
        caml_call3
         (Ppx_expect_runtime_Test_node[1][1],
          [0, Ppx_expect_runtime_Types[1][1]],
          _bw_,
          _bv_),
      _dr_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 30), _dq_], 0],
      _ds_ = caml_call1(Ppx_expect_runtime_Types[4][1], 32),
      _dt_ = caml_call1(Ppx_expect_runtime_Types[4][1], 31);
     caml_call14
      (Ppx_expect_test_block[3],
       cst_src_protocol_ml,
       216,
       _bz_,
       _by_,
       _bx_,
       [0, Ppx_expect_runtime_Types[1][1]],
       0,
       _dt_,
       _ds_,
       0,
       0,
       Inline_test_config,
       _dr_,
       _dp_);
    }
    var
     tag = caml_call1(Rpc_tag[11], cst_rpc),
     query_id = caml_call1(Query_id[45], 0),
     v1_query = [0, tag, 1, query_id, 0],
     response = [0, query_id, _bu_],
     v1 = [0, 0, [0, [0, v1_query], [0, [1, response], 0]]],
     v2 = [0, 0, [0, [0, v1_query], [0, [1, response], 0]]];
    function _dl_(buf, pos, v){
     var write_a = Bin_prot_Std[85];
     function _dz_(buf, pos$1, param){
      if(typeof param === "number")
       return caml_call3(Bin_prot_Write[30], buf, pos$1, 0);
      if(0 === param[0]){
       var v1 = param[1], pos = caml_call3(Bin_prot_Write[30], buf, pos$1, 1);
       return caml_call4(Query_v1[3], write_a, buf, pos, v1);
      }
      var
       v1$0 = param[1],
       pos$0 = caml_call3(Bin_prot_Write[30], buf, pos$1, 2);
      return caml_call4(Response[3], write_a, buf, pos$0, v1$0);
     }
     return caml_call4(Bin_prot_Std[205], _dz_, buf, pos, v);
    }
    var
     _dm_ =
       [0,
        function(v){
         var size_of_a = Bin_prot_Std[1];
         function _dw_(param){
          if(typeof param === "number") return 1;
          if(0 === param[0]){
           var v1 = param[1], _dx_ = caml_call2(Query_v1[2], size_of_a, v1);
           return caml_call2(Bin_prot_Common[23], 1, _dx_);
          }
          var
           v1$0 = param[1],
           _dy_ = caml_call2(Response[2], size_of_a, v1$0);
          return caml_call2(Bin_prot_Common[23], 1, _dy_);
         }
         return caml_call2(Bin_prot_Std[18], _dw_, v);
        },
        _dl_],
     v1_str = caml_call2(Core_Core_bin_prot[1][1], _dm_, v1);
    function _dn_(buf, pos, v){
     var _dv_ = caml_call1(Message[3], Bin_prot_Std[85]);
     return caml_call4(Bin_prot_Std[205], _dv_, buf, pos, v);
    }
    var
     _do_ =
       [0,
        function(v){
         var _du_ = caml_call1(Message[2], Bin_prot_Std[1]);
         return caml_call2(Bin_prot_Std[18], _du_, v);
        },
        _dn_],
     v2_str = caml_call2(Core_Core_bin_prot[1][1], _do_, v2);
    return caml_call2(Stdlib_String[9], v1_str, v2_str);
   }
   caml_call8
    (Ppx_inline_test_lib[8],
     Inline_test_config,
     cst_v1_message_compatibility,
     0,
     cst_src_protocol_ml$0,
     208,
     0,
     1044,
     _bs_);
   caml_call1(Ppx_inline_test_lib[7], cst_async_rpc_kernel);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_rpc_kernel_Protocol);
   var
    Async_rpc_kernel_Protocol =
      [0,
       Rpc_tag,
       Query_id,
       Unused_query_id,
       Rpc_error,
       Rpc_result,
       Connection_metadata,
       Query_v1,
       Query,
       Response,
       Stream_query,
       Stream_initial_message,
       Stream_response_data,
       Message];
   runtime.caml_register_global
    (310, Async_rpc_kernel_Protocol, cst_Async_rpc_kernel_Protocol$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_rpc_kernel__Protocol_writer
//# unitInfo: Requires: Async_rpc_kernel__Nat0, Async_rpc_kernel__Protocol, Async_rpc_kernel__Transport, Async_rpc_kernel__Writer_with_length, Core, Core__Set_once, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_rpc_kernel_Protocol_$0 = "Async_rpc_kernel__Protocol_writer",
    cst_async_rpc_kernel$0 = "async_rpc_kernel",
    cst_src_protocol_writer_ml = "src/protocol_writer.ml";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Async_rpc_kernel_Transport = global_data.Async_rpc_kernel__Transport,
    Async_rpc_kernel_Nat0 = global_data.Async_rpc_kernel__Nat0,
    Async_rpc_kernel_Protocol = global_data.Async_rpc_kernel__Protocol,
    Async_rpc_kernel_Writer_with_l =
      global_data.Async_rpc_kernel__Writer_with_length,
    Core_Set_once = global_data.Core__Set_once,
    Core = global_data.Core,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_rpc_kernel_Protocol_$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_rpc_kernel$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_protocol_writer_ml);
   caml_call2
    (Ppx_inline_test_lib[6], cst_async_rpc_kernel$0, "protocol_writer.ml");
   var
    _e_ = [0, cst_src_protocol_writer_ml, 51, 1418, 1469],
    _d_ = [0, cst_src_protocol_writer_ml, 20, 506, 561],
    _c_ = [0, cst_src_protocol_writer_ml, 16, 366, 415],
    _a_ = [0, "writer"],
    _b_ = [0, "negotiated_protocol_version"],
    cst_async_rpc_kernel = cst_async_rpc_kernel$0,
    cst_Async_rpc_kernel_Protocol_ = cst_Async_rpc_kernel_Protocol_$0;
   function sexp_of_t(param){
    var
     writer_004 = param[2],
     negotiated_protocol_version_00 = param[1],
     arg_005 = caml_call1(Async_rpc_kernel_Transport[3][1], writer_004),
     bnds_001 = [0, [1, [0, _a_, [0, arg_005, 0]]], 0],
     arg_003 =
       caml_call2(Core_Set_once[3], Core[389], negotiated_protocol_version_00),
     bnds_001$0 = [0, [1, [0, _b_, [0, arg_003, 0]]], bnds_001];
    return [1, bnds_001$0];
   }
   function sexp_of_writer(t){
    return caml_call1(Async_rpc_kernel_Transport[3][1], t[2]);
   }
   function create_before_negotiation(writer){
    return [0, caml_call1(Core_Set_once[5], 0), writer];
   }
   function set_negotiated_protocol_versio(t, negotiated_protocol_version){
    return caml_call3
            (Core_Set_once[7], t[1], _c_, negotiated_protocol_version);
   }
   function query_message(t, query){
    return 1 === caml_call2(Core_Set_once[10], t[1], _d_)
            ? [0, caml_call1(Async_rpc_kernel_Protocol[8][13], query)]
            : [2, query];
   }
   function send_query(t, query, bin_writer_query){
    var
     message = query_message(t, query),
     _z_ = caml_call1(Async_rpc_kernel_Writer_with_l[1], bin_writer_query),
     _A_ = caml_call1(Async_rpc_kernel_Protocol[13][4], _z_);
    return caml_call3(Async_rpc_kernel_Transport[3][10], t[2], _A_, message);
   }
   function send_expert_query
   (t, query, buf, pos, len, send_bin_prot_and_bigstring){
    var
     _y_ = caml_call1(Async_rpc_kernel_Nat0[9], len),
     header =
       query_message(t, [0, query[1], query[2], query[3], query[4], _y_]);
    return caml_call6
            (send_bin_prot_and_bigstring,
             t[2],
             Async_rpc_kernel_Protocol[13][19],
             header,
             buf,
             pos,
             len);
   }
   function send_heartbeat(t){
    return caml_call3
            (Async_rpc_kernel_Transport[3][10],
             t[2],
             Async_rpc_kernel_Protocol[13][19],
             0);
   }
   function response_message(t, response){
    var
     negotiated_protocol_version = caml_call2(Core_Set_once[10], t[1], _e_),
     _v_ = response[2];
    if(0 === _v_[0])
     var response$0 = response;
    else{
     var v1_error = _v_[1];
     a:
     {
      if(typeof v1_error !== "number" && 4 < v1_error[0]){
       if(caml_call2(Core[92], negotiated_protocol_version, 3))
        var
         _w_ =
           [1, [2, caml_call1(Async_rpc_kernel_Protocol[4][10], v1_error)]],
         _x_ = [0, response[1], _w_];
       else
        var _x_ = response;
       var response$1 = _x_;
       break a;
      }
      var response$1 = response;
     }
     var response$0 = response$1;
    }
    return [1, response$0];
   }
   function send_response(t, response, bin_writer_response){
    var
     message = response_message(t, response),
     _t_ = caml_call1(Async_rpc_kernel_Writer_with_l[1], bin_writer_response),
     _u_ = caml_call1(Async_rpc_kernel_Protocol[13][4], _t_);
    return caml_call3(Async_rpc_kernel_Transport[3][10], t[2], _u_, message);
   }
   function send_expert_response
   (t, query_id, buf, pos, len, send_bin_prot_and_bigstring){
    var
     header =
       response_message
        (t, [0, query_id, [0, caml_call1(Async_rpc_kernel_Nat0[9], len)]]);
    return caml_call6
            (send_bin_prot_and_bigstring,
             t[2],
             Async_rpc_kernel_Protocol[13][19],
             header,
             buf,
             pos,
             len);
   }
   function of_writer(f, t){return caml_call1(f, t[2]);}
   var _f_ = Async_rpc_kernel_Transport[3][14];
   function can_send(_s_){return of_writer(_f_, _s_);}
   var _g_ = Async_rpc_kernel_Transport[3][5];
   function bytes_to_write(_r_){return of_writer(_g_, _r_);}
   var _h_ = Async_rpc_kernel_Transport[3][6];
   function bytes_written(_q_){return of_writer(_h_, _q_);}
   var _i_ = Async_rpc_kernel_Transport[3][8];
   function flushed(_p_){return of_writer(_i_, _p_);}
   var _j_ = Async_rpc_kernel_Transport[3][7];
   function stopped(_o_){return of_writer(_j_, _o_);}
   var _k_ = Async_rpc_kernel_Transport[3][2];
   function close(_n_){return of_writer(_k_, _n_);}
   var _l_ = Async_rpc_kernel_Transport[3][3];
   function is_closed(_m_){return of_writer(_l_, _m_);}
   function send_bin_prot(t, bin_writer, a){
    return caml_call3(Async_rpc_kernel_Transport[3][10], t[2], bin_writer, a);
   }
   function send_bin_prot_and_bigstring(t, bin_writer, a, buf, pos, len){
    return caml_call6
            (Async_rpc_kernel_Transport[3][11],
             t[2],
             bin_writer,
             a,
             buf,
             pos,
             len);
   }
   function send_bin_prot_and_bigstring_no(t, bin_writer, a, buf, pos, len){
    return caml_call6
            (Async_rpc_kernel_Transport[3][12],
             t[2],
             bin_writer,
             a,
             buf,
             pos,
             len);
   }
   function transfer(t, pipe_reader, f){
    return caml_call4
            (Async_rpc_kernel_Transport[3][15], t[2], 0, pipe_reader, f);
   }
   var
    Unsafe_for_cached_bin_writer =
      [0,
       send_bin_prot,
       send_bin_prot_and_bigstring,
       send_bin_prot_and_bigstring_no,
       transfer];
   caml_call1(Ppx_inline_test_lib[7], cst_async_rpc_kernel);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_rpc_kernel_Protocol_);
   var
    Async_rpc_kernel_Protocol_writ =
      [0,
       sexp_of_t,
       sexp_of_writer,
       create_before_negotiation,
       set_negotiated_protocol_versio,
       send_query,
       send_expert_query,
       send_response,
       send_expert_response,
       send_heartbeat,
       can_send,
       bytes_to_write,
       bytes_written,
       flushed,
       stopped,
       close,
       is_closed,
       Unsafe_for_cached_bin_writer];
   runtime.caml_register_global
    (22, Async_rpc_kernel_Protocol_writ, cst_Async_rpc_kernel_Protocol_$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_rpc_kernel__Rpc_error
//# unitInfo: Requires: Async_kernel__Deferred, Async_rpc_kernel__Protocol, Core, Core__Error, Core__Info, Core__Sexp, Core__Sexpable, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_rpc_kernel_Rpc_error$0 = "Async_rpc_kernel__Rpc_error",
    cst_async_rpc_kernel$0 = "async_rpc_kernel",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Core_Info = global_data.Core__Info,
    Core = global_data.Core,
    Async_kernel_Deferred = global_data.Async_kernel__Deferred,
    Core_Sexp = global_data.Core__Sexp,
    Core_Error = global_data.Core__Error,
    Assert_failure = global_data.Assert_failure,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Async_rpc_kernel_Protocol = global_data.Async_rpc_kernel__Protocol,
    Core_Sexpable = global_data.Core__Sexpable,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_rpc_kernel_Rpc_error$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_rpc_kernel$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/rpc_error.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_async_rpc_kernel$0, "rpc_error.ml");
   var
    _a_ = Async_rpc_kernel_Protocol[4],
    bin_size_t = _a_[1],
    bin_write_t = _a_[2],
    bin_read_t = _a_[3],
    bin_read_t$0 = _a_[4],
    bin_shape_t = _a_[5],
    bin_writer_t = _a_[6],
    bin_reader_t = _a_[7],
    bin_t = _a_[8],
    t_of_sexp = _a_[9],
    sexp_of_t = _a_[10],
    symbol = _a_[11],
    symbol$0 = _a_[12],
    symbol$1 = _a_[13],
    symbol$2 = _a_[14],
    symbol$3 = _a_[15],
    symbol$4 = _a_[16],
    equal = _a_[17],
    compare = _a_[18],
    min = _a_[19],
    max = _a_[20],
    ascending = _a_[21],
    descending = _a_[22],
    between = _a_[23],
    clamp_exn = _a_[24],
    clamp = _a_[25],
    comparator = _a_[26],
    validate_lbound = _a_[27],
    validate_ubound = _a_[28],
    validate_bound = _a_[29],
    _b_ = Async_rpc_kernel_Protocol[4],
    include = caml_call1(Core_Sexpable[1], [0, _b_[9], _b_[10]]),
    of_string = include[1],
    to_string = include[2],
    Rpc =
      [248, "Async_rpc_kernel__Rpc_error.Rpc", runtime.caml_fresh_oo_id(0)],
    _g_ = [0, "rpc_version"],
    _h_ = [0, "rpc_name"],
    _i_ = [0, "connection_description"],
    _j_ = [0, "rpc_error"],
    _f_ = [0, "Connection_closed"],
    _d_ = [0, "src/rpc_error.ml.Rpc"],
    _e_ = [0, "_none_", 0, -1],
    cst_async_rpc_kernel = cst_async_rpc_kernel$0,
    cst_Async_rpc_kernel_Rpc_error = cst_Async_rpc_kernel_Rpc_error$0;
   function _c_(param){
    if(param[1] !== Rpc)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _e_], 1);
    var
     arg1_002 = param[3],
     arg0_001 = param[2],
     res0_003 = caml_call1(sexp_of_t, arg0_001),
     res1_004 = caml_call1(Core_Info[9], arg1_002);
    return [1, [0, _d_, [0, res0_003, [0, res1_004, 0]]]];
   }
   caml_call4(Sexplib0_Sexp_conv[72][1], 0, 0, Rpc, _c_);
   function raise(t, connection_description){
    throw caml_maybe_attach_backtrace([0, Rpc, t, connection_description], 0);
   }
   function sexp_of_t_with_reason(t, get_connection_close_reason){
    if(typeof t !== "number") return caml_call1(sexp_of_t, t);
    var _o_ = caml_call1(get_connection_close_reason, 0);
    return [1, [0, _f_, [0, caml_call1(Core_Sexp[93], _o_), 0]]];
   }
   function to_error
   (t, param, connection_description, connection_close_started){
    var
     rpc_version = param[2],
     rpc_name = param[1],
     rpc_error =
       sexp_of_t_with_reason
        (t,
         function(param){
          var
           close_reason =
             caml_call1(Async_kernel_Deferred[5], connection_close_started);
          return caml_call2(Core[515], Core_Info[9], close_reason);
         }),
     _k_ = [0, [1, [0, _g_, [0, caml_call1(Core[389], rpc_version), 0]]], 0],
     _l_ = [0, [1, [0, _h_, [0, caml_call1(Core[558], rpc_name), 0]]], _k_],
     _m_ =
       [0,
        [1,
         [0, _i_, [0, caml_call1(Core_Info[9], connection_description), 0]]],
        _l_],
     _n_ =
       [1,
        [0, [1, [0, _j_, [0, caml_call1(Core_Sexp[93], rpc_error), 0]]], _m_]];
    return caml_call1(Core_Error[20], _n_);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_async_rpc_kernel);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_rpc_kernel_Rpc_error);
   var
    Async_rpc_kernel_Rpc_error =
      [0,
       bin_size_t,
       bin_write_t,
       bin_read_t,
       bin_read_t$0,
       bin_shape_t,
       bin_writer_t,
       bin_reader_t,
       bin_t,
       t_of_sexp,
       symbol,
       symbol$0,
       symbol$1,
       symbol$2,
       symbol$3,
       symbol$4,
       equal,
       compare,
       min,
       max,
       ascending,
       descending,
       between,
       clamp_exn,
       clamp,
       comparator,
       validate_lbound,
       validate_ubound,
       validate_bound,
       sexp_of_t_with_reason,
       sexp_of_t,
       of_string,
       to_string,
       Rpc,
       raise,
       to_error];
   runtime.caml_register_global
    (28, Async_rpc_kernel_Rpc_error, cst_Async_rpc_kernel_Rpc_error$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_rpc_kernel__Tracing_event
//# unitInfo: Requires: Async_rpc_kernel__Description, Async_rpc_kernel__Rpc_error, Core, Core__Int63, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv_error
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Abort_streaming_rpc_query = "Abort_streaming_rpc_query",
    cst_Async_rpc_kernel_Tracing_e$0 = "Async_rpc_kernel__Tracing_event",
    cst_Closed = "Closed",
    cst_Expert_single_succeeded_or = "Expert_single_succeeded_or_failed",
    cst_Failed_to_send = "Failed_to_send",
    cst_One_way_so_no_response = "One_way_so_no_response",
    cst_Partial_response = "Partial_response",
    cst_Query = "Query",
    cst_Received = "Received",
    cst_Response = "Response",
    cst_Response_finished_expert_u = "Response_finished_expert_uninterpreted",
    cst_Response_finished_ok = "Response_finished_ok",
    cst_Response_finished_rpc_erro = "Response_finished_rpc_error_or_exn",
    cst_Response_finished_user_def = "Response_finished_user_defined_error",
    cst_Sent = "Sent",
    cst_Single_or_streaming_rpc_er = "Single_or_streaming_rpc_error_or_exn",
    cst_Single_or_streaming_user_d = "Single_or_streaming_user_defined_error",
    cst_Single_succeeded = "Single_succeeded",
    cst_Streaming_closed = "Streaming_closed",
    cst_Streaming_initial = "Streaming_initial",
    cst_Streaming_update = "Streaming_update",
    cst_Too_large = "Too_large",
    cst_abort_streaming_rpc_query = "abort_streaming_rpc_query",
    cst_async_rpc_kernel$0 = "async_rpc_kernel",
    cst_closed = "closed",
    cst_expert_single_succeeded_or = "expert_single_succeeded_or_failed",
    cst_failed_to_send = "failed_to_send",
    cst_one_way_so_no_response = "one_way_so_no_response",
    cst_partial_response = "partial_response",
    cst_query = "query",
    cst_received = "received",
    cst_response = "response",
    cst_response_finished_expert_u = "response_finished_expert_uninterpreted",
    cst_response_finished_ok = "response_finished_ok",
    cst_response_finished_rpc_erro = "response_finished_rpc_error_or_exn",
    cst_response_finished_user_def = "response_finished_user_defined_error",
    cst_sent = "sent",
    cst_single_or_streaming_rpc_er = "single_or_streaming_rpc_error_or_exn",
    cst_single_or_streaming_user_d = "single_or_streaming_user_defined_error",
    cst_single_succeeded = "single_succeeded",
    cst_streaming_closed = "streaming_closed",
    cst_streaming_initial = "streaming_initial",
    cst_streaming_update = "streaming_update",
    cst_too_large = "too_large",
    caml_string_compare = runtime.caml_string_compare,
    caml_string_notequal = runtime.caml_string_notequal;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    error_source_005 = "src/tracing_event.ml.Sent_response_kind.t",
    error_source_009 = "src/tracing_event.ml.Received_response_kind.t",
    error_source_026 = "src/tracing_event.ml.Kind.t",
    error_source_042 = "src/tracing_event.ml.Send_failure.t",
    error_source_054 = "src/tracing_event.ml.Event.t",
    Core = global_data.Core,
    Core_Int63 = global_data.Core__Int63,
    Async_rpc_kernel_Description = global_data.Async_rpc_kernel__Description,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Async_rpc_kernel_Rpc_error = global_data.Async_rpc_kernel__Rpc_error,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_rpc_kernel_Tracing_e$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_rpc_kernel$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/tracing_event.ml");
   caml_call2
    (Ppx_inline_test_lib[6], cst_async_rpc_kernel$0, "tracing_event.ml");
   var
    _w_ = [0, "payload_bytes"],
    _x_ = [0, "id"],
    _y_ = [0, "rpc"],
    _z_ = [0, "event"],
    _t_ = [0, cst_Sent],
    _u_ = [0, cst_Failed_to_send],
    _v_ = [0, cst_Received],
    _r_ = [0, cst_Too_large],
    _s_ = [0, cst_Closed],
    _o_ = [0, cst_Abort_streaming_rpc_query],
    _p_ = [0, cst_Query],
    _q_ = [0, cst_Response],
    _i_ = [0, cst_One_way_so_no_response],
    _j_ = [0, cst_Partial_response],
    _k_ = [0, cst_Response_finished_ok],
    _l_ = [0, cst_Response_finished_user_def],
    _m_ = [0, cst_Response_finished_expert_u],
    _n_ = [0, cst_Response_finished_rpc_erro],
    _a_ = [0, cst_One_way_so_no_response],
    _b_ = [0, cst_Single_succeeded],
    _c_ = [0, cst_Single_or_streaming_rpc_er],
    _d_ = [0, cst_Single_or_streaming_user_d],
    _e_ = [0, cst_Expert_single_succeeded_or],
    _f_ = [0, cst_Streaming_initial],
    _g_ = [0, cst_Streaming_update],
    _h_ = [0, cst_Streaming_closed],
    cst_async_rpc_kernel = cst_async_rpc_kernel$0,
    cst_Async_rpc_kernel_Tracing_e = cst_Async_rpc_kernel_Tracing_e$0;
   function globalize(x_001){return x_001;}
   function t_of_sexp(sexp_006){
    a:
    {
     if(0 === sexp_006[0]){
      var
       _R_ = sexp_006[1],
       _S_ = caml_string_compare(_R_, cst_expert_single_succeeded_or);
      b:
      {
       c:
       {
        d:
        {
         e:
         {
          f:
          {
           g:
           {
            h:
            {
             if(0 <= _S_){
              if(0 < _S_){
               if(! caml_string_notequal(_R_, cst_one_way_so_no_response))
                break h;
               if(! caml_string_notequal(_R_, cst_single_or_streaming_rpc_er))
                break g;
               if(! caml_string_notequal(_R_, cst_single_or_streaming_user_d))
                break f;
               if(! caml_string_notequal(_R_, cst_single_succeeded)) break e;
               if(! caml_string_notequal(_R_, cst_streaming_closed)) break d;
               if(! caml_string_notequal(_R_, cst_streaming_initial)) break c;
               if(caml_string_notequal(_R_, cst_streaming_update)) break a;
               break b;
              }
             }
             else if
              (caml_string_notequal(_R_, cst_Expert_single_succeeded_or)){
              if(! caml_string_notequal(_R_, cst_One_way_so_no_response))
               break h;
              if(! caml_string_notequal(_R_, cst_Single_or_streaming_rpc_er))
               break g;
              if(! caml_string_notequal(_R_, cst_Single_or_streaming_user_d))
               break f;
              if(! caml_string_notequal(_R_, cst_Single_succeeded)) break e;
              if(! caml_string_notequal(_R_, cst_Streaming_closed)) break d;
              if(! caml_string_notequal(_R_, cst_Streaming_initial)) break c;
              if(caml_string_notequal(_R_, cst_Streaming_update)) break a;
              break b;
             }
             return 4;
            }
            return 0;
           }
           return 2;
          }
          return 3;
         }
         return 1;
        }
        return 7;
       }
       return 5;
      }
      return 6;
     }
     var _T_ = sexp_006[1];
     if(! _T_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_005, sexp_006);
     var _U_ = _T_[1];
     if(0 !== _U_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_005, sexp_006);
     var
      _V_ = _U_[1],
      _W_ = caml_string_compare(_V_, cst_expert_single_succeeded_or);
     b:
     {
      c:
      {
       d:
       {
        e:
        {
         f:
         {
          g:
          {
           h:
           {
            if(0 <= _W_){
             if(0 < _W_){
              if(! caml_string_notequal(_V_, cst_one_way_so_no_response))
               break h;
              if(! caml_string_notequal(_V_, cst_single_or_streaming_rpc_er))
               break g;
              if(! caml_string_notequal(_V_, cst_single_or_streaming_user_d))
               break f;
              if(! caml_string_notequal(_V_, cst_single_succeeded)) break e;
              if(! caml_string_notequal(_V_, cst_streaming_closed)) break d;
              if(! caml_string_notequal(_V_, cst_streaming_initial)) break c;
              if(caml_string_notequal(_V_, cst_streaming_update)) break a;
              break b;
             }
            }
            else if(caml_string_notequal(_V_, cst_Expert_single_succeeded_or)){
             if(! caml_string_notequal(_V_, cst_One_way_so_no_response))
              break h;
             if(! caml_string_notequal(_V_, cst_Single_or_streaming_rpc_er))
              break g;
             if(! caml_string_notequal(_V_, cst_Single_or_streaming_user_d))
              break f;
             if(! caml_string_notequal(_V_, cst_Single_succeeded)) break e;
             if(! caml_string_notequal(_V_, cst_Streaming_closed)) break d;
             if(! caml_string_notequal(_V_, cst_Streaming_initial)) break c;
             if(caml_string_notequal(_V_, cst_Streaming_update)) break a;
             break b;
            }
            return caml_call2
                    (Sexplib0_Sexp_conv_error[7], error_source_005, sexp_006);
           }
           return caml_call2
                   (Sexplib0_Sexp_conv_error[7], error_source_005, sexp_006);
          }
          return caml_call2
                  (Sexplib0_Sexp_conv_error[7], error_source_005, sexp_006);
         }
         return caml_call2
                 (Sexplib0_Sexp_conv_error[7], error_source_005, sexp_006);
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[7], error_source_005, sexp_006);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[7], error_source_005, sexp_006);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_005, sexp_006);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[7], error_source_005, sexp_006);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_005, sexp_006);
   }
   function sexp_of_t(param){
    switch(param){
      case 0:
       return _a_;
      case 1:
       return _b_;
      case 2:
       return _c_;
      case 3:
       return _d_;
      case 4:
       return _e_;
      case 5:
       return _f_;
      case 6:
       return _g_;
      default: return _h_;
    }
   }
   var Sent_response_kind = [0, globalize, t_of_sexp, sexp_of_t];
   function t_of_sexp$0(sexp_011){
    a:
    {
     if(0 === sexp_011[0]){
      var
       _M_ = sexp_011[1],
       _N_ = caml_string_compare(_M_, cst_one_way_so_no_response);
      b:
      {
       c:
       {
        d:
        {
         e:
         {
          f:
          {
           if(0 <= _N_){
            if(0 < _N_){
             if(! caml_string_notequal(_M_, cst_partial_response)) break f;
             if(! caml_string_notequal(_M_, cst_response_finished_expert_u))
              break e;
             if(! caml_string_notequal(_M_, cst_response_finished_ok))
              break d;
             if(! caml_string_notequal(_M_, cst_response_finished_rpc_erro))
              break c;
             if(caml_string_notequal(_M_, cst_response_finished_user_def))
              break a;
             break b;
            }
           }
           else if(caml_string_notequal(_M_, cst_One_way_so_no_response)){
            if(! caml_string_notequal(_M_, cst_Partial_response)) break f;
            if(! caml_string_notequal(_M_, cst_Response_finished_expert_u))
             break e;
            if(! caml_string_notequal(_M_, cst_Response_finished_ok)) break d;
            if(! caml_string_notequal(_M_, cst_Response_finished_rpc_erro))
             break c;
            if(caml_string_notequal(_M_, cst_Response_finished_user_def))
             break a;
            break b;
           }
           return 0;
          }
          return 1;
         }
         return 4;
        }
        return 2;
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[9], error_source_009, sexp_011);
      }
      return 3;
     }
     var _O_ = sexp_011[1];
     if(! _O_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_009, sexp_011);
     var _P_ = _O_[1];
     if(0 !== _P_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_009, sexp_011);
     var
      tag_012 = _P_[1],
      _Q_ = caml_string_compare(tag_012, cst_one_way_so_no_response);
     b:
     {
      c:
      {
       d:
       {
        e:
        {
         f:
         {
          if(0 <= _Q_){
           if(0 < _Q_){
            if(! caml_string_notequal(tag_012, cst_partial_response)) break f;
            if
             (! caml_string_notequal(tag_012, cst_response_finished_expert_u))
             break e;
            if(! caml_string_notequal(tag_012, cst_response_finished_ok))
             break d;
            if
             (! caml_string_notequal(tag_012, cst_response_finished_rpc_erro))
             break c;
            if(caml_string_notequal(tag_012, cst_response_finished_user_def))
             break a;
            break b;
           }
          }
          else if(caml_string_notequal(tag_012, cst_One_way_so_no_response)){
           if(! caml_string_notequal(tag_012, cst_Partial_response)) break f;
           if(! caml_string_notequal(tag_012, cst_Response_finished_expert_u))
            break e;
           if(! caml_string_notequal(tag_012, cst_Response_finished_ok))
            break d;
           if(! caml_string_notequal(tag_012, cst_Response_finished_rpc_erro))
            break c;
           if(caml_string_notequal(tag_012, cst_Response_finished_user_def))
            break a;
           break b;
          }
          return caml_call2
                  (Sexplib0_Sexp_conv_error[7], error_source_009, sexp_011);
         }
         return caml_call2
                 (Sexplib0_Sexp_conv_error[7], error_source_009, sexp_011);
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[7], error_source_009, sexp_011);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[7], error_source_009, sexp_011);
      }
      var sexp_args_013 = _O_[2];
      if(sexp_args_013 && ! sexp_args_013[2]){
       var
        arg0_014 = sexp_args_013[1],
        res0_015 = caml_call1(Async_rpc_kernel_Rpc_error[9], arg0_014);
       return [0, res0_015];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[8],
               error_source_009,
               tag_012,
               sexp_011);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[7], error_source_009, sexp_011);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_009, sexp_011);
   }
   function sexp_of_t$0(param){
    if(typeof param === "number")
     switch(param){
       case 0:
        return _i_;
       case 1:
        return _j_;
       case 2:
        return _k_;
       case 3:
        return _l_;
       default: return _m_;
     }
    var
     arg0_016 = param[1],
     res0_017 = caml_call1(Async_rpc_kernel_Rpc_error[30], arg0_016);
    return [1, [0, _n_, [0, res0_017, 0]]];
   }
   function globalize$0(x){return x;}
   function globalize$1(globalize_response_019, x_020){
    if(typeof x_020 === "number") return x_020;
    var arg_022 = x_020[1];
    return [0, caml_call1(globalize_response_019, arg_022)];
   }
   function t_of_sexp$1(of_response_023, sexp_028){
    a:
    {
     if(0 === sexp_028[0]){
      var _J_ = sexp_028[1];
      b:
      if(caml_string_notequal(_J_, cst_Abort_streaming_rpc_query)){
       c:
       if(caml_string_notequal(_J_, cst_Query)){
        if(caml_string_notequal(_J_, cst_Response)){
         if(! caml_string_notequal(_J_, cst_abort_streaming_rpc_query))
          break b;
         if(! caml_string_notequal(_J_, cst_query)) break c;
         if(caml_string_notequal(_J_, cst_response)) break a;
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[9], error_source_026, sexp_028);
       }
       return 0;
      }
      return 1;
     }
     var _K_ = sexp_028[1];
     if(! _K_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_026, sexp_028);
     var _L_ = _K_[1];
     if(0 !== _L_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_026, sexp_028);
     var tag_029 = _L_[1];
     b:
     if(caml_string_notequal(tag_029, cst_Abort_streaming_rpc_query)){
      c:
      if(caml_string_notequal(tag_029, cst_Query)){
       if(caml_string_notequal(tag_029, cst_Response)){
        if(! caml_string_notequal(tag_029, cst_abort_streaming_rpc_query))
         break b;
        if(! caml_string_notequal(tag_029, cst_query)) break c;
        if(caml_string_notequal(tag_029, cst_response)) break a;
       }
       var sexp_args_030 = _K_[2];
       if(sexp_args_030 && ! sexp_args_030[2]){
        var
         arg0_031 = sexp_args_030[1],
         res0_032 = caml_call1(of_response_023, arg0_031);
        return [0, res0_032];
       }
       return caml_call3
               (Sexplib0_Sexp_conv_error[8],
                error_source_026,
                tag_029,
                sexp_028);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_026, sexp_028);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[7], error_source_026, sexp_028);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_026, sexp_028);
   }
   function sexp_of_t$1(of_response_034, param){
    if(typeof param === "number") return param ? _o_ : _p_;
    var arg0_035 = param[1], res0_036 = caml_call1(of_response_034, arg0_035);
    return [1, [0, _q_, [0, res0_036, 0]]];
   }
   var Kind = [0, globalize$1, t_of_sexp$1, sexp_of_t$1];
   function globalize$2(x_038){return x_038;}
   function t_of_sexp$2(sexp_043){
    a:
    {
     if(0 === sexp_043[0]){
      var _F_ = sexp_043[1];
      b:
      if(caml_string_notequal(_F_, cst_Closed)){
       if(caml_string_notequal(_F_, cst_Too_large)){
        if(! caml_string_notequal(_F_, cst_closed)) break b;
        if(caml_string_notequal(_F_, cst_too_large)) break a;
       }
       return 1;
      }
      return 0;
     }
     var _G_ = sexp_043[1];
     if(! _G_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_042, sexp_043);
     var _H_ = _G_[1];
     if(0 !== _H_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_042, sexp_043);
     var _I_ = _H_[1];
     b:
     if(caml_string_notequal(_I_, cst_Closed)){
      if(caml_string_notequal(_I_, cst_Too_large)){
       if(! caml_string_notequal(_I_, cst_closed)) break b;
       if(caml_string_notequal(_I_, cst_too_large)) break a;
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_042, sexp_043);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[7], error_source_042, sexp_043);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_042, sexp_043);
   }
   function sexp_of_t$2(param){return param ? _r_ : _s_;}
   var Send_failure = [0, globalize$2, t_of_sexp$2, sexp_of_t$2];
   function globalize$3(x_044){
    switch(x_044[0]){
      case 0:
       var arg_045 = x_044[1];
       return [0, caml_call2(Kind[1], Sent_response_kind[1], arg_045)];
      case 1:
       var
        arg_047 = x_044[2],
        arg_048 = x_044[1],
        _E_ = caml_call1(Send_failure[1], arg_047);
       return [1, caml_call2(Kind[1], Sent_response_kind[1], arg_048), _E_];
      default:
       var arg_050 = x_044[1];
       return [2, caml_call2(Kind[1], globalize$0, arg_050)];
    }
   }
   function t_of_sexp$3(sexp_056){
    a:
    {
     if(0 === sexp_056[0]){
      var _A_ = sexp_056[1];
      b:
      if(caml_string_notequal(_A_, cst_Failed_to_send)){
       c:
       if(caml_string_notequal(_A_, cst_Received)){
        if(caml_string_notequal(_A_, cst_Sent)){
         if(! caml_string_notequal(_A_, cst_failed_to_send)) break b;
         if(! caml_string_notequal(_A_, cst_received)) break c;
         if(caml_string_notequal(_A_, cst_sent)) break a;
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[9], error_source_054, sexp_056);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[9], error_source_054, sexp_056);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[9], error_source_054, sexp_056);
     }
     var _B_ = sexp_056[1];
     if(! _B_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_054, sexp_056);
     var _C_ = _B_[1];
     if(0 !== _C_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_054, sexp_056);
     var tag_057 = _C_[1];
     b:
     if(caml_string_notequal(tag_057, cst_Failed_to_send)){
      c:
      if(caml_string_notequal(tag_057, cst_Received)){
       if(caml_string_notequal(tag_057, cst_Sent)){
        if(! caml_string_notequal(tag_057, cst_failed_to_send)) break b;
        if(! caml_string_notequal(tag_057, cst_received)) break c;
        if(caml_string_notequal(tag_057, cst_sent)) break a;
       }
       var sexp_args_058 = _B_[2];
       if(sexp_args_058 && ! sexp_args_058[2]){
        var
         arg0_059 = sexp_args_058[1],
         res0_060 = caml_call2(Kind[2], Sent_response_kind[2], arg0_059);
        return [0, res0_060];
       }
       return caml_call3
               (Sexplib0_Sexp_conv_error[8],
                error_source_054,
                tag_057,
                sexp_056);
      }
      var sexp_args_070 = _B_[2];
      if(sexp_args_070 && ! sexp_args_070[2]){
       var
        arg0_071 = sexp_args_070[1],
        res0_072 = caml_call2(Kind[2], t_of_sexp$0, arg0_071);
       return [2, res0_072];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[8],
               error_source_054,
               tag_057,
               sexp_056);
     }
     var sexp_args_063 = _B_[2];
     if(sexp_args_063){
      var _D_ = sexp_args_063[2];
      if(_D_ && ! _D_[2]){
       var
        arg1_065 = _D_[1],
        arg0_064 = sexp_args_063[1],
        res0_066 = caml_call2(Kind[2], Sent_response_kind[2], arg0_064),
        res1_067 = caml_call1(Send_failure[2], arg1_065);
       return [1, res0_066, res1_067];
      }
     }
     return caml_call3
             (Sexplib0_Sexp_conv_error[8],
              error_source_054,
              tag_057,
              sexp_056);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_054, sexp_056);
   }
   function sexp_of_t$3(param){
    switch(param[0]){
      case 0:
       var
        arg0_073 = param[1],
        res0_074 = caml_call2(Kind[3], Sent_response_kind[3], arg0_073);
       return [1, [0, _t_, [0, res0_074, 0]]];
      case 1:
       var
        arg1_076 = param[2],
        arg0_075 = param[1],
        res0_077 = caml_call2(Kind[3], Sent_response_kind[3], arg0_075),
        res1_078 = caml_call1(Send_failure[3], arg1_076);
       return [1, [0, _u_, [0, res0_077, [0, res1_078, 0]]]];
      default:
       var
        arg0_079 = param[1],
        res0_080 = caml_call2(Kind[3], sexp_of_t$0, arg0_079);
       return [1, [0, _v_, [0, res0_080, 0]]];
    }
   }
   var Event = [0, globalize$3, t_of_sexp$3, sexp_of_t$3];
   function sexp_of_t$4(param){
    var
     payload_bytes_088 = param[4],
     id_086 = param[3],
     rpc_084 = param[2],
     event_082 = param[1],
     arg_089 = caml_call1(Core[389], payload_bytes_088),
     bnds_081 = [0, [1, [0, _w_, [0, arg_089, 0]]], 0],
     arg_087 = caml_call1(Core_Int63[103], id_086),
     bnds_081$0 = [0, [1, [0, _x_, [0, arg_087, 0]]], bnds_081],
     arg_085 =
       caml_call2(Core[515], Async_rpc_kernel_Description[10], rpc_084),
     bnds_081$1 = [0, [1, [0, _y_, [0, arg_085, 0]]], bnds_081$0],
     arg_083 = caml_call1(Event[3], event_082),
     bnds_081$2 = [0, [1, [0, _z_, [0, arg_083, 0]]], bnds_081$1];
    return [1, bnds_081$2];
   }
   function globalize$4(x){return x;}
   caml_call1(Ppx_inline_test_lib[7], cst_async_rpc_kernel);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_rpc_kernel_Tracing_e);
   var
    Async_rpc_kernel_Tracing_event =
      [0,
       Sent_response_kind,
       [0, globalize$0, t_of_sexp$0, sexp_of_t$0],
       Kind,
       Send_failure,
       Event,
       sexp_of_t$4,
       globalize$4];
   runtime.caml_register_global
    (135, Async_rpc_kernel_Tracing_event, cst_Async_rpc_kernel_Tracing_e$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_rpc_kernel__Implementation_types
//# unitInfo: Requires: CamlinternalMod, Core, Core__Unique_id, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_rpc_kernel_Implement$0 =
      "Async_rpc_kernel__Implementation_types",
    cst_async_rpc_kernel$0 = "async_rpc_kernel",
    cst_src_implementation_types_m = "src/implementation_types.ml";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Core = global_data.Core,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Core_Unique_id = global_data.Core__Unique_id,
    CamlinternalMod = global_data.CamlinternalMod;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_rpc_kernel_Implement$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_rpc_kernel$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_implementation_types_m);
   caml_call2
    (Ppx_inline_test_lib[6],
     cst_async_rpc_kernel$0,
     "implementation_types.ml");
   var
    Direct_stream_writer_id = caml_call1(Core_Unique_id[2], 0),
    _a_ = [0, "close_connection_if_no_return_value"],
    _b_ = [0, "callback"],
    _c_ = [0, [0, [0, [0, [0, [0]]]], [0, [0]]]],
    _d_ = [0, cst_src_implementation_types_m, 116, 2],
    _e_ = [0, [0, [0, [0]]]],
    _f_ = [0, cst_src_implementation_types_m, 176, 2],
    _g_ = [0, [0, [0, [0]], [0, [0]], [0, [0]]]],
    _h_ = [0, cst_src_implementation_types_m, 237, 2],
    _i_ = [0, [0]],
    _j_ = [0, cst_src_implementation_types_m, 246, 2],
    _k_ = [0, [0, [0, [0, [0, [0]]]], [0, [0]]]],
    _l_ = [0, [0, [0, [0]]]],
    _m_ = [0, [0, [0, [0]], [0, [0]], [0, [0]]]],
    _n_ = [0, [0]],
    cst_async_rpc_kernel = cst_async_rpc_kernel$0,
    cst_Async_rpc_kernel_Implement = cst_Async_rpc_kernel_Implement$0;
   function sexp_of_t(param){
    var
     close_connection_if_no_return_ = param[2],
     callback_002 = param[1],
     arg_005 = caml_call1(Core[323], close_connection_if_no_return_),
     bnds_001 = [0, [1, [0, _a_, [0, arg_005, 0]]], 0];
    function _o_(param){
     function _p_(_q_){return 0;}
     return caml_call1(Sexplib0_Sexp_conv[24], _p_);
    }
    var arg_003 = caml_call2(Core[515], _o_, callback_002);
    a:
    {
     if(1 === arg_003[0] && ! arg_003[1]){var bnds_001$0 = bnds_001; break a;}
     var bnds_001$0 = [0, [1, [0, _b_, [0, arg_003, 0]]], bnds_001];
    }
    return [1, bnds_001$0];
   }
   var
    On_exception = [0, sexp_of_t],
    Implementation = caml_call2(CamlinternalMod[1], _d_, _c_),
    Implementations = caml_call2(CamlinternalMod[1], _f_, _e_),
    Direct_stream_writer = caml_call2(CamlinternalMod[1], _h_, _g_),
    Cached_bin_writer = caml_call2(CamlinternalMod[1], _j_, _i_);
   caml_call3(CamlinternalMod[2], _k_, Implementation, Implementation);
   caml_call3(CamlinternalMod[2], _l_, Implementations, Implementations);
   caml_call3
    (CamlinternalMod[2], _m_, Direct_stream_writer, Direct_stream_writer);
   caml_call3(CamlinternalMod[2], _n_, Cached_bin_writer, Cached_bin_writer);
   caml_call1(Ppx_inline_test_lib[7], cst_async_rpc_kernel);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_rpc_kernel_Implement);
   var
    Async_rpc_kernel_Implementatio =
      [0,
       Direct_stream_writer_id,
       On_exception,
       Implementation,
       Implementations,
       Direct_stream_writer,
       Cached_bin_writer];
   runtime.caml_register_global
    (29, Async_rpc_kernel_Implementatio, cst_Async_rpc_kernel_Implement$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_rpc_kernel__On_exception
//# unitInfo: Requires: Async_kernel__Monitor, Core, Core__Option, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_rpc_kernel_On_except$0 = "Async_rpc_kernel__On_exception",
    cst_async_rpc_kernel$0 = "async_rpc_kernel";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    close_connection = [0, 0, 1],
    continue$0 = [0, 0, 0],
    Core_Option = global_data.Core__Option,
    Async_kernel_Monitor = global_data.Async_kernel__Monitor,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Core = global_data.Core,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_rpc_kernel_On_except$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_rpc_kernel$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/on_exception.ml");
   caml_call2
    (Ppx_inline_test_lib[6], cst_async_rpc_kernel$0, "on_exception.ml");
   var
    _a_ = [0, "close_connection_if_no_return_value"],
    _b_ = [0, "callback"],
    cst_async_rpc_kernel = cst_async_rpc_kernel$0,
    cst_Async_rpc_kernel_On_except = cst_Async_rpc_kernel_On_except$0;
   function sexp_of_t(param){
    var
     close_connection_if_no_return_ = param[2],
     callback_002 = param[1],
     arg_005 = caml_call1(Core[323], close_connection_if_no_return_),
     bnds_001 = [0, [1, [0, _a_, [0, arg_005, 0]]], 0];
    function _d_(param){
     function _e_(_f_){return 0;}
     return caml_call1(Sexplib0_Sexp_conv[24], _e_);
    }
    var arg_003 = caml_call2(Core[515], _d_, callback_002);
    a:
    {
     if(1 === arg_003[0] && ! arg_003[1]){var bnds_001$0 = bnds_001; break a;}
     var bnds_001$0 = [0, [1, [0, _b_, [0, arg_003, 0]]], bnds_001];
    }
    return [1, bnds_001$0];
   }
   function handle_exn(param, close_connection_monitor, exn){
    var close_connection_if_no_return_ = param[2], callback = param[1];
    function _c_(callback){return caml_call1(callback, exn);}
    caml_call2(Core_Option[46], callback, _c_);
    return close_connection_if_no_return_
            ? caml_call3
              (Async_kernel_Monitor[15], close_connection_monitor, 0, exn)
            : close_connection_if_no_return_;
   }
   caml_call1(Ppx_inline_test_lib[7], cst_async_rpc_kernel);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_rpc_kernel_On_except);
   var
    Async_rpc_kernel_On_exception =
      [0, sexp_of_t, close_connection, continue$0, handle_exn];
   runtime.caml_register_global
    (19, Async_rpc_kernel_On_exception, cst_Async_rpc_kernel_On_except$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_rpc_kernel__Implementation
//# unitInfo: Requires: Async_kernel, Async_rpc_kernel__On_exception, Async_rpc_kernel__Or_not_authorized, Async_rpc_kernel__Protocol, Async_rpc_kernel__Protocol_writer, Async_rpc_kernel__Rpc_shapes, Core, Core__Lazy, Eager_deferred, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_rpc_kernel_Implement$0 = "Async_rpc_kernel__Implementation",
    cst_async_rpc_kernel$0 = "async_rpc_kernel";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Eager_deferred = global_data.Eager_deferred,
    Core = global_data.Core,
    Async_rpc_kernel_Protocol = global_data.Async_rpc_kernel__Protocol,
    Async_rpc_kernel_On_exception = global_data.Async_rpc_kernel__On_exception,
    Core_Lazy = global_data.Core__Lazy,
    Async_rpc_kernel_Rpc_shapes = global_data.Async_rpc_kernel__Rpc_shapes,
    Async_kernel = global_data.Async_kernel,
    Async_rpc_kernel_Or_not_author =
      global_data.Async_rpc_kernel__Or_not_authorized,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Async_rpc_kernel_Protocol_writ =
      global_data.Async_rpc_kernel__Protocol_writer,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_rpc_kernel_Implement$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_rpc_kernel$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/implementation.ml");
   caml_call2
    (Ppx_inline_test_lib[6], cst_async_rpc_kernel$0, "implementation.ml");
   var
    _d_ = [0, "on_exception"],
    _e_ = [0, "shapes"],
    _f_ = [0, "f"],
    _g_ = [0, "version"],
    _h_ = [0, "tag"],
    cst_one_way = "one-way",
    cst_streaming_rpc = "streaming-rpc",
    cst_rpc = "rpc",
    _a_ = [0, "responded"],
    _b_ = [0, "writer"],
    _c_ = [0, "query_id"],
    cst_async_rpc_kernel = cst_async_rpc_kernel$0,
    cst_Async_rpc_kernel_Implement = cst_Async_rpc_kernel_Implement$0;
   function sexp_of_t(param){
    var
     writer_004 = param[2],
     query_id_002 = param[1],
     responded_006 = param[3],
     arg_007 = caml_call1(Core[323], responded_006),
     bnds_001 = [0, [1, [0, _a_, [0, arg_007, 0]]], 0],
     arg_005 = caml_call1(Async_rpc_kernel_Protocol_writ[1], writer_004),
     bnds_001$0 = [0, [1, [0, _b_, [0, arg_005, 0]]], bnds_001],
     arg_003 = caml_call1(Async_rpc_kernel_Protocol[2][10], query_id_002),
     bnds_001$1 = [0, [1, [0, _c_, [0, arg_003, 0]]], bnds_001$0];
    return [1, bnds_001$1];
   }
   function create(query_id, writer){return [0, query_id, writer, 0];}
   var Responder = [0, sexp_of_t, create], Expert = [0, Responder];
   function lift(t, f){
    switch(t[0]){
      case 0:
       var
        impl = t[2],
        bin_msg = t[1],
        impl$0 =
          function(state, str){
           function _W_(authorized_state){
            return caml_call2(impl, authorized_state, str);
           }
           var _X_ = caml_call1(f, state);
           return caml_call2(Async_rpc_kernel_Or_not_author[3], _X_, _W_);
          };
       return [0, bin_msg, impl$0];
      case 1:
       var impl$1 = t[1];
       return [1,
               function(state, buf, pos, len){
                function _U_(authorized_state){
                 return caml_call4(impl$1, authorized_state, buf, pos, len);
                }
                var _V_ = caml_call1(f, state);
                return caml_call2(Async_rpc_kernel_Or_not_author[3], _V_, _U_);
               }];
      case 2:
       var error = t[4], impl$2 = t[3], bin_response = t[2], bin_query = t[1];
       if(t[5]){
        var
         impl$3 =
           function(state, q){
            function _S_(authorized_state){
             return caml_call2(impl$2, authorized_state, q);
            }
            var _T_ = caml_call1(f, state);
            return caml_call2(Async_rpc_kernel_Or_not_author[3], _T_, _S_);
           };
        return [2, bin_query, bin_response, impl$3, error, 1];
       }
       var
        impl$4 =
          function(state, q){
           function _Q_(authorized_state){
            return caml_call2(impl$2, authorized_state, q);
           }
           var _R_ = caml_call1(f, state);
           return caml_call2(Async_rpc_kernel_Or_not_author[1], _R_, _Q_);
          };
       return [2, bin_query, bin_response, impl$4, error, 0];
      case 3:
       var impl$5 = t[1];
       if(t[2]){
        var
         impl$6 =
           function(state, resp, buf, pos, len){
            function _O_(authorized_state){
             return caml_call5(impl$5, authorized_state, resp, buf, pos, len);
            }
            var _P_ = caml_call1(f, state);
            return caml_call2(Async_rpc_kernel_Or_not_author[3], _P_, _O_);
           };
        return [3, impl$6, 1];
       }
       var
        impl$7 =
          function(state, resp, buf, pos, len){
           function _M_(authorized_state){
            return caml_call5(impl$5, authorized_state, resp, buf, pos, len);
           }
           var _N_ = caml_call1(f, state);
           return caml_call2(Async_rpc_kernel_Or_not_author[1], _N_, _M_);
          };
       return [3, impl$7, 0];
      case 4:
       var
        match = t[1],
        error_mode = match[5],
        impl$8 = match[4],
        bin_update_writer = match[3],
        bin_init_writer = match[2],
        bin_query_reader = match[1];
       if(0 === impl$8[0])
        var
         impl$9 = impl$8[1],
         impl$10 =
           [0,
            function(state, q){
             function _I_(authorized_state){
              return caml_call2(impl$9, authorized_state, q);
             }
             var _J_ = caml_call1(f, state);
             return caml_call2(Async_rpc_kernel_Or_not_author[3], _J_, _I_);
            }];
       else
        var
         impl$11 = impl$8[1],
         impl$10 =
           [1,
            function(state, q, w){
             function _K_(authorized_state){
              return caml_call3(impl$11, authorized_state, q, w);
             }
             var _L_ = caml_call1(f, state);
             return caml_call2(Async_rpc_kernel_Or_not_author[3], _L_, _K_);
            }];
       return [4,
               [0,
                bin_query_reader,
                bin_init_writer,
                bin_update_writer,
                impl$10,
                error_mode]];
      default: var impl$12 = t[1]; return [5, impl$12];
    }
   }
   function lift_deferred(t, lift){
    function lift_and_bind(x, f){
     function _G_(or_not_authorized){
      return caml_call2
              (Async_rpc_kernel_Or_not_author[3], or_not_authorized, f);
     }
     var _H_ = caml_call1(lift, x);
     return caml_call2(Eager_deferred[5], _H_, _G_);
    }
    switch(t[0]){
      case 0:
       var impl = t[2], bin_msg = t[1];
       return [0,
               bin_msg,
               function(state, str){
                return lift_and_bind
                        (state,
                         function(state){return caml_call2(impl, state, str);});
               }];
      case 1:
       var impl$0 = t[1];
       return [1,
               function(state, buf, pos, len){
                return lift_and_bind
                        (state,
                         function(state){
                          return caml_call4(impl$0, state, buf, pos, len);
                         });
               }];
      case 2:
       var error = t[4], impl$1 = t[3], bin_response = t[2], bin_query = t[1];
       if(t[5]){
        var _A_ = 1;
        return [2,
                bin_query,
                bin_response,
                function(state, q){
                 return lift_and_bind
                         (state,
                          function(state){return caml_call2(impl$1, state, q);});
                },
                error,
                _A_];
       }
       var _B_ = 1;
       return [2,
               bin_query,
               bin_response,
               function(state, q){
                return lift_and_bind
                        (state,
                         function(state){
                          var _F_ = caml_call2(impl$1, state, q);
                          return caml_call1(Async_kernel[20], _F_);
                         });
               },
               error,
               _B_];
      case 3:
       var impl$2 = t[1];
       if(t[2]){
        var _C_ = 1;
        return [3,
                function(state, resp, buf, pos, len){
                 return lift_and_bind
                         (state,
                          function(state){
                           return caml_call5(impl$2, state, resp, buf, pos, len);
                          });
                },
                _C_];
       }
       var _D_ = 1;
       return [3,
               function(state, resp, buf, pos, len){
                return lift_and_bind
                        (state,
                         function(state){
                          var _E_ = caml_call5(impl$2, state, resp, buf, pos, len);
                          return caml_call1(Async_kernel[20], _E_);
                         });
               },
               _D_];
      case 4:
       var
        match = t[1],
        error_mode = match[5],
        impl$3 = match[4],
        bin_update_writer = match[3],
        bin_init_writer = match[2],
        bin_query_reader = match[1];
       if(0 === impl$3[0])
        var
         impl$4 = impl$3[1],
         impl$5 =
           [0,
            function(state, q){
             return lift_and_bind
                     (state,
                      function(state){return caml_call2(impl$4, state, q);});
            }];
       else
        var
         impl$6 = impl$3[1],
         impl$5 =
           [1,
            function(state, q, w){
             return lift_and_bind
                     (state,
                      function(state){return caml_call3(impl$6, state, q, w);});
            }];
       return [4,
               [0,
                bin_query_reader,
                bin_init_writer,
                bin_update_writer,
                impl$5,
                error_mode]];
      default: var impl$7 = t[1]; return [5, impl$7];
    }
   }
   function sexp_of_t$0(param){
    var digests = param[2];
    return caml_call1(Async_rpc_kernel_Rpc_shapes[2][1], digests);
   }
   function sexp_of_t$1(of_connection_state_008, param){
    var
     on_exception_018 = param[5],
     shapes_016 = param[4],
     f_014 = param[3],
     version_012 = param[2],
     tag_010 = param[1],
     arg_019 = caml_call1(Async_rpc_kernel_On_exception[1], on_exception_018),
     bnds_009 = [0, [1, [0, _d_, [0, arg_019, 0]]], 0],
     arg_017 = caml_call2(Core_Lazy[23], sexp_of_t$0, shapes_016),
     bnds_009$0 = [0, [1, [0, _e_, [0, arg_017, 0]]], bnds_009];
    switch(f_014[0]){
      case 4:
       var arg_015 = caml_call1(Sexplib0_Sexp_conv[7], cst_streaming_rpc);
       break;
      case 0:
      case 1:
       var arg_015 = caml_call1(Sexplib0_Sexp_conv[7], cst_one_way); break;
      default: var arg_015 = caml_call1(Sexplib0_Sexp_conv[7], cst_rpc);
    }
    var
     bnds_009$1 = [0, [1, [0, _f_, [0, arg_015, 0]]], bnds_009$0],
     arg_013 = caml_call1(Core[389], version_012),
     bnds_009$2 = [0, [1, [0, _g_, [0, arg_013, 0]]], bnds_009$1],
     arg_011 = caml_call1(Async_rpc_kernel_Protocol[1][10], tag_010),
     bnds_009$3 = [0, [1, [0, _h_, [0, arg_011, 0]]], bnds_009$2];
    return [1, bnds_009$3];
   }
   function description(t){
    var _z_ = t[2];
    return [0, caml_call1(Async_rpc_kernel_Protocol[1][12], t[1]), _z_];
   }
   function shapes(t){return caml_call1(Core[248], t[4])[1];}
   function digests(t){return caml_call1(Core[248], t[4])[2];}
   function lift$0(t, f){
    var _v_ = t[5], _w_ = t[4];
    function _x_(b){return [0, caml_call1(f, b)];}
    var _y_ = lift(t[3], _x_);
    return [0, t[1], t[2], _y_, _w_, _v_];
   }
   function with_authorization(t, f){
    var _s_ = t[5], _t_ = t[4], _u_ = lift(t[3], f);
    return [0, t[1], t[2], _u_, _t_, _s_];
   }
   function lift_deferred$0(t, f){
    var _m_ = t[5], _n_ = t[4];
    function _o_(b){
     function _q_(x){return [0, x];}
     var _r_ = caml_call1(f, b);
     return caml_call2(Eager_deferred[7], _r_, _q_);
    }
    var _p_ = lift_deferred(t[3], _o_);
    return [0, t[1], t[2], _p_, _n_, _m_];
   }
   function with_authorization_deferred(t, f){
    var _j_ = t[5], _k_ = t[4], _l_ = lift_deferred(t[3], f);
    return [0, t[1], t[2], _l_, _k_, _j_];
   }
   function update_on_exception(t, f){
    var _i_ = caml_call1(f, t[5]);
    return [0, t[1], t[2], t[3], t[4], _i_];
   }
   caml_call1(Ppx_inline_test_lib[7], cst_async_rpc_kernel);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_rpc_kernel_Implement);
   var
    Async_rpc_kernel_Implementatio =
      [0,
       Expert,
       [0, lift, lift_deferred],
       sexp_of_t$1,
       description,
       shapes,
       digests,
       lift$0,
       lift_deferred$0,
       with_authorization,
       with_authorization_deferred,
       update_on_exception];
   runtime.caml_register_global
    (32, Async_rpc_kernel_Implementatio, cst_Async_rpc_kernel_Implement$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_rpc_kernel__Rpc_metadata
//# unitInfo: Requires: Async_kernel__Async_kernel_scheduler, Async_kernel__Execution_context, Base__Type_equal, Core, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_rpc_kernel_Rpc_metad$0 = "Async_rpc_kernel__Rpc_metadata",
    cst_async_rpc_kernel$0 = "async_rpc_kernel";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Async_kernel_Execution_context =
      global_data.Async_kernel__Execution_context,
    Async_kernel_Async_kernel_sche =
      global_data.Async_kernel__Async_kernel_scheduler,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Core = global_data.Core,
    Base_Type_equal = global_data.Base__Type_equal;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_rpc_kernel_Rpc_metad$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_rpc_kernel$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/rpc_metadata.ml");
   caml_call2
    (Ppx_inline_test_lib[6], cst_async_rpc_kernel$0, "rpc_metadata.ml");
   var
    sexp_of_t = Core[558],
    local_storage_key =
      caml_call2
       (Base_Type_equal[12][4], "async_rpc_kernel_metadata", sexp_of_t),
    cst_async_rpc_kernel = cst_async_rpc_kernel$0,
    cst_Async_rpc_kernel_Rpc_metad = cst_Async_rpc_kernel_Rpc_metad$0;
   function get(param){
    return caml_call1(Async_kernel_Async_kernel_sche[7], local_storage_key);
   }
   function set(metadata, ctx){
    return caml_call3
            (Async_kernel_Execution_context[10],
             ctx,
             local_storage_key,
             metadata);
   }
   var Private = [0, set];
   caml_call1(Ppx_inline_test_lib[7], cst_async_rpc_kernel);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_rpc_kernel_Rpc_metad);
   var Async_rpc_kernel_Rpc_metadata = [0, sexp_of_t, get, Private];
   runtime.caml_register_global
    (16, Async_rpc_kernel_Rpc_metadata, cst_Async_rpc_kernel_Rpc_metad$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_rpc_kernel__Rpc_result
//# unitInfo: Requires: Async_kernel, Async_kernel__Deferred, Async_kernel__Monitor, Async_rpc_kernel__Rpc_error, Base__Exn, Bin_prot__Shape, Bin_shape, Core, Core__Option, Core__Result, Expect_test_config, Inline_test_config, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_expect_runtime__Test_block, Ppx_expect_runtime__Test_node, Ppx_expect_runtime__Types, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_rpc_kernel_Rpc_resul$0 = "Async_rpc_kernel__Rpc_result",
    cst_a = "a",
    cst_async_rpc_kernel$0 = "async_rpc_kernel",
    cst_src_rpc_result_ml$0 = "src/rpc_result.ml",
    cst_t$0 = "t";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   function caml_call14
   (f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13){
    return (f.l >= 0 ? f.l : f.l = f.length) == 14
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13)
            : runtime.caml_call_gen
              (f,
               [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Core_Result = global_data.Core__Result,
    Async_rpc_kernel_Rpc_error = global_data.Async_rpc_kernel__Rpc_error,
    Core_Option = global_data.Core__Option,
    Async_kernel_Monitor = global_data.Async_kernel__Monitor,
    Async_kernel_Deferred = global_data.Async_kernel__Deferred,
    Async_kernel = global_data.Async_kernel,
    Base_Exn = global_data.Base__Exn,
    Core = global_data.Core,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Bin_shape = global_data.Bin_shape,
    Ppx_expect_runtime_Types = global_data.Ppx_expect_runtime__Types,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Expect_test_config = global_data.Expect_test_config,
    Ppx_expect_runtime_Test_block = global_data.Ppx_expect_runtime__Test_block,
    Ppx_expect_runtime_Test_node = global_data.Ppx_expect_runtime__Test_node,
    Inline_test_config = global_data.Inline_test_config;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_rpc_kernel_Rpc_resul$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_rpc_kernel$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_rpc_result_ml$0);
   caml_call2(Ppx_inline_test_lib[6], cst_async_rpc_kernel$0, "rpc_result.ml");
   var
    _a_ = Async_rpc_kernel_Rpc_error[5],
    _b_ = caml_call1(Bin_shape[3][1], cst_a),
    _c_ = caml_call1(Bin_shape[4][1], "src/rpc_result.ml:4:13"),
    _d_ = caml_call2(Bin_prot_Shape[11], _c_, _b_),
    _e_ = caml_call1(caml_call1(Core_Result[1], _d_), _a_),
    _f_ = [0, caml_call1(Bin_shape[3][1], cst_a), 0],
    _g_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$0), _f_, _e_], 0],
    _h_ = caml_call1(Bin_shape[4][1], "src/rpc_result.ml:4:0"),
    group = caml_call2(Bin_prot_Shape[2], _h_, _g_),
    _i_ = [0, "exn"],
    _j_ = [0, "location"],
    cst_t = cst_t$0,
    _l_ =
      [0,
       [0,
        [0, " 106a55f7c7d8cf06dd3f4a8e759329f3 ", [0, ""]],
        [0, 148, 159, 197]]],
    _m_ = [0, 148, 150, 198],
    _r_ = [0, 89, 89, 198],
    _s_ = [0, 148, 198, 198],
    _t_ = [0, 89, 89, 198],
    cst_src_rpc_result_ml = cst_src_rpc_result_ml$0,
    cst_async_rpc_kernel = cst_async_rpc_kernel$0,
    cst_Async_rpc_kernel_Rpc_resul = cst_Async_rpc_kernel_Rpc_resul$0;
   if(typeof Ppx_inline_test_lib[3] !== "number"){
    var
     Ppx_expect_test_block =
       caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
     _k_ =
       function(param){
        var
         a = Core[603],
         _A_ = caml_call1(Bin_shape[2][1], cst_t),
         _B_ =
           caml_call1(caml_call2(Bin_prot_Shape[10], group, _A_), [0, a, 0]),
         _C_ = caml_call1(Bin_prot_Shape[15], _B_),
         _D_ = caml_call1(Bin_shape[19][4], _C_);
        caml_call1(Core[32], _D_);
        var _E_ = caml_call1(Ppx_expect_runtime_Types[4][1], 0);
        return caml_call1(Ppx_expect_test_block[2], _E_);
       },
     _n_ =
       caml_call3
        (Ppx_expect_runtime_Test_node[1][1],
         [0, Ppx_expect_runtime_Types[1][1]],
         _m_,
         _l_),
     _o_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 0), _n_], 0],
     _p_ = caml_call1(Ppx_expect_runtime_Types[4][1], 2),
     _q_ = caml_call1(Ppx_expect_runtime_Types[4][1], 1);
    caml_call14
     (Ppx_expect_test_block[3],
      cst_src_rpc_result_ml,
      6,
      _t_,
      _s_,
      _r_,
      [0, Ppx_expect_runtime_Types[1][1]],
      0,
      _q_,
      _p_,
      0,
      0,
      Inline_test_config,
      _o_,
      _k_);
   }
   function sexp_of_located_error(param){
    var
     exn_004 = param[2],
     location_002 = param[1],
     arg_005 = caml_call1(Base_Exn[1], exn_004),
     bnds_001 = [0, [1, [0, _i_, [0, arg_005, 0]]], 0],
     arg_003 = caml_call1(Core[558], location_002),
     bnds_001$0 = [0, [1, [0, _j_, [0, arg_003, 0]]], bnds_001];
    return [1, bnds_001$0];
   }
   function uncaught_exn(location, exn){
    return [1, [2, sexp_of_located_error([0, location, exn])]];
   }
   function bin_io_exn(location, exn){
    return [1, [0, sexp_of_located_error([0, location, exn])]];
   }
   function authorization_error(location, exn){
    return [1, [5, sexp_of_located_error([0, location, exn])]];
   }
   function try_with(on_background_exception, run, location, f){
    if(on_background_exception)
     var
      callback = on_background_exception[1],
      rest = [0, 747848894, callback];
    else
     var rest = 3804260;
    var
     _y_ = [0, caml_call2(Core_Option[39], run, 523273847)],
     x = caml_call7(Async_kernel_Monitor[16], 0, 0, 0, 0, _y_, [0, rest], f);
    function join(param){
     if(0 === param[0]){var x = param[1]; return x;}
     var exn = param[1];
     return uncaught_exn(location, exn);
    }
    var match = caml_call1(Async_kernel_Deferred[5], x);
    if(! match) return caml_call2(Async_kernel[22], x, join);
    var x$0 = match[1], _z_ = join(x$0);
    return caml_call1(Async_kernel[20], _z_);
   }
   function or_error
   (rpc_description, connection_description, connection_close_started){
    var func = Core_Result[47], _u_ = Async_rpc_kernel_Rpc_error[35];
    function _v_(_x_){
     return caml_call4
             (_u_,
              _x_,
              rpc_description,
              connection_description,
              connection_close_started);
    }
    return function(_w_){return caml_call2(func, _w_, _v_);};
   }
   caml_call1(Ppx_inline_test_lib[7], cst_async_rpc_kernel);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_rpc_kernel_Rpc_resul);
   var
    Async_rpc_kernel_Rpc_result =
      [0, uncaught_exn, bin_io_exn, authorization_error, try_with, or_error];
   runtime.caml_register_global
    (40, Async_rpc_kernel_Rpc_result, cst_Async_rpc_kernel_Rpc_resul$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_rpc_kernel__Util
//# unitInfo: Requires: Async_rpc_kernel__Rpc_result, Base__Exn, Core, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$2 = "",
    cst_Async_rpc_kernel_Util$0 = "Async_rpc_kernel__Util",
    cst_async_rpc_kernel$0 = "async_rpc_kernel",
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$0 = ". ",
    cst$1 = cst$2,
    cst = cst$2,
    Core = global_data.Core,
    Async_rpc_kernel_Rpc_result = global_data.Async_rpc_kernel__Rpc_result,
    Base_Exn = global_data.Base__Exn,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_rpc_kernel_Util$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_rpc_kernel$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/util.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_async_rpc_kernel$0, "util.ml");
   var
    _b_ =
      [0,
       [11,
        "message length (",
        [4,
         0,
         0,
         0,
         [11,
          ") did not match expected length (",
          [4, 0, 0, 0, [12, 41, [2, 0, 0]]]]]],
       "message length (%d) did not match expected length (%d)%s"],
    _a_ =
      [0,
       [11, "Tried to dump message but got exn ", [2, 0, 0]],
       "Tried to dump message but got exn %s"],
    cst_Async_rpc_kernel_Util_Dump =
      "Async_rpc_kernel__Util.Dumped_buffer_info",
    cst_async_rpc_kernel = cst_async_rpc_kernel$0,
    cst_Async_rpc_kernel_Util = cst_Async_rpc_kernel_Util$0,
    dumper_for_deserialization_err = [0, function(buf, param){return cst;}];
   function dump_and_message(buf, pos){
    try{
     var
      _e_ = caml_call2(dumper_for_deserialization_err[1], buf, pos),
      s = _e_;
    }
    catch(exn$0){
     var
      exn = caml_wrap_exception(exn$0),
      _d_ = caml_call1(Base_Exn[10], exn),
      s = caml_call2(Core[265], _a_, _d_);
    }
    return runtime.caml_string_notequal(s, cst$2) ? [0, s] : 0;
   }
   var
    Dumped_buffer_info =
      [248, cst_Async_rpc_kernel_Util_Dump, runtime.caml_fresh_oo_id(0)];
   function bin_read_from_bigstring
   (bin_reader_t, add_len, buf, pos_ref, len, location){
    var init_pos = pos_ref[1];
    try{
     var data = caml_call2(bin_reader_t[1], buf, pos_ref);
     if(add_len)
      var add_len$0 = add_len[1], add_len$1 = caml_call1(add_len$0, data);
     else
      var add_len$1 = 0;
     if
      (caml_call2(Core[93], (pos_ref[1] - init_pos | 0) + add_len$1 | 0, len)){
      var match$0 = dump_and_message(buf, init_pos);
      if(match$0)
       var s = match$0[1], dump = caml_call2(Core[18], cst$0, s);
      else
       var dump = cst$1;
      caml_call5(Core[246], _b_, pos_ref[1] - init_pos | 0, len, dump, 0);
     }
     var _c_ = [0, data];
     return _c_;
    }
    catch(e$1){
     var
      e = caml_wrap_exception(e$1),
      match = dump_and_message(buf, init_pos);
     if(match)
      var info = match[1], e$0 = [0, Dumped_buffer_info, info, e];
     else
      var e$0 = e;
     return caml_call2(Async_rpc_kernel_Rpc_result[2], location, e$0);
    }
   }
   caml_call1(Ppx_inline_test_lib[7], cst_async_rpc_kernel);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_rpc_kernel_Util);
   var
    Async_rpc_kernel_Util =
      [0, bin_read_from_bigstring, dumper_for_deserialization_err];
   runtime.caml_register_global
    (21, Async_rpc_kernel_Util, cst_Async_rpc_kernel_Util$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_rpc_kernel__Implementations
//# unitInfo: Requires: Async_kernel, Async_kernel__Async_kernel_scheduler, Async_kernel__Deferred, Async_kernel__Ivar, Async_kernel__Monitor, Async_kernel__Pipe, Async_kernel__Scheduler, Async_rpc_kernel__Description, Async_rpc_kernel__Implementation, Async_rpc_kernel__Implementation_types, Async_rpc_kernel__Menu, Async_rpc_kernel__Nat0, Async_rpc_kernel__On_exception, Async_rpc_kernel__Protocol, Async_rpc_kernel__Protocol_writer, Async_rpc_kernel__Rpc_error, Async_rpc_kernel__Rpc_metadata, Async_rpc_kernel__Rpc_result, Async_rpc_kernel__Transport, Async_rpc_kernel__Transport_intf, Async_rpc_kernel__Util, Base__Backtrace, Base__Exn, Bin_prot__Common, Bus, Core, Core__Bag, Core__Bigstring, Core__Error, Core__Hash_set, Core__Hashtbl, Core__Info, Core__List, Core__Nothing, Core__Option, Core__Or_error, Core__Queue, Core__Result, Core__Sexp, Core__String, Eager_deferred, Inline_test_config, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Ppx_string_runtime, Sexplib0__Sexp_conv, Stdlib
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_rpc_kernel_Implement$1 = "Async_rpc_kernel__Implementations",
    cst = "_",
    cst_async_rpc_kernel$0 = "async_rpc_kernel",
    cst_backtrace = "backtrace",
    cst_exn = "exn",
    cst_location = "location",
    cst_rpc$1 = "rpc",
    cst_server_side_blocking_rpc_c$1 = "server-side blocking rpc computation",
    cst_server_side_rpc_query_un_b$1 = "server-side rpc query un-bin-io'ing",
    cst_src_implementations_ml$0 = "src/implementations.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    v = [0, 17724, 0],
    arg_020 = [0, cst],
    Async_rpc_kernel_Protocol_writ =
      global_data.Async_rpc_kernel__Protocol_writer,
    Core_Error = global_data.Core__Error,
    Async_rpc_kernel_Rpc_result = global_data.Async_rpc_kernel__Rpc_result,
    Core_Nothing = global_data.Core__Nothing,
    Async_rpc_kernel_Transport = global_data.Async_rpc_kernel__Transport,
    Core = global_data.Core,
    Async_rpc_kernel_Transport_int =
      global_data.Async_rpc_kernel__Transport_intf,
    Async_rpc_kernel_Implementatio =
      global_data.Async_rpc_kernel__Implementation,
    Core_Hashtbl = global_data.Core__Hashtbl,
    Core_Or_error = global_data.Core__Or_error,
    Async_rpc_kernel_Protocol = global_data.Async_rpc_kernel__Protocol,
    Async_rpc_kernel_Description = global_data.Async_rpc_kernel__Description,
    Assert_failure = global_data.Assert_failure,
    Async_rpc_kernel_Rpc_metadata = global_data.Async_rpc_kernel__Rpc_metadata,
    Core_Hash_set = global_data.Core__Hash_set,
    Core_List = global_data.Core__List,
    Async_kernel_Async_kernel_sche =
      global_data.Async_kernel__Async_kernel_scheduler,
    Async_kernel_Deferred = global_data.Async_kernel__Deferred,
    Async_rpc_kernel_Rpc_error = global_data.Async_rpc_kernel__Rpc_error,
    Async_kernel_Pipe = global_data.Async_kernel__Pipe,
    Async_rpc_kernel_Menu = global_data.Async_rpc_kernel__Menu,
    Async_kernel = global_data.Async_kernel,
    Async_rpc_kernel_On_exception = global_data.Async_rpc_kernel__On_exception,
    Stdlib = global_data.Stdlib,
    Eager_deferred = global_data.Eager_deferred,
    Async_rpc_kernel_Util = global_data.Async_rpc_kernel__Util,
    Core_Result = global_data.Core__Result,
    Base_Backtrace = global_data.Base__Backtrace,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Async_kernel_Monitor = global_data.Async_kernel__Monitor,
    Core_Option = global_data.Core__Option,
    Base_Exn = global_data.Base__Exn,
    Core_Bag = global_data.Core__Bag,
    Async_kernel_Ivar = global_data.Async_kernel__Ivar,
    Core_Queue = global_data.Core__Queue,
    Async_rpc_kernel_Implementatio$0 =
      global_data.Async_rpc_kernel__Implementation_types,
    Ppx_string_runtime = global_data.Ppx_string_runtime,
    Core_Bigstring = global_data.Core__Bigstring,
    Async_kernel_Scheduler = global_data.Async_kernel__Scheduler,
    Async_rpc_kernel_Nat0 = global_data.Async_rpc_kernel__Nat0,
    Bin_prot_Common = global_data.Bin_prot__Common,
    Bus = global_data.Bus,
    Core_Sexp = global_data.Core__Sexp,
    Core_Info = global_data.Core__Info,
    Core_String = global_data.Core__String,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Inline_test_config = global_data.Inline_test_config;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_rpc_kernel_Implement$1);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_rpc_kernel$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_implementations_ml$0);
   caml_call2
    (Ppx_inline_test_lib[6], cst_async_rpc_kernel$0, "implementations.ml");
   var
    symbol = Core_Result[24],
    cst_server_side_raw_rpc_comput = "server-side raw rpc computation",
    cst_Already_responded = "Already responded",
    _Z_ = [0, cst_src_implementations_ml$0, 1408, 49830, 49857],
    cst_Message_cannot_be_sent = "Message cannot be sent",
    _Y_ = [0, cst_src_implementations_ml$0, 1400, 49654, 49668],
    _W_ = [0, "src/implementations.ml.Duplicate_implementations"],
    _X_ = [0, "_none_", 0, -1],
    _U_ = [0, 10],
    _S_ = [0, 10],
    _T_ = [0, 10],
    _R_ = [0, [0, 0]],
    _P_ = [2, 0],
    _Q_ = [0, [0, 4]],
    _N_ = [0, [0, 0]],
    _O_ = [0, [0, 0]],
    _M_ = [0, cst_src_implementations_ml$0, 1146, 4],
    _H_ = [0, 0],
    cst_rpc_expert = "rpc expert",
    _F_ = [0, [0, 4]],
    _G_ = [0, 0],
    cst_Expert_implementation_did_ = "Expert implementation did not reply",
    _E_ = [0, 0],
    cst_server_side_rpc_expert_com = "server-side rpc expert computation",
    cst_rpc$0 = cst_rpc$1,
    cst_rpc = cst_rpc$1,
    _w_ = [2, 0],
    cst_server_side_one_way_rpc_me =
      "server-side one-way rpc message un-bin-io'ing",
    cst_server_side_one_way_rpc_co = "server-side one-way rpc computation",
    _x_ = [0, [0, 0]],
    cst_server_side_one_way_rpc_ex =
      "server-side one-way rpc expert computation",
    _y_ = [0, [0, 0]],
    cst_server_side_rpc_query_un_b = cst_server_side_rpc_query_un_b$1,
    cst_server_side_rpc_computatio = "server-side rpc computation",
    _z_ = [0, 3903734],
    _A_ = [0, cst_backtrace],
    _B_ = [0, cst_exn],
    cst_server_side_blocking_rpc_c = cst_server_side_blocking_rpc_c$1,
    _C_ = [0, cst_location],
    _D_ = [0, 3903734],
    cst_server_side_pipe_rpc_strea =
      "server-side pipe_rpc stream_query un-bin-io'ing",
    _I_ = [2, 1],
    cst_server_side_rpc_query_un_b$0 = cst_server_side_rpc_query_un_b$1,
    _J_ = [0, cst_backtrace],
    _K_ = [0, cst_exn],
    cst_server_side_blocking_rpc_c$0 = cst_server_side_blocking_rpc_c$1,
    _L_ = [0, cst_location],
    _v_ = [0, 3456156],
    cst_pipe_rpc = "pipe_rpc",
    cst_server_side_pipe_rpc_compu = "server-side pipe_rpc computation",
    cst_streaming_rpc_server_side_ =
      "streaming_rpc server-side query un-bin-io'ing",
    cst_authorization = " authorization",
    cst_server_side = "server-side ",
    cst_attempted_to_start_writer_ =
      "attempted to start writer which was already started",
    cst_could_not_send_as_message_ = "could not send as message too big",
    _u_ = [0, cst_src_implementations_ml$0, 509, 17092, 17110],
    _t_ = [0, 3456156],
    _s_ = [0, cst_src_implementations_ml$0, 295, 6],
    _r_ = [0, cst_src_implementations_ml$0, 296, 6],
    _p_ = [0, 0],
    _n_ = [0, "reason"],
    _o_ = [0, "error"],
    cst_Failed_to_send_write_error = "Failed to send write error to client",
    _d_ = [0, "on_receive"],
    _e_ = [0, "last_dispatched_implementation"],
    _f_ = [0, "connection_close_started"],
    _g_ = [0, "connection_description"],
    _h_ = [0, "connection_state"],
    _i_ = [0, "stopped"],
    _j_ = [0, "open_streaming_responses"],
    _k_ = [0, "events"],
    _l_ = [0, "writer"],
    _m_ = [0, "implementations"],
    _a_ = [0, cst],
    _b_ = [0, "Pipe"],
    _c_ = [0, "Direct"],
    cst_src_implementations_ml = cst_src_implementations_ml$0,
    cst_stream_response_constants_ = "stream_response_* constants are correct",
    cst_Async_rpc_kernel_Implement =
      "Async_rpc_kernel__Implementations.Duplicate_implementations",
    cst_async_rpc_kernel = cst_async_rpc_kernel$0,
    cst_Async_rpc_kernel_Implement$0 = cst_Async_rpc_kernel_Implement$1;
   function descriptions(t){return caml_call1(Core_Hashtbl[67], t[1]);}
   function descriptions_and_shapes(exclude_name, t){
    function _cf_(key, data, acc){
     if(exclude_name){
      var name = exclude_name[1];
      if(caml_call2(Core_String[145], name, key[1])) return acc;
     }
     return [0,
             [0, key, caml_call1(Async_rpc_kernel_Implementatio[6], data)],
             acc];
    }
    return caml_call3(Core_Hashtbl[18], t[1], 0, _cf_);
   }
   function sexp_of_streaming_response(param){
    if(0 === param[0]){
     var
      arg0_002 = param[1],
      _ce_ = function(param){return _a_;},
      res0_003 = caml_call2(Async_kernel_Pipe[4][1], _ce_, arg0_002);
     return [1, [0, _b_, [0, res0_003, 0]]];
    }
    var
     arg0_004 = param[1],
     res0_005 = caml_call1(Sexplib0_Sexp_conv[23], arg0_004);
    return [1, [0, _c_, [0, res0_005, 0]]];
   }
   function set_on_receive(param, on_receive){param[10] = on_receive; return 0;
   }
   function sexp_of_t(x_033){
    var
     open_streaming_responses_015 = x_033[4],
     events_013 = x_033[3],
     writer_011 = x_033[2],
     implementations_009 = x_033[1],
     stopped_017 = x_033[5],
     connection_close_started_023 = x_033[8],
     connection_description_021 = x_033[7],
     last_dispatched_implementation = x_033[9],
     bnds_008 = 0;
    function _b__(_cd_){return 0;}
    var
     arg_032 = caml_call1(Sexplib0_Sexp_conv[24], _b__),
     bnds_008$0 = [0, [1, [0, _d_, [0, arg_032, 0]]], bnds_008];
    function _b$_(param){
     var
      arg1_028 = param[2],
      arg0_027 = param[1],
      res0_029 = caml_call1(Async_rpc_kernel_Description[10], arg0_027),
      res1_030 = caml_call1(Sexplib0_Sexp_conv[23], arg1_028);
     return [1, [0, res0_029, [0, res1_030, 0]]];
    }
    var
     arg_026 = caml_call2(Core[515], _b$_, last_dispatched_implementation),
     bnds_008$1 = [0, [1, [0, _e_, [0, arg_026, 0]]], bnds_008$0],
     arg_024 =
       caml_call2
        (Async_kernel_Deferred[1], Core_Info[9], connection_close_started_023),
     bnds_008$2 = [0, [1, [0, _f_, [0, arg_024, 0]]], bnds_008$1],
     arg_022 = caml_call1(Core_Info[9], connection_description_021),
     bnds_008$3 = [0, [1, [0, _g_, [0, arg_022, 0]]], bnds_008$2],
     bnds_008$4 = [0, [1, [0, _h_, [0, arg_020, 0]]], bnds_008$3],
     arg_018 = caml_call1(Core[323], stopped_017),
     bnds_008$5 = [0, [1, [0, _i_, [0, arg_018, 0]]], bnds_008$4],
     arg_016 =
       caml_call3
        (Core_Hashtbl[3],
         Async_rpc_kernel_Protocol[2][10],
         sexp_of_streaming_response,
         open_streaming_responses_015),
     bnds_008$6 = [0, [1, [0, _j_, [0, arg_016, 0]]], bnds_008$5];
    function _ca_(param){
     function _cb_(_cc_){return 0;}
     return caml_call1(Sexplib0_Sexp_conv[24], _cb_);
    }
    var
     arg_014 = caml_call2(Bus[3][1], _ca_, events_013),
     bnds_008$7 = [0, [1, [0, _k_, [0, arg_014, 0]]], bnds_008$6],
     arg_012 = caml_call1(Async_rpc_kernel_Protocol_writ[1], writer_011),
     bnds_008$8 = [0, [1, [0, _l_, [0, arg_012, 0]]], bnds_008$7],
     arg_010 = caml_call1(Sexplib0_Sexp_conv[23], implementations_009),
     bnds_008$9 = [0, [1, [0, _m_, [0, arg_010, 0]]], bnds_008$8];
    return [1, bnds_008$9];
   }
   function write_event(t, event){
    var _b9_ = 1 - caml_call1(Bus[10], t[3]);
    return _b9_ ? caml_call2(Bus[13], t[3], event) : _b9_;
   }
   function handle_send_result(t, qid, rpc, kind, result){
    if(typeof result === "number")
     write_event(t, [0, [1, [0, kind], 0], [0, rpc], qid, 0]);
    else if(0 === result[0]){
     var bytes = result[2];
     write_event(t, [0, [0, [0, kind]], [0, rpc], qid, bytes]);
    }
    else{
     var err = result[1];
     write_event(t, [0, [1, [0, kind], 1], [0, rpc], qid, err[1]]);
     var
      x_037 =
        caml_call2(Async_rpc_kernel_Transport_int[2][14], Core[617], result),
      sexp =
        caml_call2(Async_rpc_kernel_Transport_int[2][13], Core[620], x_037),
      x_035 =
        caml_call3
         (Async_rpc_kernel_Protocol_writ[7],
          t[2],
          [0, qid, [1, [1, sexp]]],
          Core_Nothing[19]);
     a:
     if(typeof x_035 !== "number" && 1 === x_035[0]){
      var
       x_034 =
         caml_call2(Async_rpc_kernel_Transport_int[2][14], Core[617], x_035),
       _b6_ =
         [0,
          [1,
           [0,
            _n_,
            [0,
             caml_call2
              (Async_rpc_kernel_Transport_int[2][13], Core[620], x_034),
             0]]],
          0],
       _b7_ =
         [0,
          [1,
           [0, [1, [0, _o_, [0, caml_call1(Core_Sexp[93], sexp), 0]]], _b6_]],
          0],
       _b8_ =
         [1,
          [0,
           caml_call1(Sexplib0_Sexp_conv[7], cst_Failed_to_send_write_error),
           _b7_]];
      caml_call1(Core[261], _b8_);
      break a;
     }
    }
    return 0;
   }
   function unsafe_write_message_for_cache(t, bin_writer, x, id, rpc, kind){
    if(1 - t[5])
     handle_send_result
      (t,
       id,
       rpc,
       kind,
       caml_call3(Async_rpc_kernel_Protocol_writ[17][1], t[2], bin_writer, x));
    return 0;
   }
   function write_response
   (t, id, bin_writer_data, data, rpc, error_mode, ok_kind){
    var _b1_ = 1 - t[5];
    if(! _b1_) return _b1_;
    if(0 === caml_call1(Bus[9], t[3]))
     var kind = ok_kind;
    else if(0 === data[0])
     if(typeof error_mode === "number")
      switch(error_mode){
        case 0:
         var kind = ok_kind; break;
        case 1:
         var ok_kind$0 = 0 === data[1][0] ? ok_kind : 3, kind = ok_kind$0;
         break;
        case 2:
         var _b2_ = data[1];
         if(0 === _b2_[0])
          var
           ok_kind$1 = 0 === _b2_[1][0] ? ok_kind : 3,
           ok_kind$2 = ok_kind$1;
         else
          var ok_kind$2 = 3;
         var kind = ok_kind$2;
         break;
        default:
         var ok_kind$3 = 0 === data[1][2][0] ? ok_kind : 3, kind = ok_kind$3;
      }
     else{
      var x = data[1], is_error = error_mode[1];
      a:
      {
       try{var val = caml_call1(is_error, x);}
       catch(_b5_){var _b3_ = 2; break a;}
       var _b4_ = val ? 3 : ok_kind, _b3_ = _b4_;
      }
      var kind = _b3_;
     }
    else
     var kind = 2;
    return handle_send_result
            (t,
             id,
             rpc,
             kind,
             caml_call3
              (Async_rpc_kernel_Protocol_writ[7],
               t[2],
               [0, id, data],
               bin_writer_data));
   }
   function write_streaming_eof(t, id, bin_writer_data, data, rpc){
    return write_response(t, id, bin_writer_data, data, rpc, 0, 7);
   }
   function write_streaming_initial
   (t, id, bin_writer_data, data, is_final, rpc, error_mode){
    var ok_kind = 331861846 <= is_final ? 2 : 5;
    return write_response
            (t, id, bin_writer_data, data, rpc, error_mode, ok_kind);
   }
   function write_single_response
   (t, id, bin_writer_data, data, rpc, error_mode){
    return write_response(t, id, bin_writer_data, data, rpc, error_mode, 1);
   }
   function bin_write_void(buf, pos, param){return pos;}
   var
    buffer = caml_call1(Core_Bigstring[121], 32),
    stream_response_data_header_as = 35449;
   function _q_(param){
    var
     len =
       caml_call4
        (Async_rpc_kernel_Protocol[12][3], bin_write_void, buffer, 0, v);
    if(len !== 4)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _s_], 1);
    if
     (runtime.caml_equal
       (caml_call2(Core_Bigstring[103], buffer, 0),
        stream_response_data_header_as))
     return 0;
    throw caml_maybe_attach_backtrace([0, Assert_failure, _r_], 1);
   }
   caml_call8
    (Ppx_inline_test_lib[9],
     Inline_test_config,
     cst_stream_response_constants_,
     0,
     cst_src_implementations_ml,
     288,
     4,
     391,
     _q_);
   function bin_write_string_no_length(buf, pos, str){
    var str_len = caml_ml_string_length(str);
    caml_call1(Bin_prot_Common[3], pos);
    var next = pos + str_len | 0;
    caml_call2(Bin_prot_Common[5], buf, next);
    runtime.bin_prot_blit_string_buf_stub(0, str, pos, buf, str_len);
    return next;
   }
   function bin_size_nat0_header(param){
    var
     header_prefix = param[1],
     data_len = param[2],
     stream_response_data_nat0_len =
       4 + caml_call1(Async_rpc_kernel_Nat0[1], data_len) | 0,
     stream_response_data_len = stream_response_data_nat0_len + data_len | 0,
     _b0_ = caml_call1(Async_rpc_kernel_Nat0[9], stream_response_data_len);
    return (caml_ml_string_length(header_prefix)
           + caml_call1(Async_rpc_kernel_Nat0[1], _b0_)
           | 0)
           + stream_response_data_nat0_len
           | 0;
   }
   function bin_write_nat0_header(buf, pos, param){
    var
     header_prefix = param[1],
     data_len = param[2],
     pos$0 = bin_write_string_no_length(buf, pos, header_prefix),
     stream_response_data_len =
       (4 + caml_call1(Async_rpc_kernel_Nat0[1], data_len) | 0) + data_len | 0,
     _bZ_ = caml_call1(Async_rpc_kernel_Nat0[9], stream_response_data_len),
     pos$1 = caml_call3(Async_rpc_kernel_Nat0[2], buf, pos$0, _bZ_),
     next = pos$1 + 4 | 0;
    caml_call2(Bin_prot_Common[5], buf, next);
    caml_call3
     (Core_Bigstring[105], buf, pos$1, stream_response_data_header_as);
    return caml_call3(Async_rpc_kernel_Nat0[2], buf, next, data_len);
   }
   var
    bin_writer_nat0_header = [0, bin_size_nat0_header, bin_write_nat0_header];
   function bin_size_message(param){
    var t = param[1], _bY_ = t[2];
    return bin_size_nat0_header(t) + _bY_ | 0;
   }
   function bin_write_message(buf, pos, param){
    var
     data = param[2],
     t = param[1],
     pos$0 = bin_write_nat0_header(buf, pos, t);
    return caml_call3(t[3][2], buf, pos$0, data);
   }
   var bin_writer_message = [0, bin_size_message, bin_write_message];
   function bin_size_message_as_string(param){
    var t = param[1], _bX_ = t[2];
    return bin_size_nat0_header(t) + _bX_ | 0;
   }
   function bin_write_message_as_string(buf, pos, param){
    var
     str = param[2],
     t = param[1],
     pos$0 = bin_write_nat0_header(buf, pos, t);
    return bin_write_string_no_length(buf, pos$0, str);
   }
   var
    bin_writer_message_as_string =
      [0, bin_size_message_as_string, bin_write_message_as_string];
   function prep_write(t, data){
    var _bW_ = caml_call1(t[3][1], data);
    t[2] = caml_call1(Async_rpc_kernel_Nat0[9], _bW_);
    return bin_writer_message;
   }
   function prep_write_expert(t, len){
    t[2] = caml_call1(Async_rpc_kernel_Nat0[9], len);
    return bin_writer_nat0_header;
   }
   function is_closed(t){return caml_call1(Async_kernel_Ivar[18], t[3]);}
   function closed(t){return caml_call1(Async_kernel_Ivar[19], t[3]);}
   function flushed(t){
    return caml_call1(Async_rpc_kernel_Protocol_writ[13], t[4][2]);
   }
   function bin_writer(t){return t[7][3];}
   function write_eof(param){
    var rpc = param[6], query_id = param[5];
    return write_streaming_eof
            (param[4], query_id, Async_rpc_kernel_Protocol[12][19], _t_, rpc);
   }
   function write_message(t, x){
    var bin_writer_message = prep_write(t[7], x);
    return unsafe_write_message_for_cache
            (t[4], bin_writer_message, [0, t[7], x], t[5], t[6], 6);
   }
   function schedule_write_message_expert(t, buf, pos, len){
    var bin_writer_message = prep_write_expert(t[7], len), instance = t[4];
    if(instance[5]) return -1025106484;
    var
     result =
       caml_call6
        (Async_rpc_kernel_Protocol_writ[17][3],
         instance[2],
         bin_writer_message,
         t[7],
         buf,
         pos,
         len);
    handle_send_result(instance, t[5], t[6], 6, result);
    if(typeof result === "number") return -1025106484;
    if(0 === result[0]){
     var result$0 = result[1];
     return [0, 933108739, result$0];
    }
    var
     too_big = result[1],
     _bU_ = Async_rpc_kernel_Transport_int[2][12],
     _bV_ = caml_call1(Async_rpc_kernel_Transport_int[2][10], too_big);
    return caml_call5
            (Core[247], 0, _u_, cst_could_not_send_as_message_, _bV_, _bU_);
   }
   function close_without_removing_from_in(t){
    var _bR_ = 1 - caml_call1(Async_kernel_Ivar[18], t[3]);
    if(! _bR_) return _bR_;
    caml_call2(Async_kernel_Ivar[14], t[3], 0);
    var groups = t[8];
    if(1 - caml_call1(Core_Bag[6], groups)){
     var
      _bS_ =
        function(param){
         var match = caml_call1(Core_Bag[28], groups);
         if(! match) return 0;
         var
          match$0 = match[1],
          element_in_group = match$0[2],
          group = match$0[1];
         caml_call2(Core_Bag[26], group[1], element_in_group);
         caml_call2(Core_Hashtbl[32], group[2], t[1]);
         return 1;
        };
     caml_call1(Async_kernel_Scheduler[72][2], _bS_);
    }
    var match = t[2];
    if(! match) return write_eof(t);
    var q = match[1];
    function _bT_(param){
     if(2 !== param[0]) return 0;
     var done = param[4];
     return caml_call2(Async_kernel_Ivar[16], done, 0);
    }
    return caml_call2(Core_Queue[18], q, _bT_);
   }
   function close(t){
    var query_id = t[5], match = t[4];
    close_without_removing_from_in(t);
    return caml_call2(Core_Hashtbl[32], match[4], query_id);
   }
   function write_without_pushback(t, x){
    if(caml_call1(Async_kernel_Ivar[18], t[3])) return -1025106484;
    var match = t[2];
    if(match){
     var q = match[1];
     caml_call2(Core_Queue[43], q, [0, x]);
    }
    else
     write_message(t, x);
    return 17724;
   }
   function write(t, x){
    var instance = t[4];
    return 17724 <= write_without_pushback(t, x)
            ? [0,
              933108739,
              caml_call1(Async_rpc_kernel_Protocol_writ[13], instance[2])]
            : -1025106484;
   }
   function write_without_pushback$0(t, buf, pos, len){
    if(caml_call1(Async_kernel_Ivar[18], t[3])) return -1025106484;
    var match = t[2];
    if(match){
     var
      q = match[1],
      _bQ_ = [1, caml_call3(Core_Bigstring[28][4], buf, pos, len)];
     caml_call2(Core_Queue[43], q, _bQ_);
    }
    else{
     var bin_writer_message = prep_write_expert(t[7], len), instance = t[4];
     if(1 - instance[5]){
      var
       _bP_ =
         caml_call6
          (Async_rpc_kernel_Protocol_writ[17][2],
           instance[2],
           bin_writer_message,
           t[7],
           buf,
           pos,
           len);
      handle_send_result(instance, t[5], t[6], 6, _bP_);
     }
    }
    return 17724;
   }
   function write$0(t, buf, pos, len){
    var instance = t[4];
    return 17724 <= write_without_pushback$0(t, buf, pos, len)
            ? [0,
              933108739,
              caml_call1(Async_rpc_kernel_Protocol_writ[13], instance[2])]
            : -1025106484;
   }
   function schedule_write(t, buf, pos, len){
    if(caml_call1(Async_kernel_Ivar[18], t[3])) return -1025106484;
    var match = t[2];
    if(! match) return schedule_write_message_expert(t, buf, pos, len);
    var q = match[1], done = caml_call1(Async_kernel_Ivar[12], 0);
    caml_call2(Core_Queue[43], q, [2, buf, pos, len, done]);
    return [0, 933108739, caml_call1(Async_kernel_Ivar[19], done)];
   }
   function authorization_failure_result(error, rpc_kind){
    var
     exn = caml_call1(Core_Error[28], error),
     _bM_ =
       [0,
        rpc_kind,
        [0, caml_call1(Ppx_string_runtime[1][2], cst_authorization), 0]],
     _bN_ = [0, caml_call1(Ppx_string_runtime[1][2], cst_server_side), _bM_],
     _bO_ = caml_call1(Ppx_string_runtime[1][4], _bN_);
    return caml_call2(Async_rpc_kernel_Rpc_result[3], _bO_, exn);
   }
   function apply_implementation
   (t,
    implementation,
    query,
    read_buffer,
    read_buffer_pos_ref,
    close_connection_monitor,
    on_exception,
    message_bytes_for_tracing){
    var
     id = query[3],
     _aK_ = query[2],
     rpc = [0, caml_call1(Async_rpc_kernel_Protocol[1][12], query[1]), _aK_];
    function emit_regular_query_tracing_eve(param){
     var _bK_ = query[3], _bL_ = query[2];
     return write_event
             (t,
              [0,
               _w_,
               [0,
                [0,
                 caml_call1(Async_rpc_kernel_Protocol[1][12], query[1]),
                 _bL_]],
               _bK_,
               message_bytes_for_tracing]);
    }
    switch(implementation[0]){
      case 0:
       var f$3 = implementation[2], bin_query_reader$0 = implementation[1];
       emit_regular_query_tracing_eve(0);
       var
        query_contents =
          caml_call6
           (Async_rpc_kernel_Util[1],
            bin_query_reader$0,
            0,
            read_buffer,
            read_buffer_pos_ref,
            query[5],
            cst_server_side_one_way_rpc_me);
       if(0 !== query_contents[0]) return [0, query_contents];
       var q = query_contents[1];
       try{caml_call2(f$3, t[6], q); var _aM_ = 0, result = _aM_;}
       catch(exn$0){
        var exn = caml_wrap_exception(exn$0);
        caml_call3
         (Async_rpc_kernel_On_exception[4],
          on_exception,
          close_connection_monitor,
          exn);
        var
         _aL_ =
           on_exception[2]
            ? [0,
              caml_call2
               (Async_rpc_kernel_Rpc_result[1],
                cst_server_side_one_way_rpc_co,
                exn)]
            : 0,
         result = _aL_;
       }
       write_event(t, [0, _x_, [0, rpc], id, 0]);
       return result;
      case 1:
       var f$4 = implementation[1];
       emit_regular_query_tracing_eve(0);
       try{
        var len$0 = query[5];
        caml_call4(f$4, t[6], read_buffer, read_buffer_pos_ref[1], len$0);
        read_buffer_pos_ref[1] = read_buffer_pos_ref[1] + len$0 | 0;
        var _aP_ = 0, result$0 = _aP_;
       }
       catch(exn){
        var exn$0 = caml_wrap_exception(exn);
        caml_call3
         (Async_rpc_kernel_On_exception[4],
          on_exception,
          close_connection_monitor,
          exn$0);
        var
         _aN_ =
           on_exception[2]
            ? [0,
              caml_call2
               (Async_rpc_kernel_Rpc_result[1],
                cst_server_side_one_way_rpc_ex,
                exn$0)]
            : 0,
         result$0 = _aN_;
       }
       var _aO_ = query[2];
       write_event
        (t,
         [0,
          _y_,
          [0,
           [0, caml_call1(Async_rpc_kernel_Protocol[1][12], query[1]), _aO_]],
          id,
          0]);
       return result$0;
      case 2:
       var
        result_mode = implementation[5],
        error_mode$0 = implementation[4],
        f$5 = implementation[3],
        bin_response_writer = implementation[2],
        bin_query_reader$1 = implementation[1];
       emit_regular_query_tracing_eve(0);
       var
        query_contents$0 =
          caml_call6
           (Async_rpc_kernel_Util[1],
            bin_query_reader$1,
            0,
            read_buffer,
            read_buffer_pos_ref,
            query[5],
            cst_server_side_rpc_query_un_b);
       a:
       if(result_mode){
        var
         _aQ_ =
           function(param){
            if(0 === query_contents$0[0]){
             var
              query = query_contents$0[1],
              _bI_ = function(result){return [0, result];},
              _bJ_ = caml_call2(f$5, t[6], query);
             return caml_call2(Eager_deferred[7], _bJ_, _bI_);
            }
            var err = query_contents$0[1];
            return caml_call1(Async_kernel_Deferred[12], [1, err]);
           },
         result$1 =
           caml_call4
            (Async_rpc_kernel_Rpc_result[4],
             on_exception[1],
             _z_,
             cst_server_side_rpc_computatio,
             _aQ_),
         handle_result =
           function(result){
            function write_response(response){
             var
              _bH_ = query[2],
              rpc =
                [0,
                 caml_call1(Async_rpc_kernel_Protocol[1][12], query[1]),
                 _bH_];
             return write_single_response
                     (t, id, bin_response_writer, response, rpc, error_mode$0);
            }
            if(0 === result[0]){
             var match = result[1];
             if(0 === match[0]){
              var result$0 = match[1];
              return write_response([0, result$0]);
             }
             var error = match[1];
             return write_response
                     (authorization_failure_result(error, cst_rpc$0));
            }
            var error$0 = result[1];
            write_response(result);
            if(typeof error$0 !== "number" && 2 === error$0[0]){
             var sexp = error$0[1], _bG_ = caml_call1(Base_Exn[5], sexp);
             return caml_call3
                     (Async_rpc_kernel_On_exception[4],
                      on_exception,
                      close_connection_monitor,
                      _bG_);
            }
            return 0;
           },
         match$0 = caml_call1(Async_kernel_Deferred[5], result$1);
        if(match$0){
         var result$2 = match$0[1];
         handle_result(result$2);
        }
        else
         caml_call2(Async_kernel[17], result$1, handle_result);
       }
       else{
        try{
         var
          _aT_ =
            function(query){
             var param = caml_call2(f$5, t[6], query);
             if(0 === param[0]){var result = param[1]; return [0, result];}
             var error = param[1];
             return authorization_failure_result(error, cst_rpc);
            },
          response = caml_call2(Core_Result[27], query_contents$0, _aT_);
        }
        catch(exn){
         var
          exn$1 = caml_wrap_exception(exn),
          backtrace = caml_call1(Base_Backtrace[6][4], 0),
          _aR_ =
            [0,
             [1, [0, _A_, [0, caml_call1(Base_Backtrace[1], backtrace), 0]]],
             0],
          _aS_ =
            [0, [1, [0, _B_, [0, caml_call1(Core[625], exn$1), 0]]], _aR_],
          sexp =
            [1,
             [0,
              [1,
               [0,
                _C_,
                [0,
                 caml_call1
                  (Sexplib0_Sexp_conv[7], cst_server_side_blocking_rpc_c),
                 0]]],
              _aS_]];
         write_single_response
          (t, id, bin_response_writer, [1, [2, sexp]], rpc, error_mode$0);
         caml_call3
          (Async_rpc_kernel_On_exception[4],
           on_exception,
           close_connection_monitor,
           exn$1);
         break a;
        }
        write_single_response
         (t, id, bin_response_writer, response, rpc, error_mode$0);
       }
       return 0;
      case 3:
       var result_mode$0 = implementation[2], f$6 = implementation[1];
       emit_regular_query_tracing_eve(0);
       var
        responder =
          caml_call2(Async_rpc_kernel_Implementatio[1][1][2], query[3], t[2]),
        match$1 = on_exception[1];
       if(match$1)
        var callback = match$1[1], rest = [0, 747848894, callback];
       else
        var rest = 3804260;
       var
        _aU_ =
          function(param){
           var
            len = query[5],
            result =
              caml_call5
               (f$6,
                t[6],
                responder,
                read_buffer,
                read_buffer_pos_ref[1],
                len);
           return result_mode$0
                   ? result
                   : caml_call1(Async_kernel_Deferred[12], result);
          },
        d =
          caml_call7
           (Async_kernel_Monitor[16], 0, 0, 0, 0, _D_, [0, rest], _aU_),
        computation_failure_result =
          function(exn){
           return caml_call2
                   (Async_rpc_kernel_Rpc_result[1],
                    cst_server_side_rpc_expert_com,
                    exn);
          },
        handle_exn =
          function(result){
           if(responder[3])
            var result$0 = result;
           else{
            var
             _bE_ = query[2],
             _bF_ =
               [0,
                caml_call1(Async_rpc_kernel_Protocol[1][12], query[1]),
                _bE_];
            write_single_response(t, id, Core[608], result, _bF_, 0);
            var result$0 = _E_;
           }
           return result$0;
          },
        check_responded =
          function(param){
           if(! responder[3])
            return handle_exn
                    (computation_failure_result
                      ([0, Stdlib[7], cst_Expert_implementation_did_]));
           var _bD_ = query[2];
           write_event
            (t,
             [0,
              _F_,
              [0,
               [0,
                caml_call1(Async_rpc_kernel_Protocol[1][12], query[1]),
                _bD_]],
              id,
              0]);
           return _G_;
          },
        _aV_ =
          function(param){
           if(0 !== param[0]){
            var
             exn = param[1],
             result$0 = handle_exn(computation_failure_result(exn));
            caml_call3
             (Async_rpc_kernel_On_exception[4],
              on_exception,
              close_connection_monitor,
              exn);
            return result$0;
           }
           var match = param[1];
           if(0 !== match[0]){
            var error = match[1];
            return handle_exn
                    (authorization_failure_result(error, cst_rpc_expert));
           }
           var result = match[1];
           if(result)
            var d = result[1], d$0 = d;
           else
            var d$0 = Async_kernel_Deferred[18];
           if(caml_call1(Async_kernel_Deferred[7], d$0))
            return check_responded(0);
           function _bw_(param){
            var
             _bx_ = check_responded(0),
             _by_ = t[8],
             _bz_ = t[7],
             _bA_ = query[2],
             _bB_ =
               [0,
                caml_call1(Async_rpc_kernel_Protocol[1][12], query[1]),
                _bA_],
             _bC_ =
               caml_call4
                (Async_rpc_kernel_Rpc_result[5], _bB_, _bz_, _by_, _bx_);
            return caml_call1(Core[255], _bC_);
           }
           caml_call2(Async_kernel[12], d$0, _bw_);
           return _H_;
          },
        d$0 = caml_call2(Eager_deferred[12][4][3], d, _aV_),
        match$2 = caml_call1(Async_kernel_Deferred[5], d$0);
       if(match$2){
        var result$3 = match$2[1];
        return 0 === result$3[0] ? 0 : [0, result$3];
       }
       var
        _aW_ =
          function(r){
           var
            _br_ = t[8],
            _bs_ = t[7],
            _bt_ = query[2],
            _bu_ =
              [0,
               caml_call1(Async_rpc_kernel_Protocol[1][12], query[1]),
               _bt_],
            _bv_ =
              caml_call4(Async_rpc_kernel_Rpc_result[5], _bu_, _bs_, _br_, r);
           return caml_call1(Core[255], _bv_);
          };
       return [1, caml_call2(Async_kernel[23][3], d$0, _aW_)];
      case 4:
       var
        streaming_rpc = implementation[1],
        _aX_ = query[5],
        _aY_ =
          [0,
           function(param){
            if(typeof param === "number") return 0;
            var len = param[2];
            return len;
           }],
        stream_query =
          caml_call6
           (Async_rpc_kernel_Util[1],
            Async_rpc_kernel_Protocol[10][15],
            _aY_,
            read_buffer,
            read_buffer_pos_ref,
            _aX_,
            cst_server_side_pipe_rpc_strea);
       if(0 === stream_query[0]){
        var match$3 = stream_query[1];
        if(typeof match$3 === "number"){
         var _aZ_ = query[3], _a0_ = query[2];
         write_event
          (t,
           [0,
            _I_,
            [0,
             [0, caml_call1(Async_rpc_kernel_Protocol[1][12], query[1]), _a0_]],
            _aZ_,
            message_bytes_for_tracing]);
         var
          _a1_ =
            function(param){
             if(0 === param[0]){
              var pipe = param[1];
              return caml_call1(Async_kernel_Pipe[16], pipe);
             }
             var w = param[1];
             return close(w);
            },
          _a2_ = caml_call2(Core_Hashtbl[56], t[4], query[3]);
         caml_call2(Core_Option[46], _a2_, _a1_);
        }
        else{
         var len$1 = match$3[2];
         emit_regular_query_tracing_eve(0);
         var
          _a3_ = query[2],
          rpc$0 =
            [0, caml_call1(Async_rpc_kernel_Protocol[1][12], query[1]), _a3_],
          error_mode = streaming_rpc[5],
          impl = streaming_rpc[4],
          bin_update_writer = streaming_rpc[3],
          bin_init_writer = streaming_rpc[2],
          bin_query_reader = streaming_rpc[1],
          data =
            caml_call6
             (Async_rpc_kernel_Util[1],
              bin_query_reader,
              0,
              read_buffer,
              read_buffer_pos_ref,
              len$1,
              cst_streaming_rpc_server_side_),
          x = [1, [0, id, _p_]],
          len =
            caml_call4
             (Async_rpc_kernel_Protocol[13][3], bin_write_void, buffer, 0, x),
          header_prefix = caml_call3(Core_Bigstring[28][4], buffer, 0, len),
          stream_writer =
            [0,
             header_prefix,
             caml_call1(Async_rpc_kernel_Nat0[9], 0),
             bin_update_writer];
         if(0 === impl[0])
          var f = impl[1], impl_with_state = [0, 892411982, f];
         else{
          var
           f$2 = impl[1],
           _aH_ = caml_call1(Core_Bag[22], 0),
           _aI_ = caml_call1(Async_kernel_Ivar[12], 0),
           _aJ_ = [0, caml_call2(Core_Queue[66], 0, 0)],
           writer$0 =
             [0,
              caml_call1(Async_rpc_kernel_Implementatio$0[1][45], 0),
              _aJ_,
              _aI_,
              t,
              id,
              rpc$0,
              stream_writer,
              _aH_];
          caml_call3(Core_Hashtbl[37], t[4], id, [1, writer$0]);
          var impl_with_state = [0, -251740343, [0, f$2, writer$0]];
         }
         var
          run_impl =
            function(impl, split_ok, handle_ok, on_err){
             function _bn_(param){
              var err = caml_call2(symbol, data, impl);
              if(0 !== err[0]) return caml_call1(Async_kernel[20], err);
              var d = err[1], match = caml_call1(Async_kernel_Deferred[5], d);
              if(match){
               var d$0 = match[1];
               return caml_call1(Async_kernel[20], [0, d$0]);
              }
              function _bq_(x){return [0, x];}
              return caml_call2(Async_kernel[23][3], d, _bq_);
             }
             var
              result =
                caml_call4
                 (Async_rpc_kernel_Rpc_result[4],
                  on_exception[1],
                  0,
                  cst_server_side_pipe_rpc_compu,
                  _bn_);
             function _bo_(param){
              if(0 === param[0]){
               var match = param[1];
               if(0 !== match[0]){
                var error$0 = match[1];
                caml_call2(Core_Hashtbl[32], t[4], id);
                caml_call1(on_err, 0);
                return write_streaming_initial
                        (t,
                         id,
                         bin_init_writer,
                         authorization_failure_result(error$0, cst_pipe_rpc),
                         331861846,
                         rpc$0,
                         error_mode);
               }
               var match$0 = match[1];
               if(0 === match$0[0]){
                var
                 ok = match$0[1],
                 match$1 = caml_call1(split_ok, ok),
                 rest = match$1[2],
                 initial = match$1[1];
                write_streaming_initial
                 (t,
                  id,
                  bin_init_writer,
                  [0, initial],
                  -924437203,
                  rpc$0,
                  error_mode);
                return caml_call1(handle_ok, rest);
               }
               var error = match$0[1];
               caml_call2(Core_Hashtbl[32], t[4], id);
               caml_call1(on_err, 0);
               return write_streaming_initial
                       (t,
                        id,
                        bin_init_writer,
                        [0, error],
                        331861846,
                        rpc$0,
                        error_mode);
              }
              var err = param[1];
              if(typeof err !== "number" && 2 === err[0]){
               var sexp = err[1];
               caml_call2(Core_Hashtbl[32], t[4], id);
               caml_call1(on_err, 0);
               write_streaming_initial
                (t,
                 id,
                 bin_init_writer,
                 [1, err],
                 331861846,
                 rpc$0,
                 error_mode);
               var _bp_ = caml_call1(Base_Exn[5], sexp);
               return caml_call3
                       (Async_rpc_kernel_On_exception[4],
                        on_exception,
                        close_connection_monitor,
                        _bp_);
              }
              caml_call2(Core_Hashtbl[32], t[4], id);
              caml_call1(on_err, 0);
              return write_streaming_initial
                      (t,
                       id,
                       bin_init_writer,
                       [1, err],
                       331861846,
                       rpc$0,
                       error_mode);
             }
             return caml_call2(Eager_deferred[24], result, _bo_);
            };
         if(892411982 <= impl_with_state[1]){
          var
           f$0 = impl_with_state[2],
           _aB_ = function(_bj_){return _bj_;},
           _aC_ =
             function(pipe_r){
              caml_call3(Core_Hashtbl[37], t[4], id, [0, pipe_r]);
              function _bd_(data){
               var bin_writer_message = prep_write(stream_writer, data);
               return unsafe_write_message_for_cache
                       (t,
                        bin_writer_message,
                        [0, stream_writer, data],
                        id,
                        rpc$0,
                        6);
              }
              var
               _be_ =
                 caml_call3
                  (Async_rpc_kernel_Protocol_writ[17][4], t[2], pipe_r, _bd_);
              caml_call1(Async_kernel[6], _be_);
              function _bf_(param){
               function _bh_(param){
                write_streaming_eof
                 (t, id, Async_rpc_kernel_Protocol[12][19], _v_, rpc$0);
                return caml_call2(Core_Hashtbl[32], t[4], id);
               }
               var _bi_ = caml_call1(Async_kernel_Pipe[20], pipe_r);
               return caml_call2(Async_kernel[17], _bi_, _bh_);
              }
              var _bg_ = caml_call1(Async_kernel_Pipe[18], pipe_r);
              return caml_call2(Async_kernel[17], _bg_, _bf_);
             },
           _aD_ = function(_bc_){return _bc_;};
          run_impl
           (function(data){return caml_call2(f$0, t[6], data);},
            _aD_,
            _aC_,
            _aB_);
         }
         else{
          var
           match = impl_with_state[2],
           writer = match[2],
           f$1 = match[1],
           _aE_ = function(param){return close(writer);},
           _aF_ =
             function(param){
              var match = writer[2];
              if(! match)
               return caml_call1(Core[6], cst_attempted_to_start_writer_);
              var q = match[1];
              writer[2] = 0;
              function _bk_(param){
               switch(param[0]){
                 case 0:
                  var x = param[1]; return write_message(writer, x);
                 case 1:
                  var str = param[1], t = writer[7];
                  t[2] =
                   caml_call1
                    (Async_rpc_kernel_Nat0[9], caml_ml_string_length(str));
                  return unsafe_write_message_for_cache
                          (writer[4],
                           bin_writer_message_as_string,
                           [0, writer[7], str],
                           writer[5],
                           writer[6],
                           6);
                 default:
                  var
                   done = param[4],
                   len = param[3],
                   pos = param[2],
                   buf = param[1],
                   match = schedule_write_message_expert(writer, buf, pos, len);
                  if(typeof match === "number")
                   return caml_call2(Async_kernel_Ivar[14], done, 0);
                  var
                   match$0 = match[2],
                   _bm_ = caml_call1(Async_kernel_Ivar[14], done);
                  return caml_call2(Eager_deferred[24], match$0, _bm_);
               }
              }
              caml_call2(Core_Queue[18], q, _bk_);
              var _bl_ = caml_call1(Async_kernel_Ivar[18], writer[3]);
              return _bl_ ? write_eof(writer) : _bl_;
             },
           _aG_ = function(x){return [0, x, 0];};
          run_impl
           (function(data){return caml_call3(f$1, t[6], data, writer);},
            _aG_,
            _aF_,
            _aE_);
         }
        }
       }
       else{
        emit_regular_query_tracing_eve(0);
        var
         _a4_ = query[2],
         _a5_ =
           [0, caml_call1(Async_rpc_kernel_Protocol[1][12], query[1]), _a4_];
        write_streaming_initial
         (t,
          id,
          [0, Core_Nothing[14], Core_Nothing[15]],
          stream_query,
          331861846,
          _a5_,
          0);
       }
       return 0;
      default:
       var menu = implementation[1];
       emit_regular_query_tracing_eve(0);
       var
        query_contents$1 =
          caml_call6
           (Async_rpc_kernel_Util[1],
            Async_rpc_kernel_Menu[12][1][8],
            0,
            read_buffer,
            read_buffer_pos_ref,
            query[5],
            cst_server_side_rpc_query_un_b$0),
        error_mode$1 = 0;
       try{
        var
         _a8_ =
           function(param){
            function _a__(_bb_){return _bb_[1];}
            var
             _a$_ = caml_call1(Core[248], menu),
             _ba_ = caml_call2(Core_List[51], _a$_, _a__);
            return caml_call1(Async_rpc_kernel_Menu[12][1][19], _ba_);
           },
         _a9_ = caml_call2(Core_Result[46], query_contents$1, _a8_);
        write_single_response
         (t, id, Async_rpc_kernel_Menu[12][1][13], _a9_, rpc, error_mode$1);
       }
       catch(exn){
        var
         exn$2 = caml_wrap_exception(exn),
         backtrace$0 = caml_call1(Base_Backtrace[6][4], 0),
         _a6_ =
           [0,
            [1, [0, _J_, [0, caml_call1(Base_Backtrace[1], backtrace$0), 0]]],
            0],
         _a7_ = [0, [1, [0, _K_, [0, caml_call1(Core[625], exn$2), 0]]], _a6_],
         sexp$0 =
           [1,
            [0,
             [1,
              [0,
               _L_,
               [0,
                caml_call1
                 (Sexplib0_Sexp_conv[7], cst_server_side_blocking_rpc_c$0),
                0]]],
             _a7_]];
        write_single_response
         (t,
          id,
          Async_rpc_kernel_Menu[12][1][13],
          [1, [2, sexp$0]],
          rpc,
          error_mode$1);
        caml_call3
         (Async_rpc_kernel_On_exception[4],
          on_exception,
          close_connection_monitor,
          exn$2);
       }
       return 0;
    }
   }
   function flush(t){
    if(t[5]) throw caml_maybe_attach_backtrace([0, Assert_failure, _M_], 1);
    function _az_(param, data, acc){
     if(0 !== data[0]) return acc;
     var pipe = data[1], _aA_ = caml_call1(Async_kernel_Pipe[20], pipe);
     return [0, caml_call1(Async_kernel_Deferred[15], _aA_), acc];
    }
    var producers_flushed = caml_call3(Core_Hashtbl[18], t[4], 0, _az_);
    return caml_call1(Async_kernel_Deferred[22], producers_flushed);
   }
   function stop(param){
    param[5] = 1;
    function _ay_(param){
     if(0 === param[0]) return 0;
     var writer = param[1];
     return close_without_removing_from_in(writer);
    }
    caml_call2(Core_Hashtbl[20], param[4], _ay_);
    return caml_call1(Core_Hashtbl[16], param[4]);
   }
   function handle_query
   (t,
    query,
    read_buffer,
    read_buffer_pos_ref,
    close_connection_monitor,
    message_bytes_for_tracing){
    if(! t[5] && ! caml_call1(Async_rpc_kernel_Protocol_writ[16], t[2])){
     var
      old_ctx = caml_call1(Async_kernel_Async_kernel_sche[1], 0),
      _ak_ = query[4],
      _al_ = query[3],
      _am_ = query[2],
      _an_ = [0, caml_call1(Async_rpc_kernel_Protocol[1][12], query[1]), _am_],
      new_ctx = caml_call4(t[10], _an_, _al_, _ak_, old_ctx);
     caml_call1(Async_kernel_Async_kernel_sche[34][1], new_ctx);
     var
      _ao_ =
        function(param){
         return caml_call1(Async_kernel_Async_kernel_sche[34][1], old_ctx);
        },
      _ap_ =
        function(param){
         var
          match = t[1],
          on_unknown_rpc = match[2],
          implementations = match[1],
          _as_ = query[2],
          description =
            [0, caml_call1(Async_rpc_kernel_Protocol[1][12], query[1]), _as_],
          _at_ = t[9];
         if(_at_){
          var
           match$0 = _at_[1],
           implementation = match$0[2],
           last_desc = match$0[1];
          if
           (caml_call2
             (Async_rpc_kernel_Description[18], last_desc, description))
           return apply_implementation
                   (t,
                    implementation[3],
                    query,
                    read_buffer,
                    read_buffer_pos_ref,
                    close_connection_monitor,
                    implementation[5],
                    message_bytes_for_tracing);
         }
         var
          match$1 = caml_call2(Core_Hashtbl[56], implementations, description);
         if(match$1){
          var implementation$0 = match$1[1];
          t[9] = [0, [0, description, implementation$0]];
          return apply_implementation
                  (t,
                   implementation$0[3],
                   query,
                   read_buffer,
                   read_buffer_pos_ref,
                   close_connection_monitor,
                   implementation$0[5],
                   message_bytes_for_tracing);
         }
         var _au_ = query[3], _av_ = query[2];
         write_event
          (t,
           [0,
            _P_,
            [0,
             [0, caml_call1(Async_rpc_kernel_Protocol[1][12], query[1]), _av_]],
            _au_,
            message_bytes_for_tracing]);
         if
          (typeof on_unknown_rpc !== "number" && 747848894 > on_unknown_rpc[1]){
          var
           impl = on_unknown_rpc[2],
           len = query[5],
           metadata = query[4],
           id = query[3],
           version = query[2],
           tag = query[1],
           rpc_tag = caml_call1(Async_rpc_kernel_Protocol[1][12], tag),
           responder =
             caml_call2(Async_rpc_kernel_Implementatio[1][1][2], id, t[2]),
           d =
             caml_call8
              (impl,
               t[6],
               rpc_tag,
               version,
               metadata,
               responder,
               read_buffer,
               read_buffer_pos_ref[1],
               len);
          write_event(t, [0, _Q_, [0, [0, rpc_tag, version]], id, 0]);
          return caml_call1(Async_kernel_Deferred[7], d) ? 0 : [1, d];
         }
         var
          error = [3, query[1], [0, -901574920, query[2]]],
          _aw_ = query[2],
          _ax_ =
            [0, caml_call1(Async_rpc_kernel_Protocol[1][12], query[1]), _aw_];
         write_single_response
          (t,
           query[3],
           Async_rpc_kernel_Protocol[13][19],
           [1, error],
           _ax_,
           0);
         if(typeof on_unknown_rpc === "number")
          return -146189108 === on_unknown_rpc
                  ? caml_call2(Async_rpc_kernel_Rpc_error[34], error, t[7])
                  : 192584839 <= on_unknown_rpc ? 0 : _N_;
         var
          f = on_unknown_rpc[2],
          _aq_ = query[2],
          _ar_ = caml_call1(Async_rpc_kernel_Protocol[1][12], query[1]);
         return 192584839 <= caml_call3(f, t[6], _ar_, _aq_) ? 0 : _O_;
        };
     return caml_call2(Core[259], _ap_, _ao_);
    }
    return _R_;
   }
   function create(i_s, on_unknown_rpc){
    var
     implementations =
       caml_call3(Async_rpc_kernel_Description[37][5], 0, _S_, 0),
     dups = caml_call3(Async_rpc_kernel_Description[38][3], 0, _T_, 0);
    function _ai_(i){
     var
      _aj_ = i[2],
      description =
        [0, caml_call1(Async_rpc_kernel_Protocol[1][12], i[1]), _aj_];
     return 17724
             <= caml_call3(Core_Hashtbl[38], implementations, description, i)
             ? 0
             : caml_call2(Core_Hash_set[22], dups, description);
    }
    caml_call2(Core_List[19], i_s, _ai_);
    return caml_call1(Core_Hash_set[5], dups)
            ? [0, [0, implementations, on_unknown_rpc]]
            : [1, [0, -965860371, caml_call1(Core_Hash_set[16], dups)]];
   }
   function instantiate
   (t,
    connection_description,
    connection_close_started,
    connection_state,
    writer,
    events){
    function _ag_(param, _ah_, metadata, ctx){
     return caml_call2(Async_rpc_kernel_Rpc_metadata[3][1], metadata, ctx);
    }
    return [0,
            t,
            writer,
            events,
            caml_call3(Core_Hashtbl[88][14], 0, _U_, 0),
            0,
            connection_state,
            connection_description,
            connection_close_started,
            0,
            _ag_];
   }
   var
    Duplicate_implementations =
      [248, cst_Async_rpc_kernel_Implement, runtime.caml_fresh_oo_id(0)];
   function _V_(param){
    if(param[1] !== Duplicate_implementations)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _X_], 1);
    var
     arg0_042 = param[2],
     res0_043 =
       caml_call2(Core[472], Async_rpc_kernel_Description[10], arg0_042);
    return [1, [0, _W_, [0, res0_043, 0]]];
   }
   caml_call4(Sexplib0_Sexp_conv[72][1], 0, 0, Duplicate_implementations, _V_);
   function create_exn(implementations, on_unknown_rpc){
    var match = create(implementations, on_unknown_rpc);
    if(0 === match[0]){var x = match[1]; return x;}
    var dups = match[1][2];
    throw caml_maybe_attach_backtrace([0, Duplicate_implementations, dups], 0);
   }
   function null$0(param){return create_exn(0, -146189108);}
   function add_exn(t, implementation){
    var
     _af_ = implementation[2],
     desc =
       [0,
        caml_call1(Async_rpc_kernel_Protocol[1][12], implementation[1]),
        _af_],
     implementations = caml_call1(Core_Hashtbl[17], t[1]);
    if
     (17724
      <= caml_call3(Core_Hashtbl[38], implementations, desc, implementation))
     return [0, implementations, t[2]];
    throw caml_maybe_attach_backtrace
           ([0, Duplicate_implementations, [0, desc, 0]], 0);
   }
   function add(t, implementation){
    function _ae_(param){return add_exn(t, implementation);}
    return caml_call2(Core_Or_error[37], 0, _ae_);
   }
   function remove_exn(t, description){
    var
     implementations = caml_call1(Core_Hashtbl[17], t[1]),
     implementation =
       caml_call2(Core_Hashtbl[57], implementations, description);
    caml_call2(Core_Hashtbl[32], implementations, description);
    return [0, implementation, [0, implementations, t[2]]];
   }
   function find(t, description){
    return caml_call2(Core_Hashtbl[56], t[1], description);
   }
   function lift(param, f){
    var
     on_unknown_rpc = param[2],
     implementations = param[1],
     _aa_ = Async_rpc_kernel_Implementatio[7];
    function _ab_(_ad_){return caml_call2(_aa_, _ad_, f);}
    var
     implementations$0 = caml_call2(Core_Hashtbl[43], implementations, _ab_);
    if(typeof on_unknown_rpc === "number")
     var on_unknown_rpc$0 = on_unknown_rpc;
    else{
     if(747848894 <= on_unknown_rpc[1])
      var
       call = on_unknown_rpc[2],
       _ac_ =
         [0,
          747848894,
          function(state){return caml_call1(call, caml_call1(f, state));}];
     else
      var
       expert = on_unknown_rpc[2],
       _ac_ =
         [0,
          -116756726,
          function(state){return caml_call1(expert, caml_call1(f, state));}];
     var on_unknown_rpc$0 = _ac_;
    }
    return [0, implementations$0, on_unknown_rpc$0];
   }
   function cannot_send(r){
    function _$_(x_044){
     return caml_call2
             (Async_rpc_kernel_Transport_int[2][13], Core[620], x_044);
    }
    return caml_call5(Core[247], 0, _Y_, cst_Message_cannot_be_sent, r, _$_);
   }
   function mark_responded(t){
    if(t[3])
     caml_call5
      (Core[247],
       0,
       _Z_,
       cst_Already_responded,
       t,
       Async_rpc_kernel_Implementatio[1][1][1]);
    t[3] = 1;
    return;
   }
   function schedule(t, buf, pos, len){
    mark_responded(t);
    var
     x_045 =
       caml_call6
        (Async_rpc_kernel_Protocol_writ[8],
         t[2],
         t[1],
         buf,
         pos,
         len,
         Async_rpc_kernel_Transport[3][12]);
    if(typeof x_045 === "number") return 179911373;
    if(0 !== x_045[0])
     return cannot_send
             (caml_call2
               (Async_rpc_kernel_Transport_int[2][14], Core[617], x_045));
    var d = x_045[1];
    return [0, 933108739, d];
   }
   function handle_send_result$0(x_047){
    if(typeof x_047 !== "number" && 1 === x_047[0])
     return cannot_send
             (caml_call2
               (Async_rpc_kernel_Transport_int[2][14], Core[617], x_047));
    return;
   }
   function write_bigstring(t, buf, pos, len){
    mark_responded(t);
    handle_send_result$0
     (caml_call6
       (Async_rpc_kernel_Protocol_writ[8],
        t[2],
        t[1],
        buf,
        pos,
        len,
        Async_rpc_kernel_Transport[3][11]));
    return 0;
   }
   function write_error(t, error){
    mark_responded(t);
    var
     ___ = caml_call1(Core_Error[28], error),
     data =
       caml_call2
        (Async_rpc_kernel_Rpc_result[1], cst_server_side_raw_rpc_comput, ___);
    handle_send_result$0
     (caml_call3
       (Async_rpc_kernel_Protocol_writ[7],
        t[2],
        [0, t[1], data],
        Core_Nothing[19]));
    return 0;
   }
   function write_bin_prot(t, bin_writer_a, a){
    mark_responded(t);
    handle_send_result$0
     (caml_call3
       (Async_rpc_kernel_Protocol_writ[7],
        t[2],
        [0, t[1], [0, a]],
        bin_writer_a));
    return 0;
   }
   caml_call1(Ppx_inline_test_lib[7], cst_async_rpc_kernel);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_rpc_kernel_Implement$0);
   var
    Async_rpc_kernel_Implementatio$1 =
      [0,
       create,
       null$0,
       lift,
       [0,
        close,
        closed,
        is_closed,
        write,
        write_without_pushback,
        flushed,
        bin_writer,
        [0, write$0, write_without_pushback$0, schedule_write]],
       [0, sexp_of_t, handle_query, flush, stop, set_on_receive],
       instantiate,
       create_exn,
       add,
       add_exn,
       remove_exn,
       find,
       descriptions,
       descriptions_and_shapes,
       [0,
        [0, schedule, write_bigstring, write_bin_prot, write_error],
        create_exn]];
   runtime.caml_register_global
    (138, Async_rpc_kernel_Implementatio$1, cst_Async_rpc_kernel_Implement$1);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_rpc_kernel__Connection
//# unitInfo: Requires: Async_kernel, Async_kernel__Async_kernel_scheduler, Async_kernel__Async_stream, Async_kernel__Deferred, Async_kernel__Ivar, Async_kernel__Monitor, Async_kernel__Synchronous_time_source, Async_kernel__Time_source, Async_rpc_kernel__Implementations, Async_rpc_kernel__Menu, Async_rpc_kernel__Protocol, Async_rpc_kernel__Protocol_writer, Async_rpc_kernel__Rpc_error, Async_rpc_kernel__Rpc_shapes, Async_rpc_kernel__Transport, Async_rpc_kernel__Transport_intf, Base__Exn, Base__Staged, Base__Type_equal, Bin_prot__Common, Bin_prot__Shape, Bin_shape, Bus, Core, Core__Array, Core__Bigstring, Core__Byte_units, Core__Error, Core__Hashtbl, Core__Info, Core__Option, Core__Result, Core__Set_once, Core__Sexpable, Core__String, Core__Time_ns, Core__Time_ns_alternate_sexp, Eager_deferred, Expect_test_config, Inline_test_config, Moption, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_expect_runtime__Test_block, Ppx_expect_runtime__Test_node, Ppx_expect_runtime__Types, Ppx_inline_test_lib, Ppx_module_timer_runtime, Ppx_sexp_conv_lib, Protocol_version_header, Sexplib0__Sexp_conv, Sexplib0__Sexp_conv_error, Sexplib0__Sexp_conv_record
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_rpc_kernel_Connectio$1 = "Async_rpc_kernel__Connection",
    cst_Eof = "Eof",
    cst_Negotiated_unexpected_vers = "Negotiated_unexpected_version",
    cst_Negotiation_failed = "Negotiation_failed",
    cst_Reading_header_failed = "Reading_header_failed",
    cst_Timeout = "Timeout",
    cst_Transport_closed = "Transport_closed",
    cst_async_rpc_kernel$0 = "async_rpc_kernel",
    cst_description = "description",
    cst_eof = "eof",
    cst_negotiated_unexpected_vers = "negotiated_unexpected_version",
    cst_negotiation_failed = "negotiation_failed",
    cst_peer_menu$1 = "peer_menu",
    cst_reading_header_failed = "reading_header_failed",
    cst_send_every$1 = "send_every",
    cst_src_connection_ml$0 = "src/connection.ml",
    cst_src_connection_ml_Heartbea$0 = "src/connection.ml.Heartbeat_config.t",
    cst_t$1 = "t",
    cst_timeout$1 = "timeout",
    cst_transport_closed = "transport_closed",
    cst_writer = "writer",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_string_compare = runtime.caml_string_compare,
    caml_string_notequal = runtime.caml_string_notequal,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   function caml_call14
   (f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13){
    return (f.l >= 0 ? f.l : f.l = f.length) == 14
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13)
            : runtime.caml_call_gen
              (f,
               [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    msg = "Rpc message handling loop stopped",
    error_source_003 = "src/connection.ml.Handshake_error.T.t",
    error_source_039 = cst_src_connection_ml_Heartbea$0,
    Async_kernel_Async_kernel_sche =
      global_data.Async_kernel__Async_kernel_scheduler,
    Async_rpc_kernel_Implementatio =
      global_data.Async_rpc_kernel__Implementations,
    Core_Info = global_data.Core__Info,
    Async_kernel_Deferred = global_data.Async_kernel__Deferred,
    Async_kernel = global_data.Async_kernel,
    Async_kernel_Monitor = global_data.Async_kernel__Monitor,
    Async_rpc_kernel_Transport = global_data.Async_rpc_kernel__Transport,
    Bus = global_data.Bus,
    Async_rpc_kernel_Rpc_shapes = global_data.Async_rpc_kernel__Rpc_shapes,
    Async_rpc_kernel_Menu = global_data.Async_rpc_kernel__Menu,
    Core_Byte_units = global_data.Core__Byte_units,
    Async_kernel_Synchronous_time_ =
      global_data.Async_kernel__Synchronous_time_source,
    Core = global_data.Core,
    Async_rpc_kernel_Protocol = global_data.Async_rpc_kernel__Protocol,
    Core_Option = global_data.Core__Option,
    Core_Set_once = global_data.Core__Set_once,
    Moption = global_data.Moption,
    Core_Error = global_data.Core__Error,
    Async_kernel_Ivar = global_data.Async_kernel__Ivar,
    Core_Hashtbl = global_data.Core__Hashtbl,
    Async_rpc_kernel_Protocol_writ =
      global_data.Async_rpc_kernel__Protocol_writer,
    Async_kernel_Time_source = global_data.Async_kernel__Time_source,
    Assert_failure = global_data.Assert_failure,
    Async_rpc_kernel_Rpc_error = global_data.Async_rpc_kernel__Rpc_error,
    Base_Staged = global_data.Base__Staged,
    Base_Exn = global_data.Base__Exn,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Async_kernel_Async_stream = global_data.Async_kernel__Async_stream,
    Core_Bigstring = global_data.Core__Bigstring,
    Core_Time_ns = global_data.Core__Time_ns,
    Ppx_sexp_conv_lib = global_data.Ppx_sexp_conv_lib,
    Core_Time_ns_alternate_sexp = global_data.Core__Time_ns_alternate_sexp,
    Core_Array = global_data.Core__Array,
    Core_Result = global_data.Core__Result,
    Core_String = global_data.Core__String,
    Async_rpc_kernel_Transport_int =
      global_data.Async_rpc_kernel__Transport_intf,
    Eager_deferred = global_data.Eager_deferred,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Bin_shape = global_data.Bin_shape,
    Ppx_expect_runtime_Types = global_data.Ppx_expect_runtime__Types,
    Bin_prot_Common = global_data.Bin_prot__Common,
    Sexplib0_Sexp_conv_record = global_data.Sexplib0__Sexp_conv_record,
    Protocol_version_header = global_data.Protocol_version_header,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Core_Sexpable = global_data.Core__Sexpable,
    Expect_test_config = global_data.Expect_test_config,
    Ppx_expect_runtime_Test_block = global_data.Ppx_expect_runtime__Test_block,
    Ppx_expect_runtime_Test_node = global_data.Ppx_expect_runtime__Test_node,
    Inline_test_config = global_data.Inline_test_config,
    Base_Type_equal = global_data.Base__Type_equal;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_rpc_kernel_Connectio$1);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_rpc_kernel$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_connection_ml$0);
   caml_call2(Ppx_inline_test_lib[6], cst_async_rpc_kernel$0, "connection.ml");
   var
    cst_Rpc_Connection_close = "Rpc.Connection.close",
    cst_Rpc_Connection_with_close_ = "Rpc.Connection.with_close finished",
    _aO_ = [0, 3804260],
    _aP_ = [0, 523273847],
    cst_RPC_transport_stopped = "RPC transport stopped",
    cst_created_directly = "<created-directly>",
    _aN_ = [0, 0, 0],
    _aL_ = [0, cst_src_connection_ml$0, 950, 32343, 32353],
    _aM_ = [0, 10],
    cst_Handshake_timeout = "Handshake timeout",
    _aH_ = [1, 2],
    _aI_ = [1, 0],
    _aJ_ = [1, 1],
    cst_Reader_read_one_message_bi =
      "[Reader.read_one_message_bin_prot] raised",
    _aK_ = [1, 1],
    _aF_ = [0, 3804260],
    _aG_ = [0, 3903734],
    _aC_ = [1, 179911373],
    _aD_ = [0, cst_src_connection_ml$0, 815, 26722, 26761],
    _aE_ = [0, cst_src_connection_ml$0, 817, 26841, 26883],
    _az_ = [0, cst_src_connection_ml$0, 792, 4],
    _aB_ = [0, cst_src_connection_ml$0, 793, 4],
    _aA_ = [0, cst_src_connection_ml$0, 794, 4],
    cst_EOF_or_connection_closed = "EOF or connection closed",
    cst_exn_raised_in_RPC_connecti = "exn raised in RPC connection ",
    _ax_ = [0, "exn"],
    cst_Uncaught_exception_in_impl = "Uncaught exception in implementation",
    _av_ = [0, cst_src_connection_ml$0, 740, 23687, 23733],
    _aw_ = [0, "RPC close connection monitor"],
    _ay_ = [0, "RPC connection loop"],
    cst_Writer_t = "Writer.t",
    cst_loop = "loop",
    _au_ = [0, cst_src_connection_ml$0, 724, 23101, 23138],
    cst_No_heartbeats_received_for =
      "No heartbeats received for %{sexp:Time_ns.Span.t}.",
    _as_ = [12, 46, 0],
    _at_ = [0, 0],
    cst_No_heartbeats_received_for$0 = "No heartbeats received for ",
    cst_Connection_on_message_resu =
      "Connection.on_message resulted in Connection_closed error. This is weird.",
    cst_Inconsistent_state_receivi =
      "Inconsistent state: receiving a metadata message is unsupported, but a metadata message was received",
    _aq_ = [0, cst_src_connection_ml$0, 561, 17920, 17983],
    _ar_ = [0, cst_src_connection_ml$0, 552, 17598, 17661],
    _ap_ = [0, 0],
    _ai_ = [1, 0],
    _ah_ = [1, 0],
    cst_RPC_connection_got_closed_ = "RPC connection got closed writer",
    _ae_ = [0, cst_src_connection_ml$0, 303, 9496, 9516],
    _af_ = [0, "connection"],
    _ag_ = [0, "reason"],
    cst_Message_cannot_be_sent = "Message cannot be sent",
    _ac_ = [1, 0],
    _ad_ = [2, [0, 0]],
    _aa_ = [0, "Message_too_big"],
    _ab_ = [0, "Closed"],
    _$_ = [0, cst_src_connection_ml$0, 234, 7671, 7680],
    ___ = [1, -1025106484],
    _Y_ = [0, 0],
    _Z_ = [1, 0],
    cst_peer_menu$0 = cst_peer_menu$1,
    _X_ = [0, 0],
    cst_peer_menu = cst_peer_menu$1,
    cst_peer_identification = "peer_identification",
    _S_ = [0, "close_reason"],
    _T_ = [0, "connection_description"],
    _U_ = [0, "trying_to_get"],
    cst_Connection_closed_before_w =
      "Connection closed before we could get peer metadata",
    _V_ = [1, -18684779],
    _W_ = [1, -123976615],
    _Q_ = [0, cst_writer],
    _R_ = [0, cst_description],
    _x_ = [0, "my_menu"],
    _y_ = [0, "metadata_on_receive_to_add_to_implementations_instance"],
    _z_ = [0, "peer_metadata"],
    _A_ = [0, "metadata_for_dispatch"],
    _B_ = [0, "events"],
    _C_ = [0, "negotiated_protocol_version"],
    _D_ = [0, "heartbeat_event"],
    _E_ = [0, "time_source"],
    _F_ = [0, "implementations_instance"],
    _G_ = [0, "close_finished"],
    _H_ = [0, "close_started"],
    _I_ = [0, "open_queries"],
    _J_ = [0, cst_writer],
    _K_ = [0, "reader"],
    _L_ = [0, "max_metadata_size"],
    _M_ = [0, "last_seen_alive"],
    _N_ = [0, "heartbeat_callbacks"],
    _O_ = [0, "heartbeat_config"],
    _P_ = [0, cst_description],
    _v_ = [0, cst_send_every$1],
    _w_ = [0, cst_timeout$1],
    cst_src_connection_ml_Heartbea = cst_src_connection_ml_Heartbea$0,
    _p_ = [0, cst_send_every$1],
    _q_ = [0, cst_timeout$1],
    cst_send_every = cst_send_every$1,
    cst_timeout = cst_timeout$1,
    _m_ = [0, "Connection_closed"],
    _n_ = [0, "Expected"],
    _o_ = [0, "Unsupported"],
    _h_ = [0, "src/connection.ml.Handshake_error.Handshake_error"],
    _i_ = [0, "_none_", 0, -1],
    _a_ = [0, cst_Eof],
    _b_ = [0, cst_Transport_closed],
    _c_ = [0, cst_Timeout],
    _d_ = [0, cst_Reading_header_failed],
    _e_ = [0, cst_Negotiation_failed],
    _f_ = [0, cst_Negotiated_unexpected_vers],
    cst_Async_rpc_kernel_Connectio =
      "Async_rpc_kernel__Connection.Handshake_error.Handshake_error",
    _j_ = [0, 1, [0, 2, [0, 3, 0]]],
    _k_ = [0, 1, [0, 2, 0]],
    _l_ = [0, 1, 0],
    cst_send_every$0 = cst_send_every$1,
    cst_timeout$0 = cst_timeout$1,
    cst_t = cst_t$1,
    cst_src_connection_ml_62_2 = "src/connection.ml:62:2",
    cst_t$0 = cst_t$1,
    _aR_ =
      [0,
       [0,
        [0, " 74a1f475bfb2eed5a509ba71cd7891d2 ", [0, ""]],
        [0, 1715, 1728, 1766]]],
    _aS_ = [0, 1715, 1719, 1767],
    _aX_ = [0, 1657, 1659, 1767],
    _aY_ = [0, 1715, 1767, 1767],
    _aZ_ = [0, 1657, 1659, 1767],
    cst_src_connection_ml = cst_src_connection_ml$0,
    cst_async_rpc_handshake_header = "async rpc handshake header override",
    cst_async_rpc_kernel = cst_async_rpc_kernel$0,
    cst_Async_rpc_kernel_Connectio$0 = cst_Async_rpc_kernel_Connectio$1;
   function t_of_sexp(sexp_005){
    a:
    {
     if(0 === sexp_005[0]){
      var _d0_ = sexp_005[1], _d1_ = caml_string_compare(_d0_, cst_eof);
      b:
      {
       c:
       {
        d:
        {
         e:
         {
          f:
          {
           if(0 <= _d1_){
            if(0 < _d1_){
             if(! caml_string_notequal(_d0_, cst_negotiated_unexpected_vers))
              break f;
             if(! caml_string_notequal(_d0_, cst_negotiation_failed)) break e;
             if(! caml_string_notequal(_d0_, cst_reading_header_failed))
              break d;
             if(! caml_string_notequal(_d0_, cst_timeout$1)) break c;
             if(caml_string_notequal(_d0_, cst_transport_closed)) break a;
             break b;
            }
           }
           else if(caml_string_notequal(_d0_, cst_Eof)){
            if(! caml_string_notequal(_d0_, cst_Negotiated_unexpected_vers))
             break f;
            if(! caml_string_notequal(_d0_, cst_Negotiation_failed)) break e;
            if(! caml_string_notequal(_d0_, cst_Reading_header_failed))
             break d;
            if(! caml_string_notequal(_d0_, cst_Timeout)) break c;
            if(caml_string_notequal(_d0_, cst_Transport_closed)) break a;
            break b;
           }
           return 0;
          }
          return caml_call2
                  (Sexplib0_Sexp_conv_error[9], error_source_003, sexp_005);
         }
         return caml_call2
                 (Sexplib0_Sexp_conv_error[9], error_source_003, sexp_005);
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[9], error_source_003, sexp_005);
       }
       return 2;
      }
      return 1;
     }
     var _d2_ = sexp_005[1];
     if(! _d2_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_003, sexp_005);
     var _d3_ = _d2_[1];
     if(0 !== _d3_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_003, sexp_005);
     var tag_006 = _d3_[1], _d4_ = caml_string_compare(tag_006, cst_eof);
     b:
     {
      c:
      {
       d:
       {
        e:
        {
         f:
         {
          if(0 <= _d4_){
           if(0 < _d4_){
            if
             (! caml_string_notequal(tag_006, cst_negotiated_unexpected_vers))
             break f;
            if(! caml_string_notequal(tag_006, cst_negotiation_failed))
             break e;
            if(! caml_string_notequal(tag_006, cst_reading_header_failed))
             break d;
            if(! caml_string_notequal(tag_006, cst_timeout$1)) break c;
            if(caml_string_notequal(tag_006, cst_transport_closed)) break a;
            break b;
           }
          }
          else if(caml_string_notequal(tag_006, cst_Eof)){
           if(! caml_string_notequal(tag_006, cst_Negotiated_unexpected_vers))
            break f;
           if(! caml_string_notequal(tag_006, cst_Negotiation_failed))
            break e;
           if(! caml_string_notequal(tag_006, cst_Reading_header_failed))
            break d;
           if(! caml_string_notequal(tag_006, cst_Timeout)) break c;
           if(caml_string_notequal(tag_006, cst_Transport_closed)) break a;
           break b;
          }
          return caml_call2
                  (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
         }
         var sexp_args_017 = _d2_[2];
         if(sexp_args_017 && ! sexp_args_017[2]){
          var
           arg0_018 = sexp_args_017[1],
           res0_019 = caml_call1(Core[390], arg0_018);
          return [2, res0_019];
         }
         return caml_call3
                 (Sexplib0_Sexp_conv_error[8],
                  error_source_003,
                  tag_006,
                  sexp_005);
        }
        var sexp_args_012 = _d2_[2];
        if(sexp_args_012 && ! sexp_args_012[2]){
         var
          arg0_013 = sexp_args_012[1],
          res0_014 = caml_call1(Core_Error[8], arg0_013);
         return [1, res0_014];
        }
        return caml_call3
                (Sexplib0_Sexp_conv_error[8],
                 error_source_003,
                 tag_006,
                 sexp_005);
       }
       var sexp_args_007 = _d2_[2];
       if(sexp_args_007 && ! sexp_args_007[2]){
        var
         arg0_008 = sexp_args_007[1],
         res0_009 = caml_call1(Core_Error[8], arg0_008);
        return [0, res0_009];
       }
       return caml_call3
               (Sexplib0_Sexp_conv_error[8],
                error_source_003,
                tag_006,
                sexp_005);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_003, sexp_005);
   }
   function sexp_of_t(param){
    if(typeof param === "number")
     switch(param){case 0: return _a_;case 1: return _b_;default: return _c_;}
    switch(param[0]){
      case 0:
       var
        arg0_020 = param[1],
        res0_021 = caml_call1(Core_Error[9], arg0_020);
       return [1, [0, _d_, [0, res0_021, 0]]];
      case 1:
       var
        arg0_022 = param[1],
        res0_023 = caml_call1(Core_Error[9], arg0_022);
       return [1, [0, _e_, [0, res0_023, 0]]];
      default:
       var arg0_024 = param[1], res0_025 = caml_call1(Core[389], arg0_024);
       return [1, [0, _f_, [0, res0_025, 0]]];
    }
   }
   var T = [0, t_of_sexp, sexp_of_t], sexp_of_t$0 = T[2];
   caml_call1(Core_Sexpable[1], T);
   var
    Handshake_error =
      [248, cst_Async_rpc_kernel_Connectio, runtime.caml_fresh_oo_id(0)];
   function _g_(param){
    if(param[1] !== Handshake_error)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _i_], 1);
    var
     arg0_030 = param[2],
     arg1_027 = arg0_030[2],
     arg0_026 = arg0_030[1],
     res0_028 = caml_call1(sexp_of_t$0, arg0_026),
     res1_029 = caml_call1(Core_Info[9], arg1_027),
     res0_031 = [1, [0, res0_028, [0, res1_029, 0]]];
    return [1, [0, _h_, [0, res0_031, 0]]];
   }
   caml_call4(Sexplib0_Sexp_conv[72][1], 0, 0, Handshake_error, _g_);
   var
    bin_size_t = Protocol_version_header[1],
    bin_write_t = Protocol_version_header[2],
    bin_read_t = Protocol_version_header[3],
    bin_read_t$0 = Protocol_version_header[4],
    bin_shape_t = Protocol_version_header[5],
    bin_writer_t = Protocol_version_header[6],
    bin_reader_t = Protocol_version_header[7],
    bin_t = Protocol_version_header[8],
    sexp_of_t$1 = Protocol_version_header[10],
    negotiate = Protocol_version_header[12];
   function create(supported_versions){
    return caml_call4
            (Protocol_version_header[11], 0, 2, supported_versions, 0);
   }
   var
    default_handshake_header = create(_j_),
    v2 = create(_k_),
    v1 = create(_l_);
   function sexp_of_t$2(param){
    if(! param) return _o_;
    var arg0_036 = param[1];
    function _dX_(param){return _m_;}
    function _dY_(param){
     var
      arg1_033 = param[2],
      arg0_032 = param[1],
      res0_034 = caml_call2(Core[515], Core_Bigstring[6], arg0_032),
      res1_035 = caml_call2(Core[515], Async_rpc_kernel_Menu[1], arg1_033);
     return [1, [0, res0_034, [0, res1_035, 0]]];
    }
    var
     _dZ_ = caml_call2(Core_Result[15], _dY_, _dX_),
     res0_037 = caml_call2(Async_kernel_Ivar[9], _dZ_, arg0_036);
    return [1, [0, _n_, [0, res0_037, 0]]];
   }
   function t_of_sexp$0(x_040){
    function _dU_(param){
     var send_every = param[2][1], timeout = param[1];
     return [0, timeout, send_every];
    }
    var _dV_ = 0;
    function _dW_(param){
     return caml_string_notequal(param, cst_send_every$1)
             ? caml_string_notequal(param, cst_timeout$1) ? -1 : 0
             : 1;
    }
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_039,
             [0,
              cst_timeout,
              1,
              Core_Time_ns[1][9],
              [0, cst_send_every, 1, Core_Time_ns[1][9], 0]],
             _dW_,
             _dV_,
             _dU_,
             x_040);
   }
   function sexp_of_t$3(param){
    var
     send_every_044 = param[2],
     timeout_042 = param[1],
     arg_045 = caml_call1(Core_Time_ns[1][10], send_every_044),
     bnds_041 = [0, [1, [0, _p_, [0, arg_045, 0]]], 0],
     arg_043 = caml_call1(Core_Time_ns[1][10], timeout_042),
     bnds_041$0 = [0, [1, [0, _q_, [0, arg_043, 0]]], bnds_041];
    return [1, bnds_041$0];
   }
   var
    _r_ =
      caml_call1
       (Bin_prot_Shape[4],
        [0,
         [0, cst_timeout$0, Core_Time_ns[1][5]],
         [0, [0, cst_send_every$0, Core_Time_ns[1][5]], 0]]),
    _s_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t), 0, _r_], 0],
    _t_ = caml_call1(Bin_shape[4][1], cst_src_connection_ml_62_2),
    group = caml_call2(Bin_prot_Shape[2], _t_, _s_),
    _u_ = caml_call1(Bin_shape[2][1], cst_t$0),
    bin_shape_t$0 = caml_call1(caml_call2(Bin_prot_Shape[10], group, _u_), 0);
   function bin_size_t$0(param){
    var
     v2 = param[2],
     v1 = param[1],
     _dS_ = caml_call1(Core_Time_ns[1][1], v1),
     size = caml_call2(Bin_prot_Common[23], 0, _dS_),
     _dT_ = caml_call1(Core_Time_ns[1][1], v2);
    return caml_call2(Bin_prot_Common[23], size, _dT_);
   }
   function bin_write_t$0(buf, pos, param){
    var
     v2 = param[2],
     v1 = param[1],
     pos$0 = caml_call3(Core_Time_ns[1][2], buf, pos, v1);
    return caml_call3(Core_Time_ns[1][2], buf, pos$0, v2);
   }
   var bin_writer_t$0 = [0, bin_size_t$0, bin_write_t$0];
   function bin_read_t$1(buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19], cst_src_connection_ml_Heartbea, pos_ref[1]);
   }
   function bin_read_t$2(buf, pos_ref){
    var
     v_timeout = caml_call2(Core_Time_ns[1][3], buf, pos_ref),
     v_send_every = caml_call2(Core_Time_ns[1][3], buf, pos_ref);
    return [0, v_timeout, v_send_every];
   }
   var
    bin_reader_t$0 = [0, bin_read_t$2, bin_read_t$1],
    bin_t$0 = [0, bin_shape_t$0, bin_writer_t$0, bin_reader_t$0];
   function send_every(r){return r[2];}
   function timeout(r){return r[1];}
   if(typeof Ppx_inline_test_lib[3] !== "number"){
    var
     Ppx_expect_test_block =
       caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
     _aQ_ =
       function(param){
        var
         _dP_ = caml_call1(Bin_prot_Shape[15], bin_shape_t$0),
         _dQ_ = caml_call1(Bin_shape[19][4], _dP_);
        caml_call1(Core[32], _dQ_);
        var _dR_ = caml_call1(Ppx_expect_runtime_Types[4][1], 0);
        return caml_call1(Ppx_expect_test_block[2], _dR_);
       },
     _aT_ =
       caml_call3
        (Ppx_expect_runtime_Test_node[1][1],
         [0, Ppx_expect_runtime_Types[1][1]],
         _aS_,
         _aR_),
     _aU_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 0), _aT_], 0],
     _aV_ = caml_call1(Ppx_expect_runtime_Types[4][1], 2),
     _aW_ = caml_call1(Ppx_expect_runtime_Types[4][1], 1);
    caml_call14
     (Ppx_expect_test_block[3],
      cst_src_connection_ml,
      68,
      _aZ_,
      _aY_,
      _aX_,
      [0, Ppx_expect_runtime_Types[1][1]],
      0,
      _aW_,
      _aV_,
      0,
      0,
      Inline_test_config,
      _aU_,
      _aQ_);
   }
   function create$0(opt, _dO_, param){
    if(opt)
     var sth = opt[1], timeout = sth;
    else
     var timeout = caml_call1(Core_Time_ns[1][82], 30.);
    if(_dO_)
     var sth$0 = _dO_[1], send_every = sth$0;
    else
     var send_every = caml_call1(Core_Time_ns[1][82], 10.);
    return [0, timeout, send_every];
   }
   function sexp_of_t$4(param){
    var
     heartbeat_config_054 = param[2],
     description_052 = param[1],
     heartbeat_callbacks_056 = param[3],
     last_seen_alive_058 = param[4],
     my_menu_088 = param[19],
     metadata_on_receive_to_add_to_ = param[18],
     peer_metadata_084 = param[17],
     metadata_for_dispatch_082 = param[16],
     events_080 = param[15],
     negotiated_protocol_version_07 = param[14],
     heartbeat_event_076 = param[13],
     time_source_074 = param[12],
     implementations_instance_072 = param[11],
     close_finished_070 = param[10],
     close_started_068 = param[9],
     open_queries_066 = param[8],
     writer_064 = param[7],
     reader_062 = param[6],
     max_metadata_size_060 = param[5],
     arg_089 = caml_call2(Core[515], Async_rpc_kernel_Menu[1], my_menu_088),
     bnds_051 = [0, [1, [0, _x_, [0, arg_089, 0]]], 0];
    function _dC_(param){
     function _dM_(_dN_){return 0;}
     return caml_call1(Sexplib0_Sexp_conv[24], _dM_);
    }
    var
     arg_087 =
       caml_call2(Core_Set_once[3], _dC_, metadata_on_receive_to_add_to_),
     bnds_051$0 = [0, [1, [0, _y_, [0, arg_087, 0]]], bnds_051],
     arg_085 = caml_call2(Core_Set_once[3], sexp_of_t$2, peer_metadata_084),
     bnds_051$1 = [0, [1, [0, _z_, [0, arg_085, 0]]], bnds_051$0];
    function _dD_(param){
     function _dK_(_dL_){return 0;}
     return caml_call1(Sexplib0_Sexp_conv[24], _dK_);
    }
    var
     arg_083 = caml_call2(Moption[10], _dD_, metadata_for_dispatch_082),
     bnds_051$2 = [0, [1, [0, _A_, [0, arg_083, 0]]], bnds_051$1];
    function _dE_(param){
     function _dI_(_dJ_){return 0;}
     return caml_call1(Sexplib0_Sexp_conv[24], _dI_);
    }
    var
     arg_081 = caml_call2(Bus[3][1], _dE_, events_080),
     bnds_051$3 = [0, [1, [0, _B_, [0, arg_081, 0]]], bnds_051$2],
     arg_079 =
       caml_call2(Core_Set_once[3], Core[389], negotiated_protocol_version_07),
     bnds_051$4 = [0, [1, [0, _C_, [0, arg_079, 0]]], bnds_051$3],
     arg_077 =
       caml_call2
        (Core_Set_once[3],
         Async_kernel_Synchronous_time_[19][1],
         heartbeat_event_076),
     bnds_051$5 = [0, [1, [0, _D_, [0, arg_077, 0]]], bnds_051$4],
     arg_075 = caml_call1(Async_kernel_Synchronous_time_[4], time_source_074),
     bnds_051$6 = [0, [1, [0, _E_, [0, arg_075, 0]]], bnds_051$5],
     arg_073 =
       caml_call2
        (Core_Set_once[3],
         Async_rpc_kernel_Implementatio[5][1],
         implementations_instance_072),
     bnds_051$7 = [0, [1, [0, _F_, [0, arg_073, 0]]], bnds_051$6],
     arg_071 = caml_call2(Async_kernel_Ivar[9], Core[620], close_finished_070),
     bnds_051$8 = [0, [1, [0, _G_, [0, arg_071, 0]]], bnds_051$7],
     arg_069 =
       caml_call2(Async_kernel_Ivar[9], Core_Info[9], close_started_068),
     bnds_051$9 = [0, [1, [0, _H_, [0, arg_069, 0]]], bnds_051$8],
     arg_067 =
       caml_call3
        (Core_Hashtbl[3],
         Async_rpc_kernel_Protocol[2][10],
         Sexplib0_Sexp_conv[23],
         open_queries_066),
     bnds_051$10 = [0, [1, [0, _I_, [0, arg_067, 0]]], bnds_051$9],
     arg_065 = caml_call1(Async_rpc_kernel_Protocol_writ[1], writer_064),
     bnds_051$11 = [0, [1, [0, _J_, [0, arg_065, 0]]], bnds_051$10],
     arg_063 = caml_call1(Async_rpc_kernel_Transport[2][1], reader_062),
     bnds_051$12 = [0, [1, [0, _K_, [0, arg_063, 0]]], bnds_051$11],
     arg_061 = caml_call1(Core_Byte_units[1], max_metadata_size_060),
     bnds_051$13 = [0, [1, [0, _L_, [0, arg_061, 0]]], bnds_051$12],
     arg_059 =
       caml_call1(Core_Time_ns_alternate_sexp[98], last_seen_alive_058),
     bnds_051$14 = [0, [1, [0, _M_, [0, arg_059, 0]]], bnds_051$13];
    function _dF_(param){
     function _dG_(_dH_){return 0;}
     return caml_call1(Sexplib0_Sexp_conv[24], _dG_);
    }
    var
     arg_057 = caml_call2(Core[301], _dF_, heartbeat_callbacks_056),
     bnds_051$15 = [0, [1, [0, _N_, [0, arg_057, 0]]], bnds_051$14],
     timeout_047 = heartbeat_config_054[1],
     send_every_049 = heartbeat_config_054[2],
     arg_050 = caml_call1(Core_Time_ns[1][10], send_every_049),
     bnds_046 = [0, [1, [0, _v_, [0, arg_050, 0]]], 0],
     arg_048 = caml_call1(Core_Time_ns[1][10], timeout_047),
     bnds_046$0 = [0, [1, [0, _w_, [0, arg_048, 0]]], bnds_046],
     arg_055 = [1, bnds_046$0],
     bnds_051$16 = [0, [1, [0, _O_, [0, arg_055, 0]]], bnds_051$15],
     arg_053 = caml_call1(Core_Info[9], description_052),
     bnds_051$17 = [0, [1, [0, _P_, [0, arg_053, 0]]], bnds_051$16];
    return [1, bnds_051$17];
   }
   function sexp_of_t_hum_writer(t){
    var
     _dB_ =
       [0,
        [1,
         [0, _Q_, [0, caml_call1(Async_rpc_kernel_Protocol_writ[2], t[7]), 0]]],
        0];
    return [1,
            [0, [1, [0, _R_, [0, caml_call1(Core_Info[9], t[1]), 0]]], _dB_]];
   }
   function description(t){return t[1];}
   function is_closed(t){return caml_call1(Async_kernel_Ivar[18], t[9]);}
   function map_metadata(t, kind_of_metadata, f){
    var match = caml_call1(Core_Set_once[9], t[17]);
    if(! match) return caml_call1(f, _W_);
    var match$0 = match[1];
    if(! match$0) return caml_call1(f, _V_);
    var result = match$0[1];
    function _dw_(param){
     if(0 !== param[0])
      return caml_call1
              (f,
               [1,
                [0,
                 -1025106484,
                 [246,
                  function(param){
                   var
                    x_090 = caml_call1(Async_kernel_Ivar[20], t[9]),
                    _dy_ =
                      [0,
                       [1,
                        [0, _S_, [0, caml_call2(Core[515], Core_Info[9], x_090), 0]]],
                       0],
                    _dz_ =
                      [0,
                       [1, [0, _T_, [0, caml_call1(Core_Info[9], t[1]), 0]]],
                       _dy_],
                    _dA_ =
                      [0,
                       [1,
                        [0,
                         _U_,
                         [0, caml_call1(Sexplib0_Sexp_conv[7], kind_of_metadata), 0]]],
                       _dz_];
                   return [1,
                           [0,
                            caml_call1
                             (Sexplib0_Sexp_conv[7], cst_Connection_closed_before_w),
                            _dA_]];
                  }]]]);
     var md = param[1];
     return caml_call1(f, [0, md]);
    }
    var _dx_ = caml_call1(Async_kernel_Ivar[19], result);
    return caml_call2(Eager_deferred[12][4][2], _dx_, _dw_);
   }
   function peer_identification(t){
    return map_metadata
            (t,
             cst_peer_identification,
             function(param){
              if(0 !== param[0]) return caml_call1(Async_kernel[20], 0);
              var id = param[1][1];
              return caml_call1(Async_kernel[20], id);
             });
   }
   function peer_menu(t){
    return map_metadata
            (t,
             cst_peer_menu,
             function(param){
              if(0 === param[0]){
               var menu = param[1][2];
               return caml_call1(Async_kernel[20], [0, menu]);
              }
              var match = param[1];
              if(typeof match === "number")
               return caml_call1(Async_kernel[20], _X_);
              var
               info = match[2],
               _dv_ = [1, caml_call1(Core_Error[16], info)];
              return caml_call1(Async_kernel[20], _dv_);
             });
   }
   function peer_menu$0(t){
    return map_metadata
            (t,
             cst_peer_menu$0,
             function(param){
              if(0 !== param[0])
               return typeof param[1] === "number"
                       ? caml_call1(Async_kernel[20], _Y_)
                       : caml_call1(Async_kernel[20], _Z_);
              var menu = param[1][2];
              return caml_call1(Async_kernel[20], [0, menu]);
             });
   }
   function my_menu(t){return t[19];}
   function writer(t){
    if(! is_closed(t) && caml_call1(Async_rpc_kernel_Protocol_writ[10], t[7]))
     return [0, t[7]];
    return ___;
   }
   function bytes_to_write(t){
    return caml_call1(Async_rpc_kernel_Protocol_writ[11], t[7]);
   }
   function bytes_written(t){
    return caml_call1(Async_rpc_kernel_Protocol_writ[12], t[7]);
   }
   function bytes_read(t){
    return caml_call1(Async_rpc_kernel_Transport[2][4], t[6]);
   }
   function flushed(t){
    return caml_call1(Async_rpc_kernel_Protocol_writ[13], t[7]);
   }
   function events(t){return t[15];}
   function have_metadata_hooks_been_set(t){return caml_call1(Moption[15], t[16]);
   }
   function set_metadata_hooks(t, when_sending, on_receive){
    if(have_metadata_hooks_been_set(t)) return 3980315;
    caml_call2(Moption[21], t[16], when_sending);
    var match = caml_call1(Core_Set_once[9], t[11]);
    if(match){
     var instance = match[1];
     caml_call2(Async_rpc_kernel_Implementatio[5][5], instance, on_receive);
    }
    else
     caml_call3(Core_Set_once[7], t[18], _$_, on_receive);
    return 17724;
   }
   function write_event(t, event){
    var _du_ = 1 - caml_call1(Bus[10], t[15]);
    return _du_ ? caml_call2(Bus[13], t[15], event) : _du_;
   }
   function compute_metadata(t, description, query_id){
    return caml_call1(Moption[15], t[16])
            ? caml_call2
              (caml_call1(Moption[18], t[16]), description, query_id)
            : 0;
   }
   function sexp_of_t$5(param){
    if(! param) return _ab_;
    var
     arg0_091 = param[1],
     res0_092 = caml_call1(Async_rpc_kernel_Transport_int[2][12], arg0_091);
    return [1, [0, _aa_, [0, res0_092, 0]]];
   }
   var Dispatch_error = [0, sexp_of_t$5];
   function handle_special_send_result(t, result){
    if(typeof result === "number")
     return caml_call5
             (Core[247],
              0,
              _ae_,
              cst_RPC_connection_got_closed_,
              t,
              sexp_of_t_hum_writer);
    if(0 === result[0]) return;
    var
     _dr_ = [0, [1, [0, _af_, [0, sexp_of_t_hum_writer(t), 0]]], 0],
     x_094 =
       caml_call2(Async_rpc_kernel_Transport_int[2][14], Core[617], result),
     _ds_ =
       [0,
        [1,
         [0,
          [1,
           [0,
            _ag_,
            [0,
             caml_call2
              (Async_rpc_kernel_Transport_int[2][13], Core[620], x_094),
             0]]],
          _dr_]],
        0],
     _dt_ =
       [1,
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_Message_cannot_be_sent),
         _ds_]];
    return caml_call1(Core[261], _dt_);
   }
   function send_query_with_registered_res
   (t, query, response_handler, kind, send_query){
    if(response_handler){
     var response_handler$0 = response_handler[1];
     caml_call3(Core_Hashtbl[37], t[8], query[3], response_handler$0);
     var registered_response_handler = 1;
    }
    else
     var registered_response_handler = 0;
    var
     sending_one_way_rpc = caml_call1(Core_Option[61], response_handler),
     id = query[3],
     _dp_ = query[2],
     rpc = [0, caml_call1(Async_rpc_kernel_Protocol[1][12], query[1]), _dp_],
     r = caml_call1(send_query, query);
    if(typeof r === "number"){
     write_event(t, [0, [1, kind, 0], [0, rpc], id, 0]);
     var result = _ac_;
    }
    else if(0 === r[0]){
     var bytes = r[2], x = r[1], ev = [0, [0, kind], [0, rpc], id, bytes];
     write_event(t, ev);
     if(sending_one_way_rpc) write_event(t, [0, _ad_, ev[2], ev[3], ev[4]]);
     var result = [0, x];
    }
    else{
     var err = r[1];
     write_event(t, [0, [1, kind, 1], [0, rpc], id, err[1]]);
     var
      result =
        [1, [0, caml_call1(Async_rpc_kernel_Transport_int[2][10], err)]];
    }
    var
     _dq_ =
       registered_response_handler
        ? caml_call1(Core_Result[38], result)
        : registered_response_handler;
    if(_dq_) caml_call2(Core_Hashtbl[32], t[8], query[3]);
    return result;
   }
   function dispatch(t, kind, response_handler, bin_writer_query, query){
    var match = writer(t);
    if(0 !== match[0]) return _ah_;
    var writer$0 = match[1], match$0 = query[4];
    if(match$0)
     var
      metadata = match$0[1],
      _dm_ = query[5],
      _dn_ = caml_call1(Core_Byte_units[53], t[5]),
      _do_ = [0, caml_call2(Core_String[97], metadata, _dn_)],
      query$0 = [0, query[1], query[2], query[3], _do_, _dm_];
    else
     var query$0 = query;
    return send_query_with_registered_res
            (t,
             query$0,
             response_handler,
             kind,
             function(query){
              return caml_call3
                      (Async_rpc_kernel_Protocol_writ[5],
                       writer$0,
                       query,
                       bin_writer_query);
             });
   }
   function make_dispatch_bigstring
   (do_send,
    compute_metadata,
    t,
    tag,
    version,
    metadata,
    buf,
    pos,
    len,
    response_handler){
    var match = writer(t);
    if(0 !== match[0]) return _ai_;
    var
     writer$0 = match[1],
     id = caml_call1(Async_rpc_kernel_Protocol[2][45], 0),
     metadata$0 = caml_call5(compute_metadata, t, tag, version, id, metadata),
     query = [0, tag, version, id, metadata$0, 0];
    return send_query_with_registered_res
            (t,
             query,
             response_handler,
             0,
             function(query){
              return caml_call6
                      (Async_rpc_kernel_Protocol_writ[6],
                       writer$0,
                       query,
                       buf,
                       pos,
                       len,
                       do_send);
             });
   }
   function _aj_(t, tag, version, id, param){
    return compute_metadata
            (t,
             [0, caml_call1(Async_rpc_kernel_Protocol[1][12], tag), version],
             id);
   }
   var _ak_ = Async_rpc_kernel_Transport[3][11];
   function dispatch_bigstring(_de_, _df_, _dg_, _dh_, _di_, _dj_, _dk_, _dl_){
    return make_dispatch_bigstring
            (_ak_, _aj_, _de_, _df_, _dg_, _dh_, _di_, _dj_, _dk_, _dl_);
   }
   function _al_(t, tag, version, id, param){
    return compute_metadata
            (t,
             [0, caml_call1(Async_rpc_kernel_Protocol[1][12], tag), version],
             id);
   }
   var _am_ = Async_rpc_kernel_Transport[3][12];
   function schedule_dispatch_bigstring
   (_c8_, _c9_, _c__, _c$_, _da_, _db_, _dc_, _dd_){
    return make_dispatch_bigstring
            (_am_, _al_, _c8_, _c9_, _c__, _c$_, _da_, _db_, _dc_, _dd_);
   }
   function _an_(param, _c7_, _c6_, _c5_, metadata){return metadata;}
   var _ao_ = Async_rpc_kernel_Transport[3][12];
   function schedule_dispatch_bigstring_wi
   (_cX_, _cY_, _cZ_, _c0_, _c1_, _c2_, _c3_, _c4_){
    return make_dispatch_bigstring
            (_ao_, _an_, _cX_, _cY_, _cZ_, _c0_, _c1_, _c2_, _c3_, _c4_);
   }
   function close_reason(t, on_close){
    var reason = caml_call1(Async_kernel_Ivar[19], t[9]);
    if(890972481 <= on_close) return reason;
    function _cV_(param){return reason;}
    var _cW_ = caml_call1(Async_kernel_Ivar[19], t[10]);
    return caml_call2(Async_kernel[23][2], _cW_, _cV_);
   }
   function close_finished(t){
    return caml_call1(Async_kernel_Ivar[19], t[10]);
   }
   function add_heartbeat_callback(t, f){
    t[3] = caml_call2(Core_Array[26], [0, f], t[3]);
    return 0;
   }
   function reset_heartbeat_timeout(t, timeout){
    t[2][1] = timeout;
    t[4] = caml_call1(Async_kernel_Synchronous_time_[12], t[12]);
    return 0;
   }
   function last_seen_alive(t){return t[4];}
   function close(opt, reason, t){
    if(opt)
     var sth = opt[1], streaming_responses_flush_time = sth;
    else
     var streaming_responses_flush_time = caml_call1(Core_Time_ns[1][93], 5);
    if(1 - is_closed(t)){
     var
      _cJ_ =
        function(event){
         caml_call2(Async_kernel_Synchronous_time_[19][8], t[12], event);
         return 0;
        },
      _cK_ = caml_call1(Core_Set_once[9], t[13]);
     caml_call2(Core_Option[46], _cK_, _cJ_);
     caml_call2(Async_kernel_Ivar[14], t[9], reason);
     var
      _cL_ =
        function(param){
         function _cR_(param){
          function _cT_(param){
           return caml_call2(Async_kernel_Ivar[14], t[10], 0);
          }
          var _cU_ = caml_call1(Async_rpc_kernel_Transport[2][2], t[6]);
          return caml_call2(Async_kernel[17], _cU_, _cT_);
         }
         var _cS_ = caml_call1(Async_rpc_kernel_Protocol_writ[15], t[7]);
         return caml_call2(Async_kernel[17], _cS_, _cR_);
        },
      match = caml_call1(Core_Set_once[9], t[11]);
     if(match){
      var
       instance = match[1],
       flushed = caml_call1(Async_rpc_kernel_Implementatio[5][3], instance);
      if(caml_call1(Async_kernel_Deferred[7], flushed)){
       caml_call1(Async_rpc_kernel_Implementatio[5][4], instance);
       var flushed$0 = flushed;
      }
      else
       var
        _cM_ =
          function(param){
           return caml_call1(Async_rpc_kernel_Implementatio[5][4], instance);
          },
        _cN_ = caml_call1(Async_kernel_Time_source[40], t[12]),
        _cO_ =
          [0,
           caml_call2
            (Async_kernel_Time_source[29],
             _cN_,
             streaming_responses_flush_time),
           0],
        _cP_ =
          [0,
           flushed,
           [0, caml_call1(Async_rpc_kernel_Protocol_writ[14], t[7]), _cO_]],
        _cQ_ = caml_call1(Async_kernel_Deferred[24], _cP_),
        flushed$0 = caml_call2(Async_kernel[23][3], _cQ_, _cM_);
      var flushed$1 = flushed$0;
     }
     else
      var flushed$1 = Async_kernel_Deferred[18];
     caml_call2(Async_kernel[17], flushed$1, _cL_);
    }
    return close_finished(t);
   }
   var default_handshake_timeout = caml_call1(Core_Time_ns[1][82], 30.);
   function cleanup(t, reason, exn){
    var _cF_ = close(0, reason, t);
    caml_call1(Async_kernel[6], _cF_);
    var _cG_ = 1 - caml_call1(Core_Hashtbl[30], t[8]);
    if(_cG_){
     if(exn[1] === Async_rpc_kernel_Rpc_error[33])
      var error = exn[2], error$0 = error;
     else
      var error$0 = [2, caml_call1(Base_Exn[1], exn)];
     var
      dummy_buffer = caml_call1(Core_Bigstring[121], 1),
      dummy_ref = [0, 0],
      _cH_ =
        function(query_id, response_handler){
         caml_call3
          (response_handler,
           [0, query_id, [1, error$0]],
           dummy_buffer,
           dummy_ref);
         return 0;
        };
     caml_call2(Core_Hashtbl[21], t[8], _cH_);
     caml_call1(Core_Hashtbl[16], t[8]);
     var _cI_ = runtime.bigstring_destroy_stub(dummy_buffer);
    }
    else
     var _cI_ = _cG_;
    return _cI_;
   }
   function negotiate$0(t, identification, header, peer, writer, menu, param){
    var match = caml_call3(negotiate, 1, header, peer);
    if(0 === match[0])
     var i = match[1], negotiate_result = [0, i];
    else
     var e = match[1], negotiate_result = [1, [1, e]];
    if(0 !== negotiate_result[0]) return negotiate_result;
    var version = negotiate_result[1];
    if(caml_call2(Core[88], version, 3)){
     var
      ivar = caml_call1(Async_kernel_Ivar[12], 0),
      _cD_ =
        function(param){return caml_call2(Async_kernel_Ivar[16], ivar, _aC_);},
      _cE_ = caml_call1(Async_kernel_Ivar[19], t[9]);
     caml_call2(Async_kernel[12], _cE_, _cD_);
     caml_call3(Core_Set_once[7], t[17], _aD_, [0, ivar]);
     var
      _cC_ =
        caml_call1
         (Async_rpc_kernel_Protocol[13][4],
          Async_rpc_kernel_Protocol[6][1][8][2]);
     handle_special_send_result
      (t,
       caml_call3
        (Async_rpc_kernel_Transport[3][10],
         writer,
         _cC_,
         [3, [0, identification, menu]]));
    }
    else
     caml_call3(Core_Set_once[7], t[17], _aE_, 0);
    return negotiate_result;
   }
   var
    contains_magic_prefix = caml_call1(Protocol_version_header[13], 2),
    handshake_header_override_key =
      caml_call2
       (Base_Type_equal[12][4], cst_async_rpc_handshake_header, sexp_of_t$1);
   function create$1
   (implementations,
    protocol_version_headers,
    connection_state,
    opt,
    _bi_,
    _bh_,
    _bg_,
    _bf_,
    identification,
    param){
    if(opt)
     var sth = opt[1], handshake_timeout = sth;
    else
     var handshake_timeout = default_handshake_timeout;
    if(_bi_)
     var sth$0 = _bi_[1], heartbeat_config = sth$0;
    else
     var heartbeat_config = create$0(0, 0, 0);
    if(_bh_)
     var sth$1 = _bh_[1], max_metadata_size = sth$1;
    else
     var max_metadata_size = caml_call1(Core_Byte_units[40], 1.);
    if(_bg_)
     var sth$2 = _bg_[1], connection_description = sth$2;
    else
     var
      connection_description = caml_call1(Core_Info[14], cst_created_directly);
    if(_bf_)
     var sth$3 = _bf_[1], time_source = sth$3;
    else
     var time_source = caml_call1(Async_kernel_Synchronous_time_[21], 0);
    var writer$0 = param[2], reader = param[1];
    if(implementations)
     var s = implementations[1], implementations$0 = s;
    else
     var implementations$0 = caml_call1(Async_rpc_kernel_Implementatio[2], 0);
    var
     match =
       caml_call2
        (Async_rpc_kernel_Implementatio[11],
         implementations$0,
         [0, Async_rpc_kernel_Menu[2], 1]);
    if(match){
     var match$0 = match[1][3];
     if(5 === match$0[0])
      var
       menu$0 = match$0[1],
       implementations$1 = implementations$0,
       menu = [0, caml_call1(Core[248], menu$0)];
     else
      var implementations$1 = implementations$0, menu = 0;
    }
    else
     var
      menu$1 =
        caml_call2(Async_rpc_kernel_Implementatio[13], 0, implementations$0),
      _bE_ =
        [246,
         function(_cB_){
          var
           shapes =
             [0,
              Async_rpc_kernel_Menu[12][1][9][1],
              Async_rpc_kernel_Menu[12][1][17][1]];
          return [0,
                  shapes,
                  caml_call1(Async_rpc_kernel_Rpc_shapes[3], shapes)];
         }],
      _bF_ =
        [0,
         caml_call1
          (Async_rpc_kernel_Protocol[1][11], Async_rpc_kernel_Menu[2]),
         1,
         [5, menu$1],
         _bE_,
         _aN_],
      implementations$2 =
        caml_call2(Async_rpc_kernel_Implementatio[9], implementations$0, _bF_),
      menu$2 = [0, menu$1],
      implementations$1 = implementations$2,
      menu = menu$2;
    var
     _bj_ = caml_call2(Core_Option[34], menu, Async_rpc_kernel_Menu[14]),
     _bk_ = caml_call1(Core_Set_once[5], 0),
     _bl_ = caml_call1(Core_Set_once[5], 0),
     _bm_ = caml_call1(Moption[13], 0),
     _bn_ = caml_call5(Bus[7], 0, _aL_, 1, 0, Core_Error[30]),
     _bo_ = caml_call1(Core_Set_once[5], 0),
     _bp_ = caml_call1(Core_Set_once[5], 0),
     _bq_ = caml_call1(Core_Set_once[5], 0),
     _br_ = caml_call1(Async_kernel_Ivar[12], 0),
     _bs_ = caml_call1(Async_kernel_Ivar[12], 0),
     _bt_ = caml_call3(Core_Hashtbl[88][14], 0, _aM_, 0),
     _bu_ = caml_call1(Async_rpc_kernel_Protocol_writ[3], writer$0),
     _bv_ = caml_call1(Async_kernel_Synchronous_time_[12], time_source),
     send_every = heartbeat_config[2],
     timeout = heartbeat_config[1],
     t =
       [0,
        connection_description,
        [0, timeout, send_every],
        [0],
        _bv_,
        max_metadata_size,
        reader,
        _bu_,
        _bt_,
        _bs_,
        _br_,
        _bq_,
        time_source,
        _bp_,
        _bo_,
        _bn_,
        _bm_,
        _bl_,
        _bk_,
        _bj_],
     _bw_ = caml_call1(Async_rpc_kernel_Transport[3][4], writer$0),
     writer_monitor_exns = caml_call1(Async_kernel_Monitor[9], _bw_);
    function _bx_(param){
     var
      _cA_ = close(0, caml_call1(Core_Info[14], cst_RPC_transport_stopped), t);
     return caml_call1(Async_kernel[6], _cA_);
    }
    var _by_ = caml_call1(Async_rpc_kernel_Transport[3][7], writer$0);
    caml_call2(Async_kernel[12], _by_, _bx_);
    function _bz_(param){return caml_call1(Bus[11], t[15]);}
    var _bA_ = caml_call1(Async_kernel_Ivar[19], t[10]);
    caml_call2(Async_kernel[12], _bA_, _bz_);
    var
     _be_ =
       caml_call1
        (Async_kernel_Async_kernel_sche[7], handshake_header_override_key),
     header = caml_call2(Core_Option[39], _be_, default_handshake_header);
    if(protocol_version_headers)
     var
      match$1 = protocol_version_headers[1],
      peer = match$1[2],
      header$0 = match$1[1],
      _bB_ = negotiate$0(t, identification, header$0, peer, writer$0, menu, 0),
      negotiated_protocol_version = caml_call1(Async_kernel[20], _bB_);
    else{
     if(caml_call1(Async_rpc_kernel_Transport[3][14], writer$0)){
      handle_special_send_result
       (t,
        caml_call3
         (Async_rpc_kernel_Transport[3][10], writer$0, bin_t[2], header));
      var
       _ba_ =
         function(param){
          return caml_call2(Async_rpc_kernel_Transport[2][7], t[6], bin_t[3]);
         },
       result =
         caml_call7(Async_kernel_Monitor[16], 0, 0, 0, 0, _aG_, _aF_, _ba_),
       _bb_ =
         function(param){
          if(typeof param === "number"){
           var
            _cw_ =
              close(0, caml_call1(Core_Info[14], cst_Handshake_timeout), t);
           caml_call1(Async_kernel[6], _cw_);
           return caml_call1(Async_kernel[20], _aH_);
          }
          var match = param[2];
          if(0 !== match[0]){
           var
            exn = match[1],
            reason = caml_call1(Core_Info[14], cst_Reader_read_one_message_bi),
            _cy_ = close(0, reason, t);
           caml_call1(Async_kernel[6], _cy_);
           var _cz_ = [1, [0, caml_call2(Core_Error[27], 0, exn)]];
           return caml_call1(Async_kernel[20], _cz_);
          }
          var match$0 = match[1];
          if(0 !== match$0[0])
           return 3456156 <= match$0[1]
                   ? caml_call1(Async_kernel[20], _aI_)
                   : caml_call1(Async_kernel[20], _aJ_);
          var
           peer = match$0[1],
           _cx_ =
             negotiate$0(t, identification, header, peer, writer$0, menu, 0);
          return caml_call1(Async_kernel[20], _cx_);
         },
       _bc_ = caml_call1(Async_kernel_Time_source[40], t[12]),
       _bd_ =
         caml_call3
          (Async_kernel_Time_source[30], _bc_, handshake_timeout, result),
       _bD_ = caml_call2(Async_kernel[23][2], _bd_, _bb_);
     }
     else
      var _bD_ = caml_call1(Async_kernel[20], _aK_);
     var negotiated_protocol_version = _bD_;
    }
    function _bC_(param){
     if(0 !== param[0]){
      var error = param[1];
      return [1, [0, Handshake_error, [0, error, connection_description]]];
     }
     var negotiated_protocol_version = param[1];
     caml_call2
      (Async_rpc_kernel_Protocol_writ[4], t[7], negotiated_protocol_version);
     var connection_state$0 = caml_call1(connection_state, t);
     if(1 - is_closed(t)){
      var
       _bG_ = t[15],
       _bH_ = t[7],
       _bI_ = caml_call1(Async_kernel_Ivar[19], t[9]),
       instance =
         caml_call6
          (Async_rpc_kernel_Implementatio[6],
           implementations$1,
           t[1],
           _bI_,
           connection_state$0,
           _bH_,
           _bG_),
       match = caml_call1(Core_Set_once[9], t[18]);
      if(match){
       var on_receive = match[1];
       caml_call2(Async_rpc_kernel_Implementatio[5][5], instance, on_receive);
      }
      caml_call3(Core_Set_once[7], t[11], _av_, instance);
      var
       close_connection_monitor =
         caml_call4(Async_kernel_Monitor[3], 0, 0, _aw_, 0),
       _bJ_ =
         function(exn){
          var
           _ct_ = [0, [1, [0, _ax_, [0, caml_call1(Base_Exn[1], exn), 0]]], 0],
           _cu_ =
             [1,
              [0,
               caml_call1
                (Sexplib0_Sexp_conv[7], cst_Uncaught_exception_in_impl),
               _ct_]],
           reason = caml_call1(Core_Info[20], _cu_),
           _cv_ = close(0, reason, t);
          return caml_call1(Async_kernel[6], _cv_);
         };
      caml_call2(Async_kernel_Monitor[7], close_connection_monitor, _bJ_);
      var
       monitor = caml_call4(Async_kernel_Monitor[3], 0, 0, _ay_, 0),
       reason =
         function(name, exn){
          var
           _cr_ = caml_call2(Core[18], cst_exn_raised_in_RPC_connecti, name),
           _cs_ = caml_call2(Core_Info[27], 0, exn);
          return [0, exn, caml_call2(Core_Info[22], _cs_, _cr_)];
         },
       _bK_ =
         function(param){
          var reason = param[2], exn = param[1];
          return cleanup(t, reason, exn);
         },
       _bL_ = 0,
       _bM_ = function(_cq_){return reason(cst_Writer_t, _cq_);},
       _bN_ =
         [0,
          caml_call2(Async_kernel_Async_stream[25], writer_monitor_exns, _bM_),
          _bL_],
       _bO_ = function(_cp_){return reason(cst_loop, _cp_);},
       _bP_ = caml_call1(Async_kernel_Monitor[9], monitor),
       _bQ_ = [0, caml_call2(Async_kernel_Async_stream[25], _bP_, _bO_), _bN_],
       _bR_ = caml_call1(Async_kernel_Async_stream[5], _bQ_),
       _bS_ = caml_call1(Async_kernel_Async_stream[31], _bR_);
      caml_call2(Async_kernel_Async_stream[18], _bS_, _bK_);
      var
       _bT_ =
         function(param){
          t[4] = caml_call1(Async_kernel_Synchronous_time_[12], t[12]);
          function _bV_(param){
           var
            _cj_ = t[4],
            _ck_ = caml_call1(Async_kernel_Synchronous_time_[12], t[12]),
            since_last_heartbeat =
              caml_call2(Core_Time_ns_alternate_sexp[49], _ck_, _cj_);
           if(caml_call2(Core_Time_ns[1][18], since_last_heartbeat, t[2][1])){
            var
             reason =
               function(param){
                var
                 _cm_ = t[2][1],
                 _cn_ =
                   [0,
                    [11,
                     cst_No_heartbeats_received_for$0,
                     [24,
                      _at_,
                      function(param, custom_printf_099){
                       var
                        _co_ = caml_call1(Core_Time_ns[1][10], custom_printf_099);
                       return caml_call2(Ppx_sexp_conv_lib[1][13], 0, _co_);
                      },
                      _as_]],
                    cst_No_heartbeats_received_for];
                return caml_call2(Core[265], _cn_, _cm_);
               },
             _cl_ = close(0, caml_call1(Core_Info[17], reason), t);
            return caml_call1(Async_kernel[6], _cl_);
           }
           var match = writer(t);
           if(0 !== match[0]) return 0;
           var writer$0 = match[1];
           handle_special_send_result
            (t, caml_call1(Async_rpc_kernel_Protocol_writ[9], writer$0));
           return 0;
          }
          var
           heartbeat_from_now_on =
             caml_call4
              (Async_kernel_Synchronous_time_[19][6], 0, t[12], t[2][2], _bV_);
          caml_call3(Core_Set_once[7], t[13], _au_, heartbeat_from_now_on);
          function _bW_(param){
           if(0 === param[0]){
            var reason = param[1];
            return cleanup
                    (t, reason, [0, Async_rpc_kernel_Rpc_error[33], 0, t[1]]);
           }
           var _ci_ = [0, Async_rpc_kernel_Rpc_error[33], 0, t[1]];
           return cleanup
                   (t,
                    caml_call1(Core_Info[14], cst_EOF_or_connection_closed),
                    _ci_);
          }
          function _bX_(param){
           t[4] = caml_call1(Async_kernel_Synchronous_time_[12], t[12]);
           return 0;
          }
          function f(read_buffer, pos, param){
           var
            read_buffer_pos_ref = [0, pos],
            nat0_msg =
              caml_call2
               (Async_rpc_kernel_Protocol[13][15],
                read_buffer,
                read_buffer_pos_ref),
            protocol_message_len = read_buffer_pos_ref[1] - pos | 0;
           if(typeof nat0_msg === "number"){
            var _b$_ = function(f){return caml_call1(f, 0);};
            caml_call2(Core_Array[35], t[3], _b$_);
            var res = 0;
           }
           else
            switch(nat0_msg[0]){
              case 0:
               var
                query = nat0_msg[1],
                instance = caml_call2(Core_Set_once[10], t[11], _aq_),
                query$0 =
                  caml_call2(Async_rpc_kernel_Protocol[8][14], 0, query),
                res =
                  caml_call6
                   (Async_rpc_kernel_Implementatio[5][2],
                    instance,
                    query$0,
                    read_buffer,
                    read_buffer_pos_ref,
                    close_connection_monitor,
                    protocol_message_len + query$0[5] | 0);
               break;
              case 1:
               var
                response = nat0_msg[1],
                match = caml_call2(Core_Hashtbl[56], t[8], response[1]);
               if(match){
                var response_handler = match[1], match$0 = response[2];
                if(0 === match$0[0])
                 var x = match$0[1], x$0 = x;
                else
                 var x$0 = 0;
                var
                 payload_bytes = protocol_message_len + x$0 | 0,
                 response_event =
                   function(kind, payload_bytes){
                    write_event
                     (t, [0, [2, [0, kind]], 0, response[1], payload_bytes]);
                    return;
                   },
                 match$1 =
                   caml_call3
                    (response_handler,
                     response,
                     read_buffer,
                     read_buffer_pos_ref);
                if(typeof match$1 === "number"){
                 response_event(1, payload_bytes);
                 var _ca_ = 0;
                }
                else
                 switch(match$1[0]){
                   case 0:
                    var wait = match$1[1];
                    response_event(1, payload_bytes);
                    var _ca_ = [1, wait];
                    break;
                   case 1:
                    var removal_circumstances = match$1[1];
                    caml_call2(Core_Hashtbl[32], t[8], response[1]);
                    if(0 === removal_circumstances[0]){
                     var match$2 = removal_circumstances[1];
                     if(typeof match$2 === "number")
                      if(match$2){
                       var match$3 = response[2];
                       if(0 === match$3[0])
                        var _b0_ = 4;
                       else
                        var err = match$3[1], _b0_ = [0, err];
                       response_event(_b0_, payload_bytes);
                       var _ca_ = 0;
                      }
                      else{
                       var
                        _b1_ = caml_call1(Core_Result[38], response[2]) ? _ap_ : 2;
                       response_event(_b1_, payload_bytes);
                       var _ca_ = 0;
                      }
                     else{
                      var
                       error_mode = match$2[2],
                       result = match$2[1],
                       _b2_ = caml_call1(Bus[9], t[15]);
                      if(caml_call2(Core[91], _b2_, 0)){
                       if(0 === result[0])
                        if(typeof error_mode === "number")
                         switch(error_mode){
                           case 0:
                            var kind = 2; break;
                           case 1:
                            var _b3_ = 0 === result[1][0] ? 2 : 3, kind = _b3_; break;
                           case 2:
                            var _b4_ = result[1];
                            if(0 === _b4_[0])
                             var _b5_ = 0 === _b4_[1][0] ? 2 : 3, _b6_ = _b5_;
                            else
                             var _b6_ = 3;
                            var kind = _b6_;
                            break;
                           default:
                            var _b7_ = 0 === result[1][2][0] ? 2 : 3, kind = _b7_;
                         }
                        else{
                         var x$1 = result[1], is_error = error_mode[1];
                         a:
                         {
                          try{var val = caml_call1(is_error, x$1);}
                          catch(err){
                           var
                            err$0 = caml_wrap_exception(err),
                            _b8_ = [0, [2, caml_call1(Core[625], err$0)]];
                           break a;
                          }
                          var _b9_ = val ? 3 : 2, _b8_ = _b9_;
                         }
                         var kind = _b8_;
                        }
                       else
                        var err$1 = result[1], kind = [0, err$1];
                       response_event(kind, payload_bytes);
                      }
                      var _ca_ = 0;
                     }
                    }
                    else{
                     var e = removal_circumstances[1];
                     response_event([0, e], payload_bytes);
                     if(typeof e !== "number" && 3 === e[0]){var _ca_ = 0; break;}
                     var _ca_ = [0, [1, e]];
                    }
                    break;
                   default:
                    var wait$0 = match$1[1], match$4 = response[2];
                    if(0 === match$4[0])
                     var _b__ = 4;
                    else
                     var err$2 = match$4[1], _b__ = [0, err$2];
                    response_event(_b__, payload_bytes);
                    caml_call2(Core_Hashtbl[32], t[8], response[1]);
                    var _ca_ = [1, wait$0];
                 }
               }
               else
                var _ca_ = [0, [1, [4, response[1]]]];
               var res = _ca_;
               break;
              case 2:
               var
                query$1 = nat0_msg[1],
                instance$0 = caml_call2(Core_Set_once[10], t[11], _ar_),
                res =
                  caml_call6
                   (Async_rpc_kernel_Implementatio[5][2],
                    instance$0,
                    query$1,
                    read_buffer,
                    read_buffer_pos_ref,
                    close_connection_monitor,
                    protocol_message_len + query$1[5] | 0);
               break;
              default:
               var
                metadata = nat0_msg[1],
                match$5 = caml_call1(Core_Set_once[9], t[17]);
               a:
               {
                if(match$5){
                 var match$6 = match$5[1];
                 if(match$6){
                  var ivar = match$6[1];
                  if(caml_call1(Async_kernel_Ivar[17], t[9])){
                   var
                    _cb_ =
                      caml_call2
                       (Core_Option[34], metadata[2], Async_rpc_kernel_Menu[14]);
                   caml_call2
                    (Async_kernel_Ivar[14], ivar, [0, [0, metadata[1], _cb_]]);
                  }
                  break a;
                 }
                }
                var
                 _cc_ =
                   caml_call1
                    (Sexplib0_Sexp_conv[7], cst_Inconsistent_state_receivi);
                caml_call1(Core[261], _cc_);
               }
               var res = 0;
            }
           if(typeof res === "number") return 0;
           if(0 !== res[0]) return res;
           var result$0 = res[1];
           if(0 === result$0[0])
            var reason = caml_call1(Core_Info[14], msg);
           else
            var
             e$0 = result$0[1],
             _ce_ = Async_rpc_kernel_Rpc_error[29],
             _cf_ =
               function(param){
                return caml_call1
                        (Sexplib0_Sexp_conv[7], cst_Connection_on_message_resu);
               },
             _cg_ = function(_ch_){return caml_call2(_ce_, _ch_, _cf_);},
             reason = caml_call5(Core_Info[19], 0, 0, msg, e$0, _cg_);
           var _cd_ = close(0, reason, t);
           caml_call1(Async_kernel[6], _cd_);
           return [0, reason];
          }
          var
           _bU_ = caml_call1(Base_Staged[1], f),
           _bY_ = caml_call1(Base_Staged[2], _bU_),
           _bZ_ =
             caml_call3(Async_rpc_kernel_Transport[2][5], t[6], _bY_, _bX_);
          return caml_call2(Async_kernel[17], _bZ_, _bW_);
         };
      caml_call3(Async_kernel[15], [0, monitor], 0, _bT_);
      if(is_closed(t))
       throw caml_maybe_attach_backtrace([0, Assert_failure, _az_], 1);
      if(! caml_call1(Core_Set_once[12], t[13]))
       throw caml_maybe_attach_backtrace([0, Assert_failure, _aB_], 1);
      if(! caml_call1(Core_Set_once[12], t[11]))
       throw caml_maybe_attach_backtrace([0, Assert_failure, _aA_], 1);
     }
     return [0, t];
    }
    return caml_call2(Async_kernel[23][3], negotiated_protocol_version, _bC_);
   }
   function with_close
   (implementations,
    protocol_version_headers,
    handshake_timeout,
    heartbeat_config,
    description,
    time_source,
    connection_state,
    transport,
    dispatch_queries,
    on_handshake_error){
    if(typeof on_handshake_error === "number")
     var
      handle_handshake_error =
        function(_a$_){throw caml_maybe_attach_backtrace(_a$_, 0);};
    else
     var f = on_handshake_error[2], handle_handshake_error = f;
    function _a1_(t){
     if(0 === t[0]){
      var
       t$0 = t[1],
       _a3_ =
         function(param){
          return close
                  (0,
                   caml_call1(Core_Info[14], cst_Rpc_Connection_with_close_),
                   t$0);
         },
       _a4_ =
         function(param){
          function _a7_(result){
           function _a9_(param){return result;}
           var
            _a__ =
              implementations
               ? close_finished(t$0)
               : Async_kernel_Deferred[18];
           return caml_call2(Async_kernel[23][3], _a__, _a9_);
          }
          var _a8_ = caml_call1(dispatch_queries, t$0);
          return caml_call2(Async_kernel[23][2], _a8_, _a7_);
         };
      return caml_call8
              (Async_kernel_Monitor[23], 0, 0, 0, 0, _aP_, _aO_, _a4_, _a3_);
     }
     var e = t[1];
     function _a5_(param){return caml_call1(handle_handshake_error, e);}
     var _a6_ = caml_call1(Async_rpc_kernel_Transport[5], transport);
     return caml_call2(Async_kernel[23][2], _a6_, _a5_);
    }
    var
     _a2_ =
       create$1
        (implementations,
         protocol_version_headers,
         connection_state,
         handshake_timeout,
         heartbeat_config,
         0,
         description,
         time_source,
         0,
         transport);
    return caml_call2(Async_kernel[23][2], _a2_, _a1_);
   }
   function server_with_close
   (handshake_timeout,
    heartbeat_config,
    description,
    time_source,
    transport,
    implementations,
    connection_state,
    on_handshake_error){
    if(typeof on_handshake_error === "number")
     var
      on_handshake_error$0 =
        -146189108 <= on_handshake_error
         ? -146189108
         : [0, 747848894, function(param){return Async_kernel_Deferred[18];}];
    else
     var f = on_handshake_error[2], on_handshake_error$0 = [0, 747848894, f];
    return with_close
            ([0, implementations],
             0,
             handshake_timeout,
             heartbeat_config,
             description,
             time_source,
             connection_state,
             transport,
             function(param){return Async_kernel_Deferred[18];},
             on_handshake_error$0);
   }
   function close$0(streaming_responses_flush_time, opt, t){
    if(opt)
     var sth = opt[1], reason = sth;
    else
     var reason = caml_call1(Core_Info[14], cst_Rpc_Connection_close);
    return close(streaming_responses_flush_time, reason, t);
   }
   function null$0(param){
    var _a0_ = caml_call1(Async_rpc_kernel_Implementatio[2], 0);
    return [0, function(param){return 0;}, _a0_];
   }
   var Client_implementations = [0, null$0];
   function with_async_execution_context(context, f){
    return caml_call3
            (Async_kernel_Async_kernel_sche[6],
             handshake_header_override_key,
             [0, context],
             f);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_async_rpc_kernel);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_rpc_kernel_Connectio$0);
   var
    Async_rpc_kernel_Connection =
      [0,
       sexp_of_t$4,
       [0,
        t_of_sexp$0,
        sexp_of_t$3,
        bin_size_t$0,
        bin_write_t$0,
        bin_read_t$2,
        bin_read_t$1,
        bin_shape_t$0,
        bin_writer_t$0,
        bin_reader_t$0,
        bin_t$0,
        create$0,
        timeout,
        send_every],
       Client_implementations,
       create$1,
       contains_magic_prefix,
       description,
       add_heartbeat_callback,
       reset_heartbeat_timeout,
       last_seen_alive,
       close$0,
       close_finished,
       close_reason,
       is_closed,
       bytes_to_write,
       bytes_written,
       bytes_read,
       flushed,
       peer_menu,
       peer_menu$0,
       my_menu,
       peer_identification,
       with_close,
       server_with_close,
       compute_metadata,
       sexp_of_t_hum_writer,
       Dispatch_error,
       dispatch,
       dispatch_bigstring,
       schedule_dispatch_bigstring,
       schedule_dispatch_bigstring_wi,
       default_handshake_timeout,
       events,
       default_handshake_header,
       set_metadata_hooks,
       have_metadata_hooks_been_set,
       [0,
        [0,
         bin_size_t,
         bin_write_t,
         bin_read_t,
         bin_read_t$0,
         bin_shape_t,
         bin_writer_t,
         bin_reader_t,
         bin_t,
         sexp_of_t$1,
         v1,
         v2,
         default_handshake_header],
        with_async_execution_context]];
   runtime.caml_register_global
    (216, Async_rpc_kernel_Connection, cst_Async_rpc_kernel_Connectio$1);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_rpc_kernel__Connection_intf
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_rpc_kernel_Connectio = "Async_rpc_kernel__Connection_intf",
    cst_async_rpc_kernel = "async_rpc_kernel";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_rpc_kernel_Connectio);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_rpc_kernel);
   caml_call1(Ppx_expect_runtime[1][1], "src/connection_intf.ml");
   caml_call2
    (Ppx_inline_test_lib[6], cst_async_rpc_kernel, "connection_intf.ml");
   caml_call1(Ppx_inline_test_lib[7], cst_async_rpc_kernel);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_rpc_kernel_Connectio);
   var Async_rpc_kernel_Connection_in = [0];
   runtime.caml_register_global
    (11, Async_rpc_kernel_Connection_in, cst_Async_rpc_kernel_Connectio);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_rpc_kernel__How_to_recognise_errors
//# unitInfo: Requires: Core, Core__Result, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_rpc_kernel_How_to_re$0 =
      "Async_rpc_kernel__How_to_recognise_errors",
    cst_async_rpc_kernel$0 = "async_rpc_kernel";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Core = global_data.Core,
    Core_Result = global_data.Core__Result,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_rpc_kernel_How_to_re$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_rpc_kernel$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/how_to_recognise_errors.ml");
   caml_call2
    (Ppx_inline_test_lib[6],
     cst_async_rpc_kernel$0,
     "how_to_recognise_errors.ml");
   var
    cst_async_rpc_kernel = cst_async_rpc_kernel$0,
    cst_Async_rpc_kernel_How_to_re = cst_Async_rpc_kernel_How_to_re$0;
   function as_function(errors){
    var errors$0 = errors;
    for(;;)
     if(typeof errors$0 === "number")
      switch(errors$0){
        case 0:
         var _b_ = function(param){return 0;};
         return caml_call1(Core[266], _b_);
        case 1:
         return caml_call1(Core[266], Core_Result[38]);
        case 2:
         return caml_call1(Core[266], Core_Result[38]);
        case 3:
         var errors$0 = 6; break;
        case 4:
         var errors$0 = 6; break;
        case 5:
         var errors$0 = 6; break;
        case 6:
         var
          _c_ =
            function(param){
             if(0 === param[0] && 0 === param[1][0]) return 0;
             return 1;
            };
         return caml_call1(Core[266], _c_);
        default:
         var _d_ = function(param){return param ? 0 : 1;};
         return caml_call1(Core[266], _d_);
      }
     else
      switch(errors$0[0]){
        case 0:
         var t = errors$0[1], errors$1 = [1, t], errors$0 = errors$1; break;
        case 1:
         var
          t$0 = errors$0[1],
          _e_ = as_function(t$0),
          f = caml_call1(Core[267], _e_),
          _f_ =
            function(param){
             if(0 !== param[0]) return 1;
             var x = param[1];
             return caml_call1(f, x);
            };
         return caml_call1(Core[266], _f_);
        case 2:
         var
          t$1 = errors$0[1],
          _g_ = as_function(t$1),
          f$0 = caml_call1(Core[267], _g_),
          _h_ =
            function(param){
             if(! param) return 1;
             var x = param[1];
             return caml_call1(f$0, x);
            };
         return caml_call1(Core[266], _h_);
        case 3:
         var
          t$2 = errors$0[2],
          extract = errors$0[1],
          _i_ = as_function(t$2),
          f$1 = caml_call1(Core[267], _i_),
          _j_ = function(x){return caml_call1(f$1, caml_call1(extract, x));};
         return caml_call1(Core[266], _j_);
        default:
         var is_error = errors$0[1]; return caml_call1(Core[266], is_error);
      }
   }
   function to_error_mode(errors){
    if(typeof errors === "number")
     switch(errors){
       case 0:
        return 0;
       case 1:
        return 1;
       case 2:
        return 1;
       case 3:
        return 2;
       case 4:
        return 2;
       case 5:
        return 2;
       case 6:
        return 2;
     }
    var _a_ = as_function(errors);
    return [0, caml_call1(Core[267], _a_)];
   }
   caml_call1(Ppx_inline_test_lib[7], cst_async_rpc_kernel);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_rpc_kernel_How_to_re);
   var Async_rpc_kernel_How_to_recogn = [0, [0, to_error_mode]];
   runtime.caml_register_global
    (13, Async_rpc_kernel_How_to_recogn, cst_Async_rpc_kernel_How_to_re$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_rpc_kernel__Rpc
//# unitInfo: Requires: Async_kernel, Async_kernel__Deferred, Async_kernel__Ivar, Async_kernel__Pipe, Async_rpc_kernel__Connection, Async_rpc_kernel__Description, Async_rpc_kernel__How_to_recognise_errors, Async_rpc_kernel__Implementation, Async_rpc_kernel__Implementation_types, Async_rpc_kernel__Implementations, Async_rpc_kernel__On_exception, Async_rpc_kernel__Or_not_authorized, Async_rpc_kernel__Protocol, Async_rpc_kernel__Rpc_error, Async_rpc_kernel__Rpc_result, Async_rpc_kernel__Rpc_shapes, Async_rpc_kernel__Util, Async_rpc_kernel__Writer_with_length, Base__Exn, Bin_prot__Common, Bin_prot__Read, Bin_prot__Shape, Bin_prot__Write, Bin_shape, Core, Core__Bag, Core__Bigstring, Core__Error, Core__Hashtbl, Core__Info, Core__Int, Core__List, Core__Or_error, Core__Result, Core__Type_equal, Core__Unit, Eager_deferred, Expect_test_config, Inline_test_config, Moption, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_expect_runtime__Test_block, Ppx_expect_runtime__Test_node, Ppx_expect_runtime__Types, Ppx_inline_test_lib, Ppx_module_timer_runtime, Ppx_string_runtime, Sexplib0__Sexp_conv, Sexplib0__Sexp_conv_error
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$2 = "",
    cst_748c8bf4502d0978d007bf7f96 = " 748c8bf4502d0978d007bf7f96a7ef7f ",
    cst$3 = ":",
    cst_query$1 = ":query",
    cst_Async_rpc_kernel_Rpc$0 = "Async_rpc_kernel__Rpc",
    cst_Closed_locally = "Closed_locally",
    cst_Closed_remotely = "Closed_remotely",
    cst_Error$1 = "Error",
    cst_async_rpc_kernel$0 = "async_rpc_kernel",
    cst_client_side_streaming_rpc_$2 =
      "client-side streaming_rpc response un-bin-io'ing",
    cst_closed_locally = "closed_locally",
    cst_closed_remotely = "closed_remotely",
    cst_error$0 = "error",
    cst_src_rpc_ml$1 = "src/rpc.ml",
    cst_src_rpc_ml_Pipe_close_reas$1 =
      "src/rpc.ml.Pipe_close_reason.Stable.V1.t",
    cst_src_rpc_ml_Pipe_close_reas$2 = "src/rpc.ml.Pipe_close_reason.t",
    cst_t$3 = "t",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_string_notequal = runtime.caml_string_notequal,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   function caml_call14
   (f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13){
    return (f.l >= 0 ? f.l : f.l = f.length) == 14
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13)
            : runtime.caml_call_gen
              (f,
               [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    cst$1 = cst$2,
    cst = cst$3,
    cst$0 = cst$3,
    error_source_009 = cst_src_rpc_ml_Pipe_close_reas$2,
    error_source_024 = cst_src_rpc_ml_Pipe_close_reas$1,
    Async_kernel = global_data.Async_kernel,
    Core_Result = global_data.Core__Result,
    Core_Error = global_data.Core__Error,
    Core = global_data.Core,
    Core_Hashtbl = global_data.Core__Hashtbl,
    Core_Bag = global_data.Core__Bag,
    Moption = global_data.Moption,
    Core_Int = global_data.Core__Int,
    Core_Bigstring = global_data.Core__Bigstring,
    Async_kernel_Deferred = global_data.Async_kernel__Deferred,
    Core_List = global_data.Core__List,
    Async_rpc_kernel_Implementatio$0 =
      global_data.Async_rpc_kernel__Implementation_types,
    Core_Unit = global_data.Core__Unit,
    Async_kernel_Pipe = global_data.Async_kernel__Pipe,
    Async_kernel_Ivar = global_data.Async_kernel__Ivar,
    Core_Info = global_data.Core__Info,
    Async_rpc_kernel_Connection = global_data.Async_rpc_kernel__Connection,
    Async_rpc_kernel_Writer_with_l =
      global_data.Async_rpc_kernel__Writer_with_length,
    Async_rpc_kernel_Protocol = global_data.Async_rpc_kernel__Protocol,
    Base_Exn = global_data.Base__Exn,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Async_rpc_kernel_Util = global_data.Async_rpc_kernel__Util,
    Async_rpc_kernel_Rpc_error = global_data.Async_rpc_kernel__Rpc_error,
    Async_rpc_kernel_Or_not_author =
      global_data.Async_rpc_kernel__Or_not_authorized,
    Async_rpc_kernel_On_exception = global_data.Async_rpc_kernel__On_exception,
    Ppx_string_runtime = global_data.Ppx_string_runtime,
    Core_Type_equal = global_data.Core__Type_equal,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Bin_shape = global_data.Bin_shape,
    Ppx_expect_runtime_Types = global_data.Ppx_expect_runtime__Types,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Bin_prot_Read = global_data.Bin_prot__Read,
    Bin_prot_Common = global_data.Bin_prot__Common,
    Bin_prot_Write = global_data.Bin_prot__Write,
    Eager_deferred = global_data.Eager_deferred,
    Core_Or_error = global_data.Core__Or_error,
    Async_rpc_kernel_How_to_recogn =
      global_data.Async_rpc_kernel__How_to_recognise_errors,
    Async_rpc_kernel_Rpc_result = global_data.Async_rpc_kernel__Rpc_result,
    Async_rpc_kernel_Rpc_shapes = global_data.Async_rpc_kernel__Rpc_shapes,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Expect_test_config = global_data.Expect_test_config,
    Ppx_expect_runtime_Test_block = global_data.Ppx_expect_runtime__Test_block,
    Ppx_expect_runtime_Test_node = global_data.Ppx_expect_runtime__Test_node,
    Inline_test_config = global_data.Inline_test_config,
    Async_rpc_kernel_Implementatio =
      global_data.Async_rpc_kernel__Implementations,
    Async_rpc_kernel_Implementatio$1 =
      global_data.Async_rpc_kernel__Implementation,
    Async_rpc_kernel_Description = global_data.Async_rpc_kernel__Description;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_rpc_kernel_Rpc$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_rpc_kernel$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_rpc_ml$1);
   caml_call2(Ppx_inline_test_lib[6], cst_async_rpc_kernel$0, "rpc.ml");
   var
    symbol = Core_Result[23],
    symbol$0 = Core_Result[24],
    cst_update = "update",
    cst_state = "state",
    cst_Rpc_Pipe_rpc_Direct_stream$0 =
      "Rpc.Pipe_rpc.Direct_stream_writer.Group.add_exn: cannot add a closed direct stream writer",
    cst_Rpc_Pipe_rpc_Direct_stream$1 =
      "Rpc.Pipe_rpc.Direct_stream_writer.Group.add_exn: trying to add a direct stream writer that is already present in the group",
    cst_Rpc_Pipe_rpc_Direct_stream$2 =
      "Rpc.Pipe_rpc.Direct_stream_writer.Group.add: cannot add a direct stream writer with a different bin_writer",
    cst_Rpc_Pipe_rpc_Direct_stream =
      "Rpc.Pipe_rpc.Direct_stream_writer.Group.Buffer.create got negative buffer size",
    _D_ = [0, cst_src_rpc_ml$1, 1050, 31623, 31643],
    cst_response$0 = "response",
    _C_ = [0, "exn"],
    cst_Uncaught_exception_in_expe =
      "Uncaught exception in expert update handler",
    cst_client_side_streaming_rpc_ =
      "client-side streaming_rpc initial_response un-bin-io'ing",
    cst_client_side_streaming_rpc_$0 = cst_client_side_streaming_rpc_$2,
    cst_client_side_streaming_rpc_$1 = cst_client_side_streaming_rpc_$2,
    _B_ = [1, [0, 0]],
    cst_query$0 = cst_query$1,
    cst_error = ":error",
    _y_ = [0, cst_Closed_remotely],
    _z_ = [0, cst_Closed_locally],
    _A_ = [0, cst_Error$1],
    _x_ = [1, cst_src_rpc_ml_Pipe_close_reas$1],
    cst_src_rpc_ml_Pipe_close_reas$0 = cst_src_rpc_ml_Pipe_close_reas$1,
    _o_ = [0, cst_Closed_remotely],
    _p_ = [0, cst_Closed_locally],
    _q_ = [0, cst_Error$1],
    _n_ = [1, cst_src_rpc_ml_Pipe_close_reas$2],
    cst_src_rpc_ml_Pipe_close_reas = cst_src_rpc_ml_Pipe_close_reas$2,
    cst_msg = ":msg",
    _g_ = [0, 0, 0],
    _f_ = [0, 0, 0],
    _d_ = [1, [0, 1]],
    _e_ = [1, [0, 1]],
    cst_client_side_rpc_response_u = "client-side rpc response un-bin-io'ing",
    cst_query = cst_query$1,
    cst_response = ":response",
    _c_ = [1, 0],
    _a_ = [0, "connection"],
    _b_ = [0, "reason"],
    cst_Message_cannot_be_sent = "Message cannot be sent",
    cst_Error = cst_Error$1,
    _h_ = [0, cst_Closed_remotely, 0],
    _i_ = [0, cst_Closed_locally, 0],
    cst_t = cst_t$3,
    cst_src_rpc_ml_528_2 = "src/rpc.ml:528:2",
    cst_t$0 = cst_t$3,
    _X_ =
      [0,
       [0,
        [0, cst_748c8bf4502d0978d007bf7f96, [0, cst$2]],
        [0, 14436, 14449, 14487]]],
    _Y_ = [0, 14436, 14440, 14488],
    _ab_ = [0, 14378, 14380, 14488],
    _ac_ = [0, 14436, 14488, 14488],
    _ad_ = [0, 14378, 14380, 14488],
    cst_src_rpc_ml$0 = cst_src_rpc_ml$1,
    cst_Error$0 = cst_Error$1,
    _r_ = [0, cst_Closed_remotely, 0],
    _s_ = [0, cst_Closed_locally, 0],
    cst_t$1 = cst_t$3,
    cst_src_rpc_ml_541_6 = "src/rpc.ml:541:6",
    cst_t$2 = cst_t$3,
    _N_ =
      [0,
       [0,
        [0, cst_748c8bf4502d0978d007bf7f96, [0, cst$2]],
        [0, 14765, 14782, 14820]]],
    _O_ = [0, 14765, 14773, 14821],
    _T_ = [0, 14699, 14705, 14821],
    _U_ = [0, 14765, 14821, 14821],
    _V_ = [0, 14699, 14705, 14821],
    cst_src_rpc_ml = cst_src_rpc_ml$1,
    cst_Async_rpc_kernel_Rpc_Pipe_ =
      "Async_rpc_kernel__Rpc.Pipe_rpc.Pipe_rpc_failed",
    cst_async_rpc_kernel = cst_async_rpc_kernel$0,
    cst_Async_rpc_kernel_Rpc = cst_Async_rpc_kernel_Rpc$0;
   function and_digest(shapes){
    return [0, shapes, caml_call1(Async_rpc_kernel_Rpc_shapes[3], shapes)];
   }
   function message_too_big_message(message_too_big, connection){
    var
     _di_ =
       [0,
        [1,
         [0,
          _a_,
          [0, caml_call1(Async_rpc_kernel_Connection[25], connection), 0]]],
        0],
     _dj_ =
       [0,
        [1,
         [0,
          [1,
           [0,
            _b_,
            [0,
             caml_call1
              (Async_rpc_kernel_Connection[26][1], [0, message_too_big]),
             0]]],
          _di_]],
        0];
    return [1,
            [0,
             caml_call1(Sexplib0_Sexp_conv[7], cst_Message_cannot_be_sent),
             _dj_]];
   }
   function handle_dispatch_bigstring_resu(connection, param){
    if(0 === param[0]) return 17724;
    var match = param[1];
    if(! match) return 179911373;
    var
     message_too_big = match[1],
     _dh_ = message_too_big_message(message_too_big, connection);
    return caml_call1(Core[261], _dh_);
   }
   function handle_schedule_dispatch_bigst(connection, param){
    if(0 === param[0]){var d = param[1]; return [0, 933108739, d];}
    var match = param[1];
    if(! match) return 179911373;
    var
     message_too_big = match[1],
     _dg_ = message_too_big_message(message_too_big, connection);
    return caml_call1(Core[261], _dg_);
   }
   function rpc_result_to_or_error(rpc_description, conn, result){
    var
     _de_ = caml_call2(Async_rpc_kernel_Connection[12], conn, 890972481),
     _df_ = caml_call1(Async_rpc_kernel_Connection[6], conn);
    return caml_call4
            (Async_rpc_kernel_Rpc_result[5],
             rpc_description,
             _df_,
             _de_,
             result);
   }
   function dispatch_raw
   (conn, tag, version, bin_writer_query, query, query_id, response_handler){
    var
     _dd_ = [0, caml_call1(Async_rpc_kernel_Protocol[1][12], tag), version],
     query$0 =
       [0,
        tag,
        version,
        query_id,
        caml_call3(Async_rpc_kernel_Connection[24], conn, _dd_, query_id),
        query],
     match =
       caml_call5
        (Async_rpc_kernel_Connection[27],
         conn,
         0,
         response_handler,
         bin_writer_query,
         query$0);
    if(0 === match[0]){var result = match[1]; return [0, result];}
    var match$0 = match[1];
    if(! match$0) return _c_;
    var message_too_big = match$0[1];
    return [1, [6, message_too_big]];
   }
   function dispatch_raw$0
   (conn, tag, version, bin_writer_query, query, query_id, f){
    var
     response_ivar = caml_call1(Async_kernel_Ivar[12], 0),
     e =
       dispatch_raw
        (conn,
         tag,
         version,
         bin_writer_query,
         query,
         query_id,
         [0, caml_call1(f, response_ivar)]);
    if(0 !== e[0]) caml_call2(Async_kernel_Ivar[14], response_ivar, e);
    return caml_call1(Async_kernel_Ivar[19], response_ivar);
   }
   function create
   (name, version, bin_query, bin_response, include_in_error_count){
    var
     has_errors =
       caml_call1
        (Async_rpc_kernel_How_to_recogn[1][1], include_in_error_count),
     _c9_ = Core[149],
     _c__ = [0, name, [0, caml_call1(Ppx_string_runtime[1][2], cst_query), 0]],
     _c$_ = caml_call1(Ppx_string_runtime[1][4], _c__),
     query_type_id = caml_call2(Core_Type_equal[8][3], _c$_, _c9_),
     _da_ = Core[149],
     _db_ =
       [0, name, [0, caml_call1(Ppx_string_runtime[1][2], cst_response), 0]],
     _dc_ = caml_call1(Ppx_string_runtime[1][4], _db_),
     response_type_id = caml_call2(Core_Type_equal[8][3], _dc_, _da_);
    return [0,
            caml_call1(Async_rpc_kernel_Protocol[1][11], name),
            version,
            bin_query,
            bin_response,
            query_type_id,
            response_type_id,
            has_errors];
   }
   function name(t){
    return caml_call1(Async_rpc_kernel_Protocol[1][12], t[1]);
   }
   function version(t){return t[2];}
   function description(t){var _c8_ = t[2]; return [0, name(t), _c8_];}
   function query_type_id(t){return t[5];}
   function response_type_id(t){return t[6];}
   function bin_query(t){return t[3];}
   function bin_response(t){return t[4];}
   function shapes(t){return [0, t[3][1], t[4][1]];}
   function shapes_and_digest(t){return and_digest(shapes(t));}
   function implement(opt, t, f){
    if(opt)
     var sth = opt[1], on_exception = sth;
    else
     var on_exception = Async_rpc_kernel_On_exception[3];
    var
     _c1_ = [246, function(_c7_){return shapes_and_digest(t);}],
     _c2_ = 1,
     _c3_ = t[7];
    function _c4_(state, query){
     function _c5_(a){return [0, a];}
     var _c6_ = caml_call2(f, state, query);
     return caml_call2(Eager_deferred[7], _c6_, _c5_);
    }
    return [0,
            t[1],
            t[2],
            [2, t[3][3], t[4][2], _c4_, _c3_, _c2_],
            _c1_,
            on_exception];
   }
   function implement_with_auth(opt, t, f){
    if(opt)
     var sth = opt[1], on_exception = sth;
    else
     var on_exception = Async_rpc_kernel_On_exception[3];
    var _cZ_ = [246, function(_c0_){return shapes_and_digest(t);}];
    return [0,
            t[1],
            t[2],
            [2, t[3][3], t[4][2], f, t[7], 1],
            _cZ_,
            on_exception];
   }
   function implement$0(opt, t, f){
    if(opt)
     var sth = opt[1], on_exception = sth;
    else
     var on_exception = Async_rpc_kernel_On_exception[3];
    var
     _cU_ = [246, function(_cY_){return shapes_and_digest(t);}],
     _cV_ = 0,
     _cW_ = t[7];
    function _cX_(state, query){return [0, caml_call2(f, state, query)];}
    return [0,
            t[1],
            t[2],
            [2, t[3][3], t[4][2], _cX_, _cW_, _cV_],
            _cU_,
            on_exception];
   }
   function implement_with_auth$0(opt, t, f){
    if(opt)
     var sth = opt[1], on_exception = sth;
    else
     var on_exception = Async_rpc_kernel_On_exception[3];
    var _cS_ = [246, function(_cT_){return shapes_and_digest(t);}];
    return [0,
            t[1],
            t[2],
            [2, t[3][3], t[4][2], f, t[7], 0],
            _cS_,
            on_exception];
   }
   function dispatch(t, conn, query){
    function response_handler
    (ivar, response, read_buffer, read_buffer_pos_ref){
     function _cR_(len){
      return caml_call6
              (Async_rpc_kernel_Util[1],
               t[4][3],
               0,
               read_buffer,
               read_buffer_pos_ref,
               len,
               cst_client_side_rpc_response_u);
     }
     var response$0 = caml_call2(symbol, response[2], _cR_);
     caml_call2(Async_kernel_Ivar[14], ivar, response$0);
     return [1, [0, [0, response$0, t[7]]]];
    }
    var query_id = caml_call1(Async_rpc_kernel_Protocol[2][45], 0);
    return dispatch_raw$0
            (conn, t[1], t[2], t[3][2], query, query_id, response_handler);
   }
   function rpc_result_to_or_error$0(t, conn, result){
    return rpc_result_to_or_error(description(t), conn, result);
   }
   function dispatch$0(t, conn, query){
    function _cP_(result){return rpc_result_to_or_error$0(t, conn, result);}
    var _cQ_ = dispatch(t, conn, query);
    return caml_call2(Async_kernel[23][3], _cQ_, _cP_);
   }
   function dispatch_exn(t, conn, query){
    var _cN_ = Core_Or_error[40], _cO_ = dispatch$0(t, conn, query);
    return caml_call2(Async_kernel[22], _cO_, _cN_);
   }
   function make_dispatch
   (do_dispatch,
    conn,
    rpc_tag,
    version,
    metadata,
    buf,
    pos,
    len,
    handle_response,
    handle_error){
    function response_handler(response, read_buffer, read_buffer_pos_ref){
     var match = response[2];
     if(0 === match[0]){
      var
       len = match[1],
       d =
         caml_call3(handle_response, read_buffer, read_buffer_pos_ref[1], len);
      read_buffer_pos_ref[1] = read_buffer_pos_ref[1] + len | 0;
      return caml_call1(Async_kernel_Deferred[7], d) ? _d_ : [2, d];
     }
     var e = match[1];
     function _cK_(param){
      var
       _cM_ = caml_call2(Async_rpc_kernel_Connection[12], conn, 890972481),
       x_002 = caml_call1(Async_kernel_Deferred[5], _cM_);
      return caml_call2(Core[515], Core_Info[9], x_002);
     }
     var _cL_ = caml_call2(Async_rpc_kernel_Rpc_error[29], e, _cK_);
     caml_call1(handle_error, caml_call1(Core_Error[8], _cL_));
     return _e_;
    }
    return caml_call8
            (do_dispatch,
             conn,
             caml_call1(Async_rpc_kernel_Protocol[1][11], rpc_tag),
             version,
             metadata,
             buf,
             pos,
             len,
             [0, response_handler]);
   }
   function dispatch$1
   (conn, rpc_tag, version, buf, pos, len, handle_response, handle_error){
    return handle_dispatch_bigstring_resu
            (conn,
             make_dispatch
              (Async_rpc_kernel_Connection[28],
               conn,
               rpc_tag,
               version,
               0,
               buf,
               pos,
               len,
               handle_response,
               handle_error));
   }
   function schedule_dispatch
   (conn, rpc_tag, version, buf, pos, len, handle_response, handle_error){
    return handle_schedule_dispatch_bigst
            (conn,
             make_dispatch
              (Async_rpc_kernel_Connection[29],
               conn,
               rpc_tag,
               version,
               0,
               buf,
               pos,
               len,
               handle_response,
               handle_error));
   }
   function schedule_dispatch_with_metadat
   (conn,
    rpc_tag,
    version,
    metadata,
    buf,
    pos,
    len,
    handle_response,
    handle_error){
    return handle_schedule_dispatch_bigst
            (conn,
             make_dispatch
              (Async_rpc_kernel_Connection[30],
               conn,
               rpc_tag,
               version,
               metadata,
               buf,
               pos,
               len,
               handle_response,
               handle_error));
   }
   function deferred_no_authorization(f, state, responder, buf, pos, len){
    function _cI_(a){return [0, a];}
    var _cJ_ = caml_call5(f, state, responder, buf, pos, len);
    return caml_call2(Eager_deferred[7], _cJ_, _cI_);
   }
   function blocking_no_authorization(f, state, responder, buf, pos, len){return [0, caml_call5(f, state, responder, buf, pos, len)];
   }
   function implement$1(opt, t, f){
    if(opt)
     var sth = opt[1], on_exception = sth;
    else
     var on_exception = Async_rpc_kernel_On_exception[3];
    var
     _cz_ = [246, function(_cH_){return shapes_and_digest(t);}],
     _cA_ = 1,
     _cB_ =
       [3,
        function(_cC_, _cD_, _cE_, _cF_, _cG_){
         return deferred_no_authorization(f, _cC_, _cD_, _cE_, _cF_, _cG_);
        },
        _cA_];
    return [0, t[1], t[2], _cB_, _cz_, on_exception];
   }
   function implement$2(opt, t, f){
    if(opt)
     var sth = opt[1], on_exception = sth;
    else
     var on_exception = Async_rpc_kernel_On_exception[3];
    var
     _cq_ = [246, function(_cy_){return shapes_and_digest(t);}],
     _cr_ = 0,
     _cs_ =
       [3,
        function(_ct_, _cu_, _cv_, _cw_, _cx_){
         return blocking_no_authorization(f, _ct_, _cu_, _cv_, _cw_, _cx_);
        },
        _cr_];
    return [0, t[1], t[2], _cs_, _cq_, on_exception];
   }
   function implement_for_tag_and_version(opt, rpc_tag, version, f){
    if(opt)
     var sth = opt[1], on_exception = sth;
    else
     var on_exception = Async_rpc_kernel_On_exception[3];
    var
     _ch_ = [246, function(_cp_){return _f_;}],
     _ci_ = 1,
     _cj_ =
       [3,
        function(_ck_, _cl_, _cm_, _cn_, _co_){
         return deferred_no_authorization(f, _ck_, _cl_, _cm_, _cn_, _co_);
        },
        _ci_];
    return [0,
            caml_call1(Async_rpc_kernel_Protocol[1][11], rpc_tag),
            version,
            _cj_,
            _ch_,
            on_exception];
   }
   function implement_for_tag_and_version$0(opt, rpc_tag, version, f){
    if(opt)
     var sth = opt[1], on_exception = sth;
    else
     var on_exception = Async_rpc_kernel_On_exception[3];
    var
     _b__ = [246, function(_cg_){return _g_;}],
     _b$_ = 0,
     _ca_ =
       [3,
        function(_cb_, _cc_, _cd_, _ce_, _cf_){
         return blocking_no_authorization(f, _cb_, _cc_, _cd_, _ce_, _cf_);
        },
        _b$_];
    return [0,
            caml_call1(Async_rpc_kernel_Protocol[1][11], rpc_tag),
            version,
            _ca_,
            _b__,
            on_exception];
   }
   function bin_msg(r){return r[3];}
   function version$0(r){return r[2];}
   function name$0(t){
    return caml_call1(Async_rpc_kernel_Protocol[1][12], t[1]);
   }
   function create$0(name, version, bin_msg){
    var
     _b7_ = Core[149],
     _b8_ = [0, name, [0, caml_call1(Ppx_string_runtime[1][2], cst_msg), 0]],
     _b9_ = caml_call1(Ppx_string_runtime[1][4], _b8_),
     msg_type_id = caml_call2(Core_Type_equal[8][3], _b9_, _b7_);
    return [0,
            caml_call1(Async_rpc_kernel_Protocol[1][11], name),
            version,
            bin_msg,
            msg_type_id];
   }
   function shapes$0(t){return [1, t[3][1]];}
   function shapes_and_digest$0(t){return and_digest(shapes$0(t));}
   function description$0(t){var _b6_ = t[2]; return [0, name$0(t), _b6_];}
   function msg_type_id(t){return t[4];}
   function implement$3(opt, t, f){
    if(opt)
     var sth = opt[1], on_exception = sth;
    else
     var on_exception = Async_rpc_kernel_On_exception[2];
    var _b2_ = [246, function(_b5_){return shapes_and_digest$0(t);}];
    function _b3_(state, query){
     var _b4_ = [0, caml_call2(f, state, query)];
     return caml_call1(Eager_deferred[6], _b4_);
    }
    return [0, t[1], t[2], [0, t[3][3], _b3_], _b2_, on_exception];
   }
   function dispatch$2(t, conn, query){
    var query_id = caml_call1(Async_rpc_kernel_Protocol[2][45], 0);
    return dispatch_raw(conn, t[1], t[2], t[3][2], query, query_id, 0);
   }
   function rpc_result_to_or_error$1(t, conn, result){
    return rpc_result_to_or_error(description$0(t), conn, result);
   }
   function dispatch$3(t, conn, query){
    var result = dispatch$2(t, conn, query);
    return rpc_result_to_or_error$1(t, conn, result);
   }
   function dispatch_exn$0(t, conn, query){
    var _b1_ = dispatch$3(t, conn, query);
    return caml_call1(Core_Or_error[40], _b1_);
   }
   function implement$4(opt, t, f){
    if(opt)
     var sth = opt[1], on_exception = sth;
    else
     var on_exception = Async_rpc_kernel_On_exception[2];
    var
     _bX_ = [246, function(_b0_){return shapes_and_digest$0(t);}],
     _bY_ =
       [1,
        function(state, buf, pos, len){
         var _bZ_ = [0, caml_call4(f, state, buf, pos, len)];
         return caml_call1(Eager_deferred[6], _bZ_);
        }];
    return [0, t[1], t[2], _bY_, _bX_, on_exception];
   }
   function dispatch$4(param, conn, buf, pos, len){
    var version = param[2], tag = param[1];
    return handle_dispatch_bigstring_resu
            (conn,
             caml_call8
              (Async_rpc_kernel_Connection[28],
               conn,
               tag,
               version,
               0,
               buf,
               pos,
               len,
               0));
   }
   function schedule_dispatch$0(param, conn, buf, pos, len){
    var version = param[2], tag = param[1];
    return handle_schedule_dispatch_bigst
            (conn,
             caml_call8
              (Async_rpc_kernel_Connection[29],
               conn,
               tag,
               version,
               0,
               buf,
               pos,
               len,
               0));
   }
   var
    _j_ =
      caml_call1
       (Bin_prot_Shape[5],
        [0, _i_, [0, _h_, [0, [0, cst_Error, [0, Core_Error[38], 0]], 0]]]),
    _k_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t), 0, _j_], 0],
    _l_ = caml_call1(Bin_shape[4][1], cst_src_rpc_ml_528_2),
    group = caml_call2(Bin_prot_Shape[2], _l_, _k_),
    _m_ = caml_call1(Bin_shape[2][1], cst_t$0),
    bin_shape_t = caml_call1(caml_call2(Bin_prot_Shape[10], group, _m_), 0);
   function bin_size_t(param){
    if(typeof param === "number") return 1;
    var v1 = param[1], _bW_ = caml_call1(Core_Error[34], v1);
    return caml_call2(Bin_prot_Common[23], 1, _bW_);
   }
   function bin_write_t(buf, pos, param){
    if(typeof param === "number")
     return param
             ? caml_call3(Bin_prot_Write[30], buf, pos, 1)
             : caml_call3(Bin_prot_Write[30], buf, pos, 0);
    var v1 = param[1], pos$0 = caml_call3(Bin_prot_Write[30], buf, pos, 2);
    return caml_call3(Core_Error[35], buf, pos$0, v1);
   }
   var bin_writer_t = [0, bin_size_t, bin_write_t];
   function bin_read_t(buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19], cst_src_rpc_ml_Pipe_close_reas, pos_ref[1]);
   }
   function bin_read_t$0(buf, pos_ref){
    var match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
    if(2 < match >>> 0)
     return caml_call2(Bin_prot_Common[18], _n_, pos_ref[1]);
    switch(match){
      case 0:
       return 0;
      case 1:
       return 1;
      default:
       var arg_1 = caml_call2(Core_Error[36], buf, pos_ref);
       return [0, arg_1];
    }
   }
   var
    bin_reader_t = [0, bin_read_t$0, bin_read_t],
    bin_t = [0, bin_shape_t, bin_writer_t, bin_reader_t];
   function compare(a_003, b_004){
    if(a_003 === b_004) return 0;
    if(typeof a_003 === "number"){
     if(! a_003){
      if(typeof b_004 === "number" && ! b_004) return 0;
      return -1;
     }
     if(typeof b_004 !== "number") return -1;
     if(b_004) return 0;
    }
    else{
     var a_005 = a_003[1];
     if(typeof b_004 !== "number"){
      var b_006 = b_004[1];
      return caml_call2(Core_Error[1], a_005, b_006);
     }
     if(b_004) return 1;
    }
    return 1;
   }
   function t_of_sexp(sexp_011){
    a:
    {
     if(0 === sexp_011[0]){
      var _bT_ = sexp_011[1];
      b:
      if(caml_string_notequal(_bT_, cst_Closed_locally)){
       c:
       if(caml_string_notequal(_bT_, cst_Closed_remotely)){
        if(caml_string_notequal(_bT_, cst_Error$1)){
         if(! caml_string_notequal(_bT_, cst_closed_locally)) break b;
         if(! caml_string_notequal(_bT_, cst_closed_remotely)) break c;
         if(caml_string_notequal(_bT_, cst_error$0)) break a;
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[9], error_source_009, sexp_011);
       }
       return 1;
      }
      return 0;
     }
     var _bU_ = sexp_011[1];
     if(! _bU_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_009, sexp_011);
     var _bV_ = _bU_[1];
     if(0 !== _bV_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_009, sexp_011);
     var tag_012 = _bV_[1];
     b:
     if(caml_string_notequal(tag_012, cst_Closed_locally)){
      c:
      if(caml_string_notequal(tag_012, cst_Closed_remotely)){
       if(caml_string_notequal(tag_012, cst_Error$1)){
        if(! caml_string_notequal(tag_012, cst_closed_locally)) break b;
        if(! caml_string_notequal(tag_012, cst_closed_remotely)) break c;
        if(caml_string_notequal(tag_012, cst_error$0)) break a;
       }
       var sexp_args_013 = _bU_[2];
       if(sexp_args_013 && ! sexp_args_013[2]){
        var
         arg0_014 = sexp_args_013[1],
         res0_015 = caml_call1(Core_Error[8], arg0_014);
        return [0, res0_015];
       }
       return caml_call3
               (Sexplib0_Sexp_conv_error[8],
                error_source_009,
                tag_012,
                sexp_011);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_009, sexp_011);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[7], error_source_009, sexp_011);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_009, sexp_011);
   }
   function sexp_of_t(param){
    if(typeof param === "number") return param ? _o_ : _p_;
    var arg0_016 = param[1], res0_017 = caml_call1(Core_Error[9], arg0_016);
    return [1, [0, _q_, [0, res0_017, 0]]];
   }
   if(typeof Ppx_inline_test_lib[3] !== "number"){
    var
     Ppx_expect_test_block$0 =
       caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
     _W_ =
       function(param){
        var
         _bQ_ = caml_call1(Bin_prot_Shape[15], bin_shape_t),
         _bR_ = caml_call1(Bin_shape[19][4], _bQ_);
        caml_call1(Core[32], _bR_);
        var _bS_ = caml_call1(Ppx_expect_runtime_Types[4][1], 0);
        return caml_call1(Ppx_expect_test_block$0[2], _bS_);
       },
     _Z_ =
       caml_call3
        (Ppx_expect_runtime_Test_node[1][1],
         [0, Ppx_expect_runtime_Types[1][1]],
         _Y_,
         _X_),
     ___ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 0), _Z_], 0],
     _$_ = caml_call1(Ppx_expect_runtime_Types[4][1], 2),
     _aa_ = caml_call1(Ppx_expect_runtime_Types[4][1], 1);
    caml_call14
     (Ppx_expect_test_block$0[3],
      cst_src_rpc_ml$0,
      534,
      _ad_,
      _ac_,
      _ab_,
      [0, Ppx_expect_runtime_Types[1][1]],
      0,
      _aa_,
      _$_,
      0,
      0,
      Inline_test_config,
      ___,
      _W_);
   }
   var
    _t_ =
      caml_call1
       (Bin_prot_Shape[5],
        [0,
         _s_,
         [0, _r_, [0, [0, cst_Error$0, [0, Core_Error[43][2][11], 0]], 0]]]),
    _u_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$1), 0, _t_], 0],
    _v_ = caml_call1(Bin_shape[4][1], cst_src_rpc_ml_541_6),
    group$0 = caml_call2(Bin_prot_Shape[2], _v_, _u_),
    _w_ = caml_call1(Bin_shape[2][1], cst_t$2),
    bin_shape_t$0 =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$0, _w_), 0);
   function bin_size_t$0(param){
    if(typeof param === "number") return 1;
    var v1 = param[1], _bP_ = caml_call1(Core_Error[43][2][7], v1);
    return caml_call2(Bin_prot_Common[23], 1, _bP_);
   }
   function bin_write_t$0(buf, pos, param){
    if(typeof param === "number")
     return param
             ? caml_call3(Bin_prot_Write[30], buf, pos, 1)
             : caml_call3(Bin_prot_Write[30], buf, pos, 0);
    var v1 = param[1], pos$0 = caml_call3(Bin_prot_Write[30], buf, pos, 2);
    return caml_call3(Core_Error[43][2][8], buf, pos$0, v1);
   }
   var bin_writer_t$0 = [0, bin_size_t$0, bin_write_t$0];
   function bin_read_t$1(buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19],
             cst_src_rpc_ml_Pipe_close_reas$0,
             pos_ref[1]);
   }
   function bin_read_t$2(buf, pos_ref){
    var match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
    if(2 < match >>> 0)
     return caml_call2(Bin_prot_Common[18], _x_, pos_ref[1]);
    switch(match){
      case 0:
       return 0;
      case 1:
       return 1;
      default:
       var arg_1 = caml_call2(Core_Error[43][2][9], buf, pos_ref);
       return [0, arg_1];
    }
   }
   var
    bin_reader_t$0 = [0, bin_read_t$2, bin_read_t$1],
    bin_t$0 = [0, bin_shape_t$0, bin_writer_t$0, bin_reader_t$0];
   function compare$0(a_018, b_019){
    if(a_018 === b_019) return 0;
    if(typeof a_018 === "number"){
     if(! a_018){
      if(typeof b_019 === "number" && ! b_019) return 0;
      return -1;
     }
     if(typeof b_019 !== "number") return -1;
     if(b_019) return 0;
    }
    else{
     var a_020 = a_018[1];
     if(typeof b_019 !== "number"){
      var b_021 = b_019[1];
      return caml_call2(Core_Error[43][2][15], a_020, b_021);
     }
     if(b_019) return 1;
    }
    return 1;
   }
   function t_of_sexp$0(sexp_026){
    a:
    {
     if(0 === sexp_026[0]){
      var _bM_ = sexp_026[1];
      b:
      if(caml_string_notequal(_bM_, cst_Closed_locally)){
       c:
       if(caml_string_notequal(_bM_, cst_Closed_remotely)){
        if(caml_string_notequal(_bM_, cst_Error$1)){
         if(! caml_string_notequal(_bM_, cst_closed_locally)) break b;
         if(! caml_string_notequal(_bM_, cst_closed_remotely)) break c;
         if(caml_string_notequal(_bM_, cst_error$0)) break a;
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[9], error_source_024, sexp_026);
       }
       return 1;
      }
      return 0;
     }
     var _bN_ = sexp_026[1];
     if(! _bN_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[11], error_source_024, sexp_026);
     var _bO_ = _bN_[1];
     if(0 !== _bO_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_024, sexp_026);
     var tag_027 = _bO_[1];
     b:
     if(caml_string_notequal(tag_027, cst_Closed_locally)){
      c:
      if(caml_string_notequal(tag_027, cst_Closed_remotely)){
       if(caml_string_notequal(tag_027, cst_Error$1)){
        if(! caml_string_notequal(tag_027, cst_closed_locally)) break b;
        if(! caml_string_notequal(tag_027, cst_closed_remotely)) break c;
        if(caml_string_notequal(tag_027, cst_error$0)) break a;
       }
       var sexp_args_028 = _bN_[2];
       if(sexp_args_028 && ! sexp_args_028[2]){
        var
         arg0_029 = sexp_args_028[1],
         res0_030 = caml_call1(Core_Error[43][2][16], arg0_029);
        return [0, res0_030];
       }
       return caml_call3
               (Sexplib0_Sexp_conv_error[8],
                error_source_024,
                tag_027,
                sexp_026);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_024, sexp_026);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[7], error_source_024, sexp_026);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[12], error_source_024, sexp_026);
   }
   function sexp_of_t$0(param){
    if(typeof param === "number") return param ? _y_ : _z_;
    var
     arg0_031 = param[1],
     res0_032 = caml_call1(Core_Error[43][2][17], arg0_031);
    return [1, [0, _A_, [0, res0_032, 0]]];
   }
   if(typeof Ppx_inline_test_lib[3] !== "number"){
    var
     Ppx_expect_test_block =
       caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
     _M_ =
       function(param){
        var
         _bJ_ = caml_call1(Bin_prot_Shape[15], bin_shape_t$0),
         _bK_ = caml_call1(Bin_shape[19][4], _bJ_);
        caml_call1(Core[32], _bK_);
        var _bL_ = caml_call1(Ppx_expect_runtime_Types[4][1], 3);
        return caml_call1(Ppx_expect_test_block[2], _bL_);
       },
     _P_ =
       caml_call3
        (Ppx_expect_runtime_Test_node[1][1],
         [0, Ppx_expect_runtime_Types[1][1]],
         _O_,
         _N_),
     _Q_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 3), _P_], 0],
     _R_ = caml_call1(Ppx_expect_runtime_Types[4][1], 5),
     _S_ = caml_call1(Ppx_expect_runtime_Types[4][1], 4);
    caml_call14
     (Ppx_expect_test_block[3],
      cst_src_rpc_ml,
      547,
      _V_,
      _U_,
      _T_,
      [0, Ppx_expect_runtime_Types[1][1]],
      0,
      _S_,
      _R_,
      0,
      0,
      Inline_test_config,
      _Q_,
      _M_);
   }
   function create$1
   (client_pushes_back,
    name,
    version,
    bin_query,
    bin_initial_response,
    bin_update_response,
    bin_error,
    alias_for_initial_response,
    alias_for_update_response,
    param){
    var
     client_pushes_back$0 = client_pushes_back ? 1 : 0,
     _bx_ = Core[149],
     _by_ =
       [0, name, [0, caml_call1(Ppx_string_runtime[1][2], cst_query$0), 0]],
     _bz_ = caml_call1(Ppx_string_runtime[1][4], _by_),
     query_type_id = caml_call2(Core_Type_equal[8][3], _bz_, _bx_),
     _bA_ = Core[149],
     _bB_ =
       [0,
        name,
        [0,
         caml_call1(Ppx_string_runtime[1][2], cst),
         [0, alias_for_initial_response, 0]]],
     _bC_ = caml_call1(Ppx_string_runtime[1][4], _bB_),
     initial_response_type_id = caml_call2(Core_Type_equal[8][3], _bC_, _bA_),
     _bD_ = Core[149],
     _bE_ =
       [0,
        name,
        [0,
         caml_call1(Ppx_string_runtime[1][2], cst$0),
         [0, alias_for_update_response, 0]]],
     _bF_ = caml_call1(Ppx_string_runtime[1][4], _bE_),
     update_response_type_id = caml_call2(Core_Type_equal[8][3], _bF_, _bD_),
     _bG_ = Core[149],
     _bH_ = [0, name, [0, caml_call1(Ppx_string_runtime[1][2], cst_error), 0]],
     _bI_ = caml_call1(Ppx_string_runtime[1][4], _bH_),
     error_response_type_id = caml_call2(Core_Type_equal[8][3], _bI_, _bG_);
    return [0,
            caml_call1(Async_rpc_kernel_Protocol[1][11], name),
            version,
            bin_query,
            bin_initial_response,
            bin_update_response,
            bin_error,
            client_pushes_back$0,
            query_type_id,
            initial_response_type_id,
            update_response_type_id,
            error_response_type_id];
   }
   function name$1(t){
    return caml_call1(Async_rpc_kernel_Protocol[1][12], t[1]);
   }
   function version$1(t){return t[2];}
   function description$1(t){var _bw_ = t[2]; return [0, name$1(t), _bw_];}
   function make_initial_message(x){
    return [0, Async_rpc_kernel_Protocol[3][10], x];
   }
   function shapes$1(t){return [2, t[3][1], t[4][1], t[5][1], t[6][1]];}
   function implement_gen(t, opt, impl){
    if(opt)
     var sth = opt[1], on_exception = sth;
    else
     var on_exception = Async_rpc_kernel_On_exception[3];
    var
     bin_init_writer =
       caml_call2(Async_rpc_kernel_Protocol[11][4], t[4][2], t[6][2]),
     _bu_ = [246, function(_bv_){return and_digest(shapes$1(t));}];
    return [0,
            t[1],
            t[2],
            [4, [0, t[3][3], bin_init_writer, t[5][2], impl, 3]],
            _bu_,
            on_exception];
   }
   function implement$5(on_exception, t, f){
    function f$0(c, query){
     function _bs_(param){
      if(0 === param[0]){
       var match = param[1], pipe = match[2], initial = match[1];
       return [0, [0, [0, make_initial_message([0, initial]), pipe]]];
      }
      var err = param[1];
      return [0, [1, make_initial_message([1, err])]];
     }
     var _bt_ = caml_call2(f, c, query);
     return caml_call2(Async_kernel[23][3], _bt_, _bs_);
    }
    return implement_gen(t, on_exception, [0, f$0]);
   }
   function implement_with_auth$1(on_exception, t, f){
    function f$0(c, query){
     function _bp_(response_or_not_authorized){
      function _br_(response){
       if(0 === response[0]){
        var match = response[1], pipe = match[2], initial = match[1];
        return [0, [0, make_initial_message([0, initial]), pipe]];
       }
       var err = response[1];
       return [1, make_initial_message([1, err])];
      }
      return caml_call2
              (Async_rpc_kernel_Or_not_author[2],
               response_or_not_authorized,
               _br_);
     }
     var _bq_ = caml_call2(f, c, query);
     return caml_call2(Async_kernel[23][3], _bq_, _bp_);
    }
    return implement_gen(t, on_exception, [0, f$0]);
   }
   function implement_direct(on_exception, t, f){
    function f$0(c, query, writer){
     function _bn_(x){
      return 0 === x[0]
              ? [0, [0, make_initial_message(x)]]
              : [0, [1, make_initial_message(x)]];
     }
     var _bo_ = caml_call3(f, c, query, writer);
     return caml_call2(Async_kernel[23][3], _bo_, _bn_);
    }
    return implement_gen(t, on_exception, [1, f$0]);
   }
   function implement_direct_with_auth(on_exception, t, f){
    function f$0(c, query, writer){
     function _bk_(response_or_not_authorized){
      function _bm_(response){
       return 0 === response[0]
               ? [0, make_initial_message(response)]
               : [1, make_initial_message(response)];
      }
      return caml_call2
              (Async_rpc_kernel_Or_not_author[2],
               response_or_not_authorized,
               _bm_);
     }
     var _bl_ = caml_call3(f, c, query, writer);
     return caml_call2(Async_kernel[23][3], _bl_, _bk_);
    }
    return implement_gen(t, on_exception, [1, f$0]);
   }
   function abort(t, conn, id){
    var query = [0, t[1], t[2], id, 0, 774323088];
    caml_call5
     (Async_rpc_kernel_Connection[27],
      conn,
      1,
      0,
      Async_rpc_kernel_Protocol[10][18],
      query);
    return 0;
   }
   var Pipe_message = [0], Pipe_response = [0];
   function id(t){return t[1];}
   function close_reason(t){return t[2];}
   function handle_closed(handler, closed_by){
    if(0 === handler[0]){
     var update_handler = handler[1];
     caml_call1(update_handler, [1, closed_by]);
     return;
    }
    var on_closed = handler[2];
    return caml_call1(on_closed, closed_by);
   }
   function read_error(get_connection_close_reason, handler, err){
    var
     _bj_ =
       caml_call2
        (Async_rpc_kernel_Rpc_error[29], err, get_connection_close_reason),
     core_err = caml_call1(Core_Error[8], _bj_);
    handle_closed(handler, [0, 106380200, core_err]);
    return [1, [1, err]];
   }
   function dispatch_gen(t, conn, query, make_update_handler){
    var
     _bc_ = caml_call1(Async_rpc_kernel_Writer_with_l[2], t[3]),
     bin_writer_query = caml_call1(Async_rpc_kernel_Protocol[10][4], _bc_),
     query$0 = [0, -250086680, query],
     query_id = caml_call1(Async_rpc_kernel_Protocol[2][45], 0);
    function _bd_(ivar){
     var initial_state = [0, t, query_id, make_update_handler, ivar, conn];
     function get_connection_close_reason(param){
      var
       _bi_ = caml_call2(Async_rpc_kernel_Connection[12], conn, 890972481),
       x_035 = caml_call1(Async_kernel_Deferred[5], _bi_);
      return caml_call2(Core[515], Core_Info[9], x_035);
     }
     var state = [0, [0, initial_state]];
     return function(response, read_buffer, read_buffer_pos_ref){
      var match = state[1];
      if(0 === match[0]){
       var
        initial_handler = match[1],
        error =
          function(result){
           caml_call2(Async_kernel_Ivar[14], initial_handler[4], result);
           return [1, [0, [0, result, 0]]];
          },
        result = response[2];
       if(0 !== result[0]) return error(result);
       var
        len = result[1],
        _be_ =
          caml_call2
           (Async_rpc_kernel_Protocol[11][7],
            initial_handler[1][4][3],
            initial_handler[1][6][3]),
        initial =
          caml_call6
           (Async_rpc_kernel_Util[1],
            _be_,
            0,
            read_buffer,
            read_buffer_pos_ref,
            len,
            cst_client_side_streaming_rpc_);
       if(0 !== initial[0]) return error(initial);
       var initial_msg = initial[1], result$0 = initial_msg[2];
       if(0 === result$0[0]){
        var
         initial$0 = result$0[1],
         match$0 = caml_call1(initial_handler[3], initial$0),
         handler = match$0[2],
         initial_response = match$0[1];
        caml_call2
         (Async_kernel_Ivar[14],
          initial_handler[4],
          [0, [0, [0, initial_handler[2], initial_response]]]);
        state[1] = [1, initial_handler[1][5][3], handler];
        return 0;
       }
       caml_call2(Async_kernel_Ivar[14], initial_handler[4], [0, result$0]);
       return [1, [0, [0, initial, 3]]];
      }
      var
       handler$0 = match[2],
       bin_reader_update = match[1],
       match$1 = response[2];
      if(0 !== match$1[0]){
       var err$1 = match$1[1];
       return read_error(get_connection_close_reason, handler$0, err$1);
      }
      var
       len$0 = match$1[1],
       _bf_ =
         [0,
          function(param){
           if(typeof param === "number") return 0;
           var len = param[2];
           return len;
          }],
       data =
         caml_call6
          (Async_rpc_kernel_Util[1],
           Async_rpc_kernel_Protocol[12][16],
           _bf_,
           read_buffer,
           read_buffer_pos_ref,
           len$0,
           cst_client_side_streaming_rpc_$0);
      if(0 !== data[0]){
       var err$0 = data[1];
       return read_error(get_connection_close_reason, handler$0, err$0);
      }
      var match$2 = data[1];
      if(typeof match$2 === "number"){
       handle_closed(handler$0, 636790696);
       return _B_;
      }
      var len$1 = match$2[2];
      if(0 === handler$0[0]){
       var
        update_handler = handler$0[1],
        data$0 =
          caml_call6
           (Async_rpc_kernel_Util[1],
            bin_reader_update,
            0,
            read_buffer,
            read_buffer_pos_ref,
            len$1,
            cst_client_side_streaming_rpc_$1);
       if(0 !== data$0[0]){
        var err = data$0[1];
        return read_error(get_connection_close_reason, handler$0, err);
       }
       var
        data$1 = data$0[1],
        match$3 = caml_call1(update_handler, [0, data$1]);
       if(! match$3) return 0;
       var d = match$3[1];
       return [0, d];
      }
      var on_update = handler$0[1], pos = read_buffer_pos_ref[1];
      read_buffer_pos_ref[1] = pos + len$1 | 0;
      try{
       var match$4 = caml_call3(on_update, read_buffer, pos, len$1);
       if(match$4) var d$0 = match$4[1], _bh_ = [0, d$0]; else var _bh_ = 0;
       return _bh_;
      }
      catch(exn$0){
       var
        exn = caml_wrap_exception(exn$0),
        _bg_ = [0, [1, [0, _C_, [0, caml_call1(Base_Exn[1], exn), 0]]], 0];
       return read_error
               (get_connection_close_reason,
                handler$0,
                [2,
                 [1,
                  [0,
                   caml_call1
                    (Sexplib0_Sexp_conv[7], cst_Uncaught_exception_in_expe),
                   _bg_]]]);
      }};
    }
    return dispatch_raw$0
            (conn, t[1], t[2], bin_writer_query, query$0, query_id, _bd_);
   }
   function dispatch_fold(t, conn, query, init, f, closed){
    var result = caml_call1(Async_kernel_Ivar[12], 0);
    function _a__(e){
     if(0 === e[0]){
      var _bb_ = e[1];
      if(0 === _bb_[0]){
       var id = _bb_[1][1];
       return [0, [0, [0, id, caml_call1(Async_kernel_Ivar[19], result)]]];
      }
     }
     return rpc_result_to_or_error(description$1(t), conn, e);
    }
    var
     _a$_ =
       dispatch_gen
        (t,
         conn,
         query,
         function(state){
          var acc = [0, caml_call1(init, state)];
          return [0,
                  0,
                  [0,
                   function(param){
                    if(0 === param[0]){
                     var
                      update = param[1],
                      match = caml_call2(f, acc[1], update),
                      response = match[2],
                      new_acc = match[1];
                     acc[1] = new_acc;
                     return response;
                    }
                    var
                     reason = param[1],
                     _ba_ = caml_call2(closed, acc[1], reason);
                    caml_call2(Async_kernel_Ivar[14], result, _ba_);
                    return 0;
                   }]];
         });
    return caml_call2(Async_kernel[23][3], _a$_, _a__);
   }
   function dispatch$5(t, conn, query){
    function _aY_(e){
     if(0 === e[0]){
      var _a5_ = e[1];
      if(0 === _a5_[0]){
       var
        _a6_ = _a5_[1],
        match = _a6_[2],
        close_reason = match[3],
        pipe_r = match[2],
        init = match[1],
        id = _a6_[1],
        _a7_ =
          function(param){
           var _a9_ = 1 - caml_call1(Async_kernel_Ivar[18], close_reason);
           return _a9_
                   ? (abort
                      (t, conn, id),
                     caml_call2(Async_kernel_Ivar[16], close_reason, 0))
                   : _a9_;
          },
        _a8_ = caml_call1(Async_kernel_Pipe[18], pipe_r);
       caml_call2(Async_kernel[12], _a8_, _a7_);
       var
        pipe_metadata =
          [0, id, caml_call1(Async_kernel_Ivar[19], close_reason)];
       return [0, [0, [0, pipe_metadata, init, pipe_r]]];
      }
     }
     return e;
    }
    var
     _aZ_ =
       dispatch_gen
        (t,
         conn,
         query,
         function(init){
          var
           match = caml_call3(Async_kernel_Pipe[7], 0, 0, 0),
           pipe_w = match[2],
           pipe_r = match[1];
          caml_call2(Async_kernel_Pipe[83], pipe_w, 100);
          var close_reason = caml_call1(Async_kernel_Ivar[12], 0);
          function f(param){
           if(0 !== param[0]){
            var reason = param[1];
            if(typeof reason === "number")
             var _a4_ = 1;
            else
             var err = reason[2], _a4_ = [0, err];
            caml_call2(Async_kernel_Ivar[16], close_reason, _a4_);
            caml_call1(Async_kernel_Pipe[15], pipe_w);
            return 0;
           }
           var data = param[1];
           if(caml_call1(Async_kernel_Pipe[17], pipe_w)) return 0;
           caml_call2(Async_kernel_Pipe[30], pipe_w, data);
           if(t[7]){
            var
             _a0_ = caml_call1(Async_kernel_Pipe[82], pipe_w),
             _a1_ = caml_call1(Async_kernel_Pipe[24], pipe_w);
            if(caml_call2(Core[88], _a1_, _a0_)){
             var
              _a2_ = function(param){return 0;},
              _a3_ = caml_call1(Async_kernel_Pipe[21], pipe_w);
             return [0, caml_call2(Async_kernel[23][3], _a3_, _a2_)];
            }
           }
           return 0;
          }
          return [0, [0, init, pipe_r, close_reason], [0, f]];
         });
    return caml_call2(Async_kernel[23][3], _aZ_, _aY_);
   }
   function create$2
   (client_pushes_back,
    name,
    version,
    bin_query,
    bin_response,
    bin_error,
    param){
    return create$1
            (client_pushes_back,
             name,
             version,
             bin_query,
             Core_Unit[54],
             bin_response,
             bin_error,
             cst$1,
             cst_response$0,
             0);
   }
   function bin_query$0(t){return t[3];}
   function bin_response$0(t){return t[5];}
   function bin_error(t){return t[6];}
   function shapes$2(t){return shapes$1(t);}
   function client_pushes_back(t){return t[7];}
   function implement$6(on_exception, t, f){
    return implement$5
            (on_exception,
             t,
             function(a, query){
              function _aW_(x){
               return caml_call2(symbol$0, x, function(x){return [0, 0, x];});
              }
              var _aX_ = caml_call2(f, a, query);
              return caml_call2(Async_kernel[23][3], _aX_, _aW_);
             });
   }
   function implement_with_auth$2(on_exception, t, f){
    return implement_with_auth$1
            (on_exception,
             t,
             function(a, query){
              function _aU_(r){
               if(0 !== r[0]) return r;
               var match = r[1];
               if(0 !== match[0]) return r;
               var pipe = match[1];
               return [0, [0, [0, 0, pipe]]];
              }
              var _aV_ = caml_call2(f, a, query);
              return caml_call2(Async_kernel[23][3], _aV_, _aU_);
             });
   }
   var
    include = Async_rpc_kernel_Implementatio[4],
    close = include[1],
    closed = include[2],
    is_closed = include[3],
    write = include[4],
    write_without_pushback = include[5],
    flushed = include[6],
    bin_writer = include[7],
    Expert = include[8];
   function create$3(opt, param){
    if(opt)
     var sth = opt[1], initial_size = sth;
    else
     var initial_size = 4096;
    if(caml_call2(Core[92], initial_size, 0))
     caml_call5
      (Core[247],
       0,
       _D_,
       cst_Rpc_Pipe_rpc_Direct_stream,
       initial_size,
       Core_Int[77]);
    return [0, caml_call1(Core_Bigstring[121], initial_size)];
   }
   var Buffer = [0, create$3];
   function create$4(buffer, opt, param){
    if(opt)
     var sth = opt[1], send_last_value_on_add = sth;
    else
     var send_last_value_on_add = 0;
    if(buffer)
     var b = buffer[1], buffer$0 = b;
    else
     var buffer$0 = caml_call2(Buffer[1], 0, 0);
    var
     _aS_ = caml_call1(Moption[13], 0),
     _aT_ = caml_call3(Async_rpc_kernel_Implementatio$0[1][38][5], 0, 0, 0);
    return [0,
            caml_call1(Core_Bag[22], 0),
            _aT_,
            buffer$0,
            -1,
            _aS_,
            send_last_value_on_add];
   }
   function length(t){return caml_call1(Core_Bag[5], t[1]);}
   function remove(t, writer){
    var match = caml_call2(Core_Hashtbl[64], t[2], writer[1]);
    if(! match) return 0;
    var
     match$0 = match[1],
     group_element_in_writer = match$0[2],
     writer_element_in_group = match$0[1];
    caml_call2(Core_Bag[26], t[1], writer_element_in_group);
    return caml_call2(Core_Bag[26], writer[8], group_element_in_writer);
   }
   function to_list(t){return caml_call1(Core_Bag[17], t[1]);}
   function flushed_or_closed(t){
    function _aN_(t){
     var
      _aQ_ = [0, caml_call1(closed, t), 0],
      _aR_ = [0, caml_call1(flushed, t), _aQ_];
     return caml_call1(Async_kernel_Deferred[24], _aR_);
    }
    var _aO_ = to_list(t), _aP_ = caml_call2(Core_List[51], _aO_, _aN_);
    return caml_call1(Async_kernel_Deferred[22], _aP_);
   }
   function flushed$0(t){return flushed_or_closed(t);}
   var direct_write_without_pushback = Expert[2];
   function write_without_pushback$0(t, buf, pos, len){
    function _aG_(direct_stream_writer){
     caml_call4(Expert[2], direct_stream_writer, buf, pos, len);
     return 0;
    }
    caml_call2(Core_Bag[7], t[1], _aG_);
    var _aH_ = t[6], _aI_ = _aH_ ? 1 - (t[3][1] === buf ? 1 : 0) : _aH_;
    if(_aI_){
     var _aJ_ = caml_call1(Core_Bigstring[21], t[3][1]);
     if(caml_call2(Core[92], _aJ_, len)){
      var
       _aK_ = caml_call1(Core_Int[48], len),
       _aL_ = caml_call1(Core_Bigstring[121], _aK_);
      t[3][1] = _aL_;
     }
     caml_call5(Core_Bigstring[22], buf, pos, t[3][1], 0, len);
     t[4] = len;
     var _aM_ = 0;
    }
    else
     var _aM_ = _aI_;
    return _aM_;
   }
   function write$0(t, buf, pos, len){
    write_without_pushback$0(t, buf, pos, len);
    return flushed_or_closed(t);
   }
   function write_without_pushback$1(t, x){
    var match = caml_call1(Core_Bag[27], t[1]);
    if(! match){
     var
      _aD_ = t[6],
      _aE_ = _aD_ ? (caml_call2(Moption[21], t[5], x), t[4] = -1, 0) : _aD_;
     return _aE_;
    }
    var
     one = match[1],
     one$0 = caml_call1(Core_Bag[1][3], one),
     match$0 = caml_call1(bin_writer, one$0),
     write = match$0[2],
     size = match$0[1],
     buffer = t[3][1];
    try{var len$1 = caml_call3(write, buffer, 0, x);}
    catch(_aF_){
     var len = caml_call1(size, x);
     runtime.bigstring_destroy_stub(buffer);
     var
      _aC_ = caml_call1(Core_Int[48], len),
      buffer$0 = caml_call1(Core_Bigstring[121], _aC_);
     t[3][1] = buffer$0;
     var len$0 = caml_call3(write, buffer$0, 0, x);
     write_without_pushback$0(t, buffer$0, 0, len$0);
     t[4] = len$0;
     return 0;
    }
    write_without_pushback$0(t, buffer, 0, len$1);
    t[4] = len$1;
    return 0;
   }
   function add_exn(t, writer){
    if(caml_call1(is_closed, writer))
     caml_call1(Core[6], cst_Rpc_Pipe_rpc_Direct_stream$0);
    if(caml_call2(Core_Hashtbl[31], t[2], writer[1]))
     caml_call1(Core[6], cst_Rpc_Pipe_rpc_Direct_stream$1);
    var match = caml_call1(Core_Bag[27], t[1]);
    if(match){
     var
      one = match[1],
      one$0 = caml_call1(Core_Bag[1][3], one),
      _aA_ = caml_call1(bin_writer, writer);
     if(1 - (caml_call1(bin_writer, one$0) === _aA_ ? 1 : 0))
      caml_call1(Core[6], cst_Rpc_Pipe_rpc_Direct_stream$2);
    }
    var
     writer_element_in_group = caml_call2(Core_Bag[23], t[1], writer),
     group_element_in_writer =
       caml_call2(Core_Bag[23], writer[8], [0, t, writer_element_in_group]);
    caml_call3
     (Core_Hashtbl[39],
      t[2],
      writer[1],
      [0, writer_element_in_group, group_element_in_writer]);
    var _aB_ = t[6];
    if(! _aB_) return _aB_;
    var match$0 = caml_call1(Moption[15], t[5]);
    a:
    {
     var match$1 = length(t);
     if(match$0 && 1 === match$1){
      write_without_pushback$1(t, caml_call1(Moption[17], t[5]));
      break a;
     }
     if(caml_call2(Core[88], t[4], 0))
      caml_call4(direct_write_without_pushback, writer, t[3][1], 0, t[4]);
    }
    return caml_call1(Moption[20], t[5]);
   }
   function write$1(t, x){
    write_without_pushback$1(t, x);
    return flushed_or_closed(t);
   }
   function implement_direct$0(on_exception, t, f){return implement_direct(on_exception, t, f);
   }
   function implement_direct_with_auth$0(on_exception, t, f){return implement_direct_with_auth(on_exception, t, f);
   }
   function dispatch$6(t, conn, query){
    function _ay_(response){
     return caml_call2
             (symbol$0,
              response,
              function(x){
               return caml_call2
                       (symbol$0,
                        x,
                        function(param){
                         var pipe_r = param[3], metadata = param[1];
                         return [0, pipe_r, metadata];
                        });
              });
    }
    var _az_ = dispatch$5(t, conn, query);
    return caml_call2(Async_kernel[23][3], _az_, _ay_);
   }
   function dispatch$7(t, conn, query){
    var _au_ = description$1(t);
    function _av_(_ax_){return rpc_result_to_or_error(_au_, conn, _ax_);}
    var _aw_ = dispatch$6(t, conn, query);
    return caml_call2(Async_kernel[22], _aw_, _av_);
   }
   var
    Pipe_rpc_failed =
      [248, cst_Async_rpc_kernel_Rpc_Pipe_, runtime.caml_fresh_oo_id(0)];
   function dispatch_exn$1(t, conn, query){
    function _as_(result){
     if(0 !== result[0]){
      var rpc_error = result[1];
      throw caml_maybe_attach_backtrace
             (caml_call1(Core_Error[28], rpc_error), 0);
     }
     var match = result[1];
     if(0 !== match[0]) throw caml_maybe_attach_backtrace(Pipe_rpc_failed, 0);
     var pipe_and_id = match[1];
     return pipe_and_id;
    }
    var _at_ = dispatch$7(t, conn, query);
    return caml_call2(Async_kernel[23][3], _at_, _as_);
   }
   function dispatch_iter(t, conn, query, f){
    function _ap_(e){
     if(0 === e[0]){
      var _ar_ = e[1];
      if(0 === _ar_[0]){var id = _ar_[1][1]; return [0, [0, id]];}
     }
     return rpc_result_to_or_error(description$1(t), conn, e);
    }
    var
     _aq_ =
       dispatch_gen(t, conn, query, function(param){return [0, 0, [0, f]];});
    return caml_call2(Async_kernel[23][3], _aq_, _ap_);
   }
   function dispatch_iter$0(t, conn, query, f, closed){
    function _am_(e){
     if(0 === e[0]){
      var _ao_ = e[1];
      if(0 === _ao_[0]){var id = _ao_[1][1]; return [0, [0, id]];}
     }
     return rpc_result_to_or_error(description$1(t), conn, e);
    }
    var
     _an_ =
       dispatch_gen
        (t, conn, query, function(param){return [0, 0, [1, f, closed]];});
    return caml_call2(Async_kernel[23][3], _an_, _am_);
   }
   var Expert$0 = [0, dispatch_iter$0];
   function query_type_id$0(t){return t[8];}
   function error_type_id(t){return t[11];}
   function response_type_id$0(t){return t[10];}
   function create$5
   (client_pushes_back,
    name,
    version,
    bin_query,
    bin_state,
    bin_update,
    bin_error,
    param){
    return create$1
            (client_pushes_back,
             name,
             version,
             bin_query,
             bin_state,
             bin_update,
             bin_error,
             cst_state,
             cst_update,
             0);
   }
   function bin_query$1(t){return t[3];}
   function bin_state(t){return t[4];}
   function bin_update(t){return t[5];}
   function bin_error$0(t){return t[6];}
   function shapes$3(t){return shapes$1(t);}
   function unwrap_dispatch_result(rpc_result){
    function _ak_(callee_response){
     function _al_(param){
      var update_r = param[3], state = param[2], metadata = param[1];
      return [0, state, update_r, metadata];
     }
     return caml_call2(Core_Result[25][4][3], callee_response, _al_);
    }
    return caml_call2(Core_Result[25][4][3], rpc_result, _ak_);
   }
   function dispatch$8(t, conn, query){
    var _af_ = description$1(t);
    function _ag_(_aj_){return rpc_result_to_or_error(_af_, conn, _aj_);}
    var
     _ah_ = dispatch$5(t, conn, query),
     _ai_ = caml_call2(Async_kernel[22], _ah_, _ag_);
    return caml_call2(Async_kernel[22], _ai_, unwrap_dispatch_result);
   }
   function dispatch$9(t, conn, query){
    var _ae_ = dispatch$5(t, conn, query);
    return caml_call2(Async_kernel[22], _ae_, unwrap_dispatch_result);
   }
   function client_pushes_back$0(t){return t[7];}
   function query_type_id$1(t){return t[8];}
   function state_type_id(t){return t[9];}
   function update_type_id(t){return t[10];}
   function error_type_id$0(t){return t[11];}
   function description$2(param){
    switch(param[0]){
      case 0:
       var rpc = param[1]; return description(rpc);
      case 1:
       var rpc$0 = param[1]; return description$1(rpc$0);
      case 2:
       var rpc$1 = param[1]; return description$1(rpc$1);
      default: var rpc$2 = param[1]; return description$0(rpc$2);
    }
   }
   var Any = [0, description$2];
   caml_call1(Ppx_inline_test_lib[7], cst_async_rpc_kernel);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_rpc_kernel_Rpc);
   var
    _E_ = Async_rpc_kernel_Description[38],
    _F_ = Async_rpc_kernel_Description[37],
    _G_ = Async_rpc_kernel_Description[32],
    _H_ = _G_[2],
    _I_ = _G_[1],
    _J_ = Async_rpc_kernel_Description[31],
    _K_ = _J_[2],
    _L_ = _J_[1],
    Async_rpc_kernel_Rpc =
      [0,
       [0,
        Async_rpc_kernel_Description[10],
        Async_rpc_kernel_Description[11],
        Async_rpc_kernel_Description[12],
        Async_rpc_kernel_Description[13],
        Async_rpc_kernel_Description[14],
        Async_rpc_kernel_Description[15],
        Async_rpc_kernel_Description[16],
        Async_rpc_kernel_Description[17],
        Async_rpc_kernel_Description[18],
        Async_rpc_kernel_Description[19],
        Async_rpc_kernel_Description[20],
        Async_rpc_kernel_Description[21],
        Async_rpc_kernel_Description[22],
        Async_rpc_kernel_Description[23],
        Async_rpc_kernel_Description[24],
        Async_rpc_kernel_Description[25],
        Async_rpc_kernel_Description[26],
        Async_rpc_kernel_Description[27],
        Async_rpc_kernel_Description[28],
        Async_rpc_kernel_Description[29],
        Async_rpc_kernel_Description[30],
        [0,
         [0, _L_[2], _L_[3]],
         _J_[3],
         _J_[4],
         _J_[45],
         _J_[5],
         _J_[6],
         _J_[7],
         _J_[8],
         _J_[9],
         _J_[10],
         _J_[11],
         _J_[12],
         _J_[13],
         _J_[14],
         _J_[15],
         _J_[16],
         _J_[17],
         _J_[18],
         _J_[19],
         _J_[20],
         _J_[21],
         _J_[22],
         _J_[23],
         _J_[24],
         _J_[25],
         _J_[26],
         _J_[27],
         _J_[28],
         _J_[29],
         _J_[30],
         _J_[31],
         _J_[32],
         _J_[33],
         _J_[34],
         _J_[35],
         _J_[36],
         _J_[37],
         [0, _K_[2], _K_[3], _K_[4], _K_[5]],
         _J_[38],
         _J_[39],
         _J_[40],
         _J_[41],
         _J_[42],
         _J_[43]],
        [0,
         [0, _I_[2], _I_[3]],
         _G_[3],
         _G_[4],
         _G_[28],
         [0, _H_[2], _H_[3], _H_[4], _H_[5]],
         _G_[5],
         _G_[6],
         _G_[7],
         _G_[8],
         _G_[9],
         _G_[10],
         _G_[11],
         _G_[12],
         _G_[13],
         _G_[14],
         _G_[15],
         _G_[16],
         _G_[17],
         _G_[18],
         _G_[19],
         _G_[20],
         _G_[21],
         _G_[22],
         _G_[23],
         _G_[24],
         _G_[25],
         _G_[26]],
        Async_rpc_kernel_Description[33],
        Async_rpc_kernel_Description[34],
        Async_rpc_kernel_Description[35],
        Async_rpc_kernel_Description[36],
        [0,
         _F_[1],
         _F_[2],
         _F_[3],
         _F_[4],
         _F_[5],
         _F_[6],
         _F_[7],
         _F_[8],
         _F_[9],
         _F_[10],
         _F_[11],
         _F_[12],
         _F_[13],
         _F_[14],
         _F_[15],
         _F_[16],
         _F_[17]],
        [0, _E_[1], _E_[2], _E_[3], _E_[4], _E_[5], _E_[6]],
        Async_rpc_kernel_Description[39],
        Async_rpc_kernel_Description[40],
        Async_rpc_kernel_Description[41],
        Async_rpc_kernel_Description[42],
        Async_rpc_kernel_Description[43]],
       [0, Async_rpc_kernel_On_exception[2], Async_rpc_kernel_On_exception[3]],
       [0,
        Async_rpc_kernel_Implementatio$1[3],
        Async_rpc_kernel_Implementatio$1[4],
        Async_rpc_kernel_Implementatio$1[6],
        Async_rpc_kernel_Implementatio$1[5],
        Async_rpc_kernel_Implementatio$1[7],
        Async_rpc_kernel_Implementatio$1[8],
        Async_rpc_kernel_Implementatio$1[9],
        Async_rpc_kernel_Implementatio$1[10],
        Async_rpc_kernel_Implementatio$1[11]],
       [0,
        Async_rpc_kernel_Implementatio[2],
        Async_rpc_kernel_Implementatio[3],
        Async_rpc_kernel_Implementatio[1],
        Async_rpc_kernel_Implementatio[7],
        Async_rpc_kernel_Implementatio[8],
        Async_rpc_kernel_Implementatio[9],
        Async_rpc_kernel_Implementatio[12],
        [0, [0], Async_rpc_kernel_Implementatio[14][2]]],
       [0,
        Async_rpc_kernel_Connection[1],
        Async_rpc_kernel_Connection[2],
        Async_rpc_kernel_Connection[3],
        Async_rpc_kernel_Connection[4],
        Async_rpc_kernel_Connection[5],
        Async_rpc_kernel_Connection[6],
        Async_rpc_kernel_Connection[7],
        Async_rpc_kernel_Connection[8],
        Async_rpc_kernel_Connection[9],
        Async_rpc_kernel_Connection[10],
        Async_rpc_kernel_Connection[11],
        Async_rpc_kernel_Connection[12],
        Async_rpc_kernel_Connection[13],
        Async_rpc_kernel_Connection[14],
        Async_rpc_kernel_Connection[15],
        Async_rpc_kernel_Connection[16],
        Async_rpc_kernel_Connection[17],
        Async_rpc_kernel_Connection[18],
        Async_rpc_kernel_Connection[19],
        Async_rpc_kernel_Connection[20],
        Async_rpc_kernel_Connection[21],
        Async_rpc_kernel_Connection[22],
        Async_rpc_kernel_Connection[23]],
       [0,
        create,
        name,
        version,
        description,
        query_type_id,
        response_type_id,
        bin_query,
        bin_response,
        shapes,
        implement,
        implement_with_auth,
        implement$0,
        implement_with_auth$0,
        dispatch,
        rpc_result_to_or_error$0,
        dispatch$0,
        dispatch_exn,
        [0,
         Async_rpc_kernel_Implementatio[14][1],
         schedule_dispatch,
         schedule_dispatch_with_metadat,
         dispatch$1,
         implement$1,
         implement$2,
         implement_for_tag_and_version,
         implement_for_tag_and_version$0]],
       [0,
        bin_size_t,
        bin_write_t,
        bin_read_t$0,
        bin_read_t,
        bin_shape_t,
        bin_writer_t,
        bin_reader_t,
        bin_t,
        compare,
        t_of_sexp,
        sexp_of_t,
        [0,
         [0,
          bin_size_t$0,
          bin_write_t$0,
          bin_read_t$2,
          bin_read_t$1,
          bin_shape_t$0,
          bin_writer_t$0,
          bin_reader_t$0,
          bin_t$0,
          compare$0,
          t_of_sexp$0,
          sexp_of_t$0]]],
       Pipe_message,
       Pipe_response,
       [0,
        [0],
        [0, id],
        create$2,
        bin_query$0,
        bin_response$0,
        bin_error,
        shapes$2,
        implement$6,
        implement_with_auth$2,
        [0,
         write,
         write_without_pushback,
         close,
         closed,
         flushed,
         is_closed,
         Expert,
         [0,
          Buffer,
          create$4,
          flushed_or_closed,
          flushed$0,
          add_exn,
          remove,
          write$1,
          write_without_pushback$1,
          to_list,
          length,
          [0, write$0, write_without_pushback$0]]],
        implement_direct$0,
        implement_direct_with_auth$0,
        dispatch$7,
        dispatch$6,
        dispatch_exn$1,
        dispatch_iter,
        Expert$0,
        abort,
        close_reason,
        client_pushes_back,
        name$1,
        version$1,
        description$1,
        query_type_id$0,
        response_type_id$0,
        error_type_id],
       [0,
        [0],
        [0, id],
        create$5,
        bin_query$1,
        bin_state,
        bin_update,
        bin_error$0,
        shapes$3,
        implement$5,
        implement_with_auth$1,
        implement_direct,
        implement_direct_with_auth,
        dispatch$8,
        dispatch_fold,
        dispatch$9,
        abort,
        close_reason,
        client_pushes_back$0,
        name$1,
        version$1,
        description$1,
        query_type_id$1,
        state_type_id,
        update_type_id,
        error_type_id$0],
       [0,
        create$0,
        name$0,
        version$0,
        description$0,
        msg_type_id,
        bin_msg,
        shapes$0,
        implement$3,
        dispatch$2,
        rpc_result_to_or_error$1,
        dispatch$3,
        dispatch_exn$0,
        [0, implement$4, dispatch$4, schedule_dispatch$0]],
       Any,
       [0,
        [0, create, description, bin_query, bin_response],
        [0, create$2, description$1, bin_query$0, bin_response$0, bin_error],
        [0,
         create$5,
         description$1,
         bin_query$1,
         bin_state,
         bin_update,
         bin_error$0],
        [0, create$0, description$0, bin_msg]]];
   runtime.caml_register_global
    (149, Async_rpc_kernel_Rpc, cst_Async_rpc_kernel_Rpc$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_rpc_kernel__Versioned_rpc
//# unitInfo: Requires: Async_kernel, Async_kernel__Deferred, Async_kernel__Deferred_or_error, Async_kernel__Deferred_result, Async_kernel__Monitor, Async_kernel__Pipe, Async_rpc_kernel__Menu, Async_rpc_kernel__Protocol, Async_rpc_kernel__Rpc, Async_rpc_kernel__Rpc_shapes, Base__Monad, Bin_prot__Common, Bin_prot__Shape, Bin_shape, Core, Core__Error, Core__Hashtbl, Core__Int, Core__List, Core__Map, Core__Memo, Core__Option, Core__Or_error, Core__Result, Core__String, Eager_deferred, Expect_test_config, Inline_test_config, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_expect_runtime__Test_block, Ppx_expect_runtime__Test_node, Ppx_expect_runtime__Types, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst = "",
    cst_Int_Set_equal_Caller_versi$5 =
      "<<Int.Set.equal (Caller.versions ()) (Callee.ve[...]>>",
    cst_Async_rpc_kernel_Versioned$0 = "Async_rpc_kernel__Versioned_rpc",
    cst_Rpc = "Rpc",
    cst_Version = "Version",
    cst_async_rpc_kernel$0 = "async_rpc_kernel",
    cst_query$1 = "query",
    cst_response$1 = "response",
    cst_src_versioned_rpc_ml$7 = "src/versioned_rpc.ml",
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   function caml_call14
   (f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13){
    return (f.l >= 0 ? f.l : f.l = f.length) == 14
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13)
            : runtime.caml_call_gen
              (f,
               [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    name$0 = "__Versioned_rpc.Shape_menu",
    Core_Int = global_data.Core__Int,
    Inline_test_config = global_data.Inline_test_config,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Core_Result = global_data.Core__Result,
    Async_rpc_kernel_Rpc = global_data.Async_rpc_kernel__Rpc,
    Core_Hashtbl = global_data.Core__Hashtbl,
    Core_Error = global_data.Core__Error,
    Core_List = global_data.Core__List,
    Async_kernel_Pipe = global_data.Async_kernel__Pipe,
    Async_kernel = global_data.Async_kernel,
    Core_Option = global_data.Core__Option,
    Core_Or_error = global_data.Core__Or_error,
    Async_kernel_Deferred_or_error =
      global_data.Async_kernel__Deferred_or_error,
    Core = global_data.Core,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Bin_shape = global_data.Bin_shape,
    Ppx_expect_runtime_Types = global_data.Ppx_expect_runtime__Types,
    Async_rpc_kernel_Rpc_shapes = global_data.Async_rpc_kernel__Rpc_shapes,
    Bin_prot_Common = global_data.Bin_prot__Common,
    Eager_deferred = global_data.Eager_deferred,
    Async_rpc_kernel_Protocol = global_data.Async_rpc_kernel__Protocol,
    Core_Memo = global_data.Core__Memo,
    Async_kernel_Monitor = global_data.Async_kernel__Monitor,
    Core_Map = global_data.Core__Map,
    Async_kernel_Deferred = global_data.Async_kernel__Deferred,
    Async_kernel_Deferred_result = global_data.Async_kernel__Deferred_result,
    Core_String = global_data.Core__String,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Async_rpc_kernel_Menu = global_data.Async_rpc_kernel__Menu,
    Expect_test_config = global_data.Expect_test_config,
    Ppx_expect_runtime_Test_block = global_data.Ppx_expect_runtime__Test_block,
    Ppx_expect_runtime_Test_node = global_data.Ppx_expect_runtime__Test_node,
    Base_Monad = global_data.Base__Monad;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_rpc_kernel_Versioned$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_rpc_kernel$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_versioned_rpc_ml$7);
   caml_call2
    (Ppx_inline_test_lib[6], cst_async_rpc_kernel$0, "versioned_rpc.ml");
   var
    cst_src_versioned_rpc_ml$4 = cst_src_versioned_rpc_ml$7,
    cst_Int_Set_equal_Caller_versi$4 = cst_Int_Set_equal_Caller_versi$5,
    cst_src_versioned_rpc_ml$3 = cst_src_versioned_rpc_ml$7,
    cst_Int_Set_equal_Caller_versi$3 = cst_Int_Set_equal_Caller_versi$5,
    cst_src_versioned_rpc_ml$2 = cst_src_versioned_rpc_ml$7,
    cst_Int_Set_equal_Caller_versi$2 = cst_Int_Set_equal_Caller_versi$5,
    cst_src_versioned_rpc_ml$1 = cst_src_versioned_rpc_ml$7,
    cst_Int_Set_equal_Caller_versi$1 = cst_Int_Set_equal_Caller_versi$5,
    cst_src_versioned_rpc_ml$0 = cst_src_versioned_rpc_ml$7,
    cst_Int_Set_equal_Caller_versi$0 = cst_Int_Set_equal_Caller_versi$5,
    cst_src_versioned_rpc_ml = cst_src_versioned_rpc_ml$7,
    cst_Int_Set_equal_Caller_versi = cst_Int_Set_equal_Caller_versi$5,
    _D_ = [0, 1],
    _C_ = [0, 1],
    cst_Cannot_use_Direct_with_Reg = "Cannot use Direct with Register_raw",
    _B_ = [0, 0],
    _A_ = [0, 1],
    _z_ = [0, 1],
    _p_ = [0, 0, 0],
    _o_ = [0, 1],
    _n_ = [0, 1],
    cst_cannot_use_direct_interfac =
      "cannot use direct interface with Register_raw",
    _m_ = [0, 0],
    _l_ = [0, 1],
    _k_ = [0, 1],
    cst_Rpc_names_don_t_agree = "Rpc names don't agree",
    cst_Version_already_exists = "Version already exists",
    cst_unknown_rpc_version = "unknown rpc version",
    _i_ = [0, cst_Rpc],
    _j_ = [0, cst_Version],
    cst_multiple_rpc_registrations = "multiple rpc registrations",
    _a_ = [0, "Update"],
    _d_ = [0, "State"],
    _e_ = [0, "Error"],
    _f_ = [0, "Msg"],
    _g_ = [0, "Response"],
    _h_ = [0, "Query"],
    _b_ = [0, cst_Rpc],
    _c_ = [0, cst_Version],
    cst_type_conversion_failure = "type conversion failure",
    cst_query = cst_query$1,
    cst_src_versioned_rpc_ml_704_8 = "src/versioned_rpc.ml:704:8",
    cst_query$0 = cst_query$1,
    ___ =
      [0,
       [0,
        [0, " 86ba5df747eec837f0b391dd49f33f9e ", [0, cst]],
        [0, 21802, 21821, 21859]]],
    _$_ = [0, 21802, 21812, 21860],
    _ae_ = [0, 21728, 21736, 21860],
    _af_ = [0, 21802, 21860, 21860],
    _ag_ = [0, 21728, 21736, 21860],
    cst_src_versioned_rpc_ml$6 = cst_src_versioned_rpc_ml$7,
    cst_response = cst_response$1,
    cst_src_versioned_rpc_ml_711_8 = "src/versioned_rpc.ml:711:8",
    cst_response$0 = cst_response$1,
    _Q_ =
      [0,
       [0,
        [0, " b4bdc01b7ead907e6d0d3f3d89700f1b ", [0, cst]],
        [0, 22059, 22078, 22116]]],
    _R_ = [0, 22059, 22069, 22117],
    _W_ = [0, 21982, 21990, 22117],
    _X_ = [0, 22059, 22117, 22117],
    _Y_ = [0, 21982, 21990, 22117],
    cst_src_versioned_rpc_ml$5 = cst_src_versioned_rpc_ml$7,
    cst_async_rpc_kernel = cst_async_rpc_kernel$0,
    cst_Async_rpc_kernel_Versioned = cst_Async_rpc_kernel_Versioned$0;
   function write(param, input){
    var
     writer = param[2],
     convert = param[1],
     _eF_ = caml_call1(convert, input);
    return caml_call2(Async_rpc_kernel_Rpc[10][10][1], writer, _eF_);
   }
   function write_without_pushback(param, input){
    var
     writer = param[2],
     convert = param[1],
     _eE_ = caml_call1(convert, input);
    return caml_call2(Async_rpc_kernel_Rpc[10][10][2], writer, _eE_);
   }
   function close(param){
    var writer = param[2];
    return caml_call1(Async_rpc_kernel_Rpc[10][10][3], writer);
   }
   function is_closed(param){
    var writer = param[2];
    return caml_call1(Async_rpc_kernel_Rpc[10][10][6], writer);
   }
   function closed(param){
    var writer = param[2];
    return caml_call1(Async_rpc_kernel_Rpc[10][10][4], writer);
   }
   function failed_conversion(x){
    function _eD_(param){
     var
      arg3_006 = param[4],
      arg2_005 = param[3],
      arg1_004 = param[2],
      arg0_003 = param[1],
      res0_007 =
        3854881 <= arg0_003
         ? 389604849
           <= arg0_003
           ? 999946793 <= arg0_003 ? _a_ : _d_
           : 106380200 <= arg0_003 ? _e_ : _f_
         : -71406943 <= arg0_003 ? _g_ : _h_,
      v_001 = arg1_004[2],
      res1_008 = [1, [0, _b_, [0, caml_call1(Core[558], v_001), 0]]],
      v_002 = arg2_005[2],
      res2_009 = [1, [0, _c_, [0, caml_call1(Core[389], v_002), 0]]],
      res3_010 = caml_call1(Core[625], arg3_006);
     return [1, [0, res0_007, [0, res1_008, [0, res2_009, [0, res3_010, 0]]]]];
    }
    return caml_call5
            (Core_Error[19], 0, 0, cst_type_conversion_failure, x, _eD_);
   }
   function multiple_registrations(x){
    function _eC_(param){
     var
      arg1_014 = param[2],
      arg0_013 = param[1],
      v_011 = arg0_013[2],
      res0_015 = [1, [0, _i_, [0, caml_call1(Core[558], v_011), 0]]],
      v_012 = arg1_014[2],
      res1_016 = [1, [0, _j_, [0, caml_call1(Core[389], v_012), 0]]];
     return [1, [0, res0_015, [0, res1_016, 0]]];
    }
    return caml_call5
            (Core_Error[19], 0, 0, cst_multiple_rpc_registrations, x, _eC_);
   }
   function name(r){return r[1];}
   function create(name){return [0, name, Core_Int[98][5]];}
   function add(param, rpc, adapter){
    var
     adapters = param[2],
     name = param[1],
     _ey_ = caml_call1(Async_rpc_kernel_Rpc[6][2], rpc);
    if(caml_call2(Core_String[144], name, _ey_)){
     var
      _ez_ =
        function(param){
         var
          arg1_022 = param[2],
          arg0_021 = param[1],
          res0_023 = caml_call1(Core[558], arg0_021),
          res1_024 = caml_call1(Core[558], arg1_022);
         return [1, [0, res0_023, [0, res1_024, 0]]];
        },
      _eA_ = [0, name, caml_call1(Async_rpc_kernel_Rpc[6][2], rpc)];
     return caml_call5
             (Core_Or_error[44], 0, 0, cst_Rpc_names_don_t_agree, _eA_, _ez_);
    }
    var version = caml_call1(Async_rpc_kernel_Rpc[6][3], rpc);
    if(caml_call2(Core_Map[44], adapters, version)){
     var
      _eB_ =
        function(param){
         var
          arg1_026 = param[2],
          arg0_025 = param[1],
          res0_027 = caml_call1(Core[558], arg0_025),
          res1_028 = caml_call1(Core[389], arg1_026);
         return [1, [0, res0_027, [0, res1_028, 0]]];
        };
     return caml_call5
             (Core_Or_error[44],
              0,
              0,
              cst_Version_already_exists,
              [0, name, version],
              _eB_);
    }
    var adapters$0 = caml_call3(Core_Map[38], adapters, version, adapter);
    return [0, [0, name, adapters$0]];
   }
   function add_rpc_version(t, old_rpc, upgrade, downgrade){
    function adapt(fn){
     function adapted(state, old_query){
      function _ew_(result){return caml_call1(downgrade, result);}
      var _ex_ = caml_call2(fn, state, caml_call1(upgrade, old_query));
      return caml_call2(Async_kernel[23][3], _ex_, _ew_);
     }
     return caml_call3(Async_rpc_kernel_Rpc[6][10], 0, old_rpc, adapted);
    }
    return add(t, old_rpc, [0, adapt]);
   }
   function add_rpc_version_with_failure
   (t, old_rpc, upgrade_or_error, downgrade_or_error){
    function adapt(fn){
     function _en_(state, old_query){
      function _eo_(param){
       if(0 === param[0]){var value = param[1]; return [0, value];}
       var error = param[1];
       return [1, caml_call1(Core_Error[12], error)];
      }
      function _ep_(query){
       function _et_(response){
        var _ev_ = caml_call1(downgrade_or_error, response);
        return caml_call1(Async_kernel_Deferred[12], _ev_);
       }
       var _eu_ = caml_call2(fn, state, query);
       return caml_call2(Async_kernel_Deferred_result[3][4][2], _eu_, _et_);
      }
      var
       _eq_ = caml_call1(upgrade_or_error, old_query),
       _er_ = caml_call1(Async_kernel_Deferred[12], _eq_),
       _es_ = caml_call2(Async_kernel_Deferred_result[3][4][2], _er_, _ep_);
      return caml_call2(Async_kernel[23][3], _es_, _eo_);
     }
     return caml_call3(Async_rpc_kernel_Rpc[6][10], 0, old_rpc, _en_);
    }
    return add(t, old_rpc, [0, adapt]);
   }
   function add_version
   (t, version, bin_query, bin_response, upgrade, downgrade){
    var
     rpc =
       caml_call5
        (Async_rpc_kernel_Rpc[6][1],
         t[1],
         version,
         bin_query,
         bin_response,
         0);
    return add_rpc_version(t, rpc, upgrade, downgrade);
   }
   function add_version_with_failure
   (t, version, bin_query, bin_response, upgrade, downgrade){
    var
     rpc =
       caml_call5
        (Async_rpc_kernel_Rpc[6][1],
         t[1],
         version,
         bin_query,
         bin_response,
         2);
    return add_rpc_version_with_failure(t, rpc, upgrade, downgrade);
   }
   function implement(t, fn){
    function _el_(param){var adapt = param[1]; return caml_call1(adapt, fn);}
    var _em_ = caml_call1(Core_Map[80], t[2]);
    return caml_call2(Core_List[51], _em_, _el_);
   }
   function Make(Model){
    var name = Model[1], registry = caml_call3(Core_Int[103][5], 0, _k_, 0);
    function implement_multi(log_not_previously_seen_versio, f){
     if(log_not_previously_seen_versio)
      var
       f$0 = log_not_previously_seen_versio[1],
       _eh_ = caml_call1(f$0, name),
       log_version = caml_call3(Core_Memo[1], 0, 0, _eh_);
     else
      var log_version = function(_ek_){return 0;};
     function _ei_(param){
      var i = param[1];
      return caml_call2(i[1], log_version, f);
     }
     var _ej_ = caml_call1(Core_Hashtbl[68], registry);
     return caml_call2(Core_List[51], _ej_, _ei_);
    }
    function rpcs(param){
     function _ef_(param){var rpc = param[2]; return rpc;}
     var _eg_ = caml_call1(Core_Hashtbl[68], registry);
     return caml_call2(Core_List[51], _eg_, _ef_);
    }
    function versions(param){
     var _ee_ = caml_call1(Core_Hashtbl[67], registry);
     return caml_call1(Core_Int[99][8], _ee_);
    }
    function Register(Version_i){
     var
      rpc =
        caml_call5
         (Async_rpc_kernel_Rpc[6][1],
          name,
          Version_i[17],
          Version_i[8],
          Version_i[16],
          0);
     function implement(log_version, f){
      function _d9_(s, q){
       caml_call1(log_version, Version_i[17]);
       function _d__(param){return caml_call1(Version_i[18], q);}
       var match = caml_call1(Core_Result[54], _d__);
       if(0 === match[0]){
        var
         q$0 = match[1],
         _d$_ =
           function(r){
            function _ec_(param){return caml_call1(Version_i[19], r);}
            var match = caml_call1(Core_Result[54], _ec_);
            if(0 === match[0]){var r$0 = match[1]; return r$0;}
            var
             exn = match[1],
             _ed_ =
               failed_conversion
                ([0,
                  -71406943,
                  [0, 4102853, name],
                  [0, -901574920, Version_i[17]],
                  exn]);
            return caml_call1(Core_Error[30], _ed_);
           },
         _ea_ = caml_call3(f, s, Version_i[17], q$0);
        return caml_call2(Async_kernel[23][3], _ea_, _d$_);
       }
       var
        exn = match[1],
        _eb_ =
          failed_conversion
           ([0,
             -250086680,
             [0, 4102853, name],
             [0, -901574920, Version_i[17]],
             exn]);
       return caml_call1(Core_Error[30], _eb_);
      }
      return caml_call3(Async_rpc_kernel_Rpc[6][10], 0, rpc, _d9_);
     }
     if(caml_call2(Core_Hashtbl[56], registry, Version_i[17])){
      var
       _d8_ =
         multiple_registrations
          ([0, [0, 4102853, name], [0, -901574920, Version_i[17]]]);
      caml_call1(Core_Error[30], _d8_);
     }
     else
      caml_call3
       (Core_Hashtbl[37],
        registry,
        Version_i[17],
        [0, [0, implement], [0, rpc]]);
     return [0, rpc];
    }
    return [0, name, , implement_multi, rpcs, versions, Register];
   }
   function Make$0(Model){
    var name = Model[1], registry = caml_call3(Core_Int[103][5], 0, _l_, 0);
    function implement_multi_gen(log_not_previously_seen_versio, impl){
     if(log_not_previously_seen_versio)
      var
       f = log_not_previously_seen_versio[1],
       _d4_ = caml_call1(f, name),
       log_version = caml_call3(Core_Memo[1], 0, 0, _d4_);
     else
      var log_version = function(_d7_){return 0;};
     function _d5_(param){
      var i = param[1];
      return caml_call2(i[1], log_version, impl);
     }
     var _d6_ = caml_call1(Core_Hashtbl[68], registry);
     return caml_call2(Core_List[51], _d6_, _d5_);
    }
    function implement_multi(log_not_previously_seen_versio, f){
     return implement_multi_gen(log_not_previously_seen_versio, [0, f]);
    }
    function implement_direct_multi(log_not_previously_seen_versio, f){
     return implement_multi_gen(log_not_previously_seen_versio, [1, f]);
    }
    function rpcs(param){
     function _d2_(param){var rpc = param[2]; return rpc;}
     var _d3_ = caml_call1(Core_Hashtbl[68], registry);
     return caml_call2(Core_List[51], _d3_, _d2_);
    }
    function versions(param){
     var _d1_ = caml_call1(Core_Hashtbl[67], registry);
     return caml_call1(Core_Int[99][8], _d1_);
    }
    function Make_shared(Version_i, Convert){
     var
      _dG_ = Version_i[24],
      _dH_ = Version_i[16],
      _dI_ = Version_i[8],
      _dJ_ = Version_i[25],
      _dK_ = caml_call2(Core_Option[60], Version_i[28], 0),
      rpc =
        caml_call7
         (Async_rpc_kernel_Rpc[10][3], _dK_, name, _dJ_, _dI_, _dH_, _dG_, 0);
     function wrapped_model_of_query(q){
      try{var q$0 = caml_call1(Version_i[26], q); return q$0;}
      catch(exn$0){
       var
        exn = caml_wrap_exception(exn$0),
        _d0_ =
          failed_conversion
           ([0,
             -71406943,
             [0, 4102853, name],
             [0, -901574920, Version_i[25]],
             exn]);
       return caml_call1(Core_Error[30], _d0_);
      }
     }
     function wrapped_error_of_model(error){
      try{var error$0 = caml_call1(Version_i[27], error);}
      catch(exn$0){
       var
        exn = caml_wrap_exception(exn$0),
        _dZ_ =
          failed_conversion
           ([0,
             106380200,
             [0, 4102853, name],
             [0, -901574920, Version_i[25]],
             exn]);
       return caml_call1(Core_Error[30], _dZ_);
      }
      return [1, error$0];
     }
     function implement(log_version, impl){
      if(0 === impl[0]){
       var
        f = impl[1],
        _dM_ =
          function(s, q){
           caml_call1(log_version, Version_i[25]);
           function _dR_(param){
            if(0 === param[0]){
             var
              pipe = param[1],
              _dU_ =
                function(exn){
                 var
                  _dY_ =
                    failed_conversion
                     ([0,
                       -71406943,
                       [0, 4102853, name],
                       [0, -901574920, Version_i[25]],
                       exn]);
                 return caml_call1(Core_Error[30], _dY_);
                },
              _dV_ =
                function(param){
                 var _dX_ = [0, caml_call1(Convert[2], pipe)];
                 return caml_call1(Async_kernel[20], _dX_);
                };
             return caml_call5(Async_kernel_Monitor[19], 0, 0, 0, _dV_, _dU_);
            }
            var error = param[1], _dW_ = wrapped_error_of_model(error);
            return caml_call1(Async_kernel[20], _dW_);
           }
           var
            _dS_ = wrapped_model_of_query(q),
            _dT_ = caml_call3(f, s, Version_i[25], _dS_);
           return caml_call2(Async_kernel[23][2], _dT_, _dR_);
          };
       return caml_call3(Async_rpc_kernel_Rpc[10][8], 0, rpc, _dM_);
      }
      var
       f$0 = impl[1],
       convert_elt = caml_call1(Core_Or_error[40], Convert[1]);
      function _dN_(s, q, dsw){
       var writer = [0, convert_elt, dsw];
       function _dO_(param){
        if(0 === param[0]) return _m_;
        var error = param[1];
        return wrapped_error_of_model(error);
       }
       var
        _dP_ = wrapped_model_of_query(q),
        _dQ_ = caml_call4(f$0, s, Version_i[25], _dP_, writer);
       return caml_call2(Async_kernel[23][3], _dQ_, _dO_);
      }
      return caml_call3(Async_rpc_kernel_Rpc[10][11], 0, rpc, _dN_);
     }
     if(caml_call2(Core_Hashtbl[56], registry, Version_i[25])){
      var
       _dL_ =
         multiple_registrations
          ([0, [0, 4102853, name], [0, -901574920, Version_i[25]]]);
      caml_call1(Core_Error[30], _dL_);
     }
     else
      caml_call3
       (Core_Hashtbl[37],
        registry,
        Version_i[25],
        [0, [0, implement], [1, rpc]]);
     return [0, rpc];
    }
    function Register_raw(Version_i){
     var
      convert_elt =
        caml_call1(Core_Or_error[46], cst_cannot_use_direct_interfac),
      convert_pipe = Version_i[29];
     return Make_shared
             ([0,
               Version_i[1],
               Version_i[2],
               Version_i[3],
               Version_i[4],
               Version_i[5],
               Version_i[6],
               Version_i[7],
               Version_i[8],
               Version_i[9],
               Version_i[10],
               Version_i[11],
               Version_i[12],
               Version_i[13],
               Version_i[14],
               Version_i[15],
               Version_i[16],
               Version_i[17],
               Version_i[18],
               Version_i[19],
               Version_i[20],
               Version_i[21],
               Version_i[22],
               Version_i[23],
               Version_i[24],
               Version_i[25],
               Version_i[26],
               Version_i[27],
               Version_i[28]],
              [0, convert_elt, convert_pipe]);
    }
    function Register(Version_i){
     var convert_elt = [0, Version_i[29]];
     function convert_pipe(pipe){
      return caml_call2(Async_kernel_Pipe[60], pipe, Version_i[29]);
     }
     return Make_shared
             ([0,
               Version_i[1],
               Version_i[2],
               Version_i[3],
               Version_i[4],
               Version_i[5],
               Version_i[6],
               Version_i[7],
               Version_i[8],
               Version_i[9],
               Version_i[10],
               Version_i[11],
               Version_i[12],
               Version_i[13],
               Version_i[14],
               Version_i[15],
               Version_i[16],
               Version_i[17],
               Version_i[18],
               Version_i[19],
               Version_i[20],
               Version_i[21],
               Version_i[22],
               Version_i[23],
               Version_i[24],
               Version_i[25],
               Version_i[26],
               Version_i[27],
               Version_i[28]],
              [0, convert_elt, convert_pipe]);
    }
    return [0,
            name,
            ,
            ,
            implement_multi,
            implement_direct_multi,
            rpcs,
            versions,
            ,
            Register_raw,
            Register];
   }
   function Make$1(Model){
    var name = Model[1], registry = caml_call3(Core_Int[103][5], 0, _n_, 0);
    function implement_multi(log_not_previously_seen_versio, f){
     if(log_not_previously_seen_versio)
      var
       f$0 = log_not_previously_seen_versio[1],
       _dC_ = caml_call1(f$0, name),
       log_version = caml_call3(Core_Memo[1], 0, 0, _dC_);
     else
      var log_version = function(_dF_){return 0;};
     function _dD_(param){
      var i = param[1];
      return caml_call2(i[1], log_version, f);
     }
     var _dE_ = caml_call1(Core_Hashtbl[68], registry);
     return caml_call2(Core_List[51], _dE_, _dD_);
    }
    function rpcs(param){
     function _dA_(param){var rpc = param[2]; return rpc;}
     var _dB_ = caml_call1(Core_Hashtbl[68], registry);
     return caml_call2(Core_List[51], _dB_, _dA_);
    }
    function versions(param){
     var _dz_ = caml_call1(Core_Hashtbl[67], registry);
     return caml_call1(Core_Int[99][8], _dz_);
    }
    function Register_raw(Version_i){
     var
      _dh_ = Version_i[32],
      _di_ = Version_i[24],
      _dj_ = Version_i[16],
      _dk_ = Version_i[8],
      _dl_ = Version_i[33],
      _dm_ = caml_call2(Core_Option[60], Version_i[37], 0),
      rpc =
        caml_call8
         (Async_rpc_kernel_Rpc[11][3],
          _dm_,
          name,
          _dl_,
          _dk_,
          _dj_,
          _di_,
          _dh_,
          0);
     function implement(log_version, f){
      function _do_(s, q){
       caml_call1(log_version, Version_i[33]);
       try{var q$0 = caml_call1(Version_i[34], q);}
       catch(exn$0){
        var
         exn = caml_wrap_exception(exn$0),
         _dp_ =
           failed_conversion
            ([0,
              -71406943,
              [0, 4102853, name],
              [0, -901574920, Version_i[33]],
              exn]);
        return caml_call1(Core_Error[30], _dp_);
       }
       function _dq_(param){
        if(0 === param[0]){
         var match = param[1], pipe = match[2], model_state = match[1];
         try{
          var
           state$0 = caml_call1(Version_i[35], model_state),
           state = state$0;
         }
         catch(exn$0){
          var
           exn = caml_wrap_exception(exn$0),
           _ds_ =
             failed_conversion
              ([0,
                389604849,
                [0, 4102853, name],
                [0, -901574920, Version_i[33]],
                exn]),
           state = caml_call1(Core_Error[30], _ds_);
         }
         var
          _dt_ =
            function(exn){
             var
              _dy_ =
                failed_conversion
                 ([0,
                   999946793,
                   [0, 4102853, name],
                   [0, -901574920, Version_i[33]],
                   exn]);
             return caml_call1(Core_Error[30], _dy_);
            },
          _du_ =
            function(param){
             var
              _dx_ =
                [0, [0, state, caml_call2(Version_i[38], model_state, pipe)]];
             return caml_call1(Async_kernel[20], _dx_);
            };
         return caml_call5(Async_kernel_Monitor[19], 0, 0, 0, _du_, _dt_);
        }
        var error = param[1];
        a:
        {
         try{var error$0 = caml_call1(Version_i[36], error);}
         catch(exn){
          var
           exn$0 = caml_wrap_exception(exn),
           _dv_ =
             failed_conversion
              ([0,
                106380200,
                [0, 4102853, name],
                [0, -901574920, Version_i[33]],
                exn$0]),
           _dw_ = caml_call1(Core_Error[30], _dv_);
          break a;
         }
         var _dw_ = [1, error$0];
        }
        return caml_call1(Async_kernel[20], _dw_);
       }
       var _dr_ = caml_call3(f, s, Version_i[33], q$0);
       return caml_call2(Async_kernel[23][2], _dr_, _dq_);
      }
      return caml_call3(Async_rpc_kernel_Rpc[11][9], 0, rpc, _do_);
     }
     if(caml_call2(Core_Hashtbl[56], registry, Version_i[33])){
      var
       _dn_ =
         multiple_registrations
          ([0, [0, 4102853, name], [0, -901574920, Version_i[33]]]);
      caml_call1(Core_Error[30], _dn_);
     }
     else
      caml_call3
       (Core_Hashtbl[37],
        registry,
        Version_i[33],
        [0, [0, implement], [2, rpc]]);
     return [0, rpc];
    }
    function Register(Version_i){
     var
      bin_shape_query = Version_i[1],
      bin_size_query = Version_i[2],
      bin_write_query = Version_i[3],
      bin_writer_query = Version_i[4],
      bin_read_query = Version_i[5],
      bin_read_query$0 = Version_i[6],
      bin_reader_query = Version_i[7],
      bin_query = Version_i[8],
      bin_shape_state = Version_i[9],
      bin_size_state = Version_i[10],
      bin_write_state = Version_i[11],
      bin_writer_state = Version_i[12],
      bin_read_state = Version_i[13],
      bin_read_state$0 = Version_i[14],
      bin_reader_state = Version_i[15],
      bin_state = Version_i[16],
      bin_shape_update = Version_i[17],
      bin_size_update = Version_i[18],
      bin_write_update = Version_i[19],
      bin_writer_update = Version_i[20],
      bin_read_update = Version_i[21],
      bin_read_update$0 = Version_i[22],
      bin_reader_update = Version_i[23],
      bin_update = Version_i[24],
      bin_shape_error = Version_i[25],
      bin_size_error = Version_i[26],
      bin_write_error = Version_i[27],
      bin_writer_error = Version_i[28],
      bin_read_error = Version_i[29],
      bin_read_error$0 = Version_i[30],
      bin_reader_error = Version_i[31],
      bin_error = Version_i[32],
      version = Version_i[33],
      model_of_query = Version_i[34],
      state_of_model = Version_i[35],
      error_of_model = Version_i[36],
      client_pushes_back = Version_i[37],
      _dg_ = Version_i[38];
     function update_of_model(state, pipe){
      return caml_call2(Async_kernel_Pipe[60], pipe, _dg_);
     }
     var
      include =
        Register_raw
         ([0,
           bin_shape_query,
           bin_size_query,
           bin_write_query,
           bin_writer_query,
           bin_read_query,
           bin_read_query$0,
           bin_reader_query,
           bin_query,
           bin_shape_state,
           bin_size_state,
           bin_write_state,
           bin_writer_state,
           bin_read_state,
           bin_read_state$0,
           bin_reader_state,
           bin_state,
           bin_shape_update,
           bin_size_update,
           bin_write_update,
           bin_writer_update,
           bin_read_update,
           bin_read_update$0,
           bin_reader_update,
           bin_update,
           bin_shape_error,
           bin_size_error,
           bin_write_error,
           bin_writer_error,
           bin_read_error,
           bin_read_error$0,
           bin_reader_error,
           bin_error,
           version,
           model_of_query,
           state_of_model,
           error_of_model,
           client_pushes_back,
           update_of_model]),
      rpc = include[1];
     return [0, rpc];
    }
    return [0,
            name,
            ,
            implement_multi,
            rpcs,
            versions,
            Register_raw,
            Register];
   }
   function Make$2(Model){
    var name = Model[1], registry = caml_call3(Core_Int[103][5], 0, _o_, 0);
    function implement_multi(log_not_previously_seen_versio, f){
     if(log_not_previously_seen_versio)
      var
       f$0 = log_not_previously_seen_versio[1],
       _dc_ = caml_call1(f$0, name),
       log_version = caml_call3(Core_Memo[1], 0, 0, _dc_);
     else
      var log_version = function(_df_){return 0;};
     function _dd_(param){
      var i = param[1];
      return caml_call2(i[1], log_version, f);
     }
     var _de_ = caml_call1(Core_Hashtbl[68], registry);
     return caml_call2(Core_List[51], _de_, _dd_);
    }
    function rpcs(param){
     function _da_(param){var rpc = param[2]; return rpc;}
     var _db_ = caml_call1(Core_Hashtbl[68], registry);
     return caml_call2(Core_List[51], _db_, _da_);
    }
    function versions(param){
     var _c$_ = caml_call1(Core_Hashtbl[67], registry);
     return caml_call1(Core_Int[99][8], _c$_);
    }
    function Register(Version_i){
     var
      rpc =
        caml_call3
         (Async_rpc_kernel_Rpc[12][1], name, Version_i[9], Version_i[8]);
     function implement(log_version, f){
      function _c8_(s, q){
       caml_call1(log_version, Version_i[9]);
       function _c9_(param){return caml_call1(Version_i[10], q);}
       var match = caml_call1(Core_Result[54], _c9_);
       if(0 === match[0]){
        var q$0 = match[1];
        return caml_call3(f, s, Version_i[9], q$0);
       }
       var
        exn = match[1],
        _c__ =
          failed_conversion
           ([0,
             3854881,
             [0, 4102853, name],
             [0, -901574920, Version_i[9]],
             exn]);
       return caml_call1(Core_Error[30], _c__);
      }
      return caml_call3(Async_rpc_kernel_Rpc[12][8], 0, rpc, _c8_);
     }
     if(caml_call2(Core_Hashtbl[56], registry, Version_i[9])){
      var
       _c7_ =
         multiple_registrations
          ([0, [0, 4102853, name], [0, -901574920, Version_i[9]]]);
      caml_call1(Core_Error[30], _c7_);
     }
     else
      caml_call3
       (Core_Hashtbl[37],
        registry,
        Version_i[9],
        [0, [0, implement], [3, rpc]]);
     return [0, rpc];
    }
    return [0, name, , implement_multi, rpcs, versions, Register];
   }
   var
    sexp_of_t = Async_rpc_kernel_Menu[1],
    version_menu_rpc_name = Async_rpc_kernel_Menu[2],
    With_digests_in_sexp = Async_rpc_kernel_Menu[3],
    supported_rpcs = Async_rpc_kernel_Menu[4],
    mem = Async_rpc_kernel_Menu[6],
    shape_digests = Async_rpc_kernel_Menu[7],
    highest_available_version = Async_rpc_kernel_Menu[8],
    highest_shared_version = Async_rpc_kernel_Menu[9],
    has_some_versions = Async_rpc_kernel_Menu[10],
    of_supported_rpcs = Async_rpc_kernel_Menu[11],
    Stable = Async_rpc_kernel_Menu[12],
    of_v1_response = Async_rpc_kernel_Menu[13],
    of_v2_response = Async_rpc_kernel_Menu[14];
   function create$0(descriptions){
    return caml_call2(of_supported_rpcs, descriptions, 785140586);
   }
   var
    vtag_read = Stable[1][15],
    read = Stable[1][14],
    vtag_read$0 = Stable[1][7],
    read$0 = Stable[1][6],
    rpc =
      caml_call5
       (Async_rpc_kernel_Rpc[6][1],
        Async_rpc_kernel_Menu[2],
        1,
        [0,
         Stable[1][2],
         [0, Stable[1][3], Stable[1][4]],
         [0, read$0, vtag_read$0]],
        [0,
         Stable[1][10],
         [0, Stable[1][11], Stable[1][12]],
         [0, read, vtag_read]],
        0),
    supported_versions = Async_rpc_kernel_Menu[5];
   function add$0(impls){
    var
     menu =
       [246,
        function(_c4_){
         function _c5_(implementation){
          var _c6_ = caml_call1(Async_rpc_kernel_Rpc[3][3], implementation);
          return [0,
                  caml_call1(Async_rpc_kernel_Rpc[3][2], implementation),
                  _c6_];
         }
         return caml_call2(Core_List[51], impls, _c5_);
        }],
     _c0_ =
       [246,
        function(param){
         var
          _c3_ = caml_call1(Async_rpc_kernel_Rpc[6][8], rpc)[1],
          shapes = [0, caml_call1(Async_rpc_kernel_Rpc[6][7], rpc)[1], _c3_];
         return [0,
                 shapes,
                 caml_call1(Async_rpc_kernel_Rpc_shapes[3], shapes)];
        }],
     _c1_ = caml_call1(Async_rpc_kernel_Rpc[6][3], rpc),
     _c2_ = caml_call1(Async_rpc_kernel_Rpc[6][2], rpc),
     implementation =
       [0,
        caml_call1(Async_rpc_kernel_Protocol[1][11], _c2_),
        _c1_,
        [5, menu],
        _c0_,
        _p_];
    return caml_call2(Core[156], impls, [0, implementation, 0]);
   }
   function aux_request(dispatch, conn){
    function _cY_(result){
     return caml_call2(Core_Result[46], result, of_v1_response);
    }
    var _cZ_ = caml_call3(dispatch, rpc, conn, 0);
    return caml_call2(Async_kernel[23][3], _cZ_, _cY_);
   }
   function request(conn){
    function _cW_(param){
     if(! param) return aux_request(Async_rpc_kernel_Rpc[6][16], conn);
     var menu = param[1];
     return caml_call1(Async_kernel[20], [0, menu]);
    }
    var _cX_ = caml_call1(Async_rpc_kernel_Rpc[5][18], conn);
    return caml_call2(Eager_deferred[29][11][4][2], _cX_, _cW_);
   }
   function request$0(conn){
    function _cU_(param){
     if(! param) return aux_request(Async_rpc_kernel_Rpc[6][14], conn);
     var menu = param[1];
     return caml_call1(Async_kernel[20], [0, menu]);
    }
    var _cV_ = caml_call1(Async_rpc_kernel_Rpc[5][19], conn);
    return caml_call2(Eager_deferred[31][3][4][2], _cV_, _cU_);
   }
   function implement$0(f){
    return caml_call3(Async_rpc_kernel_Rpc[6][10], 0, rpc, f);
   }
   var
    Model = [0, name$0],
    include = Make(Model),
    implement_multi = include[3],
    Register = include[6],
    _q_ = Core[603],
    _r_ = [0, [0, caml_call1(Bin_shape[2][1], cst_query), 0, _q_], 0],
    _s_ = caml_call1(Bin_shape[4][1], cst_src_versioned_rpc_ml_704_8),
    group = caml_call2(Bin_prot_Shape[2], _s_, _r_),
    _t_ = caml_call1(Bin_shape[2][1], cst_query$0),
    bin_shape_query =
      caml_call1(caml_call2(Bin_prot_Shape[10], group, _t_), 0),
    bin_size_query = Core[604],
    bin_write_query = Core[606],
    bin_writer_query = [0, bin_size_query, bin_write_query],
    bin_read_query = Core[610],
    bin_read_query$0 = Core[609],
    bin_reader_query = [0, bin_read_query$0, bin_read_query],
    bin_query = [0, bin_shape_query, bin_writer_query, bin_reader_query],
    version = 1;
   if(typeof Ppx_inline_test_lib[3] !== "number"){
    var
     Ppx_expect_test_block$0 =
       caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
     _Z_ =
       function(param){
        var
         _cR_ = caml_call1(Bin_prot_Shape[15], bin_shape_query),
         _cS_ = caml_call1(Bin_shape[19][4], _cR_);
        caml_call1(Core[32], _cS_);
        var _cT_ = caml_call1(Ppx_expect_runtime_Types[4][1], 0);
        return caml_call1(Ppx_expect_test_block$0[2], _cT_);
       },
     _aa_ =
       caml_call3
        (Ppx_expect_runtime_Test_node[1][1],
         [0, Ppx_expect_runtime_Types[1][1]],
         _$_,
         ___),
     _ab_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 0), _aa_], 0],
     _ac_ = caml_call1(Ppx_expect_runtime_Types[4][1], 2),
     _ad_ = caml_call1(Ppx_expect_runtime_Types[4][1], 1);
    caml_call14
     (Ppx_expect_test_block$0[3],
      cst_src_versioned_rpc_ml$6,
      706,
      _ag_,
      _af_,
      _ae_,
      [0, Ppx_expect_runtime_Types[1][1]],
      0,
      _ad_,
      _ac_,
      0,
      0,
      Inline_test_config,
      _ab_,
      _Z_);
   }
   var
    _u_ =
      caml_call1
       (Bin_prot_Shape[3],
        [0,
         Async_rpc_kernel_Rpc[1][34][1][9],
         [0, Async_rpc_kernel_Rpc_shapes[4][1][5], 0]]),
    _v_ = caml_call1(Core[456], _u_),
    _w_ = [0, [0, caml_call1(Bin_shape[2][1], cst_response), 0, _v_], 0],
    _x_ = caml_call1(Bin_shape[4][1], cst_src_versioned_rpc_ml_711_8),
    group$0 = caml_call2(Bin_prot_Shape[2], _x_, _w_),
    _y_ = caml_call1(Bin_shape[2][1], cst_response$0),
    bin_shape_response =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$0, _y_), 0);
   function bin_size_response(v){
    function _cO_(param){
     var
      v2 = param[2],
      v1 = param[1],
      _cP_ = caml_call1(Async_rpc_kernel_Rpc[1][34][1][5], v1),
      size = caml_call2(Bin_prot_Common[23], 0, _cP_),
      _cQ_ = caml_call1(Async_rpc_kernel_Rpc_shapes[4][1][1], v2);
     return caml_call2(Bin_prot_Common[23], size, _cQ_);
    }
    return caml_call2(Core[457], _cO_, v);
   }
   function bin_write_response(buf, pos, v){
    function _cN_(buf, pos, param){
     var
      v2 = param[2],
      v1 = param[1],
      pos$0 = caml_call3(Async_rpc_kernel_Rpc[1][34][1][6], buf, pos, v1);
     return caml_call3(Async_rpc_kernel_Rpc_shapes[4][1][2], buf, pos$0, v2);
    }
    return caml_call4(Core[459], _cN_, buf, pos, v);
   }
   var bin_writer_response = [0, bin_size_response, bin_write_response];
   function bin_read_response(buf, pos_ref, vint){
    function _cM_(buf, pos_ref){
     var
      v1 = caml_call2(Async_rpc_kernel_Rpc[1][34][1][7], buf, pos_ref),
      v2 = caml_call2(Async_rpc_kernel_Rpc_shapes[4][1][3], buf, pos_ref);
     return [0, v1, v2];
    }
    return caml_call3(caml_call1(Core[463], _cM_), buf, pos_ref, vint);
   }
   function bin_read_response$0(buf, pos_ref){
    function _cL_(buf, pos_ref){
     var
      v1 = caml_call2(Async_rpc_kernel_Rpc[1][34][1][7], buf, pos_ref),
      v2 = caml_call2(Async_rpc_kernel_Rpc_shapes[4][1][3], buf, pos_ref);
     return [0, v1, v2];
    }
    return caml_call2(caml_call1(Core[462], _cL_), buf, pos_ref);
   }
   var
    bin_reader_response = [0, bin_read_response$0, bin_read_response],
    bin_response =
      [0, bin_shape_response, bin_writer_response, bin_reader_response];
   if(typeof Ppx_inline_test_lib[3] !== "number"){
    var
     Ppx_expect_test_block =
       caml_call1(Ppx_expect_runtime_Test_block[1], Expect_test_config),
     _P_ =
       function(param){
        var
         _cI_ = caml_call1(Bin_prot_Shape[15], bin_shape_response),
         _cJ_ = caml_call1(Bin_shape[19][4], _cI_);
        caml_call1(Core[32], _cJ_);
        var _cK_ = caml_call1(Ppx_expect_runtime_Types[4][1], 3);
        return caml_call1(Ppx_expect_test_block[2], _cK_);
       },
     _S_ =
       caml_call3
        (Ppx_expect_runtime_Test_node[1][1],
         [0, Ppx_expect_runtime_Types[1][1]],
         _R_,
         _Q_),
     _T_ = [0, [0, caml_call1(Ppx_expect_runtime_Types[4][1], 3), _S_], 0],
     _U_ = caml_call1(Ppx_expect_runtime_Types[4][1], 5),
     _V_ = caml_call1(Ppx_expect_runtime_Types[4][1], 4);
    caml_call14
     (Ppx_expect_test_block[3],
      cst_src_versioned_rpc_ml$5,
      714,
      _Y_,
      _X_,
      _W_,
      [0, Ppx_expect_runtime_Types[1][1]],
      0,
      _V_,
      _U_,
      0,
      0,
      Inline_test_config,
      _T_,
      _P_);
   }
   function model_of_query(_cH_){return _cH_;}
   function response_of_model(_cG_){return _cG_;}
   var
    include$0 =
      Register
       ([0,
         bin_shape_query,
         bin_size_query,
         bin_write_query,
         bin_writer_query,
         bin_read_query$0,
         bin_read_query,
         bin_reader_query,
         bin_query,
         bin_shape_response,
         bin_size_response,
         bin_write_response,
         bin_writer_response,
         bin_read_response$0,
         bin_read_response,
         bin_reader_response,
         bin_response,
         version,
         model_of_query,
         response_of_model]),
    rpc$0 = include$0[1];
   function add$1(impls){
    function _cB_(impl){
     var _cF_ = caml_call1(Async_rpc_kernel_Rpc[3][4], impl);
     return [0, caml_call1(Async_rpc_kernel_Rpc[3][2], impl), _cF_];
    }
    var
     shape_menu = caml_call2(Core_List[51], impls, _cB_),
     shape_menu_impls =
       implement_multi
        (0,
         function(param, _cE_, _cD_){
          return caml_call1(Async_kernel[20], shape_menu);
         }),
     _cC_ = add$0(impls);
    return caml_call2(Core[156], _cC_, shape_menu_impls);
   }
   function request$1(conn){
    return caml_call3(Async_rpc_kernel_Rpc[6][16], rpc$0, conn, 0);
   }
   function menu(r){return r[2];}
   function connection(r){return r[1];}
   function create$1(connection){
    function _cz_(menu){return [0, connection, menu];}
    var _cA_ = request(connection);
    return caml_call2(Async_kernel_Deferred_or_error[19][4][3], _cA_, _cz_);
   }
   function create_directly(connection, menu){return [0, connection, menu];}
   function Make$3(M){
    function with_specific_version
    (version, connection, name, query, dispatcher, registry){
     var match = caml_call2(Core_Hashtbl[56], registry, version);
     if(match){
      var dispatch = match[1][1];
      return caml_call3(dispatcher, dispatch, connection, query);
     }
     var x = [0, name, version];
     function _cx_(param){
      var
       arg1_018 = param[2],
       arg0_017 = param[1],
       res0_019 = caml_call1(Core[558], arg0_017),
       res1_020 = caml_call1(Core[389], arg1_018);
      return [1, [0, res0_019, [0, res1_020, 0]]];
     }
     var
      _cy_ =
        [1,
         caml_call5(Core_Error[19], 0, 0, cst_unknown_rpc_version, x, _cx_)];
     return caml_call1(M[5], _cy_);
    }
    function with_version_menu
    (param, query, name, versions, registry, dispatcher){
     var
      menu = param[2],
      connection = param[1],
      caller_versions = caml_call1(versions, 0),
      match = caml_call3(highest_shared_version, name, menu, caller_versions);
     if(0 === match[0]){
      var version = match[1];
      return with_specific_version
              (version, connection, name, query, dispatcher, registry);
     }
     var e = match[1];
     return caml_call1(M[5], [1, e]);
    }
    return [0, , with_version_menu];
   }
   var
    Async =
      Make$3
       ([0,
         Async_kernel_Deferred[8],
         Async_kernel_Deferred[9],
         Async_kernel_Deferred[10],
         Async_kernel_Deferred[11],
         Async_kernel_Deferred[12],
         Async_kernel_Deferred[13],
         Async_kernel_Deferred[14],
         Async_kernel_Deferred[15],
         Async_kernel_Deferred[21],
         Async_kernel_Deferred[22],
         Async_kernel_Deferred[16]]),
    Direct = Make$3(Base_Monad[11]);
   function Make$4(Model){
    var name = Model[1], registry = caml_call3(Core_Int[103][5], 0, _z_, 0);
    function rpcs(param){
     function _cv_(param){var rpc = param[2]; return rpc;}
     var _cw_ = caml_call1(Core_Hashtbl[68], registry);
     return caml_call2(Core_List[51], _cw_, _cv_);
    }
    function versions(param){
     var _cu_ = caml_call1(Core_Hashtbl[67], registry);
     return caml_call1(Core_Int[99][8], _cu_);
    }
    function dispatch_multi(conn_with_menu, query){
     function _cs_(_ct_){return _ct_;}
     return Async[2].call
             (null, conn_with_menu, query, name, versions, registry, _cs_);
    }
    function Register(Version_i){
     var
      rpc =
        caml_call5
         (Async_rpc_kernel_Rpc[6][1],
          name,
          Version_i[17],
          Version_i[8],
          Version_i[16],
          0);
     function dispatch(conn, mq){
      function _cm_(param){return caml_call1(Version_i[18], mq);}
      var match = caml_call1(Core_Result[54], _cm_);
      if(0 === match[0]){
       var
        q = match[1],
        _cn_ =
          function(result){
           function _cq_(r){
            function _cr_(param){return caml_call2(Version_i[19], mq, r);}
            var match = caml_call1(Core_Result[54], _cr_);
            if(0 === match[0]){var r$0 = match[1]; return [0, r$0];}
            var exn = match[1];
            return [1,
                    failed_conversion
                     ([0,
                       -71406943,
                       [0, 4102853, name],
                       [0, -901574920, Version_i[17]],
                       exn])];
           }
           return caml_call2(Core_Result[27], result, _cq_);
          },
        _co_ = caml_call3(Async_rpc_kernel_Rpc[6][16], rpc, conn, q);
       return caml_call2(Async_kernel[23][3], _co_, _cn_);
      }
      var
       exn = match[1],
       _cp_ =
         [1,
          failed_conversion
           ([0,
             -250086680,
             [0, 4102853, name],
             [0, -901574920, Version_i[17]],
             exn])];
      return caml_call1(Async_kernel[20], _cp_);
     }
     if(caml_call2(Core_Hashtbl[56], registry, Version_i[17])){
      var
       _cl_ =
         multiple_registrations
          ([0, [0, 4102853, name], [0, -901574920, Version_i[17]]]);
      caml_call1(Core_Error[30], _cl_);
     }
     else
      caml_call3
       (Core_Hashtbl[37], registry, Version_i[17], [0, dispatch, [0, rpc]]);
     return [0, rpc];
    }
    function Register$0(Version_i){
     var
      bin_shape_query = Version_i[1],
      bin_size_query = Version_i[2],
      bin_write_query = Version_i[3],
      bin_writer_query = Version_i[4],
      bin_read_query = Version_i[5],
      bin_read_query$0 = Version_i[6],
      bin_reader_query = Version_i[7],
      bin_query = Version_i[8],
      bin_shape_response = Version_i[9],
      bin_size_response = Version_i[10],
      bin_write_response = Version_i[11],
      bin_writer_response = Version_i[12],
      bin_read_response = Version_i[13],
      bin_read_response$0 = Version_i[14],
      bin_reader_response = Version_i[15],
      bin_response = Version_i[16],
      version = Version_i[17],
      query_of_model = Version_i[18],
      _ck_ = Version_i[19];
     function model_of_response(param, r){return caml_call1(_ck_, r);}
     return Register
             ([0,
               bin_shape_query,
               bin_size_query,
               bin_write_query,
               bin_writer_query,
               bin_read_query,
               bin_read_query$0,
               bin_reader_query,
               bin_query,
               bin_shape_response,
               bin_size_response,
               bin_write_response,
               bin_writer_response,
               bin_read_response,
               bin_read_response$0,
               bin_reader_response,
               bin_response,
               version,
               query_of_model,
               model_of_response]);
    }
    return [0, name, , rpcs, versions, dispatch_multi, Register, Register$0];
   }
   function Make$5(Model){
    var name = Model[1], registry = caml_call3(Core_Int[103][5], 0, _A_, 0);
    function rpcs(param){
     function _ci_(param){var rpc = param[2]; return rpc;}
     var _cj_ = caml_call1(Core_Hashtbl[68], registry);
     return caml_call2(Core_List[51], _cj_, _ci_);
    }
    function versions(param){
     var _ch_ = caml_call1(Core_Hashtbl[67], registry);
     return caml_call1(Core_Int[99][8], _ch_);
    }
    function dispatch_iter_multi(conn_with_menu, query, f){
     function _cg_(param, conn, query){
      var dispatch_iter = param[3];
      return caml_call3(dispatch_iter, conn, query, f);
     }
     return Async[2].call
             (null, conn_with_menu, query, name, versions, registry, _cg_);
    }
    function dispatch_multi(conn_with_menu, query){
     function _cf_(param, conn, query){
      var dispatch = param[2];
      return caml_call2(dispatch, conn, query);
     }
     return Async[2].call
             (null, conn_with_menu, query, name, versions, registry, _cf_);
    }
    function abort_multi(conn_with_menu, id){
     function _ce_(param, conn, id){
      var abort = param[1];
      caml_call2(abort, conn, id);
      return _B_;
     }
     return Direct[2].call
             (null, conn_with_menu, id, name, versions, registry, _ce_);
    }
    function Make_shared(Version_i, Convert){
     var
      _bY_ = Version_i[24],
      _bZ_ = Version_i[16],
      _b0_ = Version_i[8],
      _b1_ = Version_i[25],
      _b2_ = caml_call2(Core_Option[60], Version_i[28], 0),
      rpc =
        caml_call7
         (Async_rpc_kernel_Rpc[10][3], _b2_, name, _b1_, _b0_, _bZ_, _bY_, 0);
     function wrapped_query_of_model(q){
      try{var q$0 = caml_call1(Version_i[26], q);}
      catch(exn$0){
       var
        exn = caml_wrap_exception(exn$0),
        _cd_ =
          [1,
           failed_conversion
            ([0,
              -250086680,
              [0, 4102853, name],
              [0, -901574920, Version_i[25]],
              exn])];
       return caml_call1(Async_kernel[20], _cd_);
      }
      return caml_call1(Async_kernel[20], [0, q$0]);
     }
     function convert_result(result, convert_ok){
      if(0 !== result[0]) return result;
      var match = result[1];
      if(0 === match[0]){
       var ok = match[1];
       return [0, [0, caml_call1(convert_ok, ok)]];
      }
      var e = match[1];
      try{var e$0 = caml_call1(Version_i[27], e);}
      catch(exn$0){
       var exn = caml_wrap_exception(exn$0);
       return [1,
               failed_conversion
                ([0,
                  106380200,
                  [0, 4102853, name],
                  [0, -901574920, Version_i[25]],
                  exn])];
      }
      return [0, [1, e$0]];
     }
     function dispatch(conn, q){
      function _b$_(q){
       function _cb_(result){
        return convert_result
                (result,
                 function(param){
                  var id = param[2], pipe = param[1];
                  return [0, caml_call1(Convert[2], pipe), id];
                 });
       }
       var _cc_ = caml_call3(Async_rpc_kernel_Rpc[10][13], rpc, conn, q);
       return caml_call2(Async_kernel[23][3], _cc_, _cb_);
      }
      var _ca_ = wrapped_query_of_model(q);
      return caml_call2(Async_kernel[18], _ca_, _b$_);
     }
     function dispatch_iter(conn, q, f){
      var convert_elt = caml_call1(Core_Or_error[40], Convert[1]);
      function _b4_(q){
       function _b6_(result){
        return convert_result(result, function(_b__){return _b__;});
       }
       function _b7_(message){
        if(0 === message[0])
         var u = message[1], _b9_ = [0, caml_call1(convert_elt, u)];
        else
         var _b9_ = message;
        return caml_call1(f, _b9_);
       }
       var
        _b8_ = caml_call4(Async_rpc_kernel_Rpc[10][16], rpc, conn, q, _b7_);
       return caml_call2(Async_kernel[23][3], _b8_, _b6_);
      }
      var _b5_ = wrapped_query_of_model(q);
      return caml_call2(Async_kernel[18], _b5_, _b4_);
     }
     function abort(conn, id){
      return caml_call3(Async_rpc_kernel_Rpc[10][18], rpc, conn, id);
     }
     if(caml_call2(Core_Hashtbl[56], registry, Version_i[25])){
      var
       _b3_ =
         multiple_registrations
          ([0, [0, 4102853, name], [0, -901574920, Version_i[25]]]);
      caml_call1(Core_Error[30], _b3_);
     }
     else
      caml_call3
       (Core_Hashtbl[37],
        registry,
        Version_i[25],
        [0, [0, abort, dispatch, dispatch_iter], [1, rpc]]);
     return [0, rpc];
    }
    function Register_raw(Version_i){
     var
      convert_elt =
        caml_call1(Core_Or_error[46], cst_Cannot_use_Direct_with_Reg),
      convert_pipe = Version_i[29];
     return Make_shared
             ([0,
               Version_i[1],
               Version_i[2],
               Version_i[3],
               Version_i[4],
               Version_i[5],
               Version_i[6],
               Version_i[7],
               Version_i[8],
               Version_i[9],
               Version_i[10],
               Version_i[11],
               Version_i[12],
               Version_i[13],
               Version_i[14],
               Version_i[15],
               Version_i[16],
               Version_i[17],
               Version_i[18],
               Version_i[19],
               Version_i[20],
               Version_i[21],
               Version_i[22],
               Version_i[23],
               Version_i[24],
               Version_i[25],
               Version_i[26],
               Version_i[27],
               Version_i[28]],
              [0, convert_elt, convert_pipe]);
    }
    function Register(Version_i){
     var convert_elt = [0, Version_i[29]];
     function convert_pipe(rs){
      function _bX_(r){
       try{var r$0 = caml_call1(Version_i[29], r);}
       catch(exn$0){
        var exn = caml_wrap_exception(exn$0);
        return [1,
                failed_conversion
                 ([0,
                   -71406943,
                   [0, 4102853, name],
                   [0, -901574920, Version_i[25]],
                   exn])];
       }
       return [0, r$0];
      }
      return caml_call2(Async_kernel_Pipe[60], rs, _bX_);
     }
     return Make_shared
             ([0,
               Version_i[1],
               Version_i[2],
               Version_i[3],
               Version_i[4],
               Version_i[5],
               Version_i[6],
               Version_i[7],
               Version_i[8],
               Version_i[9],
               Version_i[10],
               Version_i[11],
               Version_i[12],
               Version_i[13],
               Version_i[14],
               Version_i[15],
               Version_i[16],
               Version_i[17],
               Version_i[18],
               Version_i[19],
               Version_i[20],
               Version_i[21],
               Version_i[22],
               Version_i[23],
               Version_i[24],
               Version_i[25],
               Version_i[26],
               Version_i[27],
               Version_i[28]],
              [0, convert_elt, convert_pipe]);
    }
    return [0,
            name,
            ,
            rpcs,
            versions,
            dispatch_iter_multi,
            dispatch_multi,
            abort_multi,
            ,
            Register_raw,
            Register];
   }
   function Make$6(Model){
    var name = Model[1], registry = caml_call3(Core_Int[103][5], 0, _C_, 0);
    function rpcs(param){
     function _bV_(param){var rpc = param[2]; return rpc;}
     var _bW_ = caml_call1(Core_Hashtbl[68], registry);
     return caml_call2(Core_List[51], _bW_, _bV_);
    }
    function versions(param){
     var _bU_ = caml_call1(Core_Hashtbl[67], registry);
     return caml_call1(Core_Int[99][8], _bU_);
    }
    function dispatch_multi(conn_with_menu, query){
     function _bS_(_bT_){return _bT_;}
     return Async[2].call
             (null, conn_with_menu, query, name, versions, registry, _bS_);
    }
    function Register_raw(Version_i){
     var
      _bI_ = Version_i[32],
      _bJ_ = Version_i[24],
      _bK_ = Version_i[16],
      _bL_ = Version_i[8],
      _bM_ = Version_i[33],
      _bN_ = caml_call2(Core_Option[60], Version_i[37], 0),
      rpc =
        caml_call8
         (Async_rpc_kernel_Rpc[11][3],
          _bN_,
          name,
          _bM_,
          _bL_,
          _bK_,
          _bJ_,
          _bI_,
          0);
     function dispatch(conn, q){
      try{var q$0 = caml_call1(Version_i[34], q);}
      catch(exn$0){
       var
        exn = caml_wrap_exception(exn$0),
        _bP_ =
          [1,
           failed_conversion
            ([0,
              -250086680,
              [0, 4102853, name],
              [0, -901574920, Version_i[33]],
              exn])];
       return caml_call1(Async_kernel[20], _bP_);
      }
      function _bQ_(result){
       if(0 !== result[0]){var exn$1 = result[1]; return [1, exn$1];}
       var match = result[1];
       if(0 === match[0]){
        var
         match$0 = match[1],
         id = match$0[3],
         pipe = match$0[2],
         state = match$0[1];
        try{var state$0 = caml_call1(Version_i[35], state);}
        catch(exn$0){
         var exn = caml_wrap_exception(exn$0);
         return [1,
                 failed_conversion
                  ([0,
                    389604849,
                    [0, 4102853, name],
                    [0, -901574920, Version_i[33]],
                    exn])];
        }
        return [0, [0, [0, state$0, caml_call1(Version_i[38], pipe), id]]];
       }
       var e = match[1];
       try{var e$0 = caml_call1(Version_i[36], e);}
       catch(exn){
        var exn$0 = caml_wrap_exception(exn);
        return [1,
                failed_conversion
                 ([0,
                   106380200,
                   [0, 4102853, name],
                   [0, -901574920, Version_i[33]],
                   exn$0])];
       }
       return [0, [1, e$0]];
      }
      var _bR_ = caml_call3(Async_rpc_kernel_Rpc[11][13], rpc, conn, q$0);
      return caml_call2(Async_kernel[23][3], _bR_, _bQ_);
     }
     if(caml_call2(Core_Hashtbl[56], registry, Version_i[33])){
      var
       _bO_ =
         multiple_registrations
          ([0, [0, 4102853, name], [0, -901574920, Version_i[33]]]);
      caml_call1(Core_Error[30], _bO_);
     }
     else
      caml_call3
       (Core_Hashtbl[37], registry, Version_i[33], [0, dispatch, [2, rpc]]);
     return [0, rpc];
    }
    function Register(Version_i){
     var
      bin_shape_query = Version_i[1],
      bin_size_query = Version_i[2],
      bin_write_query = Version_i[3],
      bin_writer_query = Version_i[4],
      bin_read_query = Version_i[5],
      bin_read_query$0 = Version_i[6],
      bin_reader_query = Version_i[7],
      bin_query = Version_i[8],
      bin_shape_state = Version_i[9],
      bin_size_state = Version_i[10],
      bin_write_state = Version_i[11],
      bin_writer_state = Version_i[12],
      bin_read_state = Version_i[13],
      bin_read_state$0 = Version_i[14],
      bin_reader_state = Version_i[15],
      bin_state = Version_i[16],
      bin_shape_update = Version_i[17],
      bin_size_update = Version_i[18],
      bin_write_update = Version_i[19],
      bin_writer_update = Version_i[20],
      bin_read_update = Version_i[21],
      bin_read_update$0 = Version_i[22],
      bin_reader_update = Version_i[23],
      bin_update = Version_i[24],
      bin_shape_error = Version_i[25],
      bin_size_error = Version_i[26],
      bin_write_error = Version_i[27],
      bin_writer_error = Version_i[28],
      bin_read_error = Version_i[29],
      bin_read_error$0 = Version_i[30],
      bin_reader_error = Version_i[31],
      bin_error = Version_i[32],
      version = Version_i[33],
      query_of_model = Version_i[34],
      model_of_state = Version_i[35],
      model_of_error = Version_i[36],
      client_pushes_back = Version_i[37];
     function model_of_update(rs){
      function _bH_(r){
       try{var r$0 = caml_call1(Version_i[38], r);}
       catch(exn$0){
        var exn = caml_wrap_exception(exn$0);
        return [1,
                failed_conversion
                 ([0,
                   999946793,
                   [0, 4102853, name],
                   [0, -901574920, version],
                   exn])];
       }
       return [0, r$0];
      }
      return caml_call2(Async_kernel_Pipe[60], rs, _bH_);
     }
     var
      include =
        Register_raw
         ([0,
           bin_shape_query,
           bin_size_query,
           bin_write_query,
           bin_writer_query,
           bin_read_query,
           bin_read_query$0,
           bin_reader_query,
           bin_query,
           bin_shape_state,
           bin_size_state,
           bin_write_state,
           bin_writer_state,
           bin_read_state,
           bin_read_state$0,
           bin_reader_state,
           bin_state,
           bin_shape_update,
           bin_size_update,
           bin_write_update,
           bin_writer_update,
           bin_read_update,
           bin_read_update$0,
           bin_reader_update,
           bin_update,
           bin_shape_error,
           bin_size_error,
           bin_write_error,
           bin_writer_error,
           bin_read_error,
           bin_read_error$0,
           bin_reader_error,
           bin_error,
           version,
           query_of_model,
           model_of_state,
           model_of_error,
           client_pushes_back,
           model_of_update]),
      rpc = include[1];
     return [0, rpc];
    }
    return [0, name, , rpcs, versions, dispatch_multi, Register_raw, Register];
   }
   function Make$7(Model){
    var name = Model[1], registry = caml_call3(Core_Int[103][5], 0, _D_, 0);
    function rpcs(param){
     function _bF_(param){var rpc = param[2]; return rpc;}
     var _bG_ = caml_call1(Core_Hashtbl[68], registry);
     return caml_call2(Core_List[51], _bG_, _bF_);
    }
    function versions(param){
     var _bE_ = caml_call1(Core_Hashtbl[67], registry);
     return caml_call1(Core_Int[99][8], _bE_);
    }
    function dispatch_multi(conn_with_menu, msg){
     function _bC_(_bD_){return _bD_;}
     return Direct[2].call
             (null, conn_with_menu, msg, name, versions, registry, _bC_);
    }
    function Register(Version_i){
     var
      rpc =
        caml_call3
         (Async_rpc_kernel_Rpc[12][1], name, Version_i[9], Version_i[8]);
     function dispatch(conn, q){
      function _bB_(param){return caml_call1(Version_i[10], q);}
      var match = caml_call1(Core_Result[54], _bB_);
      if(0 === match[0]){
       var q$0 = match[1];
       return caml_call3(Async_rpc_kernel_Rpc[12][11], rpc, conn, q$0);
      }
      var exn = match[1];
      return [1,
              failed_conversion
               ([0,
                 3854881,
                 [0, 4102853, name],
                 [0, -901574920, Version_i[9]],
                 exn])];
     }
     if(caml_call2(Core_Hashtbl[56], registry, Version_i[9])){
      var
       _bA_ =
         multiple_registrations
          ([0, [0, 4102853, name], [0, -901574920, Version_i[9]]]);
      caml_call1(Core_Error[30], _bA_);
     }
     else
      caml_call3
       (Core_Hashtbl[37], registry, Version_i[9], [0, dispatch, [3, rpc]]);
     return [0, rpc];
    }
    return [0, name, , rpcs, versions, dispatch_multi, Register];
   }
   caml_call1(Ppx_inline_test_lib[7], cst_async_rpc_kernel);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_rpc_kernel_Versioned);
   var
    _E_ =
      [0,
       function(Model){
        var
         name = Model[1],
         Caller = Make$7([0, name]),
         Callee = Make$2([0, name]);
        function _bu_(param){
         var _by_ = Callee[5].call(null, 0), _bz_ = Caller[4].call(null, 0);
         return caml_call2(Core_Int[99][4], _bz_, _by_);
        }
        caml_call8
         (Ppx_inline_test_lib[8],
          Inline_test_config,
          cst_Int_Set_equal_Caller_versi$3,
          0,
          cst_src_versioned_rpc_ml$3,
          1736,
          6,
          74,
          _bu_);
        function Register(Version){
         var
          version = Version[1],
          bin_shape_msg = Version[2],
          bin_size_msg = Version[3],
          bin_write_msg = Version[4],
          bin_writer_msg = Version[5],
          bin_read_msg = Version[6],
          bin_read_msg$0 = Version[7],
          bin_reader_msg = Version[8],
          bin_msg = Version[9],
          callee_model_of_msg = Version[11];
         Callee[6].call
          (null,
           [0,
            bin_shape_msg,
            bin_size_msg,
            bin_write_msg,
            bin_writer_msg,
            bin_read_msg,
            bin_read_msg$0,
            bin_reader_msg,
            bin_msg,
            version,
            callee_model_of_msg]);
         var
          version$0 = Version[1],
          bin_shape_msg$0 = Version[2],
          bin_size_msg$0 = Version[3],
          bin_write_msg$0 = Version[4],
          bin_writer_msg$0 = Version[5],
          bin_read_msg$1 = Version[6],
          bin_read_msg$2 = Version[7],
          bin_reader_msg$0 = Version[8],
          bin_msg$0 = Version[9],
          msg_of_caller_model = Version[10],
          include =
            Caller[6].call
             (null,
              [0,
               bin_shape_msg$0,
               bin_size_msg$0,
               bin_write_msg$0,
               bin_writer_msg$0,
               bin_read_msg$1,
               bin_read_msg$2,
               bin_reader_msg$0,
               bin_msg$0,
               version$0,
               msg_of_caller_model]),
          rpc = include[1];
         function _bv_(param){
          var _bw_ = Callee[5].call(null, 0), _bx_ = Caller[4].call(null, 0);
          return caml_call2(Core_Int[99][4], _bx_, _bw_);
         }
         caml_call8
          (Ppx_inline_test_lib[8],
           Inline_test_config,
           cst_Int_Set_equal_Caller_versi$4,
           0,
           cst_src_versioned_rpc_ml$4,
           1761,
           8,
           76,
           _bv_);
         return [0, rpc];
        }
        var dispatch_multi = Caller[5], implement_multi = Callee[3];
        function versions(param){return Caller[4].call(null, 0);}
        function rpcs(param){return Caller[3].call(null, 0);}
        return [0,
                Register,
                dispatch_multi,
                implement_multi,
                rpcs,
                versions,
                name];
       }],
    _F_ =
      [0,
       function(Model){
        var
         name = Model[1],
         Caller = Make$6([0, name]),
         Callee = Make$1([0, name]);
        function _br_(param){
         var _bs_ = Callee[5].call(null, 0), _bt_ = Caller[4].call(null, 0);
         return caml_call2(Core_Int[99][4], _bt_, _bs_);
        }
        caml_call8
         (Ppx_inline_test_lib[8],
          Inline_test_config,
          cst_Int_Set_equal_Caller_versi$2,
          0,
          cst_src_versioned_rpc_ml$2,
          1607,
          6,
          74,
          _br_);
        function Register_raw(Version_i){
         var
          version = Version_i[1],
          bin_shape_query = Version_i[2],
          bin_size_query = Version_i[3],
          bin_write_query = Version_i[4],
          bin_writer_query = Version_i[5],
          bin_read_query = Version_i[6],
          bin_read_query$0 = Version_i[7],
          bin_reader_query = Version_i[8],
          bin_query = Version_i[9],
          bin_shape_state = Version_i[10],
          bin_size_state = Version_i[11],
          bin_write_state = Version_i[12],
          bin_writer_state = Version_i[13],
          bin_read_state = Version_i[14],
          bin_read_state$0 = Version_i[15],
          bin_reader_state = Version_i[16],
          bin_state = Version_i[17],
          bin_shape_update = Version_i[18],
          bin_size_update = Version_i[19],
          bin_write_update = Version_i[20],
          bin_writer_update = Version_i[21],
          bin_read_update = Version_i[22],
          bin_read_update$0 = Version_i[23],
          bin_reader_update = Version_i[24],
          bin_update = Version_i[25],
          bin_shape_error = Version_i[26],
          bin_size_error = Version_i[27],
          bin_write_error = Version_i[28],
          bin_writer_error = Version_i[29],
          bin_read_error = Version_i[30],
          bin_read_error$0 = Version_i[31],
          bin_reader_error = Version_i[32],
          bin_error = Version_i[33],
          callee_model_of_query = Version_i[35],
          state_of_callee_model = Version_i[37],
          error_of_callee_model = Version_i[39],
          client_pushes_back = Version_i[40],
          update_of_callee_model = Version_i[42];
         Callee[6].call
          (null,
           [0,
            bin_shape_query,
            bin_size_query,
            bin_write_query,
            bin_writer_query,
            bin_read_query,
            bin_read_query$0,
            bin_reader_query,
            bin_query,
            bin_shape_state,
            bin_size_state,
            bin_write_state,
            bin_writer_state,
            bin_read_state,
            bin_read_state$0,
            bin_reader_state,
            bin_state,
            bin_shape_update,
            bin_size_update,
            bin_write_update,
            bin_writer_update,
            bin_read_update,
            bin_read_update$0,
            bin_reader_update,
            bin_update,
            bin_shape_error,
            bin_size_error,
            bin_write_error,
            bin_writer_error,
            bin_read_error,
            bin_read_error$0,
            bin_reader_error,
            bin_error,
            version,
            callee_model_of_query,
            state_of_callee_model,
            error_of_callee_model,
            client_pushes_back,
            update_of_callee_model]);
         var
          version$0 = Version_i[1],
          bin_shape_query$0 = Version_i[2],
          bin_size_query$0 = Version_i[3],
          bin_write_query$0 = Version_i[4],
          bin_writer_query$0 = Version_i[5],
          bin_read_query$1 = Version_i[6],
          bin_read_query$2 = Version_i[7],
          bin_reader_query$0 = Version_i[8],
          bin_query$0 = Version_i[9],
          bin_shape_state$0 = Version_i[10],
          bin_size_state$0 = Version_i[11],
          bin_write_state$0 = Version_i[12],
          bin_writer_state$0 = Version_i[13],
          bin_read_state$1 = Version_i[14],
          bin_read_state$2 = Version_i[15],
          bin_reader_state$0 = Version_i[16],
          bin_state$0 = Version_i[17],
          bin_shape_update$0 = Version_i[18],
          bin_size_update$0 = Version_i[19],
          bin_write_update$0 = Version_i[20],
          bin_writer_update$0 = Version_i[21],
          bin_read_update$1 = Version_i[22],
          bin_read_update$2 = Version_i[23],
          bin_reader_update$0 = Version_i[24],
          bin_update$0 = Version_i[25],
          bin_shape_error$0 = Version_i[26],
          bin_size_error$0 = Version_i[27],
          bin_write_error$0 = Version_i[28],
          bin_writer_error$0 = Version_i[29],
          bin_read_error$1 = Version_i[30],
          bin_read_error$2 = Version_i[31],
          bin_reader_error$0 = Version_i[32],
          bin_error$0 = Version_i[33],
          query_of_caller_model = Version_i[34],
          caller_model_of_state = Version_i[36],
          caller_model_of_error = Version_i[38],
          client_pushes_back$0 = Version_i[40],
          caller_model_of_update = Version_i[41],
          include =
            Caller[6].call
             (null,
              [0,
               bin_shape_query$0,
               bin_size_query$0,
               bin_write_query$0,
               bin_writer_query$0,
               bin_read_query$1,
               bin_read_query$2,
               bin_reader_query$0,
               bin_query$0,
               bin_shape_state$0,
               bin_size_state$0,
               bin_write_state$0,
               bin_writer_state$0,
               bin_read_state$1,
               bin_read_state$2,
               bin_reader_state$0,
               bin_state$0,
               bin_shape_update$0,
               bin_size_update$0,
               bin_write_update$0,
               bin_writer_update$0,
               bin_read_update$1,
               bin_read_update$2,
               bin_reader_update$0,
               bin_update$0,
               bin_shape_error$0,
               bin_size_error$0,
               bin_write_error$0,
               bin_writer_error$0,
               bin_read_error$1,
               bin_read_error$2,
               bin_reader_error$0,
               bin_error$0,
               version$0,
               query_of_caller_model,
               caller_model_of_state,
               caller_model_of_error,
               client_pushes_back$0,
               caller_model_of_update]),
          rpc = include[1];
         return [0, rpc];
        }
        function Register(Version_i){
         var
          version = Version_i[1],
          bin_shape_query = Version_i[2],
          bin_size_query = Version_i[3],
          bin_write_query = Version_i[4],
          bin_writer_query = Version_i[5],
          bin_read_query = Version_i[6],
          bin_read_query$0 = Version_i[7],
          bin_reader_query = Version_i[8],
          bin_query = Version_i[9],
          bin_shape_state = Version_i[10],
          bin_size_state = Version_i[11],
          bin_write_state = Version_i[12],
          bin_writer_state = Version_i[13],
          bin_read_state = Version_i[14],
          bin_read_state$0 = Version_i[15],
          bin_reader_state = Version_i[16],
          bin_state = Version_i[17],
          bin_shape_update = Version_i[18],
          bin_size_update = Version_i[19],
          bin_write_update = Version_i[20],
          bin_writer_update = Version_i[21],
          bin_read_update = Version_i[22],
          bin_read_update$0 = Version_i[23],
          bin_reader_update = Version_i[24],
          bin_update = Version_i[25],
          bin_shape_error = Version_i[26],
          bin_size_error = Version_i[27],
          bin_write_error = Version_i[28],
          bin_writer_error = Version_i[29],
          bin_read_error = Version_i[30],
          bin_read_error$0 = Version_i[31],
          bin_reader_error = Version_i[32],
          bin_error = Version_i[33],
          callee_model_of_query = Version_i[35],
          state_of_callee_model = Version_i[37],
          error_of_callee_model = Version_i[39],
          client_pushes_back = Version_i[40],
          update_of_callee_model = Version_i[41];
         Callee[7].call
          (null,
           [0,
            bin_shape_query,
            bin_size_query,
            bin_write_query,
            bin_writer_query,
            bin_read_query,
            bin_read_query$0,
            bin_reader_query,
            bin_query,
            bin_shape_state,
            bin_size_state,
            bin_write_state,
            bin_writer_state,
            bin_read_state,
            bin_read_state$0,
            bin_reader_state,
            bin_state,
            bin_shape_update,
            bin_size_update,
            bin_write_update,
            bin_writer_update,
            bin_read_update,
            bin_read_update$0,
            bin_reader_update,
            bin_update,
            bin_shape_error,
            bin_size_error,
            bin_write_error,
            bin_writer_error,
            bin_read_error,
            bin_read_error$0,
            bin_reader_error,
            bin_error,
            version,
            callee_model_of_query,
            state_of_callee_model,
            error_of_callee_model,
            client_pushes_back,
            update_of_callee_model]);
         var
          version$0 = Version_i[1],
          bin_shape_query$0 = Version_i[2],
          bin_size_query$0 = Version_i[3],
          bin_write_query$0 = Version_i[4],
          bin_writer_query$0 = Version_i[5],
          bin_read_query$1 = Version_i[6],
          bin_read_query$2 = Version_i[7],
          bin_reader_query$0 = Version_i[8],
          bin_query$0 = Version_i[9],
          bin_shape_state$0 = Version_i[10],
          bin_size_state$0 = Version_i[11],
          bin_write_state$0 = Version_i[12],
          bin_writer_state$0 = Version_i[13],
          bin_read_state$1 = Version_i[14],
          bin_read_state$2 = Version_i[15],
          bin_reader_state$0 = Version_i[16],
          bin_state$0 = Version_i[17],
          bin_shape_update$0 = Version_i[18],
          bin_size_update$0 = Version_i[19],
          bin_write_update$0 = Version_i[20],
          bin_writer_update$0 = Version_i[21],
          bin_read_update$1 = Version_i[22],
          bin_read_update$2 = Version_i[23],
          bin_reader_update$0 = Version_i[24],
          bin_update$0 = Version_i[25],
          bin_shape_error$0 = Version_i[26],
          bin_size_error$0 = Version_i[27],
          bin_write_error$0 = Version_i[28],
          bin_writer_error$0 = Version_i[29],
          bin_read_error$1 = Version_i[30],
          bin_read_error$2 = Version_i[31],
          bin_reader_error$0 = Version_i[32],
          bin_error$0 = Version_i[33],
          query_of_caller_model = Version_i[34],
          caller_model_of_state = Version_i[36],
          caller_model_of_error = Version_i[38],
          client_pushes_back$0 = Version_i[40],
          caller_model_of_update = Version_i[42],
          include =
            Caller[7].call
             (null,
              [0,
               bin_shape_query$0,
               bin_size_query$0,
               bin_write_query$0,
               bin_writer_query$0,
               bin_read_query$1,
               bin_read_query$2,
               bin_reader_query$0,
               bin_query$0,
               bin_shape_state$0,
               bin_size_state$0,
               bin_write_state$0,
               bin_writer_state$0,
               bin_read_state$1,
               bin_read_state$2,
               bin_reader_state$0,
               bin_state$0,
               bin_shape_update$0,
               bin_size_update$0,
               bin_write_update$0,
               bin_writer_update$0,
               bin_read_update$1,
               bin_read_update$2,
               bin_reader_update$0,
               bin_update$0,
               bin_shape_error$0,
               bin_size_error$0,
               bin_write_error$0,
               bin_writer_error$0,
               bin_read_error$1,
               bin_read_error$2,
               bin_reader_error$0,
               bin_error$0,
               version$0,
               query_of_caller_model,
               caller_model_of_state,
               caller_model_of_error,
               client_pushes_back$0,
               caller_model_of_update]),
          rpc = include[1];
         return [0, rpc];
        }
        var dispatch_multi = Caller[5], implement_multi = Callee[3];
        function versions(param){return Caller[4].call(null, 0);}
        function rpcs(param){return Caller[3].call(null, 0);}
        return [0,
                Register,
                Register_raw,
                dispatch_multi,
                implement_multi,
                rpcs,
                versions,
                name];
       }],
    _G_ =
      [0,
       function(Model){
        var
         name = Model[1],
         Caller = Make$5([0, name]),
         Callee = Make$0([0, name]);
        function _bn_(param){
         var _bp_ = Callee[7].call(null, 0), _bq_ = Caller[4].call(null, 0);
         return caml_call2(Core_Int[99][4], _bq_, _bp_);
        }
        caml_call8
         (Ppx_inline_test_lib[8],
          Inline_test_config,
          cst_Int_Set_equal_Caller_versi$1,
          0,
          cst_src_versioned_rpc_ml$1,
          1460,
          6,
          74,
          _bn_);
        var
         dispatch_multi = Caller[6],
         dispatch_iter_multi = Caller[5],
         abort_multi = Caller[7],
         implement_multi = Callee[4],
         implement_direct_multi = Callee[5];
        function versions(param){return Caller[4].call(null, 0);}
        function rpcs(param){return Caller[3].call(null, 0);}
        function _bo_(Version_i){
         var
          version = Version_i[1],
          bin_shape_query = Version_i[2],
          bin_size_query = Version_i[3],
          bin_write_query = Version_i[4],
          bin_writer_query = Version_i[5],
          bin_read_query = Version_i[6],
          bin_read_query$0 = Version_i[7],
          bin_reader_query = Version_i[8],
          bin_query = Version_i[9],
          bin_shape_response = Version_i[10],
          bin_size_response = Version_i[11],
          bin_write_response = Version_i[12],
          bin_writer_response = Version_i[13],
          bin_read_response = Version_i[14],
          bin_read_response$0 = Version_i[15],
          bin_reader_response = Version_i[16],
          bin_response = Version_i[17],
          bin_shape_error = Version_i[18],
          bin_size_error = Version_i[19],
          bin_write_error = Version_i[20],
          bin_writer_error = Version_i[21],
          bin_read_error = Version_i[22],
          bin_read_error$0 = Version_i[23],
          bin_reader_error = Version_i[24],
          bin_error = Version_i[25],
          callee_model_of_query = Version_i[27],
          error_of_callee_model = Version_i[28],
          client_pushes_back = Version_i[30],
          response_of_callee_model = Version_i[31];
         Callee[9].call
          (null,
           [0,
            bin_shape_query,
            bin_size_query,
            bin_write_query,
            bin_writer_query,
            bin_read_query,
            bin_read_query$0,
            bin_reader_query,
            bin_query,
            bin_shape_response,
            bin_size_response,
            bin_write_response,
            bin_writer_response,
            bin_read_response,
            bin_read_response$0,
            bin_reader_response,
            bin_response,
            bin_shape_error,
            bin_size_error,
            bin_write_error,
            bin_writer_error,
            bin_read_error,
            bin_read_error$0,
            bin_reader_error,
            bin_error,
            version,
            callee_model_of_query,
            error_of_callee_model,
            client_pushes_back,
            response_of_callee_model]);
         var
          version$0 = Version_i[1],
          bin_shape_query$0 = Version_i[2],
          bin_size_query$0 = Version_i[3],
          bin_write_query$0 = Version_i[4],
          bin_writer_query$0 = Version_i[5],
          bin_read_query$1 = Version_i[6],
          bin_read_query$2 = Version_i[7],
          bin_reader_query$0 = Version_i[8],
          bin_query$0 = Version_i[9],
          bin_shape_response$0 = Version_i[10],
          bin_size_response$0 = Version_i[11],
          bin_write_response$0 = Version_i[12],
          bin_writer_response$0 = Version_i[13],
          bin_read_response$1 = Version_i[14],
          bin_read_response$2 = Version_i[15],
          bin_reader_response$0 = Version_i[16],
          bin_response$0 = Version_i[17],
          bin_shape_error$0 = Version_i[18],
          bin_size_error$0 = Version_i[19],
          bin_write_error$0 = Version_i[20],
          bin_writer_error$0 = Version_i[21],
          bin_read_error$1 = Version_i[22],
          bin_read_error$2 = Version_i[23],
          bin_reader_error$0 = Version_i[24],
          bin_error$0 = Version_i[25],
          query_of_caller_model = Version_i[26],
          caller_model_of_error = Version_i[29],
          client_pushes_back$0 = Version_i[30],
          caller_model_of_response = Version_i[32],
          include =
            Caller[9].call
             (null,
              [0,
               bin_shape_query$0,
               bin_size_query$0,
               bin_write_query$0,
               bin_writer_query$0,
               bin_read_query$1,
               bin_read_query$2,
               bin_reader_query$0,
               bin_query$0,
               bin_shape_response$0,
               bin_size_response$0,
               bin_write_response$0,
               bin_writer_response$0,
               bin_read_response$1,
               bin_read_response$2,
               bin_reader_response$0,
               bin_response$0,
               bin_shape_error$0,
               bin_size_error$0,
               bin_write_error$0,
               bin_writer_error$0,
               bin_read_error$1,
               bin_read_error$2,
               bin_reader_error$0,
               bin_error$0,
               version$0,
               query_of_caller_model,
               caller_model_of_error,
               client_pushes_back$0,
               caller_model_of_response]),
          rpc = include[1];
         return [0, rpc];
        }
        return [0,
                function(Version_i){
                 var
                  version = Version_i[1],
                  bin_shape_query = Version_i[2],
                  bin_size_query = Version_i[3],
                  bin_write_query = Version_i[4],
                  bin_writer_query = Version_i[5],
                  bin_read_query = Version_i[6],
                  bin_read_query$0 = Version_i[7],
                  bin_reader_query = Version_i[8],
                  bin_query = Version_i[9],
                  bin_shape_response = Version_i[10],
                  bin_size_response = Version_i[11],
                  bin_write_response = Version_i[12],
                  bin_writer_response = Version_i[13],
                  bin_read_response = Version_i[14],
                  bin_read_response$0 = Version_i[15],
                  bin_reader_response = Version_i[16],
                  bin_response = Version_i[17],
                  bin_shape_error = Version_i[18],
                  bin_size_error = Version_i[19],
                  bin_write_error = Version_i[20],
                  bin_writer_error = Version_i[21],
                  bin_read_error = Version_i[22],
                  bin_read_error$0 = Version_i[23],
                  bin_reader_error = Version_i[24],
                  bin_error = Version_i[25],
                  callee_model_of_query = Version_i[27],
                  error_of_callee_model = Version_i[28],
                  client_pushes_back = Version_i[30],
                  response_of_callee_model = Version_i[31];
                 Callee[10].call
                  (null,
                   [0,
                    bin_shape_query,
                    bin_size_query,
                    bin_write_query,
                    bin_writer_query,
                    bin_read_query,
                    bin_read_query$0,
                    bin_reader_query,
                    bin_query,
                    bin_shape_response,
                    bin_size_response,
                    bin_write_response,
                    bin_writer_response,
                    bin_read_response,
                    bin_read_response$0,
                    bin_reader_response,
                    bin_response,
                    bin_shape_error,
                    bin_size_error,
                    bin_write_error,
                    bin_writer_error,
                    bin_read_error,
                    bin_read_error$0,
                    bin_reader_error,
                    bin_error,
                    version,
                    callee_model_of_query,
                    error_of_callee_model,
                    client_pushes_back,
                    response_of_callee_model]);
                 var
                  version$0 = Version_i[1],
                  bin_shape_query$0 = Version_i[2],
                  bin_size_query$0 = Version_i[3],
                  bin_write_query$0 = Version_i[4],
                  bin_writer_query$0 = Version_i[5],
                  bin_read_query$1 = Version_i[6],
                  bin_read_query$2 = Version_i[7],
                  bin_reader_query$0 = Version_i[8],
                  bin_query$0 = Version_i[9],
                  bin_shape_response$0 = Version_i[10],
                  bin_size_response$0 = Version_i[11],
                  bin_write_response$0 = Version_i[12],
                  bin_writer_response$0 = Version_i[13],
                  bin_read_response$1 = Version_i[14],
                  bin_read_response$2 = Version_i[15],
                  bin_reader_response$0 = Version_i[16],
                  bin_response$0 = Version_i[17],
                  bin_shape_error$0 = Version_i[18],
                  bin_size_error$0 = Version_i[19],
                  bin_write_error$0 = Version_i[20],
                  bin_writer_error$0 = Version_i[21],
                  bin_read_error$1 = Version_i[22],
                  bin_read_error$2 = Version_i[23],
                  bin_reader_error$0 = Version_i[24],
                  bin_error$0 = Version_i[25],
                  query_of_caller_model = Version_i[26],
                  caller_model_of_error = Version_i[29],
                  client_pushes_back$0 = Version_i[30],
                  caller_model_of_response = Version_i[32],
                  include =
                    Caller[10].call
                     (null,
                      [0,
                       bin_shape_query$0,
                       bin_size_query$0,
                       bin_write_query$0,
                       bin_writer_query$0,
                       bin_read_query$1,
                       bin_read_query$2,
                       bin_reader_query$0,
                       bin_query$0,
                       bin_shape_response$0,
                       bin_size_response$0,
                       bin_write_response$0,
                       bin_writer_response$0,
                       bin_read_response$1,
                       bin_read_response$2,
                       bin_reader_response$0,
                       bin_response$0,
                       bin_shape_error$0,
                       bin_size_error$0,
                       bin_write_error$0,
                       bin_writer_error$0,
                       bin_read_error$1,
                       bin_read_error$2,
                       bin_reader_error$0,
                       bin_error$0,
                       version$0,
                       query_of_caller_model,
                       caller_model_of_error,
                       client_pushes_back$0,
                       caller_model_of_response]),
                  rpc = include[1];
                 return [0, rpc];
                },
                _bo_,
                dispatch_multi,
                dispatch_iter_multi,
                abort_multi,
                implement_multi,
                implement_direct_multi,
                rpcs,
                versions,
                name];
       }],
    _H_ =
      [0,
       [0,
        function(Model){
         var
          name = Model[1],
          Caller = Make$4([0, name]),
          Callee = Make([0, name]);
         function _bh_(param){
          var _bl_ = Callee[5].call(null, 0), _bm_ = Caller[4].call(null, 0);
          return caml_call2(Core_Int[99][4], _bm_, _bl_);
         }
         caml_call8
          (Ppx_inline_test_lib[8],
           Inline_test_config,
           cst_Int_Set_equal_Caller_versi,
           0,
           cst_src_versioned_rpc_ml,
           1337,
           6,
           74,
           _bh_);
         function Register(Version){
          var
           version = Version[1],
           bin_shape_query = Version[2],
           bin_size_query = Version[3],
           bin_write_query = Version[4],
           bin_writer_query = Version[5],
           bin_read_query = Version[6],
           bin_read_query$0 = Version[7],
           bin_reader_query = Version[8],
           bin_query = Version[9],
           bin_shape_response = Version[10],
           bin_size_response = Version[11],
           bin_write_response = Version[12],
           bin_writer_response = Version[13],
           bin_read_response = Version[14],
           bin_read_response$0 = Version[15],
           bin_reader_response = Version[16],
           bin_response = Version[17],
           callee_model_of_query = Version[19],
           response_of_callee_model = Version[20];
          Callee[6].call
           (null,
            [0,
             bin_shape_query,
             bin_size_query,
             bin_write_query,
             bin_writer_query,
             bin_read_query,
             bin_read_query$0,
             bin_reader_query,
             bin_query,
             bin_shape_response,
             bin_size_response,
             bin_write_response,
             bin_writer_response,
             bin_read_response,
             bin_read_response$0,
             bin_reader_response,
             bin_response,
             version,
             callee_model_of_query,
             response_of_callee_model]);
          var
           version$0 = Version[1],
           bin_shape_query$0 = Version[2],
           bin_size_query$0 = Version[3],
           bin_write_query$0 = Version[4],
           bin_writer_query$0 = Version[5],
           bin_read_query$1 = Version[6],
           bin_read_query$2 = Version[7],
           bin_reader_query$0 = Version[8],
           bin_query$0 = Version[9],
           bin_shape_response$0 = Version[10],
           bin_size_response$0 = Version[11],
           bin_write_response$0 = Version[12],
           bin_writer_response$0 = Version[13],
           bin_read_response$1 = Version[14],
           bin_read_response$2 = Version[15],
           bin_reader_response$0 = Version[16],
           bin_response$0 = Version[17],
           query_of_caller_model = Version[18],
           caller_model_of_response = Version[21],
           include =
             Caller[7].call
              (null,
               [0,
                bin_shape_query$0,
                bin_size_query$0,
                bin_write_query$0,
                bin_writer_query$0,
                bin_read_query$1,
                bin_read_query$2,
                bin_reader_query$0,
                bin_query$0,
                bin_shape_response$0,
                bin_size_response$0,
                bin_write_response$0,
                bin_writer_response$0,
                bin_read_response$1,
                bin_read_response$2,
                bin_reader_response$0,
                bin_response$0,
                version$0,
                query_of_caller_model,
                caller_model_of_response]),
           rpc = include[1];
          function _bi_(param){
           var _bj_ = Callee[5].call(null, 0), _bk_ = Caller[4].call(null, 0);
           return caml_call2(Core_Int[99][4], _bk_, _bj_);
          }
          caml_call8
           (Ppx_inline_test_lib[8],
            Inline_test_config,
            cst_Int_Set_equal_Caller_versi$0,
            0,
            cst_src_versioned_rpc_ml$0,
            1367,
            8,
            76,
            _bi_);
          return [0, rpc];
         }
         var dispatch_multi = Caller[5], implement_multi = Callee[3];
         function versions(param){return Caller[4].call(null, 0);}
         function rpcs(param){return Caller[3].call(null, 0);}
         return [0,
                 Register,
                 dispatch_multi,
                 implement_multi,
                 rpcs,
                 versions,
                 name];
        }],
       _G_,
       _F_,
       _E_],
    _I_ =
      [0,
       function(_a$_){
        var
         _ba_ = Make$2(_a$_),
         _bb_ = _ba_[1],
         _bc_ = _ba_[5],
         _bd_ = _ba_[4],
         _be_ = _ba_[3],
         _bf_ = _ba_[6];
        return [0,
                function(_bg_){
                 return _bf_
                         ([0,
                           _bg_[2],
                           _bg_[3],
                           _bg_[4],
                           _bg_[5],
                           _bg_[6],
                           _bg_[7],
                           _bg_[8],
                           _bg_[9],
                           _bg_[1],
                           _bg_[10]]);
                },
                _be_,
                _bd_,
                _bc_,
                _bb_];
       }],
    _J_ =
      [0,
       function(_a9_){
        var _a__ = Make$1(_a9_);
        return [0, _a__[7], _a__[6], _a__[3], _a__[4], _a__[5], _a__[1]];
       }],
    _K_ =
      [0,
       function(_aX_){
        var
         _aY_ = Make$0(_aX_),
         _aZ_ = _aY_[1],
         _a0_ = _aY_[7],
         _a1_ = _aY_[6],
         _a2_ = _aY_[5],
         _a3_ = _aY_[4],
         _a4_ = _aY_[9];
        function _a5_(_a8_){return [0, _a4_(_a8_)[1]];}
        var _a6_ = _aY_[10];
        return [0,
                function(_a7_){return [0, _a6_(_a7_)[1]];},
                _a5_,
                _a3_,
                _a2_,
                _a1_,
                _a0_,
                _aZ_];
       }],
    _L_ =
      [0,
       [0,
        [0,
         create,
         name,
         add_version,
         add_version_with_failure,
         add_rpc_version,
         add_rpc_version_with_failure,
         implement],
        function(_aP_){
         var
          _aQ_ = Make(_aP_),
          _aR_ = _aQ_[1],
          _aS_ = _aQ_[5],
          _aT_ = _aQ_[4],
          _aU_ = _aQ_[3],
          _aV_ = _aQ_[6];
         return [0,
                 function(_aW_){
                  return _aV_
                          ([0,
                            _aW_[2],
                            _aW_[3],
                            _aW_[4],
                            _aW_[5],
                            _aW_[6],
                            _aW_[7],
                            _aW_[8],
                            _aW_[9],
                            _aW_[10],
                            _aW_[11],
                            _aW_[12],
                            _aW_[13],
                            _aW_[14],
                            _aW_[15],
                            _aW_[16],
                            _aW_[17],
                            _aW_[1],
                            _aW_[18],
                            _aW_[19]]);
                 },
                 _aU_,
                 _aT_,
                 _aS_,
                 _aR_];
        }],
       _K_,
       _J_,
       _I_],
    _M_ =
      [0,
       function(_aH_){
        var
         _aI_ = Make$7(_aH_),
         _aJ_ = _aI_[1],
         _aK_ = _aI_[4],
         _aL_ = _aI_[3],
         _aM_ = _aI_[5],
         _aN_ = _aI_[6];
        return [0,
                function(_aO_){
                 return _aN_
                         ([0,
                           _aO_[2],
                           _aO_[3],
                           _aO_[4],
                           _aO_[5],
                           _aO_[6],
                           _aO_[7],
                           _aO_[8],
                           _aO_[9],
                           _aO_[1],
                           _aO_[10]]);
                },
                _aM_,
                _aL_,
                _aK_,
                _aJ_];
       }],
    _N_ =
      [0,
       function(_aF_){
        var _aG_ = Make$6(_aF_);
        return [0, _aG_[7], _aG_[6], _aG_[5], _aG_[3], _aG_[4], _aG_[1]];
       }],
    _O_ =
      [0,
       function(_as_){
        var
         _at_ = Make$5(_as_),
         _au_ = _at_[1],
         _av_ = _at_[4],
         _aw_ = _at_[3],
         _ax_ = _at_[7],
         _ay_ = _at_[5],
         _az_ = _at_[6],
         _aA_ = _at_[9];
        function _aB_(_aE_){return [0, _aA_(_aE_)[1]];}
        var _aC_ = _at_[10];
        return [0,
                function(_aD_){return [0, _aC_(_aD_)[1]];},
                _aB_,
                _az_,
                _ay_,
                _ax_,
                _aw_,
                _av_,
                _au_];
       }],
    Async_rpc_kernel_Versioned_rpc =
      [0,
       [0,
        sexp_of_t,
        version_menu_rpc_name,
        With_digests_in_sexp,
        supported_rpcs,
        supported_versions,
        mem,
        shape_digests,
        highest_available_version,
        highest_shared_version,
        has_some_versions,
        of_supported_rpcs,
        Stable,
        of_v1_response,
        of_v2_response,
        add$0,
        implement$0,
        request,
        request$0,
        [0, add$1, request$1],
        create$0],
       [0, create$1, create_directly, connection, menu],
       [0, write, write_without_pushback, close, closed, is_closed],
       [0,
        [0,
         function(_ah_){
          var
           _ai_ = Make$4(_ah_),
           _aj_ = _ai_[1],
           _ak_ = _ai_[4],
           _al_ = _ai_[3],
           _am_ = _ai_[5],
           _an_ = _ai_[6];
          function _ao_(_ar_){
           return _an_
                   ([0,
                     _ar_[2],
                     _ar_[3],
                     _ar_[4],
                     _ar_[5],
                     _ar_[6],
                     _ar_[7],
                     _ar_[8],
                     _ar_[9],
                     _ar_[10],
                     _ar_[11],
                     _ar_[12],
                     _ar_[13],
                     _ar_[14],
                     _ar_[15],
                     _ar_[16],
                     _ar_[17],
                     _ar_[1],
                     _ar_[18],
                     _ar_[19]]);
          }
          var _ap_ = _ai_[7];
          return [0,
                  function(_aq_){
                   return _ap_
                           ([0,
                             _aq_[2],
                             _aq_[3],
                             _aq_[4],
                             _aq_[5],
                             _aq_[6],
                             _aq_[7],
                             _aq_[8],
                             _aq_[9],
                             _aq_[10],
                             _aq_[11],
                             _aq_[12],
                             _aq_[13],
                             _aq_[14],
                             _aq_[15],
                             _aq_[16],
                             _aq_[17],
                             _aq_[1],
                             _aq_[18],
                             _aq_[19]]);
                  },
                  _ao_,
                  _am_,
                  _al_,
                  _ak_,
                  _aj_];
         }],
        _O_,
        _N_,
        _M_],
       _L_,
       _H_];
   runtime.caml_register_global
    (101, Async_rpc_kernel_Versioned_rpc, cst_Async_rpc_kernel_Versioned$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_rpc_kernel__Pipe_transport
//# unitInfo: Requires: Async_kernel, Async_kernel__Async_kernel_scheduler, Async_kernel__Deferred, Async_kernel__Monitor, Async_kernel__Pipe, Async_rpc_kernel__Transport, Bin_prot__Utils, Core, Core__Bigbuffer, Core__Bigstring, Core__Int, Core__Int63, Core__Queue, Core__Result, Core__String, Inline_test_config, Ppx_assert_lib__Runtime, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$3 = "",
    cst_Async_rpc_kernel_Pipe_tran$0 = "Async_rpc_kernel__Pipe_transport",
    cst_FOOBAR123$1 = "FOOBAR123",
    cst_Test_reader_bigstring$1 = "Test_reader_bigstring",
    cst_Test_reader_string$1 = "Test_reader_string",
    cst_async_rpc_kernel$0 = "async_rpc_kernel",
    cst_pipe = "pipe",
    cst_src_pipe_transport_ml$18 = "src/pipe_transport.ml",
    cst_src_pipe_transport_ml_Benc$5 = "src/pipe_transport.ml.Bench_reader",
    cst_write_2_msg_1_chunk$1 = "write_2_msg_1_chunk",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_trampoline = runtime.caml_trampoline,
    caml_trampoline_return = runtime.caml_trampoline_return;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    cst$0 = cst$3,
    pos$3 = "src/pipe_transport.ml:454:19",
    pos$2 = "src/pipe_transport.ml:432:21",
    cst = cst$3,
    pos$1 = "src/pipe_transport.ml:358:19",
    pos$0 = "src/pipe_transport.ml:357:19",
    pos = "src/pipe_transport.ml:335:19",
    cst$1 = cst$3,
    cst$2 = cst$3,
    Async_kernel_Pipe = global_data.Async_kernel__Pipe,
    Async_kernel = global_data.Async_kernel,
    Core_Bigstring = global_data.Core__Bigstring,
    Async_rpc_kernel_Transport = global_data.Async_rpc_kernel__Transport,
    Async_kernel_Async_kernel_sche =
      global_data.Async_kernel__Async_kernel_scheduler,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Core_Int = global_data.Core__Int,
    Ppx_assert_lib_Runtime = global_data.Ppx_assert_lib__Runtime,
    Core_Result = global_data.Core__Result,
    Assert_failure = global_data.Assert_failure,
    Async_kernel_Deferred = global_data.Async_kernel__Deferred,
    Core = global_data.Core,
    Inline_test_config = global_data.Inline_test_config,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Bin_prot_Utils = global_data.Bin_prot__Utils,
    Core_Int63 = global_data.Core__Int63,
    Async_kernel_Monitor = global_data.Async_kernel__Monitor,
    Core_Queue = global_data.Core__Queue,
    Core_Bigbuffer = global_data.Core__Bigbuffer,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Core_String = global_data.Core__String;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_rpc_kernel_Pipe_tran$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_rpc_kernel$0);
   caml_call1(Ppx_expect_runtime[1][1], cst_src_pipe_transport_ml$18);
   caml_call2
    (Ppx_inline_test_lib[6], cst_async_rpc_kernel$0, "pipe_transport.ml");
   var
    cst_FOOBAR123$0 = cst_FOOBAR123$1,
    cst_src_pipe_transport_ml_Benc = cst_src_pipe_transport_ml_Benc$5,
    cst_src_pipe_transport_ml$8 = cst_src_pipe_transport_ml$18,
    cst_run_test_write_1_msg_1_chu$0 = "run_test write_1_msg_1_chunk",
    cst_write_1_msg_1_chunk = "write_1_msg_1_chunk",
    cst_src_pipe_transport_ml_Benc$0 = cst_src_pipe_transport_ml_Benc$5,
    cst_src_pipe_transport_ml$9 = cst_src_pipe_transport_ml$18,
    cst_let_f_write_write_1_msg_1_ =
      "let f write = write_1_msg_1_chunk write; write_1_msg_1_chunk write in\nrun_test f",
    cst_write_2_msg_1_chunk = cst_write_2_msg_1_chunk$1,
    cst_src_pipe_transport_ml_Benc$1 = cst_src_pipe_transport_ml_Benc$5,
    cst_src_pipe_transport_ml$10 = cst_src_pipe_transport_ml$18,
    cst_run_test_write_1_msg_3_chu$0 = "run_test write_1_msg_3_chunk",
    cst_write_1_msg_3_chunk = "write_1_msg_3_chunk",
    cst_src_pipe_transport_ml_Benc$2 = cst_src_pipe_transport_ml_Benc$5,
    cst_src_pipe_transport_ml$11 = cst_src_pipe_transport_ml$18,
    cst_run_test_write_2_msg_1_chu$0 = "run_test write_2_msg_1_chunk",
    cst_write_2_msg_1_chunk$0 = cst_write_2_msg_1_chunk$1,
    cst_src_pipe_transport_ml_Benc$3 = cst_src_pipe_transport_ml_Benc$5,
    cst_src_pipe_transport_ml$12 = cst_src_pipe_transport_ml$18,
    cst_run_test_write_2_msg_one_b$0 =
      "run_test write_2_msg_one_byte_at_a_time_34_chunk",
    cst_write_2_msg_one_byte = "write_2_msg_one_byte",
    cst_src_pipe_transport_ml_Benc$4 = cst_src_pipe_transport_ml_Benc$5,
    cst_src_pipe_transport_ml$13 = cst_src_pipe_transport_ml$18,
    cst_let_f_write_write_create_m =
      "let f write =\n  write (create_message ());\n  write_1_msg_3_chunk write;\n  write_2_msg_1_chunk write;\n  write_2_msg_one_byte_at_a_time_34_chunk write;\n  write (create_message ()) in\nrun_test f",
    cst_multi = "multi",
    _l_ = [0, cst_src_pipe_transport_ml$18, 451, 7],
    _m_ = [0, cst_src_pipe_transport_ml$18, 444, 7],
    _k_ = [0, 0],
    cst_FOOBAR123 = cst_FOOBAR123$1,
    cst_src_pipe_transport_ml = cst_src_pipe_transport_ml$18,
    cst_run_test_write_1_msg_1_chu =
      "<<run_test write_1_msg_1_chunk (verify 1 1)>>",
    cst_src_pipe_transport_ml$0 = cst_src_pipe_transport_ml$18,
    cst_run_test_f_verify_2_1 = "<<run_test f (verify 2 1)>>",
    cst_src_pipe_transport_ml$1 = cst_src_pipe_transport_ml$18,
    cst_run_test_write_1_msg_3_chu =
      "<<run_test write_1_msg_3_chunk (verify 1 3)>>",
    cst_src_pipe_transport_ml$2 = cst_src_pipe_transport_ml$18,
    cst_run_test_write_2_msg_1_chu =
      "<<run_test write_2_msg_1_chunk (verify 2 1)>>",
    cst_src_pipe_transport_ml$3 = cst_src_pipe_transport_ml$18,
    cst_run_test_write_2_msg_one_b =
      "<<run_test write_2_msg_one_byte_at_a_time_34_ch[...]>>",
    cst_src_pipe_transport_ml$4 = cst_src_pipe_transport_ml$18,
    cst_run_test_f_verify_7_40 = "<<run_test f (verify 7 40)>>",
    cst_src_pipe_transport_ml$5 = cst_src_pipe_transport_ml$18,
    cst_can_call_read_forever_mult = "can call read_forever multiple times",
    _j_ = [0, 1],
    _g_ = [0, "bytes_written"],
    _h_ = [0, "monitor"],
    _i_ = [0, cst_pipe],
    _d_ = [0, cst_src_pipe_transport_ml$18, 116, 12],
    _e_ = [0, cst_src_pipe_transport_ml$18, 110, 16],
    _f_ = [1, 3456156],
    _a_ = [0, "bytes_read"],
    _b_ = [0, "buffer"],
    _c_ = [0, cst_pipe],
    cst_src_pipe_transport_ml$6 = cst_src_pipe_transport_ml$18,
    cst_Test_reader_string = cst_Test_reader_string$1,
    cst_src_pipe_transport_ml$7 = cst_src_pipe_transport_ml$18,
    cst_Test_reader_bigstring = cst_Test_reader_bigstring$1,
    cst_src_pipe_transport_ml$14 = cst_src_pipe_transport_ml$18,
    cst_src_pipe_transport_ml$15 = cst_src_pipe_transport_ml$18,
    cst_Test_reader_string$0 = cst_Test_reader_string$1,
    cst_src_pipe_transport_ml$16 = cst_src_pipe_transport_ml$18,
    cst_src_pipe_transport_ml$17 = cst_src_pipe_transport_ml$18,
    cst_Test_reader_bigstring$0 = cst_Test_reader_bigstring$1,
    cst_async_rpc_kernel = cst_async_rpc_kernel$0,
    cst_Async_rpc_kernel_Pipe_tran = cst_Async_rpc_kernel_Pipe_tran$0;
   function pipe_read(t, f){
    function _aC_(param){
     if(3456156 <= param) return caml_call1(f, 3456156);
     var res = caml_call3(Async_kernel_Pipe[40], 0, 0, t);
     if(typeof res === "number" && 3456156 > res) return pipe_read(t, f);
     return caml_call1(f, res);
    }
    var _aD_ = caml_call1(Async_kernel_Pipe[46], t);
    return caml_call2(Async_kernel[23][2], _aD_, _aC_);
   }
   function create(pipe){
    var _aB_ = Core_Int63[16];
    return [0,
            pipe,
            caml_call1(Core_Bigbuffer[2], Async_rpc_kernel_Transport[1][1]),
            _aB_];
   }
   function Pipe_reader(Data){
    function sexp_of_t(x_009){
     var
      of_a_001 = Data[1],
      buffer_005 = x_009[2],
      pipe_003 = x_009[1],
      bytes_read_007 = x_009[3],
      arg_008 = caml_call1(Core_Int63[103], bytes_read_007),
      bnds_002 = [0, [1, [0, _a_, [0, arg_008, 0]]], 0],
      arg_006 = caml_call1(Core_Bigbuffer[1], buffer_005),
      bnds_002$0 = [0, [1, [0, _b_, [0, arg_006, 0]]], bnds_002],
      arg_004 = caml_call2(Async_kernel_Pipe[4][1], of_a_001, pipe_003),
      bnds_002$1 = [0, [1, [0, _c_, [0, arg_004, 0]]], bnds_002$0];
     return [1, bnds_002$1];
    }
    function close(t){
     caml_call1(Async_kernel_Pipe[16], t[1]);
     return Async_kernel_Deferred[18];
    }
    function is_closed(t){return caml_call1(Async_kernel_Pipe[17], t[1]);}
    function bytes_read(t){return t[3];}
    function read_forever(t, on_message, on_end_of_batch){
     var buffer = t[2];
     function process_queue$0(counter, need, queue){
      for(;;){
       var match = caml_call1(Core_Queue[45], queue);
       if(! match) return caml_call1(Async_kernel[20], [1, need]);
       var
        data = match[1],
        buff_len = caml_call1(Core_Bigbuffer[12], buffer),
        data_len = caml_call1(Data[2], data);
       if
        (caml_call2(Core_Int[96][3], buff_len, 0)
         && caml_call2(Core_Int[96][1], data_len, need)){
        var _ax_ = caml_call1(Data[4], data), _ay_ = 0;
        if(counter >= 50)
         return caml_trampoline_return
                 (process_data$0, [0, _ay_, _ax_, data_len, queue]);
        var counter$0 = counter + 1 | 0;
        return process_data$0(counter$0, _ay_, _ax_, data_len, queue);
       }
       caml_call2(Data[3], buffer, data);
       var _az_ = caml_call1(Core_Bigbuffer[12], buffer);
       if(caml_call2(Core_Int[96][1], _az_, need)){
        var
         data$0 = caml_call1(Core_Bigbuffer[22], buffer),
         length = caml_call1(Core_Bigbuffer[12], buffer),
         _aA_ = 0;
        if(counter >= 50)
         return caml_trampoline_return
                 (process_data$0, [0, _aA_, data$0, length, queue]);
        var counter$1 = counter + 1 | 0;
        return process_data$0(counter$1, _aA_, data$0, length, queue);
       }
      }
     }
     function process_data$0(counter, pos, data, length, queue){
      if
       (!
        caml_call2(Core_Int[96][1], length, Async_rpc_kernel_Transport[1][1])){
       var _aw_ = Async_rpc_kernel_Transport[1][1];
       if(counter >= 50)
        return caml_trampoline_return
                (set_buffer_and_process_queue$0,
                 [0, _aw_, pos, length, queue, data]);
       var counter$1 = counter + 1 | 0;
       return set_buffer_and_process_queue$0
               (counter$1, _aw_, pos, length, queue, data);
      }
      var
       payload_len = caml_call2(Async_rpc_kernel_Transport[1][2], data, pos),
       total_len = Async_rpc_kernel_Transport[1][1] + payload_len | 0;
      if(! caml_call2(Core_Int[96][1], length, total_len)){
       if(counter >= 50)
        return caml_trampoline_return
                (set_buffer_and_process_queue$0,
                 [0, total_len, pos, length, queue, data]);
       var counter$0 = counter + 1 | 0;
       return set_buffer_and_process_queue$0
               (counter$0, total_len, pos, length, queue, data);
      }
      var _as_ = caml_call1(Core_Int63[72], payload_len);
      t[3] = caml_call2(Core_Int63[19], t[3], _as_);
      var
       continue_or_wait =
         caml_call3
          (on_message,
           data,
           pos + Async_rpc_kernel_Transport[1][1] | 0,
           payload_len);
      if(typeof continue_or_wait !== "number" && 0 === continue_or_wait[0]){
       var
        x = continue_or_wait[1],
        pos$0 = pos + total_len | 0,
        length$0 = length - total_len | 0;
       set_buffer(pos$0, length$0, data);
       var _av_ = function(data){return caml_call2(Data[3], buffer, data);};
       caml_call2(Core_Queue[18], queue, _av_);
       return caml_call1(Async_kernel[20], [0, x]);
      }
      function _at_(param){
       var pos$0 = pos + total_len | 0, length$0 = length - total_len | 0;
       if(caml_call2(Core_Int[96][1], length$0, 0))
        return caml_call2(Core_Int[96][4], length$0, 0)
                ? process_data(pos$0, data, length$0, queue)
                : set_buffer_and_process_queue
                  (Async_rpc_kernel_Transport[1][1], pos$0, 0, queue, data);
       throw caml_maybe_attach_backtrace([0, Assert_failure, _d_], 1);
      }
      if(typeof continue_or_wait === "number")
       var _au_ = Async_kernel_Deferred[18];
      else{
       if(0 === continue_or_wait[0])
        throw caml_maybe_attach_backtrace([0, Assert_failure, _e_], 1);
       var d = continue_or_wait[1], _au_ = d;
      }
      return caml_call2(Async_kernel[23][2], _au_, _at_);
     }
     function set_buffer_and_process_queue$0
     (counter, need, pos, length, queue, data){
      set_buffer(pos, length, data);
      if(counter >= 50)
       return caml_trampoline_return(process_queue$0, [0, need, queue]);
      var counter$0 = counter + 1 | 0;
      return process_queue$0(counter$0, need, queue);
     }
     function process_queue(need, queue){
      return caml_trampoline(process_queue$0(0, need, queue));
     }
     function process_data(pos, data, length, queue){
      return caml_trampoline(process_data$0(0, pos, data, length, queue));
     }
     function set_buffer_and_process_queue(need, pos, length, queue, data){
      return caml_trampoline
              (set_buffer_and_process_queue$0
                (0, need, pos, length, queue, data));
     }
     function set_buffer(pos, length, data){
      if(caml_call2(Core_Int[96][3], length, 0))
       return caml_call1(Core_Bigbuffer[13], buffer);
      var data$0 = caml_call3(Core_Bigstring[25], data, pos, length);
      caml_call1(Core_Bigbuffer[13], buffer);
      return caml_call2(Core_Bigbuffer[23], buffer, data$0);
     }
     function wait_for_read(need){
      function _aq_(param){
       if(typeof param === "number") return caml_call1(Async_kernel[20], _f_);
       var queue = param[2], _ar_ = process_queue(need, queue);
       return caml_call2(Async_kernel[21], _ar_, end_of_batch_and_continue);
      }
      return pipe_read(t[1], _aq_);
     }
     function end_of_batch_and_continue(next){
      caml_call1(on_end_of_batch, 0);
      if(0 === next[0]){
       var result = next[1];
       return caml_call1(Async_kernel[20], [0, result]);
      }
      var need = next[1];
      return wait_for_read(need);
     }
     var
      need = Async_rpc_kernel_Transport[1][1],
      length = caml_call1(Core_Bigbuffer[12], buffer);
     if(caml_call2(Core_Int[85], length, need)) return wait_for_read(need);
     var
      data = caml_call1(Core_Bigbuffer[22], buffer),
      _ap_ = process_data(0, data, length, caml_call2(Core_Queue[66], 0, 0));
     return caml_call2(Async_kernel[21], _ap_, end_of_batch_and_continue);
    }
    var of_bigstring = Data[5], For_testing = [0, of_bigstring];
    return [0,
            sexp_of_t,
            close,
            is_closed,
            bytes_read,
            read_forever,
            For_testing];
   }
   function Pipe_writer(Data){
    function sexp_of_t(x_019){
     var
      of_a_011 = Data[1],
      monitor_015 = x_019[2],
      pipe_013 = x_019[1],
      bytes_written_017 = x_019[3],
      arg_018 = caml_call1(Core_Int63[103], bytes_written_017),
      bnds_012 = [0, [1, [0, _g_, [0, arg_018, 0]]], 0],
      arg_016 = caml_call1(Async_kernel_Monitor[1], monitor_015),
      bnds_012$0 = [0, [1, [0, _h_, [0, arg_016, 0]]], bnds_012],
      arg_014 = caml_call2(Async_kernel_Pipe[3][1], of_a_011, pipe_013),
      bnds_012$1 = [0, [1, [0, _i_, [0, arg_014, 0]]], bnds_012$0];
     return [1, bnds_012$1];
    }
    function close(t){
     caml_call1(Async_kernel_Pipe[15], t[1]);
     return Async_kernel_Deferred[18];
    }
    function is_closed(t){return caml_call1(Async_kernel_Pipe[17], t[1]);}
    function monitor(t){return t[2];}
    function bytes_to_write(param){return 0;}
    function bytes_written(t){return t[3];}
    function stopped(t){return caml_call1(Async_kernel_Pipe[18], t[1]);}
    function flushed(param){return Async_kernel_Deferred[18];}
    function check_closed(t, f){
     return caml_call1(Async_kernel_Pipe[17], t[1]) ? 0 : caml_call1(f, 0);
    }
    function incr_bytes_written(t, num_bytes){
     var _ao_ = caml_call1(Core_Int63[72], num_bytes);
     t[3] = caml_call2(Core_Int63[19], t[3], _ao_);
     return;
    }
    function send_bin_prot(t, writer, x){
     return check_closed
             (t,
              function(param){
               var
                buf = caml_call3(Bin_prot_Utils[4], _j_, writer, x),
                data = caml_call1(Data[5], buf),
                len = caml_call1(Data[2], data);
               incr_bytes_written(t, len);
               caml_call2(Async_kernel_Pipe[30], t[1], data);
               return [0, 0, len - Async_rpc_kernel_Transport[1][1] | 0];
              });
    }
    function send_bin_prot_and_bigstring(t, writer, x, buf, pos, payload_size){
     return check_closed
             (t,
              function(param){
               var
                data_size = caml_call1(writer[1], x),
                data =
                  caml_call1
                   (Core_Bigstring[121],
                    (data_size + Async_rpc_kernel_Transport[1][1] | 0)
                    + payload_size
                    | 0);
               caml_call3
                (Async_rpc_kernel_Transport[1][3],
                 data,
                 0,
                 data_size + payload_size | 0);
               var
                dst_pos =
                  caml_call3
                   (writer[2], data, Async_rpc_kernel_Transport[1][1], x);
               caml_call5
                (Core_Bigstring[22], buf, pos, data, dst_pos, payload_size);
               var
                data$0 = caml_call1(Data[5], data),
                len = caml_call1(Data[2], data$0);
               incr_bytes_written(t, len);
               caml_call2(Async_kernel_Pipe[30], t[1], data$0);
               return [0, 0, len - Async_rpc_kernel_Transport[1][1] | 0];
              });
    }
    function send_bin_prot_and_bigstring_no(t, writer, x, buf, pos, len){
     var r = send_bin_prot_and_bigstring(t, writer, x, buf, pos, len);
     if(typeof r !== "number" && 0 === r[0]){
      var bytes = r[2];
      return [0, Async_kernel_Deferred[18], bytes];
     }
     return r;
    }
    return [0,
            sexp_of_t,
            close,
            is_closed,
            monitor,
            bytes_to_write,
            bytes_written,
            stopped,
            flushed,
            flushed,
            ,
            ,
            ,
            send_bin_prot,
            send_bin_prot_and_bigstring,
            send_bin_prot_and_bigstring_no];
   }
   var
    sexp_of_t = Core_Bigstring[6],
    length = Core_Bigstring[21],
    add_to_bigbuffer = Core_Bigbuffer[23];
   function to_bigstring(x){return x;}
   function of_bigstring(x){return x;}
   var
    Bigstring_data =
      [0, sexp_of_t, length, add_to_bigbuffer, to_bigstring, of_bigstring],
    sexp_of_t$0 = Core_String[135],
    length$0 = runtime.caml_ml_string_length,
    add_to_bigbuffer$0 = Core_Bigbuffer[16];
   function to_bigstring$0(x){return caml_call3(Core_Bigstring[14], 0, 0, x);}
   function of_bigstring$0(x){return caml_call3(Core_Bigstring[16], 0, 0, x);}
   var
    String_data =
      [0,
       sexp_of_t$0,
       length$0,
       add_to_bigbuffer$0,
       to_bigstring$0,
       of_bigstring$0],
    Bigstring_pipe_reader = Pipe_reader(Bigstring_data),
    Bigstring_pipe_writer = Pipe_writer(Bigstring_data),
    String_pipe_reader = Pipe_reader(String_data),
    String_pipe_writer = Pipe_writer(String_data),
    Kind = [0, 0, 1];
   function create$0(kind, reader$0, writer$0){
    var
     _al_ = Core_Int63[16],
     writer =
       [0, writer$0, caml_call4(Async_kernel_Monitor[3], 0, 0, 0, 0), _al_],
     _am_ =
       kind
        ? caml_call2
          (Async_rpc_kernel_Transport[3][13],
           [0,
            Bigstring_pipe_writer[1],
            Bigstring_pipe_writer[2],
            Bigstring_pipe_writer[3],
            Bigstring_pipe_writer[4],
            Bigstring_pipe_writer[5],
            Bigstring_pipe_writer[6],
            Bigstring_pipe_writer[7],
            Bigstring_pipe_writer[8],
            Bigstring_pipe_writer[9],
            Bigstring_pipe_writer[13],
            Bigstring_pipe_writer[14],
            Bigstring_pipe_writer[15]],
           writer)
        : caml_call2
          (Async_rpc_kernel_Transport[3][13],
           [0,
            String_pipe_writer[1],
            String_pipe_writer[2],
            String_pipe_writer[3],
            String_pipe_writer[4],
            String_pipe_writer[5],
            String_pipe_writer[6],
            String_pipe_writer[7],
            String_pipe_writer[8],
            String_pipe_writer[9],
            String_pipe_writer[13],
            String_pipe_writer[14],
            String_pipe_writer[15]],
           writer),
     reader = create(reader$0),
     _an_ =
       kind
        ? caml_call2
          (Async_rpc_kernel_Transport[2][6],
           [0,
            Bigstring_pipe_reader[1],
            Bigstring_pipe_reader[2],
            Bigstring_pipe_reader[3],
            Bigstring_pipe_reader[4],
            Bigstring_pipe_reader[5]],
           reader)
        : caml_call2
          (Async_rpc_kernel_Transport[2][6],
           [0,
            String_pipe_reader[1],
            String_pipe_reader[2],
            String_pipe_reader[3],
            String_pipe_reader[4],
            String_pipe_reader[5]],
           reader);
    return [0, _an_, _am_];
   }
   function Test_reader(Transport_reader){
    var default_message = caml_call3(Core_Bigstring[14], 0, 0, cst_FOOBAR123);
    function create_message_buf(message){
     var
      message_len = caml_call1(Core_Bigstring[21], message),
      buf =
        caml_call1
         (Core_Bigstring[121],
          Async_rpc_kernel_Transport[1][1] + message_len | 0);
     caml_call3(Async_rpc_kernel_Transport[1][3], buf, 0, message_len);
     caml_call5
      (Core_Bigstring[22],
       message,
       0,
       buf,
       Async_rpc_kernel_Transport[1][1],
       message_len);
     return buf;
    }
    function create_message(param){
     return create_message_buf(default_message);
    }
    function on_message(opt, on_message_count, buffer, pos$0, len){
     if(opt)
      var sth = opt[1], message = sth;
     else
      var message = default_message;
     on_message_count[1] = on_message_count[1] + 1 | 0;
     var
      got = caml_call3(Core_Bigstring[25], buffer, pos$0, len),
      sexpifier = Core_Bigstring[6],
      equal = 0,
      message$0 = 0,
      here = 0;
     function comparator(a_020, b_021){
      return caml_call2(Core_Bigstring[4], a_020, b_021);
     }
     caml_call8
      (Ppx_assert_lib_Runtime[3],
       pos,
       sexpifier,
       comparator,
       here,
       message$0,
       equal,
       message,
       got);
     return 0;
    }
    function on_end_of_batch(on_end_of_batch_count, param){on_end_of_batch_count[1]++; return 0;
    }
    function wait(param){
     return caml_call1(Async_kernel_Async_kernel_sche[34][2], 0);
    }
    function run_test(run, verify){
     var
      match = caml_call3(Async_kernel_Pipe[7], 0, 0, 0),
      writer = match[2],
      reader = match[1],
      reader$0 = create(reader),
      on_message_count = [0, 0],
      on_end_of_batch_count = [0, 0],
      _af_ = 0;
     function on_message$0(_ai_, _aj_, _ak_){
      return on_message(_af_, on_message_count, _ai_, _aj_, _ak_);
     }
     function on_end_of_batch$0(_ah_){
      return on_end_of_batch(on_end_of_batch_count, _ah_);
     }
     caml_call3
      (Transport_reader[6], reader$0, on_message$0, on_end_of_batch$0);
     wait(0);
     caml_call1
      (run,
       function(x){
        var _ag_ = caml_call1(Transport_reader[1][1], x);
        return caml_call2(Async_kernel_Pipe[30], writer, _ag_);
       });
     wait(0);
     return caml_call2(verify, on_message_count, on_end_of_batch_count);
    }
    function verify
    (on_message_count, on_end_of_batch_count, message_count, batch_count){
     var
      got = on_message_count[1],
      sexpifier = Core[389],
      equal = 0,
      message = 0,
      here = 0;
     function comparator(a_022, b_023){
      return caml_call2(Core[382], a_022, b_023);
     }
     caml_call8
      (Ppx_assert_lib_Runtime[3],
       pos$0,
       sexpifier,
       comparator,
       here,
       message,
       equal,
       message_count,
       got);
     var
      got$0 = on_end_of_batch_count[1],
      sexpifier$0 = Core[389],
      equal$0 = 0,
      message$0 = 0,
      here$0 = 0;
     function comparator$0(a_024, b_025){
      return caml_call2(Core[382], a_024, b_025);
     }
     return caml_call8
             (Ppx_assert_lib_Runtime[3],
              pos$1,
              sexpifier$0,
              comparator$0,
              here$0,
              message$0,
              equal$0,
              batch_count,
              got$0);
    }
    function write_1_msg_1_chunk(write){
     return caml_call1(write, create_message(0));
    }
    function write_1_msg_3_chunk(write){
     var
      buf = create_message_buf(caml_call3(Core_Bigstring[14], 0, 0, cst)),
      _ae_ = caml_call1(Core_Bigstring[21], default_message);
     caml_call3(Async_rpc_kernel_Transport[1][3], buf, 0, _ae_);
     caml_call1(write, buf);
     wait(0);
     var
      msg_len = caml_call1(Core_Bigstring[21], default_message),
      split_at = msg_len / 2 | 0,
      part1 = caml_call3(Core_Bigstring[25], default_message, 0, split_at),
      part2 =
        caml_call3
         (Core_Bigstring[25],
          default_message,
          split_at,
          msg_len - split_at | 0);
     caml_call1(write, part1);
     wait(0);
     return caml_call1(write, part2);
    }
    function write_2_msg_1_chunk(write){
     var
      one_msg = create_message_buf(default_message),
      two_msg =
        caml_call2(Core_Bigstring[18], 0, [0, one_msg, [0, one_msg, 0]]);
     return caml_call1(write, two_msg);
    }
    function write_2_msg_one_byte_at_a_time(write){
     var
      one_msg = create_message_buf(default_message),
      two_msg =
        caml_call2(Core_Bigstring[18], 0, [0, one_msg, [0, one_msg, 0]]),
      _ac_ = caml_call1(Core_Bigstring[21], two_msg) - 1 | 0,
      _ab_ = 0;
     if(_ac_ >= 0){
      var i = _ab_;
      for(;;){
       caml_call1(write, caml_call3(Core_Bigstring[25], two_msg, i, 1));
       wait(0);
       var _ad_ = i + 1 | 0;
       if(_ac_ === i) break;
       var i = _ad_;
      }
     }
     return 0;
    }
    function _E_(param){
     run_test
      (write_1_msg_1_chunk,
       function(_$_){return function(_aa_){return verify(_$_, _aa_, 1, 1);};});
     return 0;
    }
    caml_call8
     (Ppx_inline_test_lib[9],
      Inline_test_config,
      cst_run_test_write_1_msg_1_chu,
      0,
      cst_src_pipe_transport_ml,
      395,
      2,
      61,
      _E_);
    function _F_(param){
     function f(write){
      write_1_msg_1_chunk(write);
      return write_1_msg_1_chunk(write);
     }
     run_test
      (f,
       function(_Z_){return function(___){return verify(_Z_, ___, 2, 1);};});
     return 0;
    }
    caml_call8
     (Ppx_inline_test_lib[9],
      Inline_test_config,
      cst_run_test_f_verify_2_1,
      0,
      cst_src_pipe_transport_ml$0,
      397,
      2,
      137,
      _F_);
    function _G_(param){
     run_test
      (write_1_msg_3_chunk,
       function(_X_){return function(_Y_){return verify(_X_, _Y_, 1, 3);};});
     return 0;
    }
    caml_call8
     (Ppx_inline_test_lib[9],
      Inline_test_config,
      cst_run_test_write_1_msg_3_chu,
      0,
      cst_src_pipe_transport_ml$1,
      405,
      2,
      61,
      _G_);
    function _H_(param){
     run_test
      (write_2_msg_1_chunk,
       function(_V_){return function(_W_){return verify(_V_, _W_, 2, 1);};});
     return 0;
    }
    caml_call8
     (Ppx_inline_test_lib[9],
      Inline_test_config,
      cst_run_test_write_2_msg_1_chu,
      0,
      cst_src_pipe_transport_ml$2,
      406,
      2,
      61,
      _H_);
    function _I_(param){
     run_test
      (write_2_msg_one_byte_at_a_time,
       function(_T_){return function(_U_){return verify(_T_, _U_, 2, 34);};});
     return 0;
    }
    caml_call8
     (Ppx_inline_test_lib[9],
      Inline_test_config,
      cst_run_test_write_2_msg_one_b,
      0,
      cst_src_pipe_transport_ml$3,
      407,
      2,
      82,
      _I_);
    function _J_(param){
     function f(write){
      caml_call1(write, create_message(0));
      wait(0);
      write_1_msg_3_chunk(write);
      wait(0);
      write_2_msg_1_chunk(write);
      wait(0);
      write_2_msg_one_byte_at_a_time(write);
      wait(0);
      return caml_call1(write, create_message(0));
     }
     run_test
      (f,
       function(_R_){return function(_S_){return verify(_R_, _S_, 7, 40);};});
     return 0;
    }
    caml_call8
     (Ppx_inline_test_lib[9],
      Inline_test_config,
      cst_run_test_f_verify_7_40,
      0,
      cst_src_pipe_transport_ml$4,
      409,
      2,
      317,
      _J_);
    function _K_(param){
     var
      match = caml_call3(Async_kernel_Pipe[7], 0, 0, 0),
      writer = match[2],
      reader = match[1],
      reader$0 = create(reader);
     function on_end_of_batch(param){return 0;}
     function write(x){
      var _Q_ = caml_call1(Transport_reader[1][1], x);
      return caml_call2(Async_kernel_Pipe[30], writer, _Q_);
     }
     var num = [0, 0];
     function stop_after_on_message(buffer, pos, len){
      num[1]++;
      var
       got = caml_call3(Core_Bigstring[25], buffer, pos, len),
       sexpifier = Core_Bigstring[6],
       equal = 0,
       message = 0,
       here = 0;
      function comparator(a_026, b_027){
       return caml_call2(Core_Bigstring[4], a_026, b_027);
      }
      caml_call8
       (Ppx_assert_lib_Runtime[3],
        pos$2,
        sexpifier,
        comparator,
        here,
        message,
        equal,
        default_message,
        got);
      return _k_;
     }
     write_2_msg_1_chunk(write);
     caml_call1(Async_kernel_Pipe[15], writer);
     function _L_(x){
      if(! caml_call1(Core_Result[37], x))
       throw caml_maybe_attach_backtrace([0, Assert_failure, _m_], 1);
      function _O_(x){
       if(caml_call1(Core_Result[37], x)) return Async_kernel_Deferred[18];
       throw caml_maybe_attach_backtrace([0, Assert_failure, _l_], 1);
      }
      var
       _P_ =
         caml_call3
          (Transport_reader[6],
           reader$0,
           stop_after_on_message,
           on_end_of_batch);
      return caml_call2(Async_kernel[23][2], _P_, _O_);
     }
     var
      _M_ =
        caml_call3
         (Transport_reader[6],
          reader$0,
          stop_after_on_message,
          on_end_of_batch),
      _N_ = caml_call2(Async_kernel[23][2], _M_, _L_);
     caml_call1(Async_kernel[6], _N_);
     wait(0);
     var
      got = num[1],
      sexpifier = Core_Int[77],
      expect = 2,
      equal = 0,
      message = 0,
      here = 0;
     function comparator(a_030, b_031){
      return caml_call2(Core_Int[88], a_030, b_031);
     }
     caml_call8
      (Ppx_assert_lib_Runtime[3],
       pos$3,
       sexpifier,
       comparator,
       here,
       message,
       equal,
       expect,
       got);
     return 0;
    }
    caml_call8
     (Ppx_inline_test_lib[9],
      Inline_test_config,
      cst_can_call_read_forever_mult,
      0,
      cst_src_pipe_transport_ml$5,
      424,
      2,
      1007,
      _K_);
    return;
   }
   function _n_(param){
    Test_reader
     ([0,
       String_pipe_reader[6],
       String_pipe_reader[1],
       String_pipe_reader[2],
       String_pipe_reader[3],
       String_pipe_reader[4],
       String_pipe_reader[5]]);
    return 0;
   }
   caml_call8
    (Ppx_inline_test_lib[10],
     Inline_test_config,
     cst_Test_reader_string,
     0,
     cst_src_pipe_transport_ml$6,
     458,
     0,
     79,
     _n_);
   function _o_(param){
    Test_reader
     ([0,
       Bigstring_pipe_reader[6],
       Bigstring_pipe_reader[1],
       Bigstring_pipe_reader[2],
       Bigstring_pipe_reader[3],
       Bigstring_pipe_reader[4],
       Bigstring_pipe_reader[5]]);
    return 0;
   }
   caml_call8
    (Ppx_inline_test_lib[10],
     Inline_test_config,
     cst_Test_reader_bigstring,
     0,
     cst_src_pipe_transport_ml$7,
     459,
     0,
     85,
     _o_);
   function Bench_reader(Transport_reader){
    var
     default_message = caml_call3(Core_Bigstring[14], 0, 0, cst_FOOBAR123$0);
    function create_message_buf(message){
     var
      message_len = caml_call1(Core_Bigstring[21], message),
      buf =
        caml_call1
         (Core_Bigstring[121],
          Async_rpc_kernel_Transport[1][1] + message_len | 0);
     caml_call3(Async_rpc_kernel_Transport[1][3], buf, 0, message_len);
     caml_call5
      (Core_Bigstring[22],
       message,
       0,
       buf,
       Async_rpc_kernel_Transport[1][1],
       message_len);
     return buf;
    }
    function create_message(param){
     return create_message_buf(default_message);
    }
    var
     one_message = create_message(0),
     two_messages =
       caml_call2
        (Core_Bigstring[18], 0, [0, one_message, [0, one_message, 0]]),
     msg_len = caml_call1(Core_Bigstring[21], one_message),
     split_at = msg_len / 2 | 0,
     one_message_p1 = caml_call3(Core_Bigstring[25], one_message, 0, split_at),
     one_message_p2 =
       caml_call3
        (Core_Bigstring[25], one_message, split_at, msg_len - split_at | 0);
    function on_message(buffer, param, _D_){return 0;}
    function on_end_of_batch(param){return 0;}
    function wait(param){
     return caml_call1(Async_kernel_Async_kernel_sche[34][2], 0);
    }
    function run_test(run){
     var
      match = caml_call3(Async_kernel_Pipe[7], 0, 0, 0),
      writer = match[2],
      reader = match[1],
      reader$0 = create(reader);
     caml_call3(Transport_reader[6], reader$0, on_message, on_end_of_batch);
     wait(0);
     var for$0 = 0;
     for(;;){
      caml_call1
       (run,
        function(x){
         var _C_ = caml_call1(Transport_reader[1][1], x);
         return caml_call2(Async_kernel_Pipe[30], writer, _C_);
        });
      var _B_ = for$0 + 1 | 0;
      if(100 === for$0) return wait(0);
      var for$0 = _B_;
     }
    }
    function write_1_msg_1_chunk(write){
     return caml_call1(write, one_message);
    }
    var buf = create_message_buf(caml_call3(Core_Bigstring[14], 0, 0, cst$0));
    function write_1_msg_3_chunk(write){
     var _A_ = caml_call1(Core_Bigstring[21], one_message);
     caml_call3(Async_rpc_kernel_Transport[1][3], buf, 0, _A_);
     caml_call1(write, buf);
     caml_call1(write, one_message_p1);
     return caml_call1(write, one_message_p2);
    }
    function write_2_msg_1_chunk(write){
     return caml_call1(write, two_messages);
    }
    function write_2_msg_one_byte_at_a_time(write){
     var _y_ = caml_call1(Core_Bigstring[21], two_messages) - 1 | 0, _x_ = 0;
     if(_y_ >= 0){
      var i = _x_;
      for(;;){
       caml_call1(write, caml_call3(Core_Bigstring[25], two_messages, i, 1));
       var _z_ = i + 1 | 0;
       if(_y_ === i) break;
       var i = _z_;
      }
     }
     return 0;
    }
    if(Ppx_bench_lib_Benchmark_accumu[3]){
     var f = function(param, _w_){return run_test(write_1_msg_1_chunk);};
     caml_call8
      (Ppx_bench_lib_Benchmark_accumu[5],
       cst_write_1_msg_1_chunk,
       cst_run_test_write_1_msg_1_chu$0,
       cst_src_pipe_transport_ml$8,
       cst_src_pipe_transport_ml_Benc,
       529,
       2,
       64,
       [0, f]);
    }
    if(Ppx_bench_lib_Benchmark_accumu[3]){
     var
      f$0 =
        function(param, _v_){
         function f(write){
          write_1_msg_1_chunk(write);
          return write_1_msg_1_chunk(write);
         }
         return run_test(f);
        };
     caml_call8
      (Ppx_bench_lib_Benchmark_accumu[5],
       cst_write_2_msg_1_chunk,
       cst_let_f_write_write_1_msg_1_,
       cst_src_pipe_transport_ml$9,
       cst_src_pipe_transport_ml_Benc$0,
       531,
       2,
       140,
       [0, f$0]);
    }
    if(Ppx_bench_lib_Benchmark_accumu[3]){
     var f$1 = function(param, _u_){return run_test(write_1_msg_3_chunk);};
     caml_call8
      (Ppx_bench_lib_Benchmark_accumu[5],
       cst_write_1_msg_3_chunk,
       cst_run_test_write_1_msg_3_chu$0,
       cst_src_pipe_transport_ml$10,
       cst_src_pipe_transport_ml_Benc$1,
       539,
       2,
       64,
       [0, f$1]);
    }
    if(Ppx_bench_lib_Benchmark_accumu[3]){
     var f$2 = function(param, _t_){return run_test(write_2_msg_1_chunk);};
     caml_call8
      (Ppx_bench_lib_Benchmark_accumu[5],
       cst_write_2_msg_1_chunk$0,
       cst_run_test_write_2_msg_1_chu$0,
       cst_src_pipe_transport_ml$11,
       cst_src_pipe_transport_ml_Benc$2,
       540,
       2,
       64,
       [0, f$2]);
    }
    if(Ppx_bench_lib_Benchmark_accumu[3]){
     var
      f$3 =
        function(param, _s_){return run_test(write_2_msg_one_byte_at_a_time);};
     caml_call8
      (Ppx_bench_lib_Benchmark_accumu[5],
       cst_write_2_msg_one_byte,
       cst_run_test_write_2_msg_one_b$0,
       cst_src_pipe_transport_ml$12,
       cst_src_pipe_transport_ml_Benc$3,
       541,
       2,
       85,
       [0, f$3]);
    }
    if(Ppx_bench_lib_Benchmark_accumu[3]){
     var
      f$4 =
        function(param, _r_){
         function f(write){
          caml_call1(write, create_message(0));
          write_1_msg_3_chunk(write);
          write_2_msg_1_chunk(write);
          write_2_msg_one_byte_at_a_time(write);
          return caml_call1(write, create_message(0));
         }
         return run_test(f);
        };
     caml_call8
      (Ppx_bench_lib_Benchmark_accumu[5],
       cst_multi,
       cst_let_f_write_write_create_m,
       cst_src_pipe_transport_ml$13,
       cst_src_pipe_transport_ml_Benc$4,
       543,
       2,
       245,
       [0, f$4]);
    }
    return;
   }
   if(Ppx_bench_lib_Benchmark_accumu[3]){
    var
     _p_ =
       function(param){
        Bench_reader
         ([0,
           String_pipe_reader[6],
           String_pipe_reader[1],
           String_pipe_reader[2],
           String_pipe_reader[3],
           String_pipe_reader[4],
           String_pipe_reader[5]]);
        return 0;
       };
    caml_call8
     (Ppx_bench_lib_Benchmark_accumu[6],
      cst_Test_reader_string$0,
      cst$1,
      cst_src_pipe_transport_ml$15,
      cst_src_pipe_transport_ml$14,
      555,
      0,
      81,
      _p_);
   }
   if(Ppx_bench_lib_Benchmark_accumu[3]){
    var
     _q_ =
       function(param){
        Bench_reader
         ([0,
           Bigstring_pipe_reader[6],
           Bigstring_pipe_reader[1],
           Bigstring_pipe_reader[2],
           Bigstring_pipe_reader[3],
           Bigstring_pipe_reader[4],
           Bigstring_pipe_reader[5]]);
        return 0;
       };
    caml_call8
     (Ppx_bench_lib_Benchmark_accumu[6],
      cst_Test_reader_bigstring$0,
      cst$2,
      cst_src_pipe_transport_ml$17,
      cst_src_pipe_transport_ml$16,
      556,
      0,
      87,
      _q_);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_async_rpc_kernel);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_rpc_kernel_Pipe_tran);
   var Async_rpc_kernel_Pipe_transpor = [0, Kind, create$0];
   runtime.caml_register_global
    (101, Async_rpc_kernel_Pipe_transpor, cst_Async_rpc_kernel_Pipe_tran$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_rpc_kernel__Persistent_connection
//# unitInfo: Requires: Async_rpc_kernel__Rpc, Async_rpc_kernel__Versioned_rpc, Persistent_connection_kernel, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_rpc_kernel_Persisten$0 =
      "Async_rpc_kernel__Persistent_connection",
    cst_async_rpc_kernel$0 = "async_rpc_kernel";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Async_rpc_kernel_Rpc = global_data.Async_rpc_kernel__Rpc,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Persistent_connection_kernel = global_data.Persistent_connection_kernel,
    Async_rpc_kernel_Versioned_rpc =
      global_data.Async_rpc_kernel__Versioned_rpc;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_rpc_kernel_Persisten$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_rpc_kernel$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/persistent_connection.ml");
   caml_call2
    (Ppx_inline_test_lib[6],
     cst_async_rpc_kernel$0,
     "persistent_connection.ml");
   var
    Make = Persistent_connection_kernel[2],
    rpc_connection = Async_rpc_kernel_Versioned_rpc[2][3],
    cst_async_rpc_kernel = cst_async_rpc_kernel$0,
    cst_Async_rpc_kernel_Persisten = cst_Async_rpc_kernel_Persisten$0;
   function close(t){
    var _c_ = caml_call1(rpc_connection, t);
    return caml_call3(Async_rpc_kernel_Rpc[5][10], 0, 0, _c_);
   }
   function is_closed(t){
    var _b_ = caml_call1(rpc_connection, t);
    return caml_call1(Async_rpc_kernel_Rpc[5][13], _b_);
   }
   function close_finished(t){
    var _a_ = caml_call1(rpc_connection, t);
    return caml_call1(Async_rpc_kernel_Rpc[5][11], _a_);
   }
   var
    Versioned_rpc = caml_call1(Make, [0, close, is_closed, close_finished]);
   function close$0(t){
    return caml_call3(Async_rpc_kernel_Rpc[5][10], 0, 0, t);
   }
   function is_closed$0(t){return caml_call1(Async_rpc_kernel_Rpc[5][13], t);}
   function close_finished$0(t){
    return caml_call1(Async_rpc_kernel_Rpc[5][11], t);
   }
   var Rpc = caml_call1(Make, [0, close$0, is_closed$0, close_finished$0]);
   caml_call1(Ppx_inline_test_lib[7], cst_async_rpc_kernel);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_rpc_kernel_Persisten);
   var Async_rpc_kernel_Persistent_co = [0, Rpc, Versioned_rpc];
   runtime.caml_register_global
    (14, Async_rpc_kernel_Persistent_co, cst_Async_rpc_kernel_Persisten$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_rpc_kernel
//# unitInfo: Requires: Async_rpc_kernel__Connection, Async_rpc_kernel__Rpc_metadata, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_rpc_kernel = "Async_rpc_kernel",
    cst_async_rpc_kernel = "async_rpc_kernel";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Async_rpc_kernel_Rpc_metadata = global_data.Async_rpc_kernel__Rpc_metadata,
    Async_rpc_kernel_Connection = global_data.Async_rpc_kernel__Connection;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_rpc_kernel);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_rpc_kernel);
   caml_call1(Ppx_expect_runtime[1][1], "src/async_rpc_kernel.ml");
   caml_call2
    (Ppx_inline_test_lib[6], cst_async_rpc_kernel, "async_rpc_kernel.ml");
   var
    Rpc_metadata =
      [0, Async_rpc_kernel_Rpc_metadata[1], Async_rpc_kernel_Rpc_metadata[2]],
    Async_rpc_kernel_stable = [0],
    default_handshake_timeout = Async_rpc_kernel_Connection[31],
    Async_rpc_kernel_private =
      [0,
       Async_rpc_kernel_Rpc_metadata,
       Async_rpc_kernel_Connection,
       default_handshake_timeout];
   caml_call1(Ppx_inline_test_lib[7], cst_async_rpc_kernel);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_rpc_kernel);
   var
    Async_rpc_kernel =
      [0, Rpc_metadata, Async_rpc_kernel_stable, Async_rpc_kernel_private];
   runtime.caml_register_global(13, Async_rpc_kernel, cst_Async_rpc_kernel);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
