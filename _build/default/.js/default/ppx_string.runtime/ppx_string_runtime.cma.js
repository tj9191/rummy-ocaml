// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Ppx_string_runtime__
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Ppx_string_runtime = [0],
    Ppx_string_runtime$0 = [0, Ppx_string_runtime];
   runtime.caml_register_global
    (0, Ppx_string_runtime$0, "Ppx_string_runtime__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppx_string_runtime__Ppx_string_runtime_intf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Ppx_string_runtime_Ppx_string_ = [0];
   runtime.caml_register_global
    (0,
     Ppx_string_runtime_Ppx_string_,
     "Ppx_string_runtime__Ppx_string_runtime_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppx_string_runtime
//# unitInfo: Requires: Stdlib, Stdlib__StringLabels
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, cst$0 = "";
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = cst$0,
    empty = cst$0,
    Stdlib_StringLabels = global_data.Stdlib__StringLabels,
    Stdlib = global_data.Stdlib;
   function of_string(t){return t;}
   function convert(t){return t;}
   function concat(list){
    return caml_call2(Stdlib_StringLabels[7], cst, list);
   }
   function pad(t, len){
    var n = runtime.caml_ml_string_length(t);
    if(len <= n) return t;
    var _a_ = caml_call2(Stdlib_StringLabels[1], len - n | 0, 32);
    return caml_call2(Stdlib[28], _a_, t);
   }
   var
    For_string = [0, empty, of_string, convert, concat, pad],
    Ppx_string_runtime = [0, For_string];
   runtime.caml_register_global(4, Ppx_string_runtime, "Ppx_string_runtime");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLjAsImZpbGUiOiJwcHhfc3RyaW5nX3J1bnRpbWUuY21hLmpzIiwic291cmNlUm9vdCI6IiIsIm5hbWVzIjpbImVtcHR5Iiwib2Zfc3RyaW5nIiwidCIsImNvbnZlcnQiLCJjb25jYXQiLCJsaXN0IiwicGFkIiwibGVuIiwibiJdLCJzb3VyY2VzIjpbIi9Vc2Vycy90eWxhbm1vcmFuLy5vcGFtLzUuMS4xL2xpYi9wcHhfc3RyaW5nL3J1bnRpbWUvcHB4X3N0cmluZ19ydW50aW1lX18ubWwiLCIvVXNlcnMvdHlsYW5tb3Jhbi8ub3BhbS81LjEuMS9saWIvcHB4X3N0cmluZy9ydW50aW1lL3BweF9zdHJpbmdfcnVudGltZS5tbCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztHQUs4Qjs7SUFBQTs7Ozs7RTs7Ozs7Ozs7Ozs7Ozs7O0U7Ozs7Ozs7OztHOzs7Ozs7OztJQ0N4QkE7OztZQUNBQyxVQUFVQyxHQUFJLE9BQUpBLEVBQUs7WUFDZkMsUUFBUUQsR0FBSSxPQUFKQSxFQUFLO1lBQ2JFLE9BQU9DO0lBQU8sT0FBQSx3Q0FBUEE7R0FBaUM7WUFFeENDLElBQUlKLEdBQUdLO0lBQ1QsSUFBSUMsa0NBREVOO09BQUdLLE9BQ0xDLEdBQ2EsT0FGWE47SUFFa0IsVUFBQSxtQ0FGZkssTUFDTEM7SUFDb0IsT0FBQSw0QkFGbEJOO0dBRStDO0dBUnJDO0lBQUEsaUJBQ2RGLE9BQ0FDLFdBQ0FFLFNBQ0FDLFFBRUFFOzs7O0UiLCJzb3VyY2VzQ29udGVudCI6WyIoKiBnZW5lcmF0ZWQgYnkgZHVuZSAqKVxuXG4oKiogQGNhbm9uaWNhbCBQcHhfc3RyaW5nX3J1bnRpbWUuUHB4X3N0cmluZ19ydW50aW1lX2ludGYgKilcbm1vZHVsZSBQcHhfc3RyaW5nX3J1bnRpbWVfaW50ZiA9IFBweF9zdHJpbmdfcnVudGltZV9fUHB4X3N0cmluZ19ydW50aW1lX2ludGZcblxubW9kdWxlIFBweF9zdHJpbmdfcnVudGltZV9fID0gc3RydWN0IGVuZFxuW0BAZGVwcmVjYXRlZCBcInRoaXMgbW9kdWxlIGlzIHNoYWRvd2VkXCJdXG4iLCJvcGVuIFN0ZGxpYlxub3BlbiBTdGRMYWJlbHNcblxubW9kdWxlIHR5cGUgUyA9IFBweF9zdHJpbmdfcnVudGltZV9pbnRmLlNcblxubW9kdWxlIEZvcl9zdHJpbmcgPSBzdHJ1Y3RcbiAgbGV0IGVtcHR5ID0gXCJcIlxuICBsZXQgb2Zfc3RyaW5nIHQgPSB0XG4gIGxldCBjb252ZXJ0IHQgPSB0XG4gIGxldCBjb25jYXQgbGlzdCA9IFN0cmluZy5jb25jYXQgfnNlcDpcIlwiIGxpc3RcblxuICBsZXQgcGFkIHQgfmxlbiA9XG4gICAgbGV0IG4gPSBTdHJpbmcubGVuZ3RoIHQgaW5cbiAgICBpZiBuID49IGxlbiB0aGVuIHQgZWxzZSBTdHJpbmcubWFrZSAobGVuIC0gbikgJyAnIF4gdFxuICA7O1xuXG4gIGV4dGVybmFsIGlkZW50aXR5IDogc3RyaW5nIC0+IHN0cmluZyA9IFwiJWlkZW50aXR5XCJcbmVuZFxuIl19
