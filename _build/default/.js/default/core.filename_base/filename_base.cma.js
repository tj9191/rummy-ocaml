// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Filename_base
//# unitInfo: Requires: Base, Base__List, Base__Printf, Base__String, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Stdlib__Filename
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$6 = "",
    cst$5 = ".",
    cst$4 = "/",
    cst_Filename_base$0 = "Filename_base",
    cst_filename_base$0 = "filename_base",
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_notequal = runtime.caml_string_notequal;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$3 = cst$4,
    cst$1 = cst$5,
    cst$2 = "..",
    cst = cst$6,
    cst$0 = cst$4,
    root = cst$4,
    Base_String = global_data.Base__String,
    Base = global_data.Base,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Base_List = global_data.Base__List,
    Stdlib_Filename = global_data.Stdlib__Filename,
    Base_Printf = global_data.Base__Printf,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Filename_base$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_filename_base$0);
   caml_call1(Ppx_expect_runtime[1][1], "filename_base/src/filename_base.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_filename_base$0, "filename_base.ml");
   var
    comparator = Base_String[59],
    clamp = Base_String[58],
    clamp_exn = Base_String[57],
    between = Base_String[56],
    descending = Base_String[55],
    ascending = Base_String[54],
    max = Base_String[53],
    min = Base_String[52],
    compare = Base_String[51],
    equal = Base_String[134],
    symbol = Base_String[50],
    symbol$0 = Base_String[49],
    symbol$1 = Base_String[48],
    symbol$2 = Base_String[47],
    symbol$3 = Base_String[46],
    symbol$4 = Base_String[45],
    t_sexp_grammar = Base_String[2],
    sexp_of_t = Base_String[42],
    t_of_sexp = Base_String[41],
    _d_ = [0, "relative_to"],
    cst_Filename_of_absolute_exn_r =
      "Filename.of_absolute_exn: [~relative_to] must be an absolute path",
    _c_ = [0, "first_arg"],
    cst_Filename_of_absolute_exn_f =
      "Filename.of_absolute_exn: first argument must be an absolute path",
    cst_Filename_of_parts_empty_pa = "Filename.of_parts: empty parts list",
    _b_ =
      [0,
       [11,
        "Filename.to_absolute_exn called with a [relative_to] that is a relative path: ",
        [2, 0, 0]],
       "Filename.to_absolute_exn called with a [relative_to] that is a relative path: %s"],
    _a_ =
      [0,
       [11,
        "Filename.concat called with an empty string as its first argument (second argument: ",
        [2, 0, [12, 41, 0]]],
       "Filename.concat called with an empty string as its first argument (second argument: %s)"],
    cst_filename_base = cst_filename_base$0,
    cst_Filename_base = cst_Filename_base$0;
   function hash(_y_){return runtime.Base_hash_string(_y_);}
   var
    hash_fold_t = Base_String[40],
    check_suffix = Stdlib_Filename[7],
    chop_extension = Stdlib_Filename[12],
    chop_suffix = Stdlib_Filename[8],
    chop_suffix_opt = Stdlib_Filename[9],
    current_dir_name = Stdlib_Filename[1],
    is_implicit = Stdlib_Filename[6],
    is_relative = Stdlib_Filename[5],
    parent_dir_name = Stdlib_Filename[2],
    dir_sep = Stdlib_Filename[3],
    quote = Stdlib_Filename[21],
    temp_dir_name = caml_call1(Stdlib_Filename[19], 0),
    dirname = Stdlib_Filename[14],
    basename = Stdlib_Filename[13];
   function is_absolute(p){return 1 - caml_call1(is_relative, p);}
   function concat(p1, p2){
    if(caml_call1(Base_String[14], p1))
     caml_call3(Base_Printf[6], _a_, p2, 0);
    a:
    {
     var s$1 = p2;
     for(;;){
      var match$0 = caml_call2(Base_String[100], s$1, 47);
      if(! match$0) break a;
      var _u_ = match$0[1], _v_ = _u_[1];
      if(caml_string_notequal(_v_, cst$6) && caml_string_notequal(_v_, cst$5))
       break;
      var s$2 = _u_[2], s$1 = s$2;
     }
    }
    var s = p1, _w_ = caml_call2(Base[241], cst$0, s$1);
    for(;;){
     var match = caml_call2(Base_String[101], s, 47);
     a:
     {
      b:
      if(match){
       var _r_ = match[1], s$0 = _r_[1];
       c:
       if(! caml_string_notequal(s$0, cst$6)){
        var _t_ = _r_[2];
        if
         (caml_string_notequal(_t_, cst$6) && caml_string_notequal(_t_, cst$5))
         break c;
        var _x_ = cst;
        break a;
       }
       var _s_ = _r_[2];
       if
        (caml_string_notequal(_s_, cst$6) && caml_string_notequal(_s_, cst$5))
        break b;
       var s = s$0;
       continue;
      }
      var _x_ = s;
     }
     return caml_call2(Base[241], _x_, _w_);
    }
   }
   function to_absolute_exn(p, relative_to){
    return caml_call1(is_relative, relative_to)
            ? caml_call3(Base_Printf[6], _b_, relative_to, 0)
            : is_absolute(p) ? p : concat(relative_to, p);
   }
   function split(s){
    var _q_ = caml_call1(basename, s);
    return [0, caml_call1(dirname, s), _q_];
   }
   function is_posix_pathname_component(s){
    var _k_ = caml_call2(symbol, s, cst$1);
    if(_k_){
     var _l_ = caml_call2(symbol, s, cst$2);
     if(_l_){
      var _m_ = 0 < caml_ml_string_length(s) ? 1 : 0;
      if(_m_){
       var _n_ = caml_ml_string_length(s) <= 255 ? 1 : 0;
       if(_n_)
        var
         _o_ = 1 - caml_call4(Base_String[70], 0, 0, s, 47),
         _p_ = _o_ ? 1 - caml_call4(Base_String[70], 0, 0, s, 0) : _o_;
       else
        var _p_ = _n_;
      }
      else
       var _p_ = _m_;
     }
     else
      var _p_ = _l_;
    }
    else
     var _p_ = _k_;
    return _p_;
   }
   function split_extension(fn){
    var match = caml_call2(Base_String[101], fn, 47);
    if(match)
     var
      match$0 = match[1],
      fn$0 = match$0[2],
      path = match$0[1],
      fn$1 = fn$0,
      dir = [0, path];
    else
     var fn$1 = fn, dir = 0;
    var match$1 = caml_call2(Base_String[101], fn$1, 46);
    if(match$1)
     var
      match$2 = match$1[1],
      ext = match$2[2],
      base_fn = match$2[1],
      ext$0 = [0, ext],
      fn$2 = base_fn;
    else
     var ext$0 = 0, fn$2 = fn$1;
    if(dir)
     var
      dir$0 = dir[1],
      _j_ = caml_call2(Base[241], cst$3, fn$2),
      fn$3 = caml_call2(Base[241], dir$0, _j_);
    else
     var fn$3 = fn$2;
    return [0, fn$3, ext$0];
   }
   function parts(filename){
    var acc = 0, filename$0 = filename;
    for(;;){
     var match = split(filename$0), filename$1 = match[1];
     if(caml_string_notequal(filename$1, cst$5)){
      if
       (!
        caml_string_notequal(filename$1, cst$4)
        && ! caml_string_notequal(match[2], cst$4))
       return [0, filename$1, acc];
     }
     else if(! caml_string_notequal(match[2], cst$5))
      return [0, filename$1, acc];
     var
      dir = match[2],
      acc$0 = [0, dir, acc],
      acc = acc$0,
      filename$0 = filename$1;
    }
   }
   function of_parts(param){
    if(! param) return caml_call1(Base[244], cst_Filename_of_parts_empty_pa);
    var rest = param[2], root = param[1];
    return caml_call3(Base_List[20], rest, root, Stdlib_Filename[4]);
   }
   function of_absolute_exn(a, b){
    if(caml_call1(is_relative, a)){
     var
      _e_ = [0, [1, [0, _c_, [0, caml_call1(Base[202], a), 0]]], 0],
      _f_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Filename_of_absolute_exn_f),
          _e_]];
     caml_call1(Base[246], _f_);
    }
    if(caml_call1(is_relative, b)){
     var
      _g_ = [0, [1, [0, _d_, [0, caml_call1(Base[202], b), 0]]], 0],
      _h_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Filename_of_absolute_exn_r),
          _g_]];
     caml_call1(Base[246], _h_);
    }
    var
     a_parts = parts(a),
     b_parts = parts(b),
     a_suffix = a_parts,
     b_suffix = b_parts;
    for(;;){
     if(a_suffix && b_suffix){
      var
       t2 = b_suffix[2],
       h2 = b_suffix[1],
       t1 = a_suffix[2],
       h1 = a_suffix[1];
      if(caml_call2(Base_String[134], h1, h2)){
       var a_suffix = t1, b_suffix = t2;
       continue;
      }
     }
     var
      _i_ = function(param){return parent_dir_name;},
      go_up = caml_call2(Base_List[53], b_suffix, _i_),
      relpath = caml_call2(Base[222], go_up, a_suffix);
     return relpath ? of_parts(relpath) : current_dir_name;
    }
   }
   caml_call1(Ppx_inline_test_lib[7], cst_filename_base);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Filename_base);
   var
    Filename_base =
      [0,
       hash_fold_t,
       hash,
       t_of_sexp,
       sexp_of_t,
       t_sexp_grammar,
       symbol$4,
       symbol$3,
       symbol$2,
       symbol$1,
       symbol$0,
       symbol,
       equal,
       compare,
       min,
       max,
       ascending,
       descending,
       between,
       clamp_exn,
       clamp,
       comparator,
       root,
       is_posix_pathname_component,
       temp_dir_name,
       current_dir_name,
       parent_dir_name,
       dir_sep,
       concat,
       is_relative,
       is_absolute,
       is_implicit,
       check_suffix,
       chop_suffix,
       chop_suffix_opt,
       chop_extension,
       split_extension,
       basename,
       dirname,
       to_absolute_exn,
       of_absolute_exn,
       split,
       parts,
       of_parts,
       quote,
       667828424,
       667828424,
       667828424,
       667828424,
       667828424,
       667828424,
       667828424];
   runtime.caml_register_global(41, Filename_base, cst_Filename_base$0);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLjAsImZpbGUiOiJmaWxlbmFtZV9iYXNlLmNtYS5qcyIsInNvdXJjZVJvb3QiOiIiLCJuYW1lcyI6WyJyb290IiwiY29tcGFyYXRvciIsImNsYW1wIiwiY2xhbXBfZXhuIiwiYmV0d2VlbiIsImRlc2NlbmRpbmciLCJhc2NlbmRpbmciLCJtYXgiLCJtaW4iLCJjb21wYXJlIiwiZXF1YWwiLCJzeW1ib2wiLCJzeW1ib2wkMCIsInN5bWJvbCQxIiwic3ltYm9sJDIiLCJzeW1ib2wkMyIsInN5bWJvbCQ0IiwidF9zZXhwX2dyYW1tYXIiLCJzZXhwX29mX3QiLCJ0X29mX3NleHAiLCJoYXNoIiwiaGFzaF9mb2xkX3QiLCJjaGVja19zdWZmaXgiLCJjaG9wX2V4dGVuc2lvbiIsImNob3Bfc3VmZml4IiwiY2hvcF9zdWZmaXhfb3B0IiwiY3VycmVudF9kaXJfbmFtZSIsImlzX2ltcGxpY2l0IiwiaXNfcmVsYXRpdmUiLCJwYXJlbnRfZGlyX25hbWUiLCJkaXJfc2VwIiwicXVvdGUiLCJ0ZW1wX2Rpcl9uYW1lIiwiZGlybmFtZSIsImJhc2VuYW1lIiwiaXNfYWJzb2x1dGUiLCJwIiwiY29uY2F0IiwicDEiLCJwMiIsInMkMSIsInMkMiIsInMiLCJzJDAiLCJ0b19hYnNvbHV0ZV9leG4iLCJyZWxhdGl2ZV90byIsInNwbGl0IiwiaXNfcG9zaXhfcGF0aG5hbWVfY29tcG9uZW50Iiwic3BsaXRfZXh0ZW5zaW9uIiwiZm4iLCJmbiQwIiwicGF0aCIsImZuJDEiLCJkaXIiLCJleHQiLCJiYXNlX2ZuIiwiZXh0JDAiLCJmbiQyIiwiZGlyJDAiLCJmbiQzIiwicGFydHMiLCJmaWxlbmFtZSIsImFjYyIsImZpbGVuYW1lJDAiLCJmaWxlbmFtZSQxIiwiYWNjJDAiLCJvZl9wYXJ0cyIsInJlc3QiLCJvZl9hYnNvbHV0ZV9leG4iLCJhIiwiYiIsImFfcGFydHMiLCJiX3BhcnRzIiwiYV9zdWZmaXgiLCJiX3N1ZmZpeCIsInQyIiwiaDIiLCJ0MSIsImgxIiwiZ29fdXAiLCJyZWxwYXRoIl0sInNvdXJjZXMiOlsiL1VzZXJzL3R5bGFubW9yYW4vLm9wYW0vNS4xLjEvbGliL2NvcmUvZmlsZW5hbWVfYmFzZS9maWxlbmFtZV9iYXNlLm1sIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztHOzs7OztHOzs7OztHOzs7OztHOzs7Ozs7Ozs7Ozs7SUFvRklBOzs7Ozs7Ozs7Ozs7Ozs7OztJQXhFRUM7SUFKRUM7SUFBQUM7SUFBQUM7SUFBQUM7SUFBQUM7SUFBQUM7SUFBQUM7SUFBQUM7SUFBQUM7SUFBQUM7SUFBQUM7SUFBQUM7SUFBQUM7SUFBQUM7SUFBQUM7SUFIRkM7SUFBQUM7SUFBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7WUFBQUMsVTtHQXVCZ0I7SUF2QmhCQztJQWFBQztJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBQyxnQkFBZ0I7SUFDaEJDO0lBQ0FDO1lBR0ZDLFlBQVlDLEdBQUksV0FBSSxXQVRsQlIsYUFTVVEsR0FBdUI7WUFFbkNDLE9BUXdCQyxJQU1EQztJQWJ6QixHQUFHLDRCQU91QkQ7S0FMeEIsZ0NBV3VCQzs7O1NBQUFDLE1BQUFEO0tBQ3ZCO01BQU0sY0FBQSw2QkFEaUJDOzs7OztVQUFBQyxjQUFBRCxNQUFBQzs7O0lBS0YsSUFYR0MsSUFBQUosSUFXSCxNQUFBLDZCQUxFRTtJQUx2QjtLQUFNLFlBQUEsNkJBRGtCRTs7Ozs7MkJBQUFDOztpQ0FBQUE7Ozs7Ozs7Ozs7OztXQUFBRCxJQUFBQzs7O2dCQUFBRDs7S0FXSCxPQUFBOztHQUF5QjtZQUc5Q0UsZ0JBQWdCUixHQUFHUztJQUNyQixPQUFHLFdBbENDakIsYUFpQ2lCaUI7Y0FHbkIsZ0NBSG1CQTtjQXhCbkJWLFlBd0JnQkMsS0FBQUEsSUF0QmhCQyxPQXNCbUJRLGFBQUhUO0dBU087WUFHdkJVLE1BQU1KO0lBQWUsVUFBQSxXQXZDbkJSLFVBdUNJUTtJQUFJLFdBQUEsV0F4Q1JULFNBd0NJUztHQUF5QjtZQUsvQkssNEJBQTRCTDtJQUU5QixVQUFBLFdBcEVNL0IsUUFrRXdCK0I7SUFFOUI7S0FDRyxVQUFBLFdBckVHL0IsUUFrRXdCK0I7S0FHM0I7MENBSDJCQTs7dUNBQUFBOztRQU10QjtTQUFBLFVBQUEsa0NBTnNCQTt5QkFPdkIsa0NBUHVCQTs7Ozs7Ozs7Ozs7O0lBT3ZCO0dBQXFCO1lBSzFCTSxnQkFDT0M7SUFDRCxZQUFBLDZCQURDQTs7OztNQUdPQztNQUFOQztNQUVOQyxPQUZZRjtNQUhaRyxVQUdNRjs7U0FFTkMsT0FMS0gsSUFBTEk7SUFNSSxjQUFBLDZCQURKRDs7OztNQUdlRTtNQUFUQztNQUhGQyxZQUdXRjtNQUhmRyxPQUdNRjs7U0FIRkMsV0FBSkMsT0FBQUw7T0FMQUM7S0Fha0I7TUFBYkssUUFiTEw7TUFha0IsTUFBQSw2QkFSbEJJO01BS0FFLE9BR1ksc0JBQVBEOztTQUhMQyxPQUxBRjtJQVVKLFdBTElFLE1BTElIO0dBVUQ7WUFHTEksTUFDZUM7SUFBakIsSUFBYUMsU0FBSUMsYUFBQUY7SUFDZjtLQUFNLElBQUEsUUF0Q05mLE1BcUNlaUIsYUFFYkM7NkJBQUFBOzs7NkJBQUFBOztPQUNzQixXQUR0QkEsWUFGU0Y7OztNQUVhLFdBQXRCRSxZQUZTRjtLQUlTO01BQVpUO01BSkdZLFlBSUhaLEtBSkdTO01BQUFBLE1BQUFHO01BQUlGLGFBRWJDOztHQUlZO1lBR2RFO0lBQVcsWUFDTCxPQUFBO1FBQ0VDLGlCQUFSbkU7SUFBZ0IsT0FBQSwwQkFBUm1FLE1BQVJuRTtHQUFtRTtZQVNuRW9FLGdCQUFnQkMsR0FBZUM7SUFDakMsR0FBRyxXQXZHQzFDLGFBc0djeUM7O3VEQUFBQTs7Ozs7O0tBR2hCOztJQUlDLEdBQUEsV0E3R0N6QyxhQXNHNkIwQzs7dURBQUFBOzs7Ozs7S0FTL0I7O0lBSVk7S0FuQldDLFVBZnZCWCxNQXFCZ0JTO0tBTlVHLFVBZjFCWixNQXFCK0JVO0tBZTdCRyxXQXJCcUJGO0tBcUJYRyxXQXJCY0Y7SUFDNUI7UUFvQklDLFlBQVVDOztPQXJCY0MsS0FxQmREO09BbkJGRSxLQW1CRUY7T0FyQldHLEtBcUJyQko7T0FuQkZLLEtBbUJFTDtNQW5Cc0IsR0FBQSw2QkFBeEJLLElBQVVGO1dBbUJSSCxXQXJCcUJJLElBcUJYSCxXQXJCY0M7Ozs7S0FzQjVCO01BQUEsc0JBQWtDLE9Bckg5QjlDLGdCQXFINkM7TUFBN0NrRCxRQUFRLDBCQURFTDtNQUlaTSxVQUZJLHNCQURGRCxPQURBTjtZQUlGTyxVQTlCQWQsU0E4QkFjLFdBM0hFdEQ7O0dBMkh5Qjs7Ozs7Ozs7T0E1SXpCTDtPQUFBRDtPQUFBRDtPQUFBRDtPQUFBRDtPQUdFRDtPQUFBRDtPQUFBRDtPQUFBRDtPQUFBRDtPQUFBRDtPQUFBRDtPQUFBRDtPQUFBRDtPQUFBRDtPQUFBRDtPQUFBRDtPQUFBRDtPQUFBRDtPQUFBRDtPQUlGRDtPQXdFRkQ7T0FWQStDO09BOUNFZjtPQU5BTjtPQUdBRztPQUNBQztPQVNGTztPQVhFVDtPQVNGTztPQVZFUjtPQUxBTDtPQUVBRTtPQUNBQztPQUZBRjtPQW1FRnlCO09BeERFZDtPQURBRDtPQTRCRlc7T0FxRUF3QjtPQXpEQXRCO09Bb0NBYztPQVVBTTtPQXhGRW5DOzs7Ozs7Ozs7O0UiLCJzb3VyY2VzQ29udGVudCI6WyJvcGVuISBCYXNlXG5cbmluY2x1ZGUgKFxuICBTdHJpbmcgOlxuICAgIHNpZ1xuICAgICAgdHlwZSB0ID0gc3RyaW5nIFtAQGRlcml2aW5nIGNvbXBhcmUsIGhhc2gsIHNleHAsIHNleHBfZ3JhbW1hcl1cblxuICAgICAgaW5jbHVkZVxuICAgICAgICBDb21wYXJhYmxlLlNcbiAgICAgICAgICB3aXRoIHR5cGUgdCA6PSB0XG4gICAgICAgICAgd2l0aCB0eXBlIGNvbXBhcmF0b3Jfd2l0bmVzcyA9IFN0cmluZy5jb21wYXJhdG9yX3dpdG5lc3NcblxuICAgICAgdmFsIGNvbXBhcmF0b3IgOiAodCwgY29tcGFyYXRvcl93aXRuZXNzKSBDb21wYXJhdG9yLnRcbiAgICBlbmQpXG5cbmluY2x1ZGUgc3RydWN0XG4gIG9wZW4gU3RkbGliLkZpbGVuYW1lXG5cbiAgbGV0IGNoZWNrX3N1ZmZpeCA9IGNoZWNrX3N1ZmZpeFxuICBsZXQgY2hvcF9leHRlbnNpb24gPSBjaG9wX2V4dGVuc2lvblxuICBsZXQgY2hvcF9zdWZmaXggPSBjaG9wX3N1ZmZpeFxuICBsZXQgY2hvcF9zdWZmaXhfb3B0ID0gY2hvcF9zdWZmaXhfb3B0XG4gIGxldCBjdXJyZW50X2Rpcl9uYW1lID0gY3VycmVudF9kaXJfbmFtZVxuICBsZXQgaXNfaW1wbGljaXQgPSBpc19pbXBsaWNpdFxuICBsZXQgaXNfcmVsYXRpdmUgPSBpc19yZWxhdGl2ZVxuICBsZXQgcGFyZW50X2Rpcl9uYW1lID0gcGFyZW50X2Rpcl9uYW1lXG4gIGxldCBkaXJfc2VwID0gZGlyX3NlcFxuICBsZXQgcXVvdGUgPSBxdW90ZVxuICBsZXQgdGVtcF9kaXJfbmFtZSA9IGdldF90ZW1wX2Rpcl9uYW1lICgpXG4gIGxldCBkaXJuYW1lID0gZGlybmFtZVxuICBsZXQgYmFzZW5hbWUgPSBiYXNlbmFtZVxuZW5kXG5cbmxldCBpc19hYnNvbHV0ZSBwID0gbm90IChpc19yZWxhdGl2ZSBwKVxuXG5sZXQgY29uY2F0IHAxIHAyID1cbiAgaWYgU3RyaW5nLmlzX2VtcHR5IHAxXG4gIHRoZW5cbiAgICBQcmludGYuZmFpbHdpdGhmXG4gICAgICBcIkZpbGVuYW1lLmNvbmNhdCBjYWxsZWQgd2l0aCBhbiBlbXB0eSBzdHJpbmcgYXMgaXRzIGZpcnN0IGFyZ3VtZW50IChzZWNvbmQgXFxcbiAgICAgICBhcmd1bWVudDogJXMpXCJcbiAgICAgIHAyXG4gICAgICAoKTtcbiAgbGV0IHJlYyBjb2xsYXBzZV90cmFpbGluZyBzID1cbiAgICBtYXRjaCBTdHJpbmcucnNwbGl0MiBzIH5vbjonLycgd2l0aFxuICAgIHwgU29tZSAoXCJcIiwgKFwiLlwiIHwgXCJcIikpIC0+IFwiXCJcbiAgICB8IFNvbWUgKHMsIChcIi5cIiB8IFwiXCIpKSAtPiBjb2xsYXBzZV90cmFpbGluZyBzXG4gICAgfCBOb25lIHwgU29tZSBfIC0+IHNcbiAgaW5cbiAgbGV0IHJlYyBjb2xsYXBzZV9sZWFkaW5nIHMgPVxuICAgIG1hdGNoIFN0cmluZy5sc3BsaXQyIHMgfm9uOicvJyB3aXRoXG4gICAgfCBTb21lICgoXCIuXCIgfCBcIlwiKSwgcykgLT4gY29sbGFwc2VfbGVhZGluZyBzXG4gICAgfCBTb21lIF8gfCBOb25lIC0+IHNcbiAgaW5cbiAgY29sbGFwc2VfdHJhaWxpbmcgcDEgXiBcIi9cIiBeIGNvbGxhcHNlX2xlYWRpbmcgcDJcbjs7XG5cbmxldCB0b19hYnNvbHV0ZV9leG4gcCB+cmVsYXRpdmVfdG8gPVxuICBpZiBpc19yZWxhdGl2ZSByZWxhdGl2ZV90b1xuICB0aGVuXG4gICAgUHJpbnRmLmZhaWx3aXRoZlxuICAgICAgXCJGaWxlbmFtZS50b19hYnNvbHV0ZV9leG4gY2FsbGVkIHdpdGggYSBbcmVsYXRpdmVfdG9dIHRoYXQgaXMgYSByZWxhdGl2ZSBwYXRoOiAlc1wiXG4gICAgICByZWxhdGl2ZV90b1xuICAgICAgKClcbiAgZWxzZSBpZiBpc19hYnNvbHV0ZSBwXG4gIHRoZW4gcFxuICBlbHNlIGNvbmNhdCByZWxhdGl2ZV90byBwXG47O1xuXG5sZXQgc3BsaXQgcyA9IGRpcm5hbWUgcywgYmFzZW5hbWUgc1xuXG4oKiBbbWF4X3BhdGhuYW1lX2NvbXBvbmVudF9zaXplXSBjb21lcyBmcm9tIGdldGNvbmYgX1BPU0lYX05BTUVfTUFYIC8gKilcbmxldCBtYXhfcGF0aG5hbWVfY29tcG9uZW50X3NpemUgPSAyNTVcblxubGV0IGlzX3Bvc2l4X3BhdGhuYW1lX2NvbXBvbmVudCBzID1cbiAgbGV0IG1vZHVsZSBTID0gU3RyaW5nIGluXG4gIHMgPD4gXCIuXCJcbiAgJiYgcyA8PiBcIi4uXCJcbiAgJiYgSW50LigwIDwgUy5sZW5ndGggcylcbiAgJiYgSW50LihTLmxlbmd0aCBzIDw9IG1heF9wYXRobmFtZV9jb21wb25lbnRfc2l6ZSlcbiAgJiYgKG5vdCAoUy5jb250YWlucyBzICcvJykpXG4gICYmIG5vdCAoUy5jb250YWlucyBzICdcXDAwMCcpXG47O1xuXG5sZXQgcm9vdCA9IFwiL1wiXG5cbmxldCBzcGxpdF9leHRlbnNpb24gZm4gPVxuICBsZXQgZGlyLCBmbiA9XG4gICAgbWF0Y2ggU3RyaW5nLnJzcGxpdDIgfm9uOicvJyBmbiB3aXRoXG4gICAgfCBOb25lIC0+IE5vbmUsIGZuXG4gICAgfCBTb21lIChwYXRoLCBmbikgLT4gU29tZSBwYXRoLCBmblxuICBpblxuICBsZXQgZm4sIGV4dCA9XG4gICAgbWF0Y2ggU3RyaW5nLnJzcGxpdDIgfm9uOicuJyBmbiB3aXRoXG4gICAgfCBOb25lIC0+IGZuLCBOb25lXG4gICAgfCBTb21lIChiYXNlX2ZuLCBleHQpIC0+IGJhc2VfZm4sIFNvbWUgZXh0XG4gIGluXG4gIGxldCBmbiA9XG4gICAgbWF0Y2ggZGlyIHdpdGhcbiAgICB8IE5vbmUgLT4gZm5cbiAgICB8IFNvbWUgZGlyIC0+IGRpciBeIFwiL1wiIF4gZm5cbiAgaW5cbiAgZm4sIGV4dFxuOztcblxubGV0IHBhcnRzIGZpbGVuYW1lID1cbiAgbGV0IHJlYyBsb29wIGFjYyBmaWxlbmFtZSA9XG4gICAgbWF0Y2ggc3BsaXQgZmlsZW5hbWUgd2l0aFxuICAgIHwgKFwiLlwiIGFzIGJhc2UpLCBcIi5cIiAtPiBiYXNlIDo6IGFjY1xuICAgIHwgKFwiL1wiIGFzIGJhc2UpLCBcIi9cIiAtPiBiYXNlIDo6IGFjY1xuICAgIHwgcmVzdCwgZGlyIC0+IGxvb3AgKGRpciA6OiBhY2MpIHJlc3RcbiAgaW5cbiAgbG9vcCBbXSBmaWxlbmFtZVxuOztcblxubGV0IG9mX3BhcnRzID0gZnVuY3Rpb25cbiAgfCBbXSAtPiBmYWlsd2l0aCBcIkZpbGVuYW1lLm9mX3BhcnRzOiBlbXB0eSBwYXJ0cyBsaXN0XCJcbiAgfCByb290IDo6IHJlc3QgLT4gTGlzdC5mb2xkIHJlc3QgfmluaXQ6cm9vdCB+ZjpTdGRsaWIuRmlsZW5hbWUuY29uY2F0XG47O1xuXG5sZXQgcmVjIHNraXBfY29tbW9uX3ByZWZpeCBsMSBsMiA9XG4gIG1hdGNoIGwxLCBsMiB3aXRoXG4gIHwgaDEgOjogdDEsIGgyIDo6IHQyIHdoZW4gU3RyaW5nLmVxdWFsIGgxIGgyIC0+IHNraXBfY29tbW9uX3ByZWZpeCB0MSB0MlxuICB8IF8gLT4gbDEsIGwyXG47O1xuXG5sZXQgb2ZfYWJzb2x1dGVfZXhuIGEgfnJlbGF0aXZlX3RvOmIgPVxuICBpZiBpc19yZWxhdGl2ZSBhXG4gIHRoZW5cbiAgICByYWlzZV9zXG4gICAgICBbJW1lc3NhZ2VcbiAgICAgICAgXCJGaWxlbmFtZS5vZl9hYnNvbHV0ZV9leG46IGZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYW4gYWJzb2x1dGUgcGF0aFwiXG4gICAgICAgICAgfmZpcnN0X2FyZzooYSA6IHN0cmluZyldO1xuICBpZiBpc19yZWxhdGl2ZSBiXG4gIHRoZW5cbiAgICByYWlzZV9zXG4gICAgICBbJW1lc3NhZ2VcbiAgICAgICAgXCJGaWxlbmFtZS5vZl9hYnNvbHV0ZV9leG46IFt+cmVsYXRpdmVfdG9dIG11c3QgYmUgYW4gYWJzb2x1dGUgcGF0aFwiXG4gICAgICAgICAgfnJlbGF0aXZlX3RvOihiIDogc3RyaW5nKV07XG4gIGxldCBhX3BhcnRzID0gcGFydHMgYSBpblxuICBsZXQgYl9wYXJ0cyA9IHBhcnRzIGIgaW5cbiAgbGV0IGFfc3VmZml4LCBiX3N1ZmZpeCA9IHNraXBfY29tbW9uX3ByZWZpeCBhX3BhcnRzIGJfcGFydHMgaW5cbiAgbGV0IGdvX3VwID0gTGlzdC5tYXAgfmY6KGZ1biBfIC0+IHBhcmVudF9kaXJfbmFtZSkgYl9zdWZmaXggaW5cbiAgbWF0Y2ggZ29fdXAgQCBhX3N1ZmZpeCB3aXRoXG4gIHwgW10gLT4gY3VycmVudF9kaXJfbmFtZVxuICB8IHJlbHBhdGggLT4gb2ZfcGFydHMgcmVscGF0aFxuOztcblxubGV0IGFyZ190eXBlID0gYFVzZV9GaWxlbmFtZV91bml4XG5sZXQgY3JlYXRlX2FyZ190eXBlID0gYFVzZV9GaWxlbmFtZV91bml4XG5sZXQgb3Blbl90ZW1wX2ZpbGUgPSBgVXNlX0ZpbGVuYW1lX3VuaXhcbmxldCBvcGVuX3RlbXBfZmlsZV9mZCA9IGBVc2VfRmlsZW5hbWVfdW5peFxubGV0IHJlYWxwYXRoID0gYFVzZV9GaWxlbmFtZV91bml4XG5sZXQgdGVtcF9kaXIgPSBgVXNlX0ZpbGVuYW1lX3VuaXhcbmxldCB0ZW1wX2ZpbGUgPSBgVXNlX0ZpbGVuYW1lX3VuaXhcbiJdfQ==
