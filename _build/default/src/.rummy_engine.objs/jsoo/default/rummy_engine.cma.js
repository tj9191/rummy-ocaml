// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Rummy_engine
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Rummy_engine = [0];
   runtime.caml_register_global(0, Rummy_engine, "Rummy_engine");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Rummy_engine__Types
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Stdlib__Printf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Rummy_engine_Types$0 = "Rummy_engine__Types",
    cst_rummy_engine$0 = "rummy_engine";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "\xe2\x99\xa5",
    cst$0 = "\xe2\x99\xa0",
    cst$1 = "\xe2\x99\xa6",
    cst$2 = "\xe2\x99\xa3",
    Stdlib_Printf = global_data.Stdlib__Printf,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Rummy_engine_Types$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_rummy_engine$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/types.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_rummy_engine$0, "types.ml");
   var
    _a_ = [0, [2, 0, [2, 0, 0]], "%s%s"],
    cst_2 = "2",
    cst_3 = "3",
    cst_4 = "4",
    cst_5 = "5",
    cst_6 = "6",
    cst_7 = "7",
    cst_8 = "8",
    cst_9 = "9",
    cst_10 = "10",
    cst_J = "J",
    cst_Q = "Q",
    cst_K = "K",
    cst_A = "A",
    cst_rummy_engine = cst_rummy_engine$0,
    cst_Rummy_engine_Types = cst_Rummy_engine_Types$0;
   function string_of_suit(param){
    switch(param){
      case 0:
       return cst;
      case 1:
       return cst$0;
      case 2:
       return cst$1;
      default: return cst$2;
    }
   }
   function string_of_rank(param){
    switch(param){
      case 0:
       return cst_2;
      case 1:
       return cst_3;
      case 2:
       return cst_4;
      case 3:
       return cst_5;
      case 4:
       return cst_6;
      case 5:
       return cst_7;
      case 6:
       return cst_8;
      case 7:
       return cst_9;
      case 8:
       return cst_10;
      case 9:
       return cst_J;
      case 10:
       return cst_Q;
      case 11:
       return cst_K;
      default: return cst_A;
    }
   }
   function string_of_card(c){
    var _b_ = string_of_suit(c[1]), _c_ = string_of_rank(c[2]);
    return caml_call3(Stdlib_Printf[4], _a_, _c_, _b_);
   }
   caml_call1(Ppx_inline_test_lib[7], cst_rummy_engine);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Rummy_engine_Types);
   var
    Rummy_engine_Types = [0, string_of_suit, string_of_rank, string_of_card];
   runtime.caml_register_global
    (30, Rummy_engine_Types, cst_Rummy_engine_Types$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Rummy_engine__Setup
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Stdlib__Array, Stdlib__List, Stdlib__Printf, Stdlib__Random
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Rummy_engine_Setup$0 = "Rummy_engine__Setup",
    cst_rummy_engine$0 = "rummy_engine",
    caml_list_of_js_array = runtime.caml_list_of_js_array;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    suits = [0, 0, [0, 1, [0, 2, [0, 3, 0]]]],
    ranks = caml_list_of_js_array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]),
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib_Array = global_data.Stdlib__Array,
    Stdlib_Random = global_data.Stdlib__Random,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Rummy_engine_Setup$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_rummy_engine$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/setup.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_rummy_engine$0, "setup.ml");
   var
    cst_Computer = "Computer",
    _b_ = [0, [11, "Player ", [4, 0, 0, 0, 0]], "Player %d"],
    _c_ = [0, 0],
    cst_rummy_engine = cst_rummy_engine$0,
    cst_Rummy_engine_Setup = cst_Rummy_engine_Setup$0;
   function _a_(s){
    function _m_(r){return [0, s, r];}
    return caml_call2(Stdlib_List[20], _m_, ranks);
   }
   var all_cards = caml_call2(Stdlib_List[24], _a_, suits);
   function shuffle(xs){
    caml_call1(Stdlib_Random[3], 0);
    function _f_(x){return [0, caml_call1(Stdlib_Random[4], 0), x];}
    var _g_ = caml_call2(Stdlib_List[20], _f_, xs);
    function _h_(param, _l_){
     var b = _l_[1], a = param[1];
     return runtime.caml_int_compare(a, b);
    }
    var _i_ = caml_call2(Stdlib_List[59], _h_, _g_);
    function _j_(_k_){return _k_[2];}
    return caml_call2(Stdlib_List[20], _j_, _i_);
   }
   function deal_n(n, deck){
    var k = n, acc = 0, d = deck;
    for(;;){
     if(0 === k) return [0, caml_call1(Stdlib_List[10], acc), d];
     if(! d) return [0, caml_call1(Stdlib_List[10], acc), 0];
     var
      xs = d[2],
      x = d[1],
      acc$0 = [0, x, acc],
      k$0 = k - 1 | 0,
      k = k$0,
      acc = acc$0,
      d = xs;
    }
   }
   function init_state(num_players, vs_computer){
    var
     deck0 = shuffle(all_cards),
     k = num_players,
     deck_after = deck0,
     acc = 0,
     hand_size = 7;
    for(;;){
     if(0 === k){
      var
       hands = caml_call1(Stdlib_List[10], acc),
       _d_ =
         function(i, h){
          if(vs_computer && 1 === i) return [0, i, cst_Computer, h];
          return [0, i, caml_call2(Stdlib_Printf[4], _b_, i + 1 | 0), h];
         },
       _e_ = caml_call2(Stdlib_List[21], _d_, hands),
       players = caml_call1(Stdlib_Array[10], _e_);
      return [0,
              deck_after,
              0,
              0,
              players,
              0,
              0,
              0,
              _c_,
              0,
              runtime.caml_make_vect(num_players, 0)];
     }
     var
      match = deal_n(hand_size, deck_after),
      deck = match[2],
      h = match[1],
      acc$0 = [0, h, acc],
      k$0 = k - 1 | 0,
      k = k$0,
      deck_after = deck,
      acc = acc$0;
    }
   }
   caml_call1(Ppx_inline_test_lib[7], cst_rummy_engine);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Rummy_engine_Setup);
   var Rummy_engine_Setup = [0, all_cards, shuffle, deal_n, init_state];
   runtime.caml_register_global
    (20, Rummy_engine_Setup, cst_Rummy_engine_Setup$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Rummy_engine__Rules
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Stdlib__List, Stdlib__Set
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Rummy_engine_Rules$0 = "Rummy_engine__Rules",
    cst_rummy_engine$0 = "rummy_engine";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_Set = global_data.Stdlib__Set,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Rummy_engine_Rules$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_rummy_engine$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/rules.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_rummy_engine$0, "rules.ml");
   var
    cst_rummy_engine = cst_rummy_engine$0,
    cst_Rummy_engine_Rules = cst_Rummy_engine_Rules$0;
   function all_same_rank(cs){
    if(cs){
     var c = cs[1];
     if(cs[2]){
      var rest = cs[2], _m_ = function(x){return x[2] === c[2] ? 1 : 0;};
      return caml_call2(Stdlib_List[33], _m_, rest);
     }
    }
    return 0;
   }
   function distinct_suits(cs){
    var
     compare = runtime.caml_compare,
     S = caml_call1(Stdlib_Set[1], [0, compare]),
     _j_ = S[1];
    function _k_(acc, c){return caml_call2(S[2], c[1], acc);}
    var
     s = caml_call3(Stdlib_List[26], _k_, _j_, cs),
     _l_ = caml_call1(Stdlib_List[1], cs);
    return caml_call1(S[9], s) === _l_ ? 1 : 0;
   }
   function rank_value(ace_policy, param){
    switch(param){
      case 0:
       return 2;
      case 1:
       return 3;
      case 2:
       return 4;
      case 3:
       return 5;
      case 4:
       return 6;
      case 5:
       return 7;
      case 6:
       return 8;
      case 7:
       return 9;
      case 8:
       return 10;
      case 9:
       return 11;
      case 10:
       return 12;
      case 11:
       return 13;
      default: return ace_policy ? 14 : 1;
    }
   }
   function is_consecutive_ints(param){
    var param$0 = param;
    for(;;){
     if(param$0){
      var match = param$0[2];
      if(match){
       var
        rest = match[2],
        b = match[1],
        a = param$0[1],
        _i_ = b === (a + 1 | 0) ? 1 : 0;
       if(! _i_) return _i_;
       var param$0 = [0, b, rest];
       continue;
      }
     }
     return 1;
    }
   }
   function is_set(cs){
    var _f_ = 3 <= caml_call1(Stdlib_List[1], cs) ? 1 : 0;
    if(_f_){
     var _g_ = all_same_rank(cs);
     if(_g_) return distinct_suits(cs);
     var _h_ = _g_;
    }
    else
     var _h_ = _f_;
    return _h_;
   }
   function is_run(ace_policy, cs){
    if(cs){
     var c = cs[1], _b_ = cs[2];
     if(_b_ && _b_[2]){
      var
       rest = cs[2],
       _c_ = function(x){return x[1] === c[1] ? 1 : 0;},
       same_suit = caml_call2(Stdlib_List[33], _c_, rest);
      if(! same_suit) return 0;
      var
       _d_ = function(x){return rank_value(ace_policy, x[2]);},
       _e_ = caml_call2(Stdlib_List[20], _d_, cs);
      return is_consecutive_ints
              (caml_call2(Stdlib_List[59], runtime.caml_int_compare, _e_));
     }
    }
    return 0;
   }
   function valid_meld(ace_policy, cards){
    var _a_ = is_set(cards);
    return _a_ ? _a_ : is_run(ace_policy, cards);
   }
   function can_layoff(ace_policy, c, m){
    return valid_meld(ace_policy, [0, c, m[2]]);
   }
   function deadwood_points(hand){return 0;}
   caml_call1(Ppx_inline_test_lib[7], cst_rummy_engine);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Rummy_engine_Rules);
   var
    Rummy_engine_Rules =
      [0,
       all_same_rank,
       distinct_suits,
       rank_value,
       is_consecutive_ints,
       is_set,
       is_run,
       valid_meld,
       can_layoff,
       deadwood_points];
   runtime.caml_register_global
    (13, Rummy_engine_Rules, cst_Rummy_engine_Rules$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Rummy_engine__Engine
//# unitInfo: Requires: Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Rummy_engine__Rules, Stdlib, Stdlib__List
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Rummy_engine_Engine$0 = "Rummy_engine__Engine",
    cst_card_not_in_hand = "card not in hand",
    cst_cards_not_all_in_hand = "cards not all in hand",
    cst_invalid_meld_index = "invalid meld index",
    cst_meld_index_out_of_range = "meld index out of range",
    cst_rummy_engine$0 = "rummy_engine",
    caml_check_bound = runtime.caml_check_bound,
    caml_equal = runtime.caml_equal;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Stdlib_List = global_data.Stdlib__List,
    Rummy_engine_Rules = global_data.Rummy_engine__Rules,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Rummy_engine_Engine$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_rummy_engine$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/engine.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_rummy_engine$0, "engine.ml");
   var
    cst_last_exn_empty_list = "last_exn: empty list",
    _s_ = [2, [2, "You must use the required card before discarding."]],
    _t_ = [2, [2, cst_card_not_in_hand]],
    _r_ =
      [1,
       [1, "You must use the bottom picked discard card before discarding."]],
    _n_ = [2, 1],
    _o_ = [2, 0],
    _q_ = [2, [1, "N must be \xe2\x89\xa5 1"]],
    _p_ = [2, 1],
    _k_ = [1, [1, "cannot lay off on that meld"]],
    _j_ = [1, [1, cst_invalid_meld_index]],
    _l_ = [1, [1, cst_invalid_meld_index]],
    _m_ = [1, [1, "layoff card not in hand"]],
    _i_ = [1, [1, "run must have \xe2\x89\xa53 cards"]],
    _h_ = [1, [1, "not a valid run"]],
    _g_ = [1, [1, cst_cards_not_all_in_hand]],
    _f_ = [1, [1, "set must have \xe2\x89\xa53 cards"]],
    _e_ = [1, [1, "not a valid set"]],
    _d_ = [1, [1, cst_cards_not_all_in_hand]],
    _b_ = [1, cst_meld_index_out_of_range],
    _c_ = [1, cst_meld_index_out_of_range],
    _a_ = [1, cst_card_not_in_hand],
    cst_rummy_engine = cst_rummy_engine$0,
    cst_Rummy_engine_Engine = cst_Rummy_engine_Engine$0;
   function top_and_rest(param){
    if(! param) return 0;
    var xs = param[2], x = param[1];
    return [0, [0, x, xs]];
   }
   function with_current(st){
    var _H_ = st[5];
    return caml_check_bound(st[4], _H_)[1 + _H_];
   }
   function replace_current(st, p){
    var _G_ = st[5];
    caml_check_bound(st[4], _G_)[1 + _G_] = p;
    return st;
   }
   function next_player_index(st){
    return runtime.caml_mod(st[5] + 1 | 0, st[4].length - 1);
   }
   function take_n(n, rest){
    if(0 >= n) return [0, 0, rest];
    var k = n, acc = 0, rest$0 = rest;
    for(;;){
     if(0 === k) return [0, caml_call1(Stdlib_List[10], acc), rest$0];
     if(! rest$0) return [0, caml_call1(Stdlib_List[10], acc), 0];
     var
      rest$1 = rest$0[2],
      y = rest$0[1],
      acc$0 = [0, y, acc],
      k$0 = k - 1 | 0,
      k = k$0,
      acc = acc$0,
      rest$0 = rest$1;
    }
   }
   function last_exn(param){
    var param$0 = param;
    for(;;){
     if(! param$0) return caml_call1(Stdlib[2], cst_last_exn_empty_list);
     var x = param$0[1];
     if(! param$0[2]) return x;
     var xs = param$0[2], param$0 = xs;
    }
   }
   function remove_one(hand, c){
    var acc = 0, param = hand;
    for(;;){
     if(! param) return _a_;
     var xs = param[2], x = param[1];
     if(caml_equal(x, c)) return [0, caml_call2(Stdlib_List[13], acc, xs)];
     var acc$0 = [0, x, acc], acc = acc$0, param = xs;
    }
   }
   function remove_many(hand, to_take){
    var _E_ = [0, hand];
    function _F_(acc, c){
     if(0 === acc[0]){var h = acc[1]; return remove_one(h, c);}
     var e = acc[1];
     return [1, e];
    }
    return caml_call3(Stdlib_List[26], _F_, _E_, to_take);
   }
   function replace_nth(xs, idx, x){
    if(0 > idx) return _c_;
    var i = idx, acc = 0, param = xs;
    for(;;){
     if(! param) return _b_;
     var y = param[1], xs$0 = param[2];
     if(0 === i){
      var _D_ = caml_call1(Stdlib_List[10], acc);
      return [0, caml_call2(Stdlib[37], _D_, [0, x, xs$0])];
     }
     var
      xs$1 = param[2],
      acc$0 = [0, y, acc],
      i$0 = i - 1 | 0,
      i = i$0,
      acc = acc$0,
      param = xs$1;
    }
   }
   function clear_required_if_used(st, used){
    var match = st[9];
    if(! match) return st;
    var r = match[1];
    function _B_(_C_){return caml_equal(r, _C_);}
    return caml_call2(Stdlib_List[34], _B_, used)
            ? [0,
              st[1],
              st[2],
              st[3],
              st[4],
              st[5],
              st[6],
              st[7],
              st[8],
              0,
              st[10]]
            : st;
   }
   function apply_make_set(cards, st){
    if(3 > caml_call1(Stdlib_List[1], cards)) return _f_;
    if(! caml_call1(Rummy_engine_Rules[5], cards)) return _e_;
    var p = with_current(st), match = remove_many(p[3], cards);
    if(0 !== match[0]) return _d_;
    var
     new_hand = match[1],
     meld = [0, 0, cards],
     p$0 = [0, p[1], p[2], new_hand],
     st$0 =
       replace_current
        ([0,
          st[1],
          st[2],
          [0, meld, st[3]],
          st[4],
          st[5],
          st[6],
          st[7],
          st[8],
          st[9],
          st[10]],
         p$0),
     st$1 = clear_required_if_used(st$0, cards);
    return [0, st$1];
   }
   function apply_make_run(cards, st){
    if(3 > caml_call1(Stdlib_List[1], cards)) return _i_;
    if(! caml_call2(Rummy_engine_Rules[6], st[7], cards)) return _h_;
    var p = with_current(st), match = remove_many(p[3], cards);
    if(0 !== match[0]) return _g_;
    var
     new_hand = match[1],
     meld = [0, 1, cards],
     p$0 = [0, p[1], p[2], new_hand],
     st$0 =
       replace_current
        ([0,
          st[1],
          st[2],
          [0, meld, st[3]],
          st[4],
          st[5],
          st[6],
          st[7],
          st[8],
          st[9],
          st[10]],
         p$0),
     st$1 = clear_required_if_used(st$0, cards);
    return [0, st$1];
   }
   function apply_layoff(param, st){
    var
     meld_idx = param[2],
     card = param[1],
     p = with_current(st),
     match = remove_one(p[3], card);
    if(0 !== match[0]) return _m_;
    var
     hand_after_pop = match[1],
     match$0 = caml_call2(Stdlib_List[9], st[3], meld_idx);
    if(! match$0) return _l_;
    var m = match$0[1];
    if(! caml_call3(Rummy_engine_Rules[8], st[7], card, m)) return _k_;
    var
     updated_meld = [0, m[1], [0, card, m[2]]],
     match$1 = replace_nth(st[3], meld_idx, updated_meld);
    if(0 !== match$1[0]) return _j_;
    var
     melds = match$1[1],
     p$0 = [0, p[1], p[2], hand_after_pop],
     st$0 =
       replace_current
        ([0,
          st[1],
          st[2],
          melds,
          st[4],
          st[5],
          st[6],
          st[7],
          st[8],
          st[9],
          st[10]],
         p$0),
     st$1 = clear_required_if_used(st$0, [0, card, 0]);
    return [0, st$1];
   }
   function draw(source, st){
    var ph = st[6];
    if(ph) return [2, [0, ph]];
    if(typeof source !== "number"){
     var n = source[1];
     if(0 >= n) return _q_;
     var match$3 = take_n(n, st[2]), rest$1 = match$3[2], taken = match$3[1];
     if(! taken) return _p_;
     var
      bottom = last_exn(taken),
      p$3 = with_current(st),
      _A_ = caml_call2(Stdlib_List[13], taken, p$3[3]),
      p$4 = [0, p$3[1], p$3[2], _A_],
      st$2 =
        replace_current
         ([0,
           st[1],
           rest$1,
           st[3],
           st[4],
           st[5],
           1,
           st[7],
           st[8],
           [0, bottom],
           st[10]],
          p$4);
     return [0, st$2];
    }
    if(source){
     var match = top_and_rest(st[2]);
     if(! match) return _n_;
     var
      match$0 = match[1],
      rest = match$0[2],
      card = match$0[1],
      p = with_current(st),
      p$0 = [0, p[1], p[2], [0, card, p[3]]],
      st$0 =
        replace_current
         ([0,
           st[1],
           rest,
           st[3],
           st[4],
           st[5],
           1,
           st[7],
           st[8],
           st[9],
           st[10]],
          p$0);
     return [0, st$0];
    }
    var match$1 = top_and_rest(st[1]);
    if(! match$1) return st[2] ? _o_ : [1, st];
    var
     match$2 = match$1[1],
     rest$0 = match$2[2],
     card$0 = match$2[1],
     p$1 = with_current(st),
     p$2 = [0, p$1[1], p$1[2], [0, card$0, p$1[3]]],
     st$1 =
       replace_current
        ([0,
          rest$0,
          st[2],
          st[3],
          st[4],
          st[5],
          1,
          st[7],
          st[8],
          st[9],
          st[10]],
         p$2);
    return [0, st$1];
   }
   function play(action, st){
    var ph = st[6];
    if(1 !== ph) return [2, [0, ph]];
    if(typeof action === "number")
     var
      _z_ =
        st[9]
         ? _r_
         : [0,
           [0,
            st[1],
            st[2],
            st[3],
            st[4],
            st[5],
            2,
            st[7],
            st[8],
            st[9],
            st[10]]],
      res = _z_;
    else
     switch(action[0]){
       case 0:
        var cs = action[1], res = apply_make_set(cs, st); break;
       case 1:
        var cs$0 = action[1], res = apply_make_run(cs$0, st); break;
       default:
        var
         idx = action[2],
         card = action[1],
         res = apply_layoff([0, card, idx], st);
     }
    if(0 === res[0]){var st$0 = res[1]; return [0, st$0];}
    var e = res[1];
    return [2, e];
   }
   function discard(action, st){
    var ph = st[6];
    if(2 !== ph) return [2, [0, ph]];
    if(st[9]) return _s_;
    var c = action[1], p = with_current(st), match = remove_one(p[3], c);
    if(0 !== match[0]) return _t_;
    var
     new_hand = match[1],
     p$0 = [0, p[1], p[2], new_hand],
     st$0 =
       replace_current
        ([0,
          st[1],
          [0, c, st[2]],
          st[3],
          st[4],
          st[5],
          3,
          st[7],
          st[8],
          st[9],
          st[10]],
         p$0);
    return [0, st$0];
   }
   function endcheck(st){
    var ph = st[6];
    if(3 > ph) return [2, [0, ph]];
    var p = with_current(st);
    if(0 === p[3]) return [1, st];
    var
     _u_ = st[10],
     _v_ = st[9],
     _w_ = st[8],
     _x_ = st[7],
     _y_ = next_player_index(st),
     st$0 = [0, st[1], st[2], st[3], st[4], _y_, 0, _x_, _w_, _v_, _u_];
    return [0, st$0];
   }
   caml_call1(Ppx_inline_test_lib[7], cst_rummy_engine);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Rummy_engine_Engine);
   var
    Rummy_engine_Engine =
      [0,
       top_and_rest,
       with_current,
       replace_current,
       next_player_index,
       take_n,
       last_exn,
       remove_one,
       remove_many,
       replace_nth,
       clear_required_if_used,
       apply_make_set,
       apply_make_run,
       apply_layoff,
       draw,
       play,
       discard,
       endcheck];
   runtime.caml_register_global
    (35, Rummy_engine_Engine, cst_Rummy_engine_Engine$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Rummy_engine__Ai
//# unitInfo: Requires: Base__Random, Core, Core__Array, Core__Float, Core__List, Core__Option, Core__Time_ns, Ppx_bench_lib__Benchmark_accumulator, Ppx_expect_runtime, Ppx_inline_test_lib, Ppx_module_timer_runtime, Rummy_engine__Engine
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Rummy_engine_Ai$0 = "Rummy_engine__Ai",
    cst_rummy_engine$0 = "rummy_engine",
    caml_check_bound = runtime.caml_check_bound;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    skip = [0, 0, 0],
    from_deck = [0, 0, 0],
    Core = global_data.Core,
    Core_List = global_data.Core__List,
    Core_Float = global_data.Core__Float,
    Core_Time_ns = global_data.Core__Time_ns,
    Core_Array = global_data.Core__Array,
    Core_Option = global_data.Core__Option,
    Rummy_engine_Engine = global_data.Rummy_engine__Engine,
    Base_Random = global_data.Base__Random,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_expect_runtime = global_data.Ppx_expect_runtime,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Rummy_engine_Ai$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_rummy_engine$0);
   caml_call1(Ppx_expect_runtime[1][1], "src/ai.ml");
   caml_call2(Ppx_inline_test_lib[6], cst_rummy_engine$0, "ai.ml");
   var
    _a_ = [0, 0, 0],
    _e_ = [0, 0, 0],
    _d_ = [0, 0, 0],
    _c_ = [0, 0, 0],
    _b_ = [0, 1, 0],
    cst_rummy_engine = cst_rummy_engine$0,
    cst_Rummy_engine_Ai = cst_Rummy_engine_Ai$0;
   function choose_random(rng, xs){
    if(! xs) return 0;
    var
     _au_ = caml_call1(Core_List[45], xs),
     _av_ = caml_call2(Base_Random[19][7], rng, _au_);
    return [0, caml_call2(Core_List[58], xs, _av_)];
   }
   function combinations_k(k, xs){
    if(caml_call2(Core[90], k, 0)) return _a_;
    if(! xs) return 0;
    var ys = xs[2], y = xs[1];
    function _as_(rest){return [0, y, rest];}
    var
     _at_ = combinations_k(k - 1 | 0, ys),
     with_y = caml_call2(Core_List[51], _at_, _as_),
     without = combinations_k(k, ys);
    return caml_call2(Core[156], with_y, without);
   }
   function all_3plus_combos(hand){
    var n = caml_call1(Core_List[45], hand);
    function _aq_(k){return combinations_k(k, hand);}
    var _ar_ = caml_call5(Core_List[128], 0, 0, 0, 3, n + 1 | 0);
    return caml_call2(Core_List[14], _ar_, _aq_);
   }
   function apply_draw(source, st){
    var match = caml_call2(Rummy_engine_Engine[14], source, st);
    if(2 === match[0]) return 0;
    var st$0 = match[1];
    return [0, st$0];
   }
   function apply_play(action, st){
    var match = caml_call2(Rummy_engine_Engine[15], action, st);
    if(2 === match[0]) return 0;
    var st$0 = match[1];
    return [0, st$0];
   }
   function apply_discard(card, st){
    var match = caml_call2(Rummy_engine_Engine[16], [0, card], st);
    if(2 === match[0]) return 0;
    var st$0 = match[1];
    return [0, st$0];
   }
   function apply_endcheck(st){
    var match = caml_call1(Rummy_engine_Engine[17], st);
    if(2 === match[0]) return 0;
    var st$0 = match[1];
    return [0, st$0];
   }
   function candidate_draws(st){
    var
     from_discard1 = caml_call1(Core_List[18], st[2]) ? 0 : _b_,
     len = caml_call1(Core_List[45], st[2]);
    if(caml_call2(Core[89], len, 1))
     var from_discardN = 0;
    else
     var
      _ap_ = function(i){return [0, i + 1 | 0];},
      from_discardN = caml_call2(Core_List[40], len, _ap_);
    var _ao_ = caml_call2(Core[156], from_discard1, from_discardN);
    return caml_call2(Core[156], from_deck, _ao_);
   }
   function candidate_plays(st){
    var _af_ = st[5], p = caml_check_bound(st[4], _af_)[1 + _af_];
    function _ag_(cs){return [0, cs];}
    var
     _ah_ = all_3plus_combos(p[3]),
     set_actions = caml_call2(Core_List[51], _ah_, _ag_);
    function _ai_(cs){return [1, cs];}
    var
     _aj_ = all_3plus_combos(p[3]),
     run_actions = caml_call2(Core_List[51], _aj_, _ai_),
     mcount = caml_call1(Core_List[45], st[3]);
    function _ak_(c){
     function _an_(mi){return [2, c, mi];}
     return caml_call2(Core_List[40], mcount, _an_);
    }
    var
     lay_actions = caml_call2(Core_List[14], p[3], _ak_),
     _al_ = caml_call2(Core[156], lay_actions, skip),
     _am_ = caml_call2(Core[156], run_actions, _al_);
    return caml_call2(Core[156], set_actions, _am_);
   }
   function candidate_discards(st){
    var _ae_ = st[5], p = caml_check_bound(st[4], _ae_)[1 + _ae_];
    return p[3];
   }
   function legalize_draws(st){
    function _aa_(src){
     function _ac_(param){return src;}
     var _ad_ = apply_draw(src, st);
     return caml_call2(Core_Option[34], _ad_, _ac_);
    }
    var _ab_ = candidate_draws(st);
    return caml_call2(Core_List[13], _ab_, _aa_);
   }
   function legalize_plays(st){
    function _Y_(act){
     function ___(param){return act;}
     var _$_ = apply_play(act, st);
     return caml_call2(Core_Option[34], _$_, ___);
    }
    var _Z_ = candidate_plays(st);
    return caml_call2(Core_List[13], _Z_, _Y_);
   }
   function legalize_discards(st){
    function _U_(c){
     function _W_(param){return c;}
     var _X_ = apply_discard(c, st);
     return caml_call2(Core_Option[34], _X_, _W_);
    }
    var _V_ = candidate_discards(st);
    return caml_call2(Core_List[13], _V_, _U_);
   }
   function random_ai(rng, st){
    switch(st[6]){
      case 0:
       var
        draws = legalize_draws(st),
        _O_ = function(src){return apply_draw(src, st);},
        _P_ = choose_random(rng, draws);
       return caml_call2(Core_Option[32], _P_, _O_);
      case 1:
       var
        plays = legalize_plays(st),
        _Q_ = function(act){return apply_play(act, st);},
        _R_ = choose_random(rng, plays);
       return caml_call2(Core_Option[32], _R_, _Q_);
      case 2:
       var
        discards = legalize_discards(st),
        _S_ = function(c){return apply_discard(c, st);},
        _T_ = choose_random(rng, discards);
       return caml_call2(Core_Option[32], _T_, _S_);
      default: return apply_endcheck(st);
    }
   }
   function simulate_to_end(rng, pol0, pol1, st0){
    var steps = 20000, st = st0;
    for(;;){
     if(caml_call2(Core[89], steps, 0)) return st[5];
     var
      current = st[5],
      pol = caml_call2(Core[90], current, 0) ? pol0 : pol1,
      match = caml_call2(pol, rng, st);
     if(match){
      var
       st$0 = match[1],
       _K_ = caml_check_bound(st$0[4], 0)[1][3],
       empty0 = caml_call1(Core_List[18], _K_),
       _L_ = caml_check_bound(st$0[4], 1)[2][3],
       empty1 = caml_call1(Core_List[18], _L_);
      if(empty0 && ! empty1) return 0;
      if(empty1 && ! empty0) return 1;
      var steps$0 = steps - 1 | 0, steps = steps$0, st = st$0;
     }
     else{
      var match$0 = apply_endcheck(st);
      if(! match$0) return current;
      var
       st$1 = match$0[1],
       _M_ = caml_check_bound(st$1[4], 0)[1][3],
       empty0$0 = caml_call1(Core_List[18], _M_),
       _N_ = caml_check_bound(st$1[4], 1)[2][3],
       empty1$0 = caml_call1(Core_List[18], _N_);
      if(empty0$0 && ! empty1$0) return 0;
      if(empty1$0 && ! empty0$0) return 1;
      var steps$1 = steps - 1 | 0, steps = steps$1, st = st$1;
     }
    }
   }
   function timed_pick_draw(rng, st, choices, opponent, time_ms){
    if(! choices) return 0;
    var
     _B_ = caml_call1(Core_Time_ns[1][117], time_ms),
     _C_ = caml_call1(Core_Time_ns[66], 0),
     deadline = caml_call2(Core_Time_ns[67], _C_, _B_);
    function _D_(param){return _c_;}
    var
     _E_ = caml_call2(Core_List[51], choices, _D_),
     scores = caml_call1(Core_Array[24], _E_),
     i_ref = [0, 0];
    for(;;){
     var _F_ = caml_call1(Core_Time_ns[66], 0);
     if(! caml_call2(Core_Time_ns[19], _F_, deadline)){
      var
       _G_ =
         function(i, param, _H_){
          var
           n = _H_[2],
           w = _H_[1],
           best_score = param[2],
           best_i = param[1];
          if(caml_call2(Core[90], n, 0))
           var score = Core_Float[15];
          else
           var
            _I_ = caml_call1(Core_Float[33], n),
            _J_ = caml_call1(Core_Float[33], w),
            score = caml_call2(Core_Float[71], _J_, _I_);
          return caml_call2(Core_Float[129], score, best_score)
                  ? [0, i, score]
                  : [0, best_i, best_score];
         },
       best_i =
         caml_call3(Core_Array[49], scores, [0, 0, Core_Float[15]], _G_)[1];
      return apply_draw(caml_call2(Core_List[58], choices, best_i), st);
     }
     var i = i_ref[1];
     i_ref[1] = caml_call2(Core[237], i + 1 | 0, scores.length - 1);
     var
      src = caml_call2(Core_List[58], choices, i),
      match = apply_draw(src, st);
     if(match){
      var
       st_after = match[1],
       us = st[5],
       winner =
         caml_call2(Core[90], us, 0)
          ? simulate_to_end(rng, random_ai, opponent, st_after)
          : simulate_to_end(rng, opponent, random_ai, st_after),
       match$0 = caml_check_bound(scores, i)[1 + i],
       n = match$0[2],
       w = match$0[1],
       w$0 = caml_call2(Core[90], winner, us) ? w + 1 | 0 : w;
      caml_check_bound(scores, i)[1 + i] = [0, w$0, n + 1 | 0];
     }
    }
   }
   function timed_pick_play(rng, st, choices, opponent, time_ms){
    if(! choices) return 0;
    var
     _s_ = caml_call1(Core_Time_ns[1][117], time_ms),
     _t_ = caml_call1(Core_Time_ns[66], 0),
     deadline = caml_call2(Core_Time_ns[67], _t_, _s_);
    function _u_(param){return _d_;}
    var
     _v_ = caml_call2(Core_List[51], choices, _u_),
     scores = caml_call1(Core_Array[24], _v_),
     i_ref = [0, 0];
    for(;;){
     var _w_ = caml_call1(Core_Time_ns[66], 0);
     if(! caml_call2(Core_Time_ns[19], _w_, deadline)){
      var
       _x_ =
         function(i, param, _y_){
          var
           n = _y_[2],
           w = _y_[1],
           best_score = param[2],
           best_i = param[1];
          if(caml_call2(Core[90], n, 0))
           var score = Core_Float[15];
          else
           var
            _z_ = caml_call1(Core_Float[33], n),
            _A_ = caml_call1(Core_Float[33], w),
            score = caml_call2(Core_Float[71], _A_, _z_);
          return caml_call2(Core_Float[129], score, best_score)
                  ? [0, i, score]
                  : [0, best_i, best_score];
         },
       best_i =
         caml_call3(Core_Array[49], scores, [0, 0, Core_Float[15]], _x_)[1];
      return apply_play(caml_call2(Core_List[58], choices, best_i), st);
     }
     var i = i_ref[1];
     i_ref[1] = caml_call2(Core[237], i + 1 | 0, scores.length - 1);
     var
      act = caml_call2(Core_List[58], choices, i),
      match = apply_play(act, st);
     if(match){
      var
       st_after = match[1],
       us = st[5],
       winner =
         caml_call2(Core[90], us, 0)
          ? simulate_to_end(rng, random_ai, opponent, st_after)
          : simulate_to_end(rng, opponent, random_ai, st_after),
       match$0 = caml_check_bound(scores, i)[1 + i],
       n = match$0[2],
       w = match$0[1],
       w$0 = caml_call2(Core[90], winner, us) ? w + 1 | 0 : w;
      caml_check_bound(scores, i)[1 + i] = [0, w$0, n + 1 | 0];
     }
    }
   }
   function timed_pick_discard(rng, st, choices, opponent, time_ms){
    if(! choices) return 0;
    var
     _j_ = caml_call1(Core_Time_ns[1][117], time_ms),
     _k_ = caml_call1(Core_Time_ns[66], 0),
     deadline = caml_call2(Core_Time_ns[67], _k_, _j_);
    function _l_(param){return _e_;}
    var
     _m_ = caml_call2(Core_List[51], choices, _l_),
     scores = caml_call1(Core_Array[24], _m_),
     i_ref = [0, 0];
    for(;;){
     var _n_ = caml_call1(Core_Time_ns[66], 0);
     if(! caml_call2(Core_Time_ns[19], _n_, deadline)){
      var
       _o_ =
         function(i, param, _p_){
          var
           n = _p_[2],
           w = _p_[1],
           best_score = param[2],
           best_i = param[1];
          if(caml_call2(Core[90], n, 0))
           var score = Core_Float[15];
          else
           var
            _q_ = caml_call1(Core_Float[33], n),
            _r_ = caml_call1(Core_Float[33], w),
            score = caml_call2(Core_Float[71], _r_, _q_);
          return caml_call2(Core_Float[129], score, best_score)
                  ? [0, i, score]
                  : [0, best_i, best_score];
         },
       best_i =
         caml_call3(Core_Array[49], scores, [0, 0, Core_Float[15]], _o_)[1];
      return apply_discard(caml_call2(Core_List[58], choices, best_i), st);
     }
     var i = i_ref[1];
     i_ref[1] = caml_call2(Core[237], i + 1 | 0, scores.length - 1);
     var
      c = caml_call2(Core_List[58], choices, i),
      match = apply_discard(c, st);
     if(match){
      var
       st_after = match[1],
       us = st[5],
       winner =
         caml_call2(Core[90], us, 0)
          ? simulate_to_end(rng, random_ai, opponent, st_after)
          : simulate_to_end(rng, opponent, random_ai, st_after),
       match$0 = caml_check_bound(scores, i)[1 + i],
       n = match$0[2],
       w = match$0[1],
       w$0 = caml_call2(Core[90], winner, us) ? w + 1 | 0 : w;
      caml_check_bound(scores, i)[1 + i] = [0, w$0, n + 1 | 0];
     }
    }
   }
   function timed_ai(opt, opponent, rng, st){
    if(opt) var sth = opt[1], time_ms = sth; else var time_ms = 2000;
    switch(st[6]){
      case 0:
       var cands = legalize_draws(st);
       return timed_pick_draw(rng, st, cands, opponent, time_ms);
      case 1:
       var cands$0 = legalize_plays(st);
       return timed_pick_play(rng, st, cands$0, opponent, time_ms);
      case 2:
       var cands$1 = legalize_discards(st);
       return timed_pick_discard(rng, st, cands$1, opponent, time_ms);
      default: return apply_endcheck(st);
    }
   }
   function simulate_game(rng, p0, p1, st0){
    var steps = 50000, st = st0, max_steps = 50000;
    for(;;){
     if(caml_call2(Core[89], steps, 0)) return [0, st[5], max_steps];
     var
      cur = st[5],
      pol = caml_call2(Core[90], cur, 0) ? p0 : p1,
      match = caml_call2(pol, rng, st);
     if(match){
      var
       st$0 = match[1],
       _h_ = caml_check_bound(st$0[4], 0)[1][3],
       empty0 = caml_call1(Core_List[18], _h_),
       _i_ = caml_check_bound(st$0[4], 1)[2][3],
       empty1 = caml_call1(Core_List[18], _i_);
      if(empty0 && ! empty1) return [0, 0, (50000 - steps | 0) + 1 | 0];
      if(empty1 && ! empty0) return [0, 1, (50000 - steps | 0) + 1 | 0];
      var steps$0 = steps - 1 | 0, steps = steps$0, st = st$0;
     }
     else{
      var match$0 = apply_endcheck(st);
      if(! match$0) return [0, cur, 50000 - steps | 0];
      var
       st$1 = match$0[1],
       steps$1 = steps - 1 | 0,
       steps = steps$1,
       st = st$1;
     }
    }
   }
   function simulate_games(rng, games, mk_initial, p0, p1){
    var wins0 = [0, 0], wins1 = [0, 0], _f_ = 1;
    if(games >= 1){
     var for$0 = _f_;
     for(;;){
      var
       st0 = caml_call1(mk_initial, 0),
       r = simulate_game(rng, p0, p1, st0);
      if(caml_call2(Core[90], r[1], 0)) wins0[1]++; else wins1[1]++;
      var _g_ = for$0 + 1 | 0;
      if(games === for$0) break;
      var for$0 = _g_;
     }
    }
    return [0, wins0[1], wins1[1]];
   }
   caml_call1(Ppx_inline_test_lib[7], cst_rummy_engine);
   caml_call1(Ppx_expect_runtime[1][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Rummy_engine_Ai);
   var
    Rummy_engine_Ai =
      [0,
       choose_random,
       combinations_k,
       all_3plus_combos,
       apply_draw,
       apply_play,
       apply_discard,
       apply_endcheck,
       candidate_draws,
       candidate_plays,
       candidate_discards,
       legalize_draws,
       legalize_plays,
       legalize_discards,
       random_ai,
       simulate_to_end,
       timed_pick_draw,
       timed_pick_play,
       timed_pick_discard,
       timed_ai,
       simulate_game,
       simulate_games];
   runtime.caml_register_global(26, Rummy_engine_Ai, cst_Rummy_engine_Ai$0);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
